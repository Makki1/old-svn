
BootloaderCDC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008c  00800100  0001fe3a  00000ece  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e3a  0001f000  0001f000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080018c  0080018c  00000f5a  2**0
                  ALLOC
  3 .stab         000009d8  00000000  00000000  00000f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e2  00000000  00000000  00001934  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002c8  00000000  00000000  00001a16  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000074a  00000000  00000000  00001cde  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000047e8  00000000  00000000  00002428  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000115f  00000000  00000000  00006c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003eec  00000000  00000000  00007d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000410  00000000  00000000  0000bc5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000202c  00000000  00000000  0000c06c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002761  00000000  00000000  0000e098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000358  00000000  00000000  000107f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001f000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
   1f000:	4b c0       	rjmp	.+150    	; 0x1f098 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   1f002:	00 00       	nop

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
   1f004:	66 c0       	rjmp	.+204    	; 0x1f0d2 <__bad_interrupt>
   1f006:	00 00       	nop
   1f008:	64 c0       	rjmp	.+200    	; 0x1f0d2 <__bad_interrupt>
   1f00a:	00 00       	nop
   1f00c:	62 c0       	rjmp	.+196    	; 0x1f0d2 <__bad_interrupt>
   1f00e:	00 00       	nop
   1f010:	60 c0       	rjmp	.+192    	; 0x1f0d2 <__bad_interrupt>
   1f012:	00 00       	nop
   1f014:	5e c0       	rjmp	.+188    	; 0x1f0d2 <__bad_interrupt>
   1f016:	00 00       	nop
   1f018:	5c c0       	rjmp	.+184    	; 0x1f0d2 <__bad_interrupt>
   1f01a:	00 00       	nop
   1f01c:	5a c0       	rjmp	.+180    	; 0x1f0d2 <__bad_interrupt>
   1f01e:	00 00       	nop
   1f020:	58 c0       	rjmp	.+176    	; 0x1f0d2 <__bad_interrupt>
   1f022:	00 00       	nop
   1f024:	56 c0       	rjmp	.+172    	; 0x1f0d2 <__bad_interrupt>
   1f026:	00 00       	nop
   1f028:	68 c4       	rjmp	.+2256   	; 0x1f8fa <__vector_10>
   1f02a:	00 00       	nop
   1f02c:	52 c0       	rjmp	.+164    	; 0x1f0d2 <__bad_interrupt>
   1f02e:	00 00       	nop
   1f030:	50 c0       	rjmp	.+160    	; 0x1f0d2 <__bad_interrupt>
   1f032:	00 00       	nop
   1f034:	4e c0       	rjmp	.+156    	; 0x1f0d2 <__bad_interrupt>
   1f036:	00 00       	nop
   1f038:	4c c0       	rjmp	.+152    	; 0x1f0d2 <__bad_interrupt>
   1f03a:	00 00       	nop
   1f03c:	4a c0       	rjmp	.+148    	; 0x1f0d2 <__bad_interrupt>
   1f03e:	00 00       	nop
   1f040:	48 c0       	rjmp	.+144    	; 0x1f0d2 <__bad_interrupt>
   1f042:	00 00       	nop
   1f044:	46 c0       	rjmp	.+140    	; 0x1f0d2 <__bad_interrupt>
   1f046:	00 00       	nop
   1f048:	44 c0       	rjmp	.+136    	; 0x1f0d2 <__bad_interrupt>
   1f04a:	00 00       	nop
   1f04c:	42 c0       	rjmp	.+132    	; 0x1f0d2 <__bad_interrupt>
   1f04e:	00 00       	nop
   1f050:	41 c0       	rjmp	.+130    	; 0x1f0d4 <__vector_20>
   1f052:	00 00       	nop
   1f054:	3e c0       	rjmp	.+124    	; 0x1f0d2 <__bad_interrupt>
   1f056:	00 00       	nop
   1f058:	3c c0       	rjmp	.+120    	; 0x1f0d2 <__bad_interrupt>
   1f05a:	00 00       	nop
   1f05c:	3a c0       	rjmp	.+116    	; 0x1f0d2 <__bad_interrupt>
   1f05e:	00 00       	nop
   1f060:	38 c0       	rjmp	.+112    	; 0x1f0d2 <__bad_interrupt>
   1f062:	00 00       	nop
   1f064:	36 c0       	rjmp	.+108    	; 0x1f0d2 <__bad_interrupt>
   1f066:	00 00       	nop
   1f068:	34 c0       	rjmp	.+104    	; 0x1f0d2 <__bad_interrupt>
   1f06a:	00 00       	nop
   1f06c:	32 c0       	rjmp	.+100    	; 0x1f0d2 <__bad_interrupt>
   1f06e:	00 00       	nop
   1f070:	30 c0       	rjmp	.+96     	; 0x1f0d2 <__bad_interrupt>
   1f072:	00 00       	nop
   1f074:	2e c0       	rjmp	.+92     	; 0x1f0d2 <__bad_interrupt>
   1f076:	00 00       	nop
   1f078:	2c c0       	rjmp	.+88     	; 0x1f0d2 <__bad_interrupt>
   1f07a:	00 00       	nop
   1f07c:	2a c0       	rjmp	.+84     	; 0x1f0d2 <__bad_interrupt>
   1f07e:	00 00       	nop
   1f080:	28 c0       	rjmp	.+80     	; 0x1f0d2 <__bad_interrupt>
   1f082:	00 00       	nop
   1f084:	26 c0       	rjmp	.+76     	; 0x1f0d2 <__bad_interrupt>
   1f086:	00 00       	nop
   1f088:	24 c0       	rjmp	.+72     	; 0x1f0d2 <__bad_interrupt>
   1f08a:	00 00       	nop
   1f08c:	22 c0       	rjmp	.+68     	; 0x1f0d2 <__bad_interrupt>
   1f08e:	00 00       	nop
   1f090:	20 c0       	rjmp	.+64     	; 0x1f0d2 <__bad_interrupt>
   1f092:	00 00       	nop
   1f094:	1e c0       	rjmp	.+60     	; 0x1f0d2 <__bad_interrupt>
   1f096:	00 00       	nop

0001f098 <__ctors_end>:
   1f098:	11 24       	eor	r1, r1
   1f09a:	1f be       	out	0x3f, r1	; 63
   1f09c:	cf ef       	ldi	r28, 0xFF	; 255
   1f09e:	d0 e2       	ldi	r29, 0x20	; 32
   1f0a0:	de bf       	out	0x3e, r29	; 62
   1f0a2:	cd bf       	out	0x3d, r28	; 61

0001f0a4 <__do_copy_data>:
   1f0a4:	11 e0       	ldi	r17, 0x01	; 1
   1f0a6:	a0 e0       	ldi	r26, 0x00	; 0
   1f0a8:	b1 e0       	ldi	r27, 0x01	; 1
   1f0aa:	ea e3       	ldi	r30, 0x3A	; 58
   1f0ac:	fe ef       	ldi	r31, 0xFE	; 254
   1f0ae:	01 e0       	ldi	r16, 0x01	; 1
   1f0b0:	0b bf       	out	0x3b, r16	; 59
   1f0b2:	02 c0       	rjmp	.+4      	; 0x1f0b8 <__do_copy_data+0x14>
   1f0b4:	07 90       	elpm	r0, Z+
   1f0b6:	0d 92       	st	X+, r0
   1f0b8:	ac 38       	cpi	r26, 0x8C	; 140
   1f0ba:	b1 07       	cpc	r27, r17
   1f0bc:	d9 f7       	brne	.-10     	; 0x1f0b4 <__do_copy_data+0x10>

0001f0be <__do_clear_bss>:
   1f0be:	11 e0       	ldi	r17, 0x01	; 1
   1f0c0:	ac e8       	ldi	r26, 0x8C	; 140
   1f0c2:	b1 e0       	ldi	r27, 0x01	; 1
   1f0c4:	01 c0       	rjmp	.+2      	; 0x1f0c8 <.do_clear_bss_start>

0001f0c6 <.do_clear_bss_loop>:
   1f0c6:	1d 92       	st	X+, r1

0001f0c8 <.do_clear_bss_start>:
   1f0c8:	aa 39       	cpi	r26, 0x9A	; 154
   1f0ca:	b1 07       	cpc	r27, r17
   1f0cc:	e1 f7       	brne	.-8      	; 0x1f0c6 <.do_clear_bss_loop>
   1f0ce:	46 d3       	rcall	.+1676   	; 0x1f75c <main>
   1f0d0:	b2 c6       	rjmp	.+3428   	; 0x1fe36 <_exit>

0001f0d2 <__bad_interrupt>:
   1f0d2:	96 cf       	rjmp	.-212    	; 0x1f000 <__vectors>

0001f0d4 <__vector_20>:
	TCCR1B = ((1 << CS11) | (1 << CS10));	
}

/** ISR to periodically toggle the LEDs on the board to indicate that the bootloader is active. */
ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
   1f0d4:	1f 92       	push	r1
   1f0d6:	0f 92       	push	r0
   1f0d8:	0f b6       	in	r0, 0x3f	; 63
   1f0da:	0f 92       	push	r0
   1f0dc:	11 24       	eor	r1, r1
   1f0de:	8f 93       	push	r24
   1f0e0:	9f 93       	push	r25
				PORTD = ((PORTD & ~LEDMask) | ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PORTD ^= LEDMask;
   1f0e2:	8b b1       	in	r24, 0x0b	; 11
   1f0e4:	90 e3       	ldi	r25, 0x30	; 48
   1f0e6:	89 27       	eor	r24, r25
   1f0e8:	8b b9       	out	0x0b, r24	; 11
	LEDs_ToggleLEDs(LEDS_LED1 | LEDS_LED2);
}
   1f0ea:	9f 91       	pop	r25
   1f0ec:	8f 91       	pop	r24
   1f0ee:	0f 90       	pop	r0
   1f0f0:	0f be       	out	0x3f, r0	; 63
   1f0f2:	0f 90       	pop	r0
   1f0f4:	1f 90       	pop	r1
   1f0f6:	18 95       	reti

0001f0f8 <FetchNextCommandByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1f0f8:	84 e0       	ldi	r24, 0x04	; 4
   1f0fa:	80 93 e9 00 	sts	0x00E9, r24
   1f0fe:	0d c0       	rjmp	.+26     	; 0x1f11a <FetchNextCommandByte+0x22>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1f100:	80 91 e8 00 	lds	r24, 0x00E8
   1f104:	8b 77       	andi	r24, 0x7B	; 123
   1f106:	80 93 e8 00 	sts	0x00E8, r24
   1f10a:	03 c0       	rjmp	.+6      	; 0x1f112 <FetchNextCommandByte+0x1a>
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f10c:	8e b3       	in	r24, 0x1e	; 30
   1f10e:	88 23       	and	r24, r24
   1f110:	51 f0       	breq	.+20     	; 0x1f126 <FetchNextCommandByte+0x2e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1f112:	80 91 e8 00 	lds	r24, 0x00E8
	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
   1f116:	82 ff       	sbrs	r24, 2
   1f118:	f9 cf       	rjmp	.-14     	; 0x1f10c <FetchNextCommandByte+0x14>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
   1f11a:	80 91 e8 00 	lds	r24, 0x00E8
{
	/* Select the OUT endpoint so that the next data byte can be read */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
   1f11e:	85 ff       	sbrs	r24, 5
   1f120:	ef cf       	rjmp	.-34     	; 0x1f100 <FetchNextCommandByte+0x8>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1f122:	80 91 f1 00 	lds	r24, 0x00F1
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
}
   1f126:	08 95       	ret

0001f128 <WriteNextResponseByte>:
 *  bank when full ready for the next byte in the packet to the host.
 *
 *  \param[in] Response  Next response byte to send to the host
 */
static void WriteNextResponseByte(const uint8_t Response)
{
   1f128:	98 2f       	mov	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1f12a:	83 e0       	ldi	r24, 0x03	; 3
   1f12c:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
   1f130:	80 91 e8 00 	lds	r24, 0x00E8
	/* Select the IN endpoint so that the next data byte can be written */
	Endpoint_SelectEndpoint(CDC_TX_EPNUM);

	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
   1f134:	85 fd       	sbrc	r24, 5
   1f136:	0d c0       	rjmp	.+26     	; 0x1f152 <WriteNextResponseByte+0x2a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1f138:	80 91 e8 00 	lds	r24, 0x00E8
   1f13c:	8e 77       	andi	r24, 0x7E	; 126
   1f13e:	80 93 e8 00 	sts	0x00E8, r24
   1f142:	03 c0       	rjmp	.+6      	; 0x1f14a <WriteNextResponseByte+0x22>
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f144:	8e b3       	in	r24, 0x1e	; 30
   1f146:	88 23       	and	r24, r24
   1f148:	31 f0       	breq	.+12     	; 0x1f156 <WriteNextResponseByte+0x2e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1f14a:	80 91 e8 00 	lds	r24, 0x00E8
	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
   1f14e:	80 ff       	sbrs	r24, 0
   1f150:	f9 cf       	rjmp	.-14     	; 0x1f144 <WriteNextResponseByte+0x1c>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1f152:	90 93 f1 00 	sts	0x00F1, r25
   1f156:	08 95       	ret

0001f158 <CDC_Task>:

/** Task to read in AVR910 commands from the CDC data OUT endpoint, process them, perform the required actions
 *  and send the appropriate response back to the host.
 */
void CDC_Task(void)
{
   1f158:	4f 92       	push	r4
   1f15a:	5f 92       	push	r5
   1f15c:	6f 92       	push	r6
   1f15e:	7f 92       	push	r7
   1f160:	8f 92       	push	r8
   1f162:	9f 92       	push	r9
   1f164:	af 92       	push	r10
   1f166:	bf 92       	push	r11
   1f168:	cf 92       	push	r12
   1f16a:	df 92       	push	r13
   1f16c:	ef 92       	push	r14
   1f16e:	ff 92       	push	r15
   1f170:	0f 93       	push	r16
   1f172:	1f 93       	push	r17
   1f174:	cf 93       	push	r28
   1f176:	df 93       	push	r29
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1f178:	84 e0       	ldi	r24, 0x04	; 4
   1f17a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1f17e:	80 91 e8 00 	lds	r24, 0x00E8
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* Check if endpoint has a command in it sent from the host */
	if (!(Endpoint_IsOUTReceived()))
   1f182:	82 ff       	sbrs	r24, 2
   1f184:	73 c2       	rjmp	.+1254   	; 0x1f66c <CDC_Task+0x514>
	  return;

	/* Read in the bootloader command (first byte sent from host) */
	uint8_t Command = FetchNextCommandByte();
   1f186:	b8 df       	rcall	.-144    	; 0x1f0f8 <FetchNextCommandByte>
   1f188:	18 2f       	mov	r17, r24

	if (Command == 'E')
   1f18a:	85 34       	cpi	r24, 0x45	; 69
   1f18c:	19 f4       	brne	.+6      	; 0x1f194 <CDC_Task+0x3c>
	{
		RunBootloader = false;
   1f18e:	10 92 08 01 	sts	0x0108, r1
   1f192:	03 c0       	rjmp	.+6      	; 0x1f19a <CDC_Task+0x42>
	
		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'T')
   1f194:	84 35       	cpi	r24, 0x54	; 84
   1f196:	19 f4       	brne	.+6      	; 0x1f19e <CDC_Task+0x46>
	{
		FetchNextCommandByte();
   1f198:	af df       	rcall	.-162    	; 0x1f0f8 <FetchNextCommandByte>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
   1f19a:	8d e0       	ldi	r24, 0x0D	; 13
   1f19c:	3d c2       	rjmp	.+1146   	; 0x1f618 <CDC_Task+0x4c0>
	}
	else if ((Command == 'L') || (Command == 'P'))
   1f19e:	8c 34       	cpi	r24, 0x4C	; 76
   1f1a0:	e1 f3       	breq	.-8      	; 0x1f19a <CDC_Task+0x42>
   1f1a2:	80 35       	cpi	r24, 0x50	; 80
   1f1a4:	d1 f3       	breq	.-12     	; 0x1f19a <CDC_Task+0x42>
	{
		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 't')
   1f1a6:	84 37       	cpi	r24, 0x74	; 116
   1f1a8:	11 f4       	brne	.+4      	; 0x1f1ae <CDC_Task+0x56>
	{
		/* Return ATMEGA128 part code - this is only to allow AVRProg to use the bootloader */
		WriteNextResponseByte(0x44);
   1f1aa:	84 e4       	ldi	r24, 0x44	; 68
   1f1ac:	95 c0       	rjmp	.+298    	; 0x1f2d8 <CDC_Task+0x180>
		WriteNextResponseByte(0x00);
	}
	else if (Command == 'a')
   1f1ae:	81 36       	cpi	r24, 0x61	; 97
   1f1b0:	11 f4       	brne	.+4      	; 0x1f1b6 <CDC_Task+0x5e>
	{
		/* Indicate auto-address increment is supported */
		WriteNextResponseByte('Y');
   1f1b2:	89 e5       	ldi	r24, 0x59	; 89
   1f1b4:	31 c2       	rjmp	.+1122   	; 0x1f618 <CDC_Task+0x4c0>
	}
	else if (Command == 'A')
   1f1b6:	81 34       	cpi	r24, 0x41	; 65
   1f1b8:	b1 f4       	brne	.+44     	; 0x1f1e6 <CDC_Task+0x8e>
	{
		/* Set the current address to that given by the host */
		CurrAddress   = (FetchNextCommandByte() << 9);
   1f1ba:	9e df       	rcall	.-196    	; 0x1f0f8 <FetchNextCommandByte>
   1f1bc:	18 2f       	mov	r17, r24
		CurrAddress  |= (FetchNextCommandByte() << 1);
   1f1be:	9c df       	rcall	.-200    	; 0x1f0f8 <FetchNextCommandByte>
   1f1c0:	90 e0       	ldi	r25, 0x00	; 0
   1f1c2:	88 0f       	add	r24, r24
   1f1c4:	99 1f       	adc	r25, r25
   1f1c6:	aa 27       	eor	r26, r26
   1f1c8:	97 fd       	sbrc	r25, 7
   1f1ca:	a0 95       	com	r26
   1f1cc:	ba 2f       	mov	r27, r26
   1f1ce:	31 2f       	mov	r19, r17
   1f1d0:	33 0f       	add	r19, r19
   1f1d2:	20 e0       	ldi	r18, 0x00	; 0
   1f1d4:	44 27       	eor	r20, r20
   1f1d6:	37 fd       	sbrc	r19, 7
   1f1d8:	40 95       	com	r20
   1f1da:	54 2f       	mov	r21, r20
   1f1dc:	82 2b       	or	r24, r18
   1f1de:	93 2b       	or	r25, r19
   1f1e0:	a4 2b       	or	r26, r20
   1f1e2:	b5 2b       	or	r27, r21
   1f1e4:	ea c1       	rjmp	.+980    	; 0x1f5ba <CDC_Task+0x462>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'p')
   1f1e6:	80 37       	cpi	r24, 0x70	; 112
   1f1e8:	11 f4       	brne	.+4      	; 0x1f1ee <CDC_Task+0x96>
	{
		/* Indicate serial programmer back to the host */
		WriteNextResponseByte('S');
   1f1ea:	83 e5       	ldi	r24, 0x53	; 83
   1f1ec:	15 c2       	rjmp	.+1066   	; 0x1f618 <CDC_Task+0x4c0>
	}
	else if (Command == 'S')
   1f1ee:	83 35       	cpi	r24, 0x53	; 83
   1f1f0:	49 f4       	brne	.+18     	; 0x1f204 <CDC_Task+0xac>
   1f1f2:	c0 e0       	ldi	r28, 0x00	; 0
   1f1f4:	d1 e0       	ldi	r29, 0x01	; 1
	{
		/* Write the 7-byte software identifier to the endpoint */
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
   1f1f6:	89 91       	ld	r24, Y+
   1f1f8:	97 df       	rcall	.-210    	; 0x1f128 <WriteNextResponseByte>
		WriteNextResponseByte('S');
	}
	else if (Command == 'S')
	{
		/* Write the 7-byte software identifier to the endpoint */
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
   1f1fa:	41 e0       	ldi	r20, 0x01	; 1
   1f1fc:	c7 30       	cpi	r28, 0x07	; 7
   1f1fe:	d4 07       	cpc	r29, r20
   1f200:	d1 f7       	brne	.-12     	; 0x1f1f6 <CDC_Task+0x9e>
   1f202:	0b c2       	rjmp	.+1046   	; 0x1f61a <CDC_Task+0x4c2>
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
	}
	else if (Command == 'V')
   1f204:	86 35       	cpi	r24, 0x56	; 86
   1f206:	21 f4       	brne	.+8      	; 0x1f210 <CDC_Task+0xb8>
	{
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
   1f208:	81 e3       	ldi	r24, 0x31	; 49
   1f20a:	8e df       	rcall	.-228    	; 0x1f128 <WriteNextResponseByte>
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
   1f20c:	80 e3       	ldi	r24, 0x30	; 48
   1f20e:	04 c2       	rjmp	.+1032   	; 0x1f618 <CDC_Task+0x4c0>
	}
	else if (Command == 's')
   1f210:	83 37       	cpi	r24, 0x73	; 115
   1f212:	31 f4       	brne	.+12     	; 0x1f220 <CDC_Task+0xc8>
	{
		WriteNextResponseByte(AVR_SIGNATURE_3);
   1f214:	82 e8       	ldi	r24, 0x82	; 130
   1f216:	88 df       	rcall	.-240    	; 0x1f128 <WriteNextResponseByte>
		WriteNextResponseByte(AVR_SIGNATURE_2);
   1f218:	87 e9       	ldi	r24, 0x97	; 151
   1f21a:	86 df       	rcall	.-244    	; 0x1f128 <WriteNextResponseByte>
		WriteNextResponseByte(AVR_SIGNATURE_1);
   1f21c:	8e e1       	ldi	r24, 0x1E	; 30
   1f21e:	fc c1       	rjmp	.+1016   	; 0x1f618 <CDC_Task+0x4c0>
	}
	else if (Command == 'e')
   1f220:	85 36       	cpi	r24, 0x65	; 101
   1f222:	29 f5       	brne	.+74     	; 0x1f26e <CDC_Task+0x116>
   1f224:	80 e0       	ldi	r24, 0x00	; 0
   1f226:	90 e0       	ldi	r25, 0x00	; 0
   1f228:	a0 e0       	ldi	r26, 0x00	; 0
   1f22a:	b0 e0       	ldi	r27, 0x00	; 0
	{
		/* Clear the application section of flash */
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
		{
			boot_page_erase(CurrFlashAddress);
   1f22c:	33 e0       	ldi	r19, 0x03	; 3
			boot_spm_busy_wait();
			boot_page_write(CurrFlashAddress);
   1f22e:	25 e0       	ldi	r18, 0x05	; 5
	else if (Command == 'e')
	{
		/* Clear the application section of flash */
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
		{
			boot_page_erase(CurrFlashAddress);
   1f230:	fc 01       	movw	r30, r24
   1f232:	a0 93 5b 00 	sts	0x005B, r26
   1f236:	30 93 57 00 	sts	0x0057, r19
   1f23a:	e8 95       	spm
			boot_spm_busy_wait();
   1f23c:	07 b6       	in	r0, 0x37	; 55
   1f23e:	00 fc       	sbrc	r0, 0
   1f240:	fd cf       	rjmp	.-6      	; 0x1f23c <CDC_Task+0xe4>
			boot_page_write(CurrFlashAddress);
   1f242:	fc 01       	movw	r30, r24
   1f244:	a0 93 5b 00 	sts	0x005B, r26
   1f248:	20 93 57 00 	sts	0x0057, r18
   1f24c:	e8 95       	spm
			boot_spm_busy_wait();
   1f24e:	07 b6       	in	r0, 0x37	; 55
   1f250:	00 fc       	sbrc	r0, 0
   1f252:	fd cf       	rjmp	.-6      	; 0x1f24e <CDC_Task+0xf6>
		WriteNextResponseByte(AVR_SIGNATURE_1);
	}
	else if (Command == 'e')
	{
		/* Clear the application section of flash */
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
   1f254:	80 50       	subi	r24, 0x00	; 0
   1f256:	9f 4f       	sbci	r25, 0xFF	; 255
   1f258:	af 4f       	sbci	r26, 0xFF	; 255
   1f25a:	bf 4f       	sbci	r27, 0xFF	; 255
   1f25c:	80 30       	cpi	r24, 0x00	; 0
   1f25e:	40 ef       	ldi	r20, 0xF0	; 240
   1f260:	94 07       	cpc	r25, r20
   1f262:	41 e0       	ldi	r20, 0x01	; 1
   1f264:	a4 07       	cpc	r26, r20
   1f266:	40 e0       	ldi	r20, 0x00	; 0
   1f268:	b4 07       	cpc	r27, r20
   1f26a:	11 f7       	brne	.-60     	; 0x1f230 <CDC_Task+0xd8>
   1f26c:	96 cf       	rjmp	.-212    	; 0x1f19a <CDC_Task+0x42>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	#if !defined(NO_LOCK_BYTE_WRITE_SUPPORT)
	else if (Command == 'l')
   1f26e:	8c 36       	cpi	r24, 0x6C	; 108
   1f270:	51 f4       	brne	.+20     	; 0x1f286 <CDC_Task+0x12e>
	{
		/* Set the lock bits to those given by the host */
		boot_lock_bits_set(FetchNextCommandByte());
   1f272:	42 df       	rcall	.-380    	; 0x1f0f8 <FetchNextCommandByte>
   1f274:	80 95       	com	r24
   1f276:	99 e0       	ldi	r25, 0x09	; 9
   1f278:	e1 e0       	ldi	r30, 0x01	; 1
   1f27a:	f0 e0       	ldi	r31, 0x00	; 0
   1f27c:	08 2e       	mov	r0, r24
   1f27e:	90 93 57 00 	sts	0x0057, r25
   1f282:	e8 95       	spm
   1f284:	8a cf       	rjmp	.-236    	; 0x1f19a <CDC_Task+0x42>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	#endif
	else if (Command == 'r')
   1f286:	82 37       	cpi	r24, 0x72	; 114
   1f288:	39 f4       	brne	.+14     	; 0x1f298 <CDC_Task+0x140>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
   1f28a:	e1 e0       	ldi	r30, 0x01	; 1
   1f28c:	f0 e0       	ldi	r31, 0x00	; 0
   1f28e:	89 e0       	ldi	r24, 0x09	; 9
   1f290:	80 93 57 00 	sts	0x0057, r24
   1f294:	84 91       	lpm	r24, Z+
   1f296:	c0 c1       	rjmp	.+896    	; 0x1f618 <CDC_Task+0x4c0>
	}
	else if (Command == 'F')
   1f298:	86 34       	cpi	r24, 0x46	; 70
   1f29a:	39 f4       	brne	.+14     	; 0x1f2aa <CDC_Task+0x152>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
   1f29c:	e0 e0       	ldi	r30, 0x00	; 0
   1f29e:	f0 e0       	ldi	r31, 0x00	; 0
   1f2a0:	89 e0       	ldi	r24, 0x09	; 9
   1f2a2:	80 93 57 00 	sts	0x0057, r24
   1f2a6:	84 91       	lpm	r24, Z+
   1f2a8:	b7 c1       	rjmp	.+878    	; 0x1f618 <CDC_Task+0x4c0>
	}
	else if (Command == 'N')
   1f2aa:	8e 34       	cpi	r24, 0x4E	; 78
   1f2ac:	39 f4       	brne	.+14     	; 0x1f2bc <CDC_Task+0x164>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
   1f2ae:	e3 e0       	ldi	r30, 0x03	; 3
   1f2b0:	f0 e0       	ldi	r31, 0x00	; 0
   1f2b2:	89 e0       	ldi	r24, 0x09	; 9
   1f2b4:	80 93 57 00 	sts	0x0057, r24
   1f2b8:	84 91       	lpm	r24, Z+
   1f2ba:	ae c1       	rjmp	.+860    	; 0x1f618 <CDC_Task+0x4c0>
	}
	else if (Command == 'Q')
   1f2bc:	81 35       	cpi	r24, 0x51	; 81
   1f2be:	39 f4       	brne	.+14     	; 0x1f2ce <CDC_Task+0x176>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
   1f2c0:	e2 e0       	ldi	r30, 0x02	; 2
   1f2c2:	f0 e0       	ldi	r31, 0x00	; 0
   1f2c4:	89 e0       	ldi	r24, 0x09	; 9
   1f2c6:	80 93 57 00 	sts	0x0057, r24
   1f2ca:	84 91       	lpm	r24, Z+
   1f2cc:	a5 c1       	rjmp	.+842    	; 0x1f618 <CDC_Task+0x4c0>
	}
	#if !defined(NO_BLOCK_SUPPORT)
	else if (Command == 'b')
   1f2ce:	82 36       	cpi	r24, 0x62	; 98
   1f2d0:	31 f4       	brne	.+12     	; 0x1f2de <CDC_Task+0x186>
	{
		WriteNextResponseByte('Y');
   1f2d2:	89 e5       	ldi	r24, 0x59	; 89
   1f2d4:	29 df       	rcall	.-430    	; 0x1f128 <WriteNextResponseByte>

		/* Send block size to the host */
		WriteNextResponseByte(SPM_PAGESIZE >> 8);
   1f2d6:	81 e0       	ldi	r24, 0x01	; 1
   1f2d8:	27 df       	rcall	.-434    	; 0x1f128 <WriteNextResponseByte>
		WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
   1f2da:	80 e0       	ldi	r24, 0x00	; 0
   1f2dc:	9d c1       	rjmp	.+826    	; 0x1f618 <CDC_Task+0x4c0>
	}
	else if ((Command == 'B') || (Command == 'g'))
   1f2de:	82 34       	cpi	r24, 0x42	; 66
   1f2e0:	19 f0       	breq	.+6      	; 0x1f2e8 <CDC_Task+0x190>
   1f2e2:	87 36       	cpi	r24, 0x67	; 103
   1f2e4:	09 f0       	breq	.+2      	; 0x1f2e8 <CDC_Task+0x190>
   1f2e6:	e6 c0       	rjmp	.+460    	; 0x1f4b4 <CDC_Task+0x35c>
	char     MemoryType;

	bool     HighByte = false;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
   1f2e8:	07 df       	rcall	.-498    	; 0x1f0f8 <FetchNextCommandByte>
   1f2ea:	08 2f       	mov	r16, r24
	BlockSize |=  FetchNextCommandByte();
   1f2ec:	05 df       	rcall	.-502    	; 0x1f0f8 <FetchNextCommandByte>
   1f2ee:	f8 2e       	mov	r15, r24

	MemoryType =  FetchNextCommandByte();
   1f2f0:	03 df       	rcall	.-506    	; 0x1f0f8 <FetchNextCommandByte>
   1f2f2:	68 2e       	mov	r6, r24

	if ((MemoryType != 'E') && (MemoryType != 'F'))
   1f2f4:	85 54       	subi	r24, 0x45	; 69
   1f2f6:	82 30       	cpi	r24, 0x02	; 2
   1f2f8:	08 f0       	brcs	.+2      	; 0x1f2fc <CDC_Task+0x1a4>
   1f2fa:	8d c1       	rjmp	.+794    	; 0x1f616 <CDC_Task+0x4be>
	char     MemoryType;

	bool     HighByte = false;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
   1f2fc:	90 2f       	mov	r25, r16
   1f2fe:	80 e0       	ldi	r24, 0x00	; 0
	BlockSize |=  FetchNextCommandByte();
   1f300:	cf 2d       	mov	r28, r15
   1f302:	d0 e0       	ldi	r29, 0x00	; 0
   1f304:	c8 2b       	or	r28, r24
   1f306:	d9 2b       	or	r29, r25

		return;
	}

	/* Check if command is to read memory */
	if (Command == 'g')
   1f308:	17 36       	cpi	r17, 0x67	; 103
   1f30a:	09 f0       	breq	.+2      	; 0x1f30e <CDC_Task+0x1b6>
   1f30c:	50 c0       	rjmp	.+160    	; 0x1f3ae <CDC_Task+0x256>
	{
		/* Re-enable RWW section */
		boot_rww_enable();
   1f30e:	81 e1       	ldi	r24, 0x11	; 17
   1f310:	80 93 57 00 	sts	0x0057, r24
   1f314:	e8 95       	spm
   1f316:	dd 24       	eor	r13, r13

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
				  CurrAddress += 2;

				HighByte = !HighByte;
   1f318:	cc 24       	eor	r12, r12
   1f31a:	c3 94       	inc	r12
   1f31c:	44 c0       	rjmp	.+136    	; 0x1f3a6 <CDC_Task+0x24e>
   1f31e:	e0 90 8c 01 	lds	r14, 0x018C
   1f322:	f0 90 8d 01 	lds	r15, 0x018D
   1f326:	00 91 8e 01 	lds	r16, 0x018E
   1f32a:	10 91 8f 01 	lds	r17, 0x018F
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
		{
			if (MemoryType == 'F')
   1f32e:	86 e4       	ldi	r24, 0x46	; 70
   1f330:	68 16       	cp	r6, r24
   1f332:	01 f5       	brne	.+64     	; 0x1f374 <CDC_Task+0x21c>
			{
				/* Read the next FLASH byte from the current FLASH page */
				#if (FLASHEND > 0xFFFF)
				WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
   1f334:	8d 2d       	mov	r24, r13
   1f336:	90 e0       	ldi	r25, 0x00	; 0
   1f338:	a0 e0       	ldi	r26, 0x00	; 0
   1f33a:	b0 e0       	ldi	r27, 0x00	; 0
   1f33c:	8e 29       	or	r24, r14
   1f33e:	9f 29       	or	r25, r15
   1f340:	a0 2b       	or	r26, r16
   1f342:	b1 2b       	or	r27, r17
   1f344:	ab bf       	out	0x3b, r26	; 59
   1f346:	fc 01       	movw	r30, r24
   1f348:	87 91       	elpm	r24, Z+
   1f34a:	ee de       	rcall	.-548    	; 0x1f128 <WriteNextResponseByte>
				#else
				WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
				#endif

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
   1f34c:	dd 20       	and	r13, r13
   1f34e:	81 f0       	breq	.+32     	; 0x1f370 <CDC_Task+0x218>
				  CurrAddress += 2;
   1f350:	82 e0       	ldi	r24, 0x02	; 2
   1f352:	90 e0       	ldi	r25, 0x00	; 0
   1f354:	a0 e0       	ldi	r26, 0x00	; 0
   1f356:	b0 e0       	ldi	r27, 0x00	; 0
   1f358:	e8 0e       	add	r14, r24
   1f35a:	f9 1e       	adc	r15, r25
   1f35c:	0a 1f       	adc	r16, r26
   1f35e:	1b 1f       	adc	r17, r27
   1f360:	e0 92 8c 01 	sts	0x018C, r14
   1f364:	f0 92 8d 01 	sts	0x018D, r15
   1f368:	00 93 8e 01 	sts	0x018E, r16
   1f36c:	10 93 8f 01 	sts	0x018F, r17

				HighByte = !HighByte;
   1f370:	dc 24       	eor	r13, r12
   1f372:	18 c0       	rjmp	.+48     	; 0x1f3a4 <CDC_Task+0x24c>
			}
			else
			{
				/* Read the next EEPROM byte into the endpoint */
				WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
   1f374:	d8 01       	movw	r26, r16
   1f376:	c7 01       	movw	r24, r14
   1f378:	b6 95       	lsr	r27
   1f37a:	a7 95       	ror	r26
   1f37c:	97 95       	ror	r25
   1f37e:	87 95       	ror	r24
   1f380:	44 d5       	rcall	.+2696   	; 0x1fe0a <__eerd_byte_usb1287>
   1f382:	d2 de       	rcall	.-604    	; 0x1f128 <WriteNextResponseByte>

				/* Increment the address counter after use */
				CurrAddress += 2;
   1f384:	82 e0       	ldi	r24, 0x02	; 2
   1f386:	90 e0       	ldi	r25, 0x00	; 0
   1f388:	a0 e0       	ldi	r26, 0x00	; 0
   1f38a:	b0 e0       	ldi	r27, 0x00	; 0
   1f38c:	e8 0e       	add	r14, r24
   1f38e:	f9 1e       	adc	r15, r25
   1f390:	0a 1f       	adc	r16, r26
   1f392:	1b 1f       	adc	r17, r27
   1f394:	e0 92 8c 01 	sts	0x018C, r14
   1f398:	f0 92 8d 01 	sts	0x018D, r15
   1f39c:	00 93 8e 01 	sts	0x018E, r16
   1f3a0:	10 93 8f 01 	sts	0x018F, r17
   1f3a4:	21 97       	sbiw	r28, 0x01	; 1
	if (Command == 'g')
	{
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
   1f3a6:	20 97       	sbiw	r28, 0x00	; 0
   1f3a8:	09 f0       	breq	.+2      	; 0x1f3ac <CDC_Task+0x254>
   1f3aa:	b9 cf       	rjmp	.-142    	; 0x1f31e <CDC_Task+0x1c6>
   1f3ac:	36 c1       	rjmp	.+620    	; 0x1f61a <CDC_Task+0x4c2>
			}
		}
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;
   1f3ae:	80 90 8c 01 	lds	r8, 0x018C
   1f3b2:	90 90 8d 01 	lds	r9, 0x018D
   1f3b6:	a0 90 8e 01 	lds	r10, 0x018E
   1f3ba:	b0 90 8f 01 	lds	r11, 0x018F

		if (MemoryType == 'F')
   1f3be:	96 e4       	ldi	r25, 0x46	; 70
   1f3c0:	69 16       	cp	r6, r25
   1f3c2:	09 f0       	breq	.+2      	; 0x1f3c6 <CDC_Task+0x26e>
   1f3c4:	61 c0       	rjmp	.+194    	; 0x1f488 <CDC_Task+0x330>
		{
			boot_page_erase(PageStartAddress);
   1f3c6:	83 e0       	ldi	r24, 0x03	; 3
   1f3c8:	f4 01       	movw	r30, r8
   1f3ca:	a0 92 5b 00 	sts	0x005B, r10
   1f3ce:	80 93 57 00 	sts	0x0057, r24
   1f3d2:	e8 95       	spm
			boot_spm_busy_wait();
   1f3d4:	07 b6       	in	r0, 0x37	; 55
   1f3d6:	00 fc       	sbrc	r0, 0
   1f3d8:	fd cf       	rjmp	.-6      	; 0x1f3d4 <CDC_Task+0x27c>
   1f3da:	56 c0       	rjmp	.+172    	; 0x1f488 <CDC_Task+0x330>
		}

		while (BlockSize--)
		{
			if (MemoryType == 'F')
   1f3dc:	a6 e4       	ldi	r26, 0x46	; 70
   1f3de:	6a 16       	cp	r6, r26
   1f3e0:	71 f5       	brne	.+92     	; 0x1f43e <CDC_Task+0x2e6>
			{
				/* If both bytes in current word have been written, increment the address counter */
				if (HighByte)
   1f3e2:	77 20       	and	r7, r7
   1f3e4:	41 f1       	breq	.+80     	; 0x1f436 <CDC_Task+0x2de>
				{
					/* Write the next FLASH word to the current FLASH page */
					boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
   1f3e6:	e0 90 8c 01 	lds	r14, 0x018C
   1f3ea:	f0 90 8d 01 	lds	r15, 0x018D
   1f3ee:	00 91 8e 01 	lds	r16, 0x018E
   1f3f2:	10 91 8f 01 	lds	r17, 0x018F
   1f3f6:	80 de       	rcall	.-768    	; 0x1f0f8 <FetchNextCommandByte>
   1f3f8:	d8 2e       	mov	r13, r24
   1f3fa:	cc 24       	eor	r12, r12
   1f3fc:	85 2d       	mov	r24, r5
   1f3fe:	90 e0       	ldi	r25, 0x00	; 0
   1f400:	8c 29       	or	r24, r12
   1f402:	9d 29       	or	r25, r13
   1f404:	0c 01       	movw	r0, r24
   1f406:	f7 01       	movw	r30, r14
   1f408:	00 93 5b 00 	sts	0x005B, r16
   1f40c:	40 92 57 00 	sts	0x0057, r4
   1f410:	e8 95       	spm
   1f412:	11 24       	eor	r1, r1

					/* Increment the address counter after use */
					CurrAddress += 2;
   1f414:	82 e0       	ldi	r24, 0x02	; 2
   1f416:	90 e0       	ldi	r25, 0x00	; 0
   1f418:	a0 e0       	ldi	r26, 0x00	; 0
   1f41a:	b0 e0       	ldi	r27, 0x00	; 0
   1f41c:	e8 0e       	add	r14, r24
   1f41e:	f9 1e       	adc	r15, r25
   1f420:	0a 1f       	adc	r16, r26
   1f422:	1b 1f       	adc	r17, r27
   1f424:	e0 92 8c 01 	sts	0x018C, r14
   1f428:	f0 92 8d 01 	sts	0x018D, r15
   1f42c:	00 93 8e 01 	sts	0x018E, r16
   1f430:	10 93 8f 01 	sts	0x018F, r17
   1f434:	02 c0       	rjmp	.+4      	; 0x1f43a <CDC_Task+0x2e2>
				}
				else
				{
					LowByte = FetchNextCommandByte();
   1f436:	60 de       	rcall	.-832    	; 0x1f0f8 <FetchNextCommandByte>
   1f438:	58 2e       	mov	r5, r24
				}
				
				HighByte = !HighByte;
   1f43a:	74 24       	eor	r7, r4
   1f43c:	23 c0       	rjmp	.+70     	; 0x1f484 <CDC_Task+0x32c>
			}
			else
			{
				/* Write the next EEPROM byte from the endpoint */
				eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
   1f43e:	e0 90 8c 01 	lds	r14, 0x018C
   1f442:	f0 90 8d 01 	lds	r15, 0x018D
   1f446:	00 91 8e 01 	lds	r16, 0x018E
   1f44a:	10 91 8f 01 	lds	r17, 0x018F
   1f44e:	16 95       	lsr	r17
   1f450:	07 95       	ror	r16
   1f452:	f7 94       	ror	r15
   1f454:	e7 94       	ror	r14
   1f456:	50 de       	rcall	.-864    	; 0x1f0f8 <FetchNextCommandByte>
   1f458:	68 2f       	mov	r22, r24
   1f45a:	c7 01       	movw	r24, r14
   1f45c:	de d4       	rcall	.+2492   	; 0x1fe1a <__eewr_byte_usb1287>

				/* Increment the address counter after use */
				CurrAddress += 2;
   1f45e:	80 91 8c 01 	lds	r24, 0x018C
   1f462:	90 91 8d 01 	lds	r25, 0x018D
   1f466:	a0 91 8e 01 	lds	r26, 0x018E
   1f46a:	b0 91 8f 01 	lds	r27, 0x018F
   1f46e:	02 96       	adiw	r24, 0x02	; 2
   1f470:	a1 1d       	adc	r26, r1
   1f472:	b1 1d       	adc	r27, r1
   1f474:	80 93 8c 01 	sts	0x018C, r24
   1f478:	90 93 8d 01 	sts	0x018D, r25
   1f47c:	a0 93 8e 01 	sts	0x018E, r26
   1f480:	b0 93 8f 01 	sts	0x018F, r27
   1f484:	21 97       	sbiw	r28, 0x01	; 1
   1f486:	04 c0       	rjmp	.+8      	; 0x1f490 <CDC_Task+0x338>
   1f488:	55 24       	eor	r5, r5
   1f48a:	77 24       	eor	r7, r7
				else
				{
					LowByte = FetchNextCommandByte();
				}
				
				HighByte = !HighByte;
   1f48c:	44 24       	eor	r4, r4
   1f48e:	43 94       	inc	r4
		{
			boot_page_erase(PageStartAddress);
			boot_spm_busy_wait();
		}

		while (BlockSize--)
   1f490:	20 97       	sbiw	r28, 0x00	; 0
   1f492:	09 f0       	breq	.+2      	; 0x1f496 <CDC_Task+0x33e>
   1f494:	a3 cf       	rjmp	.-186    	; 0x1f3dc <CDC_Task+0x284>
				CurrAddress += 2;
			}
		}

		/* If in FLASH programming mode, commit the page after writing */
		if (MemoryType == 'F')
   1f496:	96 e4       	ldi	r25, 0x46	; 70
   1f498:	69 16       	cp	r6, r25
   1f49a:	09 f0       	breq	.+2      	; 0x1f49e <CDC_Task+0x346>
   1f49c:	7e ce       	rjmp	.-772    	; 0x1f19a <CDC_Task+0x42>
		{
			/* Commit the flash page to memory */
			boot_page_write(PageStartAddress);
   1f49e:	85 e0       	ldi	r24, 0x05	; 5
   1f4a0:	f4 01       	movw	r30, r8
   1f4a2:	a0 92 5b 00 	sts	0x005B, r10
   1f4a6:	80 93 57 00 	sts	0x0057, r24
   1f4aa:	e8 95       	spm

			/* Wait until write operation has completed */
			boot_spm_busy_wait();
   1f4ac:	07 b6       	in	r0, 0x37	; 55
   1f4ae:	00 fc       	sbrc	r0, 0
   1f4b0:	fd cf       	rjmp	.-6      	; 0x1f4ac <CDC_Task+0x354>
   1f4b2:	73 ce       	rjmp	.-794    	; 0x1f19a <CDC_Task+0x42>
		/* Delegate the block write/read to a separate function for clarity */
		ReadWriteMemoryBlock(Command);
	}
	#endif
	#if !defined(NO_FLASH_BYTE_SUPPORT)
	else if (Command == 'C')
   1f4b4:	83 34       	cpi	r24, 0x43	; 67
   1f4b6:	a1 f4       	brne	.+40     	; 0x1f4e0 <CDC_Task+0x388>
	{
		/* Write the high byte to the current flash page */
		boot_page_fill(CurrAddress, FetchNextCommandByte());
   1f4b8:	e0 90 8c 01 	lds	r14, 0x018C
   1f4bc:	f0 90 8d 01 	lds	r15, 0x018D
   1f4c0:	00 91 8e 01 	lds	r16, 0x018E
   1f4c4:	10 91 8f 01 	lds	r17, 0x018F
   1f4c8:	17 de       	rcall	.-978    	; 0x1f0f8 <FetchNextCommandByte>
   1f4ca:	90 e0       	ldi	r25, 0x00	; 0
   1f4cc:	21 e0       	ldi	r18, 0x01	; 1
   1f4ce:	0c 01       	movw	r0, r24
   1f4d0:	f7 01       	movw	r30, r14
   1f4d2:	00 93 5b 00 	sts	0x005B, r16
   1f4d6:	20 93 57 00 	sts	0x0057, r18
   1f4da:	e8 95       	spm
   1f4dc:	11 24       	eor	r1, r1
   1f4de:	5d ce       	rjmp	.-838    	; 0x1f19a <CDC_Task+0x42>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'c')
   1f4e0:	83 36       	cpi	r24, 0x63	; 99
   1f4e2:	39 f5       	brne	.+78     	; 0x1f532 <CDC_Task+0x3da>
	{
		/* Write the low byte to the current flash page */
		boot_page_fill(CurrAddress | 0x01, FetchNextCommandByte());
   1f4e4:	e0 90 8c 01 	lds	r14, 0x018C
   1f4e8:	f0 90 8d 01 	lds	r15, 0x018D
   1f4ec:	00 91 8e 01 	lds	r16, 0x018E
   1f4f0:	10 91 8f 01 	lds	r17, 0x018F
   1f4f4:	01 de       	rcall	.-1022   	; 0x1f0f8 <FetchNextCommandByte>
   1f4f6:	a8 01       	movw	r20, r16
   1f4f8:	97 01       	movw	r18, r14
   1f4fa:	21 60       	ori	r18, 0x01	; 1
   1f4fc:	90 e0       	ldi	r25, 0x00	; 0
   1f4fe:	61 e0       	ldi	r22, 0x01	; 1
   1f500:	0c 01       	movw	r0, r24
   1f502:	f9 01       	movw	r30, r18
   1f504:	40 93 5b 00 	sts	0x005B, r20
   1f508:	60 93 57 00 	sts	0x0057, r22
   1f50c:	e8 95       	spm
   1f50e:	11 24       	eor	r1, r1

		/* Increment the address */
		CurrAddress += 2;
   1f510:	82 e0       	ldi	r24, 0x02	; 2
   1f512:	90 e0       	ldi	r25, 0x00	; 0
   1f514:	a0 e0       	ldi	r26, 0x00	; 0
   1f516:	b0 e0       	ldi	r27, 0x00	; 0
   1f518:	e8 0e       	add	r14, r24
   1f51a:	f9 1e       	adc	r15, r25
   1f51c:	0a 1f       	adc	r16, r26
   1f51e:	1b 1f       	adc	r17, r27
   1f520:	e0 92 8c 01 	sts	0x018C, r14
   1f524:	f0 92 8d 01 	sts	0x018D, r15
   1f528:	00 93 8e 01 	sts	0x018E, r16
   1f52c:	10 93 8f 01 	sts	0x018F, r17
   1f530:	34 ce       	rjmp	.-920    	; 0x1f19a <CDC_Task+0x42>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'm')
   1f532:	8d 36       	cpi	r24, 0x6D	; 109
   1f534:	99 f4       	brne	.+38     	; 0x1f55c <CDC_Task+0x404>
	{
		/* Commit the flash page to memory */
		boot_page_write(CurrAddress);
   1f536:	80 91 8c 01 	lds	r24, 0x018C
   1f53a:	90 91 8d 01 	lds	r25, 0x018D
   1f53e:	a0 91 8e 01 	lds	r26, 0x018E
   1f542:	b0 91 8f 01 	lds	r27, 0x018F
   1f546:	25 e0       	ldi	r18, 0x05	; 5
   1f548:	fc 01       	movw	r30, r24
   1f54a:	a0 93 5b 00 	sts	0x005B, r26
   1f54e:	20 93 57 00 	sts	0x0057, r18
   1f552:	e8 95       	spm

		/* Wait until write operation has completed */
		boot_spm_busy_wait();
   1f554:	07 b6       	in	r0, 0x37	; 55
   1f556:	00 fc       	sbrc	r0, 0
   1f558:	fd cf       	rjmp	.-6      	; 0x1f554 <CDC_Task+0x3fc>
   1f55a:	1f ce       	rjmp	.-962    	; 0x1f19a <CDC_Task+0x42>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'R')
   1f55c:	82 35       	cpi	r24, 0x52	; 82
   1f55e:	81 f4       	brne	.+32     	; 0x1f580 <CDC_Task+0x428>
	{
		#if (FLASHEND > 0xFFFF)
		uint16_t ProgramWord = pgm_read_word_far(CurrAddress);
   1f560:	e0 90 8c 01 	lds	r14, 0x018C
   1f564:	f0 90 8d 01 	lds	r15, 0x018D
   1f568:	00 91 8e 01 	lds	r16, 0x018E
   1f56c:	10 91 8f 01 	lds	r17, 0x018F
   1f570:	0b bf       	out	0x3b, r16	; 59
   1f572:	f7 01       	movw	r30, r14
   1f574:	e7 90       	elpm	r14, Z+
   1f576:	f6 90       	elpm	r15, Z+
		#else
		uint16_t ProgramWord = pgm_read_word(CurrAddress);
		#endif

		WriteNextResponseByte(ProgramWord >> 8);
   1f578:	8f 2d       	mov	r24, r15
   1f57a:	d6 dd       	rcall	.-1108   	; 0x1f128 <WriteNextResponseByte>
		WriteNextResponseByte(ProgramWord & 0xFF);
   1f57c:	8e 2d       	mov	r24, r14
   1f57e:	4c c0       	rjmp	.+152    	; 0x1f618 <CDC_Task+0x4c0>
	}
	#endif
	#if !defined(NO_EEPROM_BYTE_SUPPORT)
	else if (Command == 'D')
   1f580:	84 34       	cpi	r24, 0x44	; 68
   1f582:	21 f5       	brne	.+72     	; 0x1f5cc <CDC_Task+0x474>
	{
		/* Read the byte from the endpoint and write it to the EEPROM */
		eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
   1f584:	e0 90 8c 01 	lds	r14, 0x018C
   1f588:	f0 90 8d 01 	lds	r15, 0x018D
   1f58c:	00 91 8e 01 	lds	r16, 0x018E
   1f590:	10 91 8f 01 	lds	r17, 0x018F
   1f594:	16 95       	lsr	r17
   1f596:	07 95       	ror	r16
   1f598:	f7 94       	ror	r15
   1f59a:	e7 94       	ror	r14
   1f59c:	ad dd       	rcall	.-1190   	; 0x1f0f8 <FetchNextCommandByte>
   1f59e:	68 2f       	mov	r22, r24
   1f5a0:	c7 01       	movw	r24, r14
   1f5a2:	3b d4       	rcall	.+2166   	; 0x1fe1a <__eewr_byte_usb1287>

		/* Increment the address after use */
		CurrAddress += 2;
   1f5a4:	80 91 8c 01 	lds	r24, 0x018C
   1f5a8:	90 91 8d 01 	lds	r25, 0x018D
   1f5ac:	a0 91 8e 01 	lds	r26, 0x018E
   1f5b0:	b0 91 8f 01 	lds	r27, 0x018F
   1f5b4:	02 96       	adiw	r24, 0x02	; 2
   1f5b6:	a1 1d       	adc	r26, r1
   1f5b8:	b1 1d       	adc	r27, r1
   1f5ba:	80 93 8c 01 	sts	0x018C, r24
   1f5be:	90 93 8d 01 	sts	0x018D, r25
   1f5c2:	a0 93 8e 01 	sts	0x018E, r26
   1f5c6:	b0 93 8f 01 	sts	0x018F, r27
   1f5ca:	e7 cd       	rjmp	.-1074   	; 0x1f19a <CDC_Task+0x42>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'd')
   1f5cc:	84 36       	cpi	r24, 0x64	; 100
   1f5ce:	09 f5       	brne	.+66     	; 0x1f612 <CDC_Task+0x4ba>
	{
		/* Read the EEPROM byte and write it to the endpoint */
		WriteNextResponseByte(eeprom_read_byte((uint8_t*)((intptr_t)(CurrAddress >> 1))));
   1f5d0:	e0 90 8c 01 	lds	r14, 0x018C
   1f5d4:	f0 90 8d 01 	lds	r15, 0x018D
   1f5d8:	00 91 8e 01 	lds	r16, 0x018E
   1f5dc:	10 91 8f 01 	lds	r17, 0x018F
   1f5e0:	d8 01       	movw	r26, r16
   1f5e2:	c7 01       	movw	r24, r14
   1f5e4:	b6 95       	lsr	r27
   1f5e6:	a7 95       	ror	r26
   1f5e8:	97 95       	ror	r25
   1f5ea:	87 95       	ror	r24
   1f5ec:	0e d4       	rcall	.+2076   	; 0x1fe0a <__eerd_byte_usb1287>
   1f5ee:	9c dd       	rcall	.-1224   	; 0x1f128 <WriteNextResponseByte>

		/* Increment the address after use */
		CurrAddress += 2;
   1f5f0:	82 e0       	ldi	r24, 0x02	; 2
   1f5f2:	90 e0       	ldi	r25, 0x00	; 0
   1f5f4:	a0 e0       	ldi	r26, 0x00	; 0
   1f5f6:	b0 e0       	ldi	r27, 0x00	; 0
   1f5f8:	e8 0e       	add	r14, r24
   1f5fa:	f9 1e       	adc	r15, r25
   1f5fc:	0a 1f       	adc	r16, r26
   1f5fe:	1b 1f       	adc	r17, r27
   1f600:	e0 92 8c 01 	sts	0x018C, r14
   1f604:	f0 92 8d 01 	sts	0x018D, r15
   1f608:	00 93 8e 01 	sts	0x018E, r16
   1f60c:	10 93 8f 01 	sts	0x018F, r17
   1f610:	04 c0       	rjmp	.+8      	; 0x1f61a <CDC_Task+0x4c2>
	}
	#endif
	else if (Command != 27)
   1f612:	8b 31       	cpi	r24, 0x1B	; 27
   1f614:	11 f0       	breq	.+4      	; 0x1f61a <CDC_Task+0x4c2>
	{
		/* Unknown (non-sync) command, return fail code */
		WriteNextResponseByte('?');
   1f616:	8f e3       	ldi	r24, 0x3F	; 63
   1f618:	87 dd       	rcall	.-1266   	; 0x1f128 <WriteNextResponseByte>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1f61a:	83 e0       	ldi	r24, 0x03	; 3
   1f61c:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
   1f620:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1f624:	80 91 e8 00 	lds	r24, 0x00E8
   1f628:	8e 77       	andi	r24, 0x7E	; 126
   1f62a:	80 93 e8 00 	sts	0x00E8, r24

	/* Send the endpoint data to the host */
	Endpoint_ClearIN();

	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
	if (IsEndpointFull)
   1f62e:	95 ff       	sbrs	r25, 5
   1f630:	04 c0       	rjmp	.+8      	; 0x1f63a <CDC_Task+0x4e2>
   1f632:	10 c0       	rjmp	.+32     	; 0x1f654 <CDC_Task+0x4fc>
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f634:	8e b3       	in	r24, 0x1e	; 30
   1f636:	88 23       	and	r24, r24
   1f638:	c9 f0       	breq	.+50     	; 0x1f66c <CDC_Task+0x514>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1f63a:	80 91 e8 00 	lds	r24, 0x00E8
	Endpoint_ClearIN();

	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
	if (IsEndpointFull)
	{
		while (!(Endpoint_IsINReady()))
   1f63e:	80 ff       	sbrs	r24, 0
   1f640:	f9 cf       	rjmp	.-14     	; 0x1f634 <CDC_Task+0x4dc>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1f642:	80 91 e8 00 	lds	r24, 0x00E8
   1f646:	8e 77       	andi	r24, 0x7E	; 126
   1f648:	80 93 e8 00 	sts	0x00E8, r24
   1f64c:	03 c0       	rjmp	.+6      	; 0x1f654 <CDC_Task+0x4fc>
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f64e:	8e b3       	in	r24, 0x1e	; 30
   1f650:	88 23       	and	r24, r24
   1f652:	61 f0       	breq	.+24     	; 0x1f66c <CDC_Task+0x514>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1f654:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearIN();
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
   1f658:	80 ff       	sbrs	r24, 0
   1f65a:	f9 cf       	rjmp	.-14     	; 0x1f64e <CDC_Task+0x4f6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1f65c:	84 e0       	ldi	r24, 0x04	; 4
   1f65e:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1f662:	80 91 e8 00 	lds	r24, 0x00E8
   1f666:	8b 77       	andi	r24, 0x7B	; 123
   1f668:	80 93 e8 00 	sts	0x00E8, r24
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* Acknowledge the command from the host */
	Endpoint_ClearOUT();
}
   1f66c:	df 91       	pop	r29
   1f66e:	cf 91       	pop	r28
   1f670:	1f 91       	pop	r17
   1f672:	0f 91       	pop	r16
   1f674:	ff 90       	pop	r15
   1f676:	ef 90       	pop	r14
   1f678:	df 90       	pop	r13
   1f67a:	cf 90       	pop	r12
   1f67c:	bf 90       	pop	r11
   1f67e:	af 90       	pop	r10
   1f680:	9f 90       	pop	r9
   1f682:	8f 90       	pop	r8
   1f684:	7f 90       	pop	r7
   1f686:	6f 90       	pop	r6
   1f688:	5f 90       	pop	r5
   1f68a:	4f 90       	pop	r4
   1f68c:	08 95       	ret

0001f68e <EVENT_USB_Device_ControlRequest>:
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	/* Ignore any requests that aren't directed to the CDC interface */
	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
   1f68e:	20 91 92 01 	lds	r18, 0x0192
   1f692:	82 2f       	mov	r24, r18
   1f694:	8f 77       	andi	r24, 0x7F	; 127
   1f696:	81 32       	cpi	r24, 0x21	; 33
   1f698:	69 f5       	brne	.+90     	; 0x1f6f4 <EVENT_USB_Device_ControlRequest+0x66>
   1f69a:	8b b1       	in	r24, 0x0b	; 11
   1f69c:	90 e3       	ldi	r25, 0x30	; 48
   1f69e:	89 27       	eor	r24, r25
   1f6a0:	8b b9       	out	0x0b, r24	; 11

	/* Activity - toggle indicator LEDs */
	LEDs_ToggleLEDs(LEDS_LED1 | LEDS_LED2);

	/* Process CDC specific control requests */
	switch (USB_ControlRequest.bRequest)
   1f6a2:	80 91 93 01 	lds	r24, 0x0193
   1f6a6:	80 32       	cpi	r24, 0x20	; 32
   1f6a8:	a1 f0       	breq	.+40     	; 0x1f6d2 <EVENT_USB_Device_ControlRequest+0x44>
   1f6aa:	81 32       	cpi	r24, 0x21	; 33
   1f6ac:	19 f5       	brne	.+70     	; 0x1f6f4 <EVENT_USB_Device_ControlRequest+0x66>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
   1f6ae:	21 3a       	cpi	r18, 0xA1	; 161
   1f6b0:	09 f5       	brne	.+66     	; 0x1f6f4 <EVENT_USB_Device_ControlRequest+0x66>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f6b2:	80 91 e8 00 	lds	r24, 0x00E8
   1f6b6:	87 7f       	andi	r24, 0xF7	; 247
   1f6b8:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Write the line coding data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
   1f6bc:	89 e0       	ldi	r24, 0x09	; 9
   1f6be:	91 e0       	ldi	r25, 0x01	; 1
   1f6c0:	67 e0       	ldi	r22, 0x07	; 7
   1f6c2:	70 e0       	ldi	r23, 0x00	; 0
   1f6c4:	cf d1       	rcall	.+926    	; 0x1fa64 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1f6c6:	80 91 e8 00 	lds	r24, 0x00E8
   1f6ca:	8b 77       	andi	r24, 0x7B	; 123
   1f6cc:	80 93 e8 00 	sts	0x00E8, r24
   1f6d0:	08 95       	ret
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
   1f6d2:	21 32       	cpi	r18, 0x21	; 33
   1f6d4:	79 f4       	brne	.+30     	; 0x1f6f4 <EVENT_USB_Device_ControlRequest+0x66>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f6d6:	80 91 e8 00 	lds	r24, 0x00E8
   1f6da:	87 7f       	andi	r24, 0xF7	; 247
   1f6dc:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Read the line coding data in from the host into the global struct */
				Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
   1f6e0:	89 e0       	ldi	r24, 0x09	; 9
   1f6e2:	91 e0       	ldi	r25, 0x01	; 1
   1f6e4:	67 e0       	ldi	r22, 0x07	; 7
   1f6e6:	70 e0       	ldi	r23, 0x00	; 0
   1f6e8:	19 d2       	rcall	.+1074   	; 0x1fb1c <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1f6ea:	80 91 e8 00 	lds	r24, 0x00E8
   1f6ee:	8e 77       	andi	r24, 0x7E	; 126
   1f6f0:	80 93 e8 00 	sts	0x00E8, r24
   1f6f4:	08 95       	ret

0001f6f6 <EVENT_USB_Device_ConfigurationChanged>:
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
   1f6f6:	82 e0       	ldi	r24, 0x02	; 2
   1f6f8:	61 ec       	ldi	r22, 0xC1	; 193
   1f6fa:	42 e0       	ldi	r20, 0x02	; 2
   1f6fc:	72 d0       	rcall	.+228    	; 0x1f7e2 <Endpoint_ConfigureEndpoint_Prv>
   1f6fe:	83 e0       	ldi	r24, 0x03	; 3
   1f700:	61 e8       	ldi	r22, 0x81	; 129
   1f702:	42 e1       	ldi	r20, 0x12	; 18
   1f704:	6e d0       	rcall	.+220    	; 0x1f7e2 <Endpoint_ConfigureEndpoint_Prv>
   1f706:	84 e0       	ldi	r24, 0x04	; 4
   1f708:	60 e8       	ldi	r22, 0x80	; 128
   1f70a:	42 e1       	ldi	r20, 0x12	; 18
	                           ENDPOINT_BANK_SINGLE);

	Endpoint_ConfigureEndpoint(CDC_RX_EPNUM, EP_TYPE_BULK,
	                           ENDPOINT_DIR_OUT, CDC_TXRX_EPSIZE,
	                           ENDPOINT_BANK_SINGLE);
}
   1f70c:	6a c0       	rjmp	.+212    	; 0x1f7e2 <Endpoint_ConfigureEndpoint_Prv>

0001f70e <SetupHardware>:
	for (;;);
}

/** Configures all hardware required for the bootloader. */
void SetupHardware(void)
{
   1f70e:	1f 93       	push	r17
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
   1f710:	84 b7       	in	r24, 0x34	; 52
   1f712:	87 7f       	andi	r24, 0xF7	; 247
   1f714:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
   1f716:	88 e1       	ldi	r24, 0x18	; 24
   1f718:	0f b6       	in	r0, 0x3f	; 63
   1f71a:	f8 94       	cli
   1f71c:	80 93 60 00 	sts	0x0060, r24
   1f720:	10 92 60 00 	sts	0x0060, r1
   1f724:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
   1f726:	90 e0       	ldi	r25, 0x00	; 0
   1f728:	80 e8       	ldi	r24, 0x80	; 128
   1f72a:	0f b6       	in	r0, 0x3f	; 63
   1f72c:	f8 94       	cli
   1f72e:	80 93 61 00 	sts	0x0061, r24
   1f732:	90 93 61 00 	sts	0x0061, r25
   1f736:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
   1f738:	11 e0       	ldi	r17, 0x01	; 1
   1f73a:	15 bf       	out	0x35, r17	; 53
	MCUCR = (1 << IVSEL);
   1f73c:	82 e0       	ldi	r24, 0x02	; 2
   1f73e:	85 bf       	out	0x35, r24	; 53

	/* Initialize USB Subsystem */
	USB_Init();
   1f740:	c6 d0       	rcall	.+396    	; 0x1f8ce <USB_Init>

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
   1f742:	8a b1       	in	r24, 0x0a	; 10
   1f744:	80 6f       	ori	r24, 0xF0	; 240
   1f746:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
   1f748:	8b b1       	in	r24, 0x0b	; 11
   1f74a:	8f 70       	andi	r24, 0x0F	; 15
   1f74c:	8b b9       	out	0x0b, r24	; 11
	LEDs_Init();
	
	/* Bootloader active LED toggle timer initialization */
	TIMSK1 = (1 << TOIE1);
   1f74e:	10 93 6f 00 	sts	0x006F, r17
	TCCR1B = ((1 << CS11) | (1 << CS10));	
   1f752:	83 e0       	ldi	r24, 0x03	; 3
   1f754:	80 93 81 00 	sts	0x0081, r24
}
   1f758:	1f 91       	pop	r17
   1f75a:	08 95       	ret

0001f75c <main>:
 *  the loaded application code.
 */
int main(void)
{
	/* Setup hardware required for the bootloader */
	SetupHardware();
   1f75c:	d8 df       	rcall	.-80     	; 0x1f70e <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
   1f75e:	8b b1       	in	r24, 0x0b	; 11
   1f760:	8f 70       	andi	r24, 0x0F	; 15
   1f762:	80 61       	ori	r24, 0x10	; 16
   1f764:	8b b9       	out	0x0b, r24	; 11

	/* Turn on first LED on the board to indicate that the bootloader has started */
	LEDs_SetAllLEDs(LEDS_LED1);

	/* Enable global interrupts so that the USB stack can function */
	sei();
   1f766:	78 94       	sei
   1f768:	02 c0       	rjmp	.+4      	; 0x1f76e <main+0x12>

	while (RunBootloader)
	{
		CDC_Task();
   1f76a:	f6 dc       	rcall	.-1556   	; 0x1f158 <CDC_Task>
		USB_USBTask();
   1f76c:	3c d3       	rcall	.+1656   	; 0x1fde6 <USB_USBTask>
	LEDs_SetAllLEDs(LEDS_LED1);

	/* Enable global interrupts so that the USB stack can function */
	sei();

	while (RunBootloader)
   1f76e:	80 91 08 01 	lds	r24, 0x0108
   1f772:	88 23       	and	r24, r24
   1f774:	d1 f7       	brne	.-12     	; 0x1f76a <main+0xe>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
   1f776:	80 91 e0 00 	lds	r24, 0x00E0
   1f77a:	81 60       	ori	r24, 0x01	; 1
   1f77c:	80 93 e0 00 	sts	0x00E0, r24

	/* Disconnect from the host - USB interface will be reset later along with the AVR */
	USB_Detach();

	/* Enable the watchdog and force a timeout to reset the AVR */
	wdt_enable(WDTO_250MS);
   1f780:	2c e0       	ldi	r18, 0x0C	; 12
   1f782:	88 e1       	ldi	r24, 0x18	; 24
   1f784:	90 e0       	ldi	r25, 0x00	; 0
   1f786:	0f b6       	in	r0, 0x3f	; 63
   1f788:	f8 94       	cli
   1f78a:	a8 95       	wdr
   1f78c:	80 93 60 00 	sts	0x0060, r24
   1f790:	0f be       	out	0x3f, r0	; 63
   1f792:	20 93 60 00 	sts	0x0060, r18
   1f796:	ff cf       	rjmp	.-2      	; 0x1f796 <main+0x3a>

0001f798 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
   1f798:	fa 01       	movw	r30, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
   1f79a:	92 30       	cpi	r25, 0x02	; 2
   1f79c:	71 f0       	breq	.+28     	; 0x1f7ba <CALLBACK_USB_GetDescriptor+0x22>
   1f79e:	93 30       	cpi	r25, 0x03	; 3
   1f7a0:	89 f0       	breq	.+34     	; 0x1f7c4 <CALLBACK_USB_GetDescriptor+0x2c>
   1f7a2:	91 30       	cpi	r25, 0x01	; 1
   1f7a4:	29 f4       	brne	.+10     	; 0x1f7b0 <CALLBACK_USB_GetDescriptor+0x18>
   1f7a6:	80 e1       	ldi	r24, 0x10	; 16
   1f7a8:	91 e0       	ldi	r25, 0x01	; 1
   1f7aa:	22 e1       	ldi	r18, 0x12	; 18
   1f7ac:	30 e0       	ldi	r19, 0x00	; 0
   1f7ae:	15 c0       	rjmp	.+42     	; 0x1f7da <CALLBACK_USB_GetDescriptor+0x42>
   1f7b0:	80 e0       	ldi	r24, 0x00	; 0
   1f7b2:	90 e0       	ldi	r25, 0x00	; 0
   1f7b4:	20 e0       	ldi	r18, 0x00	; 0
   1f7b6:	30 e0       	ldi	r19, 0x00	; 0
   1f7b8:	10 c0       	rjmp	.+32     	; 0x1f7da <CALLBACK_USB_GetDescriptor+0x42>
   1f7ba:	82 e2       	ldi	r24, 0x22	; 34
   1f7bc:	91 e0       	ldi	r25, 0x01	; 1
   1f7be:	2e e3       	ldi	r18, 0x3E	; 62
   1f7c0:	30 e0       	ldi	r19, 0x00	; 0
   1f7c2:	0b c0       	rjmp	.+22     	; 0x1f7da <CALLBACK_USB_GetDescriptor+0x42>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
   1f7c4:	88 23       	and	r24, r24
   1f7c6:	29 f4       	brne	.+10     	; 0x1f7d2 <CALLBACK_USB_GetDescriptor+0x3a>
   1f7c8:	80 e6       	ldi	r24, 0x60	; 96
   1f7ca:	91 e0       	ldi	r25, 0x01	; 1
   1f7cc:	24 e0       	ldi	r18, 0x04	; 4
   1f7ce:	30 e0       	ldi	r19, 0x00	; 0
   1f7d0:	04 c0       	rjmp	.+8      	; 0x1f7da <CALLBACK_USB_GetDescriptor+0x42>
   1f7d2:	84 e6       	ldi	r24, 0x64	; 100
   1f7d4:	91 e0       	ldi	r25, 0x01	; 1
   1f7d6:	26 e2       	ldi	r18, 0x26	; 38
   1f7d8:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
   1f7da:	91 83       	std	Z+1, r25	; 0x01
   1f7dc:	80 83       	st	Z, r24
	return Size;
}
   1f7de:	c9 01       	movw	r24, r18
   1f7e0:	08 95       	ret

0001f7e2 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1f7e2:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
   1f7e6:	80 91 eb 00 	lds	r24, 0x00EB
   1f7ea:	81 60       	ori	r24, 0x01	; 1
   1f7ec:	80 93 eb 00 	sts	0x00EB, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
   1f7f0:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
   1f7f4:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
   1f7f8:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
   1f7fc:	80 91 ee 00 	lds	r24, 0x00EE
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
   1f800:	88 1f       	adc	r24, r24
   1f802:	88 27       	eor	r24, r24
   1f804:	88 1f       	adc	r24, r24
   1f806:	08 95       	ret

0001f808 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
   1f808:	80 91 92 01 	lds	r24, 0x0192
   1f80c:	88 23       	and	r24, r24
   1f80e:	8c f4       	brge	.+34     	; 0x1f832 <Endpoint_ClearStatusStage+0x2a>
   1f810:	03 c0       	rjmp	.+6      	; 0x1f818 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f812:	8e b3       	in	r24, 0x1e	; 30
   1f814:	88 23       	and	r24, r24
   1f816:	b1 f0       	breq	.+44     	; 0x1f844 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1f818:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
   1f81c:	82 ff       	sbrs	r24, 2
   1f81e:	f9 cf       	rjmp	.-14     	; 0x1f812 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1f820:	80 91 e8 00 	lds	r24, 0x00E8
   1f824:	8b 77       	andi	r24, 0x7B	; 123
   1f826:	80 93 e8 00 	sts	0x00E8, r24
   1f82a:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f82c:	8e b3       	in	r24, 0x1e	; 30
   1f82e:	88 23       	and	r24, r24
   1f830:	49 f0       	breq	.+18     	; 0x1f844 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1f832:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
   1f836:	80 ff       	sbrs	r24, 0
   1f838:	f9 cf       	rjmp	.-14     	; 0x1f82c <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1f83a:	80 91 e8 00 	lds	r24, 0x00E8
   1f83e:	8e 77       	andi	r24, 0x7E	; 126
   1f840:	80 93 e8 00 	sts	0x00E8, r24
   1f844:	08 95       	ret

0001f846 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
   1f846:	ef 92       	push	r14
   1f848:	ff 92       	push	r15
   1f84a:	0f 93       	push	r16
   1f84c:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
   1f84e:	48 d0       	rcall	.+144    	; 0x1f8e0 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
   1f850:	4f d0       	rcall	.+158    	; 0x1f8f0 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
   1f852:	08 ed       	ldi	r16, 0xD8	; 216
   1f854:	10 e0       	ldi	r17, 0x00	; 0
   1f856:	f8 01       	movw	r30, r16
   1f858:	80 81       	ld	r24, Z
   1f85a:	8f 77       	andi	r24, 0x7F	; 127
   1f85c:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
   1f85e:	80 81       	ld	r24, Z
   1f860:	80 68       	ori	r24, 0x80	; 128
   1f862:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
   1f864:	80 81       	ld	r24, Z
   1f866:	8f 7d       	andi	r24, 0xDF	; 223
   1f868:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
   1f86a:	e7 ed       	ldi	r30, 0xD7	; 215
   1f86c:	f0 e0       	ldi	r31, 0x00	; 0
   1f86e:	80 81       	ld	r24, Z
   1f870:	80 68       	ori	r24, 0x80	; 128
   1f872:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1f874:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
   1f876:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
   1f878:	10 92 90 01 	sts	0x0190, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
   1f87c:	80 ee       	ldi	r24, 0xE0	; 224
   1f87e:	e8 2e       	mov	r14, r24
   1f880:	f1 2c       	mov	r15, r1
   1f882:	f7 01       	movw	r30, r14
   1f884:	80 81       	ld	r24, Z
   1f886:	8b 7f       	andi	r24, 0xFB	; 251
   1f888:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
   1f88a:	f8 01       	movw	r30, r16
   1f88c:	80 81       	ld	r24, Z
   1f88e:	81 60       	ori	r24, 0x01	; 1
   1f890:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
   1f892:	80 e0       	ldi	r24, 0x00	; 0
   1f894:	60 e0       	ldi	r22, 0x00	; 0
   1f896:	42 e0       	ldi	r20, 0x02	; 2
   1f898:	a4 df       	rcall	.-184    	; 0x1f7e2 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1f89a:	e1 ee       	ldi	r30, 0xE1	; 225
   1f89c:	f0 e0       	ldi	r31, 0x00	; 0
   1f89e:	80 81       	ld	r24, Z
   1f8a0:	8e 7f       	andi	r24, 0xFE	; 254
   1f8a2:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1f8a4:	e2 ee       	ldi	r30, 0xE2	; 226
   1f8a6:	f0 e0       	ldi	r31, 0x00	; 0
   1f8a8:	80 81       	ld	r24, Z
   1f8aa:	81 60       	ori	r24, 0x01	; 1
   1f8ac:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
   1f8ae:	80 81       	ld	r24, Z
   1f8b0:	88 60       	ori	r24, 0x08	; 8
   1f8b2:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
   1f8b4:	f7 01       	movw	r30, r14
   1f8b6:	80 81       	ld	r24, Z
   1f8b8:	8e 7f       	andi	r24, 0xFE	; 254
   1f8ba:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
   1f8bc:	f8 01       	movw	r30, r16
   1f8be:	80 81       	ld	r24, Z
   1f8c0:	80 61       	ori	r24, 0x10	; 16
   1f8c2:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
   1f8c4:	1f 91       	pop	r17
   1f8c6:	0f 91       	pop	r16
   1f8c8:	ff 90       	pop	r15
   1f8ca:	ef 90       	pop	r14
   1f8cc:	08 95       	ret

0001f8ce <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
   1f8ce:	e7 ed       	ldi	r30, 0xD7	; 215
   1f8d0:	f0 e0       	ldi	r31, 0x00	; 0
   1f8d2:	80 81       	ld	r24, Z
   1f8d4:	81 60       	ori	r24, 0x01	; 1
   1f8d6:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
   1f8d8:	81 e0       	ldi	r24, 0x01	; 1
   1f8da:	80 93 91 01 	sts	0x0191, r24

	USB_ResetInterface();
}
   1f8de:	b3 cf       	rjmp	.-154    	; 0x1f846 <USB_ResetInterface>

0001f8e0 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
   1f8e0:	e8 ed       	ldi	r30, 0xD8	; 216
   1f8e2:	f0 e0       	ldi	r31, 0x00	; 0
   1f8e4:	80 81       	ld	r24, Z
   1f8e6:	8c 7f       	andi	r24, 0xFC	; 252
   1f8e8:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
   1f8ea:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
   1f8ee:	08 95       	ret

0001f8f0 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
   1f8f0:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
   1f8f4:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
   1f8f8:	08 95       	ret

0001f8fa <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
   1f8fa:	1f 92       	push	r1
   1f8fc:	0f 92       	push	r0
   1f8fe:	0f b6       	in	r0, 0x3f	; 63
   1f900:	0f 92       	push	r0
   1f902:	0b b6       	in	r0, 0x3b	; 59
   1f904:	0f 92       	push	r0
   1f906:	11 24       	eor	r1, r1
   1f908:	2f 93       	push	r18
   1f90a:	3f 93       	push	r19
   1f90c:	4f 93       	push	r20
   1f90e:	5f 93       	push	r21
   1f910:	6f 93       	push	r22
   1f912:	7f 93       	push	r23
   1f914:	8f 93       	push	r24
   1f916:	9f 93       	push	r25
   1f918:	af 93       	push	r26
   1f91a:	bf 93       	push	r27
   1f91c:	ef 93       	push	r30
   1f91e:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
   1f920:	80 91 da 00 	lds	r24, 0x00DA
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
   1f924:	80 ff       	sbrs	r24, 0
   1f926:	1b c0       	rjmp	.+54     	; 0x1f95e <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
   1f928:	80 91 d8 00 	lds	r24, 0x00D8
   1f92c:	80 ff       	sbrs	r24, 0
   1f92e:	17 c0       	rjmp	.+46     	; 0x1f95e <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
   1f930:	80 91 da 00 	lds	r24, 0x00DA
   1f934:	8e 7f       	andi	r24, 0xFE	; 254
   1f936:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
   1f93a:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
   1f93e:	80 ff       	sbrs	r24, 0
   1f940:	0b c0       	rjmp	.+22     	; 0x1f958 <__vector_10+0x5e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1f942:	8c e0       	ldi	r24, 0x0C	; 12
   1f944:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1f946:	8e e0       	ldi	r24, 0x0E	; 14
   1f948:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
   1f94a:	09 b4       	in	r0, 0x29	; 41
   1f94c:	00 fe       	sbrs	r0, 0
   1f94e:	fd cf       	rjmp	.-6      	; 0x1f94a <__vector_10+0x50>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
   1f950:	81 e0       	ldi	r24, 0x01	; 1
   1f952:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
   1f954:	47 d2       	rcall	.+1166   	; 0x1fde4 <USB_Event_Stub>
   1f956:	03 c0       	rjmp	.+6      	; 0x1f95e <__vector_10+0x64>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1f958:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
   1f95a:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
   1f95c:	43 d2       	rcall	.+1158   	; 0x1fde4 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
   1f95e:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
   1f962:	80 ff       	sbrs	r24, 0
   1f964:	17 c0       	rjmp	.+46     	; 0x1f994 <__vector_10+0x9a>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
   1f966:	80 91 e2 00 	lds	r24, 0x00E2
   1f96a:	80 ff       	sbrs	r24, 0
   1f96c:	13 c0       	rjmp	.+38     	; 0x1f994 <__vector_10+0x9a>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1f96e:	80 91 e2 00 	lds	r24, 0x00E2
   1f972:	8e 7f       	andi	r24, 0xFE	; 254
   1f974:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1f978:	80 91 e2 00 	lds	r24, 0x00E2
   1f97c:	80 61       	ori	r24, 0x10	; 16
   1f97e:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
   1f982:	80 91 d8 00 	lds	r24, 0x00D8
   1f986:	80 62       	ori	r24, 0x20	; 32
   1f988:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1f98c:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
   1f98e:	85 e0       	ldi	r24, 0x05	; 5
   1f990:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
   1f992:	28 d2       	rcall	.+1104   	; 0x1fde4 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
   1f994:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
   1f998:	84 ff       	sbrs	r24, 4
   1f99a:	2c c0       	rjmp	.+88     	; 0x1f9f4 <__vector_10+0xfa>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
   1f99c:	80 91 e2 00 	lds	r24, 0x00E2
   1f9a0:	84 ff       	sbrs	r24, 4
   1f9a2:	28 c0       	rjmp	.+80     	; 0x1f9f4 <__vector_10+0xfa>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1f9a4:	8c e0       	ldi	r24, 0x0C	; 12
   1f9a6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1f9a8:	8e e0       	ldi	r24, 0x0E	; 14
   1f9aa:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
   1f9ac:	09 b4       	in	r0, 0x29	; 41
   1f9ae:	00 fe       	sbrs	r0, 0
   1f9b0:	fd cf       	rjmp	.-6      	; 0x1f9ac <__vector_10+0xb2>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
   1f9b2:	80 91 d8 00 	lds	r24, 0x00D8
   1f9b6:	8f 7d       	andi	r24, 0xDF	; 223
   1f9b8:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
   1f9bc:	80 91 e1 00 	lds	r24, 0x00E1
   1f9c0:	8f 7e       	andi	r24, 0xEF	; 239
   1f9c2:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
   1f9c6:	80 91 e2 00 	lds	r24, 0x00E2
   1f9ca:	8f 7e       	andi	r24, 0xEF	; 239
   1f9cc:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1f9d0:	80 91 e2 00 	lds	r24, 0x00E2
   1f9d4:	81 60       	ori	r24, 0x01	; 1
   1f9d6:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
   1f9da:	80 91 90 01 	lds	r24, 0x0190
   1f9de:	88 23       	and	r24, r24
   1f9e0:	31 f4       	brne	.+12     	; 0x1f9ee <__vector_10+0xf4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1f9e2:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
   1f9e6:	87 fd       	sbrc	r24, 7
   1f9e8:	02 c0       	rjmp	.+4      	; 0x1f9ee <__vector_10+0xf4>
   1f9ea:	81 e0       	ldi	r24, 0x01	; 1
   1f9ec:	01 c0       	rjmp	.+2      	; 0x1f9f0 <__vector_10+0xf6>
   1f9ee:	84 e0       	ldi	r24, 0x04	; 4
   1f9f0:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
   1f9f2:	f8 d1       	rcall	.+1008   	; 0x1fde4 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
   1f9f4:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
   1f9f8:	83 ff       	sbrs	r24, 3
   1f9fa:	21 c0       	rjmp	.+66     	; 0x1fa3e <__vector_10+0x144>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
   1f9fc:	80 91 e2 00 	lds	r24, 0x00E2
   1fa00:	83 ff       	sbrs	r24, 3
   1fa02:	1d c0       	rjmp	.+58     	; 0x1fa3e <__vector_10+0x144>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
   1fa04:	80 91 e1 00 	lds	r24, 0x00E1
   1fa08:	87 7f       	andi	r24, 0xF7	; 247
   1fa0a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
   1fa0e:	82 e0       	ldi	r24, 0x02	; 2
   1fa10:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
   1fa12:	10 92 90 01 	sts	0x0190, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1fa16:	80 91 e1 00 	lds	r24, 0x00E1
   1fa1a:	8e 7f       	andi	r24, 0xFE	; 254
   1fa1c:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1fa20:	80 91 e2 00 	lds	r24, 0x00E2
   1fa24:	8e 7f       	andi	r24, 0xFE	; 254
   1fa26:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1fa2a:	80 91 e2 00 	lds	r24, 0x00E2
   1fa2e:	80 61       	ori	r24, 0x10	; 16
   1fa30:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
   1fa34:	80 e0       	ldi	r24, 0x00	; 0
   1fa36:	60 e0       	ldi	r22, 0x00	; 0
   1fa38:	42 e0       	ldi	r20, 0x02	; 2
   1fa3a:	d3 de       	rcall	.-602    	; 0x1f7e2 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
   1fa3c:	d3 d1       	rcall	.+934    	; 0x1fde4 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
   1fa3e:	ff 91       	pop	r31
   1fa40:	ef 91       	pop	r30
   1fa42:	bf 91       	pop	r27
   1fa44:	af 91       	pop	r26
   1fa46:	9f 91       	pop	r25
   1fa48:	8f 91       	pop	r24
   1fa4a:	7f 91       	pop	r23
   1fa4c:	6f 91       	pop	r22
   1fa4e:	5f 91       	pop	r21
   1fa50:	4f 91       	pop	r20
   1fa52:	3f 91       	pop	r19
   1fa54:	2f 91       	pop	r18
   1fa56:	0f 90       	pop	r0
   1fa58:	0b be       	out	0x3b, r0	; 59
   1fa5a:	0f 90       	pop	r0
   1fa5c:	0f be       	out	0x3f, r0	; 63
   1fa5e:	0f 90       	pop	r0
   1fa60:	1f 90       	pop	r1
   1fa62:	18 95       	reti

0001fa64 <Endpoint_Write_Control_Stream_LE>:
   1fa64:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
   1fa66:	40 91 98 01 	lds	r20, 0x0198
   1fa6a:	50 91 99 01 	lds	r21, 0x0199
   1fa6e:	46 17       	cp	r20, r22
   1fa70:	57 07       	cpc	r21, r23
   1fa72:	18 f4       	brcc	.+6      	; 0x1fa7a <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
   1fa74:	f9 01       	movw	r30, r18
   1fa76:	90 e0       	ldi	r25, 0x00	; 0
   1fa78:	3c c0       	rjmp	.+120    	; 0x1faf2 <Endpoint_Write_Control_Stream_LE+0x8e>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
   1fa7a:	61 15       	cp	r22, r1
   1fa7c:	71 05       	cpc	r23, r1
   1fa7e:	11 f0       	breq	.+4      	; 0x1fa84 <Endpoint_Write_Control_Stream_LE+0x20>
   1fa80:	ab 01       	movw	r20, r22
   1fa82:	f8 cf       	rjmp	.-16     	; 0x1fa74 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1fa84:	80 91 e8 00 	lds	r24, 0x00E8
   1fa88:	8e 77       	andi	r24, 0x7E	; 126
   1fa8a:	80 93 e8 00 	sts	0x00E8, r24
   1fa8e:	40 e0       	ldi	r20, 0x00	; 0
   1fa90:	50 e0       	ldi	r21, 0x00	; 0
   1fa92:	f0 cf       	rjmp	.-32     	; 0x1fa74 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1fa94:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1fa96:	88 23       	and	r24, r24
   1fa98:	e9 f1       	breq	.+122    	; 0x1fb14 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1fa9a:	85 30       	cpi	r24, 0x05	; 5
   1fa9c:	e9 f1       	breq	.+122    	; 0x1fb18 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1fa9e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1faa2:	83 ff       	sbrs	r24, 3
   1faa4:	02 c0       	rjmp	.+4      	; 0x1faaa <Endpoint_Write_Control_Stream_LE+0x46>
   1faa6:	81 e0       	ldi	r24, 0x01	; 1
   1faa8:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1faaa:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
   1faae:	82 fd       	sbrc	r24, 2
   1fab0:	2b c0       	rjmp	.+86     	; 0x1fb08 <Endpoint_Write_Control_Stream_LE+0xa4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1fab2:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
   1fab6:	80 ff       	sbrs	r24, 0
   1fab8:	1c c0       	rjmp	.+56     	; 0x1faf2 <Endpoint_Write_Control_Stream_LE+0x8e>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
   1faba:	20 91 f2 00 	lds	r18, 0x00F2
   1fabe:	30 91 f3 00 	lds	r19, 0x00F3
   1fac2:	07 c0       	rjmp	.+14     	; 0x1fad2 <Endpoint_Write_Control_Stream_LE+0x6e>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
   1fac4:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1fac6:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
   1faca:	41 50       	subi	r20, 0x01	; 1
   1facc:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
   1face:	2f 5f       	subi	r18, 0xFF	; 255
   1fad0:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
   1fad2:	41 15       	cp	r20, r1
   1fad4:	51 05       	cpc	r21, r1
   1fad6:	19 f0       	breq	.+6      	; 0x1fade <Endpoint_Write_Control_Stream_LE+0x7a>
   1fad8:	28 30       	cpi	r18, 0x08	; 8
   1fada:	31 05       	cpc	r19, r1
   1fadc:	98 f3       	brcs	.-26     	; 0x1fac4 <Endpoint_Write_Control_Stream_LE+0x60>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
   1fade:	90 e0       	ldi	r25, 0x00	; 0
   1fae0:	28 30       	cpi	r18, 0x08	; 8
   1fae2:	31 05       	cpc	r19, r1
   1fae4:	09 f4       	brne	.+2      	; 0x1fae8 <Endpoint_Write_Control_Stream_LE+0x84>
   1fae6:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1fae8:	80 91 e8 00 	lds	r24, 0x00E8
   1faec:	8e 77       	andi	r24, 0x7E	; 126
   1faee:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
   1faf2:	41 15       	cp	r20, r1
   1faf4:	51 05       	cpc	r21, r1
   1faf6:	71 f6       	brne	.-100    	; 0x1fa94 <Endpoint_Write_Control_Stream_LE+0x30>
   1faf8:	99 23       	and	r25, r25
   1fafa:	61 f6       	brne	.-104    	; 0x1fa94 <Endpoint_Write_Control_Stream_LE+0x30>
   1fafc:	05 c0       	rjmp	.+10     	; 0x1fb08 <Endpoint_Write_Control_Stream_LE+0xa4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1fafe:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1fb00:	88 23       	and	r24, r24
   1fb02:	41 f0       	breq	.+16     	; 0x1fb14 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1fb04:	85 30       	cpi	r24, 0x05	; 5
   1fb06:	41 f0       	breq	.+16     	; 0x1fb18 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1fb08:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
   1fb0c:	82 ff       	sbrs	r24, 2
   1fb0e:	f7 cf       	rjmp	.-18     	; 0x1fafe <Endpoint_Write_Control_Stream_LE+0x9a>
   1fb10:	80 e0       	ldi	r24, 0x00	; 0
   1fb12:	08 95       	ret
   1fb14:	82 e0       	ldi	r24, 0x02	; 2
   1fb16:	08 95       	ret
   1fb18:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
   1fb1a:	08 95       	ret

0001fb1c <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
   1fb1c:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
   1fb1e:	61 15       	cp	r22, r1
   1fb20:	71 05       	cpc	r23, r1
   1fb22:	29 f4       	brne	.+10     	; 0x1fb2e <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1fb24:	80 91 e8 00 	lds	r24, 0x00E8
   1fb28:	8b 77       	andi	r24, 0x7B	; 123
   1fb2a:	80 93 e8 00 	sts	0x00E8, r24
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
   1fb2e:	f9 01       	movw	r30, r18
   1fb30:	21 c0       	rjmp	.+66     	; 0x1fb74 <Endpoint_Read_Control_Stream_LE+0x58>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1fb32:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1fb34:	88 23       	and	r24, r24
   1fb36:	69 f1       	breq	.+90     	; 0x1fb92 <Endpoint_Read_Control_Stream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1fb38:	85 30       	cpi	r24, 0x05	; 5
   1fb3a:	69 f1       	breq	.+90     	; 0x1fb96 <Endpoint_Read_Control_Stream_LE+0x7a>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1fb3c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1fb40:	83 ff       	sbrs	r24, 3
   1fb42:	02 c0       	rjmp	.+4      	; 0x1fb48 <Endpoint_Read_Control_Stream_LE+0x2c>
   1fb44:	81 e0       	ldi	r24, 0x01	; 1
   1fb46:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1fb48:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
   1fb4c:	82 ff       	sbrs	r24, 2
   1fb4e:	f1 cf       	rjmp	.-30     	; 0x1fb32 <Endpoint_Read_Control_Stream_LE+0x16>
   1fb50:	06 c0       	rjmp	.+12     	; 0x1fb5e <Endpoint_Read_Control_Stream_LE+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1fb52:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
   1fb56:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
   1fb58:	61 50       	subi	r22, 0x01	; 1
   1fb5a:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
   1fb5c:	31 f0       	breq	.+12     	; 0x1fb6a <Endpoint_Read_Control_Stream_LE+0x4e>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
   1fb5e:	80 91 f2 00 	lds	r24, 0x00F2
   1fb62:	90 91 f3 00 	lds	r25, 0x00F3
   1fb66:	89 2b       	or	r24, r25
   1fb68:	a1 f7       	brne	.-24     	; 0x1fb52 <Endpoint_Read_Control_Stream_LE+0x36>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1fb6a:	80 91 e8 00 	lds	r24, 0x00E8
   1fb6e:	8b 77       	andi	r24, 0x7B	; 123
   1fb70:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
   1fb74:	61 15       	cp	r22, r1
   1fb76:	71 05       	cpc	r23, r1
   1fb78:	e1 f6       	brne	.-72     	; 0x1fb32 <Endpoint_Read_Control_Stream_LE+0x16>
   1fb7a:	05 c0       	rjmp	.+10     	; 0x1fb86 <Endpoint_Read_Control_Stream_LE+0x6a>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1fb7c:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1fb7e:	88 23       	and	r24, r24
   1fb80:	41 f0       	breq	.+16     	; 0x1fb92 <Endpoint_Read_Control_Stream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1fb82:	85 30       	cpi	r24, 0x05	; 5
   1fb84:	41 f0       	breq	.+16     	; 0x1fb96 <Endpoint_Read_Control_Stream_LE+0x7a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1fb86:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
   1fb8a:	80 ff       	sbrs	r24, 0
   1fb8c:	f7 cf       	rjmp	.-18     	; 0x1fb7c <Endpoint_Read_Control_Stream_LE+0x60>
   1fb8e:	80 e0       	ldi	r24, 0x00	; 0
   1fb90:	08 95       	ret
   1fb92:	82 e0       	ldi	r24, 0x02	; 2
   1fb94:	08 95       	ret
   1fb96:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
   1fb98:	08 95       	ret

0001fb9a <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
   1fb9a:	0f 93       	push	r16
   1fb9c:	1f 93       	push	r17
   1fb9e:	df 93       	push	r29
   1fba0:	cf 93       	push	r28
   1fba2:	00 d0       	rcall	.+0      	; 0x1fba4 <USB_Device_ProcessControlRequest+0xa>
   1fba4:	cd b7       	in	r28, 0x3d	; 61
   1fba6:	de b7       	in	r29, 0x3e	; 62
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1fba8:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
   1fbac:	80 93 92 01 	sts	0x0192, r24
   1fbb0:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
   1fbb4:	80 93 93 01 	sts	0x0193, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
   1fbb8:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
   1fbbc:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
   1fbc0:	e4 e9       	ldi	r30, 0x94	; 148
   1fbc2:	f1 e0       	ldi	r31, 0x01	; 1
   1fbc4:	80 93 94 01 	sts	0x0194, r24
   1fbc8:	90 93 95 01 	sts	0x0195, r25
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
   1fbcc:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
   1fbd0:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
   1fbd4:	80 93 96 01 	sts	0x0196, r24
   1fbd8:	93 83       	std	Z+3, r25	; 0x03
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
   1fbda:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
   1fbde:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
   1fbe2:	80 93 98 01 	sts	0x0198, r24
   1fbe6:	95 83       	std	Z+5, r25	; 0x05

	EVENT_USB_Device_ControlRequest();
   1fbe8:	52 dd       	rcall	.-1372   	; 0x1f68e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1fbea:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
   1fbee:	83 ff       	sbrs	r24, 3
   1fbf0:	e4 c0       	rjmp	.+456    	; 0x1fdba <USB_Device_ProcessControlRequest+0x220>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
   1fbf2:	80 91 92 01 	lds	r24, 0x0192

		switch (USB_ControlRequest.bRequest)
   1fbf6:	90 91 93 01 	lds	r25, 0x0193
   1fbfa:	95 30       	cpi	r25, 0x05	; 5
   1fbfc:	09 f4       	brne	.+2      	; 0x1fc00 <USB_Device_ProcessControlRequest+0x66>
   1fbfe:	6d c0       	rjmp	.+218    	; 0x1fcda <USB_Device_ProcessControlRequest+0x140>
   1fc00:	96 30       	cpi	r25, 0x06	; 6
   1fc02:	40 f4       	brcc	.+16     	; 0x1fc14 <USB_Device_ProcessControlRequest+0x7a>
   1fc04:	91 30       	cpi	r25, 0x01	; 1
   1fc06:	81 f1       	breq	.+96     	; 0x1fc68 <USB_Device_ProcessControlRequest+0xce>
   1fc08:	91 30       	cpi	r25, 0x01	; 1
   1fc0a:	70 f0       	brcs	.+28     	; 0x1fc28 <USB_Device_ProcessControlRequest+0x8e>
   1fc0c:	93 30       	cpi	r25, 0x03	; 3
   1fc0e:	09 f0       	breq	.+2      	; 0x1fc12 <USB_Device_ProcessControlRequest+0x78>
   1fc10:	d4 c0       	rjmp	.+424    	; 0x1fdba <USB_Device_ProcessControlRequest+0x220>
   1fc12:	2a c0       	rjmp	.+84     	; 0x1fc68 <USB_Device_ProcessControlRequest+0xce>
   1fc14:	98 30       	cpi	r25, 0x08	; 8
   1fc16:	09 f4       	brne	.+2      	; 0x1fc1a <USB_Device_ProcessControlRequest+0x80>
   1fc18:	a3 c0       	rjmp	.+326    	; 0x1fd60 <USB_Device_ProcessControlRequest+0x1c6>
   1fc1a:	99 30       	cpi	r25, 0x09	; 9
   1fc1c:	09 f4       	brne	.+2      	; 0x1fc20 <USB_Device_ProcessControlRequest+0x86>
   1fc1e:	b2 c0       	rjmp	.+356    	; 0x1fd84 <USB_Device_ProcessControlRequest+0x1ea>
   1fc20:	96 30       	cpi	r25, 0x06	; 6
   1fc22:	09 f0       	breq	.+2      	; 0x1fc26 <USB_Device_ProcessControlRequest+0x8c>
   1fc24:	ca c0       	rjmp	.+404    	; 0x1fdba <USB_Device_ProcessControlRequest+0x220>
   1fc26:	7c c0       	rjmp	.+248    	; 0x1fd20 <USB_Device_ProcessControlRequest+0x186>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1fc28:	80 38       	cpi	r24, 0x80	; 128
   1fc2a:	09 f4       	brne	.+2      	; 0x1fc2e <USB_Device_ProcessControlRequest+0x94>
   1fc2c:	c6 c0       	rjmp	.+396    	; 0x1fdba <USB_Device_ProcessControlRequest+0x220>
   1fc2e:	82 38       	cpi	r24, 0x82	; 130
   1fc30:	09 f0       	breq	.+2      	; 0x1fc34 <USB_Device_ProcessControlRequest+0x9a>
   1fc32:	c3 c0       	rjmp	.+390    	; 0x1fdba <USB_Device_ProcessControlRequest+0x220>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
   1fc34:	80 91 96 01 	lds	r24, 0x0196
   1fc38:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1fc3a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
   1fc3e:	80 91 eb 00 	lds	r24, 0x00EB
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1fc42:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1fc46:	20 91 e8 00 	lds	r18, 0x00E8
   1fc4a:	27 7f       	andi	r18, 0xF7	; 247
   1fc4c:	20 93 e8 00 	sts	0x00E8, r18
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
   1fc50:	90 e0       	ldi	r25, 0x00	; 0
   1fc52:	25 e0       	ldi	r18, 0x05	; 5
   1fc54:	96 95       	lsr	r25
   1fc56:	87 95       	ror	r24
   1fc58:	2a 95       	dec	r18
   1fc5a:	e1 f7       	brne	.-8      	; 0x1fc54 <USB_Device_ProcessControlRequest+0xba>
   1fc5c:	81 70       	andi	r24, 0x01	; 1
   1fc5e:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
   1fc62:	10 92 f1 00 	sts	0x00F1, r1
   1fc66:	87 c0       	rjmp	.+270    	; 0x1fd76 <USB_Device_ProcessControlRequest+0x1dc>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1fc68:	88 23       	and	r24, r24
   1fc6a:	19 f0       	breq	.+6      	; 0x1fc72 <USB_Device_ProcessControlRequest+0xd8>
   1fc6c:	82 30       	cpi	r24, 0x02	; 2
   1fc6e:	09 f0       	breq	.+2      	; 0x1fc72 <USB_Device_ProcessControlRequest+0xd8>
   1fc70:	a4 c0       	rjmp	.+328    	; 0x1fdba <USB_Device_ProcessControlRequest+0x220>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
   1fc72:	8f 71       	andi	r24, 0x1F	; 31
   1fc74:	82 30       	cpi	r24, 0x02	; 2
   1fc76:	09 f0       	breq	.+2      	; 0x1fc7a <USB_Device_ProcessControlRequest+0xe0>
   1fc78:	a0 c0       	rjmp	.+320    	; 0x1fdba <USB_Device_ProcessControlRequest+0x220>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
   1fc7a:	80 91 94 01 	lds	r24, 0x0194
   1fc7e:	88 23       	and	r24, r24
   1fc80:	31 f5       	brne	.+76     	; 0x1fcce <USB_Device_ProcessControlRequest+0x134>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
   1fc82:	20 91 96 01 	lds	r18, 0x0196
   1fc86:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
   1fc88:	09 f4       	brne	.+2      	; 0x1fc8c <USB_Device_ProcessControlRequest+0xf2>
   1fc8a:	97 c0       	rjmp	.+302    	; 0x1fdba <USB_Device_ProcessControlRequest+0x220>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1fc8c:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
   1fc90:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
   1fc94:	80 ff       	sbrs	r24, 0
   1fc96:	1b c0       	rjmp	.+54     	; 0x1fcce <USB_Device_ProcessControlRequest+0x134>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
   1fc98:	93 30       	cpi	r25, 0x03	; 3
   1fc9a:	21 f4       	brne	.+8      	; 0x1fca4 <USB_Device_ProcessControlRequest+0x10a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1fc9c:	80 91 eb 00 	lds	r24, 0x00EB
   1fca0:	80 62       	ori	r24, 0x20	; 32
   1fca2:	13 c0       	rjmp	.+38     	; 0x1fcca <USB_Device_ProcessControlRequest+0x130>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
   1fca4:	80 91 eb 00 	lds	r24, 0x00EB
   1fca8:	80 61       	ori	r24, 0x10	; 16
   1fcaa:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
   1fcae:	81 e0       	ldi	r24, 0x01	; 1
   1fcb0:	90 e0       	ldi	r25, 0x00	; 0
   1fcb2:	02 c0       	rjmp	.+4      	; 0x1fcb8 <USB_Device_ProcessControlRequest+0x11e>
   1fcb4:	88 0f       	add	r24, r24
   1fcb6:	99 1f       	adc	r25, r25
   1fcb8:	2a 95       	dec	r18
   1fcba:	e2 f7       	brpl	.-8      	; 0x1fcb4 <USB_Device_ProcessControlRequest+0x11a>
   1fcbc:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
   1fcc0:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
   1fcc4:	80 91 eb 00 	lds	r24, 0x00EB
   1fcc8:	88 60       	ori	r24, 0x08	; 8
   1fcca:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1fcce:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1fcd2:	80 91 e8 00 	lds	r24, 0x00E8
   1fcd6:	87 7f       	andi	r24, 0xF7	; 247
   1fcd8:	51 c0       	rjmp	.+162    	; 0x1fd7c <USB_Device_ProcessControlRequest+0x1e2>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1fcda:	88 23       	and	r24, r24
   1fcdc:	09 f0       	breq	.+2      	; 0x1fce0 <USB_Device_ProcessControlRequest+0x146>
   1fcde:	6d c0       	rjmp	.+218    	; 0x1fdba <USB_Device_ProcessControlRequest+0x220>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
   1fce0:	10 91 94 01 	lds	r17, 0x0194
   1fce4:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
   1fce6:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
   1fce8:	f8 94       	cli
   1fcea:	80 91 e8 00 	lds	r24, 0x00E8
   1fcee:	87 7f       	andi	r24, 0xF7	; 247
   1fcf0:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
   1fcf4:	89 dd       	rcall	.-1262   	; 0x1f808 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1fcf6:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
   1fcfa:	80 ff       	sbrs	r24, 0
   1fcfc:	fc cf       	rjmp	.-8      	; 0x1fcf6 <USB_Device_ProcessControlRequest+0x15c>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
   1fcfe:	80 91 e3 00 	lds	r24, 0x00E3
   1fd02:	80 78       	andi	r24, 0x80	; 128
   1fd04:	81 2b       	or	r24, r17

				UDADDR = Temp;
   1fd06:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
   1fd0a:	80 68       	ori	r24, 0x80	; 128
   1fd0c:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
   1fd10:	11 23       	and	r17, r17
   1fd12:	11 f4       	brne	.+4      	; 0x1fd18 <USB_Device_ProcessControlRequest+0x17e>
   1fd14:	82 e0       	ldi	r24, 0x02	; 2
   1fd16:	01 c0       	rjmp	.+2      	; 0x1fd1a <USB_Device_ProcessControlRequest+0x180>
   1fd18:	83 e0       	ldi	r24, 0x03	; 3
   1fd1a:	8e bb       	out	0x1e, r24	; 30
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
   1fd1c:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
   1fd1e:	4d c0       	rjmp	.+154    	; 0x1fdba <USB_Device_ProcessControlRequest+0x220>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1fd20:	80 58       	subi	r24, 0x80	; 128
   1fd22:	82 30       	cpi	r24, 0x02	; 2
   1fd24:	08 f0       	brcs	.+2      	; 0x1fd28 <USB_Device_ProcessControlRequest+0x18e>
   1fd26:	49 c0       	rjmp	.+146    	; 0x1fdba <USB_Device_ProcessControlRequest+0x220>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
   1fd28:	80 91 94 01 	lds	r24, 0x0194
   1fd2c:	90 91 95 01 	lds	r25, 0x0195
   1fd30:	60 91 96 01 	lds	r22, 0x0196
   1fd34:	ae 01       	movw	r20, r28
   1fd36:	4f 5f       	subi	r20, 0xFF	; 255
   1fd38:	5f 4f       	sbci	r21, 0xFF	; 255
   1fd3a:	2e dd       	rcall	.-1444   	; 0x1f798 <CALLBACK_USB_GetDescriptor>
   1fd3c:	bc 01       	movw	r22, r24
   1fd3e:	00 97       	sbiw	r24, 0x00	; 0
   1fd40:	09 f4       	brne	.+2      	; 0x1fd44 <USB_Device_ProcessControlRequest+0x1aa>
   1fd42:	3b c0       	rjmp	.+118    	; 0x1fdba <USB_Device_ProcessControlRequest+0x220>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1fd44:	80 91 e8 00 	lds	r24, 0x00E8
   1fd48:	87 7f       	andi	r24, 0xF7	; 247
   1fd4a:	80 93 e8 00 	sts	0x00E8, r24
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
   1fd4e:	89 81       	ldd	r24, Y+1	; 0x01
   1fd50:	9a 81       	ldd	r25, Y+2	; 0x02
   1fd52:	88 de       	rcall	.-752    	; 0x1fa64 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1fd54:	80 91 e8 00 	lds	r24, 0x00E8
   1fd58:	8b 77       	andi	r24, 0x7B	; 123
   1fd5a:	80 93 e8 00 	sts	0x00E8, r24
   1fd5e:	2d c0       	rjmp	.+90     	; 0x1fdba <USB_Device_ProcessControlRequest+0x220>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
   1fd60:	80 38       	cpi	r24, 0x80	; 128
   1fd62:	59 f5       	brne	.+86     	; 0x1fdba <USB_Device_ProcessControlRequest+0x220>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1fd64:	80 91 e8 00 	lds	r24, 0x00E8
   1fd68:	87 7f       	andi	r24, 0xF7	; 247
   1fd6a:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
   1fd6e:	80 91 90 01 	lds	r24, 0x0190
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1fd72:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1fd76:	80 91 e8 00 	lds	r24, 0x00E8
   1fd7a:	8e 77       	andi	r24, 0x7E	; 126
   1fd7c:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
   1fd80:	43 dd       	rcall	.-1402   	; 0x1f808 <Endpoint_ClearStatusStage>
   1fd82:	1b c0       	rjmp	.+54     	; 0x1fdba <USB_Device_ProcessControlRequest+0x220>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1fd84:	88 23       	and	r24, r24
   1fd86:	c9 f4       	brne	.+50     	; 0x1fdba <USB_Device_ProcessControlRequest+0x220>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
   1fd88:	90 91 94 01 	lds	r25, 0x0194
   1fd8c:	92 30       	cpi	r25, 0x02	; 2
   1fd8e:	a8 f4       	brcc	.+42     	; 0x1fdba <USB_Device_ProcessControlRequest+0x220>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1fd90:	80 91 e8 00 	lds	r24, 0x00E8
   1fd94:	87 7f       	andi	r24, 0xF7	; 247
   1fd96:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
   1fd9a:	90 93 90 01 	sts	0x0190, r25

	Endpoint_ClearStatusStage();
   1fd9e:	34 dd       	rcall	.-1432   	; 0x1f808 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
   1fda0:	80 91 90 01 	lds	r24, 0x0190
   1fda4:	88 23       	and	r24, r24
   1fda6:	31 f4       	brne	.+12     	; 0x1fdb4 <USB_Device_ProcessControlRequest+0x21a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1fda8:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
   1fdac:	87 fd       	sbrc	r24, 7
   1fdae:	02 c0       	rjmp	.+4      	; 0x1fdb4 <USB_Device_ProcessControlRequest+0x21a>
   1fdb0:	81 e0       	ldi	r24, 0x01	; 1
   1fdb2:	01 c0       	rjmp	.+2      	; 0x1fdb6 <USB_Device_ProcessControlRequest+0x21c>
   1fdb4:	84 e0       	ldi	r24, 0x04	; 4
   1fdb6:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
   1fdb8:	9e dc       	rcall	.-1732   	; 0x1f6f6 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1fdba:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
   1fdbe:	83 ff       	sbrs	r24, 3
   1fdc0:	0a c0       	rjmp	.+20     	; 0x1fdd6 <USB_Device_ProcessControlRequest+0x23c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1fdc2:	80 91 eb 00 	lds	r24, 0x00EB
   1fdc6:	80 62       	ori	r24, 0x20	; 32
   1fdc8:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1fdcc:	80 91 e8 00 	lds	r24, 0x00E8
   1fdd0:	87 7f       	andi	r24, 0xF7	; 247
   1fdd2:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
   1fdd6:	0f 90       	pop	r0
   1fdd8:	0f 90       	pop	r0
   1fdda:	cf 91       	pop	r28
   1fddc:	df 91       	pop	r29
   1fdde:	1f 91       	pop	r17
   1fde0:	0f 91       	pop	r16
   1fde2:	08 95       	ret

0001fde4 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
   1fde4:	08 95       	ret

0001fde6 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
   1fde6:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
   1fde8:	8e b3       	in	r24, 0x1e	; 30
   1fdea:	88 23       	and	r24, r24
   1fdec:	61 f0       	breq	.+24     	; 0x1fe06 <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
   1fdee:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1fdf2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1fdf6:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
   1fdfa:	83 ff       	sbrs	r24, 3
   1fdfc:	01 c0       	rjmp	.+2      	; 0x1fe00 <USB_USBTask+0x1a>
		  USB_Device_ProcessControlRequest();
   1fdfe:	cd de       	rcall	.-614    	; 0x1fb9a <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
   1fe00:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1fe02:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
   1fe06:	1f 91       	pop	r17
   1fe08:	08 95       	ret

0001fe0a <__eerd_byte_usb1287>:
   1fe0a:	f9 99       	sbic	0x1f, 1	; 31
   1fe0c:	fe cf       	rjmp	.-4      	; 0x1fe0a <__eerd_byte_usb1287>
   1fe0e:	92 bd       	out	0x22, r25	; 34
   1fe10:	81 bd       	out	0x21, r24	; 33
   1fe12:	f8 9a       	sbi	0x1f, 0	; 31
   1fe14:	99 27       	eor	r25, r25
   1fe16:	80 b5       	in	r24, 0x20	; 32
   1fe18:	08 95       	ret

0001fe1a <__eewr_byte_usb1287>:
   1fe1a:	26 2f       	mov	r18, r22

0001fe1c <__eewr_r18_usb1287>:
   1fe1c:	f9 99       	sbic	0x1f, 1	; 31
   1fe1e:	fe cf       	rjmp	.-4      	; 0x1fe1c <__eewr_r18_usb1287>
   1fe20:	1f ba       	out	0x1f, r1	; 31
   1fe22:	92 bd       	out	0x22, r25	; 34
   1fe24:	81 bd       	out	0x21, r24	; 33
   1fe26:	20 bd       	out	0x20, r18	; 32
   1fe28:	0f b6       	in	r0, 0x3f	; 63
   1fe2a:	f8 94       	cli
   1fe2c:	fa 9a       	sbi	0x1f, 2	; 31
   1fe2e:	f9 9a       	sbi	0x1f, 1	; 31
   1fe30:	0f be       	out	0x3f, r0	; 63
   1fe32:	01 96       	adiw	r24, 0x01	; 1
   1fe34:	08 95       	ret

0001fe36 <_exit>:
   1fe36:	f8 94       	cli

0001fe38 <__stop_program>:
   1fe38:	ff cf       	rjmp	.-2      	; 0x1fe38 <__stop_program>
