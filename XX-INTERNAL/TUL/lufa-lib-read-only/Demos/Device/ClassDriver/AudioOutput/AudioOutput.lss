
AudioOutput.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000fd2  00001066  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fd2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080010c  0080010c  00001072  2**0
                  ALLOC
  3 .stab         00000b1c  00000000  00000000  00001074  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00001b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000478  00000000  00000000  00001cff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000c90  00000000  00000000  00002177  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000082b5  00000000  00000000  00002e07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002032  00000000  00000000  0000b0bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000063a1  00000000  00000000  0000d0ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006b0  00000000  00000000  00013490  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000035a1  00000000  00000000  00013b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000035c0  00000000  00000000  000170e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000580  00000000  00000000  0001a6a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
   0:	b0 c0       	rjmp	.+352    	; 0x162 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   2:	00 00       	nop

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
   4:	cb c0       	rjmp	.+406    	; 0x19c <__bad_interrupt>
   6:	00 00       	nop
   8:	c9 c0       	rjmp	.+402    	; 0x19c <__bad_interrupt>
   a:	00 00       	nop
   c:	c7 c0       	rjmp	.+398    	; 0x19c <__bad_interrupt>
   e:	00 00       	nop
  10:	c5 c0       	rjmp	.+394    	; 0x19c <__bad_interrupt>
  12:	00 00       	nop
  14:	c3 c0       	rjmp	.+390    	; 0x19c <__bad_interrupt>
  16:	00 00       	nop
  18:	c1 c0       	rjmp	.+386    	; 0x19c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	bf c0       	rjmp	.+382    	; 0x19c <__bad_interrupt>
  1e:	00 00       	nop
  20:	bd c0       	rjmp	.+378    	; 0x19c <__bad_interrupt>
  22:	00 00       	nop
  24:	bb c0       	rjmp	.+374    	; 0x19c <__bad_interrupt>
  26:	00 00       	nop
  28:	ee c2       	rjmp	.+1500   	; 0x606 <__vector_10>
  2a:	00 00       	nop
  2c:	b7 c0       	rjmp	.+366    	; 0x19c <__bad_interrupt>
  2e:	00 00       	nop
  30:	b5 c0       	rjmp	.+362    	; 0x19c <__bad_interrupt>
  32:	00 00       	nop
  34:	b3 c0       	rjmp	.+358    	; 0x19c <__bad_interrupt>
  36:	00 00       	nop
  38:	b1 c0       	rjmp	.+354    	; 0x19c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	af c0       	rjmp	.+350    	; 0x19c <__bad_interrupt>
  3e:	00 00       	nop
  40:	ad c0       	rjmp	.+346    	; 0x19c <__bad_interrupt>
  42:	00 00       	nop
  44:	ab c0       	rjmp	.+342    	; 0x19c <__bad_interrupt>
  46:	00 00       	nop
  48:	a9 c0       	rjmp	.+338    	; 0x19c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	a7 c0       	rjmp	.+334    	; 0x19c <__bad_interrupt>
  4e:	00 00       	nop
  50:	a5 c0       	rjmp	.+330    	; 0x19c <__bad_interrupt>
  52:	00 00       	nop
  54:	a4 c0       	rjmp	.+328    	; 0x19e <__vector_21>
  56:	00 00       	nop
  58:	a1 c0       	rjmp	.+322    	; 0x19c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	9f c0       	rjmp	.+318    	; 0x19c <__bad_interrupt>
  5e:	00 00       	nop
  60:	9d c0       	rjmp	.+314    	; 0x19c <__bad_interrupt>
  62:	00 00       	nop
  64:	9b c0       	rjmp	.+310    	; 0x19c <__bad_interrupt>
  66:	00 00       	nop
  68:	99 c0       	rjmp	.+306    	; 0x19c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	97 c0       	rjmp	.+302    	; 0x19c <__bad_interrupt>
  6e:	00 00       	nop
  70:	95 c0       	rjmp	.+298    	; 0x19c <__bad_interrupt>
  72:	00 00       	nop
  74:	93 c0       	rjmp	.+294    	; 0x19c <__bad_interrupt>
  76:	00 00       	nop
  78:	91 c0       	rjmp	.+290    	; 0x19c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	8f c0       	rjmp	.+286    	; 0x19c <__bad_interrupt>
  7e:	00 00       	nop
  80:	8d c0       	rjmp	.+282    	; 0x19c <__bad_interrupt>
  82:	00 00       	nop
  84:	8b c0       	rjmp	.+278    	; 0x19c <__bad_interrupt>
  86:	00 00       	nop
  88:	89 c0       	rjmp	.+274    	; 0x19c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	87 c0       	rjmp	.+270    	; 0x19c <__bad_interrupt>
  8e:	00 00       	nop
  90:	85 c0       	rjmp	.+266    	; 0x19c <__bad_interrupt>
  92:	00 00       	nop
  94:	83 c0       	rjmp	.+262    	; 0x19c <__bad_interrupt>
  96:	00 00       	nop

00000098 <DeviceDescriptor>:
  98:	12 01 00 02 00 00 00 08 eb 03 46 20 02 00 01 02     ..........F ....
  a8:	00 01                                               ..

000000aa <ConfigurationDescriptor>:
  aa:	09 02 70 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..p.....2.......
  ba:	00 00 09 24 01 00 01 1e 00 01 01 0c 24 02 01 01     ...$........$...
  ca:	01 00 02 03 00 00 00 09 24 03 02 01 03 00 01 00     ........$.......
  da:	09 04 01 00 00 01 02 00 00 09 04 01 01 01 01 02     ................
  ea:	00 00 07 24 01 01 01 01 00 17 24 02 01 02 02 10     ...$......$.....
  fa:	05 40 1f 00 11 2b 00 22 56 00 44 ac 00 80 bb 00     .@...+."V.D.....
 10a:	09 05 01 0d 00 01 01 00 00 07 25 01 01 00 00 00     ..........%.....

0000011a <LanguageString>:
 11a:	04 03 09 04                                         ....

0000011e <ManufacturerString>:
 11e:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
 12e:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000138 <ProductString>:
 138:	28 03 4c 00 55 00 46 00 41 00 20 00 41 00 75 00     (.L.U.F.A. .A.u.
 148:	64 00 69 00 6f 00 20 00 4f 00 75 00 74 00 20 00     d.i.o. .O.u.t. .
 158:	44 00 65 00 6d 00 6f 00 00 00                       D.e.m.o...

00000162 <__ctors_end>:
 162:	11 24       	eor	r1, r1
 164:	1f be       	out	0x3f, r1	; 63
 166:	cf ef       	ldi	r28, 0xFF	; 255
 168:	d0 e2       	ldi	r29, 0x20	; 32
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
 16e:	11 e0       	ldi	r17, 0x01	; 1
 170:	a0 e0       	ldi	r26, 0x00	; 0
 172:	b1 e0       	ldi	r27, 0x01	; 1
 174:	e2 ed       	ldi	r30, 0xD2	; 210
 176:	ff e0       	ldi	r31, 0x0F	; 15
 178:	00 e0       	ldi	r16, 0x00	; 0
 17a:	0b bf       	out	0x3b, r16	; 59
 17c:	02 c0       	rjmp	.+4      	; 0x182 <__do_copy_data+0x14>
 17e:	07 90       	elpm	r0, Z+
 180:	0d 92       	st	X+, r0
 182:	ac 30       	cpi	r26, 0x0C	; 12
 184:	b1 07       	cpc	r27, r17
 186:	d9 f7       	brne	.-10     	; 0x17e <__do_copy_data+0x10>

00000188 <__do_clear_bss>:
 188:	11 e0       	ldi	r17, 0x01	; 1
 18a:	ac e0       	ldi	r26, 0x0C	; 12
 18c:	b1 e0       	ldi	r27, 0x01	; 1
 18e:	01 c0       	rjmp	.+2      	; 0x192 <.do_clear_bss_start>

00000190 <.do_clear_bss_loop>:
 190:	1d 92       	st	X+, r1

00000192 <.do_clear_bss_start>:
 192:	a9 31       	cpi	r26, 0x19	; 25
 194:	b1 07       	cpc	r27, r17
 196:	e1 f7       	brne	.-8      	; 0x190 <.do_clear_bss_loop>
 198:	4b d1       	rcall	.+662    	; 0x430 <main>
 19a:	19 c7       	rjmp	.+3634   	; 0xfce <_exit>

0000019c <__bad_interrupt>:
 19c:	31 cf       	rjmp	.-414    	; 0x0 <__vectors>

0000019e <__vector_21>:
	USB_Init();
}

/** ISR to handle the reloading of the PWM timer with the next sample. */
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	2f 93       	push	r18
 1aa:	3f 93       	push	r19
 1ac:	4f 93       	push	r20
 1ae:	5f 93       	push	r21
 1b0:	6f 93       	push	r22
 1b2:	7f 93       	push	r23
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 1b8:	70 91 e9 00 	lds	r23, 0x00E9
			 */
			static inline bool Audio_Device_IsSampleReceived(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
			                                                 ATTR_NON_NULL_PTR_ARG(1) ATTR_ALWAYS_INLINE;
			static inline bool Audio_Device_IsSampleReceived(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
			{
				if ((USB_DeviceState != DEVICE_STATE_Configured) || !(AudioInterfaceInfo->State.InterfaceEnabled))
 1bc:	80 91 10 01 	lds	r24, 0x0110
 1c0:	84 30       	cpi	r24, 0x04	; 4
 1c2:	09 f0       	breq	.+2      	; 0x1c6 <__vector_21+0x28>
 1c4:	62 c0       	rjmp	.+196    	; 0x28a <__vector_21+0xec>
 1c6:	80 91 07 01 	lds	r24, 0x0107
 1ca:	88 23       	and	r24, r24
 1cc:	09 f4       	brne	.+2      	; 0x1d0 <__vector_21+0x32>
 1ce:	5d c0       	rjmp	.+186    	; 0x28a <__vector_21+0xec>
				  return false;

				Endpoint_SelectEndpoint(AudioInterfaceInfo->Config.DataOUTEndpointNumber);
 1d0:	80 91 04 01 	lds	r24, 0x0104
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 1d4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 1d8:	80 91 e8 00 	lds	r24, 0x00E8
	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
	
	/* Check that the USB bus is ready for the next sample to read */
	if (Audio_Device_IsSampleReceived(&Speaker_Audio_Interface))
 1dc:	82 ff       	sbrs	r24, 2
 1de:	55 c0       	rjmp	.+170    	; 0x28a <__vector_21+0xec>
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 1e0:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 1e4:	90 91 f1 00 	lds	r25, 0x00F1

				return Data.Value;
 1e8:	9c 01       	movw	r18, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 1ea:	80 91 f2 00 	lds	r24, 0x00F2
 1ee:	90 91 f3 00 	lds	r25, 0x00F3

				(void)AudioInterfaceInfo;

				Sample = (int16_t)Endpoint_Read_16_LE();

				if (!(Endpoint_BytesInEndpoint()))
 1f2:	89 2b       	or	r24, r25
 1f4:	29 f4       	brne	.+10     	; 0x200 <__vector_21+0x62>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 1f6:	80 91 e8 00 	lds	r24, 0x00E8
 1fa:	8b 77       	andi	r24, 0x7B	; 123
 1fc:	80 93 e8 00 	sts	0x00E8, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 200:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 204:	90 91 f1 00 	lds	r25, 0x00F1

				return Data.Value;
 208:	ac 01       	movw	r20, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 20a:	80 91 f2 00 	lds	r24, 0x00F2
 20e:	90 91 f3 00 	lds	r25, 0x00F3
 212:	89 2b       	or	r24, r25
 214:	29 f4       	brne	.+10     	; 0x220 <__vector_21+0x82>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 216:	80 91 e8 00 	lds	r24, 0x00E8
 21a:	8b 77       	andi	r24, 0x7B	; 123
 21c:	80 93 e8 00 	sts	0x00E8, r24
		/* Retrieve the signed 16-bit left and right audio samples, convert to 8-bit */
		int8_t LeftSample_8Bit  = (Audio_Device_ReadSample16(&Speaker_Audio_Interface) >> 8);
		int8_t RightSample_8Bit = (Audio_Device_ReadSample16(&Speaker_Audio_Interface) >> 8);

		/* Mix the two channels together to produce a mono, 8-bit sample */
		int8_t MixedSample_8Bit = (((int16_t)LeftSample_8Bit + (int16_t)RightSample_8Bit) >> 1);
 220:	23 2f       	mov	r18, r19
 222:	33 0f       	add	r19, r19
 224:	33 0b       	sbc	r19, r19
 226:	33 27       	eor	r19, r19
 228:	27 fd       	sbrc	r18, 7
 22a:	30 95       	com	r19
 22c:	45 2f       	mov	r20, r21
 22e:	55 0f       	add	r21, r21
 230:	55 0b       	sbc	r21, r21
 232:	55 27       	eor	r21, r21
 234:	47 fd       	sbrc	r20, 7
 236:	50 95       	com	r21
 238:	ca 01       	movw	r24, r20
 23a:	82 0f       	add	r24, r18
 23c:	93 1f       	adc	r25, r19
 23e:	95 95       	asr	r25
 240:	87 95       	ror	r24
 242:	68 2f       	mov	r22, r24
		#if defined(AUDIO_OUT_MONO)
		/* Load the sample into the PWM timer channel */
		OCR3A = (MixedSample_8Bit ^ (1 << 7));
		#elif defined(AUDIO_OUT_STEREO)
		/* Load the dual 8-bit samples into the PWM timer channels */
		OCR3A = (LeftSample_8Bit  ^ (1 << 7));
 244:	80 e8       	ldi	r24, 0x80	; 128
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	28 27       	eor	r18, r24
 24a:	39 27       	eor	r19, r25
 24c:	30 93 99 00 	sts	0x0099, r19
 250:	20 93 98 00 	sts	0x0098, r18
		OCR3B = (RightSample_8Bit ^ (1 << 7));
 254:	48 27       	eor	r20, r24
 256:	59 27       	eor	r21, r25
 258:	50 93 9b 00 	sts	0x009B, r21
 25c:	40 93 9a 00 	sts	0x009A, r20
		#endif

		uint8_t LEDMask = LEDS_NO_LEDS;

		/* Turn on LEDs as the sample amplitude increases */
		if (MixedSample_8Bit > 16)
 260:	61 31       	cpi	r22, 0x11	; 17
 262:	14 f0       	brlt	.+4      	; 0x268 <__vector_21+0xca>
 264:	90 ef       	ldi	r25, 0xF0	; 240
 266:	0d c0       	rjmp	.+26     	; 0x282 <__vector_21+0xe4>
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3 | LEDS_LED4);
		else if (MixedSample_8Bit > 8)
 268:	69 30       	cpi	r22, 0x09	; 9
 26a:	14 f0       	brlt	.+4      	; 0x270 <__vector_21+0xd2>
 26c:	90 eb       	ldi	r25, 0xB0	; 176
 26e:	09 c0       	rjmp	.+18     	; 0x282 <__vector_21+0xe4>
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3);
		else if (MixedSample_8Bit > 4)
 270:	65 30       	cpi	r22, 0x05	; 5
 272:	14 f0       	brlt	.+4      	; 0x278 <__vector_21+0xda>
 274:	90 e3       	ldi	r25, 0x30	; 48
 276:	05 c0       	rjmp	.+10     	; 0x282 <__vector_21+0xe4>
		  LEDMask = (LEDS_LED1 | LEDS_LED2);
		else if (MixedSample_8Bit > 2)
 278:	63 30       	cpi	r22, 0x03	; 3
 27a:	14 f0       	brlt	.+4      	; 0x280 <__vector_21+0xe2>
 27c:	90 e1       	ldi	r25, 0x10	; 16
 27e:	01 c0       	rjmp	.+2      	; 0x282 <__vector_21+0xe4>
 280:	90 e0       	ldi	r25, 0x00	; 0
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 282:	8b b1       	in	r24, 0x0b	; 11
 284:	8f 70       	andi	r24, 0x0F	; 15
 286:	98 2b       	or	r25, r24
 288:	9b b9       	out	0x0b, r25	; 11
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 28a:	77 70       	andi	r23, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 28c:	70 93 e9 00 	sts	0x00E9, r23

		LEDs_SetAllLEDs(LEDMask);
	}
	
	Endpoint_SelectEndpoint(PrevEndpoint);	
}
 290:	9f 91       	pop	r25
 292:	8f 91       	pop	r24
 294:	7f 91       	pop	r23
 296:	6f 91       	pop	r22
 298:	5f 91       	pop	r21
 29a:	4f 91       	pop	r20
 29c:	3f 91       	pop	r19
 29e:	2f 91       	pop	r18
 2a0:	0f 90       	pop	r0
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	0f 90       	pop	r0
 2a6:	1f 90       	pop	r1
 2a8:	18 95       	reti

000002aa <EVENT_USB_Device_Connect>:

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
 2aa:	1f 93       	push	r17
 2ac:	8b b1       	in	r24, 0x0b	; 11
 2ae:	8f 70       	andi	r24, 0x0F	; 15
 2b0:	80 6a       	ori	r24, 0xA0	; 160
 2b2:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	/* Sample reload timer initialization */
	TIMSK0  = (1 << OCIE0A);
 2b4:	12 e0       	ldi	r17, 0x02	; 2
 2b6:	10 93 6e 00 	sts	0x006E, r17
	OCR0A   = ((F_CPU / 8 / CurrentAudioSampleFrequency) - 1);
 2ba:	20 91 08 01 	lds	r18, 0x0108
 2be:	30 91 09 01 	lds	r19, 0x0109
 2c2:	40 91 0a 01 	lds	r20, 0x010A
 2c6:	50 91 0b 01 	lds	r21, 0x010B
 2ca:	60 e4       	ldi	r22, 0x40	; 64
 2cc:	72 e4       	ldi	r23, 0x42	; 66
 2ce:	8f e0       	ldi	r24, 0x0F	; 15
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	5b d6       	rcall	.+3254   	; 0xf8a <__udivmodsi4>
 2d4:	21 50       	subi	r18, 0x01	; 1
 2d6:	27 bd       	out	0x27, r18	; 39
	TCCR0A  = (1 << WGM01);  // CTC mode
 2d8:	14 bd       	out	0x24, r17	; 36
	TCCR0B  = (1 << CS01);   // Fcpu/8 speed
 2da:	15 bd       	out	0x25, r17	; 37
	#if defined(AUDIO_OUT_MONO)
	/* Set speaker as output */
	DDRC   |= (1 << 6);
	#elif defined(AUDIO_OUT_STEREO)
	/* Set speakers as outputs */
	DDRC   |= ((1 << 6) | (1 << 5));
 2dc:	87 b1       	in	r24, 0x07	; 7
 2de:	80 66       	ori	r24, 0x60	; 96
 2e0:	87 b9       	out	0x07, r24	; 7
	DDRC   |= 0xFF;
	#endif

	#if (defined(AUDIO_OUT_MONO) || defined(AUDIO_OUT_STEREO))
	/* PWM speaker timer initialization */
	TCCR3A  = ((1 << WGM30) | (1 << COM3A1) | (1 << COM3A0)
 2e2:	81 ef       	ldi	r24, 0xF1	; 241
 2e4:	80 93 90 00 	sts	0x0090, r24
	        | (1 << COM3B1) | (1 << COM3B0)); // Set on match, clear on TOP
	TCCR3B  = ((1 << WGM32) | (1 << CS30));  // Fast 8-Bit PWM, F_CPU speed
 2e8:	89 e0       	ldi	r24, 0x09	; 9
 2ea:	80 93 91 00 	sts	0x0091, r24
	#endif
}
 2ee:	1f 91       	pop	r17
 2f0:	08 95       	ret

000002f2 <EVENT_USB_Device_Disconnect>:
 2f2:	8b b1       	in	r24, 0x0b	; 11
 2f4:	8f 70       	andi	r24, 0x0F	; 15
 2f6:	80 61       	ori	r24, 0x10	; 16
 2f8:	8b b9       	out	0x0b, r24	; 11
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);

	/* Stop the sample reload timer */
	TCCR0B = 0;
 2fa:	15 bc       	out	0x25, r1	; 37

	#if (defined(AUDIO_OUT_MONO) || defined(AUDIO_OUT_STEREO))
	/* Stop the PWM generation timer */
	TCCR3B = 0;
 2fc:	10 92 91 00 	sts	0x0091, r1
	#if defined(AUDIO_OUT_MONO)
	/* Set speaker as input to reduce current draw */
	DDRC  &= ~(1 << 6);
	#elif defined(AUDIO_OUT_STEREO)
	/* Set speakers as inputs to reduce current draw */
	DDRC  &= ~((1 << 6) | (1 << 5));
 300:	87 b1       	in	r24, 0x07	; 7
 302:	8f 79       	andi	r24, 0x9F	; 159
 304:	87 b9       	out	0x07, r24	; 7
	#elif defined(AUDIO_OUT_PORTC)
	/* Set PORTC low */
	PORTC = 0x00;
	#endif
}
 306:	08 95       	ret

00000308 <CALLBACK_Audio_Device_GetSetEndpointProperty>:
                                                  const uint8_t EndpointProperty,
                                                  const uint8_t EndpointAddress,
                                                  const uint8_t EndpointControl,
                                                  uint16_t* const DataLength,
                                                  uint8_t* Data)
{
 308:	ef 92       	push	r14
 30a:	ff 92       	push	r15
 30c:	0f 93       	push	r16
 30e:	1f 93       	push	r17
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
 314:	f8 01       	movw	r30, r16
 316:	e7 01       	movw	r28, r14
	/* Check the requested endpoint to see if a supported endpoint is being manipulated */
	if (EndpointAddress == (ENDPOINT_DIR_OUT | Speaker_Audio_Interface.Config.DataOUTEndpointNumber))
 318:	80 91 04 01 	lds	r24, 0x0104
 31c:	48 17       	cp	r20, r24
 31e:	09 f0       	breq	.+2      	; 0x322 <CALLBACK_Audio_Device_GetSetEndpointProperty+0x1a>
 320:	52 c0       	rjmp	.+164    	; 0x3c6 <CALLBACK_Audio_Device_GetSetEndpointProperty+0xbe>
	{
		/* Check the requested control to see if a supported control is being manipulated */
		if (EndpointControl == AUDIO_EPCONTROL_SamplingFreq)
 322:	21 30       	cpi	r18, 0x01	; 1
 324:	09 f0       	breq	.+2      	; 0x328 <CALLBACK_Audio_Device_GetSetEndpointProperty+0x20>
 326:	4f c0       	rjmp	.+158    	; 0x3c6 <CALLBACK_Audio_Device_GetSetEndpointProperty+0xbe>
		{
			switch (EndpointProperty)
 328:	61 30       	cpi	r22, 0x01	; 1
 32a:	21 f0       	breq	.+8      	; 0x334 <CALLBACK_Audio_Device_GetSetEndpointProperty+0x2c>
 32c:	61 38       	cpi	r22, 0x81	; 129
 32e:	09 f0       	breq	.+2      	; 0x332 <CALLBACK_Audio_Device_GetSetEndpointProperty+0x2a>
 330:	4a c0       	rjmp	.+148    	; 0x3c6 <CALLBACK_Audio_Device_GetSetEndpointProperty+0xbe>
 332:	2f c0       	rjmp	.+94     	; 0x392 <CALLBACK_Audio_Device_GetSetEndpointProperty+0x8a>
			{
				case AUDIO_REQ_SetCurrent:
					/* Check if we are just testing for a valid property, or actually adjusting it */
					if (DataLength != NULL)
 334:	01 15       	cp	r16, r1
 336:	11 05       	cpc	r17, r1
 338:	09 f4       	brne	.+2      	; 0x33c <CALLBACK_Audio_Device_GetSetEndpointProperty+0x34>
 33a:	47 c0       	rjmp	.+142    	; 0x3ca <CALLBACK_Audio_Device_GetSetEndpointProperty+0xc2>
					{
						/* Set the new sampling frequency to the value given by the host */
						CurrentAudioSampleFrequency = (((uint32_t)Data[2] << 16) | ((uint32_t)Data[1] << 8) | (uint32_t)Data[0]);
 33c:	2a 81       	ldd	r18, Y+2	; 0x02
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	40 e0       	ldi	r20, 0x00	; 0
 342:	50 e0       	ldi	r21, 0x00	; 0
 344:	a9 01       	movw	r20, r18
 346:	33 27       	eor	r19, r19
 348:	22 27       	eor	r18, r18
 34a:	89 81       	ldd	r24, Y+1	; 0x01
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	a0 e0       	ldi	r26, 0x00	; 0
 350:	b0 e0       	ldi	r27, 0x00	; 0
 352:	ba 2f       	mov	r27, r26
 354:	a9 2f       	mov	r26, r25
 356:	98 2f       	mov	r25, r24
 358:	88 27       	eor	r24, r24
 35a:	28 2b       	or	r18, r24
 35c:	39 2b       	or	r19, r25
 35e:	4a 2b       	or	r20, r26
 360:	5b 2b       	or	r21, r27
 362:	88 81       	ld	r24, Y
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	a0 e0       	ldi	r26, 0x00	; 0
 368:	b0 e0       	ldi	r27, 0x00	; 0
 36a:	28 2b       	or	r18, r24
 36c:	39 2b       	or	r19, r25
 36e:	4a 2b       	or	r20, r26
 370:	5b 2b       	or	r21, r27
 372:	20 93 08 01 	sts	0x0108, r18
 376:	30 93 09 01 	sts	0x0109, r19
 37a:	40 93 0a 01 	sts	0x010A, r20
 37e:	50 93 0b 01 	sts	0x010B, r21

						/* Adjust sample reload timer to the new frequency */
						OCR0A = ((F_CPU / 8 / CurrentAudioSampleFrequency) - 1);				
 382:	60 e4       	ldi	r22, 0x40	; 64
 384:	72 e4       	ldi	r23, 0x42	; 66
 386:	8f e0       	ldi	r24, 0x0F	; 15
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	ff d5       	rcall	.+3070   	; 0xf8a <__udivmodsi4>
 38c:	21 50       	subi	r18, 0x01	; 1
 38e:	27 bd       	out	0x27, r18	; 39
 390:	1c c0       	rjmp	.+56     	; 0x3ca <CALLBACK_Audio_Device_GetSetEndpointProperty+0xc2>
					}
					
					return true;				
				case AUDIO_REQ_GetCurrent:
					/* Check if we are just testing for a valid property, or actually reading it */
					if (DataLength != NULL)
 392:	01 15       	cp	r16, r1
 394:	11 05       	cpc	r17, r1
 396:	c9 f0       	breq	.+50     	; 0x3ca <CALLBACK_Audio_Device_GetSetEndpointProperty+0xc2>
					{
						*DataLength = 3;
 398:	83 e0       	ldi	r24, 0x03	; 3
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	91 83       	std	Z+1, r25	; 0x01
 39e:	80 83       	st	Z, r24

						Data[2] = (CurrentAudioSampleFrequency >> 16);
 3a0:	20 91 08 01 	lds	r18, 0x0108
 3a4:	30 91 09 01 	lds	r19, 0x0109
 3a8:	40 91 0a 01 	lds	r20, 0x010A
 3ac:	50 91 0b 01 	lds	r21, 0x010B
 3b0:	ca 01       	movw	r24, r20
 3b2:	aa 27       	eor	r26, r26
 3b4:	bb 27       	eor	r27, r27
 3b6:	8a 83       	std	Y+2, r24	; 0x02
						Data[1] = (CurrentAudioSampleFrequency >> 8);
 3b8:	bb 27       	eor	r27, r27
 3ba:	a5 2f       	mov	r26, r21
 3bc:	94 2f       	mov	r25, r20
 3be:	83 2f       	mov	r24, r19
 3c0:	89 83       	std	Y+1, r24	; 0x01
						Data[0] = (CurrentAudioSampleFrequency &  0xFF);					
 3c2:	28 83       	st	Y, r18
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <CALLBACK_Audio_Device_GetSetEndpointProperty+0xc2>
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	01 c0       	rjmp	.+2      	; 0x3cc <CALLBACK_Audio_Device_GetSetEndpointProperty+0xc4>
 3ca:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}
	
	return false;
}
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	1f 91       	pop	r17
 3d2:	0f 91       	pop	r16
 3d4:	ff 90       	pop	r15
 3d6:	ef 90       	pop	r14
 3d8:	08 95       	ret

000003da <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	Audio_Device_ProcessControlRequest(&Speaker_Audio_Interface);
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	91 e0       	ldi	r25, 0x01	; 1
}
 3de:	a2 c4       	rjmp	.+2372   	; 0xd24 <Audio_Device_ProcessControlRequest>

000003e0 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= Audio_Device_ConfigureEndpoints(&Speaker_Audio_Interface);
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	91 e0       	ldi	r25, 0x01	; 1
 3e4:	6f d4       	rcall	.+2270   	; 0xcc4 <Audio_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 3e6:	80 fd       	sbrc	r24, 0
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <EVENT_USB_Device_ConfigurationChanged+0xe>
 3ea:	90 e9       	ldi	r25, 0x90	; 144
 3ec:	01 c0       	rjmp	.+2      	; 0x3f0 <EVENT_USB_Device_ConfigurationChanged+0x10>
 3ee:	90 e6       	ldi	r25, 0x60	; 96
 3f0:	8b b1       	in	r24, 0x0b	; 11
 3f2:	8f 70       	andi	r24, 0x0F	; 15
 3f4:	98 2b       	or	r25, r24
 3f6:	9b b9       	out	0x0b, r25	; 11
}
 3f8:	08 95       	ret

000003fa <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 3fa:	84 b7       	in	r24, 0x34	; 52
 3fc:	87 7f       	andi	r24, 0xF7	; 247
 3fe:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 400:	88 e1       	ldi	r24, 0x18	; 24
 402:	0f b6       	in	r0, 0x3f	; 63
 404:	f8 94       	cli
 406:	80 93 60 00 	sts	0x0060, r24
 40a:	10 92 60 00 	sts	0x0060, r1
 40e:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	80 e8       	ldi	r24, 0x80	; 128
 414:	0f b6       	in	r0, 0x3f	; 63
 416:	f8 94       	cli
 418:	80 93 61 00 	sts	0x0061, r24
 41c:	90 93 61 00 	sts	0x0061, r25
 420:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 422:	8a b1       	in	r24, 0x0a	; 10
 424:	80 6f       	ori	r24, 0xF0	; 240
 426:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 428:	8b b1       	in	r24, 0x0b	; 11
 42a:	8f 70       	andi	r24, 0x0F	; 15
 42c:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
}
 42e:	d5 c0       	rjmp	.+426    	; 0x5da <USB_Init>

00000430 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
 430:	e4 df       	rcall	.-56     	; 0x3fa <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 432:	8b b1       	in	r24, 0x0b	; 11
 434:	8f 70       	andi	r24, 0x0F	; 15
 436:	80 61       	ori	r24, 0x10	; 16
 438:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
 43a:	78 94       	sei

	for (;;)
	{
		Audio_Device_USBTask(&Speaker_Audio_Interface);
		USB_USBTask();
 43c:	2f d4       	rcall	.+2142   	; 0xc9c <USB_USBTask>
 43e:	fe cf       	rjmp	.-4      	; 0x43c <main+0xc>

00000440 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
 440:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 442:	92 30       	cpi	r25, 0x02	; 2
 444:	49 f0       	breq	.+18     	; 0x458 <CALLBACK_USB_GetDescriptor+0x18>
 446:	93 30       	cpi	r25, 0x03	; 3
 448:	61 f0       	breq	.+24     	; 0x462 <CALLBACK_USB_GetDescriptor+0x22>
 44a:	91 30       	cpi	r25, 0x01	; 1
 44c:	f9 f4       	brne	.+62     	; 0x48c <CALLBACK_USB_GetDescriptor+0x4c>
 44e:	e8 e9       	ldi	r30, 0x98	; 152
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	22 e1       	ldi	r18, 0x12	; 18
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	1e c0       	rjmp	.+60     	; 0x494 <CALLBACK_USB_GetDescriptor+0x54>
 458:	ea ea       	ldi	r30, 0xAA	; 170
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	20 e7       	ldi	r18, 0x70	; 112
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	19 c0       	rjmp	.+50     	; 0x494 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 462:	81 30       	cpi	r24, 0x01	; 1
 464:	49 f0       	breq	.+18     	; 0x478 <CALLBACK_USB_GetDescriptor+0x38>
 466:	81 30       	cpi	r24, 0x01	; 1
 468:	18 f0       	brcs	.+6      	; 0x470 <CALLBACK_USB_GetDescriptor+0x30>
 46a:	82 30       	cpi	r24, 0x02	; 2
 46c:	79 f4       	brne	.+30     	; 0x48c <CALLBACK_USB_GetDescriptor+0x4c>
 46e:	08 c0       	rjmp	.+16     	; 0x480 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 470:	ea e1       	ldi	r30, 0x1A	; 26
 472:	f1 e0       	ldi	r31, 0x01	; 1
 474:	84 91       	lpm	r24, Z+
 476:	07 c0       	rjmp	.+14     	; 0x486 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 478:	ee e1       	ldi	r30, 0x1E	; 30
 47a:	f1 e0       	ldi	r31, 0x01	; 1
 47c:	84 91       	lpm	r24, Z+
 47e:	03 c0       	rjmp	.+6      	; 0x486 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 480:	e8 e3       	ldi	r30, 0x38	; 56
 482:	f1 e0       	ldi	r31, 0x01	; 1
 484:	84 91       	lpm	r24, Z+
 486:	28 2f       	mov	r18, r24
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	04 c0       	rjmp	.+8      	; 0x494 <CALLBACK_USB_GetDescriptor+0x54>
 48c:	e0 e0       	ldi	r30, 0x00	; 0
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	20 e0       	ldi	r18, 0x00	; 0
 492:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 494:	ed 93       	st	X+, r30
 496:	fc 93       	st	X, r31
	return Size;
}
 498:	c9 01       	movw	r24, r18
 49a:	08 95       	ret

0000049c <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
 49c:	38 2f       	mov	r19, r24
 49e:	28 2f       	mov	r18, r24
 4a0:	2c c0       	rjmp	.+88     	; 0x4fa <Endpoint_ConfigureEndpoint_Prv+0x5e>
 4a2:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);
		
		if (EPNum == Number)
 4a6:	23 17       	cp	r18, r19
 4a8:	21 f4       	brne	.+8      	; 0x4b2 <Endpoint_ConfigureEndpoint_Prv+0x16>
 4aa:	76 2f       	mov	r23, r22
 4ac:	94 2f       	mov	r25, r20
 4ae:	50 e0       	ldi	r21, 0x00	; 0
 4b0:	06 c0       	rjmp	.+12     	; 0x4be <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 4b2:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 4b6:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
 4ba:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 4be:	91 ff       	sbrs	r25, 1
 4c0:	1b c0       	rjmp	.+54     	; 0x4f8 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 4c2:	80 91 eb 00 	lds	r24, 0x00EB
 4c6:	8e 7f       	andi	r24, 0xFE	; 254
 4c8:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 4cc:	80 91 ed 00 	lds	r24, 0x00ED
 4d0:	8d 7f       	andi	r24, 0xFD	; 253
 4d2:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 4d6:	80 91 eb 00 	lds	r24, 0x00EB
 4da:	81 60       	ori	r24, 0x01	; 1
 4dc:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 4e0:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 4e4:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
 4e8:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 4ec:	80 91 ee 00 	lds	r24, 0x00EE
			
		if (!(Endpoint_IsConfigured()))
 4f0:	87 fd       	sbrc	r24, 7
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <Endpoint_ConfigureEndpoint_Prv+0x5c>
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else	
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 4f8:	2f 5f       	subi	r18, 0xFF	; 255
 4fa:	27 30       	cpi	r18, 0x07	; 7
 4fc:	90 f2       	brcs	.-92     	; 0x4a2 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 4fe:	30 93 e9 00 	sts	0x00E9, r19
 502:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 504:	08 95       	ret

00000506 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 506:	80 91 11 01 	lds	r24, 0x0111
 50a:	88 23       	and	r24, r24
 50c:	9c f4       	brge	.+38     	; 0x534 <Endpoint_ClearStatusStage+0x2e>
 50e:	04 c0       	rjmp	.+8      	; 0x518 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 510:	80 91 10 01 	lds	r24, 0x0110
 514:	88 23       	and	r24, r24
 516:	b9 f0       	breq	.+46     	; 0x546 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 518:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 51c:	82 ff       	sbrs	r24, 2
 51e:	f8 cf       	rjmp	.-16     	; 0x510 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 520:	80 91 e8 00 	lds	r24, 0x00E8
 524:	8b 77       	andi	r24, 0x7B	; 123
 526:	80 93 e8 00 	sts	0x00E8, r24
 52a:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 52c:	80 91 10 01 	lds	r24, 0x0110
 530:	88 23       	and	r24, r24
 532:	49 f0       	breq	.+18     	; 0x546 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 534:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 538:	80 ff       	sbrs	r24, 0
 53a:	f8 cf       	rjmp	.-16     	; 0x52c <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 53c:	80 91 e8 00 	lds	r24, 0x00E8
 540:	8e 77       	andi	r24, 0x7E	; 126
 542:	80 93 e8 00 	sts	0x00E8, r24
 546:	08 95       	ret

00000548 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
 548:	ef 92       	push	r14
 54a:	ff 92       	push	r15
 54c:	0f 93       	push	r16
 54e:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 550:	4d d0       	rcall	.+154    	; 0x5ec <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 552:	54 d0       	rcall	.+168    	; 0x5fc <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 554:	08 ed       	ldi	r16, 0xD8	; 216
 556:	10 e0       	ldi	r17, 0x00	; 0
 558:	f8 01       	movw	r30, r16
 55a:	80 81       	ld	r24, Z
 55c:	8f 77       	andi	r24, 0x7F	; 127
 55e:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
 560:	80 81       	ld	r24, Z
 562:	80 68       	ori	r24, 0x80	; 128
 564:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 566:	80 81       	ld	r24, Z
 568:	8f 7d       	andi	r24, 0xDF	; 223
 56a:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 56c:	e7 ed       	ldi	r30, 0xD7	; 215
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	80 81       	ld	r24, Z
 572:	80 68       	ori	r24, 0x80	; 128
 574:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 576:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 578:	10 92 10 01 	sts	0x0110, r1
	USB_Device_ConfigurationNumber  = 0;
 57c:	10 92 0c 01 	sts	0x010C, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 580:	10 92 0e 01 	sts	0x010E, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 584:	10 92 0d 01 	sts	0x010D, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 588:	80 ee       	ldi	r24, 0xE0	; 224
 58a:	e8 2e       	mov	r14, r24
 58c:	f1 2c       	mov	r15, r1
 58e:	f7 01       	movw	r30, r14
 590:	80 81       	ld	r24, Z
 592:	8b 7f       	andi	r24, 0xFB	; 251
 594:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 596:	f8 01       	movw	r30, r16
 598:	80 81       	ld	r24, Z
 59a:	81 60       	ori	r24, 0x01	; 1
 59c:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	60 e0       	ldi	r22, 0x00	; 0
 5a2:	42 e0       	ldi	r20, 0x02	; 2
 5a4:	7b df       	rcall	.-266    	; 0x49c <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 5a6:	e1 ee       	ldi	r30, 0xE1	; 225
 5a8:	f0 e0       	ldi	r31, 0x00	; 0
 5aa:	80 81       	ld	r24, Z
 5ac:	8e 7f       	andi	r24, 0xFE	; 254
 5ae:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 5b0:	e2 ee       	ldi	r30, 0xE2	; 226
 5b2:	f0 e0       	ldi	r31, 0x00	; 0
 5b4:	80 81       	ld	r24, Z
 5b6:	81 60       	ori	r24, 0x01	; 1
 5b8:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 5ba:	80 81       	ld	r24, Z
 5bc:	88 60       	ori	r24, 0x08	; 8
 5be:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 5c0:	f7 01       	movw	r30, r14
 5c2:	80 81       	ld	r24, Z
 5c4:	8e 7f       	andi	r24, 0xFE	; 254
 5c6:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 5c8:	f8 01       	movw	r30, r16
 5ca:	80 81       	ld	r24, Z
 5cc:	80 61       	ori	r24, 0x10	; 16
 5ce:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 5d0:	1f 91       	pop	r17
 5d2:	0f 91       	pop	r16
 5d4:	ff 90       	pop	r15
 5d6:	ef 90       	pop	r14
 5d8:	08 95       	ret

000005da <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 5da:	e7 ed       	ldi	r30, 0xD7	; 215
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	80 81       	ld	r24, Z
 5e0:	81 60       	ori	r24, 0x01	; 1
 5e2:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	80 93 0f 01 	sts	0x010F, r24

	USB_ResetInterface();
}
 5ea:	ae cf       	rjmp	.-164    	; 0x548 <USB_ResetInterface>

000005ec <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 5ec:	e8 ed       	ldi	r30, 0xD8	; 216
 5ee:	f0 e0       	ldi	r31, 0x00	; 0
 5f0:	80 81       	ld	r24, Z
 5f2:	8c 7f       	andi	r24, 0xFC	; 252
 5f4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 5f6:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 5fa:	08 95       	ret

000005fc <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 5fc:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 600:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 604:	08 95       	ret

00000606 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 606:	1f 92       	push	r1
 608:	0f 92       	push	r0
 60a:	0f b6       	in	r0, 0x3f	; 63
 60c:	0f 92       	push	r0
 60e:	0b b6       	in	r0, 0x3b	; 59
 610:	0f 92       	push	r0
 612:	11 24       	eor	r1, r1
 614:	2f 93       	push	r18
 616:	3f 93       	push	r19
 618:	4f 93       	push	r20
 61a:	5f 93       	push	r21
 61c:	6f 93       	push	r22
 61e:	7f 93       	push	r23
 620:	8f 93       	push	r24
 622:	9f 93       	push	r25
 624:	af 93       	push	r26
 626:	bf 93       	push	r27
 628:	ef 93       	push	r30
 62a:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 62c:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 630:	82 ff       	sbrs	r24, 2
 632:	0a c0       	rjmp	.+20     	; 0x648 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 634:	80 91 e2 00 	lds	r24, 0x00E2
 638:	82 ff       	sbrs	r24, 2
 63a:	06 c0       	rjmp	.+12     	; 0x648 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 63c:	80 91 e1 00 	lds	r24, 0x00E1
 640:	8b 7f       	andi	r24, 0xFB	; 251
 642:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 646:	29 d3       	rcall	.+1618   	; 0xc9a <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 648:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 64c:	80 ff       	sbrs	r24, 0
 64e:	1d c0       	rjmp	.+58     	; 0x68a <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 650:	80 91 d8 00 	lds	r24, 0x00D8
 654:	80 ff       	sbrs	r24, 0
 656:	19 c0       	rjmp	.+50     	; 0x68a <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 658:	80 91 da 00 	lds	r24, 0x00DA
 65c:	8e 7f       	andi	r24, 0xFE	; 254
 65e:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 662:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 666:	80 ff       	sbrs	r24, 0
 668:	0c c0       	rjmp	.+24     	; 0x682 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 66a:	8c e0       	ldi	r24, 0x0C	; 12
 66c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 66e:	8e e0       	ldi	r24, 0x0E	; 14
 670:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 672:	09 b4       	in	r0, 0x29	; 41
 674:	00 fe       	sbrs	r0, 0
 676:	fd cf       	rjmp	.-6      	; 0x672 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	80 93 10 01 	sts	0x0110, r24
			EVENT_USB_Device_Connect();
 67e:	15 de       	rcall	.-982    	; 0x2aa <EVENT_USB_Device_Connect>
 680:	04 c0       	rjmp	.+8      	; 0x68a <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 682:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 684:	10 92 10 01 	sts	0x0110, r1
			EVENT_USB_Device_Disconnect();
 688:	34 de       	rcall	.-920    	; 0x2f2 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 68a:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 68e:	80 ff       	sbrs	r24, 0
 690:	18 c0       	rjmp	.+48     	; 0x6c2 <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 692:	80 91 e2 00 	lds	r24, 0x00E2
 696:	80 ff       	sbrs	r24, 0
 698:	14 c0       	rjmp	.+40     	; 0x6c2 <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 69a:	80 91 e2 00 	lds	r24, 0x00E2
 69e:	8e 7f       	andi	r24, 0xFE	; 254
 6a0:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 6a4:	80 91 e2 00 	lds	r24, 0x00E2
 6a8:	80 61       	ori	r24, 0x10	; 16
 6aa:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 6ae:	80 91 d8 00 	lds	r24, 0x00D8
 6b2:	80 62       	ori	r24, 0x20	; 32
 6b4:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 6b8:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 6ba:	85 e0       	ldi	r24, 0x05	; 5
 6bc:	80 93 10 01 	sts	0x0110, r24
		EVENT_USB_Device_Suspend();
 6c0:	ec d2       	rcall	.+1496   	; 0xc9a <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 6c2:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 6c6:	84 ff       	sbrs	r24, 4
 6c8:	2d c0       	rjmp	.+90     	; 0x724 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 6ca:	80 91 e2 00 	lds	r24, 0x00E2
 6ce:	84 ff       	sbrs	r24, 4
 6d0:	29 c0       	rjmp	.+82     	; 0x724 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 6d2:	8c e0       	ldi	r24, 0x0C	; 12
 6d4:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 6d6:	8e e0       	ldi	r24, 0x0E	; 14
 6d8:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 6da:	09 b4       	in	r0, 0x29	; 41
 6dc:	00 fe       	sbrs	r0, 0
 6de:	fd cf       	rjmp	.-6      	; 0x6da <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 6e0:	80 91 d8 00 	lds	r24, 0x00D8
 6e4:	8f 7d       	andi	r24, 0xDF	; 223
 6e6:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 6ea:	80 91 e1 00 	lds	r24, 0x00E1
 6ee:	8f 7e       	andi	r24, 0xEF	; 239
 6f0:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 6f4:	80 91 e2 00 	lds	r24, 0x00E2
 6f8:	8f 7e       	andi	r24, 0xEF	; 239
 6fa:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 6fe:	80 91 e2 00 	lds	r24, 0x00E2
 702:	81 60       	ori	r24, 0x01	; 1
 704:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 708:	80 91 0c 01 	lds	r24, 0x010C
 70c:	88 23       	and	r24, r24
 70e:	31 f4       	brne	.+12     	; 0x71c <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 710:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 714:	87 fd       	sbrc	r24, 7
 716:	02 c0       	rjmp	.+4      	; 0x71c <__vector_10+0x116>
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	01 c0       	rjmp	.+2      	; 0x71e <__vector_10+0x118>
 71c:	84 e0       	ldi	r24, 0x04	; 4
 71e:	80 93 10 01 	sts	0x0110, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 722:	bb d2       	rcall	.+1398   	; 0xc9a <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 724:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 728:	83 ff       	sbrs	r24, 3
 72a:	22 c0       	rjmp	.+68     	; 0x770 <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 72c:	80 91 e2 00 	lds	r24, 0x00E2
 730:	83 ff       	sbrs	r24, 3
 732:	1e c0       	rjmp	.+60     	; 0x770 <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 734:	80 91 e1 00 	lds	r24, 0x00E1
 738:	87 7f       	andi	r24, 0xF7	; 247
 73a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 73e:	82 e0       	ldi	r24, 0x02	; 2
 740:	80 93 10 01 	sts	0x0110, r24
		USB_Device_ConfigurationNumber = 0;
 744:	10 92 0c 01 	sts	0x010C, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 748:	80 91 e1 00 	lds	r24, 0x00E1
 74c:	8e 7f       	andi	r24, 0xFE	; 254
 74e:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 752:	80 91 e2 00 	lds	r24, 0x00E2
 756:	8e 7f       	andi	r24, 0xFE	; 254
 758:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 75c:	80 91 e2 00 	lds	r24, 0x00E2
 760:	80 61       	ori	r24, 0x10	; 16
 762:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 766:	80 e0       	ldi	r24, 0x00	; 0
 768:	60 e0       	ldi	r22, 0x00	; 0
 76a:	42 e0       	ldi	r20, 0x02	; 2
 76c:	97 de       	rcall	.-722    	; 0x49c <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 76e:	95 d2       	rcall	.+1322   	; 0xc9a <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 770:	ff 91       	pop	r31
 772:	ef 91       	pop	r30
 774:	bf 91       	pop	r27
 776:	af 91       	pop	r26
 778:	9f 91       	pop	r25
 77a:	8f 91       	pop	r24
 77c:	7f 91       	pop	r23
 77e:	6f 91       	pop	r22
 780:	5f 91       	pop	r21
 782:	4f 91       	pop	r20
 784:	3f 91       	pop	r19
 786:	2f 91       	pop	r18
 788:	0f 90       	pop	r0
 78a:	0b be       	out	0x3b, r0	; 59
 78c:	0f 90       	pop	r0
 78e:	0f be       	out	0x3f, r0	; 63
 790:	0f 90       	pop	r0
 792:	1f 90       	pop	r1
 794:	18 95       	reti

00000796 <Endpoint_Write_Control_Stream_LE>:
 796:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 798:	40 91 17 01 	lds	r20, 0x0117
 79c:	50 91 18 01 	lds	r21, 0x0118
 7a0:	46 17       	cp	r20, r22
 7a2:	57 07       	cpc	r21, r23
 7a4:	18 f4       	brcc	.+6      	; 0x7ac <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 7a6:	f9 01       	movw	r30, r18
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	3d c0       	rjmp	.+122    	; 0x826 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 7ac:	61 15       	cp	r22, r1
 7ae:	71 05       	cpc	r23, r1
 7b0:	11 f0       	breq	.+4      	; 0x7b6 <Endpoint_Write_Control_Stream_LE+0x20>
 7b2:	ab 01       	movw	r20, r22
 7b4:	f8 cf       	rjmp	.-16     	; 0x7a6 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 7b6:	80 91 e8 00 	lds	r24, 0x00E8
 7ba:	8e 77       	andi	r24, 0x7E	; 126
 7bc:	80 93 e8 00 	sts	0x00E8, r24
 7c0:	40 e0       	ldi	r20, 0x00	; 0
 7c2:	50 e0       	ldi	r21, 0x00	; 0
 7c4:	f0 cf       	rjmp	.-32     	; 0x7a6 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 7c6:	80 91 10 01 	lds	r24, 0x0110

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 7ca:	88 23       	and	r24, r24
 7cc:	f1 f1       	breq	.+124    	; 0x84a <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 7ce:	85 30       	cpi	r24, 0x05	; 5
 7d0:	f1 f1       	breq	.+124    	; 0x84e <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 7d2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 7d6:	83 ff       	sbrs	r24, 3
 7d8:	02 c0       	rjmp	.+4      	; 0x7de <Endpoint_Write_Control_Stream_LE+0x48>
 7da:	81 e0       	ldi	r24, 0x01	; 1
 7dc:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 7de:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 7e2:	82 fd       	sbrc	r24, 2
 7e4:	2c c0       	rjmp	.+88     	; 0x83e <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 7e6:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 7ea:	80 ff       	sbrs	r24, 0
 7ec:	1c c0       	rjmp	.+56     	; 0x826 <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 7ee:	20 91 f2 00 	lds	r18, 0x00F2
 7f2:	30 91 f3 00 	lds	r19, 0x00F3
 7f6:	07 c0       	rjmp	.+14     	; 0x806 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 7f8:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 7fa:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 7fe:	41 50       	subi	r20, 0x01	; 1
 800:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 802:	2f 5f       	subi	r18, 0xFF	; 255
 804:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 806:	41 15       	cp	r20, r1
 808:	51 05       	cpc	r21, r1
 80a:	19 f0       	breq	.+6      	; 0x812 <Endpoint_Write_Control_Stream_LE+0x7c>
 80c:	28 30       	cpi	r18, 0x08	; 8
 80e:	31 05       	cpc	r19, r1
 810:	98 f3       	brcs	.-26     	; 0x7f8 <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	28 30       	cpi	r18, 0x08	; 8
 816:	31 05       	cpc	r19, r1
 818:	09 f4       	brne	.+2      	; 0x81c <Endpoint_Write_Control_Stream_LE+0x86>
 81a:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 81c:	80 91 e8 00 	lds	r24, 0x00E8
 820:	8e 77       	andi	r24, 0x7E	; 126
 822:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 826:	41 15       	cp	r20, r1
 828:	51 05       	cpc	r21, r1
 82a:	69 f6       	brne	.-102    	; 0x7c6 <Endpoint_Write_Control_Stream_LE+0x30>
 82c:	99 23       	and	r25, r25
 82e:	59 f6       	brne	.-106    	; 0x7c6 <Endpoint_Write_Control_Stream_LE+0x30>
 830:	06 c0       	rjmp	.+12     	; 0x83e <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 832:	80 91 10 01 	lds	r24, 0x0110

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 836:	88 23       	and	r24, r24
 838:	41 f0       	breq	.+16     	; 0x84a <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 83a:	85 30       	cpi	r24, 0x05	; 5
 83c:	41 f0       	breq	.+16     	; 0x84e <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 83e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 842:	82 ff       	sbrs	r24, 2
 844:	f6 cf       	rjmp	.-20     	; 0x832 <Endpoint_Write_Control_Stream_LE+0x9c>
 846:	80 e0       	ldi	r24, 0x00	; 0
 848:	08 95       	ret
 84a:	82 e0       	ldi	r24, 0x02	; 2
 84c:	08 95       	ret
 84e:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 850:	08 95       	ret

00000852 <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
 852:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
 854:	61 15       	cp	r22, r1
 856:	71 05       	cpc	r23, r1
 858:	29 f4       	brne	.+10     	; 0x864 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 85a:	80 91 e8 00 	lds	r24, 0x00E8
 85e:	8b 77       	andi	r24, 0x7B	; 123
 860:	80 93 e8 00 	sts	0x00E8, r24
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 864:	f9 01       	movw	r30, r18
 866:	22 c0       	rjmp	.+68     	; 0x8ac <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 868:	80 91 10 01 	lds	r24, 0x0110

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 86c:	88 23       	and	r24, r24
 86e:	71 f1       	breq	.+92     	; 0x8cc <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 870:	85 30       	cpi	r24, 0x05	; 5
 872:	71 f1       	breq	.+92     	; 0x8d0 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 874:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 878:	83 ff       	sbrs	r24, 3
 87a:	02 c0       	rjmp	.+4      	; 0x880 <Endpoint_Read_Control_Stream_LE+0x2e>
 87c:	81 e0       	ldi	r24, 0x01	; 1
 87e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 880:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
 884:	82 ff       	sbrs	r24, 2
 886:	f0 cf       	rjmp	.-32     	; 0x868 <Endpoint_Read_Control_Stream_LE+0x16>
 888:	06 c0       	rjmp	.+12     	; 0x896 <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 88a:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 88e:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 890:	61 50       	subi	r22, 0x01	; 1
 892:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
 894:	31 f0       	breq	.+12     	; 0x8a2 <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 896:	80 91 f2 00 	lds	r24, 0x00F2
 89a:	90 91 f3 00 	lds	r25, 0x00F3
 89e:	89 2b       	or	r24, r25
 8a0:	a1 f7       	brne	.-24     	; 0x88a <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 8a2:	80 91 e8 00 	lds	r24, 0x00E8
 8a6:	8b 77       	andi	r24, 0x7B	; 123
 8a8:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
 8ac:	61 15       	cp	r22, r1
 8ae:	71 05       	cpc	r23, r1
 8b0:	d9 f6       	brne	.-74     	; 0x868 <Endpoint_Read_Control_Stream_LE+0x16>
 8b2:	06 c0       	rjmp	.+12     	; 0x8c0 <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8b4:	80 91 10 01 	lds	r24, 0x0110

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8b8:	88 23       	and	r24, r24
 8ba:	41 f0       	breq	.+16     	; 0x8cc <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8bc:	85 30       	cpi	r24, 0x05	; 5
 8be:	41 f0       	breq	.+16     	; 0x8d0 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 8c0:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
 8c4:	80 ff       	sbrs	r24, 0
 8c6:	f6 cf       	rjmp	.-20     	; 0x8b4 <Endpoint_Read_Control_Stream_LE+0x62>
 8c8:	80 e0       	ldi	r24, 0x00	; 0
 8ca:	08 95       	ret
 8cc:	82 e0       	ldi	r24, 0x02	; 2
 8ce:	08 95       	ret
 8d0:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 8d2:	08 95       	ret

000008d4 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
 8d4:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 8d6:	40 91 17 01 	lds	r20, 0x0117
 8da:	50 91 18 01 	lds	r21, 0x0118
 8de:	46 17       	cp	r20, r22
 8e0:	57 07       	cpc	r21, r23
 8e2:	18 f4       	brcc	.+6      	; 0x8ea <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 8e4:	f9 01       	movw	r30, r18
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	40 c0       	rjmp	.+128    	; 0x96a <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 8ea:	61 15       	cp	r22, r1
 8ec:	71 05       	cpc	r23, r1
 8ee:	11 f0       	breq	.+4      	; 0x8f4 <Endpoint_Write_Control_PStream_LE+0x20>
 8f0:	ab 01       	movw	r20, r22
 8f2:	f8 cf       	rjmp	.-16     	; 0x8e4 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 8f4:	80 91 e8 00 	lds	r24, 0x00E8
 8f8:	8e 77       	andi	r24, 0x7E	; 126
 8fa:	80 93 e8 00 	sts	0x00E8, r24
 8fe:	40 e0       	ldi	r20, 0x00	; 0
 900:	50 e0       	ldi	r21, 0x00	; 0
 902:	f0 cf       	rjmp	.-32     	; 0x8e4 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 904:	80 91 10 01 	lds	r24, 0x0110

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 908:	88 23       	and	r24, r24
 90a:	09 f4       	brne	.+2      	; 0x90e <Endpoint_Write_Control_PStream_LE+0x3a>
 90c:	40 c0       	rjmp	.+128    	; 0x98e <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 90e:	85 30       	cpi	r24, 0x05	; 5
 910:	09 f4       	brne	.+2      	; 0x914 <Endpoint_Write_Control_PStream_LE+0x40>
 912:	3f c0       	rjmp	.+126    	; 0x992 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 914:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 918:	83 ff       	sbrs	r24, 3
 91a:	02 c0       	rjmp	.+4      	; 0x920 <Endpoint_Write_Control_PStream_LE+0x4c>
 91c:	81 e0       	ldi	r24, 0x01	; 1
 91e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 920:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 924:	82 fd       	sbrc	r24, 2
 926:	2d c0       	rjmp	.+90     	; 0x982 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 928:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 92c:	80 ff       	sbrs	r24, 0
 92e:	1d c0       	rjmp	.+58     	; 0x96a <Endpoint_Write_Control_PStream_LE+0x96>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 930:	20 91 f2 00 	lds	r18, 0x00F2
 934:	30 91 f3 00 	lds	r19, 0x00F3
 938:	08 c0       	rjmp	.+16     	; 0x94a <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 93a:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 93c:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 940:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 942:	41 50       	subi	r20, 0x01	; 1
 944:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 946:	2f 5f       	subi	r18, 0xFF	; 255
 948:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 94a:	41 15       	cp	r20, r1
 94c:	51 05       	cpc	r21, r1
 94e:	19 f0       	breq	.+6      	; 0x956 <Endpoint_Write_Control_PStream_LE+0x82>
 950:	28 30       	cpi	r18, 0x08	; 8
 952:	31 05       	cpc	r19, r1
 954:	90 f3       	brcs	.-28     	; 0x93a <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 956:	90 e0       	ldi	r25, 0x00	; 0
 958:	28 30       	cpi	r18, 0x08	; 8
 95a:	31 05       	cpc	r19, r1
 95c:	09 f4       	brne	.+2      	; 0x960 <Endpoint_Write_Control_PStream_LE+0x8c>
 95e:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 960:	80 91 e8 00 	lds	r24, 0x00E8
 964:	8e 77       	andi	r24, 0x7E	; 126
 966:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 96a:	41 15       	cp	r20, r1
 96c:	51 05       	cpc	r21, r1
 96e:	51 f6       	brne	.-108    	; 0x904 <Endpoint_Write_Control_PStream_LE+0x30>
 970:	99 23       	and	r25, r25
 972:	41 f6       	brne	.-112    	; 0x904 <Endpoint_Write_Control_PStream_LE+0x30>
 974:	06 c0       	rjmp	.+12     	; 0x982 <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 976:	80 91 10 01 	lds	r24, 0x0110

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 97a:	88 23       	and	r24, r24
 97c:	41 f0       	breq	.+16     	; 0x98e <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 97e:	85 30       	cpi	r24, 0x05	; 5
 980:	41 f0       	breq	.+16     	; 0x992 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 982:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 986:	82 ff       	sbrs	r24, 2
 988:	f6 cf       	rjmp	.-20     	; 0x976 <Endpoint_Write_Control_PStream_LE+0xa2>
 98a:	80 e0       	ldi	r24, 0x00	; 0
 98c:	08 95       	ret
 98e:	82 e0       	ldi	r24, 0x02	; 2
 990:	08 95       	ret
 992:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 994:	08 95       	ret

00000996 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 996:	0f 93       	push	r16
 998:	1f 93       	push	r17
 99a:	df 93       	push	r29
 99c:	cf 93       	push	r28
 99e:	cd b7       	in	r28, 0x3d	; 61
 9a0:	de b7       	in	r29, 0x3e	; 62
 9a2:	ac 97       	sbiw	r28, 0x2c	; 44
 9a4:	0f b6       	in	r0, 0x3f	; 63
 9a6:	f8 94       	cli
 9a8:	de bf       	out	0x3e, r29	; 62
 9aa:	0f be       	out	0x3f, r0	; 63
 9ac:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 9ae:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
 9b2:	80 93 11 01 	sts	0x0111, r24
 9b6:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
 9ba:	80 93 12 01 	sts	0x0112, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 9be:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 9c2:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
 9c6:	e3 e1       	ldi	r30, 0x13	; 19
 9c8:	f1 e0       	ldi	r31, 0x01	; 1
 9ca:	80 93 13 01 	sts	0x0113, r24
 9ce:	90 93 14 01 	sts	0x0114, r25
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 9d2:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 9d6:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
 9da:	80 93 15 01 	sts	0x0115, r24
 9de:	93 83       	std	Z+3, r25	; 0x03
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 9e0:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 9e4:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
 9e8:	80 93 17 01 	sts	0x0117, r24
 9ec:	95 83       	std	Z+5, r25	; 0x05

	EVENT_USB_Device_ControlRequest();
 9ee:	f5 dc       	rcall	.-1558   	; 0x3da <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9f0:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 9f4:	83 ff       	sbrs	r24, 3
 9f6:	38 c1       	rjmp	.+624    	; 0xc68 <USB_Device_ProcessControlRequest+0x2d2>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 9f8:	80 91 11 01 	lds	r24, 0x0111

		switch (USB_ControlRequest.bRequest)
 9fc:	30 91 12 01 	lds	r19, 0x0112
 a00:	35 30       	cpi	r19, 0x05	; 5
 a02:	09 f4       	brne	.+2      	; 0xa06 <USB_Device_ProcessControlRequest+0x70>
 a04:	87 c0       	rjmp	.+270    	; 0xb14 <USB_Device_ProcessControlRequest+0x17e>
 a06:	36 30       	cpi	r19, 0x06	; 6
 a08:	40 f4       	brcc	.+16     	; 0xa1a <USB_Device_ProcessControlRequest+0x84>
 a0a:	31 30       	cpi	r19, 0x01	; 1
 a0c:	c9 f1       	breq	.+114    	; 0xa80 <USB_Device_ProcessControlRequest+0xea>
 a0e:	31 30       	cpi	r19, 0x01	; 1
 a10:	70 f0       	brcs	.+28     	; 0xa2e <USB_Device_ProcessControlRequest+0x98>
 a12:	33 30       	cpi	r19, 0x03	; 3
 a14:	09 f0       	breq	.+2      	; 0xa18 <USB_Device_ProcessControlRequest+0x82>
 a16:	28 c1       	rjmp	.+592    	; 0xc68 <USB_Device_ProcessControlRequest+0x2d2>
 a18:	33 c0       	rjmp	.+102    	; 0xa80 <USB_Device_ProcessControlRequest+0xea>
 a1a:	38 30       	cpi	r19, 0x08	; 8
 a1c:	09 f4       	brne	.+2      	; 0xa20 <USB_Device_ProcessControlRequest+0x8a>
 a1e:	f6 c0       	rjmp	.+492    	; 0xc0c <USB_Device_ProcessControlRequest+0x276>
 a20:	39 30       	cpi	r19, 0x09	; 9
 a22:	09 f4       	brne	.+2      	; 0xa26 <USB_Device_ProcessControlRequest+0x90>
 a24:	05 c1       	rjmp	.+522    	; 0xc30 <USB_Device_ProcessControlRequest+0x29a>
 a26:	36 30       	cpi	r19, 0x06	; 6
 a28:	09 f0       	breq	.+2      	; 0xa2c <USB_Device_ProcessControlRequest+0x96>
 a2a:	1e c1       	rjmp	.+572    	; 0xc68 <USB_Device_ProcessControlRequest+0x2d2>
 a2c:	97 c0       	rjmp	.+302    	; 0xb5c <USB_Device_ProcessControlRequest+0x1c6>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a2e:	80 38       	cpi	r24, 0x80	; 128
 a30:	21 f0       	breq	.+8      	; 0xa3a <USB_Device_ProcessControlRequest+0xa4>
 a32:	82 38       	cpi	r24, 0x82	; 130
 a34:	09 f0       	breq	.+2      	; 0xa38 <USB_Device_ProcessControlRequest+0xa2>
 a36:	18 c1       	rjmp	.+560    	; 0xc68 <USB_Device_ProcessControlRequest+0x2d2>
 a38:	08 c0       	rjmp	.+16     	; 0xa4a <USB_Device_ProcessControlRequest+0xb4>
 a3a:	90 91 0d 01 	lds	r25, 0x010D
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 a3e:	80 91 0e 01 	lds	r24, 0x010E
 a42:	88 23       	and	r24, r24
 a44:	99 f0       	breq	.+38     	; 0xa6c <USB_Device_ProcessControlRequest+0xd6>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 a46:	92 60       	ori	r25, 0x02	; 2
 a48:	11 c0       	rjmp	.+34     	; 0xa6c <USB_Device_ProcessControlRequest+0xd6>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a4a:	80 91 15 01 	lds	r24, 0x0115
 a4e:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a50:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 a54:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	25 e0       	ldi	r18, 0x05	; 5
 a5c:	96 95       	lsr	r25
 a5e:	87 95       	ror	r24
 a60:	2a 95       	dec	r18
 a62:	e1 f7       	brne	.-8      	; 0xa5c <USB_Device_ProcessControlRequest+0xc6>
 a64:	98 2f       	mov	r25, r24
 a66:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a68:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a6c:	80 91 e8 00 	lds	r24, 0x00E8
 a70:	87 7f       	andi	r24, 0xF7	; 247
 a72:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 a76:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
 a7a:	10 92 f1 00 	sts	0x00F1, r1
 a7e:	d1 c0       	rjmp	.+418    	; 0xc22 <USB_Device_ProcessControlRequest+0x28c>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a80:	88 23       	and	r24, r24
 a82:	19 f0       	breq	.+6      	; 0xa8a <USB_Device_ProcessControlRequest+0xf4>
 a84:	82 30       	cpi	r24, 0x02	; 2
 a86:	09 f0       	breq	.+2      	; 0xa8a <USB_Device_ProcessControlRequest+0xf4>
 a88:	ef c0       	rjmp	.+478    	; 0xc68 <USB_Device_ProcessControlRequest+0x2d2>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 a8a:	90 e0       	ldi	r25, 0x00	; 0
 a8c:	8f 71       	andi	r24, 0x1F	; 31
 a8e:	90 70       	andi	r25, 0x00	; 0
 a90:	00 97       	sbiw	r24, 0x00	; 0
 a92:	21 f0       	breq	.+8      	; 0xa9c <USB_Device_ProcessControlRequest+0x106>
 a94:	02 97       	sbiw	r24, 0x02	; 2
 a96:	09 f0       	breq	.+2      	; 0xa9a <USB_Device_ProcessControlRequest+0x104>
 a98:	e7 c0       	rjmp	.+462    	; 0xc68 <USB_Device_ProcessControlRequest+0x2d2>
 a9a:	0c c0       	rjmp	.+24     	; 0xab4 <USB_Device_ProcessControlRequest+0x11e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 a9c:	80 91 13 01 	lds	r24, 0x0113
 aa0:	81 30       	cpi	r24, 0x01	; 1
 aa2:	09 f0       	breq	.+2      	; 0xaa6 <USB_Device_ProcessControlRequest+0x110>
 aa4:	e1 c0       	rjmp	.+450    	; 0xc68 <USB_Device_ProcessControlRequest+0x2d2>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 aa6:	10 92 0e 01 	sts	0x010E, r1
 aaa:	33 30       	cpi	r19, 0x03	; 3
 aac:	69 f5       	brne	.+90     	; 0xb08 <USB_Device_ProcessControlRequest+0x172>
 aae:	80 93 0e 01 	sts	0x010E, r24
 ab2:	2a c0       	rjmp	.+84     	; 0xb08 <USB_Device_ProcessControlRequest+0x172>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 ab4:	80 91 13 01 	lds	r24, 0x0113
 ab8:	88 23       	and	r24, r24
 aba:	31 f5       	brne	.+76     	; 0xb08 <USB_Device_ProcessControlRequest+0x172>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 abc:	20 91 15 01 	lds	r18, 0x0115
 ac0:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 ac2:	09 f4       	brne	.+2      	; 0xac6 <USB_Device_ProcessControlRequest+0x130>
 ac4:	d1 c0       	rjmp	.+418    	; 0xc68 <USB_Device_ProcessControlRequest+0x2d2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 ac6:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 aca:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 ace:	80 ff       	sbrs	r24, 0
 ad0:	1b c0       	rjmp	.+54     	; 0xb08 <USB_Device_ProcessControlRequest+0x172>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 ad2:	33 30       	cpi	r19, 0x03	; 3
 ad4:	21 f4       	brne	.+8      	; 0xade <USB_Device_ProcessControlRequest+0x148>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 ad6:	80 91 eb 00 	lds	r24, 0x00EB
 ada:	80 62       	ori	r24, 0x20	; 32
 adc:	13 c0       	rjmp	.+38     	; 0xb04 <USB_Device_ProcessControlRequest+0x16e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 ade:	80 91 eb 00 	lds	r24, 0x00EB
 ae2:	80 61       	ori	r24, 0x10	; 16
 ae4:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 ae8:	81 e0       	ldi	r24, 0x01	; 1
 aea:	90 e0       	ldi	r25, 0x00	; 0
 aec:	02 c0       	rjmp	.+4      	; 0xaf2 <USB_Device_ProcessControlRequest+0x15c>
 aee:	88 0f       	add	r24, r24
 af0:	99 1f       	adc	r25, r25
 af2:	2a 95       	dec	r18
 af4:	e2 f7       	brpl	.-8      	; 0xaee <USB_Device_ProcessControlRequest+0x158>
 af6:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 afa:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 afe:	80 91 eb 00 	lds	r24, 0x00EB
 b02:	88 60       	ori	r24, 0x08	; 8
 b04:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 b08:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b0c:	80 91 e8 00 	lds	r24, 0x00E8
 b10:	87 7f       	andi	r24, 0xF7	; 247
 b12:	8a c0       	rjmp	.+276    	; 0xc28 <USB_Device_ProcessControlRequest+0x292>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b14:	88 23       	and	r24, r24
 b16:	09 f0       	breq	.+2      	; 0xb1a <USB_Device_ProcessControlRequest+0x184>
 b18:	a7 c0       	rjmp	.+334    	; 0xc68 <USB_Device_ProcessControlRequest+0x2d2>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 b1a:	10 91 13 01 	lds	r17, 0x0113
 b1e:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 b20:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 b22:	f8 94       	cli
 b24:	80 91 e8 00 	lds	r24, 0x00E8
 b28:	87 7f       	andi	r24, 0xF7	; 247
 b2a:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 b2e:	eb dc       	rcall	.-1578   	; 0x506 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 b30:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
 b34:	80 ff       	sbrs	r24, 0
 b36:	fc cf       	rjmp	.-8      	; 0xb30 <USB_Device_ProcessControlRequest+0x19a>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 b38:	80 91 e3 00 	lds	r24, 0x00E3
 b3c:	80 78       	andi	r24, 0x80	; 128
 b3e:	81 2b       	or	r24, r17

				UDADDR = Temp;
 b40:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
 b44:	80 68       	ori	r24, 0x80	; 128
 b46:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 b4a:	11 23       	and	r17, r17
 b4c:	11 f4       	brne	.+4      	; 0xb52 <USB_Device_ProcessControlRequest+0x1bc>
 b4e:	82 e0       	ldi	r24, 0x02	; 2
 b50:	01 c0       	rjmp	.+2      	; 0xb54 <USB_Device_ProcessControlRequest+0x1be>
 b52:	83 e0       	ldi	r24, 0x03	; 3
 b54:	80 93 10 01 	sts	0x0110, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 b58:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
 b5a:	86 c0       	rjmp	.+268    	; 0xc68 <USB_Device_ProcessControlRequest+0x2d2>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b5c:	80 58       	subi	r24, 0x80	; 128
 b5e:	82 30       	cpi	r24, 0x02	; 2
 b60:	08 f0       	brcs	.+2      	; 0xb64 <USB_Device_ProcessControlRequest+0x1ce>
 b62:	82 c0       	rjmp	.+260    	; 0xc68 <USB_Device_ProcessControlRequest+0x2d2>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 b64:	80 91 13 01 	lds	r24, 0x0113
 b68:	90 91 14 01 	lds	r25, 0x0114
 b6c:	23 e0       	ldi	r18, 0x03	; 3
 b6e:	8c 3d       	cpi	r24, 0xDC	; 220
 b70:	92 07       	cpc	r25, r18
 b72:	09 f0       	breq	.+2      	; 0xb76 <USB_Device_ProcessControlRequest+0x1e0>
 b74:	33 c0       	rjmp	.+102    	; 0xbdc <USB_Device_ProcessControlRequest+0x246>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 b76:	83 e0       	ldi	r24, 0x03	; 3
 b78:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 b7a:	8a e2       	ldi	r24, 0x2A	; 42
 b7c:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 b7e:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 b80:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 b82:	de 01       	movw	r26, r28
 b84:	15 96       	adiw	r26, 0x05	; 5
 b86:	6e e0       	ldi	r22, 0x0E	; 14
 b88:	40 e0       	ldi	r20, 0x00	; 0
 b8a:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 b8c:	11 e2       	ldi	r17, 0x21	; 33
 b8e:	e6 2f       	mov	r30, r22
 b90:	f0 e0       	ldi	r31, 0x00	; 0
 b92:	10 93 57 00 	sts	0x0057, r17
 b96:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
 b98:	40 ff       	sbrs	r20, 0
 b9a:	03 c0       	rjmp	.+6      	; 0xba2 <USB_Device_ProcessControlRequest+0x20c>
					{
						SerialByte >>= 4;
 b9c:	82 95       	swap	r24
 b9e:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
 ba0:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 ba2:	8f 70       	andi	r24, 0x0F	; 15
 ba4:	28 2f       	mov	r18, r24
 ba6:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 ba8:	8a 30       	cpi	r24, 0x0A	; 10
 baa:	18 f0       	brcs	.+6      	; 0xbb2 <USB_Device_ProcessControlRequest+0x21c>
 bac:	c9 01       	movw	r24, r18
 bae:	c7 96       	adiw	r24, 0x37	; 55
 bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <USB_Device_ProcessControlRequest+0x220>
 bb2:	c9 01       	movw	r24, r18
 bb4:	c0 96       	adiw	r24, 0x30	; 48
 bb6:	8d 93       	st	X+, r24
 bb8:	9d 93       	st	X+, r25
 bba:	4f 5f       	subi	r20, 0xFF	; 255
 bbc:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 bbe:	44 31       	cpi	r20, 0x14	; 20
 bc0:	51 05       	cpc	r21, r1
 bc2:	29 f7       	brne	.-54     	; 0xb8e <USB_Device_ProcessControlRequest+0x1f8>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 bc4:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bc6:	80 91 e8 00 	lds	r24, 0x00E8
 bca:	87 7f       	andi	r24, 0xF7	; 247
 bcc:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 bd0:	ce 01       	movw	r24, r28
 bd2:	03 96       	adiw	r24, 0x03	; 3
 bd4:	6a e2       	ldi	r22, 0x2A	; 42
 bd6:	70 e0       	ldi	r23, 0x00	; 0
 bd8:	de dd       	rcall	.-1092   	; 0x796 <Endpoint_Write_Control_Stream_LE>
 bda:	12 c0       	rjmp	.+36     	; 0xc00 <USB_Device_ProcessControlRequest+0x26a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 bdc:	60 91 15 01 	lds	r22, 0x0115
 be0:	ae 01       	movw	r20, r28
 be2:	4f 5f       	subi	r20, 0xFF	; 255
 be4:	5f 4f       	sbci	r21, 0xFF	; 255
 be6:	2c dc       	rcall	.-1960   	; 0x440 <CALLBACK_USB_GetDescriptor>
 be8:	bc 01       	movw	r22, r24
 bea:	00 97       	sbiw	r24, 0x00	; 0
 bec:	09 f4       	brne	.+2      	; 0xbf0 <USB_Device_ProcessControlRequest+0x25a>
 bee:	3c c0       	rjmp	.+120    	; 0xc68 <USB_Device_ProcessControlRequest+0x2d2>
 bf0:	80 91 e8 00 	lds	r24, 0x00E8
 bf4:	87 7f       	andi	r24, 0xF7	; 247
 bf6:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 bfa:	89 81       	ldd	r24, Y+1	; 0x01
 bfc:	9a 81       	ldd	r25, Y+2	; 0x02
 bfe:	6a de       	rcall	.-812    	; 0x8d4 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 c00:	80 91 e8 00 	lds	r24, 0x00E8
 c04:	8b 77       	andi	r24, 0x7B	; 123
 c06:	80 93 e8 00 	sts	0x00E8, r24
 c0a:	2e c0       	rjmp	.+92     	; 0xc68 <USB_Device_ProcessControlRequest+0x2d2>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 c0c:	80 38       	cpi	r24, 0x80	; 128
 c0e:	61 f5       	brne	.+88     	; 0xc68 <USB_Device_ProcessControlRequest+0x2d2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c10:	80 91 e8 00 	lds	r24, 0x00E8
 c14:	87 7f       	andi	r24, 0xF7	; 247
 c16:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 c1a:	80 91 0c 01 	lds	r24, 0x010C
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 c1e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c22:	80 91 e8 00 	lds	r24, 0x00E8
 c26:	8e 77       	andi	r24, 0x7E	; 126
 c28:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 c2c:	6c dc       	rcall	.-1832   	; 0x506 <Endpoint_ClearStatusStage>
 c2e:	1c c0       	rjmp	.+56     	; 0xc68 <USB_Device_ProcessControlRequest+0x2d2>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c30:	88 23       	and	r24, r24
 c32:	d1 f4       	brne	.+52     	; 0xc68 <USB_Device_ProcessControlRequest+0x2d2>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 c34:	90 91 13 01 	lds	r25, 0x0113
 c38:	92 30       	cpi	r25, 0x02	; 2
 c3a:	b0 f4       	brcc	.+44     	; 0xc68 <USB_Device_ProcessControlRequest+0x2d2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c3c:	80 91 e8 00 	lds	r24, 0x00E8
 c40:	87 7f       	andi	r24, 0xF7	; 247
 c42:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 c46:	90 93 0c 01 	sts	0x010C, r25

	Endpoint_ClearStatusStage();
 c4a:	5d dc       	rcall	.-1862   	; 0x506 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 c4c:	80 91 0c 01 	lds	r24, 0x010C
 c50:	88 23       	and	r24, r24
 c52:	31 f4       	brne	.+12     	; 0xc60 <USB_Device_ProcessControlRequest+0x2ca>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 c54:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 c58:	87 fd       	sbrc	r24, 7
 c5a:	02 c0       	rjmp	.+4      	; 0xc60 <USB_Device_ProcessControlRequest+0x2ca>
 c5c:	81 e0       	ldi	r24, 0x01	; 1
 c5e:	01 c0       	rjmp	.+2      	; 0xc62 <USB_Device_ProcessControlRequest+0x2cc>
 c60:	84 e0       	ldi	r24, 0x04	; 4
 c62:	80 93 10 01 	sts	0x0110, r24

	EVENT_USB_Device_ConfigurationChanged();
 c66:	bc db       	rcall	.-2184   	; 0x3e0 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c68:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 c6c:	83 ff       	sbrs	r24, 3
 c6e:	0a c0       	rjmp	.+20     	; 0xc84 <USB_Device_ProcessControlRequest+0x2ee>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 c70:	80 91 eb 00 	lds	r24, 0x00EB
 c74:	80 62       	ori	r24, 0x20	; 32
 c76:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c7a:	80 91 e8 00 	lds	r24, 0x00E8
 c7e:	87 7f       	andi	r24, 0xF7	; 247
 c80:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 c84:	ac 96       	adiw	r28, 0x2c	; 44
 c86:	0f b6       	in	r0, 0x3f	; 63
 c88:	f8 94       	cli
 c8a:	de bf       	out	0x3e, r29	; 62
 c8c:	0f be       	out	0x3f, r0	; 63
 c8e:	cd bf       	out	0x3d, r28	; 61
 c90:	cf 91       	pop	r28
 c92:	df 91       	pop	r29
 c94:	1f 91       	pop	r17
 c96:	0f 91       	pop	r16
 c98:	08 95       	ret

00000c9a <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 c9a:	08 95       	ret

00000c9c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 c9c:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 c9e:	80 91 10 01 	lds	r24, 0x0110
 ca2:	88 23       	and	r24, r24
 ca4:	61 f0       	breq	.+24     	; 0xcbe <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 ca6:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 caa:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 cae:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 cb2:	83 ff       	sbrs	r24, 3
 cb4:	01 c0       	rjmp	.+2      	; 0xcb8 <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
 cb6:	6f de       	rcall	.-802    	; 0x996 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 cb8:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 cba:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 cbe:	1f 91       	pop	r17
 cc0:	08 95       	ret

00000cc2 <Audio_Device_Event_Stub>:
}

void Audio_Device_Event_Stub(void)
{

}
 cc2:	08 95       	ret

00000cc4 <Audio_Device_ConfigureEndpoints>:
			break;
	}
}

bool Audio_Device_ConfigureEndpoints(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
{
 cc4:	1f 93       	push	r17
 cc6:	cf 93       	push	r28
 cc8:	df 93       	push	r29
 cca:	ec 01       	movw	r28, r24
	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));
 ccc:	1f 82       	std	Y+7, r1	; 0x07
 cce:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == AudioInterfaceInfo->Config.DataINEndpointNumber)
 cd0:	89 81       	ldd	r24, Y+1	; 0x01
 cd2:	18 17       	cp	r17, r24
 cd4:	21 f4       	brne	.+8      	; 0xcde <Audio_Device_ConfigureEndpoints+0x1a>
		{
			Size         = AudioInterfaceInfo->Config.DataINEndpointSize;
 cd6:	2a 81       	ldd	r18, Y+2	; 0x02
 cd8:	3b 81       	ldd	r19, Y+3	; 0x03
 cda:	50 e8       	ldi	r21, 0x80	; 128
 cdc:	06 c0       	rjmp	.+12     	; 0xcea <Audio_Device_ConfigureEndpoints+0x26>
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_ISOCHRONOUS;
			DoubleBanked = true;
		}
		else if (EndpointNum == AudioInterfaceInfo->Config.DataOUTEndpointNumber)
 cde:	8c 81       	ldd	r24, Y+4	; 0x04
 ce0:	18 17       	cp	r17, r24
 ce2:	c1 f4       	brne	.+48     	; 0xd14 <Audio_Device_ConfigureEndpoints+0x50>
		{
			Size         = AudioInterfaceInfo->Config.DataOUTEndpointSize;
 ce4:	2d 81       	ldd	r18, Y+5	; 0x05
 ce6:	3e 81       	ldd	r19, Y+6	; 0x06
 ce8:	50 e0       	ldi	r21, 0x00	; 0
 cea:	40 e0       	ldi	r20, 0x00	; 0
 cec:	88 e0       	ldi	r24, 0x08	; 8
 cee:	90 e0       	ldi	r25, 0x00	; 0
 cf0:	03 c0       	rjmp	.+6      	; 0xcf8 <Audio_Device_ConfigureEndpoints+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
 cf2:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
 cf4:	88 0f       	add	r24, r24
 cf6:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
 cf8:	82 17       	cp	r24, r18
 cfa:	93 07       	cpc	r25, r19
 cfc:	d0 f3       	brcs	.-12     	; 0xcf2 <Audio_Device_ConfigureEndpoints+0x2e>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 cfe:	60 e0       	ldi	r22, 0x00	; 0
 d00:	51 11       	cpse	r21, r1
 d02:	61 e0       	ldi	r22, 0x01	; 1
 d04:	60 64       	ori	r22, 0x40	; 64
 d06:	42 95       	swap	r20
 d08:	40 7f       	andi	r20, 0xF0	; 240
 d0a:	46 60       	ori	r20, 0x06	; 6
 d0c:	81 2f       	mov	r24, r17
 d0e:	c6 db       	rcall	.-2164   	; 0x49c <Endpoint_ConfigureEndpoint_Prv>
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
 d10:	88 23       	and	r24, r24
 d12:	21 f0       	breq	.+8      	; 0xd1c <Audio_Device_ConfigureEndpoints+0x58>

bool Audio_Device_ConfigureEndpoints(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
{
	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
 d14:	1f 5f       	subi	r17, 0xFF	; 255
 d16:	17 30       	cpi	r17, 0x07	; 7
 d18:	d9 f6       	brne	.-74     	; 0xcd0 <Audio_Device_ConfigureEndpoints+0xc>
 d1a:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
 d1c:	df 91       	pop	r29
 d1e:	cf 91       	pop	r28
 d20:	1f 91       	pop	r17
 d22:	08 95       	ret

00000d24 <Audio_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_AUDIO_DRIVER
#define  __INCLUDE_FROM_AUDIO_DEVICE_C
#include "Audio.h"

void Audio_Device_ProcessControlRequest(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
{
 d24:	2f 92       	push	r2
 d26:	3f 92       	push	r3
 d28:	5f 92       	push	r5
 d2a:	6f 92       	push	r6
 d2c:	7f 92       	push	r7
 d2e:	8f 92       	push	r8
 d30:	9f 92       	push	r9
 d32:	af 92       	push	r10
 d34:	bf 92       	push	r11
 d36:	cf 92       	push	r12
 d38:	df 92       	push	r13
 d3a:	ef 92       	push	r14
 d3c:	ff 92       	push	r15
 d3e:	0f 93       	push	r16
 d40:	1f 93       	push	r17
 d42:	df 93       	push	r29
 d44:	cf 93       	push	r28
 d46:	00 d0       	rcall	.+0      	; 0xd48 <Audio_Device_ProcessControlRequest+0x24>
 d48:	cd b7       	in	r28, 0x3d	; 61
 d4a:	de b7       	in	r29, 0x3e	; 62
 d4c:	3c 01       	movw	r6, r24
				}
			}

			break;
	}
}
 d4e:	2d b6       	in	r2, 0x3d	; 61
 d50:	3e b6       	in	r3, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d52:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_AUDIO_DEVICE_C
#include "Audio.h"

void Audio_Device_ProcessControlRequest(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
 d56:	83 ff       	sbrs	r24, 3
 d58:	ff c0       	rjmp	.+510    	; 0xf58 <Audio_Device_ProcessControlRequest+0x234>
	  return;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_INTERFACE)
 d5a:	40 91 11 01 	lds	r20, 0x0111
 d5e:	84 2f       	mov	r24, r20
 d60:	90 e0       	ldi	r25, 0x00	; 0
 d62:	8f 71       	andi	r24, 0x1F	; 31
 d64:	90 70       	andi	r25, 0x00	; 0
 d66:	81 30       	cpi	r24, 0x01	; 1
 d68:	91 05       	cpc	r25, r1
 d6a:	61 f4       	brne	.+24     	; 0xd84 <Audio_Device_ProcessControlRequest+0x60>
	{
		if (USB_ControlRequest.wIndex != AudioInterfaceInfo->Config.StreamingInterfaceNumber)
 d6c:	f3 01       	movw	r30, r6
 d6e:	80 81       	ld	r24, Z
 d70:	90 e0       	ldi	r25, 0x00	; 0
 d72:	20 91 15 01 	lds	r18, 0x0115
 d76:	30 91 16 01 	lds	r19, 0x0116
 d7a:	28 17       	cp	r18, r24
 d7c:	39 07       	cpc	r19, r25
 d7e:	09 f0       	breq	.+2      	; 0xd82 <Audio_Device_ProcessControlRequest+0x5e>
 d80:	eb c0       	rjmp	.+470    	; 0xf58 <Audio_Device_ProcessControlRequest+0x234>
 d82:	2e c0       	rjmp	.+92     	; 0xde0 <Audio_Device_ProcessControlRequest+0xbc>
		  return;
	}
	else if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_ENDPOINT)
 d84:	02 97       	sbiw	r24, 0x02	; 2
 d86:	61 f5       	brne	.+88     	; 0xde0 <Audio_Device_ProcessControlRequest+0xbc>
	{
		bool EndpointFilterMatch = false;
	
		EndpointFilterMatch |= (AudioInterfaceInfo->Config.DataINEndpointNumber &&
 d88:	f3 01       	movw	r30, r6
 d8a:	91 81       	ldd	r25, Z+1	; 0x01
 d8c:	99 23       	and	r25, r25
 d8e:	19 f4       	brne	.+6      	; 0xd96 <Audio_Device_ProcessControlRequest+0x72>
 d90:	60 e0       	ldi	r22, 0x00	; 0
 d92:	70 e0       	ldi	r23, 0x00	; 0
 d94:	0a c0       	rjmp	.+20     	; 0xdaa <Audio_Device_ProcessControlRequest+0x86>
 d96:	20 e0       	ldi	r18, 0x00	; 0
 d98:	90 68       	ori	r25, 0x80	; 128
 d9a:	80 91 15 01 	lds	r24, 0x0115
 d9e:	89 13       	cpse	r24, r25
 da0:	21 e0       	ldi	r18, 0x01	; 1
 da2:	81 e0       	ldi	r24, 0x01	; 1
 da4:	28 27       	eor	r18, r24
 da6:	62 2f       	mov	r22, r18
 da8:	70 e0       	ldi	r23, 0x00	; 0
		                        ((uint8_t)USB_ControlRequest.wIndex == (ENDPOINT_DIR_IN  | AudioInterfaceInfo->Config.DataINEndpointNumber)));
	
		EndpointFilterMatch |= (AudioInterfaceInfo->Config.DataOUTEndpointNumber &&
 daa:	f3 01       	movw	r30, r6
 dac:	24 81       	ldd	r18, Z+4	; 0x04
 dae:	22 23       	and	r18, r18
 db0:	19 f4       	brne	.+6      	; 0xdb8 <Audio_Device_ProcessControlRequest+0x94>
 db2:	80 e0       	ldi	r24, 0x00	; 0
 db4:	90 e0       	ldi	r25, 0x00	; 0
 db6:	09 c0       	rjmp	.+18     	; 0xdca <Audio_Device_ProcessControlRequest+0xa6>
 db8:	90 e0       	ldi	r25, 0x00	; 0
 dba:	80 91 15 01 	lds	r24, 0x0115
 dbe:	82 13       	cpse	r24, r18
 dc0:	91 e0       	ldi	r25, 0x01	; 1
 dc2:	81 e0       	ldi	r24, 0x01	; 1
 dc4:	98 27       	eor	r25, r24
 dc6:	89 2f       	mov	r24, r25
 dc8:	90 e0       	ldi	r25, 0x00	; 0
		                        ((uint8_t)USB_ControlRequest.wIndex == (ENDPOINT_DIR_OUT | AudioInterfaceInfo->Config.DataOUTEndpointNumber)));

		if (!(EndpointFilterMatch))
 dca:	20 e0       	ldi	r18, 0x00	; 0
 dcc:	30 e0       	ldi	r19, 0x00	; 0
 dce:	67 2b       	or	r22, r23
 dd0:	11 f0       	breq	.+4      	; 0xdd6 <Audio_Device_ProcessControlRequest+0xb2>
 dd2:	21 e0       	ldi	r18, 0x01	; 1
 dd4:	30 e0       	ldi	r19, 0x00	; 0
 dd6:	82 2b       	or	r24, r18
 dd8:	93 2b       	or	r25, r19
 dda:	89 2b       	or	r24, r25
 ddc:	09 f4       	brne	.+2      	; 0xde0 <Audio_Device_ProcessControlRequest+0xbc>
 dde:	bc c0       	rjmp	.+376    	; 0xf58 <Audio_Device_ProcessControlRequest+0x234>
		  return;
	}	

	switch (USB_ControlRequest.bRequest)
 de0:	90 90 12 01 	lds	r9, 0x0112
 de4:	fb e0       	ldi	r31, 0x0B	; 11
 de6:	9f 16       	cp	r9, r31
 de8:	a9 f0       	breq	.+42     	; 0xe14 <Audio_Device_ProcessControlRequest+0xf0>
 dea:	f9 15       	cp	r31, r9
 dec:	30 f0       	brcs	.+12     	; 0xdfa <Audio_Device_ProcessControlRequest+0xd6>
 dee:	89 2d       	mov	r24, r9
 df0:	81 50       	subi	r24, 0x01	; 1
 df2:	84 30       	cpi	r24, 0x04	; 4
 df4:	08 f0       	brcs	.+2      	; 0xdf8 <Audio_Device_ProcessControlRequest+0xd4>
 df6:	b0 c0       	rjmp	.+352    	; 0xf58 <Audio_Device_ProcessControlRequest+0x234>
 df8:	2b c0       	rjmp	.+86     	; 0xe50 <Audio_Device_ProcessControlRequest+0x12c>
 dfa:	21 e8       	ldi	r18, 0x81	; 129
 dfc:	92 16       	cp	r9, r18
 dfe:	08 f4       	brcc	.+2      	; 0xe02 <Audio_Device_ProcessControlRequest+0xde>
 e00:	ab c0       	rjmp	.+342    	; 0xf58 <Audio_Device_ProcessControlRequest+0x234>
 e02:	34 e8       	ldi	r19, 0x84	; 132
 e04:	39 15       	cp	r19, r9
 e06:	08 f0       	brcs	.+2      	; 0xe0a <Audio_Device_ProcessControlRequest+0xe6>
 e08:	6c c0       	rjmp	.+216    	; 0xee2 <Audio_Device_ProcessControlRequest+0x1be>
 e0a:	6f ef       	ldi	r22, 0xFF	; 255
 e0c:	96 16       	cp	r9, r22
 e0e:	09 f0       	breq	.+2      	; 0xe12 <Audio_Device_ProcessControlRequest+0xee>
 e10:	a3 c0       	rjmp	.+326    	; 0xf58 <Audio_Device_ProcessControlRequest+0x234>
 e12:	13 c0       	rjmp	.+38     	; 0xe3a <Audio_Device_ProcessControlRequest+0x116>
	{
		case REQ_SetInterface:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_INTERFACE))
 e14:	41 30       	cpi	r20, 0x01	; 1
 e16:	09 f0       	breq	.+2      	; 0xe1a <Audio_Device_ProcessControlRequest+0xf6>
 e18:	9f c0       	rjmp	.+318    	; 0xf58 <Audio_Device_ProcessControlRequest+0x234>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e1a:	80 91 e8 00 	lds	r24, 0x00E8
 e1e:	87 7f       	andi	r24, 0xF7	; 247
 e20:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 e24:	70 db       	rcall	.-2336   	; 0x506 <Endpoint_ClearStatusStage>

				AudioInterfaceInfo->State.InterfaceEnabled = ((USB_ControlRequest.wValue & 0xFF) != 0);
 e26:	90 e0       	ldi	r25, 0x00	; 0
 e28:	80 91 13 01 	lds	r24, 0x0113
 e2c:	81 11       	cpse	r24, r1
 e2e:	91 e0       	ldi	r25, 0x01	; 1
 e30:	f3 01       	movw	r30, r6
 e32:	97 83       	std	Z+7, r25	; 0x07
				EVENT_Audio_Device_StreamStartStop(AudioInterfaceInfo);
 e34:	c3 01       	movw	r24, r6
 e36:	45 df       	rcall	.-374    	; 0xcc2 <Audio_Device_Event_Stub>
 e38:	8f c0       	rjmp	.+286    	; 0xf58 <Audio_Device_ProcessControlRequest+0x234>
			}

			break;
		case AUDIO_REQ_GetStatus:
			if ((USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)) ||
 e3a:	41 52       	subi	r20, 0x21	; 33
 e3c:	42 30       	cpi	r20, 0x02	; 2
 e3e:	08 f0       	brcs	.+2      	; 0xe42 <Audio_Device_ProcessControlRequest+0x11e>
 e40:	8b c0       	rjmp	.+278    	; 0xf58 <Audio_Device_ProcessControlRequest+0x234>
 e42:	80 91 e8 00 	lds	r24, 0x00E8
 e46:	87 7f       	andi	r24, 0xF7	; 247
 e48:	80 93 e8 00 	sts	0x00E8, r24
			    (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT)))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 e4c:	5c db       	rcall	.-2376   	; 0x506 <Endpoint_ClearStatusStage>
 e4e:	84 c0       	rjmp	.+264    	; 0xf58 <Audio_Device_ProcessControlRequest+0x234>
			break;
		case AUDIO_REQ_SetCurrent:
		case AUDIO_REQ_SetMinimum:
		case AUDIO_REQ_SetMaximum:
		case AUDIO_REQ_SetResolution:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT))
 e50:	42 32       	cpi	r20, 0x22	; 34
 e52:	09 f0       	breq	.+2      	; 0xe56 <Audio_Device_ProcessControlRequest+0x132>
 e54:	81 c0       	rjmp	.+258    	; 0xf58 <Audio_Device_ProcessControlRequest+0x234>
			{
				uint8_t EndpointProperty = USB_ControlRequest.bRequest;
				uint8_t EndpointAddress  = (uint8_t)USB_ControlRequest.wIndex;
 e56:	80 90 15 01 	lds	r8, 0x0115
				uint8_t EndpointControl  = (USB_ControlRequest.wValue >> 8);
 e5a:	50 90 14 01 	lds	r5, 0x0114
			
				if (CALLBACK_Audio_Device_GetSetEndpointProperty(AudioInterfaceInfo, EndpointProperty, EndpointAddress,
 e5e:	c3 01       	movw	r24, r6
 e60:	69 2d       	mov	r22, r9
 e62:	48 2d       	mov	r20, r8
 e64:	25 2d       	mov	r18, r5
 e66:	00 e0       	ldi	r16, 0x00	; 0
 e68:	10 e0       	ldi	r17, 0x00	; 0
 e6a:	ee 24       	eor	r14, r14
 e6c:	ff 24       	eor	r15, r15
 e6e:	4c da       	rcall	.-2920   	; 0x308 <CALLBACK_Audio_Device_GetSetEndpointProperty>
 e70:	88 23       	and	r24, r24
 e72:	09 f4       	brne	.+2      	; 0xe76 <Audio_Device_ProcessControlRequest+0x152>
 e74:	71 c0       	rjmp	.+226    	; 0xf58 <Audio_Device_ProcessControlRequest+0x234>
 e76:	bd b6       	in	r11, 0x3d	; 61
 e78:	ae b6       	in	r10, 0x3e	; 62
				                                                 EndpointControl, NULL, NULL))
				{
					uint16_t ValueLength = USB_ControlRequest.wLength;
 e7a:	80 91 17 01 	lds	r24, 0x0117
 e7e:	90 91 18 01 	lds	r25, 0x0118
 e82:	9a 83       	std	Y+2, r25	; 0x02
 e84:	89 83       	std	Y+1, r24	; 0x01
					uint8_t  Value[ValueLength];
 e86:	2d b7       	in	r18, 0x3d	; 61
 e88:	3e b7       	in	r19, 0x3e	; 62
 e8a:	28 1b       	sub	r18, r24
 e8c:	39 0b       	sbc	r19, r25
 e8e:	0f b6       	in	r0, 0x3f	; 63
 e90:	f8 94       	cli
 e92:	3e bf       	out	0x3e, r19	; 62
 e94:	0f be       	out	0x3f, r0	; 63
 e96:	2d bf       	out	0x3d, r18	; 61
 e98:	cd b6       	in	r12, 0x3d	; 61
 e9a:	de b6       	in	r13, 0x3e	; 62
 e9c:	08 94       	sec
 e9e:	c1 1c       	adc	r12, r1
 ea0:	d1 1c       	adc	r13, r1
 ea2:	80 91 e8 00 	lds	r24, 0x00E8
 ea6:	87 7f       	andi	r24, 0xF7	; 247
 ea8:	80 93 e8 00 	sts	0x00E8, r24
					
					Endpoint_ClearSETUP();
					Endpoint_Read_Control_Stream_LE(Value, ValueLength);
 eac:	69 81       	ldd	r22, Y+1	; 0x01
 eae:	7a 81       	ldd	r23, Y+2	; 0x02
 eb0:	c6 01       	movw	r24, r12
 eb2:	cf dc       	rcall	.-1634   	; 0x852 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 eb4:	80 91 e8 00 	lds	r24, 0x00E8
 eb8:	8e 77       	andi	r24, 0x7E	; 126
 eba:	80 93 e8 00 	sts	0x00E8, r24
					Endpoint_ClearIN();					

					CALLBACK_Audio_Device_GetSetEndpointProperty(AudioInterfaceInfo, EndpointProperty, EndpointAddress,
 ebe:	c3 01       	movw	r24, r6
 ec0:	69 2d       	mov	r22, r9
 ec2:	48 2d       	mov	r20, r8
 ec4:	25 2d       	mov	r18, r5
 ec6:	8e 01       	movw	r16, r28
 ec8:	0f 5f       	subi	r16, 0xFF	; 255
 eca:	1f 4f       	sbci	r17, 0xFF	; 255
 ecc:	76 01       	movw	r14, r12
 ece:	1c da       	rcall	.-3016   	; 0x308 <CALLBACK_Audio_Device_GetSetEndpointProperty>
 ed0:	2b 2d       	mov	r18, r11
 ed2:	3a 2d       	mov	r19, r10
 ed4:	c9 01       	movw	r24, r18
 ed6:	0f b6       	in	r0, 0x3f	; 63
 ed8:	f8 94       	cli
 eda:	9e bf       	out	0x3e, r25	; 62
 edc:	0f be       	out	0x3f, r0	; 63
 ede:	8d bf       	out	0x3d, r24	; 61
 ee0:	3b c0       	rjmp	.+118    	; 0xf58 <Audio_Device_ProcessControlRequest+0x234>
			break;
		case AUDIO_REQ_GetCurrent:
		case AUDIO_REQ_GetMinimum:
		case AUDIO_REQ_GetMaximum:
		case AUDIO_REQ_GetResolution:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
 ee2:	42 3a       	cpi	r20, 0xA2	; 162
 ee4:	c9 f5       	brne	.+114    	; 0xf58 <Audio_Device_ProcessControlRequest+0x234>
 ee6:	cd b6       	in	r12, 0x3d	; 61
 ee8:	8e b6       	in	r8, 0x3e	; 62
			{
				uint8_t  EndpointProperty = USB_ControlRequest.bRequest;
				uint8_t  EndpointAddress  = (uint8_t)USB_ControlRequest.wIndex;
 eea:	40 91 15 01 	lds	r20, 0x0115
				uint8_t  EndpointControl  = (USB_ControlRequest.wValue >> 8);
 eee:	20 91 14 01 	lds	r18, 0x0114
				uint16_t ValueLength      = USB_ControlRequest.wLength;
 ef2:	80 91 17 01 	lds	r24, 0x0117
 ef6:	90 91 18 01 	lds	r25, 0x0118
 efa:	9a 83       	std	Y+2, r25	; 0x02
 efc:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  Value[ValueLength];
 efe:	6d b7       	in	r22, 0x3d	; 61
 f00:	7e b7       	in	r23, 0x3e	; 62
 f02:	68 1b       	sub	r22, r24
 f04:	79 0b       	sbc	r23, r25
 f06:	0f b6       	in	r0, 0x3f	; 63
 f08:	f8 94       	cli
 f0a:	7e bf       	out	0x3e, r23	; 62
 f0c:	0f be       	out	0x3f, r0	; 63
 f0e:	6d bf       	out	0x3d, r22	; 61
 f10:	ad b6       	in	r10, 0x3d	; 61
 f12:	be b6       	in	r11, 0x3e	; 62
 f14:	08 94       	sec
 f16:	a1 1c       	adc	r10, r1
 f18:	b1 1c       	adc	r11, r1

				if (CALLBACK_Audio_Device_GetSetEndpointProperty(AudioInterfaceInfo, EndpointProperty, EndpointAddress,
 f1a:	c3 01       	movw	r24, r6
 f1c:	69 2d       	mov	r22, r9
 f1e:	8e 01       	movw	r16, r28
 f20:	0f 5f       	subi	r16, 0xFF	; 255
 f22:	1f 4f       	sbci	r17, 0xFF	; 255
 f24:	75 01       	movw	r14, r10
 f26:	f0 d9       	rcall	.-3104   	; 0x308 <CALLBACK_Audio_Device_GetSetEndpointProperty>
 f28:	88 23       	and	r24, r24
 f2a:	71 f0       	breq	.+28     	; 0xf48 <Audio_Device_ProcessControlRequest+0x224>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 f2c:	80 91 e8 00 	lds	r24, 0x00E8
 f30:	87 7f       	andi	r24, 0xF7	; 247
 f32:	80 93 e8 00 	sts	0x00E8, r24
				                                                 EndpointControl, &ValueLength, Value))
				{
					Endpoint_ClearSETUP();
					Endpoint_Write_Control_Stream_LE(Value, ValueLength);
 f36:	69 81       	ldd	r22, Y+1	; 0x01
 f38:	7a 81       	ldd	r23, Y+2	; 0x02
 f3a:	c5 01       	movw	r24, r10
 f3c:	2c dc       	rcall	.-1960   	; 0x796 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 f3e:	80 91 e8 00 	lds	r24, 0x00E8
 f42:	8b 77       	andi	r24, 0x7B	; 123
 f44:	80 93 e8 00 	sts	0x00E8, r24
 f48:	8c 2d       	mov	r24, r12
 f4a:	98 2d       	mov	r25, r8
 f4c:	9c 01       	movw	r18, r24
 f4e:	0f b6       	in	r0, 0x3f	; 63
 f50:	f8 94       	cli
 f52:	3e bf       	out	0x3e, r19	; 62
 f54:	0f be       	out	0x3f, r0	; 63
 f56:	2d bf       	out	0x3d, r18	; 61
				}
			}

			break;
	}
}
 f58:	0f b6       	in	r0, 0x3f	; 63
 f5a:	f8 94       	cli
 f5c:	3e be       	out	0x3e, r3	; 62
 f5e:	0f be       	out	0x3f, r0	; 63
 f60:	2d be       	out	0x3d, r2	; 61
 f62:	0f 90       	pop	r0
 f64:	0f 90       	pop	r0
 f66:	cf 91       	pop	r28
 f68:	df 91       	pop	r29
 f6a:	1f 91       	pop	r17
 f6c:	0f 91       	pop	r16
 f6e:	ff 90       	pop	r15
 f70:	ef 90       	pop	r14
 f72:	df 90       	pop	r13
 f74:	cf 90       	pop	r12
 f76:	bf 90       	pop	r11
 f78:	af 90       	pop	r10
 f7a:	9f 90       	pop	r9
 f7c:	8f 90       	pop	r8
 f7e:	7f 90       	pop	r7
 f80:	6f 90       	pop	r6
 f82:	5f 90       	pop	r5
 f84:	3f 90       	pop	r3
 f86:	2f 90       	pop	r2
 f88:	08 95       	ret

00000f8a <__udivmodsi4>:
 f8a:	a1 e2       	ldi	r26, 0x21	; 33
 f8c:	1a 2e       	mov	r1, r26
 f8e:	aa 1b       	sub	r26, r26
 f90:	bb 1b       	sub	r27, r27
 f92:	fd 01       	movw	r30, r26
 f94:	0d c0       	rjmp	.+26     	; 0xfb0 <__udivmodsi4_ep>

00000f96 <__udivmodsi4_loop>:
 f96:	aa 1f       	adc	r26, r26
 f98:	bb 1f       	adc	r27, r27
 f9a:	ee 1f       	adc	r30, r30
 f9c:	ff 1f       	adc	r31, r31
 f9e:	a2 17       	cp	r26, r18
 fa0:	b3 07       	cpc	r27, r19
 fa2:	e4 07       	cpc	r30, r20
 fa4:	f5 07       	cpc	r31, r21
 fa6:	20 f0       	brcs	.+8      	; 0xfb0 <__udivmodsi4_ep>
 fa8:	a2 1b       	sub	r26, r18
 faa:	b3 0b       	sbc	r27, r19
 fac:	e4 0b       	sbc	r30, r20
 fae:	f5 0b       	sbc	r31, r21

00000fb0 <__udivmodsi4_ep>:
 fb0:	66 1f       	adc	r22, r22
 fb2:	77 1f       	adc	r23, r23
 fb4:	88 1f       	adc	r24, r24
 fb6:	99 1f       	adc	r25, r25
 fb8:	1a 94       	dec	r1
 fba:	69 f7       	brne	.-38     	; 0xf96 <__udivmodsi4_loop>
 fbc:	60 95       	com	r22
 fbe:	70 95       	com	r23
 fc0:	80 95       	com	r24
 fc2:	90 95       	com	r25
 fc4:	9b 01       	movw	r18, r22
 fc6:	ac 01       	movw	r20, r24
 fc8:	bd 01       	movw	r22, r26
 fca:	cf 01       	movw	r24, r30
 fcc:	08 95       	ret

00000fce <_exit>:
 fce:	f8 94       	cli

00000fd0 <__stop_program>:
 fd0:	ff cf       	rjmp	.-2      	; 0xfd0 <__stop_program>
