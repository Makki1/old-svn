
DualVirtualSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  00000f58  00000fec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080017e  0080017e  0000106a  2**0
                  ALLOC
  3 .stab         00000b1c  00000000  00000000  0000106c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00001b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000470  00000000  00000000  00001cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000c8f  00000000  00000000  00002167  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007e69  00000000  00000000  00002df6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001f61  00000000  00000000  0000ac5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000061fc  00000000  00000000  0000cbc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006a0  00000000  00000000  00012dbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003404  00000000  00000000  0001345c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000034c6  00000000  00000000  00016860  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000560  00000000  00000000  00019d26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
   0:	b9 c0       	rjmp	.+370    	; 0x174 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   2:	00 00       	nop

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
   4:	d4 c0       	rjmp	.+424    	; 0x1ae <__bad_interrupt>
	}
	else
	{
		return 0;
	}
}
   6:	00 00       	nop
   8:	d2 c0       	rjmp	.+420    	; 0x1ae <__bad_interrupt>
   a:	00 00       	nop
   c:	d0 c0       	rjmp	.+416    	; 0x1ae <__bad_interrupt>
   e:	00 00       	nop
  10:	ce c0       	rjmp	.+412    	; 0x1ae <__bad_interrupt>
  12:	00 00       	nop
  14:	cc c0       	rjmp	.+408    	; 0x1ae <__bad_interrupt>
  16:	00 00       	nop
  18:	ca c0       	rjmp	.+404    	; 0x1ae <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c8 c0       	rjmp	.+400    	; 0x1ae <__bad_interrupt>
  1e:	00 00       	nop
  20:	c6 c0       	rjmp	.+396    	; 0x1ae <__bad_interrupt>
  22:	00 00       	nop
  24:	c4 c0       	rjmp	.+392    	; 0x1ae <__bad_interrupt>
  26:	00 00       	nop
  28:	75 c2       	rjmp	.+1258   	; 0x514 <__vector_10>
  2a:	00 00       	nop
  2c:	c0 c0       	rjmp	.+384    	; 0x1ae <__bad_interrupt>
  2e:	00 00       	nop
  30:	be c0       	rjmp	.+380    	; 0x1ae <__bad_interrupt>
  32:	00 00       	nop
  34:	bc c0       	rjmp	.+376    	; 0x1ae <__bad_interrupt>
  36:	00 00       	nop
  38:	ba c0       	rjmp	.+372    	; 0x1ae <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b8 c0       	rjmp	.+368    	; 0x1ae <__bad_interrupt>
  3e:	00 00       	nop
  40:	b6 c0       	rjmp	.+364    	; 0x1ae <__bad_interrupt>
  42:	00 00       	nop
  44:	b4 c0       	rjmp	.+360    	; 0x1ae <__bad_interrupt>
  46:	00 00       	nop
  48:	b2 c0       	rjmp	.+356    	; 0x1ae <__bad_interrupt>
  4a:	00 00       	nop
  4c:	b0 c0       	rjmp	.+352    	; 0x1ae <__bad_interrupt>
  4e:	00 00       	nop
  50:	ae c0       	rjmp	.+348    	; 0x1ae <__bad_interrupt>
  52:	00 00       	nop
  54:	ac c0       	rjmp	.+344    	; 0x1ae <__bad_interrupt>
  56:	00 00       	nop
  58:	aa c0       	rjmp	.+340    	; 0x1ae <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a8 c0       	rjmp	.+336    	; 0x1ae <__bad_interrupt>
  5e:	00 00       	nop
  60:	a6 c0       	rjmp	.+332    	; 0x1ae <__bad_interrupt>
  62:	00 00       	nop
  64:	a4 c0       	rjmp	.+328    	; 0x1ae <__bad_interrupt>
  66:	00 00       	nop
  68:	a2 c0       	rjmp	.+324    	; 0x1ae <__bad_interrupt>
  6a:	00 00       	nop
  6c:	a0 c0       	rjmp	.+320    	; 0x1ae <__bad_interrupt>
  6e:	00 00       	nop
  70:	9e c0       	rjmp	.+316    	; 0x1ae <__bad_interrupt>
  72:	00 00       	nop
  74:	9c c0       	rjmp	.+312    	; 0x1ae <__bad_interrupt>
  76:	00 00       	nop
  78:	9a c0       	rjmp	.+308    	; 0x1ae <__bad_interrupt>
  7a:	00 00       	nop
  7c:	98 c0       	rjmp	.+304    	; 0x1ae <__bad_interrupt>
  7e:	00 00       	nop
  80:	96 c0       	rjmp	.+300    	; 0x1ae <__bad_interrupt>
  82:	00 00       	nop
  84:	94 c0       	rjmp	.+296    	; 0x1ae <__bad_interrupt>
  86:	00 00       	nop
  88:	92 c0       	rjmp	.+292    	; 0x1ae <__bad_interrupt>
  8a:	00 00       	nop
  8c:	90 c0       	rjmp	.+288    	; 0x1ae <__bad_interrupt>
  8e:	00 00       	nop
  90:	8e c0       	rjmp	.+284    	; 0x1ae <__bad_interrupt>
  92:	00 00       	nop
  94:	8c c0       	rjmp	.+280    	; 0x1ae <__bad_interrupt>
  96:	00 00       	nop

00000098 <DeviceDescriptor>:
  98:	12 01 10 01 ef 02 01 08 eb 03 4e 20 01 00 01 02     ..........N ....
  a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
  aa:	09 02 83 00 04 01 00 c0 32 08 0b 00 02 02 02 01     ........2.......
  ba:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
  ca:	24 02 06 05 24 06 00 01 07 05 83 03 08 00 ff 09     $...$...........
  da:	04 01 00 02 0a 00 00 00 07 05 02 02 10 00 01 07     ................
  ea:	05 81 02 10 00 01 08 0b 02 02 02 02 01 00 09 04     ................
  fa:	02 00 01 02 02 01 00 05 24 00 10 01 04 24 02 06     ........$....$..
 10a:	05 24 06 02 03 07 05 86 03 08 00 ff 09 04 03 00     .$..............
 11a:	02 0a 00 00 00 07 05 05 02 10 00 01 07 05 84 02     ................
 12a:	10 00 01                                            ...

0000012d <LanguageString>:
 12d:	04 03 09 04                                         ....

00000131 <ManufacturerString>:
 131:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
 141:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0000014b <ProductString>:
 14b:	1c 03 4c 00 55 00 46 00 41 00 20 00 44 00 75 00     ..L.U.F.A. .D.u.
 15b:	61 00 6c 00 20 00 43 00 44 00 43 00 20 00 44 00     a.l. .C.D.C. .D.
 16b:	65 00 6d 00 6f 00 00 00 00                          e.m.o....

00000174 <__ctors_end>:
 174:	11 24       	eor	r1, r1
 176:	1f be       	out	0x3f, r1	; 63
 178:	cf ef       	ldi	r28, 0xFF	; 255
 17a:	d0 e2       	ldi	r29, 0x20	; 32
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	cd bf       	out	0x3d, r28	; 61

00000180 <__do_copy_data>:
 180:	11 e0       	ldi	r17, 0x01	; 1
 182:	a0 e0       	ldi	r26, 0x00	; 0
 184:	b1 e0       	ldi	r27, 0x01	; 1
 186:	e8 e5       	ldi	r30, 0x58	; 88
 188:	ff e0       	ldi	r31, 0x0F	; 15
 18a:	00 e0       	ldi	r16, 0x00	; 0
 18c:	0b bf       	out	0x3b, r16	; 59
 18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x14>
 190:	07 90       	elpm	r0, Z+
 192:	0d 92       	st	X+, r0
 194:	ae 37       	cpi	r26, 0x7E	; 126
 196:	b1 07       	cpc	r27, r17
 198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0x10>

0000019a <__do_clear_bss>:
 19a:	11 e0       	ldi	r17, 0x01	; 1
 19c:	ae e7       	ldi	r26, 0x7E	; 126
 19e:	b1 e0       	ldi	r27, 0x01	; 1
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
 1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
 1a4:	ac 38       	cpi	r26, 0x8C	; 140
 1a6:	b1 07       	cpc	r27, r17
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
 1aa:	83 d0       	rcall	.+262    	; 0x2b2 <main>
 1ac:	d3 c6       	rjmp	.+3494   	; 0xf54 <_exit>

000001ae <__bad_interrupt>:
 1ae:	28 cf       	rjmp	.-432    	; 0x0 <__vectors>

000001b0 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 1b0:	8b b1       	in	r24, 0x0b	; 11
 1b2:	8f 70       	andi	r24, 0x0F	; 15
 1b4:	80 6a       	ori	r24, 0xA0	; 160
 1b6:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
 1b8:	08 95       	ret

000001ba <EVENT_USB_Device_Disconnect>:
 1ba:	8b b1       	in	r24, 0x0b	; 11
 1bc:	8f 70       	andi	r24, 0x0F	; 15
 1be:	80 61       	ori	r24, 0x10	; 16
 1c0:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
 1c2:	08 95       	ret

000001c4 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial1_CDC_Interface);
 1c4:	82 e5       	ldi	r24, 0x52	; 82
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	58 d6       	rcall	.+3248   	; 0xe7a <CDC_Device_ProcessControlRequest>
	CDC_Device_ProcessControlRequest(&VirtualSerial2_CDC_Interface);
 1ca:	88 e6       	ldi	r24, 0x68	; 104
 1cc:	91 e0       	ldi	r25, 0x01	; 1
}
 1ce:	55 c6       	rjmp	.+3242   	; 0xe7a <CDC_Device_ProcessControlRequest>

000001d0 <EVENT_USB_Device_ConfigurationChanged>:
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
 1d0:	0f 93       	push	r16
 1d2:	1f 93       	push	r17
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial1_CDC_Interface);
 1d4:	82 e5       	ldi	r24, 0x52	; 82
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	00 d6       	rcall	.+3072   	; 0xdda <CDC_Device_ConfigureEndpoints>
 1da:	08 2f       	mov	r16, r24
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial2_CDC_Interface);
 1dc:	88 e6       	ldi	r24, 0x68	; 104
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	fc d5       	rcall	.+3064   	; 0xdda <CDC_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 1e2:	10 e0       	ldi	r17, 0x00	; 0
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	08 23       	and	r16, r24
 1e8:	19 23       	and	r17, r25
 1ea:	00 ff       	sbrs	r16, 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <EVENT_USB_Device_ConfigurationChanged+0x22>
 1ee:	90 e6       	ldi	r25, 0x60	; 96
 1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <EVENT_USB_Device_ConfigurationChanged+0x24>
 1f2:	90 e9       	ldi	r25, 0x90	; 144
 1f4:	8b b1       	in	r24, 0x0b	; 11
 1f6:	8f 70       	andi	r24, 0x0F	; 15
 1f8:	98 2b       	or	r25, r24
 1fa:	9b b9       	out	0x0b, r25	; 11
}
 1fc:	1f 91       	pop	r17
 1fe:	0f 91       	pop	r16
 200:	08 95       	ret

00000202 <CheckJoystickMovement>:
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
 202:	23 b1       	in	r18, 0x03	; 3
 204:	8c b1       	in	r24, 0x0c	; 12
 206:	80 95       	com	r24
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	80 73       	andi	r24, 0x30	; 48
 20c:	90 70       	andi	r25, 0x00	; 0
 20e:	95 95       	asr	r25
 210:	87 95       	ror	r24
 212:	20 95       	com	r18
 214:	20 7e       	andi	r18, 0xE0	; 224
 216:	28 2b       	or	r18, r24
{
	uint8_t     JoyStatus_LCL = Joystick_GetStatus();
	char*       ReportString  = NULL;
	static bool ActionSent = false;

	if (JoyStatus_LCL & JOY_UP)
 218:	27 fd       	sbrc	r18, 7
 21a:	17 c0       	rjmp	.+46     	; 0x24a <CheckJoystickMovement+0x48>
	  ReportString = "Joystick Up\r\n";
	else if (JoyStatus_LCL & JOY_DOWN)
 21c:	24 ff       	sbrs	r18, 4
 21e:	03 c0       	rjmp	.+6      	; 0x226 <CheckJoystickMovement+0x24>
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	71 e0       	ldi	r23, 0x01	; 1
 224:	14 c0       	rjmp	.+40     	; 0x24e <CheckJoystickMovement+0x4c>
	  ReportString = "Joystick Down\r\n";
	else if (JoyStatus_LCL & JOY_LEFT)
 226:	26 ff       	sbrs	r18, 6
 228:	03 c0       	rjmp	.+6      	; 0x230 <CheckJoystickMovement+0x2e>
 22a:	60 e1       	ldi	r22, 0x10	; 16
 22c:	71 e0       	ldi	r23, 0x01	; 1
 22e:	0f c0       	rjmp	.+30     	; 0x24e <CheckJoystickMovement+0x4c>
	  ReportString = "Joystick Left\r\n";
	else if (JoyStatus_LCL & JOY_RIGHT)
 230:	23 ff       	sbrs	r18, 3
 232:	03 c0       	rjmp	.+6      	; 0x23a <CheckJoystickMovement+0x38>
 234:	60 e2       	ldi	r22, 0x20	; 32
 236:	71 e0       	ldi	r23, 0x01	; 1
 238:	0a c0       	rjmp	.+20     	; 0x24e <CheckJoystickMovement+0x4c>
	  ReportString = "Joystick Right\r\n";
	else if (JoyStatus_LCL & JOY_PRESS)
 23a:	25 ff       	sbrs	r18, 5
 23c:	03 c0       	rjmp	.+6      	; 0x244 <CheckJoystickMovement+0x42>
 23e:	61 e3       	ldi	r22, 0x31	; 49
 240:	71 e0       	ldi	r23, 0x01	; 1
 242:	05 c0       	rjmp	.+10     	; 0x24e <CheckJoystickMovement+0x4c>
	  ReportString = "Joystick Pressed\r\n";
	else
	  ActionSent = false;
 244:	10 92 7e 01 	sts	0x017E, r1
 248:	08 95       	ret
 24a:	64 e4       	ldi	r22, 0x44	; 68
 24c:	71 e0       	ldi	r23, 0x01	; 1

	if ((ReportString != NULL) && (ActionSent == false))
 24e:	80 91 7e 01 	lds	r24, 0x017E
 252:	88 23       	and	r24, r24
 254:	31 f4       	brne	.+12     	; 0x262 <CheckJoystickMovement+0x60>
	{
		ActionSent = true;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	80 93 7e 01 	sts	0x017E, r24

		CDC_Device_SendString(&VirtualSerial1_CDC_Interface, ReportString);
 25c:	82 e5       	ldi	r24, 0x52	; 82
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	9e c5       	rjmp	.+2876   	; 0xd9e <CDC_Device_SendString>
 262:	08 95       	ret

00000264 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 264:	84 b7       	in	r24, 0x34	; 52
 266:	87 7f       	andi	r24, 0xF7	; 247
 268:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 26a:	88 e1       	ldi	r24, 0x18	; 24
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	f8 94       	cli
 270:	80 93 60 00 	sts	0x0060, r24
 274:	10 92 60 00 	sts	0x0060, r1
 278:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	80 e8       	ldi	r24, 0x80	; 128
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	f8 94       	cli
 282:	80 93 61 00 	sts	0x0061, r24
 286:	90 93 61 00 	sts	0x0061, r25
 28a:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
 28c:	84 b1       	in	r24, 0x04	; 4
 28e:	8f 71       	andi	r24, 0x1F	; 31
 290:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
 292:	8d b1       	in	r24, 0x0d	; 13
 294:	8f 7c       	andi	r24, 0xCF	; 207
 296:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
 298:	85 b1       	in	r24, 0x05	; 5
 29a:	80 6e       	ori	r24, 0xE0	; 224
 29c:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
 29e:	8e b1       	in	r24, 0x0e	; 14
 2a0:	80 63       	ori	r24, 0x30	; 48
 2a2:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 2a4:	8a b1       	in	r24, 0x0a	; 10
 2a6:	80 6f       	ori	r24, 0xF0	; 240
 2a8:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 2aa:	8b b1       	in	r24, 0x0b	; 11
 2ac:	8f 70       	andi	r24, 0x0F	; 15
 2ae:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	USB_Init();
}
 2b0:	1b c1       	rjmp	.+566    	; 0x4e8 <USB_Init>

000002b2 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
 2b2:	d8 df       	rcall	.-80     	; 0x264 <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 2b4:	8b b1       	in	r24, 0x0b	; 11
 2b6:	8f 70       	andi	r24, 0x0F	; 15
 2b8:	80 61       	ori	r24, 0x10	; 16
 2ba:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
 2bc:	78 94       	sei

	for (;;)
	{
		CheckJoystickMovement();
 2be:	a1 df       	rcall	.-190    	; 0x202 <CheckJoystickMovement>

		/* Discard all received data on the first CDC interface */
		CDC_Device_ReceiveByte(&VirtualSerial1_CDC_Interface);
 2c0:	82 e5       	ldi	r24, 0x52	; 82
 2c2:	91 e0       	ldi	r25, 0x01	; 1
 2c4:	d7 d4       	rcall	.+2478   	; 0xc74 <CDC_Device_ReceiveByte>

		/* Echo all received data on the second CDC interface */
		int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial2_CDC_Interface);
 2c6:	88 e6       	ldi	r24, 0x68	; 104
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	d4 d4       	rcall	.+2472   	; 0xc74 <CDC_Device_ReceiveByte>
 2cc:	bc 01       	movw	r22, r24
		if (!(ReceivedByte < 0))
 2ce:	97 fd       	sbrc	r25, 7
 2d0:	03 c0       	rjmp	.+6      	; 0x2d8 <main+0x26>
		  CDC_Device_SendByte(&VirtualSerial2_CDC_Interface, (uint8_t)ReceivedByte);
 2d2:	88 e6       	ldi	r24, 0x68	; 104
 2d4:	91 e0       	ldi	r25, 0x01	; 1
 2d6:	3e d5       	rcall	.+2684   	; 0xd54 <CDC_Device_SendByte>

		CDC_Device_USBTask(&VirtualSerial1_CDC_Interface);
 2d8:	82 e5       	ldi	r24, 0x52	; 82
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	2b d5       	rcall	.+2646   	; 0xd34 <CDC_Device_USBTask>
		CDC_Device_USBTask(&VirtualSerial2_CDC_Interface);
 2de:	88 e6       	ldi	r24, 0x68	; 104
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	28 d5       	rcall	.+2640   	; 0xd34 <CDC_Device_USBTask>
		USB_USBTask();
 2e4:	b4 d4       	rcall	.+2408   	; 0xc4e <USB_USBTask>
 2e6:	eb cf       	rjmp	.-42     	; 0x2be <main+0xc>

000002e8 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
 2e8:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 2ea:	92 30       	cpi	r25, 0x02	; 2
 2ec:	49 f0       	breq	.+18     	; 0x300 <CALLBACK_USB_GetDescriptor+0x18>
 2ee:	93 30       	cpi	r25, 0x03	; 3
 2f0:	61 f0       	breq	.+24     	; 0x30a <CALLBACK_USB_GetDescriptor+0x22>
 2f2:	91 30       	cpi	r25, 0x01	; 1
 2f4:	f9 f4       	brne	.+62     	; 0x334 <CALLBACK_USB_GetDescriptor+0x4c>
 2f6:	e8 e9       	ldi	r30, 0x98	; 152
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	22 e1       	ldi	r18, 0x12	; 18
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	1e c0       	rjmp	.+60     	; 0x33c <CALLBACK_USB_GetDescriptor+0x54>
 300:	ea ea       	ldi	r30, 0xAA	; 170
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	23 e8       	ldi	r18, 0x83	; 131
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	19 c0       	rjmp	.+50     	; 0x33c <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 30a:	81 30       	cpi	r24, 0x01	; 1
 30c:	49 f0       	breq	.+18     	; 0x320 <CALLBACK_USB_GetDescriptor+0x38>
 30e:	81 30       	cpi	r24, 0x01	; 1
 310:	18 f0       	brcs	.+6      	; 0x318 <CALLBACK_USB_GetDescriptor+0x30>
 312:	82 30       	cpi	r24, 0x02	; 2
 314:	79 f4       	brne	.+30     	; 0x334 <CALLBACK_USB_GetDescriptor+0x4c>
 316:	08 c0       	rjmp	.+16     	; 0x328 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 318:	ed e2       	ldi	r30, 0x2D	; 45
 31a:	f1 e0       	ldi	r31, 0x01	; 1
 31c:	84 91       	lpm	r24, Z+
 31e:	07 c0       	rjmp	.+14     	; 0x32e <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 320:	e1 e3       	ldi	r30, 0x31	; 49
 322:	f1 e0       	ldi	r31, 0x01	; 1
 324:	84 91       	lpm	r24, Z+
 326:	03 c0       	rjmp	.+6      	; 0x32e <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 328:	eb e4       	ldi	r30, 0x4B	; 75
 32a:	f1 e0       	ldi	r31, 0x01	; 1
 32c:	84 91       	lpm	r24, Z+
 32e:	28 2f       	mov	r18, r24
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	04 c0       	rjmp	.+8      	; 0x33c <CALLBACK_USB_GetDescriptor+0x54>
 334:	e0 e0       	ldi	r30, 0x00	; 0
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	20 e0       	ldi	r18, 0x00	; 0
 33a:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 33c:	ed 93       	st	X+, r30
 33e:	fc 93       	st	X, r31
	return Size;
}
 340:	c9 01       	movw	r24, r18
 342:	08 95       	ret

00000344 <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
 344:	38 2f       	mov	r19, r24
 346:	28 2f       	mov	r18, r24
 348:	2c c0       	rjmp	.+88     	; 0x3a2 <Endpoint_ConfigureEndpoint_Prv+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 34a:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);
		
		if (EPNum == Number)
 34e:	23 17       	cp	r18, r19
 350:	21 f4       	brne	.+8      	; 0x35a <Endpoint_ConfigureEndpoint_Prv+0x16>
 352:	76 2f       	mov	r23, r22
 354:	94 2f       	mov	r25, r20
 356:	50 e0       	ldi	r21, 0x00	; 0
 358:	06 c0       	rjmp	.+12     	; 0x366 <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 35a:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 35e:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
 362:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 366:	91 ff       	sbrs	r25, 1
 368:	1b c0       	rjmp	.+54     	; 0x3a0 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 36a:	80 91 eb 00 	lds	r24, 0x00EB
 36e:	8e 7f       	andi	r24, 0xFE	; 254
 370:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 374:	80 91 ed 00 	lds	r24, 0x00ED
 378:	8d 7f       	andi	r24, 0xFD	; 253
 37a:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 37e:	80 91 eb 00 	lds	r24, 0x00EB
 382:	81 60       	ori	r24, 0x01	; 1
 384:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 388:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 38c:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
 390:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 394:	80 91 ee 00 	lds	r24, 0x00EE
			
		if (!(Endpoint_IsConfigured()))
 398:	87 fd       	sbrc	r24, 7
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <Endpoint_ConfigureEndpoint_Prv+0x5c>
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else	
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 3a0:	2f 5f       	subi	r18, 0xFF	; 255
 3a2:	27 30       	cpi	r18, 0x07	; 7
 3a4:	90 f2       	brcs	.-92     	; 0x34a <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 3a6:	30 93 e9 00 	sts	0x00E9, r19
 3aa:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 3ac:	08 95       	ret

000003ae <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 3ae:	80 91 84 01 	lds	r24, 0x0184
 3b2:	88 23       	and	r24, r24
 3b4:	9c f4       	brge	.+38     	; 0x3dc <Endpoint_ClearStatusStage+0x2e>
 3b6:	04 c0       	rjmp	.+8      	; 0x3c0 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 3b8:	80 91 83 01 	lds	r24, 0x0183
 3bc:	88 23       	and	r24, r24
 3be:	b9 f0       	breq	.+46     	; 0x3ee <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 3c0:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 3c4:	82 ff       	sbrs	r24, 2
 3c6:	f8 cf       	rjmp	.-16     	; 0x3b8 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 3c8:	80 91 e8 00 	lds	r24, 0x00E8
 3cc:	8b 77       	andi	r24, 0x7B	; 123
 3ce:	80 93 e8 00 	sts	0x00E8, r24
 3d2:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 3d4:	80 91 83 01 	lds	r24, 0x0183
 3d8:	88 23       	and	r24, r24
 3da:	49 f0       	breq	.+18     	; 0x3ee <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 3dc:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 3e0:	80 ff       	sbrs	r24, 0
 3e2:	f8 cf       	rjmp	.-16     	; 0x3d4 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 3e4:	80 91 e8 00 	lds	r24, 0x00E8
 3e8:	8e 77       	andi	r24, 0x7E	; 126
 3ea:	80 93 e8 00 	sts	0x00E8, r24
 3ee:	08 95       	ret

000003f0 <Endpoint_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 3f0:	40 91 e4 00 	lds	r20, 0x00E4
 3f4:	50 91 e5 00 	lds	r21, 0x00E5
 3f8:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
 3fa:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 3fe:	80 78       	andi	r24, 0x80	; 128
 400:	80 38       	cpi	r24, 0x80	; 128
 402:	29 f4       	brne	.+10     	; 0x40e <Endpoint_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 404:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
 408:	80 ff       	sbrs	r24, 0
 40a:	05 c0       	rjmp	.+10     	; 0x416 <Endpoint_WaitUntilReady+0x26>
 40c:	22 c0       	rjmp	.+68     	; 0x452 <Endpoint_WaitUntilReady+0x62>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 40e:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 412:	82 fd       	sbrc	r24, 2
 414:	1e c0       	rjmp	.+60     	; 0x452 <Endpoint_WaitUntilReady+0x62>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 416:	80 91 83 01 	lds	r24, 0x0183

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 41a:	88 23       	and	r24, r24
 41c:	11 f4       	brne	.+4      	; 0x422 <Endpoint_WaitUntilReady+0x32>
 41e:	82 e0       	ldi	r24, 0x02	; 2
 420:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 422:	85 30       	cpi	r24, 0x05	; 5
 424:	11 f4       	brne	.+4      	; 0x42a <Endpoint_WaitUntilReady+0x3a>
 426:	83 e0       	ldi	r24, 0x03	; 3
 428:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 42a:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 42e:	85 ff       	sbrs	r24, 5
 430:	02 c0       	rjmp	.+4      	; 0x436 <Endpoint_WaitUntilReady+0x46>
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	08 95       	ret
 436:	80 91 e4 00 	lds	r24, 0x00E4
 43a:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 43e:	84 17       	cp	r24, r20
 440:	95 07       	cpc	r25, r21
 442:	d9 f2       	breq	.-74     	; 0x3fa <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 444:	22 23       	and	r18, r18
 446:	11 f4       	brne	.+4      	; 0x44c <Endpoint_WaitUntilReady+0x5c>
 448:	84 e0       	ldi	r24, 0x04	; 4
 44a:	08 95       	ret
 44c:	21 50       	subi	r18, 0x01	; 1
 44e:	ac 01       	movw	r20, r24
 450:	d4 cf       	rjmp	.-88     	; 0x3fa <Endpoint_WaitUntilReady+0xa>
 452:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 454:	08 95       	ret

00000456 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
 456:	ef 92       	push	r14
 458:	ff 92       	push	r15
 45a:	0f 93       	push	r16
 45c:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 45e:	4d d0       	rcall	.+154    	; 0x4fa <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 460:	54 d0       	rcall	.+168    	; 0x50a <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 462:	08 ed       	ldi	r16, 0xD8	; 216
 464:	10 e0       	ldi	r17, 0x00	; 0
 466:	f8 01       	movw	r30, r16
 468:	80 81       	ld	r24, Z
 46a:	8f 77       	andi	r24, 0x7F	; 127
 46c:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
 46e:	80 81       	ld	r24, Z
 470:	80 68       	ori	r24, 0x80	; 128
 472:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 474:	80 81       	ld	r24, Z
 476:	8f 7d       	andi	r24, 0xDF	; 223
 478:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 47a:	e7 ed       	ldi	r30, 0xD7	; 215
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	80 81       	ld	r24, Z
 480:	80 68       	ori	r24, 0x80	; 128
 482:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 484:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 486:	10 92 83 01 	sts	0x0183, r1
	USB_Device_ConfigurationNumber  = 0;
 48a:	10 92 7f 01 	sts	0x017F, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 48e:	10 92 81 01 	sts	0x0181, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 492:	10 92 80 01 	sts	0x0180, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 496:	80 ee       	ldi	r24, 0xE0	; 224
 498:	e8 2e       	mov	r14, r24
 49a:	f1 2c       	mov	r15, r1
 49c:	f7 01       	movw	r30, r14
 49e:	80 81       	ld	r24, Z
 4a0:	8b 7f       	andi	r24, 0xFB	; 251
 4a2:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 4a4:	f8 01       	movw	r30, r16
 4a6:	80 81       	ld	r24, Z
 4a8:	81 60       	ori	r24, 0x01	; 1
 4aa:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	42 e0       	ldi	r20, 0x02	; 2
 4b2:	48 df       	rcall	.-368    	; 0x344 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 4b4:	e1 ee       	ldi	r30, 0xE1	; 225
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	80 81       	ld	r24, Z
 4ba:	8e 7f       	andi	r24, 0xFE	; 254
 4bc:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 4be:	e2 ee       	ldi	r30, 0xE2	; 226
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	80 81       	ld	r24, Z
 4c4:	81 60       	ori	r24, 0x01	; 1
 4c6:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 4c8:	80 81       	ld	r24, Z
 4ca:	88 60       	ori	r24, 0x08	; 8
 4cc:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 4ce:	f7 01       	movw	r30, r14
 4d0:	80 81       	ld	r24, Z
 4d2:	8e 7f       	andi	r24, 0xFE	; 254
 4d4:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 4d6:	f8 01       	movw	r30, r16
 4d8:	80 81       	ld	r24, Z
 4da:	80 61       	ori	r24, 0x10	; 16
 4dc:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 4de:	1f 91       	pop	r17
 4e0:	0f 91       	pop	r16
 4e2:	ff 90       	pop	r15
 4e4:	ef 90       	pop	r14
 4e6:	08 95       	ret

000004e8 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 4e8:	e7 ed       	ldi	r30, 0xD7	; 215
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	80 81       	ld	r24, Z
 4ee:	81 60       	ori	r24, 0x01	; 1
 4f0:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	80 93 82 01 	sts	0x0182, r24

	USB_ResetInterface();
}
 4f8:	ae cf       	rjmp	.-164    	; 0x456 <USB_ResetInterface>

000004fa <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 4fa:	e8 ed       	ldi	r30, 0xD8	; 216
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	80 81       	ld	r24, Z
 500:	8c 7f       	andi	r24, 0xFC	; 252
 502:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 504:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 508:	08 95       	ret

0000050a <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 50a:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 50e:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 512:	08 95       	ret

00000514 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 514:	1f 92       	push	r1
 516:	0f 92       	push	r0
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	0f 92       	push	r0
 51c:	0b b6       	in	r0, 0x3b	; 59
 51e:	0f 92       	push	r0
 520:	11 24       	eor	r1, r1
 522:	2f 93       	push	r18
 524:	3f 93       	push	r19
 526:	4f 93       	push	r20
 528:	5f 93       	push	r21
 52a:	6f 93       	push	r22
 52c:	7f 93       	push	r23
 52e:	8f 93       	push	r24
 530:	9f 93       	push	r25
 532:	af 93       	push	r26
 534:	bf 93       	push	r27
 536:	ef 93       	push	r30
 538:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 53a:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 53e:	82 ff       	sbrs	r24, 2
 540:	0a c0       	rjmp	.+20     	; 0x556 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 542:	80 91 e2 00 	lds	r24, 0x00E2
 546:	82 ff       	sbrs	r24, 2
 548:	06 c0       	rjmp	.+12     	; 0x556 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 54a:	80 91 e1 00 	lds	r24, 0x00E1
 54e:	8b 7f       	andi	r24, 0xFB	; 251
 550:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 554:	7b d3       	rcall	.+1782   	; 0xc4c <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 556:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 55a:	80 ff       	sbrs	r24, 0
 55c:	1d c0       	rjmp	.+58     	; 0x598 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 55e:	80 91 d8 00 	lds	r24, 0x00D8
 562:	80 ff       	sbrs	r24, 0
 564:	19 c0       	rjmp	.+50     	; 0x598 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 566:	80 91 da 00 	lds	r24, 0x00DA
 56a:	8e 7f       	andi	r24, 0xFE	; 254
 56c:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 570:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 574:	80 ff       	sbrs	r24, 0
 576:	0c c0       	rjmp	.+24     	; 0x590 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 578:	8c e0       	ldi	r24, 0x0C	; 12
 57a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 57c:	8e e0       	ldi	r24, 0x0E	; 14
 57e:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 580:	09 b4       	in	r0, 0x29	; 41
 582:	00 fe       	sbrs	r0, 0
 584:	fd cf       	rjmp	.-6      	; 0x580 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	80 93 83 01 	sts	0x0183, r24
			EVENT_USB_Device_Connect();
 58c:	11 de       	rcall	.-990    	; 0x1b0 <EVENT_USB_Device_Connect>
 58e:	04 c0       	rjmp	.+8      	; 0x598 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 590:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 592:	10 92 83 01 	sts	0x0183, r1
			EVENT_USB_Device_Disconnect();
 596:	11 de       	rcall	.-990    	; 0x1ba <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 598:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 59c:	80 ff       	sbrs	r24, 0
 59e:	18 c0       	rjmp	.+48     	; 0x5d0 <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 5a0:	80 91 e2 00 	lds	r24, 0x00E2
 5a4:	80 ff       	sbrs	r24, 0
 5a6:	14 c0       	rjmp	.+40     	; 0x5d0 <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 5a8:	80 91 e2 00 	lds	r24, 0x00E2
 5ac:	8e 7f       	andi	r24, 0xFE	; 254
 5ae:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 5b2:	80 91 e2 00 	lds	r24, 0x00E2
 5b6:	80 61       	ori	r24, 0x10	; 16
 5b8:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 5bc:	80 91 d8 00 	lds	r24, 0x00D8
 5c0:	80 62       	ori	r24, 0x20	; 32
 5c2:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 5c6:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 5c8:	85 e0       	ldi	r24, 0x05	; 5
 5ca:	80 93 83 01 	sts	0x0183, r24
		EVENT_USB_Device_Suspend();
 5ce:	3e d3       	rcall	.+1660   	; 0xc4c <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 5d0:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 5d4:	84 ff       	sbrs	r24, 4
 5d6:	2d c0       	rjmp	.+90     	; 0x632 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 5d8:	80 91 e2 00 	lds	r24, 0x00E2
 5dc:	84 ff       	sbrs	r24, 4
 5de:	29 c0       	rjmp	.+82     	; 0x632 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 5e0:	8c e0       	ldi	r24, 0x0C	; 12
 5e2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 5e4:	8e e0       	ldi	r24, 0x0E	; 14
 5e6:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 5e8:	09 b4       	in	r0, 0x29	; 41
 5ea:	00 fe       	sbrs	r0, 0
 5ec:	fd cf       	rjmp	.-6      	; 0x5e8 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 5ee:	80 91 d8 00 	lds	r24, 0x00D8
 5f2:	8f 7d       	andi	r24, 0xDF	; 223
 5f4:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 5f8:	80 91 e1 00 	lds	r24, 0x00E1
 5fc:	8f 7e       	andi	r24, 0xEF	; 239
 5fe:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 602:	80 91 e2 00 	lds	r24, 0x00E2
 606:	8f 7e       	andi	r24, 0xEF	; 239
 608:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 60c:	80 91 e2 00 	lds	r24, 0x00E2
 610:	81 60       	ori	r24, 0x01	; 1
 612:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 616:	80 91 7f 01 	lds	r24, 0x017F
 61a:	88 23       	and	r24, r24
 61c:	31 f4       	brne	.+12     	; 0x62a <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 61e:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 622:	87 fd       	sbrc	r24, 7
 624:	02 c0       	rjmp	.+4      	; 0x62a <__vector_10+0x116>
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	01 c0       	rjmp	.+2      	; 0x62c <__vector_10+0x118>
 62a:	84 e0       	ldi	r24, 0x04	; 4
 62c:	80 93 83 01 	sts	0x0183, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 630:	0d d3       	rcall	.+1562   	; 0xc4c <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 632:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 636:	83 ff       	sbrs	r24, 3
 638:	22 c0       	rjmp	.+68     	; 0x67e <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 63a:	80 91 e2 00 	lds	r24, 0x00E2
 63e:	83 ff       	sbrs	r24, 3
 640:	1e c0       	rjmp	.+60     	; 0x67e <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 642:	80 91 e1 00 	lds	r24, 0x00E1
 646:	87 7f       	andi	r24, 0xF7	; 247
 648:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 64c:	82 e0       	ldi	r24, 0x02	; 2
 64e:	80 93 83 01 	sts	0x0183, r24
		USB_Device_ConfigurationNumber = 0;
 652:	10 92 7f 01 	sts	0x017F, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 656:	80 91 e1 00 	lds	r24, 0x00E1
 65a:	8e 7f       	andi	r24, 0xFE	; 254
 65c:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 660:	80 91 e2 00 	lds	r24, 0x00E2
 664:	8e 7f       	andi	r24, 0xFE	; 254
 666:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 66a:	80 91 e2 00 	lds	r24, 0x00E2
 66e:	80 61       	ori	r24, 0x10	; 16
 670:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	60 e0       	ldi	r22, 0x00	; 0
 678:	42 e0       	ldi	r20, 0x02	; 2
 67a:	64 de       	rcall	.-824    	; 0x344 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 67c:	e7 d2       	rcall	.+1486   	; 0xc4c <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 67e:	ff 91       	pop	r31
 680:	ef 91       	pop	r30
 682:	bf 91       	pop	r27
 684:	af 91       	pop	r26
 686:	9f 91       	pop	r25
 688:	8f 91       	pop	r24
 68a:	7f 91       	pop	r23
 68c:	6f 91       	pop	r22
 68e:	5f 91       	pop	r21
 690:	4f 91       	pop	r20
 692:	3f 91       	pop	r19
 694:	2f 91       	pop	r18
 696:	0f 90       	pop	r0
 698:	0b be       	out	0x3b, r0	; 59
 69a:	0f 90       	pop	r0
 69c:	0f be       	out	0x3f, r0	; 63
 69e:	0f 90       	pop	r0
 6a0:	1f 90       	pop	r1
 6a2:	18 95       	reti

000006a4 <Endpoint_Write_Control_Stream_LE>:
 6a4:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 6a6:	40 91 8a 01 	lds	r20, 0x018A
 6aa:	50 91 8b 01 	lds	r21, 0x018B
 6ae:	46 17       	cp	r20, r22
 6b0:	57 07       	cpc	r21, r23
 6b2:	18 f4       	brcc	.+6      	; 0x6ba <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 6b4:	f9 01       	movw	r30, r18
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	3d c0       	rjmp	.+122    	; 0x734 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 6ba:	61 15       	cp	r22, r1
 6bc:	71 05       	cpc	r23, r1
 6be:	11 f0       	breq	.+4      	; 0x6c4 <Endpoint_Write_Control_Stream_LE+0x20>
 6c0:	ab 01       	movw	r20, r22
 6c2:	f8 cf       	rjmp	.-16     	; 0x6b4 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 6c4:	80 91 e8 00 	lds	r24, 0x00E8
 6c8:	8e 77       	andi	r24, 0x7E	; 126
 6ca:	80 93 e8 00 	sts	0x00E8, r24
 6ce:	40 e0       	ldi	r20, 0x00	; 0
 6d0:	50 e0       	ldi	r21, 0x00	; 0
 6d2:	f0 cf       	rjmp	.-32     	; 0x6b4 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 6d4:	80 91 83 01 	lds	r24, 0x0183

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 6d8:	88 23       	and	r24, r24
 6da:	f1 f1       	breq	.+124    	; 0x758 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 6dc:	85 30       	cpi	r24, 0x05	; 5
 6de:	f1 f1       	breq	.+124    	; 0x75c <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 6e0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 6e4:	83 ff       	sbrs	r24, 3
 6e6:	02 c0       	rjmp	.+4      	; 0x6ec <Endpoint_Write_Control_Stream_LE+0x48>
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6ec:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 6f0:	82 fd       	sbrc	r24, 2
 6f2:	2c c0       	rjmp	.+88     	; 0x74c <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 6f4:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 6f8:	80 ff       	sbrs	r24, 0
 6fa:	1c c0       	rjmp	.+56     	; 0x734 <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 6fc:	20 91 f2 00 	lds	r18, 0x00F2
 700:	30 91 f3 00 	lds	r19, 0x00F3
 704:	07 c0       	rjmp	.+14     	; 0x714 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 706:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 708:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 70c:	41 50       	subi	r20, 0x01	; 1
 70e:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 710:	2f 5f       	subi	r18, 0xFF	; 255
 712:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 714:	41 15       	cp	r20, r1
 716:	51 05       	cpc	r21, r1
 718:	19 f0       	breq	.+6      	; 0x720 <Endpoint_Write_Control_Stream_LE+0x7c>
 71a:	28 30       	cpi	r18, 0x08	; 8
 71c:	31 05       	cpc	r19, r1
 71e:	98 f3       	brcs	.-26     	; 0x706 <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	28 30       	cpi	r18, 0x08	; 8
 724:	31 05       	cpc	r19, r1
 726:	09 f4       	brne	.+2      	; 0x72a <Endpoint_Write_Control_Stream_LE+0x86>
 728:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 72a:	80 91 e8 00 	lds	r24, 0x00E8
 72e:	8e 77       	andi	r24, 0x7E	; 126
 730:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 734:	41 15       	cp	r20, r1
 736:	51 05       	cpc	r21, r1
 738:	69 f6       	brne	.-102    	; 0x6d4 <Endpoint_Write_Control_Stream_LE+0x30>
 73a:	99 23       	and	r25, r25
 73c:	59 f6       	brne	.-106    	; 0x6d4 <Endpoint_Write_Control_Stream_LE+0x30>
 73e:	06 c0       	rjmp	.+12     	; 0x74c <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 740:	80 91 83 01 	lds	r24, 0x0183

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 744:	88 23       	and	r24, r24
 746:	41 f0       	breq	.+16     	; 0x758 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 748:	85 30       	cpi	r24, 0x05	; 5
 74a:	41 f0       	breq	.+16     	; 0x75c <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 74c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 750:	82 ff       	sbrs	r24, 2
 752:	f6 cf       	rjmp	.-20     	; 0x740 <Endpoint_Write_Control_Stream_LE+0x9c>
 754:	80 e0       	ldi	r24, 0x00	; 0
 756:	08 95       	ret
 758:	82 e0       	ldi	r24, 0x02	; 2
 75a:	08 95       	ret
 75c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 75e:	08 95       	ret

00000760 <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
 760:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
 762:	61 15       	cp	r22, r1
 764:	71 05       	cpc	r23, r1
 766:	29 f4       	brne	.+10     	; 0x772 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 768:	80 91 e8 00 	lds	r24, 0x00E8
 76c:	8b 77       	andi	r24, 0x7B	; 123
 76e:	80 93 e8 00 	sts	0x00E8, r24
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 772:	f9 01       	movw	r30, r18
 774:	22 c0       	rjmp	.+68     	; 0x7ba <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 776:	80 91 83 01 	lds	r24, 0x0183

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 77a:	88 23       	and	r24, r24
 77c:	71 f1       	breq	.+92     	; 0x7da <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 77e:	85 30       	cpi	r24, 0x05	; 5
 780:	71 f1       	breq	.+92     	; 0x7de <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 782:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 786:	83 ff       	sbrs	r24, 3
 788:	02 c0       	rjmp	.+4      	; 0x78e <Endpoint_Read_Control_Stream_LE+0x2e>
 78a:	81 e0       	ldi	r24, 0x01	; 1
 78c:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 78e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
 792:	82 ff       	sbrs	r24, 2
 794:	f0 cf       	rjmp	.-32     	; 0x776 <Endpoint_Read_Control_Stream_LE+0x16>
 796:	06 c0       	rjmp	.+12     	; 0x7a4 <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 798:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 79c:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 79e:	61 50       	subi	r22, 0x01	; 1
 7a0:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
 7a2:	31 f0       	breq	.+12     	; 0x7b0 <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 7a4:	80 91 f2 00 	lds	r24, 0x00F2
 7a8:	90 91 f3 00 	lds	r25, 0x00F3
 7ac:	89 2b       	or	r24, r25
 7ae:	a1 f7       	brne	.-24     	; 0x798 <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 7b0:	80 91 e8 00 	lds	r24, 0x00E8
 7b4:	8b 77       	andi	r24, 0x7B	; 123
 7b6:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
 7ba:	61 15       	cp	r22, r1
 7bc:	71 05       	cpc	r23, r1
 7be:	d9 f6       	brne	.-74     	; 0x776 <Endpoint_Read_Control_Stream_LE+0x16>
 7c0:	06 c0       	rjmp	.+12     	; 0x7ce <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 7c2:	80 91 83 01 	lds	r24, 0x0183

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 7c6:	88 23       	and	r24, r24
 7c8:	41 f0       	breq	.+16     	; 0x7da <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 7ca:	85 30       	cpi	r24, 0x05	; 5
 7cc:	41 f0       	breq	.+16     	; 0x7de <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 7ce:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
 7d2:	80 ff       	sbrs	r24, 0
 7d4:	f6 cf       	rjmp	.-20     	; 0x7c2 <Endpoint_Read_Control_Stream_LE+0x62>
 7d6:	80 e0       	ldi	r24, 0x00	; 0
 7d8:	08 95       	ret
 7da:	82 e0       	ldi	r24, 0x02	; 2
 7dc:	08 95       	ret
 7de:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 7e0:	08 95       	ret

000007e2 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
 7e2:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 7e4:	40 91 8a 01 	lds	r20, 0x018A
 7e8:	50 91 8b 01 	lds	r21, 0x018B
 7ec:	46 17       	cp	r20, r22
 7ee:	57 07       	cpc	r21, r23
 7f0:	18 f4       	brcc	.+6      	; 0x7f8 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 7f2:	f9 01       	movw	r30, r18
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	40 c0       	rjmp	.+128    	; 0x878 <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 7f8:	61 15       	cp	r22, r1
 7fa:	71 05       	cpc	r23, r1
 7fc:	11 f0       	breq	.+4      	; 0x802 <Endpoint_Write_Control_PStream_LE+0x20>
 7fe:	ab 01       	movw	r20, r22
 800:	f8 cf       	rjmp	.-16     	; 0x7f2 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 802:	80 91 e8 00 	lds	r24, 0x00E8
 806:	8e 77       	andi	r24, 0x7E	; 126
 808:	80 93 e8 00 	sts	0x00E8, r24
 80c:	40 e0       	ldi	r20, 0x00	; 0
 80e:	50 e0       	ldi	r21, 0x00	; 0
 810:	f0 cf       	rjmp	.-32     	; 0x7f2 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 812:	80 91 83 01 	lds	r24, 0x0183

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 816:	88 23       	and	r24, r24
 818:	09 f4       	brne	.+2      	; 0x81c <Endpoint_Write_Control_PStream_LE+0x3a>
 81a:	40 c0       	rjmp	.+128    	; 0x89c <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 81c:	85 30       	cpi	r24, 0x05	; 5
 81e:	09 f4       	brne	.+2      	; 0x822 <Endpoint_Write_Control_PStream_LE+0x40>
 820:	3f c0       	rjmp	.+126    	; 0x8a0 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 822:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 826:	83 ff       	sbrs	r24, 3
 828:	02 c0       	rjmp	.+4      	; 0x82e <Endpoint_Write_Control_PStream_LE+0x4c>
 82a:	81 e0       	ldi	r24, 0x01	; 1
 82c:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 82e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 832:	82 fd       	sbrc	r24, 2
 834:	2d c0       	rjmp	.+90     	; 0x890 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 836:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 83a:	80 ff       	sbrs	r24, 0
 83c:	1d c0       	rjmp	.+58     	; 0x878 <Endpoint_Write_Control_PStream_LE+0x96>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 83e:	20 91 f2 00 	lds	r18, 0x00F2
 842:	30 91 f3 00 	lds	r19, 0x00F3
 846:	08 c0       	rjmp	.+16     	; 0x858 <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 848:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 84a:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 84e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 850:	41 50       	subi	r20, 0x01	; 1
 852:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 854:	2f 5f       	subi	r18, 0xFF	; 255
 856:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 858:	41 15       	cp	r20, r1
 85a:	51 05       	cpc	r21, r1
 85c:	19 f0       	breq	.+6      	; 0x864 <Endpoint_Write_Control_PStream_LE+0x82>
 85e:	28 30       	cpi	r18, 0x08	; 8
 860:	31 05       	cpc	r19, r1
 862:	90 f3       	brcs	.-28     	; 0x848 <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	28 30       	cpi	r18, 0x08	; 8
 868:	31 05       	cpc	r19, r1
 86a:	09 f4       	brne	.+2      	; 0x86e <Endpoint_Write_Control_PStream_LE+0x8c>
 86c:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 86e:	80 91 e8 00 	lds	r24, 0x00E8
 872:	8e 77       	andi	r24, 0x7E	; 126
 874:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 878:	41 15       	cp	r20, r1
 87a:	51 05       	cpc	r21, r1
 87c:	51 f6       	brne	.-108    	; 0x812 <Endpoint_Write_Control_PStream_LE+0x30>
 87e:	99 23       	and	r25, r25
 880:	41 f6       	brne	.-112    	; 0x812 <Endpoint_Write_Control_PStream_LE+0x30>
 882:	06 c0       	rjmp	.+12     	; 0x890 <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 884:	80 91 83 01 	lds	r24, 0x0183

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 888:	88 23       	and	r24, r24
 88a:	41 f0       	breq	.+16     	; 0x89c <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 88c:	85 30       	cpi	r24, 0x05	; 5
 88e:	41 f0       	breq	.+16     	; 0x8a0 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 890:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 894:	82 ff       	sbrs	r24, 2
 896:	f6 cf       	rjmp	.-20     	; 0x884 <Endpoint_Write_Control_PStream_LE+0xa2>
 898:	80 e0       	ldi	r24, 0x00	; 0
 89a:	08 95       	ret
 89c:	82 e0       	ldi	r24, 0x02	; 2
 89e:	08 95       	ret
 8a0:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 8a2:	08 95       	ret

000008a4 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 8a4:	bf 92       	push	r11
 8a6:	cf 92       	push	r12
 8a8:	df 92       	push	r13
 8aa:	ef 92       	push	r14
 8ac:	ff 92       	push	r15
 8ae:	0f 93       	push	r16
 8b0:	1f 93       	push	r17
 8b2:	cf 93       	push	r28
 8b4:	df 93       	push	r29
 8b6:	18 2f       	mov	r17, r24
 8b8:	09 2f       	mov	r16, r25
 8ba:	7b 01       	movw	r14, r22
 8bc:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 8be:	98 dd       	rcall	.-1232   	; 0x3f0 <Endpoint_WaitUntilReady>
 8c0:	b8 2e       	mov	r11, r24
 8c2:	88 23       	and	r24, r24
 8c4:	b1 f5       	brne	.+108    	; 0x932 <Endpoint_Write_Stream_LE+0x8e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 8c6:	81 2f       	mov	r24, r17
 8c8:	90 2f       	mov	r25, r16
 8ca:	9c 01       	movw	r18, r24
 8cc:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
 8ce:	c1 14       	cp	r12, r1
 8d0:	d1 04       	cpc	r13, r1
 8d2:	39 f0       	breq	.+14     	; 0x8e2 <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
 8d4:	f6 01       	movw	r30, r12
 8d6:	80 81       	ld	r24, Z
 8d8:	91 81       	ldd	r25, Z+1	; 0x01
 8da:	e8 1a       	sub	r14, r24
 8dc:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 8de:	c8 0f       	add	r28, r24
 8e0:	d9 1f       	adc	r29, r25
 8e2:	00 e0       	ldi	r16, 0x00	; 0
 8e4:	10 e0       	ldi	r17, 0x00	; 0
 8e6:	22 c0       	rjmp	.+68     	; 0x92c <Endpoint_Write_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 8e8:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 8ec:	85 fd       	sbrc	r24, 5
 8ee:	16 c0       	rjmp	.+44     	; 0x91c <Endpoint_Write_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 8f0:	80 91 e8 00 	lds	r24, 0x00E8
 8f4:	8e 77       	andi	r24, 0x7E	; 126
 8f6:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
 8fa:	c1 14       	cp	r12, r1
 8fc:	d1 04       	cpc	r13, r1
 8fe:	49 f0       	breq	.+18     	; 0x912 <Endpoint_Write_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
 900:	f6 01       	movw	r30, r12
 902:	80 81       	ld	r24, Z
 904:	91 81       	ldd	r25, Z+1	; 0x01
 906:	80 0f       	add	r24, r16
 908:	91 1f       	adc	r25, r17
 90a:	91 83       	std	Z+1, r25	; 0x01
 90c:	80 83       	st	Z, r24
 90e:	85 e0       	ldi	r24, 0x05	; 5
 910:	11 c0       	rjmp	.+34     	; 0x934 <Endpoint_Write_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 912:	9d d1       	rcall	.+826    	; 0xc4e <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 914:	6d dd       	rcall	.-1318   	; 0x3f0 <Endpoint_WaitUntilReady>
 916:	88 23       	and	r24, r24
 918:	49 f0       	breq	.+18     	; 0x92c <Endpoint_Write_Stream_LE+0x88>
 91a:	0c c0       	rjmp	.+24     	; 0x934 <Endpoint_Write_Stream_LE+0x90>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 91c:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 91e:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 922:	08 94       	sec
 924:	e1 08       	sbc	r14, r1
 926:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
 928:	0f 5f       	subi	r16, 0xFF	; 255
 92a:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 92c:	e1 14       	cp	r14, r1
 92e:	f1 04       	cpc	r15, r1
 930:	d9 f6       	brne	.-74     	; 0x8e8 <Endpoint_Write_Stream_LE+0x44>
 932:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 934:	df 91       	pop	r29
 936:	cf 91       	pop	r28
 938:	1f 91       	pop	r17
 93a:	0f 91       	pop	r16
 93c:	ff 90       	pop	r15
 93e:	ef 90       	pop	r14
 940:	df 90       	pop	r13
 942:	cf 90       	pop	r12
 944:	bf 90       	pop	r11
 946:	08 95       	ret

00000948 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 948:	0f 93       	push	r16
 94a:	1f 93       	push	r17
 94c:	df 93       	push	r29
 94e:	cf 93       	push	r28
 950:	cd b7       	in	r28, 0x3d	; 61
 952:	de b7       	in	r29, 0x3e	; 62
 954:	ac 97       	sbiw	r28, 0x2c	; 44
 956:	0f b6       	in	r0, 0x3f	; 63
 958:	f8 94       	cli
 95a:	de bf       	out	0x3e, r29	; 62
 95c:	0f be       	out	0x3f, r0	; 63
 95e:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 960:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
 964:	80 93 84 01 	sts	0x0184, r24
 968:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
 96c:	80 93 85 01 	sts	0x0185, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 970:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 974:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
 978:	e6 e8       	ldi	r30, 0x86	; 134
 97a:	f1 e0       	ldi	r31, 0x01	; 1
 97c:	80 93 86 01 	sts	0x0186, r24
 980:	90 93 87 01 	sts	0x0187, r25
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 984:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 988:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
 98c:	80 93 88 01 	sts	0x0188, r24
 990:	93 83       	std	Z+3, r25	; 0x03
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 992:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 996:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
 99a:	80 93 8a 01 	sts	0x018A, r24
 99e:	95 83       	std	Z+5, r25	; 0x05

	EVENT_USB_Device_ControlRequest();
 9a0:	11 dc       	rcall	.-2014   	; 0x1c4 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9a2:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 9a6:	83 ff       	sbrs	r24, 3
 9a8:	38 c1       	rjmp	.+624    	; 0xc1a <USB_Device_ProcessControlRequest+0x2d2>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 9aa:	80 91 84 01 	lds	r24, 0x0184

		switch (USB_ControlRequest.bRequest)
 9ae:	30 91 85 01 	lds	r19, 0x0185
 9b2:	35 30       	cpi	r19, 0x05	; 5
 9b4:	09 f4       	brne	.+2      	; 0x9b8 <USB_Device_ProcessControlRequest+0x70>
 9b6:	87 c0       	rjmp	.+270    	; 0xac6 <USB_Device_ProcessControlRequest+0x17e>
 9b8:	36 30       	cpi	r19, 0x06	; 6
 9ba:	40 f4       	brcc	.+16     	; 0x9cc <USB_Device_ProcessControlRequest+0x84>
 9bc:	31 30       	cpi	r19, 0x01	; 1
 9be:	c9 f1       	breq	.+114    	; 0xa32 <USB_Device_ProcessControlRequest+0xea>
 9c0:	31 30       	cpi	r19, 0x01	; 1
 9c2:	70 f0       	brcs	.+28     	; 0x9e0 <USB_Device_ProcessControlRequest+0x98>
 9c4:	33 30       	cpi	r19, 0x03	; 3
 9c6:	09 f0       	breq	.+2      	; 0x9ca <USB_Device_ProcessControlRequest+0x82>
 9c8:	28 c1       	rjmp	.+592    	; 0xc1a <USB_Device_ProcessControlRequest+0x2d2>
 9ca:	33 c0       	rjmp	.+102    	; 0xa32 <USB_Device_ProcessControlRequest+0xea>
 9cc:	38 30       	cpi	r19, 0x08	; 8
 9ce:	09 f4       	brne	.+2      	; 0x9d2 <USB_Device_ProcessControlRequest+0x8a>
 9d0:	f6 c0       	rjmp	.+492    	; 0xbbe <USB_Device_ProcessControlRequest+0x276>
 9d2:	39 30       	cpi	r19, 0x09	; 9
 9d4:	09 f4       	brne	.+2      	; 0x9d8 <USB_Device_ProcessControlRequest+0x90>
 9d6:	05 c1       	rjmp	.+522    	; 0xbe2 <USB_Device_ProcessControlRequest+0x29a>
 9d8:	36 30       	cpi	r19, 0x06	; 6
 9da:	09 f0       	breq	.+2      	; 0x9de <USB_Device_ProcessControlRequest+0x96>
 9dc:	1e c1       	rjmp	.+572    	; 0xc1a <USB_Device_ProcessControlRequest+0x2d2>
 9de:	97 c0       	rjmp	.+302    	; 0xb0e <USB_Device_ProcessControlRequest+0x1c6>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 9e0:	80 38       	cpi	r24, 0x80	; 128
 9e2:	21 f0       	breq	.+8      	; 0x9ec <USB_Device_ProcessControlRequest+0xa4>
 9e4:	82 38       	cpi	r24, 0x82	; 130
 9e6:	09 f0       	breq	.+2      	; 0x9ea <USB_Device_ProcessControlRequest+0xa2>
 9e8:	18 c1       	rjmp	.+560    	; 0xc1a <USB_Device_ProcessControlRequest+0x2d2>
 9ea:	08 c0       	rjmp	.+16     	; 0x9fc <USB_Device_ProcessControlRequest+0xb4>
 9ec:	90 91 80 01 	lds	r25, 0x0180
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 9f0:	80 91 81 01 	lds	r24, 0x0181
 9f4:	88 23       	and	r24, r24
 9f6:	99 f0       	breq	.+38     	; 0xa1e <USB_Device_ProcessControlRequest+0xd6>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 9f8:	92 60       	ori	r25, 0x02	; 2
 9fa:	11 c0       	rjmp	.+34     	; 0xa1e <USB_Device_ProcessControlRequest+0xd6>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 9fc:	80 91 88 01 	lds	r24, 0x0188
 a00:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a02:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 a06:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
 a0a:	90 e0       	ldi	r25, 0x00	; 0
 a0c:	25 e0       	ldi	r18, 0x05	; 5
 a0e:	96 95       	lsr	r25
 a10:	87 95       	ror	r24
 a12:	2a 95       	dec	r18
 a14:	e1 f7       	brne	.-8      	; 0xa0e <USB_Device_ProcessControlRequest+0xc6>
 a16:	98 2f       	mov	r25, r24
 a18:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a1a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a1e:	80 91 e8 00 	lds	r24, 0x00E8
 a22:	87 7f       	andi	r24, 0xF7	; 247
 a24:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 a28:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
 a2c:	10 92 f1 00 	sts	0x00F1, r1
 a30:	d1 c0       	rjmp	.+418    	; 0xbd4 <USB_Device_ProcessControlRequest+0x28c>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a32:	88 23       	and	r24, r24
 a34:	19 f0       	breq	.+6      	; 0xa3c <USB_Device_ProcessControlRequest+0xf4>
 a36:	82 30       	cpi	r24, 0x02	; 2
 a38:	09 f0       	breq	.+2      	; 0xa3c <USB_Device_ProcessControlRequest+0xf4>
 a3a:	ef c0       	rjmp	.+478    	; 0xc1a <USB_Device_ProcessControlRequest+0x2d2>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	8f 71       	andi	r24, 0x1F	; 31
 a40:	90 70       	andi	r25, 0x00	; 0
 a42:	00 97       	sbiw	r24, 0x00	; 0
 a44:	21 f0       	breq	.+8      	; 0xa4e <USB_Device_ProcessControlRequest+0x106>
 a46:	02 97       	sbiw	r24, 0x02	; 2
 a48:	09 f0       	breq	.+2      	; 0xa4c <USB_Device_ProcessControlRequest+0x104>
 a4a:	e7 c0       	rjmp	.+462    	; 0xc1a <USB_Device_ProcessControlRequest+0x2d2>
 a4c:	0c c0       	rjmp	.+24     	; 0xa66 <USB_Device_ProcessControlRequest+0x11e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 a4e:	80 91 86 01 	lds	r24, 0x0186
 a52:	81 30       	cpi	r24, 0x01	; 1
 a54:	09 f0       	breq	.+2      	; 0xa58 <USB_Device_ProcessControlRequest+0x110>
 a56:	e1 c0       	rjmp	.+450    	; 0xc1a <USB_Device_ProcessControlRequest+0x2d2>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 a58:	10 92 81 01 	sts	0x0181, r1
 a5c:	33 30       	cpi	r19, 0x03	; 3
 a5e:	69 f5       	brne	.+90     	; 0xaba <USB_Device_ProcessControlRequest+0x172>
 a60:	80 93 81 01 	sts	0x0181, r24
 a64:	2a c0       	rjmp	.+84     	; 0xaba <USB_Device_ProcessControlRequest+0x172>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 a66:	80 91 86 01 	lds	r24, 0x0186
 a6a:	88 23       	and	r24, r24
 a6c:	31 f5       	brne	.+76     	; 0xaba <USB_Device_ProcessControlRequest+0x172>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a6e:	20 91 88 01 	lds	r18, 0x0188
 a72:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 a74:	09 f4       	brne	.+2      	; 0xa78 <USB_Device_ProcessControlRequest+0x130>
 a76:	d1 c0       	rjmp	.+418    	; 0xc1a <USB_Device_ProcessControlRequest+0x2d2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a78:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 a7c:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 a80:	80 ff       	sbrs	r24, 0
 a82:	1b c0       	rjmp	.+54     	; 0xaba <USB_Device_ProcessControlRequest+0x172>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 a84:	33 30       	cpi	r19, 0x03	; 3
 a86:	21 f4       	brne	.+8      	; 0xa90 <USB_Device_ProcessControlRequest+0x148>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 a88:	80 91 eb 00 	lds	r24, 0x00EB
 a8c:	80 62       	ori	r24, 0x20	; 32
 a8e:	13 c0       	rjmp	.+38     	; 0xab6 <USB_Device_ProcessControlRequest+0x16e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 a90:	80 91 eb 00 	lds	r24, 0x00EB
 a94:	80 61       	ori	r24, 0x10	; 16
 a96:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 a9a:	81 e0       	ldi	r24, 0x01	; 1
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <USB_Device_ProcessControlRequest+0x15c>
 aa0:	88 0f       	add	r24, r24
 aa2:	99 1f       	adc	r25, r25
 aa4:	2a 95       	dec	r18
 aa6:	e2 f7       	brpl	.-8      	; 0xaa0 <USB_Device_ProcessControlRequest+0x158>
 aa8:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 aac:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 ab0:	80 91 eb 00 	lds	r24, 0x00EB
 ab4:	88 60       	ori	r24, 0x08	; 8
 ab6:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 aba:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 abe:	80 91 e8 00 	lds	r24, 0x00E8
 ac2:	87 7f       	andi	r24, 0xF7	; 247
 ac4:	8a c0       	rjmp	.+276    	; 0xbda <USB_Device_ProcessControlRequest+0x292>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 ac6:	88 23       	and	r24, r24
 ac8:	09 f0       	breq	.+2      	; 0xacc <USB_Device_ProcessControlRequest+0x184>
 aca:	a7 c0       	rjmp	.+334    	; 0xc1a <USB_Device_ProcessControlRequest+0x2d2>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 acc:	10 91 86 01 	lds	r17, 0x0186
 ad0:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 ad2:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 ad4:	f8 94       	cli
 ad6:	80 91 e8 00 	lds	r24, 0x00E8
 ada:	87 7f       	andi	r24, 0xF7	; 247
 adc:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 ae0:	66 dc       	rcall	.-1844   	; 0x3ae <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 ae2:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
 ae6:	80 ff       	sbrs	r24, 0
 ae8:	fc cf       	rjmp	.-8      	; 0xae2 <USB_Device_ProcessControlRequest+0x19a>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 aea:	80 91 e3 00 	lds	r24, 0x00E3
 aee:	80 78       	andi	r24, 0x80	; 128
 af0:	81 2b       	or	r24, r17

				UDADDR = Temp;
 af2:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
 af6:	80 68       	ori	r24, 0x80	; 128
 af8:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 afc:	11 23       	and	r17, r17
 afe:	11 f4       	brne	.+4      	; 0xb04 <USB_Device_ProcessControlRequest+0x1bc>
 b00:	82 e0       	ldi	r24, 0x02	; 2
 b02:	01 c0       	rjmp	.+2      	; 0xb06 <USB_Device_ProcessControlRequest+0x1be>
 b04:	83 e0       	ldi	r24, 0x03	; 3
 b06:	80 93 83 01 	sts	0x0183, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 b0a:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
 b0c:	86 c0       	rjmp	.+268    	; 0xc1a <USB_Device_ProcessControlRequest+0x2d2>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b0e:	80 58       	subi	r24, 0x80	; 128
 b10:	82 30       	cpi	r24, 0x02	; 2
 b12:	08 f0       	brcs	.+2      	; 0xb16 <USB_Device_ProcessControlRequest+0x1ce>
 b14:	82 c0       	rjmp	.+260    	; 0xc1a <USB_Device_ProcessControlRequest+0x2d2>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 b16:	80 91 86 01 	lds	r24, 0x0186
 b1a:	90 91 87 01 	lds	r25, 0x0187
 b1e:	23 e0       	ldi	r18, 0x03	; 3
 b20:	8c 3d       	cpi	r24, 0xDC	; 220
 b22:	92 07       	cpc	r25, r18
 b24:	09 f0       	breq	.+2      	; 0xb28 <USB_Device_ProcessControlRequest+0x1e0>
 b26:	33 c0       	rjmp	.+102    	; 0xb8e <USB_Device_ProcessControlRequest+0x246>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 b28:	83 e0       	ldi	r24, 0x03	; 3
 b2a:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 b2c:	8a e2       	ldi	r24, 0x2A	; 42
 b2e:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 b30:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 b32:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 b34:	de 01       	movw	r26, r28
 b36:	15 96       	adiw	r26, 0x05	; 5
 b38:	6e e0       	ldi	r22, 0x0E	; 14
 b3a:	40 e0       	ldi	r20, 0x00	; 0
 b3c:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 b3e:	11 e2       	ldi	r17, 0x21	; 33
 b40:	e6 2f       	mov	r30, r22
 b42:	f0 e0       	ldi	r31, 0x00	; 0
 b44:	10 93 57 00 	sts	0x0057, r17
 b48:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
 b4a:	40 ff       	sbrs	r20, 0
 b4c:	03 c0       	rjmp	.+6      	; 0xb54 <USB_Device_ProcessControlRequest+0x20c>
					{
						SerialByte >>= 4;
 b4e:	82 95       	swap	r24
 b50:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
 b52:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 b54:	8f 70       	andi	r24, 0x0F	; 15
 b56:	28 2f       	mov	r18, r24
 b58:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 b5a:	8a 30       	cpi	r24, 0x0A	; 10
 b5c:	18 f0       	brcs	.+6      	; 0xb64 <USB_Device_ProcessControlRequest+0x21c>
 b5e:	c9 01       	movw	r24, r18
 b60:	c7 96       	adiw	r24, 0x37	; 55
 b62:	02 c0       	rjmp	.+4      	; 0xb68 <USB_Device_ProcessControlRequest+0x220>
 b64:	c9 01       	movw	r24, r18
 b66:	c0 96       	adiw	r24, 0x30	; 48
 b68:	8d 93       	st	X+, r24
 b6a:	9d 93       	st	X+, r25
 b6c:	4f 5f       	subi	r20, 0xFF	; 255
 b6e:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 b70:	44 31       	cpi	r20, 0x14	; 20
 b72:	51 05       	cpc	r21, r1
 b74:	29 f7       	brne	.-54     	; 0xb40 <USB_Device_ProcessControlRequest+0x1f8>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 b76:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b78:	80 91 e8 00 	lds	r24, 0x00E8
 b7c:	87 7f       	andi	r24, 0xF7	; 247
 b7e:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 b82:	ce 01       	movw	r24, r28
 b84:	03 96       	adiw	r24, 0x03	; 3
 b86:	6a e2       	ldi	r22, 0x2A	; 42
 b88:	70 e0       	ldi	r23, 0x00	; 0
 b8a:	8c dd       	rcall	.-1256   	; 0x6a4 <Endpoint_Write_Control_Stream_LE>
 b8c:	12 c0       	rjmp	.+36     	; 0xbb2 <USB_Device_ProcessControlRequest+0x26a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 b8e:	60 91 88 01 	lds	r22, 0x0188
 b92:	ae 01       	movw	r20, r28
 b94:	4f 5f       	subi	r20, 0xFF	; 255
 b96:	5f 4f       	sbci	r21, 0xFF	; 255
 b98:	a7 db       	rcall	.-2226   	; 0x2e8 <CALLBACK_USB_GetDescriptor>
 b9a:	bc 01       	movw	r22, r24
 b9c:	00 97       	sbiw	r24, 0x00	; 0
 b9e:	09 f4       	brne	.+2      	; 0xba2 <USB_Device_ProcessControlRequest+0x25a>
 ba0:	3c c0       	rjmp	.+120    	; 0xc1a <USB_Device_ProcessControlRequest+0x2d2>
 ba2:	80 91 e8 00 	lds	r24, 0x00E8
 ba6:	87 7f       	andi	r24, 0xF7	; 247
 ba8:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 bac:	89 81       	ldd	r24, Y+1	; 0x01
 bae:	9a 81       	ldd	r25, Y+2	; 0x02
 bb0:	18 de       	rcall	.-976    	; 0x7e2 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 bb2:	80 91 e8 00 	lds	r24, 0x00E8
 bb6:	8b 77       	andi	r24, 0x7B	; 123
 bb8:	80 93 e8 00 	sts	0x00E8, r24
 bbc:	2e c0       	rjmp	.+92     	; 0xc1a <USB_Device_ProcessControlRequest+0x2d2>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 bbe:	80 38       	cpi	r24, 0x80	; 128
 bc0:	61 f5       	brne	.+88     	; 0xc1a <USB_Device_ProcessControlRequest+0x2d2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bc2:	80 91 e8 00 	lds	r24, 0x00E8
 bc6:	87 7f       	andi	r24, 0xF7	; 247
 bc8:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 bcc:	80 91 7f 01 	lds	r24, 0x017F
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 bd0:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 bd4:	80 91 e8 00 	lds	r24, 0x00E8
 bd8:	8e 77       	andi	r24, 0x7E	; 126
 bda:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 bde:	e7 db       	rcall	.-2098   	; 0x3ae <Endpoint_ClearStatusStage>
 be0:	1c c0       	rjmp	.+56     	; 0xc1a <USB_Device_ProcessControlRequest+0x2d2>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 be2:	88 23       	and	r24, r24
 be4:	d1 f4       	brne	.+52     	; 0xc1a <USB_Device_ProcessControlRequest+0x2d2>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 be6:	90 91 86 01 	lds	r25, 0x0186
 bea:	92 30       	cpi	r25, 0x02	; 2
 bec:	b0 f4       	brcc	.+44     	; 0xc1a <USB_Device_ProcessControlRequest+0x2d2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bee:	80 91 e8 00 	lds	r24, 0x00E8
 bf2:	87 7f       	andi	r24, 0xF7	; 247
 bf4:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 bf8:	90 93 7f 01 	sts	0x017F, r25

	Endpoint_ClearStatusStage();
 bfc:	d8 db       	rcall	.-2128   	; 0x3ae <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 bfe:	80 91 7f 01 	lds	r24, 0x017F
 c02:	88 23       	and	r24, r24
 c04:	31 f4       	brne	.+12     	; 0xc12 <USB_Device_ProcessControlRequest+0x2ca>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 c06:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 c0a:	87 fd       	sbrc	r24, 7
 c0c:	02 c0       	rjmp	.+4      	; 0xc12 <USB_Device_ProcessControlRequest+0x2ca>
 c0e:	81 e0       	ldi	r24, 0x01	; 1
 c10:	01 c0       	rjmp	.+2      	; 0xc14 <USB_Device_ProcessControlRequest+0x2cc>
 c12:	84 e0       	ldi	r24, 0x04	; 4
 c14:	80 93 83 01 	sts	0x0183, r24

	EVENT_USB_Device_ConfigurationChanged();
 c18:	db da       	rcall	.-2634   	; 0x1d0 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c1a:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 c1e:	83 ff       	sbrs	r24, 3
 c20:	0a c0       	rjmp	.+20     	; 0xc36 <USB_Device_ProcessControlRequest+0x2ee>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 c22:	80 91 eb 00 	lds	r24, 0x00EB
 c26:	80 62       	ori	r24, 0x20	; 32
 c28:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c2c:	80 91 e8 00 	lds	r24, 0x00E8
 c30:	87 7f       	andi	r24, 0xF7	; 247
 c32:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 c36:	ac 96       	adiw	r28, 0x2c	; 44
 c38:	0f b6       	in	r0, 0x3f	; 63
 c3a:	f8 94       	cli
 c3c:	de bf       	out	0x3e, r29	; 62
 c3e:	0f be       	out	0x3f, r0	; 63
 c40:	cd bf       	out	0x3d, r28	; 61
 c42:	cf 91       	pop	r28
 c44:	df 91       	pop	r29
 c46:	1f 91       	pop	r17
 c48:	0f 91       	pop	r16
 c4a:	08 95       	ret

00000c4c <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 c4c:	08 95       	ret

00000c4e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 c4e:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 c50:	80 91 83 01 	lds	r24, 0x0183
 c54:	88 23       	and	r24, r24
 c56:	61 f0       	breq	.+24     	; 0xc70 <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 c58:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c5c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c60:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 c64:	83 ff       	sbrs	r24, 3
 c66:	01 c0       	rjmp	.+2      	; 0xc6a <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
 c68:	6f de       	rcall	.-802    	; 0x948 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 c6a:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c6c:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 c70:	1f 91       	pop	r17
 c72:	08 95       	ret

00000c74 <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 c74:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 c76:	80 91 83 01 	lds	r24, 0x0183
 c7a:	84 30       	cpi	r24, 0x04	; 4
 c7c:	41 f5       	brne	.+80     	; 0xcce <CDC_Device_ReceiveByte+0x5a>
 c7e:	87 85       	ldd	r24, Z+15	; 0x0f
 c80:	90 89       	ldd	r25, Z+16	; 0x10
 c82:	a1 89       	ldd	r26, Z+17	; 0x11
 c84:	b2 89       	ldd	r27, Z+18	; 0x12
 c86:	00 97       	sbiw	r24, 0x00	; 0
 c88:	a1 05       	cpc	r26, r1
 c8a:	b1 05       	cpc	r27, r1
 c8c:	01 f1       	breq	.+64     	; 0xcce <CDC_Device_ReceiveByte+0x5a>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
 c8e:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c90:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 c94:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsOUTReceived())
 c98:	82 ff       	sbrs	r24, 2
 c9a:	19 c0       	rjmp	.+50     	; 0xcce <CDC_Device_ReceiveByte+0x5a>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 c9c:	80 91 f2 00 	lds	r24, 0x00F2
 ca0:	90 91 f3 00 	lds	r25, 0x00F3
	{
		if (Endpoint_BytesInEndpoint())
 ca4:	89 2b       	or	r24, r25
 ca6:	19 f4       	brne	.+6      	; 0xcae <CDC_Device_ReceiveByte+0x3a>
 ca8:	2f ef       	ldi	r18, 0xFF	; 255
 caa:	3f ef       	ldi	r19, 0xFF	; 255
 cac:	04 c0       	rjmp	.+8      	; 0xcb6 <CDC_Device_ReceiveByte+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 cae:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
 cb2:	28 2f       	mov	r18, r24
 cb4:	30 e0       	ldi	r19, 0x00	; 0
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 cb6:	80 91 f2 00 	lds	r24, 0x00F2
 cba:	90 91 f3 00 	lds	r25, 0x00F3

		if (!(Endpoint_BytesInEndpoint()))
 cbe:	89 2b       	or	r24, r25
 cc0:	41 f4       	brne	.+16     	; 0xcd2 <CDC_Device_ReceiveByte+0x5e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 cc2:	80 91 e8 00 	lds	r24, 0x00E8
 cc6:	8b 77       	andi	r24, 0x7B	; 123
 cc8:	80 93 e8 00 	sts	0x00E8, r24
 ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <CDC_Device_ReceiveByte+0x5e>
 cce:	2f ef       	ldi	r18, 0xFF	; 255
 cd0:	3f ef       	ldi	r19, 0xFF	; 255
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
 cd2:	c9 01       	movw	r24, r18
 cd4:	08 95       	ret

00000cd6 <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
 cd6:	08 95       	ret

00000cd8 <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 cd8:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 cda:	80 91 83 01 	lds	r24, 0x0183
 cde:	84 30       	cpi	r24, 0x04	; 4
 ce0:	21 f5       	brne	.+72     	; 0xd2a <CDC_Device_Flush+0x52>
 ce2:	87 85       	ldd	r24, Z+15	; 0x0f
 ce4:	90 89       	ldd	r25, Z+16	; 0x10
 ce6:	a1 89       	ldd	r26, Z+17	; 0x11
 ce8:	b2 89       	ldd	r27, Z+18	; 0x12
 cea:	00 97       	sbiw	r24, 0x00	; 0
 cec:	a1 05       	cpc	r26, r1
 cee:	b1 05       	cpc	r27, r1
 cf0:	e1 f0       	breq	.+56     	; 0xd2a <CDC_Device_Flush+0x52>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
 cf2:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 cf4:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 cf8:	80 91 f2 00 	lds	r24, 0x00F2
 cfc:	90 91 f3 00 	lds	r25, 0x00F3

	if (!(Endpoint_BytesInEndpoint()))
 d00:	89 2b       	or	r24, r25
 d02:	a9 f0       	breq	.+42     	; 0xd2e <CDC_Device_Flush+0x56>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 d04:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d08:	80 91 e8 00 	lds	r24, 0x00E8
 d0c:	8e 77       	andi	r24, 0x7E	; 126
 d0e:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
 d12:	95 fd       	sbrc	r25, 5
 d14:	0c c0       	rjmp	.+24     	; 0xd2e <CDC_Device_Flush+0x56>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 d16:	6c db       	rcall	.-2344   	; 0x3f0 <Endpoint_WaitUntilReady>
 d18:	98 2f       	mov	r25, r24
 d1a:	88 23       	and	r24, r24
 d1c:	49 f4       	brne	.+18     	; 0xd30 <CDC_Device_Flush+0x58>
 d1e:	80 91 e8 00 	lds	r24, 0x00E8
 d22:	8e 77       	andi	r24, 0x7E	; 126
 d24:	80 93 e8 00 	sts	0x00E8, r24
 d28:	03 c0       	rjmp	.+6      	; 0xd30 <CDC_Device_Flush+0x58>
 d2a:	92 e0       	ldi	r25, 0x02	; 2
 d2c:	01 c0       	rjmp	.+2      	; 0xd30 <CDC_Device_Flush+0x58>
 d2e:	90 e0       	ldi	r25, 0x00	; 0

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
 d30:	89 2f       	mov	r24, r25
 d32:	08 95       	ret

00000d34 <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 d34:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 d36:	80 91 83 01 	lds	r24, 0x0183
 d3a:	84 30       	cpi	r24, 0x04	; 4
 d3c:	51 f4       	brne	.+20     	; 0xd52 <CDC_Device_USBTask+0x1e>
 d3e:	87 85       	ldd	r24, Z+15	; 0x0f
 d40:	90 89       	ldd	r25, Z+16	; 0x10
 d42:	a1 89       	ldd	r26, Z+17	; 0x11
 d44:	b2 89       	ldd	r27, Z+18	; 0x12
 d46:	00 97       	sbiw	r24, 0x00	; 0
 d48:	a1 05       	cpc	r26, r1
 d4a:	b1 05       	cpc	r27, r1
 d4c:	11 f0       	breq	.+4      	; 0xd52 <CDC_Device_USBTask+0x1e>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Device_Flush(CDCInterfaceInfo);
 d4e:	cf 01       	movw	r24, r30
 d50:	c3 cf       	rjmp	.-122    	; 0xcd8 <CDC_Device_Flush>
 d52:	08 95       	ret

00000d54 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
 d54:	1f 93       	push	r17
 d56:	fc 01       	movw	r30, r24
 d58:	16 2f       	mov	r17, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 d5a:	80 91 83 01 	lds	r24, 0x0183
 d5e:	84 30       	cpi	r24, 0x04	; 4
 d60:	d9 f4       	brne	.+54     	; 0xd98 <CDC_Device_SendByte+0x44>
 d62:	87 85       	ldd	r24, Z+15	; 0x0f
 d64:	90 89       	ldd	r25, Z+16	; 0x10
 d66:	a1 89       	ldd	r26, Z+17	; 0x11
 d68:	b2 89       	ldd	r27, Z+18	; 0x12
 d6a:	00 97       	sbiw	r24, 0x00	; 0
 d6c:	a1 05       	cpc	r26, r1
 d6e:	b1 05       	cpc	r27, r1
 d70:	99 f0       	breq	.+38     	; 0xd98 <CDC_Device_SendByte+0x44>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
 d72:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 d74:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 d78:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
 d7c:	85 fd       	sbrc	r24, 5
 d7e:	08 c0       	rjmp	.+16     	; 0xd90 <CDC_Device_SendByte+0x3c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d80:	80 91 e8 00 	lds	r24, 0x00E8
 d84:	8e 77       	andi	r24, 0x7E	; 126
 d86:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 d8a:	32 db       	rcall	.-2460   	; 0x3f0 <Endpoint_WaitUntilReady>
 d8c:	88 23       	and	r24, r24
 d8e:	29 f4       	brne	.+10     	; 0xd9a <CDC_Device_SendByte+0x46>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 d90:	10 93 f1 00 	sts	0x00F1, r17
 d94:	80 e0       	ldi	r24, 0x00	; 0
 d96:	01 c0       	rjmp	.+2      	; 0xd9a <CDC_Device_SendByte+0x46>
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
 d98:	82 e0       	ldi	r24, 0x02	; 2
}
 d9a:	1f 91       	pop	r17
 d9c:	08 95       	ret

00000d9e <CDC_Device_SendString>:
	#endif
}

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                              const char* const String)
{
 d9e:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 da0:	80 91 83 01 	lds	r24, 0x0183
 da4:	84 30       	cpi	r24, 0x04	; 4
 da6:	b9 f4       	brne	.+46     	; 0xdd6 <CDC_Device_SendString+0x38>
 da8:	87 85       	ldd	r24, Z+15	; 0x0f
 daa:	90 89       	ldd	r25, Z+16	; 0x10
 dac:	a1 89       	ldd	r26, Z+17	; 0x11
 dae:	b2 89       	ldd	r27, Z+18	; 0x12
 db0:	00 97       	sbiw	r24, 0x00	; 0
 db2:	a1 05       	cpc	r26, r1
 db4:	b1 05       	cpc	r27, r1
 db6:	79 f0       	breq	.+30     	; 0xdd6 <CDC_Device_SendString+0x38>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
 db8:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 dba:	80 93 e9 00 	sts	0x00E9, r24
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
 dbe:	db 01       	movw	r26, r22
 dc0:	0d 90       	ld	r0, X+
 dc2:	00 20       	and	r0, r0
 dc4:	e9 f7       	brne	.-6      	; 0xdc0 <CDC_Device_SendString+0x22>
 dc6:	11 97       	sbiw	r26, 0x01	; 1
 dc8:	a6 1b       	sub	r26, r22
 dca:	b7 0b       	sbc	r27, r23
 dcc:	cb 01       	movw	r24, r22
 dce:	bd 01       	movw	r22, r26
 dd0:	40 e0       	ldi	r20, 0x00	; 0
 dd2:	50 e0       	ldi	r21, 0x00	; 0
 dd4:	67 cd       	rjmp	.-1330   	; 0x8a4 <Endpoint_Write_Stream_LE>
 dd6:	82 e0       	ldi	r24, 0x02	; 2
}
 dd8:	08 95       	ret

00000dda <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 dda:	1f 93       	push	r17
 ddc:	cf 93       	push	r28
 dde:	df 93       	push	r29
 de0:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 de2:	0d 96       	adiw	r24, 0x0d	; 13
 de4:	fc 01       	movw	r30, r24
 de6:	89 e0       	ldi	r24, 0x09	; 9
 de8:	df 01       	movw	r26, r30
 dea:	1d 92       	st	X+, r1
 dec:	8a 95       	dec	r24
 dee:	e9 f7       	brne	.-6      	; 0xdea <CDC_Device_ConfigureEndpoints+0x10>
 df0:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == CDCInterfaceInfo->Config.DataINEndpointNumber)
 df2:	89 81       	ldd	r24, Y+1	; 0x01
 df4:	18 17       	cp	r17, r24
 df6:	29 f4       	brne	.+10     	; 0xe02 <CDC_Device_ConfigureEndpoints+0x28>
		{
			Size         = CDCInterfaceInfo->Config.DataINEndpointSize;
 df8:	6a 81       	ldd	r22, Y+2	; 0x02
 dfa:	7b 81       	ldd	r23, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataINEndpointDoubleBank;
 dfc:	8c 81       	ldd	r24, Y+4	; 0x04
 dfe:	52 e0       	ldi	r21, 0x02	; 2
 e00:	10 c0       	rjmp	.+32     	; 0xe22 <CDC_Device_ConfigureEndpoints+0x48>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.DataOUTEndpointNumber)
 e02:	8d 81       	ldd	r24, Y+5	; 0x05
 e04:	18 17       	cp	r17, r24
 e06:	31 f4       	brne	.+12     	; 0xe14 <CDC_Device_ConfigureEndpoints+0x3a>
		{
			Size         = CDCInterfaceInfo->Config.DataOUTEndpointSize;
 e08:	6e 81       	ldd	r22, Y+6	; 0x06
 e0a:	7f 81       	ldd	r23, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
 e0c:	88 85       	ldd	r24, Y+8	; 0x08
 e0e:	52 e0       	ldi	r21, 0x02	; 2
 e10:	30 e0       	ldi	r19, 0x00	; 0
 e12:	08 c0       	rjmp	.+16     	; 0xe24 <CDC_Device_ConfigureEndpoints+0x4a>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.NotificationEndpointNumber)
 e14:	89 85       	ldd	r24, Y+9	; 0x09
 e16:	18 17       	cp	r17, r24
 e18:	39 f5       	brne	.+78     	; 0xe68 <CDC_Device_ConfigureEndpoints+0x8e>
		{
			Size         = CDCInterfaceInfo->Config.NotificationEndpointSize;
 e1a:	6a 85       	ldd	r22, Y+10	; 0x0a
 e1c:	7b 85       	ldd	r23, Y+11	; 0x0b
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_INTERRUPT;
			DoubleBanked = CDCInterfaceInfo->Config.NotificationEndpointDoubleBank;
 e1e:	8c 85       	ldd	r24, Y+12	; 0x0c
 e20:	53 e0       	ldi	r21, 0x03	; 3
 e22:	30 e8       	ldi	r19, 0x80	; 128
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
 e24:	88 23       	and	r24, r24
 e26:	11 f4       	brne	.+4      	; 0xe2c <CDC_Device_ConfigureEndpoints+0x52>
 e28:	40 e0       	ldi	r20, 0x00	; 0
 e2a:	01 c0       	rjmp	.+2      	; 0xe2e <CDC_Device_ConfigureEndpoints+0x54>
 e2c:	44 e0       	ldi	r20, 0x04	; 4
 e2e:	20 e0       	ldi	r18, 0x00	; 0
 e30:	88 e0       	ldi	r24, 0x08	; 8
 e32:	90 e0       	ldi	r25, 0x00	; 0
 e34:	03 c0       	rjmp	.+6      	; 0xe3c <CDC_Device_ConfigureEndpoints+0x62>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
 e36:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
 e38:	88 0f       	add	r24, r24
 e3a:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
 e3c:	86 17       	cp	r24, r22
 e3e:	97 07       	cpc	r25, r23
 e40:	d0 f3       	brcs	.-12     	; 0xe36 <CDC_Device_ConfigureEndpoints+0x5c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 e42:	85 2f       	mov	r24, r21
 e44:	90 e0       	ldi	r25, 0x00	; 0
 e46:	56 e0       	ldi	r21, 0x06	; 6
 e48:	88 0f       	add	r24, r24
 e4a:	99 1f       	adc	r25, r25
 e4c:	5a 95       	dec	r21
 e4e:	e1 f7       	brne	.-8      	; 0xe48 <CDC_Device_ConfigureEndpoints+0x6e>
 e50:	60 e0       	ldi	r22, 0x00	; 0
 e52:	31 11       	cpse	r19, r1
 e54:	61 e0       	ldi	r22, 0x01	; 1
 e56:	68 2b       	or	r22, r24
 e58:	42 60       	ori	r20, 0x02	; 2
 e5a:	22 95       	swap	r18
 e5c:	20 7f       	andi	r18, 0xF0	; 240
 e5e:	42 2b       	or	r20, r18
 e60:	81 2f       	mov	r24, r17
 e62:	70 da       	rcall	.-2848   	; 0x344 <Endpoint_ConfigureEndpoint_Prv>
 e64:	88 23       	and	r24, r24
 e66:	29 f0       	breq	.+10     	; 0xe72 <CDC_Device_ConfigureEndpoints+0x98>

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
 e68:	1f 5f       	subi	r17, 0xFF	; 255
 e6a:	17 30       	cpi	r17, 0x07	; 7
 e6c:	09 f0       	breq	.+2      	; 0xe70 <CDC_Device_ConfigureEndpoints+0x96>
 e6e:	c1 cf       	rjmp	.-126    	; 0xdf2 <CDC_Device_ConfigureEndpoints+0x18>
 e70:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
 e72:	df 91       	pop	r29
 e74:	cf 91       	pop	r28
 e76:	1f 91       	pop	r17
 e78:	08 95       	ret

00000e7a <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDC.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 e7a:	cf 93       	push	r28
 e7c:	df 93       	push	r29
 e7e:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 e80:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
 e84:	83 ff       	sbrs	r24, 3
 e86:	63 c0       	rjmp	.+198    	; 0xf4e <CDC_Device_ProcessControlRequest+0xd4>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 e88:	88 81       	ld	r24, Y
 e8a:	90 e0       	ldi	r25, 0x00	; 0
 e8c:	20 91 88 01 	lds	r18, 0x0188
 e90:	30 91 89 01 	lds	r19, 0x0189
 e94:	28 17       	cp	r18, r24
 e96:	39 07       	cpc	r19, r25
 e98:	09 f0       	breq	.+2      	; 0xe9c <CDC_Device_ProcessControlRequest+0x22>
 e9a:	59 c0       	rjmp	.+178    	; 0xf4e <CDC_Device_ProcessControlRequest+0xd4>
	  return;

	switch (USB_ControlRequest.bRequest)
 e9c:	80 91 85 01 	lds	r24, 0x0185
 ea0:	81 32       	cpi	r24, 0x21	; 33
 ea2:	61 f0       	breq	.+24     	; 0xebc <CDC_Device_ProcessControlRequest+0x42>
 ea4:	82 32       	cpi	r24, 0x22	; 34
 ea6:	20 f4       	brcc	.+8      	; 0xeb0 <CDC_Device_ProcessControlRequest+0x36>
 ea8:	80 32       	cpi	r24, 0x20	; 32
 eaa:	09 f0       	breq	.+2      	; 0xeae <CDC_Device_ProcessControlRequest+0x34>
 eac:	50 c0       	rjmp	.+160    	; 0xf4e <CDC_Device_ProcessControlRequest+0xd4>
 eae:	1b c0       	rjmp	.+54     	; 0xee6 <CDC_Device_ProcessControlRequest+0x6c>
 eb0:	82 32       	cpi	r24, 0x22	; 34
 eb2:	79 f1       	breq	.+94     	; 0xf12 <CDC_Device_ProcessControlRequest+0x98>
 eb4:	83 32       	cpi	r24, 0x23	; 35
 eb6:	09 f0       	breq	.+2      	; 0xeba <CDC_Device_ProcessControlRequest+0x40>
 eb8:	4a c0       	rjmp	.+148    	; 0xf4e <CDC_Device_ProcessControlRequest+0xd4>
 eba:	3b c0       	rjmp	.+118    	; 0xf32 <CDC_Device_ProcessControlRequest+0xb8>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 ebc:	80 91 84 01 	lds	r24, 0x0184
 ec0:	81 3a       	cpi	r24, 0xA1	; 161
 ec2:	09 f0       	breq	.+2      	; 0xec6 <CDC_Device_ProcessControlRequest+0x4c>
 ec4:	44 c0       	rjmp	.+136    	; 0xf4e <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ec6:	80 91 e8 00 	lds	r24, 0x00E8
 eca:	87 7f       	andi	r24, 0xF7	; 247
 ecc:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
 ed0:	ce 01       	movw	r24, r28
 ed2:	0f 96       	adiw	r24, 0x0f	; 15
 ed4:	67 e0       	ldi	r22, 0x07	; 7
 ed6:	70 e0       	ldi	r23, 0x00	; 0
 ed8:	e5 db       	rcall	.-2102   	; 0x6a4 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 eda:	80 91 e8 00 	lds	r24, 0x00E8
 ede:	8b 77       	andi	r24, 0x7B	; 123
 ee0:	80 93 e8 00 	sts	0x00E8, r24
 ee4:	34 c0       	rjmp	.+104    	; 0xf4e <CDC_Device_ProcessControlRequest+0xd4>
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 ee6:	80 91 84 01 	lds	r24, 0x0184
 eea:	81 32       	cpi	r24, 0x21	; 33
 eec:	81 f5       	brne	.+96     	; 0xf4e <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 eee:	80 91 e8 00 	lds	r24, 0x00E8
 ef2:	87 7f       	andi	r24, 0xF7	; 247
 ef4:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
 ef8:	ce 01       	movw	r24, r28
 efa:	0f 96       	adiw	r24, 0x0f	; 15
 efc:	67 e0       	ldi	r22, 0x07	; 7
 efe:	70 e0       	ldi	r23, 0x00	; 0
 f00:	2f dc       	rcall	.-1954   	; 0x760 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 f02:	80 91 e8 00 	lds	r24, 0x00E8
 f06:	8e 77       	andi	r24, 0x7E	; 126
 f08:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 f0c:	ce 01       	movw	r24, r28
 f0e:	e3 de       	rcall	.-570    	; 0xcd6 <CDC_Device_Event_Stub>
 f10:	1e c0       	rjmp	.+60     	; 0xf4e <CDC_Device_ProcessControlRequest+0xd4>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 f12:	80 91 84 01 	lds	r24, 0x0184
 f16:	81 32       	cpi	r24, 0x21	; 33
 f18:	d1 f4       	brne	.+52     	; 0xf4e <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 f1a:	80 91 e8 00 	lds	r24, 0x00E8
 f1e:	87 7f       	andi	r24, 0xF7	; 247
 f20:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 f24:	44 da       	rcall	.-2936   	; 0x3ae <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 f26:	80 91 86 01 	lds	r24, 0x0186
 f2a:	8d 87       	std	Y+13, r24	; 0x0d

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 f2c:	ce 01       	movw	r24, r28
 f2e:	d3 de       	rcall	.-602    	; 0xcd6 <CDC_Device_Event_Stub>
 f30:	0e c0       	rjmp	.+28     	; 0xf4e <CDC_Device_ProcessControlRequest+0xd4>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 f32:	80 91 84 01 	lds	r24, 0x0184
 f36:	81 32       	cpi	r24, 0x21	; 33
 f38:	51 f4       	brne	.+20     	; 0xf4e <CDC_Device_ProcessControlRequest+0xd4>
 f3a:	80 91 e8 00 	lds	r24, 0x00E8
 f3e:	87 7f       	andi	r24, 0xF7	; 247
 f40:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 f44:	34 da       	rcall	.-2968   	; 0x3ae <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 f46:	ce 01       	movw	r24, r28
 f48:	60 91 86 01 	lds	r22, 0x0186
 f4c:	c4 de       	rcall	.-632    	; 0xcd6 <CDC_Device_Event_Stub>
			}

			break;
	}
}
 f4e:	df 91       	pop	r29
 f50:	cf 91       	pop	r28
 f52:	08 95       	ret

00000f54 <_exit>:
 f54:	f8 94       	cli

00000f56 <__stop_program>:
 f56:	ff cf       	rjmp	.-2      	; 0xf56 <__stop_program>
