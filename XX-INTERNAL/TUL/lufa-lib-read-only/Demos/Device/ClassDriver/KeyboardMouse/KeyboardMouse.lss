
KeyboardMouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  0000122e  000012c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000122e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  0080011a  0080011a  000012dc  2**0
                  ALLOC
  3 .stab         00000b1c  00000000  00000000  000012dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00001df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000480  00000000  00000000  00001f67  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000cfc  00000000  00000000  000023e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007f9f  00000000  00000000  000030e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001ffd  00000000  00000000  0000b082  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000063a7  00000000  00000000  0000d07f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006c0  00000000  00000000  00013428  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000033e3  00000000  00000000  00013ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000368a  00000000  00000000  00016ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000570  00000000  00000000  0001a555  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       0:	db c0       	rjmp	.+438    	; 0x1b8 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       4:	f7 c0       	rjmp	.+494    	; 0x1f4 <__bad_interrupt>
       6:	00 00       	nop
       8:	f5 c0       	rjmp	.+490    	; 0x1f4 <__bad_interrupt>
       a:	00 00       	nop
       c:	f3 c0       	rjmp	.+486    	; 0x1f4 <__bad_interrupt>
       e:	00 00       	nop
      10:	f1 c0       	rjmp	.+482    	; 0x1f4 <__bad_interrupt>
      12:	00 00       	nop
      14:	ef c0       	rjmp	.+478    	; 0x1f4 <__bad_interrupt>
      16:	00 00       	nop
      18:	ed c0       	rjmp	.+474    	; 0x1f4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	eb c0       	rjmp	.+470    	; 0x1f4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	e9 c0       	rjmp	.+466    	; 0x1f4 <__bad_interrupt>
      22:	00 00       	nop
      24:	e7 c0       	rjmp	.+462    	; 0x1f4 <__bad_interrupt>
      26:	00 00       	nop
      28:	07 c3       	rjmp	.+1550   	; 0x638 <__vector_10>
      2a:	00 00       	nop
      2c:	e3 c0       	rjmp	.+454    	; 0x1f4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	e1 c0       	rjmp	.+450    	; 0x1f4 <__bad_interrupt>
      32:	00 00       	nop
      34:	df c0       	rjmp	.+446    	; 0x1f4 <__bad_interrupt>
      36:	00 00       	nop
      38:	dd c0       	rjmp	.+442    	; 0x1f4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	db c0       	rjmp	.+438    	; 0x1f4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	d9 c0       	rjmp	.+434    	; 0x1f4 <__bad_interrupt>
      42:	00 00       	nop
      44:	d7 c0       	rjmp	.+430    	; 0x1f4 <__bad_interrupt>
      46:	00 00       	nop
      48:	d5 c0       	rjmp	.+426    	; 0x1f4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	d3 c0       	rjmp	.+422    	; 0x1f4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	d1 c0       	rjmp	.+418    	; 0x1f4 <__bad_interrupt>
      52:	00 00       	nop
      54:	cf c0       	rjmp	.+414    	; 0x1f4 <__bad_interrupt>
      56:	00 00       	nop
      58:	cd c0       	rjmp	.+410    	; 0x1f4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	cb c0       	rjmp	.+406    	; 0x1f4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	c9 c0       	rjmp	.+402    	; 0x1f4 <__bad_interrupt>
      62:	00 00       	nop
      64:	c7 c0       	rjmp	.+398    	; 0x1f4 <__bad_interrupt>
      66:	00 00       	nop
      68:	c5 c0       	rjmp	.+394    	; 0x1f4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	c3 c0       	rjmp	.+390    	; 0x1f4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	c1 c0       	rjmp	.+386    	; 0x1f4 <__bad_interrupt>
      72:	00 00       	nop
      74:	bf c0       	rjmp	.+382    	; 0x1f4 <__bad_interrupt>
      76:	00 00       	nop
      78:	bd c0       	rjmp	.+378    	; 0x1f4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	bb c0       	rjmp	.+374    	; 0x1f4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	b9 c0       	rjmp	.+370    	; 0x1f4 <__bad_interrupt>
      82:	00 00       	nop
      84:	b7 c0       	rjmp	.+366    	; 0x1f4 <__bad_interrupt>
      86:	00 00       	nop
      88:	b5 c0       	rjmp	.+362    	; 0x1f4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b3 c0       	rjmp	.+358    	; 0x1f4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	b1 c0       	rjmp	.+354    	; 0x1f4 <__bad_interrupt>
      92:	00 00       	nop
      94:	af c0       	rjmp	.+350    	; 0x1f4 <__bad_interrupt>
      96:	00 00       	nop

00000098 <MouseReport>:
      98:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
      a8:	15 00 25 01 95 03 75 01 81 02 95 01 75 05 81 01     ..%...u.....u...
      b8:	05 01 09 30 09 31 16 ff ff 26 01 00 36 ff ff 46     ...0.1...&..6..F
      c8:	01 00 95 02 75 08 81 06 c0 c0                       ....u.....

000000d2 <KeyboardReport>:
      d2:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
      e2:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
      f2:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
     102:	25 65 05 07 19 00 29 65 95 06 75 08 81 00 c0        %e....)e..u....

00000111 <DeviceDescriptor>:
     111:	12 01 10 01 00 00 00 08 eb 03 4d 20 01 00 01 02     ..........M ....
     121:	00 01                                               ..

00000123 <ConfigurationDescriptor>:
     123:	09 02 3b 00 02 01 00 c0 32 09 04 00 00 01 03 01     ..;.....2.......
     133:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
     143:	00 01 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     153:	01 22 3a 00 07 05 83 03 08 00 01                    .":........

0000015e <LanguageString>:
     15e:	04 03 09 04                                         ....

00000162 <ManufacturerString>:
     162:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     172:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0000017c <ProductString>:
     17c:	3a 03 4c 00 55 00 46 00 41 00 20 00 4d 00 6f 00     :.L.U.F.A. .M.o.
     18c:	75 00 73 00 65 00 20 00 61 00 6e 00 64 00 20 00     u.s.e. .a.n.d. .
     19c:	4b 00 65 00 79 00 62 00 6f 00 61 00 72 00 64 00     K.e.y.b.o.a.r.d.
     1ac:	20 00 44 00 65 00 6d 00 6f 00 00 00                  .D.e.m.o...

000001b8 <__ctors_end>:
     1b8:	11 24       	eor	r1, r1
     1ba:	1f be       	out	0x3f, r1	; 63
     1bc:	cf ef       	ldi	r28, 0xFF	; 255
     1be:	d0 e2       	ldi	r29, 0x20	; 32
     1c0:	de bf       	out	0x3e, r29	; 62
     1c2:	cd bf       	out	0x3d, r28	; 61

000001c4 <__do_copy_data>:
     1c4:	11 e0       	ldi	r17, 0x01	; 1
     1c6:	a0 e0       	ldi	r26, 0x00	; 0
     1c8:	b1 e0       	ldi	r27, 0x01	; 1
     1ca:	ee e2       	ldi	r30, 0x2E	; 46
     1cc:	f2 e1       	ldi	r31, 0x12	; 18
     1ce:	00 e0       	ldi	r16, 0x00	; 0
     1d0:	0b bf       	out	0x3b, r16	; 59
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <__do_copy_data+0x14>
     1d4:	07 90       	elpm	r0, Z+
     1d6:	0d 92       	st	X+, r0
     1d8:	aa 31       	cpi	r26, 0x1A	; 26
     1da:	b1 07       	cpc	r27, r17
     1dc:	d9 f7       	brne	.-10     	; 0x1d4 <__do_copy_data+0x10>

000001de <__do_clear_bss>:
     1de:	11 e0       	ldi	r17, 0x01	; 1
     1e0:	aa e1       	ldi	r26, 0x1A	; 26
     1e2:	b1 e0       	ldi	r27, 0x01	; 1
     1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <.do_clear_bss_start>

000001e6 <.do_clear_bss_loop>:
     1e6:	1d 92       	st	X+, r1

000001e8 <.do_clear_bss_start>:
     1e8:	a2 33       	cpi	r26, 0x32	; 50
     1ea:	b1 07       	cpc	r27, r17
     1ec:	e1 f7       	brne	.-8      	; 0x1e6 <.do_clear_bss_loop>
     1ee:	e0 d0       	rcall	.+448    	; 0x3b0 <main>
     1f0:	0c 94 15 09 	jmp	0x122a	; 0x122a <_exit>

000001f4 <__bad_interrupt>:
     1f4:	05 cf       	rjmp	.-502    	; 0x0 <__vectors>

000001f6 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     1f6:	8b b1       	in	r24, 0x0b	; 11
     1f8:	8f 70       	andi	r24, 0x0F	; 15
     1fa:	80 6a       	ori	r24, 0xA0	; 160
     1fc:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
    LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     1fe:	08 95       	ret

00000200 <EVENT_USB_Device_Disconnect>:
     200:	8b b1       	in	r24, 0x0b	; 11
     202:	8f 70       	andi	r24, 0x0F	; 15
     204:	80 61       	ori	r24, 0x10	; 16
     206:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
    LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     208:	08 95       	ret

0000020a <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     20a:	80 91 0b 01 	lds	r24, 0x010B
     20e:	90 91 0c 01 	lds	r25, 0x010C
     212:	00 97       	sbiw	r24, 0x00	; 0
     214:	29 f0       	breq	.+10     	; 0x220 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     216:	01 97       	sbiw	r24, 0x01	; 1
     218:	90 93 0c 01 	sts	0x010C, r25
     21c:	80 93 0b 01 	sts	0x010B, r24
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     220:	80 91 18 01 	lds	r24, 0x0118
     224:	90 91 19 01 	lds	r25, 0x0119
     228:	00 97       	sbiw	r24, 0x00	; 0
     22a:	29 f0       	breq	.+10     	; 0x236 <EVENT_USB_Device_StartOfFrame+0x2c>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     22c:	01 97       	sbiw	r24, 0x01	; 1
     22e:	90 93 19 01 	sts	0x0119, r25
     232:	80 93 18 01 	sts	0x0118, r24
     236:	08 95       	ret

00000238 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     238:	0f 93       	push	r16
     23a:	1f 93       	push	r17
     23c:	52 2f       	mov	r21, r18
     23e:	63 2f       	mov	r22, r19
     240:	d8 01       	movw	r26, r16
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     242:	43 b1       	in	r20, 0x03	; 3
     244:	2c b1       	in	r18, 0x0c	; 12
     246:	20 95       	com	r18
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	20 73       	andi	r18, 0x30	; 48
     24c:	30 70       	andi	r19, 0x00	; 0
     24e:	35 95       	asr	r19
     250:	27 95       	ror	r18
     252:	40 95       	com	r20
     254:	40 7e       	andi	r20, 0xE0	; 224
     256:	42 2b       	or	r20, r18
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     258:	2c b1       	in	r18, 0x0c	; 12
     25a:	20 95       	com	r18
     25c:	24 70       	andi	r18, 0x04	; 4
     25e:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	/* Determine which interface must have its report generated */
	if (HIDInterfaceInfo == &Keyboard_HID_Interface)
     260:	80 50       	subi	r24, 0x00	; 0
     262:	91 40       	sbci	r25, 0x01	; 1
     264:	19 f5       	brne	.+70     	; 0x2ac <CALLBACK_HID_Device_CreateHIDReport+0x74>
	{
		USB_KeyboardReport_Data_t* KeyboardReport = (USB_KeyboardReport_Data_t*)ReportData;

		/* If first board button not being held down, no keyboard report */
		if (!(ButtonStatus_LCL & BUTTONS_BUTTON1))
     266:	24 70       	andi	r18, 0x04	; 4
     268:	30 70       	andi	r19, 0x00	; 0
     26a:	23 2b       	or	r18, r19
     26c:	09 f4       	brne	.+2      	; 0x270 <CALLBACK_HID_Device_CreateHIDReport+0x38>
     26e:	40 c0       	rjmp	.+128    	; 0x2f0 <CALLBACK_HID_Device_CreateHIDReport+0xb8>
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	/* Determine which interface must have its report generated */
	if (HIDInterfaceInfo == &Keyboard_HID_Interface)
	{
		USB_KeyboardReport_Data_t* KeyboardReport = (USB_KeyboardReport_Data_t*)ReportData;
     270:	e5 2f       	mov	r30, r21
     272:	f6 2f       	mov	r31, r22

		/* If first board button not being held down, no keyboard report */
		if (!(ButtonStatus_LCL & BUTTONS_BUTTON1))
		  return 0;

		KeyboardReport->Modifier = HID_KEYBOARD_MODIFER_LEFTSHIFT;
     274:	82 e0       	ldi	r24, 0x02	; 2
     276:	80 83       	st	Z, r24

		if (JoyStatus_LCL & JOY_UP)
     278:	47 ff       	sbrs	r20, 7
     27a:	02 c0       	rjmp	.+4      	; 0x280 <CALLBACK_HID_Device_CreateHIDReport+0x48>
		  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_A;
     27c:	84 e0       	ldi	r24, 0x04	; 4
     27e:	03 c0       	rjmp	.+6      	; 0x286 <CALLBACK_HID_Device_CreateHIDReport+0x4e>
		else if (JoyStatus_LCL & JOY_DOWN)
     280:	44 ff       	sbrs	r20, 4
     282:	02 c0       	rjmp	.+4      	; 0x288 <CALLBACK_HID_Device_CreateHIDReport+0x50>
		  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_B;
     284:	85 e0       	ldi	r24, 0x05	; 5
     286:	82 83       	std	Z+2, r24	; 0x02

		if (JoyStatus_LCL & JOY_LEFT)
     288:	94 2f       	mov	r25, r20
     28a:	46 ff       	sbrs	r20, 6
     28c:	02 c0       	rjmp	.+4      	; 0x292 <CALLBACK_HID_Device_CreateHIDReport+0x5a>
		  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_C;
     28e:	86 e0       	ldi	r24, 0x06	; 6
     290:	03 c0       	rjmp	.+6      	; 0x298 <CALLBACK_HID_Device_CreateHIDReport+0x60>
		else if (JoyStatus_LCL & JOY_RIGHT)
     292:	43 ff       	sbrs	r20, 3
     294:	02 c0       	rjmp	.+4      	; 0x29a <CALLBACK_HID_Device_CreateHIDReport+0x62>
		  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_D;
     296:	87 e0       	ldi	r24, 0x07	; 7
     298:	82 83       	std	Z+2, r24	; 0x02

		if (JoyStatus_LCL & JOY_PRESS)
     29a:	95 ff       	sbrs	r25, 5
     29c:	02 c0       	rjmp	.+4      	; 0x2a2 <CALLBACK_HID_Device_CreateHIDReport+0x6a>
		  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_E;
     29e:	88 e0       	ldi	r24, 0x08	; 8
     2a0:	82 83       	std	Z+2, r24	; 0x02

		*ReportSize = sizeof(USB_KeyboardReport_Data_t);
     2a2:	88 e0       	ldi	r24, 0x08	; 8
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	8d 93       	st	X+, r24
     2a8:	9c 93       	st	X, r25
     2aa:	22 c0       	rjmp	.+68     	; 0x2f0 <CALLBACK_HID_Device_CreateHIDReport+0xb8>
	else
	{
		USB_MouseReport_Data_t* MouseReport = (USB_MouseReport_Data_t*)ReportData;

		/* If first board button being held down, no mouse report */
		if (ButtonStatus_LCL & BUTTONS_BUTTON1)
     2ac:	24 70       	andi	r18, 0x04	; 4
     2ae:	30 70       	andi	r19, 0x00	; 0
     2b0:	23 2b       	or	r18, r19
     2b2:	f1 f4       	brne	.+60     	; 0x2f0 <CALLBACK_HID_Device_CreateHIDReport+0xb8>
		*ReportSize = sizeof(USB_KeyboardReport_Data_t);
		return false;
	}
	else
	{
		USB_MouseReport_Data_t* MouseReport = (USB_MouseReport_Data_t*)ReportData;
     2b4:	e5 2f       	mov	r30, r21
     2b6:	f6 2f       	mov	r31, r22

		/* If first board button being held down, no mouse report */
		if (ButtonStatus_LCL & BUTTONS_BUTTON1)
		  return 0;

		if (JoyStatus_LCL & JOY_UP)
     2b8:	47 ff       	sbrs	r20, 7
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <CALLBACK_HID_Device_CreateHIDReport+0x88>
		  MouseReport->Y = -1;
     2bc:	8f ef       	ldi	r24, 0xFF	; 255
     2be:	03 c0       	rjmp	.+6      	; 0x2c6 <CALLBACK_HID_Device_CreateHIDReport+0x8e>
		else if (JoyStatus_LCL & JOY_DOWN)
     2c0:	44 ff       	sbrs	r20, 4
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <CALLBACK_HID_Device_CreateHIDReport+0x90>
		  MouseReport->Y =  1;
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	82 83       	std	Z+2, r24	; 0x02

		if (JoyStatus_LCL & JOY_LEFT)
     2c8:	94 2f       	mov	r25, r20
     2ca:	46 ff       	sbrs	r20, 6
     2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <CALLBACK_HID_Device_CreateHIDReport+0x9a>
		  MouseReport->X = -1;
     2ce:	8f ef       	ldi	r24, 0xFF	; 255
     2d0:	03 c0       	rjmp	.+6      	; 0x2d8 <CALLBACK_HID_Device_CreateHIDReport+0xa0>
		else if (JoyStatus_LCL & JOY_RIGHT)
     2d2:	43 ff       	sbrs	r20, 3
     2d4:	02 c0       	rjmp	.+4      	; 0x2da <CALLBACK_HID_Device_CreateHIDReport+0xa2>
		  MouseReport->X =  1;
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	81 83       	std	Z+1, r24	; 0x01

		if (JoyStatus_LCL & JOY_PRESS)
     2da:	95 ff       	sbrs	r25, 5
     2dc:	03 c0       	rjmp	.+6      	; 0x2e4 <CALLBACK_HID_Device_CreateHIDReport+0xac>
		  MouseReport->Button |= (1 << 0);
     2de:	80 81       	ld	r24, Z
     2e0:	81 60       	ori	r24, 0x01	; 1
     2e2:	80 83       	st	Z, r24

		*ReportSize = sizeof(USB_MouseReport_Data_t);
     2e4:	83 e0       	ldi	r24, 0x03	; 3
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	8d 93       	st	X+, r24
     2ea:	9c 93       	st	X, r25
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <CALLBACK_HID_Device_CreateHIDReport+0xba>
		return true;
     2f0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     2f2:	1f 91       	pop	r17
     2f4:	0f 91       	pop	r16
     2f6:	08 95       	ret

000002f8 <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
     2f8:	f9 01       	movw	r30, r18
	if (HIDInterfaceInfo == &Keyboard_HID_Interface)
     2fa:	80 50       	subi	r24, 0x00	; 0
     2fc:	91 40       	sbci	r25, 0x01	; 1
     2fe:	61 f4       	brne	.+24     	; 0x318 <CALLBACK_HID_Device_ProcessHIDReport+0x20>
	{
		uint8_t  LEDMask   = LEDS_NO_LEDS;
		uint8_t* LEDReport = (uint8_t*)ReportData;

		if (*LEDReport & HID_KEYBOARD_LED_NUMLOCK)
     300:	80 81       	ld	r24, Z
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	80 fd       	sbrc	r24, 0
     306:	90 e1       	ldi	r25, 0x10	; 16
		  LEDMask |= LEDS_LED1;

		if (*LEDReport & HID_KEYBOARD_LED_CAPSLOCK)
     308:	81 fd       	sbrc	r24, 1
		  LEDMask |= LEDS_LED3;
     30a:	90 68       	ori	r25, 0x80	; 128

		if (*LEDReport & HID_KEYBOARD_LED_SCROLLLOCK)
     30c:	82 fd       	sbrc	r24, 2
		  LEDMask |= LEDS_LED4;
     30e:	90 64       	ori	r25, 0x40	; 64
     310:	8b b1       	in	r24, 0x0b	; 11
     312:	8f 70       	andi	r24, 0x0F	; 15
     314:	98 2b       	or	r25, r24
     316:	9b b9       	out	0x0b, r25	; 11
     318:	08 95       	ret

0000031a <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	2e d6       	rcall	.+3164   	; 0xf7c <HID_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Mouse_HID_Interface);
     320:	8d e0       	ldi	r24, 0x0D	; 13
     322:	91 e0       	ldi	r25, 0x01	; 1
}
     324:	2b c6       	rjmp	.+3158   	; 0xf7c <HID_Device_ProcessControlRequest>

00000326 <EVENT_USB_Device_ConfigurationChanged>:
    LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     326:	0f 93       	push	r16
     328:	1f 93       	push	r17
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	91 e0       	ldi	r25, 0x01	; 1
     32e:	ee d5       	rcall	.+3036   	; 0xf0c <HID_Device_ConfigureEndpoints>
     330:	08 2f       	mov	r16, r24
	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Mouse_HID_Interface);
     332:	8d e0       	ldi	r24, 0x0D	; 13
     334:	91 e0       	ldi	r25, 0x01	; 1
     336:	ea d5       	rcall	.+3028   	; 0xf0c <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     338:	90 91 e2 00 	lds	r25, 0x00E2
     33c:	94 60       	ori	r25, 0x04	; 4
     33e:	90 93 e2 00 	sts	0x00E2, r25

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     342:	10 e0       	ldi	r17, 0x00	; 0
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	08 23       	and	r16, r24
     348:	19 23       	and	r17, r25
     34a:	00 ff       	sbrs	r16, 0
     34c:	02 c0       	rjmp	.+4      	; 0x352 <EVENT_USB_Device_ConfigurationChanged+0x2c>
     34e:	90 e6       	ldi	r25, 0x60	; 96
     350:	01 c0       	rjmp	.+2      	; 0x354 <EVENT_USB_Device_ConfigurationChanged+0x2e>
     352:	90 e9       	ldi	r25, 0x90	; 144
     354:	8b b1       	in	r24, 0x0b	; 11
     356:	8f 70       	andi	r24, 0x0F	; 15
     358:	98 2b       	or	r25, r24
     35a:	9b b9       	out	0x0b, r25	; 11
}
     35c:	1f 91       	pop	r17
     35e:	0f 91       	pop	r16
     360:	08 95       	ret

00000362 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware()
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     362:	84 b7       	in	r24, 0x34	; 52
     364:	87 7f       	andi	r24, 0xF7	; 247
     366:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     368:	88 e1       	ldi	r24, 0x18	; 24
     36a:	0f b6       	in	r0, 0x3f	; 63
     36c:	f8 94       	cli
     36e:	80 93 60 00 	sts	0x0060, r24
     372:	10 92 60 00 	sts	0x0060, r1
     376:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	80 e8       	ldi	r24, 0x80	; 128
     37c:	0f b6       	in	r0, 0x3f	; 63
     37e:	f8 94       	cli
     380:	80 93 61 00 	sts	0x0061, r24
     384:	90 93 61 00 	sts	0x0061, r25
     388:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
     38a:	84 b1       	in	r24, 0x04	; 4
     38c:	8f 71       	andi	r24, 0x1F	; 31
     38e:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
     390:	8d b1       	in	r24, 0x0d	; 13
     392:	8f 7c       	andi	r24, 0xCF	; 207
     394:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
     396:	85 b1       	in	r24, 0x05	; 5
     398:	80 6e       	ori	r24, 0xE0	; 224
     39a:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
     39c:	8e b1       	in	r24, 0x0e	; 14
     39e:	80 63       	ori	r24, 0x30	; 48
     3a0:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     3a2:	8a b1       	in	r24, 0x0a	; 10
     3a4:	80 6f       	ori	r24, 0xF0	; 240
     3a6:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     3a8:	8b b1       	in	r24, 0x0b	; 11
     3aa:	8f 70       	andi	r24, 0x0F	; 15
     3ac:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	USB_Init();
}
     3ae:	2e c1       	rjmp	.+604    	; 0x60c <USB_Init>

000003b0 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     3b0:	d8 df       	rcall	.-80     	; 0x362 <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     3b2:	8b b1       	in	r24, 0x0b	; 11
     3b4:	8f 70       	andi	r24, 0x0F	; 15
     3b6:	80 61       	ori	r24, 0x10	; 16
     3b8:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     3ba:	78 94       	sei

	for (;;)
	{
		HID_Device_USBTask(&Keyboard_HID_Interface);
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	91 e0       	ldi	r25, 0x01	; 1
     3c0:	eb d4       	rcall	.+2518   	; 0xd98 <HID_Device_USBTask>
		HID_Device_USBTask(&Mouse_HID_Interface);
     3c2:	8d e0       	ldi	r24, 0x0D	; 13
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	e8 d4       	rcall	.+2512   	; 0xd98 <HID_Device_USBTask>
		USB_USBTask();
     3c8:	d4 d4       	rcall	.+2472   	; 0xd72 <USB_USBTask>
     3ca:	f8 cf       	rjmp	.-16     	; 0x3bc <main+0xc>

000003cc <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     3cc:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     3ce:	93 30       	cpi	r25, 0x03	; 3
     3d0:	c1 f0       	breq	.+48     	; 0x402 <CALLBACK_USB_GetDescriptor+0x36>
     3d2:	94 30       	cpi	r25, 0x04	; 4
     3d4:	30 f4       	brcc	.+12     	; 0x3e2 <CALLBACK_USB_GetDescriptor+0x16>
     3d6:	91 30       	cpi	r25, 0x01	; 1
     3d8:	51 f0       	breq	.+20     	; 0x3ee <CALLBACK_USB_GetDescriptor+0x22>
     3da:	92 30       	cpi	r25, 0x02	; 2
     3dc:	09 f0       	breq	.+2      	; 0x3e0 <CALLBACK_USB_GetDescriptor+0x14>
     3de:	3c c0       	rjmp	.+120    	; 0x458 <CALLBACK_USB_GetDescriptor+0x8c>
     3e0:	0b c0       	rjmp	.+22     	; 0x3f8 <CALLBACK_USB_GetDescriptor+0x2c>
     3e2:	91 32       	cpi	r25, 0x21	; 33
     3e4:	19 f1       	breq	.+70     	; 0x42c <CALLBACK_USB_GetDescriptor+0x60>
     3e6:	92 32       	cpi	r25, 0x22	; 34
     3e8:	09 f0       	breq	.+2      	; 0x3ec <CALLBACK_USB_GetDescriptor+0x20>
     3ea:	36 c0       	rjmp	.+108    	; 0x458 <CALLBACK_USB_GetDescriptor+0x8c>
     3ec:	29 c0       	rjmp	.+82     	; 0x440 <CALLBACK_USB_GetDescriptor+0x74>
     3ee:	e1 e1       	ldi	r30, 0x11	; 17
     3f0:	f1 e0       	ldi	r31, 0x01	; 1
     3f2:	22 e1       	ldi	r18, 0x12	; 18
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	34 c0       	rjmp	.+104    	; 0x460 <CALLBACK_USB_GetDescriptor+0x94>
     3f8:	e3 e2       	ldi	r30, 0x23	; 35
     3fa:	f1 e0       	ldi	r31, 0x01	; 1
     3fc:	2b e3       	ldi	r18, 0x3B	; 59
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	2f c0       	rjmp	.+94     	; 0x460 <CALLBACK_USB_GetDescriptor+0x94>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     402:	81 30       	cpi	r24, 0x01	; 1
     404:	49 f0       	breq	.+18     	; 0x418 <CALLBACK_USB_GetDescriptor+0x4c>
     406:	81 30       	cpi	r24, 0x01	; 1
     408:	18 f0       	brcs	.+6      	; 0x410 <CALLBACK_USB_GetDescriptor+0x44>
     40a:	82 30       	cpi	r24, 0x02	; 2
     40c:	29 f5       	brne	.+74     	; 0x458 <CALLBACK_USB_GetDescriptor+0x8c>
     40e:	0a c0       	rjmp	.+20     	; 0x424 <CALLBACK_USB_GetDescriptor+0x58>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     410:	ee e5       	ldi	r30, 0x5E	; 94
     412:	f1 e0       	ldi	r31, 0x01	; 1
     414:	84 91       	lpm	r24, Z+
     416:	03 c0       	rjmp	.+6      	; 0x41e <CALLBACK_USB_GetDescriptor+0x52>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     418:	e2 e6       	ldi	r30, 0x62	; 98
     41a:	f1 e0       	ldi	r31, 0x01	; 1
     41c:	84 91       	lpm	r24, Z+
     41e:	28 2f       	mov	r18, r24
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	1e c0       	rjmp	.+60     	; 0x460 <CALLBACK_USB_GetDescriptor+0x94>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     424:	ec e7       	ldi	r30, 0x7C	; 124
     426:	f1 e0       	ldi	r31, 0x01	; 1
     428:	84 91       	lpm	r24, Z+
     42a:	f9 cf       	rjmp	.-14     	; 0x41e <CALLBACK_USB_GetDescriptor+0x52>
					break;
			}

			break;
		case HID_DTYPE_HID:
			if (!(wIndex))
     42c:	66 23       	and	r22, r22
     42e:	19 f0       	breq	.+6      	; 0x436 <CALLBACK_USB_GetDescriptor+0x6a>
     430:	ee e4       	ldi	r30, 0x4E	; 78
     432:	f1 e0       	ldi	r31, 0x01	; 1
     434:	02 c0       	rjmp	.+4      	; 0x43a <CALLBACK_USB_GetDescriptor+0x6e>
     436:	e5 e3       	ldi	r30, 0x35	; 53
     438:	f1 e0       	ldi	r31, 0x01	; 1
     43a:	29 e0       	ldi	r18, 0x09	; 9
     43c:	30 e0       	ldi	r19, 0x00	; 0
     43e:	10 c0       	rjmp	.+32     	; 0x460 <CALLBACK_USB_GetDescriptor+0x94>
				Size    = sizeof(USB_HID_Descriptor_HID_t);
			}
			
			break;
		case HID_DTYPE_Report:
			if (!(wIndex))
     440:	66 23       	and	r22, r22
     442:	29 f0       	breq	.+10     	; 0x44e <CALLBACK_USB_GetDescriptor+0x82>
     444:	e8 e9       	ldi	r30, 0x98	; 152
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	2a e3       	ldi	r18, 0x3A	; 58
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	09 c0       	rjmp	.+18     	; 0x460 <CALLBACK_USB_GetDescriptor+0x94>
     44e:	e2 ed       	ldi	r30, 0xD2	; 210
     450:	f0 e0       	ldi	r31, 0x00	; 0
     452:	2f e3       	ldi	r18, 0x3F	; 63
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	04 c0       	rjmp	.+8      	; 0x460 <CALLBACK_USB_GetDescriptor+0x94>
     458:	e0 e0       	ldi	r30, 0x00	; 0
     45a:	f0 e0       	ldi	r31, 0x00	; 0
     45c:	20 e0       	ldi	r18, 0x00	; 0
     45e:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     460:	ed 93       	st	X+, r30
     462:	fc 93       	st	X, r31
	return Size;
}
     464:	c9 01       	movw	r24, r18
     466:	08 95       	ret

00000468 <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
     468:	38 2f       	mov	r19, r24
     46a:	28 2f       	mov	r18, r24
     46c:	2c c0       	rjmp	.+88     	; 0x4c6 <Endpoint_ConfigureEndpoint_Prv+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     46e:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);
		
		if (EPNum == Number)
     472:	23 17       	cp	r18, r19
     474:	21 f4       	brne	.+8      	; 0x47e <Endpoint_ConfigureEndpoint_Prv+0x16>
     476:	76 2f       	mov	r23, r22
     478:	94 2f       	mov	r25, r20
     47a:	50 e0       	ldi	r21, 0x00	; 0
     47c:	06 c0       	rjmp	.+12     	; 0x48a <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     47e:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     482:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
     486:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     48a:	91 ff       	sbrs	r25, 1
     48c:	1b c0       	rjmp	.+54     	; 0x4c4 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     48e:	80 91 eb 00 	lds	r24, 0x00EB
     492:	8e 7f       	andi	r24, 0xFE	; 254
     494:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     498:	80 91 ed 00 	lds	r24, 0x00ED
     49c:	8d 7f       	andi	r24, 0xFD	; 253
     49e:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     4a2:	80 91 eb 00 	lds	r24, 0x00EB
     4a6:	81 60       	ori	r24, 0x01	; 1
     4a8:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     4ac:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     4b0:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
     4b4:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     4b8:	80 91 ee 00 	lds	r24, 0x00EE
			
		if (!(Endpoint_IsConfigured()))
     4bc:	87 fd       	sbrc	r24, 7
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else	
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     4c4:	2f 5f       	subi	r18, 0xFF	; 255
     4c6:	27 30       	cpi	r18, 0x07	; 7
     4c8:	90 f2       	brcs	.-92     	; 0x46e <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     4ca:	30 93 e9 00 	sts	0x00E9, r19
     4ce:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     4d0:	08 95       	ret

000004d2 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     4d2:	80 91 2a 01 	lds	r24, 0x012A
     4d6:	88 23       	and	r24, r24
     4d8:	9c f4       	brge	.+38     	; 0x500 <Endpoint_ClearStatusStage+0x2e>
     4da:	04 c0       	rjmp	.+8      	; 0x4e4 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     4dc:	80 91 29 01 	lds	r24, 0x0129
     4e0:	88 23       	and	r24, r24
     4e2:	b9 f0       	breq	.+46     	; 0x512 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     4e4:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     4e8:	82 ff       	sbrs	r24, 2
     4ea:	f8 cf       	rjmp	.-16     	; 0x4dc <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     4ec:	80 91 e8 00 	lds	r24, 0x00E8
     4f0:	8b 77       	andi	r24, 0x7B	; 123
     4f2:	80 93 e8 00 	sts	0x00E8, r24
     4f6:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     4f8:	80 91 29 01 	lds	r24, 0x0129
     4fc:	88 23       	and	r24, r24
     4fe:	49 f0       	breq	.+18     	; 0x512 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     500:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     504:	80 ff       	sbrs	r24, 0
     506:	f8 cf       	rjmp	.-16     	; 0x4f8 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     508:	80 91 e8 00 	lds	r24, 0x00E8
     50c:	8e 77       	andi	r24, 0x7E	; 126
     50e:	80 93 e8 00 	sts	0x00E8, r24
     512:	08 95       	ret

00000514 <Endpoint_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     514:	40 91 e4 00 	lds	r20, 0x00E4
     518:	50 91 e5 00 	lds	r21, 0x00E5
     51c:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
     51e:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
     522:	80 78       	andi	r24, 0x80	; 128
     524:	80 38       	cpi	r24, 0x80	; 128
     526:	29 f4       	brne	.+10     	; 0x532 <Endpoint_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     528:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
     52c:	80 ff       	sbrs	r24, 0
     52e:	05 c0       	rjmp	.+10     	; 0x53a <Endpoint_WaitUntilReady+0x26>
     530:	22 c0       	rjmp	.+68     	; 0x576 <Endpoint_WaitUntilReady+0x62>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     532:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     536:	82 fd       	sbrc	r24, 2
     538:	1e c0       	rjmp	.+60     	; 0x576 <Endpoint_WaitUntilReady+0x62>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     53a:	80 91 29 01 	lds	r24, 0x0129

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     53e:	88 23       	and	r24, r24
     540:	11 f4       	brne	.+4      	; 0x546 <Endpoint_WaitUntilReady+0x32>
     542:	82 e0       	ldi	r24, 0x02	; 2
     544:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     546:	85 30       	cpi	r24, 0x05	; 5
     548:	11 f4       	brne	.+4      	; 0x54e <Endpoint_WaitUntilReady+0x3a>
     54a:	83 e0       	ldi	r24, 0x03	; 3
     54c:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     54e:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     552:	85 ff       	sbrs	r24, 5
     554:	02 c0       	rjmp	.+4      	; 0x55a <Endpoint_WaitUntilReady+0x46>
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	08 95       	ret
     55a:	80 91 e4 00 	lds	r24, 0x00E4
     55e:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     562:	84 17       	cp	r24, r20
     564:	95 07       	cpc	r25, r21
     566:	d9 f2       	breq	.-74     	; 0x51e <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     568:	22 23       	and	r18, r18
     56a:	11 f4       	brne	.+4      	; 0x570 <Endpoint_WaitUntilReady+0x5c>
     56c:	84 e0       	ldi	r24, 0x04	; 4
     56e:	08 95       	ret
     570:	21 50       	subi	r18, 0x01	; 1
     572:	ac 01       	movw	r20, r24
     574:	d4 cf       	rjmp	.-88     	; 0x51e <Endpoint_WaitUntilReady+0xa>
     576:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     578:	08 95       	ret

0000057a <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     57a:	ef 92       	push	r14
     57c:	ff 92       	push	r15
     57e:	0f 93       	push	r16
     580:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     582:	4d d0       	rcall	.+154    	; 0x61e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     584:	54 d0       	rcall	.+168    	; 0x62e <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     586:	08 ed       	ldi	r16, 0xD8	; 216
     588:	10 e0       	ldi	r17, 0x00	; 0
     58a:	f8 01       	movw	r30, r16
     58c:	80 81       	ld	r24, Z
     58e:	8f 77       	andi	r24, 0x7F	; 127
     590:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
     592:	80 81       	ld	r24, Z
     594:	80 68       	ori	r24, 0x80	; 128
     596:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     598:	80 81       	ld	r24, Z
     59a:	8f 7d       	andi	r24, 0xDF	; 223
     59c:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     59e:	e7 ed       	ldi	r30, 0xD7	; 215
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
     5a2:	80 81       	ld	r24, Z
     5a4:	80 68       	ori	r24, 0x80	; 128
     5a6:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     5a8:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     5aa:	10 92 29 01 	sts	0x0129, r1
	USB_Device_ConfigurationNumber  = 0;
     5ae:	10 92 25 01 	sts	0x0125, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     5b2:	10 92 27 01 	sts	0x0127, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     5b6:	10 92 26 01 	sts	0x0126, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     5ba:	80 ee       	ldi	r24, 0xE0	; 224
     5bc:	e8 2e       	mov	r14, r24
     5be:	f1 2c       	mov	r15, r1
     5c0:	f7 01       	movw	r30, r14
     5c2:	80 81       	ld	r24, Z
     5c4:	8b 7f       	andi	r24, 0xFB	; 251
     5c6:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     5c8:	f8 01       	movw	r30, r16
     5ca:	80 81       	ld	r24, Z
     5cc:	81 60       	ori	r24, 0x01	; 1
     5ce:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	60 e0       	ldi	r22, 0x00	; 0
     5d4:	42 e0       	ldi	r20, 0x02	; 2
     5d6:	48 df       	rcall	.-368    	; 0x468 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     5d8:	e1 ee       	ldi	r30, 0xE1	; 225
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	80 81       	ld	r24, Z
     5de:	8e 7f       	andi	r24, 0xFE	; 254
     5e0:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     5e2:	e2 ee       	ldi	r30, 0xE2	; 226
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	80 81       	ld	r24, Z
     5e8:	81 60       	ori	r24, 0x01	; 1
     5ea:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     5ec:	80 81       	ld	r24, Z
     5ee:	88 60       	ori	r24, 0x08	; 8
     5f0:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     5f2:	f7 01       	movw	r30, r14
     5f4:	80 81       	ld	r24, Z
     5f6:	8e 7f       	andi	r24, 0xFE	; 254
     5f8:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     5fa:	f8 01       	movw	r30, r16
     5fc:	80 81       	ld	r24, Z
     5fe:	80 61       	ori	r24, 0x10	; 16
     600:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     602:	1f 91       	pop	r17
     604:	0f 91       	pop	r16
     606:	ff 90       	pop	r15
     608:	ef 90       	pop	r14
     60a:	08 95       	ret

0000060c <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     60c:	e7 ed       	ldi	r30, 0xD7	; 215
     60e:	f0 e0       	ldi	r31, 0x00	; 0
     610:	80 81       	ld	r24, Z
     612:	81 60       	ori	r24, 0x01	; 1
     614:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	80 93 28 01 	sts	0x0128, r24

	USB_ResetInterface();
}
     61c:	ae cf       	rjmp	.-164    	; 0x57a <USB_ResetInterface>

0000061e <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     61e:	e8 ed       	ldi	r30, 0xD8	; 216
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	80 81       	ld	r24, Z
     624:	8c 7f       	andi	r24, 0xFC	; 252
     626:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     628:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     62c:	08 95       	ret

0000062e <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     62e:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     632:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     636:	08 95       	ret

00000638 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     638:	1f 92       	push	r1
     63a:	0f 92       	push	r0
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	0f 92       	push	r0
     640:	0b b6       	in	r0, 0x3b	; 59
     642:	0f 92       	push	r0
     644:	11 24       	eor	r1, r1
     646:	2f 93       	push	r18
     648:	3f 93       	push	r19
     64a:	4f 93       	push	r20
     64c:	5f 93       	push	r21
     64e:	6f 93       	push	r22
     650:	7f 93       	push	r23
     652:	8f 93       	push	r24
     654:	9f 93       	push	r25
     656:	af 93       	push	r26
     658:	bf 93       	push	r27
     65a:	ef 93       	push	r30
     65c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     65e:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     662:	82 ff       	sbrs	r24, 2
     664:	0a c0       	rjmp	.+20     	; 0x67a <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     666:	80 91 e2 00 	lds	r24, 0x00E2
     66a:	82 ff       	sbrs	r24, 2
     66c:	06 c0       	rjmp	.+12     	; 0x67a <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     66e:	80 91 e1 00 	lds	r24, 0x00E1
     672:	8b 7f       	andi	r24, 0xFB	; 251
     674:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     678:	c8 dd       	rcall	.-1136   	; 0x20a <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     67a:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     67e:	80 ff       	sbrs	r24, 0
     680:	1d c0       	rjmp	.+58     	; 0x6bc <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     682:	80 91 d8 00 	lds	r24, 0x00D8
     686:	80 ff       	sbrs	r24, 0
     688:	19 c0       	rjmp	.+50     	; 0x6bc <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     68a:	80 91 da 00 	lds	r24, 0x00DA
     68e:	8e 7f       	andi	r24, 0xFE	; 254
     690:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     694:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     698:	80 ff       	sbrs	r24, 0
     69a:	0c c0       	rjmp	.+24     	; 0x6b4 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     69c:	8c e0       	ldi	r24, 0x0C	; 12
     69e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     6a0:	8e e0       	ldi	r24, 0x0E	; 14
     6a2:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     6a4:	09 b4       	in	r0, 0x29	; 41
     6a6:	00 fe       	sbrs	r0, 0
     6a8:	fd cf       	rjmp	.-6      	; 0x6a4 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	80 93 29 01 	sts	0x0129, r24
			EVENT_USB_Device_Connect();
     6b0:	a2 dd       	rcall	.-1212   	; 0x1f6 <EVENT_USB_Device_Connect>
     6b2:	04 c0       	rjmp	.+8      	; 0x6bc <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     6b4:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     6b6:	10 92 29 01 	sts	0x0129, r1
			EVENT_USB_Device_Disconnect();
     6ba:	a2 dd       	rcall	.-1212   	; 0x200 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     6bc:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     6c0:	80 ff       	sbrs	r24, 0
     6c2:	18 c0       	rjmp	.+48     	; 0x6f4 <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     6c4:	80 91 e2 00 	lds	r24, 0x00E2
     6c8:	80 ff       	sbrs	r24, 0
     6ca:	14 c0       	rjmp	.+40     	; 0x6f4 <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     6cc:	80 91 e2 00 	lds	r24, 0x00E2
     6d0:	8e 7f       	andi	r24, 0xFE	; 254
     6d2:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     6d6:	80 91 e2 00 	lds	r24, 0x00E2
     6da:	80 61       	ori	r24, 0x10	; 16
     6dc:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     6e0:	80 91 d8 00 	lds	r24, 0x00D8
     6e4:	80 62       	ori	r24, 0x20	; 32
     6e6:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     6ea:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     6ec:	85 e0       	ldi	r24, 0x05	; 5
     6ee:	80 93 29 01 	sts	0x0129, r24
		EVENT_USB_Device_Suspend();
     6f2:	3e d3       	rcall	.+1660   	; 0xd70 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     6f4:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     6f8:	84 ff       	sbrs	r24, 4
     6fa:	2d c0       	rjmp	.+90     	; 0x756 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     6fc:	80 91 e2 00 	lds	r24, 0x00E2
     700:	84 ff       	sbrs	r24, 4
     702:	29 c0       	rjmp	.+82     	; 0x756 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     704:	8c e0       	ldi	r24, 0x0C	; 12
     706:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     708:	8e e0       	ldi	r24, 0x0E	; 14
     70a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     70c:	09 b4       	in	r0, 0x29	; 41
     70e:	00 fe       	sbrs	r0, 0
     710:	fd cf       	rjmp	.-6      	; 0x70c <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     712:	80 91 d8 00 	lds	r24, 0x00D8
     716:	8f 7d       	andi	r24, 0xDF	; 223
     718:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     71c:	80 91 e1 00 	lds	r24, 0x00E1
     720:	8f 7e       	andi	r24, 0xEF	; 239
     722:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     726:	80 91 e2 00 	lds	r24, 0x00E2
     72a:	8f 7e       	andi	r24, 0xEF	; 239
     72c:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     730:	80 91 e2 00 	lds	r24, 0x00E2
     734:	81 60       	ori	r24, 0x01	; 1
     736:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     73a:	80 91 25 01 	lds	r24, 0x0125
     73e:	88 23       	and	r24, r24
     740:	31 f4       	brne	.+12     	; 0x74e <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     742:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     746:	87 fd       	sbrc	r24, 7
     748:	02 c0       	rjmp	.+4      	; 0x74e <__vector_10+0x116>
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	01 c0       	rjmp	.+2      	; 0x750 <__vector_10+0x118>
     74e:	84 e0       	ldi	r24, 0x04	; 4
     750:	80 93 29 01 	sts	0x0129, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     754:	0d d3       	rcall	.+1562   	; 0xd70 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     756:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     75a:	83 ff       	sbrs	r24, 3
     75c:	22 c0       	rjmp	.+68     	; 0x7a2 <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     75e:	80 91 e2 00 	lds	r24, 0x00E2
     762:	83 ff       	sbrs	r24, 3
     764:	1e c0       	rjmp	.+60     	; 0x7a2 <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     766:	80 91 e1 00 	lds	r24, 0x00E1
     76a:	87 7f       	andi	r24, 0xF7	; 247
     76c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     770:	82 e0       	ldi	r24, 0x02	; 2
     772:	80 93 29 01 	sts	0x0129, r24
		USB_Device_ConfigurationNumber = 0;
     776:	10 92 25 01 	sts	0x0125, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     77a:	80 91 e1 00 	lds	r24, 0x00E1
     77e:	8e 7f       	andi	r24, 0xFE	; 254
     780:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     784:	80 91 e2 00 	lds	r24, 0x00E2
     788:	8e 7f       	andi	r24, 0xFE	; 254
     78a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     78e:	80 91 e2 00 	lds	r24, 0x00E2
     792:	80 61       	ori	r24, 0x10	; 16
     794:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	60 e0       	ldi	r22, 0x00	; 0
     79c:	42 e0       	ldi	r20, 0x02	; 2
     79e:	64 de       	rcall	.-824    	; 0x468 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     7a0:	e7 d2       	rcall	.+1486   	; 0xd70 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     7a2:	ff 91       	pop	r31
     7a4:	ef 91       	pop	r30
     7a6:	bf 91       	pop	r27
     7a8:	af 91       	pop	r26
     7aa:	9f 91       	pop	r25
     7ac:	8f 91       	pop	r24
     7ae:	7f 91       	pop	r23
     7b0:	6f 91       	pop	r22
     7b2:	5f 91       	pop	r21
     7b4:	4f 91       	pop	r20
     7b6:	3f 91       	pop	r19
     7b8:	2f 91       	pop	r18
     7ba:	0f 90       	pop	r0
     7bc:	0b be       	out	0x3b, r0	; 59
     7be:	0f 90       	pop	r0
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	0f 90       	pop	r0
     7c4:	1f 90       	pop	r1
     7c6:	18 95       	reti

000007c8 <Endpoint_Write_Control_Stream_LE>:
     7c8:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     7ca:	40 91 30 01 	lds	r20, 0x0130
     7ce:	50 91 31 01 	lds	r21, 0x0131
     7d2:	46 17       	cp	r20, r22
     7d4:	57 07       	cpc	r21, r23
     7d6:	18 f4       	brcc	.+6      	; 0x7de <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     7d8:	f9 01       	movw	r30, r18
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	3d c0       	rjmp	.+122    	; 0x858 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     7de:	61 15       	cp	r22, r1
     7e0:	71 05       	cpc	r23, r1
     7e2:	11 f0       	breq	.+4      	; 0x7e8 <Endpoint_Write_Control_Stream_LE+0x20>
     7e4:	ab 01       	movw	r20, r22
     7e6:	f8 cf       	rjmp	.-16     	; 0x7d8 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7e8:	80 91 e8 00 	lds	r24, 0x00E8
     7ec:	8e 77       	andi	r24, 0x7E	; 126
     7ee:	80 93 e8 00 	sts	0x00E8, r24
     7f2:	40 e0       	ldi	r20, 0x00	; 0
     7f4:	50 e0       	ldi	r21, 0x00	; 0
     7f6:	f0 cf       	rjmp	.-32     	; 0x7d8 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     7f8:	80 91 29 01 	lds	r24, 0x0129

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     7fc:	88 23       	and	r24, r24
     7fe:	f1 f1       	breq	.+124    	; 0x87c <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     800:	85 30       	cpi	r24, 0x05	; 5
     802:	f1 f1       	breq	.+124    	; 0x880 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     804:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     808:	83 ff       	sbrs	r24, 3
     80a:	02 c0       	rjmp	.+4      	; 0x810 <Endpoint_Write_Control_Stream_LE+0x48>
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     810:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     814:	82 fd       	sbrc	r24, 2
     816:	2c c0       	rjmp	.+88     	; 0x870 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     818:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     81c:	80 ff       	sbrs	r24, 0
     81e:	1c c0       	rjmp	.+56     	; 0x858 <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     820:	20 91 f2 00 	lds	r18, 0x00F2
     824:	30 91 f3 00 	lds	r19, 0x00F3
     828:	07 c0       	rjmp	.+14     	; 0x838 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     82a:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     82c:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     830:	41 50       	subi	r20, 0x01	; 1
     832:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     834:	2f 5f       	subi	r18, 0xFF	; 255
     836:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     838:	41 15       	cp	r20, r1
     83a:	51 05       	cpc	r21, r1
     83c:	19 f0       	breq	.+6      	; 0x844 <Endpoint_Write_Control_Stream_LE+0x7c>
     83e:	28 30       	cpi	r18, 0x08	; 8
     840:	31 05       	cpc	r19, r1
     842:	98 f3       	brcs	.-26     	; 0x82a <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	28 30       	cpi	r18, 0x08	; 8
     848:	31 05       	cpc	r19, r1
     84a:	09 f4       	brne	.+2      	; 0x84e <Endpoint_Write_Control_Stream_LE+0x86>
     84c:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     84e:	80 91 e8 00 	lds	r24, 0x00E8
     852:	8e 77       	andi	r24, 0x7E	; 126
     854:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     858:	41 15       	cp	r20, r1
     85a:	51 05       	cpc	r21, r1
     85c:	69 f6       	brne	.-102    	; 0x7f8 <Endpoint_Write_Control_Stream_LE+0x30>
     85e:	99 23       	and	r25, r25
     860:	59 f6       	brne	.-106    	; 0x7f8 <Endpoint_Write_Control_Stream_LE+0x30>
     862:	06 c0       	rjmp	.+12     	; 0x870 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     864:	80 91 29 01 	lds	r24, 0x0129

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     868:	88 23       	and	r24, r24
     86a:	41 f0       	breq	.+16     	; 0x87c <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     86c:	85 30       	cpi	r24, 0x05	; 5
     86e:	41 f0       	breq	.+16     	; 0x880 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     870:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     874:	82 ff       	sbrs	r24, 2
     876:	f6 cf       	rjmp	.-20     	; 0x864 <Endpoint_Write_Control_Stream_LE+0x9c>
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	08 95       	ret
     87c:	82 e0       	ldi	r24, 0x02	; 2
     87e:	08 95       	ret
     880:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     882:	08 95       	ret

00000884 <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
     884:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     886:	61 15       	cp	r22, r1
     888:	71 05       	cpc	r23, r1
     88a:	29 f4       	brne	.+10     	; 0x896 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     88c:	80 91 e8 00 	lds	r24, 0x00E8
     890:	8b 77       	andi	r24, 0x7B	; 123
     892:	80 93 e8 00 	sts	0x00E8, r24
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     896:	f9 01       	movw	r30, r18
     898:	22 c0       	rjmp	.+68     	; 0x8de <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     89a:	80 91 29 01 	lds	r24, 0x0129

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     89e:	88 23       	and	r24, r24
     8a0:	71 f1       	breq	.+92     	; 0x8fe <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     8a2:	85 30       	cpi	r24, 0x05	; 5
     8a4:	71 f1       	breq	.+92     	; 0x902 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     8a6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     8aa:	83 ff       	sbrs	r24, 3
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <Endpoint_Read_Control_Stream_LE+0x2e>
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     8b2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     8b6:	82 ff       	sbrs	r24, 2
     8b8:	f0 cf       	rjmp	.-32     	; 0x89a <Endpoint_Read_Control_Stream_LE+0x16>
     8ba:	06 c0       	rjmp	.+12     	; 0x8c8 <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     8bc:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     8c0:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     8c2:	61 50       	subi	r22, 0x01	; 1
     8c4:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     8c6:	31 f0       	breq	.+12     	; 0x8d4 <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     8c8:	80 91 f2 00 	lds	r24, 0x00F2
     8cc:	90 91 f3 00 	lds	r25, 0x00F3
     8d0:	89 2b       	or	r24, r25
     8d2:	a1 f7       	brne	.-24     	; 0x8bc <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     8d4:	80 91 e8 00 	lds	r24, 0x00E8
     8d8:	8b 77       	andi	r24, 0x7B	; 123
     8da:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
     8de:	61 15       	cp	r22, r1
     8e0:	71 05       	cpc	r23, r1
     8e2:	d9 f6       	brne	.-74     	; 0x89a <Endpoint_Read_Control_Stream_LE+0x16>
     8e4:	06 c0       	rjmp	.+12     	; 0x8f2 <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     8e6:	80 91 29 01 	lds	r24, 0x0129

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     8ea:	88 23       	and	r24, r24
     8ec:	41 f0       	breq	.+16     	; 0x8fe <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     8ee:	85 30       	cpi	r24, 0x05	; 5
     8f0:	41 f0       	breq	.+16     	; 0x902 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     8f2:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     8f6:	80 ff       	sbrs	r24, 0
     8f8:	f6 cf       	rjmp	.-20     	; 0x8e6 <Endpoint_Read_Control_Stream_LE+0x62>
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	08 95       	ret
     8fe:	82 e0       	ldi	r24, 0x02	; 2
     900:	08 95       	ret
     902:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     904:	08 95       	ret

00000906 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     906:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     908:	40 91 30 01 	lds	r20, 0x0130
     90c:	50 91 31 01 	lds	r21, 0x0131
     910:	46 17       	cp	r20, r22
     912:	57 07       	cpc	r21, r23
     914:	18 f4       	brcc	.+6      	; 0x91c <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     916:	f9 01       	movw	r30, r18
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	40 c0       	rjmp	.+128    	; 0x99c <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     91c:	61 15       	cp	r22, r1
     91e:	71 05       	cpc	r23, r1
     920:	11 f0       	breq	.+4      	; 0x926 <Endpoint_Write_Control_PStream_LE+0x20>
     922:	ab 01       	movw	r20, r22
     924:	f8 cf       	rjmp	.-16     	; 0x916 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     926:	80 91 e8 00 	lds	r24, 0x00E8
     92a:	8e 77       	andi	r24, 0x7E	; 126
     92c:	80 93 e8 00 	sts	0x00E8, r24
     930:	40 e0       	ldi	r20, 0x00	; 0
     932:	50 e0       	ldi	r21, 0x00	; 0
     934:	f0 cf       	rjmp	.-32     	; 0x916 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     936:	80 91 29 01 	lds	r24, 0x0129

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     93a:	88 23       	and	r24, r24
     93c:	09 f4       	brne	.+2      	; 0x940 <Endpoint_Write_Control_PStream_LE+0x3a>
     93e:	40 c0       	rjmp	.+128    	; 0x9c0 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     940:	85 30       	cpi	r24, 0x05	; 5
     942:	09 f4       	brne	.+2      	; 0x946 <Endpoint_Write_Control_PStream_LE+0x40>
     944:	3f c0       	rjmp	.+126    	; 0x9c4 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     946:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     94a:	83 ff       	sbrs	r24, 3
     94c:	02 c0       	rjmp	.+4      	; 0x952 <Endpoint_Write_Control_PStream_LE+0x4c>
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     952:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     956:	82 fd       	sbrc	r24, 2
     958:	2d c0       	rjmp	.+90     	; 0x9b4 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     95a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     95e:	80 ff       	sbrs	r24, 0
     960:	1d c0       	rjmp	.+58     	; 0x99c <Endpoint_Write_Control_PStream_LE+0x96>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     962:	20 91 f2 00 	lds	r18, 0x00F2
     966:	30 91 f3 00 	lds	r19, 0x00F3
     96a:	08 c0       	rjmp	.+16     	; 0x97c <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     96c:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     96e:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     972:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     974:	41 50       	subi	r20, 0x01	; 1
     976:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     978:	2f 5f       	subi	r18, 0xFF	; 255
     97a:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     97c:	41 15       	cp	r20, r1
     97e:	51 05       	cpc	r21, r1
     980:	19 f0       	breq	.+6      	; 0x988 <Endpoint_Write_Control_PStream_LE+0x82>
     982:	28 30       	cpi	r18, 0x08	; 8
     984:	31 05       	cpc	r19, r1
     986:	90 f3       	brcs	.-28     	; 0x96c <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	28 30       	cpi	r18, 0x08	; 8
     98c:	31 05       	cpc	r19, r1
     98e:	09 f4       	brne	.+2      	; 0x992 <Endpoint_Write_Control_PStream_LE+0x8c>
     990:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     992:	80 91 e8 00 	lds	r24, 0x00E8
     996:	8e 77       	andi	r24, 0x7E	; 126
     998:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     99c:	41 15       	cp	r20, r1
     99e:	51 05       	cpc	r21, r1
     9a0:	51 f6       	brne	.-108    	; 0x936 <Endpoint_Write_Control_PStream_LE+0x30>
     9a2:	99 23       	and	r25, r25
     9a4:	41 f6       	brne	.-112    	; 0x936 <Endpoint_Write_Control_PStream_LE+0x30>
     9a6:	06 c0       	rjmp	.+12     	; 0x9b4 <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     9a8:	80 91 29 01 	lds	r24, 0x0129

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     9ac:	88 23       	and	r24, r24
     9ae:	41 f0       	breq	.+16     	; 0x9c0 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     9b0:	85 30       	cpi	r24, 0x05	; 5
     9b2:	41 f0       	breq	.+16     	; 0x9c4 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9b4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     9b8:	82 ff       	sbrs	r24, 2
     9ba:	f6 cf       	rjmp	.-20     	; 0x9a8 <Endpoint_Write_Control_PStream_LE+0xa2>
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	08 95       	ret
     9c0:	82 e0       	ldi	r24, 0x02	; 2
     9c2:	08 95       	ret
     9c4:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     9c6:	08 95       	ret

000009c8 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     9c8:	bf 92       	push	r11
     9ca:	cf 92       	push	r12
     9cc:	df 92       	push	r13
     9ce:	ef 92       	push	r14
     9d0:	ff 92       	push	r15
     9d2:	0f 93       	push	r16
     9d4:	1f 93       	push	r17
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	18 2f       	mov	r17, r24
     9dc:	09 2f       	mov	r16, r25
     9de:	7b 01       	movw	r14, r22
     9e0:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     9e2:	98 dd       	rcall	.-1232   	; 0x514 <Endpoint_WaitUntilReady>
     9e4:	b8 2e       	mov	r11, r24
     9e6:	88 23       	and	r24, r24
     9e8:	b1 f5       	brne	.+108    	; 0xa56 <Endpoint_Write_Stream_LE+0x8e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     9ea:	81 2f       	mov	r24, r17
     9ec:	90 2f       	mov	r25, r16
     9ee:	9c 01       	movw	r18, r24
     9f0:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     9f2:	c1 14       	cp	r12, r1
     9f4:	d1 04       	cpc	r13, r1
     9f6:	39 f0       	breq	.+14     	; 0xa06 <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
     9f8:	f6 01       	movw	r30, r12
     9fa:	80 81       	ld	r24, Z
     9fc:	91 81       	ldd	r25, Z+1	; 0x01
     9fe:	e8 1a       	sub	r14, r24
     a00:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     a02:	c8 0f       	add	r28, r24
     a04:	d9 1f       	adc	r29, r25
     a06:	00 e0       	ldi	r16, 0x00	; 0
     a08:	10 e0       	ldi	r17, 0x00	; 0
     a0a:	22 c0       	rjmp	.+68     	; 0xa50 <Endpoint_Write_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     a0c:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     a10:	85 fd       	sbrc	r24, 5
     a12:	16 c0       	rjmp	.+44     	; 0xa40 <Endpoint_Write_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a14:	80 91 e8 00 	lds	r24, 0x00E8
     a18:	8e 77       	andi	r24, 0x7E	; 126
     a1a:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
     a1e:	c1 14       	cp	r12, r1
     a20:	d1 04       	cpc	r13, r1
     a22:	49 f0       	breq	.+18     	; 0xa36 <Endpoint_Write_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
     a24:	f6 01       	movw	r30, r12
     a26:	80 81       	ld	r24, Z
     a28:	91 81       	ldd	r25, Z+1	; 0x01
     a2a:	80 0f       	add	r24, r16
     a2c:	91 1f       	adc	r25, r17
     a2e:	91 83       	std	Z+1, r25	; 0x01
     a30:	80 83       	st	Z, r24
     a32:	85 e0       	ldi	r24, 0x05	; 5
     a34:	11 c0       	rjmp	.+34     	; 0xa58 <Endpoint_Write_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
     a36:	9d d1       	rcall	.+826    	; 0xd72 <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     a38:	6d dd       	rcall	.-1318   	; 0x514 <Endpoint_WaitUntilReady>
     a3a:	88 23       	and	r24, r24
     a3c:	49 f0       	breq	.+18     	; 0xa50 <Endpoint_Write_Stream_LE+0x88>
     a3e:	0c c0       	rjmp	.+24     	; 0xa58 <Endpoint_Write_Stream_LE+0x90>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     a40:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     a42:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     a46:	08 94       	sec
     a48:	e1 08       	sbc	r14, r1
     a4a:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
     a4c:	0f 5f       	subi	r16, 0xFF	; 255
     a4e:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     a50:	e1 14       	cp	r14, r1
     a52:	f1 04       	cpc	r15, r1
     a54:	d9 f6       	brne	.-74     	; 0xa0c <Endpoint_Write_Stream_LE+0x44>
     a56:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     a58:	df 91       	pop	r29
     a5a:	cf 91       	pop	r28
     a5c:	1f 91       	pop	r17
     a5e:	0f 91       	pop	r16
     a60:	ff 90       	pop	r15
     a62:	ef 90       	pop	r14
     a64:	df 90       	pop	r13
     a66:	cf 90       	pop	r12
     a68:	bf 90       	pop	r11
     a6a:	08 95       	ret

00000a6c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     a6c:	0f 93       	push	r16
     a6e:	1f 93       	push	r17
     a70:	df 93       	push	r29
     a72:	cf 93       	push	r28
     a74:	cd b7       	in	r28, 0x3d	; 61
     a76:	de b7       	in	r29, 0x3e	; 62
     a78:	ac 97       	sbiw	r28, 0x2c	; 44
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	f8 94       	cli
     a7e:	de bf       	out	0x3e, r29	; 62
     a80:	0f be       	out	0x3f, r0	; 63
     a82:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     a84:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
     a88:	80 93 2a 01 	sts	0x012A, r24
     a8c:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
     a90:	80 93 2b 01 	sts	0x012B, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     a94:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
     a98:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
     a9c:	ec e2       	ldi	r30, 0x2C	; 44
     a9e:	f1 e0       	ldi	r31, 0x01	; 1
     aa0:	80 93 2c 01 	sts	0x012C, r24
     aa4:	90 93 2d 01 	sts	0x012D, r25
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     aa8:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
     aac:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
     ab0:	80 93 2e 01 	sts	0x012E, r24
     ab4:	93 83       	std	Z+3, r25	; 0x03
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     ab6:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
     aba:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
     abe:	80 93 30 01 	sts	0x0130, r24
     ac2:	95 83       	std	Z+5, r25	; 0x05

	EVENT_USB_Device_ControlRequest();
     ac4:	2a dc       	rcall	.-1964   	; 0x31a <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     ac6:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     aca:	83 ff       	sbrs	r24, 3
     acc:	38 c1       	rjmp	.+624    	; 0xd3e <USB_Device_ProcessControlRequest+0x2d2>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     ace:	80 91 2a 01 	lds	r24, 0x012A

		switch (USB_ControlRequest.bRequest)
     ad2:	30 91 2b 01 	lds	r19, 0x012B
     ad6:	35 30       	cpi	r19, 0x05	; 5
     ad8:	09 f4       	brne	.+2      	; 0xadc <USB_Device_ProcessControlRequest+0x70>
     ada:	87 c0       	rjmp	.+270    	; 0xbea <USB_Device_ProcessControlRequest+0x17e>
     adc:	36 30       	cpi	r19, 0x06	; 6
     ade:	40 f4       	brcc	.+16     	; 0xaf0 <USB_Device_ProcessControlRequest+0x84>
     ae0:	31 30       	cpi	r19, 0x01	; 1
     ae2:	c9 f1       	breq	.+114    	; 0xb56 <USB_Device_ProcessControlRequest+0xea>
     ae4:	31 30       	cpi	r19, 0x01	; 1
     ae6:	70 f0       	brcs	.+28     	; 0xb04 <USB_Device_ProcessControlRequest+0x98>
     ae8:	33 30       	cpi	r19, 0x03	; 3
     aea:	09 f0       	breq	.+2      	; 0xaee <USB_Device_ProcessControlRequest+0x82>
     aec:	28 c1       	rjmp	.+592    	; 0xd3e <USB_Device_ProcessControlRequest+0x2d2>
     aee:	33 c0       	rjmp	.+102    	; 0xb56 <USB_Device_ProcessControlRequest+0xea>
     af0:	38 30       	cpi	r19, 0x08	; 8
     af2:	09 f4       	brne	.+2      	; 0xaf6 <USB_Device_ProcessControlRequest+0x8a>
     af4:	f6 c0       	rjmp	.+492    	; 0xce2 <USB_Device_ProcessControlRequest+0x276>
     af6:	39 30       	cpi	r19, 0x09	; 9
     af8:	09 f4       	brne	.+2      	; 0xafc <USB_Device_ProcessControlRequest+0x90>
     afa:	05 c1       	rjmp	.+522    	; 0xd06 <USB_Device_ProcessControlRequest+0x29a>
     afc:	36 30       	cpi	r19, 0x06	; 6
     afe:	09 f0       	breq	.+2      	; 0xb02 <USB_Device_ProcessControlRequest+0x96>
     b00:	1e c1       	rjmp	.+572    	; 0xd3e <USB_Device_ProcessControlRequest+0x2d2>
     b02:	97 c0       	rjmp	.+302    	; 0xc32 <USB_Device_ProcessControlRequest+0x1c6>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b04:	80 38       	cpi	r24, 0x80	; 128
     b06:	21 f0       	breq	.+8      	; 0xb10 <USB_Device_ProcessControlRequest+0xa4>
     b08:	82 38       	cpi	r24, 0x82	; 130
     b0a:	09 f0       	breq	.+2      	; 0xb0e <USB_Device_ProcessControlRequest+0xa2>
     b0c:	18 c1       	rjmp	.+560    	; 0xd3e <USB_Device_ProcessControlRequest+0x2d2>
     b0e:	08 c0       	rjmp	.+16     	; 0xb20 <USB_Device_ProcessControlRequest+0xb4>
     b10:	90 91 26 01 	lds	r25, 0x0126
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     b14:	80 91 27 01 	lds	r24, 0x0127
     b18:	88 23       	and	r24, r24
     b1a:	99 f0       	breq	.+38     	; 0xb42 <USB_Device_ProcessControlRequest+0xd6>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     b1c:	92 60       	ori	r25, 0x02	; 2
     b1e:	11 c0       	rjmp	.+34     	; 0xb42 <USB_Device_ProcessControlRequest+0xd6>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     b20:	80 91 2e 01 	lds	r24, 0x012E
     b24:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     b26:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     b2a:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	25 e0       	ldi	r18, 0x05	; 5
     b32:	96 95       	lsr	r25
     b34:	87 95       	ror	r24
     b36:	2a 95       	dec	r18
     b38:	e1 f7       	brne	.-8      	; 0xb32 <USB_Device_ProcessControlRequest+0xc6>
     b3a:	98 2f       	mov	r25, r24
     b3c:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     b3e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b42:	80 91 e8 00 	lds	r24, 0x00E8
     b46:	87 7f       	andi	r24, 0xF7	; 247
     b48:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     b4c:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
     b50:	10 92 f1 00 	sts	0x00F1, r1
     b54:	d1 c0       	rjmp	.+418    	; 0xcf8 <USB_Device_ProcessControlRequest+0x28c>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b56:	88 23       	and	r24, r24
     b58:	19 f0       	breq	.+6      	; 0xb60 <USB_Device_ProcessControlRequest+0xf4>
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	09 f0       	breq	.+2      	; 0xb60 <USB_Device_ProcessControlRequest+0xf4>
     b5e:	ef c0       	rjmp	.+478    	; 0xd3e <USB_Device_ProcessControlRequest+0x2d2>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	8f 71       	andi	r24, 0x1F	; 31
     b64:	90 70       	andi	r25, 0x00	; 0
     b66:	00 97       	sbiw	r24, 0x00	; 0
     b68:	21 f0       	breq	.+8      	; 0xb72 <USB_Device_ProcessControlRequest+0x106>
     b6a:	02 97       	sbiw	r24, 0x02	; 2
     b6c:	09 f0       	breq	.+2      	; 0xb70 <USB_Device_ProcessControlRequest+0x104>
     b6e:	e7 c0       	rjmp	.+462    	; 0xd3e <USB_Device_ProcessControlRequest+0x2d2>
     b70:	0c c0       	rjmp	.+24     	; 0xb8a <USB_Device_ProcessControlRequest+0x11e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     b72:	80 91 2c 01 	lds	r24, 0x012C
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	09 f0       	breq	.+2      	; 0xb7c <USB_Device_ProcessControlRequest+0x110>
     b7a:	e1 c0       	rjmp	.+450    	; 0xd3e <USB_Device_ProcessControlRequest+0x2d2>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     b7c:	10 92 27 01 	sts	0x0127, r1
     b80:	33 30       	cpi	r19, 0x03	; 3
     b82:	69 f5       	brne	.+90     	; 0xbde <USB_Device_ProcessControlRequest+0x172>
     b84:	80 93 27 01 	sts	0x0127, r24
     b88:	2a c0       	rjmp	.+84     	; 0xbde <USB_Device_ProcessControlRequest+0x172>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     b8a:	80 91 2c 01 	lds	r24, 0x012C
     b8e:	88 23       	and	r24, r24
     b90:	31 f5       	brne	.+76     	; 0xbde <USB_Device_ProcessControlRequest+0x172>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     b92:	20 91 2e 01 	lds	r18, 0x012E
     b96:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     b98:	09 f4       	brne	.+2      	; 0xb9c <USB_Device_ProcessControlRequest+0x130>
     b9a:	d1 c0       	rjmp	.+418    	; 0xd3e <USB_Device_ProcessControlRequest+0x2d2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     b9c:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     ba0:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     ba4:	80 ff       	sbrs	r24, 0
     ba6:	1b c0       	rjmp	.+54     	; 0xbde <USB_Device_ProcessControlRequest+0x172>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     ba8:	33 30       	cpi	r19, 0x03	; 3
     baa:	21 f4       	brne	.+8      	; 0xbb4 <USB_Device_ProcessControlRequest+0x148>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     bac:	80 91 eb 00 	lds	r24, 0x00EB
     bb0:	80 62       	ori	r24, 0x20	; 32
     bb2:	13 c0       	rjmp	.+38     	; 0xbda <USB_Device_ProcessControlRequest+0x16e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     bb4:	80 91 eb 00 	lds	r24, 0x00EB
     bb8:	80 61       	ori	r24, 0x10	; 16
     bba:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <USB_Device_ProcessControlRequest+0x15c>
     bc4:	88 0f       	add	r24, r24
     bc6:	99 1f       	adc	r25, r25
     bc8:	2a 95       	dec	r18
     bca:	e2 f7       	brpl	.-8      	; 0xbc4 <USB_Device_ProcessControlRequest+0x158>
     bcc:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     bd0:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     bd4:	80 91 eb 00 	lds	r24, 0x00EB
     bd8:	88 60       	ori	r24, 0x08	; 8
     bda:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     bde:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     be2:	80 91 e8 00 	lds	r24, 0x00E8
     be6:	87 7f       	andi	r24, 0xF7	; 247
     be8:	8a c0       	rjmp	.+276    	; 0xcfe <USB_Device_ProcessControlRequest+0x292>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     bea:	88 23       	and	r24, r24
     bec:	09 f0       	breq	.+2      	; 0xbf0 <USB_Device_ProcessControlRequest+0x184>
     bee:	a7 c0       	rjmp	.+334    	; 0xd3e <USB_Device_ProcessControlRequest+0x2d2>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
     bf0:	10 91 2c 01 	lds	r17, 0x012C
     bf4:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     bf6:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     bf8:	f8 94       	cli
     bfa:	80 91 e8 00 	lds	r24, 0x00E8
     bfe:	87 7f       	andi	r24, 0xF7	; 247
     c00:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     c04:	66 dc       	rcall	.-1844   	; 0x4d2 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c06:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     c0a:	80 ff       	sbrs	r24, 0
     c0c:	fc cf       	rjmp	.-8      	; 0xc06 <USB_Device_ProcessControlRequest+0x19a>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     c0e:	80 91 e3 00 	lds	r24, 0x00E3
     c12:	80 78       	andi	r24, 0x80	; 128
     c14:	81 2b       	or	r24, r17

				UDADDR = Temp;
     c16:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
     c1a:	80 68       	ori	r24, 0x80	; 128
     c1c:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     c20:	11 23       	and	r17, r17
     c22:	11 f4       	brne	.+4      	; 0xc28 <USB_Device_ProcessControlRequest+0x1bc>
     c24:	82 e0       	ldi	r24, 0x02	; 2
     c26:	01 c0       	rjmp	.+2      	; 0xc2a <USB_Device_ProcessControlRequest+0x1be>
     c28:	83 e0       	ldi	r24, 0x03	; 3
     c2a:	80 93 29 01 	sts	0x0129, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     c2e:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
     c30:	86 c0       	rjmp	.+268    	; 0xd3e <USB_Device_ProcessControlRequest+0x2d2>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     c32:	80 58       	subi	r24, 0x80	; 128
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f0       	brcs	.+2      	; 0xc3a <USB_Device_ProcessControlRequest+0x1ce>
     c38:	82 c0       	rjmp	.+260    	; 0xd3e <USB_Device_ProcessControlRequest+0x2d2>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     c3a:	80 91 2c 01 	lds	r24, 0x012C
     c3e:	90 91 2d 01 	lds	r25, 0x012D
     c42:	23 e0       	ldi	r18, 0x03	; 3
     c44:	8c 3d       	cpi	r24, 0xDC	; 220
     c46:	92 07       	cpc	r25, r18
     c48:	09 f0       	breq	.+2      	; 0xc4c <USB_Device_ProcessControlRequest+0x1e0>
     c4a:	33 c0       	rjmp	.+102    	; 0xcb2 <USB_Device_ProcessControlRequest+0x246>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     c4c:	83 e0       	ldi	r24, 0x03	; 3
     c4e:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     c50:	8a e2       	ldi	r24, 0x2A	; 42
     c52:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     c54:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     c56:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     c58:	de 01       	movw	r26, r28
     c5a:	15 96       	adiw	r26, 0x05	; 5
     c5c:	6e e0       	ldi	r22, 0x0E	; 14
     c5e:	40 e0       	ldi	r20, 0x00	; 0
     c60:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     c62:	11 e2       	ldi	r17, 0x21	; 33
     c64:	e6 2f       	mov	r30, r22
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	10 93 57 00 	sts	0x0057, r17
     c6c:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
     c6e:	40 ff       	sbrs	r20, 0
     c70:	03 c0       	rjmp	.+6      	; 0xc78 <USB_Device_ProcessControlRequest+0x20c>
					{
						SerialByte >>= 4;
     c72:	82 95       	swap	r24
     c74:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
     c76:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     c78:	8f 70       	andi	r24, 0x0F	; 15
     c7a:	28 2f       	mov	r18, r24
     c7c:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     c7e:	8a 30       	cpi	r24, 0x0A	; 10
     c80:	18 f0       	brcs	.+6      	; 0xc88 <USB_Device_ProcessControlRequest+0x21c>
     c82:	c9 01       	movw	r24, r18
     c84:	c7 96       	adiw	r24, 0x37	; 55
     c86:	02 c0       	rjmp	.+4      	; 0xc8c <USB_Device_ProcessControlRequest+0x220>
     c88:	c9 01       	movw	r24, r18
     c8a:	c0 96       	adiw	r24, 0x30	; 48
     c8c:	8d 93       	st	X+, r24
     c8e:	9d 93       	st	X+, r25
     c90:	4f 5f       	subi	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     c94:	44 31       	cpi	r20, 0x14	; 20
     c96:	51 05       	cpc	r21, r1
     c98:	29 f7       	brne	.-54     	; 0xc64 <USB_Device_ProcessControlRequest+0x1f8>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     c9a:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c9c:	80 91 e8 00 	lds	r24, 0x00E8
     ca0:	87 7f       	andi	r24, 0xF7	; 247
     ca2:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     ca6:	ce 01       	movw	r24, r28
     ca8:	03 96       	adiw	r24, 0x03	; 3
     caa:	6a e2       	ldi	r22, 0x2A	; 42
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	8c dd       	rcall	.-1256   	; 0x7c8 <Endpoint_Write_Control_Stream_LE>
     cb0:	12 c0       	rjmp	.+36     	; 0xcd6 <USB_Device_ProcessControlRequest+0x26a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     cb2:	60 91 2e 01 	lds	r22, 0x012E
     cb6:	ae 01       	movw	r20, r28
     cb8:	4f 5f       	subi	r20, 0xFF	; 255
     cba:	5f 4f       	sbci	r21, 0xFF	; 255
     cbc:	87 db       	rcall	.-2290   	; 0x3cc <CALLBACK_USB_GetDescriptor>
     cbe:	bc 01       	movw	r22, r24
     cc0:	00 97       	sbiw	r24, 0x00	; 0
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <USB_Device_ProcessControlRequest+0x25a>
     cc4:	3c c0       	rjmp	.+120    	; 0xd3e <USB_Device_ProcessControlRequest+0x2d2>
     cc6:	80 91 e8 00 	lds	r24, 0x00E8
     cca:	87 7f       	andi	r24, 0xF7	; 247
     ccc:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
     cd2:	9a 81       	ldd	r25, Y+2	; 0x02
     cd4:	18 de       	rcall	.-976    	; 0x906 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     cd6:	80 91 e8 00 	lds	r24, 0x00E8
     cda:	8b 77       	andi	r24, 0x7B	; 123
     cdc:	80 93 e8 00 	sts	0x00E8, r24
     ce0:	2e c0       	rjmp	.+92     	; 0xd3e <USB_Device_ProcessControlRequest+0x2d2>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     ce2:	80 38       	cpi	r24, 0x80	; 128
     ce4:	61 f5       	brne	.+88     	; 0xd3e <USB_Device_ProcessControlRequest+0x2d2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ce6:	80 91 e8 00 	lds	r24, 0x00E8
     cea:	87 7f       	andi	r24, 0xF7	; 247
     cec:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     cf0:	80 91 25 01 	lds	r24, 0x0125
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     cf4:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     cf8:	80 91 e8 00 	lds	r24, 0x00E8
     cfc:	8e 77       	andi	r24, 0x7E	; 126
     cfe:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     d02:	e7 db       	rcall	.-2098   	; 0x4d2 <Endpoint_ClearStatusStage>
     d04:	1c c0       	rjmp	.+56     	; 0xd3e <USB_Device_ProcessControlRequest+0x2d2>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     d06:	88 23       	and	r24, r24
     d08:	d1 f4       	brne	.+52     	; 0xd3e <USB_Device_ProcessControlRequest+0x2d2>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     d0a:	90 91 2c 01 	lds	r25, 0x012C
     d0e:	92 30       	cpi	r25, 0x02	; 2
     d10:	b0 f4       	brcc	.+44     	; 0xd3e <USB_Device_ProcessControlRequest+0x2d2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d12:	80 91 e8 00 	lds	r24, 0x00E8
     d16:	87 7f       	andi	r24, 0xF7	; 247
     d18:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     d1c:	90 93 25 01 	sts	0x0125, r25

	Endpoint_ClearStatusStage();
     d20:	d8 db       	rcall	.-2128   	; 0x4d2 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     d22:	80 91 25 01 	lds	r24, 0x0125
     d26:	88 23       	and	r24, r24
     d28:	31 f4       	brne	.+12     	; 0xd36 <USB_Device_ProcessControlRequest+0x2ca>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     d2a:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     d2e:	87 fd       	sbrc	r24, 7
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <USB_Device_ProcessControlRequest+0x2ca>
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	01 c0       	rjmp	.+2      	; 0xd38 <USB_Device_ProcessControlRequest+0x2cc>
     d36:	84 e0       	ldi	r24, 0x04	; 4
     d38:	80 93 29 01 	sts	0x0129, r24

	EVENT_USB_Device_ConfigurationChanged();
     d3c:	f4 da       	rcall	.-2584   	; 0x326 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d3e:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     d42:	83 ff       	sbrs	r24, 3
     d44:	0a c0       	rjmp	.+20     	; 0xd5a <USB_Device_ProcessControlRequest+0x2ee>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     d46:	80 91 eb 00 	lds	r24, 0x00EB
     d4a:	80 62       	ori	r24, 0x20	; 32
     d4c:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d50:	80 91 e8 00 	lds	r24, 0x00E8
     d54:	87 7f       	andi	r24, 0xF7	; 247
     d56:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
     d5a:	ac 96       	adiw	r28, 0x2c	; 44
     d5c:	0f b6       	in	r0, 0x3f	; 63
     d5e:	f8 94       	cli
     d60:	de bf       	out	0x3e, r29	; 62
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	cd bf       	out	0x3d, r28	; 61
     d66:	cf 91       	pop	r28
     d68:	df 91       	pop	r29
     d6a:	1f 91       	pop	r17
     d6c:	0f 91       	pop	r16
     d6e:	08 95       	ret

00000d70 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     d70:	08 95       	ret

00000d72 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     d72:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
     d74:	80 91 29 01 	lds	r24, 0x0129
     d78:	88 23       	and	r24, r24
     d7a:	61 f0       	breq	.+24     	; 0xd94 <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     d7c:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     d80:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d84:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
     d88:	83 ff       	sbrs	r24, 3
     d8a:	01 c0       	rjmp	.+2      	; 0xd8e <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
     d8c:	6f de       	rcall	.-802    	; 0xa6c <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     d8e:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     d90:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
     d94:	1f 91       	pop	r17
     d96:	08 95       	ret

00000d98 <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     d98:	4f 92       	push	r4
     d9a:	5f 92       	push	r5
     d9c:	6f 92       	push	r6
     d9e:	7f 92       	push	r7
     da0:	8f 92       	push	r8
     da2:	9f 92       	push	r9
     da4:	af 92       	push	r10
     da6:	bf 92       	push	r11
     da8:	cf 92       	push	r12
     daa:	df 92       	push	r13
     dac:	ef 92       	push	r14
     dae:	ff 92       	push	r15
     db0:	0f 93       	push	r16
     db2:	1f 93       	push	r17
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	00 d0       	rcall	.+0      	; 0xdba <HID_Device_USBTask+0x22>
     dba:	0f 92       	push	r0
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
     dc0:	7c 01       	movw	r14, r24
			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);

			Endpoint_ClearIN();
		}
	}
}
     dc2:	6d b6       	in	r6, 0x3d	; 61
     dc4:	7e b6       	in	r7, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
     dc6:	80 91 29 01 	lds	r24, 0x0129
     dca:	84 30       	cpi	r24, 0x04	; 4
     dcc:	09 f0       	breq	.+2      	; 0xdd0 <HID_Device_USBTask+0x38>
     dce:	85 c0       	rjmp	.+266    	; 0xeda <HID_Device_USBTask+0x142>
	  return;

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
     dd0:	f7 01       	movw	r30, r14
     dd2:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     dd4:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     dd8:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsReadWriteAllowed())
     ddc:	85 ff       	sbrs	r24, 5
     dde:	7d c0       	rjmp	.+250    	; 0xeda <HID_Device_USBTask+0x142>
     de0:	5d b6       	in	r5, 0x3d	; 61
     de2:	4e b6       	in	r4, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     de4:	47 81       	ldd	r20, Z+7	; 0x07
     de6:	8d b7       	in	r24, 0x3d	; 61
     de8:	9e b7       	in	r25, 0x3e	; 62
     dea:	84 1b       	sub	r24, r20
     dec:	91 09       	sbc	r25, r1
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	f8 94       	cli
     df2:	9e bf       	out	0x3e, r25	; 62
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	8d bf       	out	0x3d, r24	; 61
     df8:	0d b7       	in	r16, 0x3d	; 61
     dfa:	1e b7       	in	r17, 0x3e	; 62
     dfc:	0f 5f       	subi	r16, 0xFF	; 255
     dfe:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t  ReportID     = 0;
     e00:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
     e02:	1b 82       	std	Y+3, r1	; 0x03
     e04:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
     e06:	c0 2e       	mov	r12, r16
     e08:	91 2e       	mov	r9, r17
     e0a:	c8 01       	movw	r24, r16
     e0c:	60 e0       	ldi	r22, 0x00	; 0
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	50 e0       	ldi	r21, 0x00	; 0
     e12:	04 d2       	rcall	.+1032   	; 0x121c <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
     e14:	c7 01       	movw	r24, r14
     e16:	be 01       	movw	r22, r28
     e18:	6f 5f       	subi	r22, 0xFF	; 255
     e1a:	7f 4f       	sbci	r23, 0xFF	; 255
     e1c:	40 e0       	ldi	r20, 0x00	; 0
     e1e:	98 01       	movw	r18, r16
     e20:	8e 01       	movw	r16, r28
     e22:	0e 5f       	subi	r16, 0xFE	; 254
     e24:	1f 4f       	sbci	r17, 0xFF	; 255
     e26:	08 da       	rcall	.-3056   	; 0x238 <CALLBACK_HID_Device_CreateHIDReport>
     e28:	88 2e       	mov	r8, r24
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
     e2a:	f7 01       	movw	r30, r14
     e2c:	81 85       	ldd	r24, Z+9	; 0x09
     e2e:	92 85       	ldd	r25, Z+10	; 0x0a
     e30:	89 2b       	or	r24, r25
     e32:	19 f4       	brne	.+6      	; 0xe3a <HID_Device_USBTask+0xa2>
     e34:	aa 24       	eor	r10, r10
     e36:	bb 24       	eor	r11, r11
     e38:	0b c0       	rjmp	.+22     	; 0xe50 <HID_Device_USBTask+0xb8>
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	f7 01       	movw	r30, r14
     e3e:	83 85       	ldd	r24, Z+11	; 0x0b
     e40:	94 85       	ldd	r25, Z+12	; 0x0c
     e42:	89 2b       	or	r24, r25
     e44:	09 f0       	breq	.+2      	; 0xe48 <HID_Device_USBTask+0xb0>
     e46:	21 e0       	ldi	r18, 0x01	; 1
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	28 27       	eor	r18, r24
     e4c:	a2 2e       	mov	r10, r18
     e4e:	bb 24       	eor	r11, r11

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     e50:	f7 01       	movw	r30, r14
     e52:	05 81       	ldd	r16, Z+5	; 0x05
     e54:	16 81       	ldd	r17, Z+6	; 0x06
     e56:	01 15       	cp	r16, r1
     e58:	11 05       	cpc	r17, r1
     e5a:	11 f4       	brne	.+4      	; 0xe60 <HID_Device_USBTask+0xc8>
     e5c:	dd 24       	eor	r13, r13
     e5e:	12 c0       	rjmp	.+36     	; 0xe84 <HID_Device_USBTask+0xec>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
     e60:	4a 81       	ldd	r20, Y+2	; 0x02
     e62:	5b 81       	ldd	r21, Y+3	; 0x03
     e64:	8c 2d       	mov	r24, r12
     e66:	99 2d       	mov	r25, r9
     e68:	b8 01       	movw	r22, r16
     e6a:	c2 d1       	rcall	.+900    	; 0x11f0 <memcmp>
     e6c:	dd 24       	eor	r13, r13
     e6e:	00 97       	sbiw	r24, 0x00	; 0
     e70:	11 f0       	breq	.+4      	; 0xe76 <HID_Device_USBTask+0xde>
     e72:	dd 24       	eor	r13, r13
     e74:	d3 94       	inc	r13
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
     e76:	f7 01       	movw	r30, r14
     e78:	47 81       	ldd	r20, Z+7	; 0x07
     e7a:	c8 01       	movw	r24, r16
     e7c:	6c 2d       	mov	r22, r12
     e7e:	79 2d       	mov	r23, r9
     e80:	50 e0       	ldi	r21, 0x00	; 0
     e82:	c3 d1       	rcall	.+902    	; 0x120a <memcpy>
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	9b 81       	ldd	r25, Y+3	; 0x03
     e88:	89 2b       	or	r24, r25
     e8a:	f9 f0       	breq	.+62     	; 0xeca <HID_Device_USBTask+0x132>
     e8c:	88 20       	and	r8, r8
     e8e:	21 f4       	brne	.+8      	; 0xe98 <HID_Device_USBTask+0x100>
     e90:	dd 20       	and	r13, r13
     e92:	11 f4       	brne	.+4      	; 0xe98 <HID_Device_USBTask+0x100>
     e94:	ab 28       	or	r10, r11
     e96:	c9 f0       	breq	.+50     	; 0xeca <HID_Device_USBTask+0x132>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
     e98:	f7 01       	movw	r30, r14
     e9a:	81 85       	ldd	r24, Z+9	; 0x09
     e9c:	92 85       	ldd	r25, Z+10	; 0x0a
     e9e:	94 87       	std	Z+12, r25	; 0x0c
     ea0:	83 87       	std	Z+11, r24	; 0x0b

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
     ea2:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     ea4:	80 93 e9 00 	sts	0x00E9, r24

			if (ReportID)
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	88 23       	and	r24, r24
     eac:	11 f0       	breq	.+4      	; 0xeb2 <HID_Device_USBTask+0x11a>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     eae:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
     eb2:	6a 81       	ldd	r22, Y+2	; 0x02
     eb4:	7b 81       	ldd	r23, Y+3	; 0x03
     eb6:	8c 2d       	mov	r24, r12
     eb8:	99 2d       	mov	r25, r9
     eba:	40 e0       	ldi	r20, 0x00	; 0
     ebc:	50 e0       	ldi	r21, 0x00	; 0
     ebe:	84 dd       	rcall	.-1272   	; 0x9c8 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ec0:	80 91 e8 00 	lds	r24, 0x00E8
     ec4:	8e 77       	andi	r24, 0x7E	; 126
     ec6:	80 93 e8 00 	sts	0x00E8, r24
     eca:	85 2d       	mov	r24, r5
     ecc:	94 2d       	mov	r25, r4
     ece:	9c 01       	movw	r18, r24
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	f8 94       	cli
     ed4:	3e bf       	out	0x3e, r19	; 62
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	2d bf       	out	0x3d, r18	; 61

			Endpoint_ClearIN();
		}
	}
}
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	f8 94       	cli
     ede:	7e be       	out	0x3e, r7	; 62
     ee0:	0f be       	out	0x3f, r0	; 63
     ee2:	6d be       	out	0x3d, r6	; 61
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	cf 91       	pop	r28
     eec:	df 91       	pop	r29
     eee:	1f 91       	pop	r17
     ef0:	0f 91       	pop	r16
     ef2:	ff 90       	pop	r15
     ef4:	ef 90       	pop	r14
     ef6:	df 90       	pop	r13
     ef8:	cf 90       	pop	r12
     efa:	bf 90       	pop	r11
     efc:	af 90       	pop	r10
     efe:	9f 90       	pop	r9
     f00:	8f 90       	pop	r8
     f02:	7f 90       	pop	r7
     f04:	6f 90       	pop	r6
     f06:	5f 90       	pop	r5
     f08:	4f 90       	pop	r4
     f0a:	08 95       	ret

00000f0c <HID_Device_ConfigureEndpoints>:
			break;
	}
}

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	dc 01       	movw	r26, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
     f12:	08 96       	adiw	r24, 0x08	; 8
     f14:	fc 01       	movw	r30, r24
     f16:	85 e0       	ldi	r24, 0x05	; 5
     f18:	ef 01       	movw	r28, r30
     f1a:	19 92       	st	Y+, r1
     f1c:	8a 95       	dec	r24
     f1e:	e9 f7       	brne	.-6      	; 0xf1a <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	18 96       	adiw	r26, 0x08	; 8
     f24:	8c 93       	st	X, r24
     f26:	18 97       	sbiw	r26, 0x08	; 8
	HIDInterfaceInfo->State.IdleCount           = 500;
     f28:	84 ef       	ldi	r24, 0xF4	; 244
     f2a:	91 e0       	ldi	r25, 0x01	; 1
     f2c:	1a 96       	adiw	r26, 0x0a	; 10
     f2e:	9c 93       	st	X, r25
     f30:	8e 93       	st	-X, r24
     f32:	19 97       	sbiw	r26, 0x09	; 9

	if (!(Endpoint_ConfigureEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber, EP_TYPE_INTERRUPT,
     f34:	11 96       	adiw	r26, 0x01	; 1
     f36:	3c 91       	ld	r19, X
     f38:	11 97       	sbiw	r26, 0x01	; 1
     f3a:	12 96       	adiw	r26, 0x02	; 2
     f3c:	6d 91       	ld	r22, X+
     f3e:	7c 91       	ld	r23, X
     f40:	13 97       	sbiw	r26, 0x03	; 3
     f42:	14 96       	adiw	r26, 0x04	; 4
     f44:	8c 91       	ld	r24, X
     f46:	88 23       	and	r24, r24
     f48:	11 f4       	brne	.+4      	; 0xf4e <HID_Device_ConfigureEndpoints+0x42>
     f4a:	40 e0       	ldi	r20, 0x00	; 0
     f4c:	01 c0       	rjmp	.+2      	; 0xf50 <HID_Device_ConfigureEndpoints+0x44>
     f4e:	44 e0       	ldi	r20, 0x04	; 4
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	88 e0       	ldi	r24, 0x08	; 8
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	03 c0       	rjmp	.+6      	; 0xf5e <HID_Device_ConfigureEndpoints+0x52>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     f58:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     f5e:	86 17       	cp	r24, r22
     f60:	97 07       	cpc	r25, r23
     f62:	d0 f3       	brcs	.-12     	; 0xf58 <HID_Device_ConfigureEndpoints+0x4c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     f64:	42 60       	ori	r20, 0x02	; 2
     f66:	22 95       	swap	r18
     f68:	20 7f       	andi	r18, 0xF0	; 240
     f6a:	42 2b       	or	r20, r18
     f6c:	83 2f       	mov	r24, r19
     f6e:	61 ec       	ldi	r22, 0xC1	; 193
     f70:	7b da       	rcall	.-2826   	; 0x468 <Endpoint_ConfigureEndpoint_Prv>
     f72:	81 11       	cpse	r24, r1
     f74:	81 e0       	ldi	r24, 0x01	; 1
	{
		return false;
	}

	return true;
}
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	08 95       	ret

00000f7c <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     f7c:	6f 92       	push	r6
     f7e:	7f 92       	push	r7
     f80:	8f 92       	push	r8
     f82:	9f 92       	push	r9
     f84:	af 92       	push	r10
     f86:	bf 92       	push	r11
     f88:	cf 92       	push	r12
     f8a:	df 92       	push	r13
     f8c:	ef 92       	push	r14
     f8e:	ff 92       	push	r15
     f90:	0f 93       	push	r16
     f92:	1f 93       	push	r17
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	00 d0       	rcall	.+0      	; 0xf9a <HID_Device_ProcessControlRequest+0x1e>
     f9a:	0f 92       	push	r0
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     fa2:	6d b6       	in	r6, 0x3d	; 61
     fa4:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     fa6:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     faa:	83 ff       	sbrs	r24, 3
     fac:	0a c1       	rjmp	.+532    	; 0x11c2 <HID_Device_ProcessControlRequest+0x246>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     fae:	f6 01       	movw	r30, r12
     fb0:	80 81       	ld	r24, Z
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	20 91 2e 01 	lds	r18, 0x012E
     fb8:	30 91 2f 01 	lds	r19, 0x012F
     fbc:	28 17       	cp	r18, r24
     fbe:	39 07       	cpc	r19, r25
     fc0:	09 f0       	breq	.+2      	; 0xfc4 <HID_Device_ProcessControlRequest+0x48>
     fc2:	ff c0       	rjmp	.+510    	; 0x11c2 <HID_Device_ProcessControlRequest+0x246>
	  return;

	switch (USB_ControlRequest.bRequest)
     fc4:	80 91 2b 01 	lds	r24, 0x012B
     fc8:	83 30       	cpi	r24, 0x03	; 3
     fca:	09 f4       	brne	.+2      	; 0xfce <HID_Device_ProcessControlRequest+0x52>
     fcc:	aa c0       	rjmp	.+340    	; 0x1122 <HID_Device_ProcessControlRequest+0x1a6>
     fce:	84 30       	cpi	r24, 0x04	; 4
     fd0:	30 f4       	brcc	.+12     	; 0xfde <HID_Device_ProcessControlRequest+0x62>
     fd2:	81 30       	cpi	r24, 0x01	; 1
     fd4:	71 f0       	breq	.+28     	; 0xff2 <HID_Device_ProcessControlRequest+0x76>
     fd6:	82 30       	cpi	r24, 0x02	; 2
     fd8:	09 f0       	breq	.+2      	; 0xfdc <HID_Device_ProcessControlRequest+0x60>
     fda:	f3 c0       	rjmp	.+486    	; 0x11c2 <HID_Device_ProcessControlRequest+0x246>
     fdc:	da c0       	rjmp	.+436    	; 0x1192 <HID_Device_ProcessControlRequest+0x216>
     fde:	8a 30       	cpi	r24, 0x0A	; 10
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <HID_Device_ProcessControlRequest+0x68>
     fe2:	bf c0       	rjmp	.+382    	; 0x1162 <HID_Device_ProcessControlRequest+0x1e6>
     fe4:	8b 30       	cpi	r24, 0x0B	; 11
     fe6:	09 f4       	brne	.+2      	; 0xfea <HID_Device_ProcessControlRequest+0x6e>
     fe8:	a9 c0       	rjmp	.+338    	; 0x113c <HID_Device_ProcessControlRequest+0x1c0>
     fea:	89 30       	cpi	r24, 0x09	; 9
     fec:	09 f0       	breq	.+2      	; 0xff0 <HID_Device_ProcessControlRequest+0x74>
     fee:	e9 c0       	rjmp	.+466    	; 0x11c2 <HID_Device_ProcessControlRequest+0x246>
     ff0:	55 c0       	rjmp	.+170    	; 0x109c <HID_Device_ProcessControlRequest+0x120>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     ff2:	80 91 2a 01 	lds	r24, 0x012A
     ff6:	81 3a       	cpi	r24, 0xA1	; 161
     ff8:	09 f0       	breq	.+2      	; 0xffc <HID_Device_ProcessControlRequest+0x80>
     ffa:	e3 c0       	rjmp	.+454    	; 0x11c2 <HID_Device_ProcessControlRequest+0x246>
     ffc:	9d b6       	in	r9, 0x3d	; 61
     ffe:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    1000:	1b 82       	std	Y+3, r1	; 0x03
    1002:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1004:	80 91 2c 01 	lds	r24, 0x012C
    1008:	10 91 2d 01 	lds	r17, 0x012D
    100c:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    100e:	f6 01       	movw	r30, r12
    1010:	47 81       	ldd	r20, Z+7	; 0x07
    1012:	8d b7       	in	r24, 0x3d	; 61
    1014:	9e b7       	in	r25, 0x3e	; 62
    1016:	84 1b       	sub	r24, r20
    1018:	91 09       	sbc	r25, r1
    101a:	0f b6       	in	r0, 0x3f	; 63
    101c:	f8 94       	cli
    101e:	9e bf       	out	0x3e, r25	; 62
    1020:	0f be       	out	0x3f, r0	; 63
    1022:	8d bf       	out	0x3d, r24	; 61
    1024:	ed b6       	in	r14, 0x3d	; 61
    1026:	fe b6       	in	r15, 0x3e	; 62
    1028:	08 94       	sec
    102a:	e1 1c       	adc	r14, r1
    102c:	f1 1c       	adc	r15, r1

				memset(ReportData, 0, sizeof(ReportData));
    102e:	be 2c       	mov	r11, r14
    1030:	af 2c       	mov	r10, r15
    1032:	c7 01       	movw	r24, r14
    1034:	60 e0       	ldi	r22, 0x00	; 0
    1036:	70 e0       	ldi	r23, 0x00	; 0
    1038:	50 e0       	ldi	r21, 0x00	; 0
    103a:	f0 d0       	rcall	.+480    	; 0x121c <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    103c:	11 50       	subi	r17, 0x01	; 1
    103e:	c6 01       	movw	r24, r12
    1040:	be 01       	movw	r22, r28
    1042:	6f 5f       	subi	r22, 0xFF	; 255
    1044:	7f 4f       	sbci	r23, 0xFF	; 255
    1046:	41 2f       	mov	r20, r17
    1048:	97 01       	movw	r18, r14
    104a:	8e 01       	movw	r16, r28
    104c:	0e 5f       	subi	r16, 0xFE	; 254
    104e:	1f 4f       	sbci	r17, 0xFF	; 255
    1050:	f3 d8       	rcall	.-3610   	; 0x238 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1052:	f6 01       	movw	r30, r12
    1054:	25 81       	ldd	r18, Z+5	; 0x05
    1056:	36 81       	ldd	r19, Z+6	; 0x06
    1058:	21 15       	cp	r18, r1
    105a:	31 05       	cpc	r19, r1
    105c:	29 f0       	breq	.+10     	; 0x1068 <HID_Device_ProcessControlRequest+0xec>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    105e:	47 81       	ldd	r20, Z+7	; 0x07
    1060:	c9 01       	movw	r24, r18
    1062:	b7 01       	movw	r22, r14
    1064:	50 e0       	ldi	r21, 0x00	; 0
    1066:	d1 d0       	rcall	.+418    	; 0x120a <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1068:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    106c:	80 91 e8 00 	lds	r24, 0x00E8
    1070:	87 7f       	andi	r24, 0xF7	; 247
    1072:	80 93 e8 00 	sts	0x00E8, r24
				}
				
				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1076:	6a 81       	ldd	r22, Y+2	; 0x02
    1078:	7b 81       	ldd	r23, Y+3	; 0x03
    107a:	8b 2d       	mov	r24, r11
    107c:	9a 2d       	mov	r25, r10
    107e:	a4 db       	rcall	.-2232   	; 0x7c8 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1080:	80 91 e8 00 	lds	r24, 0x00E8
    1084:	8b 77       	andi	r24, 0x7B	; 123
    1086:	80 93 e8 00 	sts	0x00E8, r24
    108a:	29 2d       	mov	r18, r9
    108c:	38 2d       	mov	r19, r8
    108e:	c9 01       	movw	r24, r18
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	9e bf       	out	0x3e, r25	; 62
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	8d bf       	out	0x3d, r24	; 61
    109a:	93 c0       	rjmp	.+294    	; 0x11c2 <HID_Device_ProcessControlRequest+0x246>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    109c:	80 91 2a 01 	lds	r24, 0x012A
    10a0:	81 32       	cpi	r24, 0x21	; 33
    10a2:	09 f0       	breq	.+2      	; 0x10a6 <HID_Device_ProcessControlRequest+0x12a>
    10a4:	8e c0       	rjmp	.+284    	; 0x11c2 <HID_Device_ProcessControlRequest+0x246>
    10a6:	9d b6       	in	r9, 0x3d	; 61
    10a8:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    10aa:	00 91 30 01 	lds	r16, 0x0130
    10ae:	10 91 31 01 	lds	r17, 0x0131
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    10b2:	a0 90 2c 01 	lds	r10, 0x012C
    10b6:	b0 90 2d 01 	lds	r11, 0x012D
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    10ba:	8d b7       	in	r24, 0x3d	; 61
    10bc:	9e b7       	in	r25, 0x3e	; 62
    10be:	80 1b       	sub	r24, r16
    10c0:	91 0b       	sbc	r25, r17
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	f8 94       	cli
    10c6:	9e bf       	out	0x3e, r25	; 62
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	8d bf       	out	0x3d, r24	; 61
    10cc:	ed b6       	in	r14, 0x3d	; 61
    10ce:	fe b6       	in	r15, 0x3e	; 62
    10d0:	08 94       	sec
    10d2:	e1 1c       	adc	r14, r1
    10d4:	f1 1c       	adc	r15, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10d6:	80 91 e8 00 	lds	r24, 0x00E8
    10da:	87 7f       	andi	r24, 0xF7	; 247
    10dc:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    10e0:	c7 01       	movw	r24, r14
    10e2:	b8 01       	movw	r22, r16
    10e4:	cf db       	rcall	.-2146   	; 0x884 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10e6:	80 91 e8 00 	lds	r24, 0x00E8
    10ea:	8e 77       	andi	r24, 0x7E	; 126
    10ec:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	aa 20       	and	r10, r10
    10f6:	11 f0       	breq	.+4      	; 0x10fc <HID_Device_ProcessControlRequest+0x180>
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	ba 94       	dec	r11
    10fe:	e8 0e       	add	r14, r24
    1100:	f9 1e       	adc	r15, r25
    1102:	08 1b       	sub	r16, r24
    1104:	19 0b       	sbc	r17, r25
    1106:	c6 01       	movw	r24, r12
    1108:	6a 2d       	mov	r22, r10
    110a:	4b 2d       	mov	r20, r11
    110c:	97 01       	movw	r18, r14
    110e:	f4 d8       	rcall	.-3608   	; 0x2f8 <CALLBACK_HID_Device_ProcessHIDReport>
    1110:	89 2d       	mov	r24, r9
    1112:	98 2d       	mov	r25, r8
    1114:	9c 01       	movw	r18, r24
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	f8 94       	cli
    111a:	3e bf       	out	0x3e, r19	; 62
    111c:	0f be       	out	0x3f, r0	; 63
    111e:	2d bf       	out	0x3d, r18	; 61
    1120:	50 c0       	rjmp	.+160    	; 0x11c2 <HID_Device_ProcessControlRequest+0x246>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1122:	80 91 2a 01 	lds	r24, 0x012A
    1126:	81 3a       	cpi	r24, 0xA1	; 161
    1128:	09 f0       	breq	.+2      	; 0x112c <HID_Device_ProcessControlRequest+0x1b0>
    112a:	4b c0       	rjmp	.+150    	; 0x11c2 <HID_Device_ProcessControlRequest+0x246>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    112c:	80 91 e8 00 	lds	r24, 0x00E8
    1130:	87 7f       	andi	r24, 0xF7	; 247
    1132:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    1136:	f6 01       	movw	r30, r12
    1138:	80 85       	ldd	r24, Z+8	; 0x08
    113a:	3b c0       	rjmp	.+118    	; 0x11b2 <HID_Device_ProcessControlRequest+0x236>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    113c:	80 91 2a 01 	lds	r24, 0x012A
    1140:	81 32       	cpi	r24, 0x21	; 33
    1142:	09 f0       	breq	.+2      	; 0x1146 <HID_Device_ProcessControlRequest+0x1ca>
    1144:	3e c0       	rjmp	.+124    	; 0x11c2 <HID_Device_ProcessControlRequest+0x246>
    1146:	80 91 e8 00 	lds	r24, 0x00E8
    114a:	87 7f       	andi	r24, 0xF7	; 247
    114c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1150:	c0 d9       	rcall	.-3200   	; 0x4d2 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	80 91 2c 01 	lds	r24, 0x012C
    1158:	81 11       	cpse	r24, r1
    115a:	91 e0       	ldi	r25, 0x01	; 1
    115c:	f6 01       	movw	r30, r12
    115e:	90 87       	std	Z+8, r25	; 0x08
    1160:	30 c0       	rjmp	.+96     	; 0x11c2 <HID_Device_ProcessControlRequest+0x246>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1162:	80 91 2a 01 	lds	r24, 0x012A
    1166:	81 32       	cpi	r24, 0x21	; 33
    1168:	61 f5       	brne	.+88     	; 0x11c2 <HID_Device_ProcessControlRequest+0x246>
    116a:	80 91 e8 00 	lds	r24, 0x00E8
    116e:	87 7f       	andi	r24, 0xF7	; 247
    1170:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1174:	ae d9       	rcall	.-3236   	; 0x4d2 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    1176:	80 91 2c 01 	lds	r24, 0x012C
    117a:	90 91 2d 01 	lds	r25, 0x012D
    117e:	80 70       	andi	r24, 0x00	; 0
    1180:	76 e0       	ldi	r23, 0x06	; 6
    1182:	96 95       	lsr	r25
    1184:	87 95       	ror	r24
    1186:	7a 95       	dec	r23
    1188:	e1 f7       	brne	.-8      	; 0x1182 <HID_Device_ProcessControlRequest+0x206>
    118a:	f6 01       	movw	r30, r12
    118c:	92 87       	std	Z+10, r25	; 0x0a
    118e:	81 87       	std	Z+9, r24	; 0x09
    1190:	18 c0       	rjmp	.+48     	; 0x11c2 <HID_Device_ProcessControlRequest+0x246>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1192:	80 91 2a 01 	lds	r24, 0x012A
    1196:	81 3a       	cpi	r24, 0xA1	; 161
    1198:	a1 f4       	brne	.+40     	; 0x11c2 <HID_Device_ProcessControlRequest+0x246>
    119a:	80 91 e8 00 	lds	r24, 0x00E8
    119e:	87 7f       	andi	r24, 0xF7	; 247
    11a0:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    11a4:	f6 01       	movw	r30, r12
    11a6:	81 85       	ldd	r24, Z+9	; 0x09
    11a8:	92 85       	ldd	r25, Z+10	; 0x0a
    11aa:	96 95       	lsr	r25
    11ac:	87 95       	ror	r24
    11ae:	96 95       	lsr	r25
    11b0:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    11b2:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11b6:	80 91 e8 00 	lds	r24, 0x00E8
    11ba:	8e 77       	andi	r24, 0x7E	; 126
    11bc:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    11c0:	88 d9       	rcall	.-3312   	; 0x4d2 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	7e be       	out	0x3e, r7	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	6d be       	out	0x3d, r6	; 61
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	1f 91       	pop	r17
    11d8:	0f 91       	pop	r16
    11da:	ff 90       	pop	r15
    11dc:	ef 90       	pop	r14
    11de:	df 90       	pop	r13
    11e0:	cf 90       	pop	r12
    11e2:	bf 90       	pop	r11
    11e4:	af 90       	pop	r10
    11e6:	9f 90       	pop	r9
    11e8:	8f 90       	pop	r8
    11ea:	7f 90       	pop	r7
    11ec:	6f 90       	pop	r6
    11ee:	08 95       	ret

000011f0 <memcmp>:
    11f0:	fb 01       	movw	r30, r22
    11f2:	dc 01       	movw	r26, r24
    11f4:	04 c0       	rjmp	.+8      	; 0x11fe <memcmp+0xe>
    11f6:	8d 91       	ld	r24, X+
    11f8:	01 90       	ld	r0, Z+
    11fa:	80 19       	sub	r24, r0
    11fc:	21 f4       	brne	.+8      	; 0x1206 <memcmp+0x16>
    11fe:	41 50       	subi	r20, 0x01	; 1
    1200:	50 40       	sbci	r21, 0x00	; 0
    1202:	c8 f7       	brcc	.-14     	; 0x11f6 <memcmp+0x6>
    1204:	88 1b       	sub	r24, r24
    1206:	99 0b       	sbc	r25, r25
    1208:	08 95       	ret

0000120a <memcpy>:
    120a:	fb 01       	movw	r30, r22
    120c:	dc 01       	movw	r26, r24
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <memcpy+0xa>
    1210:	01 90       	ld	r0, Z+
    1212:	0d 92       	st	X+, r0
    1214:	41 50       	subi	r20, 0x01	; 1
    1216:	50 40       	sbci	r21, 0x00	; 0
    1218:	d8 f7       	brcc	.-10     	; 0x1210 <memcpy+0x6>
    121a:	08 95       	ret

0000121c <memset>:
    121c:	dc 01       	movw	r26, r24
    121e:	01 c0       	rjmp	.+2      	; 0x1222 <memset+0x6>
    1220:	6d 93       	st	X+, r22
    1222:	41 50       	subi	r20, 0x01	; 1
    1224:	50 40       	sbci	r21, 0x00	; 0
    1226:	e0 f7       	brcc	.-8      	; 0x1220 <memset+0x4>
    1228:	08 95       	ret

0000122a <_exit>:
    122a:	f8 94       	cli

0000122c <__stop_program>:
    122c:	ff cf       	rjmp	.-2      	; 0x122c <__stop_program>
