
MIDI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000e14  00000ea8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080010a  0080010a  00000eb2  2**0
                  ALLOC
  3 .stab         00000b1c  00000000  00000000  00000eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  000019d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000470  00000000  00000000  00001b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000c69  00000000  00000000  00001faf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007f34  00000000  00000000  00002c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001f95  00000000  00000000  0000ab4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006255  00000000  00000000  0000cae1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006a0  00000000  00000000  00012d38  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003465  00000000  00000000  000133d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000034aa  00000000  00000000  0001683d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000560  00000000  00000000  00019ce7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
   0:	a6 c0       	rjmp	.+332    	; 0x14e <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   2:	00 00       	nop

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
   4:	c1 c0       	rjmp	.+386    	; 0x188 <__bad_interrupt>
   6:	00 00       	nop
   8:	bf c0       	rjmp	.+382    	; 0x188 <__bad_interrupt>
   a:	00 00       	nop
   c:	bd c0       	rjmp	.+378    	; 0x188 <__bad_interrupt>
   e:	00 00       	nop
  10:	bb c0       	rjmp	.+374    	; 0x188 <__bad_interrupt>
  12:	00 00       	nop
  14:	b9 c0       	rjmp	.+370    	; 0x188 <__bad_interrupt>
  16:	00 00       	nop
  18:	b7 c0       	rjmp	.+366    	; 0x188 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b5 c0       	rjmp	.+362    	; 0x188 <__bad_interrupt>
  1e:	00 00       	nop
  20:	b3 c0       	rjmp	.+358    	; 0x188 <__bad_interrupt>
  22:	00 00       	nop
  24:	b1 c0       	rjmp	.+354    	; 0x188 <__bad_interrupt>
  26:	00 00       	nop
  28:	9e c2       	rjmp	.+1340   	; 0x566 <__vector_10>
  2a:	00 00       	nop
  2c:	ad c0       	rjmp	.+346    	; 0x188 <__bad_interrupt>
  2e:	00 00       	nop
  30:	ab c0       	rjmp	.+342    	; 0x188 <__bad_interrupt>
  32:	00 00       	nop
  34:	a9 c0       	rjmp	.+338    	; 0x188 <__bad_interrupt>
  36:	00 00       	nop
  38:	a7 c0       	rjmp	.+334    	; 0x188 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a5 c0       	rjmp	.+330    	; 0x188 <__bad_interrupt>
  3e:	00 00       	nop
  40:	a3 c0       	rjmp	.+326    	; 0x188 <__bad_interrupt>
  42:	00 00       	nop
  44:	a1 c0       	rjmp	.+322    	; 0x188 <__bad_interrupt>
  46:	00 00       	nop
  48:	9f c0       	rjmp	.+318    	; 0x188 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	9d c0       	rjmp	.+314    	; 0x188 <__bad_interrupt>
  4e:	00 00       	nop
  50:	9b c0       	rjmp	.+310    	; 0x188 <__bad_interrupt>
  52:	00 00       	nop
  54:	99 c0       	rjmp	.+306    	; 0x188 <__bad_interrupt>
  56:	00 00       	nop
  58:	97 c0       	rjmp	.+302    	; 0x188 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	95 c0       	rjmp	.+298    	; 0x188 <__bad_interrupt>
  5e:	00 00       	nop
  60:	93 c0       	rjmp	.+294    	; 0x188 <__bad_interrupt>
  62:	00 00       	nop
  64:	91 c0       	rjmp	.+290    	; 0x188 <__bad_interrupt>
  66:	00 00       	nop
  68:	8f c0       	rjmp	.+286    	; 0x188 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	8d c0       	rjmp	.+282    	; 0x188 <__bad_interrupt>
  6e:	00 00       	nop
  70:	8b c0       	rjmp	.+278    	; 0x188 <__bad_interrupt>
  72:	00 00       	nop
  74:	89 c0       	rjmp	.+274    	; 0x188 <__bad_interrupt>
  76:	00 00       	nop
  78:	87 c0       	rjmp	.+270    	; 0x188 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	85 c0       	rjmp	.+266    	; 0x188 <__bad_interrupt>
  7e:	00 00       	nop
  80:	83 c0       	rjmp	.+262    	; 0x188 <__bad_interrupt>
  82:	00 00       	nop
  84:	81 c0       	rjmp	.+258    	; 0x188 <__bad_interrupt>
  86:	00 00       	nop
  88:	7f c0       	rjmp	.+254    	; 0x188 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	7d c0       	rjmp	.+250    	; 0x188 <__bad_interrupt>
  8e:	00 00       	nop
  90:	7b c0       	rjmp	.+246    	; 0x188 <__bad_interrupt>
  92:	00 00       	nop
  94:	79 c0       	rjmp	.+242    	; 0x188 <__bad_interrupt>
  96:	00 00       	nop

00000098 <DeviceDescriptor>:
  98:	12 01 10 01 00 00 00 08 eb 03 48 20 01 00 01 02     ..........H ....
  a8:	00 01                                               ..

000000aa <ConfigurationDescriptor>:
  aa:	09 02 65 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..e.....2.......
  ba:	00 00 09 24 01 00 01 09 00 01 01 09 04 01 00 02     ...$............
  ca:	01 03 00 00 07 24 01 00 01 41 00 06 24 02 01 01     .....$...A..$...
  da:	00 06 24 02 02 02 00 09 24 03 01 03 01 02 01 00     ..$.....$.......
  ea:	09 24 03 02 04 01 01 01 00 09 05 01 02 40 00 01     .$...........@..
  fa:	00 00 05 25 01 01 01 09 05 82 02 40 00 01 00 00     ...%.......@....
 10a:	05 25 01 01 03                                      .%...

0000010f <LanguageString>:
 10f:	04 03 09 04                                         ....

00000113 <ManufacturerString>:
 113:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
 123:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0000012d <ProductString>:
 12d:	1e 03 4c 00 55 00 46 00 41 00 20 00 4d 00 49 00     ..L.U.F.A. .M.I.
 13d:	44 00 49 00 20 00 44 00 65 00 6d 00 6f 00 00 00     D.I. .D.e.m.o...
 14d:	00                                                  .

0000014e <__ctors_end>:
 14e:	11 24       	eor	r1, r1
 150:	1f be       	out	0x3f, r1	; 63
 152:	cf ef       	ldi	r28, 0xFF	; 255
 154:	d0 e2       	ldi	r29, 0x20	; 32
 156:	de bf       	out	0x3e, r29	; 62
 158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
 15a:	11 e0       	ldi	r17, 0x01	; 1
 15c:	a0 e0       	ldi	r26, 0x00	; 0
 15e:	b1 e0       	ldi	r27, 0x01	; 1
 160:	e4 e1       	ldi	r30, 0x14	; 20
 162:	fe e0       	ldi	r31, 0x0E	; 14
 164:	00 e0       	ldi	r16, 0x00	; 0
 166:	0b bf       	out	0x3b, r16	; 59
 168:	02 c0       	rjmp	.+4      	; 0x16e <__do_copy_data+0x14>
 16a:	07 90       	elpm	r0, Z+
 16c:	0d 92       	st	X+, r0
 16e:	aa 30       	cpi	r26, 0x0A	; 10
 170:	b1 07       	cpc	r27, r17
 172:	d9 f7       	brne	.-10     	; 0x16a <__do_copy_data+0x10>

00000174 <__do_clear_bss>:
 174:	11 e0       	ldi	r17, 0x01	; 1
 176:	aa e0       	ldi	r26, 0x0A	; 10
 178:	b1 e0       	ldi	r27, 0x01	; 1
 17a:	01 c0       	rjmp	.+2      	; 0x17e <.do_clear_bss_start>

0000017c <.do_clear_bss_loop>:
 17c:	1d 92       	st	X+, r1

0000017e <.do_clear_bss_start>:
 17e:	a8 31       	cpi	r26, 0x18	; 24
 180:	b1 07       	cpc	r27, r17
 182:	e1 f7       	brne	.-8      	; 0x17c <.do_clear_bss_loop>
 184:	a7 d0       	rcall	.+334    	; 0x2d4 <main>
 186:	44 c6       	rjmp	.+3208   	; 0xe10 <_exit>

00000188 <__bad_interrupt>:
 188:	3b cf       	rjmp	.-394    	; 0x0 <__vectors>

0000018a <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 18a:	8b b1       	in	r24, 0x0b	; 11
 18c:	8f 70       	andi	r24, 0x0F	; 15
 18e:	80 6a       	ori	r24, 0xA0	; 160
 190:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
 192:	08 95       	ret

00000194 <EVENT_USB_Device_Disconnect>:
 194:	8b b1       	in	r24, 0x0b	; 11
 196:	8f 70       	andi	r24, 0x0F	; 15
 198:	80 61       	ori	r24, 0x10	; 16
 19a:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
 19c:	08 95       	ret

0000019e <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	MIDI_Device_ProcessControlRequest(&Keyboard_MIDI_Interface);
}
 19e:	08 95       	ret

000001a0 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= MIDI_Device_ConfigureEndpoints(&Keyboard_MIDI_Interface);
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	fe d5       	rcall	.+3068   	; 0xda2 <MIDI_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 1a6:	80 fd       	sbrc	r24, 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <EVENT_USB_Device_ConfigurationChanged+0xe>
 1aa:	90 e9       	ldi	r25, 0x90	; 144
 1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <EVENT_USB_Device_ConfigurationChanged+0x10>
 1ae:	90 e6       	ldi	r25, 0x60	; 96
 1b0:	8b b1       	in	r24, 0x0b	; 11
 1b2:	8f 70       	andi	r24, 0x0F	; 15
 1b4:	98 2b       	or	r25, r24
 1b6:	9b b9       	out	0x0b, r25	; 11
}
 1b8:	08 95       	ret

000001ba <CheckJoystickMovement>:
	USB_Init();
}

/** Checks for changes in the position of the board joystick, sending MIDI events to the host upon each change. */
void CheckJoystickMovement(void)
{
 1ba:	1f 93       	push	r17
 1bc:	df 93       	push	r29
 1be:	cf 93       	push	r28
 1c0:	00 d0       	rcall	.+0      	; 0x1c2 <CheckJoystickMovement+0x8>
 1c2:	00 d0       	rcall	.+0      	; 0x1c4 <CheckJoystickMovement+0xa>
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
 1c8:	13 b1       	in	r17, 0x03	; 3
 1ca:	8c b1       	in	r24, 0x0c	; 12
 1cc:	80 95       	com	r24
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	80 73       	andi	r24, 0x30	; 48
 1d2:	90 70       	andi	r25, 0x00	; 0
 1d4:	95 95       	asr	r25
 1d6:	87 95       	ror	r24
 1d8:	10 95       	com	r17
 1da:	10 7e       	andi	r17, 0xE0	; 224
 1dc:	18 2b       	or	r17, r24
	uint8_t MIDICommand = 0;
	uint8_t MIDIPitch;

	/* Get current joystick mask, XOR with previous to detect joystick changes */
	uint8_t JoystickStatus  = Joystick_GetStatus();
	uint8_t JoystickChanges = (JoystickStatus ^ PrevJoystickStatus);
 1de:	80 91 0a 01 	lds	r24, 0x010A
 1e2:	81 27       	eor	r24, r17

	/* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 1 */
	uint8_t Channel = ((Buttons_GetStatus() & BUTTONS_BUTTON1) ? MIDI_CHANNEL(10) : MIDI_CHANNEL(1));
 1e4:	62 9b       	sbis	0x0c, 2	; 12
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <CheckJoystickMovement+0x32>
 1e8:	40 e0       	ldi	r20, 0x00	; 0
 1ea:	01 c0       	rjmp	.+2      	; 0x1ee <CheckJoystickMovement+0x34>
 1ec:	49 e0       	ldi	r20, 0x09	; 9

	if (JoystickChanges & JOY_LEFT)
 1ee:	38 2f       	mov	r19, r24
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	86 ff       	sbrs	r24, 6
 1f4:	05 c0       	rjmp	.+10     	; 0x200 <CheckJoystickMovement+0x46>
	{
		MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 1f6:	16 fd       	sbrc	r17, 6
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <CheckJoystickMovement+0x44>
 1fa:	90 e8       	ldi	r25, 0x80	; 128
 1fc:	01 c0       	rjmp	.+2      	; 0x200 <CheckJoystickMovement+0x46>
 1fe:	90 e9       	ldi	r25, 0x90	; 144
		MIDIPitch   = 0x3C;
	}

	if (JoystickChanges & JOY_UP)
 200:	87 fd       	sbrc	r24, 7
 202:	02 c0       	rjmp	.+4      	; 0x208 <CheckJoystickMovement+0x4e>
 204:	2c e3       	ldi	r18, 0x3C	; 60
 206:	06 c0       	rjmp	.+12     	; 0x214 <CheckJoystickMovement+0x5a>
	{
		MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 208:	17 fd       	sbrc	r17, 7
 20a:	02 c0       	rjmp	.+4      	; 0x210 <CheckJoystickMovement+0x56>
 20c:	90 e8       	ldi	r25, 0x80	; 128
 20e:	01 c0       	rjmp	.+2      	; 0x212 <CheckJoystickMovement+0x58>
 210:	90 e9       	ldi	r25, 0x90	; 144
 212:	2d e3       	ldi	r18, 0x3D	; 61
		MIDIPitch   = 0x3D;
	}

	if (JoystickChanges & JOY_RIGHT)
 214:	33 ff       	sbrs	r19, 3
 216:	06 c0       	rjmp	.+12     	; 0x224 <CheckJoystickMovement+0x6a>
	{
		MIDICommand = ((JoystickStatus & JOY_RIGHT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 218:	13 fd       	sbrc	r17, 3
 21a:	02 c0       	rjmp	.+4      	; 0x220 <CheckJoystickMovement+0x66>
 21c:	90 e8       	ldi	r25, 0x80	; 128
 21e:	01 c0       	rjmp	.+2      	; 0x222 <CheckJoystickMovement+0x68>
 220:	90 e9       	ldi	r25, 0x90	; 144
 222:	2e e3       	ldi	r18, 0x3E	; 62
		MIDIPitch   = 0x3E;
	}

	if (JoystickChanges & JOY_DOWN)
 224:	34 ff       	sbrs	r19, 4
 226:	06 c0       	rjmp	.+12     	; 0x234 <CheckJoystickMovement+0x7a>
	{
		MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 228:	14 fd       	sbrc	r17, 4
 22a:	02 c0       	rjmp	.+4      	; 0x230 <CheckJoystickMovement+0x76>
 22c:	90 e8       	ldi	r25, 0x80	; 128
 22e:	01 c0       	rjmp	.+2      	; 0x232 <CheckJoystickMovement+0x78>
 230:	90 e9       	ldi	r25, 0x90	; 144
 232:	2f e3       	ldi	r18, 0x3F	; 63
		MIDIPitch   = 0x3F;
	}

	if (JoystickChanges & JOY_PRESS)
 234:	35 ff       	sbrs	r19, 5
 236:	04 c0       	rjmp	.+8      	; 0x240 <CheckJoystickMovement+0x86>
	{
		MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 238:	15 ff       	sbrs	r17, 5
 23a:	20 c0       	rjmp	.+64     	; 0x27c <CheckJoystickMovement+0xc2>
 23c:	90 e9       	ldi	r25, 0x90	; 144
 23e:	1f c0       	rjmp	.+62     	; 0x27e <CheckJoystickMovement+0xc4>
		MIDIPitch   = 0x3B;
	}

	if (MIDICommand)
 240:	99 23       	and	r25, r25
 242:	91 f0       	breq	.+36     	; 0x268 <CheckJoystickMovement+0xae>
				.Command     = (MIDICommand >> 4),

				.Data1       = MIDICommand | Channel,
				.Data2       = MIDIPitch,
				.Data3       = MIDI_STANDARD_VELOCITY,
			};
 244:	89 2f       	mov	r24, r25
 246:	82 95       	swap	r24
 248:	8f 70       	andi	r24, 0x0F	; 15
 24a:	89 83       	std	Y+1, r24	; 0x01
 24c:	94 2b       	or	r25, r20
 24e:	9a 83       	std	Y+2, r25	; 0x02
 250:	2b 83       	std	Y+3, r18	; 0x03
 252:	80 e4       	ldi	r24, 0x40	; 64
 254:	8c 83       	std	Y+4, r24	; 0x04

		MIDI_Device_SendEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent);
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	be 01       	movw	r22, r28
 25c:	6f 5f       	subi	r22, 0xFF	; 255
 25e:	7f 4f       	sbci	r23, 0xFF	; 255
 260:	82 d5       	rcall	.+2820   	; 0xd66 <MIDI_Device_SendEventPacket>
		MIDI_Device_Flush(&Keyboard_MIDI_Interface);
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	5f d5       	rcall	.+2750   	; 0xd26 <MIDI_Device_Flush>
	}

	PrevJoystickStatus = JoystickStatus;
 268:	10 93 0a 01 	sts	0x010A, r17
}
 26c:	0f 90       	pop	r0
 26e:	0f 90       	pop	r0
 270:	0f 90       	pop	r0
 272:	0f 90       	pop	r0
 274:	cf 91       	pop	r28
 276:	df 91       	pop	r29
 278:	1f 91       	pop	r17
 27a:	08 95       	ret
 27c:	90 e8       	ldi	r25, 0x80	; 128
 27e:	2b e3       	ldi	r18, 0x3B	; 59
 280:	e1 cf       	rjmp	.-62     	; 0x244 <CheckJoystickMovement+0x8a>

00000282 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 282:	84 b7       	in	r24, 0x34	; 52
 284:	87 7f       	andi	r24, 0xF7	; 247
 286:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 288:	88 e1       	ldi	r24, 0x18	; 24
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	f8 94       	cli
 28e:	80 93 60 00 	sts	0x0060, r24
 292:	10 92 60 00 	sts	0x0060, r1
 296:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	80 e8       	ldi	r24, 0x80	; 128
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	f8 94       	cli
 2a0:	80 93 61 00 	sts	0x0061, r24
 2a4:	90 93 61 00 	sts	0x0061, r25
 2a8:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
 2aa:	84 b1       	in	r24, 0x04	; 4
 2ac:	8f 71       	andi	r24, 0x1F	; 31
 2ae:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
 2b0:	8d b1       	in	r24, 0x0d	; 13
 2b2:	8f 7c       	andi	r24, 0xCF	; 207
 2b4:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
 2b6:	85 b1       	in	r24, 0x05	; 5
 2b8:	80 6e       	ori	r24, 0xE0	; 224
 2ba:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
 2bc:	8e b1       	in	r24, 0x0e	; 14
 2be:	80 63       	ori	r24, 0x30	; 48
 2c0:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 2c2:	8a b1       	in	r24, 0x0a	; 10
 2c4:	80 6f       	ori	r24, 0xF0	; 240
 2c6:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 2c8:	8b b1       	in	r24, 0x0b	; 11
 2ca:	8f 70       	andi	r24, 0x0F	; 15
 2cc:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
 2ce:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
 2d0:	72 9a       	sbi	0x0e, 2	; 14
	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	Buttons_Init();
	USB_Init();
}
 2d2:	33 c1       	rjmp	.+614    	; 0x53a <USB_Init>

000002d4 <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
 2d4:	0f 93       	push	r16
 2d6:	1f 93       	push	r17
 2d8:	df 93       	push	r29
 2da:	cf 93       	push	r28
 2dc:	00 d0       	rcall	.+0      	; 0x2de <main+0xa>
 2de:	00 d0       	rcall	.+0      	; 0x2e0 <main+0xc>
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
	SetupHardware();
 2e4:	ce df       	rcall	.-100    	; 0x282 <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 2e6:	8b b1       	in	r24, 0x0b	; 11
 2e8:	8f 70       	andi	r24, 0x0F	; 15
 2ea:	80 61       	ori	r24, 0x10	; 16
 2ec:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
 2ee:	78 94       	sei
	for (;;)
	{
		CheckJoystickMovement();

		MIDI_EventPacket_t ReceivedMIDIEvent;
		while (MIDI_Device_ReceiveEventPacket(&Keyboard_MIDI_Interface, &ReceivedMIDIEvent))
 2f0:	8e 01       	movw	r16, r28
 2f2:	0f 5f       	subi	r16, 0xFF	; 255
 2f4:	1f 4f       	sbci	r17, 0xFF	; 255
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();

	for (;;)
	{
		CheckJoystickMovement();
 2f6:	61 df       	rcall	.-318    	; 0x1ba <CheckJoystickMovement>
 2f8:	15 c0       	rjmp	.+42     	; 0x324 <main+0x50>

		MIDI_EventPacket_t ReceivedMIDIEvent;
		while (MIDI_Device_ReceiveEventPacket(&Keyboard_MIDI_Interface, &ReceivedMIDIEvent))
		{
			if ((ReceivedMIDIEvent.Command == (MIDI_COMMAND_NOTE_ON >> 4)) && (ReceivedMIDIEvent.Data3 > 0))
 2fa:	89 81       	ldd	r24, Y+1	; 0x01
 2fc:	8f 70       	andi	r24, 0x0F	; 15
 2fe:	89 30       	cpi	r24, 0x09	; 9
 300:	71 f4       	brne	.+28     	; 0x31e <main+0x4a>
 302:	8c 81       	ldd	r24, Y+4	; 0x04
 304:	88 23       	and	r24, r24
 306:	59 f0       	breq	.+22     	; 0x31e <main+0x4a>
			  LEDs_SetAllLEDs(ReceivedMIDIEvent.Data2 > 64 ? LEDS_LED1 : LEDS_LED2);
 308:	8b 81       	ldd	r24, Y+3	; 0x03
 30a:	81 34       	cpi	r24, 0x41	; 65
 30c:	10 f4       	brcc	.+4      	; 0x312 <main+0x3e>
 30e:	90 e2       	ldi	r25, 0x20	; 32
 310:	01 c0       	rjmp	.+2      	; 0x314 <main+0x40>
 312:	90 e1       	ldi	r25, 0x10	; 16
 314:	8b b1       	in	r24, 0x0b	; 11
 316:	8f 70       	andi	r24, 0x0F	; 15
 318:	98 2b       	or	r25, r24
 31a:	9b b9       	out	0x0b, r25	; 11
 31c:	03 c0       	rjmp	.+6      	; 0x324 <main+0x50>
 31e:	8b b1       	in	r24, 0x0b	; 11
 320:	8f 70       	andi	r24, 0x0F	; 15
 322:	8b b9       	out	0x0b, r24	; 11
	for (;;)
	{
		CheckJoystickMovement();

		MIDI_EventPacket_t ReceivedMIDIEvent;
		while (MIDI_Device_ReceiveEventPacket(&Keyboard_MIDI_Interface, &ReceivedMIDIEvent))
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	b8 01       	movw	r22, r16
 32a:	de d4       	rcall	.+2492   	; 0xce8 <MIDI_Device_ReceiveEventPacket>
 32c:	88 23       	and	r24, r24
 32e:	29 f7       	brne	.-54     	; 0x2fa <main+0x26>
			  LEDs_SetAllLEDs(ReceivedMIDIEvent.Data2 > 64 ? LEDS_LED1 : LEDS_LED2);
			else
			  LEDs_SetAllLEDs(LEDS_NO_LEDS);
		}

		MIDI_Device_USBTask(&Keyboard_MIDI_Interface);
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	10 d5       	rcall	.+2592   	; 0xd56 <MIDI_Device_USBTask>
		USB_USBTask();
 336:	c5 d4       	rcall	.+2442   	; 0xcc2 <USB_USBTask>
 338:	de cf       	rjmp	.-68     	; 0x2f6 <main+0x22>

0000033a <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
 33a:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 33c:	92 30       	cpi	r25, 0x02	; 2
 33e:	49 f0       	breq	.+18     	; 0x352 <CALLBACK_USB_GetDescriptor+0x18>
 340:	93 30       	cpi	r25, 0x03	; 3
 342:	61 f0       	breq	.+24     	; 0x35c <CALLBACK_USB_GetDescriptor+0x22>
 344:	91 30       	cpi	r25, 0x01	; 1
 346:	f9 f4       	brne	.+62     	; 0x386 <CALLBACK_USB_GetDescriptor+0x4c>
 348:	e8 e9       	ldi	r30, 0x98	; 152
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	22 e1       	ldi	r18, 0x12	; 18
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	1e c0       	rjmp	.+60     	; 0x38e <CALLBACK_USB_GetDescriptor+0x54>
 352:	ea ea       	ldi	r30, 0xAA	; 170
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	25 e6       	ldi	r18, 0x65	; 101
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	19 c0       	rjmp	.+50     	; 0x38e <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	49 f0       	breq	.+18     	; 0x372 <CALLBACK_USB_GetDescriptor+0x38>
 360:	81 30       	cpi	r24, 0x01	; 1
 362:	18 f0       	brcs	.+6      	; 0x36a <CALLBACK_USB_GetDescriptor+0x30>
 364:	82 30       	cpi	r24, 0x02	; 2
 366:	79 f4       	brne	.+30     	; 0x386 <CALLBACK_USB_GetDescriptor+0x4c>
 368:	08 c0       	rjmp	.+16     	; 0x37a <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 36a:	ef e0       	ldi	r30, 0x0F	; 15
 36c:	f1 e0       	ldi	r31, 0x01	; 1
 36e:	84 91       	lpm	r24, Z+
 370:	07 c0       	rjmp	.+14     	; 0x380 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 372:	e3 e1       	ldi	r30, 0x13	; 19
 374:	f1 e0       	ldi	r31, 0x01	; 1
 376:	84 91       	lpm	r24, Z+
 378:	03 c0       	rjmp	.+6      	; 0x380 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 37a:	ed e2       	ldi	r30, 0x2D	; 45
 37c:	f1 e0       	ldi	r31, 0x01	; 1
 37e:	84 91       	lpm	r24, Z+
 380:	28 2f       	mov	r18, r24
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	04 c0       	rjmp	.+8      	; 0x38e <CALLBACK_USB_GetDescriptor+0x54>
 386:	e0 e0       	ldi	r30, 0x00	; 0
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	20 e0       	ldi	r18, 0x00	; 0
 38c:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 38e:	ed 93       	st	X+, r30
 390:	fc 93       	st	X, r31
	return Size;
}
 392:	c9 01       	movw	r24, r18
 394:	08 95       	ret

00000396 <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
 396:	38 2f       	mov	r19, r24
 398:	28 2f       	mov	r18, r24
 39a:	2c c0       	rjmp	.+88     	; 0x3f4 <Endpoint_ConfigureEndpoint_Prv+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 39c:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);
		
		if (EPNum == Number)
 3a0:	23 17       	cp	r18, r19
 3a2:	21 f4       	brne	.+8      	; 0x3ac <Endpoint_ConfigureEndpoint_Prv+0x16>
 3a4:	76 2f       	mov	r23, r22
 3a6:	94 2f       	mov	r25, r20
 3a8:	50 e0       	ldi	r21, 0x00	; 0
 3aa:	06 c0       	rjmp	.+12     	; 0x3b8 <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 3ac:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 3b0:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
 3b4:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 3b8:	91 ff       	sbrs	r25, 1
 3ba:	1b c0       	rjmp	.+54     	; 0x3f2 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 3bc:	80 91 eb 00 	lds	r24, 0x00EB
 3c0:	8e 7f       	andi	r24, 0xFE	; 254
 3c2:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 3c6:	80 91 ed 00 	lds	r24, 0x00ED
 3ca:	8d 7f       	andi	r24, 0xFD	; 253
 3cc:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 3d0:	80 91 eb 00 	lds	r24, 0x00EB
 3d4:	81 60       	ori	r24, 0x01	; 1
 3d6:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 3da:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 3de:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
 3e2:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 3e6:	80 91 ee 00 	lds	r24, 0x00EE
			
		if (!(Endpoint_IsConfigured()))
 3ea:	87 fd       	sbrc	r24, 7
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <Endpoint_ConfigureEndpoint_Prv+0x5c>
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else	
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 3f2:	2f 5f       	subi	r18, 0xFF	; 255
 3f4:	27 30       	cpi	r18, 0x07	; 7
 3f6:	90 f2       	brcs	.-92     	; 0x39c <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 3f8:	30 93 e9 00 	sts	0x00E9, r19
 3fc:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 3fe:	08 95       	ret

00000400 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 400:	80 91 10 01 	lds	r24, 0x0110
 404:	88 23       	and	r24, r24
 406:	9c f4       	brge	.+38     	; 0x42e <Endpoint_ClearStatusStage+0x2e>
 408:	04 c0       	rjmp	.+8      	; 0x412 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 40a:	80 91 0f 01 	lds	r24, 0x010F
 40e:	88 23       	and	r24, r24
 410:	b9 f0       	breq	.+46     	; 0x440 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 412:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 416:	82 ff       	sbrs	r24, 2
 418:	f8 cf       	rjmp	.-16     	; 0x40a <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 41a:	80 91 e8 00 	lds	r24, 0x00E8
 41e:	8b 77       	andi	r24, 0x7B	; 123
 420:	80 93 e8 00 	sts	0x00E8, r24
 424:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 426:	80 91 0f 01 	lds	r24, 0x010F
 42a:	88 23       	and	r24, r24
 42c:	49 f0       	breq	.+18     	; 0x440 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 42e:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 432:	80 ff       	sbrs	r24, 0
 434:	f8 cf       	rjmp	.-16     	; 0x426 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 436:	80 91 e8 00 	lds	r24, 0x00E8
 43a:	8e 77       	andi	r24, 0x7E	; 126
 43c:	80 93 e8 00 	sts	0x00E8, r24
 440:	08 95       	ret

00000442 <Endpoint_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 442:	40 91 e4 00 	lds	r20, 0x00E4
 446:	50 91 e5 00 	lds	r21, 0x00E5
 44a:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
 44c:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 450:	80 78       	andi	r24, 0x80	; 128
 452:	80 38       	cpi	r24, 0x80	; 128
 454:	29 f4       	brne	.+10     	; 0x460 <Endpoint_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 456:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
 45a:	80 ff       	sbrs	r24, 0
 45c:	05 c0       	rjmp	.+10     	; 0x468 <Endpoint_WaitUntilReady+0x26>
 45e:	22 c0       	rjmp	.+68     	; 0x4a4 <Endpoint_WaitUntilReady+0x62>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 460:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 464:	82 fd       	sbrc	r24, 2
 466:	1e c0       	rjmp	.+60     	; 0x4a4 <Endpoint_WaitUntilReady+0x62>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 468:	80 91 0f 01 	lds	r24, 0x010F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 46c:	88 23       	and	r24, r24
 46e:	11 f4       	brne	.+4      	; 0x474 <Endpoint_WaitUntilReady+0x32>
 470:	82 e0       	ldi	r24, 0x02	; 2
 472:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 474:	85 30       	cpi	r24, 0x05	; 5
 476:	11 f4       	brne	.+4      	; 0x47c <Endpoint_WaitUntilReady+0x3a>
 478:	83 e0       	ldi	r24, 0x03	; 3
 47a:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 47c:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 480:	85 ff       	sbrs	r24, 5
 482:	02 c0       	rjmp	.+4      	; 0x488 <Endpoint_WaitUntilReady+0x46>
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	08 95       	ret
 488:	80 91 e4 00 	lds	r24, 0x00E4
 48c:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 490:	84 17       	cp	r24, r20
 492:	95 07       	cpc	r25, r21
 494:	d9 f2       	breq	.-74     	; 0x44c <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 496:	22 23       	and	r18, r18
 498:	11 f4       	brne	.+4      	; 0x49e <Endpoint_WaitUntilReady+0x5c>
 49a:	84 e0       	ldi	r24, 0x04	; 4
 49c:	08 95       	ret
 49e:	21 50       	subi	r18, 0x01	; 1
 4a0:	ac 01       	movw	r20, r24
 4a2:	d4 cf       	rjmp	.-88     	; 0x44c <Endpoint_WaitUntilReady+0xa>
 4a4:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 4a6:	08 95       	ret

000004a8 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
 4a8:	ef 92       	push	r14
 4aa:	ff 92       	push	r15
 4ac:	0f 93       	push	r16
 4ae:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 4b0:	4d d0       	rcall	.+154    	; 0x54c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 4b2:	54 d0       	rcall	.+168    	; 0x55c <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 4b4:	08 ed       	ldi	r16, 0xD8	; 216
 4b6:	10 e0       	ldi	r17, 0x00	; 0
 4b8:	f8 01       	movw	r30, r16
 4ba:	80 81       	ld	r24, Z
 4bc:	8f 77       	andi	r24, 0x7F	; 127
 4be:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
 4c0:	80 81       	ld	r24, Z
 4c2:	80 68       	ori	r24, 0x80	; 128
 4c4:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 4c6:	80 81       	ld	r24, Z
 4c8:	8f 7d       	andi	r24, 0xDF	; 223
 4ca:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 4cc:	e7 ed       	ldi	r30, 0xD7	; 215
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	80 81       	ld	r24, Z
 4d2:	80 68       	ori	r24, 0x80	; 128
 4d4:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 4d6:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 4d8:	10 92 0f 01 	sts	0x010F, r1
	USB_Device_ConfigurationNumber  = 0;
 4dc:	10 92 0b 01 	sts	0x010B, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 4e0:	10 92 0d 01 	sts	0x010D, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 4e4:	10 92 0c 01 	sts	0x010C, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 4e8:	80 ee       	ldi	r24, 0xE0	; 224
 4ea:	e8 2e       	mov	r14, r24
 4ec:	f1 2c       	mov	r15, r1
 4ee:	f7 01       	movw	r30, r14
 4f0:	80 81       	ld	r24, Z
 4f2:	8b 7f       	andi	r24, 0xFB	; 251
 4f4:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 4f6:	f8 01       	movw	r30, r16
 4f8:	80 81       	ld	r24, Z
 4fa:	81 60       	ori	r24, 0x01	; 1
 4fc:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	60 e0       	ldi	r22, 0x00	; 0
 502:	42 e0       	ldi	r20, 0x02	; 2
 504:	48 df       	rcall	.-368    	; 0x396 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 506:	e1 ee       	ldi	r30, 0xE1	; 225
 508:	f0 e0       	ldi	r31, 0x00	; 0
 50a:	80 81       	ld	r24, Z
 50c:	8e 7f       	andi	r24, 0xFE	; 254
 50e:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 510:	e2 ee       	ldi	r30, 0xE2	; 226
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	80 81       	ld	r24, Z
 516:	81 60       	ori	r24, 0x01	; 1
 518:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 51a:	80 81       	ld	r24, Z
 51c:	88 60       	ori	r24, 0x08	; 8
 51e:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 520:	f7 01       	movw	r30, r14
 522:	80 81       	ld	r24, Z
 524:	8e 7f       	andi	r24, 0xFE	; 254
 526:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 528:	f8 01       	movw	r30, r16
 52a:	80 81       	ld	r24, Z
 52c:	80 61       	ori	r24, 0x10	; 16
 52e:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 530:	1f 91       	pop	r17
 532:	0f 91       	pop	r16
 534:	ff 90       	pop	r15
 536:	ef 90       	pop	r14
 538:	08 95       	ret

0000053a <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 53a:	e7 ed       	ldi	r30, 0xD7	; 215
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	80 81       	ld	r24, Z
 540:	81 60       	ori	r24, 0x01	; 1
 542:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	80 93 0e 01 	sts	0x010E, r24

	USB_ResetInterface();
}
 54a:	ae cf       	rjmp	.-164    	; 0x4a8 <USB_ResetInterface>

0000054c <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 54c:	e8 ed       	ldi	r30, 0xD8	; 216
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	80 81       	ld	r24, Z
 552:	8c 7f       	andi	r24, 0xFC	; 252
 554:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 556:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 55a:	08 95       	ret

0000055c <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 55c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 560:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 564:	08 95       	ret

00000566 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 566:	1f 92       	push	r1
 568:	0f 92       	push	r0
 56a:	0f b6       	in	r0, 0x3f	; 63
 56c:	0f 92       	push	r0
 56e:	0b b6       	in	r0, 0x3b	; 59
 570:	0f 92       	push	r0
 572:	11 24       	eor	r1, r1
 574:	2f 93       	push	r18
 576:	3f 93       	push	r19
 578:	4f 93       	push	r20
 57a:	5f 93       	push	r21
 57c:	6f 93       	push	r22
 57e:	7f 93       	push	r23
 580:	8f 93       	push	r24
 582:	9f 93       	push	r25
 584:	af 93       	push	r26
 586:	bf 93       	push	r27
 588:	ef 93       	push	r30
 58a:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 58c:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 590:	82 ff       	sbrs	r24, 2
 592:	0a c0       	rjmp	.+20     	; 0x5a8 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 594:	80 91 e2 00 	lds	r24, 0x00E2
 598:	82 ff       	sbrs	r24, 2
 59a:	06 c0       	rjmp	.+12     	; 0x5a8 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 59c:	80 91 e1 00 	lds	r24, 0x00E1
 5a0:	8b 7f       	andi	r24, 0xFB	; 251
 5a2:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 5a6:	8c d3       	rcall	.+1816   	; 0xcc0 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 5a8:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 5ac:	80 ff       	sbrs	r24, 0
 5ae:	1d c0       	rjmp	.+58     	; 0x5ea <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 5b0:	80 91 d8 00 	lds	r24, 0x00D8
 5b4:	80 ff       	sbrs	r24, 0
 5b6:	19 c0       	rjmp	.+50     	; 0x5ea <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 5b8:	80 91 da 00 	lds	r24, 0x00DA
 5bc:	8e 7f       	andi	r24, 0xFE	; 254
 5be:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 5c2:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 5c6:	80 ff       	sbrs	r24, 0
 5c8:	0c c0       	rjmp	.+24     	; 0x5e2 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 5ca:	8c e0       	ldi	r24, 0x0C	; 12
 5cc:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 5ce:	8e e0       	ldi	r24, 0x0E	; 14
 5d0:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 5d2:	09 b4       	in	r0, 0x29	; 41
 5d4:	00 fe       	sbrs	r0, 0
 5d6:	fd cf       	rjmp	.-6      	; 0x5d2 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	80 93 0f 01 	sts	0x010F, r24
			EVENT_USB_Device_Connect();
 5de:	d5 dd       	rcall	.-1110   	; 0x18a <EVENT_USB_Device_Connect>
 5e0:	04 c0       	rjmp	.+8      	; 0x5ea <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 5e2:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 5e4:	10 92 0f 01 	sts	0x010F, r1
			EVENT_USB_Device_Disconnect();
 5e8:	d5 dd       	rcall	.-1110   	; 0x194 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 5ea:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 5ee:	80 ff       	sbrs	r24, 0
 5f0:	18 c0       	rjmp	.+48     	; 0x622 <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 5f2:	80 91 e2 00 	lds	r24, 0x00E2
 5f6:	80 ff       	sbrs	r24, 0
 5f8:	14 c0       	rjmp	.+40     	; 0x622 <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 5fa:	80 91 e2 00 	lds	r24, 0x00E2
 5fe:	8e 7f       	andi	r24, 0xFE	; 254
 600:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 604:	80 91 e2 00 	lds	r24, 0x00E2
 608:	80 61       	ori	r24, 0x10	; 16
 60a:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 60e:	80 91 d8 00 	lds	r24, 0x00D8
 612:	80 62       	ori	r24, 0x20	; 32
 614:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 618:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 61a:	85 e0       	ldi	r24, 0x05	; 5
 61c:	80 93 0f 01 	sts	0x010F, r24
		EVENT_USB_Device_Suspend();
 620:	4f d3       	rcall	.+1694   	; 0xcc0 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 622:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 626:	84 ff       	sbrs	r24, 4
 628:	2d c0       	rjmp	.+90     	; 0x684 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 62a:	80 91 e2 00 	lds	r24, 0x00E2
 62e:	84 ff       	sbrs	r24, 4
 630:	29 c0       	rjmp	.+82     	; 0x684 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 632:	8c e0       	ldi	r24, 0x0C	; 12
 634:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 636:	8e e0       	ldi	r24, 0x0E	; 14
 638:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 63a:	09 b4       	in	r0, 0x29	; 41
 63c:	00 fe       	sbrs	r0, 0
 63e:	fd cf       	rjmp	.-6      	; 0x63a <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 640:	80 91 d8 00 	lds	r24, 0x00D8
 644:	8f 7d       	andi	r24, 0xDF	; 223
 646:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 64a:	80 91 e1 00 	lds	r24, 0x00E1
 64e:	8f 7e       	andi	r24, 0xEF	; 239
 650:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 654:	80 91 e2 00 	lds	r24, 0x00E2
 658:	8f 7e       	andi	r24, 0xEF	; 239
 65a:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 65e:	80 91 e2 00 	lds	r24, 0x00E2
 662:	81 60       	ori	r24, 0x01	; 1
 664:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 668:	80 91 0b 01 	lds	r24, 0x010B
 66c:	88 23       	and	r24, r24
 66e:	31 f4       	brne	.+12     	; 0x67c <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 670:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 674:	87 fd       	sbrc	r24, 7
 676:	02 c0       	rjmp	.+4      	; 0x67c <__vector_10+0x116>
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	01 c0       	rjmp	.+2      	; 0x67e <__vector_10+0x118>
 67c:	84 e0       	ldi	r24, 0x04	; 4
 67e:	80 93 0f 01 	sts	0x010F, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 682:	1e d3       	rcall	.+1596   	; 0xcc0 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 684:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 688:	83 ff       	sbrs	r24, 3
 68a:	22 c0       	rjmp	.+68     	; 0x6d0 <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 68c:	80 91 e2 00 	lds	r24, 0x00E2
 690:	83 ff       	sbrs	r24, 3
 692:	1e c0       	rjmp	.+60     	; 0x6d0 <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 694:	80 91 e1 00 	lds	r24, 0x00E1
 698:	87 7f       	andi	r24, 0xF7	; 247
 69a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 69e:	82 e0       	ldi	r24, 0x02	; 2
 6a0:	80 93 0f 01 	sts	0x010F, r24
		USB_Device_ConfigurationNumber = 0;
 6a4:	10 92 0b 01 	sts	0x010B, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 6a8:	80 91 e1 00 	lds	r24, 0x00E1
 6ac:	8e 7f       	andi	r24, 0xFE	; 254
 6ae:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 6b2:	80 91 e2 00 	lds	r24, 0x00E2
 6b6:	8e 7f       	andi	r24, 0xFE	; 254
 6b8:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 6bc:	80 91 e2 00 	lds	r24, 0x00E2
 6c0:	80 61       	ori	r24, 0x10	; 16
 6c2:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 6c6:	80 e0       	ldi	r24, 0x00	; 0
 6c8:	60 e0       	ldi	r22, 0x00	; 0
 6ca:	42 e0       	ldi	r20, 0x02	; 2
 6cc:	64 de       	rcall	.-824    	; 0x396 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 6ce:	f8 d2       	rcall	.+1520   	; 0xcc0 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 6d0:	ff 91       	pop	r31
 6d2:	ef 91       	pop	r30
 6d4:	bf 91       	pop	r27
 6d6:	af 91       	pop	r26
 6d8:	9f 91       	pop	r25
 6da:	8f 91       	pop	r24
 6dc:	7f 91       	pop	r23
 6de:	6f 91       	pop	r22
 6e0:	5f 91       	pop	r21
 6e2:	4f 91       	pop	r20
 6e4:	3f 91       	pop	r19
 6e6:	2f 91       	pop	r18
 6e8:	0f 90       	pop	r0
 6ea:	0b be       	out	0x3b, r0	; 59
 6ec:	0f 90       	pop	r0
 6ee:	0f be       	out	0x3f, r0	; 63
 6f0:	0f 90       	pop	r0
 6f2:	1f 90       	pop	r1
 6f4:	18 95       	reti

000006f6 <Endpoint_Write_Control_Stream_LE>:
 6f6:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 6f8:	40 91 16 01 	lds	r20, 0x0116
 6fc:	50 91 17 01 	lds	r21, 0x0117
 700:	46 17       	cp	r20, r22
 702:	57 07       	cpc	r21, r23
 704:	18 f4       	brcc	.+6      	; 0x70c <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 706:	f9 01       	movw	r30, r18
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	3d c0       	rjmp	.+122    	; 0x786 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 70c:	61 15       	cp	r22, r1
 70e:	71 05       	cpc	r23, r1
 710:	11 f0       	breq	.+4      	; 0x716 <Endpoint_Write_Control_Stream_LE+0x20>
 712:	ab 01       	movw	r20, r22
 714:	f8 cf       	rjmp	.-16     	; 0x706 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 716:	80 91 e8 00 	lds	r24, 0x00E8
 71a:	8e 77       	andi	r24, 0x7E	; 126
 71c:	80 93 e8 00 	sts	0x00E8, r24
 720:	40 e0       	ldi	r20, 0x00	; 0
 722:	50 e0       	ldi	r21, 0x00	; 0
 724:	f0 cf       	rjmp	.-32     	; 0x706 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 726:	80 91 0f 01 	lds	r24, 0x010F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 72a:	88 23       	and	r24, r24
 72c:	f1 f1       	breq	.+124    	; 0x7aa <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 72e:	85 30       	cpi	r24, 0x05	; 5
 730:	f1 f1       	breq	.+124    	; 0x7ae <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 732:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 736:	83 ff       	sbrs	r24, 3
 738:	02 c0       	rjmp	.+4      	; 0x73e <Endpoint_Write_Control_Stream_LE+0x48>
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 73e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 742:	82 fd       	sbrc	r24, 2
 744:	2c c0       	rjmp	.+88     	; 0x79e <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 746:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 74a:	80 ff       	sbrs	r24, 0
 74c:	1c c0       	rjmp	.+56     	; 0x786 <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 74e:	20 91 f2 00 	lds	r18, 0x00F2
 752:	30 91 f3 00 	lds	r19, 0x00F3
 756:	07 c0       	rjmp	.+14     	; 0x766 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 758:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 75a:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 75e:	41 50       	subi	r20, 0x01	; 1
 760:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 762:	2f 5f       	subi	r18, 0xFF	; 255
 764:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 766:	41 15       	cp	r20, r1
 768:	51 05       	cpc	r21, r1
 76a:	19 f0       	breq	.+6      	; 0x772 <Endpoint_Write_Control_Stream_LE+0x7c>
 76c:	28 30       	cpi	r18, 0x08	; 8
 76e:	31 05       	cpc	r19, r1
 770:	98 f3       	brcs	.-26     	; 0x758 <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	28 30       	cpi	r18, 0x08	; 8
 776:	31 05       	cpc	r19, r1
 778:	09 f4       	brne	.+2      	; 0x77c <Endpoint_Write_Control_Stream_LE+0x86>
 77a:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 77c:	80 91 e8 00 	lds	r24, 0x00E8
 780:	8e 77       	andi	r24, 0x7E	; 126
 782:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 786:	41 15       	cp	r20, r1
 788:	51 05       	cpc	r21, r1
 78a:	69 f6       	brne	.-102    	; 0x726 <Endpoint_Write_Control_Stream_LE+0x30>
 78c:	99 23       	and	r25, r25
 78e:	59 f6       	brne	.-106    	; 0x726 <Endpoint_Write_Control_Stream_LE+0x30>
 790:	06 c0       	rjmp	.+12     	; 0x79e <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 792:	80 91 0f 01 	lds	r24, 0x010F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 796:	88 23       	and	r24, r24
 798:	41 f0       	breq	.+16     	; 0x7aa <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 79a:	85 30       	cpi	r24, 0x05	; 5
 79c:	41 f0       	breq	.+16     	; 0x7ae <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 79e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 7a2:	82 ff       	sbrs	r24, 2
 7a4:	f6 cf       	rjmp	.-20     	; 0x792 <Endpoint_Write_Control_Stream_LE+0x9c>
 7a6:	80 e0       	ldi	r24, 0x00	; 0
 7a8:	08 95       	ret
 7aa:	82 e0       	ldi	r24, 0x02	; 2
 7ac:	08 95       	ret
 7ae:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 7b0:	08 95       	ret

000007b2 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
 7b2:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 7b4:	40 91 16 01 	lds	r20, 0x0116
 7b8:	50 91 17 01 	lds	r21, 0x0117
 7bc:	46 17       	cp	r20, r22
 7be:	57 07       	cpc	r21, r23
 7c0:	18 f4       	brcc	.+6      	; 0x7c8 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 7c2:	f9 01       	movw	r30, r18
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	40 c0       	rjmp	.+128    	; 0x848 <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 7c8:	61 15       	cp	r22, r1
 7ca:	71 05       	cpc	r23, r1
 7cc:	11 f0       	breq	.+4      	; 0x7d2 <Endpoint_Write_Control_PStream_LE+0x20>
 7ce:	ab 01       	movw	r20, r22
 7d0:	f8 cf       	rjmp	.-16     	; 0x7c2 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 7d2:	80 91 e8 00 	lds	r24, 0x00E8
 7d6:	8e 77       	andi	r24, 0x7E	; 126
 7d8:	80 93 e8 00 	sts	0x00E8, r24
 7dc:	40 e0       	ldi	r20, 0x00	; 0
 7de:	50 e0       	ldi	r21, 0x00	; 0
 7e0:	f0 cf       	rjmp	.-32     	; 0x7c2 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 7e2:	80 91 0f 01 	lds	r24, 0x010F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 7e6:	88 23       	and	r24, r24
 7e8:	09 f4       	brne	.+2      	; 0x7ec <Endpoint_Write_Control_PStream_LE+0x3a>
 7ea:	40 c0       	rjmp	.+128    	; 0x86c <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 7ec:	85 30       	cpi	r24, 0x05	; 5
 7ee:	09 f4       	brne	.+2      	; 0x7f2 <Endpoint_Write_Control_PStream_LE+0x40>
 7f0:	3f c0       	rjmp	.+126    	; 0x870 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 7f2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 7f6:	83 ff       	sbrs	r24, 3
 7f8:	02 c0       	rjmp	.+4      	; 0x7fe <Endpoint_Write_Control_PStream_LE+0x4c>
 7fa:	81 e0       	ldi	r24, 0x01	; 1
 7fc:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 7fe:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 802:	82 fd       	sbrc	r24, 2
 804:	2d c0       	rjmp	.+90     	; 0x860 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 806:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 80a:	80 ff       	sbrs	r24, 0
 80c:	1d c0       	rjmp	.+58     	; 0x848 <Endpoint_Write_Control_PStream_LE+0x96>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 80e:	20 91 f2 00 	lds	r18, 0x00F2
 812:	30 91 f3 00 	lds	r19, 0x00F3
 816:	08 c0       	rjmp	.+16     	; 0x828 <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 818:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 81a:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 81e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 820:	41 50       	subi	r20, 0x01	; 1
 822:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 824:	2f 5f       	subi	r18, 0xFF	; 255
 826:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 828:	41 15       	cp	r20, r1
 82a:	51 05       	cpc	r21, r1
 82c:	19 f0       	breq	.+6      	; 0x834 <Endpoint_Write_Control_PStream_LE+0x82>
 82e:	28 30       	cpi	r18, 0x08	; 8
 830:	31 05       	cpc	r19, r1
 832:	90 f3       	brcs	.-28     	; 0x818 <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	28 30       	cpi	r18, 0x08	; 8
 838:	31 05       	cpc	r19, r1
 83a:	09 f4       	brne	.+2      	; 0x83e <Endpoint_Write_Control_PStream_LE+0x8c>
 83c:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 83e:	80 91 e8 00 	lds	r24, 0x00E8
 842:	8e 77       	andi	r24, 0x7E	; 126
 844:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 848:	41 15       	cp	r20, r1
 84a:	51 05       	cpc	r21, r1
 84c:	51 f6       	brne	.-108    	; 0x7e2 <Endpoint_Write_Control_PStream_LE+0x30>
 84e:	99 23       	and	r25, r25
 850:	41 f6       	brne	.-112    	; 0x7e2 <Endpoint_Write_Control_PStream_LE+0x30>
 852:	06 c0       	rjmp	.+12     	; 0x860 <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 854:	80 91 0f 01 	lds	r24, 0x010F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 858:	88 23       	and	r24, r24
 85a:	41 f0       	breq	.+16     	; 0x86c <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 85c:	85 30       	cpi	r24, 0x05	; 5
 85e:	41 f0       	breq	.+16     	; 0x870 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 860:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 864:	82 ff       	sbrs	r24, 2
 866:	f6 cf       	rjmp	.-20     	; 0x854 <Endpoint_Write_Control_PStream_LE+0xa2>
 868:	80 e0       	ldi	r24, 0x00	; 0
 86a:	08 95       	ret
 86c:	82 e0       	ldi	r24, 0x02	; 2
 86e:	08 95       	ret
 870:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 872:	08 95       	ret

00000874 <Endpoint_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 874:	bf 92       	push	r11
 876:	cf 92       	push	r12
 878:	df 92       	push	r13
 87a:	ef 92       	push	r14
 87c:	ff 92       	push	r15
 87e:	0f 93       	push	r16
 880:	1f 93       	push	r17
 882:	cf 93       	push	r28
 884:	df 93       	push	r29
 886:	18 2f       	mov	r17, r24
 888:	09 2f       	mov	r16, r25
 88a:	7b 01       	movw	r14, r22
 88c:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 88e:	d9 dd       	rcall	.-1102   	; 0x442 <Endpoint_WaitUntilReady>
 890:	b8 2e       	mov	r11, r24
 892:	88 23       	and	r24, r24
 894:	b1 f5       	brne	.+108    	; 0x902 <Endpoint_Read_Stream_LE+0x8e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 896:	81 2f       	mov	r24, r17
 898:	90 2f       	mov	r25, r16
 89a:	9c 01       	movw	r18, r24
 89c:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
 89e:	c1 14       	cp	r12, r1
 8a0:	d1 04       	cpc	r13, r1
 8a2:	39 f0       	breq	.+14     	; 0x8b2 <Endpoint_Read_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
 8a4:	f6 01       	movw	r30, r12
 8a6:	80 81       	ld	r24, Z
 8a8:	91 81       	ldd	r25, Z+1	; 0x01
 8aa:	e8 1a       	sub	r14, r24
 8ac:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 8ae:	c8 0f       	add	r28, r24
 8b0:	d9 1f       	adc	r29, r25
 8b2:	00 e0       	ldi	r16, 0x00	; 0
 8b4:	10 e0       	ldi	r17, 0x00	; 0
 8b6:	22 c0       	rjmp	.+68     	; 0x8fc <Endpoint_Read_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 8b8:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 8bc:	85 fd       	sbrc	r24, 5
 8be:	16 c0       	rjmp	.+44     	; 0x8ec <Endpoint_Read_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 8c0:	80 91 e8 00 	lds	r24, 0x00E8
 8c4:	8b 77       	andi	r24, 0x7B	; 123
 8c6:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
 8ca:	c1 14       	cp	r12, r1
 8cc:	d1 04       	cpc	r13, r1
 8ce:	49 f0       	breq	.+18     	; 0x8e2 <Endpoint_Read_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
 8d0:	f6 01       	movw	r30, r12
 8d2:	80 81       	ld	r24, Z
 8d4:	91 81       	ldd	r25, Z+1	; 0x01
 8d6:	80 0f       	add	r24, r16
 8d8:	91 1f       	adc	r25, r17
 8da:	91 83       	std	Z+1, r25	; 0x01
 8dc:	80 83       	st	Z, r24
 8de:	85 e0       	ldi	r24, 0x05	; 5
 8e0:	11 c0       	rjmp	.+34     	; 0x904 <Endpoint_Read_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 8e2:	ef d1       	rcall	.+990    	; 0xcc2 <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 8e4:	ae dd       	rcall	.-1188   	; 0x442 <Endpoint_WaitUntilReady>
 8e6:	88 23       	and	r24, r24
 8e8:	49 f0       	breq	.+18     	; 0x8fc <Endpoint_Read_Stream_LE+0x88>
 8ea:	0c c0       	rjmp	.+24     	; 0x904 <Endpoint_Read_Stream_LE+0x90>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 8ec:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 8f0:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 8f2:	08 94       	sec
 8f4:	e1 08       	sbc	r14, r1
 8f6:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
 8f8:	0f 5f       	subi	r16, 0xFF	; 255
 8fa:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 8fc:	e1 14       	cp	r14, r1
 8fe:	f1 04       	cpc	r15, r1
 900:	d9 f6       	brne	.-74     	; 0x8b8 <Endpoint_Read_Stream_LE+0x44>
 902:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 904:	df 91       	pop	r29
 906:	cf 91       	pop	r28
 908:	1f 91       	pop	r17
 90a:	0f 91       	pop	r16
 90c:	ff 90       	pop	r15
 90e:	ef 90       	pop	r14
 910:	df 90       	pop	r13
 912:	cf 90       	pop	r12
 914:	bf 90       	pop	r11
 916:	08 95       	ret

00000918 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 918:	bf 92       	push	r11
 91a:	cf 92       	push	r12
 91c:	df 92       	push	r13
 91e:	ef 92       	push	r14
 920:	ff 92       	push	r15
 922:	0f 93       	push	r16
 924:	1f 93       	push	r17
 926:	cf 93       	push	r28
 928:	df 93       	push	r29
 92a:	18 2f       	mov	r17, r24
 92c:	09 2f       	mov	r16, r25
 92e:	7b 01       	movw	r14, r22
 930:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 932:	87 dd       	rcall	.-1266   	; 0x442 <Endpoint_WaitUntilReady>
 934:	b8 2e       	mov	r11, r24
 936:	88 23       	and	r24, r24
 938:	b1 f5       	brne	.+108    	; 0x9a6 <Endpoint_Write_Stream_LE+0x8e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 93a:	81 2f       	mov	r24, r17
 93c:	90 2f       	mov	r25, r16
 93e:	9c 01       	movw	r18, r24
 940:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
 942:	c1 14       	cp	r12, r1
 944:	d1 04       	cpc	r13, r1
 946:	39 f0       	breq	.+14     	; 0x956 <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
 948:	f6 01       	movw	r30, r12
 94a:	80 81       	ld	r24, Z
 94c:	91 81       	ldd	r25, Z+1	; 0x01
 94e:	e8 1a       	sub	r14, r24
 950:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 952:	c8 0f       	add	r28, r24
 954:	d9 1f       	adc	r29, r25
 956:	00 e0       	ldi	r16, 0x00	; 0
 958:	10 e0       	ldi	r17, 0x00	; 0
 95a:	22 c0       	rjmp	.+68     	; 0x9a0 <Endpoint_Write_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 95c:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 960:	85 fd       	sbrc	r24, 5
 962:	16 c0       	rjmp	.+44     	; 0x990 <Endpoint_Write_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 964:	80 91 e8 00 	lds	r24, 0x00E8
 968:	8e 77       	andi	r24, 0x7E	; 126
 96a:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
 96e:	c1 14       	cp	r12, r1
 970:	d1 04       	cpc	r13, r1
 972:	49 f0       	breq	.+18     	; 0x986 <Endpoint_Write_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
 974:	f6 01       	movw	r30, r12
 976:	80 81       	ld	r24, Z
 978:	91 81       	ldd	r25, Z+1	; 0x01
 97a:	80 0f       	add	r24, r16
 97c:	91 1f       	adc	r25, r17
 97e:	91 83       	std	Z+1, r25	; 0x01
 980:	80 83       	st	Z, r24
 982:	85 e0       	ldi	r24, 0x05	; 5
 984:	11 c0       	rjmp	.+34     	; 0x9a8 <Endpoint_Write_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 986:	9d d1       	rcall	.+826    	; 0xcc2 <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 988:	5c dd       	rcall	.-1352   	; 0x442 <Endpoint_WaitUntilReady>
 98a:	88 23       	and	r24, r24
 98c:	49 f0       	breq	.+18     	; 0x9a0 <Endpoint_Write_Stream_LE+0x88>
 98e:	0c c0       	rjmp	.+24     	; 0x9a8 <Endpoint_Write_Stream_LE+0x90>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 990:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 992:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 996:	08 94       	sec
 998:	e1 08       	sbc	r14, r1
 99a:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
 99c:	0f 5f       	subi	r16, 0xFF	; 255
 99e:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 9a0:	e1 14       	cp	r14, r1
 9a2:	f1 04       	cpc	r15, r1
 9a4:	d9 f6       	brne	.-74     	; 0x95c <Endpoint_Write_Stream_LE+0x44>
 9a6:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 9a8:	df 91       	pop	r29
 9aa:	cf 91       	pop	r28
 9ac:	1f 91       	pop	r17
 9ae:	0f 91       	pop	r16
 9b0:	ff 90       	pop	r15
 9b2:	ef 90       	pop	r14
 9b4:	df 90       	pop	r13
 9b6:	cf 90       	pop	r12
 9b8:	bf 90       	pop	r11
 9ba:	08 95       	ret

000009bc <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 9bc:	0f 93       	push	r16
 9be:	1f 93       	push	r17
 9c0:	df 93       	push	r29
 9c2:	cf 93       	push	r28
 9c4:	cd b7       	in	r28, 0x3d	; 61
 9c6:	de b7       	in	r29, 0x3e	; 62
 9c8:	ac 97       	sbiw	r28, 0x2c	; 44
 9ca:	0f b6       	in	r0, 0x3f	; 63
 9cc:	f8 94       	cli
 9ce:	de bf       	out	0x3e, r29	; 62
 9d0:	0f be       	out	0x3f, r0	; 63
 9d2:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 9d4:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
 9d8:	80 93 10 01 	sts	0x0110, r24
 9dc:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
 9e0:	80 93 11 01 	sts	0x0111, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 9e4:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 9e8:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
 9ec:	e2 e1       	ldi	r30, 0x12	; 18
 9ee:	f1 e0       	ldi	r31, 0x01	; 1
 9f0:	80 93 12 01 	sts	0x0112, r24
 9f4:	90 93 13 01 	sts	0x0113, r25
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 9f8:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 9fc:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
 a00:	80 93 14 01 	sts	0x0114, r24
 a04:	93 83       	std	Z+3, r25	; 0x03
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 a06:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 a0a:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
 a0e:	80 93 16 01 	sts	0x0116, r24
 a12:	95 83       	std	Z+5, r25	; 0x05

	EVENT_USB_Device_ControlRequest();
 a14:	c4 db       	rcall	.-2168   	; 0x19e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a16:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 a1a:	83 ff       	sbrs	r24, 3
 a1c:	38 c1       	rjmp	.+624    	; 0xc8e <USB_Device_ProcessControlRequest+0x2d2>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 a1e:	80 91 10 01 	lds	r24, 0x0110

		switch (USB_ControlRequest.bRequest)
 a22:	30 91 11 01 	lds	r19, 0x0111
 a26:	35 30       	cpi	r19, 0x05	; 5
 a28:	09 f4       	brne	.+2      	; 0xa2c <USB_Device_ProcessControlRequest+0x70>
 a2a:	87 c0       	rjmp	.+270    	; 0xb3a <USB_Device_ProcessControlRequest+0x17e>
 a2c:	36 30       	cpi	r19, 0x06	; 6
 a2e:	40 f4       	brcc	.+16     	; 0xa40 <USB_Device_ProcessControlRequest+0x84>
 a30:	31 30       	cpi	r19, 0x01	; 1
 a32:	c9 f1       	breq	.+114    	; 0xaa6 <USB_Device_ProcessControlRequest+0xea>
 a34:	31 30       	cpi	r19, 0x01	; 1
 a36:	70 f0       	brcs	.+28     	; 0xa54 <USB_Device_ProcessControlRequest+0x98>
 a38:	33 30       	cpi	r19, 0x03	; 3
 a3a:	09 f0       	breq	.+2      	; 0xa3e <USB_Device_ProcessControlRequest+0x82>
 a3c:	28 c1       	rjmp	.+592    	; 0xc8e <USB_Device_ProcessControlRequest+0x2d2>
 a3e:	33 c0       	rjmp	.+102    	; 0xaa6 <USB_Device_ProcessControlRequest+0xea>
 a40:	38 30       	cpi	r19, 0x08	; 8
 a42:	09 f4       	brne	.+2      	; 0xa46 <USB_Device_ProcessControlRequest+0x8a>
 a44:	f6 c0       	rjmp	.+492    	; 0xc32 <USB_Device_ProcessControlRequest+0x276>
 a46:	39 30       	cpi	r19, 0x09	; 9
 a48:	09 f4       	brne	.+2      	; 0xa4c <USB_Device_ProcessControlRequest+0x90>
 a4a:	05 c1       	rjmp	.+522    	; 0xc56 <USB_Device_ProcessControlRequest+0x29a>
 a4c:	36 30       	cpi	r19, 0x06	; 6
 a4e:	09 f0       	breq	.+2      	; 0xa52 <USB_Device_ProcessControlRequest+0x96>
 a50:	1e c1       	rjmp	.+572    	; 0xc8e <USB_Device_ProcessControlRequest+0x2d2>
 a52:	97 c0       	rjmp	.+302    	; 0xb82 <USB_Device_ProcessControlRequest+0x1c6>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a54:	80 38       	cpi	r24, 0x80	; 128
 a56:	21 f0       	breq	.+8      	; 0xa60 <USB_Device_ProcessControlRequest+0xa4>
 a58:	82 38       	cpi	r24, 0x82	; 130
 a5a:	09 f0       	breq	.+2      	; 0xa5e <USB_Device_ProcessControlRequest+0xa2>
 a5c:	18 c1       	rjmp	.+560    	; 0xc8e <USB_Device_ProcessControlRequest+0x2d2>
 a5e:	08 c0       	rjmp	.+16     	; 0xa70 <USB_Device_ProcessControlRequest+0xb4>
 a60:	90 91 0c 01 	lds	r25, 0x010C
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 a64:	80 91 0d 01 	lds	r24, 0x010D
 a68:	88 23       	and	r24, r24
 a6a:	99 f0       	breq	.+38     	; 0xa92 <USB_Device_ProcessControlRequest+0xd6>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 a6c:	92 60       	ori	r25, 0x02	; 2
 a6e:	11 c0       	rjmp	.+34     	; 0xa92 <USB_Device_ProcessControlRequest+0xd6>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a70:	80 91 14 01 	lds	r24, 0x0114
 a74:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a76:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 a7a:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
 a7e:	90 e0       	ldi	r25, 0x00	; 0
 a80:	25 e0       	ldi	r18, 0x05	; 5
 a82:	96 95       	lsr	r25
 a84:	87 95       	ror	r24
 a86:	2a 95       	dec	r18
 a88:	e1 f7       	brne	.-8      	; 0xa82 <USB_Device_ProcessControlRequest+0xc6>
 a8a:	98 2f       	mov	r25, r24
 a8c:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a8e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a92:	80 91 e8 00 	lds	r24, 0x00E8
 a96:	87 7f       	andi	r24, 0xF7	; 247
 a98:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 a9c:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
 aa0:	10 92 f1 00 	sts	0x00F1, r1
 aa4:	d1 c0       	rjmp	.+418    	; 0xc48 <USB_Device_ProcessControlRequest+0x28c>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 aa6:	88 23       	and	r24, r24
 aa8:	19 f0       	breq	.+6      	; 0xab0 <USB_Device_ProcessControlRequest+0xf4>
 aaa:	82 30       	cpi	r24, 0x02	; 2
 aac:	09 f0       	breq	.+2      	; 0xab0 <USB_Device_ProcessControlRequest+0xf4>
 aae:	ef c0       	rjmp	.+478    	; 0xc8e <USB_Device_ProcessControlRequest+0x2d2>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 ab0:	90 e0       	ldi	r25, 0x00	; 0
 ab2:	8f 71       	andi	r24, 0x1F	; 31
 ab4:	90 70       	andi	r25, 0x00	; 0
 ab6:	00 97       	sbiw	r24, 0x00	; 0
 ab8:	21 f0       	breq	.+8      	; 0xac2 <USB_Device_ProcessControlRequest+0x106>
 aba:	02 97       	sbiw	r24, 0x02	; 2
 abc:	09 f0       	breq	.+2      	; 0xac0 <USB_Device_ProcessControlRequest+0x104>
 abe:	e7 c0       	rjmp	.+462    	; 0xc8e <USB_Device_ProcessControlRequest+0x2d2>
 ac0:	0c c0       	rjmp	.+24     	; 0xada <USB_Device_ProcessControlRequest+0x11e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 ac2:	80 91 12 01 	lds	r24, 0x0112
 ac6:	81 30       	cpi	r24, 0x01	; 1
 ac8:	09 f0       	breq	.+2      	; 0xacc <USB_Device_ProcessControlRequest+0x110>
 aca:	e1 c0       	rjmp	.+450    	; 0xc8e <USB_Device_ProcessControlRequest+0x2d2>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 acc:	10 92 0d 01 	sts	0x010D, r1
 ad0:	33 30       	cpi	r19, 0x03	; 3
 ad2:	69 f5       	brne	.+90     	; 0xb2e <USB_Device_ProcessControlRequest+0x172>
 ad4:	80 93 0d 01 	sts	0x010D, r24
 ad8:	2a c0       	rjmp	.+84     	; 0xb2e <USB_Device_ProcessControlRequest+0x172>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 ada:	80 91 12 01 	lds	r24, 0x0112
 ade:	88 23       	and	r24, r24
 ae0:	31 f5       	brne	.+76     	; 0xb2e <USB_Device_ProcessControlRequest+0x172>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 ae2:	20 91 14 01 	lds	r18, 0x0114
 ae6:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 ae8:	09 f4       	brne	.+2      	; 0xaec <USB_Device_ProcessControlRequest+0x130>
 aea:	d1 c0       	rjmp	.+418    	; 0xc8e <USB_Device_ProcessControlRequest+0x2d2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 aec:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 af0:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 af4:	80 ff       	sbrs	r24, 0
 af6:	1b c0       	rjmp	.+54     	; 0xb2e <USB_Device_ProcessControlRequest+0x172>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 af8:	33 30       	cpi	r19, 0x03	; 3
 afa:	21 f4       	brne	.+8      	; 0xb04 <USB_Device_ProcessControlRequest+0x148>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 afc:	80 91 eb 00 	lds	r24, 0x00EB
 b00:	80 62       	ori	r24, 0x20	; 32
 b02:	13 c0       	rjmp	.+38     	; 0xb2a <USB_Device_ProcessControlRequest+0x16e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 b04:	80 91 eb 00 	lds	r24, 0x00EB
 b08:	80 61       	ori	r24, 0x10	; 16
 b0a:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 b0e:	81 e0       	ldi	r24, 0x01	; 1
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	02 c0       	rjmp	.+4      	; 0xb18 <USB_Device_ProcessControlRequest+0x15c>
 b14:	88 0f       	add	r24, r24
 b16:	99 1f       	adc	r25, r25
 b18:	2a 95       	dec	r18
 b1a:	e2 f7       	brpl	.-8      	; 0xb14 <USB_Device_ProcessControlRequest+0x158>
 b1c:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 b20:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 b24:	80 91 eb 00 	lds	r24, 0x00EB
 b28:	88 60       	ori	r24, 0x08	; 8
 b2a:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 b2e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b32:	80 91 e8 00 	lds	r24, 0x00E8
 b36:	87 7f       	andi	r24, 0xF7	; 247
 b38:	8a c0       	rjmp	.+276    	; 0xc4e <USB_Device_ProcessControlRequest+0x292>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b3a:	88 23       	and	r24, r24
 b3c:	09 f0       	breq	.+2      	; 0xb40 <USB_Device_ProcessControlRequest+0x184>
 b3e:	a7 c0       	rjmp	.+334    	; 0xc8e <USB_Device_ProcessControlRequest+0x2d2>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 b40:	10 91 12 01 	lds	r17, 0x0112
 b44:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 b46:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 b48:	f8 94       	cli
 b4a:	80 91 e8 00 	lds	r24, 0x00E8
 b4e:	87 7f       	andi	r24, 0xF7	; 247
 b50:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 b54:	55 dc       	rcall	.-1878   	; 0x400 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 b56:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
 b5a:	80 ff       	sbrs	r24, 0
 b5c:	fc cf       	rjmp	.-8      	; 0xb56 <USB_Device_ProcessControlRequest+0x19a>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 b5e:	80 91 e3 00 	lds	r24, 0x00E3
 b62:	80 78       	andi	r24, 0x80	; 128
 b64:	81 2b       	or	r24, r17

				UDADDR = Temp;
 b66:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
 b6a:	80 68       	ori	r24, 0x80	; 128
 b6c:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 b70:	11 23       	and	r17, r17
 b72:	11 f4       	brne	.+4      	; 0xb78 <USB_Device_ProcessControlRequest+0x1bc>
 b74:	82 e0       	ldi	r24, 0x02	; 2
 b76:	01 c0       	rjmp	.+2      	; 0xb7a <USB_Device_ProcessControlRequest+0x1be>
 b78:	83 e0       	ldi	r24, 0x03	; 3
 b7a:	80 93 0f 01 	sts	0x010F, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 b7e:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
 b80:	86 c0       	rjmp	.+268    	; 0xc8e <USB_Device_ProcessControlRequest+0x2d2>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b82:	80 58       	subi	r24, 0x80	; 128
 b84:	82 30       	cpi	r24, 0x02	; 2
 b86:	08 f0       	brcs	.+2      	; 0xb8a <USB_Device_ProcessControlRequest+0x1ce>
 b88:	82 c0       	rjmp	.+260    	; 0xc8e <USB_Device_ProcessControlRequest+0x2d2>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 b8a:	80 91 12 01 	lds	r24, 0x0112
 b8e:	90 91 13 01 	lds	r25, 0x0113
 b92:	23 e0       	ldi	r18, 0x03	; 3
 b94:	8c 3d       	cpi	r24, 0xDC	; 220
 b96:	92 07       	cpc	r25, r18
 b98:	09 f0       	breq	.+2      	; 0xb9c <USB_Device_ProcessControlRequest+0x1e0>
 b9a:	33 c0       	rjmp	.+102    	; 0xc02 <USB_Device_ProcessControlRequest+0x246>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 b9c:	83 e0       	ldi	r24, 0x03	; 3
 b9e:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 ba0:	8a e2       	ldi	r24, 0x2A	; 42
 ba2:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 ba4:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 ba6:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 ba8:	de 01       	movw	r26, r28
 baa:	15 96       	adiw	r26, 0x05	; 5
 bac:	6e e0       	ldi	r22, 0x0E	; 14
 bae:	40 e0       	ldi	r20, 0x00	; 0
 bb0:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 bb2:	11 e2       	ldi	r17, 0x21	; 33
 bb4:	e6 2f       	mov	r30, r22
 bb6:	f0 e0       	ldi	r31, 0x00	; 0
 bb8:	10 93 57 00 	sts	0x0057, r17
 bbc:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
 bbe:	40 ff       	sbrs	r20, 0
 bc0:	03 c0       	rjmp	.+6      	; 0xbc8 <USB_Device_ProcessControlRequest+0x20c>
					{
						SerialByte >>= 4;
 bc2:	82 95       	swap	r24
 bc4:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
 bc6:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 bc8:	8f 70       	andi	r24, 0x0F	; 15
 bca:	28 2f       	mov	r18, r24
 bcc:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 bce:	8a 30       	cpi	r24, 0x0A	; 10
 bd0:	18 f0       	brcs	.+6      	; 0xbd8 <USB_Device_ProcessControlRequest+0x21c>
 bd2:	c9 01       	movw	r24, r18
 bd4:	c7 96       	adiw	r24, 0x37	; 55
 bd6:	02 c0       	rjmp	.+4      	; 0xbdc <USB_Device_ProcessControlRequest+0x220>
 bd8:	c9 01       	movw	r24, r18
 bda:	c0 96       	adiw	r24, 0x30	; 48
 bdc:	8d 93       	st	X+, r24
 bde:	9d 93       	st	X+, r25
 be0:	4f 5f       	subi	r20, 0xFF	; 255
 be2:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 be4:	44 31       	cpi	r20, 0x14	; 20
 be6:	51 05       	cpc	r21, r1
 be8:	29 f7       	brne	.-54     	; 0xbb4 <USB_Device_ProcessControlRequest+0x1f8>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 bea:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bec:	80 91 e8 00 	lds	r24, 0x00E8
 bf0:	87 7f       	andi	r24, 0xF7	; 247
 bf2:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 bf6:	ce 01       	movw	r24, r28
 bf8:	03 96       	adiw	r24, 0x03	; 3
 bfa:	6a e2       	ldi	r22, 0x2A	; 42
 bfc:	70 e0       	ldi	r23, 0x00	; 0
 bfe:	7b dd       	rcall	.-1290   	; 0x6f6 <Endpoint_Write_Control_Stream_LE>
 c00:	12 c0       	rjmp	.+36     	; 0xc26 <USB_Device_ProcessControlRequest+0x26a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 c02:	60 91 14 01 	lds	r22, 0x0114
 c06:	ae 01       	movw	r20, r28
 c08:	4f 5f       	subi	r20, 0xFF	; 255
 c0a:	5f 4f       	sbci	r21, 0xFF	; 255
 c0c:	96 db       	rcall	.-2260   	; 0x33a <CALLBACK_USB_GetDescriptor>
 c0e:	bc 01       	movw	r22, r24
 c10:	00 97       	sbiw	r24, 0x00	; 0
 c12:	09 f4       	brne	.+2      	; 0xc16 <USB_Device_ProcessControlRequest+0x25a>
 c14:	3c c0       	rjmp	.+120    	; 0xc8e <USB_Device_ProcessControlRequest+0x2d2>
 c16:	80 91 e8 00 	lds	r24, 0x00E8
 c1a:	87 7f       	andi	r24, 0xF7	; 247
 c1c:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 c20:	89 81       	ldd	r24, Y+1	; 0x01
 c22:	9a 81       	ldd	r25, Y+2	; 0x02
 c24:	c6 dd       	rcall	.-1140   	; 0x7b2 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 c26:	80 91 e8 00 	lds	r24, 0x00E8
 c2a:	8b 77       	andi	r24, 0x7B	; 123
 c2c:	80 93 e8 00 	sts	0x00E8, r24
 c30:	2e c0       	rjmp	.+92     	; 0xc8e <USB_Device_ProcessControlRequest+0x2d2>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 c32:	80 38       	cpi	r24, 0x80	; 128
 c34:	61 f5       	brne	.+88     	; 0xc8e <USB_Device_ProcessControlRequest+0x2d2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c36:	80 91 e8 00 	lds	r24, 0x00E8
 c3a:	87 7f       	andi	r24, 0xF7	; 247
 c3c:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 c40:	80 91 0b 01 	lds	r24, 0x010B
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 c44:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c48:	80 91 e8 00 	lds	r24, 0x00E8
 c4c:	8e 77       	andi	r24, 0x7E	; 126
 c4e:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 c52:	d6 db       	rcall	.-2132   	; 0x400 <Endpoint_ClearStatusStage>
 c54:	1c c0       	rjmp	.+56     	; 0xc8e <USB_Device_ProcessControlRequest+0x2d2>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c56:	88 23       	and	r24, r24
 c58:	d1 f4       	brne	.+52     	; 0xc8e <USB_Device_ProcessControlRequest+0x2d2>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 c5a:	90 91 12 01 	lds	r25, 0x0112
 c5e:	92 30       	cpi	r25, 0x02	; 2
 c60:	b0 f4       	brcc	.+44     	; 0xc8e <USB_Device_ProcessControlRequest+0x2d2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c62:	80 91 e8 00 	lds	r24, 0x00E8
 c66:	87 7f       	andi	r24, 0xF7	; 247
 c68:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 c6c:	90 93 0b 01 	sts	0x010B, r25

	Endpoint_ClearStatusStage();
 c70:	c7 db       	rcall	.-2162   	; 0x400 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 c72:	80 91 0b 01 	lds	r24, 0x010B
 c76:	88 23       	and	r24, r24
 c78:	31 f4       	brne	.+12     	; 0xc86 <USB_Device_ProcessControlRequest+0x2ca>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 c7a:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 c7e:	87 fd       	sbrc	r24, 7
 c80:	02 c0       	rjmp	.+4      	; 0xc86 <USB_Device_ProcessControlRequest+0x2ca>
 c82:	81 e0       	ldi	r24, 0x01	; 1
 c84:	01 c0       	rjmp	.+2      	; 0xc88 <USB_Device_ProcessControlRequest+0x2cc>
 c86:	84 e0       	ldi	r24, 0x04	; 4
 c88:	80 93 0f 01 	sts	0x010F, r24

	EVENT_USB_Device_ConfigurationChanged();
 c8c:	89 da       	rcall	.-2798   	; 0x1a0 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c8e:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 c92:	83 ff       	sbrs	r24, 3
 c94:	0a c0       	rjmp	.+20     	; 0xcaa <USB_Device_ProcessControlRequest+0x2ee>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 c96:	80 91 eb 00 	lds	r24, 0x00EB
 c9a:	80 62       	ori	r24, 0x20	; 32
 c9c:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ca0:	80 91 e8 00 	lds	r24, 0x00E8
 ca4:	87 7f       	andi	r24, 0xF7	; 247
 ca6:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 caa:	ac 96       	adiw	r28, 0x2c	; 44
 cac:	0f b6       	in	r0, 0x3f	; 63
 cae:	f8 94       	cli
 cb0:	de bf       	out	0x3e, r29	; 62
 cb2:	0f be       	out	0x3f, r0	; 63
 cb4:	cd bf       	out	0x3d, r28	; 61
 cb6:	cf 91       	pop	r28
 cb8:	df 91       	pop	r29
 cba:	1f 91       	pop	r17
 cbc:	0f 91       	pop	r16
 cbe:	08 95       	ret

00000cc0 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 cc0:	08 95       	ret

00000cc2 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 cc2:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 cc4:	80 91 0f 01 	lds	r24, 0x010F
 cc8:	88 23       	and	r24, r24
 cca:	61 f0       	breq	.+24     	; 0xce4 <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 ccc:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 cd0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 cd4:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 cd8:	83 ff       	sbrs	r24, 3
 cda:	01 c0       	rjmp	.+2      	; 0xcde <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
 cdc:	6f de       	rcall	.-802    	; 0x9bc <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 cde:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 ce0:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 ce4:	1f 91       	pop	r17
 ce6:	08 95       	ret

00000ce8 <MIDI_Device_ReceiveEventPacket>:
	return ENDPOINT_READYWAIT_NoError;
}

bool MIDI_Device_ReceiveEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    MIDI_EventPacket_t* const Event)
{
 ce8:	fc 01       	movw	r30, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
 cea:	80 91 0f 01 	lds	r24, 0x010F
 cee:	84 30       	cpi	r24, 0x04	; 4
 cf0:	c1 f4       	brne	.+48     	; 0xd22 <MIDI_Device_ReceiveEventPacket+0x3a>
	  return false;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataOUTEndpointNumber);
 cf2:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 cf4:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 cf8:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
 cfc:	85 ff       	sbrs	r24, 5
 cfe:	11 c0       	rjmp	.+34     	; 0xd22 <MIDI_Device_ReceiveEventPacket+0x3a>
	  return false;

	Endpoint_Read_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL);
 d00:	cb 01       	movw	r24, r22
 d02:	64 e0       	ldi	r22, 0x04	; 4
 d04:	70 e0       	ldi	r23, 0x00	; 0
 d06:	40 e0       	ldi	r20, 0x00	; 0
 d08:	50 e0       	ldi	r21, 0x00	; 0
 d0a:	b4 dd       	rcall	.-1176   	; 0x874 <Endpoint_Read_Stream_LE>
 d0c:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
 d10:	85 fd       	sbrc	r24, 5
 d12:	05 c0       	rjmp	.+10     	; 0xd1e <MIDI_Device_ReceiveEventPacket+0x36>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 d14:	80 91 e8 00 	lds	r24, 0x00E8
 d18:	8b 77       	andi	r24, 0x7B	; 123
 d1a:	80 93 e8 00 	sts	0x00E8, r24
 d1e:	81 e0       	ldi	r24, 0x01	; 1
 d20:	08 95       	ret
 d22:	80 e0       	ldi	r24, 0x00	; 0
	  Endpoint_ClearOUT();

	return true;
}
 d24:	08 95       	ret

00000d26 <MIDI_Device_Flush>:

	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t MIDI_Device_Flush(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
 d26:	fc 01       	movw	r30, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
 d28:	80 91 0f 01 	lds	r24, 0x010F
 d2c:	84 30       	cpi	r24, 0x04	; 4
 d2e:	11 f0       	breq	.+4      	; 0xd34 <MIDI_Device_Flush+0xe>
 d30:	82 e0       	ldi	r24, 0x02	; 2
 d32:	08 95       	ret
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpointNumber);
 d34:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 d36:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 d3a:	80 91 f2 00 	lds	r24, 0x00F2
 d3e:	90 91 f3 00 	lds	r25, 0x00F3

	if (Endpoint_BytesInEndpoint())
 d42:	89 2b       	or	r24, r25
 d44:	11 f4       	brne	.+4      	; 0xd4a <MIDI_Device_Flush+0x24>
 d46:	80 e0       	ldi	r24, 0x00	; 0
 d48:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d4a:	80 91 e8 00 	lds	r24, 0x00E8
 d4e:	8e 77       	andi	r24, 0x7E	; 126
 d50:	80 93 e8 00 	sts	0x00E8, r24
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	return ENDPOINT_READYWAIT_NoError;
}
 d54:	76 cb       	rjmp	.-2324   	; 0x442 <Endpoint_WaitUntilReady>

00000d56 <MIDI_Device_USBTask>:

	return true;
}

void MIDI_Device_USBTask(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
 d56:	9c 01       	movw	r18, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
 d58:	80 91 0f 01 	lds	r24, 0x010F
 d5c:	84 30       	cpi	r24, 0x04	; 4
 d5e:	11 f4       	brne	.+4      	; 0xd64 <MIDI_Device_USBTask+0xe>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	MIDI_Device_Flush(MIDIInterfaceInfo);
 d60:	c9 01       	movw	r24, r18
 d62:	e1 cf       	rjmp	.-62     	; 0xd26 <MIDI_Device_Flush>
 d64:	08 95       	ret

00000d66 <MIDI_Device_SendEventPacket>:
	#endif
}

uint8_t MIDI_Device_SendEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    const MIDI_EventPacket_t* const Event)
{
 d66:	fc 01       	movw	r30, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
 d68:	80 91 0f 01 	lds	r24, 0x010F
 d6c:	84 30       	cpi	r24, 0x04	; 4
 d6e:	11 f0       	breq	.+4      	; 0xd74 <MIDI_Device_SendEventPacket+0xe>
 d70:	92 e0       	ldi	r25, 0x02	; 2
 d72:	15 c0       	rjmp	.+42     	; 0xd9e <MIDI_Device_SendEventPacket+0x38>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpointNumber);
 d74:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 d76:	80 93 e9 00 	sts	0x00E9, r24

	if ((ErrorCode = Endpoint_Write_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL)) != ENDPOINT_RWSTREAM_NoError)
 d7a:	cb 01       	movw	r24, r22
 d7c:	64 e0       	ldi	r22, 0x04	; 4
 d7e:	70 e0       	ldi	r23, 0x00	; 0
 d80:	40 e0       	ldi	r20, 0x00	; 0
 d82:	50 e0       	ldi	r21, 0x00	; 0
 d84:	c9 dd       	rcall	.-1134   	; 0x918 <Endpoint_Write_Stream_LE>
 d86:	98 2f       	mov	r25, r24
 d88:	88 23       	and	r24, r24
 d8a:	49 f4       	brne	.+18     	; 0xd9e <MIDI_Device_SendEventPacket+0x38>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 d8c:	80 91 e8 00 	lds	r24, 0x00E8
	  return ErrorCode;

	if (!(Endpoint_IsReadWriteAllowed()))
 d90:	85 fd       	sbrc	r24, 5
 d92:	05 c0       	rjmp	.+10     	; 0xd9e <MIDI_Device_SendEventPacket+0x38>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d94:	80 91 e8 00 	lds	r24, 0x00E8
 d98:	8e 77       	andi	r24, 0x7E	; 126
 d9a:	80 93 e8 00 	sts	0x00E8, r24
	  Endpoint_ClearIN();

	return ENDPOINT_RWSTREAM_NoError;
}
 d9e:	89 2f       	mov	r24, r25
 da0:	08 95       	ret

00000da2 <MIDI_Device_ConfigureEndpoints>:
#define  __INCLUDE_FROM_MIDI_DRIVER
#define  __INCLUDE_FROM_MIDI_DEVICE_C
#include "MIDI.h"

bool MIDI_Device_ConfigureEndpoints(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
 da2:	1f 93       	push	r17
 da4:	cf 93       	push	r28
 da6:	df 93       	push	r29
 da8:	ec 01       	movw	r28, r24
 daa:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == MIDIInterfaceInfo->Config.DataINEndpointNumber)
 dac:	89 81       	ldd	r24, Y+1	; 0x01
 dae:	18 17       	cp	r17, r24
 db0:	29 f4       	brne	.+10     	; 0xdbc <MIDI_Device_ConfigureEndpoints+0x1a>
		{
			Size         = MIDIInterfaceInfo->Config.DataINEndpointSize;
 db2:	6a 81       	ldd	r22, Y+2	; 0x02
 db4:	7b 81       	ldd	r23, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MIDIInterfaceInfo->Config.DataINEndpointDoubleBank;
 db6:	8c 81       	ldd	r24, Y+4	; 0x04
 db8:	30 e8       	ldi	r19, 0x80	; 128
 dba:	07 c0       	rjmp	.+14     	; 0xdca <MIDI_Device_ConfigureEndpoints+0x28>
		}
		else if (EndpointNum == MIDIInterfaceInfo->Config.DataOUTEndpointNumber)
 dbc:	8d 81       	ldd	r24, Y+5	; 0x05
 dbe:	18 17       	cp	r17, r24
 dc0:	f9 f4       	brne	.+62     	; 0xe00 <MIDI_Device_ConfigureEndpoints+0x5e>
		{
			Size         = MIDIInterfaceInfo->Config.DataOUTEndpointSize;
 dc2:	6e 81       	ldd	r22, Y+6	; 0x06
 dc4:	7f 81       	ldd	r23, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MIDIInterfaceInfo->Config.DataOUTEndpointDoubleBank;
 dc6:	88 85       	ldd	r24, Y+8	; 0x08
 dc8:	30 e0       	ldi	r19, 0x00	; 0
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
 dca:	88 23       	and	r24, r24
 dcc:	11 f4       	brne	.+4      	; 0xdd2 <MIDI_Device_ConfigureEndpoints+0x30>
 dce:	40 e0       	ldi	r20, 0x00	; 0
 dd0:	01 c0       	rjmp	.+2      	; 0xdd4 <MIDI_Device_ConfigureEndpoints+0x32>
 dd2:	44 e0       	ldi	r20, 0x04	; 4
 dd4:	20 e0       	ldi	r18, 0x00	; 0
 dd6:	88 e0       	ldi	r24, 0x08	; 8
 dd8:	90 e0       	ldi	r25, 0x00	; 0
 dda:	03 c0       	rjmp	.+6      	; 0xde2 <MIDI_Device_ConfigureEndpoints+0x40>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
 ddc:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
 dde:	88 0f       	add	r24, r24
 de0:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
 de2:	86 17       	cp	r24, r22
 de4:	97 07       	cpc	r25, r23
 de6:	d0 f3       	brcs	.-12     	; 0xddc <MIDI_Device_ConfigureEndpoints+0x3a>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 de8:	60 e0       	ldi	r22, 0x00	; 0
 dea:	31 11       	cpse	r19, r1
 dec:	61 e0       	ldi	r22, 0x01	; 1
 dee:	60 68       	ori	r22, 0x80	; 128
 df0:	42 60       	ori	r20, 0x02	; 2
 df2:	22 95       	swap	r18
 df4:	20 7f       	andi	r18, 0xF0	; 240
 df6:	42 2b       	or	r20, r18
 df8:	81 2f       	mov	r24, r17
 dfa:	cd da       	rcall	.-2662   	; 0x396 <Endpoint_ConfigureEndpoint_Prv>
 dfc:	88 23       	and	r24, r24
 dfe:	21 f0       	breq	.+8      	; 0xe08 <MIDI_Device_ConfigureEndpoints+0x66>

bool MIDI_Device_ConfigureEndpoints(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
 e00:	1f 5f       	subi	r17, 0xFF	; 255
 e02:	17 30       	cpi	r17, 0x07	; 7
 e04:	99 f6       	brne	.-90     	; 0xdac <MIDI_Device_ConfigureEndpoints+0xa>
 e06:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
 e08:	df 91       	pop	r29
 e0a:	cf 91       	pop	r28
 e0c:	1f 91       	pop	r17
 e0e:	08 95       	ret

00000e10 <_exit>:
 e10:	f8 94       	cli

00000e12 <__stop_program>:
 e12:	ff cf       	rjmp	.-2      	; 0xe12 <__stop_program>
