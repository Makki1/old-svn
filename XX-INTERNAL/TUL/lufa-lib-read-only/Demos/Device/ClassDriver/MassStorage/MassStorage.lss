
MassStorage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  0000199a  00001a2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000199a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080016e  0080016e  00001a9c  2**0
                  ALLOC
  3 .stab         00000b1c  00000000  00000000  00001a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  000025b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000508  00000000  00000000  00002727  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000da9  00000000  00000000  00002c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a140  00000000  00000000  000039d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002519  00000000  00000000  0000db18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000077bf  00000000  00000000  00010031  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000790  00000000  00000000  000177f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003721  00000000  00000000  00017f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003ba1  00000000  00000000  0001b6a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006c0  00000000  00000000  0001f242  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
 *  \param[in] BufferPtr     Pointer to the data source RAM buffer
 */
void DataflashManager_WriteBlocks_RAM(const uint32_t BlockAddress,
                                      uint16_t TotalBlocks,
                                      uint8_t* BufferPtr)
{
       0:	8b c0       	rjmp	.+278    	; 0x118 <__ctors_end>
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       2:	00 00       	nop
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       4:	a7 c0       	rjmp	.+334    	; 0x154 <__bad_interrupt>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       6:	00 00       	nop
       8:	a5 c0       	rjmp	.+330    	; 0x154 <__bad_interrupt>
       a:	00 00       	nop
       c:	a3 c0       	rjmp	.+326    	; 0x154 <__bad_interrupt>
       e:	00 00       	nop
      10:	a1 c0       	rjmp	.+322    	; 0x154 <__bad_interrupt>
      12:	00 00       	nop
      14:	9f c0       	rjmp	.+318    	; 0x154 <__bad_interrupt>
      16:	00 00       	nop
      18:	9d c0       	rjmp	.+314    	; 0x154 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9b c0       	rjmp	.+310    	; 0x154 <__bad_interrupt>
      1e:	00 00       	nop
      20:	99 c0       	rjmp	.+306    	; 0x154 <__bad_interrupt>
      22:	00 00       	nop
      24:	97 c0       	rjmp	.+302    	; 0x154 <__bad_interrupt>
      26:	00 00       	nop
      28:	c2 c6       	rjmp	.+3460   	; 0xdae <__vector_10>
      2a:	00 00       	nop
      2c:	83 c6       	rjmp	.+3334   	; 0xd34 <__vector_11>
      2e:	00 00       	nop
      30:	91 c0       	rjmp	.+290    	; 0x154 <__bad_interrupt>
      32:	00 00       	nop
      34:	8f c0       	rjmp	.+286    	; 0x154 <__bad_interrupt>
      36:	00 00       	nop
      38:	8d c0       	rjmp	.+282    	; 0x154 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8b c0       	rjmp	.+278    	; 0x154 <__bad_interrupt>
      3e:	00 00       	nop
      40:	89 c0       	rjmp	.+274    	; 0x154 <__bad_interrupt>
      42:	00 00       	nop
      44:	87 c0       	rjmp	.+270    	; 0x154 <__bad_interrupt>
      46:	00 00       	nop
      48:	85 c0       	rjmp	.+266    	; 0x154 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	83 c0       	rjmp	.+262    	; 0x154 <__bad_interrupt>
      4e:	00 00       	nop
      50:	81 c0       	rjmp	.+258    	; 0x154 <__bad_interrupt>
      52:	00 00       	nop
      54:	7f c0       	rjmp	.+254    	; 0x154 <__bad_interrupt>
      56:	00 00       	nop
      58:	7d c0       	rjmp	.+250    	; 0x154 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7b c0       	rjmp	.+246    	; 0x154 <__bad_interrupt>
      5e:	00 00       	nop
      60:	79 c0       	rjmp	.+242    	; 0x154 <__bad_interrupt>
      62:	00 00       	nop
      64:	77 c0       	rjmp	.+238    	; 0x154 <__bad_interrupt>
      66:	00 00       	nop
      68:	75 c0       	rjmp	.+234    	; 0x154 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	73 c0       	rjmp	.+230    	; 0x154 <__bad_interrupt>
      6e:	00 00       	nop
      70:	71 c0       	rjmp	.+226    	; 0x154 <__bad_interrupt>
      72:	00 00       	nop
      74:	6f c0       	rjmp	.+222    	; 0x154 <__bad_interrupt>
      76:	00 00       	nop
      78:	6d c0       	rjmp	.+218    	; 0x154 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6b c0       	rjmp	.+214    	; 0x154 <__bad_interrupt>
      7e:	00 00       	nop
      80:	69 c0       	rjmp	.+210    	; 0x154 <__bad_interrupt>
      82:	00 00       	nop
      84:	67 c0       	rjmp	.+206    	; 0x154 <__bad_interrupt>
      86:	00 00       	nop
      88:	65 c0       	rjmp	.+202    	; 0x154 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	63 c0       	rjmp	.+198    	; 0x154 <__bad_interrupt>
      8e:	00 00       	nop
      90:	61 c0       	rjmp	.+194    	; 0x154 <__bad_interrupt>
      92:	00 00       	nop
      94:	5f c0       	rjmp	.+190    	; 0x154 <__bad_interrupt>
      96:	00 00       	nop

00000098 <DeviceDescriptor>:
      98:	12 01 10 01 00 00 00 08 eb 03 45 20 01 00 01 02     ..........E ....
      a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
      aa:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 08 06     .. .....2.......
      ba:	50 00 07 05 83 02 40 00 01 07 05 04 02 40 00 01     P.....@......@..

000000ca <LanguageString>:
      ca:	04 03 09 04                                         ....

000000ce <ManufacturerString>:
      ce:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      de:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e8 <ProductString>:
      e8:	2e 03 4c 00 55 00 46 00 41 00 20 00 4d 00 61 00     ..L.U.F.A. .M.a.
      f8:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.
     108:	67 00 65 00 20 00 44 00 65 00 6d 00 6f 00 00 00     g.e. .D.e.m.o...

00000118 <__ctors_end>:
     118:	11 24       	eor	r1, r1
     11a:	1f be       	out	0x3f, r1	; 63
     11c:	cf ef       	ldi	r28, 0xFF	; 255
     11e:	d0 e2       	ldi	r29, 0x20	; 32
     120:	de bf       	out	0x3e, r29	; 62
     122:	cd bf       	out	0x3d, r28	; 61

00000124 <__do_copy_data>:
     124:	11 e0       	ldi	r17, 0x01	; 1
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	ea e9       	ldi	r30, 0x9A	; 154
     12c:	f9 e1       	ldi	r31, 0x19	; 25
     12e:	00 e0       	ldi	r16, 0x00	; 0
     130:	0b bf       	out	0x3b, r16	; 59
     132:	02 c0       	rjmp	.+4      	; 0x138 <__do_copy_data+0x14>
     134:	07 90       	elpm	r0, Z+
     136:	0d 92       	st	X+, r0
     138:	ae 36       	cpi	r26, 0x6E	; 110
     13a:	b1 07       	cpc	r27, r17
     13c:	d9 f7       	brne	.-10     	; 0x134 <__do_copy_data+0x10>

0000013e <__do_clear_bss>:
     13e:	11 e0       	ldi	r17, 0x01	; 1
     140:	ae e6       	ldi	r26, 0x6E	; 110
     142:	b1 e0       	ldi	r27, 0x01	; 1
     144:	01 c0       	rjmp	.+2      	; 0x148 <.do_clear_bss_start>

00000146 <.do_clear_bss_loop>:
     146:	1d 92       	st	X+, r1

00000148 <.do_clear_bss_start>:
     148:	ab 37       	cpi	r26, 0x7B	; 123
     14a:	b1 07       	cpc	r27, r17
     14c:	e1 f7       	brne	.-8      	; 0x146 <.do_clear_bss_loop>
     14e:	58 d0       	rcall	.+176    	; 0x200 <main>
     150:	0c 94 cb 0c 	jmp	0x1996	; 0x1996 <_exit>

00000154 <__bad_interrupt>:
     154:	55 cf       	rjmp	.-342    	; 0x0 <__vectors>

00000156 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     156:	8b b1       	in	r24, 0x0b	; 11
     158:	8f 70       	andi	r24, 0x0F	; 15
     15a:	80 6a       	ori	r24, 0xA0	; 160
     15c:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     15e:	08 95       	ret

00000160 <EVENT_USB_Device_Disconnect>:
     160:	8b b1       	in	r24, 0x0b	; 11
     162:	8f 70       	andi	r24, 0x0F	; 15
     164:	80 61       	ori	r24, 0x10	; 16
     166:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     168:	08 95       	ret

0000016a <CALLBACK_MS_Device_SCSICommandReceived>:
     16a:	2b b1       	in	r18, 0x0b	; 11
     16c:	2f 70       	andi	r18, 0x0F	; 15
     16e:	20 62       	ori	r18, 0x20	; 32
     170:	2b b9       	out	0x0b, r18	; 11
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
     172:	d4 d3       	rcall	.+1960   	; 0x91c <SCSI_DecodeSCSICommand>
     174:	9b b1       	in	r25, 0x0b	; 11
     176:	9f 70       	andi	r25, 0x0F	; 15
     178:	90 66       	ori	r25, 0x60	; 96
     17a:	9b b9       	out	0x0b, r25	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);

	return CommandSuccess;
}
     17c:	08 95       	ret

0000017e <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	91 e0       	ldi	r25, 0x01	; 1
     182:	0c 94 92 0c 	jmp	0x1924	; 0x1924 <MS_Device_ProcessControlRequest>

00000186 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	91 e0       	ldi	r25, 0x01	; 1
     18a:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <MS_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     18e:	80 fd       	sbrc	r24, 0
     190:	02 c0       	rjmp	.+4      	; 0x196 <EVENT_USB_Device_ConfigurationChanged+0x10>
     192:	90 e9       	ldi	r25, 0x90	; 144
     194:	01 c0       	rjmp	.+2      	; 0x198 <EVENT_USB_Device_ConfigurationChanged+0x12>
     196:	90 e6       	ldi	r25, 0x60	; 96
     198:	8b b1       	in	r24, 0x0b	; 11
     19a:	8f 70       	andi	r24, 0x0F	; 15
     19c:	98 2b       	or	r25, r24
     19e:	9b b9       	out	0x0b, r25	; 11
}
     1a0:	08 95       	ret

000001a2 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     1a2:	84 b7       	in	r24, 0x34	; 52
     1a4:	87 7f       	andi	r24, 0xF7	; 247
     1a6:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     1a8:	88 e1       	ldi	r24, 0x18	; 24
     1aa:	0f b6       	in	r0, 0x3f	; 63
     1ac:	f8 94       	cli
     1ae:	80 93 60 00 	sts	0x0060, r24
     1b2:	10 92 60 00 	sts	0x0060, r1
     1b6:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	80 e8       	ldi	r24, 0x80	; 128
     1bc:	0f b6       	in	r0, 0x3f	; 63
     1be:	f8 94       	cli
     1c0:	80 93 61 00 	sts	0x0061, r24
     1c4:	90 93 61 00 	sts	0x0061, r25
     1c8:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     1ca:	8a b1       	in	r24, 0x0a	; 10
     1cc:	80 6f       	ori	r24, 0xF0	; 240
     1ce:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     1d0:	8b b1       	in	r24, 0x0b	; 11
     1d2:	8f 70       	andi	r24, 0x0F	; 15
     1d4:	8b b9       	out	0x0b, r24	; 11
			 *                         \c SPI_SCK_*, \c SPI_SAMPLE_*, \c SPI_ORDER_* and \c SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
     1d6:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
     1d8:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
     1da:	84 b1       	in	r24, 0x04	; 4
     1dc:	86 60       	ori	r24, 0x06	; 6
     1de:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
     1e0:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
     1e2:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     1e4:	8d b5       	in	r24, 0x2d	; 45
     1e6:	81 60       	ori	r24, 0x01	; 1
     1e8:	8d bd       	out	0x2d, r24	; 45
				else
				  SPSR &= ~(1 << SPI2X);

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
     1ea:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
     1ec:	8c e5       	ldi	r24, 0x5C	; 92
     1ee:	8c bd       	out	0x2c, r24	; 44
			/** Initializes the dataflash driver so that commands and data may be sent to an attached dataflash IC.
			 *  The microcontroller's SPI driver MUST be initialized before any of the dataflash commands are used.
			 */
			static inline void Dataflash_Init(void)
			{
				DATAFLASH_CHIPCS_DDR  |= DATAFLASH_CHIPCS_MASK;
     1f0:	8d b1       	in	r24, 0x0d	; 13
     1f2:	83 60       	ori	r24, 0x03	; 3
     1f4:	8d b9       	out	0x0d, r24	; 13
				DATAFLASH_CHIPCS_PORT |= DATAFLASH_CHIPCS_MASK;
     1f6:	8e b1       	in	r24, 0x0e	; 14
     1f8:	83 60       	ori	r24, 0x03	; 3
     1fa:	8e b9       	out	0x0e, r24	; 14

	/* Hardware Initialization */
	LEDs_Init();
	SPI_Init(SPI_SPEED_FCPU_DIV_2 | SPI_ORDER_MSB_FIRST | SPI_SCK_LEAD_FALLING | SPI_SAMPLE_TRAILING | SPI_MODE_MASTER);
	Dataflash_Init();
	USB_Init();
     1fc:	85 d5       	rcall	.+2826   	; 0xd08 <USB_Init>

	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
}
     1fe:	81 c0       	rjmp	.+258    	; 0x302 <DataflashManager_ResetDataflashProtections>

00000200 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     200:	d0 df       	rcall	.-96     	; 0x1a2 <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     202:	8b b1       	in	r24, 0x0b	; 11
     204:	8f 70       	andi	r24, 0x0F	; 15
     206:	80 61       	ori	r24, 0x10	; 16
     208:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     20a:	78 94       	sei

	for (;;)
	{
		MS_Device_USBTask(&Disk_MS_Interface);
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	91 e0       	ldi	r25, 0x01	; 1
     210:	0e 94 31 0b 	call	0x1662	; 0x1662 <MS_Device_USBTask>
		USB_USBTask();
     214:	0e 94 1e 0b 	call	0x163c	; 0x163c <USB_USBTask>
     218:	f9 cf       	rjmp	.-14     	; 0x20c <main+0xc>

0000021a <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     21a:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     21c:	92 30       	cpi	r25, 0x02	; 2
     21e:	49 f0       	breq	.+18     	; 0x232 <CALLBACK_USB_GetDescriptor+0x18>
     220:	93 30       	cpi	r25, 0x03	; 3
     222:	61 f0       	breq	.+24     	; 0x23c <CALLBACK_USB_GetDescriptor+0x22>
     224:	91 30       	cpi	r25, 0x01	; 1
     226:	f9 f4       	brne	.+62     	; 0x266 <CALLBACK_USB_GetDescriptor+0x4c>
     228:	e8 e9       	ldi	r30, 0x98	; 152
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	22 e1       	ldi	r18, 0x12	; 18
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	1e c0       	rjmp	.+60     	; 0x26e <CALLBACK_USB_GetDescriptor+0x54>
     232:	ea ea       	ldi	r30, 0xAA	; 170
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	20 e2       	ldi	r18, 0x20	; 32
     238:	30 e0       	ldi	r19, 0x00	; 0
     23a:	19 c0       	rjmp	.+50     	; 0x26e <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     23c:	81 30       	cpi	r24, 0x01	; 1
     23e:	49 f0       	breq	.+18     	; 0x252 <CALLBACK_USB_GetDescriptor+0x38>
     240:	81 30       	cpi	r24, 0x01	; 1
     242:	18 f0       	brcs	.+6      	; 0x24a <CALLBACK_USB_GetDescriptor+0x30>
     244:	82 30       	cpi	r24, 0x02	; 2
     246:	79 f4       	brne	.+30     	; 0x266 <CALLBACK_USB_GetDescriptor+0x4c>
     248:	08 c0       	rjmp	.+16     	; 0x25a <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     24a:	ea ec       	ldi	r30, 0xCA	; 202
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	84 91       	lpm	r24, Z+
     250:	07 c0       	rjmp	.+14     	; 0x260 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     252:	ee ec       	ldi	r30, 0xCE	; 206
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	84 91       	lpm	r24, Z+
     258:	03 c0       	rjmp	.+6      	; 0x260 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     25a:	e8 ee       	ldi	r30, 0xE8	; 232
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	84 91       	lpm	r24, Z+
     260:	28 2f       	mov	r18, r24
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	04 c0       	rjmp	.+8      	; 0x26e <CALLBACK_USB_GetDescriptor+0x54>
     266:	e0 e0       	ldi	r30, 0x00	; 0
     268:	f0 e0       	ldi	r31, 0x00	; 0
     26a:	20 e0       	ldi	r18, 0x00	; 0
     26c:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     26e:	ed 93       	st	X+, r30
     270:	fc 93       	st	X, r31
	return Size;
}
     272:	c9 01       	movw	r24, r18
     274:	08 95       	ret

00000276 <Dataflash_SelectChipFromPage>:
			 *
			 *  \param[in] PageAddress  Address of the page to manipulate, ranging from
			 *                          0 to ((DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS) - 1).
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
     276:	9c 01       	movw	r18, r24
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     278:	8e b1       	in	r24, 0x0e	; 14
     27a:	83 60       	ori	r24, 0x03	; 3
     27c:	8e b9       	out	0x0e, r24	; 14
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
				Dataflash_DeselectChip();

				if (PageAddress >= (DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS))
     27e:	80 e4       	ldi	r24, 0x40	; 64
     280:	20 30       	cpi	r18, 0x00	; 0
     282:	38 07       	cpc	r19, r24
     284:	58 f4       	brcc	.+22     	; 0x29c <Dataflash_SelectChipFromPage+0x26>
				  return;

				if (PageAddress & 0x01)
     286:	20 ff       	sbrs	r18, 0
     288:	05 c0       	rjmp	.+10     	; 0x294 <Dataflash_SelectChipFromPage+0x1e>
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     28a:	8e b1       	in	r24, 0x0e	; 14
     28c:	8c 7f       	andi	r24, 0xFC	; 252
     28e:	81 60       	ori	r24, 0x01	; 1
     290:	8e b9       	out	0x0e, r24	; 14
     292:	08 95       	ret
     294:	8e b1       	in	r24, 0x0e	; 14
     296:	8c 7f       	andi	r24, 0xFC	; 252
     298:	82 60       	ori	r24, 0x02	; 2
     29a:	8e b9       	out	0x0e, r24	; 14
     29c:	08 95       	ret

0000029e <Dataflash_ToggleSelectedChipCS>:
			 *  or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     29e:	8e b1       	in	r24, 0x0e	; 14
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     2a0:	9e b1       	in	r25, 0x0e	; 14
     2a2:	93 60       	ori	r25, 0x03	; 3
     2a4:	9e b9       	out	0x0e, r25	; 14
     2a6:	9e b1       	in	r25, 0x0e	; 14
     2a8:	83 70       	andi	r24, 0x03	; 3
     2aa:	9c 7f       	andi	r25, 0xFC	; 252
     2ac:	89 2b       	or	r24, r25
     2ae:	8e b9       	out	0x0e, r24	; 14
			{
				uint8_t SelectedChipMask = Dataflash_GetSelectedChip();

				Dataflash_DeselectChip();
				Dataflash_SelectChip(SelectedChipMask);
			}
     2b0:	08 95       	ret

000002b2 <Dataflash_WaitWhileBusy>:
			/** Spin-loops while the currently selected dataflash is busy executing a command, such as a main
			 *  memory page program or main memory to buffer transfer.
			 */
			static inline void Dataflash_WaitWhileBusy(void)
			{
				Dataflash_ToggleSelectedChipCS();
     2b2:	f5 df       	rcall	.-22     	; 0x29e <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     2b4:	87 ed       	ldi	r24, 0xD7	; 215
     2b6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     2b8:	0d b4       	in	r0, 0x2d	; 45
     2ba:	07 fe       	sbrs	r0, 7
     2bc:	fd cf       	rjmp	.-6      	; 0x2b8 <Dataflash_WaitWhileBusy+0x6>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     2be:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     2c0:	0d b4       	in	r0, 0x2d	; 45
     2c2:	07 fe       	sbrs	r0, 7
     2c4:	fd cf       	rjmp	.-6      	; 0x2c0 <Dataflash_WaitWhileBusy+0xe>
				Dataflash_SendByte(DF_CMD_GETSTATUS);
				while (!(Dataflash_ReceiveByte() & DF_STATUS_READY));
     2c6:	0e b4       	in	r0, 0x2e	; 46
     2c8:	07 fe       	sbrs	r0, 7
     2ca:	f9 cf       	rjmp	.-14     	; 0x2be <Dataflash_WaitWhileBusy+0xc>
				Dataflash_ToggleSelectedChipCS();
			}
     2cc:	e8 cf       	rjmp	.-48     	; 0x29e <Dataflash_ToggleSelectedChipCS>

000002ce <Dataflash_SendAddressBytes>:
			 *  \param[in] BufferByte   Address within the dataflash's buffer
			 */
			static inline void Dataflash_SendAddressBytes(uint16_t PageAddress,
			                                              const uint16_t BufferByte)
			{
				PageAddress >>= 1;
     2ce:	9c 01       	movw	r18, r24
     2d0:	36 95       	lsr	r19
     2d2:	27 95       	ror	r18

				Dataflash_SendByte(PageAddress >> 5);
     2d4:	36 e0       	ldi	r19, 0x06	; 6
     2d6:	96 95       	lsr	r25
     2d8:	87 95       	ror	r24
     2da:	3a 95       	dec	r19
     2dc:	e1 f7       	brne	.-8      	; 0x2d6 <Dataflash_SendAddressBytes+0x8>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     2de:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     2e0:	0d b4       	in	r0, 0x2d	; 45
     2e2:	07 fe       	sbrs	r0, 7
     2e4:	fd cf       	rjmp	.-6      	; 0x2e0 <Dataflash_SendAddressBytes+0x12>
				Dataflash_SendByte((PageAddress << 3) | (BufferByte >> 8));
     2e6:	82 2f       	mov	r24, r18
     2e8:	88 0f       	add	r24, r24
     2ea:	88 0f       	add	r24, r24
     2ec:	88 0f       	add	r24, r24
     2ee:	87 2b       	or	r24, r23
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     2f0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     2f2:	0d b4       	in	r0, 0x2d	; 45
     2f4:	07 fe       	sbrs	r0, 7
     2f6:	fd cf       	rjmp	.-6      	; 0x2f2 <Dataflash_SendAddressBytes+0x24>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     2f8:	6e bd       	out	0x2e, r22	; 46
				while (!(SPSR & (1 << SPIF)));
     2fa:	0d b4       	in	r0, 0x2d	; 45
     2fc:	07 fe       	sbrs	r0, 7
     2fe:	fd cf       	rjmp	.-6      	; 0x2fa <Dataflash_SendAddressBytes+0x2c>
				Dataflash_SendByte(BufferByte);
			}
     300:	08 95       	ret

00000302 <DataflashManager_ResetDataflashProtections>:
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     302:	8e b1       	in	r24, 0x0e	; 14
     304:	8c 7f       	andi	r24, 0xFC	; 252
     306:	82 60       	ori	r24, 0x02	; 2
     308:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     30a:	87 ed       	ldi	r24, 0xD7	; 215
     30c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     30e:	0d b4       	in	r0, 0x2d	; 45
     310:	07 fe       	sbrs	r0, 7
     312:	fd cf       	rjmp	.-6      	; 0x30e <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     314:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     316:	0d b4       	in	r0, 0x2d	; 45
     318:	07 fe       	sbrs	r0, 7
     31a:	fd cf       	rjmp	.-6      	; 0x316 <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     31c:	0e b4       	in	r0, 0x2e	; 46
     31e:	01 fe       	sbrs	r0, 1
     320:	15 c0       	rjmp	.+42     	; 0x34c <DataflashManager_ResetDataflashProtections+0x4a>
	{
		Dataflash_ToggleSelectedChipCS();
     322:	bd df       	rcall	.-134    	; 0x29e <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     324:	8d e3       	ldi	r24, 0x3D	; 61
     326:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     328:	0d b4       	in	r0, 0x2d	; 45
     32a:	07 fe       	sbrs	r0, 7
     32c:	fd cf       	rjmp	.-6      	; 0x328 <DataflashManager_ResetDataflashProtections+0x26>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     32e:	8a e2       	ldi	r24, 0x2A	; 42
     330:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     332:	0d b4       	in	r0, 0x2d	; 45
     334:	07 fe       	sbrs	r0, 7
     336:	fd cf       	rjmp	.-6      	; 0x332 <DataflashManager_ResetDataflashProtections+0x30>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     338:	8f e7       	ldi	r24, 0x7F	; 127
     33a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     33c:	0d b4       	in	r0, 0x2d	; 45
     33e:	07 fe       	sbrs	r0, 7
     340:	fd cf       	rjmp	.-6      	; 0x33c <DataflashManager_ResetDataflashProtections+0x3a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     342:	8a e9       	ldi	r24, 0x9A	; 154
     344:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     346:	0d b4       	in	r0, 0x2d	; 45
     348:	07 fe       	sbrs	r0, 7
     34a:	fd cf       	rjmp	.-6      	; 0x346 <DataflashManager_ResetDataflashProtections+0x44>
     34c:	8e b1       	in	r24, 0x0e	; 14
     34e:	8c 7f       	andi	r24, 0xFC	; 252
     350:	81 60       	ori	r24, 0x01	; 1
     352:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     354:	87 ed       	ldi	r24, 0xD7	; 215
     356:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     358:	0d b4       	in	r0, 0x2d	; 45
     35a:	07 fe       	sbrs	r0, 7
     35c:	fd cf       	rjmp	.-6      	; 0x358 <DataflashManager_ResetDataflashProtections+0x56>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     35e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     360:	0d b4       	in	r0, 0x2d	; 45
     362:	07 fe       	sbrs	r0, 7
     364:	fd cf       	rjmp	.-6      	; 0x360 <DataflashManager_ResetDataflashProtections+0x5e>
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     366:	0e b4       	in	r0, 0x2e	; 46
     368:	01 fe       	sbrs	r0, 1
     36a:	15 c0       	rjmp	.+42     	; 0x396 <DataflashManager_ResetDataflashProtections+0x94>
	{
		Dataflash_ToggleSelectedChipCS();
     36c:	98 df       	rcall	.-208    	; 0x29e <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     36e:	8d e3       	ldi	r24, 0x3D	; 61
     370:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     372:	0d b4       	in	r0, 0x2d	; 45
     374:	07 fe       	sbrs	r0, 7
     376:	fd cf       	rjmp	.-6      	; 0x372 <DataflashManager_ResetDataflashProtections+0x70>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     378:	8a e2       	ldi	r24, 0x2A	; 42
     37a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     37c:	0d b4       	in	r0, 0x2d	; 45
     37e:	07 fe       	sbrs	r0, 7
     380:	fd cf       	rjmp	.-6      	; 0x37c <DataflashManager_ResetDataflashProtections+0x7a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     382:	8f e7       	ldi	r24, 0x7F	; 127
     384:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     386:	0d b4       	in	r0, 0x2d	; 45
     388:	07 fe       	sbrs	r0, 7
     38a:	fd cf       	rjmp	.-6      	; 0x386 <DataflashManager_ResetDataflashProtections+0x84>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     38c:	8a e9       	ldi	r24, 0x9A	; 154
     38e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     390:	0d b4       	in	r0, 0x2d	; 45
     392:	07 fe       	sbrs	r0, 7
     394:	fd cf       	rjmp	.-6      	; 0x390 <DataflashManager_ResetDataflashProtections+0x8e>
     396:	8e b1       	in	r24, 0x0e	; 14
     398:	83 60       	ori	r24, 0x03	; 3
     39a:	8e b9       	out	0x0e, r24	; 14
	}
	#endif

	/* Deselect current Dataflash chip */
	Dataflash_DeselectChip();
}
     39c:	08 95       	ret

0000039e <DataflashManager_CheckDataflashOperation>:
     39e:	8e b1       	in	r24, 0x0e	; 14
     3a0:	8c 7f       	andi	r24, 0xFC	; 252
     3a2:	82 60       	ori	r24, 0x02	; 2
     3a4:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     3a6:	8f e9       	ldi	r24, 0x9F	; 159
     3a8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     3aa:	0d b4       	in	r0, 0x2d	; 45
     3ac:	07 fe       	sbrs	r0, 7
     3ae:	fd cf       	rjmp	.-6      	; 0x3aa <DataflashManager_CheckDataflashOperation+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     3b0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     3b2:	0d b4       	in	r0, 0x2d	; 45
     3b4:	07 fe       	sbrs	r0, 7
     3b6:	fd cf       	rjmp	.-6      	; 0x3b2 <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     3b8:	9e b5       	in	r25, 0x2e	; 46
     3ba:	8e b1       	in	r24, 0x0e	; 14
     3bc:	83 60       	ori	r24, 0x03	; 3
     3be:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     3c0:	9f 31       	cpi	r25, 0x1F	; 31
     3c2:	11 f0       	breq	.+4      	; 0x3c8 <DataflashManager_CheckDataflashOperation+0x2a>
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	08 95       	ret
     3c8:	8e b1       	in	r24, 0x0e	; 14
     3ca:	8c 7f       	andi	r24, 0xFC	; 252
     3cc:	81 60       	ori	r24, 0x01	; 1
     3ce:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     3d0:	8f e9       	ldi	r24, 0x9F	; 159
     3d2:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     3d4:	0d b4       	in	r0, 0x2d	; 45
     3d6:	07 fe       	sbrs	r0, 7
     3d8:	fd cf       	rjmp	.-6      	; 0x3d4 <DataflashManager_CheckDataflashOperation+0x36>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     3da:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     3dc:	0d b4       	in	r0, 0x2d	; 45
     3de:	07 fe       	sbrs	r0, 7
     3e0:	fd cf       	rjmp	.-6      	; 0x3dc <DataflashManager_CheckDataflashOperation+0x3e>
				return SPDR;
     3e2:	9e b5       	in	r25, 0x2e	; 46
     3e4:	8e b1       	in	r24, 0x0e	; 14
     3e6:	83 60       	ori	r24, 0x03	; 3
     3e8:	8e b9       	out	0x0e, r24	; 14
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	9f 31       	cpi	r25, 0x1F	; 31
     3ee:	09 f4       	brne	.+2      	; 0x3f2 <DataflashManager_CheckDataflashOperation+0x54>
     3f0:	81 e0       	ldi	r24, 0x01	; 1
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     3f2:	08 95       	ret

000003f4 <DataflashManager_ReadBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to read
 */
void DataflashManager_ReadBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
     3f4:	af 92       	push	r10
     3f6:	bf 92       	push	r11
     3f8:	cf 92       	push	r12
     3fa:	df 92       	push	r13
     3fc:	ef 92       	push	r14
     3fe:	ff 92       	push	r15
     400:	0f 93       	push	r16
     402:	1f 93       	push	r17
     404:	df 93       	push	r29
     406:	cf 93       	push	r28
     408:	0f 92       	push	r0
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
     40e:	5c 01       	movw	r10, r24
     410:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     412:	e9 e0       	ldi	r30, 0x09	; 9
     414:	44 0f       	add	r20, r20
     416:	55 1f       	adc	r21, r21
     418:	66 1f       	adc	r22, r22
     41a:	77 1f       	adc	r23, r23
     41c:	ea 95       	dec	r30
     41e:	d1 f7       	brne	.-12     	; 0x414 <DataflashManager_ReadBlocks+0x20>
     420:	db 01       	movw	r26, r22
     422:	ca 01       	movw	r24, r20
     424:	3a e0       	ldi	r19, 0x0A	; 10
     426:	b6 95       	lsr	r27
     428:	a7 95       	ror	r26
     42a:	97 95       	ror	r25
     42c:	87 95       	ror	r24
     42e:	3a 95       	dec	r19
     430:	d1 f7       	brne	.-12     	; 0x426 <DataflashManager_ReadBlocks+0x32>
     432:	8c 01       	movw	r16, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     434:	2f ef       	ldi	r18, 0xFF	; 255
     436:	c2 2e       	mov	r12, r18
     438:	23 e0       	ldi	r18, 0x03	; 3
     43a:	d2 2e       	mov	r13, r18
     43c:	c4 22       	and	r12, r20
     43e:	d5 22       	and	r13, r21
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     440:	1a df       	rcall	.-460    	; 0x276 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     442:	82 ed       	ldi	r24, 0xD2	; 210
     444:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     446:	0d b4       	in	r0, 0x2d	; 45
     448:	07 fe       	sbrs	r0, 7
     44a:	fd cf       	rjmp	.-6      	; 0x446 <DataflashManager_ReadBlocks+0x52>

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     44c:	c8 01       	movw	r24, r16
     44e:	b6 01       	movw	r22, r12
     450:	3e df       	rcall	.-388    	; 0x2ce <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     452:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     454:	0d b4       	in	r0, 0x2d	; 45
     456:	07 fe       	sbrs	r0, 7
     458:	fd cf       	rjmp	.-6      	; 0x454 <DataflashManager_ReadBlocks+0x60>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     45a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     45c:	0d b4       	in	r0, 0x2d	; 45
     45e:	07 fe       	sbrs	r0, 7
     460:	fd cf       	rjmp	.-6      	; 0x45c <DataflashManager_ReadBlocks+0x68>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     462:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     464:	0d b4       	in	r0, 0x2d	; 45
     466:	07 fe       	sbrs	r0, 7
     468:	fd cf       	rjmp	.-6      	; 0x464 <DataflashManager_ReadBlocks+0x70>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     46a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     46c:	0d b4       	in	r0, 0x2d	; 45
     46e:	07 fe       	sbrs	r0, 7
     470:	fd cf       	rjmp	.-6      	; 0x46c <DataflashManager_ReadBlocks+0x78>
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     472:	ce d3       	rcall	.+1948   	; 0xc10 <Endpoint_WaitUntilReady>
     474:	88 23       	and	r24, r24
     476:	09 f0       	breq	.+2      	; 0x47a <DataflashManager_ReadBlocks+0x86>
     478:	c5 c0       	rjmp	.+394    	; 0x604 <DataflashManager_ReadBlocks+0x210>
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     47a:	94 e0       	ldi	r25, 0x04	; 4
     47c:	d6 94       	lsr	r13
     47e:	c7 94       	ror	r12
     480:	9a 95       	dec	r25
     482:	e1 f7       	brne	.-8      	; 0x47c <DataflashManager_ReadBlocks+0x88>
     484:	9c 2d       	mov	r25, r12
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     486:	82 ed       	ldi	r24, 0xD2	; 210
     488:	c8 2e       	mov	r12, r24
     48a:	ac c0       	rjmp	.+344    	; 0x5e4 <DataflashManager_ReadBlocks+0x1f0>
     48c:	dd 24       	eor	r13, r13
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     48e:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently full */
			if (!(Endpoint_IsReadWriteAllowed()))
     492:	85 fd       	sbrc	r24, 5
     494:	0b c0       	rjmp	.+22     	; 0x4ac <DataflashManager_ReadBlocks+0xb8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     496:	80 91 e8 00 	lds	r24, 0x00E8
     49a:	8e 77       	andi	r24, 0x7E	; 126
     49c:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the endpoint bank to send its contents to the host */
				Endpoint_ClearIN();

				/* Wait until the endpoint is ready for more data */
				if (Endpoint_WaitUntilReady())
     4a0:	99 83       	std	Y+1, r25	; 0x01
     4a2:	b6 d3       	rcall	.+1900   	; 0xc10 <Endpoint_WaitUntilReady>
     4a4:	99 81       	ldd	r25, Y+1	; 0x01
     4a6:	88 23       	and	r24, r24
     4a8:	09 f0       	breq	.+2      	; 0x4ac <DataflashManager_ReadBlocks+0xb8>
     4aa:	ac c0       	rjmp	.+344    	; 0x604 <DataflashManager_ReadBlocks+0x210>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     4ac:	90 34       	cpi	r25, 0x40	; 64
     4ae:	e9 f4       	brne	.+58     	; 0x4ea <DataflashManager_ReadBlocks+0xf6>
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     4b0:	0f 5f       	subi	r16, 0xFF	; 255
     4b2:	1f 4f       	sbci	r17, 0xFF	; 255

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     4b4:	c8 01       	movw	r24, r16
     4b6:	df de       	rcall	.-578    	; 0x276 <Dataflash_SelectChipFromPage>
     4b8:	ce bc       	out	0x2e, r12	; 46
				while (!(SPSR & (1 << SPIF)));
     4ba:	0d b4       	in	r0, 0x2d	; 45
     4bc:	07 fe       	sbrs	r0, 7
     4be:	fd cf       	rjmp	.-6      	; 0x4ba <DataflashManager_ReadBlocks+0xc6>

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     4c0:	c8 01       	movw	r24, r16
     4c2:	60 e0       	ldi	r22, 0x00	; 0
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	03 df       	rcall	.-506    	; 0x2ce <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4c8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4ca:	0d b4       	in	r0, 0x2d	; 45
     4cc:	07 fe       	sbrs	r0, 7
     4ce:	fd cf       	rjmp	.-6      	; 0x4ca <DataflashManager_ReadBlocks+0xd6>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4d0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4d2:	0d b4       	in	r0, 0x2d	; 45
     4d4:	07 fe       	sbrs	r0, 7
     4d6:	fd cf       	rjmp	.-6      	; 0x4d2 <DataflashManager_ReadBlocks+0xde>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4d8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4da:	0d b4       	in	r0, 0x2d	; 45
     4dc:	07 fe       	sbrs	r0, 7
     4de:	fd cf       	rjmp	.-6      	; 0x4da <DataflashManager_ReadBlocks+0xe6>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4e0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4e2:	0d b4       	in	r0, 0x2d	; 45
     4e4:	07 fe       	sbrs	r0, 7
     4e6:	fd cf       	rjmp	.-6      	; 0x4e2 <DataflashManager_ReadBlocks+0xee>
     4e8:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     4ea:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4ec:	0d b4       	in	r0, 0x2d	; 45
     4ee:	07 fe       	sbrs	r0, 7
     4f0:	fd cf       	rjmp	.-6      	; 0x4ec <DataflashManager_ReadBlocks+0xf8>
				return SPDR;
     4f2:	8e b5       	in	r24, 0x2e	; 46
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     4f4:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     4f8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4fa:	0d b4       	in	r0, 0x2d	; 45
     4fc:	07 fe       	sbrs	r0, 7
     4fe:	fd cf       	rjmp	.-6      	; 0x4fa <DataflashManager_ReadBlocks+0x106>
				return SPDR;
     500:	8e b5       	in	r24, 0x2e	; 46
     502:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     506:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     508:	0d b4       	in	r0, 0x2d	; 45
     50a:	07 fe       	sbrs	r0, 7
     50c:	fd cf       	rjmp	.-6      	; 0x508 <DataflashManager_ReadBlocks+0x114>
				return SPDR;
     50e:	8e b5       	in	r24, 0x2e	; 46
     510:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     514:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     516:	0d b4       	in	r0, 0x2d	; 45
     518:	07 fe       	sbrs	r0, 7
     51a:	fd cf       	rjmp	.-6      	; 0x516 <DataflashManager_ReadBlocks+0x122>
				return SPDR;
     51c:	8e b5       	in	r24, 0x2e	; 46
     51e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     522:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     524:	0d b4       	in	r0, 0x2d	; 45
     526:	07 fe       	sbrs	r0, 7
     528:	fd cf       	rjmp	.-6      	; 0x524 <DataflashManager_ReadBlocks+0x130>
				return SPDR;
     52a:	8e b5       	in	r24, 0x2e	; 46
     52c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     530:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     532:	0d b4       	in	r0, 0x2d	; 45
     534:	07 fe       	sbrs	r0, 7
     536:	fd cf       	rjmp	.-6      	; 0x532 <DataflashManager_ReadBlocks+0x13e>
				return SPDR;
     538:	8e b5       	in	r24, 0x2e	; 46
     53a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     53e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     540:	0d b4       	in	r0, 0x2d	; 45
     542:	07 fe       	sbrs	r0, 7
     544:	fd cf       	rjmp	.-6      	; 0x540 <DataflashManager_ReadBlocks+0x14c>
				return SPDR;
     546:	8e b5       	in	r24, 0x2e	; 46
     548:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     54c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     54e:	0d b4       	in	r0, 0x2d	; 45
     550:	07 fe       	sbrs	r0, 7
     552:	fd cf       	rjmp	.-6      	; 0x54e <DataflashManager_ReadBlocks+0x15a>
				return SPDR;
     554:	8e b5       	in	r24, 0x2e	; 46
     556:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     55a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     55c:	0d b4       	in	r0, 0x2d	; 45
     55e:	07 fe       	sbrs	r0, 7
     560:	fd cf       	rjmp	.-6      	; 0x55c <DataflashManager_ReadBlocks+0x168>
				return SPDR;
     562:	8e b5       	in	r24, 0x2e	; 46
     564:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     568:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     56a:	0d b4       	in	r0, 0x2d	; 45
     56c:	07 fe       	sbrs	r0, 7
     56e:	fd cf       	rjmp	.-6      	; 0x56a <DataflashManager_ReadBlocks+0x176>
				return SPDR;
     570:	8e b5       	in	r24, 0x2e	; 46
     572:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     576:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     578:	0d b4       	in	r0, 0x2d	; 45
     57a:	07 fe       	sbrs	r0, 7
     57c:	fd cf       	rjmp	.-6      	; 0x578 <DataflashManager_ReadBlocks+0x184>
				return SPDR;
     57e:	8e b5       	in	r24, 0x2e	; 46
     580:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     584:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     586:	0d b4       	in	r0, 0x2d	; 45
     588:	07 fe       	sbrs	r0, 7
     58a:	fd cf       	rjmp	.-6      	; 0x586 <DataflashManager_ReadBlocks+0x192>
				return SPDR;
     58c:	8e b5       	in	r24, 0x2e	; 46
     58e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     592:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     594:	0d b4       	in	r0, 0x2d	; 45
     596:	07 fe       	sbrs	r0, 7
     598:	fd cf       	rjmp	.-6      	; 0x594 <DataflashManager_ReadBlocks+0x1a0>
				return SPDR;
     59a:	8e b5       	in	r24, 0x2e	; 46
     59c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     5a0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5a2:	0d b4       	in	r0, 0x2d	; 45
     5a4:	07 fe       	sbrs	r0, 7
     5a6:	fd cf       	rjmp	.-6      	; 0x5a2 <DataflashManager_ReadBlocks+0x1ae>
				return SPDR;
     5a8:	8e b5       	in	r24, 0x2e	; 46
     5aa:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     5ae:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5b0:	0d b4       	in	r0, 0x2d	; 45
     5b2:	07 fe       	sbrs	r0, 7
     5b4:	fd cf       	rjmp	.-6      	; 0x5b0 <DataflashManager_ReadBlocks+0x1bc>
				return SPDR;
     5b6:	8e b5       	in	r24, 0x2e	; 46
     5b8:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     5bc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5be:	0d b4       	in	r0, 0x2d	; 45
     5c0:	07 fe       	sbrs	r0, 7
     5c2:	fd cf       	rjmp	.-6      	; 0x5be <DataflashManager_ReadBlocks+0x1ca>
				return SPDR;
     5c4:	8e b5       	in	r24, 0x2e	; 46
     5c6:	80 93 f1 00 	sts	0x00F1, r24

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     5ca:	f5 01       	movw	r30, r10
     5cc:	86 a9       	ldd	r24, Z+54	; 0x36
     5ce:	88 23       	and	r24, r24
     5d0:	c9 f4       	brne	.+50     	; 0x604 <DataflashManager_ReadBlocks+0x210>
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     5d2:	9f 5f       	subi	r25, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     5d4:	d3 94       	inc	r13
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     5d6:	f0 e2       	ldi	r31, 0x20	; 32
     5d8:	df 16       	cp	r13, r31
     5da:	09 f0       	breq	.+2      	; 0x5de <DataflashManager_ReadBlocks+0x1ea>
     5dc:	58 cf       	rjmp	.-336    	; 0x48e <DataflashManager_ReadBlocks+0x9a>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     5de:	08 94       	sec
     5e0:	e1 08       	sbc	r14, r1
     5e2:	f1 08       	sbc	r15, r1

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     5e4:	e1 14       	cp	r14, r1
     5e6:	f1 04       	cpc	r15, r1
     5e8:	09 f0       	breq	.+2      	; 0x5ec <DataflashManager_ReadBlocks+0x1f8>
     5ea:	50 cf       	rjmp	.-352    	; 0x48c <DataflashManager_ReadBlocks+0x98>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     5ec:	80 91 e8 00 	lds	r24, 0x00E8
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     5f0:	85 fd       	sbrc	r24, 5
     5f2:	05 c0       	rjmp	.+10     	; 0x5fe <DataflashManager_ReadBlocks+0x20a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5f4:	80 91 e8 00 	lds	r24, 0x00E8
     5f8:	8e 77       	andi	r24, 0x7E	; 126
     5fa:	80 93 e8 00 	sts	0x00E8, r24
     5fe:	8e b1       	in	r24, 0x0e	; 14
     600:	83 60       	ori	r24, 0x03	; 3
     602:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearIN();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     604:	0f 90       	pop	r0
     606:	cf 91       	pop	r28
     608:	df 91       	pop	r29
     60a:	1f 91       	pop	r17
     60c:	0f 91       	pop	r16
     60e:	ff 90       	pop	r15
     610:	ef 90       	pop	r14
     612:	df 90       	pop	r13
     614:	cf 90       	pop	r12
     616:	bf 90       	pop	r11
     618:	af 90       	pop	r10
     61a:	08 95       	ret

0000061c <DataflashManager_WriteBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
     61c:	8f 92       	push	r8
     61e:	9f 92       	push	r9
     620:	af 92       	push	r10
     622:	bf 92       	push	r11
     624:	cf 92       	push	r12
     626:	df 92       	push	r13
     628:	ef 92       	push	r14
     62a:	ff 92       	push	r15
     62c:	0f 93       	push	r16
     62e:	1f 93       	push	r17
     630:	df 93       	push	r29
     632:	cf 93       	push	r28
     634:	0f 92       	push	r0
     636:	cd b7       	in	r28, 0x3d	; 61
     638:	de b7       	in	r29, 0x3e	; 62
     63a:	5c 01       	movw	r10, r24
     63c:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     63e:	09 e0       	ldi	r16, 0x09	; 9
     640:	44 0f       	add	r20, r20
     642:	55 1f       	adc	r21, r21
     644:	66 1f       	adc	r22, r22
     646:	77 1f       	adc	r23, r23
     648:	0a 95       	dec	r16
     64a:	d1 f7       	brne	.-12     	; 0x640 <DataflashManager_WriteBlocks+0x24>
     64c:	db 01       	movw	r26, r22
     64e:	ca 01       	movw	r24, r20
     650:	1a e0       	ldi	r17, 0x0A	; 10
     652:	b6 95       	lsr	r27
     654:	a7 95       	ror	r26
     656:	97 95       	ror	r25
     658:	87 95       	ror	r24
     65a:	1a 95       	dec	r17
     65c:	d1 f7       	brne	.-12     	; 0x652 <DataflashManager_WriteBlocks+0x36>
     65e:	8c 01       	movw	r16, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     660:	bf ef       	ldi	r27, 0xFF	; 255
     662:	cb 2e       	mov	r12, r27
     664:	b3 e0       	ldi	r27, 0x03	; 3
     666:	db 2e       	mov	r13, r27
     668:	c4 22       	and	r12, r20
     66a:	d5 22       	and	r13, r21
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     66c:	04 de       	rcall	.-1016   	; 0x276 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     66e:	83 e5       	ldi	r24, 0x53	; 83
     670:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     672:	0d b4       	in	r0, 0x2d	; 45
     674:	07 fe       	sbrs	r0, 7
     676:	fd cf       	rjmp	.-6      	; 0x672 <DataflashManager_WriteBlocks+0x56>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
	/* Copy selected dataflash's current page contents to the Dataflash buffer */
	Dataflash_SendByte(DF_CMD_MAINMEMTOBUFF1);
	Dataflash_SendAddressBytes(CurrDFPage, 0);
     678:	c8 01       	movw	r24, r16
     67a:	60 e0       	ldi	r22, 0x00	; 0
     67c:	70 e0       	ldi	r23, 0x00	; 0
     67e:	27 de       	rcall	.-946    	; 0x2ce <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     680:	18 de       	rcall	.-976    	; 0x2b2 <Dataflash_WaitWhileBusy>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     682:	84 e8       	ldi	r24, 0x84	; 132
     684:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     686:	0d b4       	in	r0, 0x2d	; 45
     688:	07 fe       	sbrs	r0, 7
     68a:	fd cf       	rjmp	.-6      	; 0x686 <DataflashManager_WriteBlocks+0x6a>
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	b6 01       	movw	r22, r12
     692:	1d de       	rcall	.-966    	; 0x2ce <Dataflash_SendAddressBytes>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     694:	bd d2       	rcall	.+1402   	; 0xc10 <Endpoint_WaitUntilReady>
     696:	88 23       	and	r24, r24
     698:	09 f0       	breq	.+2      	; 0x69c <DataflashManager_WriteBlocks+0x80>
     69a:	ea c0       	rjmp	.+468    	; 0x870 <DataflashManager_WriteBlocks+0x254>
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     69c:	a4 e0       	ldi	r26, 0x04	; 4
     69e:	d6 94       	lsr	r13
     6a0:	c7 94       	ror	r12
     6a2:	aa 95       	dec	r26
     6a4:	e1 f7       	brne	.-8      	; 0x69e <DataflashManager_WriteBlocks+0x82>
     6a6:	9c 2d       	mov	r25, r12
     6a8:	47 01       	movw	r8, r14
     6aa:	f5 e0       	ldi	r31, 0x05	; 5
     6ac:	88 0c       	add	r8, r8
     6ae:	99 1c       	adc	r9, r9
     6b0:	fa 95       	dec	r31
     6b2:	e1 f7       	brne	.-8      	; 0x6ac <DataflashManager_WriteBlocks+0x90>
     6b4:	dd 24       	eor	r13, r13
     6b6:	bd c0       	rjmp	.+378    	; 0x832 <DataflashManager_WriteBlocks+0x216>
     6b8:	cc 24       	eor	r12, r12
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     6ba:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently empty */
			if (!(Endpoint_IsReadWriteAllowed()))
     6be:	85 fd       	sbrc	r24, 5
     6c0:	0b c0       	rjmp	.+22     	; 0x6d8 <DataflashManager_WriteBlocks+0xbc>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     6c2:	80 91 e8 00 	lds	r24, 0x00E8
     6c6:	8b 77       	andi	r24, 0x7B	; 123
     6c8:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the current endpoint bank */
				Endpoint_ClearOUT();

				/* Wait until the host has sent another packet */
				if (Endpoint_WaitUntilReady())
     6cc:	99 83       	std	Y+1, r25	; 0x01
     6ce:	a0 d2       	rcall	.+1344   	; 0xc10 <Endpoint_WaitUntilReady>
     6d0:	99 81       	ldd	r25, Y+1	; 0x01
     6d2:	88 23       	and	r24, r24
     6d4:	09 f0       	breq	.+2      	; 0x6d8 <DataflashManager_WriteBlocks+0xbc>
     6d6:	cc c0       	rjmp	.+408    	; 0x870 <DataflashManager_WriteBlocks+0x254>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     6d8:	90 34       	cpi	r25, 0x40	; 64
     6da:	09 f0       	breq	.+2      	; 0x6de <DataflashManager_WriteBlocks+0xc2>
     6dc:	39 c0       	rjmp	.+114    	; 0x750 <DataflashManager_WriteBlocks+0x134>
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
     6de:	e9 dd       	rcall	.-1070   	; 0x2b2 <Dataflash_WaitWhileBusy>
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     6e0:	dd 20       	and	r13, r13
     6e2:	11 f4       	brne	.+4      	; 0x6e8 <DataflashManager_WriteBlocks+0xcc>
     6e4:	83 e8       	ldi	r24, 0x83	; 131
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <DataflashManager_WriteBlocks+0xce>
     6e8:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6ea:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     6ec:	0d b4       	in	r0, 0x2d	; 45
     6ee:	07 fe       	sbrs	r0, 7
     6f0:	fd cf       	rjmp	.-6      	; 0x6ec <DataflashManager_WriteBlocks+0xd0>
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     6f2:	c8 01       	movw	r24, r16
     6f4:	60 e0       	ldi	r22, 0x00	; 0
     6f6:	70 e0       	ldi	r23, 0x00	; 0
     6f8:	ea dd       	rcall	.-1068   	; 0x2ce <Dataflash_SendAddressBytes>

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     6fa:	0f 5f       	subi	r16, 0xFF	; 255
     6fc:	1f 4f       	sbci	r17, 0xFF	; 255
			 *  or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     6fe:	8e b1       	in	r24, 0x0e	; 14

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     700:	83 70       	andi	r24, 0x03	; 3
     702:	81 30       	cpi	r24, 0x01	; 1
     704:	09 f4       	brne	.+2      	; 0x708 <DataflashManager_WriteBlocks+0xec>
				  UsingSecondBuffer = !(UsingSecondBuffer);
     706:	d8 26       	eor	r13, r24

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     708:	c8 01       	movw	r24, r16
     70a:	b5 dd       	rcall	.-1174   	; 0x276 <Dataflash_SelectChipFromPage>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     70c:	20 e4       	ldi	r18, 0x40	; 64
     70e:	82 16       	cp	r8, r18
     710:	91 04       	cpc	r9, r1
     712:	78 f4       	brcc	.+30     	; 0x732 <DataflashManager_WriteBlocks+0x116>
				{
					/* Copy selected dataflash's current page contents to the Dataflash buffer */
					Dataflash_WaitWhileBusy();
     714:	ce dd       	rcall	.-1124   	; 0x2b2 <Dataflash_WaitWhileBusy>
					Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_MAINMEMTOBUFF2 : DF_CMD_MAINMEMTOBUFF1);
     716:	dd 20       	and	r13, r13
     718:	11 f4       	brne	.+4      	; 0x71e <DataflashManager_WriteBlocks+0x102>
     71a:	83 e5       	ldi	r24, 0x53	; 83
     71c:	01 c0       	rjmp	.+2      	; 0x720 <DataflashManager_WriteBlocks+0x104>
     71e:	85 e5       	ldi	r24, 0x55	; 85
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     720:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     722:	0d b4       	in	r0, 0x2d	; 45
     724:	07 fe       	sbrs	r0, 7
     726:	fd cf       	rjmp	.-6      	; 0x722 <DataflashManager_WriteBlocks+0x106>
					Dataflash_SendAddressBytes(CurrDFPage, 0);
     728:	c8 01       	movw	r24, r16
     72a:	60 e0       	ldi	r22, 0x00	; 0
     72c:	70 e0       	ldi	r23, 0x00	; 0
     72e:	cf dd       	rcall	.-1122   	; 0x2ce <Dataflash_SendAddressBytes>
					Dataflash_WaitWhileBusy();
     730:	c0 dd       	rcall	.-1152   	; 0x2b2 <Dataflash_WaitWhileBusy>
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
     732:	dd 20       	and	r13, r13
     734:	11 f4       	brne	.+4      	; 0x73a <DataflashManager_WriteBlocks+0x11e>
     736:	84 e8       	ldi	r24, 0x84	; 132
     738:	01 c0       	rjmp	.+2      	; 0x73c <DataflashManager_WriteBlocks+0x120>
     73a:	87 e8       	ldi	r24, 0x87	; 135
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     73c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     73e:	0d b4       	in	r0, 0x2d	; 45
     740:	07 fe       	sbrs	r0, 7
     742:	fd cf       	rjmp	.-6      	; 0x73e <DataflashManager_WriteBlocks+0x122>
				Dataflash_SendAddressBytes(0, 0);
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	60 e0       	ldi	r22, 0x00	; 0
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	c0 dd       	rcall	.-1152   	; 0x2ce <Dataflash_SendAddressBytes>
     74e:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     750:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     754:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     756:	0d b4       	in	r0, 0x2d	; 45
     758:	07 fe       	sbrs	r0, 7
     75a:	fd cf       	rjmp	.-6      	; 0x756 <DataflashManager_WriteBlocks+0x13a>
     75c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     760:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     762:	0d b4       	in	r0, 0x2d	; 45
     764:	07 fe       	sbrs	r0, 7
     766:	fd cf       	rjmp	.-6      	; 0x762 <DataflashManager_WriteBlocks+0x146>
     768:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     76c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     76e:	0d b4       	in	r0, 0x2d	; 45
     770:	07 fe       	sbrs	r0, 7
     772:	fd cf       	rjmp	.-6      	; 0x76e <DataflashManager_WriteBlocks+0x152>
     774:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     778:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     77a:	0d b4       	in	r0, 0x2d	; 45
     77c:	07 fe       	sbrs	r0, 7
     77e:	fd cf       	rjmp	.-6      	; 0x77a <DataflashManager_WriteBlocks+0x15e>
     780:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     784:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     786:	0d b4       	in	r0, 0x2d	; 45
     788:	07 fe       	sbrs	r0, 7
     78a:	fd cf       	rjmp	.-6      	; 0x786 <DataflashManager_WriteBlocks+0x16a>
     78c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     790:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     792:	0d b4       	in	r0, 0x2d	; 45
     794:	07 fe       	sbrs	r0, 7
     796:	fd cf       	rjmp	.-6      	; 0x792 <DataflashManager_WriteBlocks+0x176>
     798:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     79c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     79e:	0d b4       	in	r0, 0x2d	; 45
     7a0:	07 fe       	sbrs	r0, 7
     7a2:	fd cf       	rjmp	.-6      	; 0x79e <DataflashManager_WriteBlocks+0x182>
     7a4:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7a8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7aa:	0d b4       	in	r0, 0x2d	; 45
     7ac:	07 fe       	sbrs	r0, 7
     7ae:	fd cf       	rjmp	.-6      	; 0x7aa <DataflashManager_WriteBlocks+0x18e>
     7b0:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7b4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7b6:	0d b4       	in	r0, 0x2d	; 45
     7b8:	07 fe       	sbrs	r0, 7
     7ba:	fd cf       	rjmp	.-6      	; 0x7b6 <DataflashManager_WriteBlocks+0x19a>
     7bc:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7c0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7c2:	0d b4       	in	r0, 0x2d	; 45
     7c4:	07 fe       	sbrs	r0, 7
     7c6:	fd cf       	rjmp	.-6      	; 0x7c2 <DataflashManager_WriteBlocks+0x1a6>
     7c8:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7cc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7ce:	0d b4       	in	r0, 0x2d	; 45
     7d0:	07 fe       	sbrs	r0, 7
     7d2:	fd cf       	rjmp	.-6      	; 0x7ce <DataflashManager_WriteBlocks+0x1b2>
     7d4:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7d8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7da:	0d b4       	in	r0, 0x2d	; 45
     7dc:	07 fe       	sbrs	r0, 7
     7de:	fd cf       	rjmp	.-6      	; 0x7da <DataflashManager_WriteBlocks+0x1be>
     7e0:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7e4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7e6:	0d b4       	in	r0, 0x2d	; 45
     7e8:	07 fe       	sbrs	r0, 7
     7ea:	fd cf       	rjmp	.-6      	; 0x7e6 <DataflashManager_WriteBlocks+0x1ca>
     7ec:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7f0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7f2:	0d b4       	in	r0, 0x2d	; 45
     7f4:	07 fe       	sbrs	r0, 7
     7f6:	fd cf       	rjmp	.-6      	; 0x7f2 <DataflashManager_WriteBlocks+0x1d6>
     7f8:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7fc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7fe:	0d b4       	in	r0, 0x2d	; 45
     800:	07 fe       	sbrs	r0, 7
     802:	fd cf       	rjmp	.-6      	; 0x7fe <DataflashManager_WriteBlocks+0x1e2>
     804:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     808:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     80a:	0d b4       	in	r0, 0x2d	; 45
     80c:	07 fe       	sbrs	r0, 7
     80e:	fd cf       	rjmp	.-6      	; 0x80a <DataflashManager_WriteBlocks+0x1ee>

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     810:	f5 01       	movw	r30, r10
     812:	86 a9       	ldd	r24, Z+54	; 0x36
     814:	88 23       	and	r24, r24
     816:	61 f5       	brne	.+88     	; 0x870 <DataflashManager_WriteBlocks+0x254>
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     818:	9f 5f       	subi	r25, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     81a:	c3 94       	inc	r12
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     81c:	f0 e2       	ldi	r31, 0x20	; 32
     81e:	cf 16       	cp	r12, r31
     820:	09 f0       	breq	.+2      	; 0x824 <DataflashManager_WriteBlocks+0x208>
     822:	4b cf       	rjmp	.-362    	; 0x6ba <DataflashManager_WriteBlocks+0x9e>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     824:	08 94       	sec
     826:	e1 08       	sbc	r14, r1
     828:	f1 08       	sbc	r15, r1
     82a:	20 ee       	ldi	r18, 0xE0	; 224
     82c:	3f ef       	ldi	r19, 0xFF	; 255
     82e:	82 0e       	add	r8, r18
     830:	93 1e       	adc	r9, r19

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     832:	e1 14       	cp	r14, r1
     834:	f1 04       	cpc	r15, r1
     836:	09 f0       	breq	.+2      	; 0x83a <DataflashManager_WriteBlocks+0x21e>
     838:	3f cf       	rjmp	.-386    	; 0x6b8 <DataflashManager_WriteBlocks+0x9c>
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
     83a:	3b dd       	rcall	.-1418   	; 0x2b2 <Dataflash_WaitWhileBusy>
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     83c:	dd 20       	and	r13, r13
     83e:	11 f4       	brne	.+4      	; 0x844 <DataflashManager_WriteBlocks+0x228>
     840:	83 e8       	ldi	r24, 0x83	; 131
     842:	01 c0       	rjmp	.+2      	; 0x846 <DataflashManager_WriteBlocks+0x22a>
     844:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     846:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     848:	0d b4       	in	r0, 0x2d	; 45
     84a:	07 fe       	sbrs	r0, 7
     84c:	fd cf       	rjmp	.-6      	; 0x848 <DataflashManager_WriteBlocks+0x22c>
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
     84e:	c8 01       	movw	r24, r16
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	3c dd       	rcall	.-1416   	; 0x2ce <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     856:	2d dd       	rcall	.-1446   	; 0x2b2 <Dataflash_WaitWhileBusy>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     858:	80 91 e8 00 	lds	r24, 0x00E8

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     85c:	85 fd       	sbrc	r24, 5
     85e:	05 c0       	rjmp	.+10     	; 0x86a <DataflashManager_WriteBlocks+0x24e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     860:	80 91 e8 00 	lds	r24, 0x00E8
     864:	8b 77       	andi	r24, 0x7B	; 123
     866:	80 93 e8 00 	sts	0x00E8, r24
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     86a:	8e b1       	in	r24, 0x0e	; 14
     86c:	83 60       	ori	r24, 0x03	; 3
     86e:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearOUT();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     870:	0f 90       	pop	r0
     872:	cf 91       	pop	r28
     874:	df 91       	pop	r29
     876:	1f 91       	pop	r17
     878:	0f 91       	pop	r16
     87a:	ff 90       	pop	r15
     87c:	ef 90       	pop	r14
     87e:	df 90       	pop	r13
     880:	cf 90       	pop	r12
     882:	bf 90       	pop	r11
     884:	af 90       	pop	r10
     886:	9f 90       	pop	r9
     888:	8f 90       	pop	r8
     88a:	08 95       	ret

0000088c <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
     88c:	0f 93       	push	r16
     88e:	1f 93       	push	r17
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	8c 01       	movw	r16, r24
     896:	86 2f       	mov	r24, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     898:	f8 01       	movw	r30, r16
     89a:	46 8d       	ldd	r20, Z+30	; 0x1e
     89c:	55 8d       	ldd	r21, Z+29	; 0x1d
     89e:	64 8d       	ldd	r22, Z+28	; 0x1c
     8a0:	73 8d       	ldd	r23, Z+27	; 0x1b

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     8a2:	c1 a1       	ldd	r28, Z+33	; 0x21
     8a4:	d0 a1       	ldd	r29, Z+32	; 0x20

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     8a6:	40 30       	cpi	r20, 0x00	; 0
     8a8:	f0 e8       	ldi	r31, 0x80	; 128
     8aa:	5f 07       	cpc	r21, r31
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	6f 07       	cpc	r22, r31
     8b0:	f0 e0       	ldi	r31, 0x00	; 0
     8b2:	7f 07       	cpc	r23, r31
     8b4:	68 f0       	brcs	.+26     	; 0x8d0 <SCSI_Command_ReadWrite_10+0x44>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     8b6:	80 91 39 01 	lds	r24, 0x0139
     8ba:	80 7f       	andi	r24, 0xF0	; 240
     8bc:	85 60       	ori	r24, 0x05	; 5
     8be:	80 93 39 01 	sts	0x0139, r24
     8c2:	81 e2       	ldi	r24, 0x21	; 33
     8c4:	80 93 43 01 	sts	0x0143, r24
     8c8:	10 92 44 01 	sts	0x0144, r1
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	21 c0       	rjmp	.+66     	; 0x912 <SCSI_Command_ReadWrite_10+0x86>
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif
	
	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
     8d0:	88 23       	and	r24, r24
     8d2:	21 f0       	breq	.+8      	; 0x8dc <SCSI_Command_ReadWrite_10+0x50>
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     8d4:	c8 01       	movw	r24, r16
     8d6:	9e 01       	movw	r18, r28
     8d8:	8d dd       	rcall	.-1254   	; 0x3f4 <DataflashManager_ReadBlocks>
     8da:	03 c0       	rjmp	.+6      	; 0x8e2 <SCSI_Command_ReadWrite_10+0x56>
	else
	  DataflashManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     8dc:	c8 01       	movw	r24, r16
     8de:	9e 01       	movw	r18, r28
     8e0:	9d de       	rcall	.-710    	; 0x61c <DataflashManager_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     8e2:	9e 01       	movw	r18, r28
     8e4:	40 e0       	ldi	r20, 0x00	; 0
     8e6:	50 e0       	ldi	r21, 0x00	; 0
     8e8:	89 e0       	ldi	r24, 0x09	; 9
     8ea:	22 0f       	add	r18, r18
     8ec:	33 1f       	adc	r19, r19
     8ee:	44 1f       	adc	r20, r20
     8f0:	55 1f       	adc	r21, r21
     8f2:	8a 95       	dec	r24
     8f4:	d1 f7       	brne	.-12     	; 0x8ea <SCSI_Command_ReadWrite_10+0x5e>
     8f6:	f8 01       	movw	r30, r16
     8f8:	82 89       	ldd	r24, Z+18	; 0x12
     8fa:	93 89       	ldd	r25, Z+19	; 0x13
     8fc:	a4 89       	ldd	r26, Z+20	; 0x14
     8fe:	b5 89       	ldd	r27, Z+21	; 0x15
     900:	82 1b       	sub	r24, r18
     902:	93 0b       	sbc	r25, r19
     904:	a4 0b       	sbc	r26, r20
     906:	b5 0b       	sbc	r27, r21
     908:	82 8b       	std	Z+18, r24	; 0x12
     90a:	93 8b       	std	Z+19, r25	; 0x13
     90c:	a4 8b       	std	Z+20, r26	; 0x14
     90e:	b5 8b       	std	Z+21, r27	; 0x15
     910:	81 e0       	ldi	r24, 0x01	; 1

	return true;
}
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	1f 91       	pop	r17
     918:	0f 91       	pop	r16
     91a:	08 95       	ret

0000091c <SCSI_DecodeSCSICommand>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean true if the command completed successfully, false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     91c:	cf 92       	push	r12
     91e:	df 92       	push	r13
     920:	ef 92       	push	r14
     922:	ff 92       	push	r15
     924:	0f 93       	push	r16
     926:	1f 93       	push	r17
     928:	df 93       	push	r29
     92a:	cf 93       	push	r28
     92c:	cd b7       	in	r28, 0x3d	; 61
     92e:	de b7       	in	r29, 0x3e	; 62
     930:	28 97       	sbiw	r28, 0x08	; 8
     932:	0f b6       	in	r0, 0x3f	; 63
     934:	f8 94       	cli
     936:	de bf       	out	0x3e, r29	; 62
     938:	0f be       	out	0x3f, r0	; 63
     93a:	cd bf       	out	0x3d, r28	; 61
     93c:	7c 01       	movw	r14, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     93e:	fc 01       	movw	r30, r24
     940:	81 8d       	ldd	r24, Z+25	; 0x19
     942:	8d 31       	cpi	r24, 0x1D	; 29
     944:	09 f4       	brne	.+2      	; 0x948 <SCSI_DecodeSCSICommand+0x2c>
     946:	a6 c0       	rjmp	.+332    	; 0xa94 <SCSI_DecodeSCSICommand+0x178>
     948:	8e 31       	cpi	r24, 0x1E	; 30
     94a:	78 f4       	brcc	.+30     	; 0x96a <SCSI_DecodeSCSICommand+0x4e>
     94c:	83 30       	cpi	r24, 0x03	; 3
     94e:	09 f4       	brne	.+2      	; 0x952 <SCSI_DecodeSCSICommand+0x36>
     950:	52 c0       	rjmp	.+164    	; 0x9f6 <SCSI_DecodeSCSICommand+0xda>
     952:	84 30       	cpi	r24, 0x04	; 4
     954:	20 f4       	brcc	.+8      	; 0x95e <SCSI_DecodeSCSICommand+0x42>
     956:	88 23       	and	r24, r24
     958:	09 f4       	brne	.+2      	; 0x95c <SCSI_DecodeSCSICommand+0x40>
     95a:	d9 c0       	rjmp	.+434    	; 0xb0e <SCSI_DecodeSCSICommand+0x1f2>
     95c:	de c0       	rjmp	.+444    	; 0xb1a <SCSI_DecodeSCSICommand+0x1fe>
     95e:	82 31       	cpi	r24, 0x12	; 18
     960:	b9 f0       	breq	.+46     	; 0x990 <SCSI_DecodeSCSICommand+0x74>
     962:	8a 31       	cpi	r24, 0x1A	; 26
     964:	09 f0       	breq	.+2      	; 0x968 <SCSI_DecodeSCSICommand+0x4c>
     966:	d9 c0       	rjmp	.+434    	; 0xb1a <SCSI_DecodeSCSICommand+0x1fe>
     968:	b8 c0       	rjmp	.+368    	; 0xada <SCSI_DecodeSCSICommand+0x1be>
     96a:	88 32       	cpi	r24, 0x28	; 40
     96c:	09 f4       	brne	.+2      	; 0x970 <SCSI_DecodeSCSICommand+0x54>
     96e:	af c0       	rjmp	.+350    	; 0xace <SCSI_DecodeSCSICommand+0x1b2>
     970:	89 32       	cpi	r24, 0x29	; 41
     972:	38 f4       	brcc	.+14     	; 0x982 <SCSI_DecodeSCSICommand+0x66>
     974:	8e 31       	cpi	r24, 0x1E	; 30
     976:	09 f4       	brne	.+2      	; 0x97a <SCSI_DecodeSCSICommand+0x5e>
     978:	ca c0       	rjmp	.+404    	; 0xb0e <SCSI_DecodeSCSICommand+0x1f2>
     97a:	85 32       	cpi	r24, 0x25	; 37
     97c:	09 f0       	breq	.+2      	; 0x980 <SCSI_DecodeSCSICommand+0x64>
     97e:	cd c0       	rjmp	.+410    	; 0xb1a <SCSI_DecodeSCSICommand+0x1fe>
     980:	5d c0       	rjmp	.+186    	; 0xa3c <SCSI_DecodeSCSICommand+0x120>
     982:	8a 32       	cpi	r24, 0x2A	; 42
     984:	09 f4       	brne	.+2      	; 0x988 <SCSI_DecodeSCSICommand+0x6c>
     986:	a0 c0       	rjmp	.+320    	; 0xac8 <SCSI_DecodeSCSICommand+0x1ac>
     988:	8f 32       	cpi	r24, 0x2F	; 47
     98a:	09 f0       	breq	.+2      	; 0x98e <SCSI_DecodeSCSICommand+0x72>
     98c:	c6 c0       	rjmp	.+396    	; 0xb1a <SCSI_DecodeSCSICommand+0x1fe>
     98e:	bf c0       	rjmp	.+382    	; 0xb0e <SCSI_DecodeSCSICommand+0x1f2>
     990:	f7 01       	movw	r30, r14
     992:	05 8d       	ldd	r16, Z+29	; 0x1d
     994:	14 8d       	ldd	r17, Z+28	; 0x1c
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     996:	82 8d       	ldd	r24, Z+26	; 0x1a
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	83 70       	andi	r24, 0x03	; 3
     99c:	90 70       	andi	r25, 0x00	; 0
     99e:	89 2b       	or	r24, r25
     9a0:	09 f0       	breq	.+2      	; 0x9a4 <SCSI_DecodeSCSICommand+0x88>
     9a2:	7c c0       	rjmp	.+248    	; 0xa9c <SCSI_DecodeSCSICommand+0x180>
     9a4:	83 8d       	ldd	r24, Z+27	; 0x1b
     9a6:	88 23       	and	r24, r24
     9a8:	09 f0       	breq	.+2      	; 0x9ac <SCSI_DecodeSCSICommand+0x90>
     9aa:	78 c0       	rjmp	.+240    	; 0xa9c <SCSI_DecodeSCSICommand+0x180>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     9ac:	68 01       	movw	r12, r16
     9ae:	05 32       	cpi	r16, 0x25	; 37
     9b0:	11 05       	cpc	r17, r1
     9b2:	18 f0       	brcs	.+6      	; 0x9ba <SCSI_DecodeSCSICommand+0x9e>
     9b4:	94 e2       	ldi	r25, 0x24	; 36
     9b6:	c9 2e       	mov	r12, r25
     9b8:	d1 2c       	mov	r13, r1
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     9ba:	89 e4       	ldi	r24, 0x49	; 73
     9bc:	91 e0       	ldi	r25, 0x01	; 1
     9be:	b6 01       	movw	r22, r12
     9c0:	40 e0       	ldi	r20, 0x00	; 0
     9c2:	50 e0       	ldi	r21, 0x00	; 0
     9c4:	22 d4       	rcall	.+2116   	; 0x120a <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     9c6:	c8 01       	movw	r24, r16
     9c8:	8c 19       	sub	r24, r12
     9ca:	9d 09       	sbc	r25, r13
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	6d d4       	rcall	.+2266   	; 0x12ac <Endpoint_Null_Stream>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9d2:	80 91 e8 00 	lds	r24, 0x00E8
     9d6:	8e 77       	andi	r24, 0x7E	; 126
     9d8:	80 93 e8 00 	sts	0x00E8, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     9dc:	96 01       	movw	r18, r12
     9de:	40 e0       	ldi	r20, 0x00	; 0
     9e0:	50 e0       	ldi	r21, 0x00	; 0
     9e2:	f7 01       	movw	r30, r14
     9e4:	82 89       	ldd	r24, Z+18	; 0x12
     9e6:	93 89       	ldd	r25, Z+19	; 0x13
     9e8:	a4 89       	ldd	r26, Z+20	; 0x14
     9ea:	b5 89       	ldd	r27, Z+21	; 0x15
     9ec:	82 1b       	sub	r24, r18
     9ee:	93 0b       	sbc	r25, r19
     9f0:	a4 0b       	sbc	r26, r20
     9f2:	b5 0b       	sbc	r27, r21
     9f4:	87 c0       	rjmp	.+270    	; 0xb04 <SCSI_DecodeSCSICommand+0x1e8>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
     9f6:	f7 01       	movw	r30, r14
     9f8:	15 8d       	ldd	r17, Z+29	; 0x1d
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     9fa:	01 2f       	mov	r16, r17
     9fc:	13 31       	cpi	r17, 0x13	; 19
     9fe:	08 f0       	brcs	.+2      	; 0xa02 <SCSI_DecodeSCSICommand+0xe6>
     a00:	02 e1       	ldi	r16, 0x12	; 18

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     a02:	87 e3       	ldi	r24, 0x37	; 55
     a04:	91 e0       	ldi	r25, 0x01	; 1
     a06:	60 2f       	mov	r22, r16
     a08:	70 e0       	ldi	r23, 0x00	; 0
     a0a:	40 e0       	ldi	r20, 0x00	; 0
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	fd d3       	rcall	.+2042   	; 0x120a <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     a10:	81 2f       	mov	r24, r17
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	80 1b       	sub	r24, r16
     a16:	91 09       	sbc	r25, r1
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	47 d4       	rcall	.+2190   	; 0x12ac <Endpoint_Null_Stream>
     a1e:	80 91 e8 00 	lds	r24, 0x00E8
     a22:	8e 77       	andi	r24, 0x7E	; 126
     a24:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     a28:	f7 01       	movw	r30, r14
     a2a:	82 89       	ldd	r24, Z+18	; 0x12
     a2c:	93 89       	ldd	r25, Z+19	; 0x13
     a2e:	a4 89       	ldd	r26, Z+20	; 0x14
     a30:	b5 89       	ldd	r27, Z+21	; 0x15
     a32:	80 1b       	sub	r24, r16
     a34:	91 09       	sbc	r25, r1
     a36:	a1 09       	sbc	r26, r1
     a38:	b1 09       	sbc	r27, r1
     a3a:	64 c0       	rjmp	.+200    	; 0xb04 <SCSI_DecodeSCSICommand+0x1e8>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN = (LUN_MEDIA_BLOCKS - 1);
     a3c:	8f ef       	ldi	r24, 0xFF	; 255
     a3e:	9f e7       	ldi	r25, 0x7F	; 127
     a40:	a0 e0       	ldi	r26, 0x00	; 0
     a42:	b0 e0       	ldi	r27, 0x00	; 0
     a44:	89 83       	std	Y+1, r24	; 0x01
     a46:	9a 83       	std	Y+2, r25	; 0x02
     a48:	ab 83       	std	Y+3, r26	; 0x03
     a4a:	bc 83       	std	Y+4, r27	; 0x04
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	92 e0       	ldi	r25, 0x02	; 2
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	b0 e0       	ldi	r27, 0x00	; 0
     a54:	8d 83       	std	Y+5, r24	; 0x05
     a56:	9e 83       	std	Y+6, r25	; 0x06
     a58:	af 83       	std	Y+7, r26	; 0x07
     a5a:	b8 87       	std	Y+8, r27	; 0x08

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
     a5c:	ce 01       	movw	r24, r28
     a5e:	01 96       	adiw	r24, 0x01	; 1
     a60:	64 e0       	ldi	r22, 0x04	; 4
     a62:	70 e0       	ldi	r23, 0x00	; 0
     a64:	40 e0       	ldi	r20, 0x00	; 0
     a66:	50 e0       	ldi	r21, 0x00	; 0
     a68:	7f d3       	rcall	.+1790   	; 0x1168 <Endpoint_Write_Stream_BE>
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
     a6a:	ce 01       	movw	r24, r28
     a6c:	05 96       	adiw	r24, 0x05	; 5
     a6e:	64 e0       	ldi	r22, 0x04	; 4
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	40 e0       	ldi	r20, 0x00	; 0
     a74:	50 e0       	ldi	r21, 0x00	; 0
     a76:	78 d3       	rcall	.+1776   	; 0x1168 <Endpoint_Write_Stream_BE>
     a78:	80 91 e8 00 	lds	r24, 0x00E8
     a7c:	8e 77       	andi	r24, 0x7E	; 126
     a7e:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
     a82:	f7 01       	movw	r30, r14
     a84:	82 89       	ldd	r24, Z+18	; 0x12
     a86:	93 89       	ldd	r25, Z+19	; 0x13
     a88:	a4 89       	ldd	r26, Z+20	; 0x14
     a8a:	b5 89       	ldd	r27, Z+21	; 0x15
     a8c:	08 97       	sbiw	r24, 0x08	; 8
     a8e:	a1 09       	sbc	r26, r1
     a90:	b1 09       	sbc	r27, r1
     a92:	38 c0       	rjmp	.+112    	; 0xb04 <SCSI_DecodeSCSICommand+0x1e8>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
     a94:	f7 01       	movw	r30, r14
     a96:	82 8d       	ldd	r24, Z+26	; 0x1a
     a98:	82 fd       	sbrc	r24, 2
     a9a:	08 c0       	rjmp	.+16     	; 0xaac <SCSI_DecodeSCSICommand+0x190>
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     a9c:	80 91 39 01 	lds	r24, 0x0139
     aa0:	80 7f       	andi	r24, 0xF0	; 240
     aa2:	85 60       	ori	r24, 0x05	; 5
     aa4:	80 93 39 01 	sts	0x0139, r24
     aa8:	84 e2       	ldi	r24, 0x24	; 36
     aaa:	3e c0       	rjmp	.+124    	; 0xb28 <SCSI_DecodeSCSICommand+0x20c>

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
     aac:	78 dc       	rcall	.-1808   	; 0x39e <DataflashManager_CheckDataflashOperation>
     aae:	88 23       	and	r24, r24
     ab0:	71 f5       	brne	.+92     	; 0xb0e <SCSI_DecodeSCSICommand+0x1f2>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     ab2:	80 91 39 01 	lds	r24, 0x0139
     ab6:	80 7f       	andi	r24, 0xF0	; 240
     ab8:	84 60       	ori	r24, 0x04	; 4
     aba:	80 93 39 01 	sts	0x0139, r24
     abe:	10 92 43 01 	sts	0x0143, r1
     ac2:	10 92 44 01 	sts	0x0144, r1
     ac6:	33 c0       	rjmp	.+102    	; 0xb2e <SCSI_DecodeSCSICommand+0x212>
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
     ac8:	c7 01       	movw	r24, r14
     aca:	60 e0       	ldi	r22, 0x00	; 0
     acc:	02 c0       	rjmp	.+4      	; 0xad2 <SCSI_DecodeSCSICommand+0x1b6>
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
     ace:	c7 01       	movw	r24, r14
     ad0:	61 e0       	ldi	r22, 0x01	; 1
     ad2:	dc de       	rcall	.-584    	; 0x88c <SCSI_Command_ReadWrite_10>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     ad4:	88 23       	and	r24, r24
     ad6:	59 f1       	breq	.+86     	; 0xb2e <SCSI_DecodeSCSICommand+0x212>
     ad8:	2c c0       	rjmp	.+88     	; 0xb32 <SCSI_DecodeSCSICommand+0x216>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ada:	10 92 f1 00 	sts	0x00F1, r1
     ade:	10 92 f1 00 	sts	0x00F1, r1
     ae2:	10 92 f1 00 	sts	0x00F1, r1
     ae6:	10 92 f1 00 	sts	0x00F1, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     aea:	80 91 e8 00 	lds	r24, 0x00E8
     aee:	8e 77       	andi	r24, 0x7E	; 126
     af0:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
     af4:	f7 01       	movw	r30, r14
     af6:	82 89       	ldd	r24, Z+18	; 0x12
     af8:	93 89       	ldd	r25, Z+19	; 0x13
     afa:	a4 89       	ldd	r26, Z+20	; 0x14
     afc:	b5 89       	ldd	r27, Z+21	; 0x15
     afe:	04 97       	sbiw	r24, 0x04	; 4
     b00:	a1 09       	sbc	r26, r1
     b02:	b1 09       	sbc	r27, r1
     b04:	82 8b       	std	Z+18, r24	; 0x12
     b06:	93 8b       	std	Z+19, r25	; 0x13
     b08:	a4 8b       	std	Z+20, r26	; 0x14
     b0a:	b5 8b       	std	Z+21, r27	; 0x15
     b0c:	12 c0       	rjmp	.+36     	; 0xb32 <SCSI_DecodeSCSICommand+0x216>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
     b0e:	f7 01       	movw	r30, r14
     b10:	12 8a       	std	Z+18, r1	; 0x12
     b12:	13 8a       	std	Z+19, r1	; 0x13
     b14:	14 8a       	std	Z+20, r1	; 0x14
     b16:	15 8a       	std	Z+21, r1	; 0x15
     b18:	0c c0       	rjmp	.+24     	; 0xb32 <SCSI_DecodeSCSICommand+0x216>
			break;
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     b1a:	80 91 39 01 	lds	r24, 0x0139
     b1e:	80 7f       	andi	r24, 0xF0	; 240
     b20:	85 60       	ori	r24, 0x05	; 5
     b22:	80 93 39 01 	sts	0x0139, r24
     b26:	80 e2       	ldi	r24, 0x20	; 32
     b28:	80 93 43 01 	sts	0x0143, r24
     b2c:	ca cf       	rjmp	.-108    	; 0xac2 <SCSI_DecodeSCSICommand+0x1a6>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	0a c0       	rjmp	.+20     	; 0xb46 <SCSI_DecodeSCSICommand+0x22a>
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     b32:	80 91 39 01 	lds	r24, 0x0139
     b36:	80 7f       	andi	r24, 0xF0	; 240
     b38:	80 93 39 01 	sts	0x0139, r24
     b3c:	10 92 43 01 	sts	0x0143, r1
     b40:	10 92 44 01 	sts	0x0144, r1
     b44:	81 e0       	ldi	r24, 0x01	; 1

		return true;
	}

	return false;
}
     b46:	28 96       	adiw	r28, 0x08	; 8
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	f8 94       	cli
     b4c:	de bf       	out	0x3e, r29	; 62
     b4e:	0f be       	out	0x3f, r0	; 63
     b50:	cd bf       	out	0x3d, r28	; 61
     b52:	cf 91       	pop	r28
     b54:	df 91       	pop	r29
     b56:	1f 91       	pop	r17
     b58:	0f 91       	pop	r16
     b5a:	ff 90       	pop	r15
     b5c:	ef 90       	pop	r14
     b5e:	df 90       	pop	r13
     b60:	cf 90       	pop	r12
     b62:	08 95       	ret

00000b64 <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
     b64:	38 2f       	mov	r19, r24
     b66:	28 2f       	mov	r18, r24
     b68:	2c c0       	rjmp	.+88     	; 0xbc2 <Endpoint_ConfigureEndpoint_Prv+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     b6a:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);
		
		if (EPNum == Number)
     b6e:	23 17       	cp	r18, r19
     b70:	21 f4       	brne	.+8      	; 0xb7a <Endpoint_ConfigureEndpoint_Prv+0x16>
     b72:	76 2f       	mov	r23, r22
     b74:	94 2f       	mov	r25, r20
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	06 c0       	rjmp	.+12     	; 0xb86 <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     b7a:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     b7e:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
     b82:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     b86:	91 ff       	sbrs	r25, 1
     b88:	1b c0       	rjmp	.+54     	; 0xbc0 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     b8a:	80 91 eb 00 	lds	r24, 0x00EB
     b8e:	8e 7f       	andi	r24, 0xFE	; 254
     b90:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     b94:	80 91 ed 00 	lds	r24, 0x00ED
     b98:	8d 7f       	andi	r24, 0xFD	; 253
     b9a:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     b9e:	80 91 eb 00 	lds	r24, 0x00EB
     ba2:	81 60       	ori	r24, 0x01	; 1
     ba4:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     ba8:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     bac:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
     bb0:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     bb4:	80 91 ee 00 	lds	r24, 0x00EE
			
		if (!(Endpoint_IsConfigured()))
     bb8:	87 fd       	sbrc	r24, 7
     bba:	02 c0       	rjmp	.+4      	; 0xbc0 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else	
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     bc0:	2f 5f       	subi	r18, 0xFF	; 255
     bc2:	27 30       	cpi	r18, 0x07	; 7
     bc4:	90 f2       	brcs	.-92     	; 0xb6a <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     bc6:	30 93 e9 00 	sts	0x00E9, r19
     bca:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     bcc:	08 95       	ret

00000bce <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     bce:	80 91 73 01 	lds	r24, 0x0173
     bd2:	88 23       	and	r24, r24
     bd4:	9c f4       	brge	.+38     	; 0xbfc <Endpoint_ClearStatusStage+0x2e>
     bd6:	04 c0       	rjmp	.+8      	; 0xbe0 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     bd8:	80 91 72 01 	lds	r24, 0x0172
     bdc:	88 23       	and	r24, r24
     bde:	b9 f0       	breq	.+46     	; 0xc0e <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     be0:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     be4:	82 ff       	sbrs	r24, 2
     be6:	f8 cf       	rjmp	.-16     	; 0xbd8 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     be8:	80 91 e8 00 	lds	r24, 0x00E8
     bec:	8b 77       	andi	r24, 0x7B	; 123
     bee:	80 93 e8 00 	sts	0x00E8, r24
     bf2:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     bf4:	80 91 72 01 	lds	r24, 0x0172
     bf8:	88 23       	and	r24, r24
     bfa:	49 f0       	breq	.+18     	; 0xc0e <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     bfc:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     c00:	80 ff       	sbrs	r24, 0
     c02:	f8 cf       	rjmp	.-16     	; 0xbf4 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c04:	80 91 e8 00 	lds	r24, 0x00E8
     c08:	8e 77       	andi	r24, 0x7E	; 126
     c0a:	80 93 e8 00 	sts	0x00E8, r24
     c0e:	08 95       	ret

00000c10 <Endpoint_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     c10:	40 91 e4 00 	lds	r20, 0x00E4
     c14:	50 91 e5 00 	lds	r21, 0x00E5
     c18:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
     c1a:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
     c1e:	80 78       	andi	r24, 0x80	; 128
     c20:	80 38       	cpi	r24, 0x80	; 128
     c22:	29 f4       	brne	.+10     	; 0xc2e <Endpoint_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c24:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
     c28:	80 ff       	sbrs	r24, 0
     c2a:	05 c0       	rjmp	.+10     	; 0xc36 <Endpoint_WaitUntilReady+0x26>
     c2c:	22 c0       	rjmp	.+68     	; 0xc72 <Endpoint_WaitUntilReady+0x62>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c2e:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     c32:	82 fd       	sbrc	r24, 2
     c34:	1e c0       	rjmp	.+60     	; 0xc72 <Endpoint_WaitUntilReady+0x62>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     c36:	80 91 72 01 	lds	r24, 0x0172

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     c3a:	88 23       	and	r24, r24
     c3c:	11 f4       	brne	.+4      	; 0xc42 <Endpoint_WaitUntilReady+0x32>
     c3e:	82 e0       	ldi	r24, 0x02	; 2
     c40:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     c42:	85 30       	cpi	r24, 0x05	; 5
     c44:	11 f4       	brne	.+4      	; 0xc4a <Endpoint_WaitUntilReady+0x3a>
     c46:	83 e0       	ldi	r24, 0x03	; 3
     c48:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     c4a:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     c4e:	85 ff       	sbrs	r24, 5
     c50:	02 c0       	rjmp	.+4      	; 0xc56 <Endpoint_WaitUntilReady+0x46>
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	08 95       	ret
     c56:	80 91 e4 00 	lds	r24, 0x00E4
     c5a:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     c5e:	84 17       	cp	r24, r20
     c60:	95 07       	cpc	r25, r21
     c62:	d9 f2       	breq	.-74     	; 0xc1a <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     c64:	22 23       	and	r18, r18
     c66:	11 f4       	brne	.+4      	; 0xc6c <Endpoint_WaitUntilReady+0x5c>
     c68:	84 e0       	ldi	r24, 0x04	; 4
     c6a:	08 95       	ret
     c6c:	21 50       	subi	r18, 0x01	; 1
     c6e:	ac 01       	movw	r20, r24
     c70:	d4 cf       	rjmp	.-88     	; 0xc1a <Endpoint_WaitUntilReady+0xa>
     c72:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     c74:	08 95       	ret

00000c76 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     c76:	ef 92       	push	r14
     c78:	ff 92       	push	r15
     c7a:	0f 93       	push	r16
     c7c:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     c7e:	4d d0       	rcall	.+154    	; 0xd1a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     c80:	54 d0       	rcall	.+168    	; 0xd2a <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     c82:	08 ed       	ldi	r16, 0xD8	; 216
     c84:	10 e0       	ldi	r17, 0x00	; 0
     c86:	f8 01       	movw	r30, r16
     c88:	80 81       	ld	r24, Z
     c8a:	8f 77       	andi	r24, 0x7F	; 127
     c8c:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
     c8e:	80 81       	ld	r24, Z
     c90:	80 68       	ori	r24, 0x80	; 128
     c92:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     c94:	80 81       	ld	r24, Z
     c96:	8f 7d       	andi	r24, 0xDF	; 223
     c98:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     c9a:	e7 ed       	ldi	r30, 0xD7	; 215
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	80 68       	ori	r24, 0x80	; 128
     ca2:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     ca4:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     ca6:	10 92 72 01 	sts	0x0172, r1
	USB_Device_ConfigurationNumber  = 0;
     caa:	10 92 6e 01 	sts	0x016E, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     cae:	10 92 70 01 	sts	0x0170, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     cb2:	10 92 6f 01 	sts	0x016F, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     cb6:	80 ee       	ldi	r24, 0xE0	; 224
     cb8:	e8 2e       	mov	r14, r24
     cba:	f1 2c       	mov	r15, r1
     cbc:	f7 01       	movw	r30, r14
     cbe:	80 81       	ld	r24, Z
     cc0:	8b 7f       	andi	r24, 0xFB	; 251
     cc2:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     cc4:	f8 01       	movw	r30, r16
     cc6:	80 81       	ld	r24, Z
     cc8:	81 60       	ori	r24, 0x01	; 1
     cca:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	60 e0       	ldi	r22, 0x00	; 0
     cd0:	42 e0       	ldi	r20, 0x02	; 2
     cd2:	48 df       	rcall	.-368    	; 0xb64 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     cd4:	e1 ee       	ldi	r30, 0xE1	; 225
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8e 7f       	andi	r24, 0xFE	; 254
     cdc:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     cde:	e2 ee       	ldi	r30, 0xE2	; 226
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	81 60       	ori	r24, 0x01	; 1
     ce6:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     ce8:	80 81       	ld	r24, Z
     cea:	88 60       	ori	r24, 0x08	; 8
     cec:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     cee:	f7 01       	movw	r30, r14
     cf0:	80 81       	ld	r24, Z
     cf2:	8e 7f       	andi	r24, 0xFE	; 254
     cf4:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     cf6:	f8 01       	movw	r30, r16
     cf8:	80 81       	ld	r24, Z
     cfa:	80 61       	ori	r24, 0x10	; 16
     cfc:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     cfe:	1f 91       	pop	r17
     d00:	0f 91       	pop	r16
     d02:	ff 90       	pop	r15
     d04:	ef 90       	pop	r14
     d06:	08 95       	ret

00000d08 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     d08:	e7 ed       	ldi	r30, 0xD7	; 215
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	81 60       	ori	r24, 0x01	; 1
     d10:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	80 93 71 01 	sts	0x0171, r24

	USB_ResetInterface();
}
     d18:	ae cf       	rjmp	.-164    	; 0xc76 <USB_ResetInterface>

00000d1a <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     d1a:	e8 ed       	ldi	r30, 0xD8	; 216
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	8c 7f       	andi	r24, 0xFC	; 252
     d22:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     d24:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     d28:	08 95       	ret

00000d2a <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     d2a:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     d2e:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     d32:	08 95       	ret

00000d34 <__vector_11>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     d34:	1f 92       	push	r1
     d36:	0f 92       	push	r0
     d38:	0f b6       	in	r0, 0x3f	; 63
     d3a:	0f 92       	push	r0
     d3c:	0b b6       	in	r0, 0x3b	; 59
     d3e:	0f 92       	push	r0
     d40:	11 24       	eor	r1, r1
     d42:	1f 93       	push	r17
     d44:	2f 93       	push	r18
     d46:	3f 93       	push	r19
     d48:	4f 93       	push	r20
     d4a:	5f 93       	push	r21
     d4c:	6f 93       	push	r22
     d4e:	7f 93       	push	r23
     d50:	8f 93       	push	r24
     d52:	9f 93       	push	r25
     d54:	af 93       	push	r26
     d56:	bf 93       	push	r27
     d58:	ef 93       	push	r30
     d5a:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     d5c:	e9 ee       	ldi	r30, 0xE9	; 233
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	10 81       	ld	r17, Z
     d62:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     d64:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     d66:	e0 ef       	ldi	r30, 0xF0	; 240
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	87 7f       	andi	r24, 0xF7	; 247
     d6e:	80 83       	st	Z, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     d70:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     d72:	de d2       	rcall	.+1468   	; 0x1330 <USB_Device_ProcessControlRequest>
     d74:	a9 ee       	ldi	r26, 0xE9	; 233
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	1c 92       	st	X, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     d7a:	e0 ef       	ldi	r30, 0xF0	; 240
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	88 60       	ori	r24, 0x08	; 8
     d82:	80 83       	st	Z, r24
     d84:	1c 93       	st	X, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     d86:	ff 91       	pop	r31
     d88:	ef 91       	pop	r30
     d8a:	bf 91       	pop	r27
     d8c:	af 91       	pop	r26
     d8e:	9f 91       	pop	r25
     d90:	8f 91       	pop	r24
     d92:	7f 91       	pop	r23
     d94:	6f 91       	pop	r22
     d96:	5f 91       	pop	r21
     d98:	4f 91       	pop	r20
     d9a:	3f 91       	pop	r19
     d9c:	2f 91       	pop	r18
     d9e:	1f 91       	pop	r17
     da0:	0f 90       	pop	r0
     da2:	0b be       	out	0x3b, r0	; 59
     da4:	0f 90       	pop	r0
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	0f 90       	pop	r0
     daa:	1f 90       	pop	r1
     dac:	18 95       	reti

00000dae <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     dae:	1f 92       	push	r1
     db0:	0f 92       	push	r0
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	0f 92       	push	r0
     db6:	0b b6       	in	r0, 0x3b	; 59
     db8:	0f 92       	push	r0
     dba:	11 24       	eor	r1, r1
     dbc:	2f 93       	push	r18
     dbe:	3f 93       	push	r19
     dc0:	4f 93       	push	r20
     dc2:	5f 93       	push	r21
     dc4:	6f 93       	push	r22
     dc6:	7f 93       	push	r23
     dc8:	8f 93       	push	r24
     dca:	9f 93       	push	r25
     dcc:	af 93       	push	r26
     dce:	bf 93       	push	r27
     dd0:	ef 93       	push	r30
     dd2:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     dd4:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     dd8:	82 ff       	sbrs	r24, 2
     dda:	0a c0       	rjmp	.+20     	; 0xdf0 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     ddc:	80 91 e2 00 	lds	r24, 0x00E2
     de0:	82 ff       	sbrs	r24, 2
     de2:	06 c0       	rjmp	.+12     	; 0xdf0 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     de4:	80 91 e1 00 	lds	r24, 0x00E1
     de8:	8b 7f       	andi	r24, 0xFB	; 251
     dea:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     dee:	25 d4       	rcall	.+2122   	; 0x163a <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     df0:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     df4:	80 ff       	sbrs	r24, 0
     df6:	1d c0       	rjmp	.+58     	; 0xe32 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     df8:	80 91 d8 00 	lds	r24, 0x00D8
     dfc:	80 ff       	sbrs	r24, 0
     dfe:	19 c0       	rjmp	.+50     	; 0xe32 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     e00:	80 91 da 00 	lds	r24, 0x00DA
     e04:	8e 7f       	andi	r24, 0xFE	; 254
     e06:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     e0a:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     e0e:	80 ff       	sbrs	r24, 0
     e10:	0c c0       	rjmp	.+24     	; 0xe2a <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     e12:	8c e0       	ldi	r24, 0x0C	; 12
     e14:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     e16:	8e e0       	ldi	r24, 0x0E	; 14
     e18:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     e1a:	09 b4       	in	r0, 0x29	; 41
     e1c:	00 fe       	sbrs	r0, 0
     e1e:	fd cf       	rjmp	.-6      	; 0xe1a <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	80 93 72 01 	sts	0x0172, r24
			EVENT_USB_Device_Connect();
     e26:	97 d9       	rcall	.-3282   	; 0x156 <EVENT_USB_Device_Connect>
     e28:	04 c0       	rjmp	.+8      	; 0xe32 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     e2a:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     e2c:	10 92 72 01 	sts	0x0172, r1
			EVENT_USB_Device_Disconnect();
     e30:	97 d9       	rcall	.-3282   	; 0x160 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     e32:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     e36:	80 ff       	sbrs	r24, 0
     e38:	18 c0       	rjmp	.+48     	; 0xe6a <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     e3a:	80 91 e2 00 	lds	r24, 0x00E2
     e3e:	80 ff       	sbrs	r24, 0
     e40:	14 c0       	rjmp	.+40     	; 0xe6a <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     e42:	80 91 e2 00 	lds	r24, 0x00E2
     e46:	8e 7f       	andi	r24, 0xFE	; 254
     e48:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     e4c:	80 91 e2 00 	lds	r24, 0x00E2
     e50:	80 61       	ori	r24, 0x10	; 16
     e52:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     e56:	80 91 d8 00 	lds	r24, 0x00D8
     e5a:	80 62       	ori	r24, 0x20	; 32
     e5c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     e60:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     e62:	85 e0       	ldi	r24, 0x05	; 5
     e64:	80 93 72 01 	sts	0x0172, r24
		EVENT_USB_Device_Suspend();
     e68:	e8 d3       	rcall	.+2000   	; 0x163a <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     e6a:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     e6e:	84 ff       	sbrs	r24, 4
     e70:	2d c0       	rjmp	.+90     	; 0xecc <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     e72:	80 91 e2 00 	lds	r24, 0x00E2
     e76:	84 ff       	sbrs	r24, 4
     e78:	29 c0       	rjmp	.+82     	; 0xecc <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     e7a:	8c e0       	ldi	r24, 0x0C	; 12
     e7c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     e7e:	8e e0       	ldi	r24, 0x0E	; 14
     e80:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     e82:	09 b4       	in	r0, 0x29	; 41
     e84:	00 fe       	sbrs	r0, 0
     e86:	fd cf       	rjmp	.-6      	; 0xe82 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     e88:	80 91 d8 00 	lds	r24, 0x00D8
     e8c:	8f 7d       	andi	r24, 0xDF	; 223
     e8e:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     e92:	80 91 e1 00 	lds	r24, 0x00E1
     e96:	8f 7e       	andi	r24, 0xEF	; 239
     e98:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     e9c:	80 91 e2 00 	lds	r24, 0x00E2
     ea0:	8f 7e       	andi	r24, 0xEF	; 239
     ea2:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     ea6:	80 91 e2 00 	lds	r24, 0x00E2
     eaa:	81 60       	ori	r24, 0x01	; 1
     eac:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     eb0:	80 91 6e 01 	lds	r24, 0x016E
     eb4:	88 23       	and	r24, r24
     eb6:	31 f4       	brne	.+12     	; 0xec4 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     eb8:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     ebc:	87 fd       	sbrc	r24, 7
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <__vector_10+0x116>
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	01 c0       	rjmp	.+2      	; 0xec6 <__vector_10+0x118>
     ec4:	84 e0       	ldi	r24, 0x04	; 4
     ec6:	80 93 72 01 	sts	0x0172, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     eca:	b7 d3       	rcall	.+1902   	; 0x163a <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     ecc:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     ed0:	83 ff       	sbrs	r24, 3
     ed2:	27 c0       	rjmp	.+78     	; 0xf22 <__vector_10+0x174>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     ed4:	80 91 e2 00 	lds	r24, 0x00E2
     ed8:	83 ff       	sbrs	r24, 3
     eda:	23 c0       	rjmp	.+70     	; 0xf22 <__vector_10+0x174>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     edc:	80 91 e1 00 	lds	r24, 0x00E1
     ee0:	87 7f       	andi	r24, 0xF7	; 247
     ee2:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     ee6:	82 e0       	ldi	r24, 0x02	; 2
     ee8:	80 93 72 01 	sts	0x0172, r24
		USB_Device_ConfigurationNumber = 0;
     eec:	10 92 6e 01 	sts	0x016E, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     ef0:	80 91 e1 00 	lds	r24, 0x00E1
     ef4:	8e 7f       	andi	r24, 0xFE	; 254
     ef6:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     efa:	80 91 e2 00 	lds	r24, 0x00E2
     efe:	8e 7f       	andi	r24, 0xFE	; 254
     f00:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     f04:	80 91 e2 00 	lds	r24, 0x00E2
     f08:	80 61       	ori	r24, 0x10	; 16
     f0a:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	60 e0       	ldi	r22, 0x00	; 0
     f12:	42 e0       	ldi	r20, 0x02	; 2
     f14:	27 de       	rcall	.-946    	; 0xb64 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     f16:	80 91 f0 00 	lds	r24, 0x00F0
     f1a:	88 60       	ori	r24, 0x08	; 8
     f1c:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     f20:	8c d3       	rcall	.+1816   	; 0x163a <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     f22:	ff 91       	pop	r31
     f24:	ef 91       	pop	r30
     f26:	bf 91       	pop	r27
     f28:	af 91       	pop	r26
     f2a:	9f 91       	pop	r25
     f2c:	8f 91       	pop	r24
     f2e:	7f 91       	pop	r23
     f30:	6f 91       	pop	r22
     f32:	5f 91       	pop	r21
     f34:	4f 91       	pop	r20
     f36:	3f 91       	pop	r19
     f38:	2f 91       	pop	r18
     f3a:	0f 90       	pop	r0
     f3c:	0b be       	out	0x3b, r0	; 59
     f3e:	0f 90       	pop	r0
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	0f 90       	pop	r0
     f44:	1f 90       	pop	r1
     f46:	18 95       	reti

00000f48 <Endpoint_Write_Control_Stream_LE>:
     f48:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     f4a:	40 91 79 01 	lds	r20, 0x0179
     f4e:	50 91 7a 01 	lds	r21, 0x017A
     f52:	46 17       	cp	r20, r22
     f54:	57 07       	cpc	r21, r23
     f56:	18 f4       	brcc	.+6      	; 0xf5e <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     f58:	f9 01       	movw	r30, r18
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	3d c0       	rjmp	.+122    	; 0xfd8 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     f5e:	61 15       	cp	r22, r1
     f60:	71 05       	cpc	r23, r1
     f62:	11 f0       	breq	.+4      	; 0xf68 <Endpoint_Write_Control_Stream_LE+0x20>
     f64:	ab 01       	movw	r20, r22
     f66:	f8 cf       	rjmp	.-16     	; 0xf58 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f68:	80 91 e8 00 	lds	r24, 0x00E8
     f6c:	8e 77       	andi	r24, 0x7E	; 126
     f6e:	80 93 e8 00 	sts	0x00E8, r24
     f72:	40 e0       	ldi	r20, 0x00	; 0
     f74:	50 e0       	ldi	r21, 0x00	; 0
     f76:	f0 cf       	rjmp	.-32     	; 0xf58 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     f78:	80 91 72 01 	lds	r24, 0x0172

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     f7c:	88 23       	and	r24, r24
     f7e:	f1 f1       	breq	.+124    	; 0xffc <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     f80:	85 30       	cpi	r24, 0x05	; 5
     f82:	f1 f1       	breq	.+124    	; 0x1000 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f84:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     f88:	83 ff       	sbrs	r24, 3
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <Endpoint_Write_Control_Stream_LE+0x48>
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f90:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     f94:	82 fd       	sbrc	r24, 2
     f96:	2c c0       	rjmp	.+88     	; 0xff0 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f98:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     f9c:	80 ff       	sbrs	r24, 0
     f9e:	1c c0       	rjmp	.+56     	; 0xfd8 <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     fa0:	20 91 f2 00 	lds	r18, 0x00F2
     fa4:	30 91 f3 00 	lds	r19, 0x00F3
     fa8:	07 c0       	rjmp	.+14     	; 0xfb8 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     faa:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     fac:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     fb0:	41 50       	subi	r20, 0x01	; 1
     fb2:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     fb4:	2f 5f       	subi	r18, 0xFF	; 255
     fb6:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     fb8:	41 15       	cp	r20, r1
     fba:	51 05       	cpc	r21, r1
     fbc:	19 f0       	breq	.+6      	; 0xfc4 <Endpoint_Write_Control_Stream_LE+0x7c>
     fbe:	28 30       	cpi	r18, 0x08	; 8
     fc0:	31 05       	cpc	r19, r1
     fc2:	98 f3       	brcs	.-26     	; 0xfaa <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	28 30       	cpi	r18, 0x08	; 8
     fc8:	31 05       	cpc	r19, r1
     fca:	09 f4       	brne	.+2      	; 0xfce <Endpoint_Write_Control_Stream_LE+0x86>
     fcc:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fce:	80 91 e8 00 	lds	r24, 0x00E8
     fd2:	8e 77       	andi	r24, 0x7E	; 126
     fd4:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     fd8:	41 15       	cp	r20, r1
     fda:	51 05       	cpc	r21, r1
     fdc:	69 f6       	brne	.-102    	; 0xf78 <Endpoint_Write_Control_Stream_LE+0x30>
     fde:	99 23       	and	r25, r25
     fe0:	59 f6       	brne	.-106    	; 0xf78 <Endpoint_Write_Control_Stream_LE+0x30>
     fe2:	06 c0       	rjmp	.+12     	; 0xff0 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     fe4:	80 91 72 01 	lds	r24, 0x0172

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     fe8:	88 23       	and	r24, r24
     fea:	41 f0       	breq	.+16     	; 0xffc <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     fec:	85 30       	cpi	r24, 0x05	; 5
     fee:	41 f0       	breq	.+16     	; 0x1000 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ff0:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     ff4:	82 ff       	sbrs	r24, 2
     ff6:	f6 cf       	rjmp	.-20     	; 0xfe4 <Endpoint_Write_Control_Stream_LE+0x9c>
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	08 95       	ret
     ffc:	82 e0       	ldi	r24, 0x02	; 2
     ffe:	08 95       	ret
    1000:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1002:	08 95       	ret

00001004 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    1004:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1006:	40 91 79 01 	lds	r20, 0x0179
    100a:	50 91 7a 01 	lds	r21, 0x017A
    100e:	46 17       	cp	r20, r22
    1010:	57 07       	cpc	r21, r23
    1012:	18 f4       	brcc	.+6      	; 0x101a <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1014:	f9 01       	movw	r30, r18
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	40 c0       	rjmp	.+128    	; 0x109a <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    101a:	61 15       	cp	r22, r1
    101c:	71 05       	cpc	r23, r1
    101e:	11 f0       	breq	.+4      	; 0x1024 <Endpoint_Write_Control_PStream_LE+0x20>
    1020:	ab 01       	movw	r20, r22
    1022:	f8 cf       	rjmp	.-16     	; 0x1014 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1024:	80 91 e8 00 	lds	r24, 0x00E8
    1028:	8e 77       	andi	r24, 0x7E	; 126
    102a:	80 93 e8 00 	sts	0x00E8, r24
    102e:	40 e0       	ldi	r20, 0x00	; 0
    1030:	50 e0       	ldi	r21, 0x00	; 0
    1032:	f0 cf       	rjmp	.-32     	; 0x1014 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1034:	80 91 72 01 	lds	r24, 0x0172

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1038:	88 23       	and	r24, r24
    103a:	09 f4       	brne	.+2      	; 0x103e <Endpoint_Write_Control_PStream_LE+0x3a>
    103c:	40 c0       	rjmp	.+128    	; 0x10be <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    103e:	85 30       	cpi	r24, 0x05	; 5
    1040:	09 f4       	brne	.+2      	; 0x1044 <Endpoint_Write_Control_PStream_LE+0x40>
    1042:	3f c0       	rjmp	.+126    	; 0x10c2 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1044:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1048:	83 ff       	sbrs	r24, 3
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <Endpoint_Write_Control_PStream_LE+0x4c>
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1050:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1054:	82 fd       	sbrc	r24, 2
    1056:	2d c0       	rjmp	.+90     	; 0x10b2 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1058:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    105c:	80 ff       	sbrs	r24, 0
    105e:	1d c0       	rjmp	.+58     	; 0x109a <Endpoint_Write_Control_PStream_LE+0x96>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    1060:	20 91 f2 00 	lds	r18, 0x00F2
    1064:	30 91 f3 00 	lds	r19, 0x00F3
    1068:	08 c0       	rjmp	.+16     	; 0x107a <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    106a:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    106c:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1070:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1072:	41 50       	subi	r20, 0x01	; 1
    1074:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    1076:	2f 5f       	subi	r18, 0xFF	; 255
    1078:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    107a:	41 15       	cp	r20, r1
    107c:	51 05       	cpc	r21, r1
    107e:	19 f0       	breq	.+6      	; 0x1086 <Endpoint_Write_Control_PStream_LE+0x82>
    1080:	28 30       	cpi	r18, 0x08	; 8
    1082:	31 05       	cpc	r19, r1
    1084:	90 f3       	brcs	.-28     	; 0x106a <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	28 30       	cpi	r18, 0x08	; 8
    108a:	31 05       	cpc	r19, r1
    108c:	09 f4       	brne	.+2      	; 0x1090 <Endpoint_Write_Control_PStream_LE+0x8c>
    108e:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1090:	80 91 e8 00 	lds	r24, 0x00E8
    1094:	8e 77       	andi	r24, 0x7E	; 126
    1096:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    109a:	41 15       	cp	r20, r1
    109c:	51 05       	cpc	r21, r1
    109e:	51 f6       	brne	.-108    	; 0x1034 <Endpoint_Write_Control_PStream_LE+0x30>
    10a0:	99 23       	and	r25, r25
    10a2:	41 f6       	brne	.-112    	; 0x1034 <Endpoint_Write_Control_PStream_LE+0x30>
    10a4:	06 c0       	rjmp	.+12     	; 0x10b2 <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    10a6:	80 91 72 01 	lds	r24, 0x0172

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    10aa:	88 23       	and	r24, r24
    10ac:	41 f0       	breq	.+16     	; 0x10be <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    10ae:	85 30       	cpi	r24, 0x05	; 5
    10b0:	41 f0       	breq	.+16     	; 0x10c2 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    10b2:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    10b6:	82 ff       	sbrs	r24, 2
    10b8:	f6 cf       	rjmp	.-20     	; 0x10a6 <Endpoint_Write_Control_PStream_LE+0xa2>
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	08 95       	ret
    10be:	82 e0       	ldi	r24, 0x02	; 2
    10c0:	08 95       	ret
    10c2:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    10c4:	08 95       	ret

000010c6 <Endpoint_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    10c6:	bf 92       	push	r11
    10c8:	cf 92       	push	r12
    10ca:	df 92       	push	r13
    10cc:	ef 92       	push	r14
    10ce:	ff 92       	push	r15
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	18 2f       	mov	r17, r24
    10da:	09 2f       	mov	r16, r25
    10dc:	7b 01       	movw	r14, r22
    10de:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    10e0:	97 dd       	rcall	.-1234   	; 0xc10 <Endpoint_WaitUntilReady>
    10e2:	b8 2e       	mov	r11, r24
    10e4:	88 23       	and	r24, r24
    10e6:	a9 f5       	brne	.+106    	; 0x1152 <Endpoint_Read_Stream_LE+0x8c>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    10e8:	81 2f       	mov	r24, r17
    10ea:	90 2f       	mov	r25, r16
    10ec:	9c 01       	movw	r18, r24
    10ee:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    10f0:	c1 14       	cp	r12, r1
    10f2:	d1 04       	cpc	r13, r1
    10f4:	39 f0       	breq	.+14     	; 0x1104 <Endpoint_Read_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    10f6:	f6 01       	movw	r30, r12
    10f8:	80 81       	ld	r24, Z
    10fa:	91 81       	ldd	r25, Z+1	; 0x01
    10fc:	e8 1a       	sub	r14, r24
    10fe:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1100:	c8 0f       	add	r28, r24
    1102:	d9 1f       	adc	r29, r25
    1104:	00 e0       	ldi	r16, 0x00	; 0
    1106:	10 e0       	ldi	r17, 0x00	; 0
    1108:	21 c0       	rjmp	.+66     	; 0x114c <Endpoint_Read_Stream_LE+0x86>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    110a:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    110e:	85 fd       	sbrc	r24, 5
    1110:	15 c0       	rjmp	.+42     	; 0x113c <Endpoint_Read_Stream_LE+0x76>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1112:	80 91 e8 00 	lds	r24, 0x00E8
    1116:	8b 77       	andi	r24, 0x7B	; 123
    1118:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    111c:	c1 14       	cp	r12, r1
    111e:	d1 04       	cpc	r13, r1
    1120:	49 f0       	breq	.+18     	; 0x1134 <Endpoint_Read_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
    1122:	f6 01       	movw	r30, r12
    1124:	80 81       	ld	r24, Z
    1126:	91 81       	ldd	r25, Z+1	; 0x01
    1128:	80 0f       	add	r24, r16
    112a:	91 1f       	adc	r25, r17
    112c:	91 83       	std	Z+1, r25	; 0x01
    112e:	80 83       	st	Z, r24
    1130:	85 e0       	ldi	r24, 0x05	; 5
    1132:	10 c0       	rjmp	.+32     	; 0x1154 <Endpoint_Read_Stream_LE+0x8e>

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1134:	6d dd       	rcall	.-1318   	; 0xc10 <Endpoint_WaitUntilReady>
    1136:	88 23       	and	r24, r24
    1138:	49 f0       	breq	.+18     	; 0x114c <Endpoint_Read_Stream_LE+0x86>
    113a:	0c c0       	rjmp	.+24     	; 0x1154 <Endpoint_Read_Stream_LE+0x8e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    113c:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1140:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1142:	08 94       	sec
    1144:	e1 08       	sbc	r14, r1
    1146:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    1148:	0f 5f       	subi	r16, 0xFF	; 255
    114a:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    114c:	e1 14       	cp	r14, r1
    114e:	f1 04       	cpc	r15, r1
    1150:	e1 f6       	brne	.-72     	; 0x110a <Endpoint_Read_Stream_LE+0x44>
    1152:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	1f 91       	pop	r17
    115a:	0f 91       	pop	r16
    115c:	ff 90       	pop	r15
    115e:	ef 90       	pop	r14
    1160:	df 90       	pop	r13
    1162:	cf 90       	pop	r12
    1164:	bf 90       	pop	r11
    1166:	08 95       	ret

00001168 <Endpoint_Write_Stream_BE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1168:	bf 92       	push	r11
    116a:	cf 92       	push	r12
    116c:	df 92       	push	r13
    116e:	ef 92       	push	r14
    1170:	ff 92       	push	r15
    1172:	0f 93       	push	r16
    1174:	1f 93       	push	r17
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	8c 01       	movw	r16, r24
    117c:	eb 01       	movw	r28, r22
    117e:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1180:	47 dd       	rcall	.-1394   	; 0xc10 <Endpoint_WaitUntilReady>
    1182:	b8 2e       	mov	r11, r24
    1184:	88 23       	and	r24, r24
    1186:	b1 f5       	brne	.+108    	; 0x11f4 <Endpoint_Write_Stream_BE+0x8c>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1188:	21 97       	sbiw	r28, 0x01	; 1
    118a:	0c 0f       	add	r16, r28
    118c:	1d 1f       	adc	r17, r29
    118e:	21 96       	adiw	r28, 0x01	; 1
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1190:	c1 14       	cp	r12, r1
    1192:	d1 04       	cpc	r13, r1
    1194:	39 f0       	breq	.+14     	; 0x11a4 <Endpoint_Write_Stream_BE+0x3c>
	{
		Length -= *BytesProcessed;
    1196:	f6 01       	movw	r30, r12
    1198:	80 81       	ld	r24, Z
    119a:	91 81       	ldd	r25, Z+1	; 0x01
    119c:	c8 1b       	sub	r28, r24
    119e:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    11a0:	08 1b       	sub	r16, r24
    11a2:	19 0b       	sbc	r17, r25
    11a4:	ee 24       	eor	r14, r14
    11a6:	ff 24       	eor	r15, r15
    11a8:	23 c0       	rjmp	.+70     	; 0x11f0 <Endpoint_Write_Stream_BE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    11aa:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    11ae:	85 fd       	sbrc	r24, 5
    11b0:	15 c0       	rjmp	.+42     	; 0x11dc <Endpoint_Write_Stream_BE+0x74>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11b2:	80 91 e8 00 	lds	r24, 0x00E8
    11b6:	8e 77       	andi	r24, 0x7E	; 126
    11b8:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    11bc:	c1 14       	cp	r12, r1
    11be:	d1 04       	cpc	r13, r1
    11c0:	49 f0       	breq	.+18     	; 0x11d4 <Endpoint_Write_Stream_BE+0x6c>
			{
				*BytesProcessed += BytesInTransfer;
    11c2:	f6 01       	movw	r30, r12
    11c4:	80 81       	ld	r24, Z
    11c6:	91 81       	ldd	r25, Z+1	; 0x01
    11c8:	8e 0d       	add	r24, r14
    11ca:	9f 1d       	adc	r25, r15
    11cc:	91 83       	std	Z+1, r25	; 0x01
    11ce:	80 83       	st	Z, r24
    11d0:	85 e0       	ldi	r24, 0x05	; 5
    11d2:	11 c0       	rjmp	.+34     	; 0x11f6 <Endpoint_Write_Stream_BE+0x8e>

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    11d4:	1d dd       	rcall	.-1478   	; 0xc10 <Endpoint_WaitUntilReady>
    11d6:	88 23       	and	r24, r24
    11d8:	59 f0       	breq	.+22     	; 0x11f0 <Endpoint_Write_Stream_BE+0x88>
    11da:	0d c0       	rjmp	.+26     	; 0x11f6 <Endpoint_Write_Stream_BE+0x8e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    11dc:	f8 01       	movw	r30, r16
    11de:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    11e0:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
    11e4:	01 50       	subi	r16, 0x01	; 1
    11e6:	10 40       	sbci	r17, 0x00	; 0
			Length--;
    11e8:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    11ea:	08 94       	sec
    11ec:	e1 1c       	adc	r14, r1
    11ee:	f1 1c       	adc	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    11f0:	20 97       	sbiw	r28, 0x00	; 0
    11f2:	d9 f6       	brne	.-74     	; 0x11aa <Endpoint_Write_Stream_BE+0x42>
    11f4:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	1f 91       	pop	r17
    11fc:	0f 91       	pop	r16
    11fe:	ff 90       	pop	r15
    1200:	ef 90       	pop	r14
    1202:	df 90       	pop	r13
    1204:	cf 90       	pop	r12
    1206:	bf 90       	pop	r11
    1208:	08 95       	ret

0000120a <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    120a:	bf 92       	push	r11
    120c:	cf 92       	push	r12
    120e:	df 92       	push	r13
    1210:	ef 92       	push	r14
    1212:	ff 92       	push	r15
    1214:	0f 93       	push	r16
    1216:	1f 93       	push	r17
    1218:	cf 93       	push	r28
    121a:	df 93       	push	r29
    121c:	18 2f       	mov	r17, r24
    121e:	09 2f       	mov	r16, r25
    1220:	7b 01       	movw	r14, r22
    1222:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1224:	f5 dc       	rcall	.-1558   	; 0xc10 <Endpoint_WaitUntilReady>
    1226:	b8 2e       	mov	r11, r24
    1228:	88 23       	and	r24, r24
    122a:	a9 f5       	brne	.+106    	; 0x1296 <Endpoint_Write_Stream_LE+0x8c>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    122c:	81 2f       	mov	r24, r17
    122e:	90 2f       	mov	r25, r16
    1230:	9c 01       	movw	r18, r24
    1232:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1234:	c1 14       	cp	r12, r1
    1236:	d1 04       	cpc	r13, r1
    1238:	39 f0       	breq	.+14     	; 0x1248 <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    123a:	f6 01       	movw	r30, r12
    123c:	80 81       	ld	r24, Z
    123e:	91 81       	ldd	r25, Z+1	; 0x01
    1240:	e8 1a       	sub	r14, r24
    1242:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1244:	c8 0f       	add	r28, r24
    1246:	d9 1f       	adc	r29, r25
    1248:	00 e0       	ldi	r16, 0x00	; 0
    124a:	10 e0       	ldi	r17, 0x00	; 0
    124c:	21 c0       	rjmp	.+66     	; 0x1290 <Endpoint_Write_Stream_LE+0x86>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    124e:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1252:	85 fd       	sbrc	r24, 5
    1254:	15 c0       	rjmp	.+42     	; 0x1280 <Endpoint_Write_Stream_LE+0x76>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1256:	80 91 e8 00 	lds	r24, 0x00E8
    125a:	8e 77       	andi	r24, 0x7E	; 126
    125c:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    1260:	c1 14       	cp	r12, r1
    1262:	d1 04       	cpc	r13, r1
    1264:	49 f0       	breq	.+18     	; 0x1278 <Endpoint_Write_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
    1266:	f6 01       	movw	r30, r12
    1268:	80 81       	ld	r24, Z
    126a:	91 81       	ldd	r25, Z+1	; 0x01
    126c:	80 0f       	add	r24, r16
    126e:	91 1f       	adc	r25, r17
    1270:	91 83       	std	Z+1, r25	; 0x01
    1272:	80 83       	st	Z, r24
    1274:	85 e0       	ldi	r24, 0x05	; 5
    1276:	10 c0       	rjmp	.+32     	; 0x1298 <Endpoint_Write_Stream_LE+0x8e>

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1278:	cb dc       	rcall	.-1642   	; 0xc10 <Endpoint_WaitUntilReady>
    127a:	88 23       	and	r24, r24
    127c:	49 f0       	breq	.+18     	; 0x1290 <Endpoint_Write_Stream_LE+0x86>
    127e:	0c c0       	rjmp	.+24     	; 0x1298 <Endpoint_Write_Stream_LE+0x8e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1280:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1282:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1286:	08 94       	sec
    1288:	e1 08       	sbc	r14, r1
    128a:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    128c:	0f 5f       	subi	r16, 0xFF	; 255
    128e:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1290:	e1 14       	cp	r14, r1
    1292:	f1 04       	cpc	r15, r1
    1294:	e1 f6       	brne	.-72     	; 0x124e <Endpoint_Write_Stream_LE+0x44>
    1296:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1298:	df 91       	pop	r29
    129a:	cf 91       	pop	r28
    129c:	1f 91       	pop	r17
    129e:	0f 91       	pop	r16
    12a0:	ff 90       	pop	r15
    12a2:	ef 90       	pop	r14
    12a4:	df 90       	pop	r13
    12a6:	cf 90       	pop	r12
    12a8:	bf 90       	pop	r11
    12aa:	08 95       	ret

000012ac <Endpoint_Null_Stream>:
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
    12ac:	df 92       	push	r13
    12ae:	ef 92       	push	r14
    12b0:	ff 92       	push	r15
    12b2:	0f 93       	push	r16
    12b4:	1f 93       	push	r17
    12b6:	cf 93       	push	r28
    12b8:	df 93       	push	r29
    12ba:	ec 01       	movw	r28, r24
    12bc:	8b 01       	movw	r16, r22
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;
	
	if ((ErrorCode = Endpoint_WaitUntilReady()))
    12be:	a8 dc       	rcall	.-1712   	; 0xc10 <Endpoint_WaitUntilReady>
    12c0:	d8 2e       	mov	r13, r24
    12c2:	88 23       	and	r24, r24
    12c4:	61 f5       	brne	.+88     	; 0x131e <Endpoint_Null_Stream+0x72>
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
    12c6:	01 15       	cp	r16, r1
    12c8:	11 05       	cpc	r17, r1
    12ca:	29 f0       	breq	.+10     	; 0x12d6 <Endpoint_Null_Stream+0x2a>
	  Length -= *BytesProcessed;
    12cc:	f8 01       	movw	r30, r16
    12ce:	80 81       	ld	r24, Z
    12d0:	91 81       	ldd	r25, Z+1	; 0x01
    12d2:	c8 1b       	sub	r28, r24
    12d4:	d9 0b       	sbc	r29, r25
    12d6:	ee 24       	eor	r14, r14
    12d8:	ff 24       	eor	r15, r15
    12da:	1f c0       	rjmp	.+62     	; 0x131a <Endpoint_Null_Stream+0x6e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    12dc:	80 91 e8 00 	lds	r24, 0x00E8

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    12e0:	85 fd       	sbrc	r24, 5
    12e2:	15 c0       	rjmp	.+42     	; 0x130e <Endpoint_Null_Stream+0x62>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12e4:	80 91 e8 00 	lds	r24, 0x00E8
    12e8:	8e 77       	andi	r24, 0x7E	; 126
    12ea:	80 93 e8 00 	sts	0x00E8, r24
		{
			Endpoint_ClearIN();

			if (BytesProcessed != NULL)
    12ee:	01 15       	cp	r16, r1
    12f0:	11 05       	cpc	r17, r1
    12f2:	49 f0       	breq	.+18     	; 0x1306 <Endpoint_Null_Stream+0x5a>
			{
				*BytesProcessed += BytesInTransfer;
    12f4:	f8 01       	movw	r30, r16
    12f6:	80 81       	ld	r24, Z
    12f8:	91 81       	ldd	r25, Z+1	; 0x01
    12fa:	8e 0d       	add	r24, r14
    12fc:	9f 1d       	adc	r25, r15
    12fe:	91 83       	std	Z+1, r25	; 0x01
    1300:	80 83       	st	Z, r24
    1302:	85 e0       	ldi	r24, 0x05	; 5
    1304:	0d c0       	rjmp	.+26     	; 0x1320 <Endpoint_Null_Stream+0x74>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1306:	84 dc       	rcall	.-1784   	; 0xc10 <Endpoint_WaitUntilReady>
    1308:	88 23       	and	r24, r24
    130a:	39 f0       	breq	.+14     	; 0x131a <Endpoint_Null_Stream+0x6e>
    130c:	09 c0       	rjmp	.+18     	; 0x1320 <Endpoint_Null_Stream+0x74>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    130e:	10 92 f1 00 	sts	0x00F1, r1
		}
		else
		{
			Endpoint_Write_8(0);

			Length--;
    1312:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    1314:	08 94       	sec
    1316:	e1 1c       	adc	r14, r1
    1318:	f1 1c       	adc	r15, r1
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
    131a:	20 97       	sbiw	r28, 0x00	; 0
    131c:	f9 f6       	brne	.-66     	; 0x12dc <Endpoint_Null_Stream+0x30>
    131e:	8d 2d       	mov	r24, r13
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
    1320:	df 91       	pop	r29
    1322:	cf 91       	pop	r28
    1324:	1f 91       	pop	r17
    1326:	0f 91       	pop	r16
    1328:	ff 90       	pop	r15
    132a:	ef 90       	pop	r14
    132c:	df 90       	pop	r13
    132e:	08 95       	ret

00001330 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1330:	0f 93       	push	r16
    1332:	1f 93       	push	r17
    1334:	df 93       	push	r29
    1336:	cf 93       	push	r28
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	ac 97       	sbiw	r28, 0x2c	; 44
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	f8 94       	cli
    1342:	de bf       	out	0x3e, r29	; 62
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1348:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
    134c:	80 93 73 01 	sts	0x0173, r24
    1350:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
    1354:	80 93 74 01 	sts	0x0174, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    1358:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    135c:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
    1360:	e5 e7       	ldi	r30, 0x75	; 117
    1362:	f1 e0       	ldi	r31, 0x01	; 1
    1364:	80 93 75 01 	sts	0x0175, r24
    1368:	90 93 76 01 	sts	0x0176, r25
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    136c:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    1370:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
    1374:	80 93 77 01 	sts	0x0177, r24
    1378:	93 83       	std	Z+3, r25	; 0x03
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    137a:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    137e:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
    1382:	80 93 79 01 	sts	0x0179, r24
    1386:	95 83       	std	Z+5, r25	; 0x05

	EVENT_USB_Device_ControlRequest();
    1388:	0e 94 bf 00 	call	0x17e	; 0x17e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    138c:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1390:	83 ff       	sbrs	r24, 3
    1392:	3a c1       	rjmp	.+628    	; 0x1608 <USB_Device_ProcessControlRequest+0x2d8>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1394:	80 91 73 01 	lds	r24, 0x0173

		switch (USB_ControlRequest.bRequest)
    1398:	30 91 74 01 	lds	r19, 0x0174
    139c:	35 30       	cpi	r19, 0x05	; 5
    139e:	09 f4       	brne	.+2      	; 0x13a2 <USB_Device_ProcessControlRequest+0x72>
    13a0:	87 c0       	rjmp	.+270    	; 0x14b0 <USB_Device_ProcessControlRequest+0x180>
    13a2:	36 30       	cpi	r19, 0x06	; 6
    13a4:	40 f4       	brcc	.+16     	; 0x13b6 <USB_Device_ProcessControlRequest+0x86>
    13a6:	31 30       	cpi	r19, 0x01	; 1
    13a8:	c9 f1       	breq	.+114    	; 0x141c <USB_Device_ProcessControlRequest+0xec>
    13aa:	31 30       	cpi	r19, 0x01	; 1
    13ac:	70 f0       	brcs	.+28     	; 0x13ca <USB_Device_ProcessControlRequest+0x9a>
    13ae:	33 30       	cpi	r19, 0x03	; 3
    13b0:	09 f0       	breq	.+2      	; 0x13b4 <USB_Device_ProcessControlRequest+0x84>
    13b2:	2a c1       	rjmp	.+596    	; 0x1608 <USB_Device_ProcessControlRequest+0x2d8>
    13b4:	33 c0       	rjmp	.+102    	; 0x141c <USB_Device_ProcessControlRequest+0xec>
    13b6:	38 30       	cpi	r19, 0x08	; 8
    13b8:	09 f4       	brne	.+2      	; 0x13bc <USB_Device_ProcessControlRequest+0x8c>
    13ba:	f7 c0       	rjmp	.+494    	; 0x15aa <USB_Device_ProcessControlRequest+0x27a>
    13bc:	39 30       	cpi	r19, 0x09	; 9
    13be:	09 f4       	brne	.+2      	; 0x13c2 <USB_Device_ProcessControlRequest+0x92>
    13c0:	06 c1       	rjmp	.+524    	; 0x15ce <USB_Device_ProcessControlRequest+0x29e>
    13c2:	36 30       	cpi	r19, 0x06	; 6
    13c4:	09 f0       	breq	.+2      	; 0x13c8 <USB_Device_ProcessControlRequest+0x98>
    13c6:	20 c1       	rjmp	.+576    	; 0x1608 <USB_Device_ProcessControlRequest+0x2d8>
    13c8:	97 c0       	rjmp	.+302    	; 0x14f8 <USB_Device_ProcessControlRequest+0x1c8>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    13ca:	80 38       	cpi	r24, 0x80	; 128
    13cc:	21 f0       	breq	.+8      	; 0x13d6 <USB_Device_ProcessControlRequest+0xa6>
    13ce:	82 38       	cpi	r24, 0x82	; 130
    13d0:	09 f0       	breq	.+2      	; 0x13d4 <USB_Device_ProcessControlRequest+0xa4>
    13d2:	1a c1       	rjmp	.+564    	; 0x1608 <USB_Device_ProcessControlRequest+0x2d8>
    13d4:	08 c0       	rjmp	.+16     	; 0x13e6 <USB_Device_ProcessControlRequest+0xb6>
    13d6:	90 91 6f 01 	lds	r25, 0x016F
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    13da:	80 91 70 01 	lds	r24, 0x0170
    13de:	88 23       	and	r24, r24
    13e0:	99 f0       	breq	.+38     	; 0x1408 <USB_Device_ProcessControlRequest+0xd8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    13e2:	92 60       	ori	r25, 0x02	; 2
    13e4:	11 c0       	rjmp	.+34     	; 0x1408 <USB_Device_ProcessControlRequest+0xd8>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    13e6:	80 91 77 01 	lds	r24, 0x0177
    13ea:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    13ec:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    13f0:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	25 e0       	ldi	r18, 0x05	; 5
    13f8:	96 95       	lsr	r25
    13fa:	87 95       	ror	r24
    13fc:	2a 95       	dec	r18
    13fe:	e1 f7       	brne	.-8      	; 0x13f8 <USB_Device_ProcessControlRequest+0xc8>
    1400:	98 2f       	mov	r25, r24
    1402:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1404:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1408:	80 91 e8 00 	lds	r24, 0x00E8
    140c:	87 7f       	andi	r24, 0xF7	; 247
    140e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1412:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
    1416:	10 92 f1 00 	sts	0x00F1, r1
    141a:	d2 c0       	rjmp	.+420    	; 0x15c0 <USB_Device_ProcessControlRequest+0x290>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    141c:	88 23       	and	r24, r24
    141e:	19 f0       	breq	.+6      	; 0x1426 <USB_Device_ProcessControlRequest+0xf6>
    1420:	82 30       	cpi	r24, 0x02	; 2
    1422:	09 f0       	breq	.+2      	; 0x1426 <USB_Device_ProcessControlRequest+0xf6>
    1424:	f1 c0       	rjmp	.+482    	; 0x1608 <USB_Device_ProcessControlRequest+0x2d8>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	8f 71       	andi	r24, 0x1F	; 31
    142a:	90 70       	andi	r25, 0x00	; 0
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	21 f0       	breq	.+8      	; 0x1438 <USB_Device_ProcessControlRequest+0x108>
    1430:	02 97       	sbiw	r24, 0x02	; 2
    1432:	09 f0       	breq	.+2      	; 0x1436 <USB_Device_ProcessControlRequest+0x106>
    1434:	e9 c0       	rjmp	.+466    	; 0x1608 <USB_Device_ProcessControlRequest+0x2d8>
    1436:	0c c0       	rjmp	.+24     	; 0x1450 <USB_Device_ProcessControlRequest+0x120>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1438:	80 91 75 01 	lds	r24, 0x0175
    143c:	81 30       	cpi	r24, 0x01	; 1
    143e:	09 f0       	breq	.+2      	; 0x1442 <USB_Device_ProcessControlRequest+0x112>
    1440:	e3 c0       	rjmp	.+454    	; 0x1608 <USB_Device_ProcessControlRequest+0x2d8>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1442:	10 92 70 01 	sts	0x0170, r1
    1446:	33 30       	cpi	r19, 0x03	; 3
    1448:	69 f5       	brne	.+90     	; 0x14a4 <USB_Device_ProcessControlRequest+0x174>
    144a:	80 93 70 01 	sts	0x0170, r24
    144e:	2a c0       	rjmp	.+84     	; 0x14a4 <USB_Device_ProcessControlRequest+0x174>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1450:	80 91 75 01 	lds	r24, 0x0175
    1454:	88 23       	and	r24, r24
    1456:	31 f5       	brne	.+76     	; 0x14a4 <USB_Device_ProcessControlRequest+0x174>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1458:	20 91 77 01 	lds	r18, 0x0177
    145c:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    145e:	09 f4       	brne	.+2      	; 0x1462 <USB_Device_ProcessControlRequest+0x132>
    1460:	d3 c0       	rjmp	.+422    	; 0x1608 <USB_Device_ProcessControlRequest+0x2d8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1462:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1466:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    146a:	80 ff       	sbrs	r24, 0
    146c:	1b c0       	rjmp	.+54     	; 0x14a4 <USB_Device_ProcessControlRequest+0x174>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    146e:	33 30       	cpi	r19, 0x03	; 3
    1470:	21 f4       	brne	.+8      	; 0x147a <USB_Device_ProcessControlRequest+0x14a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1472:	80 91 eb 00 	lds	r24, 0x00EB
    1476:	80 62       	ori	r24, 0x20	; 32
    1478:	13 c0       	rjmp	.+38     	; 0x14a0 <USB_Device_ProcessControlRequest+0x170>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    147a:	80 91 eb 00 	lds	r24, 0x00EB
    147e:	80 61       	ori	r24, 0x10	; 16
    1480:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	02 c0       	rjmp	.+4      	; 0x148e <USB_Device_ProcessControlRequest+0x15e>
    148a:	88 0f       	add	r24, r24
    148c:	99 1f       	adc	r25, r25
    148e:	2a 95       	dec	r18
    1490:	e2 f7       	brpl	.-8      	; 0x148a <USB_Device_ProcessControlRequest+0x15a>
    1492:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1496:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    149a:	80 91 eb 00 	lds	r24, 0x00EB
    149e:	88 60       	ori	r24, 0x08	; 8
    14a0:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    14a4:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    14a8:	80 91 e8 00 	lds	r24, 0x00E8
    14ac:	87 7f       	andi	r24, 0xF7	; 247
    14ae:	8b c0       	rjmp	.+278    	; 0x15c6 <USB_Device_ProcessControlRequest+0x296>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    14b0:	88 23       	and	r24, r24
    14b2:	09 f0       	breq	.+2      	; 0x14b6 <USB_Device_ProcessControlRequest+0x186>
    14b4:	a9 c0       	rjmp	.+338    	; 0x1608 <USB_Device_ProcessControlRequest+0x2d8>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    14b6:	10 91 75 01 	lds	r17, 0x0175
    14ba:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    14bc:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    14be:	f8 94       	cli
    14c0:	80 91 e8 00 	lds	r24, 0x00E8
    14c4:	87 7f       	andi	r24, 0xF7	; 247
    14c6:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    14ca:	81 db       	rcall	.-2302   	; 0xbce <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    14cc:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    14d0:	80 ff       	sbrs	r24, 0
    14d2:	fc cf       	rjmp	.-8      	; 0x14cc <USB_Device_ProcessControlRequest+0x19c>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    14d4:	80 91 e3 00 	lds	r24, 0x00E3
    14d8:	80 78       	andi	r24, 0x80	; 128
    14da:	81 2b       	or	r24, r17

				UDADDR = Temp;
    14dc:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    14e0:	80 68       	ori	r24, 0x80	; 128
    14e2:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    14e6:	11 23       	and	r17, r17
    14e8:	11 f4       	brne	.+4      	; 0x14ee <USB_Device_ProcessControlRequest+0x1be>
    14ea:	82 e0       	ldi	r24, 0x02	; 2
    14ec:	01 c0       	rjmp	.+2      	; 0x14f0 <USB_Device_ProcessControlRequest+0x1c0>
    14ee:	83 e0       	ldi	r24, 0x03	; 3
    14f0:	80 93 72 01 	sts	0x0172, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    14f4:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
    14f6:	88 c0       	rjmp	.+272    	; 0x1608 <USB_Device_ProcessControlRequest+0x2d8>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    14f8:	80 58       	subi	r24, 0x80	; 128
    14fa:	82 30       	cpi	r24, 0x02	; 2
    14fc:	08 f0       	brcs	.+2      	; 0x1500 <USB_Device_ProcessControlRequest+0x1d0>
    14fe:	84 c0       	rjmp	.+264    	; 0x1608 <USB_Device_ProcessControlRequest+0x2d8>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1500:	80 91 75 01 	lds	r24, 0x0175
    1504:	90 91 76 01 	lds	r25, 0x0176
    1508:	23 e0       	ldi	r18, 0x03	; 3
    150a:	8c 3d       	cpi	r24, 0xDC	; 220
    150c:	92 07       	cpc	r25, r18
    150e:	09 f0       	breq	.+2      	; 0x1512 <USB_Device_ProcessControlRequest+0x1e2>
    1510:	33 c0       	rjmp	.+102    	; 0x1578 <USB_Device_ProcessControlRequest+0x248>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1512:	83 e0       	ldi	r24, 0x03	; 3
    1514:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1516:	8a e2       	ldi	r24, 0x2A	; 42
    1518:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    151a:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    151c:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    151e:	de 01       	movw	r26, r28
    1520:	15 96       	adiw	r26, 0x05	; 5
    1522:	6e e0       	ldi	r22, 0x0E	; 14
    1524:	40 e0       	ldi	r20, 0x00	; 0
    1526:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1528:	11 e2       	ldi	r17, 0x21	; 33
    152a:	e6 2f       	mov	r30, r22
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	10 93 57 00 	sts	0x0057, r17
    1532:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
    1534:	40 ff       	sbrs	r20, 0
    1536:	03 c0       	rjmp	.+6      	; 0x153e <USB_Device_ProcessControlRequest+0x20e>
					{
						SerialByte >>= 4;
    1538:	82 95       	swap	r24
    153a:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    153c:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    153e:	8f 70       	andi	r24, 0x0F	; 15
    1540:	28 2f       	mov	r18, r24
    1542:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1544:	8a 30       	cpi	r24, 0x0A	; 10
    1546:	18 f0       	brcs	.+6      	; 0x154e <USB_Device_ProcessControlRequest+0x21e>
    1548:	c9 01       	movw	r24, r18
    154a:	c7 96       	adiw	r24, 0x37	; 55
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <USB_Device_ProcessControlRequest+0x222>
    154e:	c9 01       	movw	r24, r18
    1550:	c0 96       	adiw	r24, 0x30	; 48
    1552:	8d 93       	st	X+, r24
    1554:	9d 93       	st	X+, r25
    1556:	4f 5f       	subi	r20, 0xFF	; 255
    1558:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    155a:	44 31       	cpi	r20, 0x14	; 20
    155c:	51 05       	cpc	r21, r1
    155e:	29 f7       	brne	.-54     	; 0x152a <USB_Device_ProcessControlRequest+0x1fa>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1560:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1562:	80 91 e8 00 	lds	r24, 0x00E8
    1566:	87 7f       	andi	r24, 0xF7	; 247
    1568:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    156c:	ce 01       	movw	r24, r28
    156e:	03 96       	adiw	r24, 0x03	; 3
    1570:	6a e2       	ldi	r22, 0x2A	; 42
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	e9 dc       	rcall	.-1582   	; 0xf48 <Endpoint_Write_Control_Stream_LE>
    1576:	13 c0       	rjmp	.+38     	; 0x159e <USB_Device_ProcessControlRequest+0x26e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1578:	60 91 77 01 	lds	r22, 0x0177
    157c:	ae 01       	movw	r20, r28
    157e:	4f 5f       	subi	r20, 0xFF	; 255
    1580:	5f 4f       	sbci	r21, 0xFF	; 255
    1582:	0e 94 0d 01 	call	0x21a	; 0x21a <CALLBACK_USB_GetDescriptor>
    1586:	bc 01       	movw	r22, r24
    1588:	00 97       	sbiw	r24, 0x00	; 0
    158a:	09 f4       	brne	.+2      	; 0x158e <USB_Device_ProcessControlRequest+0x25e>
    158c:	3d c0       	rjmp	.+122    	; 0x1608 <USB_Device_ProcessControlRequest+0x2d8>
    158e:	80 91 e8 00 	lds	r24, 0x00E8
    1592:	87 7f       	andi	r24, 0xF7	; 247
    1594:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1598:	89 81       	ldd	r24, Y+1	; 0x01
    159a:	9a 81       	ldd	r25, Y+2	; 0x02
    159c:	33 dd       	rcall	.-1434   	; 0x1004 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    159e:	80 91 e8 00 	lds	r24, 0x00E8
    15a2:	8b 77       	andi	r24, 0x7B	; 123
    15a4:	80 93 e8 00 	sts	0x00E8, r24
    15a8:	2f c0       	rjmp	.+94     	; 0x1608 <USB_Device_ProcessControlRequest+0x2d8>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    15aa:	80 38       	cpi	r24, 0x80	; 128
    15ac:	69 f5       	brne	.+90     	; 0x1608 <USB_Device_ProcessControlRequest+0x2d8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    15ae:	80 91 e8 00 	lds	r24, 0x00E8
    15b2:	87 7f       	andi	r24, 0xF7	; 247
    15b4:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    15b8:	80 91 6e 01 	lds	r24, 0x016E
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    15bc:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    15c0:	80 91 e8 00 	lds	r24, 0x00E8
    15c4:	8e 77       	andi	r24, 0x7E	; 126
    15c6:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    15ca:	01 db       	rcall	.-2558   	; 0xbce <Endpoint_ClearStatusStage>
    15cc:	1d c0       	rjmp	.+58     	; 0x1608 <USB_Device_ProcessControlRequest+0x2d8>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    15ce:	88 23       	and	r24, r24
    15d0:	d9 f4       	brne	.+54     	; 0x1608 <USB_Device_ProcessControlRequest+0x2d8>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    15d2:	90 91 75 01 	lds	r25, 0x0175
    15d6:	92 30       	cpi	r25, 0x02	; 2
    15d8:	b8 f4       	brcc	.+46     	; 0x1608 <USB_Device_ProcessControlRequest+0x2d8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    15da:	80 91 e8 00 	lds	r24, 0x00E8
    15de:	87 7f       	andi	r24, 0xF7	; 247
    15e0:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    15e4:	90 93 6e 01 	sts	0x016E, r25

	Endpoint_ClearStatusStage();
    15e8:	f2 da       	rcall	.-2588   	; 0xbce <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    15ea:	80 91 6e 01 	lds	r24, 0x016E
    15ee:	88 23       	and	r24, r24
    15f0:	31 f4       	brne	.+12     	; 0x15fe <USB_Device_ProcessControlRequest+0x2ce>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    15f2:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    15f6:	87 fd       	sbrc	r24, 7
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <USB_Device_ProcessControlRequest+0x2ce>
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	01 c0       	rjmp	.+2      	; 0x1600 <USB_Device_ProcessControlRequest+0x2d0>
    15fe:	84 e0       	ldi	r24, 0x04	; 4
    1600:	80 93 72 01 	sts	0x0172, r24

	EVENT_USB_Device_ConfigurationChanged();
    1604:	0e 94 c3 00 	call	0x186	; 0x186 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1608:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    160c:	83 ff       	sbrs	r24, 3
    160e:	0a c0       	rjmp	.+20     	; 0x1624 <USB_Device_ProcessControlRequest+0x2f4>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1610:	80 91 eb 00 	lds	r24, 0x00EB
    1614:	80 62       	ori	r24, 0x20	; 32
    1616:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    161a:	80 91 e8 00 	lds	r24, 0x00E8
    161e:	87 7f       	andi	r24, 0xF7	; 247
    1620:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    1624:	ac 96       	adiw	r28, 0x2c	; 44
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	de bf       	out	0x3e, r29	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	cd bf       	out	0x3d, r28	; 61
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	1f 91       	pop	r17
    1636:	0f 91       	pop	r16
    1638:	08 95       	ret

0000163a <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    163a:	08 95       	ret

0000163c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    163c:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    163e:	80 91 72 01 	lds	r24, 0x0172
    1642:	88 23       	and	r24, r24
    1644:	61 f0       	breq	.+24     	; 0x165e <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    1646:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    164a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    164e:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    1652:	83 ff       	sbrs	r24, 3
    1654:	01 c0       	rjmp	.+2      	; 0x1658 <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
    1656:	6c de       	rcall	.-808    	; 0x1330 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    1658:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    165a:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    165e:	1f 91       	pop	r17
    1660:	08 95       	ret

00001662 <MS_Device_USBTask>:

	return true;
}

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1662:	cf 92       	push	r12
    1664:	df 92       	push	r13
    1666:	ef 92       	push	r14
    1668:	ff 92       	push	r15
    166a:	0f 93       	push	r16
    166c:	1f 93       	push	r17
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	00 d0       	rcall	.+0      	; 0x1674 <MS_Device_USBTask+0x12>
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
    1678:	8c 01       	movw	r16, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    167a:	80 91 72 01 	lds	r24, 0x0172
    167e:	84 30       	cpi	r24, 0x04	; 4
    1680:	09 f0       	breq	.+2      	; 0x1684 <MS_Device_USBTask+0x22>
    1682:	07 c1       	rjmp	.+526    	; 0x1892 <MS_Device_USBTask+0x230>
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    1684:	f8 01       	movw	r30, r16
    1686:	95 81       	ldd	r25, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1688:	90 93 e9 00 	sts	0x00E9, r25
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    168c:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsReadWriteAllowed())
    1690:	85 ff       	sbrs	r24, 5
    1692:	c9 c0       	rjmp	.+402    	; 0x1826 <MS_Device_USBTask+0x1c4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1694:	90 93 e9 00 	sts	0x00E9, r25
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
	
	BytesProcessed = 0;
    1698:	1a 82       	std	Y+2, r1	; 0x02
    169a:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    169c:	2a e0       	ldi	r18, 0x0A	; 10
    169e:	e2 2e       	mov	r14, r18
    16a0:	f1 2c       	mov	r15, r1
    16a2:	e0 0e       	add	r14, r16
    16a4:	f1 1e       	adc	r15, r17
    16a6:	6e 01       	movw	r12, r28
    16a8:	08 94       	sec
    16aa:	c1 1c       	adc	r12, r1
    16ac:	d1 1c       	adc	r13, r1
    16ae:	05 c0       	rjmp	.+10     	; 0x16ba <MS_Device_USBTask+0x58>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    16b0:	f8 01       	movw	r30, r16
    16b2:	86 a9       	ldd	r24, Z+54	; 0x36
    16b4:	88 23       	and	r24, r24
    16b6:	09 f0       	breq	.+2      	; 0x16ba <MS_Device_USBTask+0x58>
    16b8:	b6 c0       	rjmp	.+364    	; 0x1826 <MS_Device_USBTask+0x1c4>
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
	
	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    16ba:	c7 01       	movw	r24, r14
    16bc:	6f e0       	ldi	r22, 0x0F	; 15
    16be:	70 e0       	ldi	r23, 0x00	; 0
    16c0:	a6 01       	movw	r20, r12
    16c2:	01 dd       	rcall	.-1534   	; 0x10c6 <Endpoint_Read_Stream_LE>
    16c4:	85 30       	cpi	r24, 0x05	; 5
    16c6:	a1 f3       	breq	.-24     	; 0x16b0 <MS_Device_USBTask+0x4e>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    16c8:	f8 01       	movw	r30, r16
    16ca:	82 85       	ldd	r24, Z+10	; 0x0a
    16cc:	93 85       	ldd	r25, Z+11	; 0x0b
    16ce:	a4 85       	ldd	r26, Z+12	; 0x0c
    16d0:	b5 85       	ldd	r27, Z+13	; 0x0d
    16d2:	85 55       	subi	r24, 0x55	; 85
    16d4:	93 45       	sbci	r25, 0x53	; 83
    16d6:	a2 44       	sbci	r26, 0x42	; 66
    16d8:	b3 44       	sbci	r27, 0x43	; 67
    16da:	81 f4       	brne	.+32     	; 0x16fc <MS_Device_USBTask+0x9a>
    16dc:	f8 01       	movw	r30, r16
    16de:	97 89       	ldd	r25, Z+23	; 0x17
    16e0:	81 85       	ldd	r24, Z+9	; 0x09
    16e2:	98 17       	cp	r25, r24
    16e4:	58 f4       	brcc	.+22     	; 0x16fc <MS_Device_USBTask+0x9a>
    16e6:	86 89       	ldd	r24, Z+22	; 0x16
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	8f 71       	andi	r24, 0x1F	; 31
    16ec:	90 70       	andi	r25, 0x00	; 0
    16ee:	89 2b       	or	r24, r25
    16f0:	29 f4       	brne	.+10     	; 0x16fc <MS_Device_USBTask+0x9a>
    16f2:	80 8d       	ldd	r24, Z+24	; 0x18
    16f4:	88 23       	and	r24, r24
    16f6:	11 f0       	breq	.+4      	; 0x16fc <MS_Device_USBTask+0x9a>
    16f8:	81 31       	cpi	r24, 0x11	; 17
    16fa:	78 f0       	brcs	.+30     	; 0x171a <MS_Device_USBTask+0xb8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    16fc:	80 91 eb 00 	lds	r24, 0x00EB
    1700:	80 62       	ori	r24, 0x20	; 32
    1702:	80 93 eb 00 	sts	0x00EB, r24
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength >  16))
	{
		Endpoint_StallTransaction();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1706:	f8 01       	movw	r30, r16
    1708:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    170a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    170e:	80 91 eb 00 	lds	r24, 0x00EB
    1712:	80 62       	ori	r24, 0x20	; 32
    1714:	80 93 eb 00 	sts	0x00EB, r24
    1718:	86 c0       	rjmp	.+268    	; 0x1826 <MS_Device_USBTask+0x1c4>
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
    171a:	1a 82       	std	Y+2, r1	; 0x02
    171c:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    171e:	99 e1       	ldi	r25, 0x19	; 25
    1720:	e9 2e       	mov	r14, r25
    1722:	f1 2c       	mov	r15, r1
    1724:	e0 0e       	add	r14, r16
    1726:	f1 1e       	adc	r15, r17
    1728:	6e 01       	movw	r12, r28
    172a:	08 94       	sec
    172c:	c1 1c       	adc	r12, r1
    172e:	d1 1c       	adc	r13, r1
    1730:	05 c0       	rjmp	.+10     	; 0x173c <MS_Device_USBTask+0xda>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1732:	f8 01       	movw	r30, r16
    1734:	86 a9       	ldd	r24, Z+54	; 0x36
    1736:	88 23       	and	r24, r24
    1738:	09 f0       	breq	.+2      	; 0x173c <MS_Device_USBTask+0xda>
    173a:	75 c0       	rjmp	.+234    	; 0x1826 <MS_Device_USBTask+0x1c4>

		return false;
	}

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    173c:	f8 01       	movw	r30, r16
    173e:	60 8d       	ldd	r22, Z+24	; 0x18
    1740:	c7 01       	movw	r24, r14
    1742:	70 e0       	ldi	r23, 0x00	; 0
    1744:	a6 01       	movw	r20, r12
    1746:	bf dc       	rcall	.-1666   	; 0x10c6 <Endpoint_Read_Stream_LE>
    1748:	85 30       	cpi	r24, 0x05	; 5
    174a:	99 f3       	breq	.-26     	; 0x1732 <MS_Device_USBTask+0xd0>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    174c:	80 91 e8 00 	lds	r24, 0x00E8
    1750:	8b 77       	andi	r24, 0x7B	; 123
    1752:	80 93 e8 00 	sts	0x00E8, r24

	if (Endpoint_IsReadWriteAllowed())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    1756:	f8 01       	movw	r30, r16
    1758:	86 89       	ldd	r24, Z+22	; 0x16
    175a:	87 ff       	sbrs	r24, 7
    175c:	03 c0       	rjmp	.+6      	; 0x1764 <MS_Device_USBTask+0x102>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    175e:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1760:	80 93 e9 00 	sts	0x00E9, r24

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    1764:	c8 01       	movw	r24, r16
    1766:	0e 94 b5 00 	call	0x16a	; 0x16a <CALLBACK_MS_Device_SCSICommandReceived>

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    176a:	91 e0       	ldi	r25, 0x01	; 1
    176c:	98 27       	eor	r25, r24
    176e:	f8 01       	movw	r30, r16
    1770:	95 ab       	std	Z+53, r25	; 0x35
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    1772:	25 e5       	ldi	r18, 0x55	; 85
    1774:	33 e5       	ldi	r19, 0x53	; 83
    1776:	42 e4       	ldi	r20, 0x42	; 66
    1778:	53 e5       	ldi	r21, 0x53	; 83
    177a:	21 a7       	std	Z+41, r18	; 0x29
    177c:	32 a7       	std	Z+42, r19	; 0x2a
    177e:	43 a7       	std	Z+43, r20	; 0x2b
    1780:	54 a7       	std	Z+44, r21	; 0x2c
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    1782:	26 85       	ldd	r18, Z+14	; 0x0e
    1784:	37 85       	ldd	r19, Z+15	; 0x0f
    1786:	40 89       	ldd	r20, Z+16	; 0x10
    1788:	51 89       	ldd	r21, Z+17	; 0x11
    178a:	25 a7       	std	Z+45, r18	; 0x2d
    178c:	36 a7       	std	Z+46, r19	; 0x2e
    178e:	47 a7       	std	Z+47, r20	; 0x2f
    1790:	50 ab       	std	Z+48, r21	; 0x30
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    1792:	22 89       	ldd	r18, Z+18	; 0x12
    1794:	33 89       	ldd	r19, Z+19	; 0x13
    1796:	44 89       	ldd	r20, Z+20	; 0x14
    1798:	55 89       	ldd	r21, Z+21	; 0x15
    179a:	21 ab       	std	Z+49, r18	; 0x31
    179c:	32 ab       	std	Z+50, r19	; 0x32
    179e:	43 ab       	std	Z+51, r20	; 0x33
    17a0:	54 ab       	std	Z+52, r21	; 0x34

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    17a2:	88 23       	and	r24, r24
    17a4:	51 f4       	brne	.+20     	; 0x17ba <MS_Device_USBTask+0x158>
    17a6:	21 15       	cp	r18, r1
    17a8:	31 05       	cpc	r19, r1
    17aa:	41 05       	cpc	r20, r1
    17ac:	51 05       	cpc	r21, r1
    17ae:	29 f0       	breq	.+10     	; 0x17ba <MS_Device_USBTask+0x158>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    17b0:	80 91 eb 00 	lds	r24, 0x00EB
    17b4:	80 62       	ori	r24, 0x20	; 32
    17b6:	80 93 eb 00 	sts	0x00EB, r24
	return true;
}

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    17ba:	f8 01       	movw	r30, r16
    17bc:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    17be:	80 93 e9 00 	sts	0x00E9, r24
    17c2:	04 c0       	rjmp	.+8      	; 0x17cc <MS_Device_USBTask+0x16a>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    17c4:	f8 01       	movw	r30, r16
    17c6:	86 a9       	ldd	r24, Z+54	; 0x36
    17c8:	88 23       	and	r24, r24
    17ca:	69 f5       	brne	.+90     	; 0x1826 <MS_Device_USBTask+0x1c4>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    17cc:	80 91 eb 00 	lds	r24, 0x00EB

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);

	while (Endpoint_IsStalled())
    17d0:	85 fd       	sbrc	r24, 5
    17d2:	f8 cf       	rjmp	.-16     	; 0x17c4 <MS_Device_USBTask+0x162>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    17d4:	f8 01       	movw	r30, r16
    17d6:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    17d8:	80 93 e9 00 	sts	0x00E9, r24
    17dc:	04 c0       	rjmp	.+8      	; 0x17e6 <MS_Device_USBTask+0x184>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    17de:	f8 01       	movw	r30, r16
    17e0:	86 a9       	ldd	r24, Z+54	; 0x36
    17e2:	88 23       	and	r24, r24
    17e4:	01 f5       	brne	.+64     	; 0x1826 <MS_Device_USBTask+0x1c4>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    17e6:	80 91 eb 00 	lds	r24, 0x00EB
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);

	while (Endpoint_IsStalled())
    17ea:	85 fd       	sbrc	r24, 5
    17ec:	f8 cf       	rjmp	.-16     	; 0x17de <MS_Device_USBTask+0x17c>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
    17ee:	1a 82       	std	Y+2, r1	; 0x02
    17f0:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    17f2:	89 e2       	ldi	r24, 0x29	; 41
    17f4:	e8 2e       	mov	r14, r24
    17f6:	f1 2c       	mov	r15, r1
    17f8:	e0 0e       	add	r14, r16
    17fa:	f1 1e       	adc	r15, r17
    17fc:	6e 01       	movw	r12, r28
    17fe:	08 94       	sec
    1800:	c1 1c       	adc	r12, r1
    1802:	d1 1c       	adc	r13, r1
    1804:	04 c0       	rjmp	.+8      	; 0x180e <MS_Device_USBTask+0x1ac>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1806:	f8 01       	movw	r30, r16
    1808:	86 a9       	ldd	r24, Z+54	; 0x36
    180a:	88 23       	and	r24, r24
    180c:	61 f4       	brne	.+24     	; 0x1826 <MS_Device_USBTask+0x1c4>
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    180e:	c7 01       	movw	r24, r14
    1810:	6d e0       	ldi	r22, 0x0D	; 13
    1812:	70 e0       	ldi	r23, 0x00	; 0
    1814:	a6 01       	movw	r20, r12
    1816:	f9 dc       	rcall	.-1550   	; 0x120a <Endpoint_Write_Stream_LE>
    1818:	85 30       	cpi	r24, 0x05	; 5
    181a:	a9 f3       	breq	.-22     	; 0x1806 <MS_Device_USBTask+0x1a4>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    181c:	80 91 e8 00 	lds	r24, 0x00E8
    1820:	8e 77       	andi	r24, 0x7E	; 126
    1822:	80 93 e8 00 	sts	0x00E8, r24

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    1826:	f8 01       	movw	r30, r16
    1828:	86 a9       	ldd	r24, Z+54	; 0x36
    182a:	88 23       	and	r24, r24
    182c:	91 f1       	breq	.+100    	; 0x1892 <MS_Device_USBTask+0x230>
	{
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    182e:	45 81       	ldd	r20, Z+5	; 0x05
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    1830:	21 e0       	ldi	r18, 0x01	; 1
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	c9 01       	movw	r24, r18
    1836:	04 2e       	mov	r0, r20
    1838:	02 c0       	rjmp	.+4      	; 0x183e <MS_Device_USBTask+0x1dc>
    183a:	88 0f       	add	r24, r24
    183c:	99 1f       	adc	r25, r25
    183e:	0a 94       	dec	r0
    1840:	e2 f7       	brpl	.-8      	; 0x183a <MS_Device_USBTask+0x1d8>
    1842:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1846:	10 92 ea 00 	sts	0x00EA, r1
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    184a:	91 81       	ldd	r25, Z+1	; 0x01
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    184c:	09 2e       	mov	r0, r25
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <MS_Device_USBTask+0x1f2>
    1850:	22 0f       	add	r18, r18
    1852:	33 1f       	adc	r19, r19
    1854:	0a 94       	dec	r0
    1856:	e2 f7       	brpl	.-8      	; 0x1850 <MS_Device_USBTask+0x1ee>
    1858:	20 93 ea 00 	sts	0x00EA, r18
				UERST = 0;
    185c:	10 92 ea 00 	sts	0x00EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1860:	40 93 e9 00 	sts	0x00E9, r20
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1864:	80 91 eb 00 	lds	r24, 0x00EB
    1868:	80 61       	ori	r24, 0x10	; 16
    186a:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    186e:	80 91 eb 00 	lds	r24, 0x00EB
    1872:	88 60       	ori	r24, 0x08	; 8
    1874:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1878:	90 93 e9 00 	sts	0x00E9, r25
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    187c:	80 91 eb 00 	lds	r24, 0x00EB
    1880:	80 61       	ori	r24, 0x10	; 16
    1882:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1886:	80 91 eb 00 	lds	r24, 0x00EB
    188a:	88 60       	ori	r24, 0x08	; 8
    188c:	80 93 eb 00 	sts	0x00EB, r24
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    1890:	16 aa       	std	Z+54, r1	; 0x36
	}
}
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	1f 91       	pop	r17
    189c:	0f 91       	pop	r16
    189e:	ff 90       	pop	r15
    18a0:	ef 90       	pop	r14
    18a2:	df 90       	pop	r13
    18a4:	cf 90       	pop	r12
    18a6:	08 95       	ret

000018a8 <MS_Device_ConfigureEndpoints>:
			break;
	}
}

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    18a8:	1f 93       	push	r17
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
    18ae:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    18b0:	0a 96       	adiw	r24, 0x0a	; 10
    18b2:	fc 01       	movw	r30, r24
    18b4:	8d e2       	ldi	r24, 0x2D	; 45
    18b6:	df 01       	movw	r26, r30
    18b8:	1d 92       	st	X+, r1
    18ba:	8a 95       	dec	r24
    18bc:	e9 f7       	brne	.-6      	; 0x18b8 <MS_Device_ConfigureEndpoints+0x10>
    18be:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == MSInterfaceInfo->Config.DataINEndpointNumber)
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	18 17       	cp	r17, r24
    18c4:	29 f4       	brne	.+10     	; 0x18d0 <MS_Device_ConfigureEndpoints+0x28>
		{
			Size         = MSInterfaceInfo->Config.DataINEndpointSize;
    18c6:	6a 81       	ldd	r22, Y+2	; 0x02
    18c8:	7b 81       	ldd	r23, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataINEndpointDoubleBank;
    18ca:	8c 81       	ldd	r24, Y+4	; 0x04
    18cc:	30 e8       	ldi	r19, 0x80	; 128
    18ce:	07 c0       	rjmp	.+14     	; 0x18de <MS_Device_ConfigureEndpoints+0x36>
		}
		else if (EndpointNum == MSInterfaceInfo->Config.DataOUTEndpointNumber)
    18d0:	8d 81       	ldd	r24, Y+5	; 0x05
    18d2:	18 17       	cp	r17, r24
    18d4:	f9 f4       	brne	.+62     	; 0x1914 <MS_Device_ConfigureEndpoints+0x6c>
		{
			Size         = MSInterfaceInfo->Config.DataOUTEndpointSize;
    18d6:	6e 81       	ldd	r22, Y+6	; 0x06
    18d8:	7f 81       	ldd	r23, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataOUTEndpointDoubleBank;
    18da:	88 85       	ldd	r24, Y+8	; 0x08
    18dc:	30 e0       	ldi	r19, 0x00	; 0
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
    18de:	88 23       	and	r24, r24
    18e0:	11 f4       	brne	.+4      	; 0x18e6 <MS_Device_ConfigureEndpoints+0x3e>
    18e2:	40 e0       	ldi	r20, 0x00	; 0
    18e4:	01 c0       	rjmp	.+2      	; 0x18e8 <MS_Device_ConfigureEndpoints+0x40>
    18e6:	44 e0       	ldi	r20, 0x04	; 4
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	88 e0       	ldi	r24, 0x08	; 8
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	03 c0       	rjmp	.+6      	; 0x18f6 <MS_Device_ConfigureEndpoints+0x4e>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    18f0:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    18f6:	86 17       	cp	r24, r22
    18f8:	97 07       	cpc	r25, r23
    18fa:	d0 f3       	brcs	.-12     	; 0x18f0 <MS_Device_ConfigureEndpoints+0x48>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    18fc:	60 e0       	ldi	r22, 0x00	; 0
    18fe:	31 11       	cpse	r19, r1
    1900:	61 e0       	ldi	r22, 0x01	; 1
    1902:	60 68       	ori	r22, 0x80	; 128
    1904:	42 60       	ori	r20, 0x02	; 2
    1906:	22 95       	swap	r18
    1908:	20 7f       	andi	r18, 0xF0	; 240
    190a:	42 2b       	or	r20, r18
    190c:	81 2f       	mov	r24, r17
    190e:	2a d9       	rcall	.-3500   	; 0xb64 <Endpoint_ConfigureEndpoint_Prv>
    1910:	88 23       	and	r24, r24
    1912:	21 f0       	breq	.+8      	; 0x191c <MS_Device_ConfigureEndpoints+0x74>

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    1914:	1f 5f       	subi	r17, 0xFF	; 255
    1916:	17 30       	cpi	r17, 0x07	; 7
    1918:	99 f6       	brne	.-90     	; 0x18c0 <MS_Device_ConfigureEndpoints+0x18>
    191a:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
    191c:	df 91       	pop	r29
    191e:	cf 91       	pop	r28
    1920:	1f 91       	pop	r17
    1922:	08 95       	ret

00001924 <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorage.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1924:	cf 93       	push	r28
    1926:	df 93       	push	r29
    1928:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    192a:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    192e:	83 ff       	sbrs	r24, 3
    1930:	2f c0       	rjmp	.+94     	; 0x1990 <MS_Device_ProcessControlRequest+0x6c>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    1932:	88 81       	ld	r24, Y
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	20 91 77 01 	lds	r18, 0x0177
    193a:	30 91 78 01 	lds	r19, 0x0178
    193e:	28 17       	cp	r18, r24
    1940:	39 07       	cpc	r19, r25
    1942:	31 f5       	brne	.+76     	; 0x1990 <MS_Device_ProcessControlRequest+0x6c>
	  return;

	switch (USB_ControlRequest.bRequest)
    1944:	80 91 74 01 	lds	r24, 0x0174
    1948:	8e 3f       	cpi	r24, 0xFE	; 254
    194a:	79 f0       	breq	.+30     	; 0x196a <MS_Device_ProcessControlRequest+0x46>
    194c:	8f 3f       	cpi	r24, 0xFF	; 255
    194e:	01 f5       	brne	.+64     	; 0x1990 <MS_Device_ProcessControlRequest+0x6c>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1950:	80 91 73 01 	lds	r24, 0x0173
    1954:	81 32       	cpi	r24, 0x21	; 33
    1956:	e1 f4       	brne	.+56     	; 0x1990 <MS_Device_ProcessControlRequest+0x6c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1958:	80 91 e8 00 	lds	r24, 0x00E8
    195c:	87 7f       	andi	r24, 0xF7	; 247
    195e:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1962:	35 d9       	rcall	.-3478   	; 0xbce <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	8e ab       	std	Y+54, r24	; 0x36
    1968:	13 c0       	rjmp	.+38     	; 0x1990 <MS_Device_ProcessControlRequest+0x6c>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    196a:	80 91 73 01 	lds	r24, 0x0173
    196e:	81 3a       	cpi	r24, 0xA1	; 161
    1970:	79 f4       	brne	.+30     	; 0x1990 <MS_Device_ProcessControlRequest+0x6c>
    1972:	80 91 e8 00 	lds	r24, 0x00E8
    1976:	87 7f       	andi	r24, 0xF7	; 247
    1978:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    197c:	89 85       	ldd	r24, Y+9	; 0x09
    197e:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1980:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1984:	80 91 e8 00 	lds	r24, 0x00E8
    1988:	8e 77       	andi	r24, 0x7E	; 126
    198a:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    198e:	1f d9       	rcall	.-3522   	; 0xbce <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    1990:	df 91       	pop	r29
    1992:	cf 91       	pop	r28
    1994:	08 95       	ret

00001996 <_exit>:
    1996:	f8 94       	cli

00001998 <__stop_program>:
    1998:	ff cf       	rjmp	.-2      	; 0x1998 <__stop_program>
