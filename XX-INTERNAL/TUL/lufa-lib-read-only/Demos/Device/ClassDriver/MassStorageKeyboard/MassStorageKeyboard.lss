
MassStorageKeyboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007a  00800100  0000203a  000020ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000203a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  0080017a  0080017a  00002148  2**0
                  ALLOC
  3 .stab         00000b1c  00000000  00000000  00002148  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00002c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000520  00000000  00000000  00002dd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000e4a  00000000  00000000  000032f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a607  00000000  00000000  0000413d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000025ab  00000000  00000000  0000e744  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007a36  00000000  00000000  00010cef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007c0  00000000  00000000  00018728  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000039a0  00000000  00000000  00018ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003c9c  00000000  00000000  0001c888  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006d8  00000000  00000000  00020524  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
 *  \param[in] BufferPtr     Pointer to the data source RAM buffer
 */
void DataflashManager_WriteBlocks_RAM(const uint32_t BlockAddress,
                                      uint16_t TotalBlocks,
                                      uint8_t* BufferPtr)
{
       0:	c4 c0       	rjmp	.+392    	; 0x18a <__ctors_end>
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       2:	00 00       	nop
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       4:	e0 c0       	rjmp	.+448    	; 0x1c6 <__bad_interrupt>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       6:	00 00       	nop
       8:	de c0       	rjmp	.+444    	; 0x1c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	dc c0       	rjmp	.+440    	; 0x1c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	da c0       	rjmp	.+436    	; 0x1c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	d8 c0       	rjmp	.+432    	; 0x1c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	d6 c0       	rjmp	.+428    	; 0x1c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d2 c0       	rjmp	.+420    	; 0x1c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c0       	rjmp	.+416    	; 0x1c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	82 c7       	rjmp	.+3844   	; 0xf2e <__vector_10>
      2a:	00 00       	nop
      2c:	43 c7       	rjmp	.+3718   	; 0xeb4 <__vector_11>
      2e:	00 00       	nop
      30:	ca c0       	rjmp	.+404    	; 0x1c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c8 c0       	rjmp	.+400    	; 0x1c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c0       	rjmp	.+396    	; 0x1c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c4 c0       	rjmp	.+392    	; 0x1c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c2 c0       	rjmp	.+388    	; 0x1c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c0       	rjmp	.+384    	; 0x1c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	be c0       	rjmp	.+380    	; 0x1c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c0       	rjmp	.+376    	; 0x1c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c0       	rjmp	.+372    	; 0x1c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c0       	rjmp	.+368    	; 0x1c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	b6 c0       	rjmp	.+364    	; 0x1c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b4 c0       	rjmp	.+360    	; 0x1c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b2 c0       	rjmp	.+356    	; 0x1c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c0       	rjmp	.+348    	; 0x1c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ac c0       	rjmp	.+344    	; 0x1c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c0       	rjmp	.+340    	; 0x1c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c0       	rjmp	.+336    	; 0x1c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c0       	rjmp	.+332    	; 0x1c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c0       	rjmp	.+328    	; 0x1c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a2 c0       	rjmp	.+324    	; 0x1c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a0 c0       	rjmp	.+320    	; 0x1c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c0       	rjmp	.+316    	; 0x1c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9c c0       	rjmp	.+312    	; 0x1c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9a c0       	rjmp	.+308    	; 0x1c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	98 c0       	rjmp	.+304    	; 0x1c6 <__bad_interrupt>
      96:	00 00       	nop

00000098 <KeyboardReport>:
      98:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
      a8:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
      b8:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
      c8:	25 65 05 07 19 00 29 65 95 06 75 08 81 00 c0        %e....)e..u....

000000d7 <DeviceDescriptor>:
      d7:	12 01 10 01 00 00 00 08 eb 03 61 20 01 00 01 02     ..........a ....
      e7:	dc 01                                               ..

000000e9 <ConfigurationDescriptor>:
      e9:	09 02 39 00 02 01 00 80 32 09 04 00 00 02 08 06     ..9.....2.......
      f9:	50 00 07 05 83 02 40 00 01 07 05 04 02 40 00 01     P.....@......@..
     109:	09 04 01 00 01 03 01 01 00 09 21 11 01 00 01 22     ..........!...."
     119:	3f 00 07 05 81 03 08 00 01                          ?........

00000122 <LanguageString>:
     122:	04 03 09 04                                         ....

00000126 <ManufacturerString>:
     126:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     136:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000140 <ProductString>:
     140:	48 03 4c 00 55 00 46 00 41 00 20 00 4d 00 61 00     H.L.U.F.A. .M.a.
     150:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.
     160:	67 00 65 00 20 00 61 00 6e 00 64 00 20 00 4b 00     g.e. .a.n.d. .K.
     170:	65 00 79 00 62 00 6f 00 61 00 72 00 64 00 20 00     e.y.b.o.a.r.d. .
     180:	44 00 65 00 6d 00 6f 00 00 00                       D.e.m.o...

0000018a <__ctors_end>:
     18a:	11 24       	eor	r1, r1
     18c:	1f be       	out	0x3f, r1	; 63
     18e:	cf ef       	ldi	r28, 0xFF	; 255
     190:	d0 e2       	ldi	r29, 0x20	; 32
     192:	de bf       	out	0x3e, r29	; 62
     194:	cd bf       	out	0x3d, r28	; 61

00000196 <__do_copy_data>:
     196:	11 e0       	ldi	r17, 0x01	; 1
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b1 e0       	ldi	r27, 0x01	; 1
     19c:	ea e3       	ldi	r30, 0x3A	; 58
     19e:	f0 e2       	ldi	r31, 0x20	; 32
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	aa 37       	cpi	r26, 0x7A	; 122
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	11 e0       	ldi	r17, 0x01	; 1
     1b2:	aa e7       	ldi	r26, 0x7A	; 122
     1b4:	b1 e0       	ldi	r27, 0x01	; 1
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	af 38       	cpi	r26, 0x8F	; 143
     1bc:	b1 07       	cpc	r27, r17
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	c9 d0       	rcall	.+402    	; 0x354 <main>
     1c2:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <_exit>

000001c6 <__bad_interrupt>:
     1c6:	1c cf       	rjmp	.-456    	; 0x0 <__vectors>

000001c8 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     1c8:	8b b1       	in	r24, 0x0b	; 11
     1ca:	8f 70       	andi	r24, 0x0F	; 15
     1cc:	80 6a       	ori	r24, 0xA0	; 160
     1ce:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     1d0:	08 95       	ret

000001d2 <EVENT_USB_Device_Disconnect>:
     1d2:	8b b1       	in	r24, 0x0b	; 11
     1d4:	8f 70       	andi	r24, 0x0F	; 15
     1d6:	80 61       	ori	r24, 0x10	; 16
     1d8:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     1da:	08 95       	ret

000001dc <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     1dc:	80 91 42 01 	lds	r24, 0x0142
     1e0:	90 91 43 01 	lds	r25, 0x0143
     1e4:	00 97       	sbiw	r24, 0x00	; 0
     1e6:	29 f0       	breq	.+10     	; 0x1f2 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     1e8:	01 97       	sbiw	r24, 0x01	; 1
     1ea:	90 93 43 01 	sts	0x0143, r25
     1ee:	80 93 42 01 	sts	0x0142, r24
     1f2:	08 95       	ret

000001f4 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     1f4:	0f 93       	push	r16
     1f6:	1f 93       	push	r17
     1f8:	d8 01       	movw	r26, r16
	USB_KeyboardReport_Data_t* KeyboardReport = (USB_KeyboardReport_Data_t*)ReportData;
     1fa:	f9 01       	movw	r30, r18
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     1fc:	23 b1       	in	r18, 0x03	; 3
     1fe:	8c b1       	in	r24, 0x0c	; 12
     200:	80 95       	com	r24
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	80 73       	andi	r24, 0x30	; 48
     206:	90 70       	andi	r25, 0x00	; 0
     208:	95 95       	asr	r25
     20a:	87 95       	ror	r24
     20c:	20 95       	com	r18
     20e:	20 7e       	andi	r18, 0xE0	; 224
     210:	28 2b       	or	r18, r24
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     212:	3c b1       	in	r19, 0x0c	; 12

	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	KeyboardReport->Modifier = HID_KEYBOARD_MODIFER_LEFTSHIFT;
     214:	82 e0       	ldi	r24, 0x02	; 2
     216:	80 83       	st	Z, r24

	if (JoyStatus_LCL & JOY_UP)
     218:	27 ff       	sbrs	r18, 7
     21a:	02 c0       	rjmp	.+4      	; 0x220 <CALLBACK_HID_Device_CreateHIDReport+0x2c>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_A;
     21c:	84 e0       	ldi	r24, 0x04	; 4
     21e:	03 c0       	rjmp	.+6      	; 0x226 <CALLBACK_HID_Device_CreateHIDReport+0x32>
	else if (JoyStatus_LCL & JOY_DOWN)
     220:	24 ff       	sbrs	r18, 4
     222:	02 c0       	rjmp	.+4      	; 0x228 <CALLBACK_HID_Device_CreateHIDReport+0x34>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_B;
     224:	85 e0       	ldi	r24, 0x05	; 5
     226:	82 83       	std	Z+2, r24	; 0x02

	if (JoyStatus_LCL & JOY_LEFT)
     228:	92 2f       	mov	r25, r18
     22a:	26 ff       	sbrs	r18, 6
     22c:	02 c0       	rjmp	.+4      	; 0x232 <CALLBACK_HID_Device_CreateHIDReport+0x3e>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_C;
     22e:	86 e0       	ldi	r24, 0x06	; 6
     230:	03 c0       	rjmp	.+6      	; 0x238 <CALLBACK_HID_Device_CreateHIDReport+0x44>
	else if (JoyStatus_LCL & JOY_RIGHT)
     232:	23 ff       	sbrs	r18, 3
     234:	02 c0       	rjmp	.+4      	; 0x23a <CALLBACK_HID_Device_CreateHIDReport+0x46>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_D;
     236:	87 e0       	ldi	r24, 0x07	; 7
     238:	82 83       	std	Z+2, r24	; 0x02

	if (JoyStatus_LCL & JOY_PRESS)
     23a:	95 ff       	sbrs	r25, 5
     23c:	02 c0       	rjmp	.+4      	; 0x242 <CALLBACK_HID_Device_CreateHIDReport+0x4e>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_E;
     23e:	88 e0       	ldi	r24, 0x08	; 8
     240:	82 83       	std	Z+2, r24	; 0x02

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
     242:	32 fd       	sbrc	r19, 2
     244:	02 c0       	rjmp	.+4      	; 0x24a <CALLBACK_HID_Device_CreateHIDReport+0x56>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_F;
     246:	89 e0       	ldi	r24, 0x09	; 9
     248:	82 83       	std	Z+2, r24	; 0x02

	*ReportSize = sizeof(USB_KeyboardReport_Data_t);
     24a:	88 e0       	ldi	r24, 0x08	; 8
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	8d 93       	st	X+, r24
     250:	9c 93       	st	X, r25
	return false;
}
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	1f 91       	pop	r17
     256:	0f 91       	pop	r16
     258:	08 95       	ret

0000025a <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
     25a:	f9 01       	movw	r30, r18
	uint8_t  LEDMask   = LEDS_NO_LEDS;
	uint8_t* LEDReport = (uint8_t*)ReportData;

	if (*LEDReport & HID_KEYBOARD_LED_NUMLOCK)
     25c:	80 81       	ld	r24, Z
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	80 fd       	sbrc	r24, 0
     262:	90 e1       	ldi	r25, 0x10	; 16
	  LEDMask |= LEDS_LED1;

	if (*LEDReport & HID_KEYBOARD_LED_CAPSLOCK)
     264:	81 fd       	sbrc	r24, 1
	  LEDMask |= LEDS_LED3;
     266:	90 68       	ori	r25, 0x80	; 128

	if (*LEDReport & HID_KEYBOARD_LED_SCROLLLOCK)
     268:	82 fd       	sbrc	r24, 2
	  LEDMask |= LEDS_LED4;
     26a:	90 64       	ori	r25, 0x40	; 64
     26c:	8b b1       	in	r24, 0x0b	; 11
     26e:	8f 70       	andi	r24, 0x0F	; 15
     270:	98 2b       	or	r25, r24
     272:	9b b9       	out	0x0b, r25	; 11

	LEDs_SetAllLEDs(LEDMask);
}
     274:	08 95       	ret

00000276 <CALLBACK_MS_Device_SCSICommandReceived>:
     276:	2b b1       	in	r18, 0x0b	; 11
     278:	2f 70       	andi	r18, 0x0F	; 15
     27a:	20 62       	ori	r18, 0x20	; 32
     27c:	2b b9       	out	0x0b, r18	; 11
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
     27e:	0e d4       	rcall	.+2076   	; 0xa9c <SCSI_DecodeSCSICommand>
     280:	9b b1       	in	r25, 0x0b	; 11
     282:	9f 70       	andi	r25, 0x0F	; 15
     284:	90 66       	ori	r25, 0x60	; 96
     286:	9b b9       	out	0x0b, r25	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);

	return CommandSuccess;
}
     288:	08 95       	ret

0000028a <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <MS_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
     292:	87 e3       	ldi	r24, 0x37	; 55
     294:	91 e0       	ldi	r25, 0x01	; 1
     296:	0c 94 25 0d 	jmp	0x1a4a	; 0x1a4a <HID_Device_ProcessControlRequest>

0000029a <EVENT_USB_Device_ConfigurationChanged>:
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
     29e:	87 e3       	ldi	r24, 0x37	; 55
     2a0:	91 e0       	ldi	r25, 0x01	; 1
     2a2:	0e 94 ed 0c 	call	0x19da	; 0x19da <HID_Device_ConfigureEndpoints>
     2a6:	08 2f       	mov	r16, r24
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	91 e0       	ldi	r25, 0x01	; 1
     2ac:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <MS_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     2b0:	90 91 e2 00 	lds	r25, 0x00E2
     2b4:	94 60       	ori	r25, 0x04	; 4
     2b6:	90 93 e2 00 	sts	0x00E2, r25

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     2ba:	10 e0       	ldi	r17, 0x00	; 0
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	08 23       	and	r16, r24
     2c0:	19 23       	and	r17, r25
     2c2:	00 ff       	sbrs	r16, 0
     2c4:	02 c0       	rjmp	.+4      	; 0x2ca <EVENT_USB_Device_ConfigurationChanged+0x30>
     2c6:	90 e6       	ldi	r25, 0x60	; 96
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <EVENT_USB_Device_ConfigurationChanged+0x32>
     2ca:	90 e9       	ldi	r25, 0x90	; 144
     2cc:	8b b1       	in	r24, 0x0b	; 11
     2ce:	8f 70       	andi	r24, 0x0F	; 15
     2d0:	98 2b       	or	r25, r24
     2d2:	9b b9       	out	0x0b, r25	; 11
}
     2d4:	1f 91       	pop	r17
     2d6:	0f 91       	pop	r16
     2d8:	08 95       	ret

000002da <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     2da:	84 b7       	in	r24, 0x34	; 52
     2dc:	87 7f       	andi	r24, 0xF7	; 247
     2de:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     2e0:	88 e1       	ldi	r24, 0x18	; 24
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	f8 94       	cli
     2e6:	80 93 60 00 	sts	0x0060, r24
     2ea:	10 92 60 00 	sts	0x0060, r1
     2ee:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	80 e8       	ldi	r24, 0x80	; 128
     2f4:	0f b6       	in	r0, 0x3f	; 63
     2f6:	f8 94       	cli
     2f8:	80 93 61 00 	sts	0x0061, r24
     2fc:	90 93 61 00 	sts	0x0061, r25
     300:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     302:	8a b1       	in	r24, 0x0a	; 10
     304:	80 6f       	ori	r24, 0xF0	; 240
     306:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     308:	8b b1       	in	r24, 0x0b	; 11
     30a:	8f 70       	andi	r24, 0x0F	; 15
     30c:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
     30e:	84 b1       	in	r24, 0x04	; 4
     310:	8f 71       	andi	r24, 0x1F	; 31
     312:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
     314:	8d b1       	in	r24, 0x0d	; 13
     316:	8f 7c       	andi	r24, 0xCF	; 207
     318:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
     31a:	85 b1       	in	r24, 0x05	; 5
     31c:	80 6e       	ori	r24, 0xE0	; 224
     31e:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
     320:	8e b1       	in	r24, 0x0e	; 14
     322:	80 63       	ori	r24, 0x30	; 48
     324:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     326:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     328:	72 9a       	sbi	0x0e, 2	; 14
			 *                         \c SPI_SCK_*, \c SPI_SAMPLE_*, \c SPI_ORDER_* and \c SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
     32a:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
     32c:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
     32e:	84 b1       	in	r24, 0x04	; 4
     330:	86 60       	ori	r24, 0x06	; 6
     332:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
     334:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
     336:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     338:	8d b5       	in	r24, 0x2d	; 45
     33a:	81 60       	ori	r24, 0x01	; 1
     33c:	8d bd       	out	0x2d, r24	; 45
				else
				  SPSR &= ~(1 << SPI2X);

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
     33e:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
     340:	8c e5       	ldi	r24, 0x5C	; 92
     342:	8c bd       	out	0x2c, r24	; 44
			/** Initializes the dataflash driver so that commands and data may be sent to an attached dataflash IC.
			 *  The microcontroller's SPI driver MUST be initialized before any of the dataflash commands are used.
			 */
			static inline void Dataflash_Init(void)
			{
				DATAFLASH_CHIPCS_DDR  |= DATAFLASH_CHIPCS_MASK;
     344:	8d b1       	in	r24, 0x0d	; 13
     346:	83 60       	ori	r24, 0x03	; 3
     348:	8d b9       	out	0x0d, r24	; 13
				DATAFLASH_CHIPCS_PORT |= DATAFLASH_CHIPCS_MASK;
     34a:	8e b1       	in	r24, 0x0e	; 14
     34c:	83 60       	ori	r24, 0x03	; 3
     34e:	8e b9       	out	0x0e, r24	; 14
	LEDs_Init();
	Joystick_Init();
	Buttons_Init();
	SPI_Init(SPI_SPEED_FCPU_DIV_2 | SPI_ORDER_MSB_FIRST | SPI_SCK_LEAD_FALLING | SPI_SAMPLE_TRAILING | SPI_MODE_MASTER);
	Dataflash_Init();
	USB_Init();
     350:	9b d5       	rcall	.+2870   	; 0xe88 <USB_Init>

	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
}
     352:	97 c0       	rjmp	.+302    	; 0x482 <DataflashManager_ResetDataflashProtections>

00000354 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     354:	c2 df       	rcall	.-124    	; 0x2da <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     356:	8b b1       	in	r24, 0x0b	; 11
     358:	8f 70       	andi	r24, 0x0F	; 15
     35a:	80 61       	ori	r24, 0x10	; 16
     35c:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     35e:	78 94       	sei

	for (;;)
	{
		MS_Device_USBTask(&Disk_MS_Interface);
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <MS_Device_USBTask>
		HID_Device_USBTask(&Keyboard_HID_Interface);
     368:	87 e3       	ldi	r24, 0x37	; 55
     36a:	91 e0       	ldi	r25, 0x01	; 1
     36c:	0e 94 32 0c 	call	0x1864	; 0x1864 <HID_Device_USBTask>
		USB_USBTask();
     370:	0e 94 1f 0c 	call	0x183e	; 0x183e <USB_USBTask>
     374:	f5 cf       	rjmp	.-22     	; 0x360 <main+0xc>

00000376 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     376:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     378:	93 30       	cpi	r25, 0x03	; 3
     37a:	b1 f0       	breq	.+44     	; 0x3a8 <CALLBACK_USB_GetDescriptor+0x32>
     37c:	94 30       	cpi	r25, 0x04	; 4
     37e:	28 f4       	brcc	.+10     	; 0x38a <CALLBACK_USB_GetDescriptor+0x14>
     380:	91 30       	cpi	r25, 0x01	; 1
     382:	41 f0       	breq	.+16     	; 0x394 <CALLBACK_USB_GetDescriptor+0x1e>
     384:	92 30       	cpi	r25, 0x02	; 2
     386:	79 f5       	brne	.+94     	; 0x3e6 <CALLBACK_USB_GetDescriptor+0x70>
     388:	0a c0       	rjmp	.+20     	; 0x39e <CALLBACK_USB_GetDescriptor+0x28>
     38a:	91 32       	cpi	r25, 0x21	; 33
     38c:	11 f1       	breq	.+68     	; 0x3d2 <CALLBACK_USB_GetDescriptor+0x5c>
     38e:	92 32       	cpi	r25, 0x22	; 34
     390:	51 f5       	brne	.+84     	; 0x3e6 <CALLBACK_USB_GetDescriptor+0x70>
     392:	24 c0       	rjmp	.+72     	; 0x3dc <CALLBACK_USB_GetDescriptor+0x66>
     394:	e7 ed       	ldi	r30, 0xD7	; 215
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	22 e1       	ldi	r18, 0x12	; 18
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	28 c0       	rjmp	.+80     	; 0x3ee <CALLBACK_USB_GetDescriptor+0x78>
     39e:	e9 ee       	ldi	r30, 0xE9	; 233
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	29 e3       	ldi	r18, 0x39	; 57
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	23 c0       	rjmp	.+70     	; 0x3ee <CALLBACK_USB_GetDescriptor+0x78>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     3a8:	81 30       	cpi	r24, 0x01	; 1
     3aa:	49 f0       	breq	.+18     	; 0x3be <CALLBACK_USB_GetDescriptor+0x48>
     3ac:	81 30       	cpi	r24, 0x01	; 1
     3ae:	18 f0       	brcs	.+6      	; 0x3b6 <CALLBACK_USB_GetDescriptor+0x40>
     3b0:	82 30       	cpi	r24, 0x02	; 2
     3b2:	c9 f4       	brne	.+50     	; 0x3e6 <CALLBACK_USB_GetDescriptor+0x70>
     3b4:	0a c0       	rjmp	.+20     	; 0x3ca <CALLBACK_USB_GetDescriptor+0x54>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     3b6:	e2 e2       	ldi	r30, 0x22	; 34
     3b8:	f1 e0       	ldi	r31, 0x01	; 1
     3ba:	84 91       	lpm	r24, Z+
     3bc:	03 c0       	rjmp	.+6      	; 0x3c4 <CALLBACK_USB_GetDescriptor+0x4e>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     3be:	e6 e2       	ldi	r30, 0x26	; 38
     3c0:	f1 e0       	ldi	r31, 0x01	; 1
     3c2:	84 91       	lpm	r24, Z+
     3c4:	28 2f       	mov	r18, r24
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	12 c0       	rjmp	.+36     	; 0x3ee <CALLBACK_USB_GetDescriptor+0x78>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     3ca:	e0 e4       	ldi	r30, 0x40	; 64
     3cc:	f1 e0       	ldi	r31, 0x01	; 1
     3ce:	84 91       	lpm	r24, Z+
     3d0:	f9 cf       	rjmp	.-14     	; 0x3c4 <CALLBACK_USB_GetDescriptor+0x4e>
     3d2:	e2 e1       	ldi	r30, 0x12	; 18
     3d4:	f1 e0       	ldi	r31, 0x01	; 1
     3d6:	29 e0       	ldi	r18, 0x09	; 9
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	09 c0       	rjmp	.+18     	; 0x3ee <CALLBACK_USB_GetDescriptor+0x78>

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     3dc:	e8 e9       	ldi	r30, 0x98	; 152
     3de:	f0 e0       	ldi	r31, 0x00	; 0
     3e0:	2f e3       	ldi	r18, 0x3F	; 63
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	04 c0       	rjmp	.+8      	; 0x3ee <CALLBACK_USB_GetDescriptor+0x78>
     3e6:	e0 e0       	ldi	r30, 0x00	; 0
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	20 e0       	ldi	r18, 0x00	; 0
     3ec:	30 e0       	ldi	r19, 0x00	; 0
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
			break;
	}

	*DescriptorAddress = Address;
     3ee:	ed 93       	st	X+, r30
     3f0:	fc 93       	st	X, r31
	return Size;
}
     3f2:	c9 01       	movw	r24, r18
     3f4:	08 95       	ret

000003f6 <Dataflash_SelectChipFromPage>:
			 *
			 *  \param[in] PageAddress  Address of the page to manipulate, ranging from
			 *                          0 to ((DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS) - 1).
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
     3f6:	9c 01       	movw	r18, r24
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     3f8:	8e b1       	in	r24, 0x0e	; 14
     3fa:	83 60       	ori	r24, 0x03	; 3
     3fc:	8e b9       	out	0x0e, r24	; 14
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
				Dataflash_DeselectChip();

				if (PageAddress >= (DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS))
     3fe:	80 e4       	ldi	r24, 0x40	; 64
     400:	20 30       	cpi	r18, 0x00	; 0
     402:	38 07       	cpc	r19, r24
     404:	58 f4       	brcc	.+22     	; 0x41c <Dataflash_SelectChipFromPage+0x26>
				  return;

				if (PageAddress & 0x01)
     406:	20 ff       	sbrs	r18, 0
     408:	05 c0       	rjmp	.+10     	; 0x414 <Dataflash_SelectChipFromPage+0x1e>
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     40a:	8e b1       	in	r24, 0x0e	; 14
     40c:	8c 7f       	andi	r24, 0xFC	; 252
     40e:	81 60       	ori	r24, 0x01	; 1
     410:	8e b9       	out	0x0e, r24	; 14
     412:	08 95       	ret
     414:	8e b1       	in	r24, 0x0e	; 14
     416:	8c 7f       	andi	r24, 0xFC	; 252
     418:	82 60       	ori	r24, 0x02	; 2
     41a:	8e b9       	out	0x0e, r24	; 14
     41c:	08 95       	ret

0000041e <Dataflash_ToggleSelectedChipCS>:
			 *  or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     41e:	8e b1       	in	r24, 0x0e	; 14
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     420:	9e b1       	in	r25, 0x0e	; 14
     422:	93 60       	ori	r25, 0x03	; 3
     424:	9e b9       	out	0x0e, r25	; 14
     426:	9e b1       	in	r25, 0x0e	; 14
     428:	83 70       	andi	r24, 0x03	; 3
     42a:	9c 7f       	andi	r25, 0xFC	; 252
     42c:	89 2b       	or	r24, r25
     42e:	8e b9       	out	0x0e, r24	; 14
			{
				uint8_t SelectedChipMask = Dataflash_GetSelectedChip();

				Dataflash_DeselectChip();
				Dataflash_SelectChip(SelectedChipMask);
			}
     430:	08 95       	ret

00000432 <Dataflash_WaitWhileBusy>:
			/** Spin-loops while the currently selected dataflash is busy executing a command, such as a main
			 *  memory page program or main memory to buffer transfer.
			 */
			static inline void Dataflash_WaitWhileBusy(void)
			{
				Dataflash_ToggleSelectedChipCS();
     432:	f5 df       	rcall	.-22     	; 0x41e <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     434:	87 ed       	ldi	r24, 0xD7	; 215
     436:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     438:	0d b4       	in	r0, 0x2d	; 45
     43a:	07 fe       	sbrs	r0, 7
     43c:	fd cf       	rjmp	.-6      	; 0x438 <Dataflash_WaitWhileBusy+0x6>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     43e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     440:	0d b4       	in	r0, 0x2d	; 45
     442:	07 fe       	sbrs	r0, 7
     444:	fd cf       	rjmp	.-6      	; 0x440 <Dataflash_WaitWhileBusy+0xe>
				Dataflash_SendByte(DF_CMD_GETSTATUS);
				while (!(Dataflash_ReceiveByte() & DF_STATUS_READY));
     446:	0e b4       	in	r0, 0x2e	; 46
     448:	07 fe       	sbrs	r0, 7
     44a:	f9 cf       	rjmp	.-14     	; 0x43e <Dataflash_WaitWhileBusy+0xc>
				Dataflash_ToggleSelectedChipCS();
			}
     44c:	e8 cf       	rjmp	.-48     	; 0x41e <Dataflash_ToggleSelectedChipCS>

0000044e <Dataflash_SendAddressBytes>:
			 *  \param[in] BufferByte   Address within the dataflash's buffer
			 */
			static inline void Dataflash_SendAddressBytes(uint16_t PageAddress,
			                                              const uint16_t BufferByte)
			{
				PageAddress >>= 1;
     44e:	9c 01       	movw	r18, r24
     450:	36 95       	lsr	r19
     452:	27 95       	ror	r18

				Dataflash_SendByte(PageAddress >> 5);
     454:	36 e0       	ldi	r19, 0x06	; 6
     456:	96 95       	lsr	r25
     458:	87 95       	ror	r24
     45a:	3a 95       	dec	r19
     45c:	e1 f7       	brne	.-8      	; 0x456 <Dataflash_SendAddressBytes+0x8>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     45e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     460:	0d b4       	in	r0, 0x2d	; 45
     462:	07 fe       	sbrs	r0, 7
     464:	fd cf       	rjmp	.-6      	; 0x460 <Dataflash_SendAddressBytes+0x12>
				Dataflash_SendByte((PageAddress << 3) | (BufferByte >> 8));
     466:	82 2f       	mov	r24, r18
     468:	88 0f       	add	r24, r24
     46a:	88 0f       	add	r24, r24
     46c:	88 0f       	add	r24, r24
     46e:	87 2b       	or	r24, r23
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     470:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     472:	0d b4       	in	r0, 0x2d	; 45
     474:	07 fe       	sbrs	r0, 7
     476:	fd cf       	rjmp	.-6      	; 0x472 <Dataflash_SendAddressBytes+0x24>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     478:	6e bd       	out	0x2e, r22	; 46
				while (!(SPSR & (1 << SPIF)));
     47a:	0d b4       	in	r0, 0x2d	; 45
     47c:	07 fe       	sbrs	r0, 7
     47e:	fd cf       	rjmp	.-6      	; 0x47a <Dataflash_SendAddressBytes+0x2c>
				Dataflash_SendByte(BufferByte);
			}
     480:	08 95       	ret

00000482 <DataflashManager_ResetDataflashProtections>:
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     482:	8e b1       	in	r24, 0x0e	; 14
     484:	8c 7f       	andi	r24, 0xFC	; 252
     486:	82 60       	ori	r24, 0x02	; 2
     488:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     48a:	87 ed       	ldi	r24, 0xD7	; 215
     48c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     48e:	0d b4       	in	r0, 0x2d	; 45
     490:	07 fe       	sbrs	r0, 7
     492:	fd cf       	rjmp	.-6      	; 0x48e <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     494:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     496:	0d b4       	in	r0, 0x2d	; 45
     498:	07 fe       	sbrs	r0, 7
     49a:	fd cf       	rjmp	.-6      	; 0x496 <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     49c:	0e b4       	in	r0, 0x2e	; 46
     49e:	01 fe       	sbrs	r0, 1
     4a0:	15 c0       	rjmp	.+42     	; 0x4cc <DataflashManager_ResetDataflashProtections+0x4a>
	{
		Dataflash_ToggleSelectedChipCS();
     4a2:	bd df       	rcall	.-134    	; 0x41e <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4a4:	8d e3       	ldi	r24, 0x3D	; 61
     4a6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4a8:	0d b4       	in	r0, 0x2d	; 45
     4aa:	07 fe       	sbrs	r0, 7
     4ac:	fd cf       	rjmp	.-6      	; 0x4a8 <DataflashManager_ResetDataflashProtections+0x26>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4ae:	8a e2       	ldi	r24, 0x2A	; 42
     4b0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4b2:	0d b4       	in	r0, 0x2d	; 45
     4b4:	07 fe       	sbrs	r0, 7
     4b6:	fd cf       	rjmp	.-6      	; 0x4b2 <DataflashManager_ResetDataflashProtections+0x30>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4b8:	8f e7       	ldi	r24, 0x7F	; 127
     4ba:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4bc:	0d b4       	in	r0, 0x2d	; 45
     4be:	07 fe       	sbrs	r0, 7
     4c0:	fd cf       	rjmp	.-6      	; 0x4bc <DataflashManager_ResetDataflashProtections+0x3a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4c2:	8a e9       	ldi	r24, 0x9A	; 154
     4c4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4c6:	0d b4       	in	r0, 0x2d	; 45
     4c8:	07 fe       	sbrs	r0, 7
     4ca:	fd cf       	rjmp	.-6      	; 0x4c6 <DataflashManager_ResetDataflashProtections+0x44>
     4cc:	8e b1       	in	r24, 0x0e	; 14
     4ce:	8c 7f       	andi	r24, 0xFC	; 252
     4d0:	81 60       	ori	r24, 0x01	; 1
     4d2:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4d4:	87 ed       	ldi	r24, 0xD7	; 215
     4d6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4d8:	0d b4       	in	r0, 0x2d	; 45
     4da:	07 fe       	sbrs	r0, 7
     4dc:	fd cf       	rjmp	.-6      	; 0x4d8 <DataflashManager_ResetDataflashProtections+0x56>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     4de:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4e0:	0d b4       	in	r0, 0x2d	; 45
     4e2:	07 fe       	sbrs	r0, 7
     4e4:	fd cf       	rjmp	.-6      	; 0x4e0 <DataflashManager_ResetDataflashProtections+0x5e>
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     4e6:	0e b4       	in	r0, 0x2e	; 46
     4e8:	01 fe       	sbrs	r0, 1
     4ea:	15 c0       	rjmp	.+42     	; 0x516 <DataflashManager_ResetDataflashProtections+0x94>
	{
		Dataflash_ToggleSelectedChipCS();
     4ec:	98 df       	rcall	.-208    	; 0x41e <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4ee:	8d e3       	ldi	r24, 0x3D	; 61
     4f0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4f2:	0d b4       	in	r0, 0x2d	; 45
     4f4:	07 fe       	sbrs	r0, 7
     4f6:	fd cf       	rjmp	.-6      	; 0x4f2 <DataflashManager_ResetDataflashProtections+0x70>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4f8:	8a e2       	ldi	r24, 0x2A	; 42
     4fa:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4fc:	0d b4       	in	r0, 0x2d	; 45
     4fe:	07 fe       	sbrs	r0, 7
     500:	fd cf       	rjmp	.-6      	; 0x4fc <DataflashManager_ResetDataflashProtections+0x7a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     502:	8f e7       	ldi	r24, 0x7F	; 127
     504:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     506:	0d b4       	in	r0, 0x2d	; 45
     508:	07 fe       	sbrs	r0, 7
     50a:	fd cf       	rjmp	.-6      	; 0x506 <DataflashManager_ResetDataflashProtections+0x84>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     50c:	8a e9       	ldi	r24, 0x9A	; 154
     50e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     510:	0d b4       	in	r0, 0x2d	; 45
     512:	07 fe       	sbrs	r0, 7
     514:	fd cf       	rjmp	.-6      	; 0x510 <DataflashManager_ResetDataflashProtections+0x8e>
     516:	8e b1       	in	r24, 0x0e	; 14
     518:	83 60       	ori	r24, 0x03	; 3
     51a:	8e b9       	out	0x0e, r24	; 14
	}
	#endif

	/* Deselect current Dataflash chip */
	Dataflash_DeselectChip();
}
     51c:	08 95       	ret

0000051e <DataflashManager_CheckDataflashOperation>:
     51e:	8e b1       	in	r24, 0x0e	; 14
     520:	8c 7f       	andi	r24, 0xFC	; 252
     522:	82 60       	ori	r24, 0x02	; 2
     524:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     526:	8f e9       	ldi	r24, 0x9F	; 159
     528:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     52a:	0d b4       	in	r0, 0x2d	; 45
     52c:	07 fe       	sbrs	r0, 7
     52e:	fd cf       	rjmp	.-6      	; 0x52a <DataflashManager_CheckDataflashOperation+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     530:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     532:	0d b4       	in	r0, 0x2d	; 45
     534:	07 fe       	sbrs	r0, 7
     536:	fd cf       	rjmp	.-6      	; 0x532 <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     538:	9e b5       	in	r25, 0x2e	; 46
     53a:	8e b1       	in	r24, 0x0e	; 14
     53c:	83 60       	ori	r24, 0x03	; 3
     53e:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     540:	9f 31       	cpi	r25, 0x1F	; 31
     542:	11 f0       	breq	.+4      	; 0x548 <DataflashManager_CheckDataflashOperation+0x2a>
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	08 95       	ret
     548:	8e b1       	in	r24, 0x0e	; 14
     54a:	8c 7f       	andi	r24, 0xFC	; 252
     54c:	81 60       	ori	r24, 0x01	; 1
     54e:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     550:	8f e9       	ldi	r24, 0x9F	; 159
     552:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     554:	0d b4       	in	r0, 0x2d	; 45
     556:	07 fe       	sbrs	r0, 7
     558:	fd cf       	rjmp	.-6      	; 0x554 <DataflashManager_CheckDataflashOperation+0x36>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     55a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     55c:	0d b4       	in	r0, 0x2d	; 45
     55e:	07 fe       	sbrs	r0, 7
     560:	fd cf       	rjmp	.-6      	; 0x55c <DataflashManager_CheckDataflashOperation+0x3e>
				return SPDR;
     562:	9e b5       	in	r25, 0x2e	; 46
     564:	8e b1       	in	r24, 0x0e	; 14
     566:	83 60       	ori	r24, 0x03	; 3
     568:	8e b9       	out	0x0e, r24	; 14
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	9f 31       	cpi	r25, 0x1F	; 31
     56e:	09 f4       	brne	.+2      	; 0x572 <DataflashManager_CheckDataflashOperation+0x54>
     570:	81 e0       	ldi	r24, 0x01	; 1
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     572:	08 95       	ret

00000574 <DataflashManager_ReadBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to read
 */
void DataflashManager_ReadBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
     574:	af 92       	push	r10
     576:	bf 92       	push	r11
     578:	cf 92       	push	r12
     57a:	df 92       	push	r13
     57c:	ef 92       	push	r14
     57e:	ff 92       	push	r15
     580:	0f 93       	push	r16
     582:	1f 93       	push	r17
     584:	df 93       	push	r29
     586:	cf 93       	push	r28
     588:	0f 92       	push	r0
     58a:	cd b7       	in	r28, 0x3d	; 61
     58c:	de b7       	in	r29, 0x3e	; 62
     58e:	5c 01       	movw	r10, r24
     590:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     592:	e9 e0       	ldi	r30, 0x09	; 9
     594:	44 0f       	add	r20, r20
     596:	55 1f       	adc	r21, r21
     598:	66 1f       	adc	r22, r22
     59a:	77 1f       	adc	r23, r23
     59c:	ea 95       	dec	r30
     59e:	d1 f7       	brne	.-12     	; 0x594 <DataflashManager_ReadBlocks+0x20>
     5a0:	db 01       	movw	r26, r22
     5a2:	ca 01       	movw	r24, r20
     5a4:	3a e0       	ldi	r19, 0x0A	; 10
     5a6:	b6 95       	lsr	r27
     5a8:	a7 95       	ror	r26
     5aa:	97 95       	ror	r25
     5ac:	87 95       	ror	r24
     5ae:	3a 95       	dec	r19
     5b0:	d1 f7       	brne	.-12     	; 0x5a6 <DataflashManager_ReadBlocks+0x32>
     5b2:	8c 01       	movw	r16, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     5b4:	2f ef       	ldi	r18, 0xFF	; 255
     5b6:	c2 2e       	mov	r12, r18
     5b8:	23 e0       	ldi	r18, 0x03	; 3
     5ba:	d2 2e       	mov	r13, r18
     5bc:	c4 22       	and	r12, r20
     5be:	d5 22       	and	r13, r21
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     5c0:	1a df       	rcall	.-460    	; 0x3f6 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5c2:	82 ed       	ldi	r24, 0xD2	; 210
     5c4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     5c6:	0d b4       	in	r0, 0x2d	; 45
     5c8:	07 fe       	sbrs	r0, 7
     5ca:	fd cf       	rjmp	.-6      	; 0x5c6 <DataflashManager_ReadBlocks+0x52>

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     5cc:	c8 01       	movw	r24, r16
     5ce:	b6 01       	movw	r22, r12
     5d0:	3e df       	rcall	.-388    	; 0x44e <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5d2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5d4:	0d b4       	in	r0, 0x2d	; 45
     5d6:	07 fe       	sbrs	r0, 7
     5d8:	fd cf       	rjmp	.-6      	; 0x5d4 <DataflashManager_ReadBlocks+0x60>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5da:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5dc:	0d b4       	in	r0, 0x2d	; 45
     5de:	07 fe       	sbrs	r0, 7
     5e0:	fd cf       	rjmp	.-6      	; 0x5dc <DataflashManager_ReadBlocks+0x68>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5e2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5e4:	0d b4       	in	r0, 0x2d	; 45
     5e6:	07 fe       	sbrs	r0, 7
     5e8:	fd cf       	rjmp	.-6      	; 0x5e4 <DataflashManager_ReadBlocks+0x70>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5ea:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5ec:	0d b4       	in	r0, 0x2d	; 45
     5ee:	07 fe       	sbrs	r0, 7
     5f0:	fd cf       	rjmp	.-6      	; 0x5ec <DataflashManager_ReadBlocks+0x78>
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     5f2:	ce d3       	rcall	.+1948   	; 0xd90 <Endpoint_WaitUntilReady>
     5f4:	88 23       	and	r24, r24
     5f6:	09 f0       	breq	.+2      	; 0x5fa <DataflashManager_ReadBlocks+0x86>
     5f8:	c5 c0       	rjmp	.+394    	; 0x784 <DataflashManager_ReadBlocks+0x210>
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     5fa:	94 e0       	ldi	r25, 0x04	; 4
     5fc:	d6 94       	lsr	r13
     5fe:	c7 94       	ror	r12
     600:	9a 95       	dec	r25
     602:	e1 f7       	brne	.-8      	; 0x5fc <DataflashManager_ReadBlocks+0x88>
     604:	9c 2d       	mov	r25, r12
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     606:	82 ed       	ldi	r24, 0xD2	; 210
     608:	c8 2e       	mov	r12, r24
     60a:	ac c0       	rjmp	.+344    	; 0x764 <DataflashManager_ReadBlocks+0x1f0>
     60c:	dd 24       	eor	r13, r13
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     60e:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently full */
			if (!(Endpoint_IsReadWriteAllowed()))
     612:	85 fd       	sbrc	r24, 5
     614:	0b c0       	rjmp	.+22     	; 0x62c <DataflashManager_ReadBlocks+0xb8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     616:	80 91 e8 00 	lds	r24, 0x00E8
     61a:	8e 77       	andi	r24, 0x7E	; 126
     61c:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the endpoint bank to send its contents to the host */
				Endpoint_ClearIN();

				/* Wait until the endpoint is ready for more data */
				if (Endpoint_WaitUntilReady())
     620:	99 83       	std	Y+1, r25	; 0x01
     622:	b6 d3       	rcall	.+1900   	; 0xd90 <Endpoint_WaitUntilReady>
     624:	99 81       	ldd	r25, Y+1	; 0x01
     626:	88 23       	and	r24, r24
     628:	09 f0       	breq	.+2      	; 0x62c <DataflashManager_ReadBlocks+0xb8>
     62a:	ac c0       	rjmp	.+344    	; 0x784 <DataflashManager_ReadBlocks+0x210>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     62c:	90 34       	cpi	r25, 0x40	; 64
     62e:	e9 f4       	brne	.+58     	; 0x66a <DataflashManager_ReadBlocks+0xf6>
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     630:	0f 5f       	subi	r16, 0xFF	; 255
     632:	1f 4f       	sbci	r17, 0xFF	; 255

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     634:	c8 01       	movw	r24, r16
     636:	df de       	rcall	.-578    	; 0x3f6 <Dataflash_SelectChipFromPage>
     638:	ce bc       	out	0x2e, r12	; 46
				while (!(SPSR & (1 << SPIF)));
     63a:	0d b4       	in	r0, 0x2d	; 45
     63c:	07 fe       	sbrs	r0, 7
     63e:	fd cf       	rjmp	.-6      	; 0x63a <DataflashManager_ReadBlocks+0xc6>

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     640:	c8 01       	movw	r24, r16
     642:	60 e0       	ldi	r22, 0x00	; 0
     644:	70 e0       	ldi	r23, 0x00	; 0
     646:	03 df       	rcall	.-506    	; 0x44e <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     648:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     64a:	0d b4       	in	r0, 0x2d	; 45
     64c:	07 fe       	sbrs	r0, 7
     64e:	fd cf       	rjmp	.-6      	; 0x64a <DataflashManager_ReadBlocks+0xd6>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     650:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     652:	0d b4       	in	r0, 0x2d	; 45
     654:	07 fe       	sbrs	r0, 7
     656:	fd cf       	rjmp	.-6      	; 0x652 <DataflashManager_ReadBlocks+0xde>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     658:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     65a:	0d b4       	in	r0, 0x2d	; 45
     65c:	07 fe       	sbrs	r0, 7
     65e:	fd cf       	rjmp	.-6      	; 0x65a <DataflashManager_ReadBlocks+0xe6>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     660:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     662:	0d b4       	in	r0, 0x2d	; 45
     664:	07 fe       	sbrs	r0, 7
     666:	fd cf       	rjmp	.-6      	; 0x662 <DataflashManager_ReadBlocks+0xee>
     668:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     66a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     66c:	0d b4       	in	r0, 0x2d	; 45
     66e:	07 fe       	sbrs	r0, 7
     670:	fd cf       	rjmp	.-6      	; 0x66c <DataflashManager_ReadBlocks+0xf8>
				return SPDR;
     672:	8e b5       	in	r24, 0x2e	; 46
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     674:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     678:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     67a:	0d b4       	in	r0, 0x2d	; 45
     67c:	07 fe       	sbrs	r0, 7
     67e:	fd cf       	rjmp	.-6      	; 0x67a <DataflashManager_ReadBlocks+0x106>
				return SPDR;
     680:	8e b5       	in	r24, 0x2e	; 46
     682:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     686:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     688:	0d b4       	in	r0, 0x2d	; 45
     68a:	07 fe       	sbrs	r0, 7
     68c:	fd cf       	rjmp	.-6      	; 0x688 <DataflashManager_ReadBlocks+0x114>
				return SPDR;
     68e:	8e b5       	in	r24, 0x2e	; 46
     690:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     694:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     696:	0d b4       	in	r0, 0x2d	; 45
     698:	07 fe       	sbrs	r0, 7
     69a:	fd cf       	rjmp	.-6      	; 0x696 <DataflashManager_ReadBlocks+0x122>
				return SPDR;
     69c:	8e b5       	in	r24, 0x2e	; 46
     69e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6a2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6a4:	0d b4       	in	r0, 0x2d	; 45
     6a6:	07 fe       	sbrs	r0, 7
     6a8:	fd cf       	rjmp	.-6      	; 0x6a4 <DataflashManager_ReadBlocks+0x130>
				return SPDR;
     6aa:	8e b5       	in	r24, 0x2e	; 46
     6ac:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6b0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6b2:	0d b4       	in	r0, 0x2d	; 45
     6b4:	07 fe       	sbrs	r0, 7
     6b6:	fd cf       	rjmp	.-6      	; 0x6b2 <DataflashManager_ReadBlocks+0x13e>
				return SPDR;
     6b8:	8e b5       	in	r24, 0x2e	; 46
     6ba:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6be:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6c0:	0d b4       	in	r0, 0x2d	; 45
     6c2:	07 fe       	sbrs	r0, 7
     6c4:	fd cf       	rjmp	.-6      	; 0x6c0 <DataflashManager_ReadBlocks+0x14c>
				return SPDR;
     6c6:	8e b5       	in	r24, 0x2e	; 46
     6c8:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6cc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6ce:	0d b4       	in	r0, 0x2d	; 45
     6d0:	07 fe       	sbrs	r0, 7
     6d2:	fd cf       	rjmp	.-6      	; 0x6ce <DataflashManager_ReadBlocks+0x15a>
				return SPDR;
     6d4:	8e b5       	in	r24, 0x2e	; 46
     6d6:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6da:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6dc:	0d b4       	in	r0, 0x2d	; 45
     6de:	07 fe       	sbrs	r0, 7
     6e0:	fd cf       	rjmp	.-6      	; 0x6dc <DataflashManager_ReadBlocks+0x168>
				return SPDR;
     6e2:	8e b5       	in	r24, 0x2e	; 46
     6e4:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6e8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6ea:	0d b4       	in	r0, 0x2d	; 45
     6ec:	07 fe       	sbrs	r0, 7
     6ee:	fd cf       	rjmp	.-6      	; 0x6ea <DataflashManager_ReadBlocks+0x176>
				return SPDR;
     6f0:	8e b5       	in	r24, 0x2e	; 46
     6f2:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6f6:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6f8:	0d b4       	in	r0, 0x2d	; 45
     6fa:	07 fe       	sbrs	r0, 7
     6fc:	fd cf       	rjmp	.-6      	; 0x6f8 <DataflashManager_ReadBlocks+0x184>
				return SPDR;
     6fe:	8e b5       	in	r24, 0x2e	; 46
     700:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     704:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     706:	0d b4       	in	r0, 0x2d	; 45
     708:	07 fe       	sbrs	r0, 7
     70a:	fd cf       	rjmp	.-6      	; 0x706 <DataflashManager_ReadBlocks+0x192>
				return SPDR;
     70c:	8e b5       	in	r24, 0x2e	; 46
     70e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     712:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     714:	0d b4       	in	r0, 0x2d	; 45
     716:	07 fe       	sbrs	r0, 7
     718:	fd cf       	rjmp	.-6      	; 0x714 <DataflashManager_ReadBlocks+0x1a0>
				return SPDR;
     71a:	8e b5       	in	r24, 0x2e	; 46
     71c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     720:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     722:	0d b4       	in	r0, 0x2d	; 45
     724:	07 fe       	sbrs	r0, 7
     726:	fd cf       	rjmp	.-6      	; 0x722 <DataflashManager_ReadBlocks+0x1ae>
				return SPDR;
     728:	8e b5       	in	r24, 0x2e	; 46
     72a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     72e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     730:	0d b4       	in	r0, 0x2d	; 45
     732:	07 fe       	sbrs	r0, 7
     734:	fd cf       	rjmp	.-6      	; 0x730 <DataflashManager_ReadBlocks+0x1bc>
				return SPDR;
     736:	8e b5       	in	r24, 0x2e	; 46
     738:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     73c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     73e:	0d b4       	in	r0, 0x2d	; 45
     740:	07 fe       	sbrs	r0, 7
     742:	fd cf       	rjmp	.-6      	; 0x73e <DataflashManager_ReadBlocks+0x1ca>
				return SPDR;
     744:	8e b5       	in	r24, 0x2e	; 46
     746:	80 93 f1 00 	sts	0x00F1, r24

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     74a:	f5 01       	movw	r30, r10
     74c:	86 a9       	ldd	r24, Z+54	; 0x36
     74e:	88 23       	and	r24, r24
     750:	c9 f4       	brne	.+50     	; 0x784 <DataflashManager_ReadBlocks+0x210>
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     752:	9f 5f       	subi	r25, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     754:	d3 94       	inc	r13
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     756:	f0 e2       	ldi	r31, 0x20	; 32
     758:	df 16       	cp	r13, r31
     75a:	09 f0       	breq	.+2      	; 0x75e <DataflashManager_ReadBlocks+0x1ea>
     75c:	58 cf       	rjmp	.-336    	; 0x60e <DataflashManager_ReadBlocks+0x9a>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     75e:	08 94       	sec
     760:	e1 08       	sbc	r14, r1
     762:	f1 08       	sbc	r15, r1

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     764:	e1 14       	cp	r14, r1
     766:	f1 04       	cpc	r15, r1
     768:	09 f0       	breq	.+2      	; 0x76c <DataflashManager_ReadBlocks+0x1f8>
     76a:	50 cf       	rjmp	.-352    	; 0x60c <DataflashManager_ReadBlocks+0x98>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     76c:	80 91 e8 00 	lds	r24, 0x00E8
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     770:	85 fd       	sbrc	r24, 5
     772:	05 c0       	rjmp	.+10     	; 0x77e <DataflashManager_ReadBlocks+0x20a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     774:	80 91 e8 00 	lds	r24, 0x00E8
     778:	8e 77       	andi	r24, 0x7E	; 126
     77a:	80 93 e8 00 	sts	0x00E8, r24
     77e:	8e b1       	in	r24, 0x0e	; 14
     780:	83 60       	ori	r24, 0x03	; 3
     782:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearIN();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     784:	0f 90       	pop	r0
     786:	cf 91       	pop	r28
     788:	df 91       	pop	r29
     78a:	1f 91       	pop	r17
     78c:	0f 91       	pop	r16
     78e:	ff 90       	pop	r15
     790:	ef 90       	pop	r14
     792:	df 90       	pop	r13
     794:	cf 90       	pop	r12
     796:	bf 90       	pop	r11
     798:	af 90       	pop	r10
     79a:	08 95       	ret

0000079c <DataflashManager_WriteBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
     79c:	8f 92       	push	r8
     79e:	9f 92       	push	r9
     7a0:	af 92       	push	r10
     7a2:	bf 92       	push	r11
     7a4:	cf 92       	push	r12
     7a6:	df 92       	push	r13
     7a8:	ef 92       	push	r14
     7aa:	ff 92       	push	r15
     7ac:	0f 93       	push	r16
     7ae:	1f 93       	push	r17
     7b0:	df 93       	push	r29
     7b2:	cf 93       	push	r28
     7b4:	0f 92       	push	r0
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	5c 01       	movw	r10, r24
     7bc:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     7be:	09 e0       	ldi	r16, 0x09	; 9
     7c0:	44 0f       	add	r20, r20
     7c2:	55 1f       	adc	r21, r21
     7c4:	66 1f       	adc	r22, r22
     7c6:	77 1f       	adc	r23, r23
     7c8:	0a 95       	dec	r16
     7ca:	d1 f7       	brne	.-12     	; 0x7c0 <DataflashManager_WriteBlocks+0x24>
     7cc:	db 01       	movw	r26, r22
     7ce:	ca 01       	movw	r24, r20
     7d0:	1a e0       	ldi	r17, 0x0A	; 10
     7d2:	b6 95       	lsr	r27
     7d4:	a7 95       	ror	r26
     7d6:	97 95       	ror	r25
     7d8:	87 95       	ror	r24
     7da:	1a 95       	dec	r17
     7dc:	d1 f7       	brne	.-12     	; 0x7d2 <DataflashManager_WriteBlocks+0x36>
     7de:	8c 01       	movw	r16, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     7e0:	bf ef       	ldi	r27, 0xFF	; 255
     7e2:	cb 2e       	mov	r12, r27
     7e4:	b3 e0       	ldi	r27, 0x03	; 3
     7e6:	db 2e       	mov	r13, r27
     7e8:	c4 22       	and	r12, r20
     7ea:	d5 22       	and	r13, r21
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     7ec:	04 de       	rcall	.-1016   	; 0x3f6 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7ee:	83 e5       	ldi	r24, 0x53	; 83
     7f0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7f2:	0d b4       	in	r0, 0x2d	; 45
     7f4:	07 fe       	sbrs	r0, 7
     7f6:	fd cf       	rjmp	.-6      	; 0x7f2 <DataflashManager_WriteBlocks+0x56>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
	/* Copy selected dataflash's current page contents to the Dataflash buffer */
	Dataflash_SendByte(DF_CMD_MAINMEMTOBUFF1);
	Dataflash_SendAddressBytes(CurrDFPage, 0);
     7f8:	c8 01       	movw	r24, r16
     7fa:	60 e0       	ldi	r22, 0x00	; 0
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	27 de       	rcall	.-946    	; 0x44e <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     800:	18 de       	rcall	.-976    	; 0x432 <Dataflash_WaitWhileBusy>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     802:	84 e8       	ldi	r24, 0x84	; 132
     804:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     806:	0d b4       	in	r0, 0x2d	; 45
     808:	07 fe       	sbrs	r0, 7
     80a:	fd cf       	rjmp	.-6      	; 0x806 <DataflashManager_WriteBlocks+0x6a>
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	b6 01       	movw	r22, r12
     812:	1d de       	rcall	.-966    	; 0x44e <Dataflash_SendAddressBytes>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     814:	bd d2       	rcall	.+1402   	; 0xd90 <Endpoint_WaitUntilReady>
     816:	88 23       	and	r24, r24
     818:	09 f0       	breq	.+2      	; 0x81c <DataflashManager_WriteBlocks+0x80>
     81a:	ea c0       	rjmp	.+468    	; 0x9f0 <DataflashManager_WriteBlocks+0x254>
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     81c:	a4 e0       	ldi	r26, 0x04	; 4
     81e:	d6 94       	lsr	r13
     820:	c7 94       	ror	r12
     822:	aa 95       	dec	r26
     824:	e1 f7       	brne	.-8      	; 0x81e <DataflashManager_WriteBlocks+0x82>
     826:	9c 2d       	mov	r25, r12
     828:	47 01       	movw	r8, r14
     82a:	f5 e0       	ldi	r31, 0x05	; 5
     82c:	88 0c       	add	r8, r8
     82e:	99 1c       	adc	r9, r9
     830:	fa 95       	dec	r31
     832:	e1 f7       	brne	.-8      	; 0x82c <DataflashManager_WriteBlocks+0x90>
     834:	dd 24       	eor	r13, r13
     836:	bd c0       	rjmp	.+378    	; 0x9b2 <DataflashManager_WriteBlocks+0x216>
     838:	cc 24       	eor	r12, r12
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     83a:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently empty */
			if (!(Endpoint_IsReadWriteAllowed()))
     83e:	85 fd       	sbrc	r24, 5
     840:	0b c0       	rjmp	.+22     	; 0x858 <DataflashManager_WriteBlocks+0xbc>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     842:	80 91 e8 00 	lds	r24, 0x00E8
     846:	8b 77       	andi	r24, 0x7B	; 123
     848:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the current endpoint bank */
				Endpoint_ClearOUT();

				/* Wait until the host has sent another packet */
				if (Endpoint_WaitUntilReady())
     84c:	99 83       	std	Y+1, r25	; 0x01
     84e:	a0 d2       	rcall	.+1344   	; 0xd90 <Endpoint_WaitUntilReady>
     850:	99 81       	ldd	r25, Y+1	; 0x01
     852:	88 23       	and	r24, r24
     854:	09 f0       	breq	.+2      	; 0x858 <DataflashManager_WriteBlocks+0xbc>
     856:	cc c0       	rjmp	.+408    	; 0x9f0 <DataflashManager_WriteBlocks+0x254>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     858:	90 34       	cpi	r25, 0x40	; 64
     85a:	09 f0       	breq	.+2      	; 0x85e <DataflashManager_WriteBlocks+0xc2>
     85c:	39 c0       	rjmp	.+114    	; 0x8d0 <DataflashManager_WriteBlocks+0x134>
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
     85e:	e9 dd       	rcall	.-1070   	; 0x432 <Dataflash_WaitWhileBusy>
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     860:	dd 20       	and	r13, r13
     862:	11 f4       	brne	.+4      	; 0x868 <DataflashManager_WriteBlocks+0xcc>
     864:	83 e8       	ldi	r24, 0x83	; 131
     866:	01 c0       	rjmp	.+2      	; 0x86a <DataflashManager_WriteBlocks+0xce>
     868:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     86a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     86c:	0d b4       	in	r0, 0x2d	; 45
     86e:	07 fe       	sbrs	r0, 7
     870:	fd cf       	rjmp	.-6      	; 0x86c <DataflashManager_WriteBlocks+0xd0>
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     872:	c8 01       	movw	r24, r16
     874:	60 e0       	ldi	r22, 0x00	; 0
     876:	70 e0       	ldi	r23, 0x00	; 0
     878:	ea dd       	rcall	.-1068   	; 0x44e <Dataflash_SendAddressBytes>

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     87a:	0f 5f       	subi	r16, 0xFF	; 255
     87c:	1f 4f       	sbci	r17, 0xFF	; 255
			 *  or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     87e:	8e b1       	in	r24, 0x0e	; 14

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     880:	83 70       	andi	r24, 0x03	; 3
     882:	81 30       	cpi	r24, 0x01	; 1
     884:	09 f4       	brne	.+2      	; 0x888 <DataflashManager_WriteBlocks+0xec>
				  UsingSecondBuffer = !(UsingSecondBuffer);
     886:	d8 26       	eor	r13, r24

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     888:	c8 01       	movw	r24, r16
     88a:	b5 dd       	rcall	.-1174   	; 0x3f6 <Dataflash_SelectChipFromPage>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     88c:	20 e4       	ldi	r18, 0x40	; 64
     88e:	82 16       	cp	r8, r18
     890:	91 04       	cpc	r9, r1
     892:	78 f4       	brcc	.+30     	; 0x8b2 <DataflashManager_WriteBlocks+0x116>
				{
					/* Copy selected dataflash's current page contents to the Dataflash buffer */
					Dataflash_WaitWhileBusy();
     894:	ce dd       	rcall	.-1124   	; 0x432 <Dataflash_WaitWhileBusy>
					Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_MAINMEMTOBUFF2 : DF_CMD_MAINMEMTOBUFF1);
     896:	dd 20       	and	r13, r13
     898:	11 f4       	brne	.+4      	; 0x89e <DataflashManager_WriteBlocks+0x102>
     89a:	83 e5       	ldi	r24, 0x53	; 83
     89c:	01 c0       	rjmp	.+2      	; 0x8a0 <DataflashManager_WriteBlocks+0x104>
     89e:	85 e5       	ldi	r24, 0x55	; 85
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8a0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8a2:	0d b4       	in	r0, 0x2d	; 45
     8a4:	07 fe       	sbrs	r0, 7
     8a6:	fd cf       	rjmp	.-6      	; 0x8a2 <DataflashManager_WriteBlocks+0x106>
					Dataflash_SendAddressBytes(CurrDFPage, 0);
     8a8:	c8 01       	movw	r24, r16
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	cf dd       	rcall	.-1122   	; 0x44e <Dataflash_SendAddressBytes>
					Dataflash_WaitWhileBusy();
     8b0:	c0 dd       	rcall	.-1152   	; 0x432 <Dataflash_WaitWhileBusy>
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
     8b2:	dd 20       	and	r13, r13
     8b4:	11 f4       	brne	.+4      	; 0x8ba <DataflashManager_WriteBlocks+0x11e>
     8b6:	84 e8       	ldi	r24, 0x84	; 132
     8b8:	01 c0       	rjmp	.+2      	; 0x8bc <DataflashManager_WriteBlocks+0x120>
     8ba:	87 e8       	ldi	r24, 0x87	; 135
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8bc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8be:	0d b4       	in	r0, 0x2d	; 45
     8c0:	07 fe       	sbrs	r0, 7
     8c2:	fd cf       	rjmp	.-6      	; 0x8be <DataflashManager_WriteBlocks+0x122>
				Dataflash_SendAddressBytes(0, 0);
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	70 e0       	ldi	r23, 0x00	; 0
     8cc:	c0 dd       	rcall	.-1152   	; 0x44e <Dataflash_SendAddressBytes>
     8ce:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     8d0:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8d4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8d6:	0d b4       	in	r0, 0x2d	; 45
     8d8:	07 fe       	sbrs	r0, 7
     8da:	fd cf       	rjmp	.-6      	; 0x8d6 <DataflashManager_WriteBlocks+0x13a>
     8dc:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8e0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8e2:	0d b4       	in	r0, 0x2d	; 45
     8e4:	07 fe       	sbrs	r0, 7
     8e6:	fd cf       	rjmp	.-6      	; 0x8e2 <DataflashManager_WriteBlocks+0x146>
     8e8:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8ec:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8ee:	0d b4       	in	r0, 0x2d	; 45
     8f0:	07 fe       	sbrs	r0, 7
     8f2:	fd cf       	rjmp	.-6      	; 0x8ee <DataflashManager_WriteBlocks+0x152>
     8f4:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8f8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8fa:	0d b4       	in	r0, 0x2d	; 45
     8fc:	07 fe       	sbrs	r0, 7
     8fe:	fd cf       	rjmp	.-6      	; 0x8fa <DataflashManager_WriteBlocks+0x15e>
     900:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     904:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     906:	0d b4       	in	r0, 0x2d	; 45
     908:	07 fe       	sbrs	r0, 7
     90a:	fd cf       	rjmp	.-6      	; 0x906 <DataflashManager_WriteBlocks+0x16a>
     90c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     910:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     912:	0d b4       	in	r0, 0x2d	; 45
     914:	07 fe       	sbrs	r0, 7
     916:	fd cf       	rjmp	.-6      	; 0x912 <DataflashManager_WriteBlocks+0x176>
     918:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     91c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     91e:	0d b4       	in	r0, 0x2d	; 45
     920:	07 fe       	sbrs	r0, 7
     922:	fd cf       	rjmp	.-6      	; 0x91e <DataflashManager_WriteBlocks+0x182>
     924:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     928:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     92a:	0d b4       	in	r0, 0x2d	; 45
     92c:	07 fe       	sbrs	r0, 7
     92e:	fd cf       	rjmp	.-6      	; 0x92a <DataflashManager_WriteBlocks+0x18e>
     930:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     934:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     936:	0d b4       	in	r0, 0x2d	; 45
     938:	07 fe       	sbrs	r0, 7
     93a:	fd cf       	rjmp	.-6      	; 0x936 <DataflashManager_WriteBlocks+0x19a>
     93c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     940:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     942:	0d b4       	in	r0, 0x2d	; 45
     944:	07 fe       	sbrs	r0, 7
     946:	fd cf       	rjmp	.-6      	; 0x942 <DataflashManager_WriteBlocks+0x1a6>
     948:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     94c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     94e:	0d b4       	in	r0, 0x2d	; 45
     950:	07 fe       	sbrs	r0, 7
     952:	fd cf       	rjmp	.-6      	; 0x94e <DataflashManager_WriteBlocks+0x1b2>
     954:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     958:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     95a:	0d b4       	in	r0, 0x2d	; 45
     95c:	07 fe       	sbrs	r0, 7
     95e:	fd cf       	rjmp	.-6      	; 0x95a <DataflashManager_WriteBlocks+0x1be>
     960:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     964:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     966:	0d b4       	in	r0, 0x2d	; 45
     968:	07 fe       	sbrs	r0, 7
     96a:	fd cf       	rjmp	.-6      	; 0x966 <DataflashManager_WriteBlocks+0x1ca>
     96c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     970:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     972:	0d b4       	in	r0, 0x2d	; 45
     974:	07 fe       	sbrs	r0, 7
     976:	fd cf       	rjmp	.-6      	; 0x972 <DataflashManager_WriteBlocks+0x1d6>
     978:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     97c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     97e:	0d b4       	in	r0, 0x2d	; 45
     980:	07 fe       	sbrs	r0, 7
     982:	fd cf       	rjmp	.-6      	; 0x97e <DataflashManager_WriteBlocks+0x1e2>
     984:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     988:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     98a:	0d b4       	in	r0, 0x2d	; 45
     98c:	07 fe       	sbrs	r0, 7
     98e:	fd cf       	rjmp	.-6      	; 0x98a <DataflashManager_WriteBlocks+0x1ee>

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     990:	f5 01       	movw	r30, r10
     992:	86 a9       	ldd	r24, Z+54	; 0x36
     994:	88 23       	and	r24, r24
     996:	61 f5       	brne	.+88     	; 0x9f0 <DataflashManager_WriteBlocks+0x254>
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     998:	9f 5f       	subi	r25, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     99a:	c3 94       	inc	r12
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     99c:	f0 e2       	ldi	r31, 0x20	; 32
     99e:	cf 16       	cp	r12, r31
     9a0:	09 f0       	breq	.+2      	; 0x9a4 <DataflashManager_WriteBlocks+0x208>
     9a2:	4b cf       	rjmp	.-362    	; 0x83a <DataflashManager_WriteBlocks+0x9e>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     9a4:	08 94       	sec
     9a6:	e1 08       	sbc	r14, r1
     9a8:	f1 08       	sbc	r15, r1
     9aa:	20 ee       	ldi	r18, 0xE0	; 224
     9ac:	3f ef       	ldi	r19, 0xFF	; 255
     9ae:	82 0e       	add	r8, r18
     9b0:	93 1e       	adc	r9, r19

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     9b2:	e1 14       	cp	r14, r1
     9b4:	f1 04       	cpc	r15, r1
     9b6:	09 f0       	breq	.+2      	; 0x9ba <DataflashManager_WriteBlocks+0x21e>
     9b8:	3f cf       	rjmp	.-386    	; 0x838 <DataflashManager_WriteBlocks+0x9c>
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
     9ba:	3b dd       	rcall	.-1418   	; 0x432 <Dataflash_WaitWhileBusy>
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     9bc:	dd 20       	and	r13, r13
     9be:	11 f4       	brne	.+4      	; 0x9c4 <DataflashManager_WriteBlocks+0x228>
     9c0:	83 e8       	ldi	r24, 0x83	; 131
     9c2:	01 c0       	rjmp	.+2      	; 0x9c6 <DataflashManager_WriteBlocks+0x22a>
     9c4:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9c6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9c8:	0d b4       	in	r0, 0x2d	; 45
     9ca:	07 fe       	sbrs	r0, 7
     9cc:	fd cf       	rjmp	.-6      	; 0x9c8 <DataflashManager_WriteBlocks+0x22c>
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
     9ce:	c8 01       	movw	r24, r16
     9d0:	60 e0       	ldi	r22, 0x00	; 0
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	3c dd       	rcall	.-1416   	; 0x44e <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     9d6:	2d dd       	rcall	.-1446   	; 0x432 <Dataflash_WaitWhileBusy>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     9d8:	80 91 e8 00 	lds	r24, 0x00E8

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     9dc:	85 fd       	sbrc	r24, 5
     9de:	05 c0       	rjmp	.+10     	; 0x9ea <DataflashManager_WriteBlocks+0x24e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     9e0:	80 91 e8 00 	lds	r24, 0x00E8
     9e4:	8b 77       	andi	r24, 0x7B	; 123
     9e6:	80 93 e8 00 	sts	0x00E8, r24
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     9ea:	8e b1       	in	r24, 0x0e	; 14
     9ec:	83 60       	ori	r24, 0x03	; 3
     9ee:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearOUT();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     9f0:	0f 90       	pop	r0
     9f2:	cf 91       	pop	r28
     9f4:	df 91       	pop	r29
     9f6:	1f 91       	pop	r17
     9f8:	0f 91       	pop	r16
     9fa:	ff 90       	pop	r15
     9fc:	ef 90       	pop	r14
     9fe:	df 90       	pop	r13
     a00:	cf 90       	pop	r12
     a02:	bf 90       	pop	r11
     a04:	af 90       	pop	r10
     a06:	9f 90       	pop	r9
     a08:	8f 90       	pop	r8
     a0a:	08 95       	ret

00000a0c <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
     a0c:	0f 93       	push	r16
     a0e:	1f 93       	push	r17
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	8c 01       	movw	r16, r24
     a16:	86 2f       	mov	r24, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     a18:	f8 01       	movw	r30, r16
     a1a:	46 8d       	ldd	r20, Z+30	; 0x1e
     a1c:	55 8d       	ldd	r21, Z+29	; 0x1d
     a1e:	64 8d       	ldd	r22, Z+28	; 0x1c
     a20:	73 8d       	ldd	r23, Z+27	; 0x1b

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     a22:	c1 a1       	ldd	r28, Z+33	; 0x21
     a24:	d0 a1       	ldd	r29, Z+32	; 0x20

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     a26:	40 30       	cpi	r20, 0x00	; 0
     a28:	f0 e8       	ldi	r31, 0x80	; 128
     a2a:	5f 07       	cpc	r21, r31
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	6f 07       	cpc	r22, r31
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	7f 07       	cpc	r23, r31
     a34:	68 f0       	brcs	.+26     	; 0xa50 <SCSI_Command_ReadWrite_10+0x44>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     a36:	80 91 46 01 	lds	r24, 0x0146
     a3a:	80 7f       	andi	r24, 0xF0	; 240
     a3c:	85 60       	ori	r24, 0x05	; 5
     a3e:	80 93 46 01 	sts	0x0146, r24
     a42:	81 e2       	ldi	r24, 0x21	; 33
     a44:	80 93 50 01 	sts	0x0150, r24
     a48:	10 92 51 01 	sts	0x0151, r1
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	21 c0       	rjmp	.+66     	; 0xa92 <SCSI_Command_ReadWrite_10+0x86>
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
     a50:	88 23       	and	r24, r24
     a52:	21 f0       	breq	.+8      	; 0xa5c <SCSI_Command_ReadWrite_10+0x50>
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     a54:	c8 01       	movw	r24, r16
     a56:	9e 01       	movw	r18, r28
     a58:	8d dd       	rcall	.-1254   	; 0x574 <DataflashManager_ReadBlocks>
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <SCSI_Command_ReadWrite_10+0x56>
	else
	  DataflashManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     a5c:	c8 01       	movw	r24, r16
     a5e:	9e 01       	movw	r18, r28
     a60:	9d de       	rcall	.-710    	; 0x79c <DataflashManager_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     a62:	9e 01       	movw	r18, r28
     a64:	40 e0       	ldi	r20, 0x00	; 0
     a66:	50 e0       	ldi	r21, 0x00	; 0
     a68:	89 e0       	ldi	r24, 0x09	; 9
     a6a:	22 0f       	add	r18, r18
     a6c:	33 1f       	adc	r19, r19
     a6e:	44 1f       	adc	r20, r20
     a70:	55 1f       	adc	r21, r21
     a72:	8a 95       	dec	r24
     a74:	d1 f7       	brne	.-12     	; 0xa6a <SCSI_Command_ReadWrite_10+0x5e>
     a76:	f8 01       	movw	r30, r16
     a78:	82 89       	ldd	r24, Z+18	; 0x12
     a7a:	93 89       	ldd	r25, Z+19	; 0x13
     a7c:	a4 89       	ldd	r26, Z+20	; 0x14
     a7e:	b5 89       	ldd	r27, Z+21	; 0x15
     a80:	82 1b       	sub	r24, r18
     a82:	93 0b       	sbc	r25, r19
     a84:	a4 0b       	sbc	r26, r20
     a86:	b5 0b       	sbc	r27, r21
     a88:	82 8b       	std	Z+18, r24	; 0x12
     a8a:	93 8b       	std	Z+19, r25	; 0x13
     a8c:	a4 8b       	std	Z+20, r26	; 0x14
     a8e:	b5 8b       	std	Z+21, r27	; 0x15
     a90:	81 e0       	ldi	r24, 0x01	; 1

	return true;
}
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	08 95       	ret

00000a9c <SCSI_DecodeSCSICommand>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean true if the command completed successfully, false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     a9c:	cf 92       	push	r12
     a9e:	df 92       	push	r13
     aa0:	ef 92       	push	r14
     aa2:	ff 92       	push	r15
     aa4:	0f 93       	push	r16
     aa6:	1f 93       	push	r17
     aa8:	df 93       	push	r29
     aaa:	cf 93       	push	r28
     aac:	cd b7       	in	r28, 0x3d	; 61
     aae:	de b7       	in	r29, 0x3e	; 62
     ab0:	28 97       	sbiw	r28, 0x08	; 8
     ab2:	0f b6       	in	r0, 0x3f	; 63
     ab4:	f8 94       	cli
     ab6:	de bf       	out	0x3e, r29	; 62
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	cd bf       	out	0x3d, r28	; 61
     abc:	7c 01       	movw	r14, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     abe:	fc 01       	movw	r30, r24
     ac0:	81 8d       	ldd	r24, Z+25	; 0x19
     ac2:	8d 31       	cpi	r24, 0x1D	; 29
     ac4:	09 f4       	brne	.+2      	; 0xac8 <SCSI_DecodeSCSICommand+0x2c>
     ac6:	a6 c0       	rjmp	.+332    	; 0xc14 <SCSI_DecodeSCSICommand+0x178>
     ac8:	8e 31       	cpi	r24, 0x1E	; 30
     aca:	78 f4       	brcc	.+30     	; 0xaea <SCSI_DecodeSCSICommand+0x4e>
     acc:	83 30       	cpi	r24, 0x03	; 3
     ace:	09 f4       	brne	.+2      	; 0xad2 <SCSI_DecodeSCSICommand+0x36>
     ad0:	52 c0       	rjmp	.+164    	; 0xb76 <SCSI_DecodeSCSICommand+0xda>
     ad2:	84 30       	cpi	r24, 0x04	; 4
     ad4:	20 f4       	brcc	.+8      	; 0xade <SCSI_DecodeSCSICommand+0x42>
     ad6:	88 23       	and	r24, r24
     ad8:	09 f4       	brne	.+2      	; 0xadc <SCSI_DecodeSCSICommand+0x40>
     ada:	d9 c0       	rjmp	.+434    	; 0xc8e <SCSI_DecodeSCSICommand+0x1f2>
     adc:	de c0       	rjmp	.+444    	; 0xc9a <SCSI_DecodeSCSICommand+0x1fe>
     ade:	82 31       	cpi	r24, 0x12	; 18
     ae0:	b9 f0       	breq	.+46     	; 0xb10 <SCSI_DecodeSCSICommand+0x74>
     ae2:	8a 31       	cpi	r24, 0x1A	; 26
     ae4:	09 f0       	breq	.+2      	; 0xae8 <SCSI_DecodeSCSICommand+0x4c>
     ae6:	d9 c0       	rjmp	.+434    	; 0xc9a <SCSI_DecodeSCSICommand+0x1fe>
     ae8:	b8 c0       	rjmp	.+368    	; 0xc5a <SCSI_DecodeSCSICommand+0x1be>
     aea:	88 32       	cpi	r24, 0x28	; 40
     aec:	09 f4       	brne	.+2      	; 0xaf0 <SCSI_DecodeSCSICommand+0x54>
     aee:	af c0       	rjmp	.+350    	; 0xc4e <SCSI_DecodeSCSICommand+0x1b2>
     af0:	89 32       	cpi	r24, 0x29	; 41
     af2:	38 f4       	brcc	.+14     	; 0xb02 <SCSI_DecodeSCSICommand+0x66>
     af4:	8e 31       	cpi	r24, 0x1E	; 30
     af6:	09 f4       	brne	.+2      	; 0xafa <SCSI_DecodeSCSICommand+0x5e>
     af8:	ca c0       	rjmp	.+404    	; 0xc8e <SCSI_DecodeSCSICommand+0x1f2>
     afa:	85 32       	cpi	r24, 0x25	; 37
     afc:	09 f0       	breq	.+2      	; 0xb00 <SCSI_DecodeSCSICommand+0x64>
     afe:	cd c0       	rjmp	.+410    	; 0xc9a <SCSI_DecodeSCSICommand+0x1fe>
     b00:	5d c0       	rjmp	.+186    	; 0xbbc <SCSI_DecodeSCSICommand+0x120>
     b02:	8a 32       	cpi	r24, 0x2A	; 42
     b04:	09 f4       	brne	.+2      	; 0xb08 <SCSI_DecodeSCSICommand+0x6c>
     b06:	a0 c0       	rjmp	.+320    	; 0xc48 <SCSI_DecodeSCSICommand+0x1ac>
     b08:	8f 32       	cpi	r24, 0x2F	; 47
     b0a:	09 f0       	breq	.+2      	; 0xb0e <SCSI_DecodeSCSICommand+0x72>
     b0c:	c6 c0       	rjmp	.+396    	; 0xc9a <SCSI_DecodeSCSICommand+0x1fe>
     b0e:	bf c0       	rjmp	.+382    	; 0xc8e <SCSI_DecodeSCSICommand+0x1f2>
     b10:	f7 01       	movw	r30, r14
     b12:	05 8d       	ldd	r16, Z+29	; 0x1d
     b14:	14 8d       	ldd	r17, Z+28	; 0x1c
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     b16:	82 8d       	ldd	r24, Z+26	; 0x1a
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	83 70       	andi	r24, 0x03	; 3
     b1c:	90 70       	andi	r25, 0x00	; 0
     b1e:	89 2b       	or	r24, r25
     b20:	09 f0       	breq	.+2      	; 0xb24 <SCSI_DecodeSCSICommand+0x88>
     b22:	7c c0       	rjmp	.+248    	; 0xc1c <SCSI_DecodeSCSICommand+0x180>
     b24:	83 8d       	ldd	r24, Z+27	; 0x1b
     b26:	88 23       	and	r24, r24
     b28:	09 f0       	breq	.+2      	; 0xb2c <SCSI_DecodeSCSICommand+0x90>
     b2a:	78 c0       	rjmp	.+240    	; 0xc1c <SCSI_DecodeSCSICommand+0x180>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     b2c:	68 01       	movw	r12, r16
     b2e:	05 32       	cpi	r16, 0x25	; 37
     b30:	11 05       	cpc	r17, r1
     b32:	18 f0       	brcs	.+6      	; 0xb3a <SCSI_DecodeSCSICommand+0x9e>
     b34:	94 e2       	ldi	r25, 0x24	; 36
     b36:	c9 2e       	mov	r12, r25
     b38:	d1 2c       	mov	r13, r1
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     b3a:	86 e5       	ldi	r24, 0x56	; 86
     b3c:	91 e0       	ldi	r25, 0x01	; 1
     b3e:	b6 01       	movw	r22, r12
     b40:	40 e0       	ldi	r20, 0x00	; 0
     b42:	50 e0       	ldi	r21, 0x00	; 0
     b44:	63 d4       	rcall	.+2246   	; 0x140c <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     b46:	c8 01       	movw	r24, r16
     b48:	8c 19       	sub	r24, r12
     b4a:	9d 09       	sbc	r25, r13
     b4c:	60 e0       	ldi	r22, 0x00	; 0
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	ae d4       	rcall	.+2396   	; 0x14ae <Endpoint_Null_Stream>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b52:	80 91 e8 00 	lds	r24, 0x00E8
     b56:	8e 77       	andi	r24, 0x7E	; 126
     b58:	80 93 e8 00 	sts	0x00E8, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     b5c:	96 01       	movw	r18, r12
     b5e:	40 e0       	ldi	r20, 0x00	; 0
     b60:	50 e0       	ldi	r21, 0x00	; 0
     b62:	f7 01       	movw	r30, r14
     b64:	82 89       	ldd	r24, Z+18	; 0x12
     b66:	93 89       	ldd	r25, Z+19	; 0x13
     b68:	a4 89       	ldd	r26, Z+20	; 0x14
     b6a:	b5 89       	ldd	r27, Z+21	; 0x15
     b6c:	82 1b       	sub	r24, r18
     b6e:	93 0b       	sbc	r25, r19
     b70:	a4 0b       	sbc	r26, r20
     b72:	b5 0b       	sbc	r27, r21
     b74:	87 c0       	rjmp	.+270    	; 0xc84 <SCSI_DecodeSCSICommand+0x1e8>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
     b76:	f7 01       	movw	r30, r14
     b78:	15 8d       	ldd	r17, Z+29	; 0x1d
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     b7a:	01 2f       	mov	r16, r17
     b7c:	13 31       	cpi	r17, 0x13	; 19
     b7e:	08 f0       	brcs	.+2      	; 0xb82 <SCSI_DecodeSCSICommand+0xe6>
     b80:	02 e1       	ldi	r16, 0x12	; 18

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     b82:	84 e4       	ldi	r24, 0x44	; 68
     b84:	91 e0       	ldi	r25, 0x01	; 1
     b86:	60 2f       	mov	r22, r16
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	40 e0       	ldi	r20, 0x00	; 0
     b8c:	50 e0       	ldi	r21, 0x00	; 0
     b8e:	3e d4       	rcall	.+2172   	; 0x140c <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     b90:	81 2f       	mov	r24, r17
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	80 1b       	sub	r24, r16
     b96:	91 09       	sbc	r25, r1
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	88 d4       	rcall	.+2320   	; 0x14ae <Endpoint_Null_Stream>
     b9e:	80 91 e8 00 	lds	r24, 0x00E8
     ba2:	8e 77       	andi	r24, 0x7E	; 126
     ba4:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     ba8:	f7 01       	movw	r30, r14
     baa:	82 89       	ldd	r24, Z+18	; 0x12
     bac:	93 89       	ldd	r25, Z+19	; 0x13
     bae:	a4 89       	ldd	r26, Z+20	; 0x14
     bb0:	b5 89       	ldd	r27, Z+21	; 0x15
     bb2:	80 1b       	sub	r24, r16
     bb4:	91 09       	sbc	r25, r1
     bb6:	a1 09       	sbc	r26, r1
     bb8:	b1 09       	sbc	r27, r1
     bba:	64 c0       	rjmp	.+200    	; 0xc84 <SCSI_DecodeSCSICommand+0x1e8>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN = (LUN_MEDIA_BLOCKS - 1);
     bbc:	8f ef       	ldi	r24, 0xFF	; 255
     bbe:	9f e7       	ldi	r25, 0x7F	; 127
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	89 83       	std	Y+1, r24	; 0x01
     bc6:	9a 83       	std	Y+2, r25	; 0x02
     bc8:	ab 83       	std	Y+3, r26	; 0x03
     bca:	bc 83       	std	Y+4, r27	; 0x04
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	92 e0       	ldi	r25, 0x02	; 2
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	8d 83       	std	Y+5, r24	; 0x05
     bd6:	9e 83       	std	Y+6, r25	; 0x06
     bd8:	af 83       	std	Y+7, r26	; 0x07
     bda:	b8 87       	std	Y+8, r27	; 0x08

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
     bdc:	ce 01       	movw	r24, r28
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	64 e0       	ldi	r22, 0x04	; 4
     be2:	70 e0       	ldi	r23, 0x00	; 0
     be4:	40 e0       	ldi	r20, 0x00	; 0
     be6:	50 e0       	ldi	r21, 0x00	; 0
     be8:	c0 d3       	rcall	.+1920   	; 0x136a <Endpoint_Write_Stream_BE>
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
     bea:	ce 01       	movw	r24, r28
     bec:	05 96       	adiw	r24, 0x05	; 5
     bee:	64 e0       	ldi	r22, 0x04	; 4
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	40 e0       	ldi	r20, 0x00	; 0
     bf4:	50 e0       	ldi	r21, 0x00	; 0
     bf6:	b9 d3       	rcall	.+1906   	; 0x136a <Endpoint_Write_Stream_BE>
     bf8:	80 91 e8 00 	lds	r24, 0x00E8
     bfc:	8e 77       	andi	r24, 0x7E	; 126
     bfe:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
     c02:	f7 01       	movw	r30, r14
     c04:	82 89       	ldd	r24, Z+18	; 0x12
     c06:	93 89       	ldd	r25, Z+19	; 0x13
     c08:	a4 89       	ldd	r26, Z+20	; 0x14
     c0a:	b5 89       	ldd	r27, Z+21	; 0x15
     c0c:	08 97       	sbiw	r24, 0x08	; 8
     c0e:	a1 09       	sbc	r26, r1
     c10:	b1 09       	sbc	r27, r1
     c12:	38 c0       	rjmp	.+112    	; 0xc84 <SCSI_DecodeSCSICommand+0x1e8>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
     c14:	f7 01       	movw	r30, r14
     c16:	82 8d       	ldd	r24, Z+26	; 0x1a
     c18:	82 fd       	sbrc	r24, 2
     c1a:	08 c0       	rjmp	.+16     	; 0xc2c <SCSI_DecodeSCSICommand+0x190>
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     c1c:	80 91 46 01 	lds	r24, 0x0146
     c20:	80 7f       	andi	r24, 0xF0	; 240
     c22:	85 60       	ori	r24, 0x05	; 5
     c24:	80 93 46 01 	sts	0x0146, r24
     c28:	84 e2       	ldi	r24, 0x24	; 36
     c2a:	3e c0       	rjmp	.+124    	; 0xca8 <SCSI_DecodeSCSICommand+0x20c>

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
     c2c:	78 dc       	rcall	.-1808   	; 0x51e <DataflashManager_CheckDataflashOperation>
     c2e:	88 23       	and	r24, r24
     c30:	71 f5       	brne	.+92     	; 0xc8e <SCSI_DecodeSCSICommand+0x1f2>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     c32:	80 91 46 01 	lds	r24, 0x0146
     c36:	80 7f       	andi	r24, 0xF0	; 240
     c38:	84 60       	ori	r24, 0x04	; 4
     c3a:	80 93 46 01 	sts	0x0146, r24
     c3e:	10 92 50 01 	sts	0x0150, r1
     c42:	10 92 51 01 	sts	0x0151, r1
     c46:	33 c0       	rjmp	.+102    	; 0xcae <SCSI_DecodeSCSICommand+0x212>
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
     c48:	c7 01       	movw	r24, r14
     c4a:	60 e0       	ldi	r22, 0x00	; 0
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <SCSI_DecodeSCSICommand+0x1b6>
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
     c4e:	c7 01       	movw	r24, r14
     c50:	61 e0       	ldi	r22, 0x01	; 1
     c52:	dc de       	rcall	.-584    	; 0xa0c <SCSI_Command_ReadWrite_10>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     c54:	88 23       	and	r24, r24
     c56:	59 f1       	breq	.+86     	; 0xcae <SCSI_DecodeSCSICommand+0x212>
     c58:	2c c0       	rjmp	.+88     	; 0xcb2 <SCSI_DecodeSCSICommand+0x216>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c5a:	10 92 f1 00 	sts	0x00F1, r1
     c5e:	10 92 f1 00 	sts	0x00F1, r1
     c62:	10 92 f1 00 	sts	0x00F1, r1
     c66:	10 92 f1 00 	sts	0x00F1, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c6a:	80 91 e8 00 	lds	r24, 0x00E8
     c6e:	8e 77       	andi	r24, 0x7E	; 126
     c70:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
     c74:	f7 01       	movw	r30, r14
     c76:	82 89       	ldd	r24, Z+18	; 0x12
     c78:	93 89       	ldd	r25, Z+19	; 0x13
     c7a:	a4 89       	ldd	r26, Z+20	; 0x14
     c7c:	b5 89       	ldd	r27, Z+21	; 0x15
     c7e:	04 97       	sbiw	r24, 0x04	; 4
     c80:	a1 09       	sbc	r26, r1
     c82:	b1 09       	sbc	r27, r1
     c84:	82 8b       	std	Z+18, r24	; 0x12
     c86:	93 8b       	std	Z+19, r25	; 0x13
     c88:	a4 8b       	std	Z+20, r26	; 0x14
     c8a:	b5 8b       	std	Z+21, r27	; 0x15
     c8c:	12 c0       	rjmp	.+36     	; 0xcb2 <SCSI_DecodeSCSICommand+0x216>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
     c8e:	f7 01       	movw	r30, r14
     c90:	12 8a       	std	Z+18, r1	; 0x12
     c92:	13 8a       	std	Z+19, r1	; 0x13
     c94:	14 8a       	std	Z+20, r1	; 0x14
     c96:	15 8a       	std	Z+21, r1	; 0x15
     c98:	0c c0       	rjmp	.+24     	; 0xcb2 <SCSI_DecodeSCSICommand+0x216>
			break;
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     c9a:	80 91 46 01 	lds	r24, 0x0146
     c9e:	80 7f       	andi	r24, 0xF0	; 240
     ca0:	85 60       	ori	r24, 0x05	; 5
     ca2:	80 93 46 01 	sts	0x0146, r24
     ca6:	80 e2       	ldi	r24, 0x20	; 32
     ca8:	80 93 50 01 	sts	0x0150, r24
     cac:	ca cf       	rjmp	.-108    	; 0xc42 <SCSI_DecodeSCSICommand+0x1a6>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <SCSI_DecodeSCSICommand+0x22a>
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     cb2:	80 91 46 01 	lds	r24, 0x0146
     cb6:	80 7f       	andi	r24, 0xF0	; 240
     cb8:	80 93 46 01 	sts	0x0146, r24
     cbc:	10 92 50 01 	sts	0x0150, r1
     cc0:	10 92 51 01 	sts	0x0151, r1
     cc4:	81 e0       	ldi	r24, 0x01	; 1

		return true;
	}

	return false;
}
     cc6:	28 96       	adiw	r28, 0x08	; 8
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	f8 94       	cli
     ccc:	de bf       	out	0x3e, r29	; 62
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	cd bf       	out	0x3d, r28	; 61
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	1f 91       	pop	r17
     cd8:	0f 91       	pop	r16
     cda:	ff 90       	pop	r15
     cdc:	ef 90       	pop	r14
     cde:	df 90       	pop	r13
     ce0:	cf 90       	pop	r12
     ce2:	08 95       	ret

00000ce4 <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
     ce4:	38 2f       	mov	r19, r24
     ce6:	28 2f       	mov	r18, r24
     ce8:	2c c0       	rjmp	.+88     	; 0xd42 <Endpoint_ConfigureEndpoint_Prv+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     cea:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);
		
		if (EPNum == Number)
     cee:	23 17       	cp	r18, r19
     cf0:	21 f4       	brne	.+8      	; 0xcfa <Endpoint_ConfigureEndpoint_Prv+0x16>
     cf2:	76 2f       	mov	r23, r22
     cf4:	94 2f       	mov	r25, r20
     cf6:	50 e0       	ldi	r21, 0x00	; 0
     cf8:	06 c0       	rjmp	.+12     	; 0xd06 <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     cfa:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     cfe:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
     d02:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     d06:	91 ff       	sbrs	r25, 1
     d08:	1b c0       	rjmp	.+54     	; 0xd40 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     d0a:	80 91 eb 00 	lds	r24, 0x00EB
     d0e:	8e 7f       	andi	r24, 0xFE	; 254
     d10:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     d14:	80 91 ed 00 	lds	r24, 0x00ED
     d18:	8d 7f       	andi	r24, 0xFD	; 253
     d1a:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     d1e:	80 91 eb 00 	lds	r24, 0x00EB
     d22:	81 60       	ori	r24, 0x01	; 1
     d24:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     d28:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     d2c:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
     d30:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     d34:	80 91 ee 00 	lds	r24, 0x00EE
			
		if (!(Endpoint_IsConfigured()))
     d38:	87 fd       	sbrc	r24, 7
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else	
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     d40:	2f 5f       	subi	r18, 0xFF	; 255
     d42:	27 30       	cpi	r18, 0x07	; 7
     d44:	90 f2       	brcs	.-92     	; 0xcea <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     d46:	30 93 e9 00 	sts	0x00E9, r19
     d4a:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     d4c:	08 95       	ret

00000d4e <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     d4e:	80 91 87 01 	lds	r24, 0x0187
     d52:	88 23       	and	r24, r24
     d54:	9c f4       	brge	.+38     	; 0xd7c <Endpoint_ClearStatusStage+0x2e>
     d56:	04 c0       	rjmp	.+8      	; 0xd60 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     d58:	80 91 86 01 	lds	r24, 0x0186
     d5c:	88 23       	and	r24, r24
     d5e:	b9 f0       	breq	.+46     	; 0xd8e <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     d60:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     d64:	82 ff       	sbrs	r24, 2
     d66:	f8 cf       	rjmp	.-16     	; 0xd58 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d68:	80 91 e8 00 	lds	r24, 0x00E8
     d6c:	8b 77       	andi	r24, 0x7B	; 123
     d6e:	80 93 e8 00 	sts	0x00E8, r24
     d72:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     d74:	80 91 86 01 	lds	r24, 0x0186
     d78:	88 23       	and	r24, r24
     d7a:	49 f0       	breq	.+18     	; 0xd8e <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d7c:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     d80:	80 ff       	sbrs	r24, 0
     d82:	f8 cf       	rjmp	.-16     	; 0xd74 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d84:	80 91 e8 00 	lds	r24, 0x00E8
     d88:	8e 77       	andi	r24, 0x7E	; 126
     d8a:	80 93 e8 00 	sts	0x00E8, r24
     d8e:	08 95       	ret

00000d90 <Endpoint_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     d90:	40 91 e4 00 	lds	r20, 0x00E4
     d94:	50 91 e5 00 	lds	r21, 0x00E5
     d98:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
     d9a:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
     d9e:	80 78       	andi	r24, 0x80	; 128
     da0:	80 38       	cpi	r24, 0x80	; 128
     da2:	29 f4       	brne	.+10     	; 0xdae <Endpoint_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     da4:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
     da8:	80 ff       	sbrs	r24, 0
     daa:	05 c0       	rjmp	.+10     	; 0xdb6 <Endpoint_WaitUntilReady+0x26>
     dac:	22 c0       	rjmp	.+68     	; 0xdf2 <Endpoint_WaitUntilReady+0x62>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     dae:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     db2:	82 fd       	sbrc	r24, 2
     db4:	1e c0       	rjmp	.+60     	; 0xdf2 <Endpoint_WaitUntilReady+0x62>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     db6:	80 91 86 01 	lds	r24, 0x0186

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     dba:	88 23       	and	r24, r24
     dbc:	11 f4       	brne	.+4      	; 0xdc2 <Endpoint_WaitUntilReady+0x32>
     dbe:	82 e0       	ldi	r24, 0x02	; 2
     dc0:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     dc2:	85 30       	cpi	r24, 0x05	; 5
     dc4:	11 f4       	brne	.+4      	; 0xdca <Endpoint_WaitUntilReady+0x3a>
     dc6:	83 e0       	ldi	r24, 0x03	; 3
     dc8:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     dca:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     dce:	85 ff       	sbrs	r24, 5
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <Endpoint_WaitUntilReady+0x46>
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	08 95       	ret
     dd6:	80 91 e4 00 	lds	r24, 0x00E4
     dda:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     dde:	84 17       	cp	r24, r20
     de0:	95 07       	cpc	r25, r21
     de2:	d9 f2       	breq	.-74     	; 0xd9a <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     de4:	22 23       	and	r18, r18
     de6:	11 f4       	brne	.+4      	; 0xdec <Endpoint_WaitUntilReady+0x5c>
     de8:	84 e0       	ldi	r24, 0x04	; 4
     dea:	08 95       	ret
     dec:	21 50       	subi	r18, 0x01	; 1
     dee:	ac 01       	movw	r20, r24
     df0:	d4 cf       	rjmp	.-88     	; 0xd9a <Endpoint_WaitUntilReady+0xa>
     df2:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     df4:	08 95       	ret

00000df6 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     df6:	ef 92       	push	r14
     df8:	ff 92       	push	r15
     dfa:	0f 93       	push	r16
     dfc:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     dfe:	4d d0       	rcall	.+154    	; 0xe9a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     e00:	54 d0       	rcall	.+168    	; 0xeaa <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     e02:	08 ed       	ldi	r16, 0xD8	; 216
     e04:	10 e0       	ldi	r17, 0x00	; 0
     e06:	f8 01       	movw	r30, r16
     e08:	80 81       	ld	r24, Z
     e0a:	8f 77       	andi	r24, 0x7F	; 127
     e0c:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
     e0e:	80 81       	ld	r24, Z
     e10:	80 68       	ori	r24, 0x80	; 128
     e12:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     e14:	80 81       	ld	r24, Z
     e16:	8f 7d       	andi	r24, 0xDF	; 223
     e18:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     e1a:	e7 ed       	ldi	r30, 0xD7	; 215
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	80 68       	ori	r24, 0x80	; 128
     e22:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     e24:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     e26:	10 92 86 01 	sts	0x0186, r1
	USB_Device_ConfigurationNumber  = 0;
     e2a:	10 92 82 01 	sts	0x0182, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     e2e:	10 92 84 01 	sts	0x0184, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     e32:	10 92 83 01 	sts	0x0183, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     e36:	80 ee       	ldi	r24, 0xE0	; 224
     e38:	e8 2e       	mov	r14, r24
     e3a:	f1 2c       	mov	r15, r1
     e3c:	f7 01       	movw	r30, r14
     e3e:	80 81       	ld	r24, Z
     e40:	8b 7f       	andi	r24, 0xFB	; 251
     e42:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     e44:	f8 01       	movw	r30, r16
     e46:	80 81       	ld	r24, Z
     e48:	81 60       	ori	r24, 0x01	; 1
     e4a:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	42 e0       	ldi	r20, 0x02	; 2
     e52:	48 df       	rcall	.-368    	; 0xce4 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     e54:	e1 ee       	ldi	r30, 0xE1	; 225
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	8e 7f       	andi	r24, 0xFE	; 254
     e5c:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     e5e:	e2 ee       	ldi	r30, 0xE2	; 226
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	81 60       	ori	r24, 0x01	; 1
     e66:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     e68:	80 81       	ld	r24, Z
     e6a:	88 60       	ori	r24, 0x08	; 8
     e6c:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     e6e:	f7 01       	movw	r30, r14
     e70:	80 81       	ld	r24, Z
     e72:	8e 7f       	andi	r24, 0xFE	; 254
     e74:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     e76:	f8 01       	movw	r30, r16
     e78:	80 81       	ld	r24, Z
     e7a:	80 61       	ori	r24, 0x10	; 16
     e7c:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     e7e:	1f 91       	pop	r17
     e80:	0f 91       	pop	r16
     e82:	ff 90       	pop	r15
     e84:	ef 90       	pop	r14
     e86:	08 95       	ret

00000e88 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     e88:	e7 ed       	ldi	r30, 0xD7	; 215
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	81 60       	ori	r24, 0x01	; 1
     e90:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	80 93 85 01 	sts	0x0185, r24

	USB_ResetInterface();
}
     e98:	ae cf       	rjmp	.-164    	; 0xdf6 <USB_ResetInterface>

00000e9a <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     e9a:	e8 ed       	ldi	r30, 0xD8	; 216
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	8c 7f       	andi	r24, 0xFC	; 252
     ea2:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     ea4:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     ea8:	08 95       	ret

00000eaa <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     eaa:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     eae:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     eb2:	08 95       	ret

00000eb4 <__vector_11>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     eb4:	1f 92       	push	r1
     eb6:	0f 92       	push	r0
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	0f 92       	push	r0
     ebc:	0b b6       	in	r0, 0x3b	; 59
     ebe:	0f 92       	push	r0
     ec0:	11 24       	eor	r1, r1
     ec2:	1f 93       	push	r17
     ec4:	2f 93       	push	r18
     ec6:	3f 93       	push	r19
     ec8:	4f 93       	push	r20
     eca:	5f 93       	push	r21
     ecc:	6f 93       	push	r22
     ece:	7f 93       	push	r23
     ed0:	8f 93       	push	r24
     ed2:	9f 93       	push	r25
     ed4:	af 93       	push	r26
     ed6:	bf 93       	push	r27
     ed8:	ef 93       	push	r30
     eda:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     edc:	e9 ee       	ldi	r30, 0xE9	; 233
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	10 81       	ld	r17, Z
     ee2:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     ee4:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     ee6:	e0 ef       	ldi	r30, 0xF0	; 240
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	87 7f       	andi	r24, 0xF7	; 247
     eee:	80 83       	st	Z, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     ef0:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     ef2:	1f d3       	rcall	.+1598   	; 0x1532 <USB_Device_ProcessControlRequest>
     ef4:	a9 ee       	ldi	r26, 0xE9	; 233
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	1c 92       	st	X, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     efa:	e0 ef       	ldi	r30, 0xF0	; 240
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	88 60       	ori	r24, 0x08	; 8
     f02:	80 83       	st	Z, r24
     f04:	1c 93       	st	X, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     f06:	ff 91       	pop	r31
     f08:	ef 91       	pop	r30
     f0a:	bf 91       	pop	r27
     f0c:	af 91       	pop	r26
     f0e:	9f 91       	pop	r25
     f10:	8f 91       	pop	r24
     f12:	7f 91       	pop	r23
     f14:	6f 91       	pop	r22
     f16:	5f 91       	pop	r21
     f18:	4f 91       	pop	r20
     f1a:	3f 91       	pop	r19
     f1c:	2f 91       	pop	r18
     f1e:	1f 91       	pop	r17
     f20:	0f 90       	pop	r0
     f22:	0b be       	out	0x3b, r0	; 59
     f24:	0f 90       	pop	r0
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	0f 90       	pop	r0
     f2a:	1f 90       	pop	r1
     f2c:	18 95       	reti

00000f2e <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     f2e:	1f 92       	push	r1
     f30:	0f 92       	push	r0
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	0f 92       	push	r0
     f36:	0b b6       	in	r0, 0x3b	; 59
     f38:	0f 92       	push	r0
     f3a:	11 24       	eor	r1, r1
     f3c:	2f 93       	push	r18
     f3e:	3f 93       	push	r19
     f40:	4f 93       	push	r20
     f42:	5f 93       	push	r21
     f44:	6f 93       	push	r22
     f46:	7f 93       	push	r23
     f48:	8f 93       	push	r24
     f4a:	9f 93       	push	r25
     f4c:	af 93       	push	r26
     f4e:	bf 93       	push	r27
     f50:	ef 93       	push	r30
     f52:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     f54:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     f58:	82 ff       	sbrs	r24, 2
     f5a:	0a c0       	rjmp	.+20     	; 0xf70 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     f5c:	80 91 e2 00 	lds	r24, 0x00E2
     f60:	82 ff       	sbrs	r24, 2
     f62:	06 c0       	rjmp	.+12     	; 0xf70 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     f64:	80 91 e1 00 	lds	r24, 0x00E1
     f68:	8b 7f       	andi	r24, 0xFB	; 251
     f6a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     f6e:	36 d9       	rcall	.-3476   	; 0x1dc <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     f70:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     f74:	80 ff       	sbrs	r24, 0
     f76:	1d c0       	rjmp	.+58     	; 0xfb2 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     f78:	80 91 d8 00 	lds	r24, 0x00D8
     f7c:	80 ff       	sbrs	r24, 0
     f7e:	19 c0       	rjmp	.+50     	; 0xfb2 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     f80:	80 91 da 00 	lds	r24, 0x00DA
     f84:	8e 7f       	andi	r24, 0xFE	; 254
     f86:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     f8a:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     f8e:	80 ff       	sbrs	r24, 0
     f90:	0c c0       	rjmp	.+24     	; 0xfaa <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     f92:	8c e0       	ldi	r24, 0x0C	; 12
     f94:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     f96:	8e e0       	ldi	r24, 0x0E	; 14
     f98:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     f9a:	09 b4       	in	r0, 0x29	; 41
     f9c:	00 fe       	sbrs	r0, 0
     f9e:	fd cf       	rjmp	.-6      	; 0xf9a <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	80 93 86 01 	sts	0x0186, r24
			EVENT_USB_Device_Connect();
     fa6:	10 d9       	rcall	.-3552   	; 0x1c8 <EVENT_USB_Device_Connect>
     fa8:	04 c0       	rjmp	.+8      	; 0xfb2 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     faa:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     fac:	10 92 86 01 	sts	0x0186, r1
			EVENT_USB_Device_Disconnect();
     fb0:	10 d9       	rcall	.-3552   	; 0x1d2 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     fb2:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     fb6:	80 ff       	sbrs	r24, 0
     fb8:	18 c0       	rjmp	.+48     	; 0xfea <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     fba:	80 91 e2 00 	lds	r24, 0x00E2
     fbe:	80 ff       	sbrs	r24, 0
     fc0:	14 c0       	rjmp	.+40     	; 0xfea <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     fc2:	80 91 e2 00 	lds	r24, 0x00E2
     fc6:	8e 7f       	andi	r24, 0xFE	; 254
     fc8:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     fcc:	80 91 e2 00 	lds	r24, 0x00E2
     fd0:	80 61       	ori	r24, 0x10	; 16
     fd2:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     fd6:	80 91 d8 00 	lds	r24, 0x00D8
     fda:	80 62       	ori	r24, 0x20	; 32
     fdc:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     fe0:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     fe2:	85 e0       	ldi	r24, 0x05	; 5
     fe4:	80 93 86 01 	sts	0x0186, r24
		EVENT_USB_Device_Suspend();
     fe8:	29 d4       	rcall	.+2130   	; 0x183c <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     fea:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     fee:	84 ff       	sbrs	r24, 4
     ff0:	2d c0       	rjmp	.+90     	; 0x104c <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     ff2:	80 91 e2 00 	lds	r24, 0x00E2
     ff6:	84 ff       	sbrs	r24, 4
     ff8:	29 c0       	rjmp	.+82     	; 0x104c <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     ffa:	8c e0       	ldi	r24, 0x0C	; 12
     ffc:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     ffe:	8e e0       	ldi	r24, 0x0E	; 14
    1000:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1002:	09 b4       	in	r0, 0x29	; 41
    1004:	00 fe       	sbrs	r0, 0
    1006:	fd cf       	rjmp	.-6      	; 0x1002 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    1008:	80 91 d8 00 	lds	r24, 0x00D8
    100c:	8f 7d       	andi	r24, 0xDF	; 223
    100e:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1012:	80 91 e1 00 	lds	r24, 0x00E1
    1016:	8f 7e       	andi	r24, 0xEF	; 239
    1018:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    101c:	80 91 e2 00 	lds	r24, 0x00E2
    1020:	8f 7e       	andi	r24, 0xEF	; 239
    1022:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1026:	80 91 e2 00 	lds	r24, 0x00E2
    102a:	81 60       	ori	r24, 0x01	; 1
    102c:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1030:	80 91 82 01 	lds	r24, 0x0182
    1034:	88 23       	and	r24, r24
    1036:	31 f4       	brne	.+12     	; 0x1044 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1038:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    103c:	87 fd       	sbrc	r24, 7
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <__vector_10+0x116>
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	01 c0       	rjmp	.+2      	; 0x1046 <__vector_10+0x118>
    1044:	84 e0       	ldi	r24, 0x04	; 4
    1046:	80 93 86 01 	sts	0x0186, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    104a:	f8 d3       	rcall	.+2032   	; 0x183c <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    104c:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1050:	83 ff       	sbrs	r24, 3
    1052:	27 c0       	rjmp	.+78     	; 0x10a2 <__vector_10+0x174>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1054:	80 91 e2 00 	lds	r24, 0x00E2
    1058:	83 ff       	sbrs	r24, 3
    105a:	23 c0       	rjmp	.+70     	; 0x10a2 <__vector_10+0x174>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    105c:	80 91 e1 00 	lds	r24, 0x00E1
    1060:	87 7f       	andi	r24, 0xF7	; 247
    1062:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1066:	82 e0       	ldi	r24, 0x02	; 2
    1068:	80 93 86 01 	sts	0x0186, r24
		USB_Device_ConfigurationNumber = 0;
    106c:	10 92 82 01 	sts	0x0182, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1070:	80 91 e1 00 	lds	r24, 0x00E1
    1074:	8e 7f       	andi	r24, 0xFE	; 254
    1076:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    107a:	80 91 e2 00 	lds	r24, 0x00E2
    107e:	8e 7f       	andi	r24, 0xFE	; 254
    1080:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1084:	80 91 e2 00 	lds	r24, 0x00E2
    1088:	80 61       	ori	r24, 0x10	; 16
    108a:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	42 e0       	ldi	r20, 0x02	; 2
    1094:	27 de       	rcall	.-946    	; 0xce4 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1096:	80 91 f0 00 	lds	r24, 0x00F0
    109a:	88 60       	ori	r24, 0x08	; 8
    109c:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    10a0:	cd d3       	rcall	.+1946   	; 0x183c <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    10a2:	ff 91       	pop	r31
    10a4:	ef 91       	pop	r30
    10a6:	bf 91       	pop	r27
    10a8:	af 91       	pop	r26
    10aa:	9f 91       	pop	r25
    10ac:	8f 91       	pop	r24
    10ae:	7f 91       	pop	r23
    10b0:	6f 91       	pop	r22
    10b2:	5f 91       	pop	r21
    10b4:	4f 91       	pop	r20
    10b6:	3f 91       	pop	r19
    10b8:	2f 91       	pop	r18
    10ba:	0f 90       	pop	r0
    10bc:	0b be       	out	0x3b, r0	; 59
    10be:	0f 90       	pop	r0
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	0f 90       	pop	r0
    10c4:	1f 90       	pop	r1
    10c6:	18 95       	reti

000010c8 <Endpoint_Write_Control_Stream_LE>:
    10c8:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    10ca:	40 91 8d 01 	lds	r20, 0x018D
    10ce:	50 91 8e 01 	lds	r21, 0x018E
    10d2:	46 17       	cp	r20, r22
    10d4:	57 07       	cpc	r21, r23
    10d6:	18 f4       	brcc	.+6      	; 0x10de <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    10d8:	f9 01       	movw	r30, r18
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	3d c0       	rjmp	.+122    	; 0x1158 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    10de:	61 15       	cp	r22, r1
    10e0:	71 05       	cpc	r23, r1
    10e2:	11 f0       	breq	.+4      	; 0x10e8 <Endpoint_Write_Control_Stream_LE+0x20>
    10e4:	ab 01       	movw	r20, r22
    10e6:	f8 cf       	rjmp	.-16     	; 0x10d8 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10e8:	80 91 e8 00 	lds	r24, 0x00E8
    10ec:	8e 77       	andi	r24, 0x7E	; 126
    10ee:	80 93 e8 00 	sts	0x00E8, r24
    10f2:	40 e0       	ldi	r20, 0x00	; 0
    10f4:	50 e0       	ldi	r21, 0x00	; 0
    10f6:	f0 cf       	rjmp	.-32     	; 0x10d8 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    10f8:	80 91 86 01 	lds	r24, 0x0186

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    10fc:	88 23       	and	r24, r24
    10fe:	f1 f1       	breq	.+124    	; 0x117c <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1100:	85 30       	cpi	r24, 0x05	; 5
    1102:	f1 f1       	breq	.+124    	; 0x1180 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1104:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1108:	83 ff       	sbrs	r24, 3
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <Endpoint_Write_Control_Stream_LE+0x48>
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1110:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1114:	82 fd       	sbrc	r24, 2
    1116:	2c c0       	rjmp	.+88     	; 0x1170 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1118:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    111c:	80 ff       	sbrs	r24, 0
    111e:	1c c0       	rjmp	.+56     	; 0x1158 <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    1120:	20 91 f2 00 	lds	r18, 0x00F2
    1124:	30 91 f3 00 	lds	r19, 0x00F3
    1128:	07 c0       	rjmp	.+14     	; 0x1138 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    112a:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    112c:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1130:	41 50       	subi	r20, 0x01	; 1
    1132:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    1134:	2f 5f       	subi	r18, 0xFF	; 255
    1136:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1138:	41 15       	cp	r20, r1
    113a:	51 05       	cpc	r21, r1
    113c:	19 f0       	breq	.+6      	; 0x1144 <Endpoint_Write_Control_Stream_LE+0x7c>
    113e:	28 30       	cpi	r18, 0x08	; 8
    1140:	31 05       	cpc	r19, r1
    1142:	98 f3       	brcs	.-26     	; 0x112a <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	28 30       	cpi	r18, 0x08	; 8
    1148:	31 05       	cpc	r19, r1
    114a:	09 f4       	brne	.+2      	; 0x114e <Endpoint_Write_Control_Stream_LE+0x86>
    114c:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    114e:	80 91 e8 00 	lds	r24, 0x00E8
    1152:	8e 77       	andi	r24, 0x7E	; 126
    1154:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1158:	41 15       	cp	r20, r1
    115a:	51 05       	cpc	r21, r1
    115c:	69 f6       	brne	.-102    	; 0x10f8 <Endpoint_Write_Control_Stream_LE+0x30>
    115e:	99 23       	and	r25, r25
    1160:	59 f6       	brne	.-106    	; 0x10f8 <Endpoint_Write_Control_Stream_LE+0x30>
    1162:	06 c0       	rjmp	.+12     	; 0x1170 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1164:	80 91 86 01 	lds	r24, 0x0186

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1168:	88 23       	and	r24, r24
    116a:	41 f0       	breq	.+16     	; 0x117c <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    116c:	85 30       	cpi	r24, 0x05	; 5
    116e:	41 f0       	breq	.+16     	; 0x1180 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1170:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1174:	82 ff       	sbrs	r24, 2
    1176:	f6 cf       	rjmp	.-20     	; 0x1164 <Endpoint_Write_Control_Stream_LE+0x9c>
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	08 95       	ret
    117c:	82 e0       	ldi	r24, 0x02	; 2
    117e:	08 95       	ret
    1180:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1182:	08 95       	ret

00001184 <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    1184:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    1186:	61 15       	cp	r22, r1
    1188:	71 05       	cpc	r23, r1
    118a:	29 f4       	brne	.+10     	; 0x1196 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    118c:	80 91 e8 00 	lds	r24, 0x00E8
    1190:	8b 77       	andi	r24, 0x7B	; 123
    1192:	80 93 e8 00 	sts	0x00E8, r24
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1196:	f9 01       	movw	r30, r18
    1198:	22 c0       	rjmp	.+68     	; 0x11de <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    119a:	80 91 86 01 	lds	r24, 0x0186

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    119e:	88 23       	and	r24, r24
    11a0:	71 f1       	breq	.+92     	; 0x11fe <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    11a2:	85 30       	cpi	r24, 0x05	; 5
    11a4:	71 f1       	breq	.+92     	; 0x1202 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    11a6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    11aa:	83 ff       	sbrs	r24, 3
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <Endpoint_Read_Control_Stream_LE+0x2e>
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    11b2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    11b6:	82 ff       	sbrs	r24, 2
    11b8:	f0 cf       	rjmp	.-32     	; 0x119a <Endpoint_Read_Control_Stream_LE+0x16>
    11ba:	06 c0       	rjmp	.+12     	; 0x11c8 <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    11bc:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    11c0:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    11c2:	61 50       	subi	r22, 0x01	; 1
    11c4:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    11c6:	31 f0       	breq	.+12     	; 0x11d4 <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    11c8:	80 91 f2 00 	lds	r24, 0x00F2
    11cc:	90 91 f3 00 	lds	r25, 0x00F3
    11d0:	89 2b       	or	r24, r25
    11d2:	a1 f7       	brne	.-24     	; 0x11bc <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    11d4:	80 91 e8 00 	lds	r24, 0x00E8
    11d8:	8b 77       	andi	r24, 0x7B	; 123
    11da:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    11de:	61 15       	cp	r22, r1
    11e0:	71 05       	cpc	r23, r1
    11e2:	d9 f6       	brne	.-74     	; 0x119a <Endpoint_Read_Control_Stream_LE+0x16>
    11e4:	06 c0       	rjmp	.+12     	; 0x11f2 <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    11e6:	80 91 86 01 	lds	r24, 0x0186

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    11ea:	88 23       	and	r24, r24
    11ec:	41 f0       	breq	.+16     	; 0x11fe <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    11ee:	85 30       	cpi	r24, 0x05	; 5
    11f0:	41 f0       	breq	.+16     	; 0x1202 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    11f2:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    11f6:	80 ff       	sbrs	r24, 0
    11f8:	f6 cf       	rjmp	.-20     	; 0x11e6 <Endpoint_Read_Control_Stream_LE+0x62>
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	08 95       	ret
    11fe:	82 e0       	ldi	r24, 0x02	; 2
    1200:	08 95       	ret
    1202:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1204:	08 95       	ret

00001206 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    1206:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1208:	40 91 8d 01 	lds	r20, 0x018D
    120c:	50 91 8e 01 	lds	r21, 0x018E
    1210:	46 17       	cp	r20, r22
    1212:	57 07       	cpc	r21, r23
    1214:	18 f4       	brcc	.+6      	; 0x121c <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1216:	f9 01       	movw	r30, r18
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	40 c0       	rjmp	.+128    	; 0x129c <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    121c:	61 15       	cp	r22, r1
    121e:	71 05       	cpc	r23, r1
    1220:	11 f0       	breq	.+4      	; 0x1226 <Endpoint_Write_Control_PStream_LE+0x20>
    1222:	ab 01       	movw	r20, r22
    1224:	f8 cf       	rjmp	.-16     	; 0x1216 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1226:	80 91 e8 00 	lds	r24, 0x00E8
    122a:	8e 77       	andi	r24, 0x7E	; 126
    122c:	80 93 e8 00 	sts	0x00E8, r24
    1230:	40 e0       	ldi	r20, 0x00	; 0
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	f0 cf       	rjmp	.-32     	; 0x1216 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1236:	80 91 86 01 	lds	r24, 0x0186

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    123a:	88 23       	and	r24, r24
    123c:	09 f4       	brne	.+2      	; 0x1240 <Endpoint_Write_Control_PStream_LE+0x3a>
    123e:	40 c0       	rjmp	.+128    	; 0x12c0 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1240:	85 30       	cpi	r24, 0x05	; 5
    1242:	09 f4       	brne	.+2      	; 0x1246 <Endpoint_Write_Control_PStream_LE+0x40>
    1244:	3f c0       	rjmp	.+126    	; 0x12c4 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1246:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    124a:	83 ff       	sbrs	r24, 3
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <Endpoint_Write_Control_PStream_LE+0x4c>
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1252:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1256:	82 fd       	sbrc	r24, 2
    1258:	2d c0       	rjmp	.+90     	; 0x12b4 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    125a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    125e:	80 ff       	sbrs	r24, 0
    1260:	1d c0       	rjmp	.+58     	; 0x129c <Endpoint_Write_Control_PStream_LE+0x96>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    1262:	20 91 f2 00 	lds	r18, 0x00F2
    1266:	30 91 f3 00 	lds	r19, 0x00F3
    126a:	08 c0       	rjmp	.+16     	; 0x127c <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    126c:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    126e:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1272:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1274:	41 50       	subi	r20, 0x01	; 1
    1276:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    1278:	2f 5f       	subi	r18, 0xFF	; 255
    127a:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    127c:	41 15       	cp	r20, r1
    127e:	51 05       	cpc	r21, r1
    1280:	19 f0       	breq	.+6      	; 0x1288 <Endpoint_Write_Control_PStream_LE+0x82>
    1282:	28 30       	cpi	r18, 0x08	; 8
    1284:	31 05       	cpc	r19, r1
    1286:	90 f3       	brcs	.-28     	; 0x126c <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	28 30       	cpi	r18, 0x08	; 8
    128c:	31 05       	cpc	r19, r1
    128e:	09 f4       	brne	.+2      	; 0x1292 <Endpoint_Write_Control_PStream_LE+0x8c>
    1290:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1292:	80 91 e8 00 	lds	r24, 0x00E8
    1296:	8e 77       	andi	r24, 0x7E	; 126
    1298:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    129c:	41 15       	cp	r20, r1
    129e:	51 05       	cpc	r21, r1
    12a0:	51 f6       	brne	.-108    	; 0x1236 <Endpoint_Write_Control_PStream_LE+0x30>
    12a2:	99 23       	and	r25, r25
    12a4:	41 f6       	brne	.-112    	; 0x1236 <Endpoint_Write_Control_PStream_LE+0x30>
    12a6:	06 c0       	rjmp	.+12     	; 0x12b4 <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    12a8:	80 91 86 01 	lds	r24, 0x0186

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    12ac:	88 23       	and	r24, r24
    12ae:	41 f0       	breq	.+16     	; 0x12c0 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    12b0:	85 30       	cpi	r24, 0x05	; 5
    12b2:	41 f0       	breq	.+16     	; 0x12c4 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    12b4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    12b8:	82 ff       	sbrs	r24, 2
    12ba:	f6 cf       	rjmp	.-20     	; 0x12a8 <Endpoint_Write_Control_PStream_LE+0xa2>
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	08 95       	ret
    12c0:	82 e0       	ldi	r24, 0x02	; 2
    12c2:	08 95       	ret
    12c4:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    12c6:	08 95       	ret

000012c8 <Endpoint_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    12c8:	bf 92       	push	r11
    12ca:	cf 92       	push	r12
    12cc:	df 92       	push	r13
    12ce:	ef 92       	push	r14
    12d0:	ff 92       	push	r15
    12d2:	0f 93       	push	r16
    12d4:	1f 93       	push	r17
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	18 2f       	mov	r17, r24
    12dc:	09 2f       	mov	r16, r25
    12de:	7b 01       	movw	r14, r22
    12e0:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    12e2:	56 dd       	rcall	.-1364   	; 0xd90 <Endpoint_WaitUntilReady>
    12e4:	b8 2e       	mov	r11, r24
    12e6:	88 23       	and	r24, r24
    12e8:	a9 f5       	brne	.+106    	; 0x1354 <Endpoint_Read_Stream_LE+0x8c>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    12ea:	81 2f       	mov	r24, r17
    12ec:	90 2f       	mov	r25, r16
    12ee:	9c 01       	movw	r18, r24
    12f0:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    12f2:	c1 14       	cp	r12, r1
    12f4:	d1 04       	cpc	r13, r1
    12f6:	39 f0       	breq	.+14     	; 0x1306 <Endpoint_Read_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    12f8:	f6 01       	movw	r30, r12
    12fa:	80 81       	ld	r24, Z
    12fc:	91 81       	ldd	r25, Z+1	; 0x01
    12fe:	e8 1a       	sub	r14, r24
    1300:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1302:	c8 0f       	add	r28, r24
    1304:	d9 1f       	adc	r29, r25
    1306:	00 e0       	ldi	r16, 0x00	; 0
    1308:	10 e0       	ldi	r17, 0x00	; 0
    130a:	21 c0       	rjmp	.+66     	; 0x134e <Endpoint_Read_Stream_LE+0x86>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    130c:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1310:	85 fd       	sbrc	r24, 5
    1312:	15 c0       	rjmp	.+42     	; 0x133e <Endpoint_Read_Stream_LE+0x76>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1314:	80 91 e8 00 	lds	r24, 0x00E8
    1318:	8b 77       	andi	r24, 0x7B	; 123
    131a:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    131e:	c1 14       	cp	r12, r1
    1320:	d1 04       	cpc	r13, r1
    1322:	49 f0       	breq	.+18     	; 0x1336 <Endpoint_Read_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
    1324:	f6 01       	movw	r30, r12
    1326:	80 81       	ld	r24, Z
    1328:	91 81       	ldd	r25, Z+1	; 0x01
    132a:	80 0f       	add	r24, r16
    132c:	91 1f       	adc	r25, r17
    132e:	91 83       	std	Z+1, r25	; 0x01
    1330:	80 83       	st	Z, r24
    1332:	85 e0       	ldi	r24, 0x05	; 5
    1334:	10 c0       	rjmp	.+32     	; 0x1356 <Endpoint_Read_Stream_LE+0x8e>

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1336:	2c dd       	rcall	.-1448   	; 0xd90 <Endpoint_WaitUntilReady>
    1338:	88 23       	and	r24, r24
    133a:	49 f0       	breq	.+18     	; 0x134e <Endpoint_Read_Stream_LE+0x86>
    133c:	0c c0       	rjmp	.+24     	; 0x1356 <Endpoint_Read_Stream_LE+0x8e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    133e:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1342:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1344:	08 94       	sec
    1346:	e1 08       	sbc	r14, r1
    1348:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    134a:	0f 5f       	subi	r16, 0xFF	; 255
    134c:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    134e:	e1 14       	cp	r14, r1
    1350:	f1 04       	cpc	r15, r1
    1352:	e1 f6       	brne	.-72     	; 0x130c <Endpoint_Read_Stream_LE+0x44>
    1354:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1356:	df 91       	pop	r29
    1358:	cf 91       	pop	r28
    135a:	1f 91       	pop	r17
    135c:	0f 91       	pop	r16
    135e:	ff 90       	pop	r15
    1360:	ef 90       	pop	r14
    1362:	df 90       	pop	r13
    1364:	cf 90       	pop	r12
    1366:	bf 90       	pop	r11
    1368:	08 95       	ret

0000136a <Endpoint_Write_Stream_BE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    136a:	bf 92       	push	r11
    136c:	cf 92       	push	r12
    136e:	df 92       	push	r13
    1370:	ef 92       	push	r14
    1372:	ff 92       	push	r15
    1374:	0f 93       	push	r16
    1376:	1f 93       	push	r17
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	8c 01       	movw	r16, r24
    137e:	eb 01       	movw	r28, r22
    1380:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1382:	06 dd       	rcall	.-1524   	; 0xd90 <Endpoint_WaitUntilReady>
    1384:	b8 2e       	mov	r11, r24
    1386:	88 23       	and	r24, r24
    1388:	b1 f5       	brne	.+108    	; 0x13f6 <Endpoint_Write_Stream_BE+0x8c>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    138a:	21 97       	sbiw	r28, 0x01	; 1
    138c:	0c 0f       	add	r16, r28
    138e:	1d 1f       	adc	r17, r29
    1390:	21 96       	adiw	r28, 0x01	; 1
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1392:	c1 14       	cp	r12, r1
    1394:	d1 04       	cpc	r13, r1
    1396:	39 f0       	breq	.+14     	; 0x13a6 <Endpoint_Write_Stream_BE+0x3c>
	{
		Length -= *BytesProcessed;
    1398:	f6 01       	movw	r30, r12
    139a:	80 81       	ld	r24, Z
    139c:	91 81       	ldd	r25, Z+1	; 0x01
    139e:	c8 1b       	sub	r28, r24
    13a0:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    13a2:	08 1b       	sub	r16, r24
    13a4:	19 0b       	sbc	r17, r25
    13a6:	ee 24       	eor	r14, r14
    13a8:	ff 24       	eor	r15, r15
    13aa:	23 c0       	rjmp	.+70     	; 0x13f2 <Endpoint_Write_Stream_BE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    13ac:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    13b0:	85 fd       	sbrc	r24, 5
    13b2:	15 c0       	rjmp	.+42     	; 0x13de <Endpoint_Write_Stream_BE+0x74>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13b4:	80 91 e8 00 	lds	r24, 0x00E8
    13b8:	8e 77       	andi	r24, 0x7E	; 126
    13ba:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    13be:	c1 14       	cp	r12, r1
    13c0:	d1 04       	cpc	r13, r1
    13c2:	49 f0       	breq	.+18     	; 0x13d6 <Endpoint_Write_Stream_BE+0x6c>
			{
				*BytesProcessed += BytesInTransfer;
    13c4:	f6 01       	movw	r30, r12
    13c6:	80 81       	ld	r24, Z
    13c8:	91 81       	ldd	r25, Z+1	; 0x01
    13ca:	8e 0d       	add	r24, r14
    13cc:	9f 1d       	adc	r25, r15
    13ce:	91 83       	std	Z+1, r25	; 0x01
    13d0:	80 83       	st	Z, r24
    13d2:	85 e0       	ldi	r24, 0x05	; 5
    13d4:	11 c0       	rjmp	.+34     	; 0x13f8 <Endpoint_Write_Stream_BE+0x8e>

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    13d6:	dc dc       	rcall	.-1608   	; 0xd90 <Endpoint_WaitUntilReady>
    13d8:	88 23       	and	r24, r24
    13da:	59 f0       	breq	.+22     	; 0x13f2 <Endpoint_Write_Stream_BE+0x88>
    13dc:	0d c0       	rjmp	.+26     	; 0x13f8 <Endpoint_Write_Stream_BE+0x8e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    13de:	f8 01       	movw	r30, r16
    13e0:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    13e2:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
    13e6:	01 50       	subi	r16, 0x01	; 1
    13e8:	10 40       	sbci	r17, 0x00	; 0
			Length--;
    13ea:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    13ec:	08 94       	sec
    13ee:	e1 1c       	adc	r14, r1
    13f0:	f1 1c       	adc	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    13f2:	20 97       	sbiw	r28, 0x00	; 0
    13f4:	d9 f6       	brne	.-74     	; 0x13ac <Endpoint_Write_Stream_BE+0x42>
    13f6:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    13f8:	df 91       	pop	r29
    13fa:	cf 91       	pop	r28
    13fc:	1f 91       	pop	r17
    13fe:	0f 91       	pop	r16
    1400:	ff 90       	pop	r15
    1402:	ef 90       	pop	r14
    1404:	df 90       	pop	r13
    1406:	cf 90       	pop	r12
    1408:	bf 90       	pop	r11
    140a:	08 95       	ret

0000140c <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    140c:	bf 92       	push	r11
    140e:	cf 92       	push	r12
    1410:	df 92       	push	r13
    1412:	ef 92       	push	r14
    1414:	ff 92       	push	r15
    1416:	0f 93       	push	r16
    1418:	1f 93       	push	r17
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	18 2f       	mov	r17, r24
    1420:	09 2f       	mov	r16, r25
    1422:	7b 01       	movw	r14, r22
    1424:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1426:	b4 dc       	rcall	.-1688   	; 0xd90 <Endpoint_WaitUntilReady>
    1428:	b8 2e       	mov	r11, r24
    142a:	88 23       	and	r24, r24
    142c:	a9 f5       	brne	.+106    	; 0x1498 <Endpoint_Write_Stream_LE+0x8c>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    142e:	81 2f       	mov	r24, r17
    1430:	90 2f       	mov	r25, r16
    1432:	9c 01       	movw	r18, r24
    1434:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1436:	c1 14       	cp	r12, r1
    1438:	d1 04       	cpc	r13, r1
    143a:	39 f0       	breq	.+14     	; 0x144a <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    143c:	f6 01       	movw	r30, r12
    143e:	80 81       	ld	r24, Z
    1440:	91 81       	ldd	r25, Z+1	; 0x01
    1442:	e8 1a       	sub	r14, r24
    1444:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1446:	c8 0f       	add	r28, r24
    1448:	d9 1f       	adc	r29, r25
    144a:	00 e0       	ldi	r16, 0x00	; 0
    144c:	10 e0       	ldi	r17, 0x00	; 0
    144e:	21 c0       	rjmp	.+66     	; 0x1492 <Endpoint_Write_Stream_LE+0x86>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1450:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1454:	85 fd       	sbrc	r24, 5
    1456:	15 c0       	rjmp	.+42     	; 0x1482 <Endpoint_Write_Stream_LE+0x76>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1458:	80 91 e8 00 	lds	r24, 0x00E8
    145c:	8e 77       	andi	r24, 0x7E	; 126
    145e:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    1462:	c1 14       	cp	r12, r1
    1464:	d1 04       	cpc	r13, r1
    1466:	49 f0       	breq	.+18     	; 0x147a <Endpoint_Write_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
    1468:	f6 01       	movw	r30, r12
    146a:	80 81       	ld	r24, Z
    146c:	91 81       	ldd	r25, Z+1	; 0x01
    146e:	80 0f       	add	r24, r16
    1470:	91 1f       	adc	r25, r17
    1472:	91 83       	std	Z+1, r25	; 0x01
    1474:	80 83       	st	Z, r24
    1476:	85 e0       	ldi	r24, 0x05	; 5
    1478:	10 c0       	rjmp	.+32     	; 0x149a <Endpoint_Write_Stream_LE+0x8e>

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    147a:	8a dc       	rcall	.-1772   	; 0xd90 <Endpoint_WaitUntilReady>
    147c:	88 23       	and	r24, r24
    147e:	49 f0       	breq	.+18     	; 0x1492 <Endpoint_Write_Stream_LE+0x86>
    1480:	0c c0       	rjmp	.+24     	; 0x149a <Endpoint_Write_Stream_LE+0x8e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1482:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1484:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1488:	08 94       	sec
    148a:	e1 08       	sbc	r14, r1
    148c:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    148e:	0f 5f       	subi	r16, 0xFF	; 255
    1490:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1492:	e1 14       	cp	r14, r1
    1494:	f1 04       	cpc	r15, r1
    1496:	e1 f6       	brne	.-72     	; 0x1450 <Endpoint_Write_Stream_LE+0x44>
    1498:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    149a:	df 91       	pop	r29
    149c:	cf 91       	pop	r28
    149e:	1f 91       	pop	r17
    14a0:	0f 91       	pop	r16
    14a2:	ff 90       	pop	r15
    14a4:	ef 90       	pop	r14
    14a6:	df 90       	pop	r13
    14a8:	cf 90       	pop	r12
    14aa:	bf 90       	pop	r11
    14ac:	08 95       	ret

000014ae <Endpoint_Null_Stream>:
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
    14ae:	df 92       	push	r13
    14b0:	ef 92       	push	r14
    14b2:	ff 92       	push	r15
    14b4:	0f 93       	push	r16
    14b6:	1f 93       	push	r17
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
    14bc:	ec 01       	movw	r28, r24
    14be:	8b 01       	movw	r16, r22
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;
	
	if ((ErrorCode = Endpoint_WaitUntilReady()))
    14c0:	67 dc       	rcall	.-1842   	; 0xd90 <Endpoint_WaitUntilReady>
    14c2:	d8 2e       	mov	r13, r24
    14c4:	88 23       	and	r24, r24
    14c6:	61 f5       	brne	.+88     	; 0x1520 <Endpoint_Null_Stream+0x72>
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
    14c8:	01 15       	cp	r16, r1
    14ca:	11 05       	cpc	r17, r1
    14cc:	29 f0       	breq	.+10     	; 0x14d8 <Endpoint_Null_Stream+0x2a>
	  Length -= *BytesProcessed;
    14ce:	f8 01       	movw	r30, r16
    14d0:	80 81       	ld	r24, Z
    14d2:	91 81       	ldd	r25, Z+1	; 0x01
    14d4:	c8 1b       	sub	r28, r24
    14d6:	d9 0b       	sbc	r29, r25
    14d8:	ee 24       	eor	r14, r14
    14da:	ff 24       	eor	r15, r15
    14dc:	1f c0       	rjmp	.+62     	; 0x151c <Endpoint_Null_Stream+0x6e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    14de:	80 91 e8 00 	lds	r24, 0x00E8

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    14e2:	85 fd       	sbrc	r24, 5
    14e4:	15 c0       	rjmp	.+42     	; 0x1510 <Endpoint_Null_Stream+0x62>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14e6:	80 91 e8 00 	lds	r24, 0x00E8
    14ea:	8e 77       	andi	r24, 0x7E	; 126
    14ec:	80 93 e8 00 	sts	0x00E8, r24
		{
			Endpoint_ClearIN();

			if (BytesProcessed != NULL)
    14f0:	01 15       	cp	r16, r1
    14f2:	11 05       	cpc	r17, r1
    14f4:	49 f0       	breq	.+18     	; 0x1508 <Endpoint_Null_Stream+0x5a>
			{
				*BytesProcessed += BytesInTransfer;
    14f6:	f8 01       	movw	r30, r16
    14f8:	80 81       	ld	r24, Z
    14fa:	91 81       	ldd	r25, Z+1	; 0x01
    14fc:	8e 0d       	add	r24, r14
    14fe:	9f 1d       	adc	r25, r15
    1500:	91 83       	std	Z+1, r25	; 0x01
    1502:	80 83       	st	Z, r24
    1504:	85 e0       	ldi	r24, 0x05	; 5
    1506:	0d c0       	rjmp	.+26     	; 0x1522 <Endpoint_Null_Stream+0x74>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1508:	43 dc       	rcall	.-1914   	; 0xd90 <Endpoint_WaitUntilReady>
    150a:	88 23       	and	r24, r24
    150c:	39 f0       	breq	.+14     	; 0x151c <Endpoint_Null_Stream+0x6e>
    150e:	09 c0       	rjmp	.+18     	; 0x1522 <Endpoint_Null_Stream+0x74>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1510:	10 92 f1 00 	sts	0x00F1, r1
		}
		else
		{
			Endpoint_Write_8(0);

			Length--;
    1514:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    1516:	08 94       	sec
    1518:	e1 1c       	adc	r14, r1
    151a:	f1 1c       	adc	r15, r1
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
    151c:	20 97       	sbiw	r28, 0x00	; 0
    151e:	f9 f6       	brne	.-66     	; 0x14de <Endpoint_Null_Stream+0x30>
    1520:	8d 2d       	mov	r24, r13
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
    1522:	df 91       	pop	r29
    1524:	cf 91       	pop	r28
    1526:	1f 91       	pop	r17
    1528:	0f 91       	pop	r16
    152a:	ff 90       	pop	r15
    152c:	ef 90       	pop	r14
    152e:	df 90       	pop	r13
    1530:	08 95       	ret

00001532 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1532:	0f 93       	push	r16
    1534:	1f 93       	push	r17
    1536:	df 93       	push	r29
    1538:	cf 93       	push	r28
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62
    153e:	ac 97       	sbiw	r28, 0x2c	; 44
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	de bf       	out	0x3e, r29	; 62
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    154a:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
    154e:	80 93 87 01 	sts	0x0187, r24
    1552:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
    1556:	80 93 88 01 	sts	0x0188, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    155a:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    155e:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
    1562:	e9 e8       	ldi	r30, 0x89	; 137
    1564:	f1 e0       	ldi	r31, 0x01	; 1
    1566:	80 93 89 01 	sts	0x0189, r24
    156a:	90 93 8a 01 	sts	0x018A, r25
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    156e:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    1572:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
    1576:	80 93 8b 01 	sts	0x018B, r24
    157a:	93 83       	std	Z+3, r25	; 0x03
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    157c:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    1580:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
    1584:	80 93 8d 01 	sts	0x018D, r24
    1588:	95 83       	std	Z+5, r25	; 0x05

	EVENT_USB_Device_ControlRequest();
    158a:	0e 94 45 01 	call	0x28a	; 0x28a <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    158e:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1592:	83 ff       	sbrs	r24, 3
    1594:	3a c1       	rjmp	.+628    	; 0x180a <USB_Device_ProcessControlRequest+0x2d8>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1596:	80 91 87 01 	lds	r24, 0x0187

		switch (USB_ControlRequest.bRequest)
    159a:	30 91 88 01 	lds	r19, 0x0188
    159e:	35 30       	cpi	r19, 0x05	; 5
    15a0:	09 f4       	brne	.+2      	; 0x15a4 <USB_Device_ProcessControlRequest+0x72>
    15a2:	87 c0       	rjmp	.+270    	; 0x16b2 <USB_Device_ProcessControlRequest+0x180>
    15a4:	36 30       	cpi	r19, 0x06	; 6
    15a6:	40 f4       	brcc	.+16     	; 0x15b8 <USB_Device_ProcessControlRequest+0x86>
    15a8:	31 30       	cpi	r19, 0x01	; 1
    15aa:	c9 f1       	breq	.+114    	; 0x161e <USB_Device_ProcessControlRequest+0xec>
    15ac:	31 30       	cpi	r19, 0x01	; 1
    15ae:	70 f0       	brcs	.+28     	; 0x15cc <USB_Device_ProcessControlRequest+0x9a>
    15b0:	33 30       	cpi	r19, 0x03	; 3
    15b2:	09 f0       	breq	.+2      	; 0x15b6 <USB_Device_ProcessControlRequest+0x84>
    15b4:	2a c1       	rjmp	.+596    	; 0x180a <USB_Device_ProcessControlRequest+0x2d8>
    15b6:	33 c0       	rjmp	.+102    	; 0x161e <USB_Device_ProcessControlRequest+0xec>
    15b8:	38 30       	cpi	r19, 0x08	; 8
    15ba:	09 f4       	brne	.+2      	; 0x15be <USB_Device_ProcessControlRequest+0x8c>
    15bc:	f7 c0       	rjmp	.+494    	; 0x17ac <USB_Device_ProcessControlRequest+0x27a>
    15be:	39 30       	cpi	r19, 0x09	; 9
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <USB_Device_ProcessControlRequest+0x92>
    15c2:	06 c1       	rjmp	.+524    	; 0x17d0 <USB_Device_ProcessControlRequest+0x29e>
    15c4:	36 30       	cpi	r19, 0x06	; 6
    15c6:	09 f0       	breq	.+2      	; 0x15ca <USB_Device_ProcessControlRequest+0x98>
    15c8:	20 c1       	rjmp	.+576    	; 0x180a <USB_Device_ProcessControlRequest+0x2d8>
    15ca:	97 c0       	rjmp	.+302    	; 0x16fa <USB_Device_ProcessControlRequest+0x1c8>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    15cc:	80 38       	cpi	r24, 0x80	; 128
    15ce:	21 f0       	breq	.+8      	; 0x15d8 <USB_Device_ProcessControlRequest+0xa6>
    15d0:	82 38       	cpi	r24, 0x82	; 130
    15d2:	09 f0       	breq	.+2      	; 0x15d6 <USB_Device_ProcessControlRequest+0xa4>
    15d4:	1a c1       	rjmp	.+564    	; 0x180a <USB_Device_ProcessControlRequest+0x2d8>
    15d6:	08 c0       	rjmp	.+16     	; 0x15e8 <USB_Device_ProcessControlRequest+0xb6>
    15d8:	90 91 83 01 	lds	r25, 0x0183
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    15dc:	80 91 84 01 	lds	r24, 0x0184
    15e0:	88 23       	and	r24, r24
    15e2:	99 f0       	breq	.+38     	; 0x160a <USB_Device_ProcessControlRequest+0xd8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    15e4:	92 60       	ori	r25, 0x02	; 2
    15e6:	11 c0       	rjmp	.+34     	; 0x160a <USB_Device_ProcessControlRequest+0xd8>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    15e8:	80 91 8b 01 	lds	r24, 0x018B
    15ec:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    15ee:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    15f2:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	25 e0       	ldi	r18, 0x05	; 5
    15fa:	96 95       	lsr	r25
    15fc:	87 95       	ror	r24
    15fe:	2a 95       	dec	r18
    1600:	e1 f7       	brne	.-8      	; 0x15fa <USB_Device_ProcessControlRequest+0xc8>
    1602:	98 2f       	mov	r25, r24
    1604:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1606:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    160a:	80 91 e8 00 	lds	r24, 0x00E8
    160e:	87 7f       	andi	r24, 0xF7	; 247
    1610:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1614:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
    1618:	10 92 f1 00 	sts	0x00F1, r1
    161c:	d2 c0       	rjmp	.+420    	; 0x17c2 <USB_Device_ProcessControlRequest+0x290>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    161e:	88 23       	and	r24, r24
    1620:	19 f0       	breq	.+6      	; 0x1628 <USB_Device_ProcessControlRequest+0xf6>
    1622:	82 30       	cpi	r24, 0x02	; 2
    1624:	09 f0       	breq	.+2      	; 0x1628 <USB_Device_ProcessControlRequest+0xf6>
    1626:	f1 c0       	rjmp	.+482    	; 0x180a <USB_Device_ProcessControlRequest+0x2d8>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	8f 71       	andi	r24, 0x1F	; 31
    162c:	90 70       	andi	r25, 0x00	; 0
    162e:	00 97       	sbiw	r24, 0x00	; 0
    1630:	21 f0       	breq	.+8      	; 0x163a <USB_Device_ProcessControlRequest+0x108>
    1632:	02 97       	sbiw	r24, 0x02	; 2
    1634:	09 f0       	breq	.+2      	; 0x1638 <USB_Device_ProcessControlRequest+0x106>
    1636:	e9 c0       	rjmp	.+466    	; 0x180a <USB_Device_ProcessControlRequest+0x2d8>
    1638:	0c c0       	rjmp	.+24     	; 0x1652 <USB_Device_ProcessControlRequest+0x120>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    163a:	80 91 89 01 	lds	r24, 0x0189
    163e:	81 30       	cpi	r24, 0x01	; 1
    1640:	09 f0       	breq	.+2      	; 0x1644 <USB_Device_ProcessControlRequest+0x112>
    1642:	e3 c0       	rjmp	.+454    	; 0x180a <USB_Device_ProcessControlRequest+0x2d8>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1644:	10 92 84 01 	sts	0x0184, r1
    1648:	33 30       	cpi	r19, 0x03	; 3
    164a:	69 f5       	brne	.+90     	; 0x16a6 <USB_Device_ProcessControlRequest+0x174>
    164c:	80 93 84 01 	sts	0x0184, r24
    1650:	2a c0       	rjmp	.+84     	; 0x16a6 <USB_Device_ProcessControlRequest+0x174>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1652:	80 91 89 01 	lds	r24, 0x0189
    1656:	88 23       	and	r24, r24
    1658:	31 f5       	brne	.+76     	; 0x16a6 <USB_Device_ProcessControlRequest+0x174>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    165a:	20 91 8b 01 	lds	r18, 0x018B
    165e:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1660:	09 f4       	brne	.+2      	; 0x1664 <USB_Device_ProcessControlRequest+0x132>
    1662:	d3 c0       	rjmp	.+422    	; 0x180a <USB_Device_ProcessControlRequest+0x2d8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1664:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1668:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    166c:	80 ff       	sbrs	r24, 0
    166e:	1b c0       	rjmp	.+54     	; 0x16a6 <USB_Device_ProcessControlRequest+0x174>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1670:	33 30       	cpi	r19, 0x03	; 3
    1672:	21 f4       	brne	.+8      	; 0x167c <USB_Device_ProcessControlRequest+0x14a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1674:	80 91 eb 00 	lds	r24, 0x00EB
    1678:	80 62       	ori	r24, 0x20	; 32
    167a:	13 c0       	rjmp	.+38     	; 0x16a2 <USB_Device_ProcessControlRequest+0x170>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    167c:	80 91 eb 00 	lds	r24, 0x00EB
    1680:	80 61       	ori	r24, 0x10	; 16
    1682:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <USB_Device_ProcessControlRequest+0x15e>
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	2a 95       	dec	r18
    1692:	e2 f7       	brpl	.-8      	; 0x168c <USB_Device_ProcessControlRequest+0x15a>
    1694:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1698:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    169c:	80 91 eb 00 	lds	r24, 0x00EB
    16a0:	88 60       	ori	r24, 0x08	; 8
    16a2:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    16a6:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    16aa:	80 91 e8 00 	lds	r24, 0x00E8
    16ae:	87 7f       	andi	r24, 0xF7	; 247
    16b0:	8b c0       	rjmp	.+278    	; 0x17c8 <USB_Device_ProcessControlRequest+0x296>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    16b2:	88 23       	and	r24, r24
    16b4:	09 f0       	breq	.+2      	; 0x16b8 <USB_Device_ProcessControlRequest+0x186>
    16b6:	a9 c0       	rjmp	.+338    	; 0x180a <USB_Device_ProcessControlRequest+0x2d8>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    16b8:	10 91 89 01 	lds	r17, 0x0189
    16bc:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    16be:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    16c0:	f8 94       	cli
    16c2:	80 91 e8 00 	lds	r24, 0x00E8
    16c6:	87 7f       	andi	r24, 0xF7	; 247
    16c8:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    16cc:	40 db       	rcall	.-2432   	; 0xd4e <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    16ce:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    16d2:	80 ff       	sbrs	r24, 0
    16d4:	fc cf       	rjmp	.-8      	; 0x16ce <USB_Device_ProcessControlRequest+0x19c>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    16d6:	80 91 e3 00 	lds	r24, 0x00E3
    16da:	80 78       	andi	r24, 0x80	; 128
    16dc:	81 2b       	or	r24, r17

				UDADDR = Temp;
    16de:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    16e2:	80 68       	ori	r24, 0x80	; 128
    16e4:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    16e8:	11 23       	and	r17, r17
    16ea:	11 f4       	brne	.+4      	; 0x16f0 <USB_Device_ProcessControlRequest+0x1be>
    16ec:	82 e0       	ldi	r24, 0x02	; 2
    16ee:	01 c0       	rjmp	.+2      	; 0x16f2 <USB_Device_ProcessControlRequest+0x1c0>
    16f0:	83 e0       	ldi	r24, 0x03	; 3
    16f2:	80 93 86 01 	sts	0x0186, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    16f6:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
    16f8:	88 c0       	rjmp	.+272    	; 0x180a <USB_Device_ProcessControlRequest+0x2d8>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    16fa:	80 58       	subi	r24, 0x80	; 128
    16fc:	82 30       	cpi	r24, 0x02	; 2
    16fe:	08 f0       	brcs	.+2      	; 0x1702 <USB_Device_ProcessControlRequest+0x1d0>
    1700:	84 c0       	rjmp	.+264    	; 0x180a <USB_Device_ProcessControlRequest+0x2d8>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1702:	80 91 89 01 	lds	r24, 0x0189
    1706:	90 91 8a 01 	lds	r25, 0x018A
    170a:	23 e0       	ldi	r18, 0x03	; 3
    170c:	8c 3d       	cpi	r24, 0xDC	; 220
    170e:	92 07       	cpc	r25, r18
    1710:	09 f0       	breq	.+2      	; 0x1714 <USB_Device_ProcessControlRequest+0x1e2>
    1712:	33 c0       	rjmp	.+102    	; 0x177a <USB_Device_ProcessControlRequest+0x248>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1714:	83 e0       	ldi	r24, 0x03	; 3
    1716:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1718:	8a e2       	ldi	r24, 0x2A	; 42
    171a:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    171c:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    171e:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1720:	de 01       	movw	r26, r28
    1722:	15 96       	adiw	r26, 0x05	; 5
    1724:	6e e0       	ldi	r22, 0x0E	; 14
    1726:	40 e0       	ldi	r20, 0x00	; 0
    1728:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    172a:	11 e2       	ldi	r17, 0x21	; 33
    172c:	e6 2f       	mov	r30, r22
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	10 93 57 00 	sts	0x0057, r17
    1734:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
    1736:	40 ff       	sbrs	r20, 0
    1738:	03 c0       	rjmp	.+6      	; 0x1740 <USB_Device_ProcessControlRequest+0x20e>
					{
						SerialByte >>= 4;
    173a:	82 95       	swap	r24
    173c:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    173e:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1740:	8f 70       	andi	r24, 0x0F	; 15
    1742:	28 2f       	mov	r18, r24
    1744:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1746:	8a 30       	cpi	r24, 0x0A	; 10
    1748:	18 f0       	brcs	.+6      	; 0x1750 <USB_Device_ProcessControlRequest+0x21e>
    174a:	c9 01       	movw	r24, r18
    174c:	c7 96       	adiw	r24, 0x37	; 55
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <USB_Device_ProcessControlRequest+0x222>
    1750:	c9 01       	movw	r24, r18
    1752:	c0 96       	adiw	r24, 0x30	; 48
    1754:	8d 93       	st	X+, r24
    1756:	9d 93       	st	X+, r25
    1758:	4f 5f       	subi	r20, 0xFF	; 255
    175a:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    175c:	44 31       	cpi	r20, 0x14	; 20
    175e:	51 05       	cpc	r21, r1
    1760:	29 f7       	brne	.-54     	; 0x172c <USB_Device_ProcessControlRequest+0x1fa>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1762:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1764:	80 91 e8 00 	lds	r24, 0x00E8
    1768:	87 7f       	andi	r24, 0xF7	; 247
    176a:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    176e:	ce 01       	movw	r24, r28
    1770:	03 96       	adiw	r24, 0x03	; 3
    1772:	6a e2       	ldi	r22, 0x2A	; 42
    1774:	70 e0       	ldi	r23, 0x00	; 0
    1776:	a8 dc       	rcall	.-1712   	; 0x10c8 <Endpoint_Write_Control_Stream_LE>
    1778:	13 c0       	rjmp	.+38     	; 0x17a0 <USB_Device_ProcessControlRequest+0x26e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    177a:	60 91 8b 01 	lds	r22, 0x018B
    177e:	ae 01       	movw	r20, r28
    1780:	4f 5f       	subi	r20, 0xFF	; 255
    1782:	5f 4f       	sbci	r21, 0xFF	; 255
    1784:	0e 94 bb 01 	call	0x376	; 0x376 <CALLBACK_USB_GetDescriptor>
    1788:	bc 01       	movw	r22, r24
    178a:	00 97       	sbiw	r24, 0x00	; 0
    178c:	09 f4       	brne	.+2      	; 0x1790 <USB_Device_ProcessControlRequest+0x25e>
    178e:	3d c0       	rjmp	.+122    	; 0x180a <USB_Device_ProcessControlRequest+0x2d8>
    1790:	80 91 e8 00 	lds	r24, 0x00E8
    1794:	87 7f       	andi	r24, 0xF7	; 247
    1796:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    179a:	89 81       	ldd	r24, Y+1	; 0x01
    179c:	9a 81       	ldd	r25, Y+2	; 0x02
    179e:	33 dd       	rcall	.-1434   	; 0x1206 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    17a0:	80 91 e8 00 	lds	r24, 0x00E8
    17a4:	8b 77       	andi	r24, 0x7B	; 123
    17a6:	80 93 e8 00 	sts	0x00E8, r24
    17aa:	2f c0       	rjmp	.+94     	; 0x180a <USB_Device_ProcessControlRequest+0x2d8>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    17ac:	80 38       	cpi	r24, 0x80	; 128
    17ae:	69 f5       	brne	.+90     	; 0x180a <USB_Device_ProcessControlRequest+0x2d8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    17b0:	80 91 e8 00 	lds	r24, 0x00E8
    17b4:	87 7f       	andi	r24, 0xF7	; 247
    17b6:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    17ba:	80 91 82 01 	lds	r24, 0x0182
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    17be:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17c2:	80 91 e8 00 	lds	r24, 0x00E8
    17c6:	8e 77       	andi	r24, 0x7E	; 126
    17c8:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    17cc:	c0 da       	rcall	.-2688   	; 0xd4e <Endpoint_ClearStatusStage>
    17ce:	1d c0       	rjmp	.+58     	; 0x180a <USB_Device_ProcessControlRequest+0x2d8>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    17d0:	88 23       	and	r24, r24
    17d2:	d9 f4       	brne	.+54     	; 0x180a <USB_Device_ProcessControlRequest+0x2d8>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    17d4:	90 91 89 01 	lds	r25, 0x0189
    17d8:	92 30       	cpi	r25, 0x02	; 2
    17da:	b8 f4       	brcc	.+46     	; 0x180a <USB_Device_ProcessControlRequest+0x2d8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    17dc:	80 91 e8 00 	lds	r24, 0x00E8
    17e0:	87 7f       	andi	r24, 0xF7	; 247
    17e2:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    17e6:	90 93 82 01 	sts	0x0182, r25

	Endpoint_ClearStatusStage();
    17ea:	b1 da       	rcall	.-2718   	; 0xd4e <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    17ec:	80 91 82 01 	lds	r24, 0x0182
    17f0:	88 23       	and	r24, r24
    17f2:	31 f4       	brne	.+12     	; 0x1800 <USB_Device_ProcessControlRequest+0x2ce>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    17f4:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    17f8:	87 fd       	sbrc	r24, 7
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <USB_Device_ProcessControlRequest+0x2ce>
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	01 c0       	rjmp	.+2      	; 0x1802 <USB_Device_ProcessControlRequest+0x2d0>
    1800:	84 e0       	ldi	r24, 0x04	; 4
    1802:	80 93 86 01 	sts	0x0186, r24

	EVENT_USB_Device_ConfigurationChanged();
    1806:	0e 94 4d 01 	call	0x29a	; 0x29a <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    180a:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    180e:	83 ff       	sbrs	r24, 3
    1810:	0a c0       	rjmp	.+20     	; 0x1826 <USB_Device_ProcessControlRequest+0x2f4>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1812:	80 91 eb 00 	lds	r24, 0x00EB
    1816:	80 62       	ori	r24, 0x20	; 32
    1818:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    181c:	80 91 e8 00 	lds	r24, 0x00E8
    1820:	87 7f       	andi	r24, 0xF7	; 247
    1822:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    1826:	ac 96       	adiw	r28, 0x2c	; 44
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	f8 94       	cli
    182c:	de bf       	out	0x3e, r29	; 62
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	cd bf       	out	0x3d, r28	; 61
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	1f 91       	pop	r17
    1838:	0f 91       	pop	r16
    183a:	08 95       	ret

0000183c <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    183c:	08 95       	ret

0000183e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    183e:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    1840:	80 91 86 01 	lds	r24, 0x0186
    1844:	88 23       	and	r24, r24
    1846:	61 f0       	breq	.+24     	; 0x1860 <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    1848:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    184c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1850:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    1854:	83 ff       	sbrs	r24, 3
    1856:	01 c0       	rjmp	.+2      	; 0x185a <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
    1858:	6c de       	rcall	.-808    	; 0x1532 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    185a:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    185c:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1860:	1f 91       	pop	r17
    1862:	08 95       	ret

00001864 <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1864:	4f 92       	push	r4
    1866:	5f 92       	push	r5
    1868:	6f 92       	push	r6
    186a:	7f 92       	push	r7
    186c:	8f 92       	push	r8
    186e:	9f 92       	push	r9
    1870:	af 92       	push	r10
    1872:	bf 92       	push	r11
    1874:	cf 92       	push	r12
    1876:	df 92       	push	r13
    1878:	ef 92       	push	r14
    187a:	ff 92       	push	r15
    187c:	0f 93       	push	r16
    187e:	1f 93       	push	r17
    1880:	df 93       	push	r29
    1882:	cf 93       	push	r28
    1884:	00 d0       	rcall	.+0      	; 0x1886 <HID_Device_USBTask+0x22>
    1886:	0f 92       	push	r0
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	7c 01       	movw	r14, r24
			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);

			Endpoint_ClearIN();
		}
	}
}
    188e:	6d b6       	in	r6, 0x3d	; 61
    1890:	7e b6       	in	r7, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1892:	80 91 86 01 	lds	r24, 0x0186
    1896:	84 30       	cpi	r24, 0x04	; 4
    1898:	09 f0       	breq	.+2      	; 0x189c <HID_Device_USBTask+0x38>
    189a:	86 c0       	rjmp	.+268    	; 0x19a8 <HID_Device_USBTask+0x144>
	  return;

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
    189c:	f7 01       	movw	r30, r14
    189e:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    18a0:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    18a4:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsReadWriteAllowed())
    18a8:	85 ff       	sbrs	r24, 5
    18aa:	7e c0       	rjmp	.+252    	; 0x19a8 <HID_Device_USBTask+0x144>
    18ac:	5d b6       	in	r5, 0x3d	; 61
    18ae:	4e b6       	in	r4, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    18b0:	47 81       	ldd	r20, Z+7	; 0x07
    18b2:	8d b7       	in	r24, 0x3d	; 61
    18b4:	9e b7       	in	r25, 0x3e	; 62
    18b6:	84 1b       	sub	r24, r20
    18b8:	91 09       	sbc	r25, r1
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	f8 94       	cli
    18be:	9e bf       	out	0x3e, r25	; 62
    18c0:	0f be       	out	0x3f, r0	; 63
    18c2:	8d bf       	out	0x3d, r24	; 61
    18c4:	0d b7       	in	r16, 0x3d	; 61
    18c6:	1e b7       	in	r17, 0x3e	; 62
    18c8:	0f 5f       	subi	r16, 0xFF	; 255
    18ca:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t  ReportID     = 0;
    18cc:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
    18ce:	1b 82       	std	Y+3, r1	; 0x03
    18d0:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
    18d2:	c0 2e       	mov	r12, r16
    18d4:	91 2e       	mov	r9, r17
    18d6:	c8 01       	movw	r24, r16
    18d8:	60 e0       	ldi	r22, 0x00	; 0
    18da:	70 e0       	ldi	r23, 0x00	; 0
    18dc:	50 e0       	ldi	r21, 0x00	; 0
    18de:	a4 d3       	rcall	.+1864   	; 0x2028 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
    18e0:	c7 01       	movw	r24, r14
    18e2:	be 01       	movw	r22, r28
    18e4:	6f 5f       	subi	r22, 0xFF	; 255
    18e6:	7f 4f       	sbci	r23, 0xFF	; 255
    18e8:	40 e0       	ldi	r20, 0x00	; 0
    18ea:	98 01       	movw	r18, r16
    18ec:	8e 01       	movw	r16, r28
    18ee:	0e 5f       	subi	r16, 0xFE	; 254
    18f0:	1f 4f       	sbci	r17, 0xFF	; 255
    18f2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <CALLBACK_HID_Device_CreateHIDReport>
    18f6:	88 2e       	mov	r8, r24
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    18f8:	f7 01       	movw	r30, r14
    18fa:	81 85       	ldd	r24, Z+9	; 0x09
    18fc:	92 85       	ldd	r25, Z+10	; 0x0a
    18fe:	89 2b       	or	r24, r25
    1900:	19 f4       	brne	.+6      	; 0x1908 <HID_Device_USBTask+0xa4>
    1902:	aa 24       	eor	r10, r10
    1904:	bb 24       	eor	r11, r11
    1906:	0b c0       	rjmp	.+22     	; 0x191e <HID_Device_USBTask+0xba>
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	f7 01       	movw	r30, r14
    190c:	83 85       	ldd	r24, Z+11	; 0x0b
    190e:	94 85       	ldd	r25, Z+12	; 0x0c
    1910:	89 2b       	or	r24, r25
    1912:	09 f0       	breq	.+2      	; 0x1916 <HID_Device_USBTask+0xb2>
    1914:	21 e0       	ldi	r18, 0x01	; 1
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	28 27       	eor	r18, r24
    191a:	a2 2e       	mov	r10, r18
    191c:	bb 24       	eor	r11, r11

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    191e:	f7 01       	movw	r30, r14
    1920:	05 81       	ldd	r16, Z+5	; 0x05
    1922:	16 81       	ldd	r17, Z+6	; 0x06
    1924:	01 15       	cp	r16, r1
    1926:	11 05       	cpc	r17, r1
    1928:	11 f4       	brne	.+4      	; 0x192e <HID_Device_USBTask+0xca>
    192a:	dd 24       	eor	r13, r13
    192c:	12 c0       	rjmp	.+36     	; 0x1952 <HID_Device_USBTask+0xee>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    192e:	4a 81       	ldd	r20, Y+2	; 0x02
    1930:	5b 81       	ldd	r21, Y+3	; 0x03
    1932:	8c 2d       	mov	r24, r12
    1934:	99 2d       	mov	r25, r9
    1936:	b8 01       	movw	r22, r16
    1938:	61 d3       	rcall	.+1730   	; 0x1ffc <memcmp>
    193a:	dd 24       	eor	r13, r13
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	11 f0       	breq	.+4      	; 0x1944 <HID_Device_USBTask+0xe0>
    1940:	dd 24       	eor	r13, r13
    1942:	d3 94       	inc	r13
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    1944:	f7 01       	movw	r30, r14
    1946:	47 81       	ldd	r20, Z+7	; 0x07
    1948:	c8 01       	movw	r24, r16
    194a:	6c 2d       	mov	r22, r12
    194c:	79 2d       	mov	r23, r9
    194e:	50 e0       	ldi	r21, 0x00	; 0
    1950:	62 d3       	rcall	.+1732   	; 0x2016 <memcpy>
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    1952:	8a 81       	ldd	r24, Y+2	; 0x02
    1954:	9b 81       	ldd	r25, Y+3	; 0x03
    1956:	89 2b       	or	r24, r25
    1958:	f9 f0       	breq	.+62     	; 0x1998 <HID_Device_USBTask+0x134>
    195a:	88 20       	and	r8, r8
    195c:	21 f4       	brne	.+8      	; 0x1966 <HID_Device_USBTask+0x102>
    195e:	dd 20       	and	r13, r13
    1960:	11 f4       	brne	.+4      	; 0x1966 <HID_Device_USBTask+0x102>
    1962:	ab 28       	or	r10, r11
    1964:	c9 f0       	breq	.+50     	; 0x1998 <HID_Device_USBTask+0x134>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    1966:	f7 01       	movw	r30, r14
    1968:	81 85       	ldd	r24, Z+9	; 0x09
    196a:	92 85       	ldd	r25, Z+10	; 0x0a
    196c:	94 87       	std	Z+12, r25	; 0x0c
    196e:	83 87       	std	Z+11, r24	; 0x0b

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
    1970:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1972:	80 93 e9 00 	sts	0x00E9, r24

			if (ReportID)
    1976:	89 81       	ldd	r24, Y+1	; 0x01
    1978:	88 23       	and	r24, r24
    197a:	11 f0       	breq	.+4      	; 0x1980 <HID_Device_USBTask+0x11c>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    197c:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    1980:	6a 81       	ldd	r22, Y+2	; 0x02
    1982:	7b 81       	ldd	r23, Y+3	; 0x03
    1984:	8c 2d       	mov	r24, r12
    1986:	99 2d       	mov	r25, r9
    1988:	40 e0       	ldi	r20, 0x00	; 0
    198a:	50 e0       	ldi	r21, 0x00	; 0
    198c:	3f dd       	rcall	.-1410   	; 0x140c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    198e:	80 91 e8 00 	lds	r24, 0x00E8
    1992:	8e 77       	andi	r24, 0x7E	; 126
    1994:	80 93 e8 00 	sts	0x00E8, r24
    1998:	85 2d       	mov	r24, r5
    199a:	94 2d       	mov	r25, r4
    199c:	9c 01       	movw	r18, r24
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	f8 94       	cli
    19a2:	3e bf       	out	0x3e, r19	; 62
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	2d bf       	out	0x3d, r18	; 61

			Endpoint_ClearIN();
		}
	}
}
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	7e be       	out	0x3e, r7	; 62
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	6d be       	out	0x3d, r6	; 61
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	cf 91       	pop	r28
    19ba:	df 91       	pop	r29
    19bc:	1f 91       	pop	r17
    19be:	0f 91       	pop	r16
    19c0:	ff 90       	pop	r15
    19c2:	ef 90       	pop	r14
    19c4:	df 90       	pop	r13
    19c6:	cf 90       	pop	r12
    19c8:	bf 90       	pop	r11
    19ca:	af 90       	pop	r10
    19cc:	9f 90       	pop	r9
    19ce:	8f 90       	pop	r8
    19d0:	7f 90       	pop	r7
    19d2:	6f 90       	pop	r6
    19d4:	5f 90       	pop	r5
    19d6:	4f 90       	pop	r4
    19d8:	08 95       	ret

000019da <HID_Device_ConfigureEndpoints>:
			break;
	}
}

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    19da:	cf 93       	push	r28
    19dc:	df 93       	push	r29
    19de:	dc 01       	movw	r26, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    19e0:	08 96       	adiw	r24, 0x08	; 8
    19e2:	fc 01       	movw	r30, r24
    19e4:	85 e0       	ldi	r24, 0x05	; 5
    19e6:	ef 01       	movw	r28, r30
    19e8:	19 92       	st	Y+, r1
    19ea:	8a 95       	dec	r24
    19ec:	e9 f7       	brne	.-6      	; 0x19e8 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	18 96       	adiw	r26, 0x08	; 8
    19f2:	8c 93       	st	X, r24
    19f4:	18 97       	sbiw	r26, 0x08	; 8
	HIDInterfaceInfo->State.IdleCount           = 500;
    19f6:	84 ef       	ldi	r24, 0xF4	; 244
    19f8:	91 e0       	ldi	r25, 0x01	; 1
    19fa:	1a 96       	adiw	r26, 0x0a	; 10
    19fc:	9c 93       	st	X, r25
    19fe:	8e 93       	st	-X, r24
    1a00:	19 97       	sbiw	r26, 0x09	; 9

	if (!(Endpoint_ConfigureEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber, EP_TYPE_INTERRUPT,
    1a02:	11 96       	adiw	r26, 0x01	; 1
    1a04:	3c 91       	ld	r19, X
    1a06:	11 97       	sbiw	r26, 0x01	; 1
    1a08:	12 96       	adiw	r26, 0x02	; 2
    1a0a:	6d 91       	ld	r22, X+
    1a0c:	7c 91       	ld	r23, X
    1a0e:	13 97       	sbiw	r26, 0x03	; 3
    1a10:	14 96       	adiw	r26, 0x04	; 4
    1a12:	8c 91       	ld	r24, X
    1a14:	88 23       	and	r24, r24
    1a16:	11 f4       	brne	.+4      	; 0x1a1c <HID_Device_ConfigureEndpoints+0x42>
    1a18:	40 e0       	ldi	r20, 0x00	; 0
    1a1a:	01 c0       	rjmp	.+2      	; 0x1a1e <HID_Device_ConfigureEndpoints+0x44>
    1a1c:	44 e0       	ldi	r20, 0x04	; 4
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	88 e0       	ldi	r24, 0x08	; 8
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	03 c0       	rjmp	.+6      	; 0x1a2c <HID_Device_ConfigureEndpoints+0x52>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    1a26:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    1a28:	88 0f       	add	r24, r24
    1a2a:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1a2c:	86 17       	cp	r24, r22
    1a2e:	97 07       	cpc	r25, r23
    1a30:	d0 f3       	brcs	.-12     	; 0x1a26 <HID_Device_ConfigureEndpoints+0x4c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    1a32:	42 60       	ori	r20, 0x02	; 2
    1a34:	22 95       	swap	r18
    1a36:	20 7f       	andi	r18, 0xF0	; 240
    1a38:	42 2b       	or	r20, r18
    1a3a:	83 2f       	mov	r24, r19
    1a3c:	61 ec       	ldi	r22, 0xC1	; 193
    1a3e:	52 d9       	rcall	.-3420   	; 0xce4 <Endpoint_ConfigureEndpoint_Prv>
    1a40:	81 11       	cpse	r24, r1
    1a42:	81 e0       	ldi	r24, 0x01	; 1
	{
		return false;
	}

	return true;
}
    1a44:	df 91       	pop	r29
    1a46:	cf 91       	pop	r28
    1a48:	08 95       	ret

00001a4a <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1a4a:	6f 92       	push	r6
    1a4c:	7f 92       	push	r7
    1a4e:	8f 92       	push	r8
    1a50:	9f 92       	push	r9
    1a52:	af 92       	push	r10
    1a54:	bf 92       	push	r11
    1a56:	cf 92       	push	r12
    1a58:	df 92       	push	r13
    1a5a:	ef 92       	push	r14
    1a5c:	ff 92       	push	r15
    1a5e:	0f 93       	push	r16
    1a60:	1f 93       	push	r17
    1a62:	df 93       	push	r29
    1a64:	cf 93       	push	r28
    1a66:	00 d0       	rcall	.+0      	; 0x1a68 <HID_Device_ProcessControlRequest+0x1e>
    1a68:	0f 92       	push	r0
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
    1a6e:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    1a70:	6d b6       	in	r6, 0x3d	; 61
    1a72:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a74:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    1a78:	83 ff       	sbrs	r24, 3
    1a7a:	0c c1       	rjmp	.+536    	; 0x1c94 <HID_Device_ProcessControlRequest+0x24a>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    1a7c:	f6 01       	movw	r30, r12
    1a7e:	80 81       	ld	r24, Z
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	20 91 8b 01 	lds	r18, 0x018B
    1a86:	30 91 8c 01 	lds	r19, 0x018C
    1a8a:	28 17       	cp	r18, r24
    1a8c:	39 07       	cpc	r19, r25
    1a8e:	09 f0       	breq	.+2      	; 0x1a92 <HID_Device_ProcessControlRequest+0x48>
    1a90:	01 c1       	rjmp	.+514    	; 0x1c94 <HID_Device_ProcessControlRequest+0x24a>
	  return;

	switch (USB_ControlRequest.bRequest)
    1a92:	80 91 88 01 	lds	r24, 0x0188
    1a96:	83 30       	cpi	r24, 0x03	; 3
    1a98:	09 f4       	brne	.+2      	; 0x1a9c <HID_Device_ProcessControlRequest+0x52>
    1a9a:	ac c0       	rjmp	.+344    	; 0x1bf4 <HID_Device_ProcessControlRequest+0x1aa>
    1a9c:	84 30       	cpi	r24, 0x04	; 4
    1a9e:	30 f4       	brcc	.+12     	; 0x1aac <HID_Device_ProcessControlRequest+0x62>
    1aa0:	81 30       	cpi	r24, 0x01	; 1
    1aa2:	71 f0       	breq	.+28     	; 0x1ac0 <HID_Device_ProcessControlRequest+0x76>
    1aa4:	82 30       	cpi	r24, 0x02	; 2
    1aa6:	09 f0       	breq	.+2      	; 0x1aaa <HID_Device_ProcessControlRequest+0x60>
    1aa8:	f5 c0       	rjmp	.+490    	; 0x1c94 <HID_Device_ProcessControlRequest+0x24a>
    1aaa:	dc c0       	rjmp	.+440    	; 0x1c64 <HID_Device_ProcessControlRequest+0x21a>
    1aac:	8a 30       	cpi	r24, 0x0A	; 10
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <HID_Device_ProcessControlRequest+0x68>
    1ab0:	c1 c0       	rjmp	.+386    	; 0x1c34 <HID_Device_ProcessControlRequest+0x1ea>
    1ab2:	8b 30       	cpi	r24, 0x0B	; 11
    1ab4:	09 f4       	brne	.+2      	; 0x1ab8 <HID_Device_ProcessControlRequest+0x6e>
    1ab6:	ab c0       	rjmp	.+342    	; 0x1c0e <HID_Device_ProcessControlRequest+0x1c4>
    1ab8:	89 30       	cpi	r24, 0x09	; 9
    1aba:	09 f0       	breq	.+2      	; 0x1abe <HID_Device_ProcessControlRequest+0x74>
    1abc:	eb c0       	rjmp	.+470    	; 0x1c94 <HID_Device_ProcessControlRequest+0x24a>
    1abe:	56 c0       	rjmp	.+172    	; 0x1b6c <HID_Device_ProcessControlRequest+0x122>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1ac0:	80 91 87 01 	lds	r24, 0x0187
    1ac4:	81 3a       	cpi	r24, 0xA1	; 161
    1ac6:	09 f0       	breq	.+2      	; 0x1aca <HID_Device_ProcessControlRequest+0x80>
    1ac8:	e5 c0       	rjmp	.+458    	; 0x1c94 <HID_Device_ProcessControlRequest+0x24a>
    1aca:	9d b6       	in	r9, 0x3d	; 61
    1acc:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    1ace:	1b 82       	std	Y+3, r1	; 0x03
    1ad0:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1ad2:	80 91 89 01 	lds	r24, 0x0189
    1ad6:	10 91 8a 01 	lds	r17, 0x018A
    1ada:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1adc:	f6 01       	movw	r30, r12
    1ade:	47 81       	ldd	r20, Z+7	; 0x07
    1ae0:	8d b7       	in	r24, 0x3d	; 61
    1ae2:	9e b7       	in	r25, 0x3e	; 62
    1ae4:	84 1b       	sub	r24, r20
    1ae6:	91 09       	sbc	r25, r1
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	f8 94       	cli
    1aec:	9e bf       	out	0x3e, r25	; 62
    1aee:	0f be       	out	0x3f, r0	; 63
    1af0:	8d bf       	out	0x3d, r24	; 61
    1af2:	ed b6       	in	r14, 0x3d	; 61
    1af4:	fe b6       	in	r15, 0x3e	; 62
    1af6:	08 94       	sec
    1af8:	e1 1c       	adc	r14, r1
    1afa:	f1 1c       	adc	r15, r1

				memset(ReportData, 0, sizeof(ReportData));
    1afc:	be 2c       	mov	r11, r14
    1afe:	af 2c       	mov	r10, r15
    1b00:	c7 01       	movw	r24, r14
    1b02:	60 e0       	ldi	r22, 0x00	; 0
    1b04:	70 e0       	ldi	r23, 0x00	; 0
    1b06:	50 e0       	ldi	r21, 0x00	; 0
    1b08:	8f d2       	rcall	.+1310   	; 0x2028 <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    1b0a:	11 50       	subi	r17, 0x01	; 1
    1b0c:	c6 01       	movw	r24, r12
    1b0e:	be 01       	movw	r22, r28
    1b10:	6f 5f       	subi	r22, 0xFF	; 255
    1b12:	7f 4f       	sbci	r23, 0xFF	; 255
    1b14:	41 2f       	mov	r20, r17
    1b16:	97 01       	movw	r18, r14
    1b18:	8e 01       	movw	r16, r28
    1b1a:	0e 5f       	subi	r16, 0xFE	; 254
    1b1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b1e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1b22:	f6 01       	movw	r30, r12
    1b24:	25 81       	ldd	r18, Z+5	; 0x05
    1b26:	36 81       	ldd	r19, Z+6	; 0x06
    1b28:	21 15       	cp	r18, r1
    1b2a:	31 05       	cpc	r19, r1
    1b2c:	29 f0       	breq	.+10     	; 0x1b38 <HID_Device_ProcessControlRequest+0xee>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    1b2e:	47 81       	ldd	r20, Z+7	; 0x07
    1b30:	c9 01       	movw	r24, r18
    1b32:	b7 01       	movw	r22, r14
    1b34:	50 e0       	ldi	r21, 0x00	; 0
    1b36:	6f d2       	rcall	.+1246   	; 0x2016 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1b38:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1b3c:	80 91 e8 00 	lds	r24, 0x00E8
    1b40:	87 7f       	andi	r24, 0xF7	; 247
    1b42:	80 93 e8 00 	sts	0x00E8, r24
				}
				
				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1b46:	6a 81       	ldd	r22, Y+2	; 0x02
    1b48:	7b 81       	ldd	r23, Y+3	; 0x03
    1b4a:	8b 2d       	mov	r24, r11
    1b4c:	9a 2d       	mov	r25, r10
    1b4e:	bc da       	rcall	.-2696   	; 0x10c8 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1b50:	80 91 e8 00 	lds	r24, 0x00E8
    1b54:	8b 77       	andi	r24, 0x7B	; 123
    1b56:	80 93 e8 00 	sts	0x00E8, r24
    1b5a:	29 2d       	mov	r18, r9
    1b5c:	38 2d       	mov	r19, r8
    1b5e:	c9 01       	movw	r24, r18
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	f8 94       	cli
    1b64:	9e bf       	out	0x3e, r25	; 62
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	8d bf       	out	0x3d, r24	; 61
    1b6a:	94 c0       	rjmp	.+296    	; 0x1c94 <HID_Device_ProcessControlRequest+0x24a>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1b6c:	80 91 87 01 	lds	r24, 0x0187
    1b70:	81 32       	cpi	r24, 0x21	; 33
    1b72:	09 f0       	breq	.+2      	; 0x1b76 <HID_Device_ProcessControlRequest+0x12c>
    1b74:	8f c0       	rjmp	.+286    	; 0x1c94 <HID_Device_ProcessControlRequest+0x24a>
    1b76:	9d b6       	in	r9, 0x3d	; 61
    1b78:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    1b7a:	00 91 8d 01 	lds	r16, 0x018D
    1b7e:	10 91 8e 01 	lds	r17, 0x018E
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1b82:	a0 90 89 01 	lds	r10, 0x0189
    1b86:	b0 90 8a 01 	lds	r11, 0x018A
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    1b8a:	8d b7       	in	r24, 0x3d	; 61
    1b8c:	9e b7       	in	r25, 0x3e	; 62
    1b8e:	80 1b       	sub	r24, r16
    1b90:	91 0b       	sbc	r25, r17
    1b92:	0f b6       	in	r0, 0x3f	; 63
    1b94:	f8 94       	cli
    1b96:	9e bf       	out	0x3e, r25	; 62
    1b98:	0f be       	out	0x3f, r0	; 63
    1b9a:	8d bf       	out	0x3d, r24	; 61
    1b9c:	ed b6       	in	r14, 0x3d	; 61
    1b9e:	fe b6       	in	r15, 0x3e	; 62
    1ba0:	08 94       	sec
    1ba2:	e1 1c       	adc	r14, r1
    1ba4:	f1 1c       	adc	r15, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ba6:	80 91 e8 00 	lds	r24, 0x00E8
    1baa:	87 7f       	andi	r24, 0xF7	; 247
    1bac:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    1bb0:	c7 01       	movw	r24, r14
    1bb2:	b8 01       	movw	r22, r16
    1bb4:	e7 da       	rcall	.-2610   	; 0x1184 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1bb6:	80 91 e8 00 	lds	r24, 0x00E8
    1bba:	8e 77       	andi	r24, 0x7E	; 126
    1bbc:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	aa 20       	and	r10, r10
    1bc6:	11 f0       	breq	.+4      	; 0x1bcc <HID_Device_ProcessControlRequest+0x182>
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	ba 94       	dec	r11
    1bce:	e8 0e       	add	r14, r24
    1bd0:	f9 1e       	adc	r15, r25
    1bd2:	08 1b       	sub	r16, r24
    1bd4:	19 0b       	sbc	r17, r25
    1bd6:	c6 01       	movw	r24, r12
    1bd8:	6a 2d       	mov	r22, r10
    1bda:	4b 2d       	mov	r20, r11
    1bdc:	97 01       	movw	r18, r14
    1bde:	0e 94 2d 01 	call	0x25a	; 0x25a <CALLBACK_HID_Device_ProcessHIDReport>
    1be2:	89 2d       	mov	r24, r9
    1be4:	98 2d       	mov	r25, r8
    1be6:	9c 01       	movw	r18, r24
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	f8 94       	cli
    1bec:	3e bf       	out	0x3e, r19	; 62
    1bee:	0f be       	out	0x3f, r0	; 63
    1bf0:	2d bf       	out	0x3d, r18	; 61
    1bf2:	50 c0       	rjmp	.+160    	; 0x1c94 <HID_Device_ProcessControlRequest+0x24a>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1bf4:	80 91 87 01 	lds	r24, 0x0187
    1bf8:	81 3a       	cpi	r24, 0xA1	; 161
    1bfa:	09 f0       	breq	.+2      	; 0x1bfe <HID_Device_ProcessControlRequest+0x1b4>
    1bfc:	4b c0       	rjmp	.+150    	; 0x1c94 <HID_Device_ProcessControlRequest+0x24a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1bfe:	80 91 e8 00 	lds	r24, 0x00E8
    1c02:	87 7f       	andi	r24, 0xF7	; 247
    1c04:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    1c08:	f6 01       	movw	r30, r12
    1c0a:	80 85       	ldd	r24, Z+8	; 0x08
    1c0c:	3b c0       	rjmp	.+118    	; 0x1c84 <HID_Device_ProcessControlRequest+0x23a>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1c0e:	80 91 87 01 	lds	r24, 0x0187
    1c12:	81 32       	cpi	r24, 0x21	; 33
    1c14:	09 f0       	breq	.+2      	; 0x1c18 <HID_Device_ProcessControlRequest+0x1ce>
    1c16:	3e c0       	rjmp	.+124    	; 0x1c94 <HID_Device_ProcessControlRequest+0x24a>
    1c18:	80 91 e8 00 	lds	r24, 0x00E8
    1c1c:	87 7f       	andi	r24, 0xF7	; 247
    1c1e:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1c22:	95 d8       	rcall	.-3798   	; 0xd4e <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	80 91 89 01 	lds	r24, 0x0189
    1c2a:	81 11       	cpse	r24, r1
    1c2c:	91 e0       	ldi	r25, 0x01	; 1
    1c2e:	f6 01       	movw	r30, r12
    1c30:	90 87       	std	Z+8, r25	; 0x08
    1c32:	30 c0       	rjmp	.+96     	; 0x1c94 <HID_Device_ProcessControlRequest+0x24a>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1c34:	80 91 87 01 	lds	r24, 0x0187
    1c38:	81 32       	cpi	r24, 0x21	; 33
    1c3a:	61 f5       	brne	.+88     	; 0x1c94 <HID_Device_ProcessControlRequest+0x24a>
    1c3c:	80 91 e8 00 	lds	r24, 0x00E8
    1c40:	87 7f       	andi	r24, 0xF7	; 247
    1c42:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1c46:	83 d8       	rcall	.-3834   	; 0xd4e <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    1c48:	80 91 89 01 	lds	r24, 0x0189
    1c4c:	90 91 8a 01 	lds	r25, 0x018A
    1c50:	80 70       	andi	r24, 0x00	; 0
    1c52:	76 e0       	ldi	r23, 0x06	; 6
    1c54:	96 95       	lsr	r25
    1c56:	87 95       	ror	r24
    1c58:	7a 95       	dec	r23
    1c5a:	e1 f7       	brne	.-8      	; 0x1c54 <HID_Device_ProcessControlRequest+0x20a>
    1c5c:	f6 01       	movw	r30, r12
    1c5e:	92 87       	std	Z+10, r25	; 0x0a
    1c60:	81 87       	std	Z+9, r24	; 0x09
    1c62:	18 c0       	rjmp	.+48     	; 0x1c94 <HID_Device_ProcessControlRequest+0x24a>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1c64:	80 91 87 01 	lds	r24, 0x0187
    1c68:	81 3a       	cpi	r24, 0xA1	; 161
    1c6a:	a1 f4       	brne	.+40     	; 0x1c94 <HID_Device_ProcessControlRequest+0x24a>
    1c6c:	80 91 e8 00 	lds	r24, 0x00E8
    1c70:	87 7f       	andi	r24, 0xF7	; 247
    1c72:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    1c76:	f6 01       	movw	r30, r12
    1c78:	81 85       	ldd	r24, Z+9	; 0x09
    1c7a:	92 85       	ldd	r25, Z+10	; 0x0a
    1c7c:	96 95       	lsr	r25
    1c7e:	87 95       	ror	r24
    1c80:	96 95       	lsr	r25
    1c82:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1c84:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c88:	80 91 e8 00 	lds	r24, 0x00E8
    1c8c:	8e 77       	andi	r24, 0x7E	; 126
    1c8e:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1c92:	5d d8       	rcall	.-3910   	; 0xd4e <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    1c94:	0f b6       	in	r0, 0x3f	; 63
    1c96:	f8 94       	cli
    1c98:	7e be       	out	0x3e, r7	; 62
    1c9a:	0f be       	out	0x3f, r0	; 63
    1c9c:	6d be       	out	0x3d, r6	; 61
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	1f 91       	pop	r17
    1caa:	0f 91       	pop	r16
    1cac:	ff 90       	pop	r15
    1cae:	ef 90       	pop	r14
    1cb0:	df 90       	pop	r13
    1cb2:	cf 90       	pop	r12
    1cb4:	bf 90       	pop	r11
    1cb6:	af 90       	pop	r10
    1cb8:	9f 90       	pop	r9
    1cba:	8f 90       	pop	r8
    1cbc:	7f 90       	pop	r7
    1cbe:	6f 90       	pop	r6
    1cc0:	08 95       	ret

00001cc2 <MS_Device_USBTask>:

	return true;
}

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1cc2:	cf 92       	push	r12
    1cc4:	df 92       	push	r13
    1cc6:	ef 92       	push	r14
    1cc8:	ff 92       	push	r15
    1cca:	0f 93       	push	r16
    1ccc:	1f 93       	push	r17
    1cce:	df 93       	push	r29
    1cd0:	cf 93       	push	r28
    1cd2:	00 d0       	rcall	.+0      	; 0x1cd4 <MS_Device_USBTask+0x12>
    1cd4:	cd b7       	in	r28, 0x3d	; 61
    1cd6:	de b7       	in	r29, 0x3e	; 62
    1cd8:	8c 01       	movw	r16, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1cda:	80 91 86 01 	lds	r24, 0x0186
    1cde:	84 30       	cpi	r24, 0x04	; 4
    1ce0:	09 f0       	breq	.+2      	; 0x1ce4 <MS_Device_USBTask+0x22>
    1ce2:	07 c1       	rjmp	.+526    	; 0x1ef2 <MS_Device_USBTask+0x230>
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    1ce4:	f8 01       	movw	r30, r16
    1ce6:	95 81       	ldd	r25, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1ce8:	90 93 e9 00 	sts	0x00E9, r25
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1cec:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsReadWriteAllowed())
    1cf0:	85 ff       	sbrs	r24, 5
    1cf2:	c9 c0       	rjmp	.+402    	; 0x1e86 <MS_Device_USBTask+0x1c4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1cf4:	90 93 e9 00 	sts	0x00E9, r25
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
	
	BytesProcessed = 0;
    1cf8:	1a 82       	std	Y+2, r1	; 0x02
    1cfa:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1cfc:	2a e0       	ldi	r18, 0x0A	; 10
    1cfe:	e2 2e       	mov	r14, r18
    1d00:	f1 2c       	mov	r15, r1
    1d02:	e0 0e       	add	r14, r16
    1d04:	f1 1e       	adc	r15, r17
    1d06:	6e 01       	movw	r12, r28
    1d08:	08 94       	sec
    1d0a:	c1 1c       	adc	r12, r1
    1d0c:	d1 1c       	adc	r13, r1
    1d0e:	05 c0       	rjmp	.+10     	; 0x1d1a <MS_Device_USBTask+0x58>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1d10:	f8 01       	movw	r30, r16
    1d12:	86 a9       	ldd	r24, Z+54	; 0x36
    1d14:	88 23       	and	r24, r24
    1d16:	09 f0       	breq	.+2      	; 0x1d1a <MS_Device_USBTask+0x58>
    1d18:	b6 c0       	rjmp	.+364    	; 0x1e86 <MS_Device_USBTask+0x1c4>
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
	
	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1d1a:	c7 01       	movw	r24, r14
    1d1c:	6f e0       	ldi	r22, 0x0F	; 15
    1d1e:	70 e0       	ldi	r23, 0x00	; 0
    1d20:	a6 01       	movw	r20, r12
    1d22:	d2 da       	rcall	.-2652   	; 0x12c8 <Endpoint_Read_Stream_LE>
    1d24:	85 30       	cpi	r24, 0x05	; 5
    1d26:	a1 f3       	breq	.-24     	; 0x1d10 <MS_Device_USBTask+0x4e>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    1d28:	f8 01       	movw	r30, r16
    1d2a:	82 85       	ldd	r24, Z+10	; 0x0a
    1d2c:	93 85       	ldd	r25, Z+11	; 0x0b
    1d2e:	a4 85       	ldd	r26, Z+12	; 0x0c
    1d30:	b5 85       	ldd	r27, Z+13	; 0x0d
    1d32:	85 55       	subi	r24, 0x55	; 85
    1d34:	93 45       	sbci	r25, 0x53	; 83
    1d36:	a2 44       	sbci	r26, 0x42	; 66
    1d38:	b3 44       	sbci	r27, 0x43	; 67
    1d3a:	81 f4       	brne	.+32     	; 0x1d5c <MS_Device_USBTask+0x9a>
    1d3c:	f8 01       	movw	r30, r16
    1d3e:	97 89       	ldd	r25, Z+23	; 0x17
    1d40:	81 85       	ldd	r24, Z+9	; 0x09
    1d42:	98 17       	cp	r25, r24
    1d44:	58 f4       	brcc	.+22     	; 0x1d5c <MS_Device_USBTask+0x9a>
    1d46:	86 89       	ldd	r24, Z+22	; 0x16
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	8f 71       	andi	r24, 0x1F	; 31
    1d4c:	90 70       	andi	r25, 0x00	; 0
    1d4e:	89 2b       	or	r24, r25
    1d50:	29 f4       	brne	.+10     	; 0x1d5c <MS_Device_USBTask+0x9a>
    1d52:	80 8d       	ldd	r24, Z+24	; 0x18
    1d54:	88 23       	and	r24, r24
    1d56:	11 f0       	breq	.+4      	; 0x1d5c <MS_Device_USBTask+0x9a>
    1d58:	81 31       	cpi	r24, 0x11	; 17
    1d5a:	78 f0       	brcs	.+30     	; 0x1d7a <MS_Device_USBTask+0xb8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1d5c:	80 91 eb 00 	lds	r24, 0x00EB
    1d60:	80 62       	ori	r24, 0x20	; 32
    1d62:	80 93 eb 00 	sts	0x00EB, r24
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength >  16))
	{
		Endpoint_StallTransaction();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1d66:	f8 01       	movw	r30, r16
    1d68:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1d6a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1d6e:	80 91 eb 00 	lds	r24, 0x00EB
    1d72:	80 62       	ori	r24, 0x20	; 32
    1d74:	80 93 eb 00 	sts	0x00EB, r24
    1d78:	86 c0       	rjmp	.+268    	; 0x1e86 <MS_Device_USBTask+0x1c4>
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
    1d7a:	1a 82       	std	Y+2, r1	; 0x02
    1d7c:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    1d7e:	99 e1       	ldi	r25, 0x19	; 25
    1d80:	e9 2e       	mov	r14, r25
    1d82:	f1 2c       	mov	r15, r1
    1d84:	e0 0e       	add	r14, r16
    1d86:	f1 1e       	adc	r15, r17
    1d88:	6e 01       	movw	r12, r28
    1d8a:	08 94       	sec
    1d8c:	c1 1c       	adc	r12, r1
    1d8e:	d1 1c       	adc	r13, r1
    1d90:	05 c0       	rjmp	.+10     	; 0x1d9c <MS_Device_USBTask+0xda>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1d92:	f8 01       	movw	r30, r16
    1d94:	86 a9       	ldd	r24, Z+54	; 0x36
    1d96:	88 23       	and	r24, r24
    1d98:	09 f0       	breq	.+2      	; 0x1d9c <MS_Device_USBTask+0xda>
    1d9a:	75 c0       	rjmp	.+234    	; 0x1e86 <MS_Device_USBTask+0x1c4>

		return false;
	}

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    1d9c:	f8 01       	movw	r30, r16
    1d9e:	60 8d       	ldd	r22, Z+24	; 0x18
    1da0:	c7 01       	movw	r24, r14
    1da2:	70 e0       	ldi	r23, 0x00	; 0
    1da4:	a6 01       	movw	r20, r12
    1da6:	90 da       	rcall	.-2784   	; 0x12c8 <Endpoint_Read_Stream_LE>
    1da8:	85 30       	cpi	r24, 0x05	; 5
    1daa:	99 f3       	breq	.-26     	; 0x1d92 <MS_Device_USBTask+0xd0>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1dac:	80 91 e8 00 	lds	r24, 0x00E8
    1db0:	8b 77       	andi	r24, 0x7B	; 123
    1db2:	80 93 e8 00 	sts	0x00E8, r24

	if (Endpoint_IsReadWriteAllowed())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    1db6:	f8 01       	movw	r30, r16
    1db8:	86 89       	ldd	r24, Z+22	; 0x16
    1dba:	87 ff       	sbrs	r24, 7
    1dbc:	03 c0       	rjmp	.+6      	; 0x1dc4 <MS_Device_USBTask+0x102>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1dbe:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1dc0:	80 93 e9 00 	sts	0x00E9, r24

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    1dc4:	c8 01       	movw	r24, r16
    1dc6:	0e 94 3b 01 	call	0x276	; 0x276 <CALLBACK_MS_Device_SCSICommandReceived>

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    1dca:	91 e0       	ldi	r25, 0x01	; 1
    1dcc:	98 27       	eor	r25, r24
    1dce:	f8 01       	movw	r30, r16
    1dd0:	95 ab       	std	Z+53, r25	; 0x35
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    1dd2:	25 e5       	ldi	r18, 0x55	; 85
    1dd4:	33 e5       	ldi	r19, 0x53	; 83
    1dd6:	42 e4       	ldi	r20, 0x42	; 66
    1dd8:	53 e5       	ldi	r21, 0x53	; 83
    1dda:	21 a7       	std	Z+41, r18	; 0x29
    1ddc:	32 a7       	std	Z+42, r19	; 0x2a
    1dde:	43 a7       	std	Z+43, r20	; 0x2b
    1de0:	54 a7       	std	Z+44, r21	; 0x2c
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    1de2:	26 85       	ldd	r18, Z+14	; 0x0e
    1de4:	37 85       	ldd	r19, Z+15	; 0x0f
    1de6:	40 89       	ldd	r20, Z+16	; 0x10
    1de8:	51 89       	ldd	r21, Z+17	; 0x11
    1dea:	25 a7       	std	Z+45, r18	; 0x2d
    1dec:	36 a7       	std	Z+46, r19	; 0x2e
    1dee:	47 a7       	std	Z+47, r20	; 0x2f
    1df0:	50 ab       	std	Z+48, r21	; 0x30
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    1df2:	22 89       	ldd	r18, Z+18	; 0x12
    1df4:	33 89       	ldd	r19, Z+19	; 0x13
    1df6:	44 89       	ldd	r20, Z+20	; 0x14
    1df8:	55 89       	ldd	r21, Z+21	; 0x15
    1dfa:	21 ab       	std	Z+49, r18	; 0x31
    1dfc:	32 ab       	std	Z+50, r19	; 0x32
    1dfe:	43 ab       	std	Z+51, r20	; 0x33
    1e00:	54 ab       	std	Z+52, r21	; 0x34

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    1e02:	88 23       	and	r24, r24
    1e04:	51 f4       	brne	.+20     	; 0x1e1a <MS_Device_USBTask+0x158>
    1e06:	21 15       	cp	r18, r1
    1e08:	31 05       	cpc	r19, r1
    1e0a:	41 05       	cpc	r20, r1
    1e0c:	51 05       	cpc	r21, r1
    1e0e:	29 f0       	breq	.+10     	; 0x1e1a <MS_Device_USBTask+0x158>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1e10:	80 91 eb 00 	lds	r24, 0x00EB
    1e14:	80 62       	ori	r24, 0x20	; 32
    1e16:	80 93 eb 00 	sts	0x00EB, r24
	return true;
}

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    1e1a:	f8 01       	movw	r30, r16
    1e1c:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1e1e:	80 93 e9 00 	sts	0x00E9, r24
    1e22:	04 c0       	rjmp	.+8      	; 0x1e2c <MS_Device_USBTask+0x16a>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1e24:	f8 01       	movw	r30, r16
    1e26:	86 a9       	ldd	r24, Z+54	; 0x36
    1e28:	88 23       	and	r24, r24
    1e2a:	69 f5       	brne	.+90     	; 0x1e86 <MS_Device_USBTask+0x1c4>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1e2c:	80 91 eb 00 	lds	r24, 0x00EB

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);

	while (Endpoint_IsStalled())
    1e30:	85 fd       	sbrc	r24, 5
    1e32:	f8 cf       	rjmp	.-16     	; 0x1e24 <MS_Device_USBTask+0x162>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1e34:	f8 01       	movw	r30, r16
    1e36:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1e38:	80 93 e9 00 	sts	0x00E9, r24
    1e3c:	04 c0       	rjmp	.+8      	; 0x1e46 <MS_Device_USBTask+0x184>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1e3e:	f8 01       	movw	r30, r16
    1e40:	86 a9       	ldd	r24, Z+54	; 0x36
    1e42:	88 23       	and	r24, r24
    1e44:	01 f5       	brne	.+64     	; 0x1e86 <MS_Device_USBTask+0x1c4>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1e46:	80 91 eb 00 	lds	r24, 0x00EB
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);

	while (Endpoint_IsStalled())
    1e4a:	85 fd       	sbrc	r24, 5
    1e4c:	f8 cf       	rjmp	.-16     	; 0x1e3e <MS_Device_USBTask+0x17c>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
    1e4e:	1a 82       	std	Y+2, r1	; 0x02
    1e50:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    1e52:	89 e2       	ldi	r24, 0x29	; 41
    1e54:	e8 2e       	mov	r14, r24
    1e56:	f1 2c       	mov	r15, r1
    1e58:	e0 0e       	add	r14, r16
    1e5a:	f1 1e       	adc	r15, r17
    1e5c:	6e 01       	movw	r12, r28
    1e5e:	08 94       	sec
    1e60:	c1 1c       	adc	r12, r1
    1e62:	d1 1c       	adc	r13, r1
    1e64:	04 c0       	rjmp	.+8      	; 0x1e6e <MS_Device_USBTask+0x1ac>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1e66:	f8 01       	movw	r30, r16
    1e68:	86 a9       	ldd	r24, Z+54	; 0x36
    1e6a:	88 23       	and	r24, r24
    1e6c:	61 f4       	brne	.+24     	; 0x1e86 <MS_Device_USBTask+0x1c4>
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    1e6e:	c7 01       	movw	r24, r14
    1e70:	6d e0       	ldi	r22, 0x0D	; 13
    1e72:	70 e0       	ldi	r23, 0x00	; 0
    1e74:	a6 01       	movw	r20, r12
    1e76:	ca da       	rcall	.-2668   	; 0x140c <Endpoint_Write_Stream_LE>
    1e78:	85 30       	cpi	r24, 0x05	; 5
    1e7a:	a9 f3       	breq	.-22     	; 0x1e66 <MS_Device_USBTask+0x1a4>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1e7c:	80 91 e8 00 	lds	r24, 0x00E8
    1e80:	8e 77       	andi	r24, 0x7E	; 126
    1e82:	80 93 e8 00 	sts	0x00E8, r24

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    1e86:	f8 01       	movw	r30, r16
    1e88:	86 a9       	ldd	r24, Z+54	; 0x36
    1e8a:	88 23       	and	r24, r24
    1e8c:	91 f1       	breq	.+100    	; 0x1ef2 <MS_Device_USBTask+0x230>
	{
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    1e8e:	45 81       	ldd	r20, Z+5	; 0x05
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    1e90:	21 e0       	ldi	r18, 0x01	; 1
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	c9 01       	movw	r24, r18
    1e96:	04 2e       	mov	r0, r20
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <MS_Device_USBTask+0x1dc>
    1e9a:	88 0f       	add	r24, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	0a 94       	dec	r0
    1ea0:	e2 f7       	brpl	.-8      	; 0x1e9a <MS_Device_USBTask+0x1d8>
    1ea2:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1ea6:	10 92 ea 00 	sts	0x00EA, r1
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1eaa:	91 81       	ldd	r25, Z+1	; 0x01
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    1eac:	09 2e       	mov	r0, r25
    1eae:	02 c0       	rjmp	.+4      	; 0x1eb4 <MS_Device_USBTask+0x1f2>
    1eb0:	22 0f       	add	r18, r18
    1eb2:	33 1f       	adc	r19, r19
    1eb4:	0a 94       	dec	r0
    1eb6:	e2 f7       	brpl	.-8      	; 0x1eb0 <MS_Device_USBTask+0x1ee>
    1eb8:	20 93 ea 00 	sts	0x00EA, r18
				UERST = 0;
    1ebc:	10 92 ea 00 	sts	0x00EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1ec0:	40 93 e9 00 	sts	0x00E9, r20
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1ec4:	80 91 eb 00 	lds	r24, 0x00EB
    1ec8:	80 61       	ori	r24, 0x10	; 16
    1eca:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1ece:	80 91 eb 00 	lds	r24, 0x00EB
    1ed2:	88 60       	ori	r24, 0x08	; 8
    1ed4:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1ed8:	90 93 e9 00 	sts	0x00E9, r25
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1edc:	80 91 eb 00 	lds	r24, 0x00EB
    1ee0:	80 61       	ori	r24, 0x10	; 16
    1ee2:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1ee6:	80 91 eb 00 	lds	r24, 0x00EB
    1eea:	88 60       	ori	r24, 0x08	; 8
    1eec:	80 93 eb 00 	sts	0x00EB, r24
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    1ef0:	16 aa       	std	Z+54, r1	; 0x36
	}
}
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	cf 91       	pop	r28
    1ef8:	df 91       	pop	r29
    1efa:	1f 91       	pop	r17
    1efc:	0f 91       	pop	r16
    1efe:	ff 90       	pop	r15
    1f00:	ef 90       	pop	r14
    1f02:	df 90       	pop	r13
    1f04:	cf 90       	pop	r12
    1f06:	08 95       	ret

00001f08 <MS_Device_ConfigureEndpoints>:
			break;
	}
}

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1f08:	1f 93       	push	r17
    1f0a:	cf 93       	push	r28
    1f0c:	df 93       	push	r29
    1f0e:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    1f10:	0a 96       	adiw	r24, 0x0a	; 10
    1f12:	fc 01       	movw	r30, r24
    1f14:	8d e2       	ldi	r24, 0x2D	; 45
    1f16:	df 01       	movw	r26, r30
    1f18:	1d 92       	st	X+, r1
    1f1a:	8a 95       	dec	r24
    1f1c:	e9 f7       	brne	.-6      	; 0x1f18 <MS_Device_ConfigureEndpoints+0x10>
    1f1e:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == MSInterfaceInfo->Config.DataINEndpointNumber)
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
    1f22:	18 17       	cp	r17, r24
    1f24:	29 f4       	brne	.+10     	; 0x1f30 <MS_Device_ConfigureEndpoints+0x28>
		{
			Size         = MSInterfaceInfo->Config.DataINEndpointSize;
    1f26:	6a 81       	ldd	r22, Y+2	; 0x02
    1f28:	7b 81       	ldd	r23, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataINEndpointDoubleBank;
    1f2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2c:	30 e8       	ldi	r19, 0x80	; 128
    1f2e:	07 c0       	rjmp	.+14     	; 0x1f3e <MS_Device_ConfigureEndpoints+0x36>
		}
		else if (EndpointNum == MSInterfaceInfo->Config.DataOUTEndpointNumber)
    1f30:	8d 81       	ldd	r24, Y+5	; 0x05
    1f32:	18 17       	cp	r17, r24
    1f34:	01 f5       	brne	.+64     	; 0x1f76 <MS_Device_ConfigureEndpoints+0x6e>
		{
			Size         = MSInterfaceInfo->Config.DataOUTEndpointSize;
    1f36:	6e 81       	ldd	r22, Y+6	; 0x06
    1f38:	7f 81       	ldd	r23, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataOUTEndpointDoubleBank;
    1f3a:	88 85       	ldd	r24, Y+8	; 0x08
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
    1f3e:	88 23       	and	r24, r24
    1f40:	11 f4       	brne	.+4      	; 0x1f46 <MS_Device_ConfigureEndpoints+0x3e>
    1f42:	40 e0       	ldi	r20, 0x00	; 0
    1f44:	01 c0       	rjmp	.+2      	; 0x1f48 <MS_Device_ConfigureEndpoints+0x40>
    1f46:	44 e0       	ldi	r20, 0x04	; 4
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	88 e0       	ldi	r24, 0x08	; 8
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	03 c0       	rjmp	.+6      	; 0x1f56 <MS_Device_ConfigureEndpoints+0x4e>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    1f50:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    1f52:	88 0f       	add	r24, r24
    1f54:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1f56:	86 17       	cp	r24, r22
    1f58:	97 07       	cpc	r25, r23
    1f5a:	d0 f3       	brcs	.-12     	; 0x1f50 <MS_Device_ConfigureEndpoints+0x48>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    1f5c:	60 e0       	ldi	r22, 0x00	; 0
    1f5e:	31 11       	cpse	r19, r1
    1f60:	61 e0       	ldi	r22, 0x01	; 1
    1f62:	60 68       	ori	r22, 0x80	; 128
    1f64:	42 60       	ori	r20, 0x02	; 2
    1f66:	22 95       	swap	r18
    1f68:	20 7f       	andi	r18, 0xF0	; 240
    1f6a:	42 2b       	or	r20, r18
    1f6c:	81 2f       	mov	r24, r17
    1f6e:	0e 94 72 06 	call	0xce4	; 0xce4 <Endpoint_ConfigureEndpoint_Prv>
    1f72:	88 23       	and	r24, r24
    1f74:	21 f0       	breq	.+8      	; 0x1f7e <MS_Device_ConfigureEndpoints+0x76>

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    1f76:	1f 5f       	subi	r17, 0xFF	; 255
    1f78:	17 30       	cpi	r17, 0x07	; 7
    1f7a:	91 f6       	brne	.-92     	; 0x1f20 <MS_Device_ConfigureEndpoints+0x18>
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
    1f7e:	df 91       	pop	r29
    1f80:	cf 91       	pop	r28
    1f82:	1f 91       	pop	r17
    1f84:	08 95       	ret

00001f86 <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorage.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1f86:	cf 93       	push	r28
    1f88:	df 93       	push	r29
    1f8a:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1f8c:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    1f90:	83 ff       	sbrs	r24, 3
    1f92:	31 c0       	rjmp	.+98     	; 0x1ff6 <MS_Device_ProcessControlRequest+0x70>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    1f94:	88 81       	ld	r24, Y
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	20 91 8b 01 	lds	r18, 0x018B
    1f9c:	30 91 8c 01 	lds	r19, 0x018C
    1fa0:	28 17       	cp	r18, r24
    1fa2:	39 07       	cpc	r19, r25
    1fa4:	41 f5       	brne	.+80     	; 0x1ff6 <MS_Device_ProcessControlRequest+0x70>
	  return;

	switch (USB_ControlRequest.bRequest)
    1fa6:	80 91 88 01 	lds	r24, 0x0188
    1faa:	8e 3f       	cpi	r24, 0xFE	; 254
    1fac:	81 f0       	breq	.+32     	; 0x1fce <MS_Device_ProcessControlRequest+0x48>
    1fae:	8f 3f       	cpi	r24, 0xFF	; 255
    1fb0:	11 f5       	brne	.+68     	; 0x1ff6 <MS_Device_ProcessControlRequest+0x70>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1fb2:	80 91 87 01 	lds	r24, 0x0187
    1fb6:	81 32       	cpi	r24, 0x21	; 33
    1fb8:	f1 f4       	brne	.+60     	; 0x1ff6 <MS_Device_ProcessControlRequest+0x70>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1fba:	80 91 e8 00 	lds	r24, 0x00E8
    1fbe:	87 7f       	andi	r24, 0xF7	; 247
    1fc0:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1fc4:	0e 94 a7 06 	call	0xd4e	; 0xd4e <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	8e ab       	std	Y+54, r24	; 0x36
    1fcc:	14 c0       	rjmp	.+40     	; 0x1ff6 <MS_Device_ProcessControlRequest+0x70>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1fce:	80 91 87 01 	lds	r24, 0x0187
    1fd2:	81 3a       	cpi	r24, 0xA1	; 161
    1fd4:	81 f4       	brne	.+32     	; 0x1ff6 <MS_Device_ProcessControlRequest+0x70>
    1fd6:	80 91 e8 00 	lds	r24, 0x00E8
    1fda:	87 7f       	andi	r24, 0xF7	; 247
    1fdc:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    1fe0:	89 85       	ldd	r24, Y+9	; 0x09
    1fe2:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1fe4:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1fe8:	80 91 e8 00 	lds	r24, 0x00E8
    1fec:	8e 77       	andi	r24, 0x7E	; 126
    1fee:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1ff2:	0e 94 a7 06 	call	0xd4e	; 0xd4e <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    1ff6:	df 91       	pop	r29
    1ff8:	cf 91       	pop	r28
    1ffa:	08 95       	ret

00001ffc <memcmp>:
    1ffc:	fb 01       	movw	r30, r22
    1ffe:	dc 01       	movw	r26, r24
    2000:	04 c0       	rjmp	.+8      	; 0x200a <memcmp+0xe>
    2002:	8d 91       	ld	r24, X+
    2004:	01 90       	ld	r0, Z+
    2006:	80 19       	sub	r24, r0
    2008:	21 f4       	brne	.+8      	; 0x2012 <memcmp+0x16>
    200a:	41 50       	subi	r20, 0x01	; 1
    200c:	50 40       	sbci	r21, 0x00	; 0
    200e:	c8 f7       	brcc	.-14     	; 0x2002 <memcmp+0x6>
    2010:	88 1b       	sub	r24, r24
    2012:	99 0b       	sbc	r25, r25
    2014:	08 95       	ret

00002016 <memcpy>:
    2016:	fb 01       	movw	r30, r22
    2018:	dc 01       	movw	r26, r24
    201a:	02 c0       	rjmp	.+4      	; 0x2020 <memcpy+0xa>
    201c:	01 90       	ld	r0, Z+
    201e:	0d 92       	st	X+, r0
    2020:	41 50       	subi	r20, 0x01	; 1
    2022:	50 40       	sbci	r21, 0x00	; 0
    2024:	d8 f7       	brcc	.-10     	; 0x201c <memcpy+0x6>
    2026:	08 95       	ret

00002028 <memset>:
    2028:	dc 01       	movw	r26, r24
    202a:	01 c0       	rjmp	.+2      	; 0x202e <memset+0x6>
    202c:	6d 93       	st	X+, r22
    202e:	41 50       	subi	r20, 0x01	; 1
    2030:	50 40       	sbci	r21, 0x00	; 0
    2032:	e0 f7       	brcc	.-8      	; 0x202c <memset+0x4>
    2034:	08 95       	ret

00002036 <_exit>:
    2036:	f8 94       	cli

00002038 <__stop_program>:
    2038:	ff cf       	rjmp	.-2      	; 0x2038 <__stop_program>
