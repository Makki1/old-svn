
VirtualSerialMassStorage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d6  00800100  00001e0e  00001ea2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  008001d6  008001d6  00001f78  2**0
                  ALLOC
  3 .stab         00000ec4  00000000  00000000  00001f78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000930  00000000  00000000  00002e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000508  00000000  00000000  0000376c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000dd3  00000000  00000000  00003c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a4cd  00000000  00000000  00004a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000252a  00000000  00000000  0000ef14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000788f  00000000  00000000  0001143e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000790  00000000  00000000  00018cd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000394b  00000000  00000000  00019460  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003bf6  00000000  00000000  0001cdab  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006c0  00000000  00000000  000209a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
 *  \param[in] BufferPtr     Pointer to the data source RAM buffer
 */
void DataflashManager_WriteBlocks_RAM(const uint32_t BlockAddress,
                                      uint16_t TotalBlocks,
                                      uint8_t* BufferPtr)
{
       0:	b2 c0       	rjmp	.+356    	; 0x166 <__ctors_end>
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       2:	00 00       	nop
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       4:	ce c0       	rjmp	.+412    	; 0x1a2 <__bad_interrupt>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       6:	00 00       	nop
	}
	else
	{
		return 0;
	}
}
       8:	cc c0       	rjmp	.+408    	; 0x1a2 <__bad_interrupt>
       a:	00 00       	nop
       c:	ca c0       	rjmp	.+404    	; 0x1a2 <__bad_interrupt>
       e:	00 00       	nop
      10:	c8 c0       	rjmp	.+400    	; 0x1a2 <__bad_interrupt>
      12:	00 00       	nop
      14:	c6 c0       	rjmp	.+396    	; 0x1a2 <__bad_interrupt>
      16:	00 00       	nop
      18:	c4 c0       	rjmp	.+392    	; 0x1a2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c2 c0       	rjmp	.+388    	; 0x1a2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c0 c0       	rjmp	.+384    	; 0x1a2 <__bad_interrupt>
      22:	00 00       	nop
      24:	be c0       	rjmp	.+380    	; 0x1a2 <__bad_interrupt>
      26:	00 00       	nop
      28:	0b c7       	rjmp	.+3606   	; 0xe40 <__vector_10>
      2a:	00 00       	nop
      2c:	ba c0       	rjmp	.+372    	; 0x1a2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b8 c0       	rjmp	.+368    	; 0x1a2 <__bad_interrupt>
      32:	00 00       	nop
      34:	b6 c0       	rjmp	.+364    	; 0x1a2 <__bad_interrupt>
      36:	00 00       	nop
      38:	b4 c0       	rjmp	.+360    	; 0x1a2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b2 c0       	rjmp	.+356    	; 0x1a2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b0 c0       	rjmp	.+352    	; 0x1a2 <__bad_interrupt>
      42:	00 00       	nop
      44:	ae c0       	rjmp	.+348    	; 0x1a2 <__bad_interrupt>
      46:	00 00       	nop
      48:	ac c0       	rjmp	.+344    	; 0x1a2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c0       	rjmp	.+340    	; 0x1a2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a8 c0       	rjmp	.+336    	; 0x1a2 <__bad_interrupt>
      52:	00 00       	nop
      54:	a6 c0       	rjmp	.+332    	; 0x1a2 <__bad_interrupt>
      56:	00 00       	nop
      58:	a4 c0       	rjmp	.+328    	; 0x1a2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a2 c0       	rjmp	.+324    	; 0x1a2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a0 c0       	rjmp	.+320    	; 0x1a2 <__bad_interrupt>
      62:	00 00       	nop
      64:	9e c0       	rjmp	.+316    	; 0x1a2 <__bad_interrupt>
      66:	00 00       	nop
      68:	9c c0       	rjmp	.+312    	; 0x1a2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9a c0       	rjmp	.+308    	; 0x1a2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	98 c0       	rjmp	.+304    	; 0x1a2 <__bad_interrupt>
      72:	00 00       	nop
      74:	96 c0       	rjmp	.+300    	; 0x1a2 <__bad_interrupt>
      76:	00 00       	nop
      78:	94 c0       	rjmp	.+296    	; 0x1a2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	92 c0       	rjmp	.+292    	; 0x1a2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	90 c0       	rjmp	.+288    	; 0x1a2 <__bad_interrupt>
      82:	00 00       	nop
      84:	8e c0       	rjmp	.+284    	; 0x1a2 <__bad_interrupt>
      86:	00 00       	nop
      88:	8c c0       	rjmp	.+280    	; 0x1a2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8a c0       	rjmp	.+276    	; 0x1a2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	88 c0       	rjmp	.+272    	; 0x1a2 <__bad_interrupt>
      92:	00 00       	nop
      94:	86 c0       	rjmp	.+268    	; 0x1a2 <__bad_interrupt>
      96:	00 00       	nop

00000098 <DeviceDescriptor>:
      98:	12 01 10 01 ef 02 01 08 eb 03 68 20 01 00 01 02     ..........h ....
      a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
      aa:	09 02 5d 00 03 01 00 c0 32 08 0b 00 02 02 02 01     ..].....2.......
      ba:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
      ca:	24 02 06 05 24 06 00 01 07 05 81 03 08 00 ff 09     $...$...........
      da:	04 01 00 02 0a 00 00 00 07 05 03 02 10 00 01 07     ................
      ea:	05 82 02 10 00 01 09 04 02 00 02 08 06 50 00 07     .............P..
      fa:	05 84 02 40 00 01 07 05 05 02 40 00 01              ...@......@..

00000107 <LanguageString>:
     107:	04 03 09 04                                         ....

0000010b <ManufacturerString>:
     10b:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     11b:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000125 <ProductString>:
     125:	3e 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     >.L.U.F.A. .C.D.
     135:	43 00 20 00 61 00 6e 00 64 00 20 00 4d 00 61 00     C. .a.n.d. .M.a.
     145:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.
     155:	67 00 65 00 20 00 44 00 65 00 6d 00 6f 00 00 00     g.e. .D.e.m.o...
     165:	00                                                  .

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d0 e2       	ldi	r29, 0x20	; 32
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61

00000172 <__do_copy_data>:
     172:	11 e0       	ldi	r17, 0x01	; 1
     174:	a0 e0       	ldi	r26, 0x00	; 0
     176:	b1 e0       	ldi	r27, 0x01	; 1
     178:	ee e0       	ldi	r30, 0x0E	; 14
     17a:	fe e1       	ldi	r31, 0x1E	; 30
     17c:	00 e0       	ldi	r16, 0x00	; 0
     17e:	0b bf       	out	0x3b, r16	; 59
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x14>
     182:	07 90       	elpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a6 3d       	cpi	r26, 0xD6	; 214
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0x10>

0000018c <__do_clear_bss>:
     18c:	11 e0       	ldi	r17, 0x01	; 1
     18e:	a6 ed       	ldi	r26, 0xD6	; 214
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a2 3f       	cpi	r26, 0xF2	; 242
     198:	b1 07       	cpc	r27, r17
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	a8 d0       	rcall	.+336    	; 0x2ee <main>
     19e:	0c 94 05 0f 	jmp	0x1e0a	; 0x1e0a <_exit>

000001a2 <__bad_interrupt>:
     1a2:	2e cf       	rjmp	.-420    	; 0x0 <__vectors>

000001a4 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     1a4:	8b b1       	in	r24, 0x0b	; 11
     1a6:	8f 70       	andi	r24, 0x0F	; 15
     1a8:	80 6a       	ori	r24, 0xA0	; 160
     1aa:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     1ac:	08 95       	ret

000001ae <EVENT_USB_Device_Disconnect>:
     1ae:	8b b1       	in	r24, 0x0b	; 11
     1b0:	8f 70       	andi	r24, 0x0F	; 15
     1b2:	80 61       	ori	r24, 0x10	; 16
     1b4:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     1b6:	08 95       	ret

000001b8 <CALLBACK_MS_Device_SCSICommandReceived>:
     1b8:	2b b1       	in	r18, 0x0b	; 11
     1ba:	2f 70       	andi	r18, 0x0F	; 15
     1bc:	20 62       	ori	r18, 0x20	; 32
     1be:	2b b9       	out	0x0b, r18	; 11
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
     1c0:	33 d4       	rcall	.+2150   	; 0xa28 <SCSI_DecodeSCSICommand>
     1c2:	9b b1       	in	r25, 0x0b	; 11
     1c4:	9f 70       	andi	r25, 0x0F	; 15
     1c6:	90 66       	ori	r25, 0x60	; 96
     1c8:	9b b9       	out	0x0b, r25	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);

	return CommandSuccess;
}
     1ca:	08 95       	ret

000001cc <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     1cc:	82 e5       	ldi	r24, 0x52	; 82
     1ce:	91 e0       	ldi	r25, 0x01	; 1
     1d0:	0e 94 cb 0c 	call	0x1996	; 0x1996 <CDC_Device_ProcessControlRequest>
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
     1d4:	88 e6       	ldi	r24, 0x68	; 104
     1d6:	91 e0       	ldi	r25, 0x01	; 1
     1d8:	0c 94 9f 0e 	jmp	0x1d3e	; 0x1d3e <MS_Device_ProcessControlRequest>

000001dc <EVENT_USB_Device_ConfigurationChanged>:
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     1dc:	0f 93       	push	r16
     1de:	1f 93       	push	r17
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     1e0:	82 e5       	ldi	r24, 0x52	; 82
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <CDC_Device_ConfigureEndpoints>
     1e8:	08 2f       	mov	r16, r24
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     1ea:	88 e6       	ldi	r24, 0x68	; 104
     1ec:	91 e0       	ldi	r25, 0x01	; 1
     1ee:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <MS_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     1f2:	10 e0       	ldi	r17, 0x00	; 0
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	08 23       	and	r16, r24
     1f8:	19 23       	and	r17, r25
     1fa:	00 ff       	sbrs	r16, 0
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <EVENT_USB_Device_ConfigurationChanged+0x26>
     1fe:	90 e6       	ldi	r25, 0x60	; 96
     200:	01 c0       	rjmp	.+2      	; 0x204 <EVENT_USB_Device_ConfigurationChanged+0x28>
     202:	90 e9       	ldi	r25, 0x90	; 144
     204:	8b b1       	in	r24, 0x0b	; 11
     206:	8f 70       	andi	r24, 0x0F	; 15
     208:	98 2b       	or	r25, r24
     20a:	9b b9       	out	0x0b, r25	; 11
}
     20c:	1f 91       	pop	r17
     20e:	0f 91       	pop	r16
     210:	08 95       	ret

00000212 <CheckJoystickMovement>:
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     212:	23 b1       	in	r18, 0x03	; 3
     214:	8c b1       	in	r24, 0x0c	; 12
     216:	80 95       	com	r24
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	80 73       	andi	r24, 0x30	; 48
     21c:	90 70       	andi	r25, 0x00	; 0
     21e:	95 95       	asr	r25
     220:	87 95       	ror	r24
     222:	20 95       	com	r18
     224:	20 7e       	andi	r18, 0xE0	; 224
     226:	28 2b       	or	r18, r24
{
	uint8_t     JoyStatus_LCL = Joystick_GetStatus();
	char*       ReportString  = NULL;
	static bool ActionSent    = false;

	if (JoyStatus_LCL & JOY_UP)
     228:	27 fd       	sbrc	r18, 7
     22a:	17 c0       	rjmp	.+46     	; 0x25a <CheckJoystickMovement+0x48>
	  ReportString = "Joystick Up\r\n";
	else if (JoyStatus_LCL & JOY_DOWN)
     22c:	24 ff       	sbrs	r18, 4
     22e:	03 c0       	rjmp	.+6      	; 0x236 <CheckJoystickMovement+0x24>
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	31 e0       	ldi	r19, 0x01	; 1
     234:	14 c0       	rjmp	.+40     	; 0x25e <CheckJoystickMovement+0x4c>
	  ReportString = "Joystick Down\r\n";
	else if (JoyStatus_LCL & JOY_LEFT)
     236:	26 ff       	sbrs	r18, 6
     238:	03 c0       	rjmp	.+6      	; 0x240 <CheckJoystickMovement+0x2e>
     23a:	20 e1       	ldi	r18, 0x10	; 16
     23c:	31 e0       	ldi	r19, 0x01	; 1
     23e:	0f c0       	rjmp	.+30     	; 0x25e <CheckJoystickMovement+0x4c>
	  ReportString = "Joystick Left\r\n";
	else if (JoyStatus_LCL & JOY_RIGHT)
     240:	23 ff       	sbrs	r18, 3
     242:	03 c0       	rjmp	.+6      	; 0x24a <CheckJoystickMovement+0x38>
     244:	20 e2       	ldi	r18, 0x20	; 32
     246:	31 e0       	ldi	r19, 0x01	; 1
     248:	0a c0       	rjmp	.+20     	; 0x25e <CheckJoystickMovement+0x4c>
	  ReportString = "Joystick Right\r\n";
	else if (JoyStatus_LCL & JOY_PRESS)
     24a:	25 ff       	sbrs	r18, 5
     24c:	03 c0       	rjmp	.+6      	; 0x254 <CheckJoystickMovement+0x42>
     24e:	21 e3       	ldi	r18, 0x31	; 49
     250:	31 e0       	ldi	r19, 0x01	; 1
     252:	05 c0       	rjmp	.+10     	; 0x25e <CheckJoystickMovement+0x4c>
	  ReportString = "Joystick Pressed\r\n";
	else
	  ActionSent = false;
     254:	10 92 d6 01 	sts	0x01D6, r1
     258:	08 95       	ret
     25a:	24 e4       	ldi	r18, 0x44	; 68
     25c:	31 e0       	ldi	r19, 0x01	; 1

	if ((ReportString != NULL) && (ActionSent == false))
     25e:	80 91 d6 01 	lds	r24, 0x01D6
     262:	88 23       	and	r24, r24
     264:	41 f4       	brne	.+16     	; 0x276 <CheckJoystickMovement+0x64>
	{
		ActionSent = true;
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	80 93 d6 01 	sts	0x01D6, r24

		/* Write the string to the virtual COM port via the created character stream */
		fputs(ReportString, &USBSerialStream);
     26c:	c9 01       	movw	r24, r18
     26e:	67 ed       	ldi	r22, 0xD7	; 215
     270:	71 e0       	ldi	r23, 0x01	; 1
     272:	0c 94 da 0e 	jmp	0x1db4	; 0x1db4 <fputs>
     276:	08 95       	ret

00000278 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     278:	84 b7       	in	r24, 0x34	; 52
     27a:	87 7f       	andi	r24, 0xF7	; 247
     27c:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     27e:	88 e1       	ldi	r24, 0x18	; 24
     280:	0f b6       	in	r0, 0x3f	; 63
     282:	f8 94       	cli
     284:	80 93 60 00 	sts	0x0060, r24
     288:	10 92 60 00 	sts	0x0060, r1
     28c:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	80 e8       	ldi	r24, 0x80	; 128
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	f8 94       	cli
     296:	80 93 61 00 	sts	0x0061, r24
     29a:	90 93 61 00 	sts	0x0061, r25
     29e:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     2a0:	8a b1       	in	r24, 0x0a	; 10
     2a2:	80 6f       	ori	r24, 0xF0	; 240
     2a4:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     2a6:	8b b1       	in	r24, 0x0b	; 11
     2a8:	8f 70       	andi	r24, 0x0F	; 15
     2aa:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
     2ac:	84 b1       	in	r24, 0x04	; 4
     2ae:	8f 71       	andi	r24, 0x1F	; 31
     2b0:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
     2b2:	8d b1       	in	r24, 0x0d	; 13
     2b4:	8f 7c       	andi	r24, 0xCF	; 207
     2b6:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
     2b8:	85 b1       	in	r24, 0x05	; 5
     2ba:	80 6e       	ori	r24, 0xE0	; 224
     2bc:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
     2be:	8e b1       	in	r24, 0x0e	; 14
     2c0:	80 63       	ori	r24, 0x30	; 48
     2c2:	8e b9       	out	0x0e, r24	; 14
			 *                         \c SPI_SCK_*, \c SPI_SAMPLE_*, \c SPI_ORDER_* and \c SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
     2c4:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
     2c6:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
     2c8:	84 b1       	in	r24, 0x04	; 4
     2ca:	86 60       	ori	r24, 0x06	; 6
     2cc:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
     2ce:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
     2d0:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     2d2:	8d b5       	in	r24, 0x2d	; 45
     2d4:	81 60       	ori	r24, 0x01	; 1
     2d6:	8d bd       	out	0x2d, r24	; 45
				else
				  SPSR &= ~(1 << SPI2X);

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
     2d8:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
     2da:	8c e5       	ldi	r24, 0x5C	; 92
     2dc:	8c bd       	out	0x2c, r24	; 44
			/** Initializes the dataflash driver so that commands and data may be sent to an attached dataflash IC.
			 *  The microcontroller's SPI driver MUST be initialized before any of the dataflash commands are used.
			 */
			static inline void Dataflash_Init(void)
			{
				DATAFLASH_CHIPCS_DDR  |= DATAFLASH_CHIPCS_MASK;
     2de:	8d b1       	in	r24, 0x0d	; 13
     2e0:	83 60       	ori	r24, 0x03	; 3
     2e2:	8d b9       	out	0x0d, r24	; 13
				DATAFLASH_CHIPCS_PORT |= DATAFLASH_CHIPCS_MASK;
     2e4:	8e b1       	in	r24, 0x0e	; 14
     2e6:	83 60       	ori	r24, 0x03	; 3
     2e8:	8e b9       	out	0x0e, r24	; 14
	/* Hardware Initialization */
	LEDs_Init();
	Joystick_Init();
	SPI_Init(SPI_SPEED_FCPU_DIV_2 | SPI_ORDER_MSB_FIRST | SPI_SCK_LEAD_FALLING | SPI_SAMPLE_TRAILING | SPI_MODE_MASTER);
	Dataflash_Init();
	USB_Init();
     2ea:	94 d5       	rcall	.+2856   	; 0xe14 <USB_Init>

	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
}
     2ec:	90 c0       	rjmp	.+288    	; 0x40e <DataflashManager_ResetDataflashProtections>

000002ee <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     2ee:	c4 df       	rcall	.-120    	; 0x278 <SetupHardware>

	/* Create a regular character stream for the interface so that it can be used with the stdio.h functions */
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
     2f0:	82 e5       	ldi	r24, 0x52	; 82
     2f2:	91 e0       	ldi	r25, 0x01	; 1
     2f4:	67 ed       	ldi	r22, 0xD7	; 215
     2f6:	71 e0       	ldi	r23, 0x01	; 1
     2f8:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <CDC_Device_CreateStream>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     2fc:	8b b1       	in	r24, 0x0b	; 11
     2fe:	8f 70       	andi	r24, 0x0F	; 15
     300:	80 61       	ori	r24, 0x10	; 16
     302:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     304:	78 94       	sei

	for (;;)
	{
		CheckJoystickMovement();
     306:	85 df       	rcall	.-246    	; 0x212 <CheckJoystickMovement>

		/* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
		CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     308:	82 e5       	ldi	r24, 0x52	; 82
     30a:	91 e0       	ldi	r25, 0x01	; 1
     30c:	0e 94 b9 0b 	call	0x1772	; 0x1772 <CDC_Device_ReceiveByte>

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     310:	82 e5       	ldi	r24, 0x52	; 82
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	0e 94 37 0c 	call	0x186e	; 0x186e <CDC_Device_USBTask>
		MS_Device_USBTask(&Disk_MS_Interface);
     318:	88 e6       	ldi	r24, 0x68	; 104
     31a:	91 e0       	ldi	r25, 0x01	; 1
     31c:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <MS_Device_USBTask>
		USB_USBTask();
     320:	0e 94 a6 0b 	call	0x174c	; 0x174c <USB_USBTask>
     324:	f0 cf       	rjmp	.-32     	; 0x306 <main+0x18>

00000326 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     326:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     328:	92 30       	cpi	r25, 0x02	; 2
     32a:	49 f0       	breq	.+18     	; 0x33e <CALLBACK_USB_GetDescriptor+0x18>
     32c:	93 30       	cpi	r25, 0x03	; 3
     32e:	61 f0       	breq	.+24     	; 0x348 <CALLBACK_USB_GetDescriptor+0x22>
     330:	91 30       	cpi	r25, 0x01	; 1
     332:	f9 f4       	brne	.+62     	; 0x372 <CALLBACK_USB_GetDescriptor+0x4c>
     334:	e8 e9       	ldi	r30, 0x98	; 152
     336:	f0 e0       	ldi	r31, 0x00	; 0
     338:	22 e1       	ldi	r18, 0x12	; 18
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	1e c0       	rjmp	.+60     	; 0x37a <CALLBACK_USB_GetDescriptor+0x54>
     33e:	ea ea       	ldi	r30, 0xAA	; 170
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	2d e5       	ldi	r18, 0x5D	; 93
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	19 c0       	rjmp	.+50     	; 0x37a <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     348:	81 30       	cpi	r24, 0x01	; 1
     34a:	49 f0       	breq	.+18     	; 0x35e <CALLBACK_USB_GetDescriptor+0x38>
     34c:	81 30       	cpi	r24, 0x01	; 1
     34e:	18 f0       	brcs	.+6      	; 0x356 <CALLBACK_USB_GetDescriptor+0x30>
     350:	82 30       	cpi	r24, 0x02	; 2
     352:	79 f4       	brne	.+30     	; 0x372 <CALLBACK_USB_GetDescriptor+0x4c>
     354:	08 c0       	rjmp	.+16     	; 0x366 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     356:	e7 e0       	ldi	r30, 0x07	; 7
     358:	f1 e0       	ldi	r31, 0x01	; 1
     35a:	84 91       	lpm	r24, Z+
     35c:	07 c0       	rjmp	.+14     	; 0x36c <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     35e:	eb e0       	ldi	r30, 0x0B	; 11
     360:	f1 e0       	ldi	r31, 0x01	; 1
     362:	84 91       	lpm	r24, Z+
     364:	03 c0       	rjmp	.+6      	; 0x36c <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     366:	e5 e2       	ldi	r30, 0x25	; 37
     368:	f1 e0       	ldi	r31, 0x01	; 1
     36a:	84 91       	lpm	r24, Z+
     36c:	28 2f       	mov	r18, r24
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	04 c0       	rjmp	.+8      	; 0x37a <CALLBACK_USB_GetDescriptor+0x54>
     372:	e0 e0       	ldi	r30, 0x00	; 0
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     37a:	ed 93       	st	X+, r30
     37c:	fc 93       	st	X, r31
	return Size;
}
     37e:	c9 01       	movw	r24, r18
     380:	08 95       	ret

00000382 <Dataflash_SelectChipFromPage>:
			 *
			 *  \param[in] PageAddress  Address of the page to manipulate, ranging from
			 *                          0 to ((DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS) - 1).
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
     382:	9c 01       	movw	r18, r24
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     384:	8e b1       	in	r24, 0x0e	; 14
     386:	83 60       	ori	r24, 0x03	; 3
     388:	8e b9       	out	0x0e, r24	; 14
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
				Dataflash_DeselectChip();

				if (PageAddress >= (DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS))
     38a:	80 e4       	ldi	r24, 0x40	; 64
     38c:	20 30       	cpi	r18, 0x00	; 0
     38e:	38 07       	cpc	r19, r24
     390:	58 f4       	brcc	.+22     	; 0x3a8 <Dataflash_SelectChipFromPage+0x26>
				  return;

				if (PageAddress & 0x01)
     392:	20 ff       	sbrs	r18, 0
     394:	05 c0       	rjmp	.+10     	; 0x3a0 <Dataflash_SelectChipFromPage+0x1e>
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     396:	8e b1       	in	r24, 0x0e	; 14
     398:	8c 7f       	andi	r24, 0xFC	; 252
     39a:	81 60       	ori	r24, 0x01	; 1
     39c:	8e b9       	out	0x0e, r24	; 14
     39e:	08 95       	ret
     3a0:	8e b1       	in	r24, 0x0e	; 14
     3a2:	8c 7f       	andi	r24, 0xFC	; 252
     3a4:	82 60       	ori	r24, 0x02	; 2
     3a6:	8e b9       	out	0x0e, r24	; 14
     3a8:	08 95       	ret

000003aa <Dataflash_ToggleSelectedChipCS>:
			 *  or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     3aa:	8e b1       	in	r24, 0x0e	; 14
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     3ac:	9e b1       	in	r25, 0x0e	; 14
     3ae:	93 60       	ori	r25, 0x03	; 3
     3b0:	9e b9       	out	0x0e, r25	; 14
     3b2:	9e b1       	in	r25, 0x0e	; 14
     3b4:	83 70       	andi	r24, 0x03	; 3
     3b6:	9c 7f       	andi	r25, 0xFC	; 252
     3b8:	89 2b       	or	r24, r25
     3ba:	8e b9       	out	0x0e, r24	; 14
			{
				uint8_t SelectedChipMask = Dataflash_GetSelectedChip();

				Dataflash_DeselectChip();
				Dataflash_SelectChip(SelectedChipMask);
			}
     3bc:	08 95       	ret

000003be <Dataflash_WaitWhileBusy>:
			/** Spin-loops while the currently selected dataflash is busy executing a command, such as a main
			 *  memory page program or main memory to buffer transfer.
			 */
			static inline void Dataflash_WaitWhileBusy(void)
			{
				Dataflash_ToggleSelectedChipCS();
     3be:	f5 df       	rcall	.-22     	; 0x3aa <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     3c0:	87 ed       	ldi	r24, 0xD7	; 215
     3c2:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     3c4:	0d b4       	in	r0, 0x2d	; 45
     3c6:	07 fe       	sbrs	r0, 7
     3c8:	fd cf       	rjmp	.-6      	; 0x3c4 <Dataflash_WaitWhileBusy+0x6>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     3ca:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     3cc:	0d b4       	in	r0, 0x2d	; 45
     3ce:	07 fe       	sbrs	r0, 7
     3d0:	fd cf       	rjmp	.-6      	; 0x3cc <Dataflash_WaitWhileBusy+0xe>
				Dataflash_SendByte(DF_CMD_GETSTATUS);
				while (!(Dataflash_ReceiveByte() & DF_STATUS_READY));
     3d2:	0e b4       	in	r0, 0x2e	; 46
     3d4:	07 fe       	sbrs	r0, 7
     3d6:	f9 cf       	rjmp	.-14     	; 0x3ca <Dataflash_WaitWhileBusy+0xc>
				Dataflash_ToggleSelectedChipCS();
			}
     3d8:	e8 cf       	rjmp	.-48     	; 0x3aa <Dataflash_ToggleSelectedChipCS>

000003da <Dataflash_SendAddressBytes>:
			 *  \param[in] BufferByte   Address within the dataflash's buffer
			 */
			static inline void Dataflash_SendAddressBytes(uint16_t PageAddress,
			                                              const uint16_t BufferByte)
			{
				PageAddress >>= 1;
     3da:	9c 01       	movw	r18, r24
     3dc:	36 95       	lsr	r19
     3de:	27 95       	ror	r18

				Dataflash_SendByte(PageAddress >> 5);
     3e0:	36 e0       	ldi	r19, 0x06	; 6
     3e2:	96 95       	lsr	r25
     3e4:	87 95       	ror	r24
     3e6:	3a 95       	dec	r19
     3e8:	e1 f7       	brne	.-8      	; 0x3e2 <Dataflash_SendAddressBytes+0x8>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     3ea:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     3ec:	0d b4       	in	r0, 0x2d	; 45
     3ee:	07 fe       	sbrs	r0, 7
     3f0:	fd cf       	rjmp	.-6      	; 0x3ec <Dataflash_SendAddressBytes+0x12>
				Dataflash_SendByte((PageAddress << 3) | (BufferByte >> 8));
     3f2:	82 2f       	mov	r24, r18
     3f4:	88 0f       	add	r24, r24
     3f6:	88 0f       	add	r24, r24
     3f8:	88 0f       	add	r24, r24
     3fa:	87 2b       	or	r24, r23
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     3fc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     3fe:	0d b4       	in	r0, 0x2d	; 45
     400:	07 fe       	sbrs	r0, 7
     402:	fd cf       	rjmp	.-6      	; 0x3fe <Dataflash_SendAddressBytes+0x24>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     404:	6e bd       	out	0x2e, r22	; 46
				while (!(SPSR & (1 << SPIF)));
     406:	0d b4       	in	r0, 0x2d	; 45
     408:	07 fe       	sbrs	r0, 7
     40a:	fd cf       	rjmp	.-6      	; 0x406 <Dataflash_SendAddressBytes+0x2c>
				Dataflash_SendByte(BufferByte);
			}
     40c:	08 95       	ret

0000040e <DataflashManager_ResetDataflashProtections>:
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     40e:	8e b1       	in	r24, 0x0e	; 14
     410:	8c 7f       	andi	r24, 0xFC	; 252
     412:	82 60       	ori	r24, 0x02	; 2
     414:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     416:	87 ed       	ldi	r24, 0xD7	; 215
     418:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     41a:	0d b4       	in	r0, 0x2d	; 45
     41c:	07 fe       	sbrs	r0, 7
     41e:	fd cf       	rjmp	.-6      	; 0x41a <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     420:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     422:	0d b4       	in	r0, 0x2d	; 45
     424:	07 fe       	sbrs	r0, 7
     426:	fd cf       	rjmp	.-6      	; 0x422 <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     428:	0e b4       	in	r0, 0x2e	; 46
     42a:	01 fe       	sbrs	r0, 1
     42c:	15 c0       	rjmp	.+42     	; 0x458 <DataflashManager_ResetDataflashProtections+0x4a>
	{
		Dataflash_ToggleSelectedChipCS();
     42e:	bd df       	rcall	.-134    	; 0x3aa <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     430:	8d e3       	ldi	r24, 0x3D	; 61
     432:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     434:	0d b4       	in	r0, 0x2d	; 45
     436:	07 fe       	sbrs	r0, 7
     438:	fd cf       	rjmp	.-6      	; 0x434 <DataflashManager_ResetDataflashProtections+0x26>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     43a:	8a e2       	ldi	r24, 0x2A	; 42
     43c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     43e:	0d b4       	in	r0, 0x2d	; 45
     440:	07 fe       	sbrs	r0, 7
     442:	fd cf       	rjmp	.-6      	; 0x43e <DataflashManager_ResetDataflashProtections+0x30>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     444:	8f e7       	ldi	r24, 0x7F	; 127
     446:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     448:	0d b4       	in	r0, 0x2d	; 45
     44a:	07 fe       	sbrs	r0, 7
     44c:	fd cf       	rjmp	.-6      	; 0x448 <DataflashManager_ResetDataflashProtections+0x3a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     44e:	8a e9       	ldi	r24, 0x9A	; 154
     450:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     452:	0d b4       	in	r0, 0x2d	; 45
     454:	07 fe       	sbrs	r0, 7
     456:	fd cf       	rjmp	.-6      	; 0x452 <DataflashManager_ResetDataflashProtections+0x44>
     458:	8e b1       	in	r24, 0x0e	; 14
     45a:	8c 7f       	andi	r24, 0xFC	; 252
     45c:	81 60       	ori	r24, 0x01	; 1
     45e:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     460:	87 ed       	ldi	r24, 0xD7	; 215
     462:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     464:	0d b4       	in	r0, 0x2d	; 45
     466:	07 fe       	sbrs	r0, 7
     468:	fd cf       	rjmp	.-6      	; 0x464 <DataflashManager_ResetDataflashProtections+0x56>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     46a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     46c:	0d b4       	in	r0, 0x2d	; 45
     46e:	07 fe       	sbrs	r0, 7
     470:	fd cf       	rjmp	.-6      	; 0x46c <DataflashManager_ResetDataflashProtections+0x5e>
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     472:	0e b4       	in	r0, 0x2e	; 46
     474:	01 fe       	sbrs	r0, 1
     476:	15 c0       	rjmp	.+42     	; 0x4a2 <DataflashManager_ResetDataflashProtections+0x94>
	{
		Dataflash_ToggleSelectedChipCS();
     478:	98 df       	rcall	.-208    	; 0x3aa <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     47a:	8d e3       	ldi	r24, 0x3D	; 61
     47c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     47e:	0d b4       	in	r0, 0x2d	; 45
     480:	07 fe       	sbrs	r0, 7
     482:	fd cf       	rjmp	.-6      	; 0x47e <DataflashManager_ResetDataflashProtections+0x70>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     484:	8a e2       	ldi	r24, 0x2A	; 42
     486:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     488:	0d b4       	in	r0, 0x2d	; 45
     48a:	07 fe       	sbrs	r0, 7
     48c:	fd cf       	rjmp	.-6      	; 0x488 <DataflashManager_ResetDataflashProtections+0x7a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     48e:	8f e7       	ldi	r24, 0x7F	; 127
     490:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     492:	0d b4       	in	r0, 0x2d	; 45
     494:	07 fe       	sbrs	r0, 7
     496:	fd cf       	rjmp	.-6      	; 0x492 <DataflashManager_ResetDataflashProtections+0x84>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     498:	8a e9       	ldi	r24, 0x9A	; 154
     49a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     49c:	0d b4       	in	r0, 0x2d	; 45
     49e:	07 fe       	sbrs	r0, 7
     4a0:	fd cf       	rjmp	.-6      	; 0x49c <DataflashManager_ResetDataflashProtections+0x8e>
     4a2:	8e b1       	in	r24, 0x0e	; 14
     4a4:	83 60       	ori	r24, 0x03	; 3
     4a6:	8e b9       	out	0x0e, r24	; 14
	}
	#endif

	/* Deselect current Dataflash chip */
	Dataflash_DeselectChip();
}
     4a8:	08 95       	ret

000004aa <DataflashManager_CheckDataflashOperation>:
     4aa:	8e b1       	in	r24, 0x0e	; 14
     4ac:	8c 7f       	andi	r24, 0xFC	; 252
     4ae:	82 60       	ori	r24, 0x02	; 2
     4b0:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4b2:	8f e9       	ldi	r24, 0x9F	; 159
     4b4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4b6:	0d b4       	in	r0, 0x2d	; 45
     4b8:	07 fe       	sbrs	r0, 7
     4ba:	fd cf       	rjmp	.-6      	; 0x4b6 <DataflashManager_CheckDataflashOperation+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     4bc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4be:	0d b4       	in	r0, 0x2d	; 45
     4c0:	07 fe       	sbrs	r0, 7
     4c2:	fd cf       	rjmp	.-6      	; 0x4be <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     4c4:	9e b5       	in	r25, 0x2e	; 46
     4c6:	8e b1       	in	r24, 0x0e	; 14
     4c8:	83 60       	ori	r24, 0x03	; 3
     4ca:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     4cc:	9f 31       	cpi	r25, 0x1F	; 31
     4ce:	11 f0       	breq	.+4      	; 0x4d4 <DataflashManager_CheckDataflashOperation+0x2a>
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	08 95       	ret
     4d4:	8e b1       	in	r24, 0x0e	; 14
     4d6:	8c 7f       	andi	r24, 0xFC	; 252
     4d8:	81 60       	ori	r24, 0x01	; 1
     4da:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4dc:	8f e9       	ldi	r24, 0x9F	; 159
     4de:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4e0:	0d b4       	in	r0, 0x2d	; 45
     4e2:	07 fe       	sbrs	r0, 7
     4e4:	fd cf       	rjmp	.-6      	; 0x4e0 <DataflashManager_CheckDataflashOperation+0x36>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     4e6:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4e8:	0d b4       	in	r0, 0x2d	; 45
     4ea:	07 fe       	sbrs	r0, 7
     4ec:	fd cf       	rjmp	.-6      	; 0x4e8 <DataflashManager_CheckDataflashOperation+0x3e>
				return SPDR;
     4ee:	9e b5       	in	r25, 0x2e	; 46
     4f0:	8e b1       	in	r24, 0x0e	; 14
     4f2:	83 60       	ori	r24, 0x03	; 3
     4f4:	8e b9       	out	0x0e, r24	; 14
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	9f 31       	cpi	r25, 0x1F	; 31
     4fa:	09 f4       	brne	.+2      	; 0x4fe <DataflashManager_CheckDataflashOperation+0x54>
     4fc:	81 e0       	ldi	r24, 0x01	; 1
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     4fe:	08 95       	ret

00000500 <DataflashManager_ReadBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to read
 */
void DataflashManager_ReadBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
     500:	af 92       	push	r10
     502:	bf 92       	push	r11
     504:	cf 92       	push	r12
     506:	df 92       	push	r13
     508:	ef 92       	push	r14
     50a:	ff 92       	push	r15
     50c:	0f 93       	push	r16
     50e:	1f 93       	push	r17
     510:	df 93       	push	r29
     512:	cf 93       	push	r28
     514:	0f 92       	push	r0
     516:	cd b7       	in	r28, 0x3d	; 61
     518:	de b7       	in	r29, 0x3e	; 62
     51a:	5c 01       	movw	r10, r24
     51c:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     51e:	e9 e0       	ldi	r30, 0x09	; 9
     520:	44 0f       	add	r20, r20
     522:	55 1f       	adc	r21, r21
     524:	66 1f       	adc	r22, r22
     526:	77 1f       	adc	r23, r23
     528:	ea 95       	dec	r30
     52a:	d1 f7       	brne	.-12     	; 0x520 <DataflashManager_ReadBlocks+0x20>
     52c:	db 01       	movw	r26, r22
     52e:	ca 01       	movw	r24, r20
     530:	3a e0       	ldi	r19, 0x0A	; 10
     532:	b6 95       	lsr	r27
     534:	a7 95       	ror	r26
     536:	97 95       	ror	r25
     538:	87 95       	ror	r24
     53a:	3a 95       	dec	r19
     53c:	d1 f7       	brne	.-12     	; 0x532 <DataflashManager_ReadBlocks+0x32>
     53e:	8c 01       	movw	r16, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     540:	2f ef       	ldi	r18, 0xFF	; 255
     542:	c2 2e       	mov	r12, r18
     544:	23 e0       	ldi	r18, 0x03	; 3
     546:	d2 2e       	mov	r13, r18
     548:	c4 22       	and	r12, r20
     54a:	d5 22       	and	r13, r21
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     54c:	1a df       	rcall	.-460    	; 0x382 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     54e:	82 ed       	ldi	r24, 0xD2	; 210
     550:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     552:	0d b4       	in	r0, 0x2d	; 45
     554:	07 fe       	sbrs	r0, 7
     556:	fd cf       	rjmp	.-6      	; 0x552 <DataflashManager_ReadBlocks+0x52>

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     558:	c8 01       	movw	r24, r16
     55a:	b6 01       	movw	r22, r12
     55c:	3e df       	rcall	.-388    	; 0x3da <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     55e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     560:	0d b4       	in	r0, 0x2d	; 45
     562:	07 fe       	sbrs	r0, 7
     564:	fd cf       	rjmp	.-6      	; 0x560 <DataflashManager_ReadBlocks+0x60>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     566:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     568:	0d b4       	in	r0, 0x2d	; 45
     56a:	07 fe       	sbrs	r0, 7
     56c:	fd cf       	rjmp	.-6      	; 0x568 <DataflashManager_ReadBlocks+0x68>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     56e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     570:	0d b4       	in	r0, 0x2d	; 45
     572:	07 fe       	sbrs	r0, 7
     574:	fd cf       	rjmp	.-6      	; 0x570 <DataflashManager_ReadBlocks+0x70>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     576:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     578:	0d b4       	in	r0, 0x2d	; 45
     57a:	07 fe       	sbrs	r0, 7
     57c:	fd cf       	rjmp	.-6      	; 0x578 <DataflashManager_ReadBlocks+0x78>
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     57e:	ce d3       	rcall	.+1948   	; 0xd1c <Endpoint_WaitUntilReady>
     580:	88 23       	and	r24, r24
     582:	09 f0       	breq	.+2      	; 0x586 <DataflashManager_ReadBlocks+0x86>
     584:	c5 c0       	rjmp	.+394    	; 0x710 <DataflashManager_ReadBlocks+0x210>
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     586:	94 e0       	ldi	r25, 0x04	; 4
     588:	d6 94       	lsr	r13
     58a:	c7 94       	ror	r12
     58c:	9a 95       	dec	r25
     58e:	e1 f7       	brne	.-8      	; 0x588 <DataflashManager_ReadBlocks+0x88>
     590:	9c 2d       	mov	r25, r12
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     592:	82 ed       	ldi	r24, 0xD2	; 210
     594:	c8 2e       	mov	r12, r24
     596:	ac c0       	rjmp	.+344    	; 0x6f0 <DataflashManager_ReadBlocks+0x1f0>
     598:	dd 24       	eor	r13, r13
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     59a:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently full */
			if (!(Endpoint_IsReadWriteAllowed()))
     59e:	85 fd       	sbrc	r24, 5
     5a0:	0b c0       	rjmp	.+22     	; 0x5b8 <DataflashManager_ReadBlocks+0xb8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5a2:	80 91 e8 00 	lds	r24, 0x00E8
     5a6:	8e 77       	andi	r24, 0x7E	; 126
     5a8:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the endpoint bank to send its contents to the host */
				Endpoint_ClearIN();

				/* Wait until the endpoint is ready for more data */
				if (Endpoint_WaitUntilReady())
     5ac:	99 83       	std	Y+1, r25	; 0x01
     5ae:	b6 d3       	rcall	.+1900   	; 0xd1c <Endpoint_WaitUntilReady>
     5b0:	99 81       	ldd	r25, Y+1	; 0x01
     5b2:	88 23       	and	r24, r24
     5b4:	09 f0       	breq	.+2      	; 0x5b8 <DataflashManager_ReadBlocks+0xb8>
     5b6:	ac c0       	rjmp	.+344    	; 0x710 <DataflashManager_ReadBlocks+0x210>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     5b8:	90 34       	cpi	r25, 0x40	; 64
     5ba:	e9 f4       	brne	.+58     	; 0x5f6 <DataflashManager_ReadBlocks+0xf6>
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     5bc:	0f 5f       	subi	r16, 0xFF	; 255
     5be:	1f 4f       	sbci	r17, 0xFF	; 255

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     5c0:	c8 01       	movw	r24, r16
     5c2:	df de       	rcall	.-578    	; 0x382 <Dataflash_SelectChipFromPage>
     5c4:	ce bc       	out	0x2e, r12	; 46
				while (!(SPSR & (1 << SPIF)));
     5c6:	0d b4       	in	r0, 0x2d	; 45
     5c8:	07 fe       	sbrs	r0, 7
     5ca:	fd cf       	rjmp	.-6      	; 0x5c6 <DataflashManager_ReadBlocks+0xc6>

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     5cc:	c8 01       	movw	r24, r16
     5ce:	60 e0       	ldi	r22, 0x00	; 0
     5d0:	70 e0       	ldi	r23, 0x00	; 0
     5d2:	03 df       	rcall	.-506    	; 0x3da <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5d4:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5d6:	0d b4       	in	r0, 0x2d	; 45
     5d8:	07 fe       	sbrs	r0, 7
     5da:	fd cf       	rjmp	.-6      	; 0x5d6 <DataflashManager_ReadBlocks+0xd6>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5dc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5de:	0d b4       	in	r0, 0x2d	; 45
     5e0:	07 fe       	sbrs	r0, 7
     5e2:	fd cf       	rjmp	.-6      	; 0x5de <DataflashManager_ReadBlocks+0xde>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5e4:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5e6:	0d b4       	in	r0, 0x2d	; 45
     5e8:	07 fe       	sbrs	r0, 7
     5ea:	fd cf       	rjmp	.-6      	; 0x5e6 <DataflashManager_ReadBlocks+0xe6>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5ec:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5ee:	0d b4       	in	r0, 0x2d	; 45
     5f0:	07 fe       	sbrs	r0, 7
     5f2:	fd cf       	rjmp	.-6      	; 0x5ee <DataflashManager_ReadBlocks+0xee>
     5f4:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     5f6:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5f8:	0d b4       	in	r0, 0x2d	; 45
     5fa:	07 fe       	sbrs	r0, 7
     5fc:	fd cf       	rjmp	.-6      	; 0x5f8 <DataflashManager_ReadBlocks+0xf8>
				return SPDR;
     5fe:	8e b5       	in	r24, 0x2e	; 46
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     600:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     604:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     606:	0d b4       	in	r0, 0x2d	; 45
     608:	07 fe       	sbrs	r0, 7
     60a:	fd cf       	rjmp	.-6      	; 0x606 <DataflashManager_ReadBlocks+0x106>
				return SPDR;
     60c:	8e b5       	in	r24, 0x2e	; 46
     60e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     612:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     614:	0d b4       	in	r0, 0x2d	; 45
     616:	07 fe       	sbrs	r0, 7
     618:	fd cf       	rjmp	.-6      	; 0x614 <DataflashManager_ReadBlocks+0x114>
				return SPDR;
     61a:	8e b5       	in	r24, 0x2e	; 46
     61c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     620:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     622:	0d b4       	in	r0, 0x2d	; 45
     624:	07 fe       	sbrs	r0, 7
     626:	fd cf       	rjmp	.-6      	; 0x622 <DataflashManager_ReadBlocks+0x122>
				return SPDR;
     628:	8e b5       	in	r24, 0x2e	; 46
     62a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     62e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     630:	0d b4       	in	r0, 0x2d	; 45
     632:	07 fe       	sbrs	r0, 7
     634:	fd cf       	rjmp	.-6      	; 0x630 <DataflashManager_ReadBlocks+0x130>
				return SPDR;
     636:	8e b5       	in	r24, 0x2e	; 46
     638:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     63c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     63e:	0d b4       	in	r0, 0x2d	; 45
     640:	07 fe       	sbrs	r0, 7
     642:	fd cf       	rjmp	.-6      	; 0x63e <DataflashManager_ReadBlocks+0x13e>
				return SPDR;
     644:	8e b5       	in	r24, 0x2e	; 46
     646:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     64a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     64c:	0d b4       	in	r0, 0x2d	; 45
     64e:	07 fe       	sbrs	r0, 7
     650:	fd cf       	rjmp	.-6      	; 0x64c <DataflashManager_ReadBlocks+0x14c>
				return SPDR;
     652:	8e b5       	in	r24, 0x2e	; 46
     654:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     658:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     65a:	0d b4       	in	r0, 0x2d	; 45
     65c:	07 fe       	sbrs	r0, 7
     65e:	fd cf       	rjmp	.-6      	; 0x65a <DataflashManager_ReadBlocks+0x15a>
				return SPDR;
     660:	8e b5       	in	r24, 0x2e	; 46
     662:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     666:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     668:	0d b4       	in	r0, 0x2d	; 45
     66a:	07 fe       	sbrs	r0, 7
     66c:	fd cf       	rjmp	.-6      	; 0x668 <DataflashManager_ReadBlocks+0x168>
				return SPDR;
     66e:	8e b5       	in	r24, 0x2e	; 46
     670:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     674:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     676:	0d b4       	in	r0, 0x2d	; 45
     678:	07 fe       	sbrs	r0, 7
     67a:	fd cf       	rjmp	.-6      	; 0x676 <DataflashManager_ReadBlocks+0x176>
				return SPDR;
     67c:	8e b5       	in	r24, 0x2e	; 46
     67e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     682:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     684:	0d b4       	in	r0, 0x2d	; 45
     686:	07 fe       	sbrs	r0, 7
     688:	fd cf       	rjmp	.-6      	; 0x684 <DataflashManager_ReadBlocks+0x184>
				return SPDR;
     68a:	8e b5       	in	r24, 0x2e	; 46
     68c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     690:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     692:	0d b4       	in	r0, 0x2d	; 45
     694:	07 fe       	sbrs	r0, 7
     696:	fd cf       	rjmp	.-6      	; 0x692 <DataflashManager_ReadBlocks+0x192>
				return SPDR;
     698:	8e b5       	in	r24, 0x2e	; 46
     69a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     69e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6a0:	0d b4       	in	r0, 0x2d	; 45
     6a2:	07 fe       	sbrs	r0, 7
     6a4:	fd cf       	rjmp	.-6      	; 0x6a0 <DataflashManager_ReadBlocks+0x1a0>
				return SPDR;
     6a6:	8e b5       	in	r24, 0x2e	; 46
     6a8:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6ac:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6ae:	0d b4       	in	r0, 0x2d	; 45
     6b0:	07 fe       	sbrs	r0, 7
     6b2:	fd cf       	rjmp	.-6      	; 0x6ae <DataflashManager_ReadBlocks+0x1ae>
				return SPDR;
     6b4:	8e b5       	in	r24, 0x2e	; 46
     6b6:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6ba:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6bc:	0d b4       	in	r0, 0x2d	; 45
     6be:	07 fe       	sbrs	r0, 7
     6c0:	fd cf       	rjmp	.-6      	; 0x6bc <DataflashManager_ReadBlocks+0x1bc>
				return SPDR;
     6c2:	8e b5       	in	r24, 0x2e	; 46
     6c4:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6c8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6ca:	0d b4       	in	r0, 0x2d	; 45
     6cc:	07 fe       	sbrs	r0, 7
     6ce:	fd cf       	rjmp	.-6      	; 0x6ca <DataflashManager_ReadBlocks+0x1ca>
				return SPDR;
     6d0:	8e b5       	in	r24, 0x2e	; 46
     6d2:	80 93 f1 00 	sts	0x00F1, r24

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     6d6:	f5 01       	movw	r30, r10
     6d8:	86 a9       	ldd	r24, Z+54	; 0x36
     6da:	88 23       	and	r24, r24
     6dc:	c9 f4       	brne	.+50     	; 0x710 <DataflashManager_ReadBlocks+0x210>
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     6de:	9f 5f       	subi	r25, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     6e0:	d3 94       	inc	r13
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     6e2:	f0 e2       	ldi	r31, 0x20	; 32
     6e4:	df 16       	cp	r13, r31
     6e6:	09 f0       	breq	.+2      	; 0x6ea <DataflashManager_ReadBlocks+0x1ea>
     6e8:	58 cf       	rjmp	.-336    	; 0x59a <DataflashManager_ReadBlocks+0x9a>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     6ea:	08 94       	sec
     6ec:	e1 08       	sbc	r14, r1
     6ee:	f1 08       	sbc	r15, r1

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     6f0:	e1 14       	cp	r14, r1
     6f2:	f1 04       	cpc	r15, r1
     6f4:	09 f0       	breq	.+2      	; 0x6f8 <DataflashManager_ReadBlocks+0x1f8>
     6f6:	50 cf       	rjmp	.-352    	; 0x598 <DataflashManager_ReadBlocks+0x98>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     6f8:	80 91 e8 00 	lds	r24, 0x00E8
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     6fc:	85 fd       	sbrc	r24, 5
     6fe:	05 c0       	rjmp	.+10     	; 0x70a <DataflashManager_ReadBlocks+0x20a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     700:	80 91 e8 00 	lds	r24, 0x00E8
     704:	8e 77       	andi	r24, 0x7E	; 126
     706:	80 93 e8 00 	sts	0x00E8, r24
     70a:	8e b1       	in	r24, 0x0e	; 14
     70c:	83 60       	ori	r24, 0x03	; 3
     70e:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearIN();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     710:	0f 90       	pop	r0
     712:	cf 91       	pop	r28
     714:	df 91       	pop	r29
     716:	1f 91       	pop	r17
     718:	0f 91       	pop	r16
     71a:	ff 90       	pop	r15
     71c:	ef 90       	pop	r14
     71e:	df 90       	pop	r13
     720:	cf 90       	pop	r12
     722:	bf 90       	pop	r11
     724:	af 90       	pop	r10
     726:	08 95       	ret

00000728 <DataflashManager_WriteBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
     728:	8f 92       	push	r8
     72a:	9f 92       	push	r9
     72c:	af 92       	push	r10
     72e:	bf 92       	push	r11
     730:	cf 92       	push	r12
     732:	df 92       	push	r13
     734:	ef 92       	push	r14
     736:	ff 92       	push	r15
     738:	0f 93       	push	r16
     73a:	1f 93       	push	r17
     73c:	df 93       	push	r29
     73e:	cf 93       	push	r28
     740:	0f 92       	push	r0
     742:	cd b7       	in	r28, 0x3d	; 61
     744:	de b7       	in	r29, 0x3e	; 62
     746:	5c 01       	movw	r10, r24
     748:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     74a:	09 e0       	ldi	r16, 0x09	; 9
     74c:	44 0f       	add	r20, r20
     74e:	55 1f       	adc	r21, r21
     750:	66 1f       	adc	r22, r22
     752:	77 1f       	adc	r23, r23
     754:	0a 95       	dec	r16
     756:	d1 f7       	brne	.-12     	; 0x74c <DataflashManager_WriteBlocks+0x24>
     758:	db 01       	movw	r26, r22
     75a:	ca 01       	movw	r24, r20
     75c:	1a e0       	ldi	r17, 0x0A	; 10
     75e:	b6 95       	lsr	r27
     760:	a7 95       	ror	r26
     762:	97 95       	ror	r25
     764:	87 95       	ror	r24
     766:	1a 95       	dec	r17
     768:	d1 f7       	brne	.-12     	; 0x75e <DataflashManager_WriteBlocks+0x36>
     76a:	8c 01       	movw	r16, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     76c:	bf ef       	ldi	r27, 0xFF	; 255
     76e:	cb 2e       	mov	r12, r27
     770:	b3 e0       	ldi	r27, 0x03	; 3
     772:	db 2e       	mov	r13, r27
     774:	c4 22       	and	r12, r20
     776:	d5 22       	and	r13, r21
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     778:	04 de       	rcall	.-1016   	; 0x382 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     77a:	83 e5       	ldi	r24, 0x53	; 83
     77c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     77e:	0d b4       	in	r0, 0x2d	; 45
     780:	07 fe       	sbrs	r0, 7
     782:	fd cf       	rjmp	.-6      	; 0x77e <DataflashManager_WriteBlocks+0x56>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
	/* Copy selected dataflash's current page contents to the Dataflash buffer */
	Dataflash_SendByte(DF_CMD_MAINMEMTOBUFF1);
	Dataflash_SendAddressBytes(CurrDFPage, 0);
     784:	c8 01       	movw	r24, r16
     786:	60 e0       	ldi	r22, 0x00	; 0
     788:	70 e0       	ldi	r23, 0x00	; 0
     78a:	27 de       	rcall	.-946    	; 0x3da <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     78c:	18 de       	rcall	.-976    	; 0x3be <Dataflash_WaitWhileBusy>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     78e:	84 e8       	ldi	r24, 0x84	; 132
     790:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     792:	0d b4       	in	r0, 0x2d	; 45
     794:	07 fe       	sbrs	r0, 7
     796:	fd cf       	rjmp	.-6      	; 0x792 <DataflashManager_WriteBlocks+0x6a>
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	b6 01       	movw	r22, r12
     79e:	1d de       	rcall	.-966    	; 0x3da <Dataflash_SendAddressBytes>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     7a0:	bd d2       	rcall	.+1402   	; 0xd1c <Endpoint_WaitUntilReady>
     7a2:	88 23       	and	r24, r24
     7a4:	09 f0       	breq	.+2      	; 0x7a8 <DataflashManager_WriteBlocks+0x80>
     7a6:	ea c0       	rjmp	.+468    	; 0x97c <DataflashManager_WriteBlocks+0x254>
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     7a8:	a4 e0       	ldi	r26, 0x04	; 4
     7aa:	d6 94       	lsr	r13
     7ac:	c7 94       	ror	r12
     7ae:	aa 95       	dec	r26
     7b0:	e1 f7       	brne	.-8      	; 0x7aa <DataflashManager_WriteBlocks+0x82>
     7b2:	9c 2d       	mov	r25, r12
     7b4:	47 01       	movw	r8, r14
     7b6:	f5 e0       	ldi	r31, 0x05	; 5
     7b8:	88 0c       	add	r8, r8
     7ba:	99 1c       	adc	r9, r9
     7bc:	fa 95       	dec	r31
     7be:	e1 f7       	brne	.-8      	; 0x7b8 <DataflashManager_WriteBlocks+0x90>
     7c0:	dd 24       	eor	r13, r13
     7c2:	bd c0       	rjmp	.+378    	; 0x93e <DataflashManager_WriteBlocks+0x216>
     7c4:	cc 24       	eor	r12, r12
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     7c6:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently empty */
			if (!(Endpoint_IsReadWriteAllowed()))
     7ca:	85 fd       	sbrc	r24, 5
     7cc:	0b c0       	rjmp	.+22     	; 0x7e4 <DataflashManager_WriteBlocks+0xbc>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     7ce:	80 91 e8 00 	lds	r24, 0x00E8
     7d2:	8b 77       	andi	r24, 0x7B	; 123
     7d4:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the current endpoint bank */
				Endpoint_ClearOUT();

				/* Wait until the host has sent another packet */
				if (Endpoint_WaitUntilReady())
     7d8:	99 83       	std	Y+1, r25	; 0x01
     7da:	a0 d2       	rcall	.+1344   	; 0xd1c <Endpoint_WaitUntilReady>
     7dc:	99 81       	ldd	r25, Y+1	; 0x01
     7de:	88 23       	and	r24, r24
     7e0:	09 f0       	breq	.+2      	; 0x7e4 <DataflashManager_WriteBlocks+0xbc>
     7e2:	cc c0       	rjmp	.+408    	; 0x97c <DataflashManager_WriteBlocks+0x254>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     7e4:	90 34       	cpi	r25, 0x40	; 64
     7e6:	09 f0       	breq	.+2      	; 0x7ea <DataflashManager_WriteBlocks+0xc2>
     7e8:	39 c0       	rjmp	.+114    	; 0x85c <DataflashManager_WriteBlocks+0x134>
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
     7ea:	e9 dd       	rcall	.-1070   	; 0x3be <Dataflash_WaitWhileBusy>
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     7ec:	dd 20       	and	r13, r13
     7ee:	11 f4       	brne	.+4      	; 0x7f4 <DataflashManager_WriteBlocks+0xcc>
     7f0:	83 e8       	ldi	r24, 0x83	; 131
     7f2:	01 c0       	rjmp	.+2      	; 0x7f6 <DataflashManager_WriteBlocks+0xce>
     7f4:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7f6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7f8:	0d b4       	in	r0, 0x2d	; 45
     7fa:	07 fe       	sbrs	r0, 7
     7fc:	fd cf       	rjmp	.-6      	; 0x7f8 <DataflashManager_WriteBlocks+0xd0>
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     7fe:	c8 01       	movw	r24, r16
     800:	60 e0       	ldi	r22, 0x00	; 0
     802:	70 e0       	ldi	r23, 0x00	; 0
     804:	ea dd       	rcall	.-1068   	; 0x3da <Dataflash_SendAddressBytes>

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     806:	0f 5f       	subi	r16, 0xFF	; 255
     808:	1f 4f       	sbci	r17, 0xFF	; 255
			 *  or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     80a:	8e b1       	in	r24, 0x0e	; 14

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     80c:	83 70       	andi	r24, 0x03	; 3
     80e:	81 30       	cpi	r24, 0x01	; 1
     810:	09 f4       	brne	.+2      	; 0x814 <DataflashManager_WriteBlocks+0xec>
				  UsingSecondBuffer = !(UsingSecondBuffer);
     812:	d8 26       	eor	r13, r24

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     814:	c8 01       	movw	r24, r16
     816:	b5 dd       	rcall	.-1174   	; 0x382 <Dataflash_SelectChipFromPage>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     818:	20 e4       	ldi	r18, 0x40	; 64
     81a:	82 16       	cp	r8, r18
     81c:	91 04       	cpc	r9, r1
     81e:	78 f4       	brcc	.+30     	; 0x83e <DataflashManager_WriteBlocks+0x116>
				{
					/* Copy selected dataflash's current page contents to the Dataflash buffer */
					Dataflash_WaitWhileBusy();
     820:	ce dd       	rcall	.-1124   	; 0x3be <Dataflash_WaitWhileBusy>
					Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_MAINMEMTOBUFF2 : DF_CMD_MAINMEMTOBUFF1);
     822:	dd 20       	and	r13, r13
     824:	11 f4       	brne	.+4      	; 0x82a <DataflashManager_WriteBlocks+0x102>
     826:	83 e5       	ldi	r24, 0x53	; 83
     828:	01 c0       	rjmp	.+2      	; 0x82c <DataflashManager_WriteBlocks+0x104>
     82a:	85 e5       	ldi	r24, 0x55	; 85
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     82c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     82e:	0d b4       	in	r0, 0x2d	; 45
     830:	07 fe       	sbrs	r0, 7
     832:	fd cf       	rjmp	.-6      	; 0x82e <DataflashManager_WriteBlocks+0x106>
					Dataflash_SendAddressBytes(CurrDFPage, 0);
     834:	c8 01       	movw	r24, r16
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	cf dd       	rcall	.-1122   	; 0x3da <Dataflash_SendAddressBytes>
					Dataflash_WaitWhileBusy();
     83c:	c0 dd       	rcall	.-1152   	; 0x3be <Dataflash_WaitWhileBusy>
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
     83e:	dd 20       	and	r13, r13
     840:	11 f4       	brne	.+4      	; 0x846 <DataflashManager_WriteBlocks+0x11e>
     842:	84 e8       	ldi	r24, 0x84	; 132
     844:	01 c0       	rjmp	.+2      	; 0x848 <DataflashManager_WriteBlocks+0x120>
     846:	87 e8       	ldi	r24, 0x87	; 135
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     848:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     84a:	0d b4       	in	r0, 0x2d	; 45
     84c:	07 fe       	sbrs	r0, 7
     84e:	fd cf       	rjmp	.-6      	; 0x84a <DataflashManager_WriteBlocks+0x122>
				Dataflash_SendAddressBytes(0, 0);
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	70 e0       	ldi	r23, 0x00	; 0
     858:	c0 dd       	rcall	.-1152   	; 0x3da <Dataflash_SendAddressBytes>
     85a:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     85c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     860:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     862:	0d b4       	in	r0, 0x2d	; 45
     864:	07 fe       	sbrs	r0, 7
     866:	fd cf       	rjmp	.-6      	; 0x862 <DataflashManager_WriteBlocks+0x13a>
     868:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     86c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     86e:	0d b4       	in	r0, 0x2d	; 45
     870:	07 fe       	sbrs	r0, 7
     872:	fd cf       	rjmp	.-6      	; 0x86e <DataflashManager_WriteBlocks+0x146>
     874:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     878:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     87a:	0d b4       	in	r0, 0x2d	; 45
     87c:	07 fe       	sbrs	r0, 7
     87e:	fd cf       	rjmp	.-6      	; 0x87a <DataflashManager_WriteBlocks+0x152>
     880:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     884:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     886:	0d b4       	in	r0, 0x2d	; 45
     888:	07 fe       	sbrs	r0, 7
     88a:	fd cf       	rjmp	.-6      	; 0x886 <DataflashManager_WriteBlocks+0x15e>
     88c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     890:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     892:	0d b4       	in	r0, 0x2d	; 45
     894:	07 fe       	sbrs	r0, 7
     896:	fd cf       	rjmp	.-6      	; 0x892 <DataflashManager_WriteBlocks+0x16a>
     898:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     89c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     89e:	0d b4       	in	r0, 0x2d	; 45
     8a0:	07 fe       	sbrs	r0, 7
     8a2:	fd cf       	rjmp	.-6      	; 0x89e <DataflashManager_WriteBlocks+0x176>
     8a4:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8a8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8aa:	0d b4       	in	r0, 0x2d	; 45
     8ac:	07 fe       	sbrs	r0, 7
     8ae:	fd cf       	rjmp	.-6      	; 0x8aa <DataflashManager_WriteBlocks+0x182>
     8b0:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8b4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8b6:	0d b4       	in	r0, 0x2d	; 45
     8b8:	07 fe       	sbrs	r0, 7
     8ba:	fd cf       	rjmp	.-6      	; 0x8b6 <DataflashManager_WriteBlocks+0x18e>
     8bc:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8c0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8c2:	0d b4       	in	r0, 0x2d	; 45
     8c4:	07 fe       	sbrs	r0, 7
     8c6:	fd cf       	rjmp	.-6      	; 0x8c2 <DataflashManager_WriteBlocks+0x19a>
     8c8:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8cc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8ce:	0d b4       	in	r0, 0x2d	; 45
     8d0:	07 fe       	sbrs	r0, 7
     8d2:	fd cf       	rjmp	.-6      	; 0x8ce <DataflashManager_WriteBlocks+0x1a6>
     8d4:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8d8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8da:	0d b4       	in	r0, 0x2d	; 45
     8dc:	07 fe       	sbrs	r0, 7
     8de:	fd cf       	rjmp	.-6      	; 0x8da <DataflashManager_WriteBlocks+0x1b2>
     8e0:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8e4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8e6:	0d b4       	in	r0, 0x2d	; 45
     8e8:	07 fe       	sbrs	r0, 7
     8ea:	fd cf       	rjmp	.-6      	; 0x8e6 <DataflashManager_WriteBlocks+0x1be>
     8ec:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8f0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8f2:	0d b4       	in	r0, 0x2d	; 45
     8f4:	07 fe       	sbrs	r0, 7
     8f6:	fd cf       	rjmp	.-6      	; 0x8f2 <DataflashManager_WriteBlocks+0x1ca>
     8f8:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8fc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8fe:	0d b4       	in	r0, 0x2d	; 45
     900:	07 fe       	sbrs	r0, 7
     902:	fd cf       	rjmp	.-6      	; 0x8fe <DataflashManager_WriteBlocks+0x1d6>
     904:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     908:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     90a:	0d b4       	in	r0, 0x2d	; 45
     90c:	07 fe       	sbrs	r0, 7
     90e:	fd cf       	rjmp	.-6      	; 0x90a <DataflashManager_WriteBlocks+0x1e2>
     910:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     914:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     916:	0d b4       	in	r0, 0x2d	; 45
     918:	07 fe       	sbrs	r0, 7
     91a:	fd cf       	rjmp	.-6      	; 0x916 <DataflashManager_WriteBlocks+0x1ee>

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     91c:	f5 01       	movw	r30, r10
     91e:	86 a9       	ldd	r24, Z+54	; 0x36
     920:	88 23       	and	r24, r24
     922:	61 f5       	brne	.+88     	; 0x97c <DataflashManager_WriteBlocks+0x254>
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     924:	9f 5f       	subi	r25, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     926:	c3 94       	inc	r12
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     928:	f0 e2       	ldi	r31, 0x20	; 32
     92a:	cf 16       	cp	r12, r31
     92c:	09 f0       	breq	.+2      	; 0x930 <DataflashManager_WriteBlocks+0x208>
     92e:	4b cf       	rjmp	.-362    	; 0x7c6 <DataflashManager_WriteBlocks+0x9e>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     930:	08 94       	sec
     932:	e1 08       	sbc	r14, r1
     934:	f1 08       	sbc	r15, r1
     936:	20 ee       	ldi	r18, 0xE0	; 224
     938:	3f ef       	ldi	r19, 0xFF	; 255
     93a:	82 0e       	add	r8, r18
     93c:	93 1e       	adc	r9, r19

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     93e:	e1 14       	cp	r14, r1
     940:	f1 04       	cpc	r15, r1
     942:	09 f0       	breq	.+2      	; 0x946 <DataflashManager_WriteBlocks+0x21e>
     944:	3f cf       	rjmp	.-386    	; 0x7c4 <DataflashManager_WriteBlocks+0x9c>
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
     946:	3b dd       	rcall	.-1418   	; 0x3be <Dataflash_WaitWhileBusy>
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     948:	dd 20       	and	r13, r13
     94a:	11 f4       	brne	.+4      	; 0x950 <DataflashManager_WriteBlocks+0x228>
     94c:	83 e8       	ldi	r24, 0x83	; 131
     94e:	01 c0       	rjmp	.+2      	; 0x952 <DataflashManager_WriteBlocks+0x22a>
     950:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     952:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     954:	0d b4       	in	r0, 0x2d	; 45
     956:	07 fe       	sbrs	r0, 7
     958:	fd cf       	rjmp	.-6      	; 0x954 <DataflashManager_WriteBlocks+0x22c>
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
     95a:	c8 01       	movw	r24, r16
     95c:	60 e0       	ldi	r22, 0x00	; 0
     95e:	70 e0       	ldi	r23, 0x00	; 0
     960:	3c dd       	rcall	.-1416   	; 0x3da <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     962:	2d dd       	rcall	.-1446   	; 0x3be <Dataflash_WaitWhileBusy>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     964:	80 91 e8 00 	lds	r24, 0x00E8

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     968:	85 fd       	sbrc	r24, 5
     96a:	05 c0       	rjmp	.+10     	; 0x976 <DataflashManager_WriteBlocks+0x24e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     96c:	80 91 e8 00 	lds	r24, 0x00E8
     970:	8b 77       	andi	r24, 0x7B	; 123
     972:	80 93 e8 00 	sts	0x00E8, r24
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     976:	8e b1       	in	r24, 0x0e	; 14
     978:	83 60       	ori	r24, 0x03	; 3
     97a:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearOUT();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     97c:	0f 90       	pop	r0
     97e:	cf 91       	pop	r28
     980:	df 91       	pop	r29
     982:	1f 91       	pop	r17
     984:	0f 91       	pop	r16
     986:	ff 90       	pop	r15
     988:	ef 90       	pop	r14
     98a:	df 90       	pop	r13
     98c:	cf 90       	pop	r12
     98e:	bf 90       	pop	r11
     990:	af 90       	pop	r10
     992:	9f 90       	pop	r9
     994:	8f 90       	pop	r8
     996:	08 95       	ret

00000998 <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
     998:	0f 93       	push	r16
     99a:	1f 93       	push	r17
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	8c 01       	movw	r16, r24
     9a2:	86 2f       	mov	r24, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     9a4:	f8 01       	movw	r30, r16
     9a6:	46 8d       	ldd	r20, Z+30	; 0x1e
     9a8:	55 8d       	ldd	r21, Z+29	; 0x1d
     9aa:	64 8d       	ldd	r22, Z+28	; 0x1c
     9ac:	73 8d       	ldd	r23, Z+27	; 0x1b

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     9ae:	c1 a1       	ldd	r28, Z+33	; 0x21
     9b0:	d0 a1       	ldd	r29, Z+32	; 0x20

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     9b2:	40 30       	cpi	r20, 0x00	; 0
     9b4:	f0 e8       	ldi	r31, 0x80	; 128
     9b6:	5f 07       	cpc	r21, r31
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	6f 07       	cpc	r22, r31
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	7f 07       	cpc	r23, r31
     9c0:	68 f0       	brcs	.+26     	; 0x9dc <SCSI_Command_ReadWrite_10+0x44>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     9c2:	80 91 a1 01 	lds	r24, 0x01A1
     9c6:	80 7f       	andi	r24, 0xF0	; 240
     9c8:	85 60       	ori	r24, 0x05	; 5
     9ca:	80 93 a1 01 	sts	0x01A1, r24
     9ce:	81 e2       	ldi	r24, 0x21	; 33
     9d0:	80 93 ab 01 	sts	0x01AB, r24
     9d4:	10 92 ac 01 	sts	0x01AC, r1
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	21 c0       	rjmp	.+66     	; 0xa1e <SCSI_Command_ReadWrite_10+0x86>
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif
	
	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
     9dc:	88 23       	and	r24, r24
     9de:	21 f0       	breq	.+8      	; 0x9e8 <SCSI_Command_ReadWrite_10+0x50>
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     9e0:	c8 01       	movw	r24, r16
     9e2:	9e 01       	movw	r18, r28
     9e4:	8d dd       	rcall	.-1254   	; 0x500 <DataflashManager_ReadBlocks>
     9e6:	03 c0       	rjmp	.+6      	; 0x9ee <SCSI_Command_ReadWrite_10+0x56>
	else
	  DataflashManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     9e8:	c8 01       	movw	r24, r16
     9ea:	9e 01       	movw	r18, r28
     9ec:	9d de       	rcall	.-710    	; 0x728 <DataflashManager_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     9ee:	9e 01       	movw	r18, r28
     9f0:	40 e0       	ldi	r20, 0x00	; 0
     9f2:	50 e0       	ldi	r21, 0x00	; 0
     9f4:	89 e0       	ldi	r24, 0x09	; 9
     9f6:	22 0f       	add	r18, r18
     9f8:	33 1f       	adc	r19, r19
     9fa:	44 1f       	adc	r20, r20
     9fc:	55 1f       	adc	r21, r21
     9fe:	8a 95       	dec	r24
     a00:	d1 f7       	brne	.-12     	; 0x9f6 <SCSI_Command_ReadWrite_10+0x5e>
     a02:	f8 01       	movw	r30, r16
     a04:	82 89       	ldd	r24, Z+18	; 0x12
     a06:	93 89       	ldd	r25, Z+19	; 0x13
     a08:	a4 89       	ldd	r26, Z+20	; 0x14
     a0a:	b5 89       	ldd	r27, Z+21	; 0x15
     a0c:	82 1b       	sub	r24, r18
     a0e:	93 0b       	sbc	r25, r19
     a10:	a4 0b       	sbc	r26, r20
     a12:	b5 0b       	sbc	r27, r21
     a14:	82 8b       	std	Z+18, r24	; 0x12
     a16:	93 8b       	std	Z+19, r25	; 0x13
     a18:	a4 8b       	std	Z+20, r26	; 0x14
     a1a:	b5 8b       	std	Z+21, r27	; 0x15
     a1c:	81 e0       	ldi	r24, 0x01	; 1

	return true;
}
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	1f 91       	pop	r17
     a24:	0f 91       	pop	r16
     a26:	08 95       	ret

00000a28 <SCSI_DecodeSCSICommand>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean true if the command completed successfully, false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     a28:	cf 92       	push	r12
     a2a:	df 92       	push	r13
     a2c:	ef 92       	push	r14
     a2e:	ff 92       	push	r15
     a30:	0f 93       	push	r16
     a32:	1f 93       	push	r17
     a34:	df 93       	push	r29
     a36:	cf 93       	push	r28
     a38:	cd b7       	in	r28, 0x3d	; 61
     a3a:	de b7       	in	r29, 0x3e	; 62
     a3c:	28 97       	sbiw	r28, 0x08	; 8
     a3e:	0f b6       	in	r0, 0x3f	; 63
     a40:	f8 94       	cli
     a42:	de bf       	out	0x3e, r29	; 62
     a44:	0f be       	out	0x3f, r0	; 63
     a46:	cd bf       	out	0x3d, r28	; 61
     a48:	7c 01       	movw	r14, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     a4a:	fc 01       	movw	r30, r24
     a4c:	81 8d       	ldd	r24, Z+25	; 0x19
     a4e:	8d 31       	cpi	r24, 0x1D	; 29
     a50:	09 f4       	brne	.+2      	; 0xa54 <SCSI_DecodeSCSICommand+0x2c>
     a52:	a6 c0       	rjmp	.+332    	; 0xba0 <SCSI_DecodeSCSICommand+0x178>
     a54:	8e 31       	cpi	r24, 0x1E	; 30
     a56:	78 f4       	brcc	.+30     	; 0xa76 <SCSI_DecodeSCSICommand+0x4e>
     a58:	83 30       	cpi	r24, 0x03	; 3
     a5a:	09 f4       	brne	.+2      	; 0xa5e <SCSI_DecodeSCSICommand+0x36>
     a5c:	52 c0       	rjmp	.+164    	; 0xb02 <SCSI_DecodeSCSICommand+0xda>
     a5e:	84 30       	cpi	r24, 0x04	; 4
     a60:	20 f4       	brcc	.+8      	; 0xa6a <SCSI_DecodeSCSICommand+0x42>
     a62:	88 23       	and	r24, r24
     a64:	09 f4       	brne	.+2      	; 0xa68 <SCSI_DecodeSCSICommand+0x40>
     a66:	d9 c0       	rjmp	.+434    	; 0xc1a <SCSI_DecodeSCSICommand+0x1f2>
     a68:	de c0       	rjmp	.+444    	; 0xc26 <SCSI_DecodeSCSICommand+0x1fe>
     a6a:	82 31       	cpi	r24, 0x12	; 18
     a6c:	b9 f0       	breq	.+46     	; 0xa9c <SCSI_DecodeSCSICommand+0x74>
     a6e:	8a 31       	cpi	r24, 0x1A	; 26
     a70:	09 f0       	breq	.+2      	; 0xa74 <SCSI_DecodeSCSICommand+0x4c>
     a72:	d9 c0       	rjmp	.+434    	; 0xc26 <SCSI_DecodeSCSICommand+0x1fe>
     a74:	b8 c0       	rjmp	.+368    	; 0xbe6 <SCSI_DecodeSCSICommand+0x1be>
     a76:	88 32       	cpi	r24, 0x28	; 40
     a78:	09 f4       	brne	.+2      	; 0xa7c <SCSI_DecodeSCSICommand+0x54>
     a7a:	af c0       	rjmp	.+350    	; 0xbda <SCSI_DecodeSCSICommand+0x1b2>
     a7c:	89 32       	cpi	r24, 0x29	; 41
     a7e:	38 f4       	brcc	.+14     	; 0xa8e <SCSI_DecodeSCSICommand+0x66>
     a80:	8e 31       	cpi	r24, 0x1E	; 30
     a82:	09 f4       	brne	.+2      	; 0xa86 <SCSI_DecodeSCSICommand+0x5e>
     a84:	ca c0       	rjmp	.+404    	; 0xc1a <SCSI_DecodeSCSICommand+0x1f2>
     a86:	85 32       	cpi	r24, 0x25	; 37
     a88:	09 f0       	breq	.+2      	; 0xa8c <SCSI_DecodeSCSICommand+0x64>
     a8a:	cd c0       	rjmp	.+410    	; 0xc26 <SCSI_DecodeSCSICommand+0x1fe>
     a8c:	5d c0       	rjmp	.+186    	; 0xb48 <SCSI_DecodeSCSICommand+0x120>
     a8e:	8a 32       	cpi	r24, 0x2A	; 42
     a90:	09 f4       	brne	.+2      	; 0xa94 <SCSI_DecodeSCSICommand+0x6c>
     a92:	a0 c0       	rjmp	.+320    	; 0xbd4 <SCSI_DecodeSCSICommand+0x1ac>
     a94:	8f 32       	cpi	r24, 0x2F	; 47
     a96:	09 f0       	breq	.+2      	; 0xa9a <SCSI_DecodeSCSICommand+0x72>
     a98:	c6 c0       	rjmp	.+396    	; 0xc26 <SCSI_DecodeSCSICommand+0x1fe>
     a9a:	bf c0       	rjmp	.+382    	; 0xc1a <SCSI_DecodeSCSICommand+0x1f2>
     a9c:	f7 01       	movw	r30, r14
     a9e:	05 8d       	ldd	r16, Z+29	; 0x1d
     aa0:	14 8d       	ldd	r17, Z+28	; 0x1c
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     aa2:	82 8d       	ldd	r24, Z+26	; 0x1a
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	83 70       	andi	r24, 0x03	; 3
     aa8:	90 70       	andi	r25, 0x00	; 0
     aaa:	89 2b       	or	r24, r25
     aac:	09 f0       	breq	.+2      	; 0xab0 <SCSI_DecodeSCSICommand+0x88>
     aae:	7c c0       	rjmp	.+248    	; 0xba8 <SCSI_DecodeSCSICommand+0x180>
     ab0:	83 8d       	ldd	r24, Z+27	; 0x1b
     ab2:	88 23       	and	r24, r24
     ab4:	09 f0       	breq	.+2      	; 0xab8 <SCSI_DecodeSCSICommand+0x90>
     ab6:	78 c0       	rjmp	.+240    	; 0xba8 <SCSI_DecodeSCSICommand+0x180>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     ab8:	68 01       	movw	r12, r16
     aba:	05 32       	cpi	r16, 0x25	; 37
     abc:	11 05       	cpc	r17, r1
     abe:	18 f0       	brcs	.+6      	; 0xac6 <SCSI_DecodeSCSICommand+0x9e>
     ac0:	94 e2       	ldi	r25, 0x24	; 36
     ac2:	c9 2e       	mov	r12, r25
     ac4:	d1 2c       	mov	r13, r1
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     ac6:	81 eb       	ldi	r24, 0xB1	; 177
     ac8:	91 e0       	ldi	r25, 0x01	; 1
     aca:	b6 01       	movw	r22, r12
     acc:	40 e0       	ldi	r20, 0x00	; 0
     ace:	50 e0       	ldi	r21, 0x00	; 0
     ad0:	65 d4       	rcall	.+2250   	; 0x139c <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     ad2:	c8 01       	movw	r24, r16
     ad4:	8c 19       	sub	r24, r12
     ad6:	9d 09       	sbc	r25, r13
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	70 e0       	ldi	r23, 0x00	; 0
     adc:	79 d3       	rcall	.+1778   	; 0x11d0 <Endpoint_Null_Stream>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ade:	80 91 e8 00 	lds	r24, 0x00E8
     ae2:	8e 77       	andi	r24, 0x7E	; 126
     ae4:	80 93 e8 00 	sts	0x00E8, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     ae8:	96 01       	movw	r18, r12
     aea:	40 e0       	ldi	r20, 0x00	; 0
     aec:	50 e0       	ldi	r21, 0x00	; 0
     aee:	f7 01       	movw	r30, r14
     af0:	82 89       	ldd	r24, Z+18	; 0x12
     af2:	93 89       	ldd	r25, Z+19	; 0x13
     af4:	a4 89       	ldd	r26, Z+20	; 0x14
     af6:	b5 89       	ldd	r27, Z+21	; 0x15
     af8:	82 1b       	sub	r24, r18
     afa:	93 0b       	sbc	r25, r19
     afc:	a4 0b       	sbc	r26, r20
     afe:	b5 0b       	sbc	r27, r21
     b00:	87 c0       	rjmp	.+270    	; 0xc10 <SCSI_DecodeSCSICommand+0x1e8>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
     b02:	f7 01       	movw	r30, r14
     b04:	15 8d       	ldd	r17, Z+29	; 0x1d
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     b06:	01 2f       	mov	r16, r17
     b08:	13 31       	cpi	r17, 0x13	; 19
     b0a:	08 f0       	brcs	.+2      	; 0xb0e <SCSI_DecodeSCSICommand+0xe6>
     b0c:	02 e1       	ldi	r16, 0x12	; 18

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     b0e:	8f e9       	ldi	r24, 0x9F	; 159
     b10:	91 e0       	ldi	r25, 0x01	; 1
     b12:	60 2f       	mov	r22, r16
     b14:	70 e0       	ldi	r23, 0x00	; 0
     b16:	40 e0       	ldi	r20, 0x00	; 0
     b18:	50 e0       	ldi	r21, 0x00	; 0
     b1a:	40 d4       	rcall	.+2176   	; 0x139c <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     b1c:	81 2f       	mov	r24, r17
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	80 1b       	sub	r24, r16
     b22:	91 09       	sbc	r25, r1
     b24:	60 e0       	ldi	r22, 0x00	; 0
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	53 d3       	rcall	.+1702   	; 0x11d0 <Endpoint_Null_Stream>
     b2a:	80 91 e8 00 	lds	r24, 0x00E8
     b2e:	8e 77       	andi	r24, 0x7E	; 126
     b30:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     b34:	f7 01       	movw	r30, r14
     b36:	82 89       	ldd	r24, Z+18	; 0x12
     b38:	93 89       	ldd	r25, Z+19	; 0x13
     b3a:	a4 89       	ldd	r26, Z+20	; 0x14
     b3c:	b5 89       	ldd	r27, Z+21	; 0x15
     b3e:	80 1b       	sub	r24, r16
     b40:	91 09       	sbc	r25, r1
     b42:	a1 09       	sbc	r26, r1
     b44:	b1 09       	sbc	r27, r1
     b46:	64 c0       	rjmp	.+200    	; 0xc10 <SCSI_DecodeSCSICommand+0x1e8>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN = (LUN_MEDIA_BLOCKS - 1);
     b48:	8f ef       	ldi	r24, 0xFF	; 255
     b4a:	9f e7       	ldi	r25, 0x7F	; 127
     b4c:	a0 e0       	ldi	r26, 0x00	; 0
     b4e:	b0 e0       	ldi	r27, 0x00	; 0
     b50:	89 83       	std	Y+1, r24	; 0x01
     b52:	9a 83       	std	Y+2, r25	; 0x02
     b54:	ab 83       	std	Y+3, r26	; 0x03
     b56:	bc 83       	std	Y+4, r27	; 0x04
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	92 e0       	ldi	r25, 0x02	; 2
     b5c:	a0 e0       	ldi	r26, 0x00	; 0
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	8d 83       	std	Y+5, r24	; 0x05
     b62:	9e 83       	std	Y+6, r25	; 0x06
     b64:	af 83       	std	Y+7, r26	; 0x07
     b66:	b8 87       	std	Y+8, r27	; 0x08

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
     b68:	ce 01       	movw	r24, r28
     b6a:	01 96       	adiw	r24, 0x01	; 1
     b6c:	64 e0       	ldi	r22, 0x04	; 4
     b6e:	70 e0       	ldi	r23, 0x00	; 0
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	50 e0       	ldi	r21, 0x00	; 0
     b74:	c1 d3       	rcall	.+1922   	; 0x12f8 <Endpoint_Write_Stream_BE>
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
     b76:	ce 01       	movw	r24, r28
     b78:	05 96       	adiw	r24, 0x05	; 5
     b7a:	64 e0       	ldi	r22, 0x04	; 4
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	40 e0       	ldi	r20, 0x00	; 0
     b80:	50 e0       	ldi	r21, 0x00	; 0
     b82:	ba d3       	rcall	.+1908   	; 0x12f8 <Endpoint_Write_Stream_BE>
     b84:	80 91 e8 00 	lds	r24, 0x00E8
     b88:	8e 77       	andi	r24, 0x7E	; 126
     b8a:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
     b8e:	f7 01       	movw	r30, r14
     b90:	82 89       	ldd	r24, Z+18	; 0x12
     b92:	93 89       	ldd	r25, Z+19	; 0x13
     b94:	a4 89       	ldd	r26, Z+20	; 0x14
     b96:	b5 89       	ldd	r27, Z+21	; 0x15
     b98:	08 97       	sbiw	r24, 0x08	; 8
     b9a:	a1 09       	sbc	r26, r1
     b9c:	b1 09       	sbc	r27, r1
     b9e:	38 c0       	rjmp	.+112    	; 0xc10 <SCSI_DecodeSCSICommand+0x1e8>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
     ba0:	f7 01       	movw	r30, r14
     ba2:	82 8d       	ldd	r24, Z+26	; 0x1a
     ba4:	82 fd       	sbrc	r24, 2
     ba6:	08 c0       	rjmp	.+16     	; 0xbb8 <SCSI_DecodeSCSICommand+0x190>
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     ba8:	80 91 a1 01 	lds	r24, 0x01A1
     bac:	80 7f       	andi	r24, 0xF0	; 240
     bae:	85 60       	ori	r24, 0x05	; 5
     bb0:	80 93 a1 01 	sts	0x01A1, r24
     bb4:	84 e2       	ldi	r24, 0x24	; 36
     bb6:	3e c0       	rjmp	.+124    	; 0xc34 <SCSI_DecodeSCSICommand+0x20c>

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
     bb8:	78 dc       	rcall	.-1808   	; 0x4aa <DataflashManager_CheckDataflashOperation>
     bba:	88 23       	and	r24, r24
     bbc:	71 f5       	brne	.+92     	; 0xc1a <SCSI_DecodeSCSICommand+0x1f2>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     bbe:	80 91 a1 01 	lds	r24, 0x01A1
     bc2:	80 7f       	andi	r24, 0xF0	; 240
     bc4:	84 60       	ori	r24, 0x04	; 4
     bc6:	80 93 a1 01 	sts	0x01A1, r24
     bca:	10 92 ab 01 	sts	0x01AB, r1
     bce:	10 92 ac 01 	sts	0x01AC, r1
     bd2:	33 c0       	rjmp	.+102    	; 0xc3a <SCSI_DecodeSCSICommand+0x212>
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
     bd4:	c7 01       	movw	r24, r14
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <SCSI_DecodeSCSICommand+0x1b6>
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
     bda:	c7 01       	movw	r24, r14
     bdc:	61 e0       	ldi	r22, 0x01	; 1
     bde:	dc de       	rcall	.-584    	; 0x998 <SCSI_Command_ReadWrite_10>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     be0:	88 23       	and	r24, r24
     be2:	59 f1       	breq	.+86     	; 0xc3a <SCSI_DecodeSCSICommand+0x212>
     be4:	2c c0       	rjmp	.+88     	; 0xc3e <SCSI_DecodeSCSICommand+0x216>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     be6:	10 92 f1 00 	sts	0x00F1, r1
     bea:	10 92 f1 00 	sts	0x00F1, r1
     bee:	10 92 f1 00 	sts	0x00F1, r1
     bf2:	10 92 f1 00 	sts	0x00F1, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     bf6:	80 91 e8 00 	lds	r24, 0x00E8
     bfa:	8e 77       	andi	r24, 0x7E	; 126
     bfc:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
     c00:	f7 01       	movw	r30, r14
     c02:	82 89       	ldd	r24, Z+18	; 0x12
     c04:	93 89       	ldd	r25, Z+19	; 0x13
     c06:	a4 89       	ldd	r26, Z+20	; 0x14
     c08:	b5 89       	ldd	r27, Z+21	; 0x15
     c0a:	04 97       	sbiw	r24, 0x04	; 4
     c0c:	a1 09       	sbc	r26, r1
     c0e:	b1 09       	sbc	r27, r1
     c10:	82 8b       	std	Z+18, r24	; 0x12
     c12:	93 8b       	std	Z+19, r25	; 0x13
     c14:	a4 8b       	std	Z+20, r26	; 0x14
     c16:	b5 8b       	std	Z+21, r27	; 0x15
     c18:	12 c0       	rjmp	.+36     	; 0xc3e <SCSI_DecodeSCSICommand+0x216>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
     c1a:	f7 01       	movw	r30, r14
     c1c:	12 8a       	std	Z+18, r1	; 0x12
     c1e:	13 8a       	std	Z+19, r1	; 0x13
     c20:	14 8a       	std	Z+20, r1	; 0x14
     c22:	15 8a       	std	Z+21, r1	; 0x15
     c24:	0c c0       	rjmp	.+24     	; 0xc3e <SCSI_DecodeSCSICommand+0x216>
			break;
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     c26:	80 91 a1 01 	lds	r24, 0x01A1
     c2a:	80 7f       	andi	r24, 0xF0	; 240
     c2c:	85 60       	ori	r24, 0x05	; 5
     c2e:	80 93 a1 01 	sts	0x01A1, r24
     c32:	80 e2       	ldi	r24, 0x20	; 32
     c34:	80 93 ab 01 	sts	0x01AB, r24
     c38:	ca cf       	rjmp	.-108    	; 0xbce <SCSI_DecodeSCSICommand+0x1a6>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	0a c0       	rjmp	.+20     	; 0xc52 <SCSI_DecodeSCSICommand+0x22a>
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     c3e:	80 91 a1 01 	lds	r24, 0x01A1
     c42:	80 7f       	andi	r24, 0xF0	; 240
     c44:	80 93 a1 01 	sts	0x01A1, r24
     c48:	10 92 ab 01 	sts	0x01AB, r1
     c4c:	10 92 ac 01 	sts	0x01AC, r1
     c50:	81 e0       	ldi	r24, 0x01	; 1

		return true;
	}

	return false;
}
     c52:	28 96       	adiw	r28, 0x08	; 8
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	f8 94       	cli
     c58:	de bf       	out	0x3e, r29	; 62
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	cd bf       	out	0x3d, r28	; 61
     c5e:	cf 91       	pop	r28
     c60:	df 91       	pop	r29
     c62:	1f 91       	pop	r17
     c64:	0f 91       	pop	r16
     c66:	ff 90       	pop	r15
     c68:	ef 90       	pop	r14
     c6a:	df 90       	pop	r13
     c6c:	cf 90       	pop	r12
     c6e:	08 95       	ret

00000c70 <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
     c70:	38 2f       	mov	r19, r24
     c72:	28 2f       	mov	r18, r24
     c74:	2c c0       	rjmp	.+88     	; 0xcce <Endpoint_ConfigureEndpoint_Prv+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     c76:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);
		
		if (EPNum == Number)
     c7a:	23 17       	cp	r18, r19
     c7c:	21 f4       	brne	.+8      	; 0xc86 <Endpoint_ConfigureEndpoint_Prv+0x16>
     c7e:	76 2f       	mov	r23, r22
     c80:	94 2f       	mov	r25, r20
     c82:	50 e0       	ldi	r21, 0x00	; 0
     c84:	06 c0       	rjmp	.+12     	; 0xc92 <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     c86:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     c8a:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
     c8e:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     c92:	91 ff       	sbrs	r25, 1
     c94:	1b c0       	rjmp	.+54     	; 0xccc <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     c96:	80 91 eb 00 	lds	r24, 0x00EB
     c9a:	8e 7f       	andi	r24, 0xFE	; 254
     c9c:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     ca0:	80 91 ed 00 	lds	r24, 0x00ED
     ca4:	8d 7f       	andi	r24, 0xFD	; 253
     ca6:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     caa:	80 91 eb 00 	lds	r24, 0x00EB
     cae:	81 60       	ori	r24, 0x01	; 1
     cb0:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     cb4:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     cb8:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
     cbc:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     cc0:	80 91 ee 00 	lds	r24, 0x00EE
			
		if (!(Endpoint_IsConfigured()))
     cc4:	87 fd       	sbrc	r24, 7
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <Endpoint_ConfigureEndpoint_Prv+0x5c>
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else	
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     ccc:	2f 5f       	subi	r18, 0xFF	; 255
     cce:	27 30       	cpi	r18, 0x07	; 7
     cd0:	90 f2       	brcs	.-92     	; 0xc76 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     cd2:	30 93 e9 00 	sts	0x00E9, r19
     cd6:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     cd8:	08 95       	ret

00000cda <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     cda:	80 91 ea 01 	lds	r24, 0x01EA
     cde:	88 23       	and	r24, r24
     ce0:	9c f4       	brge	.+38     	; 0xd08 <Endpoint_ClearStatusStage+0x2e>
     ce2:	04 c0       	rjmp	.+8      	; 0xcec <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     ce4:	80 91 e9 01 	lds	r24, 0x01E9
     ce8:	88 23       	and	r24, r24
     cea:	b9 f0       	breq	.+46     	; 0xd1a <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     cec:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     cf0:	82 ff       	sbrs	r24, 2
     cf2:	f8 cf       	rjmp	.-16     	; 0xce4 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     cf4:	80 91 e8 00 	lds	r24, 0x00E8
     cf8:	8b 77       	andi	r24, 0x7B	; 123
     cfa:	80 93 e8 00 	sts	0x00E8, r24
     cfe:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     d00:	80 91 e9 01 	lds	r24, 0x01E9
     d04:	88 23       	and	r24, r24
     d06:	49 f0       	breq	.+18     	; 0xd1a <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d08:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     d0c:	80 ff       	sbrs	r24, 0
     d0e:	f8 cf       	rjmp	.-16     	; 0xd00 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d10:	80 91 e8 00 	lds	r24, 0x00E8
     d14:	8e 77       	andi	r24, 0x7E	; 126
     d16:	80 93 e8 00 	sts	0x00E8, r24
     d1a:	08 95       	ret

00000d1c <Endpoint_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     d1c:	40 91 e4 00 	lds	r20, 0x00E4
     d20:	50 91 e5 00 	lds	r21, 0x00E5
     d24:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
     d26:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
     d2a:	80 78       	andi	r24, 0x80	; 128
     d2c:	80 38       	cpi	r24, 0x80	; 128
     d2e:	29 f4       	brne	.+10     	; 0xd3a <Endpoint_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d30:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
     d34:	80 ff       	sbrs	r24, 0
     d36:	05 c0       	rjmp	.+10     	; 0xd42 <Endpoint_WaitUntilReady+0x26>
     d38:	22 c0       	rjmp	.+68     	; 0xd7e <Endpoint_WaitUntilReady+0x62>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     d3a:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     d3e:	82 fd       	sbrc	r24, 2
     d40:	1e c0       	rjmp	.+60     	; 0xd7e <Endpoint_WaitUntilReady+0x62>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     d42:	80 91 e9 01 	lds	r24, 0x01E9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     d46:	88 23       	and	r24, r24
     d48:	11 f4       	brne	.+4      	; 0xd4e <Endpoint_WaitUntilReady+0x32>
     d4a:	82 e0       	ldi	r24, 0x02	; 2
     d4c:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     d4e:	85 30       	cpi	r24, 0x05	; 5
     d50:	11 f4       	brne	.+4      	; 0xd56 <Endpoint_WaitUntilReady+0x3a>
     d52:	83 e0       	ldi	r24, 0x03	; 3
     d54:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     d56:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     d5a:	85 ff       	sbrs	r24, 5
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <Endpoint_WaitUntilReady+0x46>
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	08 95       	ret
     d62:	80 91 e4 00 	lds	r24, 0x00E4
     d66:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     d6a:	84 17       	cp	r24, r20
     d6c:	95 07       	cpc	r25, r21
     d6e:	d9 f2       	breq	.-74     	; 0xd26 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     d70:	22 23       	and	r18, r18
     d72:	11 f4       	brne	.+4      	; 0xd78 <Endpoint_WaitUntilReady+0x5c>
     d74:	84 e0       	ldi	r24, 0x04	; 4
     d76:	08 95       	ret
     d78:	21 50       	subi	r18, 0x01	; 1
     d7a:	ac 01       	movw	r20, r24
     d7c:	d4 cf       	rjmp	.-88     	; 0xd26 <Endpoint_WaitUntilReady+0xa>
     d7e:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     d80:	08 95       	ret

00000d82 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     d82:	ef 92       	push	r14
     d84:	ff 92       	push	r15
     d86:	0f 93       	push	r16
     d88:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     d8a:	4d d0       	rcall	.+154    	; 0xe26 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     d8c:	54 d0       	rcall	.+168    	; 0xe36 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     d8e:	08 ed       	ldi	r16, 0xD8	; 216
     d90:	10 e0       	ldi	r17, 0x00	; 0
     d92:	f8 01       	movw	r30, r16
     d94:	80 81       	ld	r24, Z
     d96:	8f 77       	andi	r24, 0x7F	; 127
     d98:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
     d9a:	80 81       	ld	r24, Z
     d9c:	80 68       	ori	r24, 0x80	; 128
     d9e:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     da0:	80 81       	ld	r24, Z
     da2:	8f 7d       	andi	r24, 0xDF	; 223
     da4:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     da6:	e7 ed       	ldi	r30, 0xD7	; 215
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	80 68       	ori	r24, 0x80	; 128
     dae:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     db0:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     db2:	10 92 e9 01 	sts	0x01E9, r1
	USB_Device_ConfigurationNumber  = 0;
     db6:	10 92 e5 01 	sts	0x01E5, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     dba:	10 92 e7 01 	sts	0x01E7, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     dbe:	10 92 e6 01 	sts	0x01E6, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     dc2:	80 ee       	ldi	r24, 0xE0	; 224
     dc4:	e8 2e       	mov	r14, r24
     dc6:	f1 2c       	mov	r15, r1
     dc8:	f7 01       	movw	r30, r14
     dca:	80 81       	ld	r24, Z
     dcc:	8b 7f       	andi	r24, 0xFB	; 251
     dce:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     dd0:	f8 01       	movw	r30, r16
     dd2:	80 81       	ld	r24, Z
     dd4:	81 60       	ori	r24, 0x01	; 1
     dd6:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	60 e0       	ldi	r22, 0x00	; 0
     ddc:	42 e0       	ldi	r20, 0x02	; 2
     dde:	48 df       	rcall	.-368    	; 0xc70 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     de0:	e1 ee       	ldi	r30, 0xE1	; 225
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	8e 7f       	andi	r24, 0xFE	; 254
     de8:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     dea:	e2 ee       	ldi	r30, 0xE2	; 226
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	81 60       	ori	r24, 0x01	; 1
     df2:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     df4:	80 81       	ld	r24, Z
     df6:	88 60       	ori	r24, 0x08	; 8
     df8:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     dfa:	f7 01       	movw	r30, r14
     dfc:	80 81       	ld	r24, Z
     dfe:	8e 7f       	andi	r24, 0xFE	; 254
     e00:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     e02:	f8 01       	movw	r30, r16
     e04:	80 81       	ld	r24, Z
     e06:	80 61       	ori	r24, 0x10	; 16
     e08:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     e0a:	1f 91       	pop	r17
     e0c:	0f 91       	pop	r16
     e0e:	ff 90       	pop	r15
     e10:	ef 90       	pop	r14
     e12:	08 95       	ret

00000e14 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     e14:	e7 ed       	ldi	r30, 0xD7	; 215
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	81 60       	ori	r24, 0x01	; 1
     e1c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	80 93 e8 01 	sts	0x01E8, r24

	USB_ResetInterface();
}
     e24:	ae cf       	rjmp	.-164    	; 0xd82 <USB_ResetInterface>

00000e26 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     e26:	e8 ed       	ldi	r30, 0xD8	; 216
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	8c 7f       	andi	r24, 0xFC	; 252
     e2e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     e30:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     e34:	08 95       	ret

00000e36 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     e36:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     e3a:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     e3e:	08 95       	ret

00000e40 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     e40:	1f 92       	push	r1
     e42:	0f 92       	push	r0
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	0f 92       	push	r0
     e48:	0b b6       	in	r0, 0x3b	; 59
     e4a:	0f 92       	push	r0
     e4c:	11 24       	eor	r1, r1
     e4e:	2f 93       	push	r18
     e50:	3f 93       	push	r19
     e52:	4f 93       	push	r20
     e54:	5f 93       	push	r21
     e56:	6f 93       	push	r22
     e58:	7f 93       	push	r23
     e5a:	8f 93       	push	r24
     e5c:	9f 93       	push	r25
     e5e:	af 93       	push	r26
     e60:	bf 93       	push	r27
     e62:	ef 93       	push	r30
     e64:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     e66:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     e6a:	82 ff       	sbrs	r24, 2
     e6c:	0a c0       	rjmp	.+20     	; 0xe82 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     e6e:	80 91 e2 00 	lds	r24, 0x00E2
     e72:	82 ff       	sbrs	r24, 2
     e74:	06 c0       	rjmp	.+12     	; 0xe82 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     e76:	80 91 e1 00 	lds	r24, 0x00E1
     e7a:	8b 7f       	andi	r24, 0xFB	; 251
     e7c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     e80:	64 d4       	rcall	.+2248   	; 0x174a <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     e82:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     e86:	80 ff       	sbrs	r24, 0
     e88:	1d c0       	rjmp	.+58     	; 0xec4 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     e8a:	80 91 d8 00 	lds	r24, 0x00D8
     e8e:	80 ff       	sbrs	r24, 0
     e90:	19 c0       	rjmp	.+50     	; 0xec4 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     e92:	80 91 da 00 	lds	r24, 0x00DA
     e96:	8e 7f       	andi	r24, 0xFE	; 254
     e98:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     e9c:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     ea0:	80 ff       	sbrs	r24, 0
     ea2:	0c c0       	rjmp	.+24     	; 0xebc <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     ea4:	8c e0       	ldi	r24, 0x0C	; 12
     ea6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     ea8:	8e e0       	ldi	r24, 0x0E	; 14
     eaa:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     eac:	09 b4       	in	r0, 0x29	; 41
     eae:	00 fe       	sbrs	r0, 0
     eb0:	fd cf       	rjmp	.-6      	; 0xeac <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	80 93 e9 01 	sts	0x01E9, r24
			EVENT_USB_Device_Connect();
     eb8:	75 d9       	rcall	.-3350   	; 0x1a4 <EVENT_USB_Device_Connect>
     eba:	04 c0       	rjmp	.+8      	; 0xec4 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     ebc:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     ebe:	10 92 e9 01 	sts	0x01E9, r1
			EVENT_USB_Device_Disconnect();
     ec2:	75 d9       	rcall	.-3350   	; 0x1ae <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     ec4:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     ec8:	80 ff       	sbrs	r24, 0
     eca:	18 c0       	rjmp	.+48     	; 0xefc <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     ecc:	80 91 e2 00 	lds	r24, 0x00E2
     ed0:	80 ff       	sbrs	r24, 0
     ed2:	14 c0       	rjmp	.+40     	; 0xefc <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     ed4:	80 91 e2 00 	lds	r24, 0x00E2
     ed8:	8e 7f       	andi	r24, 0xFE	; 254
     eda:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     ede:	80 91 e2 00 	lds	r24, 0x00E2
     ee2:	80 61       	ori	r24, 0x10	; 16
     ee4:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     ee8:	80 91 d8 00 	lds	r24, 0x00D8
     eec:	80 62       	ori	r24, 0x20	; 32
     eee:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     ef2:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     ef4:	85 e0       	ldi	r24, 0x05	; 5
     ef6:	80 93 e9 01 	sts	0x01E9, r24
		EVENT_USB_Device_Suspend();
     efa:	27 d4       	rcall	.+2126   	; 0x174a <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     efc:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     f00:	84 ff       	sbrs	r24, 4
     f02:	2d c0       	rjmp	.+90     	; 0xf5e <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     f04:	80 91 e2 00 	lds	r24, 0x00E2
     f08:	84 ff       	sbrs	r24, 4
     f0a:	29 c0       	rjmp	.+82     	; 0xf5e <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     f0c:	8c e0       	ldi	r24, 0x0C	; 12
     f0e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     f10:	8e e0       	ldi	r24, 0x0E	; 14
     f12:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     f14:	09 b4       	in	r0, 0x29	; 41
     f16:	00 fe       	sbrs	r0, 0
     f18:	fd cf       	rjmp	.-6      	; 0xf14 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     f1a:	80 91 d8 00 	lds	r24, 0x00D8
     f1e:	8f 7d       	andi	r24, 0xDF	; 223
     f20:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     f24:	80 91 e1 00 	lds	r24, 0x00E1
     f28:	8f 7e       	andi	r24, 0xEF	; 239
     f2a:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     f2e:	80 91 e2 00 	lds	r24, 0x00E2
     f32:	8f 7e       	andi	r24, 0xEF	; 239
     f34:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     f38:	80 91 e2 00 	lds	r24, 0x00E2
     f3c:	81 60       	ori	r24, 0x01	; 1
     f3e:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     f42:	80 91 e5 01 	lds	r24, 0x01E5
     f46:	88 23       	and	r24, r24
     f48:	31 f4       	brne	.+12     	; 0xf56 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     f4a:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     f4e:	87 fd       	sbrc	r24, 7
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <__vector_10+0x116>
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	01 c0       	rjmp	.+2      	; 0xf58 <__vector_10+0x118>
     f56:	84 e0       	ldi	r24, 0x04	; 4
     f58:	80 93 e9 01 	sts	0x01E9, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     f5c:	f6 d3       	rcall	.+2028   	; 0x174a <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     f5e:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     f62:	83 ff       	sbrs	r24, 3
     f64:	22 c0       	rjmp	.+68     	; 0xfaa <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     f66:	80 91 e2 00 	lds	r24, 0x00E2
     f6a:	83 ff       	sbrs	r24, 3
     f6c:	1e c0       	rjmp	.+60     	; 0xfaa <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     f6e:	80 91 e1 00 	lds	r24, 0x00E1
     f72:	87 7f       	andi	r24, 0xF7	; 247
     f74:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     f78:	82 e0       	ldi	r24, 0x02	; 2
     f7a:	80 93 e9 01 	sts	0x01E9, r24
		USB_Device_ConfigurationNumber = 0;
     f7e:	10 92 e5 01 	sts	0x01E5, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     f82:	80 91 e1 00 	lds	r24, 0x00E1
     f86:	8e 7f       	andi	r24, 0xFE	; 254
     f88:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     f8c:	80 91 e2 00 	lds	r24, 0x00E2
     f90:	8e 7f       	andi	r24, 0xFE	; 254
     f92:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     f96:	80 91 e2 00 	lds	r24, 0x00E2
     f9a:	80 61       	ori	r24, 0x10	; 16
     f9c:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	60 e0       	ldi	r22, 0x00	; 0
     fa4:	42 e0       	ldi	r20, 0x02	; 2
     fa6:	64 de       	rcall	.-824    	; 0xc70 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     fa8:	d0 d3       	rcall	.+1952   	; 0x174a <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     faa:	ff 91       	pop	r31
     fac:	ef 91       	pop	r30
     fae:	bf 91       	pop	r27
     fb0:	af 91       	pop	r26
     fb2:	9f 91       	pop	r25
     fb4:	8f 91       	pop	r24
     fb6:	7f 91       	pop	r23
     fb8:	6f 91       	pop	r22
     fba:	5f 91       	pop	r21
     fbc:	4f 91       	pop	r20
     fbe:	3f 91       	pop	r19
     fc0:	2f 91       	pop	r18
     fc2:	0f 90       	pop	r0
     fc4:	0b be       	out	0x3b, r0	; 59
     fc6:	0f 90       	pop	r0
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	0f 90       	pop	r0
     fcc:	1f 90       	pop	r1
     fce:	18 95       	reti

00000fd0 <Endpoint_Write_Control_Stream_LE>:
     fd0:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     fd2:	40 91 f0 01 	lds	r20, 0x01F0
     fd6:	50 91 f1 01 	lds	r21, 0x01F1
     fda:	46 17       	cp	r20, r22
     fdc:	57 07       	cpc	r21, r23
     fde:	18 f4       	brcc	.+6      	; 0xfe6 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     fe0:	f9 01       	movw	r30, r18
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	3d c0       	rjmp	.+122    	; 0x1060 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     fe6:	61 15       	cp	r22, r1
     fe8:	71 05       	cpc	r23, r1
     fea:	11 f0       	breq	.+4      	; 0xff0 <Endpoint_Write_Control_Stream_LE+0x20>
     fec:	ab 01       	movw	r20, r22
     fee:	f8 cf       	rjmp	.-16     	; 0xfe0 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ff0:	80 91 e8 00 	lds	r24, 0x00E8
     ff4:	8e 77       	andi	r24, 0x7E	; 126
     ff6:	80 93 e8 00 	sts	0x00E8, r24
     ffa:	40 e0       	ldi	r20, 0x00	; 0
     ffc:	50 e0       	ldi	r21, 0x00	; 0
     ffe:	f0 cf       	rjmp	.-32     	; 0xfe0 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1000:	80 91 e9 01 	lds	r24, 0x01E9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1004:	88 23       	and	r24, r24
    1006:	f1 f1       	breq	.+124    	; 0x1084 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1008:	85 30       	cpi	r24, 0x05	; 5
    100a:	f1 f1       	breq	.+124    	; 0x1088 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    100c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1010:	83 ff       	sbrs	r24, 3
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <Endpoint_Write_Control_Stream_LE+0x48>
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1018:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    101c:	82 fd       	sbrc	r24, 2
    101e:	2c c0       	rjmp	.+88     	; 0x1078 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1020:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1024:	80 ff       	sbrs	r24, 0
    1026:	1c c0       	rjmp	.+56     	; 0x1060 <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    1028:	20 91 f2 00 	lds	r18, 0x00F2
    102c:	30 91 f3 00 	lds	r19, 0x00F3
    1030:	07 c0       	rjmp	.+14     	; 0x1040 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1032:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1034:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1038:	41 50       	subi	r20, 0x01	; 1
    103a:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    103c:	2f 5f       	subi	r18, 0xFF	; 255
    103e:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1040:	41 15       	cp	r20, r1
    1042:	51 05       	cpc	r21, r1
    1044:	19 f0       	breq	.+6      	; 0x104c <Endpoint_Write_Control_Stream_LE+0x7c>
    1046:	28 30       	cpi	r18, 0x08	; 8
    1048:	31 05       	cpc	r19, r1
    104a:	98 f3       	brcs	.-26     	; 0x1032 <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	28 30       	cpi	r18, 0x08	; 8
    1050:	31 05       	cpc	r19, r1
    1052:	09 f4       	brne	.+2      	; 0x1056 <Endpoint_Write_Control_Stream_LE+0x86>
    1054:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1056:	80 91 e8 00 	lds	r24, 0x00E8
    105a:	8e 77       	andi	r24, 0x7E	; 126
    105c:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1060:	41 15       	cp	r20, r1
    1062:	51 05       	cpc	r21, r1
    1064:	69 f6       	brne	.-102    	; 0x1000 <Endpoint_Write_Control_Stream_LE+0x30>
    1066:	99 23       	and	r25, r25
    1068:	59 f6       	brne	.-106    	; 0x1000 <Endpoint_Write_Control_Stream_LE+0x30>
    106a:	06 c0       	rjmp	.+12     	; 0x1078 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    106c:	80 91 e9 01 	lds	r24, 0x01E9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1070:	88 23       	and	r24, r24
    1072:	41 f0       	breq	.+16     	; 0x1084 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1074:	85 30       	cpi	r24, 0x05	; 5
    1076:	41 f0       	breq	.+16     	; 0x1088 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1078:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    107c:	82 ff       	sbrs	r24, 2
    107e:	f6 cf       	rjmp	.-20     	; 0x106c <Endpoint_Write_Control_Stream_LE+0x9c>
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	08 95       	ret
    1084:	82 e0       	ldi	r24, 0x02	; 2
    1086:	08 95       	ret
    1088:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    108a:	08 95       	ret

0000108c <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    108c:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    108e:	61 15       	cp	r22, r1
    1090:	71 05       	cpc	r23, r1
    1092:	29 f4       	brne	.+10     	; 0x109e <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1094:	80 91 e8 00 	lds	r24, 0x00E8
    1098:	8b 77       	andi	r24, 0x7B	; 123
    109a:	80 93 e8 00 	sts	0x00E8, r24
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    109e:	f9 01       	movw	r30, r18
    10a0:	22 c0       	rjmp	.+68     	; 0x10e6 <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    10a2:	80 91 e9 01 	lds	r24, 0x01E9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    10a6:	88 23       	and	r24, r24
    10a8:	71 f1       	breq	.+92     	; 0x1106 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    10aa:	85 30       	cpi	r24, 0x05	; 5
    10ac:	71 f1       	breq	.+92     	; 0x110a <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    10ae:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    10b2:	83 ff       	sbrs	r24, 3
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <Endpoint_Read_Control_Stream_LE+0x2e>
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    10ba:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    10be:	82 ff       	sbrs	r24, 2
    10c0:	f0 cf       	rjmp	.-32     	; 0x10a2 <Endpoint_Read_Control_Stream_LE+0x16>
    10c2:	06 c0       	rjmp	.+12     	; 0x10d0 <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    10c4:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    10c8:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    10ca:	61 50       	subi	r22, 0x01	; 1
    10cc:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    10ce:	31 f0       	breq	.+12     	; 0x10dc <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    10d0:	80 91 f2 00 	lds	r24, 0x00F2
    10d4:	90 91 f3 00 	lds	r25, 0x00F3
    10d8:	89 2b       	or	r24, r25
    10da:	a1 f7       	brne	.-24     	; 0x10c4 <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    10dc:	80 91 e8 00 	lds	r24, 0x00E8
    10e0:	8b 77       	andi	r24, 0x7B	; 123
    10e2:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    10e6:	61 15       	cp	r22, r1
    10e8:	71 05       	cpc	r23, r1
    10ea:	d9 f6       	brne	.-74     	; 0x10a2 <Endpoint_Read_Control_Stream_LE+0x16>
    10ec:	06 c0       	rjmp	.+12     	; 0x10fa <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    10ee:	80 91 e9 01 	lds	r24, 0x01E9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    10f2:	88 23       	and	r24, r24
    10f4:	41 f0       	breq	.+16     	; 0x1106 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    10f6:	85 30       	cpi	r24, 0x05	; 5
    10f8:	41 f0       	breq	.+16     	; 0x110a <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    10fa:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    10fe:	80 ff       	sbrs	r24, 0
    1100:	f6 cf       	rjmp	.-20     	; 0x10ee <Endpoint_Read_Control_Stream_LE+0x62>
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	08 95       	ret
    1106:	82 e0       	ldi	r24, 0x02	; 2
    1108:	08 95       	ret
    110a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    110c:	08 95       	ret

0000110e <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    110e:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1110:	40 91 f0 01 	lds	r20, 0x01F0
    1114:	50 91 f1 01 	lds	r21, 0x01F1
    1118:	46 17       	cp	r20, r22
    111a:	57 07       	cpc	r21, r23
    111c:	18 f4       	brcc	.+6      	; 0x1124 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    111e:	f9 01       	movw	r30, r18
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	40 c0       	rjmp	.+128    	; 0x11a4 <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1124:	61 15       	cp	r22, r1
    1126:	71 05       	cpc	r23, r1
    1128:	11 f0       	breq	.+4      	; 0x112e <Endpoint_Write_Control_PStream_LE+0x20>
    112a:	ab 01       	movw	r20, r22
    112c:	f8 cf       	rjmp	.-16     	; 0x111e <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    112e:	80 91 e8 00 	lds	r24, 0x00E8
    1132:	8e 77       	andi	r24, 0x7E	; 126
    1134:	80 93 e8 00 	sts	0x00E8, r24
    1138:	40 e0       	ldi	r20, 0x00	; 0
    113a:	50 e0       	ldi	r21, 0x00	; 0
    113c:	f0 cf       	rjmp	.-32     	; 0x111e <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    113e:	80 91 e9 01 	lds	r24, 0x01E9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1142:	88 23       	and	r24, r24
    1144:	09 f4       	brne	.+2      	; 0x1148 <Endpoint_Write_Control_PStream_LE+0x3a>
    1146:	40 c0       	rjmp	.+128    	; 0x11c8 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1148:	85 30       	cpi	r24, 0x05	; 5
    114a:	09 f4       	brne	.+2      	; 0x114e <Endpoint_Write_Control_PStream_LE+0x40>
    114c:	3f c0       	rjmp	.+126    	; 0x11cc <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    114e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1152:	83 ff       	sbrs	r24, 3
    1154:	02 c0       	rjmp	.+4      	; 0x115a <Endpoint_Write_Control_PStream_LE+0x4c>
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    115a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    115e:	82 fd       	sbrc	r24, 2
    1160:	2d c0       	rjmp	.+90     	; 0x11bc <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1162:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1166:	80 ff       	sbrs	r24, 0
    1168:	1d c0       	rjmp	.+58     	; 0x11a4 <Endpoint_Write_Control_PStream_LE+0x96>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    116a:	20 91 f2 00 	lds	r18, 0x00F2
    116e:	30 91 f3 00 	lds	r19, 0x00F3
    1172:	08 c0       	rjmp	.+16     	; 0x1184 <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1174:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1176:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    117a:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    117c:	41 50       	subi	r20, 0x01	; 1
    117e:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    1180:	2f 5f       	subi	r18, 0xFF	; 255
    1182:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1184:	41 15       	cp	r20, r1
    1186:	51 05       	cpc	r21, r1
    1188:	19 f0       	breq	.+6      	; 0x1190 <Endpoint_Write_Control_PStream_LE+0x82>
    118a:	28 30       	cpi	r18, 0x08	; 8
    118c:	31 05       	cpc	r19, r1
    118e:	90 f3       	brcs	.-28     	; 0x1174 <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	28 30       	cpi	r18, 0x08	; 8
    1194:	31 05       	cpc	r19, r1
    1196:	09 f4       	brne	.+2      	; 0x119a <Endpoint_Write_Control_PStream_LE+0x8c>
    1198:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    119a:	80 91 e8 00 	lds	r24, 0x00E8
    119e:	8e 77       	andi	r24, 0x7E	; 126
    11a0:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    11a4:	41 15       	cp	r20, r1
    11a6:	51 05       	cpc	r21, r1
    11a8:	51 f6       	brne	.-108    	; 0x113e <Endpoint_Write_Control_PStream_LE+0x30>
    11aa:	99 23       	and	r25, r25
    11ac:	41 f6       	brne	.-112    	; 0x113e <Endpoint_Write_Control_PStream_LE+0x30>
    11ae:	06 c0       	rjmp	.+12     	; 0x11bc <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    11b0:	80 91 e9 01 	lds	r24, 0x01E9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    11b4:	88 23       	and	r24, r24
    11b6:	41 f0       	breq	.+16     	; 0x11c8 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    11b8:	85 30       	cpi	r24, 0x05	; 5
    11ba:	41 f0       	breq	.+16     	; 0x11cc <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    11bc:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    11c0:	82 ff       	sbrs	r24, 2
    11c2:	f6 cf       	rjmp	.-20     	; 0x11b0 <Endpoint_Write_Control_PStream_LE+0xa2>
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	08 95       	ret
    11c8:	82 e0       	ldi	r24, 0x02	; 2
    11ca:	08 95       	ret
    11cc:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    11ce:	08 95       	ret

000011d0 <Endpoint_Null_Stream>:
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
    11d0:	df 92       	push	r13
    11d2:	ef 92       	push	r14
    11d4:	ff 92       	push	r15
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	ec 01       	movw	r28, r24
    11e0:	8b 01       	movw	r16, r22
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;
	
	if ((ErrorCode = Endpoint_WaitUntilReady()))
    11e2:	9c dd       	rcall	.-1224   	; 0xd1c <Endpoint_WaitUntilReady>
    11e4:	d8 2e       	mov	r13, r24
    11e6:	88 23       	and	r24, r24
    11e8:	61 f5       	brne	.+88     	; 0x1242 <Endpoint_Null_Stream+0x72>
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
    11ea:	01 15       	cp	r16, r1
    11ec:	11 05       	cpc	r17, r1
    11ee:	29 f0       	breq	.+10     	; 0x11fa <Endpoint_Null_Stream+0x2a>
	  Length -= *BytesProcessed;
    11f0:	f8 01       	movw	r30, r16
    11f2:	80 81       	ld	r24, Z
    11f4:	91 81       	ldd	r25, Z+1	; 0x01
    11f6:	c8 1b       	sub	r28, r24
    11f8:	d9 0b       	sbc	r29, r25
    11fa:	ee 24       	eor	r14, r14
    11fc:	ff 24       	eor	r15, r15
    11fe:	1f c0       	rjmp	.+62     	; 0x123e <Endpoint_Null_Stream+0x6e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1200:	80 91 e8 00 	lds	r24, 0x00E8

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1204:	85 fd       	sbrc	r24, 5
    1206:	15 c0       	rjmp	.+42     	; 0x1232 <Endpoint_Null_Stream+0x62>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1208:	80 91 e8 00 	lds	r24, 0x00E8
    120c:	8e 77       	andi	r24, 0x7E	; 126
    120e:	80 93 e8 00 	sts	0x00E8, r24
		{
			Endpoint_ClearIN();

			if (BytesProcessed != NULL)
    1212:	01 15       	cp	r16, r1
    1214:	11 05       	cpc	r17, r1
    1216:	49 f0       	breq	.+18     	; 0x122a <Endpoint_Null_Stream+0x5a>
			{
				*BytesProcessed += BytesInTransfer;
    1218:	f8 01       	movw	r30, r16
    121a:	80 81       	ld	r24, Z
    121c:	91 81       	ldd	r25, Z+1	; 0x01
    121e:	8e 0d       	add	r24, r14
    1220:	9f 1d       	adc	r25, r15
    1222:	91 83       	std	Z+1, r25	; 0x01
    1224:	80 83       	st	Z, r24
    1226:	85 e0       	ldi	r24, 0x05	; 5
    1228:	0d c0       	rjmp	.+26     	; 0x1244 <Endpoint_Null_Stream+0x74>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    122a:	78 dd       	rcall	.-1296   	; 0xd1c <Endpoint_WaitUntilReady>
    122c:	88 23       	and	r24, r24
    122e:	39 f0       	breq	.+14     	; 0x123e <Endpoint_Null_Stream+0x6e>
    1230:	09 c0       	rjmp	.+18     	; 0x1244 <Endpoint_Null_Stream+0x74>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1232:	10 92 f1 00 	sts	0x00F1, r1
		}
		else
		{
			Endpoint_Write_8(0);

			Length--;
    1236:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    1238:	08 94       	sec
    123a:	e1 1c       	adc	r14, r1
    123c:	f1 1c       	adc	r15, r1
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
    123e:	20 97       	sbiw	r28, 0x00	; 0
    1240:	f9 f6       	brne	.-66     	; 0x1200 <Endpoint_Null_Stream+0x30>
    1242:	8d 2d       	mov	r24, r13
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
    1244:	df 91       	pop	r29
    1246:	cf 91       	pop	r28
    1248:	1f 91       	pop	r17
    124a:	0f 91       	pop	r16
    124c:	ff 90       	pop	r15
    124e:	ef 90       	pop	r14
    1250:	df 90       	pop	r13
    1252:	08 95       	ret

00001254 <Endpoint_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1254:	bf 92       	push	r11
    1256:	cf 92       	push	r12
    1258:	df 92       	push	r13
    125a:	ef 92       	push	r14
    125c:	ff 92       	push	r15
    125e:	0f 93       	push	r16
    1260:	1f 93       	push	r17
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    1266:	18 2f       	mov	r17, r24
    1268:	09 2f       	mov	r16, r25
    126a:	7b 01       	movw	r14, r22
    126c:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    126e:	56 dd       	rcall	.-1364   	; 0xd1c <Endpoint_WaitUntilReady>
    1270:	b8 2e       	mov	r11, r24
    1272:	88 23       	and	r24, r24
    1274:	b1 f5       	brne	.+108    	; 0x12e2 <Endpoint_Read_Stream_LE+0x8e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1276:	81 2f       	mov	r24, r17
    1278:	90 2f       	mov	r25, r16
    127a:	9c 01       	movw	r18, r24
    127c:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    127e:	c1 14       	cp	r12, r1
    1280:	d1 04       	cpc	r13, r1
    1282:	39 f0       	breq	.+14     	; 0x1292 <Endpoint_Read_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    1284:	f6 01       	movw	r30, r12
    1286:	80 81       	ld	r24, Z
    1288:	91 81       	ldd	r25, Z+1	; 0x01
    128a:	e8 1a       	sub	r14, r24
    128c:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    128e:	c8 0f       	add	r28, r24
    1290:	d9 1f       	adc	r29, r25
    1292:	00 e0       	ldi	r16, 0x00	; 0
    1294:	10 e0       	ldi	r17, 0x00	; 0
    1296:	22 c0       	rjmp	.+68     	; 0x12dc <Endpoint_Read_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1298:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    129c:	85 fd       	sbrc	r24, 5
    129e:	16 c0       	rjmp	.+44     	; 0x12cc <Endpoint_Read_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    12a0:	80 91 e8 00 	lds	r24, 0x00E8
    12a4:	8b 77       	andi	r24, 0x7B	; 123
    12a6:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    12aa:	c1 14       	cp	r12, r1
    12ac:	d1 04       	cpc	r13, r1
    12ae:	49 f0       	breq	.+18     	; 0x12c2 <Endpoint_Read_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
    12b0:	f6 01       	movw	r30, r12
    12b2:	80 81       	ld	r24, Z
    12b4:	91 81       	ldd	r25, Z+1	; 0x01
    12b6:	80 0f       	add	r24, r16
    12b8:	91 1f       	adc	r25, r17
    12ba:	91 83       	std	Z+1, r25	; 0x01
    12bc:	80 83       	st	Z, r24
    12be:	85 e0       	ldi	r24, 0x05	; 5
    12c0:	11 c0       	rjmp	.+34     	; 0x12e4 <Endpoint_Read_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    12c2:	44 d2       	rcall	.+1160   	; 0x174c <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    12c4:	2b dd       	rcall	.-1450   	; 0xd1c <Endpoint_WaitUntilReady>
    12c6:	88 23       	and	r24, r24
    12c8:	49 f0       	breq	.+18     	; 0x12dc <Endpoint_Read_Stream_LE+0x88>
    12ca:	0c c0       	rjmp	.+24     	; 0x12e4 <Endpoint_Read_Stream_LE+0x90>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    12cc:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    12d0:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    12d2:	08 94       	sec
    12d4:	e1 08       	sbc	r14, r1
    12d6:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    12d8:	0f 5f       	subi	r16, 0xFF	; 255
    12da:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    12dc:	e1 14       	cp	r14, r1
    12de:	f1 04       	cpc	r15, r1
    12e0:	d9 f6       	brne	.-74     	; 0x1298 <Endpoint_Read_Stream_LE+0x44>
    12e2:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	1f 91       	pop	r17
    12ea:	0f 91       	pop	r16
    12ec:	ff 90       	pop	r15
    12ee:	ef 90       	pop	r14
    12f0:	df 90       	pop	r13
    12f2:	cf 90       	pop	r12
    12f4:	bf 90       	pop	r11
    12f6:	08 95       	ret

000012f8 <Endpoint_Write_Stream_BE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    12f8:	bf 92       	push	r11
    12fa:	cf 92       	push	r12
    12fc:	df 92       	push	r13
    12fe:	ef 92       	push	r14
    1300:	ff 92       	push	r15
    1302:	0f 93       	push	r16
    1304:	1f 93       	push	r17
    1306:	cf 93       	push	r28
    1308:	df 93       	push	r29
    130a:	8c 01       	movw	r16, r24
    130c:	eb 01       	movw	r28, r22
    130e:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1310:	05 dd       	rcall	.-1526   	; 0xd1c <Endpoint_WaitUntilReady>
    1312:	b8 2e       	mov	r11, r24
    1314:	88 23       	and	r24, r24
    1316:	b9 f5       	brne	.+110    	; 0x1386 <Endpoint_Write_Stream_BE+0x8e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1318:	21 97       	sbiw	r28, 0x01	; 1
    131a:	0c 0f       	add	r16, r28
    131c:	1d 1f       	adc	r17, r29
    131e:	21 96       	adiw	r28, 0x01	; 1
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1320:	c1 14       	cp	r12, r1
    1322:	d1 04       	cpc	r13, r1
    1324:	39 f0       	breq	.+14     	; 0x1334 <Endpoint_Write_Stream_BE+0x3c>
	{
		Length -= *BytesProcessed;
    1326:	f6 01       	movw	r30, r12
    1328:	80 81       	ld	r24, Z
    132a:	91 81       	ldd	r25, Z+1	; 0x01
    132c:	c8 1b       	sub	r28, r24
    132e:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1330:	08 1b       	sub	r16, r24
    1332:	19 0b       	sbc	r17, r25
    1334:	ee 24       	eor	r14, r14
    1336:	ff 24       	eor	r15, r15
    1338:	24 c0       	rjmp	.+72     	; 0x1382 <Endpoint_Write_Stream_BE+0x8a>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    133a:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    133e:	85 fd       	sbrc	r24, 5
    1340:	16 c0       	rjmp	.+44     	; 0x136e <Endpoint_Write_Stream_BE+0x76>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1342:	80 91 e8 00 	lds	r24, 0x00E8
    1346:	8e 77       	andi	r24, 0x7E	; 126
    1348:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    134c:	c1 14       	cp	r12, r1
    134e:	d1 04       	cpc	r13, r1
    1350:	49 f0       	breq	.+18     	; 0x1364 <Endpoint_Write_Stream_BE+0x6c>
			{
				*BytesProcessed += BytesInTransfer;
    1352:	f6 01       	movw	r30, r12
    1354:	80 81       	ld	r24, Z
    1356:	91 81       	ldd	r25, Z+1	; 0x01
    1358:	8e 0d       	add	r24, r14
    135a:	9f 1d       	adc	r25, r15
    135c:	91 83       	std	Z+1, r25	; 0x01
    135e:	80 83       	st	Z, r24
    1360:	85 e0       	ldi	r24, 0x05	; 5
    1362:	12 c0       	rjmp	.+36     	; 0x1388 <Endpoint_Write_Stream_BE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    1364:	f3 d1       	rcall	.+998    	; 0x174c <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1366:	da dc       	rcall	.-1612   	; 0xd1c <Endpoint_WaitUntilReady>
    1368:	88 23       	and	r24, r24
    136a:	59 f0       	breq	.+22     	; 0x1382 <Endpoint_Write_Stream_BE+0x8a>
    136c:	0d c0       	rjmp	.+26     	; 0x1388 <Endpoint_Write_Stream_BE+0x90>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    136e:	f8 01       	movw	r30, r16
    1370:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1372:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1376:	01 50       	subi	r16, 0x01	; 1
    1378:	10 40       	sbci	r17, 0x00	; 0
			Length--;
    137a:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    137c:	08 94       	sec
    137e:	e1 1c       	adc	r14, r1
    1380:	f1 1c       	adc	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1382:	20 97       	sbiw	r28, 0x00	; 0
    1384:	d1 f6       	brne	.-76     	; 0x133a <Endpoint_Write_Stream_BE+0x42>
    1386:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	1f 91       	pop	r17
    138e:	0f 91       	pop	r16
    1390:	ff 90       	pop	r15
    1392:	ef 90       	pop	r14
    1394:	df 90       	pop	r13
    1396:	cf 90       	pop	r12
    1398:	bf 90       	pop	r11
    139a:	08 95       	ret

0000139c <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    139c:	bf 92       	push	r11
    139e:	cf 92       	push	r12
    13a0:	df 92       	push	r13
    13a2:	ef 92       	push	r14
    13a4:	ff 92       	push	r15
    13a6:	0f 93       	push	r16
    13a8:	1f 93       	push	r17
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	18 2f       	mov	r17, r24
    13b0:	09 2f       	mov	r16, r25
    13b2:	7b 01       	movw	r14, r22
    13b4:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    13b6:	b2 dc       	rcall	.-1692   	; 0xd1c <Endpoint_WaitUntilReady>
    13b8:	b8 2e       	mov	r11, r24
    13ba:	88 23       	and	r24, r24
    13bc:	b1 f5       	brne	.+108    	; 0x142a <Endpoint_Write_Stream_LE+0x8e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    13be:	81 2f       	mov	r24, r17
    13c0:	90 2f       	mov	r25, r16
    13c2:	9c 01       	movw	r18, r24
    13c4:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    13c6:	c1 14       	cp	r12, r1
    13c8:	d1 04       	cpc	r13, r1
    13ca:	39 f0       	breq	.+14     	; 0x13da <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    13cc:	f6 01       	movw	r30, r12
    13ce:	80 81       	ld	r24, Z
    13d0:	91 81       	ldd	r25, Z+1	; 0x01
    13d2:	e8 1a       	sub	r14, r24
    13d4:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    13d6:	c8 0f       	add	r28, r24
    13d8:	d9 1f       	adc	r29, r25
    13da:	00 e0       	ldi	r16, 0x00	; 0
    13dc:	10 e0       	ldi	r17, 0x00	; 0
    13de:	22 c0       	rjmp	.+68     	; 0x1424 <Endpoint_Write_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    13e0:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    13e4:	85 fd       	sbrc	r24, 5
    13e6:	16 c0       	rjmp	.+44     	; 0x1414 <Endpoint_Write_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13e8:	80 91 e8 00 	lds	r24, 0x00E8
    13ec:	8e 77       	andi	r24, 0x7E	; 126
    13ee:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    13f2:	c1 14       	cp	r12, r1
    13f4:	d1 04       	cpc	r13, r1
    13f6:	49 f0       	breq	.+18     	; 0x140a <Endpoint_Write_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
    13f8:	f6 01       	movw	r30, r12
    13fa:	80 81       	ld	r24, Z
    13fc:	91 81       	ldd	r25, Z+1	; 0x01
    13fe:	80 0f       	add	r24, r16
    1400:	91 1f       	adc	r25, r17
    1402:	91 83       	std	Z+1, r25	; 0x01
    1404:	80 83       	st	Z, r24
    1406:	85 e0       	ldi	r24, 0x05	; 5
    1408:	11 c0       	rjmp	.+34     	; 0x142c <Endpoint_Write_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    140a:	a0 d1       	rcall	.+832    	; 0x174c <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    140c:	87 dc       	rcall	.-1778   	; 0xd1c <Endpoint_WaitUntilReady>
    140e:	88 23       	and	r24, r24
    1410:	49 f0       	breq	.+18     	; 0x1424 <Endpoint_Write_Stream_LE+0x88>
    1412:	0c c0       	rjmp	.+24     	; 0x142c <Endpoint_Write_Stream_LE+0x90>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1414:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1416:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    141a:	08 94       	sec
    141c:	e1 08       	sbc	r14, r1
    141e:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    1420:	0f 5f       	subi	r16, 0xFF	; 255
    1422:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1424:	e1 14       	cp	r14, r1
    1426:	f1 04       	cpc	r15, r1
    1428:	d9 f6       	brne	.-74     	; 0x13e0 <Endpoint_Write_Stream_LE+0x44>
    142a:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    142c:	df 91       	pop	r29
    142e:	cf 91       	pop	r28
    1430:	1f 91       	pop	r17
    1432:	0f 91       	pop	r16
    1434:	ff 90       	pop	r15
    1436:	ef 90       	pop	r14
    1438:	df 90       	pop	r13
    143a:	cf 90       	pop	r12
    143c:	bf 90       	pop	r11
    143e:	08 95       	ret

00001440 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1440:	0f 93       	push	r16
    1442:	1f 93       	push	r17
    1444:	df 93       	push	r29
    1446:	cf 93       	push	r28
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
    144c:	ac 97       	sbiw	r28, 0x2c	; 44
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	f8 94       	cli
    1452:	de bf       	out	0x3e, r29	; 62
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1458:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
    145c:	80 93 ea 01 	sts	0x01EA, r24
    1460:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
    1464:	80 93 eb 01 	sts	0x01EB, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    1468:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    146c:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
    1470:	ec ee       	ldi	r30, 0xEC	; 236
    1472:	f1 e0       	ldi	r31, 0x01	; 1
    1474:	80 93 ec 01 	sts	0x01EC, r24
    1478:	90 93 ed 01 	sts	0x01ED, r25
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    147c:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    1480:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
    1484:	80 93 ee 01 	sts	0x01EE, r24
    1488:	93 83       	std	Z+3, r25	; 0x03
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    148a:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    148e:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
    1492:	80 93 f0 01 	sts	0x01F0, r24
    1496:	95 83       	std	Z+5, r25	; 0x05

	EVENT_USB_Device_ControlRequest();
    1498:	0e 94 e6 00 	call	0x1cc	; 0x1cc <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    149c:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    14a0:	83 ff       	sbrs	r24, 3
    14a2:	3a c1       	rjmp	.+628    	; 0x1718 <USB_Device_ProcessControlRequest+0x2d8>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    14a4:	80 91 ea 01 	lds	r24, 0x01EA

		switch (USB_ControlRequest.bRequest)
    14a8:	30 91 eb 01 	lds	r19, 0x01EB
    14ac:	35 30       	cpi	r19, 0x05	; 5
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <USB_Device_ProcessControlRequest+0x72>
    14b0:	87 c0       	rjmp	.+270    	; 0x15c0 <USB_Device_ProcessControlRequest+0x180>
    14b2:	36 30       	cpi	r19, 0x06	; 6
    14b4:	40 f4       	brcc	.+16     	; 0x14c6 <USB_Device_ProcessControlRequest+0x86>
    14b6:	31 30       	cpi	r19, 0x01	; 1
    14b8:	c9 f1       	breq	.+114    	; 0x152c <USB_Device_ProcessControlRequest+0xec>
    14ba:	31 30       	cpi	r19, 0x01	; 1
    14bc:	70 f0       	brcs	.+28     	; 0x14da <USB_Device_ProcessControlRequest+0x9a>
    14be:	33 30       	cpi	r19, 0x03	; 3
    14c0:	09 f0       	breq	.+2      	; 0x14c4 <USB_Device_ProcessControlRequest+0x84>
    14c2:	2a c1       	rjmp	.+596    	; 0x1718 <USB_Device_ProcessControlRequest+0x2d8>
    14c4:	33 c0       	rjmp	.+102    	; 0x152c <USB_Device_ProcessControlRequest+0xec>
    14c6:	38 30       	cpi	r19, 0x08	; 8
    14c8:	09 f4       	brne	.+2      	; 0x14cc <USB_Device_ProcessControlRequest+0x8c>
    14ca:	f7 c0       	rjmp	.+494    	; 0x16ba <USB_Device_ProcessControlRequest+0x27a>
    14cc:	39 30       	cpi	r19, 0x09	; 9
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <USB_Device_ProcessControlRequest+0x92>
    14d0:	06 c1       	rjmp	.+524    	; 0x16de <USB_Device_ProcessControlRequest+0x29e>
    14d2:	36 30       	cpi	r19, 0x06	; 6
    14d4:	09 f0       	breq	.+2      	; 0x14d8 <USB_Device_ProcessControlRequest+0x98>
    14d6:	20 c1       	rjmp	.+576    	; 0x1718 <USB_Device_ProcessControlRequest+0x2d8>
    14d8:	97 c0       	rjmp	.+302    	; 0x1608 <USB_Device_ProcessControlRequest+0x1c8>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    14da:	80 38       	cpi	r24, 0x80	; 128
    14dc:	21 f0       	breq	.+8      	; 0x14e6 <USB_Device_ProcessControlRequest+0xa6>
    14de:	82 38       	cpi	r24, 0x82	; 130
    14e0:	09 f0       	breq	.+2      	; 0x14e4 <USB_Device_ProcessControlRequest+0xa4>
    14e2:	1a c1       	rjmp	.+564    	; 0x1718 <USB_Device_ProcessControlRequest+0x2d8>
    14e4:	08 c0       	rjmp	.+16     	; 0x14f6 <USB_Device_ProcessControlRequest+0xb6>
    14e6:	90 91 e6 01 	lds	r25, 0x01E6
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    14ea:	80 91 e7 01 	lds	r24, 0x01E7
    14ee:	88 23       	and	r24, r24
    14f0:	99 f0       	breq	.+38     	; 0x1518 <USB_Device_ProcessControlRequest+0xd8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    14f2:	92 60       	ori	r25, 0x02	; 2
    14f4:	11 c0       	rjmp	.+34     	; 0x1518 <USB_Device_ProcessControlRequest+0xd8>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    14f6:	80 91 ee 01 	lds	r24, 0x01EE
    14fa:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    14fc:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1500:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	25 e0       	ldi	r18, 0x05	; 5
    1508:	96 95       	lsr	r25
    150a:	87 95       	ror	r24
    150c:	2a 95       	dec	r18
    150e:	e1 f7       	brne	.-8      	; 0x1508 <USB_Device_ProcessControlRequest+0xc8>
    1510:	98 2f       	mov	r25, r24
    1512:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1514:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1518:	80 91 e8 00 	lds	r24, 0x00E8
    151c:	87 7f       	andi	r24, 0xF7	; 247
    151e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1522:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
    1526:	10 92 f1 00 	sts	0x00F1, r1
    152a:	d2 c0       	rjmp	.+420    	; 0x16d0 <USB_Device_ProcessControlRequest+0x290>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    152c:	88 23       	and	r24, r24
    152e:	19 f0       	breq	.+6      	; 0x1536 <USB_Device_ProcessControlRequest+0xf6>
    1530:	82 30       	cpi	r24, 0x02	; 2
    1532:	09 f0       	breq	.+2      	; 0x1536 <USB_Device_ProcessControlRequest+0xf6>
    1534:	f1 c0       	rjmp	.+482    	; 0x1718 <USB_Device_ProcessControlRequest+0x2d8>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	8f 71       	andi	r24, 0x1F	; 31
    153a:	90 70       	andi	r25, 0x00	; 0
    153c:	00 97       	sbiw	r24, 0x00	; 0
    153e:	21 f0       	breq	.+8      	; 0x1548 <USB_Device_ProcessControlRequest+0x108>
    1540:	02 97       	sbiw	r24, 0x02	; 2
    1542:	09 f0       	breq	.+2      	; 0x1546 <USB_Device_ProcessControlRequest+0x106>
    1544:	e9 c0       	rjmp	.+466    	; 0x1718 <USB_Device_ProcessControlRequest+0x2d8>
    1546:	0c c0       	rjmp	.+24     	; 0x1560 <USB_Device_ProcessControlRequest+0x120>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1548:	80 91 ec 01 	lds	r24, 0x01EC
    154c:	81 30       	cpi	r24, 0x01	; 1
    154e:	09 f0       	breq	.+2      	; 0x1552 <USB_Device_ProcessControlRequest+0x112>
    1550:	e3 c0       	rjmp	.+454    	; 0x1718 <USB_Device_ProcessControlRequest+0x2d8>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1552:	10 92 e7 01 	sts	0x01E7, r1
    1556:	33 30       	cpi	r19, 0x03	; 3
    1558:	69 f5       	brne	.+90     	; 0x15b4 <USB_Device_ProcessControlRequest+0x174>
    155a:	80 93 e7 01 	sts	0x01E7, r24
    155e:	2a c0       	rjmp	.+84     	; 0x15b4 <USB_Device_ProcessControlRequest+0x174>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1560:	80 91 ec 01 	lds	r24, 0x01EC
    1564:	88 23       	and	r24, r24
    1566:	31 f5       	brne	.+76     	; 0x15b4 <USB_Device_ProcessControlRequest+0x174>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1568:	20 91 ee 01 	lds	r18, 0x01EE
    156c:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    156e:	09 f4       	brne	.+2      	; 0x1572 <USB_Device_ProcessControlRequest+0x132>
    1570:	d3 c0       	rjmp	.+422    	; 0x1718 <USB_Device_ProcessControlRequest+0x2d8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1572:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1576:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    157a:	80 ff       	sbrs	r24, 0
    157c:	1b c0       	rjmp	.+54     	; 0x15b4 <USB_Device_ProcessControlRequest+0x174>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    157e:	33 30       	cpi	r19, 0x03	; 3
    1580:	21 f4       	brne	.+8      	; 0x158a <USB_Device_ProcessControlRequest+0x14a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1582:	80 91 eb 00 	lds	r24, 0x00EB
    1586:	80 62       	ori	r24, 0x20	; 32
    1588:	13 c0       	rjmp	.+38     	; 0x15b0 <USB_Device_ProcessControlRequest+0x170>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    158a:	80 91 eb 00 	lds	r24, 0x00EB
    158e:	80 61       	ori	r24, 0x10	; 16
    1590:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	02 c0       	rjmp	.+4      	; 0x159e <USB_Device_ProcessControlRequest+0x15e>
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	2a 95       	dec	r18
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <USB_Device_ProcessControlRequest+0x15a>
    15a2:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    15a6:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    15aa:	80 91 eb 00 	lds	r24, 0x00EB
    15ae:	88 60       	ori	r24, 0x08	; 8
    15b0:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    15b4:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    15b8:	80 91 e8 00 	lds	r24, 0x00E8
    15bc:	87 7f       	andi	r24, 0xF7	; 247
    15be:	8b c0       	rjmp	.+278    	; 0x16d6 <USB_Device_ProcessControlRequest+0x296>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    15c0:	88 23       	and	r24, r24
    15c2:	09 f0       	breq	.+2      	; 0x15c6 <USB_Device_ProcessControlRequest+0x186>
    15c4:	a9 c0       	rjmp	.+338    	; 0x1718 <USB_Device_ProcessControlRequest+0x2d8>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    15c6:	10 91 ec 01 	lds	r17, 0x01EC
    15ca:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    15cc:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    15ce:	f8 94       	cli
    15d0:	80 91 e8 00 	lds	r24, 0x00E8
    15d4:	87 7f       	andi	r24, 0xF7	; 247
    15d6:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    15da:	7f db       	rcall	.-2306   	; 0xcda <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    15dc:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    15e0:	80 ff       	sbrs	r24, 0
    15e2:	fc cf       	rjmp	.-8      	; 0x15dc <USB_Device_ProcessControlRequest+0x19c>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    15e4:	80 91 e3 00 	lds	r24, 0x00E3
    15e8:	80 78       	andi	r24, 0x80	; 128
    15ea:	81 2b       	or	r24, r17

				UDADDR = Temp;
    15ec:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    15f0:	80 68       	ori	r24, 0x80	; 128
    15f2:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    15f6:	11 23       	and	r17, r17
    15f8:	11 f4       	brne	.+4      	; 0x15fe <USB_Device_ProcessControlRequest+0x1be>
    15fa:	82 e0       	ldi	r24, 0x02	; 2
    15fc:	01 c0       	rjmp	.+2      	; 0x1600 <USB_Device_ProcessControlRequest+0x1c0>
    15fe:	83 e0       	ldi	r24, 0x03	; 3
    1600:	80 93 e9 01 	sts	0x01E9, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1604:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
    1606:	88 c0       	rjmp	.+272    	; 0x1718 <USB_Device_ProcessControlRequest+0x2d8>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1608:	80 58       	subi	r24, 0x80	; 128
    160a:	82 30       	cpi	r24, 0x02	; 2
    160c:	08 f0       	brcs	.+2      	; 0x1610 <USB_Device_ProcessControlRequest+0x1d0>
    160e:	84 c0       	rjmp	.+264    	; 0x1718 <USB_Device_ProcessControlRequest+0x2d8>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1610:	80 91 ec 01 	lds	r24, 0x01EC
    1614:	90 91 ed 01 	lds	r25, 0x01ED
    1618:	23 e0       	ldi	r18, 0x03	; 3
    161a:	8c 3d       	cpi	r24, 0xDC	; 220
    161c:	92 07       	cpc	r25, r18
    161e:	09 f0       	breq	.+2      	; 0x1622 <USB_Device_ProcessControlRequest+0x1e2>
    1620:	33 c0       	rjmp	.+102    	; 0x1688 <USB_Device_ProcessControlRequest+0x248>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1622:	83 e0       	ldi	r24, 0x03	; 3
    1624:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1626:	8a e2       	ldi	r24, 0x2A	; 42
    1628:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    162a:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    162c:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    162e:	de 01       	movw	r26, r28
    1630:	15 96       	adiw	r26, 0x05	; 5
    1632:	6e e0       	ldi	r22, 0x0E	; 14
    1634:	40 e0       	ldi	r20, 0x00	; 0
    1636:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1638:	11 e2       	ldi	r17, 0x21	; 33
    163a:	e6 2f       	mov	r30, r22
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	10 93 57 00 	sts	0x0057, r17
    1642:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
    1644:	40 ff       	sbrs	r20, 0
    1646:	03 c0       	rjmp	.+6      	; 0x164e <USB_Device_ProcessControlRequest+0x20e>
					{
						SerialByte >>= 4;
    1648:	82 95       	swap	r24
    164a:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    164c:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    164e:	8f 70       	andi	r24, 0x0F	; 15
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1654:	8a 30       	cpi	r24, 0x0A	; 10
    1656:	18 f0       	brcs	.+6      	; 0x165e <USB_Device_ProcessControlRequest+0x21e>
    1658:	c9 01       	movw	r24, r18
    165a:	c7 96       	adiw	r24, 0x37	; 55
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <USB_Device_ProcessControlRequest+0x222>
    165e:	c9 01       	movw	r24, r18
    1660:	c0 96       	adiw	r24, 0x30	; 48
    1662:	8d 93       	st	X+, r24
    1664:	9d 93       	st	X+, r25
    1666:	4f 5f       	subi	r20, 0xFF	; 255
    1668:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    166a:	44 31       	cpi	r20, 0x14	; 20
    166c:	51 05       	cpc	r21, r1
    166e:	29 f7       	brne	.-54     	; 0x163a <USB_Device_ProcessControlRequest+0x1fa>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1670:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1672:	80 91 e8 00 	lds	r24, 0x00E8
    1676:	87 7f       	andi	r24, 0xF7	; 247
    1678:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    167c:	ce 01       	movw	r24, r28
    167e:	03 96       	adiw	r24, 0x03	; 3
    1680:	6a e2       	ldi	r22, 0x2A	; 42
    1682:	70 e0       	ldi	r23, 0x00	; 0
    1684:	a5 dc       	rcall	.-1718   	; 0xfd0 <Endpoint_Write_Control_Stream_LE>
    1686:	13 c0       	rjmp	.+38     	; 0x16ae <USB_Device_ProcessControlRequest+0x26e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1688:	60 91 ee 01 	lds	r22, 0x01EE
    168c:	ae 01       	movw	r20, r28
    168e:	4f 5f       	subi	r20, 0xFF	; 255
    1690:	5f 4f       	sbci	r21, 0xFF	; 255
    1692:	0e 94 93 01 	call	0x326	; 0x326 <CALLBACK_USB_GetDescriptor>
    1696:	bc 01       	movw	r22, r24
    1698:	00 97       	sbiw	r24, 0x00	; 0
    169a:	09 f4       	brne	.+2      	; 0x169e <USB_Device_ProcessControlRequest+0x25e>
    169c:	3d c0       	rjmp	.+122    	; 0x1718 <USB_Device_ProcessControlRequest+0x2d8>
    169e:	80 91 e8 00 	lds	r24, 0x00E8
    16a2:	87 7f       	andi	r24, 0xF7	; 247
    16a4:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	9a 81       	ldd	r25, Y+2	; 0x02
    16ac:	30 dd       	rcall	.-1440   	; 0x110e <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    16ae:	80 91 e8 00 	lds	r24, 0x00E8
    16b2:	8b 77       	andi	r24, 0x7B	; 123
    16b4:	80 93 e8 00 	sts	0x00E8, r24
    16b8:	2f c0       	rjmp	.+94     	; 0x1718 <USB_Device_ProcessControlRequest+0x2d8>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    16ba:	80 38       	cpi	r24, 0x80	; 128
    16bc:	69 f5       	brne	.+90     	; 0x1718 <USB_Device_ProcessControlRequest+0x2d8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    16be:	80 91 e8 00 	lds	r24, 0x00E8
    16c2:	87 7f       	andi	r24, 0xF7	; 247
    16c4:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    16c8:	80 91 e5 01 	lds	r24, 0x01E5
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    16cc:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16d0:	80 91 e8 00 	lds	r24, 0x00E8
    16d4:	8e 77       	andi	r24, 0x7E	; 126
    16d6:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    16da:	ff da       	rcall	.-2562   	; 0xcda <Endpoint_ClearStatusStage>
    16dc:	1d c0       	rjmp	.+58     	; 0x1718 <USB_Device_ProcessControlRequest+0x2d8>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    16de:	88 23       	and	r24, r24
    16e0:	d9 f4       	brne	.+54     	; 0x1718 <USB_Device_ProcessControlRequest+0x2d8>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    16e2:	90 91 ec 01 	lds	r25, 0x01EC
    16e6:	92 30       	cpi	r25, 0x02	; 2
    16e8:	b8 f4       	brcc	.+46     	; 0x1718 <USB_Device_ProcessControlRequest+0x2d8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    16ea:	80 91 e8 00 	lds	r24, 0x00E8
    16ee:	87 7f       	andi	r24, 0xF7	; 247
    16f0:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    16f4:	90 93 e5 01 	sts	0x01E5, r25

	Endpoint_ClearStatusStage();
    16f8:	f0 da       	rcall	.-2592   	; 0xcda <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    16fa:	80 91 e5 01 	lds	r24, 0x01E5
    16fe:	88 23       	and	r24, r24
    1700:	31 f4       	brne	.+12     	; 0x170e <USB_Device_ProcessControlRequest+0x2ce>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1702:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1706:	87 fd       	sbrc	r24, 7
    1708:	02 c0       	rjmp	.+4      	; 0x170e <USB_Device_ProcessControlRequest+0x2ce>
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	01 c0       	rjmp	.+2      	; 0x1710 <USB_Device_ProcessControlRequest+0x2d0>
    170e:	84 e0       	ldi	r24, 0x04	; 4
    1710:	80 93 e9 01 	sts	0x01E9, r24

	EVENT_USB_Device_ConfigurationChanged();
    1714:	0e 94 ee 00 	call	0x1dc	; 0x1dc <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1718:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    171c:	83 ff       	sbrs	r24, 3
    171e:	0a c0       	rjmp	.+20     	; 0x1734 <USB_Device_ProcessControlRequest+0x2f4>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1720:	80 91 eb 00 	lds	r24, 0x00EB
    1724:	80 62       	ori	r24, 0x20	; 32
    1726:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    172a:	80 91 e8 00 	lds	r24, 0x00E8
    172e:	87 7f       	andi	r24, 0xF7	; 247
    1730:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    1734:	ac 96       	adiw	r28, 0x2c	; 44
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	cd bf       	out	0x3d, r28	; 61
    1740:	cf 91       	pop	r28
    1742:	df 91       	pop	r29
    1744:	1f 91       	pop	r17
    1746:	0f 91       	pop	r16
    1748:	08 95       	ret

0000174a <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    174a:	08 95       	ret

0000174c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    174c:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    174e:	80 91 e9 01 	lds	r24, 0x01E9
    1752:	88 23       	and	r24, r24
    1754:	61 f0       	breq	.+24     	; 0x176e <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    1756:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    175a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    175e:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    1762:	83 ff       	sbrs	r24, 3
    1764:	01 c0       	rjmp	.+2      	; 0x1768 <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
    1766:	6c de       	rcall	.-808    	; 0x1440 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    1768:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    176a:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    176e:	1f 91       	pop	r17
    1770:	08 95       	ret

00001772 <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1772:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1774:	80 91 e9 01 	lds	r24, 0x01E9
    1778:	84 30       	cpi	r24, 0x04	; 4
    177a:	41 f5       	brne	.+80     	; 0x17cc <CDC_Device_ReceiveByte+0x5a>
    177c:	87 85       	ldd	r24, Z+15	; 0x0f
    177e:	90 89       	ldd	r25, Z+16	; 0x10
    1780:	a1 89       	ldd	r26, Z+17	; 0x11
    1782:	b2 89       	ldd	r27, Z+18	; 0x12
    1784:	00 97       	sbiw	r24, 0x00	; 0
    1786:	a1 05       	cpc	r26, r1
    1788:	b1 05       	cpc	r27, r1
    178a:	01 f1       	breq	.+64     	; 0x17cc <CDC_Device_ReceiveByte+0x5a>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
    178c:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    178e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1792:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsOUTReceived())
    1796:	82 ff       	sbrs	r24, 2
    1798:	19 c0       	rjmp	.+50     	; 0x17cc <CDC_Device_ReceiveByte+0x5a>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    179a:	80 91 f2 00 	lds	r24, 0x00F2
    179e:	90 91 f3 00 	lds	r25, 0x00F3
	{
		if (Endpoint_BytesInEndpoint())
    17a2:	89 2b       	or	r24, r25
    17a4:	19 f4       	brne	.+6      	; 0x17ac <CDC_Device_ReceiveByte+0x3a>
    17a6:	2f ef       	ldi	r18, 0xFF	; 255
    17a8:	3f ef       	ldi	r19, 0xFF	; 255
    17aa:	04 c0       	rjmp	.+8      	; 0x17b4 <CDC_Device_ReceiveByte+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    17ac:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    17b4:	80 91 f2 00 	lds	r24, 0x00F2
    17b8:	90 91 f3 00 	lds	r25, 0x00F3

		if (!(Endpoint_BytesInEndpoint()))
    17bc:	89 2b       	or	r24, r25
    17be:	41 f4       	brne	.+16     	; 0x17d0 <CDC_Device_ReceiveByte+0x5e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    17c0:	80 91 e8 00 	lds	r24, 0x00E8
    17c4:	8b 77       	andi	r24, 0x7B	; 123
    17c6:	80 93 e8 00 	sts	0x00E8, r24
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <CDC_Device_ReceiveByte+0x5e>
    17cc:	2f ef       	ldi	r18, 0xFF	; 255
    17ce:	3f ef       	ldi	r19, 0xFF	; 255
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    17d0:	c9 01       	movw	r24, r18
    17d2:	08 95       	ret

000017d4 <CDC_Device_CreateStream>:
}

#if defined(FDEV_SETUP_STREAM)
void CDC_Device_CreateStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                             FILE* const Stream)
{
    17d4:	fb 01       	movw	r30, r22
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar, _FDEV_SETUP_RW);
    17d6:	2e e0       	ldi	r18, 0x0E	; 14
    17d8:	db 01       	movw	r26, r22
    17da:	1d 92       	st	X+, r1
    17dc:	2a 95       	dec	r18
    17de:	e9 f7       	brne	.-6      	; 0x17da <CDC_Device_CreateStream+0x6>
    17e0:	23 e0       	ldi	r18, 0x03	; 3
    17e2:	23 83       	std	Z+3, r18	; 0x03
    17e4:	2c e6       	ldi	r18, 0x6C	; 108
    17e6:	3c e0       	ldi	r19, 0x0C	; 12
    17e8:	31 87       	std	Z+9, r19	; 0x09
    17ea:	20 87       	std	Z+8, r18	; 0x08
    17ec:	2d ef       	ldi	r18, 0xFD	; 253
    17ee:	3b e0       	ldi	r19, 0x0B	; 11
    17f0:	33 87       	std	Z+11, r19	; 0x0b
    17f2:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
    17f4:	95 87       	std	Z+13, r25	; 0x0d
    17f6:	84 87       	std	Z+12, r24	; 0x0c
}
    17f8:	08 95       	ret

000017fa <CDC_Device_getchar>:
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
}

static int CDC_Device_getchar(FILE* Stream)
{
	int16_t ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
    17fa:	fc 01       	movw	r30, r24
    17fc:	84 85       	ldd	r24, Z+12	; 0x0c
    17fe:	95 85       	ldd	r25, Z+13	; 0x0d
    1800:	b8 df       	rcall	.-144    	; 0x1772 <CDC_Device_ReceiveByte>
    1802:	9c 01       	movw	r18, r24

	if (ReceivedByte < 0)
    1804:	97 ff       	sbrs	r25, 7
    1806:	02 c0       	rjmp	.+4      	; 0x180c <CDC_Device_getchar+0x12>
    1808:	2e ef       	ldi	r18, 0xFE	; 254
    180a:	3f ef       	ldi	r19, 0xFF	; 255
	  return _FDEV_EOF;

	return ReceivedByte;
}
    180c:	c9 01       	movw	r24, r18
    180e:	08 95       	ret

00001810 <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
    1810:	08 95       	ret

00001812 <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1812:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1814:	80 91 e9 01 	lds	r24, 0x01E9
    1818:	84 30       	cpi	r24, 0x04	; 4
    181a:	21 f5       	brne	.+72     	; 0x1864 <CDC_Device_Flush+0x52>
    181c:	87 85       	ldd	r24, Z+15	; 0x0f
    181e:	90 89       	ldd	r25, Z+16	; 0x10
    1820:	a1 89       	ldd	r26, Z+17	; 0x11
    1822:	b2 89       	ldd	r27, Z+18	; 0x12
    1824:	00 97       	sbiw	r24, 0x00	; 0
    1826:	a1 05       	cpc	r26, r1
    1828:	b1 05       	cpc	r27, r1
    182a:	e1 f0       	breq	.+56     	; 0x1864 <CDC_Device_Flush+0x52>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
    182c:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    182e:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    1832:	80 91 f2 00 	lds	r24, 0x00F2
    1836:	90 91 f3 00 	lds	r25, 0x00F3

	if (!(Endpoint_BytesInEndpoint()))
    183a:	89 2b       	or	r24, r25
    183c:	a9 f0       	breq	.+42     	; 0x1868 <CDC_Device_Flush+0x56>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    183e:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1842:	80 91 e8 00 	lds	r24, 0x00E8
    1846:	8e 77       	andi	r24, 0x7E	; 126
    1848:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    184c:	95 fd       	sbrc	r25, 5
    184e:	0c c0       	rjmp	.+24     	; 0x1868 <CDC_Device_Flush+0x56>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    1850:	65 da       	rcall	.-2870   	; 0xd1c <Endpoint_WaitUntilReady>
    1852:	98 2f       	mov	r25, r24
    1854:	88 23       	and	r24, r24
    1856:	49 f4       	brne	.+18     	; 0x186a <CDC_Device_Flush+0x58>
    1858:	80 91 e8 00 	lds	r24, 0x00E8
    185c:	8e 77       	andi	r24, 0x7E	; 126
    185e:	80 93 e8 00 	sts	0x00E8, r24
    1862:	03 c0       	rjmp	.+6      	; 0x186a <CDC_Device_Flush+0x58>
    1864:	92 e0       	ldi	r25, 0x02	; 2
    1866:	01 c0       	rjmp	.+2      	; 0x186a <CDC_Device_Flush+0x58>
    1868:	90 e0       	ldi	r25, 0x00	; 0

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
    186a:	89 2f       	mov	r24, r25
    186c:	08 95       	ret

0000186e <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    186e:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1870:	80 91 e9 01 	lds	r24, 0x01E9
    1874:	84 30       	cpi	r24, 0x04	; 4
    1876:	51 f4       	brne	.+20     	; 0x188c <CDC_Device_USBTask+0x1e>
    1878:	87 85       	ldd	r24, Z+15	; 0x0f
    187a:	90 89       	ldd	r25, Z+16	; 0x10
    187c:	a1 89       	ldd	r26, Z+17	; 0x11
    187e:	b2 89       	ldd	r27, Z+18	; 0x12
    1880:	00 97       	sbiw	r24, 0x00	; 0
    1882:	a1 05       	cpc	r26, r1
    1884:	b1 05       	cpc	r27, r1
    1886:	11 f0       	breq	.+4      	; 0x188c <CDC_Device_USBTask+0x1e>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Device_Flush(CDCInterfaceInfo);
    1888:	cf 01       	movw	r24, r30
    188a:	c3 cf       	rjmp	.-122    	; 0x1812 <CDC_Device_Flush>
    188c:	08 95       	ret

0000188e <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    188e:	1f 93       	push	r17
    1890:	fc 01       	movw	r30, r24
    1892:	16 2f       	mov	r17, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1894:	80 91 e9 01 	lds	r24, 0x01E9
    1898:	84 30       	cpi	r24, 0x04	; 4
    189a:	d9 f4       	brne	.+54     	; 0x18d2 <CDC_Device_SendByte+0x44>
    189c:	87 85       	ldd	r24, Z+15	; 0x0f
    189e:	90 89       	ldd	r25, Z+16	; 0x10
    18a0:	a1 89       	ldd	r26, Z+17	; 0x11
    18a2:	b2 89       	ldd	r27, Z+18	; 0x12
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	a1 05       	cpc	r26, r1
    18a8:	b1 05       	cpc	r27, r1
    18aa:	99 f0       	breq	.+38     	; 0x18d2 <CDC_Device_SendByte+0x44>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
    18ac:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    18ae:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    18b2:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
    18b6:	85 fd       	sbrc	r24, 5
    18b8:	08 c0       	rjmp	.+16     	; 0x18ca <CDC_Device_SendByte+0x3c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18ba:	80 91 e8 00 	lds	r24, 0x00E8
    18be:	8e 77       	andi	r24, 0x7E	; 126
    18c0:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    18c4:	2b da       	rcall	.-2986   	; 0xd1c <Endpoint_WaitUntilReady>
    18c6:	88 23       	and	r24, r24
    18c8:	29 f4       	brne	.+10     	; 0x18d4 <CDC_Device_SendByte+0x46>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    18ca:	10 93 f1 00 	sts	0x00F1, r17
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	01 c0       	rjmp	.+2      	; 0x18d4 <CDC_Device_SendByte+0x46>
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    18d2:	82 e0       	ldi	r24, 0x02	; 2
}
    18d4:	1f 91       	pop	r17
    18d6:	08 95       	ret

000018d8 <CDC_Device_putchar>:
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
    18d8:	28 2f       	mov	r18, r24
    18da:	fb 01       	movw	r30, r22
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
    18dc:	84 85       	ldd	r24, Z+12	; 0x0c
    18de:	95 85       	ldd	r25, Z+13	; 0x0d
    18e0:	62 2f       	mov	r22, r18
    18e2:	d5 df       	rcall	.-86     	; 0x188e <CDC_Device_SendByte>
    18e4:	88 23       	and	r24, r24
    18e6:	19 f4       	brne	.+6      	; 0x18ee <CDC_Device_putchar+0x16>
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <CDC_Device_putchar+0x1a>
    18ee:	2f ef       	ldi	r18, 0xFF	; 255
    18f0:	3f ef       	ldi	r19, 0xFF	; 255
}
    18f2:	c9 01       	movw	r24, r18
    18f4:	08 95       	ret

000018f6 <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    18f6:	1f 93       	push	r17
    18f8:	cf 93       	push	r28
    18fa:	df 93       	push	r29
    18fc:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    18fe:	0d 96       	adiw	r24, 0x0d	; 13
    1900:	fc 01       	movw	r30, r24
    1902:	89 e0       	ldi	r24, 0x09	; 9
    1904:	df 01       	movw	r26, r30
    1906:	1d 92       	st	X+, r1
    1908:	8a 95       	dec	r24
    190a:	e9 f7       	brne	.-6      	; 0x1906 <CDC_Device_ConfigureEndpoints+0x10>
    190c:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == CDCInterfaceInfo->Config.DataINEndpointNumber)
    190e:	89 81       	ldd	r24, Y+1	; 0x01
    1910:	18 17       	cp	r17, r24
    1912:	29 f4       	brne	.+10     	; 0x191e <CDC_Device_ConfigureEndpoints+0x28>
		{
			Size         = CDCInterfaceInfo->Config.DataINEndpointSize;
    1914:	6a 81       	ldd	r22, Y+2	; 0x02
    1916:	7b 81       	ldd	r23, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataINEndpointDoubleBank;
    1918:	8c 81       	ldd	r24, Y+4	; 0x04
    191a:	52 e0       	ldi	r21, 0x02	; 2
    191c:	10 c0       	rjmp	.+32     	; 0x193e <CDC_Device_ConfigureEndpoints+0x48>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.DataOUTEndpointNumber)
    191e:	8d 81       	ldd	r24, Y+5	; 0x05
    1920:	18 17       	cp	r17, r24
    1922:	31 f4       	brne	.+12     	; 0x1930 <CDC_Device_ConfigureEndpoints+0x3a>
		{
			Size         = CDCInterfaceInfo->Config.DataOUTEndpointSize;
    1924:	6e 81       	ldd	r22, Y+6	; 0x06
    1926:	7f 81       	ldd	r23, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
    1928:	88 85       	ldd	r24, Y+8	; 0x08
    192a:	52 e0       	ldi	r21, 0x02	; 2
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	08 c0       	rjmp	.+16     	; 0x1940 <CDC_Device_ConfigureEndpoints+0x4a>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.NotificationEndpointNumber)
    1930:	89 85       	ldd	r24, Y+9	; 0x09
    1932:	18 17       	cp	r17, r24
    1934:	39 f5       	brne	.+78     	; 0x1984 <CDC_Device_ConfigureEndpoints+0x8e>
		{
			Size         = CDCInterfaceInfo->Config.NotificationEndpointSize;
    1936:	6a 85       	ldd	r22, Y+10	; 0x0a
    1938:	7b 85       	ldd	r23, Y+11	; 0x0b
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_INTERRUPT;
			DoubleBanked = CDCInterfaceInfo->Config.NotificationEndpointDoubleBank;
    193a:	8c 85       	ldd	r24, Y+12	; 0x0c
    193c:	53 e0       	ldi	r21, 0x03	; 3
    193e:	30 e8       	ldi	r19, 0x80	; 128
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
    1940:	88 23       	and	r24, r24
    1942:	11 f4       	brne	.+4      	; 0x1948 <CDC_Device_ConfigureEndpoints+0x52>
    1944:	40 e0       	ldi	r20, 0x00	; 0
    1946:	01 c0       	rjmp	.+2      	; 0x194a <CDC_Device_ConfigureEndpoints+0x54>
    1948:	44 e0       	ldi	r20, 0x04	; 4
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	88 e0       	ldi	r24, 0x08	; 8
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	03 c0       	rjmp	.+6      	; 0x1958 <CDC_Device_ConfigureEndpoints+0x62>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    1952:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    1954:	88 0f       	add	r24, r24
    1956:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1958:	86 17       	cp	r24, r22
    195a:	97 07       	cpc	r25, r23
    195c:	d0 f3       	brcs	.-12     	; 0x1952 <CDC_Device_ConfigureEndpoints+0x5c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    195e:	85 2f       	mov	r24, r21
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	56 e0       	ldi	r21, 0x06	; 6
    1964:	88 0f       	add	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	5a 95       	dec	r21
    196a:	e1 f7       	brne	.-8      	; 0x1964 <CDC_Device_ConfigureEndpoints+0x6e>
    196c:	60 e0       	ldi	r22, 0x00	; 0
    196e:	31 11       	cpse	r19, r1
    1970:	61 e0       	ldi	r22, 0x01	; 1
    1972:	68 2b       	or	r22, r24
    1974:	42 60       	ori	r20, 0x02	; 2
    1976:	22 95       	swap	r18
    1978:	20 7f       	andi	r18, 0xF0	; 240
    197a:	42 2b       	or	r20, r18
    197c:	81 2f       	mov	r24, r17
    197e:	78 d9       	rcall	.-3344   	; 0xc70 <Endpoint_ConfigureEndpoint_Prv>
    1980:	88 23       	and	r24, r24
    1982:	29 f0       	breq	.+10     	; 0x198e <CDC_Device_ConfigureEndpoints+0x98>

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    1984:	1f 5f       	subi	r17, 0xFF	; 255
    1986:	17 30       	cpi	r17, 0x07	; 7
    1988:	09 f0       	breq	.+2      	; 0x198c <CDC_Device_ConfigureEndpoints+0x96>
    198a:	c1 cf       	rjmp	.-126    	; 0x190e <CDC_Device_ConfigureEndpoints+0x18>
    198c:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
    198e:	df 91       	pop	r29
    1990:	cf 91       	pop	r28
    1992:	1f 91       	pop	r17
    1994:	08 95       	ret

00001996 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDC.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    199c:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    19a0:	83 ff       	sbrs	r24, 3
    19a2:	63 c0       	rjmp	.+198    	; 0x1a6a <CDC_Device_ProcessControlRequest+0xd4>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    19a4:	88 81       	ld	r24, Y
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	20 91 ee 01 	lds	r18, 0x01EE
    19ac:	30 91 ef 01 	lds	r19, 0x01EF
    19b0:	28 17       	cp	r18, r24
    19b2:	39 07       	cpc	r19, r25
    19b4:	09 f0       	breq	.+2      	; 0x19b8 <CDC_Device_ProcessControlRequest+0x22>
    19b6:	59 c0       	rjmp	.+178    	; 0x1a6a <CDC_Device_ProcessControlRequest+0xd4>
	  return;

	switch (USB_ControlRequest.bRequest)
    19b8:	80 91 eb 01 	lds	r24, 0x01EB
    19bc:	81 32       	cpi	r24, 0x21	; 33
    19be:	61 f0       	breq	.+24     	; 0x19d8 <CDC_Device_ProcessControlRequest+0x42>
    19c0:	82 32       	cpi	r24, 0x22	; 34
    19c2:	20 f4       	brcc	.+8      	; 0x19cc <CDC_Device_ProcessControlRequest+0x36>
    19c4:	80 32       	cpi	r24, 0x20	; 32
    19c6:	09 f0       	breq	.+2      	; 0x19ca <CDC_Device_ProcessControlRequest+0x34>
    19c8:	50 c0       	rjmp	.+160    	; 0x1a6a <CDC_Device_ProcessControlRequest+0xd4>
    19ca:	1b c0       	rjmp	.+54     	; 0x1a02 <CDC_Device_ProcessControlRequest+0x6c>
    19cc:	82 32       	cpi	r24, 0x22	; 34
    19ce:	79 f1       	breq	.+94     	; 0x1a2e <CDC_Device_ProcessControlRequest+0x98>
    19d0:	83 32       	cpi	r24, 0x23	; 35
    19d2:	09 f0       	breq	.+2      	; 0x19d6 <CDC_Device_ProcessControlRequest+0x40>
    19d4:	4a c0       	rjmp	.+148    	; 0x1a6a <CDC_Device_ProcessControlRequest+0xd4>
    19d6:	3b c0       	rjmp	.+118    	; 0x1a4e <CDC_Device_ProcessControlRequest+0xb8>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    19d8:	80 91 ea 01 	lds	r24, 0x01EA
    19dc:	81 3a       	cpi	r24, 0xA1	; 161
    19de:	09 f0       	breq	.+2      	; 0x19e2 <CDC_Device_ProcessControlRequest+0x4c>
    19e0:	44 c0       	rjmp	.+136    	; 0x1a6a <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    19e2:	80 91 e8 00 	lds	r24, 0x00E8
    19e6:	87 7f       	andi	r24, 0xF7	; 247
    19e8:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
    19ec:	ce 01       	movw	r24, r28
    19ee:	0f 96       	adiw	r24, 0x0f	; 15
    19f0:	67 e0       	ldi	r22, 0x07	; 7
    19f2:	70 e0       	ldi	r23, 0x00	; 0
    19f4:	ed da       	rcall	.-2598   	; 0xfd0 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    19f6:	80 91 e8 00 	lds	r24, 0x00E8
    19fa:	8b 77       	andi	r24, 0x7B	; 123
    19fc:	80 93 e8 00 	sts	0x00E8, r24
    1a00:	34 c0       	rjmp	.+104    	; 0x1a6a <CDC_Device_ProcessControlRequest+0xd4>
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1a02:	80 91 ea 01 	lds	r24, 0x01EA
    1a06:	81 32       	cpi	r24, 0x21	; 33
    1a08:	81 f5       	brne	.+96     	; 0x1a6a <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a0a:	80 91 e8 00 	lds	r24, 0x00E8
    1a0e:	87 7f       	andi	r24, 0xF7	; 247
    1a10:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
    1a14:	ce 01       	movw	r24, r28
    1a16:	0f 96       	adiw	r24, 0x0f	; 15
    1a18:	67 e0       	ldi	r22, 0x07	; 7
    1a1a:	70 e0       	ldi	r23, 0x00	; 0
    1a1c:	37 db       	rcall	.-2450   	; 0x108c <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a1e:	80 91 e8 00 	lds	r24, 0x00E8
    1a22:	8e 77       	andi	r24, 0x7E	; 126
    1a24:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    1a28:	ce 01       	movw	r24, r28
    1a2a:	f2 de       	rcall	.-540    	; 0x1810 <CDC_Device_Event_Stub>
    1a2c:	1e c0       	rjmp	.+60     	; 0x1a6a <CDC_Device_ProcessControlRequest+0xd4>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1a2e:	80 91 ea 01 	lds	r24, 0x01EA
    1a32:	81 32       	cpi	r24, 0x21	; 33
    1a34:	d1 f4       	brne	.+52     	; 0x1a6a <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a36:	80 91 e8 00 	lds	r24, 0x00E8
    1a3a:	87 7f       	andi	r24, 0xF7	; 247
    1a3c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1a40:	4c d9       	rcall	.-3432   	; 0xcda <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    1a42:	80 91 ec 01 	lds	r24, 0x01EC
    1a46:	8d 87       	std	Y+13, r24	; 0x0d

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    1a48:	ce 01       	movw	r24, r28
    1a4a:	e2 de       	rcall	.-572    	; 0x1810 <CDC_Device_Event_Stub>
    1a4c:	0e c0       	rjmp	.+28     	; 0x1a6a <CDC_Device_ProcessControlRequest+0xd4>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1a4e:	80 91 ea 01 	lds	r24, 0x01EA
    1a52:	81 32       	cpi	r24, 0x21	; 33
    1a54:	51 f4       	brne	.+20     	; 0x1a6a <CDC_Device_ProcessControlRequest+0xd4>
    1a56:	80 91 e8 00 	lds	r24, 0x00E8
    1a5a:	87 7f       	andi	r24, 0xF7	; 247
    1a5c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1a60:	3c d9       	rcall	.-3464   	; 0xcda <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1a62:	ce 01       	movw	r24, r28
    1a64:	60 91 ec 01 	lds	r22, 0x01EC
    1a68:	d3 de       	rcall	.-602    	; 0x1810 <CDC_Device_Event_Stub>
			}

			break;
	}
}
    1a6a:	df 91       	pop	r29
    1a6c:	cf 91       	pop	r28
    1a6e:	08 95       	ret

00001a70 <MS_Device_USBTask>:

	return true;
}

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1a70:	cf 92       	push	r12
    1a72:	df 92       	push	r13
    1a74:	ef 92       	push	r14
    1a76:	ff 92       	push	r15
    1a78:	0f 93       	push	r16
    1a7a:	1f 93       	push	r17
    1a7c:	df 93       	push	r29
    1a7e:	cf 93       	push	r28
    1a80:	00 d0       	rcall	.+0      	; 0x1a82 <MS_Device_USBTask+0x12>
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
    1a86:	8c 01       	movw	r16, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1a88:	80 91 e9 01 	lds	r24, 0x01E9
    1a8c:	84 30       	cpi	r24, 0x04	; 4
    1a8e:	09 f0       	breq	.+2      	; 0x1a92 <MS_Device_USBTask+0x22>
    1a90:	0c c1       	rjmp	.+536    	; 0x1caa <MS_Device_USBTask+0x23a>
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    1a92:	f8 01       	movw	r30, r16
    1a94:	95 81       	ldd	r25, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1a96:	90 93 e9 00 	sts	0x00E9, r25
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1a9a:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsReadWriteAllowed())
    1a9e:	85 ff       	sbrs	r24, 5
    1aa0:	ce c0       	rjmp	.+412    	; 0x1c3e <MS_Device_USBTask+0x1ce>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1aa2:	90 93 e9 00 	sts	0x00E9, r25
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
	
	BytesProcessed = 0;
    1aa6:	1a 82       	std	Y+2, r1	; 0x02
    1aa8:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1aaa:	2a e0       	ldi	r18, 0x0A	; 10
    1aac:	e2 2e       	mov	r14, r18
    1aae:	f1 2c       	mov	r15, r1
    1ab0:	e0 0e       	add	r14, r16
    1ab2:	f1 1e       	adc	r15, r17
    1ab4:	6e 01       	movw	r12, r28
    1ab6:	08 94       	sec
    1ab8:	c1 1c       	adc	r12, r1
    1aba:	d1 1c       	adc	r13, r1
    1abc:	06 c0       	rjmp	.+12     	; 0x1aca <MS_Device_USBTask+0x5a>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
    1abe:	46 de       	rcall	.-884    	; 0x174c <USB_USBTask>
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1ac0:	f8 01       	movw	r30, r16
    1ac2:	86 a9       	ldd	r24, Z+54	; 0x36
    1ac4:	88 23       	and	r24, r24
    1ac6:	09 f0       	breq	.+2      	; 0x1aca <MS_Device_USBTask+0x5a>
    1ac8:	ba c0       	rjmp	.+372    	; 0x1c3e <MS_Device_USBTask+0x1ce>
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
	
	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1aca:	c7 01       	movw	r24, r14
    1acc:	6f e0       	ldi	r22, 0x0F	; 15
    1ace:	70 e0       	ldi	r23, 0x00	; 0
    1ad0:	a6 01       	movw	r20, r12
    1ad2:	c0 db       	rcall	.-2176   	; 0x1254 <Endpoint_Read_Stream_LE>
    1ad4:	85 30       	cpi	r24, 0x05	; 5
    1ad6:	99 f3       	breq	.-26     	; 0x1abe <MS_Device_USBTask+0x4e>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    1ad8:	f8 01       	movw	r30, r16
    1ada:	82 85       	ldd	r24, Z+10	; 0x0a
    1adc:	93 85       	ldd	r25, Z+11	; 0x0b
    1ade:	a4 85       	ldd	r26, Z+12	; 0x0c
    1ae0:	b5 85       	ldd	r27, Z+13	; 0x0d
    1ae2:	85 55       	subi	r24, 0x55	; 85
    1ae4:	93 45       	sbci	r25, 0x53	; 83
    1ae6:	a2 44       	sbci	r26, 0x42	; 66
    1ae8:	b3 44       	sbci	r27, 0x43	; 67
    1aea:	81 f4       	brne	.+32     	; 0x1b0c <MS_Device_USBTask+0x9c>
    1aec:	f8 01       	movw	r30, r16
    1aee:	97 89       	ldd	r25, Z+23	; 0x17
    1af0:	81 85       	ldd	r24, Z+9	; 0x09
    1af2:	98 17       	cp	r25, r24
    1af4:	58 f4       	brcc	.+22     	; 0x1b0c <MS_Device_USBTask+0x9c>
    1af6:	86 89       	ldd	r24, Z+22	; 0x16
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	8f 71       	andi	r24, 0x1F	; 31
    1afc:	90 70       	andi	r25, 0x00	; 0
    1afe:	89 2b       	or	r24, r25
    1b00:	29 f4       	brne	.+10     	; 0x1b0c <MS_Device_USBTask+0x9c>
    1b02:	80 8d       	ldd	r24, Z+24	; 0x18
    1b04:	88 23       	and	r24, r24
    1b06:	11 f0       	breq	.+4      	; 0x1b0c <MS_Device_USBTask+0x9c>
    1b08:	81 31       	cpi	r24, 0x11	; 17
    1b0a:	78 f0       	brcs	.+30     	; 0x1b2a <MS_Device_USBTask+0xba>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1b0c:	80 91 eb 00 	lds	r24, 0x00EB
    1b10:	80 62       	ori	r24, 0x20	; 32
    1b12:	80 93 eb 00 	sts	0x00EB, r24
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength >  16))
	{
		Endpoint_StallTransaction();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1b16:	f8 01       	movw	r30, r16
    1b18:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1b1a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1b1e:	80 91 eb 00 	lds	r24, 0x00EB
    1b22:	80 62       	ori	r24, 0x20	; 32
    1b24:	80 93 eb 00 	sts	0x00EB, r24
    1b28:	8a c0       	rjmp	.+276    	; 0x1c3e <MS_Device_USBTask+0x1ce>
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
    1b2a:	1a 82       	std	Y+2, r1	; 0x02
    1b2c:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    1b2e:	99 e1       	ldi	r25, 0x19	; 25
    1b30:	e9 2e       	mov	r14, r25
    1b32:	f1 2c       	mov	r15, r1
    1b34:	e0 0e       	add	r14, r16
    1b36:	f1 1e       	adc	r15, r17
    1b38:	6e 01       	movw	r12, r28
    1b3a:	08 94       	sec
    1b3c:	c1 1c       	adc	r12, r1
    1b3e:	d1 1c       	adc	r13, r1
    1b40:	06 c0       	rjmp	.+12     	; 0x1b4e <MS_Device_USBTask+0xde>
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
    1b42:	04 de       	rcall	.-1016   	; 0x174c <USB_USBTask>
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1b44:	f8 01       	movw	r30, r16
    1b46:	86 a9       	ldd	r24, Z+54	; 0x36
    1b48:	88 23       	and	r24, r24
    1b4a:	09 f0       	breq	.+2      	; 0x1b4e <MS_Device_USBTask+0xde>
    1b4c:	78 c0       	rjmp	.+240    	; 0x1c3e <MS_Device_USBTask+0x1ce>

		return false;
	}

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    1b4e:	f8 01       	movw	r30, r16
    1b50:	60 8d       	ldd	r22, Z+24	; 0x18
    1b52:	c7 01       	movw	r24, r14
    1b54:	70 e0       	ldi	r23, 0x00	; 0
    1b56:	a6 01       	movw	r20, r12
    1b58:	7d db       	rcall	.-2310   	; 0x1254 <Endpoint_Read_Stream_LE>
    1b5a:	85 30       	cpi	r24, 0x05	; 5
    1b5c:	91 f3       	breq	.-28     	; 0x1b42 <MS_Device_USBTask+0xd2>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1b5e:	80 91 e8 00 	lds	r24, 0x00E8
    1b62:	8b 77       	andi	r24, 0x7B	; 123
    1b64:	80 93 e8 00 	sts	0x00E8, r24

	if (Endpoint_IsReadWriteAllowed())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    1b68:	f8 01       	movw	r30, r16
    1b6a:	86 89       	ldd	r24, Z+22	; 0x16
    1b6c:	87 ff       	sbrs	r24, 7
    1b6e:	03 c0       	rjmp	.+6      	; 0x1b76 <MS_Device_USBTask+0x106>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1b70:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1b72:	80 93 e9 00 	sts	0x00E9, r24

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    1b76:	c8 01       	movw	r24, r16
    1b78:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <CALLBACK_MS_Device_SCSICommandReceived>

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    1b7c:	91 e0       	ldi	r25, 0x01	; 1
    1b7e:	98 27       	eor	r25, r24
    1b80:	f8 01       	movw	r30, r16
    1b82:	95 ab       	std	Z+53, r25	; 0x35
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    1b84:	25 e5       	ldi	r18, 0x55	; 85
    1b86:	33 e5       	ldi	r19, 0x53	; 83
    1b88:	42 e4       	ldi	r20, 0x42	; 66
    1b8a:	53 e5       	ldi	r21, 0x53	; 83
    1b8c:	21 a7       	std	Z+41, r18	; 0x29
    1b8e:	32 a7       	std	Z+42, r19	; 0x2a
    1b90:	43 a7       	std	Z+43, r20	; 0x2b
    1b92:	54 a7       	std	Z+44, r21	; 0x2c
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    1b94:	26 85       	ldd	r18, Z+14	; 0x0e
    1b96:	37 85       	ldd	r19, Z+15	; 0x0f
    1b98:	40 89       	ldd	r20, Z+16	; 0x10
    1b9a:	51 89       	ldd	r21, Z+17	; 0x11
    1b9c:	25 a7       	std	Z+45, r18	; 0x2d
    1b9e:	36 a7       	std	Z+46, r19	; 0x2e
    1ba0:	47 a7       	std	Z+47, r20	; 0x2f
    1ba2:	50 ab       	std	Z+48, r21	; 0x30
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    1ba4:	22 89       	ldd	r18, Z+18	; 0x12
    1ba6:	33 89       	ldd	r19, Z+19	; 0x13
    1ba8:	44 89       	ldd	r20, Z+20	; 0x14
    1baa:	55 89       	ldd	r21, Z+21	; 0x15
    1bac:	21 ab       	std	Z+49, r18	; 0x31
    1bae:	32 ab       	std	Z+50, r19	; 0x32
    1bb0:	43 ab       	std	Z+51, r20	; 0x33
    1bb2:	54 ab       	std	Z+52, r21	; 0x34

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    1bb4:	88 23       	and	r24, r24
    1bb6:	51 f4       	brne	.+20     	; 0x1bcc <MS_Device_USBTask+0x15c>
    1bb8:	21 15       	cp	r18, r1
    1bba:	31 05       	cpc	r19, r1
    1bbc:	41 05       	cpc	r20, r1
    1bbe:	51 05       	cpc	r21, r1
    1bc0:	29 f0       	breq	.+10     	; 0x1bcc <MS_Device_USBTask+0x15c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1bc2:	80 91 eb 00 	lds	r24, 0x00EB
    1bc6:	80 62       	ori	r24, 0x20	; 32
    1bc8:	80 93 eb 00 	sts	0x00EB, r24
	return true;
}

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    1bcc:	f8 01       	movw	r30, r16
    1bce:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1bd0:	80 93 e9 00 	sts	0x00E9, r24
    1bd4:	05 c0       	rjmp	.+10     	; 0x1be0 <MS_Device_USBTask+0x170>

	while (Endpoint_IsStalled())
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
    1bd6:	ba dd       	rcall	.-1164   	; 0x174c <USB_USBTask>
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1bd8:	f8 01       	movw	r30, r16
    1bda:	86 a9       	ldd	r24, Z+54	; 0x36
    1bdc:	88 23       	and	r24, r24
    1bde:	79 f5       	brne	.+94     	; 0x1c3e <MS_Device_USBTask+0x1ce>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1be0:	80 91 eb 00 	lds	r24, 0x00EB

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);

	while (Endpoint_IsStalled())
    1be4:	85 fd       	sbrc	r24, 5
    1be6:	f7 cf       	rjmp	.-18     	; 0x1bd6 <MS_Device_USBTask+0x166>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1be8:	f8 01       	movw	r30, r16
    1bea:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1bec:	80 93 e9 00 	sts	0x00E9, r24
    1bf0:	05 c0       	rjmp	.+10     	; 0x1bfc <MS_Device_USBTask+0x18c>

	while (Endpoint_IsStalled())
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
    1bf2:	ac dd       	rcall	.-1192   	; 0x174c <USB_USBTask>
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1bf4:	f8 01       	movw	r30, r16
    1bf6:	86 a9       	ldd	r24, Z+54	; 0x36
    1bf8:	88 23       	and	r24, r24
    1bfa:	09 f5       	brne	.+66     	; 0x1c3e <MS_Device_USBTask+0x1ce>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1bfc:	80 91 eb 00 	lds	r24, 0x00EB
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);

	while (Endpoint_IsStalled())
    1c00:	85 fd       	sbrc	r24, 5
    1c02:	f7 cf       	rjmp	.-18     	; 0x1bf2 <MS_Device_USBTask+0x182>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
    1c04:	1a 82       	std	Y+2, r1	; 0x02
    1c06:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    1c08:	89 e2       	ldi	r24, 0x29	; 41
    1c0a:	e8 2e       	mov	r14, r24
    1c0c:	f1 2c       	mov	r15, r1
    1c0e:	e0 0e       	add	r14, r16
    1c10:	f1 1e       	adc	r15, r17
    1c12:	6e 01       	movw	r12, r28
    1c14:	08 94       	sec
    1c16:	c1 1c       	adc	r12, r1
    1c18:	d1 1c       	adc	r13, r1
    1c1a:	05 c0       	rjmp	.+10     	; 0x1c26 <MS_Device_USBTask+0x1b6>
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
    1c1c:	97 dd       	rcall	.-1234   	; 0x174c <USB_USBTask>
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1c1e:	f8 01       	movw	r30, r16
    1c20:	86 a9       	ldd	r24, Z+54	; 0x36
    1c22:	88 23       	and	r24, r24
    1c24:	61 f4       	brne	.+24     	; 0x1c3e <MS_Device_USBTask+0x1ce>
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    1c26:	c7 01       	movw	r24, r14
    1c28:	6d e0       	ldi	r22, 0x0D	; 13
    1c2a:	70 e0       	ldi	r23, 0x00	; 0
    1c2c:	a6 01       	movw	r20, r12
    1c2e:	b6 db       	rcall	.-2196   	; 0x139c <Endpoint_Write_Stream_LE>
    1c30:	85 30       	cpi	r24, 0x05	; 5
    1c32:	a1 f3       	breq	.-24     	; 0x1c1c <MS_Device_USBTask+0x1ac>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c34:	80 91 e8 00 	lds	r24, 0x00E8
    1c38:	8e 77       	andi	r24, 0x7E	; 126
    1c3a:	80 93 e8 00 	sts	0x00E8, r24

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    1c3e:	f8 01       	movw	r30, r16
    1c40:	86 a9       	ldd	r24, Z+54	; 0x36
    1c42:	88 23       	and	r24, r24
    1c44:	91 f1       	breq	.+100    	; 0x1caa <MS_Device_USBTask+0x23a>
	{
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    1c46:	45 81       	ldd	r20, Z+5	; 0x05
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    1c48:	21 e0       	ldi	r18, 0x01	; 1
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	c9 01       	movw	r24, r18
    1c4e:	04 2e       	mov	r0, r20
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <MS_Device_USBTask+0x1e6>
    1c52:	88 0f       	add	r24, r24
    1c54:	99 1f       	adc	r25, r25
    1c56:	0a 94       	dec	r0
    1c58:	e2 f7       	brpl	.-8      	; 0x1c52 <MS_Device_USBTask+0x1e2>
    1c5a:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1c5e:	10 92 ea 00 	sts	0x00EA, r1
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1c62:	91 81       	ldd	r25, Z+1	; 0x01
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    1c64:	09 2e       	mov	r0, r25
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <MS_Device_USBTask+0x1fc>
    1c68:	22 0f       	add	r18, r18
    1c6a:	33 1f       	adc	r19, r19
    1c6c:	0a 94       	dec	r0
    1c6e:	e2 f7       	brpl	.-8      	; 0x1c68 <MS_Device_USBTask+0x1f8>
    1c70:	20 93 ea 00 	sts	0x00EA, r18
				UERST = 0;
    1c74:	10 92 ea 00 	sts	0x00EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1c78:	40 93 e9 00 	sts	0x00E9, r20
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1c7c:	80 91 eb 00 	lds	r24, 0x00EB
    1c80:	80 61       	ori	r24, 0x10	; 16
    1c82:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1c86:	80 91 eb 00 	lds	r24, 0x00EB
    1c8a:	88 60       	ori	r24, 0x08	; 8
    1c8c:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1c90:	90 93 e9 00 	sts	0x00E9, r25
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1c94:	80 91 eb 00 	lds	r24, 0x00EB
    1c98:	80 61       	ori	r24, 0x10	; 16
    1c9a:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1c9e:	80 91 eb 00 	lds	r24, 0x00EB
    1ca2:	88 60       	ori	r24, 0x08	; 8
    1ca4:	80 93 eb 00 	sts	0x00EB, r24
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    1ca8:	16 aa       	std	Z+54, r1	; 0x36
	}
}
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	cf 91       	pop	r28
    1cb0:	df 91       	pop	r29
    1cb2:	1f 91       	pop	r17
    1cb4:	0f 91       	pop	r16
    1cb6:	ff 90       	pop	r15
    1cb8:	ef 90       	pop	r14
    1cba:	df 90       	pop	r13
    1cbc:	cf 90       	pop	r12
    1cbe:	08 95       	ret

00001cc0 <MS_Device_ConfigureEndpoints>:
			break;
	}
}

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1cc0:	1f 93       	push	r17
    1cc2:	cf 93       	push	r28
    1cc4:	df 93       	push	r29
    1cc6:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    1cc8:	0a 96       	adiw	r24, 0x0a	; 10
    1cca:	fc 01       	movw	r30, r24
    1ccc:	8d e2       	ldi	r24, 0x2D	; 45
    1cce:	df 01       	movw	r26, r30
    1cd0:	1d 92       	st	X+, r1
    1cd2:	8a 95       	dec	r24
    1cd4:	e9 f7       	brne	.-6      	; 0x1cd0 <MS_Device_ConfigureEndpoints+0x10>
    1cd6:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == MSInterfaceInfo->Config.DataINEndpointNumber)
    1cd8:	89 81       	ldd	r24, Y+1	; 0x01
    1cda:	18 17       	cp	r17, r24
    1cdc:	29 f4       	brne	.+10     	; 0x1ce8 <MS_Device_ConfigureEndpoints+0x28>
		{
			Size         = MSInterfaceInfo->Config.DataINEndpointSize;
    1cde:	6a 81       	ldd	r22, Y+2	; 0x02
    1ce0:	7b 81       	ldd	r23, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataINEndpointDoubleBank;
    1ce2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce4:	30 e8       	ldi	r19, 0x80	; 128
    1ce6:	07 c0       	rjmp	.+14     	; 0x1cf6 <MS_Device_ConfigureEndpoints+0x36>
		}
		else if (EndpointNum == MSInterfaceInfo->Config.DataOUTEndpointNumber)
    1ce8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cea:	18 17       	cp	r17, r24
    1cec:	01 f5       	brne	.+64     	; 0x1d2e <MS_Device_ConfigureEndpoints+0x6e>
		{
			Size         = MSInterfaceInfo->Config.DataOUTEndpointSize;
    1cee:	6e 81       	ldd	r22, Y+6	; 0x06
    1cf0:	7f 81       	ldd	r23, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataOUTEndpointDoubleBank;
    1cf2:	88 85       	ldd	r24, Y+8	; 0x08
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
    1cf6:	88 23       	and	r24, r24
    1cf8:	11 f4       	brne	.+4      	; 0x1cfe <MS_Device_ConfigureEndpoints+0x3e>
    1cfa:	40 e0       	ldi	r20, 0x00	; 0
    1cfc:	01 c0       	rjmp	.+2      	; 0x1d00 <MS_Device_ConfigureEndpoints+0x40>
    1cfe:	44 e0       	ldi	r20, 0x04	; 4
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	88 e0       	ldi	r24, 0x08	; 8
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	03 c0       	rjmp	.+6      	; 0x1d0e <MS_Device_ConfigureEndpoints+0x4e>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    1d08:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    1d0a:	88 0f       	add	r24, r24
    1d0c:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1d0e:	86 17       	cp	r24, r22
    1d10:	97 07       	cpc	r25, r23
    1d12:	d0 f3       	brcs	.-12     	; 0x1d08 <MS_Device_ConfigureEndpoints+0x48>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    1d14:	60 e0       	ldi	r22, 0x00	; 0
    1d16:	31 11       	cpse	r19, r1
    1d18:	61 e0       	ldi	r22, 0x01	; 1
    1d1a:	60 68       	ori	r22, 0x80	; 128
    1d1c:	42 60       	ori	r20, 0x02	; 2
    1d1e:	22 95       	swap	r18
    1d20:	20 7f       	andi	r18, 0xF0	; 240
    1d22:	42 2b       	or	r20, r18
    1d24:	81 2f       	mov	r24, r17
    1d26:	0e 94 38 06 	call	0xc70	; 0xc70 <Endpoint_ConfigureEndpoint_Prv>
    1d2a:	88 23       	and	r24, r24
    1d2c:	21 f0       	breq	.+8      	; 0x1d36 <MS_Device_ConfigureEndpoints+0x76>

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    1d2e:	1f 5f       	subi	r17, 0xFF	; 255
    1d30:	17 30       	cpi	r17, 0x07	; 7
    1d32:	91 f6       	brne	.-92     	; 0x1cd8 <MS_Device_ConfigureEndpoints+0x18>
    1d34:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
    1d36:	df 91       	pop	r29
    1d38:	cf 91       	pop	r28
    1d3a:	1f 91       	pop	r17
    1d3c:	08 95       	ret

00001d3e <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorage.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1d3e:	cf 93       	push	r28
    1d40:	df 93       	push	r29
    1d42:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d44:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    1d48:	83 ff       	sbrs	r24, 3
    1d4a:	31 c0       	rjmp	.+98     	; 0x1dae <MS_Device_ProcessControlRequest+0x70>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    1d4c:	88 81       	ld	r24, Y
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	20 91 ee 01 	lds	r18, 0x01EE
    1d54:	30 91 ef 01 	lds	r19, 0x01EF
    1d58:	28 17       	cp	r18, r24
    1d5a:	39 07       	cpc	r19, r25
    1d5c:	41 f5       	brne	.+80     	; 0x1dae <MS_Device_ProcessControlRequest+0x70>
	  return;

	switch (USB_ControlRequest.bRequest)
    1d5e:	80 91 eb 01 	lds	r24, 0x01EB
    1d62:	8e 3f       	cpi	r24, 0xFE	; 254
    1d64:	81 f0       	breq	.+32     	; 0x1d86 <MS_Device_ProcessControlRequest+0x48>
    1d66:	8f 3f       	cpi	r24, 0xFF	; 255
    1d68:	11 f5       	brne	.+68     	; 0x1dae <MS_Device_ProcessControlRequest+0x70>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1d6a:	80 91 ea 01 	lds	r24, 0x01EA
    1d6e:	81 32       	cpi	r24, 0x21	; 33
    1d70:	f1 f4       	brne	.+60     	; 0x1dae <MS_Device_ProcessControlRequest+0x70>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1d72:	80 91 e8 00 	lds	r24, 0x00E8
    1d76:	87 7f       	andi	r24, 0xF7	; 247
    1d78:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1d7c:	0e 94 6d 06 	call	0xcda	; 0xcda <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	8e ab       	std	Y+54, r24	; 0x36
    1d84:	14 c0       	rjmp	.+40     	; 0x1dae <MS_Device_ProcessControlRequest+0x70>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1d86:	80 91 ea 01 	lds	r24, 0x01EA
    1d8a:	81 3a       	cpi	r24, 0xA1	; 161
    1d8c:	81 f4       	brne	.+32     	; 0x1dae <MS_Device_ProcessControlRequest+0x70>
    1d8e:	80 91 e8 00 	lds	r24, 0x00E8
    1d92:	87 7f       	andi	r24, 0xF7	; 247
    1d94:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    1d98:	89 85       	ldd	r24, Y+9	; 0x09
    1d9a:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1d9c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1da0:	80 91 e8 00 	lds	r24, 0x00E8
    1da4:	8e 77       	andi	r24, 0x7E	; 126
    1da6:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1daa:	0e 94 6d 06 	call	0xcda	; 0xcda <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    1dae:	df 91       	pop	r29
    1db0:	cf 91       	pop	r28
    1db2:	08 95       	ret

00001db4 <fputs>:
    1db4:	ef 92       	push	r14
    1db6:	ff 92       	push	r15
    1db8:	0f 93       	push	r16
    1dba:	1f 93       	push	r17
    1dbc:	cf 93       	push	r28
    1dbe:	df 93       	push	r29
    1dc0:	7c 01       	movw	r14, r24
    1dc2:	8b 01       	movw	r16, r22
    1dc4:	db 01       	movw	r26, r22
    1dc6:	13 96       	adiw	r26, 0x03	; 3
    1dc8:	8c 91       	ld	r24, X
    1dca:	81 fd       	sbrc	r24, 1
    1dcc:	03 c0       	rjmp	.+6      	; 0x1dd4 <fputs+0x20>
    1dce:	cf ef       	ldi	r28, 0xFF	; 255
    1dd0:	df ef       	ldi	r29, 0xFF	; 255
    1dd2:	13 c0       	rjmp	.+38     	; 0x1dfa <fputs+0x46>
    1dd4:	c0 e0       	ldi	r28, 0x00	; 0
    1dd6:	d0 e0       	ldi	r29, 0x00	; 0
    1dd8:	0b c0       	rjmp	.+22     	; 0x1df0 <fputs+0x3c>
    1dda:	d8 01       	movw	r26, r16
    1ddc:	18 96       	adiw	r26, 0x08	; 8
    1dde:	ed 91       	ld	r30, X+
    1de0:	fc 91       	ld	r31, X
    1de2:	19 97       	sbiw	r26, 0x09	; 9
    1de4:	b8 01       	movw	r22, r16
    1de6:	09 95       	icall
    1de8:	89 2b       	or	r24, r25
    1dea:	11 f0       	breq	.+4      	; 0x1df0 <fputs+0x3c>
    1dec:	cf ef       	ldi	r28, 0xFF	; 255
    1dee:	df ef       	ldi	r29, 0xFF	; 255
    1df0:	f7 01       	movw	r30, r14
    1df2:	81 91       	ld	r24, Z+
    1df4:	7f 01       	movw	r14, r30
    1df6:	88 23       	and	r24, r24
    1df8:	81 f7       	brne	.-32     	; 0x1dda <fputs+0x26>
    1dfa:	ce 01       	movw	r24, r28
    1dfc:	df 91       	pop	r29
    1dfe:	cf 91       	pop	r28
    1e00:	1f 91       	pop	r17
    1e02:	0f 91       	pop	r16
    1e04:	ff 90       	pop	r15
    1e06:	ef 90       	pop	r14
    1e08:	08 95       	ret

00001e0a <_exit>:
    1e0a:	f8 94       	cli

00001e0c <__stop_program>:
    1e0c:	ff cf       	rjmp	.-2      	; 0x1e0c <__stop_program>
