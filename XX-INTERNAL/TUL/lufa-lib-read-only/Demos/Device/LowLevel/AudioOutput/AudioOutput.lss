
AudioOutput.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000d8a  00000e1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800104  00800104  00000e22  2**0
                  ALLOC
  3 .stab         000008f4  00000000  00000000  00000e24  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000b3  00000000  00000000  00001718  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002c0  00000000  00000000  000017cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000007ec  00000000  00000000  00001a8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004ca6  00000000  00000000  00002277  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000011cc  00000000  00000000  00006f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003ed7  00000000  00000000  000080e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000400  00000000  00000000  0000bfc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000023a4  00000000  00000000  0000c3c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000240b  00000000  00000000  0000e764  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000360  00000000  00000000  00010b6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
   0:	b0 c0       	rjmp	.+352    	; 0x162 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   2:	00 00       	nop

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
   4:	cb c0       	rjmp	.+406    	; 0x19c <__bad_interrupt>
   6:	00 00       	nop
   8:	c9 c0       	rjmp	.+402    	; 0x19c <__bad_interrupt>
   a:	00 00       	nop
   c:	c7 c0       	rjmp	.+398    	; 0x19c <__bad_interrupt>
   e:	00 00       	nop
  10:	c5 c0       	rjmp	.+394    	; 0x19c <__bad_interrupt>
  12:	00 00       	nop
  14:	c3 c0       	rjmp	.+390    	; 0x19c <__bad_interrupt>
  16:	00 00       	nop
  18:	c1 c0       	rjmp	.+386    	; 0x19c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	bf c0       	rjmp	.+382    	; 0x19c <__bad_interrupt>
  1e:	00 00       	nop
  20:	bd c0       	rjmp	.+378    	; 0x19c <__bad_interrupt>
  22:	00 00       	nop
  24:	bb c0       	rjmp	.+374    	; 0x19c <__bad_interrupt>
  26:	00 00       	nop
  28:	2e c3       	rjmp	.+1628   	; 0x686 <__vector_10>
  2a:	00 00       	nop
  2c:	b7 c0       	rjmp	.+366    	; 0x19c <__bad_interrupt>
  2e:	00 00       	nop
  30:	b5 c0       	rjmp	.+362    	; 0x19c <__bad_interrupt>
  32:	00 00       	nop
  34:	b3 c0       	rjmp	.+358    	; 0x19c <__bad_interrupt>
  36:	00 00       	nop
  38:	b1 c0       	rjmp	.+354    	; 0x19c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	af c0       	rjmp	.+350    	; 0x19c <__bad_interrupt>
  3e:	00 00       	nop
  40:	ad c0       	rjmp	.+346    	; 0x19c <__bad_interrupt>
  42:	00 00       	nop
  44:	ab c0       	rjmp	.+342    	; 0x19c <__bad_interrupt>
  46:	00 00       	nop
  48:	a9 c0       	rjmp	.+338    	; 0x19c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	a7 c0       	rjmp	.+334    	; 0x19c <__bad_interrupt>
  4e:	00 00       	nop
  50:	a5 c0       	rjmp	.+330    	; 0x19c <__bad_interrupt>
  52:	00 00       	nop
  54:	d5 c0       	rjmp	.+426    	; 0x200 <__vector_21>
  56:	00 00       	nop
  58:	a1 c0       	rjmp	.+322    	; 0x19c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	9f c0       	rjmp	.+318    	; 0x19c <__bad_interrupt>
  5e:	00 00       	nop
  60:	9d c0       	rjmp	.+314    	; 0x19c <__bad_interrupt>
  62:	00 00       	nop
  64:	9b c0       	rjmp	.+310    	; 0x19c <__bad_interrupt>
  66:	00 00       	nop
  68:	99 c0       	rjmp	.+306    	; 0x19c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	97 c0       	rjmp	.+302    	; 0x19c <__bad_interrupt>
  6e:	00 00       	nop
  70:	95 c0       	rjmp	.+298    	; 0x19c <__bad_interrupt>
  72:	00 00       	nop
  74:	93 c0       	rjmp	.+294    	; 0x19c <__bad_interrupt>
  76:	00 00       	nop
  78:	91 c0       	rjmp	.+290    	; 0x19c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	8f c0       	rjmp	.+286    	; 0x19c <__bad_interrupt>
  7e:	00 00       	nop
  80:	8d c0       	rjmp	.+282    	; 0x19c <__bad_interrupt>
  82:	00 00       	nop
  84:	8b c0       	rjmp	.+278    	; 0x19c <__bad_interrupt>
  86:	00 00       	nop
  88:	89 c0       	rjmp	.+274    	; 0x19c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	87 c0       	rjmp	.+270    	; 0x19c <__bad_interrupt>
  8e:	00 00       	nop
  90:	85 c0       	rjmp	.+266    	; 0x19c <__bad_interrupt>
  92:	00 00       	nop
  94:	83 c0       	rjmp	.+262    	; 0x19c <__bad_interrupt>
  96:	00 00       	nop

00000098 <DeviceDescriptor>:
  98:	12 01 10 01 00 00 00 08 eb 03 46 20 02 00 01 02     ..........F ....
  a8:	00 01                                               ..

000000aa <ConfigurationDescriptor>:
  aa:	09 02 70 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..p.....2.......
  ba:	00 00 09 24 01 00 01 1e 00 01 01 0c 24 02 01 01     ...$........$...
  ca:	01 00 02 03 00 00 00 09 24 03 02 01 03 00 01 00     ........$.......
  da:	09 04 01 00 00 01 02 00 00 09 04 01 01 01 01 02     ................
  ea:	00 00 07 24 01 01 01 01 00 17 24 02 01 02 02 10     ...$......$.....
  fa:	05 40 1f 00 11 2b 00 22 56 00 44 ac 00 80 bb 00     .@...+."V.D.....
 10a:	09 05 01 0d 00 01 01 00 00 07 25 01 01 00 00 00     ..........%.....

0000011a <LanguageString>:
 11a:	04 03 09 04                                         ....

0000011e <ManufacturerString>:
 11e:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
 12e:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000138 <ProductString>:
 138:	28 03 4c 00 55 00 46 00 41 00 20 00 41 00 75 00     (.L.U.F.A. .A.u.
 148:	64 00 69 00 6f 00 20 00 4f 00 75 00 74 00 20 00     d.i.o. .O.u.t. .
 158:	44 00 65 00 6d 00 6f 00 00 00                       D.e.m.o...

00000162 <__ctors_end>:
 162:	11 24       	eor	r1, r1
 164:	1f be       	out	0x3f, r1	; 63
 166:	cf ef       	ldi	r28, 0xFF	; 255
 168:	d0 e2       	ldi	r29, 0x20	; 32
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
 16e:	11 e0       	ldi	r17, 0x01	; 1
 170:	a0 e0       	ldi	r26, 0x00	; 0
 172:	b1 e0       	ldi	r27, 0x01	; 1
 174:	ea e8       	ldi	r30, 0x8A	; 138
 176:	fd e0       	ldi	r31, 0x0D	; 13
 178:	00 e0       	ldi	r16, 0x00	; 0
 17a:	0b bf       	out	0x3b, r16	; 59
 17c:	02 c0       	rjmp	.+4      	; 0x182 <__do_copy_data+0x14>
 17e:	07 90       	elpm	r0, Z+
 180:	0d 92       	st	X+, r0
 182:	a4 30       	cpi	r26, 0x04	; 4
 184:	b1 07       	cpc	r27, r17
 186:	d9 f7       	brne	.-10     	; 0x17e <__do_copy_data+0x10>

00000188 <__do_clear_bss>:
 188:	11 e0       	ldi	r17, 0x01	; 1
 18a:	a4 e0       	ldi	r26, 0x04	; 4
 18c:	b1 e0       	ldi	r27, 0x01	; 1
 18e:	01 c0       	rjmp	.+2      	; 0x192 <.do_clear_bss_start>

00000190 <.do_clear_bss_loop>:
 190:	1d 92       	st	X+, r1

00000192 <.do_clear_bss_start>:
 192:	a2 31       	cpi	r26, 0x12	; 18
 194:	b1 07       	cpc	r27, r17
 196:	e1 f7       	brne	.-8      	; 0x190 <.do_clear_bss_loop>
 198:	8b d1       	rcall	.+790    	; 0x4b0 <main>
 19a:	f5 c5       	rjmp	.+3050   	; 0xd86 <_exit>

0000019c <__bad_interrupt>:
 19c:	31 cf       	rjmp	.-414    	; 0x0 <__vectors>

0000019e <EVENT_USB_Device_Connect>:

/** Event handler for the USB_Connect event. This indicates that the device is enumerating via the status LEDs, and
 *  configures the sample update and PWM timers.
 */
void EVENT_USB_Device_Connect(void)
{
 19e:	1f 93       	push	r17
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 1a0:	8b b1       	in	r24, 0x0b	; 11
 1a2:	8f 70       	andi	r24, 0x0F	; 15
 1a4:	80 6a       	ori	r24, 0xA0	; 160
 1a6:	8b b9       	out	0x0b, r24	; 11
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	/* Sample reload timer initialization */
	TIMSK0 = (1 << OCIE0A);
 1a8:	12 e0       	ldi	r17, 0x02	; 2
 1aa:	10 93 6e 00 	sts	0x006E, r17
	OCR0A  = ((F_CPU / 8 / CurrentAudioSampleFrequency) - 1);
 1ae:	20 91 00 01 	lds	r18, 0x0100
 1b2:	30 91 01 01 	lds	r19, 0x0101
 1b6:	40 91 02 01 	lds	r20, 0x0102
 1ba:	50 91 03 01 	lds	r21, 0x0103
 1be:	60 e4       	ldi	r22, 0x40	; 64
 1c0:	72 e4       	ldi	r23, 0x42	; 66
 1c2:	8f e0       	ldi	r24, 0x0F	; 15
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	bd d5       	rcall	.+2938   	; 0xd42 <__udivmodsi4>
 1c8:	21 50       	subi	r18, 0x01	; 1
 1ca:	27 bd       	out	0x27, r18	; 39
	TCCR0A = (1 << WGM01);  // CTC mode
 1cc:	14 bd       	out	0x24, r17	; 36
	TCCR0B = (1 << CS01);   // Fcpu/8 speed
 1ce:	15 bd       	out	0x25, r17	; 37
	#if defined(AUDIO_OUT_MONO)
	/* Set speaker as output */
	DDRC  |= (1 << 6);
	#elif defined(AUDIO_OUT_STEREO)
	/* Set speakers as outputs */
	DDRC  |= ((1 << 6) | (1 << 5));
 1d0:	87 b1       	in	r24, 0x07	; 7
 1d2:	80 66       	ori	r24, 0x60	; 96
 1d4:	87 b9       	out	0x07, r24	; 7
	DDRC  |= 0xFF;
	#endif

	#if (defined(AUDIO_OUT_MONO) || defined(AUDIO_OUT_STEREO))
	/* PWM speaker timer initialization */
	TCCR3A = ((1 << WGM30) | (1 << COM3A1) | (1 << COM3A0)
 1d6:	81 ef       	ldi	r24, 0xF1	; 241
 1d8:	80 93 90 00 	sts	0x0090, r24
	                       | (1 << COM3B1) | (1 << COM3B0)); // Set on match, clear on TOP
	TCCR3B = ((1 << WGM32) | (1 << CS30));  // Fast 8-Bit PWM, F_CPU speed
 1dc:	89 e0       	ldi	r24, 0x09	; 9
 1de:	80 93 91 00 	sts	0x0091, r24
	#endif
}
 1e2:	1f 91       	pop	r17
 1e4:	08 95       	ret

000001e6 <EVENT_USB_Device_Disconnect>:
 *  the status LEDs, disables the sample update and PWM output timers and stops the USB and Audio management tasks.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Stop the timers */
	TCCR0B = 0;
 1e6:	15 bc       	out	0x25, r1	; 37
	#if (defined(AUDIO_OUT_MONO) || defined(AUDIO_OUT_STEREO))
	TCCR3B = 0;
 1e8:	10 92 91 00 	sts	0x0091, r1
	#if defined(AUDIO_OUT_MONO)
	/* Set speaker as input to reduce current draw */
	DDRC  &= ~(1 << 6);
	#elif defined(AUDIO_OUT_STEREO)
	/* Set speakers as inputs to reduce current draw */
	DDRC  &= ~((1 << 6) | (1 << 5));
 1ec:	87 b1       	in	r24, 0x07	; 7
 1ee:	8f 79       	andi	r24, 0x9F	; 159
 1f0:	87 b9       	out	0x07, r24	; 7
	/* Set PORTC low */
	PORTC = 0x00;
	#endif

	/* Indicate streaming audio interface not selected */
	StreamingAudioInterfaceSelected = false;
 1f2:	10 92 04 01 	sts	0x0104, r1
 1f6:	8b b1       	in	r24, 0x0b	; 11
 1f8:	8f 70       	andi	r24, 0x0F	; 15
 1fa:	80 61       	ori	r24, 0x10	; 16
 1fc:	8b b9       	out	0x0b, r24	; 11

	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
 1fe:	08 95       	ret

00000200 <__vector_21>:
	}
}

/** ISR to handle the reloading of the PWM timer with the next sample. */
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	2f 93       	push	r18
 20c:	3f 93       	push	r19
 20e:	4f 93       	push	r20
 210:	5f 93       	push	r21
 212:	6f 93       	push	r22
 214:	7f 93       	push	r23
 216:	8f 93       	push	r24
 218:	9f 93       	push	r25
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 21a:	70 91 e9 00 	lds	r23, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 224:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the audio stream endpoint */
	Endpoint_SelectEndpoint(AUDIO_STREAM_EPNUM);

	/* Check if the current endpoint can be read from (contains a packet) and the host is sending data */
	if (Endpoint_IsOUTReceived() && StreamingAudioInterfaceSelected)
 228:	82 ff       	sbrs	r24, 2
 22a:	50 c0       	rjmp	.+160    	; 0x2cc <__vector_21+0xcc>
 22c:	80 91 04 01 	lds	r24, 0x0104
 230:	88 23       	and	r24, r24
 232:	09 f4       	brne	.+2      	; 0x236 <__vector_21+0x36>
 234:	4b c0       	rjmp	.+150    	; 0x2cc <__vector_21+0xcc>
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 236:	80 91 f1 00 	lds	r24, 0x00F1
 23a:	28 2f       	mov	r18, r24
				Data.Bytes[1] = UEDATX;
 23c:	80 91 f1 00 	lds	r24, 0x00F1
 240:	38 2f       	mov	r19, r24
	{
		/* Retrieve the signed 16-bit left and right audio samples, convert to 8-bit */
		int8_t LeftSample_8Bit   = ((int16_t)Endpoint_Read_16_LE() >> 8);
 242:	23 2f       	mov	r18, r19
 244:	33 0f       	add	r19, r19
 246:	33 0b       	sbc	r19, r19
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 248:	40 91 f1 00 	lds	r20, 0x00F1
 24c:	84 2f       	mov	r24, r20
				Data.Bytes[1] = UEDATX;
 24e:	40 91 f1 00 	lds	r20, 0x00F1
 252:	94 2f       	mov	r25, r20
		int8_t RightSample_8Bit  = ((int16_t)Endpoint_Read_16_LE() >> 8);

		/* Mix the two channels together to produce a mono, 8-bit sample */
		int8_t MixedSample_8Bit  = (((int16_t)LeftSample_8Bit + (int16_t)RightSample_8Bit) >> 1);
 254:	33 27       	eor	r19, r19
 256:	27 fd       	sbrc	r18, 7
 258:	30 95       	com	r19
 25a:	89 2f       	mov	r24, r25
 25c:	99 0f       	add	r25, r25
 25e:	99 0b       	sbc	r25, r25
 260:	48 2f       	mov	r20, r24
 262:	55 27       	eor	r21, r21
 264:	47 fd       	sbrc	r20, 7
 266:	50 95       	com	r21
 268:	ca 01       	movw	r24, r20
 26a:	82 0f       	add	r24, r18
 26c:	93 1f       	adc	r25, r19
 26e:	95 95       	asr	r25
 270:	87 95       	ror	r24
 272:	68 2f       	mov	r22, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 274:	80 91 e8 00 	lds	r24, 0x00E8

		/* Check to see if the bank is now empty */
		if (!(Endpoint_IsReadWriteAllowed()))
 278:	85 fd       	sbrc	r24, 5
 27a:	05 c0       	rjmp	.+10     	; 0x286 <__vector_21+0x86>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 27c:	80 91 e8 00 	lds	r24, 0x00E8
 280:	8b 77       	andi	r24, 0x7B	; 123
 282:	80 93 e8 00 	sts	0x00E8, r24
		#if defined(AUDIO_OUT_MONO)
		/* Load the sample into the PWM timer channel */
		OCR3A = (MixedSample_8Bit ^ (1 << 7));
		#elif defined(AUDIO_OUT_STEREO)
		/* Load the dual 8-bit samples into the PWM timer channels */
		OCR3A = (LeftSample_8Bit  ^ (1 << 7));
 286:	80 e8       	ldi	r24, 0x80	; 128
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	28 27       	eor	r18, r24
 28c:	39 27       	eor	r19, r25
 28e:	30 93 99 00 	sts	0x0099, r19
 292:	20 93 98 00 	sts	0x0098, r18
		OCR3B = (RightSample_8Bit ^ (1 << 7));
 296:	48 27       	eor	r20, r24
 298:	59 27       	eor	r21, r25
 29a:	50 93 9b 00 	sts	0x009B, r21
 29e:	40 93 9a 00 	sts	0x009A, r20
		#endif

		uint8_t LEDMask = LEDS_NO_LEDS;

		/* Turn on LEDs as the sample amplitude increases */
		if (MixedSample_8Bit > 16)
 2a2:	61 31       	cpi	r22, 0x11	; 17
 2a4:	14 f0       	brlt	.+4      	; 0x2aa <__vector_21+0xaa>
 2a6:	90 ef       	ldi	r25, 0xF0	; 240
 2a8:	0d c0       	rjmp	.+26     	; 0x2c4 <__vector_21+0xc4>
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3 | LEDS_LED4);
		else if (MixedSample_8Bit > 8)
 2aa:	69 30       	cpi	r22, 0x09	; 9
 2ac:	14 f0       	brlt	.+4      	; 0x2b2 <__vector_21+0xb2>
 2ae:	90 eb       	ldi	r25, 0xB0	; 176
 2b0:	09 c0       	rjmp	.+18     	; 0x2c4 <__vector_21+0xc4>
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3);
		else if (MixedSample_8Bit > 4)
 2b2:	65 30       	cpi	r22, 0x05	; 5
 2b4:	14 f0       	brlt	.+4      	; 0x2ba <__vector_21+0xba>
 2b6:	90 e3       	ldi	r25, 0x30	; 48
 2b8:	05 c0       	rjmp	.+10     	; 0x2c4 <__vector_21+0xc4>
		  LEDMask = (LEDS_LED1 | LEDS_LED2);
		else if (MixedSample_8Bit > 2)
 2ba:	63 30       	cpi	r22, 0x03	; 3
 2bc:	14 f0       	brlt	.+4      	; 0x2c2 <__vector_21+0xc2>
 2be:	90 e1       	ldi	r25, 0x10	; 16
 2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <__vector_21+0xc4>
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	8b b1       	in	r24, 0x0b	; 11
 2c6:	8f 70       	andi	r24, 0x0F	; 15
 2c8:	98 2b       	or	r25, r24
 2ca:	9b b9       	out	0x0b, r25	; 11
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 2cc:	77 70       	andi	r23, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 2ce:	70 93 e9 00 	sts	0x00E9, r23

		LEDs_SetAllLEDs(LEDMask);
	}
	
	Endpoint_SelectEndpoint(PrevEndpoint);
}
 2d2:	9f 91       	pop	r25
 2d4:	8f 91       	pop	r24
 2d6:	7f 91       	pop	r23
 2d8:	6f 91       	pop	r22
 2da:	5f 91       	pop	r21
 2dc:	4f 91       	pop	r20
 2de:	3f 91       	pop	r19
 2e0:	2f 91       	pop	r18
 2e2:	0f 90       	pop	r0
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	0f 90       	pop	r0
 2e8:	1f 90       	pop	r1
 2ea:	18 95       	reti

000002ec <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
 2ec:	1f 93       	push	r17
 2ee:	df 93       	push	r29
 2f0:	cf 93       	push	r28
 2f2:	00 d0       	rcall	.+0      	; 0x2f4 <EVENT_USB_Device_ControlRequest+0x8>
 2f4:	0f 92       	push	r0
 2f6:	cd b7       	in	r28, 0x3d	; 61
 2f8:	de b7       	in	r29, 0x3e	; 62
	/* Process General and Audio specific control requests */
	switch (USB_ControlRequest.bRequest)
 2fa:	80 91 0b 01 	lds	r24, 0x010B
 2fe:	8b 30       	cpi	r24, 0x0B	; 11
 300:	69 f0       	breq	.+26     	; 0x31c <EVENT_USB_Device_ControlRequest+0x30>
 302:	8c 30       	cpi	r24, 0x0C	; 12
 304:	20 f4       	brcc	.+8      	; 0x30e <EVENT_USB_Device_ControlRequest+0x22>
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	09 f0       	breq	.+2      	; 0x30c <EVENT_USB_Device_ControlRequest+0x20>
 30a:	a2 c0       	rjmp	.+324    	; 0x450 <EVENT_USB_Device_ControlRequest+0x164>
 30c:	2b c0       	rjmp	.+86     	; 0x364 <EVENT_USB_Device_ControlRequest+0x78>
 30e:	81 38       	cpi	r24, 0x81	; 129
 310:	09 f4       	brne	.+2      	; 0x314 <EVENT_USB_Device_ControlRequest+0x28>
 312:	71 c0       	rjmp	.+226    	; 0x3f6 <EVENT_USB_Device_ControlRequest+0x10a>
 314:	8f 3f       	cpi	r24, 0xFF	; 255
 316:	09 f0       	breq	.+2      	; 0x31a <EVENT_USB_Device_ControlRequest+0x2e>
 318:	9b c0       	rjmp	.+310    	; 0x450 <EVENT_USB_Device_ControlRequest+0x164>
 31a:	17 c0       	rjmp	.+46     	; 0x34a <EVENT_USB_Device_ControlRequest+0x5e>
	{
		case REQ_SetInterface:
			/* Set Interface is not handled by the library, as its function is application-specific */
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_INTERFACE))
 31c:	10 91 0a 01 	lds	r17, 0x010A
 320:	11 30       	cpi	r17, 0x01	; 1
 322:	09 f0       	breq	.+2      	; 0x326 <EVENT_USB_Device_ControlRequest+0x3a>
 324:	95 c0       	rjmp	.+298    	; 0x450 <EVENT_USB_Device_ControlRequest+0x164>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 326:	80 91 e8 00 	lds	r24, 0x00E8
 32a:	87 7f       	andi	r24, 0xF7	; 247
 32c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 330:	2a d1       	rcall	.+596    	; 0x586 <Endpoint_ClearStatusStage>

				/* Check if the host is enabling the audio interface (setting AlternateSetting to 1) */
				StreamingAudioInterfaceSelected = ((USB_ControlRequest.wValue) != 0);
 332:	10 92 04 01 	sts	0x0104, r1
 336:	80 91 0c 01 	lds	r24, 0x010C
 33a:	90 91 0d 01 	lds	r25, 0x010D
 33e:	89 2b       	or	r24, r25
 340:	09 f4       	brne	.+2      	; 0x344 <EVENT_USB_Device_ControlRequest+0x58>
 342:	86 c0       	rjmp	.+268    	; 0x450 <EVENT_USB_Device_ControlRequest+0x164>
 344:	10 93 04 01 	sts	0x0104, r17
 348:	83 c0       	rjmp	.+262    	; 0x450 <EVENT_USB_Device_ControlRequest+0x164>

			break;
		case AUDIO_REQ_GetStatus:
			/* Get Status request can be directed at either the interface or endpoint, neither is currently used
			 * according to the latest USB Audio 1.0 standard, but must be ACKed with no data when requested */
			if ((USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)) ||
 34a:	80 91 0a 01 	lds	r24, 0x010A
 34e:	81 52       	subi	r24, 0x21	; 33
 350:	82 30       	cpi	r24, 0x02	; 2
 352:	08 f0       	brcs	.+2      	; 0x356 <EVENT_USB_Device_ControlRequest+0x6a>
 354:	7d c0       	rjmp	.+250    	; 0x450 <EVENT_USB_Device_ControlRequest+0x164>
 356:	80 91 e8 00 	lds	r24, 0x00E8
 35a:	87 7f       	andi	r24, 0xF7	; 247
 35c:	80 93 e8 00 	sts	0x00E8, r24
			    (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT)))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 360:	12 d1       	rcall	.+548    	; 0x586 <Endpoint_ClearStatusStage>
 362:	76 c0       	rjmp	.+236    	; 0x450 <EVENT_USB_Device_ControlRequest+0x164>
			}

			break;
		case AUDIO_REQ_SetCurrent:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT))
 364:	80 91 0a 01 	lds	r24, 0x010A
 368:	82 32       	cpi	r24, 0x22	; 34
 36a:	09 f0       	breq	.+2      	; 0x36e <EVENT_USB_Device_ControlRequest+0x82>
 36c:	71 c0       	rjmp	.+226    	; 0x450 <EVENT_USB_Device_ControlRequest+0x164>
			{
				/* Extract out the relevant request information to get the target Endpoint address and control being set */
				uint8_t EndpointAddress = (uint8_t)USB_ControlRequest.wIndex;
				uint8_t EndpointControl = (USB_ControlRequest.wValue >> 8);
 36e:	90 91 0d 01 	lds	r25, 0x010D
				
				/* Only handle SET CURRENT requests to the audio endpoint's sample frequency property */
				if ((EndpointAddress == (ENDPOINT_DIR_OUT | AUDIO_STREAM_EPNUM)) && (EndpointControl == AUDIO_EPCONTROL_SamplingFreq))
 372:	80 91 0e 01 	lds	r24, 0x010E
 376:	81 30       	cpi	r24, 0x01	; 1
 378:	09 f0       	breq	.+2      	; 0x37c <EVENT_USB_Device_ControlRequest+0x90>
 37a:	6a c0       	rjmp	.+212    	; 0x450 <EVENT_USB_Device_ControlRequest+0x164>
 37c:	91 30       	cpi	r25, 0x01	; 1
 37e:	09 f0       	breq	.+2      	; 0x382 <EVENT_USB_Device_ControlRequest+0x96>
 380:	67 c0       	rjmp	.+206    	; 0x450 <EVENT_USB_Device_ControlRequest+0x164>
 382:	80 91 e8 00 	lds	r24, 0x00E8
 386:	87 7f       	andi	r24, 0xF7	; 247
 388:	80 93 e8 00 	sts	0x00E8, r24
				{
					uint8_t SampleRate[3];
				
					Endpoint_ClearSETUP();
					Endpoint_Read_Control_Stream_LE(SampleRate, sizeof(SampleRate));
 38c:	ce 01       	movw	r24, r28
 38e:	01 96       	adiw	r24, 0x01	; 1
 390:	63 e0       	ldi	r22, 0x03	; 3
 392:	70 e0       	ldi	r23, 0x00	; 0
 394:	9e d2       	rcall	.+1340   	; 0x8d2 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 396:	80 91 e8 00 	lds	r24, 0x00E8
 39a:	8b 77       	andi	r24, 0x7B	; 123
 39c:	80 93 e8 00 	sts	0x00E8, r24
					Endpoint_ClearOUT();
					
					/* Set the new sampling frequency to the value given by the host */
					CurrentAudioSampleFrequency = (((uint32_t)SampleRate[2] << 16) | ((uint32_t)SampleRate[1] << 8) | (uint32_t)SampleRate[0]);
 3a0:	2b 81       	ldd	r18, Y+3	; 0x03
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	40 e0       	ldi	r20, 0x00	; 0
 3a6:	50 e0       	ldi	r21, 0x00	; 0
 3a8:	a9 01       	movw	r20, r18
 3aa:	33 27       	eor	r19, r19
 3ac:	22 27       	eor	r18, r18
 3ae:	8a 81       	ldd	r24, Y+2	; 0x02
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	a0 e0       	ldi	r26, 0x00	; 0
 3b4:	b0 e0       	ldi	r27, 0x00	; 0
 3b6:	ba 2f       	mov	r27, r26
 3b8:	a9 2f       	mov	r26, r25
 3ba:	98 2f       	mov	r25, r24
 3bc:	88 27       	eor	r24, r24
 3be:	28 2b       	or	r18, r24
 3c0:	39 2b       	or	r19, r25
 3c2:	4a 2b       	or	r20, r26
 3c4:	5b 2b       	or	r21, r27
 3c6:	89 81       	ldd	r24, Y+1	; 0x01
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	a0 e0       	ldi	r26, 0x00	; 0
 3cc:	b0 e0       	ldi	r27, 0x00	; 0
 3ce:	28 2b       	or	r18, r24
 3d0:	39 2b       	or	r19, r25
 3d2:	4a 2b       	or	r20, r26
 3d4:	5b 2b       	or	r21, r27
 3d6:	20 93 00 01 	sts	0x0100, r18
 3da:	30 93 01 01 	sts	0x0101, r19
 3de:	40 93 02 01 	sts	0x0102, r20
 3e2:	50 93 03 01 	sts	0x0103, r21

					/* Adjust sample reload timer to the new frequency */
					OCR0A = ((F_CPU / 8 / CurrentAudioSampleFrequency) - 1);
 3e6:	60 e4       	ldi	r22, 0x40	; 64
 3e8:	72 e4       	ldi	r23, 0x42	; 66
 3ea:	8f e0       	ldi	r24, 0x0F	; 15
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	a9 d4       	rcall	.+2386   	; 0xd42 <__udivmodsi4>
 3f0:	21 50       	subi	r18, 0x01	; 1
 3f2:	27 bd       	out	0x27, r18	; 39
 3f4:	2d c0       	rjmp	.+90     	; 0x450 <EVENT_USB_Device_ControlRequest+0x164>
				}
			}
			
			break;
		case AUDIO_REQ_GetCurrent:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT))
 3f6:	80 91 0a 01 	lds	r24, 0x010A
 3fa:	82 32       	cpi	r24, 0x22	; 34
 3fc:	49 f5       	brne	.+82     	; 0x450 <EVENT_USB_Device_ControlRequest+0x164>
			{
				/* Extract out the relevant request information to get the target Endpoint address and control being retrieved */
				uint8_t EndpointAddress = (uint8_t)USB_ControlRequest.wIndex;
				uint8_t EndpointControl = (USB_ControlRequest.wValue >> 8);
 3fe:	90 91 0d 01 	lds	r25, 0x010D
				
				/* Only handle GET CURRENT requests to the audio endpoint's sample frequency property */
				if ((EndpointAddress == (ENDPOINT_DIR_OUT | AUDIO_STREAM_EPNUM)) && (EndpointControl == AUDIO_EPCONTROL_SamplingFreq))
 402:	80 91 0e 01 	lds	r24, 0x010E
 406:	81 30       	cpi	r24, 0x01	; 1
 408:	19 f5       	brne	.+70     	; 0x450 <EVENT_USB_Device_ControlRequest+0x164>
 40a:	91 30       	cpi	r25, 0x01	; 1
 40c:	09 f5       	brne	.+66     	; 0x450 <EVENT_USB_Device_ControlRequest+0x164>
				{
					uint8_t SampleRate[3];
					
					/* Convert the sampling rate value into the 24-bit format the host expects for the property */
					SampleRate[2] = (CurrentAudioSampleFrequency >> 16);
 40e:	20 91 00 01 	lds	r18, 0x0100
 412:	30 91 01 01 	lds	r19, 0x0101
 416:	40 91 02 01 	lds	r20, 0x0102
 41a:	50 91 03 01 	lds	r21, 0x0103
 41e:	ca 01       	movw	r24, r20
 420:	aa 27       	eor	r26, r26
 422:	bb 27       	eor	r27, r27
 424:	8b 83       	std	Y+3, r24	; 0x03
					SampleRate[1] = (CurrentAudioSampleFrequency >> 8);
 426:	bb 27       	eor	r27, r27
 428:	a5 2f       	mov	r26, r21
 42a:	94 2f       	mov	r25, r20
 42c:	83 2f       	mov	r24, r19
 42e:	8a 83       	std	Y+2, r24	; 0x02
					SampleRate[0] = (CurrentAudioSampleFrequency &  0xFF);
 430:	29 83       	std	Y+1, r18	; 0x01
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 432:	80 91 e8 00 	lds	r24, 0x00E8
 436:	87 7f       	andi	r24, 0xF7	; 247
 438:	80 93 e8 00 	sts	0x00E8, r24
				
					Endpoint_ClearSETUP();
					Endpoint_Write_Control_Stream_LE(SampleRate, sizeof(SampleRate));
 43c:	ce 01       	movw	r24, r28
 43e:	01 96       	adiw	r24, 0x01	; 1
 440:	63 e0       	ldi	r22, 0x03	; 3
 442:	70 e0       	ldi	r23, 0x00	; 0
 444:	e8 d1       	rcall	.+976    	; 0x816 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 446:	80 91 e8 00 	lds	r24, 0x00E8
 44a:	8b 77       	andi	r24, 0x7B	; 123
 44c:	80 93 e8 00 	sts	0x00E8, r24
				}
			}

			break;
	}
}
 450:	0f 90       	pop	r0
 452:	0f 90       	pop	r0
 454:	0f 90       	pop	r0
 456:	cf 91       	pop	r28
 458:	df 91       	pop	r29
 45a:	1f 91       	pop	r17
 45c:	08 95       	ret

0000045e <EVENT_USB_Device_ConfigurationChanged>:
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	60 e4       	ldi	r22, 0x40	; 64
 462:	46 e5       	ldi	r20, 0x56	; 86
 464:	5b d0       	rcall	.+182    	; 0x51c <Endpoint_ConfigureEndpoint_Prv>
	/* Setup Audio Stream Endpoint */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(AUDIO_STREAM_EPNUM, EP_TYPE_ISOCHRONOUS, ENDPOINT_DIR_OUT,
	                                            AUDIO_STREAM_EPSIZE, ENDPOINT_BANK_DOUBLE);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 466:	80 fd       	sbrc	r24, 0
 468:	02 c0       	rjmp	.+4      	; 0x46e <EVENT_USB_Device_ConfigurationChanged+0x10>
 46a:	90 e9       	ldi	r25, 0x90	; 144
 46c:	01 c0       	rjmp	.+2      	; 0x470 <EVENT_USB_Device_ConfigurationChanged+0x12>
 46e:	90 e6       	ldi	r25, 0x60	; 96
 470:	8b b1       	in	r24, 0x0b	; 11
 472:	8f 70       	andi	r24, 0x0F	; 15
 474:	98 2b       	or	r25, r24
 476:	9b b9       	out	0x0b, r25	; 11
}
 478:	08 95       	ret

0000047a <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 47a:	84 b7       	in	r24, 0x34	; 52
 47c:	87 7f       	andi	r24, 0xF7	; 247
 47e:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 480:	88 e1       	ldi	r24, 0x18	; 24
 482:	0f b6       	in	r0, 0x3f	; 63
 484:	f8 94       	cli
 486:	80 93 60 00 	sts	0x0060, r24
 48a:	10 92 60 00 	sts	0x0060, r1
 48e:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	80 e8       	ldi	r24, 0x80	; 128
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	f8 94       	cli
 498:	80 93 61 00 	sts	0x0061, r24
 49c:	90 93 61 00 	sts	0x0061, r25
 4a0:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 4a2:	8a b1       	in	r24, 0x0a	; 10
 4a4:	80 6f       	ori	r24, 0xF0	; 240
 4a6:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 4a8:	8b b1       	in	r24, 0x0b	; 11
 4aa:	8f 70       	andi	r24, 0x0F	; 15
 4ac:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
}
 4ae:	d5 c0       	rjmp	.+426    	; 0x65a <USB_Init>

000004b0 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
 4b0:	e4 df       	rcall	.-56     	; 0x47a <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 4b2:	8b b1       	in	r24, 0x0b	; 11
 4b4:	8f 70       	andi	r24, 0x0F	; 15
 4b6:	80 61       	ori	r24, 0x10	; 16
 4b8:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
 4ba:	78 94       	sei

	for (;;)
	{
		USB_USBTask();
 4bc:	2f d4       	rcall	.+2142   	; 0xd1c <USB_USBTask>
 4be:	fe cf       	rjmp	.-4      	; 0x4bc <main+0xc>

000004c0 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
 4c0:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 4c2:	92 30       	cpi	r25, 0x02	; 2
 4c4:	49 f0       	breq	.+18     	; 0x4d8 <CALLBACK_USB_GetDescriptor+0x18>
 4c6:	93 30       	cpi	r25, 0x03	; 3
 4c8:	61 f0       	breq	.+24     	; 0x4e2 <CALLBACK_USB_GetDescriptor+0x22>
 4ca:	91 30       	cpi	r25, 0x01	; 1
 4cc:	f9 f4       	brne	.+62     	; 0x50c <CALLBACK_USB_GetDescriptor+0x4c>
 4ce:	e8 e9       	ldi	r30, 0x98	; 152
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	22 e1       	ldi	r18, 0x12	; 18
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	1e c0       	rjmp	.+60     	; 0x514 <CALLBACK_USB_GetDescriptor+0x54>
 4d8:	ea ea       	ldi	r30, 0xAA	; 170
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	20 e7       	ldi	r18, 0x70	; 112
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	19 c0       	rjmp	.+50     	; 0x514 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 4e2:	81 30       	cpi	r24, 0x01	; 1
 4e4:	49 f0       	breq	.+18     	; 0x4f8 <CALLBACK_USB_GetDescriptor+0x38>
 4e6:	81 30       	cpi	r24, 0x01	; 1
 4e8:	18 f0       	brcs	.+6      	; 0x4f0 <CALLBACK_USB_GetDescriptor+0x30>
 4ea:	82 30       	cpi	r24, 0x02	; 2
 4ec:	79 f4       	brne	.+30     	; 0x50c <CALLBACK_USB_GetDescriptor+0x4c>
 4ee:	08 c0       	rjmp	.+16     	; 0x500 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 4f0:	ea e1       	ldi	r30, 0x1A	; 26
 4f2:	f1 e0       	ldi	r31, 0x01	; 1
 4f4:	84 91       	lpm	r24, Z+
 4f6:	07 c0       	rjmp	.+14     	; 0x506 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 4f8:	ee e1       	ldi	r30, 0x1E	; 30
 4fa:	f1 e0       	ldi	r31, 0x01	; 1
 4fc:	84 91       	lpm	r24, Z+
 4fe:	03 c0       	rjmp	.+6      	; 0x506 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 500:	e8 e3       	ldi	r30, 0x38	; 56
 502:	f1 e0       	ldi	r31, 0x01	; 1
 504:	84 91       	lpm	r24, Z+
 506:	28 2f       	mov	r18, r24
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	04 c0       	rjmp	.+8      	; 0x514 <CALLBACK_USB_GetDescriptor+0x54>
 50c:	e0 e0       	ldi	r30, 0x00	; 0
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	20 e0       	ldi	r18, 0x00	; 0
 512:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 514:	ed 93       	st	X+, r30
 516:	fc 93       	st	X, r31
	return Size;
}
 518:	c9 01       	movw	r24, r18
 51a:	08 95       	ret

0000051c <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
 51c:	38 2f       	mov	r19, r24
 51e:	28 2f       	mov	r18, r24
 520:	2c c0       	rjmp	.+88     	; 0x57a <Endpoint_ConfigureEndpoint_Prv+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 522:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);
		
		if (EPNum == Number)
 526:	23 17       	cp	r18, r19
 528:	21 f4       	brne	.+8      	; 0x532 <Endpoint_ConfigureEndpoint_Prv+0x16>
 52a:	76 2f       	mov	r23, r22
 52c:	94 2f       	mov	r25, r20
 52e:	50 e0       	ldi	r21, 0x00	; 0
 530:	06 c0       	rjmp	.+12     	; 0x53e <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 532:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 536:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
 53a:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 53e:	91 ff       	sbrs	r25, 1
 540:	1b c0       	rjmp	.+54     	; 0x578 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 542:	80 91 eb 00 	lds	r24, 0x00EB
 546:	8e 7f       	andi	r24, 0xFE	; 254
 548:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 54c:	80 91 ed 00 	lds	r24, 0x00ED
 550:	8d 7f       	andi	r24, 0xFD	; 253
 552:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 556:	80 91 eb 00 	lds	r24, 0x00EB
 55a:	81 60       	ori	r24, 0x01	; 1
 55c:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 560:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 564:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
 568:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 56c:	80 91 ee 00 	lds	r24, 0x00EE
			
		if (!(Endpoint_IsConfigured()))
 570:	87 fd       	sbrc	r24, 7
 572:	02 c0       	rjmp	.+4      	; 0x578 <Endpoint_ConfigureEndpoint_Prv+0x5c>
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else	
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 578:	2f 5f       	subi	r18, 0xFF	; 255
 57a:	27 30       	cpi	r18, 0x07	; 7
 57c:	90 f2       	brcs	.-92     	; 0x522 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 57e:	30 93 e9 00 	sts	0x00E9, r19
 582:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 584:	08 95       	ret

00000586 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 586:	80 91 0a 01 	lds	r24, 0x010A
 58a:	88 23       	and	r24, r24
 58c:	9c f4       	brge	.+38     	; 0x5b4 <Endpoint_ClearStatusStage+0x2e>
 58e:	04 c0       	rjmp	.+8      	; 0x598 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 590:	80 91 09 01 	lds	r24, 0x0109
 594:	88 23       	and	r24, r24
 596:	b9 f0       	breq	.+46     	; 0x5c6 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 598:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 59c:	82 ff       	sbrs	r24, 2
 59e:	f8 cf       	rjmp	.-16     	; 0x590 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 5a0:	80 91 e8 00 	lds	r24, 0x00E8
 5a4:	8b 77       	andi	r24, 0x7B	; 123
 5a6:	80 93 e8 00 	sts	0x00E8, r24
 5aa:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 5ac:	80 91 09 01 	lds	r24, 0x0109
 5b0:	88 23       	and	r24, r24
 5b2:	49 f0       	breq	.+18     	; 0x5c6 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 5b4:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 5b8:	80 ff       	sbrs	r24, 0
 5ba:	f8 cf       	rjmp	.-16     	; 0x5ac <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 5bc:	80 91 e8 00 	lds	r24, 0x00E8
 5c0:	8e 77       	andi	r24, 0x7E	; 126
 5c2:	80 93 e8 00 	sts	0x00E8, r24
 5c6:	08 95       	ret

000005c8 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
 5c8:	ef 92       	push	r14
 5ca:	ff 92       	push	r15
 5cc:	0f 93       	push	r16
 5ce:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 5d0:	4d d0       	rcall	.+154    	; 0x66c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 5d2:	54 d0       	rcall	.+168    	; 0x67c <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 5d4:	08 ed       	ldi	r16, 0xD8	; 216
 5d6:	10 e0       	ldi	r17, 0x00	; 0
 5d8:	f8 01       	movw	r30, r16
 5da:	80 81       	ld	r24, Z
 5dc:	8f 77       	andi	r24, 0x7F	; 127
 5de:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
 5e0:	80 81       	ld	r24, Z
 5e2:	80 68       	ori	r24, 0x80	; 128
 5e4:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 5e6:	80 81       	ld	r24, Z
 5e8:	8f 7d       	andi	r24, 0xDF	; 223
 5ea:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 5ec:	e7 ed       	ldi	r30, 0xD7	; 215
 5ee:	f0 e0       	ldi	r31, 0x00	; 0
 5f0:	80 81       	ld	r24, Z
 5f2:	80 68       	ori	r24, 0x80	; 128
 5f4:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 5f6:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 5f8:	10 92 09 01 	sts	0x0109, r1
	USB_Device_ConfigurationNumber  = 0;
 5fc:	10 92 05 01 	sts	0x0105, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 600:	10 92 07 01 	sts	0x0107, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 604:	10 92 06 01 	sts	0x0106, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 608:	80 ee       	ldi	r24, 0xE0	; 224
 60a:	e8 2e       	mov	r14, r24
 60c:	f1 2c       	mov	r15, r1
 60e:	f7 01       	movw	r30, r14
 610:	80 81       	ld	r24, Z
 612:	8b 7f       	andi	r24, 0xFB	; 251
 614:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 616:	f8 01       	movw	r30, r16
 618:	80 81       	ld	r24, Z
 61a:	81 60       	ori	r24, 0x01	; 1
 61c:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 61e:	80 e0       	ldi	r24, 0x00	; 0
 620:	60 e0       	ldi	r22, 0x00	; 0
 622:	42 e0       	ldi	r20, 0x02	; 2
 624:	7b df       	rcall	.-266    	; 0x51c <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 626:	e1 ee       	ldi	r30, 0xE1	; 225
 628:	f0 e0       	ldi	r31, 0x00	; 0
 62a:	80 81       	ld	r24, Z
 62c:	8e 7f       	andi	r24, 0xFE	; 254
 62e:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 630:	e2 ee       	ldi	r30, 0xE2	; 226
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	80 81       	ld	r24, Z
 636:	81 60       	ori	r24, 0x01	; 1
 638:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 63a:	80 81       	ld	r24, Z
 63c:	88 60       	ori	r24, 0x08	; 8
 63e:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 640:	f7 01       	movw	r30, r14
 642:	80 81       	ld	r24, Z
 644:	8e 7f       	andi	r24, 0xFE	; 254
 646:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 648:	f8 01       	movw	r30, r16
 64a:	80 81       	ld	r24, Z
 64c:	80 61       	ori	r24, 0x10	; 16
 64e:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 650:	1f 91       	pop	r17
 652:	0f 91       	pop	r16
 654:	ff 90       	pop	r15
 656:	ef 90       	pop	r14
 658:	08 95       	ret

0000065a <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 65a:	e7 ed       	ldi	r30, 0xD7	; 215
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	80 81       	ld	r24, Z
 660:	81 60       	ori	r24, 0x01	; 1
 662:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	80 93 08 01 	sts	0x0108, r24

	USB_ResetInterface();
}
 66a:	ae cf       	rjmp	.-164    	; 0x5c8 <USB_ResetInterface>

0000066c <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 66c:	e8 ed       	ldi	r30, 0xD8	; 216
 66e:	f0 e0       	ldi	r31, 0x00	; 0
 670:	80 81       	ld	r24, Z
 672:	8c 7f       	andi	r24, 0xFC	; 252
 674:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 676:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 67a:	08 95       	ret

0000067c <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 67c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 680:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 684:	08 95       	ret

00000686 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 686:	1f 92       	push	r1
 688:	0f 92       	push	r0
 68a:	0f b6       	in	r0, 0x3f	; 63
 68c:	0f 92       	push	r0
 68e:	0b b6       	in	r0, 0x3b	; 59
 690:	0f 92       	push	r0
 692:	11 24       	eor	r1, r1
 694:	2f 93       	push	r18
 696:	3f 93       	push	r19
 698:	4f 93       	push	r20
 69a:	5f 93       	push	r21
 69c:	6f 93       	push	r22
 69e:	7f 93       	push	r23
 6a0:	8f 93       	push	r24
 6a2:	9f 93       	push	r25
 6a4:	af 93       	push	r26
 6a6:	bf 93       	push	r27
 6a8:	ef 93       	push	r30
 6aa:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 6ac:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 6b0:	82 ff       	sbrs	r24, 2
 6b2:	0a c0       	rjmp	.+20     	; 0x6c8 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 6b4:	80 91 e2 00 	lds	r24, 0x00E2
 6b8:	82 ff       	sbrs	r24, 2
 6ba:	06 c0       	rjmp	.+12     	; 0x6c8 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 6bc:	80 91 e1 00 	lds	r24, 0x00E1
 6c0:	8b 7f       	andi	r24, 0xFB	; 251
 6c2:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 6c6:	29 d3       	rcall	.+1618   	; 0xd1a <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 6c8:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 6cc:	80 ff       	sbrs	r24, 0
 6ce:	1d c0       	rjmp	.+58     	; 0x70a <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 6d0:	80 91 d8 00 	lds	r24, 0x00D8
 6d4:	80 ff       	sbrs	r24, 0
 6d6:	19 c0       	rjmp	.+50     	; 0x70a <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 6d8:	80 91 da 00 	lds	r24, 0x00DA
 6dc:	8e 7f       	andi	r24, 0xFE	; 254
 6de:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 6e2:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 6e6:	80 ff       	sbrs	r24, 0
 6e8:	0c c0       	rjmp	.+24     	; 0x702 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 6ea:	8c e0       	ldi	r24, 0x0C	; 12
 6ec:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 6ee:	8e e0       	ldi	r24, 0x0E	; 14
 6f0:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 6f2:	09 b4       	in	r0, 0x29	; 41
 6f4:	00 fe       	sbrs	r0, 0
 6f6:	fd cf       	rjmp	.-6      	; 0x6f2 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	80 93 09 01 	sts	0x0109, r24
			EVENT_USB_Device_Connect();
 6fe:	4f dd       	rcall	.-1378   	; 0x19e <EVENT_USB_Device_Connect>
 700:	04 c0       	rjmp	.+8      	; 0x70a <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 702:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 704:	10 92 09 01 	sts	0x0109, r1
			EVENT_USB_Device_Disconnect();
 708:	6e dd       	rcall	.-1316   	; 0x1e6 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 70a:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 70e:	80 ff       	sbrs	r24, 0
 710:	18 c0       	rjmp	.+48     	; 0x742 <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 712:	80 91 e2 00 	lds	r24, 0x00E2
 716:	80 ff       	sbrs	r24, 0
 718:	14 c0       	rjmp	.+40     	; 0x742 <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 71a:	80 91 e2 00 	lds	r24, 0x00E2
 71e:	8e 7f       	andi	r24, 0xFE	; 254
 720:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 724:	80 91 e2 00 	lds	r24, 0x00E2
 728:	80 61       	ori	r24, 0x10	; 16
 72a:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 72e:	80 91 d8 00 	lds	r24, 0x00D8
 732:	80 62       	ori	r24, 0x20	; 32
 734:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 738:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 73a:	85 e0       	ldi	r24, 0x05	; 5
 73c:	80 93 09 01 	sts	0x0109, r24
		EVENT_USB_Device_Suspend();
 740:	ec d2       	rcall	.+1496   	; 0xd1a <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 742:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 746:	84 ff       	sbrs	r24, 4
 748:	2d c0       	rjmp	.+90     	; 0x7a4 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 74a:	80 91 e2 00 	lds	r24, 0x00E2
 74e:	84 ff       	sbrs	r24, 4
 750:	29 c0       	rjmp	.+82     	; 0x7a4 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 752:	8c e0       	ldi	r24, 0x0C	; 12
 754:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 756:	8e e0       	ldi	r24, 0x0E	; 14
 758:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 75a:	09 b4       	in	r0, 0x29	; 41
 75c:	00 fe       	sbrs	r0, 0
 75e:	fd cf       	rjmp	.-6      	; 0x75a <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 760:	80 91 d8 00 	lds	r24, 0x00D8
 764:	8f 7d       	andi	r24, 0xDF	; 223
 766:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 76a:	80 91 e1 00 	lds	r24, 0x00E1
 76e:	8f 7e       	andi	r24, 0xEF	; 239
 770:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 774:	80 91 e2 00 	lds	r24, 0x00E2
 778:	8f 7e       	andi	r24, 0xEF	; 239
 77a:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 77e:	80 91 e2 00 	lds	r24, 0x00E2
 782:	81 60       	ori	r24, 0x01	; 1
 784:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 788:	80 91 05 01 	lds	r24, 0x0105
 78c:	88 23       	and	r24, r24
 78e:	31 f4       	brne	.+12     	; 0x79c <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 790:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 794:	87 fd       	sbrc	r24, 7
 796:	02 c0       	rjmp	.+4      	; 0x79c <__vector_10+0x116>
 798:	81 e0       	ldi	r24, 0x01	; 1
 79a:	01 c0       	rjmp	.+2      	; 0x79e <__vector_10+0x118>
 79c:	84 e0       	ldi	r24, 0x04	; 4
 79e:	80 93 09 01 	sts	0x0109, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 7a2:	bb d2       	rcall	.+1398   	; 0xd1a <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 7a4:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 7a8:	83 ff       	sbrs	r24, 3
 7aa:	22 c0       	rjmp	.+68     	; 0x7f0 <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 7ac:	80 91 e2 00 	lds	r24, 0x00E2
 7b0:	83 ff       	sbrs	r24, 3
 7b2:	1e c0       	rjmp	.+60     	; 0x7f0 <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 7b4:	80 91 e1 00 	lds	r24, 0x00E1
 7b8:	87 7f       	andi	r24, 0xF7	; 247
 7ba:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 7be:	82 e0       	ldi	r24, 0x02	; 2
 7c0:	80 93 09 01 	sts	0x0109, r24
		USB_Device_ConfigurationNumber = 0;
 7c4:	10 92 05 01 	sts	0x0105, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 7c8:	80 91 e1 00 	lds	r24, 0x00E1
 7cc:	8e 7f       	andi	r24, 0xFE	; 254
 7ce:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 7d2:	80 91 e2 00 	lds	r24, 0x00E2
 7d6:	8e 7f       	andi	r24, 0xFE	; 254
 7d8:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 7dc:	80 91 e2 00 	lds	r24, 0x00E2
 7e0:	80 61       	ori	r24, 0x10	; 16
 7e2:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 7e6:	80 e0       	ldi	r24, 0x00	; 0
 7e8:	60 e0       	ldi	r22, 0x00	; 0
 7ea:	42 e0       	ldi	r20, 0x02	; 2
 7ec:	97 de       	rcall	.-722    	; 0x51c <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 7ee:	95 d2       	rcall	.+1322   	; 0xd1a <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 7f0:	ff 91       	pop	r31
 7f2:	ef 91       	pop	r30
 7f4:	bf 91       	pop	r27
 7f6:	af 91       	pop	r26
 7f8:	9f 91       	pop	r25
 7fa:	8f 91       	pop	r24
 7fc:	7f 91       	pop	r23
 7fe:	6f 91       	pop	r22
 800:	5f 91       	pop	r21
 802:	4f 91       	pop	r20
 804:	3f 91       	pop	r19
 806:	2f 91       	pop	r18
 808:	0f 90       	pop	r0
 80a:	0b be       	out	0x3b, r0	; 59
 80c:	0f 90       	pop	r0
 80e:	0f be       	out	0x3f, r0	; 63
 810:	0f 90       	pop	r0
 812:	1f 90       	pop	r1
 814:	18 95       	reti

00000816 <Endpoint_Write_Control_Stream_LE>:
 816:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 818:	40 91 10 01 	lds	r20, 0x0110
 81c:	50 91 11 01 	lds	r21, 0x0111
 820:	46 17       	cp	r20, r22
 822:	57 07       	cpc	r21, r23
 824:	18 f4       	brcc	.+6      	; 0x82c <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 826:	f9 01       	movw	r30, r18
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	3d c0       	rjmp	.+122    	; 0x8a6 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 82c:	61 15       	cp	r22, r1
 82e:	71 05       	cpc	r23, r1
 830:	11 f0       	breq	.+4      	; 0x836 <Endpoint_Write_Control_Stream_LE+0x20>
 832:	ab 01       	movw	r20, r22
 834:	f8 cf       	rjmp	.-16     	; 0x826 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 836:	80 91 e8 00 	lds	r24, 0x00E8
 83a:	8e 77       	andi	r24, 0x7E	; 126
 83c:	80 93 e8 00 	sts	0x00E8, r24
 840:	40 e0       	ldi	r20, 0x00	; 0
 842:	50 e0       	ldi	r21, 0x00	; 0
 844:	f0 cf       	rjmp	.-32     	; 0x826 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 846:	80 91 09 01 	lds	r24, 0x0109

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 84a:	88 23       	and	r24, r24
 84c:	f1 f1       	breq	.+124    	; 0x8ca <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 84e:	85 30       	cpi	r24, 0x05	; 5
 850:	f1 f1       	breq	.+124    	; 0x8ce <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 852:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 856:	83 ff       	sbrs	r24, 3
 858:	02 c0       	rjmp	.+4      	; 0x85e <Endpoint_Write_Control_Stream_LE+0x48>
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 85e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 862:	82 fd       	sbrc	r24, 2
 864:	2c c0       	rjmp	.+88     	; 0x8be <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 866:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 86a:	80 ff       	sbrs	r24, 0
 86c:	1c c0       	rjmp	.+56     	; 0x8a6 <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 86e:	20 91 f2 00 	lds	r18, 0x00F2
 872:	30 91 f3 00 	lds	r19, 0x00F3
 876:	07 c0       	rjmp	.+14     	; 0x886 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 878:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 87a:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 87e:	41 50       	subi	r20, 0x01	; 1
 880:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 882:	2f 5f       	subi	r18, 0xFF	; 255
 884:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 886:	41 15       	cp	r20, r1
 888:	51 05       	cpc	r21, r1
 88a:	19 f0       	breq	.+6      	; 0x892 <Endpoint_Write_Control_Stream_LE+0x7c>
 88c:	28 30       	cpi	r18, 0x08	; 8
 88e:	31 05       	cpc	r19, r1
 890:	98 f3       	brcs	.-26     	; 0x878 <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	28 30       	cpi	r18, 0x08	; 8
 896:	31 05       	cpc	r19, r1
 898:	09 f4       	brne	.+2      	; 0x89c <Endpoint_Write_Control_Stream_LE+0x86>
 89a:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 89c:	80 91 e8 00 	lds	r24, 0x00E8
 8a0:	8e 77       	andi	r24, 0x7E	; 126
 8a2:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 8a6:	41 15       	cp	r20, r1
 8a8:	51 05       	cpc	r21, r1
 8aa:	69 f6       	brne	.-102    	; 0x846 <Endpoint_Write_Control_Stream_LE+0x30>
 8ac:	99 23       	and	r25, r25
 8ae:	59 f6       	brne	.-106    	; 0x846 <Endpoint_Write_Control_Stream_LE+0x30>
 8b0:	06 c0       	rjmp	.+12     	; 0x8be <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8b2:	80 91 09 01 	lds	r24, 0x0109

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8b6:	88 23       	and	r24, r24
 8b8:	41 f0       	breq	.+16     	; 0x8ca <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8ba:	85 30       	cpi	r24, 0x05	; 5
 8bc:	41 f0       	breq	.+16     	; 0x8ce <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 8be:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 8c2:	82 ff       	sbrs	r24, 2
 8c4:	f6 cf       	rjmp	.-20     	; 0x8b2 <Endpoint_Write_Control_Stream_LE+0x9c>
 8c6:	80 e0       	ldi	r24, 0x00	; 0
 8c8:	08 95       	ret
 8ca:	82 e0       	ldi	r24, 0x02	; 2
 8cc:	08 95       	ret
 8ce:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 8d0:	08 95       	ret

000008d2 <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
 8d2:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
 8d4:	61 15       	cp	r22, r1
 8d6:	71 05       	cpc	r23, r1
 8d8:	29 f4       	brne	.+10     	; 0x8e4 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 8da:	80 91 e8 00 	lds	r24, 0x00E8
 8de:	8b 77       	andi	r24, 0x7B	; 123
 8e0:	80 93 e8 00 	sts	0x00E8, r24
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 8e4:	f9 01       	movw	r30, r18
 8e6:	22 c0       	rjmp	.+68     	; 0x92c <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8e8:	80 91 09 01 	lds	r24, 0x0109

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8ec:	88 23       	and	r24, r24
 8ee:	71 f1       	breq	.+92     	; 0x94c <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8f0:	85 30       	cpi	r24, 0x05	; 5
 8f2:	71 f1       	breq	.+92     	; 0x950 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 8f4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 8f8:	83 ff       	sbrs	r24, 3
 8fa:	02 c0       	rjmp	.+4      	; 0x900 <Endpoint_Read_Control_Stream_LE+0x2e>
 8fc:	81 e0       	ldi	r24, 0x01	; 1
 8fe:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 900:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
 904:	82 ff       	sbrs	r24, 2
 906:	f0 cf       	rjmp	.-32     	; 0x8e8 <Endpoint_Read_Control_Stream_LE+0x16>
 908:	06 c0       	rjmp	.+12     	; 0x916 <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 90a:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 90e:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 910:	61 50       	subi	r22, 0x01	; 1
 912:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
 914:	31 f0       	breq	.+12     	; 0x922 <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 916:	80 91 f2 00 	lds	r24, 0x00F2
 91a:	90 91 f3 00 	lds	r25, 0x00F3
 91e:	89 2b       	or	r24, r25
 920:	a1 f7       	brne	.-24     	; 0x90a <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 922:	80 91 e8 00 	lds	r24, 0x00E8
 926:	8b 77       	andi	r24, 0x7B	; 123
 928:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
 92c:	61 15       	cp	r22, r1
 92e:	71 05       	cpc	r23, r1
 930:	d9 f6       	brne	.-74     	; 0x8e8 <Endpoint_Read_Control_Stream_LE+0x16>
 932:	06 c0       	rjmp	.+12     	; 0x940 <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 934:	80 91 09 01 	lds	r24, 0x0109

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 938:	88 23       	and	r24, r24
 93a:	41 f0       	breq	.+16     	; 0x94c <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 93c:	85 30       	cpi	r24, 0x05	; 5
 93e:	41 f0       	breq	.+16     	; 0x950 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 940:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
 944:	80 ff       	sbrs	r24, 0
 946:	f6 cf       	rjmp	.-20     	; 0x934 <Endpoint_Read_Control_Stream_LE+0x62>
 948:	80 e0       	ldi	r24, 0x00	; 0
 94a:	08 95       	ret
 94c:	82 e0       	ldi	r24, 0x02	; 2
 94e:	08 95       	ret
 950:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 952:	08 95       	ret

00000954 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
 954:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 956:	40 91 10 01 	lds	r20, 0x0110
 95a:	50 91 11 01 	lds	r21, 0x0111
 95e:	46 17       	cp	r20, r22
 960:	57 07       	cpc	r21, r23
 962:	18 f4       	brcc	.+6      	; 0x96a <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 964:	f9 01       	movw	r30, r18
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	40 c0       	rjmp	.+128    	; 0x9ea <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 96a:	61 15       	cp	r22, r1
 96c:	71 05       	cpc	r23, r1
 96e:	11 f0       	breq	.+4      	; 0x974 <Endpoint_Write_Control_PStream_LE+0x20>
 970:	ab 01       	movw	r20, r22
 972:	f8 cf       	rjmp	.-16     	; 0x964 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 974:	80 91 e8 00 	lds	r24, 0x00E8
 978:	8e 77       	andi	r24, 0x7E	; 126
 97a:	80 93 e8 00 	sts	0x00E8, r24
 97e:	40 e0       	ldi	r20, 0x00	; 0
 980:	50 e0       	ldi	r21, 0x00	; 0
 982:	f0 cf       	rjmp	.-32     	; 0x964 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 984:	80 91 09 01 	lds	r24, 0x0109

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 988:	88 23       	and	r24, r24
 98a:	09 f4       	brne	.+2      	; 0x98e <Endpoint_Write_Control_PStream_LE+0x3a>
 98c:	40 c0       	rjmp	.+128    	; 0xa0e <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 98e:	85 30       	cpi	r24, 0x05	; 5
 990:	09 f4       	brne	.+2      	; 0x994 <Endpoint_Write_Control_PStream_LE+0x40>
 992:	3f c0       	rjmp	.+126    	; 0xa12 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 994:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 998:	83 ff       	sbrs	r24, 3
 99a:	02 c0       	rjmp	.+4      	; 0x9a0 <Endpoint_Write_Control_PStream_LE+0x4c>
 99c:	81 e0       	ldi	r24, 0x01	; 1
 99e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 9a0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 9a4:	82 fd       	sbrc	r24, 2
 9a6:	2d c0       	rjmp	.+90     	; 0xa02 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 9a8:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 9ac:	80 ff       	sbrs	r24, 0
 9ae:	1d c0       	rjmp	.+58     	; 0x9ea <Endpoint_Write_Control_PStream_LE+0x96>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 9b0:	20 91 f2 00 	lds	r18, 0x00F2
 9b4:	30 91 f3 00 	lds	r19, 0x00F3
 9b8:	08 c0       	rjmp	.+16     	; 0x9ca <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 9ba:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 9bc:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 9c0:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 9c2:	41 50       	subi	r20, 0x01	; 1
 9c4:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 9c6:	2f 5f       	subi	r18, 0xFF	; 255
 9c8:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 9ca:	41 15       	cp	r20, r1
 9cc:	51 05       	cpc	r21, r1
 9ce:	19 f0       	breq	.+6      	; 0x9d6 <Endpoint_Write_Control_PStream_LE+0x82>
 9d0:	28 30       	cpi	r18, 0x08	; 8
 9d2:	31 05       	cpc	r19, r1
 9d4:	90 f3       	brcs	.-28     	; 0x9ba <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	28 30       	cpi	r18, 0x08	; 8
 9da:	31 05       	cpc	r19, r1
 9dc:	09 f4       	brne	.+2      	; 0x9e0 <Endpoint_Write_Control_PStream_LE+0x8c>
 9de:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 9e0:	80 91 e8 00 	lds	r24, 0x00E8
 9e4:	8e 77       	andi	r24, 0x7E	; 126
 9e6:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 9ea:	41 15       	cp	r20, r1
 9ec:	51 05       	cpc	r21, r1
 9ee:	51 f6       	brne	.-108    	; 0x984 <Endpoint_Write_Control_PStream_LE+0x30>
 9f0:	99 23       	and	r25, r25
 9f2:	41 f6       	brne	.-112    	; 0x984 <Endpoint_Write_Control_PStream_LE+0x30>
 9f4:	06 c0       	rjmp	.+12     	; 0xa02 <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 9f6:	80 91 09 01 	lds	r24, 0x0109

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 9fa:	88 23       	and	r24, r24
 9fc:	41 f0       	breq	.+16     	; 0xa0e <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 9fe:	85 30       	cpi	r24, 0x05	; 5
 a00:	41 f0       	breq	.+16     	; 0xa12 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 a02:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 a06:	82 ff       	sbrs	r24, 2
 a08:	f6 cf       	rjmp	.-20     	; 0x9f6 <Endpoint_Write_Control_PStream_LE+0xa2>
 a0a:	80 e0       	ldi	r24, 0x00	; 0
 a0c:	08 95       	ret
 a0e:	82 e0       	ldi	r24, 0x02	; 2
 a10:	08 95       	ret
 a12:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 a14:	08 95       	ret

00000a16 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 a16:	0f 93       	push	r16
 a18:	1f 93       	push	r17
 a1a:	df 93       	push	r29
 a1c:	cf 93       	push	r28
 a1e:	cd b7       	in	r28, 0x3d	; 61
 a20:	de b7       	in	r29, 0x3e	; 62
 a22:	ac 97       	sbiw	r28, 0x2c	; 44
 a24:	0f b6       	in	r0, 0x3f	; 63
 a26:	f8 94       	cli
 a28:	de bf       	out	0x3e, r29	; 62
 a2a:	0f be       	out	0x3f, r0	; 63
 a2c:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 a2e:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
 a32:	80 93 0a 01 	sts	0x010A, r24
 a36:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
 a3a:	80 93 0b 01 	sts	0x010B, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 a3e:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 a42:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
 a46:	ec e0       	ldi	r30, 0x0C	; 12
 a48:	f1 e0       	ldi	r31, 0x01	; 1
 a4a:	80 93 0c 01 	sts	0x010C, r24
 a4e:	90 93 0d 01 	sts	0x010D, r25
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 a52:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 a56:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
 a5a:	80 93 0e 01 	sts	0x010E, r24
 a5e:	93 83       	std	Z+3, r25	; 0x03
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 a60:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 a64:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
 a68:	80 93 10 01 	sts	0x0110, r24
 a6c:	95 83       	std	Z+5, r25	; 0x05

	EVENT_USB_Device_ControlRequest();
 a6e:	3e dc       	rcall	.-1924   	; 0x2ec <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a70:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 a74:	83 ff       	sbrs	r24, 3
 a76:	38 c1       	rjmp	.+624    	; 0xce8 <USB_Device_ProcessControlRequest+0x2d2>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 a78:	80 91 0a 01 	lds	r24, 0x010A

		switch (USB_ControlRequest.bRequest)
 a7c:	30 91 0b 01 	lds	r19, 0x010B
 a80:	35 30       	cpi	r19, 0x05	; 5
 a82:	09 f4       	brne	.+2      	; 0xa86 <USB_Device_ProcessControlRequest+0x70>
 a84:	87 c0       	rjmp	.+270    	; 0xb94 <USB_Device_ProcessControlRequest+0x17e>
 a86:	36 30       	cpi	r19, 0x06	; 6
 a88:	40 f4       	brcc	.+16     	; 0xa9a <USB_Device_ProcessControlRequest+0x84>
 a8a:	31 30       	cpi	r19, 0x01	; 1
 a8c:	c9 f1       	breq	.+114    	; 0xb00 <USB_Device_ProcessControlRequest+0xea>
 a8e:	31 30       	cpi	r19, 0x01	; 1
 a90:	70 f0       	brcs	.+28     	; 0xaae <USB_Device_ProcessControlRequest+0x98>
 a92:	33 30       	cpi	r19, 0x03	; 3
 a94:	09 f0       	breq	.+2      	; 0xa98 <USB_Device_ProcessControlRequest+0x82>
 a96:	28 c1       	rjmp	.+592    	; 0xce8 <USB_Device_ProcessControlRequest+0x2d2>
 a98:	33 c0       	rjmp	.+102    	; 0xb00 <USB_Device_ProcessControlRequest+0xea>
 a9a:	38 30       	cpi	r19, 0x08	; 8
 a9c:	09 f4       	brne	.+2      	; 0xaa0 <USB_Device_ProcessControlRequest+0x8a>
 a9e:	f6 c0       	rjmp	.+492    	; 0xc8c <USB_Device_ProcessControlRequest+0x276>
 aa0:	39 30       	cpi	r19, 0x09	; 9
 aa2:	09 f4       	brne	.+2      	; 0xaa6 <USB_Device_ProcessControlRequest+0x90>
 aa4:	05 c1       	rjmp	.+522    	; 0xcb0 <USB_Device_ProcessControlRequest+0x29a>
 aa6:	36 30       	cpi	r19, 0x06	; 6
 aa8:	09 f0       	breq	.+2      	; 0xaac <USB_Device_ProcessControlRequest+0x96>
 aaa:	1e c1       	rjmp	.+572    	; 0xce8 <USB_Device_ProcessControlRequest+0x2d2>
 aac:	97 c0       	rjmp	.+302    	; 0xbdc <USB_Device_ProcessControlRequest+0x1c6>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 aae:	80 38       	cpi	r24, 0x80	; 128
 ab0:	21 f0       	breq	.+8      	; 0xaba <USB_Device_ProcessControlRequest+0xa4>
 ab2:	82 38       	cpi	r24, 0x82	; 130
 ab4:	09 f0       	breq	.+2      	; 0xab8 <USB_Device_ProcessControlRequest+0xa2>
 ab6:	18 c1       	rjmp	.+560    	; 0xce8 <USB_Device_ProcessControlRequest+0x2d2>
 ab8:	08 c0       	rjmp	.+16     	; 0xaca <USB_Device_ProcessControlRequest+0xb4>
 aba:	90 91 06 01 	lds	r25, 0x0106
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 abe:	80 91 07 01 	lds	r24, 0x0107
 ac2:	88 23       	and	r24, r24
 ac4:	99 f0       	breq	.+38     	; 0xaec <USB_Device_ProcessControlRequest+0xd6>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 ac6:	92 60       	ori	r25, 0x02	; 2
 ac8:	11 c0       	rjmp	.+34     	; 0xaec <USB_Device_ProcessControlRequest+0xd6>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 aca:	80 91 0e 01 	lds	r24, 0x010E
 ace:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 ad0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 ad4:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
 ad8:	90 e0       	ldi	r25, 0x00	; 0
 ada:	25 e0       	ldi	r18, 0x05	; 5
 adc:	96 95       	lsr	r25
 ade:	87 95       	ror	r24
 ae0:	2a 95       	dec	r18
 ae2:	e1 f7       	brne	.-8      	; 0xadc <USB_Device_ProcessControlRequest+0xc6>
 ae4:	98 2f       	mov	r25, r24
 ae6:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 ae8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 aec:	80 91 e8 00 	lds	r24, 0x00E8
 af0:	87 7f       	andi	r24, 0xF7	; 247
 af2:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 af6:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
 afa:	10 92 f1 00 	sts	0x00F1, r1
 afe:	d1 c0       	rjmp	.+418    	; 0xca2 <USB_Device_ProcessControlRequest+0x28c>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b00:	88 23       	and	r24, r24
 b02:	19 f0       	breq	.+6      	; 0xb0a <USB_Device_ProcessControlRequest+0xf4>
 b04:	82 30       	cpi	r24, 0x02	; 2
 b06:	09 f0       	breq	.+2      	; 0xb0a <USB_Device_ProcessControlRequest+0xf4>
 b08:	ef c0       	rjmp	.+478    	; 0xce8 <USB_Device_ProcessControlRequest+0x2d2>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 b0a:	90 e0       	ldi	r25, 0x00	; 0
 b0c:	8f 71       	andi	r24, 0x1F	; 31
 b0e:	90 70       	andi	r25, 0x00	; 0
 b10:	00 97       	sbiw	r24, 0x00	; 0
 b12:	21 f0       	breq	.+8      	; 0xb1c <USB_Device_ProcessControlRequest+0x106>
 b14:	02 97       	sbiw	r24, 0x02	; 2
 b16:	09 f0       	breq	.+2      	; 0xb1a <USB_Device_ProcessControlRequest+0x104>
 b18:	e7 c0       	rjmp	.+462    	; 0xce8 <USB_Device_ProcessControlRequest+0x2d2>
 b1a:	0c c0       	rjmp	.+24     	; 0xb34 <USB_Device_ProcessControlRequest+0x11e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 b1c:	80 91 0c 01 	lds	r24, 0x010C
 b20:	81 30       	cpi	r24, 0x01	; 1
 b22:	09 f0       	breq	.+2      	; 0xb26 <USB_Device_ProcessControlRequest+0x110>
 b24:	e1 c0       	rjmp	.+450    	; 0xce8 <USB_Device_ProcessControlRequest+0x2d2>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 b26:	10 92 07 01 	sts	0x0107, r1
 b2a:	33 30       	cpi	r19, 0x03	; 3
 b2c:	69 f5       	brne	.+90     	; 0xb88 <USB_Device_ProcessControlRequest+0x172>
 b2e:	80 93 07 01 	sts	0x0107, r24
 b32:	2a c0       	rjmp	.+84     	; 0xb88 <USB_Device_ProcessControlRequest+0x172>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 b34:	80 91 0c 01 	lds	r24, 0x010C
 b38:	88 23       	and	r24, r24
 b3a:	31 f5       	brne	.+76     	; 0xb88 <USB_Device_ProcessControlRequest+0x172>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 b3c:	20 91 0e 01 	lds	r18, 0x010E
 b40:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 b42:	09 f4       	brne	.+2      	; 0xb46 <USB_Device_ProcessControlRequest+0x130>
 b44:	d1 c0       	rjmp	.+418    	; 0xce8 <USB_Device_ProcessControlRequest+0x2d2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 b46:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 b4a:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 b4e:	80 ff       	sbrs	r24, 0
 b50:	1b c0       	rjmp	.+54     	; 0xb88 <USB_Device_ProcessControlRequest+0x172>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 b52:	33 30       	cpi	r19, 0x03	; 3
 b54:	21 f4       	brne	.+8      	; 0xb5e <USB_Device_ProcessControlRequest+0x148>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 b56:	80 91 eb 00 	lds	r24, 0x00EB
 b5a:	80 62       	ori	r24, 0x20	; 32
 b5c:	13 c0       	rjmp	.+38     	; 0xb84 <USB_Device_ProcessControlRequest+0x16e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 b5e:	80 91 eb 00 	lds	r24, 0x00EB
 b62:	80 61       	ori	r24, 0x10	; 16
 b64:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 b68:	81 e0       	ldi	r24, 0x01	; 1
 b6a:	90 e0       	ldi	r25, 0x00	; 0
 b6c:	02 c0       	rjmp	.+4      	; 0xb72 <USB_Device_ProcessControlRequest+0x15c>
 b6e:	88 0f       	add	r24, r24
 b70:	99 1f       	adc	r25, r25
 b72:	2a 95       	dec	r18
 b74:	e2 f7       	brpl	.-8      	; 0xb6e <USB_Device_ProcessControlRequest+0x158>
 b76:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 b7a:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 b7e:	80 91 eb 00 	lds	r24, 0x00EB
 b82:	88 60       	ori	r24, 0x08	; 8
 b84:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 b88:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b8c:	80 91 e8 00 	lds	r24, 0x00E8
 b90:	87 7f       	andi	r24, 0xF7	; 247
 b92:	8a c0       	rjmp	.+276    	; 0xca8 <USB_Device_ProcessControlRequest+0x292>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b94:	88 23       	and	r24, r24
 b96:	09 f0       	breq	.+2      	; 0xb9a <USB_Device_ProcessControlRequest+0x184>
 b98:	a7 c0       	rjmp	.+334    	; 0xce8 <USB_Device_ProcessControlRequest+0x2d2>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 b9a:	10 91 0c 01 	lds	r17, 0x010C
 b9e:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 ba0:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 ba2:	f8 94       	cli
 ba4:	80 91 e8 00 	lds	r24, 0x00E8
 ba8:	87 7f       	andi	r24, 0xF7	; 247
 baa:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 bae:	eb dc       	rcall	.-1578   	; 0x586 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 bb0:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
 bb4:	80 ff       	sbrs	r24, 0
 bb6:	fc cf       	rjmp	.-8      	; 0xbb0 <USB_Device_ProcessControlRequest+0x19a>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 bb8:	80 91 e3 00 	lds	r24, 0x00E3
 bbc:	80 78       	andi	r24, 0x80	; 128
 bbe:	81 2b       	or	r24, r17

				UDADDR = Temp;
 bc0:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
 bc4:	80 68       	ori	r24, 0x80	; 128
 bc6:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 bca:	11 23       	and	r17, r17
 bcc:	11 f4       	brne	.+4      	; 0xbd2 <USB_Device_ProcessControlRequest+0x1bc>
 bce:	82 e0       	ldi	r24, 0x02	; 2
 bd0:	01 c0       	rjmp	.+2      	; 0xbd4 <USB_Device_ProcessControlRequest+0x1be>
 bd2:	83 e0       	ldi	r24, 0x03	; 3
 bd4:	80 93 09 01 	sts	0x0109, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 bd8:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
 bda:	86 c0       	rjmp	.+268    	; 0xce8 <USB_Device_ProcessControlRequest+0x2d2>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 bdc:	80 58       	subi	r24, 0x80	; 128
 bde:	82 30       	cpi	r24, 0x02	; 2
 be0:	08 f0       	brcs	.+2      	; 0xbe4 <USB_Device_ProcessControlRequest+0x1ce>
 be2:	82 c0       	rjmp	.+260    	; 0xce8 <USB_Device_ProcessControlRequest+0x2d2>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 be4:	80 91 0c 01 	lds	r24, 0x010C
 be8:	90 91 0d 01 	lds	r25, 0x010D
 bec:	23 e0       	ldi	r18, 0x03	; 3
 bee:	8c 3d       	cpi	r24, 0xDC	; 220
 bf0:	92 07       	cpc	r25, r18
 bf2:	09 f0       	breq	.+2      	; 0xbf6 <USB_Device_ProcessControlRequest+0x1e0>
 bf4:	33 c0       	rjmp	.+102    	; 0xc5c <USB_Device_ProcessControlRequest+0x246>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 bf6:	83 e0       	ldi	r24, 0x03	; 3
 bf8:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 bfa:	8a e2       	ldi	r24, 0x2A	; 42
 bfc:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 bfe:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 c00:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 c02:	de 01       	movw	r26, r28
 c04:	15 96       	adiw	r26, 0x05	; 5
 c06:	6e e0       	ldi	r22, 0x0E	; 14
 c08:	40 e0       	ldi	r20, 0x00	; 0
 c0a:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 c0c:	11 e2       	ldi	r17, 0x21	; 33
 c0e:	e6 2f       	mov	r30, r22
 c10:	f0 e0       	ldi	r31, 0x00	; 0
 c12:	10 93 57 00 	sts	0x0057, r17
 c16:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
 c18:	40 ff       	sbrs	r20, 0
 c1a:	03 c0       	rjmp	.+6      	; 0xc22 <USB_Device_ProcessControlRequest+0x20c>
					{
						SerialByte >>= 4;
 c1c:	82 95       	swap	r24
 c1e:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
 c20:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 c22:	8f 70       	andi	r24, 0x0F	; 15
 c24:	28 2f       	mov	r18, r24
 c26:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 c28:	8a 30       	cpi	r24, 0x0A	; 10
 c2a:	18 f0       	brcs	.+6      	; 0xc32 <USB_Device_ProcessControlRequest+0x21c>
 c2c:	c9 01       	movw	r24, r18
 c2e:	c7 96       	adiw	r24, 0x37	; 55
 c30:	02 c0       	rjmp	.+4      	; 0xc36 <USB_Device_ProcessControlRequest+0x220>
 c32:	c9 01       	movw	r24, r18
 c34:	c0 96       	adiw	r24, 0x30	; 48
 c36:	8d 93       	st	X+, r24
 c38:	9d 93       	st	X+, r25
 c3a:	4f 5f       	subi	r20, 0xFF	; 255
 c3c:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 c3e:	44 31       	cpi	r20, 0x14	; 20
 c40:	51 05       	cpc	r21, r1
 c42:	29 f7       	brne	.-54     	; 0xc0e <USB_Device_ProcessControlRequest+0x1f8>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 c44:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c46:	80 91 e8 00 	lds	r24, 0x00E8
 c4a:	87 7f       	andi	r24, 0xF7	; 247
 c4c:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 c50:	ce 01       	movw	r24, r28
 c52:	03 96       	adiw	r24, 0x03	; 3
 c54:	6a e2       	ldi	r22, 0x2A	; 42
 c56:	70 e0       	ldi	r23, 0x00	; 0
 c58:	de dd       	rcall	.-1092   	; 0x816 <Endpoint_Write_Control_Stream_LE>
 c5a:	12 c0       	rjmp	.+36     	; 0xc80 <USB_Device_ProcessControlRequest+0x26a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 c5c:	60 91 0e 01 	lds	r22, 0x010E
 c60:	ae 01       	movw	r20, r28
 c62:	4f 5f       	subi	r20, 0xFF	; 255
 c64:	5f 4f       	sbci	r21, 0xFF	; 255
 c66:	2c dc       	rcall	.-1960   	; 0x4c0 <CALLBACK_USB_GetDescriptor>
 c68:	bc 01       	movw	r22, r24
 c6a:	00 97       	sbiw	r24, 0x00	; 0
 c6c:	09 f4       	brne	.+2      	; 0xc70 <USB_Device_ProcessControlRequest+0x25a>
 c6e:	3c c0       	rjmp	.+120    	; 0xce8 <USB_Device_ProcessControlRequest+0x2d2>
 c70:	80 91 e8 00 	lds	r24, 0x00E8
 c74:	87 7f       	andi	r24, 0xF7	; 247
 c76:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 c7a:	89 81       	ldd	r24, Y+1	; 0x01
 c7c:	9a 81       	ldd	r25, Y+2	; 0x02
 c7e:	6a de       	rcall	.-812    	; 0x954 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 c80:	80 91 e8 00 	lds	r24, 0x00E8
 c84:	8b 77       	andi	r24, 0x7B	; 123
 c86:	80 93 e8 00 	sts	0x00E8, r24
 c8a:	2e c0       	rjmp	.+92     	; 0xce8 <USB_Device_ProcessControlRequest+0x2d2>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 c8c:	80 38       	cpi	r24, 0x80	; 128
 c8e:	61 f5       	brne	.+88     	; 0xce8 <USB_Device_ProcessControlRequest+0x2d2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c90:	80 91 e8 00 	lds	r24, 0x00E8
 c94:	87 7f       	andi	r24, 0xF7	; 247
 c96:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 c9a:	80 91 05 01 	lds	r24, 0x0105
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 c9e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 ca2:	80 91 e8 00 	lds	r24, 0x00E8
 ca6:	8e 77       	andi	r24, 0x7E	; 126
 ca8:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 cac:	6c dc       	rcall	.-1832   	; 0x586 <Endpoint_ClearStatusStage>
 cae:	1c c0       	rjmp	.+56     	; 0xce8 <USB_Device_ProcessControlRequest+0x2d2>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 cb0:	88 23       	and	r24, r24
 cb2:	d1 f4       	brne	.+52     	; 0xce8 <USB_Device_ProcessControlRequest+0x2d2>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 cb4:	90 91 0c 01 	lds	r25, 0x010C
 cb8:	92 30       	cpi	r25, 0x02	; 2
 cba:	b0 f4       	brcc	.+44     	; 0xce8 <USB_Device_ProcessControlRequest+0x2d2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cbc:	80 91 e8 00 	lds	r24, 0x00E8
 cc0:	87 7f       	andi	r24, 0xF7	; 247
 cc2:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 cc6:	90 93 05 01 	sts	0x0105, r25

	Endpoint_ClearStatusStage();
 cca:	5d dc       	rcall	.-1862   	; 0x586 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 ccc:	80 91 05 01 	lds	r24, 0x0105
 cd0:	88 23       	and	r24, r24
 cd2:	31 f4       	brne	.+12     	; 0xce0 <USB_Device_ProcessControlRequest+0x2ca>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 cd4:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 cd8:	87 fd       	sbrc	r24, 7
 cda:	02 c0       	rjmp	.+4      	; 0xce0 <USB_Device_ProcessControlRequest+0x2ca>
 cdc:	81 e0       	ldi	r24, 0x01	; 1
 cde:	01 c0       	rjmp	.+2      	; 0xce2 <USB_Device_ProcessControlRequest+0x2cc>
 ce0:	84 e0       	ldi	r24, 0x04	; 4
 ce2:	80 93 09 01 	sts	0x0109, r24

	EVENT_USB_Device_ConfigurationChanged();
 ce6:	bb db       	rcall	.-2186   	; 0x45e <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 ce8:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 cec:	83 ff       	sbrs	r24, 3
 cee:	0a c0       	rjmp	.+20     	; 0xd04 <USB_Device_ProcessControlRequest+0x2ee>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 cf0:	80 91 eb 00 	lds	r24, 0x00EB
 cf4:	80 62       	ori	r24, 0x20	; 32
 cf6:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cfa:	80 91 e8 00 	lds	r24, 0x00E8
 cfe:	87 7f       	andi	r24, 0xF7	; 247
 d00:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 d04:	ac 96       	adiw	r28, 0x2c	; 44
 d06:	0f b6       	in	r0, 0x3f	; 63
 d08:	f8 94       	cli
 d0a:	de bf       	out	0x3e, r29	; 62
 d0c:	0f be       	out	0x3f, r0	; 63
 d0e:	cd bf       	out	0x3d, r28	; 61
 d10:	cf 91       	pop	r28
 d12:	df 91       	pop	r29
 d14:	1f 91       	pop	r17
 d16:	0f 91       	pop	r16
 d18:	08 95       	ret

00000d1a <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 d1a:	08 95       	ret

00000d1c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 d1c:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 d1e:	80 91 09 01 	lds	r24, 0x0109
 d22:	88 23       	and	r24, r24
 d24:	61 f0       	breq	.+24     	; 0xd3e <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 d26:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 d2a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d2e:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 d32:	83 ff       	sbrs	r24, 3
 d34:	01 c0       	rjmp	.+2      	; 0xd38 <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
 d36:	6f de       	rcall	.-802    	; 0xa16 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 d38:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 d3a:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 d3e:	1f 91       	pop	r17
 d40:	08 95       	ret

00000d42 <__udivmodsi4>:
 d42:	a1 e2       	ldi	r26, 0x21	; 33
 d44:	1a 2e       	mov	r1, r26
 d46:	aa 1b       	sub	r26, r26
 d48:	bb 1b       	sub	r27, r27
 d4a:	fd 01       	movw	r30, r26
 d4c:	0d c0       	rjmp	.+26     	; 0xd68 <__udivmodsi4_ep>

00000d4e <__udivmodsi4_loop>:
 d4e:	aa 1f       	adc	r26, r26
 d50:	bb 1f       	adc	r27, r27
 d52:	ee 1f       	adc	r30, r30
 d54:	ff 1f       	adc	r31, r31
 d56:	a2 17       	cp	r26, r18
 d58:	b3 07       	cpc	r27, r19
 d5a:	e4 07       	cpc	r30, r20
 d5c:	f5 07       	cpc	r31, r21
 d5e:	20 f0       	brcs	.+8      	; 0xd68 <__udivmodsi4_ep>
 d60:	a2 1b       	sub	r26, r18
 d62:	b3 0b       	sbc	r27, r19
 d64:	e4 0b       	sbc	r30, r20
 d66:	f5 0b       	sbc	r31, r21

00000d68 <__udivmodsi4_ep>:
 d68:	66 1f       	adc	r22, r22
 d6a:	77 1f       	adc	r23, r23
 d6c:	88 1f       	adc	r24, r24
 d6e:	99 1f       	adc	r25, r25
 d70:	1a 94       	dec	r1
 d72:	69 f7       	brne	.-38     	; 0xd4e <__udivmodsi4_loop>
 d74:	60 95       	com	r22
 d76:	70 95       	com	r23
 d78:	80 95       	com	r24
 d7a:	90 95       	com	r25
 d7c:	9b 01       	movw	r18, r22
 d7e:	ac 01       	movw	r20, r24
 d80:	bd 01       	movw	r22, r26
 d82:	cf 01       	movw	r24, r30
 d84:	08 95       	ret

00000d86 <_exit>:
 d86:	f8 94       	cli

00000d88 <__stop_program>:
 d88:	ff cf       	rjmp	.-2      	; 0xd88 <__stop_program>
