
DualVirtualSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  00000f50  00000fe4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800160  00800160  00001044  2**0
                  ALLOC
  3 .stab         000008f4  00000000  00000000  00001044  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000b3  00000000  00000000  00001938  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002c8  00000000  00000000  000019eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000007f8  00000000  00000000  00001cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004b82  00000000  00000000  000024ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000011c3  00000000  00000000  0000702d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003f3a  00000000  00000000  000081f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000410  00000000  00000000  0000c12c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002256  00000000  00000000  0000c53c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002461  00000000  00000000  0000e792  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000368  00000000  00000000  00010bf3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
   0:	b9 c0       	rjmp	.+370    	; 0x174 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   2:	00 00       	nop

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
   4:	d4 c0       	rjmp	.+424    	; 0x1ae <__bad_interrupt>
   6:	00 00       	nop
   8:	d2 c0       	rjmp	.+420    	; 0x1ae <__bad_interrupt>
   a:	00 00       	nop
   c:	d0 c0       	rjmp	.+416    	; 0x1ae <__bad_interrupt>
   e:	00 00       	nop
  10:	ce c0       	rjmp	.+412    	; 0x1ae <__bad_interrupt>
  12:	00 00       	nop
  14:	cc c0       	rjmp	.+408    	; 0x1ae <__bad_interrupt>
  16:	00 00       	nop
  18:	ca c0       	rjmp	.+404    	; 0x1ae <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c8 c0       	rjmp	.+400    	; 0x1ae <__bad_interrupt>
  1e:	00 00       	nop
  20:	c6 c0       	rjmp	.+396    	; 0x1ae <__bad_interrupt>
  22:	00 00       	nop
  24:	c4 c0       	rjmp	.+392    	; 0x1ae <__bad_interrupt>
  26:	00 00       	nop
  28:	8f c3       	rjmp	.+1822   	; 0x748 <__vector_10>
  2a:	00 00       	nop
  2c:	c0 c0       	rjmp	.+384    	; 0x1ae <__bad_interrupt>
  2e:	00 00       	nop
  30:	be c0       	rjmp	.+380    	; 0x1ae <__bad_interrupt>
  32:	00 00       	nop
  34:	bc c0       	rjmp	.+376    	; 0x1ae <__bad_interrupt>
  36:	00 00       	nop
  38:	ba c0       	rjmp	.+372    	; 0x1ae <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b8 c0       	rjmp	.+368    	; 0x1ae <__bad_interrupt>
  3e:	00 00       	nop
  40:	b6 c0       	rjmp	.+364    	; 0x1ae <__bad_interrupt>
  42:	00 00       	nop
  44:	b4 c0       	rjmp	.+360    	; 0x1ae <__bad_interrupt>
  46:	00 00       	nop
  48:	b2 c0       	rjmp	.+356    	; 0x1ae <__bad_interrupt>
  4a:	00 00       	nop
  4c:	b0 c0       	rjmp	.+352    	; 0x1ae <__bad_interrupt>
  4e:	00 00       	nop
  50:	ae c0       	rjmp	.+348    	; 0x1ae <__bad_interrupt>
  52:	00 00       	nop
  54:	ac c0       	rjmp	.+344    	; 0x1ae <__bad_interrupt>
  56:	00 00       	nop
  58:	aa c0       	rjmp	.+340    	; 0x1ae <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a8 c0       	rjmp	.+336    	; 0x1ae <__bad_interrupt>
  5e:	00 00       	nop
  60:	a6 c0       	rjmp	.+332    	; 0x1ae <__bad_interrupt>
  62:	00 00       	nop
  64:	a4 c0       	rjmp	.+328    	; 0x1ae <__bad_interrupt>
  66:	00 00       	nop
  68:	a2 c0       	rjmp	.+324    	; 0x1ae <__bad_interrupt>
  6a:	00 00       	nop
  6c:	a0 c0       	rjmp	.+320    	; 0x1ae <__bad_interrupt>
  6e:	00 00       	nop
  70:	9e c0       	rjmp	.+316    	; 0x1ae <__bad_interrupt>
  72:	00 00       	nop
  74:	9c c0       	rjmp	.+312    	; 0x1ae <__bad_interrupt>
  76:	00 00       	nop
  78:	9a c0       	rjmp	.+308    	; 0x1ae <__bad_interrupt>
  7a:	00 00       	nop
  7c:	98 c0       	rjmp	.+304    	; 0x1ae <__bad_interrupt>
  7e:	00 00       	nop
  80:	96 c0       	rjmp	.+300    	; 0x1ae <__bad_interrupt>
  82:	00 00       	nop
  84:	94 c0       	rjmp	.+296    	; 0x1ae <__bad_interrupt>
  86:	00 00       	nop
  88:	92 c0       	rjmp	.+292    	; 0x1ae <__bad_interrupt>
  8a:	00 00       	nop
  8c:	90 c0       	rjmp	.+288    	; 0x1ae <__bad_interrupt>
  8e:	00 00       	nop
  90:	8e c0       	rjmp	.+284    	; 0x1ae <__bad_interrupt>
  92:	00 00       	nop
  94:	8c c0       	rjmp	.+280    	; 0x1ae <__bad_interrupt>
  96:	00 00       	nop

00000098 <DeviceDescriptor>:
  98:	12 01 10 01 ef 02 01 08 eb 03 4e 20 01 00 01 02     ..........N ....
  a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
  aa:	09 02 83 00 04 01 00 c0 32 08 0b 00 02 02 02 01     ........2.......
  ba:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
  ca:	24 02 06 05 24 06 00 01 07 05 83 03 08 00 ff 09     $...$...........
  da:	04 01 00 02 0a 00 00 00 07 05 02 02 10 00 01 07     ................
  ea:	05 81 02 10 00 01 08 0b 02 02 02 02 01 00 09 04     ................
  fa:	02 00 01 02 02 01 00 05 24 00 10 01 04 24 02 06     ........$....$..
 10a:	05 24 06 02 03 07 05 86 03 08 00 ff 09 04 03 00     .$..............
 11a:	02 0a 00 00 00 07 05 05 02 10 00 01 07 05 84 02     ................
 12a:	10 00 01                                            ...

0000012d <LanguageString>:
 12d:	04 03 09 04                                         ....

00000131 <ManufacturerString>:
 131:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
 141:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0000014b <ProductString>:
 14b:	1c 03 4c 00 55 00 46 00 41 00 20 00 44 00 75 00     ..L.U.F.A. .D.u.
 15b:	61 00 6c 00 20 00 43 00 44 00 43 00 20 00 44 00     a.l. .C.D.C. .D.
 16b:	65 00 6d 00 6f 00 00 00 00                          e.m.o....

00000174 <__ctors_end>:
 174:	11 24       	eor	r1, r1
 176:	1f be       	out	0x3f, r1	; 63
 178:	cf ef       	ldi	r28, 0xFF	; 255
 17a:	d0 e2       	ldi	r29, 0x20	; 32
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	cd bf       	out	0x3d, r28	; 61

00000180 <__do_copy_data>:
 180:	11 e0       	ldi	r17, 0x01	; 1
 182:	a0 e0       	ldi	r26, 0x00	; 0
 184:	b1 e0       	ldi	r27, 0x01	; 1
 186:	e0 e5       	ldi	r30, 0x50	; 80
 188:	ff e0       	ldi	r31, 0x0F	; 15
 18a:	00 e0       	ldi	r16, 0x00	; 0
 18c:	0b bf       	out	0x3b, r16	; 59
 18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x14>
 190:	07 90       	elpm	r0, Z+
 192:	0d 92       	st	X+, r0
 194:	a0 36       	cpi	r26, 0x60	; 96
 196:	b1 07       	cpc	r27, r17
 198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0x10>

0000019a <__do_clear_bss>:
 19a:	11 e0       	ldi	r17, 0x01	; 1
 19c:	a0 e6       	ldi	r26, 0x60	; 96
 19e:	b1 e0       	ldi	r27, 0x01	; 1
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
 1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
 1a4:	ae 36       	cpi	r26, 0x6E	; 110
 1a6:	b1 07       	cpc	r27, r17
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
 1aa:	ae d1       	rcall	.+860    	; 0x508 <main>
 1ac:	cf c6       	rjmp	.+3486   	; 0xf4c <_exit>

000001ae <__bad_interrupt>:
 1ae:	28 cf       	rjmp	.-432    	; 0x0 <__vectors>

000001b0 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 1b0:	8b b1       	in	r24, 0x0b	; 11
 1b2:	8f 70       	andi	r24, 0x0F	; 15
 1b4:	80 6a       	ori	r24, 0xA0	; 160
 1b6:	8b b9       	out	0x0b, r24	; 11
 */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
 1b8:	08 95       	ret

000001ba <EVENT_USB_Device_Disconnect>:
 1ba:	8b b1       	in	r24, 0x0b	; 11
 1bc:	8f 70       	andi	r24, 0x0F	; 15
 1be:	80 61       	ori	r24, 0x10	; 16
 1c0:	8b b9       	out	0x0b, r24	; 11
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
 1c2:	08 95       	ret

000001c4 <CDC2_Task>:

/** Function to manage CDC data transmission and reception to and from the host for the second CDC interface, which echoes back
 *  all data sent to it from the host.
 */
void CDC2_Task(void)
{
 1c4:	8f 92       	push	r8
 1c6:	9f 92       	push	r9
 1c8:	bf 92       	push	r11
 1ca:	cf 92       	push	r12
 1cc:	df 92       	push	r13
 1ce:	ef 92       	push	r14
 1d0:	ff 92       	push	r15
 1d2:	0f 93       	push	r16
 1d4:	1f 93       	push	r17
 1d6:	df 93       	push	r29
 1d8:	cf 93       	push	r28
 1da:	cd b7       	in	r28, 0x3d	; 61
 1dc:	de b7       	in	r29, 0x3e	; 62
		Endpoint_WaitUntilReady();

		/* Send an empty packet to prevent host buffering */
		Endpoint_ClearIN();
	}
}
 1de:	8d b6       	in	r8, 0x3d	; 61
 1e0:	9e b6       	in	r9, 0x3e	; 62
 *  all data sent to it from the host.
 */
void CDC2_Task(void)
{
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 1e2:	b0 90 65 01 	lds	r11, 0x0165
 1e6:	24 e0       	ldi	r18, 0x04	; 4
 1e8:	b2 16       	cp	r11, r18
 1ea:	09 f0       	breq	.+2      	; 0x1ee <CDC2_Task+0x2a>
 1ec:	41 c0       	rjmp	.+130    	; 0x270 <CDC2_Task+0xac>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 1ee:	85 e0       	ldi	r24, 0x05	; 5
 1f0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 1f4:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the Serial Rx Endpoint */
	Endpoint_SelectEndpoint(CDC2_RX_EPNUM);

	/* Check to see if any data has been received */
	if (Endpoint_IsOUTReceived())
 1f8:	82 ff       	sbrs	r24, 2
 1fa:	3a c0       	rjmp	.+116    	; 0x270 <CDC2_Task+0xac>
 1fc:	ce b6       	in	r12, 0x3e	; 62
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 1fe:	80 91 f2 00 	lds	r24, 0x00F2
 202:	90 91 f3 00 	lds	r25, 0x00F3
	{
		/* Create a temp buffer big enough to hold the incoming endpoint packet */
		uint8_t  Buffer[Endpoint_BytesInEndpoint()];
 206:	2d b7       	in	r18, 0x3d	; 61
 208:	3e b7       	in	r19, 0x3e	; 62
 20a:	28 1b       	sub	r18, r24
 20c:	39 0b       	sbc	r19, r25
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	f8 94       	cli
 212:	3e bf       	out	0x3e, r19	; 62
 214:	0f be       	out	0x3f, r0	; 63
 216:	2d bf       	out	0x3d, r18	; 61
 218:	0d b7       	in	r16, 0x3d	; 61
 21a:	1e b7       	in	r17, 0x3e	; 62
 21c:	0f 5f       	subi	r16, 0xFF	; 255
 21e:	1f 4f       	sbci	r17, 0xFF	; 255
 220:	e0 90 f2 00 	lds	r14, 0x00F2
 224:	f0 90 f3 00 	lds	r15, 0x00F3

		/* Remember how large the incoming packet is */
		uint16_t DataLength = Endpoint_BytesInEndpoint();

		/* Read in the incoming packet into the buffer */
		Endpoint_Read_Stream_LE(&Buffer, DataLength, NULL);
 228:	c8 01       	movw	r24, r16
 22a:	b7 01       	movw	r22, r14
 22c:	40 e0       	ldi	r20, 0x00	; 0
 22e:	50 e0       	ldi	r21, 0x00	; 0
 230:	53 d4       	rcall	.+2214   	; 0xad8 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 232:	80 91 e8 00 	lds	r24, 0x00E8
 236:	8b 77       	andi	r24, 0x7B	; 123
 238:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 23c:	b0 92 e9 00 	sts	0x00E9, r11

		/* Select the Serial Tx Endpoint */
		Endpoint_SelectEndpoint(CDC2_TX_EPNUM);

		/* Write the received data to the endpoint */
		Endpoint_Write_Stream_LE(&Buffer, DataLength, NULL);
 240:	c8 01       	movw	r24, r16
 242:	b7 01       	movw	r22, r14
 244:	40 e0       	ldi	r20, 0x00	; 0
 246:	50 e0       	ldi	r21, 0x00	; 0
 248:	99 d4       	rcall	.+2354   	; 0xb7c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 24a:	80 91 e8 00 	lds	r24, 0x00E8
 24e:	8e 77       	andi	r24, 0x7E	; 126
 250:	80 93 e8 00 	sts	0x00E8, r24

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();

		/* Wait until the endpoint is ready for the next packet */
		Endpoint_WaitUntilReady();
 254:	e7 d1       	rcall	.+974    	; 0x624 <Endpoint_WaitUntilReady>
 256:	80 91 e8 00 	lds	r24, 0x00E8
 25a:	8e 77       	andi	r24, 0x7E	; 126
 25c:	80 93 e8 00 	sts	0x00E8, r24
 260:	28 2d       	mov	r18, r8
 262:	3c 2d       	mov	r19, r12
 264:	c9 01       	movw	r24, r18
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	f8 94       	cli
 26a:	9e bf       	out	0x3e, r25	; 62
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	8d bf       	out	0x3d, r24	; 61

		/* Send an empty packet to prevent host buffering */
		Endpoint_ClearIN();
	}
}
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	f8 94       	cli
 274:	9e be       	out	0x3e, r9	; 62
 276:	0f be       	out	0x3f, r0	; 63
 278:	8d be       	out	0x3d, r8	; 61
 27a:	cf 91       	pop	r28
 27c:	df 91       	pop	r29
 27e:	1f 91       	pop	r17
 280:	0f 91       	pop	r16
 282:	ff 90       	pop	r15
 284:	ef 90       	pop	r14
 286:	df 90       	pop	r13
 288:	cf 90       	pop	r12
 28a:	bf 90       	pop	r11
 28c:	9f 90       	pop	r9
 28e:	8f 90       	pop	r8
 290:	08 95       	ret

00000292 <CDC1_Task>:
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
 292:	23 b1       	in	r18, 0x03	; 3
 294:	9c b1       	in	r25, 0x0c	; 12
	char*       ReportString    = NULL;
	uint8_t     JoyStatus_LCL   = Joystick_GetStatus();
	static bool ActionSent      = false;

	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 296:	80 91 65 01 	lds	r24, 0x0165
 29a:	84 30       	cpi	r24, 0x04	; 4
 29c:	09 f0       	breq	.+2      	; 0x2a0 <CDC1_Task+0xe>
 29e:	5e c0       	rjmp	.+188    	; 0x35c <CDC1_Task+0xca>
 2a0:	90 95       	com	r25
 2a2:	89 2f       	mov	r24, r25
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	80 73       	andi	r24, 0x30	; 48
 2a8:	90 70       	andi	r25, 0x00	; 0
 2aa:	95 95       	asr	r25
 2ac:	87 95       	ror	r24
 2ae:	92 2f       	mov	r25, r18
 2b0:	90 95       	com	r25
 2b2:	90 7e       	andi	r25, 0xE0	; 224
 2b4:	98 2b       	or	r25, r24
	  return;

	/* Determine if a joystick action has occurred */
	if (JoyStatus_LCL & JOY_UP)
 2b6:	97 fd       	sbrc	r25, 7
 2b8:	17 c0       	rjmp	.+46     	; 0x2e8 <CDC1_Task+0x56>
	  ReportString = "Joystick Up\r\n";
	else if (JoyStatus_LCL & JOY_DOWN)
 2ba:	94 ff       	sbrs	r25, 4
 2bc:	03 c0       	rjmp	.+6      	; 0x2c4 <CDC1_Task+0x32>
 2be:	20 e0       	ldi	r18, 0x00	; 0
 2c0:	31 e0       	ldi	r19, 0x01	; 1
 2c2:	14 c0       	rjmp	.+40     	; 0x2ec <CDC1_Task+0x5a>
	  ReportString = "Joystick Down\r\n";
	else if (JoyStatus_LCL & JOY_LEFT)
 2c4:	96 ff       	sbrs	r25, 6
 2c6:	03 c0       	rjmp	.+6      	; 0x2ce <CDC1_Task+0x3c>
 2c8:	20 e1       	ldi	r18, 0x10	; 16
 2ca:	31 e0       	ldi	r19, 0x01	; 1
 2cc:	0f c0       	rjmp	.+30     	; 0x2ec <CDC1_Task+0x5a>
	  ReportString = "Joystick Left\r\n";
	else if (JoyStatus_LCL & JOY_RIGHT)
 2ce:	93 ff       	sbrs	r25, 3
 2d0:	03 c0       	rjmp	.+6      	; 0x2d8 <CDC1_Task+0x46>
 2d2:	20 e2       	ldi	r18, 0x20	; 32
 2d4:	31 e0       	ldi	r19, 0x01	; 1
 2d6:	0a c0       	rjmp	.+20     	; 0x2ec <CDC1_Task+0x5a>
	  ReportString = "Joystick Right\r\n";
	else if (JoyStatus_LCL & JOY_PRESS)
 2d8:	95 ff       	sbrs	r25, 5
 2da:	03 c0       	rjmp	.+6      	; 0x2e2 <CDC1_Task+0x50>
 2dc:	21 e3       	ldi	r18, 0x31	; 49
 2de:	31 e0       	ldi	r19, 0x01	; 1
 2e0:	05 c0       	rjmp	.+10     	; 0x2ec <CDC1_Task+0x5a>
	  ReportString = "Joystick Pressed\r\n";
	else
	  ActionSent = false;
 2e2:	10 92 60 01 	sts	0x0160, r1
 2e6:	2e c0       	rjmp	.+92     	; 0x344 <CDC1_Task+0xb2>
 2e8:	24 e4       	ldi	r18, 0x44	; 68
 2ea:	31 e0       	ldi	r19, 0x01	; 1

	/* Flag management - Only allow one string to be sent per action */
	if ((ReportString != NULL) && (ActionSent == false) && LineEncoding1.BaudRateBPS)
 2ec:	80 91 60 01 	lds	r24, 0x0160
 2f0:	88 23       	and	r24, r24
 2f2:	41 f5       	brne	.+80     	; 0x344 <CDC1_Task+0xb2>
 2f4:	80 91 52 01 	lds	r24, 0x0152
 2f8:	90 91 53 01 	lds	r25, 0x0153
 2fc:	a0 91 54 01 	lds	r26, 0x0154
 300:	b0 91 55 01 	lds	r27, 0x0155
 304:	00 97       	sbiw	r24, 0x00	; 0
 306:	a1 05       	cpc	r26, r1
 308:	b1 05       	cpc	r27, r1
 30a:	e1 f0       	breq	.+56     	; 0x344 <CDC1_Task+0xb2>
	{
		ActionSent = true;
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	80 93 60 01 	sts	0x0160, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 312:	80 93 e9 00 	sts	0x00E9, r24

		/* Select the Serial Tx Endpoint */
		Endpoint_SelectEndpoint(CDC1_TX_EPNUM);

		/* Write the String to the Endpoint */
		Endpoint_Write_Stream_LE(ReportString, strlen(ReportString), NULL);
 316:	f9 01       	movw	r30, r18
 318:	01 90       	ld	r0, Z+
 31a:	00 20       	and	r0, r0
 31c:	e9 f7       	brne	.-6      	; 0x318 <CDC1_Task+0x86>
 31e:	31 97       	sbiw	r30, 0x01	; 1
 320:	e2 1b       	sub	r30, r18
 322:	f3 0b       	sbc	r31, r19
 324:	c9 01       	movw	r24, r18
 326:	bf 01       	movw	r22, r30
 328:	40 e0       	ldi	r20, 0x00	; 0
 32a:	50 e0       	ldi	r21, 0x00	; 0
 32c:	27 d4       	rcall	.+2126   	; 0xb7c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 32e:	80 91 e8 00 	lds	r24, 0x00E8
 332:	8e 77       	andi	r24, 0x7E	; 126
 334:	80 93 e8 00 	sts	0x00E8, r24

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();

		/* Wait until the endpoint is ready for another packet */
		Endpoint_WaitUntilReady();
 338:	75 d1       	rcall	.+746    	; 0x624 <Endpoint_WaitUntilReady>
 33a:	80 91 e8 00 	lds	r24, 0x00E8
 33e:	8e 77       	andi	r24, 0x7E	; 126
 340:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 344:	82 e0       	ldi	r24, 0x02	; 2
 346:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 34a:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the Serial Rx Endpoint */
	Endpoint_SelectEndpoint(CDC1_RX_EPNUM);

	/* Throw away any received data from the host */
	if (Endpoint_IsOUTReceived())
 34e:	82 ff       	sbrs	r24, 2
 350:	05 c0       	rjmp	.+10     	; 0x35c <CDC1_Task+0xca>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 352:	80 91 e8 00 	lds	r24, 0x00E8
 356:	8b 77       	andi	r24, 0x7B	; 123
 358:	80 93 e8 00 	sts	0x00E8, r24
 35c:	08 95       	ret

0000035e <EVENT_USB_Device_ControlRequest>:
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	/* Determine which interface's Line Coding data is being set from the wIndex parameter */
	void* LineEncodingData = (USB_ControlRequest.wIndex == 0) ? &LineEncoding1 : &LineEncoding2;
 35e:	80 91 6a 01 	lds	r24, 0x016A
 362:	90 91 6b 01 	lds	r25, 0x016B
 366:	89 2b       	or	r24, r25
 368:	19 f0       	breq	.+6      	; 0x370 <EVENT_USB_Device_ControlRequest+0x12>
 36a:	29 e5       	ldi	r18, 0x59	; 89
 36c:	31 e0       	ldi	r19, 0x01	; 1
 36e:	02 c0       	rjmp	.+4      	; 0x374 <EVENT_USB_Device_ControlRequest+0x16>
 370:	22 e5       	ldi	r18, 0x52	; 82
 372:	31 e0       	ldi	r19, 0x01	; 1

	/* Process CDC specific control requests */
	switch (USB_ControlRequest.bRequest)
 374:	80 91 67 01 	lds	r24, 0x0167
 378:	81 32       	cpi	r24, 0x21	; 33
 37a:	29 f0       	breq	.+10     	; 0x386 <EVENT_USB_Device_ControlRequest+0x28>
 37c:	82 32       	cpi	r24, 0x22	; 34
 37e:	39 f1       	breq	.+78     	; 0x3ce <EVENT_USB_Device_ControlRequest+0x70>
 380:	80 32       	cpi	r24, 0x20	; 32
 382:	79 f5       	brne	.+94     	; 0x3e2 <EVENT_USB_Device_ControlRequest+0x84>
 384:	11 c0       	rjmp	.+34     	; 0x3a8 <EVENT_USB_Device_ControlRequest+0x4a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 386:	80 91 66 01 	lds	r24, 0x0166
 38a:	81 3a       	cpi	r24, 0xA1	; 161
 38c:	51 f5       	brne	.+84     	; 0x3e2 <EVENT_USB_Device_ControlRequest+0x84>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 38e:	80 91 e8 00 	lds	r24, 0x00E8
 392:	87 7f       	andi	r24, 0xF7	; 247
 394:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Write the line coding data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(LineEncodingData, sizeof(CDC_LineEncoding_t));
 398:	c9 01       	movw	r24, r18
 39a:	67 e0       	ldi	r22, 0x07	; 7
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	9c d2       	rcall	.+1336   	; 0x8d8 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 3a0:	80 91 e8 00 	lds	r24, 0x00E8
 3a4:	8b 77       	andi	r24, 0x7B	; 123
 3a6:	10 c0       	rjmp	.+32     	; 0x3c8 <EVENT_USB_Device_ControlRequest+0x6a>
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 3a8:	80 91 66 01 	lds	r24, 0x0166
 3ac:	81 32       	cpi	r24, 0x21	; 33
 3ae:	c9 f4       	brne	.+50     	; 0x3e2 <EVENT_USB_Device_ControlRequest+0x84>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 3b0:	80 91 e8 00 	lds	r24, 0x00E8
 3b4:	87 7f       	andi	r24, 0xF7	; 247
 3b6:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Read the line coding data in from the host into the global struct */
				Endpoint_Read_Control_Stream_LE(LineEncodingData, sizeof(CDC_LineEncoding_t));
 3ba:	c9 01       	movw	r24, r18
 3bc:	67 e0       	ldi	r22, 0x07	; 7
 3be:	70 e0       	ldi	r23, 0x00	; 0
 3c0:	e9 d2       	rcall	.+1490   	; 0x994 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 3c2:	80 91 e8 00 	lds	r24, 0x00E8
 3c6:	8e 77       	andi	r24, 0x7E	; 126
 3c8:	80 93 e8 00 	sts	0x00E8, r24
 3cc:	08 95       	ret
				Endpoint_ClearIN();
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 3ce:	80 91 66 01 	lds	r24, 0x0166
 3d2:	81 32       	cpi	r24, 0x21	; 33
 3d4:	31 f4       	brne	.+12     	; 0x3e2 <EVENT_USB_Device_ControlRequest+0x84>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 3d6:	80 91 e8 00 	lds	r24, 0x00E8
 3da:	87 7f       	andi	r24, 0xF7	; 247
 3dc:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 3e0:	00 c1       	rjmp	.+512    	; 0x5e2 <Endpoint_ClearStatusStage>
 3e2:	08 95       	ret

000003e4 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the USB_ConfigurationChanged event. This is fired when the host set the current configuration
 *  of the USB device after enumeration - the device endpoints are configured and the CDC management tasks are started.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
{
 3e4:	bf 92       	push	r11
 3e6:	cf 92       	push	r12
 3e8:	df 92       	push	r13
 3ea:	ef 92       	push	r14
 3ec:	ff 92       	push	r15
 3ee:	0f 93       	push	r16
 3f0:	1f 93       	push	r17
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	61 e8       	ldi	r22, 0x81	; 129
 3f6:	42 e1       	ldi	r20, 0x12	; 18
 3f8:	bf d0       	rcall	.+382    	; 0x578 <Endpoint_ConfigureEndpoint_Prv>
 3fa:	08 2f       	mov	r16, r24
 3fc:	82 e0       	ldi	r24, 0x02	; 2
 3fe:	60 e8       	ldi	r22, 0x80	; 128
 400:	42 e1       	ldi	r20, 0x12	; 18
 402:	ba d0       	rcall	.+372    	; 0x578 <Endpoint_ConfigureEndpoint_Prv>
 404:	c8 2e       	mov	r12, r24
 406:	83 e0       	ldi	r24, 0x03	; 3
 408:	61 ec       	ldi	r22, 0xC1	; 193
 40a:	42 e0       	ldi	r20, 0x02	; 2
 40c:	b5 d0       	rcall	.+362    	; 0x578 <Endpoint_ConfigureEndpoint_Prv>
 40e:	e8 2e       	mov	r14, r24
 410:	84 e0       	ldi	r24, 0x04	; 4
 412:	61 e8       	ldi	r22, 0x81	; 129
 414:	42 e1       	ldi	r20, 0x12	; 18
 416:	b0 d0       	rcall	.+352    	; 0x578 <Endpoint_ConfigureEndpoint_Prv>
 418:	b8 2e       	mov	r11, r24
 41a:	85 e0       	ldi	r24, 0x05	; 5
 41c:	60 e8       	ldi	r22, 0x80	; 128
 41e:	42 e1       	ldi	r20, 0x12	; 18
 420:	ab d0       	rcall	.+342    	; 0x578 <Endpoint_ConfigureEndpoint_Prv>
 422:	48 2f       	mov	r20, r24
	/* Setup first CDC Interface's Endpoints */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC1_TX_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_IN,
	                                            CDC_TXRX_EPSIZE, ENDPOINT_BANK_SINGLE);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC1_RX_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_OUT,
	                                            CDC_TXRX_EPSIZE, ENDPOINT_BANK_SINGLE);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC1_NOTIFICATION_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 424:	10 e0       	ldi	r17, 0x00	; 0
 426:	dd 24       	eor	r13, r13
 428:	0c 21       	and	r16, r12
 42a:	1d 21       	and	r17, r13
 42c:	01 70       	andi	r16, 0x01	; 1
 42e:	10 70       	andi	r17, 0x00	; 0
 430:	ff 24       	eor	r15, r15
 432:	0e 21       	and	r16, r14
 434:	1f 21       	and	r17, r15
	                                            CDC_NOTIFICATION_EPSIZE, ENDPOINT_BANK_SINGLE);

	/* Setup second CDC Interface's Endpoints */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC2_TX_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_IN,
 436:	20 e0       	ldi	r18, 0x00	; 0
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	01 2b       	or	r16, r17
 43c:	11 f0       	breq	.+4      	; 0x442 <EVENT_USB_Device_ConfigurationChanged+0x5e>
 43e:	21 e0       	ldi	r18, 0x01	; 1
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	8b 2d       	mov	r24, r11
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	28 23       	and	r18, r24
 448:	39 23       	and	r19, r25
	                                            CDC_TXRX_EPSIZE, ENDPOINT_BANK_SINGLE);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC2_RX_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_OUT,
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	23 2b       	or	r18, r19
 450:	11 f0       	breq	.+4      	; 0x456 <EVENT_USB_Device_ConfigurationChanged+0x72>
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	04 2f       	mov	r16, r20
 458:	10 e0       	ldi	r17, 0x00	; 0
 45a:	08 23       	and	r16, r24
 45c:	19 23       	and	r17, r25
 45e:	86 e0       	ldi	r24, 0x06	; 6
 460:	61 ec       	ldi	r22, 0xC1	; 193
 462:	42 e0       	ldi	r20, 0x02	; 2
 464:	89 d0       	rcall	.+274    	; 0x578 <Endpoint_ConfigureEndpoint_Prv>
	                                            CDC_TXRX_EPSIZE, ENDPOINT_BANK_SINGLE);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC2_NOTIFICATION_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
	                                            CDC_NOTIFICATION_EPSIZE, ENDPOINT_BANK_SINGLE);

	/* Reset line encoding baud rates so that the host knows to send new values */
	LineEncoding1.BaudRateBPS = 0;
 466:	10 92 52 01 	sts	0x0152, r1
 46a:	10 92 53 01 	sts	0x0153, r1
 46e:	10 92 54 01 	sts	0x0154, r1
 472:	10 92 55 01 	sts	0x0155, r1
	LineEncoding2.BaudRateBPS = 0;
 476:	10 92 59 01 	sts	0x0159, r1
 47a:	10 92 5a 01 	sts	0x015A, r1
 47e:	10 92 5b 01 	sts	0x015B, r1
 482:	10 92 5c 01 	sts	0x015C, r1

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 486:	20 e0       	ldi	r18, 0x00	; 0
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	01 2b       	or	r16, r17
 48c:	11 f0       	breq	.+4      	; 0x492 <EVENT_USB_Device_ConfigurationChanged+0xae>
 48e:	21 e0       	ldi	r18, 0x01	; 1
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	28 23       	and	r18, r24
 496:	39 23       	and	r19, r25
 498:	23 2b       	or	r18, r19
 49a:	11 f4       	brne	.+4      	; 0x4a0 <EVENT_USB_Device_ConfigurationChanged+0xbc>
 49c:	90 e9       	ldi	r25, 0x90	; 144
 49e:	01 c0       	rjmp	.+2      	; 0x4a2 <EVENT_USB_Device_ConfigurationChanged+0xbe>
 4a0:	90 e6       	ldi	r25, 0x60	; 96
 4a2:	8b b1       	in	r24, 0x0b	; 11
 4a4:	8f 70       	andi	r24, 0x0F	; 15
 4a6:	98 2b       	or	r25, r24
 4a8:	9b b9       	out	0x0b, r25	; 11
}
 4aa:	1f 91       	pop	r17
 4ac:	0f 91       	pop	r16
 4ae:	ff 90       	pop	r15
 4b0:	ef 90       	pop	r14
 4b2:	df 90       	pop	r13
 4b4:	cf 90       	pop	r12
 4b6:	bf 90       	pop	r11
 4b8:	08 95       	ret

000004ba <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 4ba:	84 b7       	in	r24, 0x34	; 52
 4bc:	87 7f       	andi	r24, 0xF7	; 247
 4be:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 4c0:	88 e1       	ldi	r24, 0x18	; 24
 4c2:	0f b6       	in	r0, 0x3f	; 63
 4c4:	f8 94       	cli
 4c6:	80 93 60 00 	sts	0x0060, r24
 4ca:	10 92 60 00 	sts	0x0060, r1
 4ce:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	80 e8       	ldi	r24, 0x80	; 128
 4d4:	0f b6       	in	r0, 0x3f	; 63
 4d6:	f8 94       	cli
 4d8:	80 93 61 00 	sts	0x0061, r24
 4dc:	90 93 61 00 	sts	0x0061, r25
 4e0:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
 4e2:	84 b1       	in	r24, 0x04	; 4
 4e4:	8f 71       	andi	r24, 0x1F	; 31
 4e6:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
 4e8:	8d b1       	in	r24, 0x0d	; 13
 4ea:	8f 7c       	andi	r24, 0xCF	; 207
 4ec:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
 4ee:	85 b1       	in	r24, 0x05	; 5
 4f0:	80 6e       	ori	r24, 0xE0	; 224
 4f2:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
 4f4:	8e b1       	in	r24, 0x0e	; 14
 4f6:	80 63       	ori	r24, 0x30	; 48
 4f8:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 4fa:	8a b1       	in	r24, 0x0a	; 10
 4fc:	80 6f       	ori	r24, 0xF0	; 240
 4fe:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 500:	8b b1       	in	r24, 0x0b	; 11
 502:	8f 70       	andi	r24, 0x0F	; 15
 504:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	USB_Init();
}
 506:	0a c1       	rjmp	.+532    	; 0x71c <USB_Init>

00000508 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
 508:	d8 df       	rcall	.-80     	; 0x4ba <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 50a:	8b b1       	in	r24, 0x0b	; 11
 50c:	8f 70       	andi	r24, 0x0F	; 15
 50e:	80 61       	ori	r24, 0x10	; 16
 510:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
 512:	78 94       	sei

	for (;;)
	{
		CDC1_Task();
 514:	be de       	rcall	.-644    	; 0x292 <CDC1_Task>
		CDC2_Task();
 516:	56 de       	rcall	.-852    	; 0x1c4 <CDC2_Task>
		USB_USBTask();
 518:	06 d5       	rcall	.+2572   	; 0xf26 <USB_USBTask>
 51a:	fc cf       	rjmp	.-8      	; 0x514 <main+0xc>

0000051c <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
 51c:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 51e:	92 30       	cpi	r25, 0x02	; 2
 520:	49 f0       	breq	.+18     	; 0x534 <CALLBACK_USB_GetDescriptor+0x18>
 522:	93 30       	cpi	r25, 0x03	; 3
 524:	61 f0       	breq	.+24     	; 0x53e <CALLBACK_USB_GetDescriptor+0x22>
 526:	91 30       	cpi	r25, 0x01	; 1
 528:	f9 f4       	brne	.+62     	; 0x568 <CALLBACK_USB_GetDescriptor+0x4c>
 52a:	e8 e9       	ldi	r30, 0x98	; 152
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	22 e1       	ldi	r18, 0x12	; 18
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	1e c0       	rjmp	.+60     	; 0x570 <CALLBACK_USB_GetDescriptor+0x54>
 534:	ea ea       	ldi	r30, 0xAA	; 170
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	23 e8       	ldi	r18, 0x83	; 131
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	19 c0       	rjmp	.+50     	; 0x570 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 53e:	81 30       	cpi	r24, 0x01	; 1
 540:	49 f0       	breq	.+18     	; 0x554 <CALLBACK_USB_GetDescriptor+0x38>
 542:	81 30       	cpi	r24, 0x01	; 1
 544:	18 f0       	brcs	.+6      	; 0x54c <CALLBACK_USB_GetDescriptor+0x30>
 546:	82 30       	cpi	r24, 0x02	; 2
 548:	79 f4       	brne	.+30     	; 0x568 <CALLBACK_USB_GetDescriptor+0x4c>
 54a:	08 c0       	rjmp	.+16     	; 0x55c <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 54c:	ed e2       	ldi	r30, 0x2D	; 45
 54e:	f1 e0       	ldi	r31, 0x01	; 1
 550:	84 91       	lpm	r24, Z+
 552:	07 c0       	rjmp	.+14     	; 0x562 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 554:	e1 e3       	ldi	r30, 0x31	; 49
 556:	f1 e0       	ldi	r31, 0x01	; 1
 558:	84 91       	lpm	r24, Z+
 55a:	03 c0       	rjmp	.+6      	; 0x562 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 55c:	eb e4       	ldi	r30, 0x4B	; 75
 55e:	f1 e0       	ldi	r31, 0x01	; 1
 560:	84 91       	lpm	r24, Z+
 562:	28 2f       	mov	r18, r24
 564:	30 e0       	ldi	r19, 0x00	; 0
 566:	04 c0       	rjmp	.+8      	; 0x570 <CALLBACK_USB_GetDescriptor+0x54>
 568:	e0 e0       	ldi	r30, 0x00	; 0
 56a:	f0 e0       	ldi	r31, 0x00	; 0
 56c:	20 e0       	ldi	r18, 0x00	; 0
 56e:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 570:	ed 93       	st	X+, r30
 572:	fc 93       	st	X, r31
	return Size;
}
 574:	c9 01       	movw	r24, r18
 576:	08 95       	ret

00000578 <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
 578:	38 2f       	mov	r19, r24
 57a:	28 2f       	mov	r18, r24
 57c:	2c c0       	rjmp	.+88     	; 0x5d6 <Endpoint_ConfigureEndpoint_Prv+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 57e:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);
		
		if (EPNum == Number)
 582:	23 17       	cp	r18, r19
 584:	21 f4       	brne	.+8      	; 0x58e <Endpoint_ConfigureEndpoint_Prv+0x16>
 586:	76 2f       	mov	r23, r22
 588:	94 2f       	mov	r25, r20
 58a:	50 e0       	ldi	r21, 0x00	; 0
 58c:	06 c0       	rjmp	.+12     	; 0x59a <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 58e:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 592:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
 596:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 59a:	91 ff       	sbrs	r25, 1
 59c:	1b c0       	rjmp	.+54     	; 0x5d4 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 59e:	80 91 eb 00 	lds	r24, 0x00EB
 5a2:	8e 7f       	andi	r24, 0xFE	; 254
 5a4:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 5a8:	80 91 ed 00 	lds	r24, 0x00ED
 5ac:	8d 7f       	andi	r24, 0xFD	; 253
 5ae:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 5b2:	80 91 eb 00 	lds	r24, 0x00EB
 5b6:	81 60       	ori	r24, 0x01	; 1
 5b8:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 5bc:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 5c0:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
 5c4:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 5c8:	80 91 ee 00 	lds	r24, 0x00EE
			
		if (!(Endpoint_IsConfigured()))
 5cc:	87 fd       	sbrc	r24, 7
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <Endpoint_ConfigureEndpoint_Prv+0x5c>
 5d0:	80 e0       	ldi	r24, 0x00	; 0
 5d2:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else	
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 5d4:	2f 5f       	subi	r18, 0xFF	; 255
 5d6:	27 30       	cpi	r18, 0x07	; 7
 5d8:	90 f2       	brcs	.-92     	; 0x57e <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 5da:	30 93 e9 00 	sts	0x00E9, r19
 5de:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 5e0:	08 95       	ret

000005e2 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 5e2:	80 91 66 01 	lds	r24, 0x0166
 5e6:	88 23       	and	r24, r24
 5e8:	9c f4       	brge	.+38     	; 0x610 <Endpoint_ClearStatusStage+0x2e>
 5ea:	04 c0       	rjmp	.+8      	; 0x5f4 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 5ec:	80 91 65 01 	lds	r24, 0x0165
 5f0:	88 23       	and	r24, r24
 5f2:	b9 f0       	breq	.+46     	; 0x622 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 5f4:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 5f8:	82 ff       	sbrs	r24, 2
 5fa:	f8 cf       	rjmp	.-16     	; 0x5ec <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 5fc:	80 91 e8 00 	lds	r24, 0x00E8
 600:	8b 77       	andi	r24, 0x7B	; 123
 602:	80 93 e8 00 	sts	0x00E8, r24
 606:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 608:	80 91 65 01 	lds	r24, 0x0165
 60c:	88 23       	and	r24, r24
 60e:	49 f0       	breq	.+18     	; 0x622 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 610:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 614:	80 ff       	sbrs	r24, 0
 616:	f8 cf       	rjmp	.-16     	; 0x608 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 618:	80 91 e8 00 	lds	r24, 0x00E8
 61c:	8e 77       	andi	r24, 0x7E	; 126
 61e:	80 93 e8 00 	sts	0x00E8, r24
 622:	08 95       	ret

00000624 <Endpoint_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 624:	40 91 e4 00 	lds	r20, 0x00E4
 628:	50 91 e5 00 	lds	r21, 0x00E5
 62c:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
 62e:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 632:	80 78       	andi	r24, 0x80	; 128
 634:	80 38       	cpi	r24, 0x80	; 128
 636:	29 f4       	brne	.+10     	; 0x642 <Endpoint_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 638:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
 63c:	80 ff       	sbrs	r24, 0
 63e:	05 c0       	rjmp	.+10     	; 0x64a <Endpoint_WaitUntilReady+0x26>
 640:	22 c0       	rjmp	.+68     	; 0x686 <Endpoint_WaitUntilReady+0x62>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 642:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 646:	82 fd       	sbrc	r24, 2
 648:	1e c0       	rjmp	.+60     	; 0x686 <Endpoint_WaitUntilReady+0x62>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 64a:	80 91 65 01 	lds	r24, 0x0165

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 64e:	88 23       	and	r24, r24
 650:	11 f4       	brne	.+4      	; 0x656 <Endpoint_WaitUntilReady+0x32>
 652:	82 e0       	ldi	r24, 0x02	; 2
 654:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 656:	85 30       	cpi	r24, 0x05	; 5
 658:	11 f4       	brne	.+4      	; 0x65e <Endpoint_WaitUntilReady+0x3a>
 65a:	83 e0       	ldi	r24, 0x03	; 3
 65c:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 65e:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 662:	85 ff       	sbrs	r24, 5
 664:	02 c0       	rjmp	.+4      	; 0x66a <Endpoint_WaitUntilReady+0x46>
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	08 95       	ret
 66a:	80 91 e4 00 	lds	r24, 0x00E4
 66e:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 672:	84 17       	cp	r24, r20
 674:	95 07       	cpc	r25, r21
 676:	d9 f2       	breq	.-74     	; 0x62e <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 678:	22 23       	and	r18, r18
 67a:	11 f4       	brne	.+4      	; 0x680 <Endpoint_WaitUntilReady+0x5c>
 67c:	84 e0       	ldi	r24, 0x04	; 4
 67e:	08 95       	ret
 680:	21 50       	subi	r18, 0x01	; 1
 682:	ac 01       	movw	r20, r24
 684:	d4 cf       	rjmp	.-88     	; 0x62e <Endpoint_WaitUntilReady+0xa>
 686:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 688:	08 95       	ret

0000068a <USB_ResetInterface>:

void USB_ResetInterface(void)
{
 68a:	ef 92       	push	r14
 68c:	ff 92       	push	r15
 68e:	0f 93       	push	r16
 690:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 692:	4d d0       	rcall	.+154    	; 0x72e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 694:	54 d0       	rcall	.+168    	; 0x73e <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 696:	08 ed       	ldi	r16, 0xD8	; 216
 698:	10 e0       	ldi	r17, 0x00	; 0
 69a:	f8 01       	movw	r30, r16
 69c:	80 81       	ld	r24, Z
 69e:	8f 77       	andi	r24, 0x7F	; 127
 6a0:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
 6a2:	80 81       	ld	r24, Z
 6a4:	80 68       	ori	r24, 0x80	; 128
 6a6:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 6a8:	80 81       	ld	r24, Z
 6aa:	8f 7d       	andi	r24, 0xDF	; 223
 6ac:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 6ae:	e7 ed       	ldi	r30, 0xD7	; 215
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	80 81       	ld	r24, Z
 6b4:	80 68       	ori	r24, 0x80	; 128
 6b6:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 6b8:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 6ba:	10 92 65 01 	sts	0x0165, r1
	USB_Device_ConfigurationNumber  = 0;
 6be:	10 92 61 01 	sts	0x0161, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 6c2:	10 92 63 01 	sts	0x0163, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 6c6:	10 92 62 01 	sts	0x0162, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 6ca:	80 ee       	ldi	r24, 0xE0	; 224
 6cc:	e8 2e       	mov	r14, r24
 6ce:	f1 2c       	mov	r15, r1
 6d0:	f7 01       	movw	r30, r14
 6d2:	80 81       	ld	r24, Z
 6d4:	8b 7f       	andi	r24, 0xFB	; 251
 6d6:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 6d8:	f8 01       	movw	r30, r16
 6da:	80 81       	ld	r24, Z
 6dc:	81 60       	ori	r24, 0x01	; 1
 6de:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	60 e0       	ldi	r22, 0x00	; 0
 6e4:	42 e0       	ldi	r20, 0x02	; 2
 6e6:	48 df       	rcall	.-368    	; 0x578 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 6e8:	e1 ee       	ldi	r30, 0xE1	; 225
 6ea:	f0 e0       	ldi	r31, 0x00	; 0
 6ec:	80 81       	ld	r24, Z
 6ee:	8e 7f       	andi	r24, 0xFE	; 254
 6f0:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 6f2:	e2 ee       	ldi	r30, 0xE2	; 226
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	80 81       	ld	r24, Z
 6f8:	81 60       	ori	r24, 0x01	; 1
 6fa:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 6fc:	80 81       	ld	r24, Z
 6fe:	88 60       	ori	r24, 0x08	; 8
 700:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 702:	f7 01       	movw	r30, r14
 704:	80 81       	ld	r24, Z
 706:	8e 7f       	andi	r24, 0xFE	; 254
 708:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 70a:	f8 01       	movw	r30, r16
 70c:	80 81       	ld	r24, Z
 70e:	80 61       	ori	r24, 0x10	; 16
 710:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 712:	1f 91       	pop	r17
 714:	0f 91       	pop	r16
 716:	ff 90       	pop	r15
 718:	ef 90       	pop	r14
 71a:	08 95       	ret

0000071c <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 71c:	e7 ed       	ldi	r30, 0xD7	; 215
 71e:	f0 e0       	ldi	r31, 0x00	; 0
 720:	80 81       	ld	r24, Z
 722:	81 60       	ori	r24, 0x01	; 1
 724:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	80 93 64 01 	sts	0x0164, r24

	USB_ResetInterface();
}
 72c:	ae cf       	rjmp	.-164    	; 0x68a <USB_ResetInterface>

0000072e <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 72e:	e8 ed       	ldi	r30, 0xD8	; 216
 730:	f0 e0       	ldi	r31, 0x00	; 0
 732:	80 81       	ld	r24, Z
 734:	8c 7f       	andi	r24, 0xFC	; 252
 736:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 738:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 73c:	08 95       	ret

0000073e <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 73e:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 742:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 746:	08 95       	ret

00000748 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 748:	1f 92       	push	r1
 74a:	0f 92       	push	r0
 74c:	0f b6       	in	r0, 0x3f	; 63
 74e:	0f 92       	push	r0
 750:	0b b6       	in	r0, 0x3b	; 59
 752:	0f 92       	push	r0
 754:	11 24       	eor	r1, r1
 756:	2f 93       	push	r18
 758:	3f 93       	push	r19
 75a:	4f 93       	push	r20
 75c:	5f 93       	push	r21
 75e:	6f 93       	push	r22
 760:	7f 93       	push	r23
 762:	8f 93       	push	r24
 764:	9f 93       	push	r25
 766:	af 93       	push	r26
 768:	bf 93       	push	r27
 76a:	ef 93       	push	r30
 76c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 76e:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 772:	82 ff       	sbrs	r24, 2
 774:	0a c0       	rjmp	.+20     	; 0x78a <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 776:	80 91 e2 00 	lds	r24, 0x00E2
 77a:	82 ff       	sbrs	r24, 2
 77c:	06 c0       	rjmp	.+12     	; 0x78a <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 77e:	80 91 e1 00 	lds	r24, 0x00E1
 782:	8b 7f       	andi	r24, 0xFB	; 251
 784:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 788:	cd d3       	rcall	.+1946   	; 0xf24 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 78a:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 78e:	80 ff       	sbrs	r24, 0
 790:	1d c0       	rjmp	.+58     	; 0x7cc <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 792:	80 91 d8 00 	lds	r24, 0x00D8
 796:	80 ff       	sbrs	r24, 0
 798:	19 c0       	rjmp	.+50     	; 0x7cc <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 79a:	80 91 da 00 	lds	r24, 0x00DA
 79e:	8e 7f       	andi	r24, 0xFE	; 254
 7a0:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 7a4:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 7a8:	80 ff       	sbrs	r24, 0
 7aa:	0c c0       	rjmp	.+24     	; 0x7c4 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 7ac:	8c e0       	ldi	r24, 0x0C	; 12
 7ae:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 7b0:	8e e0       	ldi	r24, 0x0E	; 14
 7b2:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 7b4:	09 b4       	in	r0, 0x29	; 41
 7b6:	00 fe       	sbrs	r0, 0
 7b8:	fd cf       	rjmp	.-6      	; 0x7b4 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	80 93 65 01 	sts	0x0165, r24
			EVENT_USB_Device_Connect();
 7c0:	f7 dc       	rcall	.-1554   	; 0x1b0 <EVENT_USB_Device_Connect>
 7c2:	04 c0       	rjmp	.+8      	; 0x7cc <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 7c4:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 7c6:	10 92 65 01 	sts	0x0165, r1
			EVENT_USB_Device_Disconnect();
 7ca:	f7 dc       	rcall	.-1554   	; 0x1ba <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 7cc:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 7d0:	80 ff       	sbrs	r24, 0
 7d2:	18 c0       	rjmp	.+48     	; 0x804 <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 7d4:	80 91 e2 00 	lds	r24, 0x00E2
 7d8:	80 ff       	sbrs	r24, 0
 7da:	14 c0       	rjmp	.+40     	; 0x804 <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 7dc:	80 91 e2 00 	lds	r24, 0x00E2
 7e0:	8e 7f       	andi	r24, 0xFE	; 254
 7e2:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 7e6:	80 91 e2 00 	lds	r24, 0x00E2
 7ea:	80 61       	ori	r24, 0x10	; 16
 7ec:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 7f0:	80 91 d8 00 	lds	r24, 0x00D8
 7f4:	80 62       	ori	r24, 0x20	; 32
 7f6:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 7fa:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 7fc:	85 e0       	ldi	r24, 0x05	; 5
 7fe:	80 93 65 01 	sts	0x0165, r24
		EVENT_USB_Device_Suspend();
 802:	90 d3       	rcall	.+1824   	; 0xf24 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 804:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 808:	84 ff       	sbrs	r24, 4
 80a:	2d c0       	rjmp	.+90     	; 0x866 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 80c:	80 91 e2 00 	lds	r24, 0x00E2
 810:	84 ff       	sbrs	r24, 4
 812:	29 c0       	rjmp	.+82     	; 0x866 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 814:	8c e0       	ldi	r24, 0x0C	; 12
 816:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 818:	8e e0       	ldi	r24, 0x0E	; 14
 81a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 81c:	09 b4       	in	r0, 0x29	; 41
 81e:	00 fe       	sbrs	r0, 0
 820:	fd cf       	rjmp	.-6      	; 0x81c <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 822:	80 91 d8 00 	lds	r24, 0x00D8
 826:	8f 7d       	andi	r24, 0xDF	; 223
 828:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 82c:	80 91 e1 00 	lds	r24, 0x00E1
 830:	8f 7e       	andi	r24, 0xEF	; 239
 832:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 836:	80 91 e2 00 	lds	r24, 0x00E2
 83a:	8f 7e       	andi	r24, 0xEF	; 239
 83c:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 840:	80 91 e2 00 	lds	r24, 0x00E2
 844:	81 60       	ori	r24, 0x01	; 1
 846:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 84a:	80 91 61 01 	lds	r24, 0x0161
 84e:	88 23       	and	r24, r24
 850:	31 f4       	brne	.+12     	; 0x85e <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 852:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 856:	87 fd       	sbrc	r24, 7
 858:	02 c0       	rjmp	.+4      	; 0x85e <__vector_10+0x116>
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	01 c0       	rjmp	.+2      	; 0x860 <__vector_10+0x118>
 85e:	84 e0       	ldi	r24, 0x04	; 4
 860:	80 93 65 01 	sts	0x0165, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 864:	5f d3       	rcall	.+1726   	; 0xf24 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 866:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 86a:	83 ff       	sbrs	r24, 3
 86c:	22 c0       	rjmp	.+68     	; 0x8b2 <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 86e:	80 91 e2 00 	lds	r24, 0x00E2
 872:	83 ff       	sbrs	r24, 3
 874:	1e c0       	rjmp	.+60     	; 0x8b2 <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 876:	80 91 e1 00 	lds	r24, 0x00E1
 87a:	87 7f       	andi	r24, 0xF7	; 247
 87c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 880:	82 e0       	ldi	r24, 0x02	; 2
 882:	80 93 65 01 	sts	0x0165, r24
		USB_Device_ConfigurationNumber = 0;
 886:	10 92 61 01 	sts	0x0161, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 88a:	80 91 e1 00 	lds	r24, 0x00E1
 88e:	8e 7f       	andi	r24, 0xFE	; 254
 890:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 894:	80 91 e2 00 	lds	r24, 0x00E2
 898:	8e 7f       	andi	r24, 0xFE	; 254
 89a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 89e:	80 91 e2 00 	lds	r24, 0x00E2
 8a2:	80 61       	ori	r24, 0x10	; 16
 8a4:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 8a8:	80 e0       	ldi	r24, 0x00	; 0
 8aa:	60 e0       	ldi	r22, 0x00	; 0
 8ac:	42 e0       	ldi	r20, 0x02	; 2
 8ae:	64 de       	rcall	.-824    	; 0x578 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 8b0:	39 d3       	rcall	.+1650   	; 0xf24 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 8b2:	ff 91       	pop	r31
 8b4:	ef 91       	pop	r30
 8b6:	bf 91       	pop	r27
 8b8:	af 91       	pop	r26
 8ba:	9f 91       	pop	r25
 8bc:	8f 91       	pop	r24
 8be:	7f 91       	pop	r23
 8c0:	6f 91       	pop	r22
 8c2:	5f 91       	pop	r21
 8c4:	4f 91       	pop	r20
 8c6:	3f 91       	pop	r19
 8c8:	2f 91       	pop	r18
 8ca:	0f 90       	pop	r0
 8cc:	0b be       	out	0x3b, r0	; 59
 8ce:	0f 90       	pop	r0
 8d0:	0f be       	out	0x3f, r0	; 63
 8d2:	0f 90       	pop	r0
 8d4:	1f 90       	pop	r1
 8d6:	18 95       	reti

000008d8 <Endpoint_Write_Control_Stream_LE>:
 8d8:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 8da:	40 91 6c 01 	lds	r20, 0x016C
 8de:	50 91 6d 01 	lds	r21, 0x016D
 8e2:	46 17       	cp	r20, r22
 8e4:	57 07       	cpc	r21, r23
 8e6:	18 f4       	brcc	.+6      	; 0x8ee <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 8e8:	f9 01       	movw	r30, r18
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	3d c0       	rjmp	.+122    	; 0x968 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 8ee:	61 15       	cp	r22, r1
 8f0:	71 05       	cpc	r23, r1
 8f2:	11 f0       	breq	.+4      	; 0x8f8 <Endpoint_Write_Control_Stream_LE+0x20>
 8f4:	ab 01       	movw	r20, r22
 8f6:	f8 cf       	rjmp	.-16     	; 0x8e8 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 8f8:	80 91 e8 00 	lds	r24, 0x00E8
 8fc:	8e 77       	andi	r24, 0x7E	; 126
 8fe:	80 93 e8 00 	sts	0x00E8, r24
 902:	40 e0       	ldi	r20, 0x00	; 0
 904:	50 e0       	ldi	r21, 0x00	; 0
 906:	f0 cf       	rjmp	.-32     	; 0x8e8 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 908:	80 91 65 01 	lds	r24, 0x0165

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 90c:	88 23       	and	r24, r24
 90e:	f1 f1       	breq	.+124    	; 0x98c <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 910:	85 30       	cpi	r24, 0x05	; 5
 912:	f1 f1       	breq	.+124    	; 0x990 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 914:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 918:	83 ff       	sbrs	r24, 3
 91a:	02 c0       	rjmp	.+4      	; 0x920 <Endpoint_Write_Control_Stream_LE+0x48>
 91c:	81 e0       	ldi	r24, 0x01	; 1
 91e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 920:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 924:	82 fd       	sbrc	r24, 2
 926:	2c c0       	rjmp	.+88     	; 0x980 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 928:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 92c:	80 ff       	sbrs	r24, 0
 92e:	1c c0       	rjmp	.+56     	; 0x968 <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 930:	20 91 f2 00 	lds	r18, 0x00F2
 934:	30 91 f3 00 	lds	r19, 0x00F3
 938:	07 c0       	rjmp	.+14     	; 0x948 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 93a:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 93c:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 940:	41 50       	subi	r20, 0x01	; 1
 942:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 944:	2f 5f       	subi	r18, 0xFF	; 255
 946:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 948:	41 15       	cp	r20, r1
 94a:	51 05       	cpc	r21, r1
 94c:	19 f0       	breq	.+6      	; 0x954 <Endpoint_Write_Control_Stream_LE+0x7c>
 94e:	28 30       	cpi	r18, 0x08	; 8
 950:	31 05       	cpc	r19, r1
 952:	98 f3       	brcs	.-26     	; 0x93a <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	28 30       	cpi	r18, 0x08	; 8
 958:	31 05       	cpc	r19, r1
 95a:	09 f4       	brne	.+2      	; 0x95e <Endpoint_Write_Control_Stream_LE+0x86>
 95c:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 95e:	80 91 e8 00 	lds	r24, 0x00E8
 962:	8e 77       	andi	r24, 0x7E	; 126
 964:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 968:	41 15       	cp	r20, r1
 96a:	51 05       	cpc	r21, r1
 96c:	69 f6       	brne	.-102    	; 0x908 <Endpoint_Write_Control_Stream_LE+0x30>
 96e:	99 23       	and	r25, r25
 970:	59 f6       	brne	.-106    	; 0x908 <Endpoint_Write_Control_Stream_LE+0x30>
 972:	06 c0       	rjmp	.+12     	; 0x980 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 974:	80 91 65 01 	lds	r24, 0x0165

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 978:	88 23       	and	r24, r24
 97a:	41 f0       	breq	.+16     	; 0x98c <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 97c:	85 30       	cpi	r24, 0x05	; 5
 97e:	41 f0       	breq	.+16     	; 0x990 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 980:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 984:	82 ff       	sbrs	r24, 2
 986:	f6 cf       	rjmp	.-20     	; 0x974 <Endpoint_Write_Control_Stream_LE+0x9c>
 988:	80 e0       	ldi	r24, 0x00	; 0
 98a:	08 95       	ret
 98c:	82 e0       	ldi	r24, 0x02	; 2
 98e:	08 95       	ret
 990:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 992:	08 95       	ret

00000994 <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
 994:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
 996:	61 15       	cp	r22, r1
 998:	71 05       	cpc	r23, r1
 99a:	29 f4       	brne	.+10     	; 0x9a6 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 99c:	80 91 e8 00 	lds	r24, 0x00E8
 9a0:	8b 77       	andi	r24, 0x7B	; 123
 9a2:	80 93 e8 00 	sts	0x00E8, r24
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 9a6:	f9 01       	movw	r30, r18
 9a8:	22 c0       	rjmp	.+68     	; 0x9ee <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 9aa:	80 91 65 01 	lds	r24, 0x0165

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 9ae:	88 23       	and	r24, r24
 9b0:	71 f1       	breq	.+92     	; 0xa0e <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 9b2:	85 30       	cpi	r24, 0x05	; 5
 9b4:	71 f1       	breq	.+92     	; 0xa12 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9b6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 9ba:	83 ff       	sbrs	r24, 3
 9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <Endpoint_Read_Control_Stream_LE+0x2e>
 9be:	81 e0       	ldi	r24, 0x01	; 1
 9c0:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 9c2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
 9c6:	82 ff       	sbrs	r24, 2
 9c8:	f0 cf       	rjmp	.-32     	; 0x9aa <Endpoint_Read_Control_Stream_LE+0x16>
 9ca:	06 c0       	rjmp	.+12     	; 0x9d8 <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 9cc:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 9d0:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 9d2:	61 50       	subi	r22, 0x01	; 1
 9d4:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
 9d6:	31 f0       	breq	.+12     	; 0x9e4 <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 9d8:	80 91 f2 00 	lds	r24, 0x00F2
 9dc:	90 91 f3 00 	lds	r25, 0x00F3
 9e0:	89 2b       	or	r24, r25
 9e2:	a1 f7       	brne	.-24     	; 0x9cc <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 9e4:	80 91 e8 00 	lds	r24, 0x00E8
 9e8:	8b 77       	andi	r24, 0x7B	; 123
 9ea:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
 9ee:	61 15       	cp	r22, r1
 9f0:	71 05       	cpc	r23, r1
 9f2:	d9 f6       	brne	.-74     	; 0x9aa <Endpoint_Read_Control_Stream_LE+0x16>
 9f4:	06 c0       	rjmp	.+12     	; 0xa02 <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 9f6:	80 91 65 01 	lds	r24, 0x0165

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 9fa:	88 23       	and	r24, r24
 9fc:	41 f0       	breq	.+16     	; 0xa0e <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 9fe:	85 30       	cpi	r24, 0x05	; 5
 a00:	41 f0       	breq	.+16     	; 0xa12 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 a02:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
 a06:	80 ff       	sbrs	r24, 0
 a08:	f6 cf       	rjmp	.-20     	; 0x9f6 <Endpoint_Read_Control_Stream_LE+0x62>
 a0a:	80 e0       	ldi	r24, 0x00	; 0
 a0c:	08 95       	ret
 a0e:	82 e0       	ldi	r24, 0x02	; 2
 a10:	08 95       	ret
 a12:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 a14:	08 95       	ret

00000a16 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
 a16:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 a18:	40 91 6c 01 	lds	r20, 0x016C
 a1c:	50 91 6d 01 	lds	r21, 0x016D
 a20:	46 17       	cp	r20, r22
 a22:	57 07       	cpc	r21, r23
 a24:	18 f4       	brcc	.+6      	; 0xa2c <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 a26:	f9 01       	movw	r30, r18
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	40 c0       	rjmp	.+128    	; 0xaac <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 a2c:	61 15       	cp	r22, r1
 a2e:	71 05       	cpc	r23, r1
 a30:	11 f0       	breq	.+4      	; 0xa36 <Endpoint_Write_Control_PStream_LE+0x20>
 a32:	ab 01       	movw	r20, r22
 a34:	f8 cf       	rjmp	.-16     	; 0xa26 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 a36:	80 91 e8 00 	lds	r24, 0x00E8
 a3a:	8e 77       	andi	r24, 0x7E	; 126
 a3c:	80 93 e8 00 	sts	0x00E8, r24
 a40:	40 e0       	ldi	r20, 0x00	; 0
 a42:	50 e0       	ldi	r21, 0x00	; 0
 a44:	f0 cf       	rjmp	.-32     	; 0xa26 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 a46:	80 91 65 01 	lds	r24, 0x0165

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 a4a:	88 23       	and	r24, r24
 a4c:	09 f4       	brne	.+2      	; 0xa50 <Endpoint_Write_Control_PStream_LE+0x3a>
 a4e:	40 c0       	rjmp	.+128    	; 0xad0 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 a50:	85 30       	cpi	r24, 0x05	; 5
 a52:	09 f4       	brne	.+2      	; 0xa56 <Endpoint_Write_Control_PStream_LE+0x40>
 a54:	3f c0       	rjmp	.+126    	; 0xad4 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a56:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 a5a:	83 ff       	sbrs	r24, 3
 a5c:	02 c0       	rjmp	.+4      	; 0xa62 <Endpoint_Write_Control_PStream_LE+0x4c>
 a5e:	81 e0       	ldi	r24, 0x01	; 1
 a60:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 a62:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 a66:	82 fd       	sbrc	r24, 2
 a68:	2d c0       	rjmp	.+90     	; 0xac4 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 a6a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 a6e:	80 ff       	sbrs	r24, 0
 a70:	1d c0       	rjmp	.+58     	; 0xaac <Endpoint_Write_Control_PStream_LE+0x96>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 a72:	20 91 f2 00 	lds	r18, 0x00F2
 a76:	30 91 f3 00 	lds	r19, 0x00F3
 a7a:	08 c0       	rjmp	.+16     	; 0xa8c <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 a7c:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 a7e:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 a82:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 a84:	41 50       	subi	r20, 0x01	; 1
 a86:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 a88:	2f 5f       	subi	r18, 0xFF	; 255
 a8a:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 a8c:	41 15       	cp	r20, r1
 a8e:	51 05       	cpc	r21, r1
 a90:	19 f0       	breq	.+6      	; 0xa98 <Endpoint_Write_Control_PStream_LE+0x82>
 a92:	28 30       	cpi	r18, 0x08	; 8
 a94:	31 05       	cpc	r19, r1
 a96:	90 f3       	brcs	.-28     	; 0xa7c <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	28 30       	cpi	r18, 0x08	; 8
 a9c:	31 05       	cpc	r19, r1
 a9e:	09 f4       	brne	.+2      	; 0xaa2 <Endpoint_Write_Control_PStream_LE+0x8c>
 aa0:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 aa2:	80 91 e8 00 	lds	r24, 0x00E8
 aa6:	8e 77       	andi	r24, 0x7E	; 126
 aa8:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 aac:	41 15       	cp	r20, r1
 aae:	51 05       	cpc	r21, r1
 ab0:	51 f6       	brne	.-108    	; 0xa46 <Endpoint_Write_Control_PStream_LE+0x30>
 ab2:	99 23       	and	r25, r25
 ab4:	41 f6       	brne	.-112    	; 0xa46 <Endpoint_Write_Control_PStream_LE+0x30>
 ab6:	06 c0       	rjmp	.+12     	; 0xac4 <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 ab8:	80 91 65 01 	lds	r24, 0x0165

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 abc:	88 23       	and	r24, r24
 abe:	41 f0       	breq	.+16     	; 0xad0 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 ac0:	85 30       	cpi	r24, 0x05	; 5
 ac2:	41 f0       	breq	.+16     	; 0xad4 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 ac4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 ac8:	82 ff       	sbrs	r24, 2
 aca:	f6 cf       	rjmp	.-20     	; 0xab8 <Endpoint_Write_Control_PStream_LE+0xa2>
 acc:	80 e0       	ldi	r24, 0x00	; 0
 ace:	08 95       	ret
 ad0:	82 e0       	ldi	r24, 0x02	; 2
 ad2:	08 95       	ret
 ad4:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 ad6:	08 95       	ret

00000ad8 <Endpoint_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 ad8:	bf 92       	push	r11
 ada:	cf 92       	push	r12
 adc:	df 92       	push	r13
 ade:	ef 92       	push	r14
 ae0:	ff 92       	push	r15
 ae2:	0f 93       	push	r16
 ae4:	1f 93       	push	r17
 ae6:	cf 93       	push	r28
 ae8:	df 93       	push	r29
 aea:	18 2f       	mov	r17, r24
 aec:	09 2f       	mov	r16, r25
 aee:	7b 01       	movw	r14, r22
 af0:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 af2:	98 dd       	rcall	.-1232   	; 0x624 <Endpoint_WaitUntilReady>
 af4:	b8 2e       	mov	r11, r24
 af6:	88 23       	and	r24, r24
 af8:	b1 f5       	brne	.+108    	; 0xb66 <Endpoint_Read_Stream_LE+0x8e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 afa:	81 2f       	mov	r24, r17
 afc:	90 2f       	mov	r25, r16
 afe:	9c 01       	movw	r18, r24
 b00:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
 b02:	c1 14       	cp	r12, r1
 b04:	d1 04       	cpc	r13, r1
 b06:	39 f0       	breq	.+14     	; 0xb16 <Endpoint_Read_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
 b08:	f6 01       	movw	r30, r12
 b0a:	80 81       	ld	r24, Z
 b0c:	91 81       	ldd	r25, Z+1	; 0x01
 b0e:	e8 1a       	sub	r14, r24
 b10:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 b12:	c8 0f       	add	r28, r24
 b14:	d9 1f       	adc	r29, r25
 b16:	00 e0       	ldi	r16, 0x00	; 0
 b18:	10 e0       	ldi	r17, 0x00	; 0
 b1a:	22 c0       	rjmp	.+68     	; 0xb60 <Endpoint_Read_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 b1c:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 b20:	85 fd       	sbrc	r24, 5
 b22:	16 c0       	rjmp	.+44     	; 0xb50 <Endpoint_Read_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 b24:	80 91 e8 00 	lds	r24, 0x00E8
 b28:	8b 77       	andi	r24, 0x7B	; 123
 b2a:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
 b2e:	c1 14       	cp	r12, r1
 b30:	d1 04       	cpc	r13, r1
 b32:	49 f0       	breq	.+18     	; 0xb46 <Endpoint_Read_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
 b34:	f6 01       	movw	r30, r12
 b36:	80 81       	ld	r24, Z
 b38:	91 81       	ldd	r25, Z+1	; 0x01
 b3a:	80 0f       	add	r24, r16
 b3c:	91 1f       	adc	r25, r17
 b3e:	91 83       	std	Z+1, r25	; 0x01
 b40:	80 83       	st	Z, r24
 b42:	85 e0       	ldi	r24, 0x05	; 5
 b44:	11 c0       	rjmp	.+34     	; 0xb68 <Endpoint_Read_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 b46:	ef d1       	rcall	.+990    	; 0xf26 <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 b48:	6d dd       	rcall	.-1318   	; 0x624 <Endpoint_WaitUntilReady>
 b4a:	88 23       	and	r24, r24
 b4c:	49 f0       	breq	.+18     	; 0xb60 <Endpoint_Read_Stream_LE+0x88>
 b4e:	0c c0       	rjmp	.+24     	; 0xb68 <Endpoint_Read_Stream_LE+0x90>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 b50:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 b54:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 b56:	08 94       	sec
 b58:	e1 08       	sbc	r14, r1
 b5a:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
 b5c:	0f 5f       	subi	r16, 0xFF	; 255
 b5e:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 b60:	e1 14       	cp	r14, r1
 b62:	f1 04       	cpc	r15, r1
 b64:	d9 f6       	brne	.-74     	; 0xb1c <Endpoint_Read_Stream_LE+0x44>
 b66:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 b68:	df 91       	pop	r29
 b6a:	cf 91       	pop	r28
 b6c:	1f 91       	pop	r17
 b6e:	0f 91       	pop	r16
 b70:	ff 90       	pop	r15
 b72:	ef 90       	pop	r14
 b74:	df 90       	pop	r13
 b76:	cf 90       	pop	r12
 b78:	bf 90       	pop	r11
 b7a:	08 95       	ret

00000b7c <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 b7c:	bf 92       	push	r11
 b7e:	cf 92       	push	r12
 b80:	df 92       	push	r13
 b82:	ef 92       	push	r14
 b84:	ff 92       	push	r15
 b86:	0f 93       	push	r16
 b88:	1f 93       	push	r17
 b8a:	cf 93       	push	r28
 b8c:	df 93       	push	r29
 b8e:	18 2f       	mov	r17, r24
 b90:	09 2f       	mov	r16, r25
 b92:	7b 01       	movw	r14, r22
 b94:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 b96:	46 dd       	rcall	.-1396   	; 0x624 <Endpoint_WaitUntilReady>
 b98:	b8 2e       	mov	r11, r24
 b9a:	88 23       	and	r24, r24
 b9c:	b1 f5       	brne	.+108    	; 0xc0a <Endpoint_Write_Stream_LE+0x8e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 b9e:	81 2f       	mov	r24, r17
 ba0:	90 2f       	mov	r25, r16
 ba2:	9c 01       	movw	r18, r24
 ba4:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
 ba6:	c1 14       	cp	r12, r1
 ba8:	d1 04       	cpc	r13, r1
 baa:	39 f0       	breq	.+14     	; 0xbba <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
 bac:	f6 01       	movw	r30, r12
 bae:	80 81       	ld	r24, Z
 bb0:	91 81       	ldd	r25, Z+1	; 0x01
 bb2:	e8 1a       	sub	r14, r24
 bb4:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 bb6:	c8 0f       	add	r28, r24
 bb8:	d9 1f       	adc	r29, r25
 bba:	00 e0       	ldi	r16, 0x00	; 0
 bbc:	10 e0       	ldi	r17, 0x00	; 0
 bbe:	22 c0       	rjmp	.+68     	; 0xc04 <Endpoint_Write_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 bc0:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 bc4:	85 fd       	sbrc	r24, 5
 bc6:	16 c0       	rjmp	.+44     	; 0xbf4 <Endpoint_Write_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 bc8:	80 91 e8 00 	lds	r24, 0x00E8
 bcc:	8e 77       	andi	r24, 0x7E	; 126
 bce:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
 bd2:	c1 14       	cp	r12, r1
 bd4:	d1 04       	cpc	r13, r1
 bd6:	49 f0       	breq	.+18     	; 0xbea <Endpoint_Write_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
 bd8:	f6 01       	movw	r30, r12
 bda:	80 81       	ld	r24, Z
 bdc:	91 81       	ldd	r25, Z+1	; 0x01
 bde:	80 0f       	add	r24, r16
 be0:	91 1f       	adc	r25, r17
 be2:	91 83       	std	Z+1, r25	; 0x01
 be4:	80 83       	st	Z, r24
 be6:	85 e0       	ldi	r24, 0x05	; 5
 be8:	11 c0       	rjmp	.+34     	; 0xc0c <Endpoint_Write_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 bea:	9d d1       	rcall	.+826    	; 0xf26 <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 bec:	1b dd       	rcall	.-1482   	; 0x624 <Endpoint_WaitUntilReady>
 bee:	88 23       	and	r24, r24
 bf0:	49 f0       	breq	.+18     	; 0xc04 <Endpoint_Write_Stream_LE+0x88>
 bf2:	0c c0       	rjmp	.+24     	; 0xc0c <Endpoint_Write_Stream_LE+0x90>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 bf4:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 bf6:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 bfa:	08 94       	sec
 bfc:	e1 08       	sbc	r14, r1
 bfe:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
 c00:	0f 5f       	subi	r16, 0xFF	; 255
 c02:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 c04:	e1 14       	cp	r14, r1
 c06:	f1 04       	cpc	r15, r1
 c08:	d9 f6       	brne	.-74     	; 0xbc0 <Endpoint_Write_Stream_LE+0x44>
 c0a:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 c0c:	df 91       	pop	r29
 c0e:	cf 91       	pop	r28
 c10:	1f 91       	pop	r17
 c12:	0f 91       	pop	r16
 c14:	ff 90       	pop	r15
 c16:	ef 90       	pop	r14
 c18:	df 90       	pop	r13
 c1a:	cf 90       	pop	r12
 c1c:	bf 90       	pop	r11
 c1e:	08 95       	ret

00000c20 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 c20:	0f 93       	push	r16
 c22:	1f 93       	push	r17
 c24:	df 93       	push	r29
 c26:	cf 93       	push	r28
 c28:	cd b7       	in	r28, 0x3d	; 61
 c2a:	de b7       	in	r29, 0x3e	; 62
 c2c:	ac 97       	sbiw	r28, 0x2c	; 44
 c2e:	0f b6       	in	r0, 0x3f	; 63
 c30:	f8 94       	cli
 c32:	de bf       	out	0x3e, r29	; 62
 c34:	0f be       	out	0x3f, r0	; 63
 c36:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 c38:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
 c3c:	80 93 66 01 	sts	0x0166, r24
 c40:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
 c44:	80 93 67 01 	sts	0x0167, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 c48:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 c4c:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
 c50:	e8 e6       	ldi	r30, 0x68	; 104
 c52:	f1 e0       	ldi	r31, 0x01	; 1
 c54:	80 93 68 01 	sts	0x0168, r24
 c58:	90 93 69 01 	sts	0x0169, r25
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 c5c:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 c60:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
 c64:	80 93 6a 01 	sts	0x016A, r24
 c68:	93 83       	std	Z+3, r25	; 0x03
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 c6a:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 c6e:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
 c72:	80 93 6c 01 	sts	0x016C, r24
 c76:	95 83       	std	Z+5, r25	; 0x05

	EVENT_USB_Device_ControlRequest();
 c78:	72 db       	rcall	.-2332   	; 0x35e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c7a:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 c7e:	83 ff       	sbrs	r24, 3
 c80:	38 c1       	rjmp	.+624    	; 0xef2 <USB_Device_ProcessControlRequest+0x2d2>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 c82:	80 91 66 01 	lds	r24, 0x0166

		switch (USB_ControlRequest.bRequest)
 c86:	30 91 67 01 	lds	r19, 0x0167
 c8a:	35 30       	cpi	r19, 0x05	; 5
 c8c:	09 f4       	brne	.+2      	; 0xc90 <USB_Device_ProcessControlRequest+0x70>
 c8e:	87 c0       	rjmp	.+270    	; 0xd9e <USB_Device_ProcessControlRequest+0x17e>
 c90:	36 30       	cpi	r19, 0x06	; 6
 c92:	40 f4       	brcc	.+16     	; 0xca4 <USB_Device_ProcessControlRequest+0x84>
 c94:	31 30       	cpi	r19, 0x01	; 1
 c96:	c9 f1       	breq	.+114    	; 0xd0a <USB_Device_ProcessControlRequest+0xea>
 c98:	31 30       	cpi	r19, 0x01	; 1
 c9a:	70 f0       	brcs	.+28     	; 0xcb8 <USB_Device_ProcessControlRequest+0x98>
 c9c:	33 30       	cpi	r19, 0x03	; 3
 c9e:	09 f0       	breq	.+2      	; 0xca2 <USB_Device_ProcessControlRequest+0x82>
 ca0:	28 c1       	rjmp	.+592    	; 0xef2 <USB_Device_ProcessControlRequest+0x2d2>
 ca2:	33 c0       	rjmp	.+102    	; 0xd0a <USB_Device_ProcessControlRequest+0xea>
 ca4:	38 30       	cpi	r19, 0x08	; 8
 ca6:	09 f4       	brne	.+2      	; 0xcaa <USB_Device_ProcessControlRequest+0x8a>
 ca8:	f6 c0       	rjmp	.+492    	; 0xe96 <USB_Device_ProcessControlRequest+0x276>
 caa:	39 30       	cpi	r19, 0x09	; 9
 cac:	09 f4       	brne	.+2      	; 0xcb0 <USB_Device_ProcessControlRequest+0x90>
 cae:	05 c1       	rjmp	.+522    	; 0xeba <USB_Device_ProcessControlRequest+0x29a>
 cb0:	36 30       	cpi	r19, 0x06	; 6
 cb2:	09 f0       	breq	.+2      	; 0xcb6 <USB_Device_ProcessControlRequest+0x96>
 cb4:	1e c1       	rjmp	.+572    	; 0xef2 <USB_Device_ProcessControlRequest+0x2d2>
 cb6:	97 c0       	rjmp	.+302    	; 0xde6 <USB_Device_ProcessControlRequest+0x1c6>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 cb8:	80 38       	cpi	r24, 0x80	; 128
 cba:	21 f0       	breq	.+8      	; 0xcc4 <USB_Device_ProcessControlRequest+0xa4>
 cbc:	82 38       	cpi	r24, 0x82	; 130
 cbe:	09 f0       	breq	.+2      	; 0xcc2 <USB_Device_ProcessControlRequest+0xa2>
 cc0:	18 c1       	rjmp	.+560    	; 0xef2 <USB_Device_ProcessControlRequest+0x2d2>
 cc2:	08 c0       	rjmp	.+16     	; 0xcd4 <USB_Device_ProcessControlRequest+0xb4>
 cc4:	90 91 62 01 	lds	r25, 0x0162
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 cc8:	80 91 63 01 	lds	r24, 0x0163
 ccc:	88 23       	and	r24, r24
 cce:	99 f0       	breq	.+38     	; 0xcf6 <USB_Device_ProcessControlRequest+0xd6>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 cd0:	92 60       	ori	r25, 0x02	; 2
 cd2:	11 c0       	rjmp	.+34     	; 0xcf6 <USB_Device_ProcessControlRequest+0xd6>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 cd4:	80 91 6a 01 	lds	r24, 0x016A
 cd8:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 cda:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 cde:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
 ce2:	90 e0       	ldi	r25, 0x00	; 0
 ce4:	25 e0       	ldi	r18, 0x05	; 5
 ce6:	96 95       	lsr	r25
 ce8:	87 95       	ror	r24
 cea:	2a 95       	dec	r18
 cec:	e1 f7       	brne	.-8      	; 0xce6 <USB_Device_ProcessControlRequest+0xc6>
 cee:	98 2f       	mov	r25, r24
 cf0:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 cf2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cf6:	80 91 e8 00 	lds	r24, 0x00E8
 cfa:	87 7f       	andi	r24, 0xF7	; 247
 cfc:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 d00:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
 d04:	10 92 f1 00 	sts	0x00F1, r1
 d08:	d1 c0       	rjmp	.+418    	; 0xeac <USB_Device_ProcessControlRequest+0x28c>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 d0a:	88 23       	and	r24, r24
 d0c:	19 f0       	breq	.+6      	; 0xd14 <USB_Device_ProcessControlRequest+0xf4>
 d0e:	82 30       	cpi	r24, 0x02	; 2
 d10:	09 f0       	breq	.+2      	; 0xd14 <USB_Device_ProcessControlRequest+0xf4>
 d12:	ef c0       	rjmp	.+478    	; 0xef2 <USB_Device_ProcessControlRequest+0x2d2>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 d14:	90 e0       	ldi	r25, 0x00	; 0
 d16:	8f 71       	andi	r24, 0x1F	; 31
 d18:	90 70       	andi	r25, 0x00	; 0
 d1a:	00 97       	sbiw	r24, 0x00	; 0
 d1c:	21 f0       	breq	.+8      	; 0xd26 <USB_Device_ProcessControlRequest+0x106>
 d1e:	02 97       	sbiw	r24, 0x02	; 2
 d20:	09 f0       	breq	.+2      	; 0xd24 <USB_Device_ProcessControlRequest+0x104>
 d22:	e7 c0       	rjmp	.+462    	; 0xef2 <USB_Device_ProcessControlRequest+0x2d2>
 d24:	0c c0       	rjmp	.+24     	; 0xd3e <USB_Device_ProcessControlRequest+0x11e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 d26:	80 91 68 01 	lds	r24, 0x0168
 d2a:	81 30       	cpi	r24, 0x01	; 1
 d2c:	09 f0       	breq	.+2      	; 0xd30 <USB_Device_ProcessControlRequest+0x110>
 d2e:	e1 c0       	rjmp	.+450    	; 0xef2 <USB_Device_ProcessControlRequest+0x2d2>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 d30:	10 92 63 01 	sts	0x0163, r1
 d34:	33 30       	cpi	r19, 0x03	; 3
 d36:	69 f5       	brne	.+90     	; 0xd92 <USB_Device_ProcessControlRequest+0x172>
 d38:	80 93 63 01 	sts	0x0163, r24
 d3c:	2a c0       	rjmp	.+84     	; 0xd92 <USB_Device_ProcessControlRequest+0x172>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 d3e:	80 91 68 01 	lds	r24, 0x0168
 d42:	88 23       	and	r24, r24
 d44:	31 f5       	brne	.+76     	; 0xd92 <USB_Device_ProcessControlRequest+0x172>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 d46:	20 91 6a 01 	lds	r18, 0x016A
 d4a:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 d4c:	09 f4       	brne	.+2      	; 0xd50 <USB_Device_ProcessControlRequest+0x130>
 d4e:	d1 c0       	rjmp	.+418    	; 0xef2 <USB_Device_ProcessControlRequest+0x2d2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 d50:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 d54:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 d58:	80 ff       	sbrs	r24, 0
 d5a:	1b c0       	rjmp	.+54     	; 0xd92 <USB_Device_ProcessControlRequest+0x172>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 d5c:	33 30       	cpi	r19, 0x03	; 3
 d5e:	21 f4       	brne	.+8      	; 0xd68 <USB_Device_ProcessControlRequest+0x148>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 d60:	80 91 eb 00 	lds	r24, 0x00EB
 d64:	80 62       	ori	r24, 0x20	; 32
 d66:	13 c0       	rjmp	.+38     	; 0xd8e <USB_Device_ProcessControlRequest+0x16e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 d68:	80 91 eb 00 	lds	r24, 0x00EB
 d6c:	80 61       	ori	r24, 0x10	; 16
 d6e:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 d72:	81 e0       	ldi	r24, 0x01	; 1
 d74:	90 e0       	ldi	r25, 0x00	; 0
 d76:	02 c0       	rjmp	.+4      	; 0xd7c <USB_Device_ProcessControlRequest+0x15c>
 d78:	88 0f       	add	r24, r24
 d7a:	99 1f       	adc	r25, r25
 d7c:	2a 95       	dec	r18
 d7e:	e2 f7       	brpl	.-8      	; 0xd78 <USB_Device_ProcessControlRequest+0x158>
 d80:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 d84:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 d88:	80 91 eb 00 	lds	r24, 0x00EB
 d8c:	88 60       	ori	r24, 0x08	; 8
 d8e:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 d92:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d96:	80 91 e8 00 	lds	r24, 0x00E8
 d9a:	87 7f       	andi	r24, 0xF7	; 247
 d9c:	8a c0       	rjmp	.+276    	; 0xeb2 <USB_Device_ProcessControlRequest+0x292>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 d9e:	88 23       	and	r24, r24
 da0:	09 f0       	breq	.+2      	; 0xda4 <USB_Device_ProcessControlRequest+0x184>
 da2:	a7 c0       	rjmp	.+334    	; 0xef2 <USB_Device_ProcessControlRequest+0x2d2>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 da4:	10 91 68 01 	lds	r17, 0x0168
 da8:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 daa:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 dac:	f8 94       	cli
 dae:	80 91 e8 00 	lds	r24, 0x00E8
 db2:	87 7f       	andi	r24, 0xF7	; 247
 db4:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 db8:	14 dc       	rcall	.-2008   	; 0x5e2 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 dba:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
 dbe:	80 ff       	sbrs	r24, 0
 dc0:	fc cf       	rjmp	.-8      	; 0xdba <USB_Device_ProcessControlRequest+0x19a>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 dc2:	80 91 e3 00 	lds	r24, 0x00E3
 dc6:	80 78       	andi	r24, 0x80	; 128
 dc8:	81 2b       	or	r24, r17

				UDADDR = Temp;
 dca:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
 dce:	80 68       	ori	r24, 0x80	; 128
 dd0:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 dd4:	11 23       	and	r17, r17
 dd6:	11 f4       	brne	.+4      	; 0xddc <USB_Device_ProcessControlRequest+0x1bc>
 dd8:	82 e0       	ldi	r24, 0x02	; 2
 dda:	01 c0       	rjmp	.+2      	; 0xdde <USB_Device_ProcessControlRequest+0x1be>
 ddc:	83 e0       	ldi	r24, 0x03	; 3
 dde:	80 93 65 01 	sts	0x0165, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 de2:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
 de4:	86 c0       	rjmp	.+268    	; 0xef2 <USB_Device_ProcessControlRequest+0x2d2>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 de6:	80 58       	subi	r24, 0x80	; 128
 de8:	82 30       	cpi	r24, 0x02	; 2
 dea:	08 f0       	brcs	.+2      	; 0xdee <USB_Device_ProcessControlRequest+0x1ce>
 dec:	82 c0       	rjmp	.+260    	; 0xef2 <USB_Device_ProcessControlRequest+0x2d2>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 dee:	80 91 68 01 	lds	r24, 0x0168
 df2:	90 91 69 01 	lds	r25, 0x0169
 df6:	23 e0       	ldi	r18, 0x03	; 3
 df8:	8c 3d       	cpi	r24, 0xDC	; 220
 dfa:	92 07       	cpc	r25, r18
 dfc:	09 f0       	breq	.+2      	; 0xe00 <USB_Device_ProcessControlRequest+0x1e0>
 dfe:	33 c0       	rjmp	.+102    	; 0xe66 <USB_Device_ProcessControlRequest+0x246>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 e00:	83 e0       	ldi	r24, 0x03	; 3
 e02:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 e04:	8a e2       	ldi	r24, 0x2A	; 42
 e06:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 e08:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 e0a:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 e0c:	de 01       	movw	r26, r28
 e0e:	15 96       	adiw	r26, 0x05	; 5
 e10:	6e e0       	ldi	r22, 0x0E	; 14
 e12:	40 e0       	ldi	r20, 0x00	; 0
 e14:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 e16:	11 e2       	ldi	r17, 0x21	; 33
 e18:	e6 2f       	mov	r30, r22
 e1a:	f0 e0       	ldi	r31, 0x00	; 0
 e1c:	10 93 57 00 	sts	0x0057, r17
 e20:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
 e22:	40 ff       	sbrs	r20, 0
 e24:	03 c0       	rjmp	.+6      	; 0xe2c <USB_Device_ProcessControlRequest+0x20c>
					{
						SerialByte >>= 4;
 e26:	82 95       	swap	r24
 e28:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
 e2a:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 e2c:	8f 70       	andi	r24, 0x0F	; 15
 e2e:	28 2f       	mov	r18, r24
 e30:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 e32:	8a 30       	cpi	r24, 0x0A	; 10
 e34:	18 f0       	brcs	.+6      	; 0xe3c <USB_Device_ProcessControlRequest+0x21c>
 e36:	c9 01       	movw	r24, r18
 e38:	c7 96       	adiw	r24, 0x37	; 55
 e3a:	02 c0       	rjmp	.+4      	; 0xe40 <USB_Device_ProcessControlRequest+0x220>
 e3c:	c9 01       	movw	r24, r18
 e3e:	c0 96       	adiw	r24, 0x30	; 48
 e40:	8d 93       	st	X+, r24
 e42:	9d 93       	st	X+, r25
 e44:	4f 5f       	subi	r20, 0xFF	; 255
 e46:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 e48:	44 31       	cpi	r20, 0x14	; 20
 e4a:	51 05       	cpc	r21, r1
 e4c:	29 f7       	brne	.-54     	; 0xe18 <USB_Device_ProcessControlRequest+0x1f8>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 e4e:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e50:	80 91 e8 00 	lds	r24, 0x00E8
 e54:	87 7f       	andi	r24, 0xF7	; 247
 e56:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 e5a:	ce 01       	movw	r24, r28
 e5c:	03 96       	adiw	r24, 0x03	; 3
 e5e:	6a e2       	ldi	r22, 0x2A	; 42
 e60:	70 e0       	ldi	r23, 0x00	; 0
 e62:	3a dd       	rcall	.-1420   	; 0x8d8 <Endpoint_Write_Control_Stream_LE>
 e64:	12 c0       	rjmp	.+36     	; 0xe8a <USB_Device_ProcessControlRequest+0x26a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 e66:	60 91 6a 01 	lds	r22, 0x016A
 e6a:	ae 01       	movw	r20, r28
 e6c:	4f 5f       	subi	r20, 0xFF	; 255
 e6e:	5f 4f       	sbci	r21, 0xFF	; 255
 e70:	55 db       	rcall	.-2390   	; 0x51c <CALLBACK_USB_GetDescriptor>
 e72:	bc 01       	movw	r22, r24
 e74:	00 97       	sbiw	r24, 0x00	; 0
 e76:	09 f4       	brne	.+2      	; 0xe7a <USB_Device_ProcessControlRequest+0x25a>
 e78:	3c c0       	rjmp	.+120    	; 0xef2 <USB_Device_ProcessControlRequest+0x2d2>
 e7a:	80 91 e8 00 	lds	r24, 0x00E8
 e7e:	87 7f       	andi	r24, 0xF7	; 247
 e80:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 e84:	89 81       	ldd	r24, Y+1	; 0x01
 e86:	9a 81       	ldd	r25, Y+2	; 0x02
 e88:	c6 dd       	rcall	.-1140   	; 0xa16 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 e8a:	80 91 e8 00 	lds	r24, 0x00E8
 e8e:	8b 77       	andi	r24, 0x7B	; 123
 e90:	80 93 e8 00 	sts	0x00E8, r24
 e94:	2e c0       	rjmp	.+92     	; 0xef2 <USB_Device_ProcessControlRequest+0x2d2>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 e96:	80 38       	cpi	r24, 0x80	; 128
 e98:	61 f5       	brne	.+88     	; 0xef2 <USB_Device_ProcessControlRequest+0x2d2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e9a:	80 91 e8 00 	lds	r24, 0x00E8
 e9e:	87 7f       	andi	r24, 0xF7	; 247
 ea0:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 ea4:	80 91 61 01 	lds	r24, 0x0161
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 ea8:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 eac:	80 91 e8 00 	lds	r24, 0x00E8
 eb0:	8e 77       	andi	r24, 0x7E	; 126
 eb2:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 eb6:	95 db       	rcall	.-2262   	; 0x5e2 <Endpoint_ClearStatusStage>
 eb8:	1c c0       	rjmp	.+56     	; 0xef2 <USB_Device_ProcessControlRequest+0x2d2>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 eba:	88 23       	and	r24, r24
 ebc:	d1 f4       	brne	.+52     	; 0xef2 <USB_Device_ProcessControlRequest+0x2d2>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 ebe:	90 91 68 01 	lds	r25, 0x0168
 ec2:	92 30       	cpi	r25, 0x02	; 2
 ec4:	b0 f4       	brcc	.+44     	; 0xef2 <USB_Device_ProcessControlRequest+0x2d2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ec6:	80 91 e8 00 	lds	r24, 0x00E8
 eca:	87 7f       	andi	r24, 0xF7	; 247
 ecc:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 ed0:	90 93 61 01 	sts	0x0161, r25

	Endpoint_ClearStatusStage();
 ed4:	86 db       	rcall	.-2292   	; 0x5e2 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 ed6:	80 91 61 01 	lds	r24, 0x0161
 eda:	88 23       	and	r24, r24
 edc:	31 f4       	brne	.+12     	; 0xeea <USB_Device_ProcessControlRequest+0x2ca>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 ede:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 ee2:	87 fd       	sbrc	r24, 7
 ee4:	02 c0       	rjmp	.+4      	; 0xeea <USB_Device_ProcessControlRequest+0x2ca>
 ee6:	81 e0       	ldi	r24, 0x01	; 1
 ee8:	01 c0       	rjmp	.+2      	; 0xeec <USB_Device_ProcessControlRequest+0x2cc>
 eea:	84 e0       	ldi	r24, 0x04	; 4
 eec:	80 93 65 01 	sts	0x0165, r24

	EVENT_USB_Device_ConfigurationChanged();
 ef0:	79 da       	rcall	.-2830   	; 0x3e4 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 ef2:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 ef6:	83 ff       	sbrs	r24, 3
 ef8:	0a c0       	rjmp	.+20     	; 0xf0e <USB_Device_ProcessControlRequest+0x2ee>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 efa:	80 91 eb 00 	lds	r24, 0x00EB
 efe:	80 62       	ori	r24, 0x20	; 32
 f00:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 f04:	80 91 e8 00 	lds	r24, 0x00E8
 f08:	87 7f       	andi	r24, 0xF7	; 247
 f0a:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 f0e:	ac 96       	adiw	r28, 0x2c	; 44
 f10:	0f b6       	in	r0, 0x3f	; 63
 f12:	f8 94       	cli
 f14:	de bf       	out	0x3e, r29	; 62
 f16:	0f be       	out	0x3f, r0	; 63
 f18:	cd bf       	out	0x3d, r28	; 61
 f1a:	cf 91       	pop	r28
 f1c:	df 91       	pop	r29
 f1e:	1f 91       	pop	r17
 f20:	0f 91       	pop	r16
 f22:	08 95       	ret

00000f24 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 f24:	08 95       	ret

00000f26 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 f26:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 f28:	80 91 65 01 	lds	r24, 0x0165
 f2c:	88 23       	and	r24, r24
 f2e:	61 f0       	breq	.+24     	; 0xf48 <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 f30:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 f34:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 f38:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 f3c:	83 ff       	sbrs	r24, 3
 f3e:	01 c0       	rjmp	.+2      	; 0xf42 <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
 f40:	6f de       	rcall	.-802    	; 0xc20 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 f42:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 f44:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 f48:	1f 91       	pop	r17
 f4a:	08 95       	ret

00000f4c <_exit>:
 f4c:	f8 94       	cli

00000f4e <__stop_program>:
 f4e:	ff cf       	rjmp	.-2      	; 0xf4e <__stop_program>
