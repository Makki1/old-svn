
MassStorage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  0000180a  0000189e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000180a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002d  00800144  00800144  000018e2  2**0
                  ALLOC
  3 .stab         000008f4  00000000  00000000  000018e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000b3  00000000  00000000  000021d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000358  00000000  00000000  0000228b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000095e  00000000  00000000  000025e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006c24  00000000  00000000  00002f41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000016c7  00000000  00000000  00009b65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000551c  00000000  00000000  0000b22c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004f0  00000000  00000000  00010748  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000025e2  00000000  00000000  00010c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002a14  00000000  00000000  0001321a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004f8  00000000  00000000  00015c2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
 *  \param[in] BufferPtr     Pointer to the data source RAM buffer
 */
void DataflashManager_WriteBlocks_RAM(const uint32_t BlockAddress,
                                      uint16_t TotalBlocks,
                                      uint8_t* BufferPtr)
{
       0:	8b c0       	rjmp	.+278    	; 0x118 <__ctors_end>
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       2:	00 00       	nop
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       4:	a7 c0       	rjmp	.+334    	; 0x154 <__bad_interrupt>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       6:	00 00       	nop
       8:	a5 c0       	rjmp	.+330    	; 0x154 <__bad_interrupt>
       a:	00 00       	nop
       c:	a3 c0       	rjmp	.+326    	; 0x154 <__bad_interrupt>
       e:	00 00       	nop
      10:	a1 c0       	rjmp	.+322    	; 0x154 <__bad_interrupt>
      12:	00 00       	nop
      14:	9f c0       	rjmp	.+318    	; 0x154 <__bad_interrupt>
      16:	00 00       	nop
      18:	9d c0       	rjmp	.+314    	; 0x154 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9b c0       	rjmp	.+310    	; 0x154 <__bad_interrupt>
      1e:	00 00       	nop
      20:	99 c0       	rjmp	.+306    	; 0x154 <__bad_interrupt>
      22:	00 00       	nop
      24:	97 c0       	rjmp	.+302    	; 0x154 <__bad_interrupt>
      26:	00 00       	nop
      28:	e5 c7       	rjmp	.+4042   	; 0xff4 <__vector_10>
      2a:	00 00       	nop
      2c:	a6 c7       	rjmp	.+3916   	; 0xf7a <__vector_11>
      2e:	00 00       	nop
      30:	91 c0       	rjmp	.+290    	; 0x154 <__bad_interrupt>
      32:	00 00       	nop
      34:	8f c0       	rjmp	.+286    	; 0x154 <__bad_interrupt>
      36:	00 00       	nop
      38:	8d c0       	rjmp	.+282    	; 0x154 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8b c0       	rjmp	.+278    	; 0x154 <__bad_interrupt>
      3e:	00 00       	nop
      40:	89 c0       	rjmp	.+274    	; 0x154 <__bad_interrupt>
      42:	00 00       	nop
      44:	87 c0       	rjmp	.+270    	; 0x154 <__bad_interrupt>
      46:	00 00       	nop
      48:	85 c0       	rjmp	.+266    	; 0x154 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	83 c0       	rjmp	.+262    	; 0x154 <__bad_interrupt>
      4e:	00 00       	nop
      50:	81 c0       	rjmp	.+258    	; 0x154 <__bad_interrupt>
      52:	00 00       	nop
      54:	7f c0       	rjmp	.+254    	; 0x154 <__bad_interrupt>
      56:	00 00       	nop
      58:	7d c0       	rjmp	.+250    	; 0x154 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7b c0       	rjmp	.+246    	; 0x154 <__bad_interrupt>
      5e:	00 00       	nop
      60:	79 c0       	rjmp	.+242    	; 0x154 <__bad_interrupt>
      62:	00 00       	nop
      64:	77 c0       	rjmp	.+238    	; 0x154 <__bad_interrupt>
      66:	00 00       	nop
      68:	75 c0       	rjmp	.+234    	; 0x154 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	73 c0       	rjmp	.+230    	; 0x154 <__bad_interrupt>
      6e:	00 00       	nop
      70:	71 c0       	rjmp	.+226    	; 0x154 <__bad_interrupt>
      72:	00 00       	nop
      74:	6f c0       	rjmp	.+222    	; 0x154 <__bad_interrupt>
      76:	00 00       	nop
      78:	6d c0       	rjmp	.+218    	; 0x154 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6b c0       	rjmp	.+214    	; 0x154 <__bad_interrupt>
      7e:	00 00       	nop
      80:	69 c0       	rjmp	.+210    	; 0x154 <__bad_interrupt>
      82:	00 00       	nop
      84:	67 c0       	rjmp	.+206    	; 0x154 <__bad_interrupt>
      86:	00 00       	nop
      88:	65 c0       	rjmp	.+202    	; 0x154 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	63 c0       	rjmp	.+198    	; 0x154 <__bad_interrupt>
      8e:	00 00       	nop
      90:	61 c0       	rjmp	.+194    	; 0x154 <__bad_interrupt>
      92:	00 00       	nop
      94:	5f c0       	rjmp	.+190    	; 0x154 <__bad_interrupt>
      96:	00 00       	nop

00000098 <DeviceDescriptor>:
      98:	12 01 10 01 00 00 00 08 eb 03 45 20 01 00 01 02     ..........E ....
      a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
      aa:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 08 06     .. .....2.......
      ba:	50 00 07 05 83 02 40 00 01 07 05 04 02 40 00 01     P.....@......@..

000000ca <LanguageString>:
      ca:	04 03 09 04                                         ....

000000ce <ManufacturerString>:
      ce:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      de:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e8 <ProductString>:
      e8:	2e 03 4c 00 55 00 46 00 41 00 20 00 4d 00 61 00     ..L.U.F.A. .M.a.
      f8:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.
     108:	67 00 65 00 20 00 44 00 65 00 6d 00 6f 00 00 00     g.e. .D.e.m.o...

00000118 <__ctors_end>:
     118:	11 24       	eor	r1, r1
     11a:	1f be       	out	0x3f, r1	; 63
     11c:	cf ef       	ldi	r28, 0xFF	; 255
     11e:	d0 e2       	ldi	r29, 0x20	; 32
     120:	de bf       	out	0x3e, r29	; 62
     122:	cd bf       	out	0x3d, r28	; 61

00000124 <__do_copy_data>:
     124:	11 e0       	ldi	r17, 0x01	; 1
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	ea e0       	ldi	r30, 0x0A	; 10
     12c:	f8 e1       	ldi	r31, 0x18	; 24
     12e:	00 e0       	ldi	r16, 0x00	; 0
     130:	0b bf       	out	0x3b, r16	; 59
     132:	02 c0       	rjmp	.+4      	; 0x138 <__do_copy_data+0x14>
     134:	07 90       	elpm	r0, Z+
     136:	0d 92       	st	X+, r0
     138:	a4 34       	cpi	r26, 0x44	; 68
     13a:	b1 07       	cpc	r27, r17
     13c:	d9 f7       	brne	.-10     	; 0x134 <__do_copy_data+0x10>

0000013e <__do_clear_bss>:
     13e:	11 e0       	ldi	r17, 0x01	; 1
     140:	a4 e4       	ldi	r26, 0x44	; 68
     142:	b1 e0       	ldi	r27, 0x01	; 1
     144:	01 c0       	rjmp	.+2      	; 0x148 <.do_clear_bss_start>

00000146 <.do_clear_bss_loop>:
     146:	1d 92       	st	X+, r1

00000148 <.do_clear_bss_start>:
     148:	a1 37       	cpi	r26, 0x71	; 113
     14a:	b1 07       	cpc	r27, r17
     14c:	e1 f7       	brne	.-8      	; 0x146 <.do_clear_bss_loop>
     14e:	8b d1       	rcall	.+790    	; 0x466 <main>
     150:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <_exit>

00000154 <__bad_interrupt>:
     154:	55 cf       	rjmp	.-342    	; 0x0 <__vectors>

00000156 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     156:	8b b1       	in	r24, 0x0b	; 11
     158:	8f 70       	andi	r24, 0x0F	; 15
     15a:	80 6a       	ori	r24, 0xA0	; 160
     15c:	8b b9       	out	0x0b, r24	; 11
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	/* Reset the MSReset flag upon connection */
	IsMassStoreReset = false;
     15e:	10 92 44 01 	sts	0x0144, r1
}
     162:	08 95       	ret

00000164 <EVENT_USB_Device_Disconnect>:
     164:	8b b1       	in	r24, 0x0b	; 11
     166:	8f 70       	andi	r24, 0x0F	; 15
     168:	80 61       	ori	r24, 0x10	; 16
     16a:	8b b9       	out	0x0b, r24	; 11
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     16c:	08 95       	ret

0000016e <MassStorage_Task>:

/** Task to manage the Mass Storage interface, reading in Command Block Wrappers from the host, processing the SCSI commands they
 *  contain, and returning Command Status Wrappers back to the host to indicate the success or failure of the last issued command.
 */
void MassStorage_Task(void)
{
     16e:	0f 93       	push	r16
     170:	1f 93       	push	r17
     172:	df 93       	push	r29
     174:	cf 93       	push	r28
     176:	00 d0       	rcall	.+0      	; 0x178 <MassStorage_Task+0xa>
     178:	cd b7       	in	r28, 0x3d	; 61
     17a:	de b7       	in	r29, 0x3e	; 62
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     17c:	80 91 68 01 	lds	r24, 0x0168
     180:	84 30       	cpi	r24, 0x04	; 4
     182:	09 f0       	breq	.+2      	; 0x186 <MassStorage_Task+0x18>
     184:	f9 c0       	rjmp	.+498    	; 0x378 <MassStorage_Task+0x20a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     186:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     18a:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_OUT_EPNUM);

	/* Abort if no command has been sent from the host */
	if (!(Endpoint_IsOUTReceived()))
     18e:	82 ff       	sbrs	r24, 2
     190:	c9 c0       	rjmp	.+402    	; 0x324 <MassStorage_Task+0x1b6>
	  return false;

	/* Read in command block header */
	BytesTransferred = 0;
     192:	1a 82       	std	Y+2, r1	; 0x02
     194:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&CommandBlock, (sizeof(CommandBlock) - sizeof(CommandBlock.SCSICommandData)),
     196:	8e 01       	movw	r16, r28
     198:	0f 5f       	subi	r16, 0xFF	; 255
     19a:	1f 4f       	sbci	r17, 0xFF	; 255
     19c:	05 c0       	rjmp	.+10     	; 0x1a8 <MassStorage_Task+0x3a>
	                               &BytesTransferred) == ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		/* Check if the current command is being aborted by the host */
		if (IsMassStoreReset)
     19e:	80 91 44 01 	lds	r24, 0x0144
     1a2:	88 23       	and	r24, r24
     1a4:	09 f0       	breq	.+2      	; 0x1a8 <MassStorage_Task+0x3a>
     1a6:	be c0       	rjmp	.+380    	; 0x324 <MassStorage_Task+0x1b6>
	if (!(Endpoint_IsOUTReceived()))
	  return false;

	/* Read in command block header */
	BytesTransferred = 0;
	while (Endpoint_Read_Stream_LE(&CommandBlock, (sizeof(CommandBlock) - sizeof(CommandBlock.SCSICommandData)),
     1a8:	85 e4       	ldi	r24, 0x45	; 69
     1aa:	91 e0       	ldi	r25, 0x01	; 1
     1ac:	6f e0       	ldi	r22, 0x0F	; 15
     1ae:	70 e0       	ldi	r23, 0x00	; 0
     1b0:	a8 01       	movw	r20, r16
     1b2:	0e 94 86 09 	call	0x130c	; 0x130c <Endpoint_Read_Stream_LE>
     1b6:	85 30       	cpi	r24, 0x05	; 5
     1b8:	91 f3       	breq	.-28     	; 0x19e <MassStorage_Task+0x30>
		if (IsMassStoreReset)
		  return false;
	}

	/* Verify the command block - abort if invalid */
	if ((CommandBlock.Signature         != MS_CBW_SIGNATURE) ||
     1ba:	80 91 45 01 	lds	r24, 0x0145
     1be:	90 91 46 01 	lds	r25, 0x0146
     1c2:	a0 91 47 01 	lds	r26, 0x0147
     1c6:	b0 91 48 01 	lds	r27, 0x0148
     1ca:	85 55       	subi	r24, 0x55	; 85
     1cc:	93 45       	sbci	r25, 0x53	; 83
     1ce:	a2 44       	sbci	r26, 0x42	; 66
     1d0:	b3 44       	sbci	r27, 0x43	; 67
     1d2:	89 f4       	brne	.+34     	; 0x1f6 <MassStorage_Task+0x88>
     1d4:	80 91 52 01 	lds	r24, 0x0152
     1d8:	88 23       	and	r24, r24
     1da:	69 f4       	brne	.+26     	; 0x1f6 <MassStorage_Task+0x88>
     1dc:	80 91 51 01 	lds	r24, 0x0151
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	8f 71       	andi	r24, 0x1F	; 31
     1e4:	90 70       	andi	r25, 0x00	; 0
     1e6:	89 2b       	or	r24, r25
     1e8:	31 f4       	brne	.+12     	; 0x1f6 <MassStorage_Task+0x88>
     1ea:	80 91 53 01 	lds	r24, 0x0153
     1ee:	88 23       	and	r24, r24
     1f0:	11 f0       	breq	.+4      	; 0x1f6 <MassStorage_Task+0x88>
     1f2:	81 31       	cpi	r24, 0x11	; 17
     1f4:	70 f0       	brcs	.+28     	; 0x212 <MassStorage_Task+0xa4>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     1f6:	80 91 eb 00 	lds	r24, 0x00EB
     1fa:	80 62       	ori	r24, 0x20	; 32
     1fc:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     200:	83 e0       	ldi	r24, 0x03	; 3
     202:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     206:	80 91 eb 00 	lds	r24, 0x00EB
     20a:	80 62       	ori	r24, 0x20	; 32
     20c:	80 93 eb 00 	sts	0x00EB, r24
     210:	89 c0       	rjmp	.+274    	; 0x324 <MassStorage_Task+0x1b6>

		return false;
	}

	/* Read in command block command data */
	BytesTransferred = 0;
     212:	1a 82       	std	Y+2, r1	; 0x02
     214:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&CommandBlock.SCSICommandData, CommandBlock.SCSICommandLength,
     216:	8e 01       	movw	r16, r28
     218:	0f 5f       	subi	r16, 0xFF	; 255
     21a:	1f 4f       	sbci	r17, 0xFF	; 255
     21c:	05 c0       	rjmp	.+10     	; 0x228 <MassStorage_Task+0xba>
	                               &BytesTransferred) == ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		/* Check if the current command is being aborted by the host */
		if (IsMassStoreReset)
     21e:	80 91 44 01 	lds	r24, 0x0144
     222:	88 23       	and	r24, r24
     224:	09 f0       	breq	.+2      	; 0x228 <MassStorage_Task+0xba>
     226:	7e c0       	rjmp	.+252    	; 0x324 <MassStorage_Task+0x1b6>
		return false;
	}

	/* Read in command block command data */
	BytesTransferred = 0;
	while (Endpoint_Read_Stream_LE(&CommandBlock.SCSICommandData, CommandBlock.SCSICommandLength,
     228:	60 91 53 01 	lds	r22, 0x0153
     22c:	84 e5       	ldi	r24, 0x54	; 84
     22e:	91 e0       	ldi	r25, 0x01	; 1
     230:	70 e0       	ldi	r23, 0x00	; 0
     232:	a8 01       	movw	r20, r16
     234:	0e 94 86 09 	call	0x130c	; 0x130c <Endpoint_Read_Stream_LE>
     238:	85 30       	cpi	r24, 0x05	; 5
     23a:	89 f3       	breq	.-30     	; 0x21e <MassStorage_Task+0xb0>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     23c:	80 91 e8 00 	lds	r24, 0x00E8
     240:	8b 77       	andi	r24, 0x7B	; 123
     242:	80 93 e8 00 	sts	0x00E8, r24
     246:	8b b1       	in	r24, 0x0b	; 11
     248:	8f 70       	andi	r24, 0x0F	; 15
     24a:	80 62       	ori	r24, 0x20	; 32
     24c:	8b b9       	out	0x0b, r24	; 11
	{
		/* Indicate busy */
		LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

		/* Check direction of command, select Data IN endpoint if data is from the device */
		if (CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
     24e:	80 91 51 01 	lds	r24, 0x0151
     252:	87 ff       	sbrs	r24, 7
     254:	03 c0       	rjmp	.+6      	; 0x25c <MassStorage_Task+0xee>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     256:	83 e0       	ldi	r24, 0x03	; 3
     258:	80 93 e9 00 	sts	0x00E9, r24
		  Endpoint_SelectEndpoint(MASS_STORAGE_IN_EPNUM);

		/* Decode the received SCSI command, set returned status code */
		CommandStatus.Status = SCSI_DecodeSCSICommand() ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
     25c:	8c d4       	rcall	.+2328   	; 0xb76 <SCSI_DecodeSCSICommand>
     25e:	21 e0       	ldi	r18, 0x01	; 1
     260:	28 27       	eor	r18, r24
     262:	20 93 0c 01 	sts	0x010C, r18

		/* Load in the CBW tag into the CSW to link them together */
		CommandStatus.Tag = CommandBlock.Tag;
     266:	80 91 49 01 	lds	r24, 0x0149
     26a:	90 91 4a 01 	lds	r25, 0x014A
     26e:	a0 91 4b 01 	lds	r26, 0x014B
     272:	b0 91 4c 01 	lds	r27, 0x014C
     276:	80 93 04 01 	sts	0x0104, r24
     27a:	90 93 05 01 	sts	0x0105, r25
     27e:	a0 93 06 01 	sts	0x0106, r26
     282:	b0 93 07 01 	sts	0x0107, r27

		/* Load in the data residue counter into the CSW */
		CommandStatus.DataTransferResidue = CommandBlock.DataTransferLength;
     286:	80 91 4d 01 	lds	r24, 0x014D
     28a:	90 91 4e 01 	lds	r25, 0x014E
     28e:	a0 91 4f 01 	lds	r26, 0x014F
     292:	b0 91 50 01 	lds	r27, 0x0150
     296:	80 93 08 01 	sts	0x0108, r24
     29a:	90 93 09 01 	sts	0x0109, r25
     29e:	a0 93 0a 01 	sts	0x010A, r26
     2a2:	b0 93 0b 01 	sts	0x010B, r27

		/* Stall the selected data pipe if command failed (if data is still to be transferred) */
		if ((CommandStatus.Status == MS_SCSI_COMMAND_Fail) && (CommandStatus.DataTransferResidue))
     2a6:	21 30       	cpi	r18, 0x01	; 1
     2a8:	49 f4       	brne	.+18     	; 0x2bc <MassStorage_Task+0x14e>
     2aa:	00 97       	sbiw	r24, 0x00	; 0
     2ac:	a1 05       	cpc	r26, r1
     2ae:	b1 05       	cpc	r27, r1
     2b0:	29 f0       	breq	.+10     	; 0x2bc <MassStorage_Task+0x14e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     2b2:	80 91 eb 00 	lds	r24, 0x00EB
     2b6:	80 62       	ori	r24, 0x20	; 32
     2b8:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     2bc:	84 e0       	ldi	r24, 0x04	; 4
     2be:	80 93 e9 00 	sts	0x00E9, r24
     2c2:	04 c0       	rjmp	.+8      	; 0x2cc <MassStorage_Task+0x15e>

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
	{
		/* Check if the current command is being aborted by the host */
		if (IsMassStoreReset)
     2c4:	80 91 44 01 	lds	r24, 0x0144
     2c8:	88 23       	and	r24, r24
     2ca:	41 f5       	brne	.+80     	; 0x31c <MassStorage_Task+0x1ae>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     2cc:	80 91 eb 00 	lds	r24, 0x00EB

	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_OUT_EPNUM);

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
     2d0:	85 fd       	sbrc	r24, 5
     2d2:	f8 cf       	rjmp	.-16     	; 0x2c4 <MassStorage_Task+0x156>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     2d4:	83 e0       	ldi	r24, 0x03	; 3
     2d6:	80 93 e9 00 	sts	0x00E9, r24
     2da:	04 c0       	rjmp	.+8      	; 0x2e4 <MassStorage_Task+0x176>

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
	{
		/* Check if the current command is being aborted by the host */
		if (IsMassStoreReset)
     2dc:	80 91 44 01 	lds	r24, 0x0144
     2e0:	88 23       	and	r24, r24
     2e2:	e1 f4       	brne	.+56     	; 0x31c <MassStorage_Task+0x1ae>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     2e4:	80 91 eb 00 	lds	r24, 0x00EB

	/* Select the Data In endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_IN_EPNUM);

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
     2e8:	85 fd       	sbrc	r24, 5
     2ea:	f8 cf       	rjmp	.-16     	; 0x2dc <MassStorage_Task+0x16e>
		if (IsMassStoreReset)
		  return;
	}

	/* Write the CSW to the endpoint */
	BytesTransferred = 0;
     2ec:	1a 82       	std	Y+2, r1	; 0x02
     2ee:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&CommandStatus, sizeof(CommandStatus),
     2f0:	8e 01       	movw	r16, r28
     2f2:	0f 5f       	subi	r16, 0xFF	; 255
     2f4:	1f 4f       	sbci	r17, 0xFF	; 255
     2f6:	04 c0       	rjmp	.+8      	; 0x300 <MassStorage_Task+0x192>
	                                &BytesTransferred) == ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		/* Check if the current command is being aborted by the host */
		if (IsMassStoreReset)
     2f8:	80 91 44 01 	lds	r24, 0x0144
     2fc:	88 23       	and	r24, r24
     2fe:	71 f4       	brne	.+28     	; 0x31c <MassStorage_Task+0x1ae>
		  return;
	}

	/* Write the CSW to the endpoint */
	BytesTransferred = 0;
	while (Endpoint_Write_Stream_LE(&CommandStatus, sizeof(CommandStatus),
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	91 e0       	ldi	r25, 0x01	; 1
     304:	6d e0       	ldi	r22, 0x0D	; 13
     306:	70 e0       	ldi	r23, 0x00	; 0
     308:	a8 01       	movw	r20, r16
     30a:	0e 94 d7 09 	call	0x13ae	; 0x13ae <Endpoint_Write_Stream_LE>
     30e:	85 30       	cpi	r24, 0x05	; 5
     310:	99 f3       	breq	.-26     	; 0x2f8 <MassStorage_Task+0x18a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     312:	80 91 e8 00 	lds	r24, 0x00E8
     316:	8e 77       	andi	r24, 0x7E	; 126
     318:	80 93 e8 00 	sts	0x00E8, r24
     31c:	8b b1       	in	r24, 0x0b	; 11
     31e:	8f 70       	andi	r24, 0x0F	; 15
     320:	80 66       	ori	r24, 0x60	; 96
     322:	8b b9       	out	0x0b, r24	; 11
		/* Indicate ready */
		LEDs_SetAllLEDs(LEDMASK_USB_READY);
	}

	/* Check if a Mass Storage Reset occurred */
	if (IsMassStoreReset)
     324:	80 91 44 01 	lds	r24, 0x0144
     328:	88 23       	and	r24, r24
     32a:	31 f1       	breq	.+76     	; 0x378 <MassStorage_Task+0x20a>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
     32c:	80 e1       	ldi	r24, 0x10	; 16
     32e:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     332:	10 92 ea 00 	sts	0x00EA, r1
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
     336:	88 e0       	ldi	r24, 0x08	; 8
     338:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     33c:	10 92 ea 00 	sts	0x00EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     340:	84 e0       	ldi	r24, 0x04	; 4
     342:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     346:	80 91 eb 00 	lds	r24, 0x00EB
     34a:	80 61       	ori	r24, 0x10	; 16
     34c:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     350:	80 91 eb 00 	lds	r24, 0x00EB
     354:	88 60       	ori	r24, 0x08	; 8
     356:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     35a:	83 e0       	ldi	r24, 0x03	; 3
     35c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     360:	80 91 eb 00 	lds	r24, 0x00EB
     364:	80 61       	ori	r24, 0x10	; 16
     366:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     36a:	80 91 eb 00 	lds	r24, 0x00EB
     36e:	88 60       	ori	r24, 0x08	; 8
     370:	80 93 eb 00 	sts	0x00EB, r24
		Endpoint_SelectEndpoint(MASS_STORAGE_IN_EPNUM);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		/* Clear the abort transfer flag */
		IsMassStoreReset = false;
     374:	10 92 44 01 	sts	0x0144, r1
	}
}
     378:	0f 90       	pop	r0
     37a:	0f 90       	pop	r0
     37c:	cf 91       	pop	r28
     37e:	df 91       	pop	r29
     380:	1f 91       	pop	r17
     382:	0f 91       	pop	r16
     384:	08 95       	ret

00000386 <EVENT_USB_Device_ControlRequest>:
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	/* Process UFI specific control requests */
	switch (USB_ControlRequest.bRequest)
     386:	80 91 6a 01 	lds	r24, 0x016A
     38a:	8e 3f       	cpi	r24, 0xFE	; 254
     38c:	81 f0       	breq	.+32     	; 0x3ae <EVENT_USB_Device_ControlRequest+0x28>
     38e:	8f 3f       	cpi	r24, 0xFF	; 255
     390:	f9 f4       	brne	.+62     	; 0x3d0 <EVENT_USB_Device_ControlRequest+0x4a>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     392:	80 91 69 01 	lds	r24, 0x0169
     396:	81 32       	cpi	r24, 0x21	; 33
     398:	d9 f4       	brne	.+54     	; 0x3d0 <EVENT_USB_Device_ControlRequest+0x4a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     39a:	80 91 e8 00 	lds	r24, 0x00E8
     39e:	87 7f       	andi	r24, 0xF7	; 247
     3a0:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     3a4:	37 d5       	rcall	.+2670   	; 0xe14 <Endpoint_ClearStatusStage>

				/* Indicate that the current transfer should be aborted */
				IsMassStoreReset = true;
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	80 93 44 01 	sts	0x0144, r24
     3ac:	08 95       	ret
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     3ae:	80 91 69 01 	lds	r24, 0x0169
     3b2:	81 3a       	cpi	r24, 0xA1	; 161
     3b4:	69 f4       	brne	.+26     	; 0x3d0 <EVENT_USB_Device_ControlRequest+0x4a>
     3b6:	80 91 e8 00 	lds	r24, 0x00E8
     3ba:	87 7f       	andi	r24, 0xF7	; 247
     3bc:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     3c0:	10 92 f1 00 	sts	0x00F1, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     3c4:	80 91 e8 00 	lds	r24, 0x00E8
     3c8:	8e 77       	andi	r24, 0x7E	; 126
     3ca:	80 93 e8 00 	sts	0x00E8, r24

				/* Indicate to the host the number of supported LUNs (virtual disks) on the device */
				Endpoint_Write_8(TOTAL_LUNS - 1);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     3ce:	22 c5       	rjmp	.+2628   	; 0xe14 <Endpoint_ClearStatusStage>
     3d0:	08 95       	ret

000003d2 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the USB_ConfigurationChanged event. This is fired when the host set the current configuration
 *  of the USB device after enumeration - the device endpoints are configured and the Mass Storage management task started.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     3d2:	0f 93       	push	r16
     3d4:	1f 93       	push	r17
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     3d6:	83 e0       	ldi	r24, 0x03	; 3
     3d8:	61 e8       	ldi	r22, 0x81	; 129
     3da:	42 e3       	ldi	r20, 0x32	; 50
     3dc:	e6 d4       	rcall	.+2508   	; 0xdaa <Endpoint_ConfigureEndpoint_Prv>
     3de:	08 2f       	mov	r16, r24
     3e0:	84 e0       	ldi	r24, 0x04	; 4
     3e2:	60 e8       	ldi	r22, 0x80	; 128
     3e4:	42 e3       	ldi	r20, 0x32	; 50
     3e6:	e1 d4       	rcall	.+2498   	; 0xdaa <Endpoint_ConfigureEndpoint_Prv>
	                                            MASS_STORAGE_IO_EPSIZE, ENDPOINT_BANK_SINGLE);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MASS_STORAGE_OUT_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_OUT,
	                                            MASS_STORAGE_IO_EPSIZE, ENDPOINT_BANK_SINGLE);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     3e8:	10 e0       	ldi	r17, 0x00	; 0
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	08 23       	and	r16, r24
     3ee:	19 23       	and	r17, r25
     3f0:	00 ff       	sbrs	r16, 0
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <EVENT_USB_Device_ConfigurationChanged+0x26>
     3f4:	90 e6       	ldi	r25, 0x60	; 96
     3f6:	01 c0       	rjmp	.+2      	; 0x3fa <EVENT_USB_Device_ConfigurationChanged+0x28>
     3f8:	90 e9       	ldi	r25, 0x90	; 144
     3fa:	8b b1       	in	r24, 0x0b	; 11
     3fc:	8f 70       	andi	r24, 0x0F	; 15
     3fe:	98 2b       	or	r25, r24
     400:	9b b9       	out	0x0b, r25	; 11
}
     402:	1f 91       	pop	r17
     404:	0f 91       	pop	r16
     406:	08 95       	ret

00000408 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     408:	84 b7       	in	r24, 0x34	; 52
     40a:	87 7f       	andi	r24, 0xF7	; 247
     40c:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     40e:	88 e1       	ldi	r24, 0x18	; 24
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	f8 94       	cli
     414:	80 93 60 00 	sts	0x0060, r24
     418:	10 92 60 00 	sts	0x0060, r1
     41c:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	80 e8       	ldi	r24, 0x80	; 128
     422:	0f b6       	in	r0, 0x3f	; 63
     424:	f8 94       	cli
     426:	80 93 61 00 	sts	0x0061, r24
     42a:	90 93 61 00 	sts	0x0061, r25
     42e:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     430:	8a b1       	in	r24, 0x0a	; 10
     432:	80 6f       	ori	r24, 0xF0	; 240
     434:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     436:	8b b1       	in	r24, 0x0b	; 11
     438:	8f 70       	andi	r24, 0x0F	; 15
     43a:	8b b9       	out	0x0b, r24	; 11
			 *                         \c SPI_SCK_*, \c SPI_SAMPLE_*, \c SPI_ORDER_* and \c SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
     43c:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
     43e:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
     440:	84 b1       	in	r24, 0x04	; 4
     442:	86 60       	ori	r24, 0x06	; 6
     444:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
     446:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
     448:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     44a:	8d b5       	in	r24, 0x2d	; 45
     44c:	81 60       	ori	r24, 0x01	; 1
     44e:	8d bd       	out	0x2d, r24	; 45
				else
				  SPSR &= ~(1 << SPI2X);

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
     450:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
     452:	8c e5       	ldi	r24, 0x5C	; 92
     454:	8c bd       	out	0x2c, r24	; 44
			/** Initializes the dataflash driver so that commands and data may be sent to an attached dataflash IC.
			 *  The microcontroller's SPI driver MUST be initialized before any of the dataflash commands are used.
			 */
			static inline void Dataflash_Init(void)
			{
				DATAFLASH_CHIPCS_DDR  |= DATAFLASH_CHIPCS_MASK;
     456:	8d b1       	in	r24, 0x0d	; 13
     458:	83 60       	ori	r24, 0x03	; 3
     45a:	8d b9       	out	0x0d, r24	; 13
				DATAFLASH_CHIPCS_PORT |= DATAFLASH_CHIPCS_MASK;
     45c:	8e b1       	in	r24, 0x0e	; 14
     45e:	83 60       	ori	r24, 0x03	; 3
     460:	8e b9       	out	0x0e, r24	; 14

	/* Hardware Initialization */
	LEDs_Init();
	SPI_Init(SPI_SPEED_FCPU_DIV_2 | SPI_ORDER_MSB_FIRST | SPI_SCK_LEAD_FALLING | SPI_SAMPLE_TRAILING | SPI_MODE_MASTER);
	Dataflash_Init();
	USB_Init();
     462:	75 d5       	rcall	.+2794   	; 0xf4e <USB_Init>

	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
}
     464:	7e c0       	rjmp	.+252    	; 0x562 <DataflashManager_ResetDataflashProtections>

00000466 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     466:	d0 df       	rcall	.-96     	; 0x408 <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     468:	8b b1       	in	r24, 0x0b	; 11
     46a:	8f 70       	andi	r24, 0x0F	; 15
     46c:	80 61       	ori	r24, 0x10	; 16
     46e:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     470:	78 94       	sei

	for (;;)
	{
		MassStorage_Task();
     472:	7d de       	rcall	.-774    	; 0x16e <MassStorage_Task>
		USB_USBTask();
     474:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <USB_USBTask>
     478:	fc cf       	rjmp	.-8      	; 0x472 <main+0xc>

0000047a <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     47a:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     47c:	92 30       	cpi	r25, 0x02	; 2
     47e:	49 f0       	breq	.+18     	; 0x492 <CALLBACK_USB_GetDescriptor+0x18>
     480:	93 30       	cpi	r25, 0x03	; 3
     482:	61 f0       	breq	.+24     	; 0x49c <CALLBACK_USB_GetDescriptor+0x22>
     484:	91 30       	cpi	r25, 0x01	; 1
     486:	f9 f4       	brne	.+62     	; 0x4c6 <CALLBACK_USB_GetDescriptor+0x4c>
     488:	e8 e9       	ldi	r30, 0x98	; 152
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	22 e1       	ldi	r18, 0x12	; 18
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	1e c0       	rjmp	.+60     	; 0x4ce <CALLBACK_USB_GetDescriptor+0x54>
     492:	ea ea       	ldi	r30, 0xAA	; 170
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	20 e2       	ldi	r18, 0x20	; 32
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	19 c0       	rjmp	.+50     	; 0x4ce <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     49c:	81 30       	cpi	r24, 0x01	; 1
     49e:	49 f0       	breq	.+18     	; 0x4b2 <CALLBACK_USB_GetDescriptor+0x38>
     4a0:	81 30       	cpi	r24, 0x01	; 1
     4a2:	18 f0       	brcs	.+6      	; 0x4aa <CALLBACK_USB_GetDescriptor+0x30>
     4a4:	82 30       	cpi	r24, 0x02	; 2
     4a6:	79 f4       	brne	.+30     	; 0x4c6 <CALLBACK_USB_GetDescriptor+0x4c>
     4a8:	08 c0       	rjmp	.+16     	; 0x4ba <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     4aa:	ea ec       	ldi	r30, 0xCA	; 202
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	84 91       	lpm	r24, Z+
     4b0:	07 c0       	rjmp	.+14     	; 0x4c0 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     4b2:	ee ec       	ldi	r30, 0xCE	; 206
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	84 91       	lpm	r24, Z+
     4b8:	03 c0       	rjmp	.+6      	; 0x4c0 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     4ba:	e8 ee       	ldi	r30, 0xE8	; 232
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	84 91       	lpm	r24, Z+
     4c0:	28 2f       	mov	r18, r24
     4c2:	30 e0       	ldi	r19, 0x00	; 0
     4c4:	04 c0       	rjmp	.+8      	; 0x4ce <CALLBACK_USB_GetDescriptor+0x54>
     4c6:	e0 e0       	ldi	r30, 0x00	; 0
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
     4ca:	20 e0       	ldi	r18, 0x00	; 0
     4cc:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     4ce:	ed 93       	st	X+, r30
     4d0:	fc 93       	st	X, r31
	return Size;
}
     4d2:	c9 01       	movw	r24, r18
     4d4:	08 95       	ret

000004d6 <Dataflash_SelectChipFromPage>:
			 *
			 *  \param[in] PageAddress  Address of the page to manipulate, ranging from
			 *                          0 to ((DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS) - 1).
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
     4d6:	9c 01       	movw	r18, r24
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     4d8:	8e b1       	in	r24, 0x0e	; 14
     4da:	83 60       	ori	r24, 0x03	; 3
     4dc:	8e b9       	out	0x0e, r24	; 14
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
				Dataflash_DeselectChip();

				if (PageAddress >= (DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS))
     4de:	80 e4       	ldi	r24, 0x40	; 64
     4e0:	20 30       	cpi	r18, 0x00	; 0
     4e2:	38 07       	cpc	r19, r24
     4e4:	58 f4       	brcc	.+22     	; 0x4fc <Dataflash_SelectChipFromPage+0x26>
				  return;

				if (PageAddress & 0x01)
     4e6:	20 ff       	sbrs	r18, 0
     4e8:	05 c0       	rjmp	.+10     	; 0x4f4 <Dataflash_SelectChipFromPage+0x1e>
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     4ea:	8e b1       	in	r24, 0x0e	; 14
     4ec:	8c 7f       	andi	r24, 0xFC	; 252
     4ee:	81 60       	ori	r24, 0x01	; 1
     4f0:	8e b9       	out	0x0e, r24	; 14
     4f2:	08 95       	ret
     4f4:	8e b1       	in	r24, 0x0e	; 14
     4f6:	8c 7f       	andi	r24, 0xFC	; 252
     4f8:	82 60       	ori	r24, 0x02	; 2
     4fa:	8e b9       	out	0x0e, r24	; 14
     4fc:	08 95       	ret

000004fe <Dataflash_ToggleSelectedChipCS>:
			 *  or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     4fe:	8e b1       	in	r24, 0x0e	; 14
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     500:	9e b1       	in	r25, 0x0e	; 14
     502:	93 60       	ori	r25, 0x03	; 3
     504:	9e b9       	out	0x0e, r25	; 14
     506:	9e b1       	in	r25, 0x0e	; 14
     508:	83 70       	andi	r24, 0x03	; 3
     50a:	9c 7f       	andi	r25, 0xFC	; 252
     50c:	89 2b       	or	r24, r25
     50e:	8e b9       	out	0x0e, r24	; 14
			{
				uint8_t SelectedChipMask = Dataflash_GetSelectedChip();

				Dataflash_DeselectChip();
				Dataflash_SelectChip(SelectedChipMask);
			}
     510:	08 95       	ret

00000512 <Dataflash_WaitWhileBusy>:
			/** Spin-loops while the currently selected dataflash is busy executing a command, such as a main
			 *  memory page program or main memory to buffer transfer.
			 */
			static inline void Dataflash_WaitWhileBusy(void)
			{
				Dataflash_ToggleSelectedChipCS();
     512:	f5 df       	rcall	.-22     	; 0x4fe <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     514:	87 ed       	ldi	r24, 0xD7	; 215
     516:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     518:	0d b4       	in	r0, 0x2d	; 45
     51a:	07 fe       	sbrs	r0, 7
     51c:	fd cf       	rjmp	.-6      	; 0x518 <Dataflash_WaitWhileBusy+0x6>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     51e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     520:	0d b4       	in	r0, 0x2d	; 45
     522:	07 fe       	sbrs	r0, 7
     524:	fd cf       	rjmp	.-6      	; 0x520 <Dataflash_WaitWhileBusy+0xe>
				Dataflash_SendByte(DF_CMD_GETSTATUS);
				while (!(Dataflash_ReceiveByte() & DF_STATUS_READY));
     526:	0e b4       	in	r0, 0x2e	; 46
     528:	07 fe       	sbrs	r0, 7
     52a:	f9 cf       	rjmp	.-14     	; 0x51e <Dataflash_WaitWhileBusy+0xc>
				Dataflash_ToggleSelectedChipCS();
			}
     52c:	e8 cf       	rjmp	.-48     	; 0x4fe <Dataflash_ToggleSelectedChipCS>

0000052e <Dataflash_SendAddressBytes>:
			 *  \param[in] BufferByte   Address within the dataflash's buffer
			 */
			static inline void Dataflash_SendAddressBytes(uint16_t PageAddress,
			                                              const uint16_t BufferByte)
			{
				PageAddress >>= 1;
     52e:	9c 01       	movw	r18, r24
     530:	36 95       	lsr	r19
     532:	27 95       	ror	r18

				Dataflash_SendByte(PageAddress >> 5);
     534:	36 e0       	ldi	r19, 0x06	; 6
     536:	96 95       	lsr	r25
     538:	87 95       	ror	r24
     53a:	3a 95       	dec	r19
     53c:	e1 f7       	brne	.-8      	; 0x536 <Dataflash_SendAddressBytes+0x8>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     53e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     540:	0d b4       	in	r0, 0x2d	; 45
     542:	07 fe       	sbrs	r0, 7
     544:	fd cf       	rjmp	.-6      	; 0x540 <Dataflash_SendAddressBytes+0x12>
				Dataflash_SendByte((PageAddress << 3) | (BufferByte >> 8));
     546:	82 2f       	mov	r24, r18
     548:	88 0f       	add	r24, r24
     54a:	88 0f       	add	r24, r24
     54c:	88 0f       	add	r24, r24
     54e:	87 2b       	or	r24, r23
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     550:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     552:	0d b4       	in	r0, 0x2d	; 45
     554:	07 fe       	sbrs	r0, 7
     556:	fd cf       	rjmp	.-6      	; 0x552 <Dataflash_SendAddressBytes+0x24>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     558:	6e bd       	out	0x2e, r22	; 46
				while (!(SPSR & (1 << SPIF)));
     55a:	0d b4       	in	r0, 0x2d	; 45
     55c:	07 fe       	sbrs	r0, 7
     55e:	fd cf       	rjmp	.-6      	; 0x55a <Dataflash_SendAddressBytes+0x2c>
				Dataflash_SendByte(BufferByte);
			}
     560:	08 95       	ret

00000562 <DataflashManager_ResetDataflashProtections>:
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     562:	8e b1       	in	r24, 0x0e	; 14
     564:	8c 7f       	andi	r24, 0xFC	; 252
     566:	82 60       	ori	r24, 0x02	; 2
     568:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     56a:	87 ed       	ldi	r24, 0xD7	; 215
     56c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     56e:	0d b4       	in	r0, 0x2d	; 45
     570:	07 fe       	sbrs	r0, 7
     572:	fd cf       	rjmp	.-6      	; 0x56e <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     574:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     576:	0d b4       	in	r0, 0x2d	; 45
     578:	07 fe       	sbrs	r0, 7
     57a:	fd cf       	rjmp	.-6      	; 0x576 <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     57c:	0e b4       	in	r0, 0x2e	; 46
     57e:	01 fe       	sbrs	r0, 1
     580:	15 c0       	rjmp	.+42     	; 0x5ac <DataflashManager_ResetDataflashProtections+0x4a>
	{
		Dataflash_ToggleSelectedChipCS();
     582:	bd df       	rcall	.-134    	; 0x4fe <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     584:	8d e3       	ldi	r24, 0x3D	; 61
     586:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     588:	0d b4       	in	r0, 0x2d	; 45
     58a:	07 fe       	sbrs	r0, 7
     58c:	fd cf       	rjmp	.-6      	; 0x588 <DataflashManager_ResetDataflashProtections+0x26>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     58e:	8a e2       	ldi	r24, 0x2A	; 42
     590:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     592:	0d b4       	in	r0, 0x2d	; 45
     594:	07 fe       	sbrs	r0, 7
     596:	fd cf       	rjmp	.-6      	; 0x592 <DataflashManager_ResetDataflashProtections+0x30>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     598:	8f e7       	ldi	r24, 0x7F	; 127
     59a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     59c:	0d b4       	in	r0, 0x2d	; 45
     59e:	07 fe       	sbrs	r0, 7
     5a0:	fd cf       	rjmp	.-6      	; 0x59c <DataflashManager_ResetDataflashProtections+0x3a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5a2:	8a e9       	ldi	r24, 0x9A	; 154
     5a4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     5a6:	0d b4       	in	r0, 0x2d	; 45
     5a8:	07 fe       	sbrs	r0, 7
     5aa:	fd cf       	rjmp	.-6      	; 0x5a6 <DataflashManager_ResetDataflashProtections+0x44>
     5ac:	8e b1       	in	r24, 0x0e	; 14
     5ae:	8c 7f       	andi	r24, 0xFC	; 252
     5b0:	81 60       	ori	r24, 0x01	; 1
     5b2:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5b4:	87 ed       	ldi	r24, 0xD7	; 215
     5b6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     5b8:	0d b4       	in	r0, 0x2d	; 45
     5ba:	07 fe       	sbrs	r0, 7
     5bc:	fd cf       	rjmp	.-6      	; 0x5b8 <DataflashManager_ResetDataflashProtections+0x56>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     5be:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5c0:	0d b4       	in	r0, 0x2d	; 45
     5c2:	07 fe       	sbrs	r0, 7
     5c4:	fd cf       	rjmp	.-6      	; 0x5c0 <DataflashManager_ResetDataflashProtections+0x5e>
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     5c6:	0e b4       	in	r0, 0x2e	; 46
     5c8:	01 fe       	sbrs	r0, 1
     5ca:	15 c0       	rjmp	.+42     	; 0x5f6 <DataflashManager_ResetDataflashProtections+0x94>
	{
		Dataflash_ToggleSelectedChipCS();
     5cc:	98 df       	rcall	.-208    	; 0x4fe <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5ce:	8d e3       	ldi	r24, 0x3D	; 61
     5d0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     5d2:	0d b4       	in	r0, 0x2d	; 45
     5d4:	07 fe       	sbrs	r0, 7
     5d6:	fd cf       	rjmp	.-6      	; 0x5d2 <DataflashManager_ResetDataflashProtections+0x70>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5d8:	8a e2       	ldi	r24, 0x2A	; 42
     5da:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     5dc:	0d b4       	in	r0, 0x2d	; 45
     5de:	07 fe       	sbrs	r0, 7
     5e0:	fd cf       	rjmp	.-6      	; 0x5dc <DataflashManager_ResetDataflashProtections+0x7a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5e2:	8f e7       	ldi	r24, 0x7F	; 127
     5e4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     5e6:	0d b4       	in	r0, 0x2d	; 45
     5e8:	07 fe       	sbrs	r0, 7
     5ea:	fd cf       	rjmp	.-6      	; 0x5e6 <DataflashManager_ResetDataflashProtections+0x84>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5ec:	8a e9       	ldi	r24, 0x9A	; 154
     5ee:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     5f0:	0d b4       	in	r0, 0x2d	; 45
     5f2:	07 fe       	sbrs	r0, 7
     5f4:	fd cf       	rjmp	.-6      	; 0x5f0 <DataflashManager_ResetDataflashProtections+0x8e>
     5f6:	8e b1       	in	r24, 0x0e	; 14
     5f8:	83 60       	ori	r24, 0x03	; 3
     5fa:	8e b9       	out	0x0e, r24	; 14
	}
	#endif

	/* Deselect current Dataflash chip */
	Dataflash_DeselectChip();
}
     5fc:	08 95       	ret

000005fe <DataflashManager_CheckDataflashOperation>:
     5fe:	8e b1       	in	r24, 0x0e	; 14
     600:	8c 7f       	andi	r24, 0xFC	; 252
     602:	82 60       	ori	r24, 0x02	; 2
     604:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     606:	8f e9       	ldi	r24, 0x9F	; 159
     608:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     60a:	0d b4       	in	r0, 0x2d	; 45
     60c:	07 fe       	sbrs	r0, 7
     60e:	fd cf       	rjmp	.-6      	; 0x60a <DataflashManager_CheckDataflashOperation+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     610:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     612:	0d b4       	in	r0, 0x2d	; 45
     614:	07 fe       	sbrs	r0, 7
     616:	fd cf       	rjmp	.-6      	; 0x612 <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     618:	9e b5       	in	r25, 0x2e	; 46
     61a:	8e b1       	in	r24, 0x0e	; 14
     61c:	83 60       	ori	r24, 0x03	; 3
     61e:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     620:	9f 31       	cpi	r25, 0x1F	; 31
     622:	11 f0       	breq	.+4      	; 0x628 <DataflashManager_CheckDataflashOperation+0x2a>
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	08 95       	ret
     628:	8e b1       	in	r24, 0x0e	; 14
     62a:	8c 7f       	andi	r24, 0xFC	; 252
     62c:	81 60       	ori	r24, 0x01	; 1
     62e:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     630:	8f e9       	ldi	r24, 0x9F	; 159
     632:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     634:	0d b4       	in	r0, 0x2d	; 45
     636:	07 fe       	sbrs	r0, 7
     638:	fd cf       	rjmp	.-6      	; 0x634 <DataflashManager_CheckDataflashOperation+0x36>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     63a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     63c:	0d b4       	in	r0, 0x2d	; 45
     63e:	07 fe       	sbrs	r0, 7
     640:	fd cf       	rjmp	.-6      	; 0x63c <DataflashManager_CheckDataflashOperation+0x3e>
				return SPDR;
     642:	9e b5       	in	r25, 0x2e	; 46
     644:	8e b1       	in	r24, 0x0e	; 14
     646:	83 60       	ori	r24, 0x03	; 3
     648:	8e b9       	out	0x0e, r24	; 14
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	9f 31       	cpi	r25, 0x1F	; 31
     64e:	09 f4       	brne	.+2      	; 0x652 <DataflashManager_CheckDataflashOperation+0x54>
     650:	81 e0       	ldi	r24, 0x01	; 1
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     652:	08 95       	ret

00000654 <DataflashManager_ReadBlocks>:
 *  \param[in] BlockAddress  Data block starting address for the read sequence
 *  \param[in] TotalBlocks   Number of blocks of data to read
 */
void DataflashManager_ReadBlocks(const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
     654:	cf 92       	push	r12
     656:	df 92       	push	r13
     658:	ef 92       	push	r14
     65a:	ff 92       	push	r15
     65c:	0f 93       	push	r16
     65e:	1f 93       	push	r17
     660:	df 93       	push	r29
     662:	cf 93       	push	r28
     664:	0f 92       	push	r0
     666:	cd b7       	in	r28, 0x3d	; 61
     668:	de b7       	in	r29, 0x3e	; 62
     66a:	7a 01       	movw	r14, r20
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     66c:	f9 e0       	ldi	r31, 0x09	; 9
     66e:	66 0f       	add	r22, r22
     670:	77 1f       	adc	r23, r23
     672:	88 1f       	adc	r24, r24
     674:	99 1f       	adc	r25, r25
     676:	fa 95       	dec	r31
     678:	d1 f7       	brne	.-12     	; 0x66e <DataflashManager_ReadBlocks+0x1a>
     67a:	9b 01       	movw	r18, r22
     67c:	ac 01       	movw	r20, r24
     67e:	ea e0       	ldi	r30, 0x0A	; 10
     680:	56 95       	lsr	r21
     682:	47 95       	ror	r20
     684:	37 95       	ror	r19
     686:	27 95       	ror	r18
     688:	ea 95       	dec	r30
     68a:	d1 f7       	brne	.-12     	; 0x680 <DataflashManager_ReadBlocks+0x2c>
     68c:	89 01       	movw	r16, r18
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     68e:	4f ef       	ldi	r20, 0xFF	; 255
     690:	c4 2e       	mov	r12, r20
     692:	43 e0       	ldi	r20, 0x03	; 3
     694:	d4 2e       	mov	r13, r20
     696:	c6 22       	and	r12, r22
     698:	d7 22       	and	r13, r23
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     69a:	c9 01       	movw	r24, r18
     69c:	1c df       	rcall	.-456    	; 0x4d6 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     69e:	82 ed       	ldi	r24, 0xD2	; 210
     6a0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     6a2:	0d b4       	in	r0, 0x2d	; 45
     6a4:	07 fe       	sbrs	r0, 7
     6a6:	fd cf       	rjmp	.-6      	; 0x6a2 <DataflashManager_ReadBlocks+0x4e>

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     6a8:	c8 01       	movw	r24, r16
     6aa:	b6 01       	movw	r22, r12
     6ac:	40 df       	rcall	.-384    	; 0x52e <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6ae:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6b0:	0d b4       	in	r0, 0x2d	; 45
     6b2:	07 fe       	sbrs	r0, 7
     6b4:	fd cf       	rjmp	.-6      	; 0x6b0 <DataflashManager_ReadBlocks+0x5c>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6b6:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6b8:	0d b4       	in	r0, 0x2d	; 45
     6ba:	07 fe       	sbrs	r0, 7
     6bc:	fd cf       	rjmp	.-6      	; 0x6b8 <DataflashManager_ReadBlocks+0x64>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6be:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6c0:	0d b4       	in	r0, 0x2d	; 45
     6c2:	07 fe       	sbrs	r0, 7
     6c4:	fd cf       	rjmp	.-6      	; 0x6c0 <DataflashManager_ReadBlocks+0x6c>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6c6:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6c8:	0d b4       	in	r0, 0x2d	; 45
     6ca:	07 fe       	sbrs	r0, 7
     6cc:	fd cf       	rjmp	.-6      	; 0x6c8 <DataflashManager_ReadBlocks+0x74>
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     6ce:	c3 d3       	rcall	.+1926   	; 0xe56 <Endpoint_WaitUntilReady>
     6d0:	88 23       	and	r24, r24
     6d2:	09 f0       	breq	.+2      	; 0x6d6 <DataflashManager_ReadBlocks+0x82>
     6d4:	c5 c0       	rjmp	.+394    	; 0x860 <DataflashManager_ReadBlocks+0x20c>
void DataflashManager_ReadBlocks(const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     6d6:	94 e0       	ldi	r25, 0x04	; 4
     6d8:	d6 94       	lsr	r13
     6da:	c7 94       	ror	r12
     6dc:	9a 95       	dec	r25
     6de:	e1 f7       	brne	.-8      	; 0x6d8 <DataflashManager_ReadBlocks+0x84>
     6e0:	9c 2d       	mov	r25, r12
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6e2:	82 ed       	ldi	r24, 0xD2	; 210
     6e4:	c8 2e       	mov	r12, r24
     6e6:	ac c0       	rjmp	.+344    	; 0x840 <DataflashManager_ReadBlocks+0x1ec>
     6e8:	dd 24       	eor	r13, r13
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     6ea:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently full */
			if (!(Endpoint_IsReadWriteAllowed()))
     6ee:	85 fd       	sbrc	r24, 5
     6f0:	0b c0       	rjmp	.+22     	; 0x708 <DataflashManager_ReadBlocks+0xb4>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     6f2:	80 91 e8 00 	lds	r24, 0x00E8
     6f6:	8e 77       	andi	r24, 0x7E	; 126
     6f8:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the endpoint bank to send its contents to the host */
				Endpoint_ClearIN();

				/* Wait until the endpoint is ready for more data */
				if (Endpoint_WaitUntilReady())
     6fc:	99 83       	std	Y+1, r25	; 0x01
     6fe:	ab d3       	rcall	.+1878   	; 0xe56 <Endpoint_WaitUntilReady>
     700:	99 81       	ldd	r25, Y+1	; 0x01
     702:	88 23       	and	r24, r24
     704:	09 f0       	breq	.+2      	; 0x708 <DataflashManager_ReadBlocks+0xb4>
     706:	ac c0       	rjmp	.+344    	; 0x860 <DataflashManager_ReadBlocks+0x20c>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     708:	90 34       	cpi	r25, 0x40	; 64
     70a:	e9 f4       	brne	.+58     	; 0x746 <DataflashManager_ReadBlocks+0xf2>
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     70c:	0f 5f       	subi	r16, 0xFF	; 255
     70e:	1f 4f       	sbci	r17, 0xFF	; 255

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     710:	c8 01       	movw	r24, r16
     712:	e1 de       	rcall	.-574    	; 0x4d6 <Dataflash_SelectChipFromPage>
     714:	ce bc       	out	0x2e, r12	; 46
				while (!(SPSR & (1 << SPIF)));
     716:	0d b4       	in	r0, 0x2d	; 45
     718:	07 fe       	sbrs	r0, 7
     71a:	fd cf       	rjmp	.-6      	; 0x716 <DataflashManager_ReadBlocks+0xc2>

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     71c:	c8 01       	movw	r24, r16
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	05 df       	rcall	.-502    	; 0x52e <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     724:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     726:	0d b4       	in	r0, 0x2d	; 45
     728:	07 fe       	sbrs	r0, 7
     72a:	fd cf       	rjmp	.-6      	; 0x726 <DataflashManager_ReadBlocks+0xd2>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     72c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     72e:	0d b4       	in	r0, 0x2d	; 45
     730:	07 fe       	sbrs	r0, 7
     732:	fd cf       	rjmp	.-6      	; 0x72e <DataflashManager_ReadBlocks+0xda>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     734:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     736:	0d b4       	in	r0, 0x2d	; 45
     738:	07 fe       	sbrs	r0, 7
     73a:	fd cf       	rjmp	.-6      	; 0x736 <DataflashManager_ReadBlocks+0xe2>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     73c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     73e:	0d b4       	in	r0, 0x2d	; 45
     740:	07 fe       	sbrs	r0, 7
     742:	fd cf       	rjmp	.-6      	; 0x73e <DataflashManager_ReadBlocks+0xea>
     744:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     746:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     748:	0d b4       	in	r0, 0x2d	; 45
     74a:	07 fe       	sbrs	r0, 7
     74c:	fd cf       	rjmp	.-6      	; 0x748 <DataflashManager_ReadBlocks+0xf4>
				return SPDR;
     74e:	8e b5       	in	r24, 0x2e	; 46
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     750:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     754:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     756:	0d b4       	in	r0, 0x2d	; 45
     758:	07 fe       	sbrs	r0, 7
     75a:	fd cf       	rjmp	.-6      	; 0x756 <DataflashManager_ReadBlocks+0x102>
				return SPDR;
     75c:	8e b5       	in	r24, 0x2e	; 46
     75e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     762:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     764:	0d b4       	in	r0, 0x2d	; 45
     766:	07 fe       	sbrs	r0, 7
     768:	fd cf       	rjmp	.-6      	; 0x764 <DataflashManager_ReadBlocks+0x110>
				return SPDR;
     76a:	8e b5       	in	r24, 0x2e	; 46
     76c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     770:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     772:	0d b4       	in	r0, 0x2d	; 45
     774:	07 fe       	sbrs	r0, 7
     776:	fd cf       	rjmp	.-6      	; 0x772 <DataflashManager_ReadBlocks+0x11e>
				return SPDR;
     778:	8e b5       	in	r24, 0x2e	; 46
     77a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     77e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     780:	0d b4       	in	r0, 0x2d	; 45
     782:	07 fe       	sbrs	r0, 7
     784:	fd cf       	rjmp	.-6      	; 0x780 <DataflashManager_ReadBlocks+0x12c>
				return SPDR;
     786:	8e b5       	in	r24, 0x2e	; 46
     788:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     78c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     78e:	0d b4       	in	r0, 0x2d	; 45
     790:	07 fe       	sbrs	r0, 7
     792:	fd cf       	rjmp	.-6      	; 0x78e <DataflashManager_ReadBlocks+0x13a>
				return SPDR;
     794:	8e b5       	in	r24, 0x2e	; 46
     796:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     79a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     79c:	0d b4       	in	r0, 0x2d	; 45
     79e:	07 fe       	sbrs	r0, 7
     7a0:	fd cf       	rjmp	.-6      	; 0x79c <DataflashManager_ReadBlocks+0x148>
				return SPDR;
     7a2:	8e b5       	in	r24, 0x2e	; 46
     7a4:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     7a8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7aa:	0d b4       	in	r0, 0x2d	; 45
     7ac:	07 fe       	sbrs	r0, 7
     7ae:	fd cf       	rjmp	.-6      	; 0x7aa <DataflashManager_ReadBlocks+0x156>
				return SPDR;
     7b0:	8e b5       	in	r24, 0x2e	; 46
     7b2:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     7b6:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7b8:	0d b4       	in	r0, 0x2d	; 45
     7ba:	07 fe       	sbrs	r0, 7
     7bc:	fd cf       	rjmp	.-6      	; 0x7b8 <DataflashManager_ReadBlocks+0x164>
				return SPDR;
     7be:	8e b5       	in	r24, 0x2e	; 46
     7c0:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     7c4:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7c6:	0d b4       	in	r0, 0x2d	; 45
     7c8:	07 fe       	sbrs	r0, 7
     7ca:	fd cf       	rjmp	.-6      	; 0x7c6 <DataflashManager_ReadBlocks+0x172>
				return SPDR;
     7cc:	8e b5       	in	r24, 0x2e	; 46
     7ce:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     7d2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7d4:	0d b4       	in	r0, 0x2d	; 45
     7d6:	07 fe       	sbrs	r0, 7
     7d8:	fd cf       	rjmp	.-6      	; 0x7d4 <DataflashManager_ReadBlocks+0x180>
				return SPDR;
     7da:	8e b5       	in	r24, 0x2e	; 46
     7dc:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     7e0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7e2:	0d b4       	in	r0, 0x2d	; 45
     7e4:	07 fe       	sbrs	r0, 7
     7e6:	fd cf       	rjmp	.-6      	; 0x7e2 <DataflashManager_ReadBlocks+0x18e>
				return SPDR;
     7e8:	8e b5       	in	r24, 0x2e	; 46
     7ea:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     7ee:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7f0:	0d b4       	in	r0, 0x2d	; 45
     7f2:	07 fe       	sbrs	r0, 7
     7f4:	fd cf       	rjmp	.-6      	; 0x7f0 <DataflashManager_ReadBlocks+0x19c>
				return SPDR;
     7f6:	8e b5       	in	r24, 0x2e	; 46
     7f8:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     7fc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7fe:	0d b4       	in	r0, 0x2d	; 45
     800:	07 fe       	sbrs	r0, 7
     802:	fd cf       	rjmp	.-6      	; 0x7fe <DataflashManager_ReadBlocks+0x1aa>
				return SPDR;
     804:	8e b5       	in	r24, 0x2e	; 46
     806:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     80a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     80c:	0d b4       	in	r0, 0x2d	; 45
     80e:	07 fe       	sbrs	r0, 7
     810:	fd cf       	rjmp	.-6      	; 0x80c <DataflashManager_ReadBlocks+0x1b8>
				return SPDR;
     812:	8e b5       	in	r24, 0x2e	; 46
     814:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     818:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     81a:	0d b4       	in	r0, 0x2d	; 45
     81c:	07 fe       	sbrs	r0, 7
     81e:	fd cf       	rjmp	.-6      	; 0x81a <DataflashManager_ReadBlocks+0x1c6>
				return SPDR;
     820:	8e b5       	in	r24, 0x2e	; 46
     822:	80 93 f1 00 	sts	0x00F1, r24

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (IsMassStoreReset)
     826:	80 91 44 01 	lds	r24, 0x0144
     82a:	88 23       	and	r24, r24
     82c:	c9 f4       	brne	.+50     	; 0x860 <DataflashManager_ReadBlocks+0x20c>
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     82e:	9f 5f       	subi	r25, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     830:	d3 94       	inc	r13
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     832:	80 e2       	ldi	r24, 0x20	; 32
     834:	d8 16       	cp	r13, r24
     836:	09 f0       	breq	.+2      	; 0x83a <DataflashManager_ReadBlocks+0x1e6>
     838:	58 cf       	rjmp	.-336    	; 0x6ea <DataflashManager_ReadBlocks+0x96>
			if (IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     83a:	08 94       	sec
     83c:	e1 08       	sbc	r14, r1
     83e:	f1 08       	sbc	r15, r1

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     840:	e1 14       	cp	r14, r1
     842:	f1 04       	cpc	r15, r1
     844:	09 f0       	breq	.+2      	; 0x848 <DataflashManager_ReadBlocks+0x1f4>
     846:	50 cf       	rjmp	.-352    	; 0x6e8 <DataflashManager_ReadBlocks+0x94>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     848:	80 91 e8 00 	lds	r24, 0x00E8
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     84c:	85 fd       	sbrc	r24, 5
     84e:	05 c0       	rjmp	.+10     	; 0x85a <DataflashManager_ReadBlocks+0x206>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     850:	80 91 e8 00 	lds	r24, 0x00E8
     854:	8e 77       	andi	r24, 0x7E	; 126
     856:	80 93 e8 00 	sts	0x00E8, r24
     85a:	8e b1       	in	r24, 0x0e	; 14
     85c:	83 60       	ori	r24, 0x03	; 3
     85e:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearIN();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     860:	0f 90       	pop	r0
     862:	cf 91       	pop	r28
     864:	df 91       	pop	r29
     866:	1f 91       	pop	r17
     868:	0f 91       	pop	r16
     86a:	ff 90       	pop	r15
     86c:	ef 90       	pop	r14
     86e:	df 90       	pop	r13
     870:	cf 90       	pop	r12
     872:	08 95       	ret

00000874 <DataflashManager_WriteBlocks>:
 *  \param[in] BlockAddress  Data block starting address for the write sequence
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
     874:	af 92       	push	r10
     876:	bf 92       	push	r11
     878:	cf 92       	push	r12
     87a:	df 92       	push	r13
     87c:	ef 92       	push	r14
     87e:	ff 92       	push	r15
     880:	0f 93       	push	r16
     882:	1f 93       	push	r17
     884:	df 93       	push	r29
     886:	cf 93       	push	r28
     888:	0f 92       	push	r0
     88a:	cd b7       	in	r28, 0x3d	; 61
     88c:	de b7       	in	r29, 0x3e	; 62
     88e:	7a 01       	movw	r14, r20
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     890:	29 e0       	ldi	r18, 0x09	; 9
     892:	66 0f       	add	r22, r22
     894:	77 1f       	adc	r23, r23
     896:	88 1f       	adc	r24, r24
     898:	99 1f       	adc	r25, r25
     89a:	2a 95       	dec	r18
     89c:	d1 f7       	brne	.-12     	; 0x892 <DataflashManager_WriteBlocks+0x1e>
     89e:	9b 01       	movw	r18, r22
     8a0:	ac 01       	movw	r20, r24
     8a2:	9a e0       	ldi	r25, 0x0A	; 10
     8a4:	56 95       	lsr	r21
     8a6:	47 95       	ror	r20
     8a8:	37 95       	ror	r19
     8aa:	27 95       	ror	r18
     8ac:	9a 95       	dec	r25
     8ae:	d1 f7       	brne	.-12     	; 0x8a4 <DataflashManager_WriteBlocks+0x30>
     8b0:	89 01       	movw	r16, r18
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     8b2:	8f ef       	ldi	r24, 0xFF	; 255
     8b4:	c8 2e       	mov	r12, r24
     8b6:	83 e0       	ldi	r24, 0x03	; 3
     8b8:	d8 2e       	mov	r13, r24
     8ba:	c6 22       	and	r12, r22
     8bc:	d7 22       	and	r13, r23
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     8be:	c9 01       	movw	r24, r18
     8c0:	0a de       	rcall	.-1004   	; 0x4d6 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8c2:	83 e5       	ldi	r24, 0x53	; 83
     8c4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8c6:	0d b4       	in	r0, 0x2d	; 45
     8c8:	07 fe       	sbrs	r0, 7
     8ca:	fd cf       	rjmp	.-6      	; 0x8c6 <DataflashManager_WriteBlocks+0x52>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
	/* Copy selected dataflash's current page contents to the Dataflash buffer */
	Dataflash_SendByte(DF_CMD_MAINMEMTOBUFF1);
	Dataflash_SendAddressBytes(CurrDFPage, 0);
     8cc:	c8 01       	movw	r24, r16
     8ce:	60 e0       	ldi	r22, 0x00	; 0
     8d0:	70 e0       	ldi	r23, 0x00	; 0
     8d2:	2d de       	rcall	.-934    	; 0x52e <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     8d4:	1e de       	rcall	.-964    	; 0x512 <Dataflash_WaitWhileBusy>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8d6:	84 e8       	ldi	r24, 0x84	; 132
     8d8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8da:	0d b4       	in	r0, 0x2d	; 45
     8dc:	07 fe       	sbrs	r0, 7
     8de:	fd cf       	rjmp	.-6      	; 0x8da <DataflashManager_WriteBlocks+0x66>
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	b6 01       	movw	r22, r12
     8e6:	23 de       	rcall	.-954    	; 0x52e <Dataflash_SendAddressBytes>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     8e8:	b6 d2       	rcall	.+1388   	; 0xe56 <Endpoint_WaitUntilReady>
     8ea:	88 23       	and	r24, r24
     8ec:	09 f0       	breq	.+2      	; 0x8f0 <DataflashManager_WriteBlocks+0x7c>
     8ee:	ea c0       	rjmp	.+468    	; 0xac4 <DataflashManager_WriteBlocks+0x250>
void DataflashManager_WriteBlocks(const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     8f0:	b4 e0       	ldi	r27, 0x04	; 4
     8f2:	d6 94       	lsr	r13
     8f4:	c7 94       	ror	r12
     8f6:	ba 95       	dec	r27
     8f8:	e1 f7       	brne	.-8      	; 0x8f2 <DataflashManager_WriteBlocks+0x7e>
     8fa:	9c 2d       	mov	r25, r12
     8fc:	57 01       	movw	r10, r14
     8fe:	a5 e0       	ldi	r26, 0x05	; 5
     900:	aa 0c       	add	r10, r10
     902:	bb 1c       	adc	r11, r11
     904:	aa 95       	dec	r26
     906:	e1 f7       	brne	.-8      	; 0x900 <DataflashManager_WriteBlocks+0x8c>
     908:	dd 24       	eor	r13, r13
     90a:	bd c0       	rjmp	.+378    	; 0xa86 <DataflashManager_WriteBlocks+0x212>
     90c:	cc 24       	eor	r12, r12
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     90e:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently empty */
			if (!(Endpoint_IsReadWriteAllowed()))
     912:	85 fd       	sbrc	r24, 5
     914:	0b c0       	rjmp	.+22     	; 0x92c <DataflashManager_WriteBlocks+0xb8>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     916:	80 91 e8 00 	lds	r24, 0x00E8
     91a:	8b 77       	andi	r24, 0x7B	; 123
     91c:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the current endpoint bank */
				Endpoint_ClearOUT();

				/* Wait until the host has sent another packet */
				if (Endpoint_WaitUntilReady())
     920:	99 83       	std	Y+1, r25	; 0x01
     922:	99 d2       	rcall	.+1330   	; 0xe56 <Endpoint_WaitUntilReady>
     924:	99 81       	ldd	r25, Y+1	; 0x01
     926:	88 23       	and	r24, r24
     928:	09 f0       	breq	.+2      	; 0x92c <DataflashManager_WriteBlocks+0xb8>
     92a:	cc c0       	rjmp	.+408    	; 0xac4 <DataflashManager_WriteBlocks+0x250>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     92c:	90 34       	cpi	r25, 0x40	; 64
     92e:	09 f0       	breq	.+2      	; 0x932 <DataflashManager_WriteBlocks+0xbe>
     930:	39 c0       	rjmp	.+114    	; 0x9a4 <DataflashManager_WriteBlocks+0x130>
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
     932:	ef dd       	rcall	.-1058   	; 0x512 <Dataflash_WaitWhileBusy>
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     934:	dd 20       	and	r13, r13
     936:	11 f4       	brne	.+4      	; 0x93c <DataflashManager_WriteBlocks+0xc8>
     938:	83 e8       	ldi	r24, 0x83	; 131
     93a:	01 c0       	rjmp	.+2      	; 0x93e <DataflashManager_WriteBlocks+0xca>
     93c:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     93e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     940:	0d b4       	in	r0, 0x2d	; 45
     942:	07 fe       	sbrs	r0, 7
     944:	fd cf       	rjmp	.-6      	; 0x940 <DataflashManager_WriteBlocks+0xcc>
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     946:	c8 01       	movw	r24, r16
     948:	60 e0       	ldi	r22, 0x00	; 0
     94a:	70 e0       	ldi	r23, 0x00	; 0
     94c:	f0 dd       	rcall	.-1056   	; 0x52e <Dataflash_SendAddressBytes>

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     94e:	0f 5f       	subi	r16, 0xFF	; 255
     950:	1f 4f       	sbci	r17, 0xFF	; 255
			 *  or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     952:	8e b1       	in	r24, 0x0e	; 14

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     954:	83 70       	andi	r24, 0x03	; 3
     956:	81 30       	cpi	r24, 0x01	; 1
     958:	09 f4       	brne	.+2      	; 0x95c <DataflashManager_WriteBlocks+0xe8>
				  UsingSecondBuffer = !(UsingSecondBuffer);
     95a:	d8 26       	eor	r13, r24

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     95c:	c8 01       	movw	r24, r16
     95e:	bb dd       	rcall	.-1162   	; 0x4d6 <Dataflash_SelectChipFromPage>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     960:	20 e4       	ldi	r18, 0x40	; 64
     962:	a2 16       	cp	r10, r18
     964:	b1 04       	cpc	r11, r1
     966:	78 f4       	brcc	.+30     	; 0x986 <DataflashManager_WriteBlocks+0x112>
				{
					/* Copy selected dataflash's current page contents to the Dataflash buffer */
					Dataflash_WaitWhileBusy();
     968:	d4 dd       	rcall	.-1112   	; 0x512 <Dataflash_WaitWhileBusy>
					Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_MAINMEMTOBUFF2 : DF_CMD_MAINMEMTOBUFF1);
     96a:	dd 20       	and	r13, r13
     96c:	11 f4       	brne	.+4      	; 0x972 <DataflashManager_WriteBlocks+0xfe>
     96e:	83 e5       	ldi	r24, 0x53	; 83
     970:	01 c0       	rjmp	.+2      	; 0x974 <DataflashManager_WriteBlocks+0x100>
     972:	85 e5       	ldi	r24, 0x55	; 85
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     974:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     976:	0d b4       	in	r0, 0x2d	; 45
     978:	07 fe       	sbrs	r0, 7
     97a:	fd cf       	rjmp	.-6      	; 0x976 <DataflashManager_WriteBlocks+0x102>
					Dataflash_SendAddressBytes(CurrDFPage, 0);
     97c:	c8 01       	movw	r24, r16
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	d5 dd       	rcall	.-1110   	; 0x52e <Dataflash_SendAddressBytes>
					Dataflash_WaitWhileBusy();
     984:	c6 dd       	rcall	.-1140   	; 0x512 <Dataflash_WaitWhileBusy>
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
     986:	dd 20       	and	r13, r13
     988:	11 f4       	brne	.+4      	; 0x98e <DataflashManager_WriteBlocks+0x11a>
     98a:	84 e8       	ldi	r24, 0x84	; 132
     98c:	01 c0       	rjmp	.+2      	; 0x990 <DataflashManager_WriteBlocks+0x11c>
     98e:	87 e8       	ldi	r24, 0x87	; 135
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     990:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     992:	0d b4       	in	r0, 0x2d	; 45
     994:	07 fe       	sbrs	r0, 7
     996:	fd cf       	rjmp	.-6      	; 0x992 <DataflashManager_WriteBlocks+0x11e>
				Dataflash_SendAddressBytes(0, 0);
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	60 e0       	ldi	r22, 0x00	; 0
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	c6 dd       	rcall	.-1140   	; 0x52e <Dataflash_SendAddressBytes>
     9a2:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     9a4:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9a8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9aa:	0d b4       	in	r0, 0x2d	; 45
     9ac:	07 fe       	sbrs	r0, 7
     9ae:	fd cf       	rjmp	.-6      	; 0x9aa <DataflashManager_WriteBlocks+0x136>
     9b0:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9b4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9b6:	0d b4       	in	r0, 0x2d	; 45
     9b8:	07 fe       	sbrs	r0, 7
     9ba:	fd cf       	rjmp	.-6      	; 0x9b6 <DataflashManager_WriteBlocks+0x142>
     9bc:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9c0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9c2:	0d b4       	in	r0, 0x2d	; 45
     9c4:	07 fe       	sbrs	r0, 7
     9c6:	fd cf       	rjmp	.-6      	; 0x9c2 <DataflashManager_WriteBlocks+0x14e>
     9c8:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9cc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9ce:	0d b4       	in	r0, 0x2d	; 45
     9d0:	07 fe       	sbrs	r0, 7
     9d2:	fd cf       	rjmp	.-6      	; 0x9ce <DataflashManager_WriteBlocks+0x15a>
     9d4:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9d8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9da:	0d b4       	in	r0, 0x2d	; 45
     9dc:	07 fe       	sbrs	r0, 7
     9de:	fd cf       	rjmp	.-6      	; 0x9da <DataflashManager_WriteBlocks+0x166>
     9e0:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9e4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9e6:	0d b4       	in	r0, 0x2d	; 45
     9e8:	07 fe       	sbrs	r0, 7
     9ea:	fd cf       	rjmp	.-6      	; 0x9e6 <DataflashManager_WriteBlocks+0x172>
     9ec:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9f0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9f2:	0d b4       	in	r0, 0x2d	; 45
     9f4:	07 fe       	sbrs	r0, 7
     9f6:	fd cf       	rjmp	.-6      	; 0x9f2 <DataflashManager_WriteBlocks+0x17e>
     9f8:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9fc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9fe:	0d b4       	in	r0, 0x2d	; 45
     a00:	07 fe       	sbrs	r0, 7
     a02:	fd cf       	rjmp	.-6      	; 0x9fe <DataflashManager_WriteBlocks+0x18a>
     a04:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a08:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a0a:	0d b4       	in	r0, 0x2d	; 45
     a0c:	07 fe       	sbrs	r0, 7
     a0e:	fd cf       	rjmp	.-6      	; 0xa0a <DataflashManager_WriteBlocks+0x196>
     a10:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a14:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a16:	0d b4       	in	r0, 0x2d	; 45
     a18:	07 fe       	sbrs	r0, 7
     a1a:	fd cf       	rjmp	.-6      	; 0xa16 <DataflashManager_WriteBlocks+0x1a2>
     a1c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a20:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a22:	0d b4       	in	r0, 0x2d	; 45
     a24:	07 fe       	sbrs	r0, 7
     a26:	fd cf       	rjmp	.-6      	; 0xa22 <DataflashManager_WriteBlocks+0x1ae>
     a28:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a2c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a2e:	0d b4       	in	r0, 0x2d	; 45
     a30:	07 fe       	sbrs	r0, 7
     a32:	fd cf       	rjmp	.-6      	; 0xa2e <DataflashManager_WriteBlocks+0x1ba>
     a34:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a38:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a3a:	0d b4       	in	r0, 0x2d	; 45
     a3c:	07 fe       	sbrs	r0, 7
     a3e:	fd cf       	rjmp	.-6      	; 0xa3a <DataflashManager_WriteBlocks+0x1c6>
     a40:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a44:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a46:	0d b4       	in	r0, 0x2d	; 45
     a48:	07 fe       	sbrs	r0, 7
     a4a:	fd cf       	rjmp	.-6      	; 0xa46 <DataflashManager_WriteBlocks+0x1d2>
     a4c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a50:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a52:	0d b4       	in	r0, 0x2d	; 45
     a54:	07 fe       	sbrs	r0, 7
     a56:	fd cf       	rjmp	.-6      	; 0xa52 <DataflashManager_WriteBlocks+0x1de>
     a58:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a5c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a5e:	0d b4       	in	r0, 0x2d	; 45
     a60:	07 fe       	sbrs	r0, 7
     a62:	fd cf       	rjmp	.-6      	; 0xa5e <DataflashManager_WriteBlocks+0x1ea>

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (IsMassStoreReset)
     a64:	80 91 44 01 	lds	r24, 0x0144
     a68:	88 23       	and	r24, r24
     a6a:	61 f5       	brne	.+88     	; 0xac4 <DataflashManager_WriteBlocks+0x250>
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     a6c:	9f 5f       	subi	r25, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     a6e:	c3 94       	inc	r12
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     a70:	30 e2       	ldi	r19, 0x20	; 32
     a72:	c3 16       	cp	r12, r19
     a74:	09 f0       	breq	.+2      	; 0xa78 <DataflashManager_WriteBlocks+0x204>
     a76:	4b cf       	rjmp	.-362    	; 0x90e <DataflashManager_WriteBlocks+0x9a>
			if (IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     a78:	08 94       	sec
     a7a:	e1 08       	sbc	r14, r1
     a7c:	f1 08       	sbc	r15, r1
     a7e:	e0 ee       	ldi	r30, 0xE0	; 224
     a80:	ff ef       	ldi	r31, 0xFF	; 255
     a82:	ae 0e       	add	r10, r30
     a84:	bf 1e       	adc	r11, r31

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     a86:	e1 14       	cp	r14, r1
     a88:	f1 04       	cpc	r15, r1
     a8a:	09 f0       	breq	.+2      	; 0xa8e <DataflashManager_WriteBlocks+0x21a>
     a8c:	3f cf       	rjmp	.-386    	; 0x90c <DataflashManager_WriteBlocks+0x98>
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
     a8e:	41 dd       	rcall	.-1406   	; 0x512 <Dataflash_WaitWhileBusy>
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     a90:	dd 20       	and	r13, r13
     a92:	11 f4       	brne	.+4      	; 0xa98 <DataflashManager_WriteBlocks+0x224>
     a94:	83 e8       	ldi	r24, 0x83	; 131
     a96:	01 c0       	rjmp	.+2      	; 0xa9a <DataflashManager_WriteBlocks+0x226>
     a98:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a9a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a9c:	0d b4       	in	r0, 0x2d	; 45
     a9e:	07 fe       	sbrs	r0, 7
     aa0:	fd cf       	rjmp	.-6      	; 0xa9c <DataflashManager_WriteBlocks+0x228>
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
     aa2:	c8 01       	movw	r24, r16
     aa4:	60 e0       	ldi	r22, 0x00	; 0
     aa6:	70 e0       	ldi	r23, 0x00	; 0
     aa8:	42 dd       	rcall	.-1404   	; 0x52e <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     aaa:	33 dd       	rcall	.-1434   	; 0x512 <Dataflash_WaitWhileBusy>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     aac:	80 91 e8 00 	lds	r24, 0x00E8

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     ab0:	85 fd       	sbrc	r24, 5
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <DataflashManager_WriteBlocks+0x24a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ab4:	80 91 e8 00 	lds	r24, 0x00E8
     ab8:	8b 77       	andi	r24, 0x7B	; 123
     aba:	80 93 e8 00 	sts	0x00E8, r24
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     abe:	8e b1       	in	r24, 0x0e	; 14
     ac0:	83 60       	ori	r24, 0x03	; 3
     ac2:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearOUT();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     ac4:	0f 90       	pop	r0
     ac6:	cf 91       	pop	r28
     ac8:	df 91       	pop	r29
     aca:	1f 91       	pop	r17
     acc:	0f 91       	pop	r16
     ace:	ff 90       	pop	r15
     ad0:	ef 90       	pop	r14
     ad2:	df 90       	pop	r13
     ad4:	cf 90       	pop	r12
     ad6:	bf 90       	pop	r11
     ad8:	af 90       	pop	r10
     ada:	08 95       	ret

00000adc <SCSI_Command_ReadWrite_10>:
 *  \param[in] IsDataRead  Indicates if the command is a READ (10) command or WRITE (10) command (DATA_READ or DATA_WRITE)
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(const bool IsDataRead)
{
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	28 2f       	mov	r18, r24

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     ae2:	60 91 59 01 	lds	r22, 0x0159
     ae6:	70 91 58 01 	lds	r23, 0x0158
     aea:	80 91 57 01 	lds	r24, 0x0157
     aee:	90 91 56 01 	lds	r25, 0x0156

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     af2:	c0 91 5c 01 	lds	r28, 0x015C
     af6:	d0 91 5b 01 	lds	r29, 0x015B

	BlockAddress = SwapEndian_32(*(uint32_t*)&CommandBlock.SCSICommandData[2]);
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&CommandBlock.SCSICommandData[7]);
	
	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     afa:	60 30       	cpi	r22, 0x00	; 0
     afc:	30 e8       	ldi	r19, 0x80	; 128
     afe:	73 07       	cpc	r23, r19
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	83 07       	cpc	r24, r19
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	93 07       	cpc	r25, r19
     b08:	68 f0       	brcs	.+26     	; 0xb24 <SCSI_Command_ReadWrite_10+0x48>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     b0a:	80 91 0f 01 	lds	r24, 0x010F
     b0e:	80 7f       	andi	r24, 0xF0	; 240
     b10:	85 60       	ori	r24, 0x05	; 5
     b12:	80 93 0f 01 	sts	0x010F, r24
     b16:	81 e2       	ldi	r24, 0x21	; 33
     b18:	80 93 19 01 	sts	0x0119, r24
     b1c:	10 92 1a 01 	sts	0x011A, r1
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	26 c0       	rjmp	.+76     	; 0xb70 <SCSI_Command_ReadWrite_10+0x94>
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
     b24:	22 23       	and	r18, r18
     b26:	19 f0       	breq	.+6      	; 0xb2e <SCSI_Command_ReadWrite_10+0x52>
	  DataflashManager_ReadBlocks(BlockAddress, TotalBlocks);
     b28:	ae 01       	movw	r20, r28
     b2a:	94 dd       	rcall	.-1240   	; 0x654 <DataflashManager_ReadBlocks>
     b2c:	02 c0       	rjmp	.+4      	; 0xb32 <SCSI_Command_ReadWrite_10+0x56>
	else
	  DataflashManager_WriteBlocks(BlockAddress, TotalBlocks);
     b2e:	ae 01       	movw	r20, r28
     b30:	a1 de       	rcall	.-702    	; 0x874 <DataflashManager_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     b32:	9e 01       	movw	r18, r28
     b34:	40 e0       	ldi	r20, 0x00	; 0
     b36:	50 e0       	ldi	r21, 0x00	; 0
     b38:	89 e0       	ldi	r24, 0x09	; 9
     b3a:	22 0f       	add	r18, r18
     b3c:	33 1f       	adc	r19, r19
     b3e:	44 1f       	adc	r20, r20
     b40:	55 1f       	adc	r21, r21
     b42:	8a 95       	dec	r24
     b44:	d1 f7       	brne	.-12     	; 0xb3a <SCSI_Command_ReadWrite_10+0x5e>
     b46:	80 91 4d 01 	lds	r24, 0x014D
     b4a:	90 91 4e 01 	lds	r25, 0x014E
     b4e:	a0 91 4f 01 	lds	r26, 0x014F
     b52:	b0 91 50 01 	lds	r27, 0x0150
     b56:	82 1b       	sub	r24, r18
     b58:	93 0b       	sbc	r25, r19
     b5a:	a4 0b       	sbc	r26, r20
     b5c:	b5 0b       	sbc	r27, r21
     b5e:	80 93 4d 01 	sts	0x014D, r24
     b62:	90 93 4e 01 	sts	0x014E, r25
     b66:	a0 93 4f 01 	sts	0x014F, r26
     b6a:	b0 93 50 01 	sts	0x0150, r27
     b6e:	81 e0       	ldi	r24, 0x01	; 1

	return true;
}
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	08 95       	ret

00000b76 <SCSI_DecodeSCSICommand>:
 *  a command failure due to a ILLEGAL REQUEST.
 *
 *  \return Boolean true if the command completed successfully, false otherwise
 */
bool SCSI_DecodeSCSICommand(void)
{
     b76:	0f 93       	push	r16
     b78:	1f 93       	push	r17
     b7a:	cf 93       	push	r28
     b7c:	df 93       	push	r29
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (CommandBlock.SCSICommandData[0])
     b7e:	80 91 54 01 	lds	r24, 0x0154
     b82:	8d 31       	cpi	r24, 0x1D	; 29
     b84:	09 f4       	brne	.+2      	; 0xb88 <SCSI_DecodeSCSICommand+0x12>
     b86:	ab c0       	rjmp	.+342    	; 0xcde <SCSI_DecodeSCSICommand+0x168>
     b88:	8e 31       	cpi	r24, 0x1E	; 30
     b8a:	78 f4       	brcc	.+30     	; 0xbaa <SCSI_DecodeSCSICommand+0x34>
     b8c:	83 30       	cpi	r24, 0x03	; 3
     b8e:	09 f4       	brne	.+2      	; 0xb92 <SCSI_DecodeSCSICommand+0x1c>
     b90:	57 c0       	rjmp	.+174    	; 0xc40 <SCSI_DecodeSCSICommand+0xca>
     b92:	84 30       	cpi	r24, 0x04	; 4
     b94:	20 f4       	brcc	.+8      	; 0xb9e <SCSI_DecodeSCSICommand+0x28>
     b96:	88 23       	and	r24, r24
     b98:	09 f4       	brne	.+2      	; 0xb9c <SCSI_DecodeSCSICommand+0x26>
     b9a:	e3 c0       	rjmp	.+454    	; 0xd62 <SCSI_DecodeSCSICommand+0x1ec>
     b9c:	eb c0       	rjmp	.+470    	; 0xd74 <SCSI_DecodeSCSICommand+0x1fe>
     b9e:	82 31       	cpi	r24, 0x12	; 18
     ba0:	b9 f0       	breq	.+46     	; 0xbd0 <SCSI_DecodeSCSICommand+0x5a>
     ba2:	8a 31       	cpi	r24, 0x1A	; 26
     ba4:	09 f0       	breq	.+2      	; 0xba8 <SCSI_DecodeSCSICommand+0x32>
     ba6:	e6 c0       	rjmp	.+460    	; 0xd74 <SCSI_DecodeSCSICommand+0x1fe>
     ba8:	bb c0       	rjmp	.+374    	; 0xd20 <SCSI_DecodeSCSICommand+0x1aa>
     baa:	88 32       	cpi	r24, 0x28	; 40
     bac:	09 f4       	brne	.+2      	; 0xbb0 <SCSI_DecodeSCSICommand+0x3a>
     bae:	b3 c0       	rjmp	.+358    	; 0xd16 <SCSI_DecodeSCSICommand+0x1a0>
     bb0:	89 32       	cpi	r24, 0x29	; 41
     bb2:	38 f4       	brcc	.+14     	; 0xbc2 <SCSI_DecodeSCSICommand+0x4c>
     bb4:	8e 31       	cpi	r24, 0x1E	; 30
     bb6:	09 f4       	brne	.+2      	; 0xbba <SCSI_DecodeSCSICommand+0x44>
     bb8:	d4 c0       	rjmp	.+424    	; 0xd62 <SCSI_DecodeSCSICommand+0x1ec>
     bba:	85 32       	cpi	r24, 0x25	; 37
     bbc:	09 f0       	breq	.+2      	; 0xbc0 <SCSI_DecodeSCSICommand+0x4a>
     bbe:	da c0       	rjmp	.+436    	; 0xd74 <SCSI_DecodeSCSICommand+0x1fe>
     bc0:	65 c0       	rjmp	.+202    	; 0xc8c <SCSI_DecodeSCSICommand+0x116>
     bc2:	8a 32       	cpi	r24, 0x2A	; 42
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <SCSI_DecodeSCSICommand+0x52>
     bc6:	a5 c0       	rjmp	.+330    	; 0xd12 <SCSI_DecodeSCSICommand+0x19c>
     bc8:	8f 32       	cpi	r24, 0x2F	; 47
     bca:	09 f0       	breq	.+2      	; 0xbce <SCSI_DecodeSCSICommand+0x58>
     bcc:	d3 c0       	rjmp	.+422    	; 0xd74 <SCSI_DecodeSCSICommand+0x1fe>
     bce:	c9 c0       	rjmp	.+402    	; 0xd62 <SCSI_DecodeSCSICommand+0x1ec>
     bd0:	c0 91 58 01 	lds	r28, 0x0158
     bd4:	d0 91 57 01 	lds	r29, 0x0157
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     bd8:	80 91 55 01 	lds	r24, 0x0155
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	83 70       	andi	r24, 0x03	; 3
     be0:	90 70       	andi	r25, 0x00	; 0
     be2:	89 2b       	or	r24, r25
     be4:	09 f0       	breq	.+2      	; 0xbe8 <SCSI_DecodeSCSICommand+0x72>
     be6:	7f c0       	rjmp	.+254    	; 0xce6 <SCSI_DecodeSCSICommand+0x170>
     be8:	80 91 56 01 	lds	r24, 0x0156
     bec:	88 23       	and	r24, r24
     bee:	09 f0       	breq	.+2      	; 0xbf2 <SCSI_DecodeSCSICommand+0x7c>
     bf0:	7a c0       	rjmp	.+244    	; 0xce6 <SCSI_DecodeSCSICommand+0x170>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(void)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     bf2:	8e 01       	movw	r16, r28
     bf4:	c5 32       	cpi	r28, 0x25	; 37
     bf6:	d1 05       	cpc	r29, r1
     bf8:	10 f0       	brcs	.+4      	; 0xbfe <SCSI_DecodeSCSICommand+0x88>
     bfa:	04 e2       	ldi	r16, 0x24	; 36
     bfc:	10 e0       	ldi	r17, 0x00	; 0

		return false;
	}

	/* Write the INQUIRY data to the endpoint */
	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     bfe:	8f e1       	ldi	r24, 0x1F	; 31
     c00:	91 e0       	ldi	r25, 0x01	; 1
     c02:	b8 01       	movw	r22, r16
     c04:	40 e0       	ldi	r20, 0x00	; 0
     c06:	50 e0       	ldi	r21, 0x00	; 0
     c08:	d2 d3       	rcall	.+1956   	; 0x13ae <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     c0a:	ce 01       	movw	r24, r28
     c0c:	80 1b       	sub	r24, r16
     c0e:	91 0b       	sbc	r25, r17
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	1d d4       	rcall	.+2106   	; 0x1450 <Endpoint_Null_Stream>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c16:	80 91 e8 00 	lds	r24, 0x00E8
     c1a:	8e 77       	andi	r24, 0x7E	; 126
     c1c:	80 93 e8 00 	sts	0x00E8, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	CommandBlock.DataTransferLength -= BytesTransferred;
     c20:	98 01       	movw	r18, r16
     c22:	40 e0       	ldi	r20, 0x00	; 0
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	80 91 4d 01 	lds	r24, 0x014D
     c2a:	90 91 4e 01 	lds	r25, 0x014E
     c2e:	a0 91 4f 01 	lds	r26, 0x014F
     c32:	b0 91 50 01 	lds	r27, 0x0150
     c36:	82 1b       	sub	r24, r18
     c38:	93 0b       	sbc	r25, r19
     c3a:	a4 0b       	sbc	r26, r20
     c3c:	b5 0b       	sbc	r27, r21
     c3e:	88 c0       	rjmp	.+272    	; 0xd50 <SCSI_DecodeSCSICommand+0x1da>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(void)
{
	uint8_t  AllocationLength = CommandBlock.SCSICommandData[4];
     c40:	10 91 58 01 	lds	r17, 0x0158
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     c44:	01 2f       	mov	r16, r17
     c46:	13 31       	cpi	r17, 0x13	; 19
     c48:	08 f0       	brcs	.+2      	; 0xc4c <SCSI_DecodeSCSICommand+0xd6>
     c4a:	02 e1       	ldi	r16, 0x12	; 18

	/* Send the SENSE data - this indicates to the host the status of the last command */
	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     c4c:	8d e0       	ldi	r24, 0x0D	; 13
     c4e:	91 e0       	ldi	r25, 0x01	; 1
     c50:	60 2f       	mov	r22, r16
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	40 e0       	ldi	r20, 0x00	; 0
     c56:	50 e0       	ldi	r21, 0x00	; 0
     c58:	aa d3       	rcall	.+1876   	; 0x13ae <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     c5a:	81 2f       	mov	r24, r17
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	80 1b       	sub	r24, r16
     c60:	91 09       	sbc	r25, r1
     c62:	60 e0       	ldi	r22, 0x00	; 0
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	f4 d3       	rcall	.+2024   	; 0x1450 <Endpoint_Null_Stream>
     c68:	80 91 e8 00 	lds	r24, 0x00E8
     c6c:	8e 77       	andi	r24, 0x7E	; 126
     c6e:	80 93 e8 00 	sts	0x00E8, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	CommandBlock.DataTransferLength -= BytesTransferred;
     c72:	80 91 4d 01 	lds	r24, 0x014D
     c76:	90 91 4e 01 	lds	r25, 0x014E
     c7a:	a0 91 4f 01 	lds	r26, 0x014F
     c7e:	b0 91 50 01 	lds	r27, 0x0150
     c82:	80 1b       	sub	r24, r16
     c84:	91 09       	sbc	r25, r1
     c86:	a1 09       	sbc	r26, r1
     c88:	b1 09       	sbc	r27, r1
     c8a:	62 c0       	rjmp	.+196    	; 0xd50 <SCSI_DecodeSCSICommand+0x1da>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_BE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_BE(const uint32_t Data)
			{
				UEDATX = (Data >> 24);
     c8c:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 16);
     c90:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     c94:	8f e7       	ldi	r24, 0x7F	; 127
     c96:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data &  0xFF);
     c9a:	8f ef       	ldi	r24, 0xFF	; 255
     c9c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_BE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_BE(const uint32_t Data)
			{
				UEDATX = (Data >> 24);
     ca0:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 16);
     ca4:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     ca8:	82 e0       	ldi	r24, 0x02	; 2
     caa:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data &  0xFF);
     cae:	10 92 f1 00 	sts	0x00F1, r1

	/* Send the logical block size of the device (must be 512 bytes) */
	Endpoint_Write_32_BE(VIRTUAL_MEMORY_BLOCK_SIZE);

	/* Check if the current command is being aborted by the host */
	if (IsMassStoreReset)
     cb2:	80 91 44 01 	lds	r24, 0x0144
     cb6:	88 23       	and	r24, r24
     cb8:	09 f0       	breq	.+2      	; 0xcbc <SCSI_DecodeSCSICommand+0x146>
     cba:	66 c0       	rjmp	.+204    	; 0xd88 <SCSI_DecodeSCSICommand+0x212>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     cbc:	80 91 e8 00 	lds	r24, 0x00E8
     cc0:	8e 77       	andi	r24, 0x7E	; 126
     cc2:	80 93 e8 00 	sts	0x00E8, r24

	/* Send the endpoint data packet to the host */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	CommandBlock.DataTransferLength -= 8;
     cc6:	80 91 4d 01 	lds	r24, 0x014D
     cca:	90 91 4e 01 	lds	r25, 0x014E
     cce:	a0 91 4f 01 	lds	r26, 0x014F
     cd2:	b0 91 50 01 	lds	r27, 0x0150
     cd6:	08 97       	sbiw	r24, 0x08	; 8
     cd8:	a1 09       	sbc	r26, r1
     cda:	b1 09       	sbc	r27, r1
     cdc:	39 c0       	rjmp	.+114    	; 0xd50 <SCSI_DecodeSCSICommand+0x1da>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(void)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(CommandBlock.SCSICommandData[1] & (1 << 2)))
     cde:	80 91 55 01 	lds	r24, 0x0155
     ce2:	82 fd       	sbrc	r24, 2
     ce4:	08 c0       	rjmp	.+16     	; 0xcf6 <SCSI_DecodeSCSICommand+0x180>
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     ce6:	80 91 0f 01 	lds	r24, 0x010F
     cea:	80 7f       	andi	r24, 0xF0	; 240
     cec:	85 60       	ori	r24, 0x05	; 5
     cee:	80 93 0f 01 	sts	0x010F, r24
     cf2:	84 e2       	ldi	r24, 0x24	; 36
     cf4:	46 c0       	rjmp	.+140    	; 0xd82 <SCSI_DecodeSCSICommand+0x20c>

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
     cf6:	83 dc       	rcall	.-1786   	; 0x5fe <DataflashManager_CheckDataflashOperation>
     cf8:	88 23       	and	r24, r24
     cfa:	99 f5       	brne	.+102    	; 0xd62 <SCSI_DecodeSCSICommand+0x1ec>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     cfc:	80 91 0f 01 	lds	r24, 0x010F
     d00:	80 7f       	andi	r24, 0xF0	; 240
     d02:	84 60       	ori	r24, 0x04	; 4
     d04:	80 93 0f 01 	sts	0x010F, r24
     d08:	10 92 19 01 	sts	0x0119, r1
     d0c:	10 92 1a 01 	sts	0x011A, r1
     d10:	3b c0       	rjmp	.+118    	; 0xd88 <SCSI_DecodeSCSICommand+0x212>
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic();
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(DATA_WRITE);
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	01 c0       	rjmp	.+2      	; 0xd18 <SCSI_DecodeSCSICommand+0x1a2>
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(DATA_READ);
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	e1 de       	rcall	.-574    	; 0xadc <SCSI_Command_ReadWrite_10>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     d1a:	88 23       	and	r24, r24
     d1c:	a9 f1       	breq	.+106    	; 0xd88 <SCSI_DecodeSCSICommand+0x212>
     d1e:	36 c0       	rjmp	.+108    	; 0xd8c <SCSI_DecodeSCSICommand+0x216>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d20:	10 92 f1 00 	sts	0x00F1, r1
     d24:	10 92 f1 00 	sts	0x00F1, r1
     d28:	10 92 f1 00 	sts	0x00F1, r1
     d2c:	10 92 f1 00 	sts	0x00F1, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d30:	80 91 e8 00 	lds	r24, 0x00E8
     d34:	8e 77       	andi	r24, 0x7E	; 126
     d36:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	CommandBlock.DataTransferLength -= 4;
     d3a:	80 91 4d 01 	lds	r24, 0x014D
     d3e:	90 91 4e 01 	lds	r25, 0x014E
     d42:	a0 91 4f 01 	lds	r26, 0x014F
     d46:	b0 91 50 01 	lds	r27, 0x0150
     d4a:	04 97       	sbiw	r24, 0x04	; 4
     d4c:	a1 09       	sbc	r26, r1
     d4e:	b1 09       	sbc	r27, r1
     d50:	80 93 4d 01 	sts	0x014D, r24
     d54:	90 93 4e 01 	sts	0x014E, r25
     d58:	a0 93 4f 01 	sts	0x014F, r26
     d5c:	b0 93 50 01 	sts	0x0150, r27
     d60:	15 c0       	rjmp	.+42     	; 0xd8c <SCSI_DecodeSCSICommand+0x216>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			CommandBlock.DataTransferLength = 0;
     d62:	10 92 4d 01 	sts	0x014D, r1
     d66:	10 92 4e 01 	sts	0x014E, r1
     d6a:	10 92 4f 01 	sts	0x014F, r1
     d6e:	10 92 50 01 	sts	0x0150, r1
     d72:	0c c0       	rjmp	.+24     	; 0xd8c <SCSI_DecodeSCSICommand+0x216>
			break;
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     d74:	80 91 0f 01 	lds	r24, 0x010F
     d78:	80 7f       	andi	r24, 0xF0	; 240
     d7a:	85 60       	ori	r24, 0x05	; 5
     d7c:	80 93 0f 01 	sts	0x010F, r24
     d80:	80 e2       	ldi	r24, 0x20	; 32
     d82:	80 93 19 01 	sts	0x0119, r24
     d86:	c2 cf       	rjmp	.-124    	; 0xd0c <SCSI_DecodeSCSICommand+0x196>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	0a c0       	rjmp	.+20     	; 0xda0 <SCSI_DecodeSCSICommand+0x22a>
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     d8c:	80 91 0f 01 	lds	r24, 0x010F
     d90:	80 7f       	andi	r24, 0xF0	; 240
     d92:	80 93 0f 01 	sts	0x010F, r24
     d96:	10 92 19 01 	sts	0x0119, r1
     d9a:	10 92 1a 01 	sts	0x011A, r1
     d9e:	81 e0       	ldi	r24, 0x01	; 1

		return true;
	}

	return false;
}
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	1f 91       	pop	r17
     da6:	0f 91       	pop	r16
     da8:	08 95       	ret

00000daa <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
     daa:	38 2f       	mov	r19, r24
     dac:	28 2f       	mov	r18, r24
     dae:	2c c0       	rjmp	.+88     	; 0xe08 <Endpoint_ConfigureEndpoint_Prv+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     db0:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);
		
		if (EPNum == Number)
     db4:	23 17       	cp	r18, r19
     db6:	21 f4       	brne	.+8      	; 0xdc0 <Endpoint_ConfigureEndpoint_Prv+0x16>
     db8:	76 2f       	mov	r23, r22
     dba:	94 2f       	mov	r25, r20
     dbc:	50 e0       	ldi	r21, 0x00	; 0
     dbe:	06 c0       	rjmp	.+12     	; 0xdcc <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     dc0:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     dc4:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
     dc8:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     dcc:	91 ff       	sbrs	r25, 1
     dce:	1b c0       	rjmp	.+54     	; 0xe06 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     dd0:	80 91 eb 00 	lds	r24, 0x00EB
     dd4:	8e 7f       	andi	r24, 0xFE	; 254
     dd6:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     dda:	80 91 ed 00 	lds	r24, 0x00ED
     dde:	8d 7f       	andi	r24, 0xFD	; 253
     de0:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     de4:	80 91 eb 00 	lds	r24, 0x00EB
     de8:	81 60       	ori	r24, 0x01	; 1
     dea:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     dee:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     df2:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
     df6:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     dfa:	80 91 ee 00 	lds	r24, 0x00EE
			
		if (!(Endpoint_IsConfigured()))
     dfe:	87 fd       	sbrc	r24, 7
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else	
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     e06:	2f 5f       	subi	r18, 0xFF	; 255
     e08:	27 30       	cpi	r18, 0x07	; 7
     e0a:	90 f2       	brcs	.-92     	; 0xdb0 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     e0c:	30 93 e9 00 	sts	0x00E9, r19
     e10:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     e12:	08 95       	ret

00000e14 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     e14:	80 91 69 01 	lds	r24, 0x0169
     e18:	88 23       	and	r24, r24
     e1a:	9c f4       	brge	.+38     	; 0xe42 <Endpoint_ClearStatusStage+0x2e>
     e1c:	04 c0       	rjmp	.+8      	; 0xe26 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     e1e:	80 91 68 01 	lds	r24, 0x0168
     e22:	88 23       	and	r24, r24
     e24:	b9 f0       	breq	.+46     	; 0xe54 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e26:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     e2a:	82 ff       	sbrs	r24, 2
     e2c:	f8 cf       	rjmp	.-16     	; 0xe1e <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e2e:	80 91 e8 00 	lds	r24, 0x00E8
     e32:	8b 77       	andi	r24, 0x7B	; 123
     e34:	80 93 e8 00 	sts	0x00E8, r24
     e38:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     e3a:	80 91 68 01 	lds	r24, 0x0168
     e3e:	88 23       	and	r24, r24
     e40:	49 f0       	breq	.+18     	; 0xe54 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e42:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     e46:	80 ff       	sbrs	r24, 0
     e48:	f8 cf       	rjmp	.-16     	; 0xe3a <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e4a:	80 91 e8 00 	lds	r24, 0x00E8
     e4e:	8e 77       	andi	r24, 0x7E	; 126
     e50:	80 93 e8 00 	sts	0x00E8, r24
     e54:	08 95       	ret

00000e56 <Endpoint_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     e56:	40 91 e4 00 	lds	r20, 0x00E4
     e5a:	50 91 e5 00 	lds	r21, 0x00E5
     e5e:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
     e60:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
     e64:	80 78       	andi	r24, 0x80	; 128
     e66:	80 38       	cpi	r24, 0x80	; 128
     e68:	29 f4       	brne	.+10     	; 0xe74 <Endpoint_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e6a:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
     e6e:	80 ff       	sbrs	r24, 0
     e70:	05 c0       	rjmp	.+10     	; 0xe7c <Endpoint_WaitUntilReady+0x26>
     e72:	22 c0       	rjmp	.+68     	; 0xeb8 <Endpoint_WaitUntilReady+0x62>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e74:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     e78:	82 fd       	sbrc	r24, 2
     e7a:	1e c0       	rjmp	.+60     	; 0xeb8 <Endpoint_WaitUntilReady+0x62>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     e7c:	80 91 68 01 	lds	r24, 0x0168

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     e80:	88 23       	and	r24, r24
     e82:	11 f4       	brne	.+4      	; 0xe88 <Endpoint_WaitUntilReady+0x32>
     e84:	82 e0       	ldi	r24, 0x02	; 2
     e86:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     e88:	85 30       	cpi	r24, 0x05	; 5
     e8a:	11 f4       	brne	.+4      	; 0xe90 <Endpoint_WaitUntilReady+0x3a>
     e8c:	83 e0       	ldi	r24, 0x03	; 3
     e8e:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     e90:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     e94:	85 ff       	sbrs	r24, 5
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <Endpoint_WaitUntilReady+0x46>
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	08 95       	ret
     e9c:	80 91 e4 00 	lds	r24, 0x00E4
     ea0:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     ea4:	84 17       	cp	r24, r20
     ea6:	95 07       	cpc	r25, r21
     ea8:	d9 f2       	breq	.-74     	; 0xe60 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     eaa:	22 23       	and	r18, r18
     eac:	11 f4       	brne	.+4      	; 0xeb2 <Endpoint_WaitUntilReady+0x5c>
     eae:	84 e0       	ldi	r24, 0x04	; 4
     eb0:	08 95       	ret
     eb2:	21 50       	subi	r18, 0x01	; 1
     eb4:	ac 01       	movw	r20, r24
     eb6:	d4 cf       	rjmp	.-88     	; 0xe60 <Endpoint_WaitUntilReady+0xa>
     eb8:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     eba:	08 95       	ret

00000ebc <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     ebc:	ef 92       	push	r14
     ebe:	ff 92       	push	r15
     ec0:	0f 93       	push	r16
     ec2:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     ec4:	4d d0       	rcall	.+154    	; 0xf60 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     ec6:	54 d0       	rcall	.+168    	; 0xf70 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     ec8:	08 ed       	ldi	r16, 0xD8	; 216
     eca:	10 e0       	ldi	r17, 0x00	; 0
     ecc:	f8 01       	movw	r30, r16
     ece:	80 81       	ld	r24, Z
     ed0:	8f 77       	andi	r24, 0x7F	; 127
     ed2:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
     ed4:	80 81       	ld	r24, Z
     ed6:	80 68       	ori	r24, 0x80	; 128
     ed8:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     eda:	80 81       	ld	r24, Z
     edc:	8f 7d       	andi	r24, 0xDF	; 223
     ede:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     ee0:	e7 ed       	ldi	r30, 0xD7	; 215
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	80 68       	ori	r24, 0x80	; 128
     ee8:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     eea:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     eec:	10 92 68 01 	sts	0x0168, r1
	USB_Device_ConfigurationNumber  = 0;
     ef0:	10 92 64 01 	sts	0x0164, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     ef4:	10 92 66 01 	sts	0x0166, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     ef8:	10 92 65 01 	sts	0x0165, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     efc:	80 ee       	ldi	r24, 0xE0	; 224
     efe:	e8 2e       	mov	r14, r24
     f00:	f1 2c       	mov	r15, r1
     f02:	f7 01       	movw	r30, r14
     f04:	80 81       	ld	r24, Z
     f06:	8b 7f       	andi	r24, 0xFB	; 251
     f08:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     f0a:	f8 01       	movw	r30, r16
     f0c:	80 81       	ld	r24, Z
     f0e:	81 60       	ori	r24, 0x01	; 1
     f10:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	60 e0       	ldi	r22, 0x00	; 0
     f16:	42 e0       	ldi	r20, 0x02	; 2
     f18:	48 df       	rcall	.-368    	; 0xdaa <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     f1a:	e1 ee       	ldi	r30, 0xE1	; 225
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	8e 7f       	andi	r24, 0xFE	; 254
     f22:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     f24:	e2 ee       	ldi	r30, 0xE2	; 226
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	81 60       	ori	r24, 0x01	; 1
     f2c:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     f2e:	80 81       	ld	r24, Z
     f30:	88 60       	ori	r24, 0x08	; 8
     f32:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     f34:	f7 01       	movw	r30, r14
     f36:	80 81       	ld	r24, Z
     f38:	8e 7f       	andi	r24, 0xFE	; 254
     f3a:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     f3c:	f8 01       	movw	r30, r16
     f3e:	80 81       	ld	r24, Z
     f40:	80 61       	ori	r24, 0x10	; 16
     f42:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     f44:	1f 91       	pop	r17
     f46:	0f 91       	pop	r16
     f48:	ff 90       	pop	r15
     f4a:	ef 90       	pop	r14
     f4c:	08 95       	ret

00000f4e <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     f4e:	e7 ed       	ldi	r30, 0xD7	; 215
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	81 60       	ori	r24, 0x01	; 1
     f56:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	80 93 67 01 	sts	0x0167, r24

	USB_ResetInterface();
}
     f5e:	ae cf       	rjmp	.-164    	; 0xebc <USB_ResetInterface>

00000f60 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     f60:	e8 ed       	ldi	r30, 0xD8	; 216
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	8c 7f       	andi	r24, 0xFC	; 252
     f68:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     f6a:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     f6e:	08 95       	ret

00000f70 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     f70:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     f74:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     f78:	08 95       	ret

00000f7a <__vector_11>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     f7a:	1f 92       	push	r1
     f7c:	0f 92       	push	r0
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	0f 92       	push	r0
     f82:	0b b6       	in	r0, 0x3b	; 59
     f84:	0f 92       	push	r0
     f86:	11 24       	eor	r1, r1
     f88:	1f 93       	push	r17
     f8a:	2f 93       	push	r18
     f8c:	3f 93       	push	r19
     f8e:	4f 93       	push	r20
     f90:	5f 93       	push	r21
     f92:	6f 93       	push	r22
     f94:	7f 93       	push	r23
     f96:	8f 93       	push	r24
     f98:	9f 93       	push	r25
     f9a:	af 93       	push	r26
     f9c:	bf 93       	push	r27
     f9e:	ef 93       	push	r30
     fa0:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     fa2:	e9 ee       	ldi	r30, 0xE9	; 233
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	10 81       	ld	r17, Z
     fa8:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     faa:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     fac:	e0 ef       	ldi	r30, 0xF0	; 240
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	87 7f       	andi	r24, 0xF7	; 247
     fb4:	80 83       	st	Z, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     fb6:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     fb8:	8d d2       	rcall	.+1306   	; 0x14d4 <USB_Device_ProcessControlRequest>
     fba:	a9 ee       	ldi	r26, 0xE9	; 233
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	1c 92       	st	X, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     fc0:	e0 ef       	ldi	r30, 0xF0	; 240
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	88 60       	ori	r24, 0x08	; 8
     fc8:	80 83       	st	Z, r24
     fca:	1c 93       	st	X, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     fcc:	ff 91       	pop	r31
     fce:	ef 91       	pop	r30
     fd0:	bf 91       	pop	r27
     fd2:	af 91       	pop	r26
     fd4:	9f 91       	pop	r25
     fd6:	8f 91       	pop	r24
     fd8:	7f 91       	pop	r23
     fda:	6f 91       	pop	r22
     fdc:	5f 91       	pop	r21
     fde:	4f 91       	pop	r20
     fe0:	3f 91       	pop	r19
     fe2:	2f 91       	pop	r18
     fe4:	1f 91       	pop	r17
     fe6:	0f 90       	pop	r0
     fe8:	0b be       	out	0x3b, r0	; 59
     fea:	0f 90       	pop	r0
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	0f 90       	pop	r0
     ff0:	1f 90       	pop	r1
     ff2:	18 95       	reti

00000ff4 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     ff4:	1f 92       	push	r1
     ff6:	0f 92       	push	r0
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	0f 92       	push	r0
     ffc:	0b b6       	in	r0, 0x3b	; 59
     ffe:	0f 92       	push	r0
    1000:	11 24       	eor	r1, r1
    1002:	2f 93       	push	r18
    1004:	3f 93       	push	r19
    1006:	4f 93       	push	r20
    1008:	5f 93       	push	r21
    100a:	6f 93       	push	r22
    100c:	7f 93       	push	r23
    100e:	8f 93       	push	r24
    1010:	9f 93       	push	r25
    1012:	af 93       	push	r26
    1014:	bf 93       	push	r27
    1016:	ef 93       	push	r30
    1018:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    101a:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    101e:	82 ff       	sbrs	r24, 2
    1020:	0a c0       	rjmp	.+20     	; 0x1036 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1022:	80 91 e2 00 	lds	r24, 0x00E2
    1026:	82 ff       	sbrs	r24, 2
    1028:	06 c0       	rjmp	.+12     	; 0x1036 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    102a:	80 91 e1 00 	lds	r24, 0x00E1
    102e:	8b 7f       	andi	r24, 0xFB	; 251
    1030:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1034:	d4 d3       	rcall	.+1960   	; 0x17de <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1036:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    103a:	80 ff       	sbrs	r24, 0
    103c:	1d c0       	rjmp	.+58     	; 0x1078 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    103e:	80 91 d8 00 	lds	r24, 0x00D8
    1042:	80 ff       	sbrs	r24, 0
    1044:	19 c0       	rjmp	.+50     	; 0x1078 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1046:	80 91 da 00 	lds	r24, 0x00DA
    104a:	8e 7f       	andi	r24, 0xFE	; 254
    104c:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1050:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1054:	80 ff       	sbrs	r24, 0
    1056:	0c c0       	rjmp	.+24     	; 0x1070 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1058:	8c e0       	ldi	r24, 0x0C	; 12
    105a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    105c:	8e e0       	ldi	r24, 0x0E	; 14
    105e:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1060:	09 b4       	in	r0, 0x29	; 41
    1062:	00 fe       	sbrs	r0, 0
    1064:	fd cf       	rjmp	.-6      	; 0x1060 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	80 93 68 01 	sts	0x0168, r24
			EVENT_USB_Device_Connect();
    106c:	74 d8       	rcall	.-3864   	; 0x156 <EVENT_USB_Device_Connect>
    106e:	04 c0       	rjmp	.+8      	; 0x1078 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1070:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1072:	10 92 68 01 	sts	0x0168, r1
			EVENT_USB_Device_Disconnect();
    1076:	76 d8       	rcall	.-3860   	; 0x164 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1078:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    107c:	80 ff       	sbrs	r24, 0
    107e:	18 c0       	rjmp	.+48     	; 0x10b0 <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1080:	80 91 e2 00 	lds	r24, 0x00E2
    1084:	80 ff       	sbrs	r24, 0
    1086:	14 c0       	rjmp	.+40     	; 0x10b0 <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1088:	80 91 e2 00 	lds	r24, 0x00E2
    108c:	8e 7f       	andi	r24, 0xFE	; 254
    108e:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1092:	80 91 e2 00 	lds	r24, 0x00E2
    1096:	80 61       	ori	r24, 0x10	; 16
    1098:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
    109c:	80 91 d8 00 	lds	r24, 0x00D8
    10a0:	80 62       	ori	r24, 0x20	; 32
    10a2:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    10a6:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    10a8:	85 e0       	ldi	r24, 0x05	; 5
    10aa:	80 93 68 01 	sts	0x0168, r24
		EVENT_USB_Device_Suspend();
    10ae:	97 d3       	rcall	.+1838   	; 0x17de <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    10b0:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    10b4:	84 ff       	sbrs	r24, 4
    10b6:	2d c0       	rjmp	.+90     	; 0x1112 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    10b8:	80 91 e2 00 	lds	r24, 0x00E2
    10bc:	84 ff       	sbrs	r24, 4
    10be:	29 c0       	rjmp	.+82     	; 0x1112 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    10c0:	8c e0       	ldi	r24, 0x0C	; 12
    10c2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    10c4:	8e e0       	ldi	r24, 0x0E	; 14
    10c6:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    10c8:	09 b4       	in	r0, 0x29	; 41
    10ca:	00 fe       	sbrs	r0, 0
    10cc:	fd cf       	rjmp	.-6      	; 0x10c8 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    10ce:	80 91 d8 00 	lds	r24, 0x00D8
    10d2:	8f 7d       	andi	r24, 0xDF	; 223
    10d4:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    10d8:	80 91 e1 00 	lds	r24, 0x00E1
    10dc:	8f 7e       	andi	r24, 0xEF	; 239
    10de:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    10e2:	80 91 e2 00 	lds	r24, 0x00E2
    10e6:	8f 7e       	andi	r24, 0xEF	; 239
    10e8:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    10ec:	80 91 e2 00 	lds	r24, 0x00E2
    10f0:	81 60       	ori	r24, 0x01	; 1
    10f2:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    10f6:	80 91 64 01 	lds	r24, 0x0164
    10fa:	88 23       	and	r24, r24
    10fc:	31 f4       	brne	.+12     	; 0x110a <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    10fe:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1102:	87 fd       	sbrc	r24, 7
    1104:	02 c0       	rjmp	.+4      	; 0x110a <__vector_10+0x116>
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	01 c0       	rjmp	.+2      	; 0x110c <__vector_10+0x118>
    110a:	84 e0       	ldi	r24, 0x04	; 4
    110c:	80 93 68 01 	sts	0x0168, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1110:	66 d3       	rcall	.+1740   	; 0x17de <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1112:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1116:	83 ff       	sbrs	r24, 3
    1118:	27 c0       	rjmp	.+78     	; 0x1168 <__vector_10+0x174>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    111a:	80 91 e2 00 	lds	r24, 0x00E2
    111e:	83 ff       	sbrs	r24, 3
    1120:	23 c0       	rjmp	.+70     	; 0x1168 <__vector_10+0x174>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1122:	80 91 e1 00 	lds	r24, 0x00E1
    1126:	87 7f       	andi	r24, 0xF7	; 247
    1128:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    112c:	82 e0       	ldi	r24, 0x02	; 2
    112e:	80 93 68 01 	sts	0x0168, r24
		USB_Device_ConfigurationNumber = 0;
    1132:	10 92 64 01 	sts	0x0164, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1136:	80 91 e1 00 	lds	r24, 0x00E1
    113a:	8e 7f       	andi	r24, 0xFE	; 254
    113c:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1140:	80 91 e2 00 	lds	r24, 0x00E2
    1144:	8e 7f       	andi	r24, 0xFE	; 254
    1146:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    114a:	80 91 e2 00 	lds	r24, 0x00E2
    114e:	80 61       	ori	r24, 0x10	; 16
    1150:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	60 e0       	ldi	r22, 0x00	; 0
    1158:	42 e0       	ldi	r20, 0x02	; 2
    115a:	27 de       	rcall	.-946    	; 0xdaa <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    115c:	80 91 f0 00 	lds	r24, 0x00F0
    1160:	88 60       	ori	r24, 0x08	; 8
    1162:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1166:	3b d3       	rcall	.+1654   	; 0x17de <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1168:	ff 91       	pop	r31
    116a:	ef 91       	pop	r30
    116c:	bf 91       	pop	r27
    116e:	af 91       	pop	r26
    1170:	9f 91       	pop	r25
    1172:	8f 91       	pop	r24
    1174:	7f 91       	pop	r23
    1176:	6f 91       	pop	r22
    1178:	5f 91       	pop	r21
    117a:	4f 91       	pop	r20
    117c:	3f 91       	pop	r19
    117e:	2f 91       	pop	r18
    1180:	0f 90       	pop	r0
    1182:	0b be       	out	0x3b, r0	; 59
    1184:	0f 90       	pop	r0
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	0f 90       	pop	r0
    118a:	1f 90       	pop	r1
    118c:	18 95       	reti

0000118e <Endpoint_Write_Control_Stream_LE>:
    118e:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1190:	40 91 6f 01 	lds	r20, 0x016F
    1194:	50 91 70 01 	lds	r21, 0x0170
    1198:	46 17       	cp	r20, r22
    119a:	57 07       	cpc	r21, r23
    119c:	18 f4       	brcc	.+6      	; 0x11a4 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    119e:	f9 01       	movw	r30, r18
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	3d c0       	rjmp	.+122    	; 0x121e <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    11a4:	61 15       	cp	r22, r1
    11a6:	71 05       	cpc	r23, r1
    11a8:	11 f0       	breq	.+4      	; 0x11ae <Endpoint_Write_Control_Stream_LE+0x20>
    11aa:	ab 01       	movw	r20, r22
    11ac:	f8 cf       	rjmp	.-16     	; 0x119e <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11ae:	80 91 e8 00 	lds	r24, 0x00E8
    11b2:	8e 77       	andi	r24, 0x7E	; 126
    11b4:	80 93 e8 00 	sts	0x00E8, r24
    11b8:	40 e0       	ldi	r20, 0x00	; 0
    11ba:	50 e0       	ldi	r21, 0x00	; 0
    11bc:	f0 cf       	rjmp	.-32     	; 0x119e <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    11be:	80 91 68 01 	lds	r24, 0x0168

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    11c2:	88 23       	and	r24, r24
    11c4:	f1 f1       	breq	.+124    	; 0x1242 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    11c6:	85 30       	cpi	r24, 0x05	; 5
    11c8:	f1 f1       	breq	.+124    	; 0x1246 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    11ca:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    11ce:	83 ff       	sbrs	r24, 3
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <Endpoint_Write_Control_Stream_LE+0x48>
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    11d6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    11da:	82 fd       	sbrc	r24, 2
    11dc:	2c c0       	rjmp	.+88     	; 0x1236 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    11de:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    11e2:	80 ff       	sbrs	r24, 0
    11e4:	1c c0       	rjmp	.+56     	; 0x121e <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    11e6:	20 91 f2 00 	lds	r18, 0x00F2
    11ea:	30 91 f3 00 	lds	r19, 0x00F3
    11ee:	07 c0       	rjmp	.+14     	; 0x11fe <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    11f0:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    11f2:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    11f6:	41 50       	subi	r20, 0x01	; 1
    11f8:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    11fa:	2f 5f       	subi	r18, 0xFF	; 255
    11fc:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    11fe:	41 15       	cp	r20, r1
    1200:	51 05       	cpc	r21, r1
    1202:	19 f0       	breq	.+6      	; 0x120a <Endpoint_Write_Control_Stream_LE+0x7c>
    1204:	28 30       	cpi	r18, 0x08	; 8
    1206:	31 05       	cpc	r19, r1
    1208:	98 f3       	brcs	.-26     	; 0x11f0 <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	28 30       	cpi	r18, 0x08	; 8
    120e:	31 05       	cpc	r19, r1
    1210:	09 f4       	brne	.+2      	; 0x1214 <Endpoint_Write_Control_Stream_LE+0x86>
    1212:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1214:	80 91 e8 00 	lds	r24, 0x00E8
    1218:	8e 77       	andi	r24, 0x7E	; 126
    121a:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    121e:	41 15       	cp	r20, r1
    1220:	51 05       	cpc	r21, r1
    1222:	69 f6       	brne	.-102    	; 0x11be <Endpoint_Write_Control_Stream_LE+0x30>
    1224:	99 23       	and	r25, r25
    1226:	59 f6       	brne	.-106    	; 0x11be <Endpoint_Write_Control_Stream_LE+0x30>
    1228:	06 c0       	rjmp	.+12     	; 0x1236 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    122a:	80 91 68 01 	lds	r24, 0x0168

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    122e:	88 23       	and	r24, r24
    1230:	41 f0       	breq	.+16     	; 0x1242 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1232:	85 30       	cpi	r24, 0x05	; 5
    1234:	41 f0       	breq	.+16     	; 0x1246 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1236:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    123a:	82 ff       	sbrs	r24, 2
    123c:	f6 cf       	rjmp	.-20     	; 0x122a <Endpoint_Write_Control_Stream_LE+0x9c>
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	08 95       	ret
    1242:	82 e0       	ldi	r24, 0x02	; 2
    1244:	08 95       	ret
    1246:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1248:	08 95       	ret

0000124a <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    124a:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    124c:	40 91 6f 01 	lds	r20, 0x016F
    1250:	50 91 70 01 	lds	r21, 0x0170
    1254:	46 17       	cp	r20, r22
    1256:	57 07       	cpc	r21, r23
    1258:	18 f4       	brcc	.+6      	; 0x1260 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    125a:	f9 01       	movw	r30, r18
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	40 c0       	rjmp	.+128    	; 0x12e0 <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1260:	61 15       	cp	r22, r1
    1262:	71 05       	cpc	r23, r1
    1264:	11 f0       	breq	.+4      	; 0x126a <Endpoint_Write_Control_PStream_LE+0x20>
    1266:	ab 01       	movw	r20, r22
    1268:	f8 cf       	rjmp	.-16     	; 0x125a <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    126a:	80 91 e8 00 	lds	r24, 0x00E8
    126e:	8e 77       	andi	r24, 0x7E	; 126
    1270:	80 93 e8 00 	sts	0x00E8, r24
    1274:	40 e0       	ldi	r20, 0x00	; 0
    1276:	50 e0       	ldi	r21, 0x00	; 0
    1278:	f0 cf       	rjmp	.-32     	; 0x125a <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    127a:	80 91 68 01 	lds	r24, 0x0168

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    127e:	88 23       	and	r24, r24
    1280:	09 f4       	brne	.+2      	; 0x1284 <Endpoint_Write_Control_PStream_LE+0x3a>
    1282:	40 c0       	rjmp	.+128    	; 0x1304 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1284:	85 30       	cpi	r24, 0x05	; 5
    1286:	09 f4       	brne	.+2      	; 0x128a <Endpoint_Write_Control_PStream_LE+0x40>
    1288:	3f c0       	rjmp	.+126    	; 0x1308 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    128a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    128e:	83 ff       	sbrs	r24, 3
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <Endpoint_Write_Control_PStream_LE+0x4c>
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1296:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    129a:	82 fd       	sbrc	r24, 2
    129c:	2d c0       	rjmp	.+90     	; 0x12f8 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    129e:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    12a2:	80 ff       	sbrs	r24, 0
    12a4:	1d c0       	rjmp	.+58     	; 0x12e0 <Endpoint_Write_Control_PStream_LE+0x96>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    12a6:	20 91 f2 00 	lds	r18, 0x00F2
    12aa:	30 91 f3 00 	lds	r19, 0x00F3
    12ae:	08 c0       	rjmp	.+16     	; 0x12c0 <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    12b0:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    12b2:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    12b6:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    12b8:	41 50       	subi	r20, 0x01	; 1
    12ba:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    12bc:	2f 5f       	subi	r18, 0xFF	; 255
    12be:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    12c0:	41 15       	cp	r20, r1
    12c2:	51 05       	cpc	r21, r1
    12c4:	19 f0       	breq	.+6      	; 0x12cc <Endpoint_Write_Control_PStream_LE+0x82>
    12c6:	28 30       	cpi	r18, 0x08	; 8
    12c8:	31 05       	cpc	r19, r1
    12ca:	90 f3       	brcs	.-28     	; 0x12b0 <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	28 30       	cpi	r18, 0x08	; 8
    12d0:	31 05       	cpc	r19, r1
    12d2:	09 f4       	brne	.+2      	; 0x12d6 <Endpoint_Write_Control_PStream_LE+0x8c>
    12d4:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12d6:	80 91 e8 00 	lds	r24, 0x00E8
    12da:	8e 77       	andi	r24, 0x7E	; 126
    12dc:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    12e0:	41 15       	cp	r20, r1
    12e2:	51 05       	cpc	r21, r1
    12e4:	51 f6       	brne	.-108    	; 0x127a <Endpoint_Write_Control_PStream_LE+0x30>
    12e6:	99 23       	and	r25, r25
    12e8:	41 f6       	brne	.-112    	; 0x127a <Endpoint_Write_Control_PStream_LE+0x30>
    12ea:	06 c0       	rjmp	.+12     	; 0x12f8 <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    12ec:	80 91 68 01 	lds	r24, 0x0168

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    12f0:	88 23       	and	r24, r24
    12f2:	41 f0       	breq	.+16     	; 0x1304 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    12f4:	85 30       	cpi	r24, 0x05	; 5
    12f6:	41 f0       	breq	.+16     	; 0x1308 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    12f8:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    12fc:	82 ff       	sbrs	r24, 2
    12fe:	f6 cf       	rjmp	.-20     	; 0x12ec <Endpoint_Write_Control_PStream_LE+0xa2>
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	08 95       	ret
    1304:	82 e0       	ldi	r24, 0x02	; 2
    1306:	08 95       	ret
    1308:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    130a:	08 95       	ret

0000130c <Endpoint_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    130c:	bf 92       	push	r11
    130e:	cf 92       	push	r12
    1310:	df 92       	push	r13
    1312:	ef 92       	push	r14
    1314:	ff 92       	push	r15
    1316:	0f 93       	push	r16
    1318:	1f 93       	push	r17
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
    131e:	18 2f       	mov	r17, r24
    1320:	09 2f       	mov	r16, r25
    1322:	7b 01       	movw	r14, r22
    1324:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1326:	97 dd       	rcall	.-1234   	; 0xe56 <Endpoint_WaitUntilReady>
    1328:	b8 2e       	mov	r11, r24
    132a:	88 23       	and	r24, r24
    132c:	a9 f5       	brne	.+106    	; 0x1398 <Endpoint_Read_Stream_LE+0x8c>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    132e:	81 2f       	mov	r24, r17
    1330:	90 2f       	mov	r25, r16
    1332:	9c 01       	movw	r18, r24
    1334:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1336:	c1 14       	cp	r12, r1
    1338:	d1 04       	cpc	r13, r1
    133a:	39 f0       	breq	.+14     	; 0x134a <Endpoint_Read_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    133c:	f6 01       	movw	r30, r12
    133e:	80 81       	ld	r24, Z
    1340:	91 81       	ldd	r25, Z+1	; 0x01
    1342:	e8 1a       	sub	r14, r24
    1344:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1346:	c8 0f       	add	r28, r24
    1348:	d9 1f       	adc	r29, r25
    134a:	00 e0       	ldi	r16, 0x00	; 0
    134c:	10 e0       	ldi	r17, 0x00	; 0
    134e:	21 c0       	rjmp	.+66     	; 0x1392 <Endpoint_Read_Stream_LE+0x86>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1350:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1354:	85 fd       	sbrc	r24, 5
    1356:	15 c0       	rjmp	.+42     	; 0x1382 <Endpoint_Read_Stream_LE+0x76>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1358:	80 91 e8 00 	lds	r24, 0x00E8
    135c:	8b 77       	andi	r24, 0x7B	; 123
    135e:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    1362:	c1 14       	cp	r12, r1
    1364:	d1 04       	cpc	r13, r1
    1366:	49 f0       	breq	.+18     	; 0x137a <Endpoint_Read_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
    1368:	f6 01       	movw	r30, r12
    136a:	80 81       	ld	r24, Z
    136c:	91 81       	ldd	r25, Z+1	; 0x01
    136e:	80 0f       	add	r24, r16
    1370:	91 1f       	adc	r25, r17
    1372:	91 83       	std	Z+1, r25	; 0x01
    1374:	80 83       	st	Z, r24
    1376:	85 e0       	ldi	r24, 0x05	; 5
    1378:	10 c0       	rjmp	.+32     	; 0x139a <Endpoint_Read_Stream_LE+0x8e>

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    137a:	6d dd       	rcall	.-1318   	; 0xe56 <Endpoint_WaitUntilReady>
    137c:	88 23       	and	r24, r24
    137e:	49 f0       	breq	.+18     	; 0x1392 <Endpoint_Read_Stream_LE+0x86>
    1380:	0c c0       	rjmp	.+24     	; 0x139a <Endpoint_Read_Stream_LE+0x8e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1382:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1386:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1388:	08 94       	sec
    138a:	e1 08       	sbc	r14, r1
    138c:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    138e:	0f 5f       	subi	r16, 0xFF	; 255
    1390:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1392:	e1 14       	cp	r14, r1
    1394:	f1 04       	cpc	r15, r1
    1396:	e1 f6       	brne	.-72     	; 0x1350 <Endpoint_Read_Stream_LE+0x44>
    1398:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    139a:	df 91       	pop	r29
    139c:	cf 91       	pop	r28
    139e:	1f 91       	pop	r17
    13a0:	0f 91       	pop	r16
    13a2:	ff 90       	pop	r15
    13a4:	ef 90       	pop	r14
    13a6:	df 90       	pop	r13
    13a8:	cf 90       	pop	r12
    13aa:	bf 90       	pop	r11
    13ac:	08 95       	ret

000013ae <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    13ae:	bf 92       	push	r11
    13b0:	cf 92       	push	r12
    13b2:	df 92       	push	r13
    13b4:	ef 92       	push	r14
    13b6:	ff 92       	push	r15
    13b8:	0f 93       	push	r16
    13ba:	1f 93       	push	r17
    13bc:	cf 93       	push	r28
    13be:	df 93       	push	r29
    13c0:	18 2f       	mov	r17, r24
    13c2:	09 2f       	mov	r16, r25
    13c4:	7b 01       	movw	r14, r22
    13c6:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    13c8:	46 dd       	rcall	.-1396   	; 0xe56 <Endpoint_WaitUntilReady>
    13ca:	b8 2e       	mov	r11, r24
    13cc:	88 23       	and	r24, r24
    13ce:	a9 f5       	brne	.+106    	; 0x143a <Endpoint_Write_Stream_LE+0x8c>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    13d0:	81 2f       	mov	r24, r17
    13d2:	90 2f       	mov	r25, r16
    13d4:	9c 01       	movw	r18, r24
    13d6:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    13d8:	c1 14       	cp	r12, r1
    13da:	d1 04       	cpc	r13, r1
    13dc:	39 f0       	breq	.+14     	; 0x13ec <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    13de:	f6 01       	movw	r30, r12
    13e0:	80 81       	ld	r24, Z
    13e2:	91 81       	ldd	r25, Z+1	; 0x01
    13e4:	e8 1a       	sub	r14, r24
    13e6:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    13e8:	c8 0f       	add	r28, r24
    13ea:	d9 1f       	adc	r29, r25
    13ec:	00 e0       	ldi	r16, 0x00	; 0
    13ee:	10 e0       	ldi	r17, 0x00	; 0
    13f0:	21 c0       	rjmp	.+66     	; 0x1434 <Endpoint_Write_Stream_LE+0x86>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    13f2:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    13f6:	85 fd       	sbrc	r24, 5
    13f8:	15 c0       	rjmp	.+42     	; 0x1424 <Endpoint_Write_Stream_LE+0x76>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13fa:	80 91 e8 00 	lds	r24, 0x00E8
    13fe:	8e 77       	andi	r24, 0x7E	; 126
    1400:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    1404:	c1 14       	cp	r12, r1
    1406:	d1 04       	cpc	r13, r1
    1408:	49 f0       	breq	.+18     	; 0x141c <Endpoint_Write_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
    140a:	f6 01       	movw	r30, r12
    140c:	80 81       	ld	r24, Z
    140e:	91 81       	ldd	r25, Z+1	; 0x01
    1410:	80 0f       	add	r24, r16
    1412:	91 1f       	adc	r25, r17
    1414:	91 83       	std	Z+1, r25	; 0x01
    1416:	80 83       	st	Z, r24
    1418:	85 e0       	ldi	r24, 0x05	; 5
    141a:	10 c0       	rjmp	.+32     	; 0x143c <Endpoint_Write_Stream_LE+0x8e>

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    141c:	1c dd       	rcall	.-1480   	; 0xe56 <Endpoint_WaitUntilReady>
    141e:	88 23       	and	r24, r24
    1420:	49 f0       	breq	.+18     	; 0x1434 <Endpoint_Write_Stream_LE+0x86>
    1422:	0c c0       	rjmp	.+24     	; 0x143c <Endpoint_Write_Stream_LE+0x8e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1424:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1426:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    142a:	08 94       	sec
    142c:	e1 08       	sbc	r14, r1
    142e:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    1430:	0f 5f       	subi	r16, 0xFF	; 255
    1432:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1434:	e1 14       	cp	r14, r1
    1436:	f1 04       	cpc	r15, r1
    1438:	e1 f6       	brne	.-72     	; 0x13f2 <Endpoint_Write_Stream_LE+0x44>
    143a:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	1f 91       	pop	r17
    1442:	0f 91       	pop	r16
    1444:	ff 90       	pop	r15
    1446:	ef 90       	pop	r14
    1448:	df 90       	pop	r13
    144a:	cf 90       	pop	r12
    144c:	bf 90       	pop	r11
    144e:	08 95       	ret

00001450 <Endpoint_Null_Stream>:
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
    1450:	df 92       	push	r13
    1452:	ef 92       	push	r14
    1454:	ff 92       	push	r15
    1456:	0f 93       	push	r16
    1458:	1f 93       	push	r17
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
    145e:	ec 01       	movw	r28, r24
    1460:	8b 01       	movw	r16, r22
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;
	
	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1462:	f9 dc       	rcall	.-1550   	; 0xe56 <Endpoint_WaitUntilReady>
    1464:	d8 2e       	mov	r13, r24
    1466:	88 23       	and	r24, r24
    1468:	61 f5       	brne	.+88     	; 0x14c2 <Endpoint_Null_Stream+0x72>
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
    146a:	01 15       	cp	r16, r1
    146c:	11 05       	cpc	r17, r1
    146e:	29 f0       	breq	.+10     	; 0x147a <Endpoint_Null_Stream+0x2a>
	  Length -= *BytesProcessed;
    1470:	f8 01       	movw	r30, r16
    1472:	80 81       	ld	r24, Z
    1474:	91 81       	ldd	r25, Z+1	; 0x01
    1476:	c8 1b       	sub	r28, r24
    1478:	d9 0b       	sbc	r29, r25
    147a:	ee 24       	eor	r14, r14
    147c:	ff 24       	eor	r15, r15
    147e:	1f c0       	rjmp	.+62     	; 0x14be <Endpoint_Null_Stream+0x6e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1480:	80 91 e8 00 	lds	r24, 0x00E8

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1484:	85 fd       	sbrc	r24, 5
    1486:	15 c0       	rjmp	.+42     	; 0x14b2 <Endpoint_Null_Stream+0x62>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1488:	80 91 e8 00 	lds	r24, 0x00E8
    148c:	8e 77       	andi	r24, 0x7E	; 126
    148e:	80 93 e8 00 	sts	0x00E8, r24
		{
			Endpoint_ClearIN();

			if (BytesProcessed != NULL)
    1492:	01 15       	cp	r16, r1
    1494:	11 05       	cpc	r17, r1
    1496:	49 f0       	breq	.+18     	; 0x14aa <Endpoint_Null_Stream+0x5a>
			{
				*BytesProcessed += BytesInTransfer;
    1498:	f8 01       	movw	r30, r16
    149a:	80 81       	ld	r24, Z
    149c:	91 81       	ldd	r25, Z+1	; 0x01
    149e:	8e 0d       	add	r24, r14
    14a0:	9f 1d       	adc	r25, r15
    14a2:	91 83       	std	Z+1, r25	; 0x01
    14a4:	80 83       	st	Z, r24
    14a6:	85 e0       	ldi	r24, 0x05	; 5
    14a8:	0d c0       	rjmp	.+26     	; 0x14c4 <Endpoint_Null_Stream+0x74>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    14aa:	d5 dc       	rcall	.-1622   	; 0xe56 <Endpoint_WaitUntilReady>
    14ac:	88 23       	and	r24, r24
    14ae:	39 f0       	breq	.+14     	; 0x14be <Endpoint_Null_Stream+0x6e>
    14b0:	09 c0       	rjmp	.+18     	; 0x14c4 <Endpoint_Null_Stream+0x74>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    14b2:	10 92 f1 00 	sts	0x00F1, r1
		}
		else
		{
			Endpoint_Write_8(0);

			Length--;
    14b6:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    14b8:	08 94       	sec
    14ba:	e1 1c       	adc	r14, r1
    14bc:	f1 1c       	adc	r15, r1
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
    14be:	20 97       	sbiw	r28, 0x00	; 0
    14c0:	f9 f6       	brne	.-66     	; 0x1480 <Endpoint_Null_Stream+0x30>
    14c2:	8d 2d       	mov	r24, r13
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
    14c4:	df 91       	pop	r29
    14c6:	cf 91       	pop	r28
    14c8:	1f 91       	pop	r17
    14ca:	0f 91       	pop	r16
    14cc:	ff 90       	pop	r15
    14ce:	ef 90       	pop	r14
    14d0:	df 90       	pop	r13
    14d2:	08 95       	ret

000014d4 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    14d4:	0f 93       	push	r16
    14d6:	1f 93       	push	r17
    14d8:	df 93       	push	r29
    14da:	cf 93       	push	r28
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	ac 97       	sbiw	r28, 0x2c	; 44
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	f8 94       	cli
    14e6:	de bf       	out	0x3e, r29	; 62
    14e8:	0f be       	out	0x3f, r0	; 63
    14ea:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    14ec:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
    14f0:	80 93 69 01 	sts	0x0169, r24
    14f4:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
    14f8:	80 93 6a 01 	sts	0x016A, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    14fc:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    1500:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
    1504:	eb e6       	ldi	r30, 0x6B	; 107
    1506:	f1 e0       	ldi	r31, 0x01	; 1
    1508:	80 93 6b 01 	sts	0x016B, r24
    150c:	90 93 6c 01 	sts	0x016C, r25
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    1510:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    1514:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
    1518:	80 93 6d 01 	sts	0x016D, r24
    151c:	93 83       	std	Z+3, r25	; 0x03
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    151e:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    1522:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
    1526:	80 93 6f 01 	sts	0x016F, r24
    152a:	95 83       	std	Z+5, r25	; 0x05

	EVENT_USB_Device_ControlRequest();
    152c:	0e 94 c3 01 	call	0x386	; 0x386 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1530:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1534:	83 ff       	sbrs	r24, 3
    1536:	3a c1       	rjmp	.+628    	; 0x17ac <USB_Device_ProcessControlRequest+0x2d8>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1538:	80 91 69 01 	lds	r24, 0x0169

		switch (USB_ControlRequest.bRequest)
    153c:	30 91 6a 01 	lds	r19, 0x016A
    1540:	35 30       	cpi	r19, 0x05	; 5
    1542:	09 f4       	brne	.+2      	; 0x1546 <USB_Device_ProcessControlRequest+0x72>
    1544:	87 c0       	rjmp	.+270    	; 0x1654 <USB_Device_ProcessControlRequest+0x180>
    1546:	36 30       	cpi	r19, 0x06	; 6
    1548:	40 f4       	brcc	.+16     	; 0x155a <USB_Device_ProcessControlRequest+0x86>
    154a:	31 30       	cpi	r19, 0x01	; 1
    154c:	c9 f1       	breq	.+114    	; 0x15c0 <USB_Device_ProcessControlRequest+0xec>
    154e:	31 30       	cpi	r19, 0x01	; 1
    1550:	70 f0       	brcs	.+28     	; 0x156e <USB_Device_ProcessControlRequest+0x9a>
    1552:	33 30       	cpi	r19, 0x03	; 3
    1554:	09 f0       	breq	.+2      	; 0x1558 <USB_Device_ProcessControlRequest+0x84>
    1556:	2a c1       	rjmp	.+596    	; 0x17ac <USB_Device_ProcessControlRequest+0x2d8>
    1558:	33 c0       	rjmp	.+102    	; 0x15c0 <USB_Device_ProcessControlRequest+0xec>
    155a:	38 30       	cpi	r19, 0x08	; 8
    155c:	09 f4       	brne	.+2      	; 0x1560 <USB_Device_ProcessControlRequest+0x8c>
    155e:	f7 c0       	rjmp	.+494    	; 0x174e <USB_Device_ProcessControlRequest+0x27a>
    1560:	39 30       	cpi	r19, 0x09	; 9
    1562:	09 f4       	brne	.+2      	; 0x1566 <USB_Device_ProcessControlRequest+0x92>
    1564:	06 c1       	rjmp	.+524    	; 0x1772 <USB_Device_ProcessControlRequest+0x29e>
    1566:	36 30       	cpi	r19, 0x06	; 6
    1568:	09 f0       	breq	.+2      	; 0x156c <USB_Device_ProcessControlRequest+0x98>
    156a:	20 c1       	rjmp	.+576    	; 0x17ac <USB_Device_ProcessControlRequest+0x2d8>
    156c:	97 c0       	rjmp	.+302    	; 0x169c <USB_Device_ProcessControlRequest+0x1c8>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    156e:	80 38       	cpi	r24, 0x80	; 128
    1570:	21 f0       	breq	.+8      	; 0x157a <USB_Device_ProcessControlRequest+0xa6>
    1572:	82 38       	cpi	r24, 0x82	; 130
    1574:	09 f0       	breq	.+2      	; 0x1578 <USB_Device_ProcessControlRequest+0xa4>
    1576:	1a c1       	rjmp	.+564    	; 0x17ac <USB_Device_ProcessControlRequest+0x2d8>
    1578:	08 c0       	rjmp	.+16     	; 0x158a <USB_Device_ProcessControlRequest+0xb6>
    157a:	90 91 65 01 	lds	r25, 0x0165
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    157e:	80 91 66 01 	lds	r24, 0x0166
    1582:	88 23       	and	r24, r24
    1584:	99 f0       	breq	.+38     	; 0x15ac <USB_Device_ProcessControlRequest+0xd8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1586:	92 60       	ori	r25, 0x02	; 2
    1588:	11 c0       	rjmp	.+34     	; 0x15ac <USB_Device_ProcessControlRequest+0xd8>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    158a:	80 91 6d 01 	lds	r24, 0x016D
    158e:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1590:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1594:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	25 e0       	ldi	r18, 0x05	; 5
    159c:	96 95       	lsr	r25
    159e:	87 95       	ror	r24
    15a0:	2a 95       	dec	r18
    15a2:	e1 f7       	brne	.-8      	; 0x159c <USB_Device_ProcessControlRequest+0xc8>
    15a4:	98 2f       	mov	r25, r24
    15a6:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    15a8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    15ac:	80 91 e8 00 	lds	r24, 0x00E8
    15b0:	87 7f       	andi	r24, 0xF7	; 247
    15b2:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    15b6:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
    15ba:	10 92 f1 00 	sts	0x00F1, r1
    15be:	d2 c0       	rjmp	.+420    	; 0x1764 <USB_Device_ProcessControlRequest+0x290>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    15c0:	88 23       	and	r24, r24
    15c2:	19 f0       	breq	.+6      	; 0x15ca <USB_Device_ProcessControlRequest+0xf6>
    15c4:	82 30       	cpi	r24, 0x02	; 2
    15c6:	09 f0       	breq	.+2      	; 0x15ca <USB_Device_ProcessControlRequest+0xf6>
    15c8:	f1 c0       	rjmp	.+482    	; 0x17ac <USB_Device_ProcessControlRequest+0x2d8>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	8f 71       	andi	r24, 0x1F	; 31
    15ce:	90 70       	andi	r25, 0x00	; 0
    15d0:	00 97       	sbiw	r24, 0x00	; 0
    15d2:	21 f0       	breq	.+8      	; 0x15dc <USB_Device_ProcessControlRequest+0x108>
    15d4:	02 97       	sbiw	r24, 0x02	; 2
    15d6:	09 f0       	breq	.+2      	; 0x15da <USB_Device_ProcessControlRequest+0x106>
    15d8:	e9 c0       	rjmp	.+466    	; 0x17ac <USB_Device_ProcessControlRequest+0x2d8>
    15da:	0c c0       	rjmp	.+24     	; 0x15f4 <USB_Device_ProcessControlRequest+0x120>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    15dc:	80 91 6b 01 	lds	r24, 0x016B
    15e0:	81 30       	cpi	r24, 0x01	; 1
    15e2:	09 f0       	breq	.+2      	; 0x15e6 <USB_Device_ProcessControlRequest+0x112>
    15e4:	e3 c0       	rjmp	.+454    	; 0x17ac <USB_Device_ProcessControlRequest+0x2d8>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    15e6:	10 92 66 01 	sts	0x0166, r1
    15ea:	33 30       	cpi	r19, 0x03	; 3
    15ec:	69 f5       	brne	.+90     	; 0x1648 <USB_Device_ProcessControlRequest+0x174>
    15ee:	80 93 66 01 	sts	0x0166, r24
    15f2:	2a c0       	rjmp	.+84     	; 0x1648 <USB_Device_ProcessControlRequest+0x174>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    15f4:	80 91 6b 01 	lds	r24, 0x016B
    15f8:	88 23       	and	r24, r24
    15fa:	31 f5       	brne	.+76     	; 0x1648 <USB_Device_ProcessControlRequest+0x174>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    15fc:	20 91 6d 01 	lds	r18, 0x016D
    1600:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1602:	09 f4       	brne	.+2      	; 0x1606 <USB_Device_ProcessControlRequest+0x132>
    1604:	d3 c0       	rjmp	.+422    	; 0x17ac <USB_Device_ProcessControlRequest+0x2d8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1606:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    160a:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    160e:	80 ff       	sbrs	r24, 0
    1610:	1b c0       	rjmp	.+54     	; 0x1648 <USB_Device_ProcessControlRequest+0x174>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1612:	33 30       	cpi	r19, 0x03	; 3
    1614:	21 f4       	brne	.+8      	; 0x161e <USB_Device_ProcessControlRequest+0x14a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1616:	80 91 eb 00 	lds	r24, 0x00EB
    161a:	80 62       	ori	r24, 0x20	; 32
    161c:	13 c0       	rjmp	.+38     	; 0x1644 <USB_Device_ProcessControlRequest+0x170>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    161e:	80 91 eb 00 	lds	r24, 0x00EB
    1622:	80 61       	ori	r24, 0x10	; 16
    1624:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <USB_Device_ProcessControlRequest+0x15e>
    162e:	88 0f       	add	r24, r24
    1630:	99 1f       	adc	r25, r25
    1632:	2a 95       	dec	r18
    1634:	e2 f7       	brpl	.-8      	; 0x162e <USB_Device_ProcessControlRequest+0x15a>
    1636:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    163a:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    163e:	80 91 eb 00 	lds	r24, 0x00EB
    1642:	88 60       	ori	r24, 0x08	; 8
    1644:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1648:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    164c:	80 91 e8 00 	lds	r24, 0x00E8
    1650:	87 7f       	andi	r24, 0xF7	; 247
    1652:	8b c0       	rjmp	.+278    	; 0x176a <USB_Device_ProcessControlRequest+0x296>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1654:	88 23       	and	r24, r24
    1656:	09 f0       	breq	.+2      	; 0x165a <USB_Device_ProcessControlRequest+0x186>
    1658:	a9 c0       	rjmp	.+338    	; 0x17ac <USB_Device_ProcessControlRequest+0x2d8>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    165a:	10 91 6b 01 	lds	r17, 0x016B
    165e:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1660:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1662:	f8 94       	cli
    1664:	80 91 e8 00 	lds	r24, 0x00E8
    1668:	87 7f       	andi	r24, 0xF7	; 247
    166a:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    166e:	d2 db       	rcall	.-2140   	; 0xe14 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1670:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1674:	80 ff       	sbrs	r24, 0
    1676:	fc cf       	rjmp	.-8      	; 0x1670 <USB_Device_ProcessControlRequest+0x19c>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1678:	80 91 e3 00 	lds	r24, 0x00E3
    167c:	80 78       	andi	r24, 0x80	; 128
    167e:	81 2b       	or	r24, r17

				UDADDR = Temp;
    1680:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    1684:	80 68       	ori	r24, 0x80	; 128
    1686:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    168a:	11 23       	and	r17, r17
    168c:	11 f4       	brne	.+4      	; 0x1692 <USB_Device_ProcessControlRequest+0x1be>
    168e:	82 e0       	ldi	r24, 0x02	; 2
    1690:	01 c0       	rjmp	.+2      	; 0x1694 <USB_Device_ProcessControlRequest+0x1c0>
    1692:	83 e0       	ldi	r24, 0x03	; 3
    1694:	80 93 68 01 	sts	0x0168, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1698:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
    169a:	88 c0       	rjmp	.+272    	; 0x17ac <USB_Device_ProcessControlRequest+0x2d8>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    169c:	80 58       	subi	r24, 0x80	; 128
    169e:	82 30       	cpi	r24, 0x02	; 2
    16a0:	08 f0       	brcs	.+2      	; 0x16a4 <USB_Device_ProcessControlRequest+0x1d0>
    16a2:	84 c0       	rjmp	.+264    	; 0x17ac <USB_Device_ProcessControlRequest+0x2d8>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    16a4:	80 91 6b 01 	lds	r24, 0x016B
    16a8:	90 91 6c 01 	lds	r25, 0x016C
    16ac:	23 e0       	ldi	r18, 0x03	; 3
    16ae:	8c 3d       	cpi	r24, 0xDC	; 220
    16b0:	92 07       	cpc	r25, r18
    16b2:	09 f0       	breq	.+2      	; 0x16b6 <USB_Device_ProcessControlRequest+0x1e2>
    16b4:	33 c0       	rjmp	.+102    	; 0x171c <USB_Device_ProcessControlRequest+0x248>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    16b6:	83 e0       	ldi	r24, 0x03	; 3
    16b8:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    16ba:	8a e2       	ldi	r24, 0x2A	; 42
    16bc:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    16be:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    16c0:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    16c2:	de 01       	movw	r26, r28
    16c4:	15 96       	adiw	r26, 0x05	; 5
    16c6:	6e e0       	ldi	r22, 0x0E	; 14
    16c8:	40 e0       	ldi	r20, 0x00	; 0
    16ca:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    16cc:	11 e2       	ldi	r17, 0x21	; 33
    16ce:	e6 2f       	mov	r30, r22
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	10 93 57 00 	sts	0x0057, r17
    16d6:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
    16d8:	40 ff       	sbrs	r20, 0
    16da:	03 c0       	rjmp	.+6      	; 0x16e2 <USB_Device_ProcessControlRequest+0x20e>
					{
						SerialByte >>= 4;
    16dc:	82 95       	swap	r24
    16de:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    16e0:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    16e2:	8f 70       	andi	r24, 0x0F	; 15
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    16e8:	8a 30       	cpi	r24, 0x0A	; 10
    16ea:	18 f0       	brcs	.+6      	; 0x16f2 <USB_Device_ProcessControlRequest+0x21e>
    16ec:	c9 01       	movw	r24, r18
    16ee:	c7 96       	adiw	r24, 0x37	; 55
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <USB_Device_ProcessControlRequest+0x222>
    16f2:	c9 01       	movw	r24, r18
    16f4:	c0 96       	adiw	r24, 0x30	; 48
    16f6:	8d 93       	st	X+, r24
    16f8:	9d 93       	st	X+, r25
    16fa:	4f 5f       	subi	r20, 0xFF	; 255
    16fc:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    16fe:	44 31       	cpi	r20, 0x14	; 20
    1700:	51 05       	cpc	r21, r1
    1702:	29 f7       	brne	.-54     	; 0x16ce <USB_Device_ProcessControlRequest+0x1fa>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1704:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1706:	80 91 e8 00 	lds	r24, 0x00E8
    170a:	87 7f       	andi	r24, 0xF7	; 247
    170c:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1710:	ce 01       	movw	r24, r28
    1712:	03 96       	adiw	r24, 0x03	; 3
    1714:	6a e2       	ldi	r22, 0x2A	; 42
    1716:	70 e0       	ldi	r23, 0x00	; 0
    1718:	3a dd       	rcall	.-1420   	; 0x118e <Endpoint_Write_Control_Stream_LE>
    171a:	13 c0       	rjmp	.+38     	; 0x1742 <USB_Device_ProcessControlRequest+0x26e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    171c:	60 91 6d 01 	lds	r22, 0x016D
    1720:	ae 01       	movw	r20, r28
    1722:	4f 5f       	subi	r20, 0xFF	; 255
    1724:	5f 4f       	sbci	r21, 0xFF	; 255
    1726:	0e 94 3d 02 	call	0x47a	; 0x47a <CALLBACK_USB_GetDescriptor>
    172a:	bc 01       	movw	r22, r24
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	09 f4       	brne	.+2      	; 0x1732 <USB_Device_ProcessControlRequest+0x25e>
    1730:	3d c0       	rjmp	.+122    	; 0x17ac <USB_Device_ProcessControlRequest+0x2d8>
    1732:	80 91 e8 00 	lds	r24, 0x00E8
    1736:	87 7f       	andi	r24, 0xF7	; 247
    1738:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	9a 81       	ldd	r25, Y+2	; 0x02
    1740:	84 dd       	rcall	.-1272   	; 0x124a <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1742:	80 91 e8 00 	lds	r24, 0x00E8
    1746:	8b 77       	andi	r24, 0x7B	; 123
    1748:	80 93 e8 00 	sts	0x00E8, r24
    174c:	2f c0       	rjmp	.+94     	; 0x17ac <USB_Device_ProcessControlRequest+0x2d8>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    174e:	80 38       	cpi	r24, 0x80	; 128
    1750:	69 f5       	brne	.+90     	; 0x17ac <USB_Device_ProcessControlRequest+0x2d8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1752:	80 91 e8 00 	lds	r24, 0x00E8
    1756:	87 7f       	andi	r24, 0xF7	; 247
    1758:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    175c:	80 91 64 01 	lds	r24, 0x0164
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1760:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1764:	80 91 e8 00 	lds	r24, 0x00E8
    1768:	8e 77       	andi	r24, 0x7E	; 126
    176a:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    176e:	52 db       	rcall	.-2396   	; 0xe14 <Endpoint_ClearStatusStage>
    1770:	1d c0       	rjmp	.+58     	; 0x17ac <USB_Device_ProcessControlRequest+0x2d8>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1772:	88 23       	and	r24, r24
    1774:	d9 f4       	brne	.+54     	; 0x17ac <USB_Device_ProcessControlRequest+0x2d8>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1776:	90 91 6b 01 	lds	r25, 0x016B
    177a:	92 30       	cpi	r25, 0x02	; 2
    177c:	b8 f4       	brcc	.+46     	; 0x17ac <USB_Device_ProcessControlRequest+0x2d8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    177e:	80 91 e8 00 	lds	r24, 0x00E8
    1782:	87 7f       	andi	r24, 0xF7	; 247
    1784:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1788:	90 93 64 01 	sts	0x0164, r25

	Endpoint_ClearStatusStage();
    178c:	43 db       	rcall	.-2426   	; 0xe14 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    178e:	80 91 64 01 	lds	r24, 0x0164
    1792:	88 23       	and	r24, r24
    1794:	31 f4       	brne	.+12     	; 0x17a2 <USB_Device_ProcessControlRequest+0x2ce>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1796:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    179a:	87 fd       	sbrc	r24, 7
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <USB_Device_ProcessControlRequest+0x2ce>
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	01 c0       	rjmp	.+2      	; 0x17a4 <USB_Device_ProcessControlRequest+0x2d0>
    17a2:	84 e0       	ldi	r24, 0x04	; 4
    17a4:	80 93 68 01 	sts	0x0168, r24

	EVENT_USB_Device_ConfigurationChanged();
    17a8:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    17ac:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    17b0:	83 ff       	sbrs	r24, 3
    17b2:	0a c0       	rjmp	.+20     	; 0x17c8 <USB_Device_ProcessControlRequest+0x2f4>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    17b4:	80 91 eb 00 	lds	r24, 0x00EB
    17b8:	80 62       	ori	r24, 0x20	; 32
    17ba:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    17be:	80 91 e8 00 	lds	r24, 0x00E8
    17c2:	87 7f       	andi	r24, 0xF7	; 247
    17c4:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    17c8:	ac 96       	adiw	r28, 0x2c	; 44
    17ca:	0f b6       	in	r0, 0x3f	; 63
    17cc:	f8 94       	cli
    17ce:	de bf       	out	0x3e, r29	; 62
    17d0:	0f be       	out	0x3f, r0	; 63
    17d2:	cd bf       	out	0x3d, r28	; 61
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	1f 91       	pop	r17
    17da:	0f 91       	pop	r16
    17dc:	08 95       	ret

000017de <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    17de:	08 95       	ret

000017e0 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    17e0:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    17e2:	80 91 68 01 	lds	r24, 0x0168
    17e6:	88 23       	and	r24, r24
    17e8:	61 f0       	breq	.+24     	; 0x1802 <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    17ea:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    17ee:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    17f2:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    17f6:	83 ff       	sbrs	r24, 3
    17f8:	01 c0       	rjmp	.+2      	; 0x17fc <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
    17fa:	6c de       	rcall	.-808    	; 0x14d4 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    17fc:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    17fe:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1802:	1f 91       	pop	r17
    1804:	08 95       	ret

00001806 <_exit>:
    1806:	f8 94       	cli

00001808 <__stop_program>:
    1808:	ff cf       	rjmp	.-2      	; 0x1808 <__stop_program>
