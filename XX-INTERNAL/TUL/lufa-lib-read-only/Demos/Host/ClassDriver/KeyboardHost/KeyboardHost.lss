
KeyboardHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00001b08  00001b9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800124  00800124  00001bc0  2**0
                  ALLOC
  3 .stab         00002208  00000000  00000000  00001bc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dff  00000000  00000000  00003dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000006c8  00000000  00000000  00004bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000f8e  00000000  00000000  0000528f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000b970  00000000  00000000  0000621d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002817  00000000  00000000  00011b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007d57  00000000  00000000  000143a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b10  00000000  00000000  0001c0fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000045f0  00000000  00000000  0001cc0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000056f2  00000000  00000000  000211fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000798  00000000  00000000  000268ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       0:	12 c1       	rjmp	.+548    	; 0x226 <__ctors_end>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       2:	00 00       	nop
	return USB_Host_SendControlRequest(NULL);
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
       4:	2e c1       	rjmp	.+604    	; 0x262 <__bad_interrupt>
		  ReportData[CurrentBit / 8] |= BitMask;

		CurrentBit++;
		BitMask <<= 1;
	}
}
       6:	00 00       	nop
	return HOST_SENDCONTROL_Successful;
}

uint8_t HID_Host_SetIdlePeriod(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               const uint16_t MS)
{
       8:	2c c1       	rjmp	.+600    	; 0x262 <__bad_interrupt>

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       a:	00 00       	nop
       c:	2a c1       	rjmp	.+596    	; 0x262 <__bad_interrupt>
       e:	00 00       	nop
      10:	28 c1       	rjmp	.+592    	; 0x262 <__bad_interrupt>
      12:	00 00       	nop
      14:	26 c1       	rjmp	.+588    	; 0x262 <__bad_interrupt>
      16:	00 00       	nop
      18:	24 c1       	rjmp	.+584    	; 0x262 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	22 c1       	rjmp	.+580    	; 0x262 <__bad_interrupt>
      1e:	00 00       	nop
      20:	20 c1       	rjmp	.+576    	; 0x262 <__bad_interrupt>
      22:	00 00       	nop
      24:	1e c1       	rjmp	.+572    	; 0x262 <__bad_interrupt>
      26:	00 00       	nop
      28:	8a c5       	rjmp	.+2836   	; 0xb3e <__vector_10>
      2a:	00 00       	nop
      2c:	1a c1       	rjmp	.+564    	; 0x262 <__bad_interrupt>
      2e:	00 00       	nop
      30:	18 c1       	rjmp	.+560    	; 0x262 <__bad_interrupt>
      32:	00 00       	nop
      34:	16 c1       	rjmp	.+556    	; 0x262 <__bad_interrupt>
      36:	00 00       	nop
      38:	14 c1       	rjmp	.+552    	; 0x262 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	12 c1       	rjmp	.+548    	; 0x262 <__bad_interrupt>
      3e:	00 00       	nop
      40:	10 c1       	rjmp	.+544    	; 0x262 <__bad_interrupt>
      42:	00 00       	nop
      44:	0e c1       	rjmp	.+540    	; 0x262 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c c1       	rjmp	.+536    	; 0x262 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0a c1       	rjmp	.+532    	; 0x262 <__bad_interrupt>
      4e:	00 00       	nop
      50:	08 c1       	rjmp	.+528    	; 0x262 <__bad_interrupt>
      52:	00 00       	nop
      54:	06 c1       	rjmp	.+524    	; 0x262 <__bad_interrupt>
      56:	00 00       	nop
      58:	04 c1       	rjmp	.+520    	; 0x262 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	02 c1       	rjmp	.+516    	; 0x262 <__bad_interrupt>
      5e:	00 00       	nop
      60:	00 c1       	rjmp	.+512    	; 0x262 <__bad_interrupt>
      62:	00 00       	nop
      64:	fe c0       	rjmp	.+508    	; 0x262 <__bad_interrupt>
      66:	00 00       	nop
      68:	fc c0       	rjmp	.+504    	; 0x262 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	fa c0       	rjmp	.+500    	; 0x262 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f8 c0       	rjmp	.+496    	; 0x262 <__bad_interrupt>
      72:	00 00       	nop
      74:	f6 c0       	rjmp	.+492    	; 0x262 <__bad_interrupt>
      76:	00 00       	nop
      78:	f4 c0       	rjmp	.+488    	; 0x262 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f2 c0       	rjmp	.+484    	; 0x262 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f0 c0       	rjmp	.+480    	; 0x262 <__bad_interrupt>
      82:	00 00       	nop
      84:	ee c0       	rjmp	.+476    	; 0x262 <__bad_interrupt>
      86:	00 00       	nop
      88:	ec c0       	rjmp	.+472    	; 0x262 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ea c0       	rjmp	.+468    	; 0x262 <__bad_interrupt>
      8e:	00 00       	nop
      90:	e8 c0       	rjmp	.+464    	; 0x262 <__bad_interrupt>
      92:	00 00       	nop
      94:	e6 c0       	rjmp	.+460    	; 0x262 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4575>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4567>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4557>:
     11d:	4b 65 79 62 6f 61 72 64 20 45 6e 75 6d 65 72 61     Keyboard Enumera
     12d:	74 65 64 2e 0d 0a 00                                ted....

00000134 <__c.4555>:
     134:	43 6f 75 6c 64 20 6e 6f 74 20 53 65 74 20 42 6f     Could not Set Bo
     144:	6f 74 20 50 72 6f 74 6f 63 6f 6c 20 4d 6f 64 65     ot Protocol Mode
     154:	2e 0d 0a 00                                         ....

00000158 <__c.4553>:
     158:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     168:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     178:	6f 6e 2e 0d 0a 00                                   on....

0000017e <__c.4551>:
     17e:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     18e:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4b 65 79 62     Not a Valid Keyb
     19e:	6f 61 72 64 2e 0d 0a 00                             oard....

000001a6 <__c.4549>:
     1a6:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1b6:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1c6:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001d3 <__c.4542>:
     1d3:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1e3:	68 65 64 2e 0d 0a 00                                hed....

000001ea <__c.4537>:
     1ea:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     1fa:	0d 0a 00                                            ...

000001fd <__c.4510>:
     1fd:	1b 5b 33 36 6d 4b 65 79 62 6f 61 72 64 20 48 6f     .[36mKeyboard Ho
     20d:	73 74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e     st Demo running.
     21d:	0d 0a 1b 5b 33 37 6d 00 00                          ...[37m..

00000226 <__ctors_end>:
     226:	11 24       	eor	r1, r1
     228:	1f be       	out	0x3f, r1	; 63
     22a:	cf ef       	ldi	r28, 0xFF	; 255
     22c:	d0 e2       	ldi	r29, 0x20	; 32
     22e:	de bf       	out	0x3e, r29	; 62
     230:	cd bf       	out	0x3d, r28	; 61

00000232 <__do_copy_data>:
     232:	11 e0       	ldi	r17, 0x01	; 1
     234:	a0 e0       	ldi	r26, 0x00	; 0
     236:	b1 e0       	ldi	r27, 0x01	; 1
     238:	e8 e0       	ldi	r30, 0x08	; 8
     23a:	fb e1       	ldi	r31, 0x1B	; 27
     23c:	00 e0       	ldi	r16, 0x00	; 0
     23e:	0b bf       	out	0x3b, r16	; 59
     240:	02 c0       	rjmp	.+4      	; 0x246 <__do_copy_data+0x14>
     242:	07 90       	elpm	r0, Z+
     244:	0d 92       	st	X+, r0
     246:	a4 32       	cpi	r26, 0x24	; 36
     248:	b1 07       	cpc	r27, r17
     24a:	d9 f7       	brne	.-10     	; 0x242 <__do_copy_data+0x10>

0000024c <__do_clear_bss>:
     24c:	11 e0       	ldi	r17, 0x01	; 1
     24e:	a4 e2       	ldi	r26, 0x24	; 36
     250:	b1 e0       	ldi	r27, 0x01	; 1
     252:	01 c0       	rjmp	.+2      	; 0x256 <.do_clear_bss_start>

00000254 <.do_clear_bss_loop>:
     254:	1d 92       	st	X+, r1

00000256 <.do_clear_bss_start>:
     256:	a6 34       	cpi	r26, 0x46	; 70
     258:	b1 07       	cpc	r27, r17
     25a:	e1 f7       	brne	.-8      	; 0x254 <.do_clear_bss_loop>
     25c:	5a d1       	rcall	.+692    	; 0x512 <main>
     25e:	0c 94 82 0d 	jmp	0x1b04	; 0x1b04 <_exit>

00000262 <__bad_interrupt>:
     262:	ce ce       	rjmp	.-612    	; 0x0 <__vectors>

00000264 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     264:	90 91 31 01 	lds	r25, 0x0131
     268:	2d b7       	in	r18, 0x3d	; 61
     26a:	3e b7       	in	r19, 0x3e	; 62
     26c:	28 50       	subi	r18, 0x08	; 8
     26e:	30 40       	sbci	r19, 0x00	; 0
     270:	0f b6       	in	r0, 0x3f	; 63
     272:	f8 94       	cli
     274:	3e bf       	out	0x3e, r19	; 62
     276:	0f be       	out	0x3f, r0	; 63
     278:	2d bf       	out	0x3d, r18	; 61
     27a:	ed b7       	in	r30, 0x3d	; 61
     27c:	fe b7       	in	r31, 0x3e	; 62
     27e:	31 96       	adiw	r30, 0x01	; 1
     280:	28 e9       	ldi	r18, 0x98	; 152
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	ad b7       	in	r26, 0x3d	; 61
     286:	be b7       	in	r27, 0x3e	; 62
     288:	12 96       	adiw	r26, 0x02	; 2
     28a:	3c 93       	st	X, r19
     28c:	2e 93       	st	-X, r18
     28e:	11 97       	sbiw	r26, 0x01	; 1
     290:	82 83       	std	Z+2, r24	; 0x02
     292:	13 82       	std	Z+3, r1	; 0x03
     294:	64 83       	std	Z+4, r22	; 0x04
     296:	15 82       	std	Z+5, r1	; 0x05
     298:	96 83       	std	Z+6, r25	; 0x06
     29a:	17 82       	std	Z+7, r1	; 0x07
     29c:	0e 94 be 0a 	call	0x157c	; 0x157c <printf_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     2a0:	8b b1       	in	r24, 0x0b	; 11
     2a2:	8f 70       	andi	r24, 0x0F	; 15
     2a4:	80 69       	ori	r24, 0x90	; 144
     2a6:	8b b9       	out	0x0b, r24	; 11
     2a8:	2d b7       	in	r18, 0x3d	; 61
     2aa:	3e b7       	in	r19, 0x3e	; 62
     2ac:	28 5f       	subi	r18, 0xF8	; 248
     2ae:	3f 4f       	sbci	r19, 0xFF	; 255
     2b0:	0f b6       	in	r0, 0x3f	; 63
     2b2:	f8 94       	cli
     2b4:	3e bf       	out	0x3e, r19	; 62
     2b6:	0f be       	out	0x3f, r0	; 63
     2b8:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     2ba:	08 95       	ret

000002bc <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     2bc:	1f 93       	push	r17
     2be:	18 2f       	mov	r17, r24
	USB_Disable();
     2c0:	19 d4       	rcall	.+2098   	; 0xaf4 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     2c2:	00 d0       	rcall	.+0      	; 0x2c4 <EVENT_USB_Host_HostError+0x8>
     2c4:	00 d0       	rcall	.+0      	; 0x2c6 <EVENT_USB_Host_HostError+0xa>
     2c6:	ed b7       	in	r30, 0x3d	; 61
     2c8:	fe b7       	in	r31, 0x3e	; 62
     2ca:	31 96       	adiw	r30, 0x01	; 1
     2cc:	8e ee       	ldi	r24, 0xEE	; 238
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	ad b7       	in	r26, 0x3d	; 61
     2d2:	be b7       	in	r27, 0x3e	; 62
     2d4:	12 96       	adiw	r26, 0x02	; 2
     2d6:	9c 93       	st	X, r25
     2d8:	8e 93       	st	-X, r24
     2da:	11 97       	sbiw	r26, 0x01	; 1
     2dc:	12 83       	std	Z+2, r17	; 0x02
     2de:	13 82       	std	Z+3, r1	; 0x03
     2e0:	0e 94 be 0a 	call	0x157c	; 0x157c <printf_P>
     2e4:	8b b1       	in	r24, 0x0b	; 11
     2e6:	8f 70       	andi	r24, 0x0F	; 15
     2e8:	80 69       	ori	r24, 0x90	; 144
     2ea:	8b b9       	out	0x0b, r24	; 11
     2ec:	0f 90       	pop	r0
     2ee:	0f 90       	pop	r0
     2f0:	0f 90       	pop	r0
     2f2:	0f 90       	pop	r0
     2f4:	ff cf       	rjmp	.-2      	; 0x2f4 <EVENT_USB_Host_HostError+0x38>

000002f6 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     2f6:	83 ed       	ldi	r24, 0xD3	; 211
     2f8:	91 e0       	ldi	r25, 0x01	; 1
     2fa:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <puts_P>
     2fe:	8b b1       	in	r24, 0x0b	; 11
     300:	8f 70       	andi	r24, 0x0F	; 15
     302:	80 61       	ori	r24, 0x10	; 16
     304:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     306:	08 95       	ret

00000308 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     308:	8a ee       	ldi	r24, 0xEA	; 234
     30a:	91 e0       	ldi	r25, 0x01	; 1
     30c:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <puts_P>
     310:	8b b1       	in	r24, 0x0b	; 11
     312:	8f 70       	andi	r24, 0x0F	; 15
     314:	80 6a       	ori	r24, 0xA0	; 160
     316:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     318:	08 95       	ret

0000031a <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     31a:	0f 93       	push	r16
     31c:	1f 93       	push	r17
     31e:	df 93       	push	r29
     320:	cf 93       	push	r28
     322:	cd b7       	in	r28, 0x3d	; 61
     324:	de b7       	in	r29, 0x3e	; 62
     326:	c2 50       	subi	r28, 0x02	; 2
     328:	d2 40       	sbci	r29, 0x02	; 2
     32a:	0f b6       	in	r0, 0x3f	; 63
     32c:	f8 94       	cli
     32e:	de bf       	out	0x3e, r29	; 62
     330:	0f be       	out	0x3f, r0	; 63
     332:	cd bf       	out	0x3d, r28	; 61
     334:	8b b1       	in	r24, 0x0b	; 11
     336:	8f 70       	andi	r24, 0x0F	; 15
     338:	80 6a       	ori	r24, 0xA0	; 160
     33a:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     33c:	8e 01       	movw	r16, r28
     33e:	0d 5f       	subi	r16, 0xFD	; 253
     340:	1f 4f       	sbci	r17, 0xFF	; 255
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	be 01       	movw	r22, r28
     346:	6f 5f       	subi	r22, 0xFF	; 255
     348:	7f 4f       	sbci	r23, 0xFF	; 255
     34a:	a8 01       	movw	r20, r16
     34c:	20 e0       	ldi	r18, 0x00	; 0
     34e:	32 e0       	ldi	r19, 0x02	; 2
     350:	24 d5       	rcall	.+2632   	; 0xd9a <USB_Host_GetDeviceConfigDescriptor>
     352:	88 23       	and	r24, r24
     354:	19 f0       	breq	.+6      	; 0x35c <EVENT_USB_Host_DeviceEnumerationComplete+0x42>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     356:	86 ea       	ldi	r24, 0xA6	; 166
     358:	91 e0       	ldi	r25, 0x01	; 1
     35a:	11 c0       	rjmp	.+34     	; 0x37e <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_ConfigurePipes(&Keyboard_HID_Interface,
     35c:	69 81       	ldd	r22, Y+1	; 0x01
     35e:	7a 81       	ldd	r23, Y+2	; 0x02
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	a8 01       	movw	r20, r16
     366:	c7 d7       	rcall	.+3982   	; 0x12f6 <HID_Host_ConfigurePipes>
     368:	88 23       	and	r24, r24
     36a:	19 f0       	breq	.+6      	; 0x372 <EVENT_USB_Host_DeviceEnumerationComplete+0x58>
	                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Keyboard.\r\n"));
     36c:	8e e7       	ldi	r24, 0x7E	; 126
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	06 c0       	rjmp	.+12     	; 0x37e <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	b4 d6       	rcall	.+3432   	; 0x10de <USB_Host_SetDeviceConfiguration>
     376:	88 23       	and	r24, r24
     378:	41 f0       	breq	.+16     	; 0x38a <EVENT_USB_Host_DeviceEnumerationComplete+0x70>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     37a:	88 e5       	ldi	r24, 0x58	; 88
     37c:	91 e0       	ldi	r25, 0x01	; 1
     37e:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <puts_P>
     382:	8b b1       	in	r24, 0x0b	; 11
     384:	8f 70       	andi	r24, 0x0F	; 15
     386:	80 69       	ori	r24, 0x90	; 144
     388:	17 c0       	rjmp	.+46     	; 0x3b8 <EVENT_USB_Host_DeviceEnumerationComplete+0x9e>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_SetBootProtocol(&Keyboard_HID_Interface) != 0)
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	91 e0       	ldi	r25, 0x01	; 1
     38e:	3c d7       	rcall	.+3704   	; 0x1208 <HID_Host_SetBootProtocol>
     390:	88 23       	and	r24, r24
     392:	59 f0       	breq	.+22     	; 0x3aa <EVENT_USB_Host_DeviceEnumerationComplete+0x90>
	{
		puts_P(PSTR("Could not Set Boot Protocol Mode.\r\n"));
     394:	84 e3       	ldi	r24, 0x34	; 52
     396:	91 e0       	ldi	r25, 0x01	; 1
     398:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <puts_P>
     39c:	8b b1       	in	r24, 0x0b	; 11
     39e:	8f 70       	andi	r24, 0x0F	; 15
     3a0:	80 69       	ori	r24, 0x90	; 144
     3a2:	8b b9       	out	0x0b, r24	; 11
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	9b d6       	rcall	.+3382   	; 0x10de <USB_Host_SetDeviceConfiguration>
     3a8:	08 c0       	rjmp	.+16     	; 0x3ba <EVENT_USB_Host_DeviceEnumerationComplete+0xa0>
		return;
	}

	puts_P(PSTR("Keyboard Enumerated.\r\n"));
     3aa:	8d e1       	ldi	r24, 0x1D	; 29
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <puts_P>
     3b2:	8b b1       	in	r24, 0x0b	; 11
     3b4:	8f 70       	andi	r24, 0x0F	; 15
     3b6:	80 66       	ori	r24, 0x60	; 96
     3b8:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     3ba:	ce 5f       	subi	r28, 0xFE	; 254
     3bc:	dd 4f       	sbci	r29, 0xFD	; 253
     3be:	0f b6       	in	r0, 0x3f	; 63
     3c0:	f8 94       	cli
     3c2:	de bf       	out	0x3e, r29	; 62
     3c4:	0f be       	out	0x3f, r0	; 63
     3c6:	cd bf       	out	0x3d, r28	; 61
     3c8:	cf 91       	pop	r28
     3ca:	df 91       	pop	r29
     3cc:	1f 91       	pop	r17
     3ce:	0f 91       	pop	r16
     3d0:	08 95       	ret

000003d2 <KeyboardHost_Task>:

/** Task to manage an enumerated USB keyboard once connected, to display key state
 *  data as it is received.
 */
void KeyboardHost_Task(void)
{
     3d2:	df 93       	push	r29
     3d4:	cf 93       	push	r28
     3d6:	cd b7       	in	r28, 0x3d	; 61
     3d8:	de b7       	in	r29, 0x3e	; 62
     3da:	28 97       	sbiw	r28, 0x08	; 8
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	f8 94       	cli
     3e0:	de bf       	out	0x3e, r29	; 62
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	cd bf       	out	0x3d, r28	; 61
	if (USB_HostState != HOST_STATE_Configured)
     3e6:	80 91 31 01 	lds	r24, 0x0131
     3ea:	8b 30       	cpi	r24, 0x0B	; 11
     3ec:	09 f0       	breq	.+2      	; 0x3f0 <KeyboardHost_Task+0x1e>
     3ee:	3f c0       	rjmp	.+126    	; 0x46e <KeyboardHost_Task+0x9c>
	  return;

	if (HID_Host_IsReportReceived(&Keyboard_HID_Interface))
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	91 e0       	ldi	r25, 0x01	; 1
     3f4:	ed d6       	rcall	.+3546   	; 0x11d0 <HID_Host_IsReportReceived>
     3f6:	88 23       	and	r24, r24
     3f8:	d1 f1       	breq	.+116    	; 0x46e <KeyboardHost_Task+0x9c>
	{
		USB_KeyboardReport_Data_t KeyboardReport;
		HID_Host_ReceiveReport(&Keyboard_HID_Interface, &KeyboardReport);
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	be 01       	movw	r22, r28
     400:	6f 5f       	subi	r22, 0xFF	; 255
     402:	7f 4f       	sbci	r23, 0xFF	; 255
     404:	2c d7       	rcall	.+3672   	; 0x125e <HID_Host_ReceiveReport>

		LEDs_ChangeLEDs(LEDS_LED1, (KeyboardReport.Modifier) ? LEDS_LED1 : 0);
     406:	89 81       	ldd	r24, Y+1	; 0x01
     408:	88 23       	and	r24, r24
     40a:	11 f4       	brne	.+4      	; 0x410 <KeyboardHost_Task+0x3e>
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	01 c0       	rjmp	.+2      	; 0x412 <KeyboardHost_Task+0x40>
     410:	90 e1       	ldi	r25, 0x10	; 16
			}

			static inline void LEDs_ChangeLEDs(const uint8_t LEDMask,
			                                   const uint8_t ActiveMask)
			{
				PORTD = ((PORTD & ~LEDMask) | ActiveMask);
     412:	8b b1       	in	r24, 0x0b	; 11
     414:	8f 7e       	andi	r24, 0xEF	; 239
     416:	98 2b       	or	r25, r24
     418:	9b b9       	out	0x0b, r25	; 11

		uint8_t KeyCode = KeyboardReport.KeyCode[0];
     41a:	2b 81       	ldd	r18, Y+3	; 0x03

		if (KeyCode)
     41c:	22 23       	and	r18, r18
     41e:	39 f1       	breq	.+78     	; 0x46e <KeyboardHost_Task+0x9c>
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PORTD ^= LEDMask;
     420:	8b b1       	in	r24, 0x0b	; 11
     422:	90 e2       	ldi	r25, 0x20	; 32
     424:	89 27       	eor	r24, r25
     426:	8b b9       	out	0x0b, r24	; 11
			char PressedKey = 0;

			LEDs_ToggleLEDs(LEDS_LED2);

			/* Retrieve pressed key character if alphanumeric */
			if ((KeyCode >= HID_KEYBOARD_SC_A) && (KeyCode <= HID_KEYBOARD_SC_Z))
     428:	82 2f       	mov	r24, r18
     42a:	84 50       	subi	r24, 0x04	; 4
     42c:	8a 31       	cpi	r24, 0x1A	; 26
     42e:	10 f4       	brcc	.+4      	; 0x434 <KeyboardHost_Task+0x62>
			{
				PressedKey = (KeyCode - HID_KEYBOARD_SC_A) + 'A';
     430:	8f 5b       	subi	r24, 0xBF	; 191
     432:	11 c0       	rjmp	.+34     	; 0x456 <KeyboardHost_Task+0x84>
			}
			else if ((KeyCode >= HID_KEYBOARD_SC_1_AND_EXCLAMATION) &
     434:	82 2f       	mov	r24, r18
     436:	8e 51       	subi	r24, 0x1E	; 30
     438:	89 30       	cpi	r24, 0x09	; 9
     43a:	10 f4       	brcc	.+4      	; 0x440 <KeyboardHost_Task+0x6e>
			         (KeyCode  < HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS))
			{
				PressedKey = (KeyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + '1';
     43c:	8f 5c       	subi	r24, 0xCF	; 207
     43e:	0b c0       	rjmp	.+22     	; 0x456 <KeyboardHost_Task+0x84>
			}
			else if (KeyCode == HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS)
     440:	27 32       	cpi	r18, 0x27	; 39
     442:	11 f4       	brne	.+4      	; 0x448 <KeyboardHost_Task+0x76>
     444:	80 e3       	ldi	r24, 0x30	; 48
     446:	09 c0       	rjmp	.+18     	; 0x45a <KeyboardHost_Task+0x88>
			{
				PressedKey = '0';
			}
			else if (KeyCode == HID_KEYBOARD_SC_SPACE)
     448:	2c 32       	cpi	r18, 0x2C	; 44
     44a:	11 f4       	brne	.+4      	; 0x450 <KeyboardHost_Task+0x7e>
     44c:	80 e2       	ldi	r24, 0x20	; 32
     44e:	05 c0       	rjmp	.+10     	; 0x45a <KeyboardHost_Task+0x88>
			{
				PressedKey = ' ';
			}
			else if (KeyCode == HID_KEYBOARD_SC_ENTER)
     450:	28 32       	cpi	r18, 0x28	; 40
     452:	69 f4       	brne	.+26     	; 0x46e <KeyboardHost_Task+0x9c>
     454:	0a c0       	rjmp	.+20     	; 0x46a <KeyboardHost_Task+0x98>
			{
				PressedKey = '\n';
			}
			
			if (PressedKey)
     456:	88 23       	and	r24, r24
     458:	51 f0       	breq	.+20     	; 0x46e <KeyboardHost_Task+0x9c>
			  putchar(PressedKey);
     45a:	60 91 42 01 	lds	r22, 0x0142
     45e:	70 91 43 01 	lds	r23, 0x0143
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	0e 94 92 0a 	call	0x1524	; 0x1524 <fputc>
     468:	02 c0       	rjmp	.+4      	; 0x46e <KeyboardHost_Task+0x9c>
     46a:	8a e0       	ldi	r24, 0x0A	; 10
     46c:	f6 cf       	rjmp	.-20     	; 0x45a <KeyboardHost_Task+0x88>
		}
	}
}
     46e:	28 96       	adiw	r28, 0x08	; 8
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	f8 94       	cli
     474:	de bf       	out	0x3e, r29	; 62
     476:	0f be       	out	0x3f, r0	; 63
     478:	cd bf       	out	0x3d, r28	; 61
     47a:	cf 91       	pop	r28
     47c:	df 91       	pop	r29
     47e:	08 95       	ret

00000480 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     480:	84 b7       	in	r24, 0x34	; 52
     482:	87 7f       	andi	r24, 0xF7	; 247
     484:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     486:	28 e1       	ldi	r18, 0x18	; 24
     488:	0f b6       	in	r0, 0x3f	; 63
     48a:	f8 94       	cli
     48c:	20 93 60 00 	sts	0x0060, r18
     490:	10 92 60 00 	sts	0x0060, r1
     494:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	80 e8       	ldi	r24, 0x80	; 128
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	f8 94       	cli
     49e:	80 93 61 00 	sts	0x0061, r24
     4a2:	90 93 61 00 	sts	0x0061, r25
     4a6:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     4a8:	83 e3       	ldi	r24, 0x33	; 51
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	90 93 cd 00 	sts	0x00CD, r25
     4b0:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     4b4:	86 e0       	ldi	r24, 0x06	; 6
     4b6:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     4ba:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     4be:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     4c2:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     4c4:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     4c6:	8a b1       	in	r24, 0x0a	; 10
     4c8:	80 6f       	ori	r24, 0xF0	; 240
     4ca:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     4cc:	8b b1       	in	r24, 0x0b	; 11
     4ce:	8f 70       	andi	r24, 0x0F	; 15
     4d0:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     4d2:	07 d3       	rcall	.+1550   	; 0xae2 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     4d4:	e2 e3       	ldi	r30, 0x32	; 50
     4d6:	f1 e0       	ldi	r31, 0x01	; 1
     4d8:	f0 93 41 01 	sts	0x0141, r31
     4dc:	e0 93 40 01 	sts	0x0140, r30
					stdout = Stream;
     4e0:	f0 93 43 01 	sts	0x0143, r31
     4e4:	e0 93 42 01 	sts	0x0142, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     4e8:	8e e0       	ldi	r24, 0x0E	; 14
     4ea:	df 01       	movw	r26, r30
     4ec:	1d 92       	st	X+, r1
     4ee:	8a 95       	dec	r24
     4f0:	e9 f7       	brne	.-6      	; 0x4ec <SetupHardware+0x6c>
     4f2:	83 e0       	ldi	r24, 0x03	; 3
     4f4:	80 93 35 01 	sts	0x0135, r24
     4f8:	84 e7       	ldi	r24, 0x74	; 116
     4fa:	9a e0       	ldi	r25, 0x0A	; 10
     4fc:	90 93 3b 01 	sts	0x013B, r25
     500:	80 93 3a 01 	sts	0x013A, r24
     504:	8e e7       	ldi	r24, 0x7E	; 126
     506:	9a e0       	ldi	r25, 0x0A	; 10
     508:	90 93 3d 01 	sts	0x013D, r25
     50c:	80 93 3c 01 	sts	0x013C, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     510:	08 95       	ret

00000512 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     512:	b6 df       	rcall	.-148    	; 0x480 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Keyboard Host Demo running.\r\n" ESC_FG_WHITE));
     514:	8d ef       	ldi	r24, 0xFD	; 253
     516:	91 e0       	ldi	r25, 0x01	; 1
     518:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     51c:	8b b1       	in	r24, 0x0b	; 11
     51e:	8f 70       	andi	r24, 0x0F	; 15
     520:	80 61       	ori	r24, 0x10	; 16
     522:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     524:	78 94       	sei

	for (;;)
	{
		KeyboardHost_Task();
     526:	55 df       	rcall	.-342    	; 0x3d2 <KeyboardHost_Task>

		HID_Host_USBTask(&Keyboard_HID_Interface);
		USB_USBTask();
     528:	ff d5       	rcall	.+3070   	; 0x1128 <USB_USBTask>
     52a:	fd cf       	rjmp	.-6      	; 0x526 <main+0x14>

0000052c <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     52c:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     52e:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     532:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     536:	80 91 a0 00 	lds	r24, 0x00A0
     53a:	8f 7d       	andi	r24, 0xDF	; 223
     53c:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     540:	80 91 9f 00 	lds	r24, 0x009F
     544:	8f 7d       	andi	r24, 0xDF	; 223
     546:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     54a:	80 91 9e 00 	lds	r24, 0x009E
     54e:	81 60       	ori	r24, 0x01	; 1
     550:	80 93 9e 00 	sts	0x009E, r24
     554:	28 c0       	rjmp	.+80     	; 0x5a6 <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     556:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     55a:	85 ff       	sbrs	r24, 5
     55c:	06 c0       	rjmp	.+12     	; 0x56a <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     55e:	80 91 9f 00 	lds	r24, 0x009F
     562:	8f 7d       	andi	r24, 0xDF	; 223
     564:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     568:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     56a:	80 91 31 01 	lds	r24, 0x0131
     56e:	81 30       	cpi	r24, 0x01	; 1
     570:	11 f4       	brne	.+4      	; 0x576 <USB_Host_WaitMS+0x4a>
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	1a c0       	rjmp	.+52     	; 0x5aa <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     576:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     57a:	84 ff       	sbrs	r24, 4
     57c:	09 c0       	rjmp	.+18     	; 0x590 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     57e:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     582:	80 91 a6 00 	lds	r24, 0x00A6
     586:	8f 7e       	andi	r24, 0xEF	; 239
     588:	80 93 a6 00 	sts	0x00A6, r24
     58c:	92 e0       	ldi	r25, 0x02	; 2
     58e:	0d c0       	rjmp	.+26     	; 0x5aa <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     590:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     594:	81 ff       	sbrs	r24, 1
     596:	07 c0       	rjmp	.+14     	; 0x5a6 <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     598:	80 91 a6 00 	lds	r24, 0x00A6
     59c:	8d 7f       	andi	r24, 0xFD	; 253
     59e:	80 93 a6 00 	sts	0x00A6, r24
     5a2:	93 e0       	ldi	r25, 0x03	; 3
     5a4:	02 c0       	rjmp	.+4      	; 0x5aa <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     5a6:	99 23       	and	r25, r25
     5a8:	b1 f6       	brne	.-84     	; 0x556 <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     5aa:	20 fd       	sbrc	r18, 0
     5ac:	05 c0       	rjmp	.+10     	; 0x5b8 <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     5ae:	80 91 9e 00 	lds	r24, 0x009E
     5b2:	8e 7f       	andi	r24, 0xFE	; 254
     5b4:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     5b8:	35 ff       	sbrs	r19, 5
     5ba:	05 c0       	rjmp	.+10     	; 0x5c6 <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     5bc:	80 91 a0 00 	lds	r24, 0x00A0
     5c0:	80 62       	ori	r24, 0x20	; 32
     5c2:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     5c6:	89 2f       	mov	r24, r25
     5c8:	08 95       	ret

000005ca <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     5ca:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     5ce:	80 91 a0 00 	lds	r24, 0x00A0
     5d2:	8d 7f       	andi	r24, 0xFD	; 253
     5d4:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     5d8:	80 91 9e 00 	lds	r24, 0x009E
     5dc:	82 60       	ori	r24, 0x02	; 2
     5de:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     5e2:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     5e6:	81 fd       	sbrc	r24, 1
     5e8:	fc cf       	rjmp	.-8      	; 0x5e2 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     5ea:	80 91 9e 00 	lds	r24, 0x009E
     5ee:	81 60       	ori	r24, 0x01	; 1
     5f0:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     5f4:	10 92 27 01 	sts	0x0127, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     5f8:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     5fc:	80 91 a0 00 	lds	r24, 0x00A0
     600:	8f 7d       	andi	r24, 0xDF	; 223
     602:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     606:	80 91 9f 00 	lds	r24, 0x009F
     60a:	8f 7d       	andi	r24, 0xDF	; 223
     60c:	80 93 9f 00 	sts	0x009F, r24
     610:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     612:	40 ed       	ldi	r20, 0xD0	; 208
     614:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     616:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     61a:	85 ff       	sbrs	r24, 5
     61c:	0b c0       	rjmp	.+22     	; 0x634 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     61e:	80 91 9f 00 	lds	r24, 0x009F
     622:	8f 7d       	andi	r24, 0xDF	; 223
     624:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     628:	80 91 9f 00 	lds	r24, 0x009F
     62c:	8d 7f       	andi	r24, 0xFD	; 253
     62e:	80 93 9f 00 	sts	0x009F, r24
     632:	05 c0       	rjmp	.+10     	; 0x63e <USB_Host_ResetDevice+0x74>
     634:	ca 01       	movw	r24, r20
     636:	01 97       	sbiw	r24, 0x01	; 1
     638:	f1 f7       	brne	.-4      	; 0x636 <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     63a:	21 50       	subi	r18, 0x01	; 1
     63c:	61 f7       	brne	.-40     	; 0x616 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     63e:	35 ff       	sbrs	r19, 5
     640:	05 c0       	rjmp	.+10     	; 0x64c <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     642:	80 91 a0 00 	lds	r24, 0x00A0
     646:	80 62       	ori	r24, 0x20	; 32
     648:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     64c:	60 fd       	sbrc	r22, 0
     64e:	05 c0       	rjmp	.+10     	; 0x65a <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     650:	80 91 9e 00 	lds	r24, 0x009E
     654:	8e 7f       	andi	r24, 0xFE	; 254
     656:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     65a:	80 91 a0 00 	lds	r24, 0x00A0
     65e:	82 60       	ori	r24, 0x02	; 2
     660:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     664:	08 95       	ret

00000666 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     666:	ef 92       	push	r14
     668:	0f 93       	push	r16
     66a:	1f 93       	push	r17
     66c:	df 93       	push	r29
     66e:	cf 93       	push	r28
     670:	cd b7       	in	r28, 0x3d	; 61
     672:	de b7       	in	r29, 0x3e	; 62
     674:	28 97       	sbiw	r28, 0x08	; 8
     676:	0f b6       	in	r0, 0x3f	; 63
     678:	f8 94       	cli
     67a:	de bf       	out	0x3e, r29	; 62
     67c:	0f be       	out	0x3f, r0	; 63
     67e:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     680:	80 91 31 01 	lds	r24, 0x0131
     684:	85 30       	cpi	r24, 0x05	; 5
     686:	09 f4       	brne	.+2      	; 0x68a <USB_Host_ProcessNextHostState+0x24>
     688:	94 c0       	rjmp	.+296    	; 0x7b2 <USB_Host_ProcessNextHostState+0x14c>
     68a:	86 30       	cpi	r24, 0x06	; 6
     68c:	68 f4       	brcc	.+26     	; 0x6a8 <USB_Host_ProcessNextHostState+0x42>
     68e:	82 30       	cpi	r24, 0x02	; 2
     690:	b9 f1       	breq	.+110    	; 0x700 <USB_Host_ProcessNextHostState+0x9a>
     692:	83 30       	cpi	r24, 0x03	; 3
     694:	18 f4       	brcc	.+6      	; 0x69c <USB_Host_ProcessNextHostState+0x36>
     696:	88 23       	and	r24, r24
     698:	a1 f0       	breq	.+40     	; 0x6c2 <USB_Host_ProcessNextHostState+0x5c>
     69a:	04 c1       	rjmp	.+520    	; 0x8a4 <USB_Host_ProcessNextHostState+0x23e>
     69c:	83 30       	cpi	r24, 0x03	; 3
     69e:	d1 f1       	breq	.+116    	; 0x714 <USB_Host_ProcessNextHostState+0xae>
     6a0:	84 30       	cpi	r24, 0x04	; 4
     6a2:	09 f0       	breq	.+2      	; 0x6a6 <USB_Host_ProcessNextHostState+0x40>
     6a4:	ff c0       	rjmp	.+510    	; 0x8a4 <USB_Host_ProcessNextHostState+0x23e>
     6a6:	5d c0       	rjmp	.+186    	; 0x762 <USB_Host_ProcessNextHostState+0xfc>
     6a8:	87 30       	cpi	r24, 0x07	; 7
     6aa:	09 f4       	brne	.+2      	; 0x6ae <USB_Host_ProcessNextHostState+0x48>
     6ac:	9b c0       	rjmp	.+310    	; 0x7e4 <USB_Host_ProcessNextHostState+0x17e>
     6ae:	87 30       	cpi	r24, 0x07	; 7
     6b0:	08 f4       	brcc	.+2      	; 0x6b4 <USB_Host_ProcessNextHostState+0x4e>
     6b2:	8a c0       	rjmp	.+276    	; 0x7c8 <USB_Host_ProcessNextHostState+0x162>
     6b4:	88 30       	cpi	r24, 0x08	; 8
     6b6:	09 f4       	brne	.+2      	; 0x6ba <USB_Host_ProcessNextHostState+0x54>
     6b8:	b3 c0       	rjmp	.+358    	; 0x820 <USB_Host_ProcessNextHostState+0x1ba>
     6ba:	89 30       	cpi	r24, 0x09	; 9
     6bc:	09 f0       	breq	.+2      	; 0x6c0 <USB_Host_ProcessNextHostState+0x5a>
     6be:	f2 c0       	rjmp	.+484    	; 0x8a4 <USB_Host_ProcessNextHostState+0x23e>
     6c0:	d7 c0       	rjmp	.+430    	; 0x870 <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     6c2:	00 91 25 01 	lds	r16, 0x0125
     6c6:	10 91 26 01 	lds	r17, 0x0126
     6ca:	01 15       	cp	r16, r1
     6cc:	11 05       	cpc	r17, r1
     6ce:	09 f4       	brne	.+2      	; 0x6d2 <USB_Host_ProcessNextHostState+0x6c>
     6d0:	e9 c0       	rjmp	.+466    	; 0x8a4 <USB_Host_ProcessNextHostState+0x23e>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	2b df       	rcall	.-426    	; 0x52c <USB_Host_WaitMS>
     6d6:	68 2f       	mov	r22, r24
     6d8:	88 23       	and	r24, r24
     6da:	31 f0       	breq	.+12     	; 0x6e8 <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
     6dc:	80 91 24 01 	lds	r24, 0x0124
     6e0:	80 93 31 01 	sts	0x0131, r24
     6e4:	91 e0       	ldi	r25, 0x01	; 1
     6e6:	da c0       	rjmp	.+436    	; 0x89c <USB_Host_ProcessNextHostState+0x236>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     6e8:	c8 01       	movw	r24, r16
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	90 93 26 01 	sts	0x0126, r25
     6f0:	80 93 25 01 	sts	0x0125, r24
     6f4:	89 2b       	or	r24, r25
     6f6:	09 f0       	breq	.+2      	; 0x6fa <USB_Host_ProcessNextHostState+0x94>
     6f8:	d5 c0       	rjmp	.+426    	; 0x8a4 <USB_Host_ProcessNextHostState+0x23e>
				  USB_HostState = PostWaitState;
     6fa:	80 91 24 01 	lds	r24, 0x0124
     6fe:	07 c0       	rjmp	.+14     	; 0x70e <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     700:	88 ee       	ldi	r24, 0xE8	; 232
     702:	93 e0       	ldi	r25, 0x03	; 3
     704:	90 93 26 01 	sts	0x0126, r25
     708:	80 93 25 01 	sts	0x0125, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     70c:	83 e0       	ldi	r24, 0x03	; 3
     70e:	80 93 31 01 	sts	0x0131, r24
     712:	c8 c0       	rjmp	.+400    	; 0x8a4 <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     714:	80 91 25 01 	lds	r24, 0x0125
     718:	90 91 26 01 	lds	r25, 0x0126
     71c:	01 97       	sbiw	r24, 0x01	; 1
     71e:	90 93 26 01 	sts	0x0126, r25
     722:	80 93 25 01 	sts	0x0125, r24
     726:	01 96       	adiw	r24, 0x01	; 1
     728:	29 f0       	breq	.+10     	; 0x734 <USB_Host_ProcessNextHostState+0xce>
     72a:	80 ed       	ldi	r24, 0xD0	; 208
     72c:	97 e0       	ldi	r25, 0x07	; 7
     72e:	01 97       	sbiw	r24, 0x01	; 1
     730:	f1 f7       	brne	.-4      	; 0x72e <USB_Host_ProcessNextHostState+0xc8>
     732:	b8 c0       	rjmp	.+368    	; 0x8a4 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     734:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     736:	80 91 d8 00 	lds	r24, 0x00D8
     73a:	80 61       	ori	r24, 0x10	; 16
     73c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     740:	80 91 dd 00 	lds	r24, 0x00DD
     744:	8b 7f       	andi	r24, 0xFB	; 251
     746:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     74a:	80 91 d7 00 	lds	r24, 0x00D7
     74e:	80 61       	ori	r24, 0x10	; 16
     750:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     754:	80 91 dd 00 	lds	r24, 0x00DD
     758:	82 60       	ori	r24, 0x02	; 2
     75a:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     75e:	84 e0       	ldi	r24, 0x04	; 4
     760:	d6 cf       	rjmp	.-84     	; 0x70e <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     762:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     766:	80 ff       	sbrs	r24, 0
     768:	9d c0       	rjmp	.+314    	; 0x8a4 <USB_Host_ProcessNextHostState+0x23e>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     76a:	80 91 9f 00 	lds	r24, 0x009F
     76e:	8e 7f       	andi	r24, 0xFE	; 254
     770:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     774:	80 91 9f 00 	lds	r24, 0x009F
     778:	8d 7f       	andi	r24, 0xFD	; 253
     77a:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     77e:	80 91 df 00 	lds	r24, 0x00DF
     782:	8d 7f       	andi	r24, 0xFD	; 253
     784:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     788:	80 91 de 00 	lds	r24, 0x00DE
     78c:	82 60       	ori	r24, 0x02	; 2
     78e:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     792:	80 91 9e 00 	lds	r24, 0x009E
     796:	81 60       	ori	r24, 0x01	; 1
     798:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     79c:	ed d0       	rcall	.+474    	; 0x978 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     79e:	10 92 31 01 	sts	0x0131, r1
     7a2:	84 e6       	ldi	r24, 0x64	; 100
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	90 93 26 01 	sts	0x0126, r25
     7aa:	80 93 25 01 	sts	0x0125, r24
     7ae:	85 e0       	ldi	r24, 0x05	; 5
     7b0:	5c c0       	rjmp	.+184    	; 0x86a <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     7b2:	0b df       	rcall	.-490    	; 0x5ca <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     7b4:	10 92 31 01 	sts	0x0131, r1
     7b8:	88 ec       	ldi	r24, 0xC8	; 200
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	90 93 26 01 	sts	0x0126, r25
     7c0:	80 93 25 01 	sts	0x0125, r24
     7c4:	86 e0       	ldi	r24, 0x06	; 6
     7c6:	51 c0       	rjmp	.+162    	; 0x86a <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	60 e0       	ldi	r22, 0x00	; 0
     7cc:	40 e0       	ldi	r20, 0x00	; 0
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	00 e4       	ldi	r16, 0x40	; 64
     7d2:	10 e0       	ldi	r17, 0x00	; 0
     7d4:	ee 24       	eor	r14, r14
     7d6:	72 d0       	rcall	.+228    	; 0x8bc <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     7d8:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     7dc:	87 ff       	sbrs	r24, 7
     7de:	5c c0       	rjmp	.+184    	; 0x898 <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     7e0:	87 e0       	ldi	r24, 0x07	; 7
     7e2:	95 cf       	rjmp	.-214    	; 0x70e <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     7e4:	a9 e2       	ldi	r26, 0x29	; 41
     7e6:	b1 e0       	ldi	r27, 0x01	; 1
     7e8:	eb e1       	ldi	r30, 0x1B	; 27
     7ea:	f1 e0       	ldi	r31, 0x01	; 1
     7ec:	88 e0       	ldi	r24, 0x08	; 8
     7ee:	01 90       	ld	r0, Z+
     7f0:	0d 92       	st	X+, r0
     7f2:	81 50       	subi	r24, 0x01	; 1
     7f4:	e1 f7       	brne	.-8      	; 0x7ee <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     7f6:	ce 01       	movw	r24, r28
     7f8:	01 96       	adiw	r24, 0x01	; 1
     7fa:	53 d3       	rcall	.+1702   	; 0xea2 <USB_Host_SendControlRequest>
     7fc:	68 2f       	mov	r22, r24
     7fe:	88 23       	and	r24, r24
     800:	09 f0       	breq	.+2      	; 0x804 <USB_Host_ProcessNextHostState+0x19e>
     802:	48 c0       	rjmp	.+144    	; 0x894 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     804:	88 85       	ldd	r24, Y+8	; 0x08
     806:	80 93 23 01 	sts	0x0123, r24

			USB_Host_ResetDevice();
     80a:	df de       	rcall	.-578    	; 0x5ca <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     80c:	10 92 31 01 	sts	0x0131, r1
     810:	88 ec       	ldi	r24, 0xC8	; 200
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	90 93 26 01 	sts	0x0126, r25
     818:	80 93 25 01 	sts	0x0125, r24
     81c:	88 e0       	ldi	r24, 0x08	; 8
     81e:	25 c0       	rjmp	.+74     	; 0x86a <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     820:	00 91 23 01 	lds	r16, 0x0123
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	40 e0       	ldi	r20, 0x00	; 0
     82a:	20 e0       	ldi	r18, 0x00	; 0
     82c:	10 e0       	ldi	r17, 0x00	; 0
     82e:	ee 24       	eor	r14, r14
     830:	45 d0       	rcall	.+138    	; 0x8bc <Pipe_ConfigurePipe>
     832:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     836:	87 ff       	sbrs	r24, 7
     838:	2f c0       	rjmp	.+94     	; 0x898 <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     83a:	a9 e2       	ldi	r26, 0x29	; 41
     83c:	b1 e0       	ldi	r27, 0x01	; 1
     83e:	e3 e1       	ldi	r30, 0x13	; 19
     840:	f1 e0       	ldi	r31, 0x01	; 1
     842:	88 e0       	ldi	r24, 0x08	; 8
     844:	01 90       	ld	r0, Z+
     846:	0d 92       	st	X+, r0
     848:	81 50       	subi	r24, 0x01	; 1
     84a:	e1 f7       	brne	.-8      	; 0x844 <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	28 d3       	rcall	.+1616   	; 0xea2 <USB_Host_SendControlRequest>
     852:	68 2f       	mov	r22, r24
     854:	88 23       	and	r24, r24
     856:	f1 f4       	brne	.+60     	; 0x894 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     858:	10 92 31 01 	sts	0x0131, r1
     85c:	84 e6       	ldi	r24, 0x64	; 100
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	90 93 26 01 	sts	0x0126, r25
     864:	80 93 25 01 	sts	0x0125, r24
     868:	89 e0       	ldi	r24, 0x09	; 9
     86a:	80 93 24 01 	sts	0x0124, r24
     86e:	1a c0       	rjmp	.+52     	; 0x8a4 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     876:	8a e0       	ldi	r24, 0x0A	; 10
     878:	80 93 31 01 	sts	0x0131, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     87c:	4e dd       	rcall	.-1380   	; 0x31a <EVENT_USB_Host_DeviceEnumerationComplete>
     87e:	12 c0       	rjmp	.+36     	; 0x8a4 <USB_Host_ProcessNextHostState+0x23e>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     880:	89 2f       	mov	r24, r25
     882:	f0 dc       	rcall	.-1568   	; 0x264 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     884:	80 91 dd 00 	lds	r24, 0x00DD
     888:	81 60       	ori	r24, 0x01	; 1
     88a:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     88e:	33 dd       	rcall	.-1434   	; 0x2f6 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     890:	d8 d0       	rcall	.+432    	; 0xa42 <USB_ResetInterface>
     892:	08 c0       	rjmp	.+16     	; 0x8a4 <USB_Host_ProcessNextHostState+0x23e>
	}
}
     894:	93 e0       	ldi	r25, 0x03	; 3
     896:	02 c0       	rjmp	.+4      	; 0x89c <USB_Host_ProcessNextHostState+0x236>
     898:	94 e0       	ldi	r25, 0x04	; 4
     89a:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     89c:	80 91 31 01 	lds	r24, 0x0131
     8a0:	81 30       	cpi	r24, 0x01	; 1
     8a2:	71 f7       	brne	.-36     	; 0x880 <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     8a4:	28 96       	adiw	r28, 0x08	; 8
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	f8 94       	cli
     8aa:	de bf       	out	0x3e, r29	; 62
     8ac:	0f be       	out	0x3f, r0	; 63
     8ae:	cd bf       	out	0x3d, r28	; 61
     8b0:	cf 91       	pop	r28
     8b2:	df 91       	pop	r29
     8b4:	1f 91       	pop	r17
     8b6:	0f 91       	pop	r16
     8b8:	ef 90       	pop	r14
     8ba:	08 95       	ret

000008bc <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     8bc:	ef 92       	push	r14
     8be:	0f 93       	push	r16
     8c0:	1f 93       	push	r17
     8c2:	e8 2f       	mov	r30, r24
     8c4:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     8c6:	62 95       	swap	r22
     8c8:	66 0f       	add	r22, r22
     8ca:	66 0f       	add	r22, r22
     8cc:	60 7c       	andi	r22, 0xC0	; 192
     8ce:	64 2b       	or	r22, r20
     8d0:	2f 70       	andi	r18, 0x0F	; 15
     8d2:	62 2b       	or	r22, r18
     8d4:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     8d6:	72 60       	ori	r23, 0x02	; 2
     8d8:	45 c0       	rjmp	.+138    	; 0x964 <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     8da:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     8de:	3e 17       	cp	r19, r30
     8e0:	a1 f4       	brne	.+40     	; 0x90a <Pipe_ConfigurePipe+0x4e>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	20 e0       	ldi	r18, 0x00	; 0
     8e8:	03 c0       	rjmp	.+6      	; 0x8f0 <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     8ea:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     8ec:	88 0f       	add	r24, r24
     8ee:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     8f0:	80 17       	cp	r24, r16
     8f2:	91 07       	cpc	r25, r17
     8f4:	10 f4       	brcc	.+4      	; 0x8fa <Pipe_ConfigurePipe+0x3e>
     8f6:	25 30       	cpi	r18, 0x05	; 5
     8f8:	c1 f7       	brne	.-16     	; 0x8ea <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     8fa:	92 2f       	mov	r25, r18
     8fc:	92 95       	swap	r25
     8fe:	90 7f       	andi	r25, 0xF0	; 240
     900:	97 2b       	or	r25, r23
     902:	56 2f       	mov	r21, r22
     904:	40 e0       	ldi	r20, 0x00	; 0
     906:	20 e0       	ldi	r18, 0x00	; 0
     908:	08 c0       	rjmp	.+16     	; 0x91a <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     90a:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     90e:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     912:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
     916:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     91a:	91 ff       	sbrs	r25, 1
     91c:	22 c0       	rjmp	.+68     	; 0x962 <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     91e:	80 91 a9 00 	lds	r24, 0x00A9
     922:	8e 7f       	andi	r24, 0xFE	; 254
     924:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     928:	80 91 ab 00 	lds	r24, 0x00AB
     92c:	8d 7f       	andi	r24, 0xFD	; 253
     92e:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     932:	80 91 a9 00 	lds	r24, 0x00A9
     936:	81 60       	ori	r24, 0x01	; 1
     938:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     93c:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
     940:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
     944:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
     948:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     94c:	80 91 a9 00 	lds	r24, 0x00A9
     950:	80 62       	ori	r24, 0x20	; 32
     952:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     956:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     95a:	87 fd       	sbrc	r24, 7
     95c:	02 c0       	rjmp	.+4      	; 0x962 <Pipe_ConfigurePipe+0xa6>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	07 c0       	rjmp	.+14     	; 0x970 <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     962:	3f 5f       	subi	r19, 0xFF	; 255
     964:	37 30       	cpi	r19, 0x07	; 7
     966:	08 f4       	brcc	.+2      	; 0x96a <Pipe_ConfigurePipe+0xae>
     968:	b8 cf       	rjmp	.-144    	; 0x8da <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     96a:	e0 93 a7 00 	sts	0x00A7, r30
     96e:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	ef 90       	pop	r14
     976:	08 95       	ret

00000978 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     978:	10 92 f8 00 	sts	0x00F8, r1
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     982:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     986:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     98a:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     98e:	80 91 a9 00 	lds	r24, 0x00A9
     992:	8e 7f       	andi	r24, 0xFE	; 254
     994:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     998:	9f 5f       	subi	r25, 0xFF	; 255
     99a:	97 30       	cpi	r25, 0x07	; 7
     99c:	81 f7       	brne	.-32     	; 0x97e <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     99e:	08 95       	ret

000009a0 <Pipe_IsEndpointBound>:

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
     9a0:	48 2f       	mov	r20, r24
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     9a2:	30 91 a7 00 	lds	r19, 0x00A7
     9a6:	20 e0       	ldi	r18, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     9a8:	20 93 a7 00 	sts	0x00A7, r18
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     9ac:	80 91 ac 00 	lds	r24, 0x00AC

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     9b0:	87 ff       	sbrs	r24, 7
     9b2:	10 c0       	rjmp	.+32     	; 0x9d4 <Pipe_IsEndpointBound+0x34>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     9b4:	90 91 aa 00 	lds	r25, 0x00AA
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     9b8:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     9bc:	80 73       	andi	r24, 0x30	; 48
     9be:	80 31       	cpi	r24, 0x10	; 16
     9c0:	11 f0       	breq	.+4      	; 0x9c6 <Pipe_IsEndpointBound+0x26>
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	01 c0       	rjmp	.+2      	; 0x9c8 <Pipe_IsEndpointBound+0x28>
     9c6:	80 e8       	ldi	r24, 0x80	; 128
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     9c8:	9f 70       	andi	r25, 0x0F	; 15
     9ca:	89 2b       	or	r24, r25
     9cc:	84 17       	cp	r24, r20
     9ce:	11 f4       	brne	.+4      	; 0x9d4 <Pipe_IsEndpointBound+0x34>
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	08 95       	ret

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     9d4:	2f 5f       	subi	r18, 0xFF	; 255
     9d6:	27 30       	cpi	r18, 0x07	; 7
     9d8:	39 f7       	brne	.-50     	; 0x9a8 <Pipe_IsEndpointBound+0x8>
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     9da:	37 70       	andi	r19, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     9dc:	30 93 a7 00 	sts	0x00A7, r19
     9e0:	80 e0       	ldi	r24, 0x00	; 0
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     9e2:	08 95       	ret

000009e4 <Pipe_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     9e4:	40 91 a2 00 	lds	r20, 0x00A2
     9e8:	50 91 a3 00 	lds	r21, 0x00A3
     9ec:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     9ee:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     9f2:	80 73       	andi	r24, 0x30	; 48
     9f4:	80 31       	cpi	r24, 0x10	; 16
     9f6:	29 f4       	brne	.+10     	; 0xa02 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     9f8:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     9fc:	80 ff       	sbrs	r24, 0
     9fe:	05 c0       	rjmp	.+10     	; 0xa0a <Pipe_WaitUntilReady+0x26>
     a00:	1e c0       	rjmp	.+60     	; 0xa3e <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     a02:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     a06:	82 fd       	sbrc	r24, 2
     a08:	1a c0       	rjmp	.+52     	; 0xa3e <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     a0a:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     a0e:	81 ff       	sbrs	r24, 1
     a10:	02 c0       	rjmp	.+4      	; 0xa16 <Pipe_WaitUntilReady+0x32>
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     a16:	80 91 31 01 	lds	r24, 0x0131
     a1a:	81 30       	cpi	r24, 0x01	; 1
     a1c:	11 f4       	brne	.+4      	; 0xa22 <Pipe_WaitUntilReady+0x3e>
     a1e:	82 e0       	ldi	r24, 0x02	; 2
     a20:	08 95       	ret
     a22:	80 91 a2 00 	lds	r24, 0x00A2
     a26:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     a2a:	84 17       	cp	r24, r20
     a2c:	95 07       	cpc	r25, r21
     a2e:	f9 f2       	breq	.-66     	; 0x9ee <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     a30:	22 23       	and	r18, r18
     a32:	11 f4       	brne	.+4      	; 0xa38 <Pipe_WaitUntilReady+0x54>
     a34:	83 e0       	ldi	r24, 0x03	; 3
     a36:	08 95       	ret
     a38:	21 50       	subi	r18, 0x01	; 1
     a3a:	ac 01       	movw	r20, r24
     a3c:	d8 cf       	rjmp	.-80     	; 0x9ee <Pipe_WaitUntilReady+0xa>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     a40:	08 95       	ret

00000a42 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     a42:	70 d0       	rcall	.+224    	; 0xb24 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     a44:	77 d0       	rcall	.+238    	; 0xb34 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     a46:	80 91 d8 00 	lds	r24, 0x00D8
     a4a:	8f 77       	andi	r24, 0x7F	; 127
     a4c:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     a50:	80 91 d8 00 	lds	r24, 0x00D8
     a54:	80 68       	ori	r24, 0x80	; 128
     a56:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     a5a:	80 91 d8 00 	lds	r24, 0x00D8
     a5e:	8f 7d       	andi	r24, 0xDF	; 223
     a60:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     a64:	80 91 d7 00 	lds	r24, 0x00D7
     a68:	8f 77       	andi	r24, 0x7F	; 127
     a6a:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     a6e:	8c e0       	ldi	r24, 0x0C	; 12
     a70:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     a72:	8e e0       	ldi	r24, 0x0E	; 14
     a74:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     a76:	09 b4       	in	r0, 0x29	; 41
     a78:	00 fe       	sbrs	r0, 0
     a7a:	fd cf       	rjmp	.-6      	; 0xa76 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	80 93 31 01 	sts	0x0131, r24
	USB_Host_ConfigurationNumber = 0;
     a82:	10 92 27 01 	sts	0x0127, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     a86:	80 e4       	ldi	r24, 0x40	; 64
     a88:	80 93 23 01 	sts	0x0123, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     a8c:	80 91 d8 00 	lds	r24, 0x00D8
     a90:	80 64       	ori	r24, 0x40	; 64
     a92:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     a96:	80 91 dd 00 	lds	r24, 0x00DD
     a9a:	81 60       	ori	r24, 0x01	; 1
     a9c:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     aa0:	80 91 dd 00 	lds	r24, 0x00DD
     aa4:	84 60       	ori	r24, 0x04	; 4
     aa6:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     aaa:	80 91 d7 00 	lds	r24, 0x00D7
     aae:	8f 7e       	andi	r24, 0xEF	; 239
     ab0:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     ab4:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     ab6:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     ab8:	80 91 de 00 	lds	r24, 0x00DE
     abc:	81 60       	ori	r24, 0x01	; 1
     abe:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     ac2:	80 91 de 00 	lds	r24, 0x00DE
     ac6:	84 60       	ori	r24, 0x04	; 4
     ac8:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     acc:	80 91 e0 00 	lds	r24, 0x00E0
     ad0:	8e 7f       	andi	r24, 0xFE	; 254
     ad2:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     ad6:	80 91 d8 00 	lds	r24, 0x00D8
     ada:	80 61       	ori	r24, 0x10	; 16
     adc:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     ae0:	08 95       	ret

00000ae2 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     ae2:	e7 ed       	ldi	r30, 0xD7	; 215
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	80 81       	ld	r24, Z
     ae8:	81 60       	ori	r24, 0x01	; 1
     aea:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	80 93 28 01 	sts	0x0128, r24

	USB_ResetInterface();
}
     af2:	a7 cf       	rjmp	.-178    	; 0xa42 <USB_ResetInterface>

00000af4 <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     af4:	17 d0       	rcall	.+46     	; 0xb24 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     af6:	1e d0       	rcall	.+60     	; 0xb34 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     af8:	e0 ee       	ldi	r30, 0xE0	; 224
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	80 81       	ld	r24, Z
     afe:	81 60       	ori	r24, 0x01	; 1
     b00:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     b02:	a8 ed       	ldi	r26, 0xD8	; 216
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	8c 91       	ld	r24, X
     b08:	8f 77       	andi	r24, 0x7F	; 127
     b0a:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     b0c:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     b0e:	e7 ed       	ldi	r30, 0xD7	; 215
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	80 81       	ld	r24, Z
     b14:	8e 7f       	andi	r24, 0xFE	; 254
     b16:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     b18:	8c 91       	ld	r24, X
     b1a:	8f 7e       	andi	r24, 0xEF	; 239
     b1c:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     b1e:	10 92 28 01 	sts	0x0128, r1
}
     b22:	08 95       	ret

00000b24 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     b24:	e8 ed       	ldi	r30, 0xD8	; 216
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	80 81       	ld	r24, Z
     b2a:	8c 7f       	andi	r24, 0xFC	; 252
     b2c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     b2e:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     b32:	08 95       	ret

00000b34 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     b34:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     b38:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     b3c:	08 95       	ret

00000b3e <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     b3e:	1f 92       	push	r1
     b40:	0f 92       	push	r0
     b42:	0f b6       	in	r0, 0x3f	; 63
     b44:	0f 92       	push	r0
     b46:	0b b6       	in	r0, 0x3b	; 59
     b48:	0f 92       	push	r0
     b4a:	11 24       	eor	r1, r1
     b4c:	2f 93       	push	r18
     b4e:	3f 93       	push	r19
     b50:	4f 93       	push	r20
     b52:	5f 93       	push	r21
     b54:	6f 93       	push	r22
     b56:	7f 93       	push	r23
     b58:	8f 93       	push	r24
     b5a:	9f 93       	push	r25
     b5c:	af 93       	push	r26
     b5e:	bf 93       	push	r27
     b60:	ef 93       	push	r30
     b62:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     b64:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     b68:	85 ff       	sbrs	r24, 5
     b6a:	0a c0       	rjmp	.+20     	; 0xb80 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     b6c:	80 91 a0 00 	lds	r24, 0x00A0
     b70:	85 ff       	sbrs	r24, 5
     b72:	06 c0       	rjmp	.+12     	; 0xb80 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     b74:	80 91 9f 00 	lds	r24, 0x009F
     b78:	8f 7d       	andi	r24, 0xDF	; 223
     b7a:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     b7e:	67 d1       	rcall	.+718    	; 0xe4e <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     b80:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     b84:	81 ff       	sbrs	r24, 1
     b86:	15 c0       	rjmp	.+42     	; 0xbb2 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     b88:	80 91 a0 00 	lds	r24, 0x00A0
     b8c:	81 ff       	sbrs	r24, 1
     b8e:	11 c0       	rjmp	.+34     	; 0xbb2 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     b90:	80 91 9f 00 	lds	r24, 0x009F
     b94:	8d 7f       	andi	r24, 0xFD	; 253
     b96:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     b9a:	80 91 9f 00 	lds	r24, 0x009F
     b9e:	8e 7f       	andi	r24, 0xFE	; 254
     ba0:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     ba4:	80 91 a0 00 	lds	r24, 0x00A0
     ba8:	8d 7f       	andi	r24, 0xFD	; 253
     baa:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     bae:	a3 db       	rcall	.-2234   	; 0x2f6 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     bb0:	48 df       	rcall	.-368    	; 0xa42 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     bb2:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     bb6:	81 ff       	sbrs	r24, 1
     bb8:	15 c0       	rjmp	.+42     	; 0xbe4 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     bba:	80 91 de 00 	lds	r24, 0x00DE
     bbe:	81 ff       	sbrs	r24, 1
     bc0:	11 c0       	rjmp	.+34     	; 0xbe4 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     bc2:	80 91 df 00 	lds	r24, 0x00DF
     bc6:	8d 7f       	andi	r24, 0xFD	; 253
     bc8:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     bcc:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     bce:	80 91 dd 00 	lds	r24, 0x00DD
     bd2:	81 60       	ori	r24, 0x01	; 1
     bd4:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	70 db       	rcall	.-2336   	; 0x2bc <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     bdc:	8c db       	rcall	.-2280   	; 0x2f6 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	80 93 31 01 	sts	0x0131, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     be4:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     be8:	80 ff       	sbrs	r24, 0
     bea:	17 c0       	rjmp	.+46     	; 0xc1a <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     bec:	80 91 de 00 	lds	r24, 0x00DE
     bf0:	80 ff       	sbrs	r24, 0
     bf2:	13 c0       	rjmp	.+38     	; 0xc1a <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     bf4:	80 91 df 00 	lds	r24, 0x00DF
     bf8:	8e 7f       	andi	r24, 0xFE	; 254
     bfa:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     bfe:	80 91 de 00 	lds	r24, 0x00DE
     c02:	8e 7f       	andi	r24, 0xFE	; 254
     c04:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     c08:	7f db       	rcall	.-2306   	; 0x308 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     c0a:	80 91 a0 00 	lds	r24, 0x00A0
     c0e:	82 60       	ori	r24, 0x02	; 2
     c10:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     c14:	82 e0       	ldi	r24, 0x02	; 2
     c16:	80 93 31 01 	sts	0x0131, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     c1a:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     c1e:	82 ff       	sbrs	r24, 2
     c20:	0e c0       	rjmp	.+28     	; 0xc3e <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     c22:	80 91 de 00 	lds	r24, 0x00DE
     c26:	82 ff       	sbrs	r24, 2
     c28:	0a c0       	rjmp	.+20     	; 0xc3e <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     c2a:	80 91 df 00 	lds	r24, 0x00DF
     c2e:	8b 7f       	andi	r24, 0xFB	; 251
     c30:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     c34:	82 e0       	ldi	r24, 0x02	; 2
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	15 db       	rcall	.-2518   	; 0x264 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     c3a:	5d db       	rcall	.-2374   	; 0x2f6 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     c3c:	02 df       	rcall	.-508    	; 0xa42 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     c3e:	ff 91       	pop	r31
     c40:	ef 91       	pop	r30
     c42:	bf 91       	pop	r27
     c44:	af 91       	pop	r26
     c46:	9f 91       	pop	r25
     c48:	8f 91       	pop	r24
     c4a:	7f 91       	pop	r23
     c4c:	6f 91       	pop	r22
     c4e:	5f 91       	pop	r21
     c50:	4f 91       	pop	r20
     c52:	3f 91       	pop	r19
     c54:	2f 91       	pop	r18
     c56:	0f 90       	pop	r0
     c58:	0b be       	out	0x3b, r0	; 59
     c5a:	0f 90       	pop	r0
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	0f 90       	pop	r0
     c60:	1f 90       	pop	r1
     c62:	18 95       	reti

00000c64 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     c64:	bf 92       	push	r11
     c66:	cf 92       	push	r12
     c68:	df 92       	push	r13
     c6a:	ef 92       	push	r14
     c6c:	ff 92       	push	r15
     c6e:	0f 93       	push	r16
     c70:	1f 93       	push	r17
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	18 2f       	mov	r17, r24
     c78:	09 2f       	mov	r16, r25
     c7a:	7b 01       	movw	r14, r22
     c7c:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     c7e:	80 91 aa 00 	lds	r24, 0x00AA
     c82:	8f 7c       	andi	r24, 0xCF	; 207
     c84:	80 61       	ori	r24, 0x10	; 16
     c86:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     c8a:	ac de       	rcall	.-680    	; 0x9e4 <Pipe_WaitUntilReady>
     c8c:	b8 2e       	mov	r11, r24
     c8e:	88 23       	and	r24, r24
     c90:	a9 f5       	brne	.+106    	; 0xcfc <Pipe_Read_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     c92:	81 2f       	mov	r24, r17
     c94:	90 2f       	mov	r25, r16
     c96:	9c 01       	movw	r18, r24
     c98:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     c9a:	c1 14       	cp	r12, r1
     c9c:	d1 04       	cpc	r13, r1
     c9e:	39 f0       	breq	.+14     	; 0xcae <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
     ca0:	f6 01       	movw	r30, r12
     ca2:	80 81       	ld	r24, Z
     ca4:	91 81       	ldd	r25, Z+1	; 0x01
     ca6:	e8 1a       	sub	r14, r24
     ca8:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     caa:	c8 0f       	add	r28, r24
     cac:	d9 1f       	adc	r29, r25
     cae:	00 e0       	ldi	r16, 0x00	; 0
     cb0:	10 e0       	ldi	r17, 0x00	; 0
     cb2:	21 c0       	rjmp	.+66     	; 0xcf6 <Pipe_Read_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     cb4:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     cb8:	85 fd       	sbrc	r24, 5
     cba:	15 c0       	rjmp	.+42     	; 0xce6 <Pipe_Read_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     cbc:	80 91 a6 00 	lds	r24, 0x00A6
     cc0:	8e 77       	andi	r24, 0x7E	; 126
     cc2:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     cc6:	c1 14       	cp	r12, r1
     cc8:	d1 04       	cpc	r13, r1
     cca:	49 f0       	breq	.+18     	; 0xcde <Pipe_Read_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
     ccc:	f6 01       	movw	r30, r12
     cce:	80 81       	ld	r24, Z
     cd0:	91 81       	ldd	r25, Z+1	; 0x01
     cd2:	80 0f       	add	r24, r16
     cd4:	91 1f       	adc	r25, r17
     cd6:	91 83       	std	Z+1, r25	; 0x01
     cd8:	80 83       	st	Z, r24
     cda:	84 e0       	ldi	r24, 0x04	; 4
     cdc:	10 c0       	rjmp	.+32     	; 0xcfe <Pipe_Read_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     cde:	82 de       	rcall	.-764    	; 0x9e4 <Pipe_WaitUntilReady>
     ce0:	88 23       	and	r24, r24
     ce2:	49 f0       	breq	.+18     	; 0xcf6 <Pipe_Read_Stream_LE+0x92>
     ce4:	0c c0       	rjmp	.+24     	; 0xcfe <Pipe_Read_Stream_LE+0x9a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     ce6:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     cea:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     cec:	08 94       	sec
     cee:	e1 08       	sbc	r14, r1
     cf0:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
     cf2:	0f 5f       	subi	r16, 0xFF	; 255
     cf4:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     cf6:	e1 14       	cp	r14, r1
     cf8:	f1 04       	cpc	r15, r1
     cfa:	e1 f6       	brne	.-72     	; 0xcb4 <Pipe_Read_Stream_LE+0x50>
     cfc:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	1f 91       	pop	r17
     d04:	0f 91       	pop	r16
     d06:	ff 90       	pop	r15
     d08:	ef 90       	pop	r14
     d0a:	df 90       	pop	r13
     d0c:	cf 90       	pop	r12
     d0e:	bf 90       	pop	r11
     d10:	08 95       	ret

00000d12 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     d12:	af 92       	push	r10
     d14:	bf 92       	push	r11
     d16:	cf 92       	push	r12
     d18:	df 92       	push	r13
     d1a:	ef 92       	push	r14
     d1c:	ff 92       	push	r15
     d1e:	0f 93       	push	r16
     d20:	1f 93       	push	r17
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
     d26:	7c 01       	movw	r14, r24
     d28:	eb 01       	movw	r28, r22
     d2a:	6a 01       	movw	r12, r20
     d2c:	24 c0       	rjmp	.+72     	; 0xd76 <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     d2e:	e8 81       	ld	r30, Y
     d30:	f9 81       	ldd	r31, Y+1	; 0x01
     d32:	be 2e       	mov	r11, r30
     d34:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     d36:	80 81       	ld	r24, Z
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	98 01       	movw	r18, r16
     d3c:	80 17       	cp	r24, r16
     d3e:	91 07       	cpc	r25, r17
     d40:	08 f4       	brcc	.+2      	; 0xd44 <USB_GetNextDescriptorComp+0x32>
     d42:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     d44:	e2 0f       	add	r30, r18
     d46:	f3 1f       	adc	r31, r19
     d48:	f9 83       	std	Y+1, r31	; 0x01
     d4a:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     d4c:	f7 01       	movw	r30, r14
     d4e:	80 81       	ld	r24, Z
     d50:	91 81       	ldd	r25, Z+1	; 0x01
     d52:	82 1b       	sub	r24, r18
     d54:	93 0b       	sbc	r25, r19
     d56:	91 83       	std	Z+1, r25	; 0x01
     d58:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     d5a:	88 81       	ld	r24, Y
     d5c:	99 81       	ldd	r25, Y+1	; 0x01
     d5e:	f6 01       	movw	r30, r12
     d60:	09 95       	icall
     d62:	82 30       	cpi	r24, 0x02	; 2
     d64:	41 f0       	breq	.+16     	; 0xd76 <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     d66:	81 30       	cpi	r24, 0x01	; 1
     d68:	69 f4       	brne	.+26     	; 0xd84 <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
     d6a:	b8 82       	st	Y, r11
     d6c:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
     d6e:	f7 01       	movw	r30, r14
     d70:	11 83       	std	Z+1, r17	; 0x01
     d72:	00 83       	st	Z, r16
     d74:	07 c0       	rjmp	.+14     	; 0xd84 <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     d76:	f7 01       	movw	r30, r14
     d78:	00 81       	ld	r16, Z
     d7a:	11 81       	ldd	r17, Z+1	; 0x01
     d7c:	01 15       	cp	r16, r1
     d7e:	11 05       	cpc	r17, r1
     d80:	b1 f6       	brne	.-84     	; 0xd2e <USB_GetNextDescriptorComp+0x1c>
     d82:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     d84:	df 91       	pop	r29
     d86:	cf 91       	pop	r28
     d88:	1f 91       	pop	r17
     d8a:	0f 91       	pop	r16
     d8c:	ff 90       	pop	r15
     d8e:	ef 90       	pop	r14
     d90:	df 90       	pop	r13
     d92:	cf 90       	pop	r12
     d94:	bf 90       	pop	r11
     d96:	af 90       	pop	r10
     d98:	08 95       	ret

00000d9a <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     d9a:	cf 92       	push	r12
     d9c:	df 92       	push	r13
     d9e:	ef 92       	push	r14
     da0:	ff 92       	push	r15
     da2:	0f 93       	push	r16
     da4:	1f 93       	push	r17
     da6:	df 93       	push	r29
     da8:	cf 93       	push	r28
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	29 97       	sbiw	r28, 0x09	; 9
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	f8 94       	cli
     db4:	de bf       	out	0x3e, r29	; 62
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	cd bf       	out	0x3d, r28	; 61
     dba:	6b 01       	movw	r12, r22
     dbc:	8a 01       	movw	r16, r20
     dbe:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     dc0:	90 e8       	ldi	r25, 0x80	; 128
     dc2:	90 93 29 01 	sts	0x0129, r25
     dc6:	96 e0       	ldi	r25, 0x06	; 6
     dc8:	90 93 2a 01 	sts	0x012A, r25
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	01 97       	sbiw	r24, 0x01	; 1
     dd0:	92 60       	ori	r25, 0x02	; 2
     dd2:	90 93 2c 01 	sts	0x012C, r25
     dd6:	80 93 2b 01 	sts	0x012B, r24
     dda:	10 92 2e 01 	sts	0x012E, r1
     dde:	10 92 2d 01 	sts	0x012D, r1
     de2:	89 e0       	ldi	r24, 0x09	; 9
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	90 93 30 01 	sts	0x0130, r25
     dea:	80 93 2f 01 	sts	0x012F, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     dee:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     df2:	ce 01       	movw	r24, r28
     df4:	01 96       	adiw	r24, 0x01	; 1
     df6:	55 d0       	rcall	.+170    	; 0xea2 <USB_Host_SendControlRequest>
     df8:	28 2f       	mov	r18, r24
     dfa:	88 23       	and	r24, r24
     dfc:	c1 f4       	brne	.+48     	; 0xe2e <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	9c 81       	ldd	r25, Y+4	; 0x04
     e02:	f6 01       	movw	r30, r12
     e04:	91 83       	std	Z+1, r25	; 0x01
     e06:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     e08:	e8 16       	cp	r14, r24
     e0a:	f9 06       	cpc	r15, r25
     e0c:	10 f4       	brcc	.+4      	; 0xe12 <USB_Host_GetDeviceConfigDescriptor+0x78>
     e0e:	25 e0       	ldi	r18, 0x05	; 5
     e10:	0e c0       	rjmp	.+28     	; 0xe2e <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     e12:	90 93 30 01 	sts	0x0130, r25
     e16:	80 93 2f 01 	sts	0x012F, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     e1a:	c8 01       	movw	r24, r16
     e1c:	42 d0       	rcall	.+132    	; 0xea2 <USB_Host_SendControlRequest>
     e1e:	28 2f       	mov	r18, r24
     e20:	88 23       	and	r24, r24
     e22:	29 f4       	brne	.+10     	; 0xe2e <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     e24:	f8 01       	movw	r30, r16
     e26:	81 81       	ldd	r24, Z+1	; 0x01
     e28:	82 30       	cpi	r24, 0x02	; 2
     e2a:	09 f0       	breq	.+2      	; 0xe2e <USB_Host_GetDeviceConfigDescriptor+0x94>
     e2c:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     e2e:	82 2f       	mov	r24, r18
     e30:	29 96       	adiw	r28, 0x09	; 9
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	f8 94       	cli
     e36:	de bf       	out	0x3e, r29	; 62
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	cd bf       	out	0x3d, r28	; 61
     e3c:	cf 91       	pop	r28
     e3e:	df 91       	pop	r29
     e40:	1f 91       	pop	r17
     e42:	0f 91       	pop	r16
     e44:	ff 90       	pop	r15
     e46:	ef 90       	pop	r14
     e48:	df 90       	pop	r13
     e4a:	cf 90       	pop	r12
     e4c:	08 95       	ret

00000e4e <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     e4e:	08 95       	ret

00000e50 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     e50:	1f 93       	push	r17
     e52:	cf 93       	push	r28
     e54:	df 93       	push	r29
     e56:	18 2f       	mov	r17, r24
     e58:	c8 ee       	ldi	r28, 0xE8	; 232
     e5a:	d3 e0       	ldi	r29, 0x03	; 3
     e5c:	09 c0       	rjmp	.+18     	; 0xe70 <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	65 db       	rcall	.-2358   	; 0x52c <USB_Host_WaitMS>
     e62:	88 23       	and	r24, r24
     e64:	d1 f4       	brne	.+52     	; 0xe9a <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     e66:	20 97       	sbiw	r28, 0x00	; 0
     e68:	11 f4       	brne	.+4      	; 0xe6e <USB_Host_WaitForIOS+0x1e>
     e6a:	84 e0       	ldi	r24, 0x04	; 4
     e6c:	16 c0       	rjmp	.+44     	; 0xe9a <USB_Host_WaitForIOS+0x4a>
     e6e:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     e70:	11 23       	and	r17, r17
     e72:	29 f4       	brne	.+10     	; 0xe7e <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     e74:	80 91 a6 00 	lds	r24, 0x00A6
     e78:	83 ff       	sbrs	r24, 3
     e7a:	f1 cf       	rjmp	.-30     	; 0xe5e <USB_Host_WaitForIOS+0xe>
     e7c:	0d c0       	rjmp	.+26     	; 0xe98 <USB_Host_WaitForIOS+0x48>
     e7e:	11 30       	cpi	r17, 0x01	; 1
     e80:	29 f4       	brne	.+10     	; 0xe8c <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     e82:	80 91 a6 00 	lds	r24, 0x00A6
     e86:	80 ff       	sbrs	r24, 0
     e88:	ea cf       	rjmp	.-44     	; 0xe5e <USB_Host_WaitForIOS+0xe>
     e8a:	06 c0       	rjmp	.+12     	; 0xe98 <USB_Host_WaitForIOS+0x48>
     e8c:	12 30       	cpi	r17, 0x02	; 2
     e8e:	39 f7       	brne	.-50     	; 0xe5e <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     e90:	80 91 a6 00 	lds	r24, 0x00A6
     e94:	82 ff       	sbrs	r24, 2
     e96:	e3 cf       	rjmp	.-58     	; 0xe5e <USB_Host_WaitForIOS+0xe>
     e98:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	1f 91       	pop	r17
     ea0:	08 95       	ret

00000ea2 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     ea2:	ff 92       	push	r15
     ea4:	0f 93       	push	r16
     ea6:	1f 93       	push	r17
     ea8:	cf 93       	push	r28
     eaa:	df 93       	push	r29
     eac:	18 2f       	mov	r17, r24
     eae:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     eb0:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     eb4:	c0 91 2f 01 	lds	r28, 0x012F
     eb8:	d0 91 30 01 	lds	r29, 0x0130
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     ebc:	80 91 9e 00 	lds	r24, 0x009E
     ec0:	81 60       	ori	r24, 0x01	; 1
     ec2:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	31 db       	rcall	.-2462   	; 0x52c <USB_Host_WaitMS>
     eca:	98 2f       	mov	r25, r24
     ecc:	88 23       	and	r24, r24
     ece:	09 f0       	breq	.+2      	; 0xed2 <USB_Host_SendControlRequest+0x30>
     ed0:	ee c0       	rjmp	.+476    	; 0x10ae <USB_Host_SendControlRequest+0x20c>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     ed2:	80 91 aa 00 	lds	r24, 0x00AA
     ed6:	8f 7c       	andi	r24, 0xCF	; 207
     ed8:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     edc:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     ee0:	80 91 a6 00 	lds	r24, 0x00A6
     ee4:	8f 7e       	andi	r24, 0xEF	; 239
     ee6:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     eea:	80 91 a9 00 	lds	r24, 0x00A9
     eee:	8f 7b       	andi	r24, 0xBF	; 191
     ef0:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearError();

	Pipe_Unfreeze();

	Pipe_Write_8(USB_ControlRequest.bmRequestType);
     ef4:	80 91 29 01 	lds	r24, 0x0129
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     ef8:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
     efc:	80 91 2a 01 	lds	r24, 0x012A
     f00:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
     f04:	80 91 2b 01 	lds	r24, 0x012B
     f08:	90 91 2c 01 	lds	r25, 0x012C
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
     f0c:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
     f10:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
     f14:	80 91 2d 01 	lds	r24, 0x012D
     f18:	90 91 2e 01 	lds	r25, 0x012E
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
     f1c:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
     f20:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
     f24:	80 91 2f 01 	lds	r24, 0x012F
     f28:	90 91 30 01 	lds	r25, 0x0130
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
     f2c:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
     f30:	90 93 af 00 	sts	0x00AF, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     f34:	80 91 a6 00 	lds	r24, 0x00A6
     f38:	87 77       	andi	r24, 0x77	; 119
     f3a:	80 93 a6 00 	sts	0x00A6, r24

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	87 df       	rcall	.-242    	; 0xe50 <USB_Host_WaitForIOS>
     f42:	98 2f       	mov	r25, r24
     f44:	88 23       	and	r24, r24
     f46:	09 f0       	breq	.+2      	; 0xf4a <USB_Host_SendControlRequest+0xa8>
     f48:	b2 c0       	rjmp	.+356    	; 0x10ae <USB_Host_SendControlRequest+0x20c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f4a:	80 91 a9 00 	lds	r24, 0x00A9
     f4e:	80 64       	ori	r24, 0x40	; 64
     f50:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	ea da       	rcall	.-2604   	; 0x52c <USB_Host_WaitMS>
     f58:	98 2f       	mov	r25, r24
     f5a:	88 23       	and	r24, r24
     f5c:	09 f0       	breq	.+2      	; 0xf60 <USB_Host_SendControlRequest+0xbe>
     f5e:	a7 c0       	rjmp	.+334    	; 0x10ae <USB_Host_SendControlRequest+0x20c>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
     f60:	21 2f       	mov	r18, r17
     f62:	30 2f       	mov	r19, r16
     f64:	c9 01       	movw	r24, r18
     f66:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     f68:	80 91 29 01 	lds	r24, 0x0129
     f6c:	87 ff       	sbrs	r24, 7
     f6e:	52 c0       	rjmp	.+164    	; 0x1014 <USB_Host_SendControlRequest+0x172>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f70:	80 91 aa 00 	lds	r24, 0x00AA
     f74:	8f 7c       	andi	r24, 0xCF	; 207
     f76:	80 61       	ori	r24, 0x10	; 16
     f78:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     f7c:	01 15       	cp	r16, r1
     f7e:	11 05       	cpc	r17, r1
     f80:	69 f5       	brne	.+90     	; 0xfdc <USB_Host_SendControlRequest+0x13a>
     f82:	2e c0       	rjmp	.+92     	; 0xfe0 <USB_Host_SendControlRequest+0x13e>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f84:	80 91 a9 00 	lds	r24, 0x00A9
     f88:	8f 7b       	andi	r24, 0xBF	; 191
     f8a:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	5f df       	rcall	.-322    	; 0xe50 <USB_Host_WaitForIOS>
     f92:	98 2f       	mov	r25, r24
     f94:	88 23       	and	r24, r24
     f96:	09 f0       	breq	.+2      	; 0xf9a <USB_Host_SendControlRequest+0xf8>
     f98:	8a c0       	rjmp	.+276    	; 0x10ae <USB_Host_SendControlRequest+0x20c>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f9a:	80 91 f6 00 	lds	r24, 0x00F6
     f9e:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
     fa2:	89 2b       	or	r24, r25
     fa4:	49 f4       	brne	.+18     	; 0xfb8 <USB_Host_SendControlRequest+0x116>
     fa6:	c0 e0       	ldi	r28, 0x00	; 0
     fa8:	d0 e0       	ldi	r29, 0x00	; 0
     faa:	06 c0       	rjmp	.+12     	; 0xfb8 <USB_Host_SendControlRequest+0x116>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     fac:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
     fb0:	f8 01       	movw	r30, r16
     fb2:	81 93       	st	Z+, r24
     fb4:	8f 01       	movw	r16, r30
					DataLen--;
     fb6:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     fb8:	80 91 f6 00 	lds	r24, 0x00F6
     fbc:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
     fc0:	89 2b       	or	r24, r25
     fc2:	11 f0       	breq	.+4      	; 0xfc8 <USB_Host_SendControlRequest+0x126>
     fc4:	20 97       	sbiw	r28, 0x00	; 0
     fc6:	91 f7       	brne	.-28     	; 0xfac <USB_Host_SendControlRequest+0x10a>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     fc8:	80 91 a9 00 	lds	r24, 0x00A9
     fcc:	80 64       	ori	r24, 0x40	; 64
     fce:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     fd2:	80 91 a6 00 	lds	r24, 0x00A6
     fd6:	8e 77       	andi	r24, 0x7E	; 126
     fd8:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
     fdc:	20 97       	sbiw	r28, 0x00	; 0
     fde:	91 f6       	brne	.-92     	; 0xf84 <USB_Host_SendControlRequest+0xe2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fe0:	80 91 aa 00 	lds	r24, 0x00AA
     fe4:	8f 7c       	andi	r24, 0xCF	; 207
     fe6:	80 62       	ori	r24, 0x20	; 32
     fe8:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fec:	80 91 a9 00 	lds	r24, 0x00A9
     ff0:	8f 7b       	andi	r24, 0xBF	; 191
     ff2:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     ff6:	82 e0       	ldi	r24, 0x02	; 2
     ff8:	2b df       	rcall	.-426    	; 0xe50 <USB_Host_WaitForIOS>
     ffa:	98 2f       	mov	r25, r24
     ffc:	88 23       	and	r24, r24
     ffe:	09 f0       	breq	.+2      	; 0x1002 <USB_Host_SendControlRequest+0x160>
    1000:	56 c0       	rjmp	.+172    	; 0x10ae <USB_Host_SendControlRequest+0x20c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1002:	80 91 a6 00 	lds	r24, 0x00A6
    1006:	8b 77       	andi	r24, 0x7B	; 123
    1008:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    100c:	82 e0       	ldi	r24, 0x02	; 2
    100e:	20 df       	rcall	.-448    	; 0xe50 <USB_Host_WaitForIOS>
    1010:	98 2f       	mov	r25, r24
    1012:	4d c0       	rjmp	.+154    	; 0x10ae <USB_Host_SendControlRequest+0x20c>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    1014:	01 15       	cp	r16, r1
    1016:	11 05       	cpc	r17, r1
    1018:	a9 f1       	breq	.+106    	; 0x1084 <USB_Host_SendControlRequest+0x1e2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    101a:	80 91 aa 00 	lds	r24, 0x00AA
    101e:	8f 7c       	andi	r24, 0xCF	; 207
    1020:	80 62       	ori	r24, 0x20	; 32
    1022:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1026:	80 91 a9 00 	lds	r24, 0x00A9
    102a:	8f 7b       	andi	r24, 0xBF	; 191
    102c:	80 93 a9 00 	sts	0x00A9, r24
    1030:	1d c0       	rjmp	.+58     	; 0x106c <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1032:	82 e0       	ldi	r24, 0x02	; 2
    1034:	0d df       	rcall	.-486    	; 0xe50 <USB_Host_WaitForIOS>
    1036:	98 2f       	mov	r25, r24
    1038:	88 23       	and	r24, r24
    103a:	c9 f5       	brne	.+114    	; 0x10ae <USB_Host_SendControlRequest+0x20c>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    103c:	80 91 23 01 	lds	r24, 0x0123
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	07 c0       	rjmp	.+14     	; 0x1054 <USB_Host_SendControlRequest+0x1b2>
				{
					Pipe_Write_8(*(DataStream++));
    1046:	f8 01       	movw	r30, r16
    1048:	81 91       	ld	r24, Z+
    104a:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    104c:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1050:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1052:	39 f0       	breq	.+14     	; 0x1062 <USB_Host_SendControlRequest+0x1c0>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1054:	80 91 f6 00 	lds	r24, 0x00F6
    1058:	90 91 f7 00 	lds	r25, 0x00F7
    105c:	82 17       	cp	r24, r18
    105e:	93 07       	cpc	r25, r19
    1060:	90 f3       	brcs	.-28     	; 0x1046 <USB_Host_SendControlRequest+0x1a4>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1062:	80 91 a6 00 	lds	r24, 0x00A6
    1066:	8b 77       	andi	r24, 0x7B	; 123
    1068:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    106c:	20 97       	sbiw	r28, 0x00	; 0
    106e:	09 f7       	brne	.-62     	; 0x1032 <USB_Host_SendControlRequest+0x190>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1070:	82 e0       	ldi	r24, 0x02	; 2
    1072:	ee de       	rcall	.-548    	; 0xe50 <USB_Host_WaitForIOS>
    1074:	98 2f       	mov	r25, r24
    1076:	88 23       	and	r24, r24
    1078:	d1 f4       	brne	.+52     	; 0x10ae <USB_Host_SendControlRequest+0x20c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    107a:	80 91 a9 00 	lds	r24, 0x00A9
    107e:	80 64       	ori	r24, 0x40	; 64
    1080:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1084:	80 91 aa 00 	lds	r24, 0x00AA
    1088:	8f 7c       	andi	r24, 0xCF	; 207
    108a:	80 61       	ori	r24, 0x10	; 16
    108c:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1090:	80 91 a9 00 	lds	r24, 0x00A9
    1094:	8f 7b       	andi	r24, 0xBF	; 191
    1096:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	d9 de       	rcall	.-590    	; 0xe50 <USB_Host_WaitForIOS>
    109e:	98 2f       	mov	r25, r24
    10a0:	88 23       	and	r24, r24
    10a2:	29 f4       	brne	.+10     	; 0x10ae <USB_Host_SendControlRequest+0x20c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    10a4:	80 91 a6 00 	lds	r24, 0x00A6
    10a8:	8e 77       	andi	r24, 0x7E	; 126
    10aa:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10ae:	80 91 a9 00 	lds	r24, 0x00A9
    10b2:	80 64       	ori	r24, 0x40	; 64
    10b4:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    10b8:	f0 fc       	sbrc	r15, 0
    10ba:	05 c0       	rjmp	.+10     	; 0x10c6 <USB_Host_SendControlRequest+0x224>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    10bc:	80 91 9e 00 	lds	r24, 0x009E
    10c0:	8e 7f       	andi	r24, 0xFE	; 254
    10c2:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    10cc:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    10d0:	89 2f       	mov	r24, r25
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	1f 91       	pop	r17
    10d8:	0f 91       	pop	r16
    10da:	ff 90       	pop	r15
    10dc:	08 95       	ret

000010de <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    10de:	1f 93       	push	r17
    10e0:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    10e2:	10 92 29 01 	sts	0x0129, r1
    10e6:	89 e0       	ldi	r24, 0x09	; 9
    10e8:	80 93 2a 01 	sts	0x012A, r24
    10ec:	10 93 2b 01 	sts	0x012B, r17
    10f0:	10 92 2c 01 	sts	0x012C, r1
    10f4:	10 92 2e 01 	sts	0x012E, r1
    10f8:	10 92 2d 01 	sts	0x012D, r1
    10fc:	10 92 30 01 	sts	0x0130, r1
    1100:	10 92 2f 01 	sts	0x012F, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1104:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	ca de       	rcall	.-620    	; 0xea2 <USB_Host_SendControlRequest>
    110e:	88 23       	and	r24, r24
    1110:	49 f4       	brne	.+18     	; 0x1124 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1112:	10 93 27 01 	sts	0x0127, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1116:	11 23       	and	r17, r17
    1118:	11 f4       	brne	.+4      	; 0x111e <USB_Host_SetDeviceConfiguration+0x40>
    111a:	9a e0       	ldi	r25, 0x0A	; 10
    111c:	01 c0       	rjmp	.+2      	; 0x1120 <USB_Host_SetDeviceConfiguration+0x42>
    111e:	9b e0       	ldi	r25, 0x0B	; 11
    1120:	90 93 31 01 	sts	0x0131, r25
	}

	return ErrorCode;
}
    1124:	1f 91       	pop	r17
    1126:	08 95       	ret

00001128 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1128:	ff 92       	push	r15
    112a:	0f 93       	push	r16
    112c:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    112e:	07 ea       	ldi	r16, 0xA7	; 167
    1130:	10 e0       	ldi	r17, 0x00	; 0
    1132:	f8 01       	movw	r30, r16
    1134:	f0 80       	ld	r15, Z
    1136:	f7 e0       	ldi	r31, 0x07	; 7
    1138:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    113a:	f8 01       	movw	r30, r16
    113c:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    113e:	93 da       	rcall	.-2778   	; 0x666 <USB_Host_ProcessNextHostState>
    1140:	f8 01       	movw	r30, r16
    1142:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1144:	1f 91       	pop	r17
    1146:	0f 91       	pop	r16
    1148:	ff 90       	pop	r15
    114a:	08 95       	ret

0000114c <USB_GetHIDReportSize>:

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
    114c:	e4 2f       	mov	r30, r20
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	ee 0f       	add	r30, r30
    1152:	ff 1f       	adc	r31, r31
    1154:	ef 56       	subi	r30, 0x6F	; 111
    1156:	fc 4f       	sbci	r31, 0xFC	; 252
    1158:	e8 0f       	add	r30, r24
    115a:	f9 1f       	adc	r31, r25
    115c:	dc 01       	movw	r26, r24
    115e:	a0 57       	subi	r26, 0x70	; 112
    1160:	bc 4f       	sbci	r27, 0xFC	; 252
    1162:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
    1164:	20 81       	ld	r18, Z
    1166:	31 81       	ldd	r19, Z+1	; 0x01

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
    1168:	8c 91       	ld	r24, X
    116a:	86 17       	cp	r24, r22
    116c:	89 f4       	brne	.+34     	; 0x1190 <USB_GetHIDReportSize+0x44>
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
    116e:	40 e0       	ldi	r20, 0x00	; 0
    1170:	50 e0       	ldi	r21, 0x00	; 0
    1172:	c9 01       	movw	r24, r18
    1174:	87 70       	andi	r24, 0x07	; 7
    1176:	90 70       	andi	r25, 0x00	; 0
    1178:	89 2b       	or	r24, r25
    117a:	11 f0       	breq	.+4      	; 0x1180 <USB_GetHIDReportSize+0x34>
    117c:	41 e0       	ldi	r20, 0x01	; 1
    117e:	50 e0       	ldi	r21, 0x00	; 0
    1180:	63 e0       	ldi	r22, 0x03	; 3
    1182:	36 95       	lsr	r19
    1184:	27 95       	ror	r18
    1186:	6a 95       	dec	r22
    1188:	e1 f7       	brne	.-8      	; 0x1182 <USB_GetHIDReportSize+0x36>
    118a:	24 0f       	add	r18, r20
    118c:	35 1f       	adc	r19, r21
    118e:	07 c0       	rjmp	.+14     	; 0x119e <USB_GetHIDReportSize+0x52>

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
    1190:	9f 5f       	subi	r25, 0xFF	; 255
    1192:	37 96       	adiw	r30, 0x07	; 7
    1194:	17 96       	adiw	r26, 0x07	; 7
    1196:	9a 30       	cpi	r25, 0x0A	; 10
    1198:	29 f7       	brne	.-54     	; 0x1164 <USB_GetHIDReportSize+0x18>
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	30 e0       	ldi	r19, 0x00	; 0
		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
}
    119e:	c9 01       	movw	r24, r18
    11a0:	08 95       	ret

000011a2 <DCOMP_HID_Host_NextHIDInterface>:

	return HID_ENUMERROR_NoError;
}

static uint8_t DCOMP_HID_Host_NextHIDInterface(void* const CurrentDescriptor)
{
    11a2:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    11a4:	81 81       	ldd	r24, Z+1	; 0x01
    11a6:	84 30       	cpi	r24, 0x04	; 4
    11a8:	29 f4       	brne	.+10     	; 0x11b4 <DCOMP_HID_Host_NextHIDInterface+0x12>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
    11aa:	85 81       	ldd	r24, Z+5	; 0x05
    11ac:	83 30       	cpi	r24, 0x03	; 3
    11ae:	11 f4       	brne	.+4      	; 0x11b4 <DCOMP_HID_Host_NextHIDInterface+0x12>
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	08 95       	ret
    11b4:	82 e0       	ldi	r24, 0x02	; 2
		  return DESCRIPTOR_SEARCH_Found;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    11b6:	08 95       	ret

000011b8 <DCOMP_HID_Host_NextHIDDescriptor>:

static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
    11b8:	fc 01       	movw	r30, r24
    11ba:	81 81       	ldd	r24, Z+1	; 0x01
    11bc:	81 32       	cpi	r24, 0x21	; 33
    11be:	11 f4       	brne	.+4      	; 0x11c4 <DCOMP_HID_Host_NextHIDDescriptor+0xc>
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	08 95       	ret
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
    11c4:	84 30       	cpi	r24, 0x04	; 4
    11c6:	11 f0       	breq	.+4      	; 0x11cc <DCOMP_HID_Host_NextHIDDescriptor+0x14>
    11c8:	82 e0       	ldi	r24, 0x02	; 2
    11ca:	08 95       	ret
    11cc:	81 e0       	ldi	r24, 0x01	; 1
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}
    11ce:	08 95       	ret

000011d0 <HID_Host_IsReportReceived>:
		return USB_Host_SendControlRequest(Buffer);
	}
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    11d0:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    11d2:	80 91 31 01 	lds	r24, 0x0131
    11d6:	8b 30       	cpi	r24, 0x0B	; 11
    11d8:	a1 f4       	brne	.+40     	; 0x1202 <HID_Host_IsReportReceived+0x32>
    11da:	87 81       	ldd	r24, Z+7	; 0x07
    11dc:	88 23       	and	r24, r24
    11de:	89 f0       	breq	.+34     	; 0x1202 <HID_Host_IsReportReceived+0x32>
	  return false;

	bool ReportReceived;

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipeNumber);
    11e0:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    11e2:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11e6:	80 91 a9 00 	lds	r24, 0x00A9
    11ea:	8f 7b       	andi	r24, 0xBF	; 191
    11ec:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    11f0:	90 91 a6 00 	lds	r25, 0x00A6
    11f4:	91 70       	andi	r25, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11f6:	80 91 a9 00 	lds	r24, 0x00A9
    11fa:	80 64       	ori	r24, 0x40	; 64
    11fc:	80 93 a9 00 	sts	0x00A9, r24
    1200:	01 c0       	rjmp	.+2      	; 0x1204 <HID_Host_IsReportReceived+0x34>

	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
    1202:	90 e0       	ldi	r25, 0x00	; 0
}
    1204:	89 2f       	mov	r24, r25
    1206:	08 95       	ret

00001208 <HID_Host_SetBootProtocol>:

uint8_t HID_Host_SetBootProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    1208:	cf 93       	push	r28
    120a:	df 93       	push	r29
    120c:	ec 01       	movw	r28, r24
	uint8_t ErrorCode;

	if (!(HIDInterfaceInfo->State.SupportsBootProtocol))
    120e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1210:	88 23       	and	r24, r24
    1212:	11 f4       	brne	.+4      	; 0x1218 <HID_Host_SetBootProtocol+0x10>
    1214:	90 e8       	ldi	r25, 0x80	; 128
    1216:	1f c0       	rjmp	.+62     	; 0x1256 <HID_Host_SetBootProtocol+0x4e>
	  return HID_ERROR_LOGICAL;

	USB_ControlRequest = (USB_Request_Header_t)
    1218:	88 85       	ldd	r24, Y+8	; 0x08
    121a:	91 e2       	ldi	r25, 0x21	; 33
    121c:	90 93 29 01 	sts	0x0129, r25
    1220:	9b e0       	ldi	r25, 0x0B	; 11
    1222:	90 93 2a 01 	sts	0x012A, r25
    1226:	10 92 2c 01 	sts	0x012C, r1
    122a:	10 92 2b 01 	sts	0x012B, r1
    122e:	80 93 2d 01 	sts	0x012D, r24
    1232:	10 92 2e 01 	sts	0x012E, r1
    1236:	10 92 30 01 	sts	0x0130, r1
    123a:	10 92 2f 01 	sts	0x012F, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    123e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	2d de       	rcall	.-934    	; 0xea2 <USB_Host_SendControlRequest>
    1248:	98 2f       	mov	r25, r24
    124a:	88 23       	and	r24, r24
    124c:	21 f4       	brne	.+8      	; 0x1256 <HID_Host_SetBootProtocol+0x4e>
	  return ErrorCode;

	HIDInterfaceInfo->State.LargestReportSize = 8;
    124e:	88 e0       	ldi	r24, 0x08	; 8
    1250:	8a 8b       	std	Y+18, r24	; 0x12
	HIDInterfaceInfo->State.UsingBootProtocol = true;
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	8f 87       	std	Y+15, r24	; 0x0f

	return HOST_SENDCONTROL_Successful;
}
    1256:	89 2f       	mov	r24, r25
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	08 95       	ret

0000125e <HID_Host_ReceiveReport>:
}
#endif

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	dc 01       	movw	r26, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1264:	80 91 31 01 	lds	r24, 0x0131
    1268:	8b 30       	cpi	r24, 0x0B	; 11
    126a:	09 f0       	breq	.+2      	; 0x126e <HID_Host_ReceiveReport+0x10>
    126c:	3f c0       	rjmp	.+126    	; 0x12ec <HID_Host_ReceiveReport+0x8e>
    126e:	17 96       	adiw	r26, 0x07	; 7
    1270:	8c 91       	ld	r24, X
    1272:	17 97       	sbiw	r26, 0x07	; 7
    1274:	88 23       	and	r24, r24
    1276:	d1 f1       	breq	.+116    	; 0x12ec <HID_Host_ReceiveReport+0x8e>
	  return PIPE_READYWAIT_DeviceDisconnected;

	uint8_t ErrorCode;

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipeNumber);
    1278:	8c 91       	ld	r24, X
    127a:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    127e:	80 91 a9 00 	lds	r24, 0x00A9
    1282:	8f 7b       	andi	r24, 0xBF	; 191
    1284:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Unfreeze();

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;
    1288:	eb 01       	movw	r28, r22

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
    128a:	1f 96       	adiw	r26, 0x0f	; 15
    128c:	8c 91       	ld	r24, X
    128e:	1f 97       	sbiw	r26, 0x0f	; 15
    1290:	88 23       	and	r24, r24
    1292:	b1 f4       	brne	.+44     	; 0x12c0 <HID_Host_ReceiveReport+0x62>
	{
		uint8_t ReportID = 0;

		if (HIDInterfaceInfo->Config.HIDParserData->UsingReportIDs)
    1294:	15 96       	adiw	r26, 0x05	; 5
    1296:	ed 91       	ld	r30, X+
    1298:	fc 91       	ld	r31, X
    129a:	16 97       	sbiw	r26, 0x06	; 6
    129c:	e8 52       	subi	r30, 0x28	; 40
    129e:	fc 4f       	sbci	r31, 0xFC	; 252
    12a0:	80 81       	ld	r24, Z
    12a2:	88 23       	and	r24, r24
    12a4:	11 f4       	brne	.+4      	; 0x12aa <HID_Host_ReceiveReport+0x4c>
    12a6:	60 e0       	ldi	r22, 0x00	; 0
    12a8:	03 c0       	rjmp	.+6      	; 0x12b0 <HID_Host_ReceiveReport+0x52>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    12aa:	60 91 af 00 	lds	r22, 0x00AF
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
    12ae:	69 93       	st	Y+, r22
		}

		ReportSize = USB_GetHIDReportSize(HIDInterfaceInfo->Config.HIDParserData, ReportID, HID_REPORT_ITEM_In);
    12b0:	15 96       	adiw	r26, 0x05	; 5
    12b2:	8d 91       	ld	r24, X+
    12b4:	9c 91       	ld	r25, X
    12b6:	16 97       	sbiw	r26, 0x06	; 6
    12b8:	40 e0       	ldi	r20, 0x00	; 0
    12ba:	48 df       	rcall	.-368    	; 0x114c <USB_GetHIDReportSize>
    12bc:	bc 01       	movw	r22, r24
    12be:	04 c0       	rjmp	.+8      	; 0x12c8 <HID_Host_ReceiveReport+0x6a>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    12c0:	60 91 f6 00 	lds	r22, 0x00F6
    12c4:	70 91 f7 00 	lds	r23, 0x00F7
#endif
	{
		ReportSize = Pipe_BytesInPipe();
	}

	if ((ErrorCode = Pipe_Read_Stream_LE(BufferPos, ReportSize, NULL)) != PIPE_RWSTREAM_NoError)
    12c8:	ce 01       	movw	r24, r28
    12ca:	40 e0       	ldi	r20, 0x00	; 0
    12cc:	50 e0       	ldi	r21, 0x00	; 0
    12ce:	ca dc       	rcall	.-1644   	; 0xc64 <Pipe_Read_Stream_LE>
    12d0:	98 2f       	mov	r25, r24
    12d2:	88 23       	and	r24, r24
    12d4:	61 f4       	brne	.+24     	; 0x12ee <HID_Host_ReceiveReport+0x90>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    12d6:	80 91 a6 00 	lds	r24, 0x00A6
    12da:	8e 77       	andi	r24, 0x7E	; 126
    12dc:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    12e0:	80 91 a9 00 	lds	r24, 0x00A9
    12e4:	80 64       	ori	r24, 0x40	; 64
    12e6:	80 93 a9 00 	sts	0x00A9, r24
    12ea:	01 c0       	rjmp	.+2      	; 0x12ee <HID_Host_ReceiveReport+0x90>
	  return ErrorCode;

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    12ec:	92 e0       	ldi	r25, 0x02	; 2
}
    12ee:	89 2f       	mov	r24, r25
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	08 95       	ret

000012f6 <HID_Host_ConfigurePipes>:
#include "HID.h"

uint8_t HID_Host_ConfigurePipes(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    12f6:	2f 92       	push	r2
    12f8:	3f 92       	push	r3
    12fa:	4f 92       	push	r4
    12fc:	5f 92       	push	r5
    12fe:	6f 92       	push	r6
    1300:	7f 92       	push	r7
    1302:	8f 92       	push	r8
    1304:	9f 92       	push	r9
    1306:	af 92       	push	r10
    1308:	bf 92       	push	r11
    130a:	cf 92       	push	r12
    130c:	df 92       	push	r13
    130e:	ef 92       	push	r14
    1310:	ff 92       	push	r15
    1312:	0f 93       	push	r16
    1314:	1f 93       	push	r17
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	00 d0       	rcall	.+0      	; 0x131c <HID_Host_ConfigurePipes+0x26>
    131c:	00 d0       	rcall	.+0      	; 0x131e <HID_Host_ConfigurePipes+0x28>
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	6c 01       	movw	r12, r24
    1324:	7a 83       	std	Y+2, r23	; 0x02
    1326:	69 83       	std	Y+1, r22	; 0x01
    1328:	5c 83       	std	Y+4, r21	; 0x04
    132a:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    132c:	07 96       	adiw	r24, 0x07	; 7
    132e:	fc 01       	movw	r30, r24
    1330:	8c e0       	ldi	r24, 0x0C	; 12
    1332:	df 01       	movw	r26, r30
    1334:	1d 92       	st	X+, r1
    1336:	8a 95       	dec	r24
    1338:	e9 f7       	brne	.-6      	; 0x1334 <HID_Host_ConfigurePipes+0x3e>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    133a:	eb 81       	ldd	r30, Y+3	; 0x03
    133c:	fc 81       	ldd	r31, Y+4	; 0x04
    133e:	81 81       	ldd	r24, Z+1	; 0x01
    1340:	82 30       	cpi	r24, 0x02	; 2
    1342:	11 f0       	breq	.+4      	; 0x1348 <HID_Host_ConfigurePipes+0x52>
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	aa c0       	rjmp	.+340    	; 0x149c <HID_Host_ConfigurePipes+0x1a6>
    1348:	66 24       	eor	r6, r6
    134a:	77 24       	eor	r7, r7
    134c:	aa 24       	eor	r10, r10
    134e:	bb 24       	eor	r11, r11
    1350:	44 24       	eor	r4, r4
    1352:	55 24       	eor	r5, r5
    1354:	22 24       	eor	r2, r2
    1356:	33 24       	eor	r3, r3
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    1358:	23 e0       	ldi	r18, 0x03	; 3
    135a:	e2 2e       	mov	r14, r18
    135c:	f1 2c       	mov	r15, r1
    135e:	ec 0e       	add	r14, r28
    1360:	fd 1e       	adc	r15, r29
    1362:	8e 01       	movw	r16, r28
    1364:	0f 5f       	subi	r16, 0xFF	; 255
    1366:	1f 4f       	sbci	r17, 0xFF	; 255
    1368:	41 14       	cp	r4, r1
    136a:	51 04       	cpc	r5, r1
    136c:	39 f0       	breq	.+14     	; 0x137c <HID_Host_ConfigurePipes+0x86>
    136e:	c8 01       	movw	r24, r16
    1370:	b7 01       	movw	r22, r14
    1372:	45 e6       	ldi	r20, 0x65	; 101
    1374:	5a e0       	ldi	r21, 0x0A	; 10
    1376:	cd dc       	rcall	.-1638   	; 0xd12 <USB_GetNextDescriptorComp>
    1378:	88 23       	and	r24, r24
    137a:	21 f1       	breq	.+72     	; 0x13c4 <HID_Host_ConfigurePipes+0xce>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_HID_Host_NextHIDInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (DataINEndpoint || DataOUTEndpoint)
    137c:	61 14       	cp	r6, r1
    137e:	71 04       	cpc	r7, r1
    1380:	79 f5       	brne	.+94     	; 0x13e0 <HID_Host_ConfigurePipes+0xea>
    1382:	a1 14       	cp	r10, r1
    1384:	b1 04       	cpc	r11, r1
    1386:	61 f5       	brne	.+88     	; 0x13e0 <HID_Host_ConfigurePipes+0xea>
			  break;

			do
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1388:	c8 01       	movw	r24, r16
    138a:	b7 01       	movw	r22, r14
    138c:	41 ed       	ldi	r20, 0xD1	; 209
    138e:	58 e0       	ldi	r21, 0x08	; 8
    1390:	c0 dc       	rcall	.-1664   	; 0xd12 <USB_GetNextDescriptorComp>
    1392:	88 23       	and	r24, r24
    1394:	09 f0       	breq	.+2      	; 0x1398 <HID_Host_ConfigurePipes+0xa2>
    1396:	81 c0       	rjmp	.+258    	; 0x149a <HID_Host_ConfigurePipes+0x1a4>
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1398:	4b 80       	ldd	r4, Y+3	; 0x03
    139a:	5c 80       	ldd	r5, Y+4	; 0x04
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));
    139c:	f6 01       	movw	r30, r12
    139e:	94 81       	ldd	r25, Z+4	; 0x04
    13a0:	99 23       	and	r25, r25
    13a2:	29 f0       	breq	.+10     	; 0x13ae <HID_Host_ConfigurePipes+0xb8>
    13a4:	d2 01       	movw	r26, r4
    13a6:	17 96       	adiw	r26, 0x07	; 7
    13a8:	8c 91       	ld	r24, X
    13aa:	89 17       	cp	r24, r25
    13ac:	69 f7       	brne	.-38     	; 0x1388 <HID_Host_ConfigurePipes+0x92>

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    13ae:	c8 01       	movw	r24, r16
    13b0:	b7 01       	movw	r22, r14
    13b2:	4c ed       	ldi	r20, 0xDC	; 220
    13b4:	58 e0       	ldi	r21, 0x08	; 8
    13b6:	ad dc       	rcall	.-1702   	; 0xd12 <USB_GetNextDescriptorComp>
    13b8:	88 23       	and	r24, r24
    13ba:	09 f0       	breq	.+2      	; 0x13be <HID_Host_ConfigurePipes+0xc8>
    13bc:	6e c0       	rjmp	.+220    	; 0x149a <HID_Host_ConfigurePipes+0x1a4>
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
			}

			HIDDescriptor = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_HID_Descriptor_HID_t);
    13be:	2b 80       	ldd	r2, Y+3	; 0x03
    13c0:	3c 80       	ldd	r3, Y+4	; 0x04
    13c2:	d2 cf       	rjmp	.-92     	; 0x1368 <HID_Host_ConfigurePipes+0x72>
			DataOUTEndpoint = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    13c4:	eb 81       	ldd	r30, Y+3	; 0x03
    13c6:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    13c8:	82 81       	ldd	r24, Z+2	; 0x02
    13ca:	87 fd       	sbrc	r24, 7
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <HID_Host_ConfigurePipes+0xdc>
    13ce:	5f 01       	movw	r10, r30
    13d0:	01 c0       	rjmp	.+2      	; 0x13d4 <HID_Host_ConfigurePipes+0xde>
    13d2:	3f 01       	movw	r6, r30
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    13d4:	61 14       	cp	r6, r1
    13d6:	71 04       	cpc	r7, r1
    13d8:	39 f2       	breq	.-114    	; 0x1368 <HID_Host_ConfigurePipes+0x72>
    13da:	a1 14       	cp	r10, r1
    13dc:	b1 04       	cpc	r11, r1
    13de:	21 f2       	breq	.-120    	; 0x1368 <HID_Host_ConfigurePipes+0x72>
    13e0:	99 24       	eor	r9, r9
    13e2:	93 94       	inc	r9
			Type            = EP_TYPE_INTERRUPT;
			DoubleBanked    = HIDInterfaceInfo->Config.DataOUTPipeDoubleBank;
			InterruptPeriod = DataOUTEndpoint->PollingIntervalMS;

			HIDInterfaceInfo->State.DataOUTPipeSize   = DataOUTEndpoint->EndpointSize;
			HIDInterfaceInfo->State.DeviceUsesOUTPipe = true;
    13e4:	88 24       	eor	r8, r8
    13e6:	83 94       	inc	r8
		uint8_t  Token;
		uint8_t  EndpointAddress;
		uint8_t  InterruptPeriod;
		bool     DoubleBanked;

		if (PipeNum == HIDInterfaceInfo->Config.DataINPipeNumber)
    13e8:	f6 01       	movw	r30, r12
    13ea:	80 81       	ld	r24, Z
    13ec:	98 16       	cp	r9, r24
    13ee:	79 f4       	brne	.+30     	; 0x140e <HID_Host_ConfigurePipes+0x118>
		{
			Size            = le16_to_cpu(DataINEndpoint->EndpointSize);
    13f0:	d3 01       	movw	r26, r6
    13f2:	14 96       	adiw	r26, 0x04	; 4
    13f4:	0d 91       	ld	r16, X+
    13f6:	1c 91       	ld	r17, X
    13f8:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataINEndpoint->EndpointAddress;
    13fa:	12 96       	adiw	r26, 0x02	; 2
    13fc:	2c 91       	ld	r18, X
    13fe:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_INTERRUPT;
			DoubleBanked    = HIDInterfaceInfo->Config.DataINPipeDoubleBank;
    1400:	81 81       	ldd	r24, Z+1	; 0x01
			InterruptPeriod = DataINEndpoint->PollingIntervalMS;
    1402:	16 96       	adiw	r26, 0x06	; 6
    1404:	fc 90       	ld	r15, X

			HIDInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    1406:	12 87       	std	Z+10, r17	; 0x0a
    1408:	01 87       	std	Z+9, r16	; 0x09
    140a:	40 e1       	ldi	r20, 0x10	; 16
    140c:	16 c0       	rjmp	.+44     	; 0x143a <HID_Host_ConfigurePipes+0x144>
		}
		else if (PipeNum == HIDInterfaceInfo->Config.DataOUTPipeNumber)
    140e:	f6 01       	movw	r30, r12
    1410:	82 81       	ldd	r24, Z+2	; 0x02
    1412:	98 16       	cp	r9, r24
    1414:	19 f5       	brne	.+70     	; 0x145c <HID_Host_ConfigurePipes+0x166>
		{
			if (DataOUTEndpoint == NULL)
    1416:	a1 14       	cp	r10, r1
    1418:	b1 04       	cpc	r11, r1
    141a:	01 f1       	breq	.+64     	; 0x145c <HID_Host_ConfigurePipes+0x166>
			  continue;
		
			Size            = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    141c:	d5 01       	movw	r26, r10
    141e:	14 96       	adiw	r26, 0x04	; 4
    1420:	0d 91       	ld	r16, X+
    1422:	1c 91       	ld	r17, X
    1424:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1426:	12 96       	adiw	r26, 0x02	; 2
    1428:	2c 91       	ld	r18, X
    142a:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_INTERRUPT;
			DoubleBanked    = HIDInterfaceInfo->Config.DataOUTPipeDoubleBank;
    142c:	83 81       	ldd	r24, Z+3	; 0x03
			InterruptPeriod = DataOUTEndpoint->PollingIntervalMS;
    142e:	16 96       	adiw	r26, 0x06	; 6
    1430:	fc 90       	ld	r15, X

			HIDInterfaceInfo->State.DataOUTPipeSize   = DataOUTEndpoint->EndpointSize;
    1432:	14 87       	std	Z+12, r17	; 0x0c
    1434:	03 87       	std	Z+11, r16	; 0x0b
			HIDInterfaceInfo->State.DeviceUsesOUTPipe = true;
    1436:	86 86       	std	Z+14, r8	; 0x0e
    1438:	40 e2       	ldi	r20, 0x20	; 32
		else
		{
			continue;
		}

		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    143a:	88 23       	and	r24, r24
    143c:	11 f4       	brne	.+4      	; 0x1442 <HID_Host_ConfigurePipes+0x14c>
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	01 c0       	rjmp	.+2      	; 0x1444 <HID_Host_ConfigurePipes+0x14e>
    1442:	94 e0       	ldi	r25, 0x04	; 4
    1444:	89 2d       	mov	r24, r9
    1446:	63 e0       	ldi	r22, 0x03	; 3
    1448:	e9 2e       	mov	r14, r25
    144a:	38 da       	rcall	.-2960   	; 0x8bc <Pipe_ConfigurePipe>
    144c:	88 23       	and	r24, r24
    144e:	11 f4       	brne	.+4      	; 0x1454 <HID_Host_ConfigurePipes+0x15e>
    1450:	83 e0       	ldi	r24, 0x03	; 3
    1452:	24 c0       	rjmp	.+72     	; 0x149c <HID_Host_ConfigurePipes+0x1a6>
		                         DoubleBanked ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE)))
		{
			return HID_ENUMERROR_PipeConfigurationFailed;
		}
		
		if (InterruptPeriod)
    1454:	ff 20       	and	r15, r15
    1456:	11 f0       	breq	.+4      	; 0x145c <HID_Host_ConfigurePipes+0x166>
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
    1458:	f0 92 ad 00 	sts	0x00AD, r15
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    145c:	93 94       	inc	r9
    145e:	b7 e0       	ldi	r27, 0x07	; 7
    1460:	9b 16       	cp	r9, r27
    1462:	11 f6       	brne	.-124    	; 0x13e8 <HID_Host_ConfigurePipes+0xf2>
		
		if (InterruptPeriod)
		  Pipe_SetInterruptPeriod(InterruptPeriod);
	}

	HIDInterfaceInfo->State.InterfaceNumber      = HIDInterface->InterfaceNumber;
    1464:	f2 01       	movw	r30, r4
    1466:	82 81       	ldd	r24, Z+2	; 0x02
    1468:	d6 01       	movw	r26, r12
    146a:	18 96       	adiw	r26, 0x08	; 8
    146c:	8c 93       	st	X, r24
    146e:	18 97       	sbiw	r26, 0x08	; 8
	HIDInterfaceInfo->State.HIDReportSize        = LE16_TO_CPU(HIDDescriptor->HIDReportLength);
    1470:	f1 01       	movw	r30, r2
    1472:	87 81       	ldd	r24, Z+7	; 0x07
    1474:	90 85       	ldd	r25, Z+8	; 0x08
    1476:	51 96       	adiw	r26, 0x11	; 17
    1478:	9c 93       	st	X, r25
    147a:	8e 93       	st	-X, r24
    147c:	50 97       	sbiw	r26, 0x10	; 16
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	d2 01       	movw	r26, r4
    1482:	16 96       	adiw	r26, 0x06	; 6
    1484:	8c 91       	ld	r24, X
    1486:	81 11       	cpse	r24, r1
    1488:	91 e0       	ldi	r25, 0x01	; 1
    148a:	f6 01       	movw	r30, r12
    148c:	95 87       	std	Z+13, r25	; 0x0d
	HIDInterfaceInfo->State.LargestReportSize    = 8;
    148e:	88 e0       	ldi	r24, 0x08	; 8
    1490:	82 8b       	std	Z+18, r24	; 0x12
	HIDInterfaceInfo->State.IsActive             = true;
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	87 83       	std	Z+7, r24	; 0x07
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	01 c0       	rjmp	.+2      	; 0x149c <HID_Host_ConfigurePipes+0x1a6>

	return HID_ENUMERROR_NoError;
    149a:	82 e0       	ldi	r24, 0x02	; 2
}
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	1f 91       	pop	r17
    14aa:	0f 91       	pop	r16
    14ac:	ff 90       	pop	r15
    14ae:	ef 90       	pop	r14
    14b0:	df 90       	pop	r13
    14b2:	cf 90       	pop	r12
    14b4:	bf 90       	pop	r11
    14b6:	af 90       	pop	r10
    14b8:	9f 90       	pop	r9
    14ba:	8f 90       	pop	r8
    14bc:	7f 90       	pop	r7
    14be:	6f 90       	pop	r6
    14c0:	5f 90       	pop	r5
    14c2:	4f 90       	pop	r4
    14c4:	3f 90       	pop	r3
    14c6:	2f 90       	pop	r2
    14c8:	08 95       	ret

000014ca <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}

static uint8_t DCOMP_HID_Host_NextHIDInterfaceEndpoint(void* const CurrentDescriptor)
{
    14ca:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    14cc:	81 81       	ldd	r24, Z+1	; 0x01
    14ce:	85 30       	cpi	r24, 0x05	; 5
    14d0:	29 f4       	brne	.+10     	; 0x14dc <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x12>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    14d2:	82 81       	ldd	r24, Z+2	; 0x02
    14d4:	65 da       	rcall	.-2870   	; 0x9a0 <Pipe_IsEndpointBound>
    14d6:	88 23       	and	r24, r24
    14d8:	29 f4       	brne	.+10     	; 0x14e4 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1a>
    14da:	08 95       	ret
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    14dc:	84 30       	cpi	r24, 0x04	; 4
    14de:	11 f4       	brne	.+4      	; 0x14e4 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1a>
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	08 95       	ret
    14e4:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    14e6:	08 95       	ret

000014e8 <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    14e8:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    14ea:	80 91 c8 00 	lds	r24, 0x00C8
    14ee:	85 ff       	sbrs	r24, 5
    14f0:	fc cf       	rjmp	.-8      	; 0x14ea <Serial_putchar+0x2>
				UDR1 = DataByte;
    14f2:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	08 95       	ret

000014fc <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    14fc:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1500:	87 fd       	sbrc	r24, 7
    1502:	03 c0       	rjmp	.+6      	; 0x150a <Serial_getchar+0xe>
    1504:	2e ef       	ldi	r18, 0xFE	; 254
    1506:	3f ef       	ldi	r19, 0xFF	; 255
    1508:	0b c0       	rjmp	.+22     	; 0x1520 <Serial_getchar+0x24>
    150a:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    150e:	87 fd       	sbrc	r24, 7
    1510:	03 c0       	rjmp	.+6      	; 0x1518 <Serial_getchar+0x1c>
    1512:	2f ef       	ldi	r18, 0xFF	; 255
    1514:	3f ef       	ldi	r19, 0xFF	; 255
    1516:	04 c0       	rjmp	.+8      	; 0x1520 <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    1518:	80 91 ce 00 	lds	r24, 0x00CE
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    1520:	c9 01       	movw	r24, r18
    1522:	08 95       	ret

00001524 <fputc>:
    1524:	0f 93       	push	r16
    1526:	1f 93       	push	r17
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	8c 01       	movw	r16, r24
    152e:	eb 01       	movw	r28, r22
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	81 ff       	sbrs	r24, 1
    1534:	1b c0       	rjmp	.+54     	; 0x156c <fputc+0x48>
    1536:	82 ff       	sbrs	r24, 2
    1538:	0d c0       	rjmp	.+26     	; 0x1554 <fputc+0x30>
    153a:	2e 81       	ldd	r18, Y+6	; 0x06
    153c:	3f 81       	ldd	r19, Y+7	; 0x07
    153e:	8c 81       	ldd	r24, Y+4	; 0x04
    1540:	9d 81       	ldd	r25, Y+5	; 0x05
    1542:	28 17       	cp	r18, r24
    1544:	39 07       	cpc	r19, r25
    1546:	64 f4       	brge	.+24     	; 0x1560 <fputc+0x3c>
    1548:	e8 81       	ld	r30, Y
    154a:	f9 81       	ldd	r31, Y+1	; 0x01
    154c:	01 93       	st	Z+, r16
    154e:	f9 83       	std	Y+1, r31	; 0x01
    1550:	e8 83       	st	Y, r30
    1552:	06 c0       	rjmp	.+12     	; 0x1560 <fputc+0x3c>
    1554:	e8 85       	ldd	r30, Y+8	; 0x08
    1556:	f9 85       	ldd	r31, Y+9	; 0x09
    1558:	80 2f       	mov	r24, r16
    155a:	09 95       	icall
    155c:	89 2b       	or	r24, r25
    155e:	31 f4       	brne	.+12     	; 0x156c <fputc+0x48>
    1560:	8e 81       	ldd	r24, Y+6	; 0x06
    1562:	9f 81       	ldd	r25, Y+7	; 0x07
    1564:	01 96       	adiw	r24, 0x01	; 1
    1566:	9f 83       	std	Y+7, r25	; 0x07
    1568:	8e 83       	std	Y+6, r24	; 0x06
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <fputc+0x4c>
    156c:	0f ef       	ldi	r16, 0xFF	; 255
    156e:	1f ef       	ldi	r17, 0xFF	; 255
    1570:	c8 01       	movw	r24, r16
    1572:	df 91       	pop	r29
    1574:	cf 91       	pop	r28
    1576:	1f 91       	pop	r17
    1578:	0f 91       	pop	r16
    157a:	08 95       	ret

0000157c <printf_P>:
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
    1584:	fe 01       	movw	r30, r28
    1586:	35 96       	adiw	r30, 0x05	; 5
    1588:	61 91       	ld	r22, Z+
    158a:	71 91       	ld	r23, Z+
    158c:	a0 91 42 01 	lds	r26, 0x0142
    1590:	b0 91 43 01 	lds	r27, 0x0143
    1594:	13 96       	adiw	r26, 0x03	; 3
    1596:	8c 91       	ld	r24, X
    1598:	13 97       	sbiw	r26, 0x03	; 3
    159a:	88 60       	ori	r24, 0x08	; 8
    159c:	13 96       	adiw	r26, 0x03	; 3
    159e:	8c 93       	st	X, r24
    15a0:	80 91 42 01 	lds	r24, 0x0142
    15a4:	90 91 43 01 	lds	r25, 0x0143
    15a8:	af 01       	movw	r20, r30
    15aa:	3f d0       	rcall	.+126    	; 0x162a <vfprintf>
    15ac:	e0 91 42 01 	lds	r30, 0x0142
    15b0:	f0 91 43 01 	lds	r31, 0x0143
    15b4:	23 81       	ldd	r18, Z+3	; 0x03
    15b6:	27 7f       	andi	r18, 0xF7	; 247
    15b8:	23 83       	std	Z+3, r18	; 0x03
    15ba:	cf 91       	pop	r28
    15bc:	df 91       	pop	r29
    15be:	08 95       	ret

000015c0 <puts_P>:
    15c0:	0f 93       	push	r16
    15c2:	1f 93       	push	r17
    15c4:	cf 93       	push	r28
    15c6:	df 93       	push	r29
    15c8:	ec 01       	movw	r28, r24
    15ca:	e0 91 42 01 	lds	r30, 0x0142
    15ce:	f0 91 43 01 	lds	r31, 0x0143
    15d2:	83 81       	ldd	r24, Z+3	; 0x03
    15d4:	81 ff       	sbrs	r24, 1
    15d6:	21 c0       	rjmp	.+66     	; 0x161a <puts_P+0x5a>
    15d8:	00 e0       	ldi	r16, 0x00	; 0
    15da:	10 e0       	ldi	r17, 0x00	; 0
    15dc:	0e c0       	rjmp	.+28     	; 0x15fa <puts_P+0x3a>
    15de:	e0 91 42 01 	lds	r30, 0x0142
    15e2:	f0 91 43 01 	lds	r31, 0x0143
    15e6:	20 85       	ldd	r18, Z+8	; 0x08
    15e8:	31 85       	ldd	r19, Z+9	; 0x09
    15ea:	bf 01       	movw	r22, r30
    15ec:	f9 01       	movw	r30, r18
    15ee:	09 95       	icall
    15f0:	89 2b       	or	r24, r25
    15f2:	11 f0       	breq	.+4      	; 0x15f8 <puts_P+0x38>
    15f4:	0f ef       	ldi	r16, 0xFF	; 255
    15f6:	1f ef       	ldi	r17, 0xFF	; 255
    15f8:	21 96       	adiw	r28, 0x01	; 1
    15fa:	fe 01       	movw	r30, r28
    15fc:	84 91       	lpm	r24, Z+
    15fe:	88 23       	and	r24, r24
    1600:	71 f7       	brne	.-36     	; 0x15de <puts_P+0x1e>
    1602:	e0 91 42 01 	lds	r30, 0x0142
    1606:	f0 91 43 01 	lds	r31, 0x0143
    160a:	20 85       	ldd	r18, Z+8	; 0x08
    160c:	31 85       	ldd	r19, Z+9	; 0x09
    160e:	8a e0       	ldi	r24, 0x0A	; 10
    1610:	bf 01       	movw	r22, r30
    1612:	f9 01       	movw	r30, r18
    1614:	09 95       	icall
    1616:	89 2b       	or	r24, r25
    1618:	11 f0       	breq	.+4      	; 0x161e <puts_P+0x5e>
    161a:	0f ef       	ldi	r16, 0xFF	; 255
    161c:	1f ef       	ldi	r17, 0xFF	; 255
    161e:	c8 01       	movw	r24, r16
    1620:	df 91       	pop	r29
    1622:	cf 91       	pop	r28
    1624:	1f 91       	pop	r17
    1626:	0f 91       	pop	r16
    1628:	08 95       	ret

0000162a <vfprintf>:
    162a:	2f 92       	push	r2
    162c:	3f 92       	push	r3
    162e:	4f 92       	push	r4
    1630:	5f 92       	push	r5
    1632:	6f 92       	push	r6
    1634:	7f 92       	push	r7
    1636:	8f 92       	push	r8
    1638:	9f 92       	push	r9
    163a:	af 92       	push	r10
    163c:	bf 92       	push	r11
    163e:	cf 92       	push	r12
    1640:	df 92       	push	r13
    1642:	ef 92       	push	r14
    1644:	ff 92       	push	r15
    1646:	0f 93       	push	r16
    1648:	1f 93       	push	r17
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	2b 97       	sbiw	r28, 0x0b	; 11
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	f8 94       	cli
    1658:	de bf       	out	0x3e, r29	; 62
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	cd bf       	out	0x3d, r28	; 61
    165e:	3c 01       	movw	r6, r24
    1660:	2b 01       	movw	r4, r22
    1662:	5a 01       	movw	r10, r20
    1664:	fc 01       	movw	r30, r24
    1666:	17 82       	std	Z+7, r1	; 0x07
    1668:	16 82       	std	Z+6, r1	; 0x06
    166a:	83 81       	ldd	r24, Z+3	; 0x03
    166c:	81 fd       	sbrc	r24, 1
    166e:	03 c0       	rjmp	.+6      	; 0x1676 <vfprintf+0x4c>
    1670:	6f ef       	ldi	r22, 0xFF	; 255
    1672:	7f ef       	ldi	r23, 0xFF	; 255
    1674:	b9 c1       	rjmp	.+882    	; 0x19e8 <vfprintf+0x3be>
    1676:	9a e0       	ldi	r25, 0x0A	; 10
    1678:	89 2e       	mov	r8, r25
    167a:	1e 01       	movw	r2, r28
    167c:	08 94       	sec
    167e:	21 1c       	adc	r2, r1
    1680:	31 1c       	adc	r3, r1
    1682:	f3 01       	movw	r30, r6
    1684:	23 81       	ldd	r18, Z+3	; 0x03
    1686:	f2 01       	movw	r30, r4
    1688:	23 fd       	sbrc	r18, 3
    168a:	85 91       	lpm	r24, Z+
    168c:	23 ff       	sbrs	r18, 3
    168e:	81 91       	ld	r24, Z+
    1690:	2f 01       	movw	r4, r30
    1692:	88 23       	and	r24, r24
    1694:	09 f4       	brne	.+2      	; 0x1698 <vfprintf+0x6e>
    1696:	a5 c1       	rjmp	.+842    	; 0x19e2 <vfprintf+0x3b8>
    1698:	85 32       	cpi	r24, 0x25	; 37
    169a:	39 f4       	brne	.+14     	; 0x16aa <vfprintf+0x80>
    169c:	23 fd       	sbrc	r18, 3
    169e:	85 91       	lpm	r24, Z+
    16a0:	23 ff       	sbrs	r18, 3
    16a2:	81 91       	ld	r24, Z+
    16a4:	2f 01       	movw	r4, r30
    16a6:	85 32       	cpi	r24, 0x25	; 37
    16a8:	21 f4       	brne	.+8      	; 0x16b2 <vfprintf+0x88>
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	b3 01       	movw	r22, r6
    16ae:	3a df       	rcall	.-396    	; 0x1524 <fputc>
    16b0:	e8 cf       	rjmp	.-48     	; 0x1682 <vfprintf+0x58>
    16b2:	98 2f       	mov	r25, r24
    16b4:	ff 24       	eor	r15, r15
    16b6:	ee 24       	eor	r14, r14
    16b8:	99 24       	eor	r9, r9
    16ba:	ff e1       	ldi	r31, 0x1F	; 31
    16bc:	ff 15       	cp	r31, r15
    16be:	d0 f0       	brcs	.+52     	; 0x16f4 <vfprintf+0xca>
    16c0:	9b 32       	cpi	r25, 0x2B	; 43
    16c2:	69 f0       	breq	.+26     	; 0x16de <vfprintf+0xb4>
    16c4:	9c 32       	cpi	r25, 0x2C	; 44
    16c6:	28 f4       	brcc	.+10     	; 0x16d2 <vfprintf+0xa8>
    16c8:	90 32       	cpi	r25, 0x20	; 32
    16ca:	59 f0       	breq	.+22     	; 0x16e2 <vfprintf+0xb8>
    16cc:	93 32       	cpi	r25, 0x23	; 35
    16ce:	91 f4       	brne	.+36     	; 0x16f4 <vfprintf+0xca>
    16d0:	0e c0       	rjmp	.+28     	; 0x16ee <vfprintf+0xc4>
    16d2:	9d 32       	cpi	r25, 0x2D	; 45
    16d4:	49 f0       	breq	.+18     	; 0x16e8 <vfprintf+0xbe>
    16d6:	90 33       	cpi	r25, 0x30	; 48
    16d8:	69 f4       	brne	.+26     	; 0x16f4 <vfprintf+0xca>
    16da:	41 e0       	ldi	r20, 0x01	; 1
    16dc:	24 c0       	rjmp	.+72     	; 0x1726 <vfprintf+0xfc>
    16de:	52 e0       	ldi	r21, 0x02	; 2
    16e0:	f5 2a       	or	r15, r21
    16e2:	84 e0       	ldi	r24, 0x04	; 4
    16e4:	f8 2a       	or	r15, r24
    16e6:	28 c0       	rjmp	.+80     	; 0x1738 <vfprintf+0x10e>
    16e8:	98 e0       	ldi	r25, 0x08	; 8
    16ea:	f9 2a       	or	r15, r25
    16ec:	25 c0       	rjmp	.+74     	; 0x1738 <vfprintf+0x10e>
    16ee:	e0 e1       	ldi	r30, 0x10	; 16
    16f0:	fe 2a       	or	r15, r30
    16f2:	22 c0       	rjmp	.+68     	; 0x1738 <vfprintf+0x10e>
    16f4:	f7 fc       	sbrc	r15, 7
    16f6:	29 c0       	rjmp	.+82     	; 0x174a <vfprintf+0x120>
    16f8:	89 2f       	mov	r24, r25
    16fa:	80 53       	subi	r24, 0x30	; 48
    16fc:	8a 30       	cpi	r24, 0x0A	; 10
    16fe:	70 f4       	brcc	.+28     	; 0x171c <vfprintf+0xf2>
    1700:	f6 fe       	sbrs	r15, 6
    1702:	05 c0       	rjmp	.+10     	; 0x170e <vfprintf+0xe4>
    1704:	98 9c       	mul	r9, r8
    1706:	90 2c       	mov	r9, r0
    1708:	11 24       	eor	r1, r1
    170a:	98 0e       	add	r9, r24
    170c:	15 c0       	rjmp	.+42     	; 0x1738 <vfprintf+0x10e>
    170e:	e8 9c       	mul	r14, r8
    1710:	e0 2c       	mov	r14, r0
    1712:	11 24       	eor	r1, r1
    1714:	e8 0e       	add	r14, r24
    1716:	f0 e2       	ldi	r31, 0x20	; 32
    1718:	ff 2a       	or	r15, r31
    171a:	0e c0       	rjmp	.+28     	; 0x1738 <vfprintf+0x10e>
    171c:	9e 32       	cpi	r25, 0x2E	; 46
    171e:	29 f4       	brne	.+10     	; 0x172a <vfprintf+0x100>
    1720:	f6 fc       	sbrc	r15, 6
    1722:	5f c1       	rjmp	.+702    	; 0x19e2 <vfprintf+0x3b8>
    1724:	40 e4       	ldi	r20, 0x40	; 64
    1726:	f4 2a       	or	r15, r20
    1728:	07 c0       	rjmp	.+14     	; 0x1738 <vfprintf+0x10e>
    172a:	9c 36       	cpi	r25, 0x6C	; 108
    172c:	19 f4       	brne	.+6      	; 0x1734 <vfprintf+0x10a>
    172e:	50 e8       	ldi	r21, 0x80	; 128
    1730:	f5 2a       	or	r15, r21
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <vfprintf+0x10e>
    1734:	98 36       	cpi	r25, 0x68	; 104
    1736:	49 f4       	brne	.+18     	; 0x174a <vfprintf+0x120>
    1738:	f2 01       	movw	r30, r4
    173a:	23 fd       	sbrc	r18, 3
    173c:	95 91       	lpm	r25, Z+
    173e:	23 ff       	sbrs	r18, 3
    1740:	91 91       	ld	r25, Z+
    1742:	2f 01       	movw	r4, r30
    1744:	99 23       	and	r25, r25
    1746:	09 f0       	breq	.+2      	; 0x174a <vfprintf+0x120>
    1748:	b8 cf       	rjmp	.-144    	; 0x16ba <vfprintf+0x90>
    174a:	89 2f       	mov	r24, r25
    174c:	85 54       	subi	r24, 0x45	; 69
    174e:	83 30       	cpi	r24, 0x03	; 3
    1750:	18 f0       	brcs	.+6      	; 0x1758 <vfprintf+0x12e>
    1752:	80 52       	subi	r24, 0x20	; 32
    1754:	83 30       	cpi	r24, 0x03	; 3
    1756:	38 f4       	brcc	.+14     	; 0x1766 <vfprintf+0x13c>
    1758:	44 e0       	ldi	r20, 0x04	; 4
    175a:	50 e0       	ldi	r21, 0x00	; 0
    175c:	a4 0e       	add	r10, r20
    175e:	b5 1e       	adc	r11, r21
    1760:	5f e3       	ldi	r21, 0x3F	; 63
    1762:	59 83       	std	Y+1, r21	; 0x01
    1764:	0f c0       	rjmp	.+30     	; 0x1784 <vfprintf+0x15a>
    1766:	93 36       	cpi	r25, 0x63	; 99
    1768:	31 f0       	breq	.+12     	; 0x1776 <vfprintf+0x14c>
    176a:	93 37       	cpi	r25, 0x73	; 115
    176c:	79 f0       	breq	.+30     	; 0x178c <vfprintf+0x162>
    176e:	93 35       	cpi	r25, 0x53	; 83
    1770:	09 f0       	breq	.+2      	; 0x1774 <vfprintf+0x14a>
    1772:	52 c0       	rjmp	.+164    	; 0x1818 <vfprintf+0x1ee>
    1774:	1f c0       	rjmp	.+62     	; 0x17b4 <vfprintf+0x18a>
    1776:	f5 01       	movw	r30, r10
    1778:	80 81       	ld	r24, Z
    177a:	89 83       	std	Y+1, r24	; 0x01
    177c:	42 e0       	ldi	r20, 0x02	; 2
    177e:	50 e0       	ldi	r21, 0x00	; 0
    1780:	a4 0e       	add	r10, r20
    1782:	b5 1e       	adc	r11, r21
    1784:	61 01       	movw	r12, r2
    1786:	01 e0       	ldi	r16, 0x01	; 1
    1788:	10 e0       	ldi	r17, 0x00	; 0
    178a:	11 c0       	rjmp	.+34     	; 0x17ae <vfprintf+0x184>
    178c:	f5 01       	movw	r30, r10
    178e:	c0 80       	ld	r12, Z
    1790:	d1 80       	ldd	r13, Z+1	; 0x01
    1792:	f6 fc       	sbrc	r15, 6
    1794:	03 c0       	rjmp	.+6      	; 0x179c <vfprintf+0x172>
    1796:	6f ef       	ldi	r22, 0xFF	; 255
    1798:	7f ef       	ldi	r23, 0xFF	; 255
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <vfprintf+0x176>
    179c:	69 2d       	mov	r22, r9
    179e:	70 e0       	ldi	r23, 0x00	; 0
    17a0:	42 e0       	ldi	r20, 0x02	; 2
    17a2:	50 e0       	ldi	r21, 0x00	; 0
    17a4:	a4 0e       	add	r10, r20
    17a6:	b5 1e       	adc	r11, r21
    17a8:	c6 01       	movw	r24, r12
    17aa:	43 d1       	rcall	.+646    	; 0x1a32 <strnlen>
    17ac:	8c 01       	movw	r16, r24
    17ae:	5f e7       	ldi	r21, 0x7F	; 127
    17b0:	f5 22       	and	r15, r21
    17b2:	13 c0       	rjmp	.+38     	; 0x17da <vfprintf+0x1b0>
    17b4:	f5 01       	movw	r30, r10
    17b6:	c0 80       	ld	r12, Z
    17b8:	d1 80       	ldd	r13, Z+1	; 0x01
    17ba:	f6 fc       	sbrc	r15, 6
    17bc:	03 c0       	rjmp	.+6      	; 0x17c4 <vfprintf+0x19a>
    17be:	6f ef       	ldi	r22, 0xFF	; 255
    17c0:	7f ef       	ldi	r23, 0xFF	; 255
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <vfprintf+0x19e>
    17c4:	69 2d       	mov	r22, r9
    17c6:	70 e0       	ldi	r23, 0x00	; 0
    17c8:	42 e0       	ldi	r20, 0x02	; 2
    17ca:	50 e0       	ldi	r21, 0x00	; 0
    17cc:	a4 0e       	add	r10, r20
    17ce:	b5 1e       	adc	r11, r21
    17d0:	c6 01       	movw	r24, r12
    17d2:	24 d1       	rcall	.+584    	; 0x1a1c <strnlen_P>
    17d4:	8c 01       	movw	r16, r24
    17d6:	50 e8       	ldi	r21, 0x80	; 128
    17d8:	f5 2a       	or	r15, r21
    17da:	f3 fe       	sbrs	r15, 3
    17dc:	06 c0       	rjmp	.+12     	; 0x17ea <vfprintf+0x1c0>
    17de:	18 c0       	rjmp	.+48     	; 0x1810 <vfprintf+0x1e6>
    17e0:	80 e2       	ldi	r24, 0x20	; 32
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	b3 01       	movw	r22, r6
    17e6:	9e de       	rcall	.-708    	; 0x1524 <fputc>
    17e8:	ea 94       	dec	r14
    17ea:	8e 2d       	mov	r24, r14
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	08 17       	cp	r16, r24
    17f0:	19 07       	cpc	r17, r25
    17f2:	b0 f3       	brcs	.-20     	; 0x17e0 <vfprintf+0x1b6>
    17f4:	0d c0       	rjmp	.+26     	; 0x1810 <vfprintf+0x1e6>
    17f6:	f6 01       	movw	r30, r12
    17f8:	f7 fc       	sbrc	r15, 7
    17fa:	85 91       	lpm	r24, Z+
    17fc:	f7 fe       	sbrs	r15, 7
    17fe:	81 91       	ld	r24, Z+
    1800:	6f 01       	movw	r12, r30
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	b3 01       	movw	r22, r6
    1806:	8e de       	rcall	.-740    	; 0x1524 <fputc>
    1808:	e1 10       	cpse	r14, r1
    180a:	ea 94       	dec	r14
    180c:	01 50       	subi	r16, 0x01	; 1
    180e:	10 40       	sbci	r17, 0x00	; 0
    1810:	01 15       	cp	r16, r1
    1812:	11 05       	cpc	r17, r1
    1814:	81 f7       	brne	.-32     	; 0x17f6 <vfprintf+0x1cc>
    1816:	e2 c0       	rjmp	.+452    	; 0x19dc <vfprintf+0x3b2>
    1818:	94 36       	cpi	r25, 0x64	; 100
    181a:	11 f0       	breq	.+4      	; 0x1820 <vfprintf+0x1f6>
    181c:	99 36       	cpi	r25, 0x69	; 105
    181e:	61 f5       	brne	.+88     	; 0x1878 <vfprintf+0x24e>
    1820:	f7 fe       	sbrs	r15, 7
    1822:	08 c0       	rjmp	.+16     	; 0x1834 <vfprintf+0x20a>
    1824:	f5 01       	movw	r30, r10
    1826:	20 81       	ld	r18, Z
    1828:	31 81       	ldd	r19, Z+1	; 0x01
    182a:	42 81       	ldd	r20, Z+2	; 0x02
    182c:	53 81       	ldd	r21, Z+3	; 0x03
    182e:	84 e0       	ldi	r24, 0x04	; 4
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	0a c0       	rjmp	.+20     	; 0x1848 <vfprintf+0x21e>
    1834:	f5 01       	movw	r30, r10
    1836:	80 81       	ld	r24, Z
    1838:	91 81       	ldd	r25, Z+1	; 0x01
    183a:	9c 01       	movw	r18, r24
    183c:	44 27       	eor	r20, r20
    183e:	37 fd       	sbrc	r19, 7
    1840:	40 95       	com	r20
    1842:	54 2f       	mov	r21, r20
    1844:	82 e0       	ldi	r24, 0x02	; 2
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	a8 0e       	add	r10, r24
    184a:	b9 1e       	adc	r11, r25
    184c:	9f e6       	ldi	r25, 0x6F	; 111
    184e:	f9 22       	and	r15, r25
    1850:	57 ff       	sbrs	r21, 7
    1852:	09 c0       	rjmp	.+18     	; 0x1866 <vfprintf+0x23c>
    1854:	50 95       	com	r21
    1856:	40 95       	com	r20
    1858:	30 95       	com	r19
    185a:	21 95       	neg	r18
    185c:	3f 4f       	sbci	r19, 0xFF	; 255
    185e:	4f 4f       	sbci	r20, 0xFF	; 255
    1860:	5f 4f       	sbci	r21, 0xFF	; 255
    1862:	e0 e8       	ldi	r30, 0x80	; 128
    1864:	fe 2a       	or	r15, r30
    1866:	ca 01       	movw	r24, r20
    1868:	b9 01       	movw	r22, r18
    186a:	a1 01       	movw	r20, r2
    186c:	2a e0       	ldi	r18, 0x0A	; 10
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	eb d0       	rcall	.+470    	; 0x1a48 <__ultoa_invert>
    1872:	d8 2e       	mov	r13, r24
    1874:	d2 18       	sub	r13, r2
    1876:	3f c0       	rjmp	.+126    	; 0x18f6 <vfprintf+0x2cc>
    1878:	95 37       	cpi	r25, 0x75	; 117
    187a:	29 f4       	brne	.+10     	; 0x1886 <vfprintf+0x25c>
    187c:	1f 2d       	mov	r17, r15
    187e:	1f 7e       	andi	r17, 0xEF	; 239
    1880:	2a e0       	ldi	r18, 0x0A	; 10
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	1d c0       	rjmp	.+58     	; 0x18c0 <vfprintf+0x296>
    1886:	1f 2d       	mov	r17, r15
    1888:	19 7f       	andi	r17, 0xF9	; 249
    188a:	9f 36       	cpi	r25, 0x6F	; 111
    188c:	61 f0       	breq	.+24     	; 0x18a6 <vfprintf+0x27c>
    188e:	90 37       	cpi	r25, 0x70	; 112
    1890:	20 f4       	brcc	.+8      	; 0x189a <vfprintf+0x270>
    1892:	98 35       	cpi	r25, 0x58	; 88
    1894:	09 f0       	breq	.+2      	; 0x1898 <vfprintf+0x26e>
    1896:	a5 c0       	rjmp	.+330    	; 0x19e2 <vfprintf+0x3b8>
    1898:	0f c0       	rjmp	.+30     	; 0x18b8 <vfprintf+0x28e>
    189a:	90 37       	cpi	r25, 0x70	; 112
    189c:	39 f0       	breq	.+14     	; 0x18ac <vfprintf+0x282>
    189e:	98 37       	cpi	r25, 0x78	; 120
    18a0:	09 f0       	breq	.+2      	; 0x18a4 <vfprintf+0x27a>
    18a2:	9f c0       	rjmp	.+318    	; 0x19e2 <vfprintf+0x3b8>
    18a4:	04 c0       	rjmp	.+8      	; 0x18ae <vfprintf+0x284>
    18a6:	28 e0       	ldi	r18, 0x08	; 8
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	0a c0       	rjmp	.+20     	; 0x18c0 <vfprintf+0x296>
    18ac:	10 61       	ori	r17, 0x10	; 16
    18ae:	14 fd       	sbrc	r17, 4
    18b0:	14 60       	ori	r17, 0x04	; 4
    18b2:	20 e1       	ldi	r18, 0x10	; 16
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	04 c0       	rjmp	.+8      	; 0x18c0 <vfprintf+0x296>
    18b8:	14 fd       	sbrc	r17, 4
    18ba:	16 60       	ori	r17, 0x06	; 6
    18bc:	20 e1       	ldi	r18, 0x10	; 16
    18be:	32 e0       	ldi	r19, 0x02	; 2
    18c0:	17 ff       	sbrs	r17, 7
    18c2:	08 c0       	rjmp	.+16     	; 0x18d4 <vfprintf+0x2aa>
    18c4:	f5 01       	movw	r30, r10
    18c6:	60 81       	ld	r22, Z
    18c8:	71 81       	ldd	r23, Z+1	; 0x01
    18ca:	82 81       	ldd	r24, Z+2	; 0x02
    18cc:	93 81       	ldd	r25, Z+3	; 0x03
    18ce:	44 e0       	ldi	r20, 0x04	; 4
    18d0:	50 e0       	ldi	r21, 0x00	; 0
    18d2:	08 c0       	rjmp	.+16     	; 0x18e4 <vfprintf+0x2ba>
    18d4:	f5 01       	movw	r30, r10
    18d6:	80 81       	ld	r24, Z
    18d8:	91 81       	ldd	r25, Z+1	; 0x01
    18da:	bc 01       	movw	r22, r24
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	42 e0       	ldi	r20, 0x02	; 2
    18e2:	50 e0       	ldi	r21, 0x00	; 0
    18e4:	a4 0e       	add	r10, r20
    18e6:	b5 1e       	adc	r11, r21
    18e8:	a1 01       	movw	r20, r2
    18ea:	ae d0       	rcall	.+348    	; 0x1a48 <__ultoa_invert>
    18ec:	d8 2e       	mov	r13, r24
    18ee:	d2 18       	sub	r13, r2
    18f0:	8f e7       	ldi	r24, 0x7F	; 127
    18f2:	f8 2e       	mov	r15, r24
    18f4:	f1 22       	and	r15, r17
    18f6:	f6 fe       	sbrs	r15, 6
    18f8:	0b c0       	rjmp	.+22     	; 0x1910 <vfprintf+0x2e6>
    18fa:	5e ef       	ldi	r21, 0xFE	; 254
    18fc:	f5 22       	and	r15, r21
    18fe:	d9 14       	cp	r13, r9
    1900:	38 f4       	brcc	.+14     	; 0x1910 <vfprintf+0x2e6>
    1902:	f4 fe       	sbrs	r15, 4
    1904:	07 c0       	rjmp	.+14     	; 0x1914 <vfprintf+0x2ea>
    1906:	f2 fc       	sbrc	r15, 2
    1908:	05 c0       	rjmp	.+10     	; 0x1914 <vfprintf+0x2ea>
    190a:	8f ee       	ldi	r24, 0xEF	; 239
    190c:	f8 22       	and	r15, r24
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <vfprintf+0x2ea>
    1910:	1d 2d       	mov	r17, r13
    1912:	01 c0       	rjmp	.+2      	; 0x1916 <vfprintf+0x2ec>
    1914:	19 2d       	mov	r17, r9
    1916:	f4 fe       	sbrs	r15, 4
    1918:	0d c0       	rjmp	.+26     	; 0x1934 <vfprintf+0x30a>
    191a:	fe 01       	movw	r30, r28
    191c:	ed 0d       	add	r30, r13
    191e:	f1 1d       	adc	r31, r1
    1920:	80 81       	ld	r24, Z
    1922:	80 33       	cpi	r24, 0x30	; 48
    1924:	19 f4       	brne	.+6      	; 0x192c <vfprintf+0x302>
    1926:	99 ee       	ldi	r25, 0xE9	; 233
    1928:	f9 22       	and	r15, r25
    192a:	08 c0       	rjmp	.+16     	; 0x193c <vfprintf+0x312>
    192c:	1f 5f       	subi	r17, 0xFF	; 255
    192e:	f2 fe       	sbrs	r15, 2
    1930:	05 c0       	rjmp	.+10     	; 0x193c <vfprintf+0x312>
    1932:	03 c0       	rjmp	.+6      	; 0x193a <vfprintf+0x310>
    1934:	8f 2d       	mov	r24, r15
    1936:	86 78       	andi	r24, 0x86	; 134
    1938:	09 f0       	breq	.+2      	; 0x193c <vfprintf+0x312>
    193a:	1f 5f       	subi	r17, 0xFF	; 255
    193c:	0f 2d       	mov	r16, r15
    193e:	f3 fc       	sbrc	r15, 3
    1940:	13 c0       	rjmp	.+38     	; 0x1968 <vfprintf+0x33e>
    1942:	f0 fe       	sbrs	r15, 0
    1944:	0e c0       	rjmp	.+28     	; 0x1962 <vfprintf+0x338>
    1946:	1e 15       	cp	r17, r14
    1948:	10 f0       	brcs	.+4      	; 0x194e <vfprintf+0x324>
    194a:	9d 2c       	mov	r9, r13
    194c:	0a c0       	rjmp	.+20     	; 0x1962 <vfprintf+0x338>
    194e:	9d 2c       	mov	r9, r13
    1950:	9e 0c       	add	r9, r14
    1952:	91 1a       	sub	r9, r17
    1954:	1e 2d       	mov	r17, r14
    1956:	05 c0       	rjmp	.+10     	; 0x1962 <vfprintf+0x338>
    1958:	80 e2       	ldi	r24, 0x20	; 32
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	b3 01       	movw	r22, r6
    195e:	e2 dd       	rcall	.-1084   	; 0x1524 <fputc>
    1960:	1f 5f       	subi	r17, 0xFF	; 255
    1962:	1e 15       	cp	r17, r14
    1964:	c8 f3       	brcs	.-14     	; 0x1958 <vfprintf+0x32e>
    1966:	04 c0       	rjmp	.+8      	; 0x1970 <vfprintf+0x346>
    1968:	1e 15       	cp	r17, r14
    196a:	10 f4       	brcc	.+4      	; 0x1970 <vfprintf+0x346>
    196c:	e1 1a       	sub	r14, r17
    196e:	01 c0       	rjmp	.+2      	; 0x1972 <vfprintf+0x348>
    1970:	ee 24       	eor	r14, r14
    1972:	04 ff       	sbrs	r16, 4
    1974:	0e c0       	rjmp	.+28     	; 0x1992 <vfprintf+0x368>
    1976:	80 e3       	ldi	r24, 0x30	; 48
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	b3 01       	movw	r22, r6
    197c:	d3 dd       	rcall	.-1114   	; 0x1524 <fputc>
    197e:	02 ff       	sbrs	r16, 2
    1980:	1b c0       	rjmp	.+54     	; 0x19b8 <vfprintf+0x38e>
    1982:	01 fd       	sbrc	r16, 1
    1984:	03 c0       	rjmp	.+6      	; 0x198c <vfprintf+0x362>
    1986:	88 e7       	ldi	r24, 0x78	; 120
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	0e c0       	rjmp	.+28     	; 0x19a8 <vfprintf+0x37e>
    198c:	88 e5       	ldi	r24, 0x58	; 88
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	0b c0       	rjmp	.+22     	; 0x19a8 <vfprintf+0x37e>
    1992:	80 2f       	mov	r24, r16
    1994:	86 78       	andi	r24, 0x86	; 134
    1996:	81 f0       	breq	.+32     	; 0x19b8 <vfprintf+0x38e>
    1998:	01 ff       	sbrs	r16, 1
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <vfprintf+0x376>
    199c:	8b e2       	ldi	r24, 0x2B	; 43
    199e:	01 c0       	rjmp	.+2      	; 0x19a2 <vfprintf+0x378>
    19a0:	80 e2       	ldi	r24, 0x20	; 32
    19a2:	f7 fc       	sbrc	r15, 7
    19a4:	8d e2       	ldi	r24, 0x2D	; 45
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	b3 01       	movw	r22, r6
    19aa:	bc dd       	rcall	.-1160   	; 0x1524 <fputc>
    19ac:	05 c0       	rjmp	.+10     	; 0x19b8 <vfprintf+0x38e>
    19ae:	80 e3       	ldi	r24, 0x30	; 48
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	b3 01       	movw	r22, r6
    19b4:	b7 dd       	rcall	.-1170   	; 0x1524 <fputc>
    19b6:	9a 94       	dec	r9
    19b8:	d9 14       	cp	r13, r9
    19ba:	c8 f3       	brcs	.-14     	; 0x19ae <vfprintf+0x384>
    19bc:	da 94       	dec	r13
    19be:	f1 01       	movw	r30, r2
    19c0:	ed 0d       	add	r30, r13
    19c2:	f1 1d       	adc	r31, r1
    19c4:	80 81       	ld	r24, Z
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	b3 01       	movw	r22, r6
    19ca:	ac dd       	rcall	.-1192   	; 0x1524 <fputc>
    19cc:	dd 20       	and	r13, r13
    19ce:	b1 f7       	brne	.-20     	; 0x19bc <vfprintf+0x392>
    19d0:	05 c0       	rjmp	.+10     	; 0x19dc <vfprintf+0x3b2>
    19d2:	80 e2       	ldi	r24, 0x20	; 32
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	b3 01       	movw	r22, r6
    19d8:	a5 dd       	rcall	.-1206   	; 0x1524 <fputc>
    19da:	ea 94       	dec	r14
    19dc:	ee 20       	and	r14, r14
    19de:	c9 f7       	brne	.-14     	; 0x19d2 <vfprintf+0x3a8>
    19e0:	50 ce       	rjmp	.-864    	; 0x1682 <vfprintf+0x58>
    19e2:	f3 01       	movw	r30, r6
    19e4:	66 81       	ldd	r22, Z+6	; 0x06
    19e6:	77 81       	ldd	r23, Z+7	; 0x07
    19e8:	cb 01       	movw	r24, r22
    19ea:	2b 96       	adiw	r28, 0x0b	; 11
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	de bf       	out	0x3e, r29	; 62
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	cd bf       	out	0x3d, r28	; 61
    19f6:	cf 91       	pop	r28
    19f8:	df 91       	pop	r29
    19fa:	1f 91       	pop	r17
    19fc:	0f 91       	pop	r16
    19fe:	ff 90       	pop	r15
    1a00:	ef 90       	pop	r14
    1a02:	df 90       	pop	r13
    1a04:	cf 90       	pop	r12
    1a06:	bf 90       	pop	r11
    1a08:	af 90       	pop	r10
    1a0a:	9f 90       	pop	r9
    1a0c:	8f 90       	pop	r8
    1a0e:	7f 90       	pop	r7
    1a10:	6f 90       	pop	r6
    1a12:	5f 90       	pop	r5
    1a14:	4f 90       	pop	r4
    1a16:	3f 90       	pop	r3
    1a18:	2f 90       	pop	r2
    1a1a:	08 95       	ret

00001a1c <strnlen_P>:
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	05 90       	lpm	r0, Z+
    1a20:	61 50       	subi	r22, 0x01	; 1
    1a22:	70 40       	sbci	r23, 0x00	; 0
    1a24:	01 10       	cpse	r0, r1
    1a26:	d8 f7       	brcc	.-10     	; 0x1a1e <strnlen_P+0x2>
    1a28:	80 95       	com	r24
    1a2a:	90 95       	com	r25
    1a2c:	8e 0f       	add	r24, r30
    1a2e:	9f 1f       	adc	r25, r31
    1a30:	08 95       	ret

00001a32 <strnlen>:
    1a32:	fc 01       	movw	r30, r24
    1a34:	61 50       	subi	r22, 0x01	; 1
    1a36:	70 40       	sbci	r23, 0x00	; 0
    1a38:	01 90       	ld	r0, Z+
    1a3a:	01 10       	cpse	r0, r1
    1a3c:	d8 f7       	brcc	.-10     	; 0x1a34 <strnlen+0x2>
    1a3e:	80 95       	com	r24
    1a40:	90 95       	com	r25
    1a42:	8e 0f       	add	r24, r30
    1a44:	9f 1f       	adc	r25, r31
    1a46:	08 95       	ret

00001a48 <__ultoa_invert>:
    1a48:	fa 01       	movw	r30, r20
    1a4a:	aa 27       	eor	r26, r26
    1a4c:	28 30       	cpi	r18, 0x08	; 8
    1a4e:	51 f1       	breq	.+84     	; 0x1aa4 <__ultoa_invert+0x5c>
    1a50:	20 31       	cpi	r18, 0x10	; 16
    1a52:	81 f1       	breq	.+96     	; 0x1ab4 <__ultoa_invert+0x6c>
    1a54:	e8 94       	clt
    1a56:	6f 93       	push	r22
    1a58:	6e 7f       	andi	r22, 0xFE	; 254
    1a5a:	6e 5f       	subi	r22, 0xFE	; 254
    1a5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a60:	9f 4f       	sbci	r25, 0xFF	; 255
    1a62:	af 4f       	sbci	r26, 0xFF	; 255
    1a64:	b1 e0       	ldi	r27, 0x01	; 1
    1a66:	3e d0       	rcall	.+124    	; 0x1ae4 <__ultoa_invert+0x9c>
    1a68:	b4 e0       	ldi	r27, 0x04	; 4
    1a6a:	3c d0       	rcall	.+120    	; 0x1ae4 <__ultoa_invert+0x9c>
    1a6c:	67 0f       	add	r22, r23
    1a6e:	78 1f       	adc	r23, r24
    1a70:	89 1f       	adc	r24, r25
    1a72:	9a 1f       	adc	r25, r26
    1a74:	a1 1d       	adc	r26, r1
    1a76:	68 0f       	add	r22, r24
    1a78:	79 1f       	adc	r23, r25
    1a7a:	8a 1f       	adc	r24, r26
    1a7c:	91 1d       	adc	r25, r1
    1a7e:	a1 1d       	adc	r26, r1
    1a80:	6a 0f       	add	r22, r26
    1a82:	71 1d       	adc	r23, r1
    1a84:	81 1d       	adc	r24, r1
    1a86:	91 1d       	adc	r25, r1
    1a88:	a1 1d       	adc	r26, r1
    1a8a:	20 d0       	rcall	.+64     	; 0x1acc <__ultoa_invert+0x84>
    1a8c:	09 f4       	brne	.+2      	; 0x1a90 <__ultoa_invert+0x48>
    1a8e:	68 94       	set
    1a90:	3f 91       	pop	r19
    1a92:	2a e0       	ldi	r18, 0x0A	; 10
    1a94:	26 9f       	mul	r18, r22
    1a96:	11 24       	eor	r1, r1
    1a98:	30 19       	sub	r19, r0
    1a9a:	30 5d       	subi	r19, 0xD0	; 208
    1a9c:	31 93       	st	Z+, r19
    1a9e:	de f6       	brtc	.-74     	; 0x1a56 <__ultoa_invert+0xe>
    1aa0:	cf 01       	movw	r24, r30
    1aa2:	08 95       	ret
    1aa4:	46 2f       	mov	r20, r22
    1aa6:	47 70       	andi	r20, 0x07	; 7
    1aa8:	40 5d       	subi	r20, 0xD0	; 208
    1aaa:	41 93       	st	Z+, r20
    1aac:	b3 e0       	ldi	r27, 0x03	; 3
    1aae:	0f d0       	rcall	.+30     	; 0x1ace <__ultoa_invert+0x86>
    1ab0:	c9 f7       	brne	.-14     	; 0x1aa4 <__ultoa_invert+0x5c>
    1ab2:	f6 cf       	rjmp	.-20     	; 0x1aa0 <__ultoa_invert+0x58>
    1ab4:	46 2f       	mov	r20, r22
    1ab6:	4f 70       	andi	r20, 0x0F	; 15
    1ab8:	40 5d       	subi	r20, 0xD0	; 208
    1aba:	4a 33       	cpi	r20, 0x3A	; 58
    1abc:	18 f0       	brcs	.+6      	; 0x1ac4 <__ultoa_invert+0x7c>
    1abe:	49 5d       	subi	r20, 0xD9	; 217
    1ac0:	31 fd       	sbrc	r19, 1
    1ac2:	40 52       	subi	r20, 0x20	; 32
    1ac4:	41 93       	st	Z+, r20
    1ac6:	02 d0       	rcall	.+4      	; 0x1acc <__ultoa_invert+0x84>
    1ac8:	a9 f7       	brne	.-22     	; 0x1ab4 <__ultoa_invert+0x6c>
    1aca:	ea cf       	rjmp	.-44     	; 0x1aa0 <__ultoa_invert+0x58>
    1acc:	b4 e0       	ldi	r27, 0x04	; 4
    1ace:	a6 95       	lsr	r26
    1ad0:	97 95       	ror	r25
    1ad2:	87 95       	ror	r24
    1ad4:	77 95       	ror	r23
    1ad6:	67 95       	ror	r22
    1ad8:	ba 95       	dec	r27
    1ada:	c9 f7       	brne	.-14     	; 0x1ace <__ultoa_invert+0x86>
    1adc:	00 97       	sbiw	r24, 0x00	; 0
    1ade:	61 05       	cpc	r22, r1
    1ae0:	71 05       	cpc	r23, r1
    1ae2:	08 95       	ret
    1ae4:	9b 01       	movw	r18, r22
    1ae6:	ac 01       	movw	r20, r24
    1ae8:	0a 2e       	mov	r0, r26
    1aea:	06 94       	lsr	r0
    1aec:	57 95       	ror	r21
    1aee:	47 95       	ror	r20
    1af0:	37 95       	ror	r19
    1af2:	27 95       	ror	r18
    1af4:	ba 95       	dec	r27
    1af6:	c9 f7       	brne	.-14     	; 0x1aea <__ultoa_invert+0xa2>
    1af8:	62 0f       	add	r22, r18
    1afa:	73 1f       	adc	r23, r19
    1afc:	84 1f       	adc	r24, r20
    1afe:	95 1f       	adc	r25, r21
    1b00:	a0 1d       	adc	r26, r0
    1b02:	08 95       	ret

00001b04 <_exit>:
    1b04:	f8 94       	cli

00001b06 <__stop_program>:
    1b06:	ff cf       	rjmp	.-2      	; 0x1b06 <__stop_program>
