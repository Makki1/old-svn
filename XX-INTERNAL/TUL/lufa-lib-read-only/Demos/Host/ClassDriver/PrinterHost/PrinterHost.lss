
PrinterHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  00001bc4  00001c58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bc4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800146  00800146  00001c9e  2**0
                  ALLOC
  3 .stab         00002208  00000000  00000000  00001ca0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dff  00000000  00000000  00003ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000006c8  00000000  00000000  00004ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000f8d  00000000  00000000  0000536f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000b6f4  00000000  00000000  000062fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000027f0  00000000  00000000  000119f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007d13  00000000  00000000  000141e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b10  00000000  00000000  0001bef4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004588  00000000  00000000  0001ca04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000056a2  00000000  00000000  00020f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000798  00000000  00000000  0002662e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		Pipe_DisablePipe();
	}
}

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
       0:	65 c1       	rjmp	.+714    	; 0x2cc <__ctors_end>
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       2:	00 00       	nop
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       4:	81 c1       	rjmp	.+770    	; 0x308 <__bad_interrupt>

	return USB_Host_SendControlRequest(FeatureStatus);
}

uint8_t USB_Host_ClearPipeStall(const uint8_t EndpointAddress)
{
       6:	00 00       	nop

	return ErrorCode;
}

uint16_t PRNT_Host_BytesReceived(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo)
{
       8:	7f c1       	rjmp	.+766    	; 0x308 <__bad_interrupt>

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       a:	00 00       	nop
       c:	7d c1       	rjmp	.+762    	; 0x308 <__bad_interrupt>
       e:	00 00       	nop
      10:	7b c1       	rjmp	.+758    	; 0x308 <__bad_interrupt>
      12:	00 00       	nop
      14:	79 c1       	rjmp	.+754    	; 0x308 <__bad_interrupt>
      16:	00 00       	nop
      18:	77 c1       	rjmp	.+750    	; 0x308 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	75 c1       	rjmp	.+746    	; 0x308 <__bad_interrupt>
      1e:	00 00       	nop
      20:	73 c1       	rjmp	.+742    	; 0x308 <__bad_interrupt>
      22:	00 00       	nop
      24:	71 c1       	rjmp	.+738    	; 0x308 <__bad_interrupt>
      26:	00 00       	nop
      28:	e9 c5       	rjmp	.+3026   	; 0xbfc <__vector_10>
      2a:	00 00       	nop
      2c:	6d c1       	rjmp	.+730    	; 0x308 <__bad_interrupt>
      2e:	00 00       	nop
      30:	6b c1       	rjmp	.+726    	; 0x308 <__bad_interrupt>
      32:	00 00       	nop
      34:	69 c1       	rjmp	.+722    	; 0x308 <__bad_interrupt>
      36:	00 00       	nop
      38:	67 c1       	rjmp	.+718    	; 0x308 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	65 c1       	rjmp	.+714    	; 0x308 <__bad_interrupt>
      3e:	00 00       	nop
      40:	63 c1       	rjmp	.+710    	; 0x308 <__bad_interrupt>
      42:	00 00       	nop
      44:	61 c1       	rjmp	.+706    	; 0x308 <__bad_interrupt>
      46:	00 00       	nop
      48:	5f c1       	rjmp	.+702    	; 0x308 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5d c1       	rjmp	.+698    	; 0x308 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5b c1       	rjmp	.+694    	; 0x308 <__bad_interrupt>
      52:	00 00       	nop
      54:	59 c1       	rjmp	.+690    	; 0x308 <__bad_interrupt>
      56:	00 00       	nop
      58:	57 c1       	rjmp	.+686    	; 0x308 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	55 c1       	rjmp	.+682    	; 0x308 <__bad_interrupt>
      5e:	00 00       	nop
      60:	53 c1       	rjmp	.+678    	; 0x308 <__bad_interrupt>
      62:	00 00       	nop
      64:	51 c1       	rjmp	.+674    	; 0x308 <__bad_interrupt>
      66:	00 00       	nop
      68:	4f c1       	rjmp	.+670    	; 0x308 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4d c1       	rjmp	.+666    	; 0x308 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4b c1       	rjmp	.+662    	; 0x308 <__bad_interrupt>
      72:	00 00       	nop
      74:	49 c1       	rjmp	.+658    	; 0x308 <__bad_interrupt>
      76:	00 00       	nop
      78:	47 c1       	rjmp	.+654    	; 0x308 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	45 c1       	rjmp	.+650    	; 0x308 <__bad_interrupt>
      7e:	00 00       	nop
      80:	43 c1       	rjmp	.+646    	; 0x308 <__bad_interrupt>
      82:	00 00       	nop
      84:	41 c1       	rjmp	.+642    	; 0x308 <__bad_interrupt>
      86:	00 00       	nop
      88:	3f c1       	rjmp	.+638    	; 0x308 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3d c1       	rjmp	.+634    	; 0x308 <__bad_interrupt>
      8e:	00 00       	nop
      90:	3b c1       	rjmp	.+630    	; 0x308 <__bad_interrupt>
      92:	00 00       	nop
      94:	39 c1       	rjmp	.+626    	; 0x308 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4582>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4574>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4564>:
     11d:	50 72 69 6e 74 65 72 20 44 65 76 69 63 65 20 45     Printer Device E
     12d:	6e 75 6d 65 72 61 74 65 64 2e 0d 0a 00              numerated....

0000013a <__c.4562>:
     13a:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 42 69     Error Setting Bi
     14a:	64 69 72 65 63 74 69 6f 6e 61 6c 20 4d 6f 64 65     directional Mode
     15a:	2e 0d 0a 00                                         ....

0000015e <__c.4560>:
     15e:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     16e:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     17e:	6f 6e 2e 0d 0a 00                                   on....

00000184 <__c.4558>:
     184:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     194:	4e 6f 74 20 61 20 56 61 6c 69 64 20 50 72 69 6e     Not a Valid Prin
     1a4:	74 65 72 20 43 6c 61 73 73 20 44 65 76 69 63 65     ter Class Device
     1b4:	2e 0d 0a 00                                         ....

000001b8 <__c.4556>:
     1b8:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1c8:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1d8:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001e5 <__c.4549>:
     1e5:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1f5:	68 65 64 2e 0d 0a 00                                hed....

000001fc <__c.4544>:
     1fc:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     20c:	0d 0a 00                                            ...

0000020f <__c.4536>:
     20f:	54 65 73 74 20 50 61 67 65 20 53 65 6e 74 2e 0d     Test Page Sent..
     21f:	0a 00                                               ..

00000221 <__c.4534>:
     221:	45 72 72 6f 72 20 53 65 6e 64 69 6e 67 20 50 61     Error Sending Pa
     231:	67 65 20 44 61 74 61 2e 0d 0a 00                    ge Data....

0000023c <__c.4532>:
     23c:	53 65 6e 64 69 6e 67 20 54 65 73 74 20 50 61 67     Sending Test Pag
     24c:	65 20 28 25 64 20 62 79 74 65 73 29 2e 2e 2e 0d     e (%d bytes)....
     25c:	0a 00                                               ..

0000025e <__c.4528>:
     25e:	44 65 76 69 63 65 20 49 44 3a 20 25 73 2e 0d 0a     Device ID: %s...
     26e:	00                                                  .

0000026f <__c.4526>:
     26f:	45 72 72 6f 72 20 47 65 74 74 69 6e 67 20 44 65     Error Getting De
     27f:	76 69 63 65 20 49 44 2e 0d 0a 00                    vice ID....

0000028a <__c.4523>:
     28a:	52 65 74 72 69 65 76 69 6e 67 20 44 65 76 69 63     Retrieving Devic
     29a:	65 20 49 44 2e 2e 2e 0d 0a 00                       e ID......

000002a4 <__c.4510>:
     2a4:	1b 5b 33 36 6d 50 72 69 6e 74 65 72 20 48 6f 73     .[36mPrinter Hos
     2b4:	74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d     t Demo running..
     2c4:	0a 1b 5b 33 37 6d 00 00                             ..[37m..

000002cc <__ctors_end>:
     2cc:	11 24       	eor	r1, r1
     2ce:	1f be       	out	0x3f, r1	; 63
     2d0:	cf ef       	ldi	r28, 0xFF	; 255
     2d2:	d0 e2       	ldi	r29, 0x20	; 32
     2d4:	de bf       	out	0x3e, r29	; 62
     2d6:	cd bf       	out	0x3d, r28	; 61

000002d8 <__do_copy_data>:
     2d8:	11 e0       	ldi	r17, 0x01	; 1
     2da:	a0 e0       	ldi	r26, 0x00	; 0
     2dc:	b1 e0       	ldi	r27, 0x01	; 1
     2de:	e4 ec       	ldi	r30, 0xC4	; 196
     2e0:	fb e1       	ldi	r31, 0x1B	; 27
     2e2:	00 e0       	ldi	r16, 0x00	; 0
     2e4:	0b bf       	out	0x3b, r16	; 59
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <__do_copy_data+0x14>
     2e8:	07 90       	elpm	r0, Z+
     2ea:	0d 92       	st	X+, r0
     2ec:	a6 34       	cpi	r26, 0x46	; 70
     2ee:	b1 07       	cpc	r27, r17
     2f0:	d9 f7       	brne	.-10     	; 0x2e8 <__do_copy_data+0x10>

000002f2 <__do_clear_bss>:
     2f2:	11 e0       	ldi	r17, 0x01	; 1
     2f4:	a6 e4       	ldi	r26, 0x46	; 70
     2f6:	b1 e0       	ldi	r27, 0x01	; 1
     2f8:	01 c0       	rjmp	.+2      	; 0x2fc <.do_clear_bss_start>

000002fa <.do_clear_bss_loop>:
     2fa:	1d 92       	st	X+, r1

000002fc <.do_clear_bss_start>:
     2fc:	a8 36       	cpi	r26, 0x68	; 104
     2fe:	b1 07       	cpc	r27, r17
     300:	e1 f7       	brne	.-8      	; 0x2fa <.do_clear_bss_loop>
     302:	85 d1       	rcall	.+778    	; 0x60e <main>
     304:	0c 94 e0 0d 	jmp	0x1bc0	; 0x1bc0 <_exit>

00000308 <__bad_interrupt>:
     308:	7b ce       	rjmp	.-778    	; 0x0 <__vectors>

0000030a <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     30a:	90 91 53 01 	lds	r25, 0x0153
     30e:	2d b7       	in	r18, 0x3d	; 61
     310:	3e b7       	in	r19, 0x3e	; 62
     312:	28 50       	subi	r18, 0x08	; 8
     314:	30 40       	sbci	r19, 0x00	; 0
     316:	0f b6       	in	r0, 0x3f	; 63
     318:	f8 94       	cli
     31a:	3e bf       	out	0x3e, r19	; 62
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	2d bf       	out	0x3d, r18	; 61
     320:	ed b7       	in	r30, 0x3d	; 61
     322:	fe b7       	in	r31, 0x3e	; 62
     324:	31 96       	adiw	r30, 0x01	; 1
     326:	28 e9       	ldi	r18, 0x98	; 152
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	ad b7       	in	r26, 0x3d	; 61
     32c:	be b7       	in	r27, 0x3e	; 62
     32e:	12 96       	adiw	r26, 0x02	; 2
     330:	3c 93       	st	X, r19
     332:	2e 93       	st	-X, r18
     334:	11 97       	sbiw	r26, 0x01	; 1
     336:	82 83       	std	Z+2, r24	; 0x02
     338:	13 82       	std	Z+3, r1	; 0x03
     33a:	64 83       	std	Z+4, r22	; 0x04
     33c:	15 82       	std	Z+5, r1	; 0x05
     33e:	96 83       	std	Z+6, r25	; 0x06
     340:	17 82       	std	Z+7, r1	; 0x07
     342:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <printf_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     346:	8b b1       	in	r24, 0x0b	; 11
     348:	8f 70       	andi	r24, 0x0F	; 15
     34a:	80 69       	ori	r24, 0x90	; 144
     34c:	8b b9       	out	0x0b, r24	; 11
     34e:	2d b7       	in	r18, 0x3d	; 61
     350:	3e b7       	in	r19, 0x3e	; 62
     352:	28 5f       	subi	r18, 0xF8	; 248
     354:	3f 4f       	sbci	r19, 0xFF	; 255
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	f8 94       	cli
     35a:	3e bf       	out	0x3e, r19	; 62
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     360:	08 95       	ret

00000362 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     362:	1f 93       	push	r17
     364:	18 2f       	mov	r17, r24
	USB_Disable();
     366:	25 d4       	rcall	.+2122   	; 0xbb2 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     368:	00 d0       	rcall	.+0      	; 0x36a <EVENT_USB_Host_HostError+0x8>
     36a:	00 d0       	rcall	.+0      	; 0x36c <EVENT_USB_Host_HostError+0xa>
     36c:	ed b7       	in	r30, 0x3d	; 61
     36e:	fe b7       	in	r31, 0x3e	; 62
     370:	31 96       	adiw	r30, 0x01	; 1
     372:	8e ee       	ldi	r24, 0xEE	; 238
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	ad b7       	in	r26, 0x3d	; 61
     378:	be b7       	in	r27, 0x3e	; 62
     37a:	12 96       	adiw	r26, 0x02	; 2
     37c:	9c 93       	st	X, r25
     37e:	8e 93       	st	-X, r24
     380:	11 97       	sbiw	r26, 0x01	; 1
     382:	12 83       	std	Z+2, r17	; 0x02
     384:	13 82       	std	Z+3, r1	; 0x03
     386:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <printf_P>
     38a:	8b b1       	in	r24, 0x0b	; 11
     38c:	8f 70       	andi	r24, 0x0F	; 15
     38e:	80 69       	ori	r24, 0x90	; 144
     390:	8b b9       	out	0x0b, r24	; 11
     392:	0f 90       	pop	r0
     394:	0f 90       	pop	r0
     396:	0f 90       	pop	r0
     398:	0f 90       	pop	r0
     39a:	ff cf       	rjmp	.-2      	; 0x39a <EVENT_USB_Host_HostError+0x38>

0000039c <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     39c:	85 ee       	ldi	r24, 0xE5	; 229
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	0e 94 12 0b 	call	0x1624	; 0x1624 <puts_P>
     3a4:	8b b1       	in	r24, 0x0b	; 11
     3a6:	8f 70       	andi	r24, 0x0F	; 15
     3a8:	80 61       	ori	r24, 0x10	; 16
     3aa:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     3ac:	08 95       	ret

000003ae <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     3ae:	8c ef       	ldi	r24, 0xFC	; 252
     3b0:	91 e0       	ldi	r25, 0x01	; 1
     3b2:	0e 94 12 0b 	call	0x1624	; 0x1624 <puts_P>
     3b6:	8b b1       	in	r24, 0x0b	; 11
     3b8:	8f 70       	andi	r24, 0x0F	; 15
     3ba:	80 6a       	ori	r24, 0xA0	; 160
     3bc:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     3be:	08 95       	ret

000003c0 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     3c0:	0f 93       	push	r16
     3c2:	1f 93       	push	r17
     3c4:	df 93       	push	r29
     3c6:	cf 93       	push	r28
     3c8:	cd b7       	in	r28, 0x3d	; 61
     3ca:	de b7       	in	r29, 0x3e	; 62
     3cc:	c2 50       	subi	r28, 0x02	; 2
     3ce:	d2 40       	sbci	r29, 0x02	; 2
     3d0:	0f b6       	in	r0, 0x3f	; 63
     3d2:	f8 94       	cli
     3d4:	de bf       	out	0x3e, r29	; 62
     3d6:	0f be       	out	0x3f, r0	; 63
     3d8:	cd bf       	out	0x3d, r28	; 61
     3da:	8b b1       	in	r24, 0x0b	; 11
     3dc:	8f 70       	andi	r24, 0x0F	; 15
     3de:	80 6a       	ori	r24, 0xA0	; 160
     3e0:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     3e2:	8e 01       	movw	r16, r28
     3e4:	0d 5f       	subi	r16, 0xFD	; 253
     3e6:	1f 4f       	sbci	r17, 0xFF	; 255
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	be 01       	movw	r22, r28
     3ec:	6f 5f       	subi	r22, 0xFF	; 255
     3ee:	7f 4f       	sbci	r23, 0xFF	; 255
     3f0:	a8 01       	movw	r20, r16
     3f2:	20 e0       	ldi	r18, 0x00	; 0
     3f4:	32 e0       	ldi	r19, 0x02	; 2
     3f6:	30 d5       	rcall	.+2656   	; 0xe58 <USB_Host_GetDeviceConfigDescriptor>
     3f8:	88 23       	and	r24, r24
     3fa:	19 f0       	breq	.+6      	; 0x402 <EVENT_USB_Host_DeviceEnumerationComplete+0x42>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     3fc:	88 eb       	ldi	r24, 0xB8	; 184
     3fe:	91 e0       	ldi	r25, 0x01	; 1
     400:	12 c0       	rjmp	.+36     	; 0x426 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (PRNT_Host_ConfigurePipes(&Printer_PRNT_Interface,
     402:	69 81       	ldd	r22, Y+1	; 0x01
     404:	7a 81       	ldd	r23, Y+2	; 0x02
     406:	89 e2       	ldi	r24, 0x29	; 41
     408:	91 e0       	ldi	r25, 0x01	; 1
     40a:	a8 01       	movw	r20, r16
     40c:	0e 94 08 0a 	call	0x1410	; 0x1410 <PRNT_Host_ConfigurePipes>
     410:	88 23       	and	r24, r24
     412:	19 f0       	breq	.+6      	; 0x41a <EVENT_USB_Host_DeviceEnumerationComplete+0x5a>
	                             ConfigDescriptorSize, ConfigDescriptorData) != PRNT_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Printer Class Device.\r\n"));
     414:	84 e8       	ldi	r24, 0x84	; 132
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	06 c0       	rjmp	.+12     	; 0x426 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	d6 d6       	rcall	.+3500   	; 0x11ca <USB_Host_SetDeviceConfiguration>
     41e:	88 23       	and	r24, r24
     420:	41 f0       	breq	.+16     	; 0x432 <EVENT_USB_Host_DeviceEnumerationComplete+0x72>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     422:	8e e5       	ldi	r24, 0x5E	; 94
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	0e 94 12 0b 	call	0x1624	; 0x1624 <puts_P>
     42a:	8b b1       	in	r24, 0x0b	; 11
     42c:	8f 70       	andi	r24, 0x0F	; 15
     42e:	80 69       	ori	r24, 0x90	; 144
     430:	17 c0       	rjmp	.+46     	; 0x460 <EVENT_USB_Host_DeviceEnumerationComplete+0xa0>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (PRNT_Host_SetBidirectionalMode(&Printer_PRNT_Interface) != HOST_SENDCONTROL_Successful)
     432:	89 e2       	ldi	r24, 0x29	; 41
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	e4 d7       	rcall	.+4040   	; 0x1400 <PRNT_Host_SetBidirectionalMode>
     438:	88 23       	and	r24, r24
     43a:	59 f0       	breq	.+22     	; 0x452 <EVENT_USB_Host_DeviceEnumerationComplete+0x92>
	{
		puts_P(PSTR("Error Setting Bidirectional Mode.\r\n"));
     43c:	8a e3       	ldi	r24, 0x3A	; 58
     43e:	91 e0       	ldi	r25, 0x01	; 1
     440:	0e 94 12 0b 	call	0x1624	; 0x1624 <puts_P>
     444:	8b b1       	in	r24, 0x0b	; 11
     446:	8f 70       	andi	r24, 0x0F	; 15
     448:	80 69       	ori	r24, 0x90	; 144
     44a:	8b b9       	out	0x0b, r24	; 11
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	bd d6       	rcall	.+3450   	; 0x11ca <USB_Host_SetDeviceConfiguration>
     450:	08 c0       	rjmp	.+16     	; 0x462 <EVENT_USB_Host_DeviceEnumerationComplete+0xa2>
		return;
	}

	puts_P(PSTR("Printer Device Enumerated.\r\n"));
     452:	8d e1       	ldi	r24, 0x1D	; 29
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	0e 94 12 0b 	call	0x1624	; 0x1624 <puts_P>
     45a:	8b b1       	in	r24, 0x0b	; 11
     45c:	8f 70       	andi	r24, 0x0F	; 15
     45e:	80 66       	ori	r24, 0x60	; 96
     460:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     462:	ce 5f       	subi	r28, 0xFE	; 254
     464:	dd 4f       	sbci	r29, 0xFD	; 253
     466:	0f b6       	in	r0, 0x3f	; 63
     468:	f8 94       	cli
     46a:	de bf       	out	0x3e, r29	; 62
     46c:	0f be       	out	0x3f, r0	; 63
     46e:	cd bf       	out	0x3d, r28	; 61
     470:	cf 91       	pop	r28
     472:	df 91       	pop	r29
     474:	1f 91       	pop	r17
     476:	0f 91       	pop	r16
     478:	08 95       	ret

0000047a <PrinterHost_Task>:

/** Task to manage an enumerated USB printer once connected, to display device
 *  information and print a test PCL page.
 */
void PrinterHost_Task(void)
{
     47a:	ef 92       	push	r14
     47c:	ff 92       	push	r15
     47e:	0f 93       	push	r16
     480:	1f 93       	push	r17
     482:	df 93       	push	r29
     484:	cf 93       	push	r28
     486:	cd b7       	in	r28, 0x3d	; 61
     488:	de b7       	in	r29, 0x3e	; 62
     48a:	c5 55       	subi	r28, 0x55	; 85
     48c:	d1 40       	sbci	r29, 0x01	; 1
     48e:	0f b6       	in	r0, 0x3f	; 63
     490:	f8 94       	cli
     492:	de bf       	out	0x3e, r29	; 62
     494:	0f be       	out	0x3f, r0	; 63
     496:	cd bf       	out	0x3d, r28	; 61
	if (USB_HostState != HOST_STATE_Configured)
     498:	80 91 53 01 	lds	r24, 0x0153
     49c:	8b 30       	cpi	r24, 0x0B	; 11
     49e:	09 f0       	breq	.+2      	; 0x4a2 <PrinterHost_Task+0x28>
     4a0:	5f c0       	rjmp	.+190    	; 0x560 <PrinterHost_Task+0xe6>
     4a2:	8b b1       	in	r24, 0x0b	; 11
     4a4:	8f 70       	andi	r24, 0x0F	; 15
     4a6:	80 62       	ori	r24, 0x20	; 32
     4a8:	8b b9       	out	0x0b, r24	; 11
	  return;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

	puts_P(PSTR("Retrieving Device ID...\r\n"));
     4aa:	8a e8       	ldi	r24, 0x8A	; 138
     4ac:	92 e0       	ldi	r25, 0x02	; 2
     4ae:	0e 94 12 0b 	call	0x1624	; 0x1624 <puts_P>

	char DeviceIDString[300];
	if (PRNT_Host_GetDeviceID(&Printer_PRNT_Interface, DeviceIDString,
     4b2:	8e 01       	movw	r16, r28
     4b4:	06 5d       	subi	r16, 0xD6	; 214
     4b6:	1f 4f       	sbci	r17, 0xFF	; 255
     4b8:	89 e2       	ldi	r24, 0x29	; 41
     4ba:	91 e0       	ldi	r25, 0x01	; 1
     4bc:	b8 01       	movw	r22, r16
     4be:	4c e2       	ldi	r20, 0x2C	; 44
     4c0:	51 e0       	ldi	r21, 0x01	; 1
     4c2:	db d6       	rcall	.+3510   	; 0x127a <PRNT_Host_GetDeviceID>
     4c4:	88 23       	and	r24, r24
     4c6:	19 f0       	breq	.+6      	; 0x4ce <PrinterHost_Task+0x54>
	                          sizeof(DeviceIDString)) != HOST_SENDCONTROL_Successful)
	{
		puts_P(PSTR("Error Getting Device ID.\r\n"));
     4c8:	8f e6       	ldi	r24, 0x6F	; 111
     4ca:	92 e0       	ldi	r25, 0x02	; 2
     4cc:	39 c0       	rjmp	.+114    	; 0x540 <PrinterHost_Task+0xc6>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	printf_P(PSTR("Device ID: %s.\r\n"), DeviceIDString);
     4ce:	00 d0       	rcall	.+0      	; 0x4d0 <PrinterHost_Task+0x56>
     4d0:	00 d0       	rcall	.+0      	; 0x4d2 <PrinterHost_Task+0x58>
     4d2:	8e e5       	ldi	r24, 0x5E	; 94
     4d4:	92 e0       	ldi	r25, 0x02	; 2
     4d6:	ed b7       	in	r30, 0x3d	; 61
     4d8:	fe b7       	in	r31, 0x3e	; 62
     4da:	92 83       	std	Z+2, r25	; 0x02
     4dc:	81 83       	std	Z+1, r24	; 0x01
     4de:	14 83       	std	Z+4, r17	; 0x04
     4e0:	03 83       	std	Z+3, r16	; 0x03
     4e2:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <printf_P>

	char     TestPageData[] = "\033%-12345X\033E" "LUFA PCL Test Page" "\033E\033%-12345X";
     4e6:	de 01       	movw	r26, r28
     4e8:	11 96       	adiw	r26, 0x01	; 1
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f1 e0       	ldi	r31, 0x01	; 1
     4ee:	89 e2       	ldi	r24, 0x29	; 41
     4f0:	01 90       	ld	r0, Z+
     4f2:	0d 92       	st	X+, r0
     4f4:	81 50       	subi	r24, 0x01	; 1
     4f6:	e1 f7       	brne	.-8      	; 0x4f0 <PrinterHost_Task+0x76>
	uint16_t TestPageLength = strlen(TestPageData);
     4f8:	7e 01       	movw	r14, r28
     4fa:	08 94       	sec
     4fc:	e1 1c       	adc	r14, r1
     4fe:	f1 1c       	adc	r15, r1
     500:	f7 01       	movw	r30, r14
     502:	01 90       	ld	r0, Z+
     504:	00 20       	and	r0, r0
     506:	e9 f7       	brne	.-6      	; 0x502 <PrinterHost_Task+0x88>
     508:	8f 01       	movw	r16, r30
     50a:	01 50       	subi	r16, 0x01	; 1
     50c:	10 40       	sbci	r17, 0x00	; 0
     50e:	0e 19       	sub	r16, r14
     510:	1f 09       	sbc	r17, r15

	printf_P(PSTR("Sending Test Page (%d bytes)...\r\n"), TestPageLength);
     512:	8c e3       	ldi	r24, 0x3C	; 60
     514:	92 e0       	ldi	r25, 0x02	; 2
     516:	ed b7       	in	r30, 0x3d	; 61
     518:	fe b7       	in	r31, 0x3e	; 62
     51a:	92 83       	std	Z+2, r25	; 0x02
     51c:	81 83       	std	Z+1, r24	; 0x01
     51e:	14 83       	std	Z+4, r17	; 0x04
     520:	03 83       	std	Z+3, r16	; 0x03
     522:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <printf_P>

	if (PRNT_Host_SendData(&Printer_PRNT_Interface, &TestPageData, TestPageLength) != PIPE_RWSTREAM_NoError)
     526:	0f 90       	pop	r0
     528:	0f 90       	pop	r0
     52a:	0f 90       	pop	r0
     52c:	0f 90       	pop	r0
     52e:	89 e2       	ldi	r24, 0x29	; 41
     530:	91 e0       	ldi	r25, 0x01	; 1
     532:	b7 01       	movw	r22, r14
     534:	a8 01       	movw	r20, r16
     536:	01 d7       	rcall	.+3586   	; 0x133a <PRNT_Host_SendData>
     538:	88 23       	and	r24, r24
     53a:	41 f0       	breq	.+16     	; 0x54c <PrinterHost_Task+0xd2>
	{
		puts_P(PSTR("Error Sending Page Data.\r\n"));
     53c:	81 e2       	ldi	r24, 0x21	; 33
     53e:	92 e0       	ldi	r25, 0x02	; 2
     540:	0e 94 12 0b 	call	0x1624	; 0x1624 <puts_P>
     544:	8b b1       	in	r24, 0x0b	; 11
     546:	8f 70       	andi	r24, 0x0F	; 15
     548:	80 69       	ori	r24, 0x90	; 144
     54a:	07 c0       	rjmp	.+14     	; 0x55a <PrinterHost_Task+0xe0>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Test Page Sent.\r\n"));
     54c:	8f e0       	ldi	r24, 0x0F	; 15
     54e:	92 e0       	ldi	r25, 0x02	; 2
     550:	0e 94 12 0b 	call	0x1624	; 0x1624 <puts_P>
     554:	8b b1       	in	r24, 0x0b	; 11
     556:	8f 70       	andi	r24, 0x0F	; 15
     558:	80 66       	ori	r24, 0x60	; 96
     55a:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
	USB_Host_SetDeviceConfiguration(0);
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	35 d6       	rcall	.+3178   	; 0x11ca <USB_Host_SetDeviceConfiguration>
}
     560:	cb 5a       	subi	r28, 0xAB	; 171
     562:	de 4f       	sbci	r29, 0xFE	; 254
     564:	0f b6       	in	r0, 0x3f	; 63
     566:	f8 94       	cli
     568:	de bf       	out	0x3e, r29	; 62
     56a:	0f be       	out	0x3f, r0	; 63
     56c:	cd bf       	out	0x3d, r28	; 61
     56e:	cf 91       	pop	r28
     570:	df 91       	pop	r29
     572:	1f 91       	pop	r17
     574:	0f 91       	pop	r16
     576:	ff 90       	pop	r15
     578:	ef 90       	pop	r14
     57a:	08 95       	ret

0000057c <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     57c:	84 b7       	in	r24, 0x34	; 52
     57e:	87 7f       	andi	r24, 0xF7	; 247
     580:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     582:	28 e1       	ldi	r18, 0x18	; 24
     584:	0f b6       	in	r0, 0x3f	; 63
     586:	f8 94       	cli
     588:	20 93 60 00 	sts	0x0060, r18
     58c:	10 92 60 00 	sts	0x0060, r1
     590:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	80 e8       	ldi	r24, 0x80	; 128
     596:	0f b6       	in	r0, 0x3f	; 63
     598:	f8 94       	cli
     59a:	80 93 61 00 	sts	0x0061, r24
     59e:	90 93 61 00 	sts	0x0061, r25
     5a2:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     5a4:	83 e3       	ldi	r24, 0x33	; 51
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	90 93 cd 00 	sts	0x00CD, r25
     5ac:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     5b0:	86 e0       	ldi	r24, 0x06	; 6
     5b2:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     5b6:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     5ba:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     5be:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     5c0:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     5c2:	8a b1       	in	r24, 0x0a	; 10
     5c4:	80 6f       	ori	r24, 0xF0	; 240
     5c6:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     5c8:	8b b1       	in	r24, 0x0b	; 11
     5ca:	8f 70       	andi	r24, 0x0F	; 15
     5cc:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     5ce:	e8 d2       	rcall	.+1488   	; 0xba0 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     5d0:	e4 e5       	ldi	r30, 0x54	; 84
     5d2:	f1 e0       	ldi	r31, 0x01	; 1
     5d4:	f0 93 63 01 	sts	0x0163, r31
     5d8:	e0 93 62 01 	sts	0x0162, r30
					stdout = Stream;
     5dc:	f0 93 65 01 	sts	0x0165, r31
     5e0:	e0 93 64 01 	sts	0x0164, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     5e4:	8e e0       	ldi	r24, 0x0E	; 14
     5e6:	df 01       	movw	r26, r30
     5e8:	1d 92       	st	X+, r1
     5ea:	8a 95       	dec	r24
     5ec:	e9 f7       	brne	.-6      	; 0x5e8 <SetupHardware+0x6c>
     5ee:	83 e0       	ldi	r24, 0x03	; 3
     5f0:	80 93 57 01 	sts	0x0157, r24
     5f4:	88 eb       	ldi	r24, 0xB8	; 184
     5f6:	9a e0       	ldi	r25, 0x0A	; 10
     5f8:	90 93 5d 01 	sts	0x015D, r25
     5fc:	80 93 5c 01 	sts	0x015C, r24
     600:	82 ec       	ldi	r24, 0xC2	; 194
     602:	9a e0       	ldi	r25, 0x0A	; 10
     604:	90 93 5f 01 	sts	0x015F, r25
     608:	80 93 5e 01 	sts	0x015E, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     60c:	08 95       	ret

0000060e <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     60e:	b6 df       	rcall	.-148    	; 0x57c <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Printer Host Demo running.\r\n" ESC_FG_WHITE));
     610:	84 ea       	ldi	r24, 0xA4	; 164
     612:	92 e0       	ldi	r25, 0x02	; 2
     614:	0e 94 12 0b 	call	0x1624	; 0x1624 <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     618:	8b b1       	in	r24, 0x0b	; 11
     61a:	8f 70       	andi	r24, 0x0F	; 15
     61c:	80 61       	ori	r24, 0x10	; 16
     61e:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     620:	78 94       	sei

	for (;;)
	{
		PrinterHost_Task();
     622:	2b df       	rcall	.-426    	; 0x47a <PrinterHost_Task>

		PRNT_Host_USBTask(&Printer_PRNT_Interface);
     624:	89 e2       	ldi	r24, 0x29	; 41
     626:	91 e0       	ldi	r25, 0x01	; 1
     628:	e0 d6       	rcall	.+3520   	; 0x13ea <PRNT_Host_USBTask>
		USB_USBTask();
     62a:	f4 d5       	rcall	.+3048   	; 0x1214 <USB_USBTask>
     62c:	fa cf       	rjmp	.-12     	; 0x622 <main+0x14>

0000062e <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     62e:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     630:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     634:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     638:	80 91 a0 00 	lds	r24, 0x00A0
     63c:	8f 7d       	andi	r24, 0xDF	; 223
     63e:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     642:	80 91 9f 00 	lds	r24, 0x009F
     646:	8f 7d       	andi	r24, 0xDF	; 223
     648:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     64c:	80 91 9e 00 	lds	r24, 0x009E
     650:	81 60       	ori	r24, 0x01	; 1
     652:	80 93 9e 00 	sts	0x009E, r24
     656:	28 c0       	rjmp	.+80     	; 0x6a8 <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     658:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     65c:	85 ff       	sbrs	r24, 5
     65e:	06 c0       	rjmp	.+12     	; 0x66c <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     660:	80 91 9f 00 	lds	r24, 0x009F
     664:	8f 7d       	andi	r24, 0xDF	; 223
     666:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     66a:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     66c:	80 91 53 01 	lds	r24, 0x0153
     670:	81 30       	cpi	r24, 0x01	; 1
     672:	11 f4       	brne	.+4      	; 0x678 <USB_Host_WaitMS+0x4a>
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	1a c0       	rjmp	.+52     	; 0x6ac <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     678:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     67c:	84 ff       	sbrs	r24, 4
     67e:	09 c0       	rjmp	.+18     	; 0x692 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     680:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     684:	80 91 a6 00 	lds	r24, 0x00A6
     688:	8f 7e       	andi	r24, 0xEF	; 239
     68a:	80 93 a6 00 	sts	0x00A6, r24
     68e:	92 e0       	ldi	r25, 0x02	; 2
     690:	0d c0       	rjmp	.+26     	; 0x6ac <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     692:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     696:	81 ff       	sbrs	r24, 1
     698:	07 c0       	rjmp	.+14     	; 0x6a8 <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     69a:	80 91 a6 00 	lds	r24, 0x00A6
     69e:	8d 7f       	andi	r24, 0xFD	; 253
     6a0:	80 93 a6 00 	sts	0x00A6, r24
     6a4:	93 e0       	ldi	r25, 0x03	; 3
     6a6:	02 c0       	rjmp	.+4      	; 0x6ac <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     6a8:	99 23       	and	r25, r25
     6aa:	b1 f6       	brne	.-84     	; 0x658 <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     6ac:	20 fd       	sbrc	r18, 0
     6ae:	05 c0       	rjmp	.+10     	; 0x6ba <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     6b0:	80 91 9e 00 	lds	r24, 0x009E
     6b4:	8e 7f       	andi	r24, 0xFE	; 254
     6b6:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     6ba:	35 ff       	sbrs	r19, 5
     6bc:	05 c0       	rjmp	.+10     	; 0x6c8 <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     6be:	80 91 a0 00 	lds	r24, 0x00A0
     6c2:	80 62       	ori	r24, 0x20	; 32
     6c4:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     6c8:	89 2f       	mov	r24, r25
     6ca:	08 95       	ret

000006cc <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     6cc:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     6d0:	80 91 a0 00 	lds	r24, 0x00A0
     6d4:	8d 7f       	andi	r24, 0xFD	; 253
     6d6:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     6da:	80 91 9e 00 	lds	r24, 0x009E
     6de:	82 60       	ori	r24, 0x02	; 2
     6e0:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     6e4:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     6e8:	81 fd       	sbrc	r24, 1
     6ea:	fc cf       	rjmp	.-8      	; 0x6e4 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6ec:	80 91 9e 00 	lds	r24, 0x009E
     6f0:	81 60       	ori	r24, 0x01	; 1
     6f2:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     6f6:	10 92 49 01 	sts	0x0149, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     6fa:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     6fe:	80 91 a0 00 	lds	r24, 0x00A0
     702:	8f 7d       	andi	r24, 0xDF	; 223
     704:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     708:	80 91 9f 00 	lds	r24, 0x009F
     70c:	8f 7d       	andi	r24, 0xDF	; 223
     70e:	80 93 9f 00 	sts	0x009F, r24
     712:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     714:	40 ed       	ldi	r20, 0xD0	; 208
     716:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     718:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     71c:	85 ff       	sbrs	r24, 5
     71e:	0b c0       	rjmp	.+22     	; 0x736 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     720:	80 91 9f 00 	lds	r24, 0x009F
     724:	8f 7d       	andi	r24, 0xDF	; 223
     726:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     72a:	80 91 9f 00 	lds	r24, 0x009F
     72e:	8d 7f       	andi	r24, 0xFD	; 253
     730:	80 93 9f 00 	sts	0x009F, r24
     734:	05 c0       	rjmp	.+10     	; 0x740 <USB_Host_ResetDevice+0x74>
     736:	ca 01       	movw	r24, r20
     738:	01 97       	sbiw	r24, 0x01	; 1
     73a:	f1 f7       	brne	.-4      	; 0x738 <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     73c:	21 50       	subi	r18, 0x01	; 1
     73e:	61 f7       	brne	.-40     	; 0x718 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     740:	35 ff       	sbrs	r19, 5
     742:	05 c0       	rjmp	.+10     	; 0x74e <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     744:	80 91 a0 00 	lds	r24, 0x00A0
     748:	80 62       	ori	r24, 0x20	; 32
     74a:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     74e:	60 fd       	sbrc	r22, 0
     750:	05 c0       	rjmp	.+10     	; 0x75c <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     752:	80 91 9e 00 	lds	r24, 0x009E
     756:	8e 7f       	andi	r24, 0xFE	; 254
     758:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     75c:	80 91 a0 00 	lds	r24, 0x00A0
     760:	82 60       	ori	r24, 0x02	; 2
     762:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     766:	08 95       	ret

00000768 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     768:	ef 92       	push	r14
     76a:	0f 93       	push	r16
     76c:	1f 93       	push	r17
     76e:	df 93       	push	r29
     770:	cf 93       	push	r28
     772:	cd b7       	in	r28, 0x3d	; 61
     774:	de b7       	in	r29, 0x3e	; 62
     776:	28 97       	sbiw	r28, 0x08	; 8
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	f8 94       	cli
     77c:	de bf       	out	0x3e, r29	; 62
     77e:	0f be       	out	0x3f, r0	; 63
     780:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     782:	80 91 53 01 	lds	r24, 0x0153
     786:	85 30       	cpi	r24, 0x05	; 5
     788:	09 f4       	brne	.+2      	; 0x78c <USB_Host_ProcessNextHostState+0x24>
     78a:	94 c0       	rjmp	.+296    	; 0x8b4 <USB_Host_ProcessNextHostState+0x14c>
     78c:	86 30       	cpi	r24, 0x06	; 6
     78e:	68 f4       	brcc	.+26     	; 0x7aa <USB_Host_ProcessNextHostState+0x42>
     790:	82 30       	cpi	r24, 0x02	; 2
     792:	b9 f1       	breq	.+110    	; 0x802 <USB_Host_ProcessNextHostState+0x9a>
     794:	83 30       	cpi	r24, 0x03	; 3
     796:	18 f4       	brcc	.+6      	; 0x79e <USB_Host_ProcessNextHostState+0x36>
     798:	88 23       	and	r24, r24
     79a:	a1 f0       	breq	.+40     	; 0x7c4 <USB_Host_ProcessNextHostState+0x5c>
     79c:	04 c1       	rjmp	.+520    	; 0x9a6 <USB_Host_ProcessNextHostState+0x23e>
     79e:	83 30       	cpi	r24, 0x03	; 3
     7a0:	d1 f1       	breq	.+116    	; 0x816 <USB_Host_ProcessNextHostState+0xae>
     7a2:	84 30       	cpi	r24, 0x04	; 4
     7a4:	09 f0       	breq	.+2      	; 0x7a8 <USB_Host_ProcessNextHostState+0x40>
     7a6:	ff c0       	rjmp	.+510    	; 0x9a6 <USB_Host_ProcessNextHostState+0x23e>
     7a8:	5d c0       	rjmp	.+186    	; 0x864 <USB_Host_ProcessNextHostState+0xfc>
     7aa:	87 30       	cpi	r24, 0x07	; 7
     7ac:	09 f4       	brne	.+2      	; 0x7b0 <USB_Host_ProcessNextHostState+0x48>
     7ae:	9b c0       	rjmp	.+310    	; 0x8e6 <USB_Host_ProcessNextHostState+0x17e>
     7b0:	87 30       	cpi	r24, 0x07	; 7
     7b2:	08 f4       	brcc	.+2      	; 0x7b6 <USB_Host_ProcessNextHostState+0x4e>
     7b4:	8a c0       	rjmp	.+276    	; 0x8ca <USB_Host_ProcessNextHostState+0x162>
     7b6:	88 30       	cpi	r24, 0x08	; 8
     7b8:	09 f4       	brne	.+2      	; 0x7bc <USB_Host_ProcessNextHostState+0x54>
     7ba:	b3 c0       	rjmp	.+358    	; 0x922 <USB_Host_ProcessNextHostState+0x1ba>
     7bc:	89 30       	cpi	r24, 0x09	; 9
     7be:	09 f0       	breq	.+2      	; 0x7c2 <USB_Host_ProcessNextHostState+0x5a>
     7c0:	f2 c0       	rjmp	.+484    	; 0x9a6 <USB_Host_ProcessNextHostState+0x23e>
     7c2:	d7 c0       	rjmp	.+430    	; 0x972 <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     7c4:	00 91 47 01 	lds	r16, 0x0147
     7c8:	10 91 48 01 	lds	r17, 0x0148
     7cc:	01 15       	cp	r16, r1
     7ce:	11 05       	cpc	r17, r1
     7d0:	09 f4       	brne	.+2      	; 0x7d4 <USB_Host_ProcessNextHostState+0x6c>
     7d2:	e9 c0       	rjmp	.+466    	; 0x9a6 <USB_Host_ProcessNextHostState+0x23e>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	2b df       	rcall	.-426    	; 0x62e <USB_Host_WaitMS>
     7d8:	68 2f       	mov	r22, r24
     7da:	88 23       	and	r24, r24
     7dc:	31 f0       	breq	.+12     	; 0x7ea <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
     7de:	80 91 46 01 	lds	r24, 0x0146
     7e2:	80 93 53 01 	sts	0x0153, r24
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	da c0       	rjmp	.+436    	; 0x99e <USB_Host_ProcessNextHostState+0x236>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     7ea:	c8 01       	movw	r24, r16
     7ec:	01 97       	sbiw	r24, 0x01	; 1
     7ee:	90 93 48 01 	sts	0x0148, r25
     7f2:	80 93 47 01 	sts	0x0147, r24
     7f6:	89 2b       	or	r24, r25
     7f8:	09 f0       	breq	.+2      	; 0x7fc <USB_Host_ProcessNextHostState+0x94>
     7fa:	d5 c0       	rjmp	.+426    	; 0x9a6 <USB_Host_ProcessNextHostState+0x23e>
				  USB_HostState = PostWaitState;
     7fc:	80 91 46 01 	lds	r24, 0x0146
     800:	07 c0       	rjmp	.+14     	; 0x810 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     802:	88 ee       	ldi	r24, 0xE8	; 232
     804:	93 e0       	ldi	r25, 0x03	; 3
     806:	90 93 48 01 	sts	0x0148, r25
     80a:	80 93 47 01 	sts	0x0147, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     80e:	83 e0       	ldi	r24, 0x03	; 3
     810:	80 93 53 01 	sts	0x0153, r24
     814:	c8 c0       	rjmp	.+400    	; 0x9a6 <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     816:	80 91 47 01 	lds	r24, 0x0147
     81a:	90 91 48 01 	lds	r25, 0x0148
     81e:	01 97       	sbiw	r24, 0x01	; 1
     820:	90 93 48 01 	sts	0x0148, r25
     824:	80 93 47 01 	sts	0x0147, r24
     828:	01 96       	adiw	r24, 0x01	; 1
     82a:	29 f0       	breq	.+10     	; 0x836 <USB_Host_ProcessNextHostState+0xce>
     82c:	80 ed       	ldi	r24, 0xD0	; 208
     82e:	97 e0       	ldi	r25, 0x07	; 7
     830:	01 97       	sbiw	r24, 0x01	; 1
     832:	f1 f7       	brne	.-4      	; 0x830 <USB_Host_ProcessNextHostState+0xc8>
     834:	b8 c0       	rjmp	.+368    	; 0x9a6 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     836:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     838:	80 91 d8 00 	lds	r24, 0x00D8
     83c:	80 61       	ori	r24, 0x10	; 16
     83e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     842:	80 91 dd 00 	lds	r24, 0x00DD
     846:	8b 7f       	andi	r24, 0xFB	; 251
     848:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     84c:	80 91 d7 00 	lds	r24, 0x00D7
     850:	80 61       	ori	r24, 0x10	; 16
     852:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     856:	80 91 dd 00 	lds	r24, 0x00DD
     85a:	82 60       	ori	r24, 0x02	; 2
     85c:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     860:	84 e0       	ldi	r24, 0x04	; 4
     862:	d6 cf       	rjmp	.-84     	; 0x810 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     864:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     868:	80 ff       	sbrs	r24, 0
     86a:	9d c0       	rjmp	.+314    	; 0x9a6 <USB_Host_ProcessNextHostState+0x23e>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     86c:	80 91 9f 00 	lds	r24, 0x009F
     870:	8e 7f       	andi	r24, 0xFE	; 254
     872:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     876:	80 91 9f 00 	lds	r24, 0x009F
     87a:	8d 7f       	andi	r24, 0xFD	; 253
     87c:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     880:	80 91 df 00 	lds	r24, 0x00DF
     884:	8d 7f       	andi	r24, 0xFD	; 253
     886:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     88a:	80 91 de 00 	lds	r24, 0x00DE
     88e:	82 60       	ori	r24, 0x02	; 2
     890:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     894:	80 91 9e 00 	lds	r24, 0x009E
     898:	81 60       	ori	r24, 0x01	; 1
     89a:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     89e:	ed d0       	rcall	.+474    	; 0xa7a <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     8a0:	10 92 53 01 	sts	0x0153, r1
     8a4:	84 e6       	ldi	r24, 0x64	; 100
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	90 93 48 01 	sts	0x0148, r25
     8ac:	80 93 47 01 	sts	0x0147, r24
     8b0:	85 e0       	ldi	r24, 0x05	; 5
     8b2:	5c c0       	rjmp	.+184    	; 0x96c <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     8b4:	0b df       	rcall	.-490    	; 0x6cc <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     8b6:	10 92 53 01 	sts	0x0153, r1
     8ba:	88 ec       	ldi	r24, 0xC8	; 200
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	90 93 48 01 	sts	0x0148, r25
     8c2:	80 93 47 01 	sts	0x0147, r24
     8c6:	86 e0       	ldi	r24, 0x06	; 6
     8c8:	51 c0       	rjmp	.+162    	; 0x96c <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	40 e0       	ldi	r20, 0x00	; 0
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	00 e4       	ldi	r16, 0x40	; 64
     8d4:	10 e0       	ldi	r17, 0x00	; 0
     8d6:	ee 24       	eor	r14, r14
     8d8:	72 d0       	rcall	.+228    	; 0x9be <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     8da:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     8de:	87 ff       	sbrs	r24, 7
     8e0:	5c c0       	rjmp	.+184    	; 0x99a <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     8e2:	87 e0       	ldi	r24, 0x07	; 7
     8e4:	95 cf       	rjmp	.-214    	; 0x810 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     8e6:	ab e4       	ldi	r26, 0x4B	; 75
     8e8:	b1 e0       	ldi	r27, 0x01	; 1
     8ea:	ec e3       	ldi	r30, 0x3C	; 60
     8ec:	f1 e0       	ldi	r31, 0x01	; 1
     8ee:	88 e0       	ldi	r24, 0x08	; 8
     8f0:	01 90       	ld	r0, Z+
     8f2:	0d 92       	st	X+, r0
     8f4:	81 50       	subi	r24, 0x01	; 1
     8f6:	e1 f7       	brne	.-8      	; 0x8f0 <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     8f8:	ce 01       	movw	r24, r28
     8fa:	01 96       	adiw	r24, 0x01	; 1
     8fc:	31 d3       	rcall	.+1634   	; 0xf60 <USB_Host_SendControlRequest>
     8fe:	68 2f       	mov	r22, r24
     900:	88 23       	and	r24, r24
     902:	09 f0       	breq	.+2      	; 0x906 <USB_Host_ProcessNextHostState+0x19e>
     904:	48 c0       	rjmp	.+144    	; 0x996 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     906:	88 85       	ldd	r24, Y+8	; 0x08
     908:	80 93 44 01 	sts	0x0144, r24

			USB_Host_ResetDevice();
     90c:	df de       	rcall	.-578    	; 0x6cc <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     90e:	10 92 53 01 	sts	0x0153, r1
     912:	88 ec       	ldi	r24, 0xC8	; 200
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	90 93 48 01 	sts	0x0148, r25
     91a:	80 93 47 01 	sts	0x0147, r24
     91e:	88 e0       	ldi	r24, 0x08	; 8
     920:	25 c0       	rjmp	.+74     	; 0x96c <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     922:	00 91 44 01 	lds	r16, 0x0144
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	60 e0       	ldi	r22, 0x00	; 0
     92a:	40 e0       	ldi	r20, 0x00	; 0
     92c:	20 e0       	ldi	r18, 0x00	; 0
     92e:	10 e0       	ldi	r17, 0x00	; 0
     930:	ee 24       	eor	r14, r14
     932:	45 d0       	rcall	.+138    	; 0x9be <Pipe_ConfigurePipe>
     934:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     938:	87 ff       	sbrs	r24, 7
     93a:	2f c0       	rjmp	.+94     	; 0x99a <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     93c:	ab e4       	ldi	r26, 0x4B	; 75
     93e:	b1 e0       	ldi	r27, 0x01	; 1
     940:	e4 e3       	ldi	r30, 0x34	; 52
     942:	f1 e0       	ldi	r31, 0x01	; 1
     944:	88 e0       	ldi	r24, 0x08	; 8
     946:	01 90       	ld	r0, Z+
     948:	0d 92       	st	X+, r0
     94a:	81 50       	subi	r24, 0x01	; 1
     94c:	e1 f7       	brne	.-8      	; 0x946 <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	06 d3       	rcall	.+1548   	; 0xf60 <USB_Host_SendControlRequest>
     954:	68 2f       	mov	r22, r24
     956:	88 23       	and	r24, r24
     958:	f1 f4       	brne	.+60     	; 0x996 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     95a:	10 92 53 01 	sts	0x0153, r1
     95e:	84 e6       	ldi	r24, 0x64	; 100
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	90 93 48 01 	sts	0x0148, r25
     966:	80 93 47 01 	sts	0x0147, r24
     96a:	89 e0       	ldi	r24, 0x09	; 9
     96c:	80 93 46 01 	sts	0x0146, r24
     970:	1a c0       	rjmp	.+52     	; 0x9a6 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     978:	8a e0       	ldi	r24, 0x0A	; 10
     97a:	80 93 53 01 	sts	0x0153, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     97e:	20 dd       	rcall	.-1472   	; 0x3c0 <EVENT_USB_Host_DeviceEnumerationComplete>
     980:	12 c0       	rjmp	.+36     	; 0x9a6 <USB_Host_ProcessNextHostState+0x23e>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     982:	89 2f       	mov	r24, r25
     984:	c2 dc       	rcall	.-1660   	; 0x30a <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     986:	80 91 dd 00 	lds	r24, 0x00DD
     98a:	81 60       	ori	r24, 0x01	; 1
     98c:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     990:	05 dd       	rcall	.-1526   	; 0x39c <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     992:	b6 d0       	rcall	.+364    	; 0xb00 <USB_ResetInterface>
     994:	08 c0       	rjmp	.+16     	; 0x9a6 <USB_Host_ProcessNextHostState+0x23e>
	}
}
     996:	93 e0       	ldi	r25, 0x03	; 3
     998:	02 c0       	rjmp	.+4      	; 0x99e <USB_Host_ProcessNextHostState+0x236>
     99a:	94 e0       	ldi	r25, 0x04	; 4
     99c:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     99e:	80 91 53 01 	lds	r24, 0x0153
     9a2:	81 30       	cpi	r24, 0x01	; 1
     9a4:	71 f7       	brne	.-36     	; 0x982 <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     9a6:	28 96       	adiw	r28, 0x08	; 8
     9a8:	0f b6       	in	r0, 0x3f	; 63
     9aa:	f8 94       	cli
     9ac:	de bf       	out	0x3e, r29	; 62
     9ae:	0f be       	out	0x3f, r0	; 63
     9b0:	cd bf       	out	0x3d, r28	; 61
     9b2:	cf 91       	pop	r28
     9b4:	df 91       	pop	r29
     9b6:	1f 91       	pop	r17
     9b8:	0f 91       	pop	r16
     9ba:	ef 90       	pop	r14
     9bc:	08 95       	ret

000009be <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     9be:	ef 92       	push	r14
     9c0:	0f 93       	push	r16
     9c2:	1f 93       	push	r17
     9c4:	e8 2f       	mov	r30, r24
     9c6:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     9c8:	62 95       	swap	r22
     9ca:	66 0f       	add	r22, r22
     9cc:	66 0f       	add	r22, r22
     9ce:	60 7c       	andi	r22, 0xC0	; 192
     9d0:	64 2b       	or	r22, r20
     9d2:	2f 70       	andi	r18, 0x0F	; 15
     9d4:	62 2b       	or	r22, r18
     9d6:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     9d8:	72 60       	ori	r23, 0x02	; 2
     9da:	45 c0       	rjmp	.+138    	; 0xa66 <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     9dc:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     9e0:	3e 17       	cp	r19, r30
     9e2:	a1 f4       	brne	.+40     	; 0xa0c <Pipe_ConfigurePipe+0x4e>
     9e4:	88 e0       	ldi	r24, 0x08	; 8
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	03 c0       	rjmp	.+6      	; 0x9f2 <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     9ec:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     9ee:	88 0f       	add	r24, r24
     9f0:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     9f2:	80 17       	cp	r24, r16
     9f4:	91 07       	cpc	r25, r17
     9f6:	10 f4       	brcc	.+4      	; 0x9fc <Pipe_ConfigurePipe+0x3e>
     9f8:	25 30       	cpi	r18, 0x05	; 5
     9fa:	c1 f7       	brne	.-16     	; 0x9ec <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     9fc:	92 2f       	mov	r25, r18
     9fe:	92 95       	swap	r25
     a00:	90 7f       	andi	r25, 0xF0	; 240
     a02:	97 2b       	or	r25, r23
     a04:	56 2f       	mov	r21, r22
     a06:	40 e0       	ldi	r20, 0x00	; 0
     a08:	20 e0       	ldi	r18, 0x00	; 0
     a0a:	08 c0       	rjmp	.+16     	; 0xa1c <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     a0c:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     a10:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     a14:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
     a18:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     a1c:	91 ff       	sbrs	r25, 1
     a1e:	22 c0       	rjmp	.+68     	; 0xa64 <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a20:	80 91 a9 00 	lds	r24, 0x00A9
     a24:	8e 7f       	andi	r24, 0xFE	; 254
     a26:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     a2a:	80 91 ab 00 	lds	r24, 0x00AB
     a2e:	8d 7f       	andi	r24, 0xFD	; 253
     a30:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     a34:	80 91 a9 00 	lds	r24, 0x00A9
     a38:	81 60       	ori	r24, 0x01	; 1
     a3a:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     a3e:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
     a42:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
     a46:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
     a4a:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     a4e:	80 91 a9 00 	lds	r24, 0x00A9
     a52:	80 62       	ori	r24, 0x20	; 32
     a54:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a58:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     a5c:	87 fd       	sbrc	r24, 7
     a5e:	02 c0       	rjmp	.+4      	; 0xa64 <Pipe_ConfigurePipe+0xa6>
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	07 c0       	rjmp	.+14     	; 0xa72 <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     a64:	3f 5f       	subi	r19, 0xFF	; 255
     a66:	37 30       	cpi	r19, 0x07	; 7
     a68:	08 f4       	brcc	.+2      	; 0xa6c <Pipe_ConfigurePipe+0xae>
     a6a:	b8 cf       	rjmp	.-144    	; 0x9dc <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a6c:	e0 93 a7 00 	sts	0x00A7, r30
     a70:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
     a72:	1f 91       	pop	r17
     a74:	0f 91       	pop	r16
     a76:	ef 90       	pop	r14
     a78:	08 95       	ret

00000a7a <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     a7a:	10 92 f8 00 	sts	0x00F8, r1
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     a84:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     a88:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     a8c:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a90:	80 91 a9 00 	lds	r24, 0x00A9
     a94:	8e 7f       	andi	r24, 0xFE	; 254
     a96:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a9a:	9f 5f       	subi	r25, 0xFF	; 255
     a9c:	97 30       	cpi	r25, 0x07	; 7
     a9e:	81 f7       	brne	.-32     	; 0xa80 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     aa0:	08 95       	ret

00000aa2 <Pipe_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     aa2:	40 91 a2 00 	lds	r20, 0x00A2
     aa6:	50 91 a3 00 	lds	r21, 0x00A3
     aaa:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     aac:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     ab0:	80 73       	andi	r24, 0x30	; 48
     ab2:	80 31       	cpi	r24, 0x10	; 16
     ab4:	29 f4       	brne	.+10     	; 0xac0 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     ab6:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     aba:	80 ff       	sbrs	r24, 0
     abc:	05 c0       	rjmp	.+10     	; 0xac8 <Pipe_WaitUntilReady+0x26>
     abe:	1e c0       	rjmp	.+60     	; 0xafc <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     ac0:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     ac4:	82 fd       	sbrc	r24, 2
     ac6:	1a c0       	rjmp	.+52     	; 0xafc <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     ac8:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     acc:	81 ff       	sbrs	r24, 1
     ace:	02 c0       	rjmp	.+4      	; 0xad4 <Pipe_WaitUntilReady+0x32>
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     ad4:	80 91 53 01 	lds	r24, 0x0153
     ad8:	81 30       	cpi	r24, 0x01	; 1
     ada:	11 f4       	brne	.+4      	; 0xae0 <Pipe_WaitUntilReady+0x3e>
     adc:	82 e0       	ldi	r24, 0x02	; 2
     ade:	08 95       	ret
     ae0:	80 91 a2 00 	lds	r24, 0x00A2
     ae4:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     ae8:	84 17       	cp	r24, r20
     aea:	95 07       	cpc	r25, r21
     aec:	f9 f2       	breq	.-66     	; 0xaac <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     aee:	22 23       	and	r18, r18
     af0:	11 f4       	brne	.+4      	; 0xaf6 <Pipe_WaitUntilReady+0x54>
     af2:	83 e0       	ldi	r24, 0x03	; 3
     af4:	08 95       	ret
     af6:	21 50       	subi	r18, 0x01	; 1
     af8:	ac 01       	movw	r20, r24
     afa:	d8 cf       	rjmp	.-80     	; 0xaac <Pipe_WaitUntilReady+0xa>
     afc:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     afe:	08 95       	ret

00000b00 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     b00:	70 d0       	rcall	.+224    	; 0xbe2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b02:	77 d0       	rcall	.+238    	; 0xbf2 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     b04:	80 91 d8 00 	lds	r24, 0x00D8
     b08:	8f 77       	andi	r24, 0x7F	; 127
     b0a:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     b0e:	80 91 d8 00 	lds	r24, 0x00D8
     b12:	80 68       	ori	r24, 0x80	; 128
     b14:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     b18:	80 91 d8 00 	lds	r24, 0x00D8
     b1c:	8f 7d       	andi	r24, 0xDF	; 223
     b1e:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     b22:	80 91 d7 00 	lds	r24, 0x00D7
     b26:	8f 77       	andi	r24, 0x7F	; 127
     b28:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     b2c:	8c e0       	ldi	r24, 0x0C	; 12
     b2e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     b30:	8e e0       	ldi	r24, 0x0E	; 14
     b32:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     b34:	09 b4       	in	r0, 0x29	; 41
     b36:	00 fe       	sbrs	r0, 0
     b38:	fd cf       	rjmp	.-6      	; 0xb34 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	80 93 53 01 	sts	0x0153, r24
	USB_Host_ConfigurationNumber = 0;
     b40:	10 92 49 01 	sts	0x0149, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     b44:	80 e4       	ldi	r24, 0x40	; 64
     b46:	80 93 44 01 	sts	0x0144, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     b4a:	80 91 d8 00 	lds	r24, 0x00D8
     b4e:	80 64       	ori	r24, 0x40	; 64
     b50:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b54:	80 91 dd 00 	lds	r24, 0x00DD
     b58:	81 60       	ori	r24, 0x01	; 1
     b5a:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     b5e:	80 91 dd 00 	lds	r24, 0x00DD
     b62:	84 60       	ori	r24, 0x04	; 4
     b64:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     b68:	80 91 d7 00 	lds	r24, 0x00D7
     b6c:	8f 7e       	andi	r24, 0xEF	; 239
     b6e:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     b72:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     b74:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     b76:	80 91 de 00 	lds	r24, 0x00DE
     b7a:	81 60       	ori	r24, 0x01	; 1
     b7c:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     b80:	80 91 de 00 	lds	r24, 0x00DE
     b84:	84 60       	ori	r24, 0x04	; 4
     b86:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     b8a:	80 91 e0 00 	lds	r24, 0x00E0
     b8e:	8e 7f       	andi	r24, 0xFE	; 254
     b90:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     b94:	80 91 d8 00 	lds	r24, 0x00D8
     b98:	80 61       	ori	r24, 0x10	; 16
     b9a:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     b9e:	08 95       	ret

00000ba0 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     ba0:	e7 ed       	ldi	r30, 0xD7	; 215
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	81 60       	ori	r24, 0x01	; 1
     ba8:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	80 93 4a 01 	sts	0x014A, r24

	USB_ResetInterface();
}
     bb0:	a7 cf       	rjmp	.-178    	; 0xb00 <USB_ResetInterface>

00000bb2 <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     bb2:	17 d0       	rcall	.+46     	; 0xbe2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     bb4:	1e d0       	rcall	.+60     	; 0xbf2 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     bb6:	e0 ee       	ldi	r30, 0xE0	; 224
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	81 60       	ori	r24, 0x01	; 1
     bbe:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     bc0:	a8 ed       	ldi	r26, 0xD8	; 216
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	8c 91       	ld	r24, X
     bc6:	8f 77       	andi	r24, 0x7F	; 127
     bc8:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     bca:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     bcc:	e7 ed       	ldi	r30, 0xD7	; 215
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	8e 7f       	andi	r24, 0xFE	; 254
     bd4:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     bd6:	8c 91       	ld	r24, X
     bd8:	8f 7e       	andi	r24, 0xEF	; 239
     bda:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     bdc:	10 92 4a 01 	sts	0x014A, r1
}
     be0:	08 95       	ret

00000be2 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     be2:	e8 ed       	ldi	r30, 0xD8	; 216
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	8c 7f       	andi	r24, 0xFC	; 252
     bea:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     bec:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     bf0:	08 95       	ret

00000bf2 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     bf2:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     bf6:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     bfa:	08 95       	ret

00000bfc <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     bfc:	1f 92       	push	r1
     bfe:	0f 92       	push	r0
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	0f 92       	push	r0
     c04:	0b b6       	in	r0, 0x3b	; 59
     c06:	0f 92       	push	r0
     c08:	11 24       	eor	r1, r1
     c0a:	2f 93       	push	r18
     c0c:	3f 93       	push	r19
     c0e:	4f 93       	push	r20
     c10:	5f 93       	push	r21
     c12:	6f 93       	push	r22
     c14:	7f 93       	push	r23
     c16:	8f 93       	push	r24
     c18:	9f 93       	push	r25
     c1a:	af 93       	push	r26
     c1c:	bf 93       	push	r27
     c1e:	ef 93       	push	r30
     c20:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     c22:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     c26:	85 ff       	sbrs	r24, 5
     c28:	0a c0       	rjmp	.+20     	; 0xc3e <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     c2a:	80 91 a0 00 	lds	r24, 0x00A0
     c2e:	85 ff       	sbrs	r24, 5
     c30:	06 c0       	rjmp	.+12     	; 0xc3e <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     c32:	80 91 9f 00 	lds	r24, 0x009F
     c36:	8f 7d       	andi	r24, 0xDF	; 223
     c38:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     c3c:	67 d1       	rcall	.+718    	; 0xf0c <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     c3e:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     c42:	81 ff       	sbrs	r24, 1
     c44:	15 c0       	rjmp	.+42     	; 0xc70 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     c46:	80 91 a0 00 	lds	r24, 0x00A0
     c4a:	81 ff       	sbrs	r24, 1
     c4c:	11 c0       	rjmp	.+34     	; 0xc70 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     c4e:	80 91 9f 00 	lds	r24, 0x009F
     c52:	8d 7f       	andi	r24, 0xFD	; 253
     c54:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     c58:	80 91 9f 00 	lds	r24, 0x009F
     c5c:	8e 7f       	andi	r24, 0xFE	; 254
     c5e:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     c62:	80 91 a0 00 	lds	r24, 0x00A0
     c66:	8d 7f       	andi	r24, 0xFD	; 253
     c68:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     c6c:	97 db       	rcall	.-2258   	; 0x39c <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     c6e:	48 df       	rcall	.-368    	; 0xb00 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     c70:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     c74:	81 ff       	sbrs	r24, 1
     c76:	15 c0       	rjmp	.+42     	; 0xca2 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     c78:	80 91 de 00 	lds	r24, 0x00DE
     c7c:	81 ff       	sbrs	r24, 1
     c7e:	11 c0       	rjmp	.+34     	; 0xca2 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     c80:	80 91 df 00 	lds	r24, 0x00DF
     c84:	8d 7f       	andi	r24, 0xFD	; 253
     c86:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     c8a:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c8c:	80 91 dd 00 	lds	r24, 0x00DD
     c90:	81 60       	ori	r24, 0x01	; 1
     c92:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	64 db       	rcall	.-2360   	; 0x362 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     c9a:	80 db       	rcall	.-2304   	; 0x39c <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	80 93 53 01 	sts	0x0153, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     ca2:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     ca6:	80 ff       	sbrs	r24, 0
     ca8:	17 c0       	rjmp	.+46     	; 0xcd8 <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     caa:	80 91 de 00 	lds	r24, 0x00DE
     cae:	80 ff       	sbrs	r24, 0
     cb0:	13 c0       	rjmp	.+38     	; 0xcd8 <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     cb2:	80 91 df 00 	lds	r24, 0x00DF
     cb6:	8e 7f       	andi	r24, 0xFE	; 254
     cb8:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     cbc:	80 91 de 00 	lds	r24, 0x00DE
     cc0:	8e 7f       	andi	r24, 0xFE	; 254
     cc2:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     cc6:	73 db       	rcall	.-2330   	; 0x3ae <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     cc8:	80 91 a0 00 	lds	r24, 0x00A0
     ccc:	82 60       	ori	r24, 0x02	; 2
     cce:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     cd2:	82 e0       	ldi	r24, 0x02	; 2
     cd4:	80 93 53 01 	sts	0x0153, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     cd8:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     cdc:	82 ff       	sbrs	r24, 2
     cde:	0e c0       	rjmp	.+28     	; 0xcfc <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     ce0:	80 91 de 00 	lds	r24, 0x00DE
     ce4:	82 ff       	sbrs	r24, 2
     ce6:	0a c0       	rjmp	.+20     	; 0xcfc <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     ce8:	80 91 df 00 	lds	r24, 0x00DF
     cec:	8b 7f       	andi	r24, 0xFB	; 251
     cee:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     cf2:	82 e0       	ldi	r24, 0x02	; 2
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	09 db       	rcall	.-2542   	; 0x30a <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     cf8:	51 db       	rcall	.-2398   	; 0x39c <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     cfa:	02 df       	rcall	.-508    	; 0xb00 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     cfc:	ff 91       	pop	r31
     cfe:	ef 91       	pop	r30
     d00:	bf 91       	pop	r27
     d02:	af 91       	pop	r26
     d04:	9f 91       	pop	r25
     d06:	8f 91       	pop	r24
     d08:	7f 91       	pop	r23
     d0a:	6f 91       	pop	r22
     d0c:	5f 91       	pop	r21
     d0e:	4f 91       	pop	r20
     d10:	3f 91       	pop	r19
     d12:	2f 91       	pop	r18
     d14:	0f 90       	pop	r0
     d16:	0b be       	out	0x3b, r0	; 59
     d18:	0f 90       	pop	r0
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	0f 90       	pop	r0
     d1e:	1f 90       	pop	r1
     d20:	18 95       	reti

00000d22 <Pipe_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     d22:	bf 92       	push	r11
     d24:	cf 92       	push	r12
     d26:	df 92       	push	r13
     d28:	ef 92       	push	r14
     d2a:	ff 92       	push	r15
     d2c:	0f 93       	push	r16
     d2e:	1f 93       	push	r17
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
     d34:	18 2f       	mov	r17, r24
     d36:	09 2f       	mov	r16, r25
     d38:	7b 01       	movw	r14, r22
     d3a:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     d3c:	80 91 aa 00 	lds	r24, 0x00AA
     d40:	8f 7c       	andi	r24, 0xCF	; 207
     d42:	80 62       	ori	r24, 0x20	; 32
     d44:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     d48:	ac de       	rcall	.-680    	; 0xaa2 <Pipe_WaitUntilReady>
     d4a:	b8 2e       	mov	r11, r24
     d4c:	88 23       	and	r24, r24
     d4e:	a9 f5       	brne	.+106    	; 0xdba <Pipe_Write_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     d50:	81 2f       	mov	r24, r17
     d52:	90 2f       	mov	r25, r16
     d54:	9c 01       	movw	r18, r24
     d56:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     d58:	c1 14       	cp	r12, r1
     d5a:	d1 04       	cpc	r13, r1
     d5c:	39 f0       	breq	.+14     	; 0xd6c <Pipe_Write_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
     d5e:	f6 01       	movw	r30, r12
     d60:	80 81       	ld	r24, Z
     d62:	91 81       	ldd	r25, Z+1	; 0x01
     d64:	e8 1a       	sub	r14, r24
     d66:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     d68:	c8 0f       	add	r28, r24
     d6a:	d9 1f       	adc	r29, r25
     d6c:	00 e0       	ldi	r16, 0x00	; 0
     d6e:	10 e0       	ldi	r17, 0x00	; 0
     d70:	21 c0       	rjmp	.+66     	; 0xdb4 <Pipe_Write_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     d72:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     d76:	85 fd       	sbrc	r24, 5
     d78:	15 c0       	rjmp	.+42     	; 0xda4 <Pipe_Write_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     d7a:	80 91 a6 00 	lds	r24, 0x00A6
     d7e:	8b 77       	andi	r24, 0x7B	; 123
     d80:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     d84:	c1 14       	cp	r12, r1
     d86:	d1 04       	cpc	r13, r1
     d88:	49 f0       	breq	.+18     	; 0xd9c <Pipe_Write_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
     d8a:	f6 01       	movw	r30, r12
     d8c:	80 81       	ld	r24, Z
     d8e:	91 81       	ldd	r25, Z+1	; 0x01
     d90:	80 0f       	add	r24, r16
     d92:	91 1f       	adc	r25, r17
     d94:	91 83       	std	Z+1, r25	; 0x01
     d96:	80 83       	st	Z, r24
     d98:	84 e0       	ldi	r24, 0x04	; 4
     d9a:	10 c0       	rjmp	.+32     	; 0xdbc <Pipe_Write_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     d9c:	82 de       	rcall	.-764    	; 0xaa2 <Pipe_WaitUntilReady>
     d9e:	88 23       	and	r24, r24
     da0:	49 f0       	breq	.+18     	; 0xdb4 <Pipe_Write_Stream_LE+0x92>
     da2:	0c c0       	rjmp	.+24     	; 0xdbc <Pipe_Write_Stream_LE+0x9a>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     da4:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     da6:	80 93 af 00 	sts	0x00AF, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     daa:	08 94       	sec
     dac:	e1 08       	sbc	r14, r1
     dae:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
     db0:	0f 5f       	subi	r16, 0xFF	; 255
     db2:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     db4:	e1 14       	cp	r14, r1
     db6:	f1 04       	cpc	r15, r1
     db8:	e1 f6       	brne	.-72     	; 0xd72 <Pipe_Write_Stream_LE+0x50>
     dba:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     dbc:	df 91       	pop	r29
     dbe:	cf 91       	pop	r28
     dc0:	1f 91       	pop	r17
     dc2:	0f 91       	pop	r16
     dc4:	ff 90       	pop	r15
     dc6:	ef 90       	pop	r14
     dc8:	df 90       	pop	r13
     dca:	cf 90       	pop	r12
     dcc:	bf 90       	pop	r11
     dce:	08 95       	ret

00000dd0 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     dd0:	af 92       	push	r10
     dd2:	bf 92       	push	r11
     dd4:	cf 92       	push	r12
     dd6:	df 92       	push	r13
     dd8:	ef 92       	push	r14
     dda:	ff 92       	push	r15
     ddc:	0f 93       	push	r16
     dde:	1f 93       	push	r17
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	7c 01       	movw	r14, r24
     de6:	eb 01       	movw	r28, r22
     de8:	6a 01       	movw	r12, r20
     dea:	24 c0       	rjmp	.+72     	; 0xe34 <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     dec:	e8 81       	ld	r30, Y
     dee:	f9 81       	ldd	r31, Y+1	; 0x01
     df0:	be 2e       	mov	r11, r30
     df2:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     df4:	80 81       	ld	r24, Z
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	98 01       	movw	r18, r16
     dfa:	80 17       	cp	r24, r16
     dfc:	91 07       	cpc	r25, r17
     dfe:	08 f4       	brcc	.+2      	; 0xe02 <USB_GetNextDescriptorComp+0x32>
     e00:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     e02:	e2 0f       	add	r30, r18
     e04:	f3 1f       	adc	r31, r19
     e06:	f9 83       	std	Y+1, r31	; 0x01
     e08:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     e0a:	f7 01       	movw	r30, r14
     e0c:	80 81       	ld	r24, Z
     e0e:	91 81       	ldd	r25, Z+1	; 0x01
     e10:	82 1b       	sub	r24, r18
     e12:	93 0b       	sbc	r25, r19
     e14:	91 83       	std	Z+1, r25	; 0x01
     e16:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     e18:	88 81       	ld	r24, Y
     e1a:	99 81       	ldd	r25, Y+1	; 0x01
     e1c:	f6 01       	movw	r30, r12
     e1e:	09 95       	icall
     e20:	82 30       	cpi	r24, 0x02	; 2
     e22:	41 f0       	breq	.+16     	; 0xe34 <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     e24:	81 30       	cpi	r24, 0x01	; 1
     e26:	69 f4       	brne	.+26     	; 0xe42 <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
     e28:	b8 82       	st	Y, r11
     e2a:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
     e2c:	f7 01       	movw	r30, r14
     e2e:	11 83       	std	Z+1, r17	; 0x01
     e30:	00 83       	st	Z, r16
     e32:	07 c0       	rjmp	.+14     	; 0xe42 <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     e34:	f7 01       	movw	r30, r14
     e36:	00 81       	ld	r16, Z
     e38:	11 81       	ldd	r17, Z+1	; 0x01
     e3a:	01 15       	cp	r16, r1
     e3c:	11 05       	cpc	r17, r1
     e3e:	b1 f6       	brne	.-84     	; 0xdec <USB_GetNextDescriptorComp+0x1c>
     e40:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	1f 91       	pop	r17
     e48:	0f 91       	pop	r16
     e4a:	ff 90       	pop	r15
     e4c:	ef 90       	pop	r14
     e4e:	df 90       	pop	r13
     e50:	cf 90       	pop	r12
     e52:	bf 90       	pop	r11
     e54:	af 90       	pop	r10
     e56:	08 95       	ret

00000e58 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     e58:	cf 92       	push	r12
     e5a:	df 92       	push	r13
     e5c:	ef 92       	push	r14
     e5e:	ff 92       	push	r15
     e60:	0f 93       	push	r16
     e62:	1f 93       	push	r17
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
     e6c:	29 97       	sbiw	r28, 0x09	; 9
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	f8 94       	cli
     e72:	de bf       	out	0x3e, r29	; 62
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	cd bf       	out	0x3d, r28	; 61
     e78:	6b 01       	movw	r12, r22
     e7a:	8a 01       	movw	r16, r20
     e7c:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     e7e:	90 e8       	ldi	r25, 0x80	; 128
     e80:	90 93 4b 01 	sts	0x014B, r25
     e84:	96 e0       	ldi	r25, 0x06	; 6
     e86:	90 93 4c 01 	sts	0x014C, r25
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	01 97       	sbiw	r24, 0x01	; 1
     e8e:	92 60       	ori	r25, 0x02	; 2
     e90:	90 93 4e 01 	sts	0x014E, r25
     e94:	80 93 4d 01 	sts	0x014D, r24
     e98:	10 92 50 01 	sts	0x0150, r1
     e9c:	10 92 4f 01 	sts	0x014F, r1
     ea0:	89 e0       	ldi	r24, 0x09	; 9
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	90 93 52 01 	sts	0x0152, r25
     ea8:	80 93 51 01 	sts	0x0151, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     eac:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     eb0:	ce 01       	movw	r24, r28
     eb2:	01 96       	adiw	r24, 0x01	; 1
     eb4:	55 d0       	rcall	.+170    	; 0xf60 <USB_Host_SendControlRequest>
     eb6:	28 2f       	mov	r18, r24
     eb8:	88 23       	and	r24, r24
     eba:	c1 f4       	brne	.+48     	; 0xeec <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	9c 81       	ldd	r25, Y+4	; 0x04
     ec0:	f6 01       	movw	r30, r12
     ec2:	91 83       	std	Z+1, r25	; 0x01
     ec4:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     ec6:	e8 16       	cp	r14, r24
     ec8:	f9 06       	cpc	r15, r25
     eca:	10 f4       	brcc	.+4      	; 0xed0 <USB_Host_GetDeviceConfigDescriptor+0x78>
     ecc:	25 e0       	ldi	r18, 0x05	; 5
     ece:	0e c0       	rjmp	.+28     	; 0xeec <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     ed0:	90 93 52 01 	sts	0x0152, r25
     ed4:	80 93 51 01 	sts	0x0151, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     ed8:	c8 01       	movw	r24, r16
     eda:	42 d0       	rcall	.+132    	; 0xf60 <USB_Host_SendControlRequest>
     edc:	28 2f       	mov	r18, r24
     ede:	88 23       	and	r24, r24
     ee0:	29 f4       	brne	.+10     	; 0xeec <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     ee2:	f8 01       	movw	r30, r16
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	82 30       	cpi	r24, 0x02	; 2
     ee8:	09 f0       	breq	.+2      	; 0xeec <USB_Host_GetDeviceConfigDescriptor+0x94>
     eea:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     eec:	82 2f       	mov	r24, r18
     eee:	29 96       	adiw	r28, 0x09	; 9
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	f8 94       	cli
     ef4:	de bf       	out	0x3e, r29	; 62
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	cd bf       	out	0x3d, r28	; 61
     efa:	cf 91       	pop	r28
     efc:	df 91       	pop	r29
     efe:	1f 91       	pop	r17
     f00:	0f 91       	pop	r16
     f02:	ff 90       	pop	r15
     f04:	ef 90       	pop	r14
     f06:	df 90       	pop	r13
     f08:	cf 90       	pop	r12
     f0a:	08 95       	ret

00000f0c <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     f0c:	08 95       	ret

00000f0e <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     f0e:	1f 93       	push	r17
     f10:	cf 93       	push	r28
     f12:	df 93       	push	r29
     f14:	18 2f       	mov	r17, r24
     f16:	c8 ee       	ldi	r28, 0xE8	; 232
     f18:	d3 e0       	ldi	r29, 0x03	; 3
     f1a:	09 c0       	rjmp	.+18     	; 0xf2e <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	87 db       	rcall	.-2290   	; 0x62e <USB_Host_WaitMS>
     f20:	88 23       	and	r24, r24
     f22:	d1 f4       	brne	.+52     	; 0xf58 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     f24:	20 97       	sbiw	r28, 0x00	; 0
     f26:	11 f4       	brne	.+4      	; 0xf2c <USB_Host_WaitForIOS+0x1e>
     f28:	84 e0       	ldi	r24, 0x04	; 4
     f2a:	16 c0       	rjmp	.+44     	; 0xf58 <USB_Host_WaitForIOS+0x4a>
     f2c:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f2e:	11 23       	and	r17, r17
     f30:	29 f4       	brne	.+10     	; 0xf3c <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     f32:	80 91 a6 00 	lds	r24, 0x00A6
     f36:	83 ff       	sbrs	r24, 3
     f38:	f1 cf       	rjmp	.-30     	; 0xf1c <USB_Host_WaitForIOS+0xe>
     f3a:	0d c0       	rjmp	.+26     	; 0xf56 <USB_Host_WaitForIOS+0x48>
     f3c:	11 30       	cpi	r17, 0x01	; 1
     f3e:	29 f4       	brne	.+10     	; 0xf4a <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     f40:	80 91 a6 00 	lds	r24, 0x00A6
     f44:	80 ff       	sbrs	r24, 0
     f46:	ea cf       	rjmp	.-44     	; 0xf1c <USB_Host_WaitForIOS+0xe>
     f48:	06 c0       	rjmp	.+12     	; 0xf56 <USB_Host_WaitForIOS+0x48>
     f4a:	12 30       	cpi	r17, 0x02	; 2
     f4c:	39 f7       	brne	.-50     	; 0xf1c <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     f4e:	80 91 a6 00 	lds	r24, 0x00A6
     f52:	82 ff       	sbrs	r24, 2
     f54:	e3 cf       	rjmp	.-58     	; 0xf1c <USB_Host_WaitForIOS+0xe>
     f56:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	1f 91       	pop	r17
     f5e:	08 95       	ret

00000f60 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     f60:	ff 92       	push	r15
     f62:	0f 93       	push	r16
     f64:	1f 93       	push	r17
     f66:	cf 93       	push	r28
     f68:	df 93       	push	r29
     f6a:	18 2f       	mov	r17, r24
     f6c:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     f6e:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     f72:	c0 91 51 01 	lds	r28, 0x0151
     f76:	d0 91 52 01 	lds	r29, 0x0152
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     f7a:	80 91 9e 00 	lds	r24, 0x009E
     f7e:	81 60       	ori	r24, 0x01	; 1
     f80:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	53 db       	rcall	.-2394   	; 0x62e <USB_Host_WaitMS>
     f88:	98 2f       	mov	r25, r24
     f8a:	88 23       	and	r24, r24
     f8c:	09 f0       	breq	.+2      	; 0xf90 <USB_Host_SendControlRequest+0x30>
     f8e:	ee c0       	rjmp	.+476    	; 0x116c <USB_Host_SendControlRequest+0x20c>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f90:	80 91 aa 00 	lds	r24, 0x00AA
     f94:	8f 7c       	andi	r24, 0xCF	; 207
     f96:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     f9a:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     f9e:	80 91 a6 00 	lds	r24, 0x00A6
     fa2:	8f 7e       	andi	r24, 0xEF	; 239
     fa4:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fa8:	80 91 a9 00 	lds	r24, 0x00A9
     fac:	8f 7b       	andi	r24, 0xBF	; 191
     fae:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearError();

	Pipe_Unfreeze();

	Pipe_Write_8(USB_ControlRequest.bmRequestType);
     fb2:	80 91 4b 01 	lds	r24, 0x014B
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     fb6:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
     fba:	80 91 4c 01 	lds	r24, 0x014C
     fbe:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
     fc2:	80 91 4d 01 	lds	r24, 0x014D
     fc6:	90 91 4e 01 	lds	r25, 0x014E
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
     fca:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
     fce:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
     fd2:	80 91 4f 01 	lds	r24, 0x014F
     fd6:	90 91 50 01 	lds	r25, 0x0150
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
     fda:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
     fde:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
     fe2:	80 91 51 01 	lds	r24, 0x0151
     fe6:	90 91 52 01 	lds	r25, 0x0152
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
     fea:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
     fee:	90 93 af 00 	sts	0x00AF, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     ff2:	80 91 a6 00 	lds	r24, 0x00A6
     ff6:	87 77       	andi	r24, 0x77	; 119
     ff8:	80 93 a6 00 	sts	0x00A6, r24

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	87 df       	rcall	.-242    	; 0xf0e <USB_Host_WaitForIOS>
    1000:	98 2f       	mov	r25, r24
    1002:	88 23       	and	r24, r24
    1004:	09 f0       	breq	.+2      	; 0x1008 <USB_Host_SendControlRequest+0xa8>
    1006:	b2 c0       	rjmp	.+356    	; 0x116c <USB_Host_SendControlRequest+0x20c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1008:	80 91 a9 00 	lds	r24, 0x00A9
    100c:	80 64       	ori	r24, 0x40	; 64
    100e:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	0c db       	rcall	.-2536   	; 0x62e <USB_Host_WaitMS>
    1016:	98 2f       	mov	r25, r24
    1018:	88 23       	and	r24, r24
    101a:	09 f0       	breq	.+2      	; 0x101e <USB_Host_SendControlRequest+0xbe>
    101c:	a7 c0       	rjmp	.+334    	; 0x116c <USB_Host_SendControlRequest+0x20c>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
    101e:	21 2f       	mov	r18, r17
    1020:	30 2f       	mov	r19, r16
    1022:	c9 01       	movw	r24, r18
    1024:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1026:	80 91 4b 01 	lds	r24, 0x014B
    102a:	87 ff       	sbrs	r24, 7
    102c:	52 c0       	rjmp	.+164    	; 0x10d2 <USB_Host_SendControlRequest+0x172>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    102e:	80 91 aa 00 	lds	r24, 0x00AA
    1032:	8f 7c       	andi	r24, 0xCF	; 207
    1034:	80 61       	ori	r24, 0x10	; 16
    1036:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    103a:	01 15       	cp	r16, r1
    103c:	11 05       	cpc	r17, r1
    103e:	69 f5       	brne	.+90     	; 0x109a <USB_Host_SendControlRequest+0x13a>
    1040:	2e c0       	rjmp	.+92     	; 0x109e <USB_Host_SendControlRequest+0x13e>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1042:	80 91 a9 00 	lds	r24, 0x00A9
    1046:	8f 7b       	andi	r24, 0xBF	; 191
    1048:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	5f df       	rcall	.-322    	; 0xf0e <USB_Host_WaitForIOS>
    1050:	98 2f       	mov	r25, r24
    1052:	88 23       	and	r24, r24
    1054:	09 f0       	breq	.+2      	; 0x1058 <USB_Host_SendControlRequest+0xf8>
    1056:	8a c0       	rjmp	.+276    	; 0x116c <USB_Host_SendControlRequest+0x20c>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1058:	80 91 f6 00 	lds	r24, 0x00F6
    105c:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    1060:	89 2b       	or	r24, r25
    1062:	49 f4       	brne	.+18     	; 0x1076 <USB_Host_SendControlRequest+0x116>
    1064:	c0 e0       	ldi	r28, 0x00	; 0
    1066:	d0 e0       	ldi	r29, 0x00	; 0
    1068:	06 c0       	rjmp	.+12     	; 0x1076 <USB_Host_SendControlRequest+0x116>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    106a:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    106e:	f8 01       	movw	r30, r16
    1070:	81 93       	st	Z+, r24
    1072:	8f 01       	movw	r16, r30
					DataLen--;
    1074:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1076:	80 91 f6 00 	lds	r24, 0x00F6
    107a:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    107e:	89 2b       	or	r24, r25
    1080:	11 f0       	breq	.+4      	; 0x1086 <USB_Host_SendControlRequest+0x126>
    1082:	20 97       	sbiw	r28, 0x00	; 0
    1084:	91 f7       	brne	.-28     	; 0x106a <USB_Host_SendControlRequest+0x10a>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1086:	80 91 a9 00 	lds	r24, 0x00A9
    108a:	80 64       	ori	r24, 0x40	; 64
    108c:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1090:	80 91 a6 00 	lds	r24, 0x00A6
    1094:	8e 77       	andi	r24, 0x7E	; 126
    1096:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    109a:	20 97       	sbiw	r28, 0x00	; 0
    109c:	91 f6       	brne	.-92     	; 0x1042 <USB_Host_SendControlRequest+0xe2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    109e:	80 91 aa 00 	lds	r24, 0x00AA
    10a2:	8f 7c       	andi	r24, 0xCF	; 207
    10a4:	80 62       	ori	r24, 0x20	; 32
    10a6:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10aa:	80 91 a9 00 	lds	r24, 0x00A9
    10ae:	8f 7b       	andi	r24, 0xBF	; 191
    10b0:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10b4:	82 e0       	ldi	r24, 0x02	; 2
    10b6:	2b df       	rcall	.-426    	; 0xf0e <USB_Host_WaitForIOS>
    10b8:	98 2f       	mov	r25, r24
    10ba:	88 23       	and	r24, r24
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <USB_Host_SendControlRequest+0x160>
    10be:	56 c0       	rjmp	.+172    	; 0x116c <USB_Host_SendControlRequest+0x20c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    10c0:	80 91 a6 00 	lds	r24, 0x00A6
    10c4:	8b 77       	andi	r24, 0x7B	; 123
    10c6:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10ca:	82 e0       	ldi	r24, 0x02	; 2
    10cc:	20 df       	rcall	.-448    	; 0xf0e <USB_Host_WaitForIOS>
    10ce:	98 2f       	mov	r25, r24
    10d0:	4d c0       	rjmp	.+154    	; 0x116c <USB_Host_SendControlRequest+0x20c>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    10d2:	01 15       	cp	r16, r1
    10d4:	11 05       	cpc	r17, r1
    10d6:	a9 f1       	breq	.+106    	; 0x1142 <USB_Host_SendControlRequest+0x1e2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10d8:	80 91 aa 00 	lds	r24, 0x00AA
    10dc:	8f 7c       	andi	r24, 0xCF	; 207
    10de:	80 62       	ori	r24, 0x20	; 32
    10e0:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10e4:	80 91 a9 00 	lds	r24, 0x00A9
    10e8:	8f 7b       	andi	r24, 0xBF	; 191
    10ea:	80 93 a9 00 	sts	0x00A9, r24
    10ee:	1d c0       	rjmp	.+58     	; 0x112a <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10f0:	82 e0       	ldi	r24, 0x02	; 2
    10f2:	0d df       	rcall	.-486    	; 0xf0e <USB_Host_WaitForIOS>
    10f4:	98 2f       	mov	r25, r24
    10f6:	88 23       	and	r24, r24
    10f8:	c9 f5       	brne	.+114    	; 0x116c <USB_Host_SendControlRequest+0x20c>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    10fa:	80 91 44 01 	lds	r24, 0x0144
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	07 c0       	rjmp	.+14     	; 0x1112 <USB_Host_SendControlRequest+0x1b2>
				{
					Pipe_Write_8(*(DataStream++));
    1104:	f8 01       	movw	r30, r16
    1106:	81 91       	ld	r24, Z+
    1108:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    110a:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    110e:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1110:	39 f0       	breq	.+14     	; 0x1120 <USB_Host_SendControlRequest+0x1c0>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1112:	80 91 f6 00 	lds	r24, 0x00F6
    1116:	90 91 f7 00 	lds	r25, 0x00F7
    111a:	82 17       	cp	r24, r18
    111c:	93 07       	cpc	r25, r19
    111e:	90 f3       	brcs	.-28     	; 0x1104 <USB_Host_SendControlRequest+0x1a4>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1120:	80 91 a6 00 	lds	r24, 0x00A6
    1124:	8b 77       	andi	r24, 0x7B	; 123
    1126:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    112a:	20 97       	sbiw	r28, 0x00	; 0
    112c:	09 f7       	brne	.-62     	; 0x10f0 <USB_Host_SendControlRequest+0x190>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    112e:	82 e0       	ldi	r24, 0x02	; 2
    1130:	ee de       	rcall	.-548    	; 0xf0e <USB_Host_WaitForIOS>
    1132:	98 2f       	mov	r25, r24
    1134:	88 23       	and	r24, r24
    1136:	d1 f4       	brne	.+52     	; 0x116c <USB_Host_SendControlRequest+0x20c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1138:	80 91 a9 00 	lds	r24, 0x00A9
    113c:	80 64       	ori	r24, 0x40	; 64
    113e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1142:	80 91 aa 00 	lds	r24, 0x00AA
    1146:	8f 7c       	andi	r24, 0xCF	; 207
    1148:	80 61       	ori	r24, 0x10	; 16
    114a:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    114e:	80 91 a9 00 	lds	r24, 0x00A9
    1152:	8f 7b       	andi	r24, 0xBF	; 191
    1154:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	d9 de       	rcall	.-590    	; 0xf0e <USB_Host_WaitForIOS>
    115c:	98 2f       	mov	r25, r24
    115e:	88 23       	and	r24, r24
    1160:	29 f4       	brne	.+10     	; 0x116c <USB_Host_SendControlRequest+0x20c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1162:	80 91 a6 00 	lds	r24, 0x00A6
    1166:	8e 77       	andi	r24, 0x7E	; 126
    1168:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    116c:	80 91 a9 00 	lds	r24, 0x00A9
    1170:	80 64       	ori	r24, 0x40	; 64
    1172:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    1176:	f0 fc       	sbrc	r15, 0
    1178:	05 c0       	rjmp	.+10     	; 0x1184 <USB_Host_SendControlRequest+0x224>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    117a:	80 91 9e 00 	lds	r24, 0x009E
    117e:	8e 7f       	andi	r24, 0xFE	; 254
    1180:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    118a:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    118e:	89 2f       	mov	r24, r25
    1190:	df 91       	pop	r29
    1192:	cf 91       	pop	r28
    1194:	1f 91       	pop	r17
    1196:	0f 91       	pop	r16
    1198:	ff 90       	pop	r15
    119a:	08 95       	ret

0000119c <USB_Host_SetInterfaceAltSetting>:
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
	USB_ControlRequest = (USB_Request_Header_t)
    119c:	eb e4       	ldi	r30, 0x4B	; 75
    119e:	f1 e0       	ldi	r31, 0x01	; 1
    11a0:	91 e0       	ldi	r25, 0x01	; 1
    11a2:	90 93 4b 01 	sts	0x014B, r25
    11a6:	9b e0       	ldi	r25, 0x0B	; 11
    11a8:	90 93 4c 01 	sts	0x014C, r25
    11ac:	60 93 4d 01 	sts	0x014D, r22
    11b0:	13 82       	std	Z+3, r1	; 0x03
    11b2:	80 93 4f 01 	sts	0x014F, r24
    11b6:	15 82       	std	Z+5, r1	; 0x05
    11b8:	10 92 52 01 	sts	0x0152, r1
    11bc:	10 92 51 01 	sts	0x0151, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    11c0:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	90 e0       	ldi	r25, 0x00	; 0
}
    11c8:	cb ce       	rjmp	.-618    	; 0xf60 <USB_Host_SendControlRequest>

000011ca <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    11ca:	1f 93       	push	r17
    11cc:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    11ce:	10 92 4b 01 	sts	0x014B, r1
    11d2:	89 e0       	ldi	r24, 0x09	; 9
    11d4:	80 93 4c 01 	sts	0x014C, r24
    11d8:	10 93 4d 01 	sts	0x014D, r17
    11dc:	10 92 4e 01 	sts	0x014E, r1
    11e0:	10 92 50 01 	sts	0x0150, r1
    11e4:	10 92 4f 01 	sts	0x014F, r1
    11e8:	10 92 52 01 	sts	0x0152, r1
    11ec:	10 92 51 01 	sts	0x0151, r1
    11f0:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	b3 de       	rcall	.-666    	; 0xf60 <USB_Host_SendControlRequest>
    11fa:	88 23       	and	r24, r24
    11fc:	49 f4       	brne	.+18     	; 0x1210 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    11fe:	10 93 49 01 	sts	0x0149, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1202:	11 23       	and	r17, r17
    1204:	11 f4       	brne	.+4      	; 0x120a <USB_Host_SetDeviceConfiguration+0x40>
    1206:	9a e0       	ldi	r25, 0x0A	; 10
    1208:	01 c0       	rjmp	.+2      	; 0x120c <USB_Host_SetDeviceConfiguration+0x42>
    120a:	9b e0       	ldi	r25, 0x0B	; 11
    120c:	90 93 53 01 	sts	0x0153, r25
	}

	return ErrorCode;
}
    1210:	1f 91       	pop	r17
    1212:	08 95       	ret

00001214 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1214:	ff 92       	push	r15
    1216:	0f 93       	push	r16
    1218:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    121a:	07 ea       	ldi	r16, 0xA7	; 167
    121c:	10 e0       	ldi	r17, 0x00	; 0
    121e:	f8 01       	movw	r30, r16
    1220:	f0 80       	ld	r15, Z
    1222:	f7 e0       	ldi	r31, 0x07	; 7
    1224:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1226:	f8 01       	movw	r30, r16
    1228:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    122a:	9e da       	rcall	.-2756   	; 0x768 <USB_Host_ProcessNextHostState>
    122c:	f8 01       	movw	r30, r16
    122e:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	ff 90       	pop	r15
    1236:	08 95       	ret

00001238 <DCOMP_PRNT_Host_NextPRNTInterface>:

	return PRNT_ENUMERROR_NoError;
}

static uint8_t DCOMP_PRNT_Host_NextPRNTInterface(void* CurrentDescriptor)
{
    1238:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    123a:	81 81       	ldd	r24, Z+1	; 0x01
    123c:	84 30       	cpi	r24, 0x04	; 4
    123e:	59 f4       	brne	.+22     	; 0x1256 <DCOMP_PRNT_Host_NextPRNTInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == PRNT_CSCP_PrinterClass)    &&
    1240:	85 81       	ldd	r24, Z+5	; 0x05
    1242:	87 30       	cpi	r24, 0x07	; 7
    1244:	41 f4       	brne	.+16     	; 0x1256 <DCOMP_PRNT_Host_NextPRNTInterface+0x1e>
    1246:	86 81       	ldd	r24, Z+6	; 0x06
    1248:	81 30       	cpi	r24, 0x01	; 1
    124a:	29 f4       	brne	.+10     	; 0x1256 <DCOMP_PRNT_Host_NextPRNTInterface+0x1e>
    124c:	87 81       	ldd	r24, Z+7	; 0x07
    124e:	82 30       	cpi	r24, 0x02	; 2
    1250:	11 f4       	brne	.+4      	; 0x1256 <DCOMP_PRNT_Host_NextPRNTInterface+0x1e>
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	08 95       	ret
    1256:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1258:	08 95       	ret

0000125a <DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint>:

static uint8_t DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint(void* CurrentDescriptor)
{
    125a:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    125c:	81 81       	ldd	r24, Z+1	; 0x01
    125e:	85 30       	cpi	r24, 0x05	; 5
    1260:	31 f4       	brne	.+12     	; 0x126e <DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (EndpointType == EP_TYPE_BULK)
    1262:	83 81       	ldd	r24, Z+3	; 0x03
    1264:	83 70       	andi	r24, 0x03	; 3
    1266:	82 30       	cpi	r24, 0x02	; 2
    1268:	31 f4       	brne	.+12     	; 0x1276 <DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint+0x1c>
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	08 95       	ret
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    126e:	84 30       	cpi	r24, 0x04	; 4
    1270:	11 f4       	brne	.+4      	; 0x1276 <DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint+0x1c>
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	08 95       	ret
    1276:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1278:	08 95       	ret

0000127a <PRNT_Host_GetDeviceID>:
}

uint8_t PRNT_Host_GetDeviceID(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo,
                              char* const DeviceIDString,
                              const uint16_t BufferSize)
{
    127a:	cf 92       	push	r12
    127c:	df 92       	push	r13
    127e:	ff 92       	push	r15
    1280:	0f 93       	push	r16
    1282:	1f 93       	push	r17
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	00 d0       	rcall	.+0      	; 0x128a <PRNT_Host_GetDeviceID+0x10>
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	8b 01       	movw	r16, r22
    1290:	6a 01       	movw	r12, r20
	uint8_t  ErrorCode = HOST_SENDCONTROL_Successful;
	uint16_t DeviceIDStringLength = 0;
    1292:	1a 82       	std	Y+2, r1	; 0x02
    1294:	19 82       	std	Y+1, r1	; 0x01

	USB_ControlRequest = (USB_Request_Header_t)
    1296:	fc 01       	movw	r30, r24
    1298:	95 81       	ldd	r25, Z+5	; 0x05
    129a:	81 ea       	ldi	r24, 0xA1	; 161
    129c:	80 93 4b 01 	sts	0x014B, r24
    12a0:	10 92 4c 01 	sts	0x014C, r1
    12a4:	10 92 4e 01 	sts	0x014E, r1
    12a8:	10 92 4d 01 	sts	0x014D, r1
    12ac:	90 93 4f 01 	sts	0x014F, r25
    12b0:	10 92 50 01 	sts	0x0150, r1
    12b4:	82 e0       	ldi	r24, 0x02	; 2
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	90 93 52 01 	sts	0x0152, r25
    12bc:	80 93 51 01 	sts	0x0151, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    12c0:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(DeviceIDStringLength),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(&DeviceIDStringLength)) != HOST_SENDCONTROL_Successful)
    12c4:	ce 01       	movw	r24, r28
    12c6:	01 96       	adiw	r24, 0x01	; 1
    12c8:	4b de       	rcall	.-874    	; 0xf60 <USB_Host_SendControlRequest>
    12ca:	f8 2e       	mov	r15, r24
    12cc:	88 23       	and	r24, r24
    12ce:	51 f5       	brne	.+84     	; 0x1324 <PRNT_Host_GetDeviceID+0xaa>
	  return ErrorCode;

	if (!(DeviceIDStringLength))
    12d0:	29 81       	ldd	r18, Y+1	; 0x01
    12d2:	3a 81       	ldd	r19, Y+2	; 0x02
    12d4:	21 15       	cp	r18, r1
    12d6:	31 05       	cpc	r19, r1
    12d8:	19 f1       	breq	.+70     	; 0x1320 <PRNT_Host_GetDeviceID+0xa6>

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
    12da:	83 2f       	mov	r24, r19
    12dc:	92 2f       	mov	r25, r18
	{
		DeviceIDString[0] = 0x00;
		return HOST_SENDCONTROL_Successful;
	}

	DeviceIDStringLength = be16_to_cpu(DeviceIDStringLength);
    12de:	9a 83       	std	Y+2, r25	; 0x02
    12e0:	89 83       	std	Y+1, r24	; 0x01

	if (DeviceIDStringLength > BufferSize)
    12e2:	c8 16       	cp	r12, r24
    12e4:	d9 06       	cpc	r13, r25
    12e6:	10 f4       	brcc	.+4      	; 0x12ec <PRNT_Host_GetDeviceID+0x72>
	  DeviceIDStringLength = BufferSize;
    12e8:	da 82       	std	Y+2, r13	; 0x02
    12ea:	c9 82       	std	Y+1, r12	; 0x01

	USB_ControlRequest.wLength = DeviceIDStringLength;
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
    12ee:	9a 81       	ldd	r25, Y+2	; 0x02
    12f0:	90 93 52 01 	sts	0x0152, r25
    12f4:	80 93 51 01 	sts	0x0151, r24

	if ((ErrorCode = USB_Host_SendControlRequest(DeviceIDString)) != HOST_SENDCONTROL_Successful)
    12f8:	c8 01       	movw	r24, r16
    12fa:	32 de       	rcall	.-924    	; 0xf60 <USB_Host_SendControlRequest>
    12fc:	f8 2e       	mov	r15, r24
    12fe:	88 23       	and	r24, r24
    1300:	89 f4       	brne	.+34     	; 0x1324 <PRNT_Host_GetDeviceID+0xaa>
	  return ErrorCode;

	memmove(&DeviceIDString[0], &DeviceIDString[2], DeviceIDStringLength - 2);
    1302:	b8 01       	movw	r22, r16
    1304:	6e 5f       	subi	r22, 0xFE	; 254
    1306:	7f 4f       	sbci	r23, 0xFF	; 255
    1308:	49 81       	ldd	r20, Y+1	; 0x01
    130a:	5a 81       	ldd	r21, Y+2	; 0x02
    130c:	42 50       	subi	r20, 0x02	; 2
    130e:	50 40       	sbci	r21, 0x00	; 0
    1310:	c8 01       	movw	r24, r16
    1312:	55 d1       	rcall	.+682    	; 0x15be <memmove>

	DeviceIDString[DeviceIDStringLength - 2] = 0x00;
    1314:	89 81       	ldd	r24, Y+1	; 0x01
    1316:	9a 81       	ldd	r25, Y+2	; 0x02
    1318:	08 0f       	add	r16, r24
    131a:	19 1f       	adc	r17, r25
    131c:	02 50       	subi	r16, 0x02	; 2
    131e:	10 40       	sbci	r17, 0x00	; 0
    1320:	f8 01       	movw	r30, r16
    1322:	10 82       	st	Z, r1

	return HOST_SENDCONTROL_Successful;
}
    1324:	8f 2d       	mov	r24, r15
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	1f 91       	pop	r17
    1330:	0f 91       	pop	r16
    1332:	ff 90       	pop	r15
    1334:	df 90       	pop	r13
    1336:	cf 90       	pop	r12
    1338:	08 95       	ret

0000133a <PRNT_Host_SendData>:
}

uint8_t PRNT_Host_SendData(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo,
                           void* Buffer,
                           const uint16_t Length)
{
    133a:	fc 01       	movw	r30, r24
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(PRNTInterfaceInfo->State.IsActive))
    133c:	80 91 53 01 	lds	r24, 0x0153
    1340:	8b 30       	cpi	r24, 0x0B	; 11
    1342:	01 f5       	brne	.+64     	; 0x1384 <PRNT_Host_SendData+0x4a>
    1344:	84 81       	ldd	r24, Z+4	; 0x04
    1346:	88 23       	and	r24, r24
    1348:	e9 f0       	breq	.+58     	; 0x1384 <PRNT_Host_SendData+0x4a>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	Pipe_SelectPipe(PRNTInterfaceInfo->Config.DataOUTPipeNumber);
    134a:	82 81       	ldd	r24, Z+2	; 0x02
    134c:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1350:	80 91 a9 00 	lds	r24, 0x00A9
    1354:	8f 7b       	andi	r24, 0xBF	; 191
    1356:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Write_Stream_LE(Buffer, Length, NULL)) != PIPE_RWSTREAM_NoError)
    135a:	cb 01       	movw	r24, r22
    135c:	ba 01       	movw	r22, r20
    135e:	40 e0       	ldi	r20, 0x00	; 0
    1360:	50 e0       	ldi	r21, 0x00	; 0
    1362:	df dc       	rcall	.-1602   	; 0xd22 <Pipe_Write_Stream_LE>
    1364:	98 2f       	mov	r25, r24
    1366:	88 23       	and	r24, r24
    1368:	71 f4       	brne	.+28     	; 0x1386 <PRNT_Host_SendData+0x4c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    136a:	80 91 a6 00 	lds	r24, 0x00A6
    136e:	8b 77       	andi	r24, 0x7B	; 123
    1370:	80 93 a6 00 	sts	0x00A6, r24
	  return ErrorCode;

	Pipe_ClearOUT();

	ErrorCode = Pipe_WaitUntilReady();
    1374:	96 db       	rcall	.-2260   	; 0xaa2 <Pipe_WaitUntilReady>
    1376:	98 2f       	mov	r25, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1378:	80 91 a9 00 	lds	r24, 0x00A9
    137c:	80 64       	ori	r24, 0x40	; 64
    137e:	80 93 a9 00 	sts	0x00A9, r24
    1382:	01 c0       	rjmp	.+2      	; 0x1386 <PRNT_Host_SendData+0x4c>

	Pipe_Freeze();

	return ErrorCode;
    1384:	92 e0       	ldi	r25, 0x02	; 2
}
    1386:	89 2f       	mov	r24, r25
    1388:	08 95       	ret

0000138a <PRNT_Host_Flush>:
	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	return USB_Host_SendControlRequest(NULL);
}

uint8_t PRNT_Host_Flush(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo)
{
    138a:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(PRNTInterfaceInfo->State.IsActive))
    138c:	80 91 53 01 	lds	r24, 0x0153
    1390:	8b 30       	cpi	r24, 0x0B	; 11
    1392:	49 f5       	brne	.+82     	; 0x13e6 <PRNT_Host_Flush+0x5c>
    1394:	84 81       	ldd	r24, Z+4	; 0x04
    1396:	88 23       	and	r24, r24
    1398:	31 f1       	breq	.+76     	; 0x13e6 <PRNT_Host_Flush+0x5c>
	  return PIPE_READYWAIT_DeviceDisconnected;

	uint8_t ErrorCode;

	Pipe_SelectPipe(PRNTInterfaceInfo->Config.DataOUTPipeNumber);
    139a:	82 81       	ldd	r24, Z+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    139c:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    13a0:	80 91 a9 00 	lds	r24, 0x00A9
    13a4:	8f 7b       	andi	r24, 0xBF	; 191
    13a6:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    13aa:	80 91 f6 00 	lds	r24, 0x00F6
    13ae:	90 91 f7 00 	lds	r25, 0x00F7
	Pipe_Unfreeze();

	if (!(Pipe_BytesInPipe()))
    13b2:	89 2b       	or	r24, r25
    13b4:	b1 f0       	breq	.+44     	; 0x13e2 <PRNT_Host_Flush+0x58>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    13b6:	90 91 a6 00 	lds	r25, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    13ba:	80 91 a6 00 	lds	r24, 0x00A6
    13be:	8b 77       	andi	r24, 0x7B	; 123
    13c0:	80 93 a6 00 	sts	0x00A6, r24

	bool BankFull = !(Pipe_IsReadWriteAllowed());

	Pipe_ClearOUT();

	if (BankFull)
    13c4:	95 fd       	sbrc	r25, 5
    13c6:	08 c0       	rjmp	.+16     	; 0x13d8 <PRNT_Host_Flush+0x4e>
	{
		if ((ErrorCode = Pipe_WaitUntilReady()) != PIPE_READYWAIT_NoError)
    13c8:	6c db       	rcall	.-2344   	; 0xaa2 <Pipe_WaitUntilReady>
    13ca:	88 23       	and	r24, r24
    13cc:	69 f4       	brne	.+26     	; 0x13e8 <PRNT_Host_Flush+0x5e>
    13ce:	80 91 a6 00 	lds	r24, 0x00A6
    13d2:	8b 77       	andi	r24, 0x7B	; 123
    13d4:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    13d8:	80 91 a9 00 	lds	r24, 0x00A9
    13dc:	80 64       	ori	r24, 0x40	; 64
    13de:	80 93 a9 00 	sts	0x00A9, r24
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	08 95       	ret
		Pipe_ClearOUT();
	}

	Pipe_Freeze();

	return PIPE_READYWAIT_NoError;
    13e6:	82 e0       	ldi	r24, 0x02	; 2
}
    13e8:	08 95       	ret

000013ea <PRNT_Host_USBTask>:

	return DESCRIPTOR_SEARCH_NotFound;
}

void PRNT_Host_USBTask(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo)
{
    13ea:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(PRNTInterfaceInfo->State.IsActive))
    13ec:	80 91 53 01 	lds	r24, 0x0153
    13f0:	8b 30       	cpi	r24, 0x0B	; 11
    13f2:	29 f4       	brne	.+10     	; 0x13fe <PRNT_Host_USBTask+0x14>
    13f4:	84 81       	ldd	r24, Z+4	; 0x04
    13f6:	88 23       	and	r24, r24
    13f8:	11 f0       	breq	.+4      	; 0x13fe <PRNT_Host_USBTask+0x14>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	PRNT_Host_Flush(PRNTInterfaceInfo);
    13fa:	cf 01       	movw	r24, r30
    13fc:	c6 cf       	rjmp	.-116    	; 0x138a <PRNT_Host_Flush>
    13fe:	08 95       	ret

00001400 <PRNT_Host_SetBidirectionalMode>:
	#endif
}

uint8_t PRNT_Host_SetBidirectionalMode(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo)
{
    1400:	fc 01       	movw	r30, r24
	if (PRNTInterfaceInfo->State.AlternateSetting)
    1402:	66 81       	ldd	r22, Z+6	; 0x06
    1404:	66 23       	and	r22, r22
    1406:	11 f4       	brne	.+4      	; 0x140c <PRNT_Host_SetBidirectionalMode+0xc>
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	08 95       	ret
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_SetInterfaceAltSetting(PRNTInterfaceInfo->State.InterfaceNumber,
    140c:	85 81       	ldd	r24, Z+5	; 0x05
			return ErrorCode;
		}
	}

	return HOST_SENDCONTROL_Successful;
}
    140e:	c6 ce       	rjmp	.-628    	; 0x119c <USB_Host_SetInterfaceAltSetting>

00001410 <PRNT_Host_ConfigurePipes>:
#include "Printer.h"

uint8_t PRNT_Host_ConfigurePipes(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo,
                                 uint16_t ConfigDescriptorSize,
							     void* ConfigDescriptorData)
{
    1410:	6f 92       	push	r6
    1412:	7f 92       	push	r7
    1414:	8f 92       	push	r8
    1416:	9f 92       	push	r9
    1418:	af 92       	push	r10
    141a:	bf 92       	push	r11
    141c:	cf 92       	push	r12
    141e:	df 92       	push	r13
    1420:	ef 92       	push	r14
    1422:	ff 92       	push	r15
    1424:	0f 93       	push	r16
    1426:	1f 93       	push	r17
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	00 d0       	rcall	.+0      	; 0x142e <PRNT_Host_ConfigurePipes+0x1e>
    142e:	00 d0       	rcall	.+0      	; 0x1430 <PRNT_Host_ConfigurePipes+0x20>
    1430:	0f 92       	push	r0
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	6c 01       	movw	r12, r24
    1438:	7a 83       	std	Y+2, r23	; 0x02
    143a:	69 83       	std	Y+1, r22	; 0x01
    143c:	5c 83       	std	Y+4, r21	; 0x04
    143e:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint   = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint  = NULL;
	USB_Descriptor_Interface_t* PrinterInterface = NULL;

	memset(&PRNTInterfaceInfo->State, 0x00, sizeof(PRNTInterfaceInfo->State));
    1440:	04 96       	adiw	r24, 0x04	; 4
    1442:	fc 01       	movw	r30, r24
    1444:	87 e0       	ldi	r24, 0x07	; 7
    1446:	df 01       	movw	r26, r30
    1448:	1d 92       	st	X+, r1
    144a:	8a 95       	dec	r24
    144c:	e9 f7       	brne	.-6      	; 0x1448 <PRNT_Host_ConfigurePipes+0x38>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    144e:	eb 81       	ldd	r30, Y+3	; 0x03
    1450:	fc 81       	ldd	r31, Y+4	; 0x04
    1452:	81 81       	ldd	r24, Z+1	; 0x01
    1454:	82 30       	cpi	r24, 0x02	; 2
    1456:	11 f0       	breq	.+4      	; 0x145c <PRNT_Host_ConfigurePipes+0x4c>
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	76 c0       	rjmp	.+236    	; 0x1548 <PRNT_Host_ConfigurePipes+0x138>
    145c:	88 24       	eor	r8, r8
    145e:	99 24       	eor	r9, r9
    1460:	66 24       	eor	r6, r6
    1462:	77 24       	eor	r7, r7
    1464:	aa 24       	eor	r10, r10
    1466:	bb 24       	eor	r11, r11
	  return PRNT_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(PrinterInterface) ||
    1468:	83 e0       	ldi	r24, 0x03	; 3
    146a:	e8 2e       	mov	r14, r24
    146c:	f1 2c       	mov	r15, r1
    146e:	ec 0e       	add	r14, r28
    1470:	fd 1e       	adc	r15, r29
    1472:	8e 01       	movw	r16, r28
    1474:	0f 5f       	subi	r16, 0xFF	; 255
    1476:	1f 4f       	sbci	r17, 0xFF	; 255
    1478:	61 14       	cp	r6, r1
    147a:	71 04       	cpc	r7, r1
    147c:	39 f0       	breq	.+14     	; 0x148c <PRNT_Host_ConfigurePipes+0x7c>
    147e:	c8 01       	movw	r24, r16
    1480:	b7 01       	movw	r22, r14
    1482:	4d e2       	ldi	r20, 0x2D	; 45
    1484:	59 e0       	ldi	r21, 0x09	; 9
    1486:	a4 dc       	rcall	.-1720   	; 0xdd0 <USB_GetNextDescriptorComp>
    1488:	88 23       	and	r24, r24
    148a:	81 f0       	breq	.+32     	; 0x14ac <PRNT_Host_ConfigurePipes+0x9c>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    148c:	c8 01       	movw	r24, r16
    148e:	b7 01       	movw	r22, r14
    1490:	4c e1       	ldi	r20, 0x1C	; 28
    1492:	59 e0       	ldi	r21, 0x09	; 9
    1494:	9d dc       	rcall	.-1734   	; 0xdd0 <USB_GetNextDescriptorComp>
    1496:	88 23       	and	r24, r24
    1498:	11 f0       	breq	.+4      	; 0x149e <PRNT_Host_ConfigurePipes+0x8e>
    149a:	82 e0       	ldi	r24, 0x02	; 2
    149c:	55 c0       	rjmp	.+170    	; 0x1548 <PRNT_Host_ConfigurePipes+0x138>
			                              DCOMP_PRNT_Host_NextPRNTInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return PRNT_ENUMERROR_NoCompatibleInterfaceFound;
			}

			PrinterInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    149e:	6b 80       	ldd	r6, Y+3	; 0x03
    14a0:	7c 80       	ldd	r7, Y+4	; 0x04
    14a2:	aa 24       	eor	r10, r10
    14a4:	bb 24       	eor	r11, r11
    14a6:	88 24       	eor	r8, r8
    14a8:	99 24       	eor	r9, r9
    14aa:	e6 cf       	rjmp	.-52     	; 0x1478 <PRNT_Host_ConfigurePipes+0x68>
			DataOUTEndpoint = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    14ac:	eb 81       	ldd	r30, Y+3	; 0x03
    14ae:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    14b0:	82 81       	ldd	r24, Z+2	; 0x02
    14b2:	87 fd       	sbrc	r24, 7
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <PRNT_Host_ConfigurePipes+0xaa>
    14b6:	4f 01       	movw	r8, r30
    14b8:	01 c0       	rjmp	.+2      	; 0x14bc <PRNT_Host_ConfigurePipes+0xac>
    14ba:	5f 01       	movw	r10, r30
	memset(&PRNTInterfaceInfo->State, 0x00, sizeof(PRNTInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return PRNT_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    14bc:	a1 14       	cp	r10, r1
    14be:	b1 04       	cpc	r11, r1
    14c0:	d9 f2       	breq	.-74     	; 0x1478 <PRNT_Host_ConfigurePipes+0x68>
    14c2:	81 14       	cp	r8, r1
    14c4:	91 04       	cpc	r9, r1
    14c6:	c1 f2       	breq	.-80     	; 0x1478 <PRNT_Host_ConfigurePipes+0x68>
    14c8:	91 e0       	ldi	r25, 0x01	; 1
		uint8_t  Type;
		uint8_t  Token;
		uint8_t  EndpointAddress;
		bool     DoubleBanked;

		if (PipeNum == PRNTInterfaceInfo->Config.DataINPipeNumber)
    14ca:	f6 01       	movw	r30, r12
    14cc:	80 81       	ld	r24, Z
    14ce:	98 17       	cp	r25, r24
    14d0:	61 f4       	brne	.+24     	; 0x14ea <PRNT_Host_ConfigurePipes+0xda>
		{
			Size            = le16_to_cpu(DataINEndpoint->EndpointSize);
    14d2:	d5 01       	movw	r26, r10
    14d4:	14 96       	adiw	r26, 0x04	; 4
    14d6:	0d 91       	ld	r16, X+
    14d8:	1c 91       	ld	r17, X
    14da:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataINEndpoint->EndpointAddress;
    14dc:	12 96       	adiw	r26, 0x02	; 2
    14de:	2c 91       	ld	r18, X
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = PRNTInterfaceInfo->Config.DataINPipeDoubleBank;
    14e0:	81 81       	ldd	r24, Z+1	; 0x01

			PRNTInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    14e2:	10 87       	std	Z+8, r17	; 0x08
    14e4:	07 83       	std	Z+7, r16	; 0x07
    14e6:	40 e1       	ldi	r20, 0x10	; 16
    14e8:	0f c0       	rjmp	.+30     	; 0x1508 <PRNT_Host_ConfigurePipes+0xf8>
		}
		else if (PipeNum == PRNTInterfaceInfo->Config.DataOUTPipeNumber)
    14ea:	f6 01       	movw	r30, r12
    14ec:	82 81       	ldd	r24, Z+2	; 0x02
    14ee:	98 17       	cp	r25, r24
    14f0:	d1 f4       	brne	.+52     	; 0x1526 <PRNT_Host_ConfigurePipes+0x116>
		{
			Size            = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    14f2:	d4 01       	movw	r26, r8
    14f4:	14 96       	adiw	r26, 0x04	; 4
    14f6:	0d 91       	ld	r16, X+
    14f8:	1c 91       	ld	r17, X
    14fa:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
    14fc:	12 96       	adiw	r26, 0x02	; 2
    14fe:	2c 91       	ld	r18, X
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = PRNTInterfaceInfo->Config.DataOUTPipeDoubleBank;
    1500:	83 81       	ldd	r24, Z+3	; 0x03

			PRNTInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    1502:	12 87       	std	Z+10, r17	; 0x0a
    1504:	01 87       	std	Z+9, r16	; 0x09
    1506:	40 e2       	ldi	r20, 0x20	; 32
		else
		{
			continue;
		}

		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    1508:	88 23       	and	r24, r24
    150a:	11 f4       	brne	.+4      	; 0x1510 <PRNT_Host_ConfigurePipes+0x100>
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	01 c0       	rjmp	.+2      	; 0x1512 <PRNT_Host_ConfigurePipes+0x102>
    1510:	34 e0       	ldi	r19, 0x04	; 4
    1512:	89 2f       	mov	r24, r25
    1514:	62 e0       	ldi	r22, 0x02	; 2
    1516:	e3 2e       	mov	r14, r19
    1518:	9d 83       	std	Y+5, r25	; 0x05
    151a:	51 da       	rcall	.-2910   	; 0x9be <Pipe_ConfigurePipe>
    151c:	9d 81       	ldd	r25, Y+5	; 0x05
    151e:	88 23       	and	r24, r24
    1520:	11 f4       	brne	.+4      	; 0x1526 <PRNT_Host_ConfigurePipes+0x116>
    1522:	83 e0       	ldi	r24, 0x03	; 3
    1524:	11 c0       	rjmp	.+34     	; 0x1548 <PRNT_Host_ConfigurePipes+0x138>
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    1526:	9f 5f       	subi	r25, 0xFF	; 255
    1528:	97 30       	cpi	r25, 0x07	; 7
    152a:	79 f6       	brne	.-98     	; 0x14ca <PRNT_Host_ConfigurePipes+0xba>
		{
			return PRNT_ENUMERROR_PipeConfigurationFailed;
		}
	}

	PRNTInterfaceInfo->State.InterfaceNumber  = PrinterInterface->InterfaceNumber;
    152c:	f3 01       	movw	r30, r6
    152e:	82 81       	ldd	r24, Z+2	; 0x02
    1530:	d6 01       	movw	r26, r12
    1532:	15 96       	adiw	r26, 0x05	; 5
    1534:	8c 93       	st	X, r24
    1536:	15 97       	sbiw	r26, 0x05	; 5
	PRNTInterfaceInfo->State.AlternateSetting = PrinterInterface->AlternateSetting;
    1538:	83 81       	ldd	r24, Z+3	; 0x03
    153a:	16 96       	adiw	r26, 0x06	; 6
    153c:	8c 93       	st	X, r24
    153e:	16 97       	sbiw	r26, 0x06	; 6
	PRNTInterfaceInfo->State.IsActive = true;
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	14 96       	adiw	r26, 0x04	; 4
    1544:	8c 93       	st	X, r24
    1546:	80 e0       	ldi	r24, 0x00	; 0

	return PRNT_ENUMERROR_NoError;
}
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	cf 91       	pop	r28
    1554:	df 91       	pop	r29
    1556:	1f 91       	pop	r17
    1558:	0f 91       	pop	r16
    155a:	ff 90       	pop	r15
    155c:	ef 90       	pop	r14
    155e:	df 90       	pop	r13
    1560:	cf 90       	pop	r12
    1562:	bf 90       	pop	r11
    1564:	af 90       	pop	r10
    1566:	9f 90       	pop	r9
    1568:	8f 90       	pop	r8
    156a:	7f 90       	pop	r7
    156c:	6f 90       	pop	r6
    156e:	08 95       	ret

00001570 <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    1570:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1572:	80 91 c8 00 	lds	r24, 0x00C8
    1576:	85 ff       	sbrs	r24, 5
    1578:	fc cf       	rjmp	.-8      	; 0x1572 <Serial_putchar+0x2>
				UDR1 = DataByte;
    157a:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	08 95       	ret

00001584 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1584:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1588:	87 fd       	sbrc	r24, 7
    158a:	03 c0       	rjmp	.+6      	; 0x1592 <Serial_getchar+0xe>
    158c:	2e ef       	ldi	r18, 0xFE	; 254
    158e:	3f ef       	ldi	r19, 0xFF	; 255
    1590:	0b c0       	rjmp	.+22     	; 0x15a8 <Serial_getchar+0x24>
    1592:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1596:	87 fd       	sbrc	r24, 7
    1598:	03 c0       	rjmp	.+6      	; 0x15a0 <Serial_getchar+0x1c>
    159a:	2f ef       	ldi	r18, 0xFF	; 255
    159c:	3f ef       	ldi	r19, 0xFF	; 255
    159e:	04 c0       	rjmp	.+8      	; 0x15a8 <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    15a0:	80 91 ce 00 	lds	r24, 0x00CE
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    15a8:	c9 01       	movw	r24, r18
    15aa:	08 95       	ret

000015ac <memcpy>:
    15ac:	fb 01       	movw	r30, r22
    15ae:	dc 01       	movw	r26, r24
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <memcpy+0xa>
    15b2:	01 90       	ld	r0, Z+
    15b4:	0d 92       	st	X+, r0
    15b6:	41 50       	subi	r20, 0x01	; 1
    15b8:	50 40       	sbci	r21, 0x00	; 0
    15ba:	d8 f7       	brcc	.-10     	; 0x15b2 <memcpy+0x6>
    15bc:	08 95       	ret

000015be <memmove>:
    15be:	68 17       	cp	r22, r24
    15c0:	79 07       	cpc	r23, r25
    15c2:	68 f4       	brcc	.+26     	; 0x15de <memmove+0x20>
    15c4:	fb 01       	movw	r30, r22
    15c6:	dc 01       	movw	r26, r24
    15c8:	e4 0f       	add	r30, r20
    15ca:	f5 1f       	adc	r31, r21
    15cc:	a4 0f       	add	r26, r20
    15ce:	b5 1f       	adc	r27, r21
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <memmove+0x18>
    15d2:	02 90       	ld	r0, -Z
    15d4:	0e 92       	st	-X, r0
    15d6:	41 50       	subi	r20, 0x01	; 1
    15d8:	50 40       	sbci	r21, 0x00	; 0
    15da:	d8 f7       	brcc	.-10     	; 0x15d2 <memmove+0x14>
    15dc:	08 95       	ret
    15de:	e6 cf       	rjmp	.-52     	; 0x15ac <memcpy>

000015e0 <printf_P>:
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
    15e8:	fe 01       	movw	r30, r28
    15ea:	35 96       	adiw	r30, 0x05	; 5
    15ec:	61 91       	ld	r22, Z+
    15ee:	71 91       	ld	r23, Z+
    15f0:	a0 91 64 01 	lds	r26, 0x0164
    15f4:	b0 91 65 01 	lds	r27, 0x0165
    15f8:	13 96       	adiw	r26, 0x03	; 3
    15fa:	8c 91       	ld	r24, X
    15fc:	13 97       	sbiw	r26, 0x03	; 3
    15fe:	88 60       	ori	r24, 0x08	; 8
    1600:	13 96       	adiw	r26, 0x03	; 3
    1602:	8c 93       	st	X, r24
    1604:	80 91 64 01 	lds	r24, 0x0164
    1608:	90 91 65 01 	lds	r25, 0x0165
    160c:	af 01       	movw	r20, r30
    160e:	3f d0       	rcall	.+126    	; 0x168e <vfprintf>
    1610:	e0 91 64 01 	lds	r30, 0x0164
    1614:	f0 91 65 01 	lds	r31, 0x0165
    1618:	23 81       	ldd	r18, Z+3	; 0x03
    161a:	27 7f       	andi	r18, 0xF7	; 247
    161c:	23 83       	std	Z+3, r18	; 0x03
    161e:	cf 91       	pop	r28
    1620:	df 91       	pop	r29
    1622:	08 95       	ret

00001624 <puts_P>:
    1624:	0f 93       	push	r16
    1626:	1f 93       	push	r17
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
    162c:	ec 01       	movw	r28, r24
    162e:	e0 91 64 01 	lds	r30, 0x0164
    1632:	f0 91 65 01 	lds	r31, 0x0165
    1636:	83 81       	ldd	r24, Z+3	; 0x03
    1638:	81 ff       	sbrs	r24, 1
    163a:	21 c0       	rjmp	.+66     	; 0x167e <puts_P+0x5a>
    163c:	00 e0       	ldi	r16, 0x00	; 0
    163e:	10 e0       	ldi	r17, 0x00	; 0
    1640:	0e c0       	rjmp	.+28     	; 0x165e <puts_P+0x3a>
    1642:	e0 91 64 01 	lds	r30, 0x0164
    1646:	f0 91 65 01 	lds	r31, 0x0165
    164a:	20 85       	ldd	r18, Z+8	; 0x08
    164c:	31 85       	ldd	r19, Z+9	; 0x09
    164e:	bf 01       	movw	r22, r30
    1650:	f9 01       	movw	r30, r18
    1652:	09 95       	icall
    1654:	89 2b       	or	r24, r25
    1656:	11 f0       	breq	.+4      	; 0x165c <puts_P+0x38>
    1658:	0f ef       	ldi	r16, 0xFF	; 255
    165a:	1f ef       	ldi	r17, 0xFF	; 255
    165c:	21 96       	adiw	r28, 0x01	; 1
    165e:	fe 01       	movw	r30, r28
    1660:	84 91       	lpm	r24, Z+
    1662:	88 23       	and	r24, r24
    1664:	71 f7       	brne	.-36     	; 0x1642 <puts_P+0x1e>
    1666:	e0 91 64 01 	lds	r30, 0x0164
    166a:	f0 91 65 01 	lds	r31, 0x0165
    166e:	20 85       	ldd	r18, Z+8	; 0x08
    1670:	31 85       	ldd	r19, Z+9	; 0x09
    1672:	8a e0       	ldi	r24, 0x0A	; 10
    1674:	bf 01       	movw	r22, r30
    1676:	f9 01       	movw	r30, r18
    1678:	09 95       	icall
    167a:	89 2b       	or	r24, r25
    167c:	11 f0       	breq	.+4      	; 0x1682 <puts_P+0x5e>
    167e:	0f ef       	ldi	r16, 0xFF	; 255
    1680:	1f ef       	ldi	r17, 0xFF	; 255
    1682:	c8 01       	movw	r24, r16
    1684:	df 91       	pop	r29
    1686:	cf 91       	pop	r28
    1688:	1f 91       	pop	r17
    168a:	0f 91       	pop	r16
    168c:	08 95       	ret

0000168e <vfprintf>:
    168e:	2f 92       	push	r2
    1690:	3f 92       	push	r3
    1692:	4f 92       	push	r4
    1694:	5f 92       	push	r5
    1696:	6f 92       	push	r6
    1698:	7f 92       	push	r7
    169a:	8f 92       	push	r8
    169c:	9f 92       	push	r9
    169e:	af 92       	push	r10
    16a0:	bf 92       	push	r11
    16a2:	cf 92       	push	r12
    16a4:	df 92       	push	r13
    16a6:	ef 92       	push	r14
    16a8:	ff 92       	push	r15
    16aa:	0f 93       	push	r16
    16ac:	1f 93       	push	r17
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    16b6:	2b 97       	sbiw	r28, 0x0b	; 11
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	f8 94       	cli
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	cd bf       	out	0x3d, r28	; 61
    16c2:	3c 01       	movw	r6, r24
    16c4:	2b 01       	movw	r4, r22
    16c6:	5a 01       	movw	r10, r20
    16c8:	fc 01       	movw	r30, r24
    16ca:	17 82       	std	Z+7, r1	; 0x07
    16cc:	16 82       	std	Z+6, r1	; 0x06
    16ce:	83 81       	ldd	r24, Z+3	; 0x03
    16d0:	81 fd       	sbrc	r24, 1
    16d2:	03 c0       	rjmp	.+6      	; 0x16da <vfprintf+0x4c>
    16d4:	6f ef       	ldi	r22, 0xFF	; 255
    16d6:	7f ef       	ldi	r23, 0xFF	; 255
    16d8:	b9 c1       	rjmp	.+882    	; 0x1a4c <vfprintf+0x3be>
    16da:	9a e0       	ldi	r25, 0x0A	; 10
    16dc:	89 2e       	mov	r8, r25
    16de:	1e 01       	movw	r2, r28
    16e0:	08 94       	sec
    16e2:	21 1c       	adc	r2, r1
    16e4:	31 1c       	adc	r3, r1
    16e6:	f3 01       	movw	r30, r6
    16e8:	23 81       	ldd	r18, Z+3	; 0x03
    16ea:	f2 01       	movw	r30, r4
    16ec:	23 fd       	sbrc	r18, 3
    16ee:	85 91       	lpm	r24, Z+
    16f0:	23 ff       	sbrs	r18, 3
    16f2:	81 91       	ld	r24, Z+
    16f4:	2f 01       	movw	r4, r30
    16f6:	88 23       	and	r24, r24
    16f8:	09 f4       	brne	.+2      	; 0x16fc <vfprintf+0x6e>
    16fa:	a5 c1       	rjmp	.+842    	; 0x1a46 <vfprintf+0x3b8>
    16fc:	85 32       	cpi	r24, 0x25	; 37
    16fe:	39 f4       	brne	.+14     	; 0x170e <vfprintf+0x80>
    1700:	23 fd       	sbrc	r18, 3
    1702:	85 91       	lpm	r24, Z+
    1704:	23 ff       	sbrs	r18, 3
    1706:	81 91       	ld	r24, Z+
    1708:	2f 01       	movw	r4, r30
    170a:	85 32       	cpi	r24, 0x25	; 37
    170c:	21 f4       	brne	.+8      	; 0x1716 <vfprintf+0x88>
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	b3 01       	movw	r22, r6
    1712:	cc d1       	rcall	.+920    	; 0x1aac <fputc>
    1714:	e8 cf       	rjmp	.-48     	; 0x16e6 <vfprintf+0x58>
    1716:	98 2f       	mov	r25, r24
    1718:	ff 24       	eor	r15, r15
    171a:	ee 24       	eor	r14, r14
    171c:	99 24       	eor	r9, r9
    171e:	ff e1       	ldi	r31, 0x1F	; 31
    1720:	ff 15       	cp	r31, r15
    1722:	d0 f0       	brcs	.+52     	; 0x1758 <vfprintf+0xca>
    1724:	9b 32       	cpi	r25, 0x2B	; 43
    1726:	69 f0       	breq	.+26     	; 0x1742 <vfprintf+0xb4>
    1728:	9c 32       	cpi	r25, 0x2C	; 44
    172a:	28 f4       	brcc	.+10     	; 0x1736 <vfprintf+0xa8>
    172c:	90 32       	cpi	r25, 0x20	; 32
    172e:	59 f0       	breq	.+22     	; 0x1746 <vfprintf+0xb8>
    1730:	93 32       	cpi	r25, 0x23	; 35
    1732:	91 f4       	brne	.+36     	; 0x1758 <vfprintf+0xca>
    1734:	0e c0       	rjmp	.+28     	; 0x1752 <vfprintf+0xc4>
    1736:	9d 32       	cpi	r25, 0x2D	; 45
    1738:	49 f0       	breq	.+18     	; 0x174c <vfprintf+0xbe>
    173a:	90 33       	cpi	r25, 0x30	; 48
    173c:	69 f4       	brne	.+26     	; 0x1758 <vfprintf+0xca>
    173e:	41 e0       	ldi	r20, 0x01	; 1
    1740:	24 c0       	rjmp	.+72     	; 0x178a <vfprintf+0xfc>
    1742:	52 e0       	ldi	r21, 0x02	; 2
    1744:	f5 2a       	or	r15, r21
    1746:	84 e0       	ldi	r24, 0x04	; 4
    1748:	f8 2a       	or	r15, r24
    174a:	28 c0       	rjmp	.+80     	; 0x179c <vfprintf+0x10e>
    174c:	98 e0       	ldi	r25, 0x08	; 8
    174e:	f9 2a       	or	r15, r25
    1750:	25 c0       	rjmp	.+74     	; 0x179c <vfprintf+0x10e>
    1752:	e0 e1       	ldi	r30, 0x10	; 16
    1754:	fe 2a       	or	r15, r30
    1756:	22 c0       	rjmp	.+68     	; 0x179c <vfprintf+0x10e>
    1758:	f7 fc       	sbrc	r15, 7
    175a:	29 c0       	rjmp	.+82     	; 0x17ae <vfprintf+0x120>
    175c:	89 2f       	mov	r24, r25
    175e:	80 53       	subi	r24, 0x30	; 48
    1760:	8a 30       	cpi	r24, 0x0A	; 10
    1762:	70 f4       	brcc	.+28     	; 0x1780 <vfprintf+0xf2>
    1764:	f6 fe       	sbrs	r15, 6
    1766:	05 c0       	rjmp	.+10     	; 0x1772 <vfprintf+0xe4>
    1768:	98 9c       	mul	r9, r8
    176a:	90 2c       	mov	r9, r0
    176c:	11 24       	eor	r1, r1
    176e:	98 0e       	add	r9, r24
    1770:	15 c0       	rjmp	.+42     	; 0x179c <vfprintf+0x10e>
    1772:	e8 9c       	mul	r14, r8
    1774:	e0 2c       	mov	r14, r0
    1776:	11 24       	eor	r1, r1
    1778:	e8 0e       	add	r14, r24
    177a:	f0 e2       	ldi	r31, 0x20	; 32
    177c:	ff 2a       	or	r15, r31
    177e:	0e c0       	rjmp	.+28     	; 0x179c <vfprintf+0x10e>
    1780:	9e 32       	cpi	r25, 0x2E	; 46
    1782:	29 f4       	brne	.+10     	; 0x178e <vfprintf+0x100>
    1784:	f6 fc       	sbrc	r15, 6
    1786:	5f c1       	rjmp	.+702    	; 0x1a46 <vfprintf+0x3b8>
    1788:	40 e4       	ldi	r20, 0x40	; 64
    178a:	f4 2a       	or	r15, r20
    178c:	07 c0       	rjmp	.+14     	; 0x179c <vfprintf+0x10e>
    178e:	9c 36       	cpi	r25, 0x6C	; 108
    1790:	19 f4       	brne	.+6      	; 0x1798 <vfprintf+0x10a>
    1792:	50 e8       	ldi	r21, 0x80	; 128
    1794:	f5 2a       	or	r15, r21
    1796:	02 c0       	rjmp	.+4      	; 0x179c <vfprintf+0x10e>
    1798:	98 36       	cpi	r25, 0x68	; 104
    179a:	49 f4       	brne	.+18     	; 0x17ae <vfprintf+0x120>
    179c:	f2 01       	movw	r30, r4
    179e:	23 fd       	sbrc	r18, 3
    17a0:	95 91       	lpm	r25, Z+
    17a2:	23 ff       	sbrs	r18, 3
    17a4:	91 91       	ld	r25, Z+
    17a6:	2f 01       	movw	r4, r30
    17a8:	99 23       	and	r25, r25
    17aa:	09 f0       	breq	.+2      	; 0x17ae <vfprintf+0x120>
    17ac:	b8 cf       	rjmp	.-144    	; 0x171e <vfprintf+0x90>
    17ae:	89 2f       	mov	r24, r25
    17b0:	85 54       	subi	r24, 0x45	; 69
    17b2:	83 30       	cpi	r24, 0x03	; 3
    17b4:	18 f0       	brcs	.+6      	; 0x17bc <vfprintf+0x12e>
    17b6:	80 52       	subi	r24, 0x20	; 32
    17b8:	83 30       	cpi	r24, 0x03	; 3
    17ba:	38 f4       	brcc	.+14     	; 0x17ca <vfprintf+0x13c>
    17bc:	44 e0       	ldi	r20, 0x04	; 4
    17be:	50 e0       	ldi	r21, 0x00	; 0
    17c0:	a4 0e       	add	r10, r20
    17c2:	b5 1e       	adc	r11, r21
    17c4:	5f e3       	ldi	r21, 0x3F	; 63
    17c6:	59 83       	std	Y+1, r21	; 0x01
    17c8:	0f c0       	rjmp	.+30     	; 0x17e8 <vfprintf+0x15a>
    17ca:	93 36       	cpi	r25, 0x63	; 99
    17cc:	31 f0       	breq	.+12     	; 0x17da <vfprintf+0x14c>
    17ce:	93 37       	cpi	r25, 0x73	; 115
    17d0:	79 f0       	breq	.+30     	; 0x17f0 <vfprintf+0x162>
    17d2:	93 35       	cpi	r25, 0x53	; 83
    17d4:	09 f0       	breq	.+2      	; 0x17d8 <vfprintf+0x14a>
    17d6:	52 c0       	rjmp	.+164    	; 0x187c <vfprintf+0x1ee>
    17d8:	1f c0       	rjmp	.+62     	; 0x1818 <vfprintf+0x18a>
    17da:	f5 01       	movw	r30, r10
    17dc:	80 81       	ld	r24, Z
    17de:	89 83       	std	Y+1, r24	; 0x01
    17e0:	42 e0       	ldi	r20, 0x02	; 2
    17e2:	50 e0       	ldi	r21, 0x00	; 0
    17e4:	a4 0e       	add	r10, r20
    17e6:	b5 1e       	adc	r11, r21
    17e8:	61 01       	movw	r12, r2
    17ea:	01 e0       	ldi	r16, 0x01	; 1
    17ec:	10 e0       	ldi	r17, 0x00	; 0
    17ee:	11 c0       	rjmp	.+34     	; 0x1812 <vfprintf+0x184>
    17f0:	f5 01       	movw	r30, r10
    17f2:	c0 80       	ld	r12, Z
    17f4:	d1 80       	ldd	r13, Z+1	; 0x01
    17f6:	f6 fc       	sbrc	r15, 6
    17f8:	03 c0       	rjmp	.+6      	; 0x1800 <vfprintf+0x172>
    17fa:	6f ef       	ldi	r22, 0xFF	; 255
    17fc:	7f ef       	ldi	r23, 0xFF	; 255
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <vfprintf+0x176>
    1800:	69 2d       	mov	r22, r9
    1802:	70 e0       	ldi	r23, 0x00	; 0
    1804:	42 e0       	ldi	r20, 0x02	; 2
    1806:	50 e0       	ldi	r21, 0x00	; 0
    1808:	a4 0e       	add	r10, r20
    180a:	b5 1e       	adc	r11, r21
    180c:	c6 01       	movw	r24, r12
    180e:	43 d1       	rcall	.+646    	; 0x1a96 <strnlen>
    1810:	8c 01       	movw	r16, r24
    1812:	5f e7       	ldi	r21, 0x7F	; 127
    1814:	f5 22       	and	r15, r21
    1816:	13 c0       	rjmp	.+38     	; 0x183e <vfprintf+0x1b0>
    1818:	f5 01       	movw	r30, r10
    181a:	c0 80       	ld	r12, Z
    181c:	d1 80       	ldd	r13, Z+1	; 0x01
    181e:	f6 fc       	sbrc	r15, 6
    1820:	03 c0       	rjmp	.+6      	; 0x1828 <vfprintf+0x19a>
    1822:	6f ef       	ldi	r22, 0xFF	; 255
    1824:	7f ef       	ldi	r23, 0xFF	; 255
    1826:	02 c0       	rjmp	.+4      	; 0x182c <vfprintf+0x19e>
    1828:	69 2d       	mov	r22, r9
    182a:	70 e0       	ldi	r23, 0x00	; 0
    182c:	42 e0       	ldi	r20, 0x02	; 2
    182e:	50 e0       	ldi	r21, 0x00	; 0
    1830:	a4 0e       	add	r10, r20
    1832:	b5 1e       	adc	r11, r21
    1834:	c6 01       	movw	r24, r12
    1836:	24 d1       	rcall	.+584    	; 0x1a80 <strnlen_P>
    1838:	8c 01       	movw	r16, r24
    183a:	50 e8       	ldi	r21, 0x80	; 128
    183c:	f5 2a       	or	r15, r21
    183e:	f3 fe       	sbrs	r15, 3
    1840:	06 c0       	rjmp	.+12     	; 0x184e <vfprintf+0x1c0>
    1842:	18 c0       	rjmp	.+48     	; 0x1874 <vfprintf+0x1e6>
    1844:	80 e2       	ldi	r24, 0x20	; 32
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	b3 01       	movw	r22, r6
    184a:	30 d1       	rcall	.+608    	; 0x1aac <fputc>
    184c:	ea 94       	dec	r14
    184e:	8e 2d       	mov	r24, r14
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	08 17       	cp	r16, r24
    1854:	19 07       	cpc	r17, r25
    1856:	b0 f3       	brcs	.-20     	; 0x1844 <vfprintf+0x1b6>
    1858:	0d c0       	rjmp	.+26     	; 0x1874 <vfprintf+0x1e6>
    185a:	f6 01       	movw	r30, r12
    185c:	f7 fc       	sbrc	r15, 7
    185e:	85 91       	lpm	r24, Z+
    1860:	f7 fe       	sbrs	r15, 7
    1862:	81 91       	ld	r24, Z+
    1864:	6f 01       	movw	r12, r30
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	b3 01       	movw	r22, r6
    186a:	20 d1       	rcall	.+576    	; 0x1aac <fputc>
    186c:	e1 10       	cpse	r14, r1
    186e:	ea 94       	dec	r14
    1870:	01 50       	subi	r16, 0x01	; 1
    1872:	10 40       	sbci	r17, 0x00	; 0
    1874:	01 15       	cp	r16, r1
    1876:	11 05       	cpc	r17, r1
    1878:	81 f7       	brne	.-32     	; 0x185a <vfprintf+0x1cc>
    187a:	e2 c0       	rjmp	.+452    	; 0x1a40 <vfprintf+0x3b2>
    187c:	94 36       	cpi	r25, 0x64	; 100
    187e:	11 f0       	breq	.+4      	; 0x1884 <vfprintf+0x1f6>
    1880:	99 36       	cpi	r25, 0x69	; 105
    1882:	61 f5       	brne	.+88     	; 0x18dc <vfprintf+0x24e>
    1884:	f7 fe       	sbrs	r15, 7
    1886:	08 c0       	rjmp	.+16     	; 0x1898 <vfprintf+0x20a>
    1888:	f5 01       	movw	r30, r10
    188a:	20 81       	ld	r18, Z
    188c:	31 81       	ldd	r19, Z+1	; 0x01
    188e:	42 81       	ldd	r20, Z+2	; 0x02
    1890:	53 81       	ldd	r21, Z+3	; 0x03
    1892:	84 e0       	ldi	r24, 0x04	; 4
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	0a c0       	rjmp	.+20     	; 0x18ac <vfprintf+0x21e>
    1898:	f5 01       	movw	r30, r10
    189a:	80 81       	ld	r24, Z
    189c:	91 81       	ldd	r25, Z+1	; 0x01
    189e:	9c 01       	movw	r18, r24
    18a0:	44 27       	eor	r20, r20
    18a2:	37 fd       	sbrc	r19, 7
    18a4:	40 95       	com	r20
    18a6:	54 2f       	mov	r21, r20
    18a8:	82 e0       	ldi	r24, 0x02	; 2
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	a8 0e       	add	r10, r24
    18ae:	b9 1e       	adc	r11, r25
    18b0:	9f e6       	ldi	r25, 0x6F	; 111
    18b2:	f9 22       	and	r15, r25
    18b4:	57 ff       	sbrs	r21, 7
    18b6:	09 c0       	rjmp	.+18     	; 0x18ca <vfprintf+0x23c>
    18b8:	50 95       	com	r21
    18ba:	40 95       	com	r20
    18bc:	30 95       	com	r19
    18be:	21 95       	neg	r18
    18c0:	3f 4f       	sbci	r19, 0xFF	; 255
    18c2:	4f 4f       	sbci	r20, 0xFF	; 255
    18c4:	5f 4f       	sbci	r21, 0xFF	; 255
    18c6:	e0 e8       	ldi	r30, 0x80	; 128
    18c8:	fe 2a       	or	r15, r30
    18ca:	ca 01       	movw	r24, r20
    18cc:	b9 01       	movw	r22, r18
    18ce:	a1 01       	movw	r20, r2
    18d0:	2a e0       	ldi	r18, 0x0A	; 10
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	17 d1       	rcall	.+558    	; 0x1b04 <__ultoa_invert>
    18d6:	d8 2e       	mov	r13, r24
    18d8:	d2 18       	sub	r13, r2
    18da:	3f c0       	rjmp	.+126    	; 0x195a <vfprintf+0x2cc>
    18dc:	95 37       	cpi	r25, 0x75	; 117
    18de:	29 f4       	brne	.+10     	; 0x18ea <vfprintf+0x25c>
    18e0:	1f 2d       	mov	r17, r15
    18e2:	1f 7e       	andi	r17, 0xEF	; 239
    18e4:	2a e0       	ldi	r18, 0x0A	; 10
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	1d c0       	rjmp	.+58     	; 0x1924 <vfprintf+0x296>
    18ea:	1f 2d       	mov	r17, r15
    18ec:	19 7f       	andi	r17, 0xF9	; 249
    18ee:	9f 36       	cpi	r25, 0x6F	; 111
    18f0:	61 f0       	breq	.+24     	; 0x190a <vfprintf+0x27c>
    18f2:	90 37       	cpi	r25, 0x70	; 112
    18f4:	20 f4       	brcc	.+8      	; 0x18fe <vfprintf+0x270>
    18f6:	98 35       	cpi	r25, 0x58	; 88
    18f8:	09 f0       	breq	.+2      	; 0x18fc <vfprintf+0x26e>
    18fa:	a5 c0       	rjmp	.+330    	; 0x1a46 <vfprintf+0x3b8>
    18fc:	0f c0       	rjmp	.+30     	; 0x191c <vfprintf+0x28e>
    18fe:	90 37       	cpi	r25, 0x70	; 112
    1900:	39 f0       	breq	.+14     	; 0x1910 <vfprintf+0x282>
    1902:	98 37       	cpi	r25, 0x78	; 120
    1904:	09 f0       	breq	.+2      	; 0x1908 <vfprintf+0x27a>
    1906:	9f c0       	rjmp	.+318    	; 0x1a46 <vfprintf+0x3b8>
    1908:	04 c0       	rjmp	.+8      	; 0x1912 <vfprintf+0x284>
    190a:	28 e0       	ldi	r18, 0x08	; 8
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	0a c0       	rjmp	.+20     	; 0x1924 <vfprintf+0x296>
    1910:	10 61       	ori	r17, 0x10	; 16
    1912:	14 fd       	sbrc	r17, 4
    1914:	14 60       	ori	r17, 0x04	; 4
    1916:	20 e1       	ldi	r18, 0x10	; 16
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	04 c0       	rjmp	.+8      	; 0x1924 <vfprintf+0x296>
    191c:	14 fd       	sbrc	r17, 4
    191e:	16 60       	ori	r17, 0x06	; 6
    1920:	20 e1       	ldi	r18, 0x10	; 16
    1922:	32 e0       	ldi	r19, 0x02	; 2
    1924:	17 ff       	sbrs	r17, 7
    1926:	08 c0       	rjmp	.+16     	; 0x1938 <vfprintf+0x2aa>
    1928:	f5 01       	movw	r30, r10
    192a:	60 81       	ld	r22, Z
    192c:	71 81       	ldd	r23, Z+1	; 0x01
    192e:	82 81       	ldd	r24, Z+2	; 0x02
    1930:	93 81       	ldd	r25, Z+3	; 0x03
    1932:	44 e0       	ldi	r20, 0x04	; 4
    1934:	50 e0       	ldi	r21, 0x00	; 0
    1936:	08 c0       	rjmp	.+16     	; 0x1948 <vfprintf+0x2ba>
    1938:	f5 01       	movw	r30, r10
    193a:	80 81       	ld	r24, Z
    193c:	91 81       	ldd	r25, Z+1	; 0x01
    193e:	bc 01       	movw	r22, r24
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	42 e0       	ldi	r20, 0x02	; 2
    1946:	50 e0       	ldi	r21, 0x00	; 0
    1948:	a4 0e       	add	r10, r20
    194a:	b5 1e       	adc	r11, r21
    194c:	a1 01       	movw	r20, r2
    194e:	da d0       	rcall	.+436    	; 0x1b04 <__ultoa_invert>
    1950:	d8 2e       	mov	r13, r24
    1952:	d2 18       	sub	r13, r2
    1954:	8f e7       	ldi	r24, 0x7F	; 127
    1956:	f8 2e       	mov	r15, r24
    1958:	f1 22       	and	r15, r17
    195a:	f6 fe       	sbrs	r15, 6
    195c:	0b c0       	rjmp	.+22     	; 0x1974 <vfprintf+0x2e6>
    195e:	5e ef       	ldi	r21, 0xFE	; 254
    1960:	f5 22       	and	r15, r21
    1962:	d9 14       	cp	r13, r9
    1964:	38 f4       	brcc	.+14     	; 0x1974 <vfprintf+0x2e6>
    1966:	f4 fe       	sbrs	r15, 4
    1968:	07 c0       	rjmp	.+14     	; 0x1978 <vfprintf+0x2ea>
    196a:	f2 fc       	sbrc	r15, 2
    196c:	05 c0       	rjmp	.+10     	; 0x1978 <vfprintf+0x2ea>
    196e:	8f ee       	ldi	r24, 0xEF	; 239
    1970:	f8 22       	and	r15, r24
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <vfprintf+0x2ea>
    1974:	1d 2d       	mov	r17, r13
    1976:	01 c0       	rjmp	.+2      	; 0x197a <vfprintf+0x2ec>
    1978:	19 2d       	mov	r17, r9
    197a:	f4 fe       	sbrs	r15, 4
    197c:	0d c0       	rjmp	.+26     	; 0x1998 <vfprintf+0x30a>
    197e:	fe 01       	movw	r30, r28
    1980:	ed 0d       	add	r30, r13
    1982:	f1 1d       	adc	r31, r1
    1984:	80 81       	ld	r24, Z
    1986:	80 33       	cpi	r24, 0x30	; 48
    1988:	19 f4       	brne	.+6      	; 0x1990 <vfprintf+0x302>
    198a:	99 ee       	ldi	r25, 0xE9	; 233
    198c:	f9 22       	and	r15, r25
    198e:	08 c0       	rjmp	.+16     	; 0x19a0 <vfprintf+0x312>
    1990:	1f 5f       	subi	r17, 0xFF	; 255
    1992:	f2 fe       	sbrs	r15, 2
    1994:	05 c0       	rjmp	.+10     	; 0x19a0 <vfprintf+0x312>
    1996:	03 c0       	rjmp	.+6      	; 0x199e <vfprintf+0x310>
    1998:	8f 2d       	mov	r24, r15
    199a:	86 78       	andi	r24, 0x86	; 134
    199c:	09 f0       	breq	.+2      	; 0x19a0 <vfprintf+0x312>
    199e:	1f 5f       	subi	r17, 0xFF	; 255
    19a0:	0f 2d       	mov	r16, r15
    19a2:	f3 fc       	sbrc	r15, 3
    19a4:	13 c0       	rjmp	.+38     	; 0x19cc <vfprintf+0x33e>
    19a6:	f0 fe       	sbrs	r15, 0
    19a8:	0e c0       	rjmp	.+28     	; 0x19c6 <vfprintf+0x338>
    19aa:	1e 15       	cp	r17, r14
    19ac:	10 f0       	brcs	.+4      	; 0x19b2 <vfprintf+0x324>
    19ae:	9d 2c       	mov	r9, r13
    19b0:	0a c0       	rjmp	.+20     	; 0x19c6 <vfprintf+0x338>
    19b2:	9d 2c       	mov	r9, r13
    19b4:	9e 0c       	add	r9, r14
    19b6:	91 1a       	sub	r9, r17
    19b8:	1e 2d       	mov	r17, r14
    19ba:	05 c0       	rjmp	.+10     	; 0x19c6 <vfprintf+0x338>
    19bc:	80 e2       	ldi	r24, 0x20	; 32
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	b3 01       	movw	r22, r6
    19c2:	74 d0       	rcall	.+232    	; 0x1aac <fputc>
    19c4:	1f 5f       	subi	r17, 0xFF	; 255
    19c6:	1e 15       	cp	r17, r14
    19c8:	c8 f3       	brcs	.-14     	; 0x19bc <vfprintf+0x32e>
    19ca:	04 c0       	rjmp	.+8      	; 0x19d4 <vfprintf+0x346>
    19cc:	1e 15       	cp	r17, r14
    19ce:	10 f4       	brcc	.+4      	; 0x19d4 <vfprintf+0x346>
    19d0:	e1 1a       	sub	r14, r17
    19d2:	01 c0       	rjmp	.+2      	; 0x19d6 <vfprintf+0x348>
    19d4:	ee 24       	eor	r14, r14
    19d6:	04 ff       	sbrs	r16, 4
    19d8:	0e c0       	rjmp	.+28     	; 0x19f6 <vfprintf+0x368>
    19da:	80 e3       	ldi	r24, 0x30	; 48
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	b3 01       	movw	r22, r6
    19e0:	65 d0       	rcall	.+202    	; 0x1aac <fputc>
    19e2:	02 ff       	sbrs	r16, 2
    19e4:	1b c0       	rjmp	.+54     	; 0x1a1c <vfprintf+0x38e>
    19e6:	01 fd       	sbrc	r16, 1
    19e8:	03 c0       	rjmp	.+6      	; 0x19f0 <vfprintf+0x362>
    19ea:	88 e7       	ldi	r24, 0x78	; 120
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	0e c0       	rjmp	.+28     	; 0x1a0c <vfprintf+0x37e>
    19f0:	88 e5       	ldi	r24, 0x58	; 88
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	0b c0       	rjmp	.+22     	; 0x1a0c <vfprintf+0x37e>
    19f6:	80 2f       	mov	r24, r16
    19f8:	86 78       	andi	r24, 0x86	; 134
    19fa:	81 f0       	breq	.+32     	; 0x1a1c <vfprintf+0x38e>
    19fc:	01 ff       	sbrs	r16, 1
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <vfprintf+0x376>
    1a00:	8b e2       	ldi	r24, 0x2B	; 43
    1a02:	01 c0       	rjmp	.+2      	; 0x1a06 <vfprintf+0x378>
    1a04:	80 e2       	ldi	r24, 0x20	; 32
    1a06:	f7 fc       	sbrc	r15, 7
    1a08:	8d e2       	ldi	r24, 0x2D	; 45
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	b3 01       	movw	r22, r6
    1a0e:	4e d0       	rcall	.+156    	; 0x1aac <fputc>
    1a10:	05 c0       	rjmp	.+10     	; 0x1a1c <vfprintf+0x38e>
    1a12:	80 e3       	ldi	r24, 0x30	; 48
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	b3 01       	movw	r22, r6
    1a18:	49 d0       	rcall	.+146    	; 0x1aac <fputc>
    1a1a:	9a 94       	dec	r9
    1a1c:	d9 14       	cp	r13, r9
    1a1e:	c8 f3       	brcs	.-14     	; 0x1a12 <vfprintf+0x384>
    1a20:	da 94       	dec	r13
    1a22:	f1 01       	movw	r30, r2
    1a24:	ed 0d       	add	r30, r13
    1a26:	f1 1d       	adc	r31, r1
    1a28:	80 81       	ld	r24, Z
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	b3 01       	movw	r22, r6
    1a2e:	3e d0       	rcall	.+124    	; 0x1aac <fputc>
    1a30:	dd 20       	and	r13, r13
    1a32:	b1 f7       	brne	.-20     	; 0x1a20 <vfprintf+0x392>
    1a34:	05 c0       	rjmp	.+10     	; 0x1a40 <vfprintf+0x3b2>
    1a36:	80 e2       	ldi	r24, 0x20	; 32
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	b3 01       	movw	r22, r6
    1a3c:	37 d0       	rcall	.+110    	; 0x1aac <fputc>
    1a3e:	ea 94       	dec	r14
    1a40:	ee 20       	and	r14, r14
    1a42:	c9 f7       	brne	.-14     	; 0x1a36 <vfprintf+0x3a8>
    1a44:	50 ce       	rjmp	.-864    	; 0x16e6 <vfprintf+0x58>
    1a46:	f3 01       	movw	r30, r6
    1a48:	66 81       	ldd	r22, Z+6	; 0x06
    1a4a:	77 81       	ldd	r23, Z+7	; 0x07
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	2b 96       	adiw	r28, 0x0b	; 11
    1a50:	0f b6       	in	r0, 0x3f	; 63
    1a52:	f8 94       	cli
    1a54:	de bf       	out	0x3e, r29	; 62
    1a56:	0f be       	out	0x3f, r0	; 63
    1a58:	cd bf       	out	0x3d, r28	; 61
    1a5a:	cf 91       	pop	r28
    1a5c:	df 91       	pop	r29
    1a5e:	1f 91       	pop	r17
    1a60:	0f 91       	pop	r16
    1a62:	ff 90       	pop	r15
    1a64:	ef 90       	pop	r14
    1a66:	df 90       	pop	r13
    1a68:	cf 90       	pop	r12
    1a6a:	bf 90       	pop	r11
    1a6c:	af 90       	pop	r10
    1a6e:	9f 90       	pop	r9
    1a70:	8f 90       	pop	r8
    1a72:	7f 90       	pop	r7
    1a74:	6f 90       	pop	r6
    1a76:	5f 90       	pop	r5
    1a78:	4f 90       	pop	r4
    1a7a:	3f 90       	pop	r3
    1a7c:	2f 90       	pop	r2
    1a7e:	08 95       	ret

00001a80 <strnlen_P>:
    1a80:	fc 01       	movw	r30, r24
    1a82:	05 90       	lpm	r0, Z+
    1a84:	61 50       	subi	r22, 0x01	; 1
    1a86:	70 40       	sbci	r23, 0x00	; 0
    1a88:	01 10       	cpse	r0, r1
    1a8a:	d8 f7       	brcc	.-10     	; 0x1a82 <strnlen_P+0x2>
    1a8c:	80 95       	com	r24
    1a8e:	90 95       	com	r25
    1a90:	8e 0f       	add	r24, r30
    1a92:	9f 1f       	adc	r25, r31
    1a94:	08 95       	ret

00001a96 <strnlen>:
    1a96:	fc 01       	movw	r30, r24
    1a98:	61 50       	subi	r22, 0x01	; 1
    1a9a:	70 40       	sbci	r23, 0x00	; 0
    1a9c:	01 90       	ld	r0, Z+
    1a9e:	01 10       	cpse	r0, r1
    1aa0:	d8 f7       	brcc	.-10     	; 0x1a98 <strnlen+0x2>
    1aa2:	80 95       	com	r24
    1aa4:	90 95       	com	r25
    1aa6:	8e 0f       	add	r24, r30
    1aa8:	9f 1f       	adc	r25, r31
    1aaa:	08 95       	ret

00001aac <fputc>:
    1aac:	0f 93       	push	r16
    1aae:	1f 93       	push	r17
    1ab0:	cf 93       	push	r28
    1ab2:	df 93       	push	r29
    1ab4:	8c 01       	movw	r16, r24
    1ab6:	eb 01       	movw	r28, r22
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	81 ff       	sbrs	r24, 1
    1abc:	1b c0       	rjmp	.+54     	; 0x1af4 <fputc+0x48>
    1abe:	82 ff       	sbrs	r24, 2
    1ac0:	0d c0       	rjmp	.+26     	; 0x1adc <fputc+0x30>
    1ac2:	2e 81       	ldd	r18, Y+6	; 0x06
    1ac4:	3f 81       	ldd	r19, Y+7	; 0x07
    1ac6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac8:	9d 81       	ldd	r25, Y+5	; 0x05
    1aca:	28 17       	cp	r18, r24
    1acc:	39 07       	cpc	r19, r25
    1ace:	64 f4       	brge	.+24     	; 0x1ae8 <fputc+0x3c>
    1ad0:	e8 81       	ld	r30, Y
    1ad2:	f9 81       	ldd	r31, Y+1	; 0x01
    1ad4:	01 93       	st	Z+, r16
    1ad6:	f9 83       	std	Y+1, r31	; 0x01
    1ad8:	e8 83       	st	Y, r30
    1ada:	06 c0       	rjmp	.+12     	; 0x1ae8 <fputc+0x3c>
    1adc:	e8 85       	ldd	r30, Y+8	; 0x08
    1ade:	f9 85       	ldd	r31, Y+9	; 0x09
    1ae0:	80 2f       	mov	r24, r16
    1ae2:	09 95       	icall
    1ae4:	89 2b       	or	r24, r25
    1ae6:	31 f4       	brne	.+12     	; 0x1af4 <fputc+0x48>
    1ae8:	8e 81       	ldd	r24, Y+6	; 0x06
    1aea:	9f 81       	ldd	r25, Y+7	; 0x07
    1aec:	01 96       	adiw	r24, 0x01	; 1
    1aee:	9f 83       	std	Y+7, r25	; 0x07
    1af0:	8e 83       	std	Y+6, r24	; 0x06
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <fputc+0x4c>
    1af4:	0f ef       	ldi	r16, 0xFF	; 255
    1af6:	1f ef       	ldi	r17, 0xFF	; 255
    1af8:	c8 01       	movw	r24, r16
    1afa:	df 91       	pop	r29
    1afc:	cf 91       	pop	r28
    1afe:	1f 91       	pop	r17
    1b00:	0f 91       	pop	r16
    1b02:	08 95       	ret

00001b04 <__ultoa_invert>:
    1b04:	fa 01       	movw	r30, r20
    1b06:	aa 27       	eor	r26, r26
    1b08:	28 30       	cpi	r18, 0x08	; 8
    1b0a:	51 f1       	breq	.+84     	; 0x1b60 <__ultoa_invert+0x5c>
    1b0c:	20 31       	cpi	r18, 0x10	; 16
    1b0e:	81 f1       	breq	.+96     	; 0x1b70 <__ultoa_invert+0x6c>
    1b10:	e8 94       	clt
    1b12:	6f 93       	push	r22
    1b14:	6e 7f       	andi	r22, 0xFE	; 254
    1b16:	6e 5f       	subi	r22, 0xFE	; 254
    1b18:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1e:	af 4f       	sbci	r26, 0xFF	; 255
    1b20:	b1 e0       	ldi	r27, 0x01	; 1
    1b22:	3e d0       	rcall	.+124    	; 0x1ba0 <__ultoa_invert+0x9c>
    1b24:	b4 e0       	ldi	r27, 0x04	; 4
    1b26:	3c d0       	rcall	.+120    	; 0x1ba0 <__ultoa_invert+0x9c>
    1b28:	67 0f       	add	r22, r23
    1b2a:	78 1f       	adc	r23, r24
    1b2c:	89 1f       	adc	r24, r25
    1b2e:	9a 1f       	adc	r25, r26
    1b30:	a1 1d       	adc	r26, r1
    1b32:	68 0f       	add	r22, r24
    1b34:	79 1f       	adc	r23, r25
    1b36:	8a 1f       	adc	r24, r26
    1b38:	91 1d       	adc	r25, r1
    1b3a:	a1 1d       	adc	r26, r1
    1b3c:	6a 0f       	add	r22, r26
    1b3e:	71 1d       	adc	r23, r1
    1b40:	81 1d       	adc	r24, r1
    1b42:	91 1d       	adc	r25, r1
    1b44:	a1 1d       	adc	r26, r1
    1b46:	20 d0       	rcall	.+64     	; 0x1b88 <__ultoa_invert+0x84>
    1b48:	09 f4       	brne	.+2      	; 0x1b4c <__ultoa_invert+0x48>
    1b4a:	68 94       	set
    1b4c:	3f 91       	pop	r19
    1b4e:	2a e0       	ldi	r18, 0x0A	; 10
    1b50:	26 9f       	mul	r18, r22
    1b52:	11 24       	eor	r1, r1
    1b54:	30 19       	sub	r19, r0
    1b56:	30 5d       	subi	r19, 0xD0	; 208
    1b58:	31 93       	st	Z+, r19
    1b5a:	de f6       	brtc	.-74     	; 0x1b12 <__ultoa_invert+0xe>
    1b5c:	cf 01       	movw	r24, r30
    1b5e:	08 95       	ret
    1b60:	46 2f       	mov	r20, r22
    1b62:	47 70       	andi	r20, 0x07	; 7
    1b64:	40 5d       	subi	r20, 0xD0	; 208
    1b66:	41 93       	st	Z+, r20
    1b68:	b3 e0       	ldi	r27, 0x03	; 3
    1b6a:	0f d0       	rcall	.+30     	; 0x1b8a <__ultoa_invert+0x86>
    1b6c:	c9 f7       	brne	.-14     	; 0x1b60 <__ultoa_invert+0x5c>
    1b6e:	f6 cf       	rjmp	.-20     	; 0x1b5c <__ultoa_invert+0x58>
    1b70:	46 2f       	mov	r20, r22
    1b72:	4f 70       	andi	r20, 0x0F	; 15
    1b74:	40 5d       	subi	r20, 0xD0	; 208
    1b76:	4a 33       	cpi	r20, 0x3A	; 58
    1b78:	18 f0       	brcs	.+6      	; 0x1b80 <__ultoa_invert+0x7c>
    1b7a:	49 5d       	subi	r20, 0xD9	; 217
    1b7c:	31 fd       	sbrc	r19, 1
    1b7e:	40 52       	subi	r20, 0x20	; 32
    1b80:	41 93       	st	Z+, r20
    1b82:	02 d0       	rcall	.+4      	; 0x1b88 <__ultoa_invert+0x84>
    1b84:	a9 f7       	brne	.-22     	; 0x1b70 <__ultoa_invert+0x6c>
    1b86:	ea cf       	rjmp	.-44     	; 0x1b5c <__ultoa_invert+0x58>
    1b88:	b4 e0       	ldi	r27, 0x04	; 4
    1b8a:	a6 95       	lsr	r26
    1b8c:	97 95       	ror	r25
    1b8e:	87 95       	ror	r24
    1b90:	77 95       	ror	r23
    1b92:	67 95       	ror	r22
    1b94:	ba 95       	dec	r27
    1b96:	c9 f7       	brne	.-14     	; 0x1b8a <__ultoa_invert+0x86>
    1b98:	00 97       	sbiw	r24, 0x00	; 0
    1b9a:	61 05       	cpc	r22, r1
    1b9c:	71 05       	cpc	r23, r1
    1b9e:	08 95       	ret
    1ba0:	9b 01       	movw	r18, r22
    1ba2:	ac 01       	movw	r20, r24
    1ba4:	0a 2e       	mov	r0, r26
    1ba6:	06 94       	lsr	r0
    1ba8:	57 95       	ror	r21
    1baa:	47 95       	ror	r20
    1bac:	37 95       	ror	r19
    1bae:	27 95       	ror	r18
    1bb0:	ba 95       	dec	r27
    1bb2:	c9 f7       	brne	.-14     	; 0x1ba6 <__ultoa_invert+0xa2>
    1bb4:	62 0f       	add	r22, r18
    1bb6:	73 1f       	adc	r23, r19
    1bb8:	84 1f       	adc	r24, r20
    1bba:	95 1f       	adc	r25, r21
    1bbc:	a0 1d       	adc	r26, r0
    1bbe:	08 95       	ret

00001bc0 <_exit>:
    1bc0:	f8 94       	cli

00001bc2 <__stop_program>:
    1bc2:	ff cf       	rjmp	.-2      	; 0x1bc2 <__stop_program>
