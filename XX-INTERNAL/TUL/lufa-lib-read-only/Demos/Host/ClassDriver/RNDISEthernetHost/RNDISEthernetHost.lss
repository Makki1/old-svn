
RNDISEthernetHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00002106  0000219a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002106  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000422  00800134  00800134  000021ce  2**0
                  ALLOC
  3 .stab         00002394  00000000  00000000  000021d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e2a  00000000  00000000  00004564  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000006c8  00000000  00000000  0000538e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000f8d  00000000  00000000  00005a56  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000b73b  00000000  00000000  000069e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000280a  00000000  00000000  0001211e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007cf9  00000000  00000000  00014928  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b10  00000000  00000000  0001c624  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000045a5  00000000  00000000  0001d134  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000056ee  00000000  00000000  000216d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000798  00000000  00000000  00026dc7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       0:	65 c1       	rjmp	.+714    	; 0x2cc <__ctors_end>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       2:	00 00       	nop
	return USB_Host_SendControlRequest(NULL);
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
       4:	81 c1       	rjmp	.+770    	; 0x308 <__bad_interrupt>
}

uint8_t RNDIS_Host_SendPacket(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                              void* Buffer,
                              const uint16_t PacketLength)
{
       6:	00 00       	nop

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       8:	7f c1       	rjmp	.+766    	; 0x308 <__bad_interrupt>
       a:	00 00       	nop
       c:	7d c1       	rjmp	.+762    	; 0x308 <__bad_interrupt>
       e:	00 00       	nop
      10:	7b c1       	rjmp	.+758    	; 0x308 <__bad_interrupt>
      12:	00 00       	nop
      14:	79 c1       	rjmp	.+754    	; 0x308 <__bad_interrupt>
      16:	00 00       	nop
      18:	77 c1       	rjmp	.+750    	; 0x308 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	75 c1       	rjmp	.+746    	; 0x308 <__bad_interrupt>
      1e:	00 00       	nop
      20:	73 c1       	rjmp	.+742    	; 0x308 <__bad_interrupt>
      22:	00 00       	nop
      24:	71 c1       	rjmp	.+738    	; 0x308 <__bad_interrupt>
      26:	00 00       	nop
      28:	5d c6       	rjmp	.+3258   	; 0xce4 <__vector_10>
      2a:	00 00       	nop
      2c:	6d c1       	rjmp	.+730    	; 0x308 <__bad_interrupt>
      2e:	00 00       	nop
      30:	6b c1       	rjmp	.+726    	; 0x308 <__bad_interrupt>
      32:	00 00       	nop
      34:	69 c1       	rjmp	.+722    	; 0x308 <__bad_interrupt>
      36:	00 00       	nop
      38:	67 c1       	rjmp	.+718    	; 0x308 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	65 c1       	rjmp	.+714    	; 0x308 <__bad_interrupt>
      3e:	00 00       	nop
      40:	63 c1       	rjmp	.+710    	; 0x308 <__bad_interrupt>
      42:	00 00       	nop
      44:	61 c1       	rjmp	.+706    	; 0x308 <__bad_interrupt>
      46:	00 00       	nop
      48:	5f c1       	rjmp	.+702    	; 0x308 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5d c1       	rjmp	.+698    	; 0x308 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5b c1       	rjmp	.+694    	; 0x308 <__bad_interrupt>
      52:	00 00       	nop
      54:	59 c1       	rjmp	.+690    	; 0x308 <__bad_interrupt>
      56:	00 00       	nop
      58:	57 c1       	rjmp	.+686    	; 0x308 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	55 c1       	rjmp	.+682    	; 0x308 <__bad_interrupt>
      5e:	00 00       	nop
      60:	53 c1       	rjmp	.+678    	; 0x308 <__bad_interrupt>
      62:	00 00       	nop
      64:	51 c1       	rjmp	.+674    	; 0x308 <__bad_interrupt>
      66:	00 00       	nop
      68:	4f c1       	rjmp	.+670    	; 0x308 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4d c1       	rjmp	.+666    	; 0x308 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4b c1       	rjmp	.+662    	; 0x308 <__bad_interrupt>
      72:	00 00       	nop
      74:	49 c1       	rjmp	.+658    	; 0x308 <__bad_interrupt>
      76:	00 00       	nop
      78:	47 c1       	rjmp	.+654    	; 0x308 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	45 c1       	rjmp	.+650    	; 0x308 <__bad_interrupt>
      7e:	00 00       	nop
      80:	43 c1       	rjmp	.+646    	; 0x308 <__bad_interrupt>
      82:	00 00       	nop
      84:	41 c1       	rjmp	.+642    	; 0x308 <__bad_interrupt>
      86:	00 00       	nop
      88:	3f c1       	rjmp	.+638    	; 0x308 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3d c1       	rjmp	.+634    	; 0x308 <__bad_interrupt>
      8e:	00 00       	nop
      90:	3b c1       	rjmp	.+630    	; 0x308 <__bad_interrupt>
      92:	00 00       	nop
      94:	39 c1       	rjmp	.+626    	; 0x308 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4594>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4586>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4572>:
     11d:	52 4e 44 49 53 20 44 65 76 69 63 65 20 45 6e 75     RNDIS Device Enu
     12d:	6d 65 72 61 74 65 64 2e 0d 0a 00                    merated....

00000138 <__c.4570>:
     138:	44 65 76 69 63 65 20 56 65 6e 64 6f 72 20 49 44     Device Vendor ID
     148:	3a 20 30 78 25 30 38 6c 58 0d 0a 00                 : 0x%08lX...

00000154 <__c.4568>:
     154:	45 72 72 6f 72 20 47 65 74 74 69 6e 67 20 56 65     Error Getting Ve
     164:	6e 64 6f 72 20 49 44 2e 0d 0a 00                    ndor ID....

0000016f <__c.4565>:
     16f:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     17f:	76 69 63 65 20 50 61 63 6b 65 74 20 46 69 6c 74     vice Packet Filt
     18f:	65 72 2e 0d 0a 00                                   er....

00000195 <__c.4562>:
     195:	44 65 76 69 63 65 20 4d 61 78 20 54 72 61 6e 73     Device Max Trans
     1a5:	66 65 72 20 53 69 7a 65 3a 20 25 6c 75 20 62 79     fer Size: %lu by
     1b5:	74 65 73 2e 0d 0a 00                                tes....

000001bc <__c.4560>:
     1bc:	45 72 72 6f 72 20 49 6e 69 74 69 61 6c 69 7a 69     Error Initializi
     1cc:	6e 67 20 44 65 76 69 63 65 2e 0d 0a 00              ng Device....

000001d9 <__c.4558>:
     1d9:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     1e9:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     1f9:	6f 6e 2e 0d 0a 00                                   on....

000001ff <__c.4556>:
     1ff:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     20f:	4e 6f 74 20 61 20 56 61 6c 69 64 20 52 4e 44 49     Not a Valid RNDI
     21f:	53 20 43 6c 61 73 73 20 44 65 76 69 63 65 2e 0d     S Class Device..
     22f:	0a 00                                               ..

00000231 <__c.4554>:
     231:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     241:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     251:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

0000025e <__c.4547>:
     25e:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     26e:	68 65 64 2e 0d 0a 00                                hed....

00000275 <__c.4542>:
     275:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     285:	0d 0a 00                                            ...

00000288 <__c.4525>:
     288:	0d 0a 0d 0a 00                                      .....

0000028d <__c.4519>:
     28d:	2a 2a 2a 50 41 43 4b 45 54 20 28 53 69 7a 65 20     ***PACKET (Size 
     29d:	25 64 29 2a 2a 2a 0d 0a 00                          %d)***...

000002a6 <__c.4511>:
     2a6:	1b 5b 33 36 6d 52 4e 44 49 53 20 48 6f 73 74 20     .[36mRNDIS Host 
     2b6:	44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b     Demo running....
     2c6:	5b 33 37 6d 00 00                                   [37m..

000002cc <__ctors_end>:
     2cc:	11 24       	eor	r1, r1
     2ce:	1f be       	out	0x3f, r1	; 63
     2d0:	cf ef       	ldi	r28, 0xFF	; 255
     2d2:	d0 e2       	ldi	r29, 0x20	; 32
     2d4:	de bf       	out	0x3e, r29	; 62
     2d6:	cd bf       	out	0x3d, r28	; 61

000002d8 <__do_copy_data>:
     2d8:	11 e0       	ldi	r17, 0x01	; 1
     2da:	a0 e0       	ldi	r26, 0x00	; 0
     2dc:	b1 e0       	ldi	r27, 0x01	; 1
     2de:	e6 e0       	ldi	r30, 0x06	; 6
     2e0:	f1 e2       	ldi	r31, 0x21	; 33
     2e2:	00 e0       	ldi	r16, 0x00	; 0
     2e4:	0b bf       	out	0x3b, r16	; 59
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <__do_copy_data+0x14>
     2e8:	07 90       	elpm	r0, Z+
     2ea:	0d 92       	st	X+, r0
     2ec:	a4 33       	cpi	r26, 0x34	; 52
     2ee:	b1 07       	cpc	r27, r17
     2f0:	d9 f7       	brne	.-10     	; 0x2e8 <__do_copy_data+0x10>

000002f2 <__do_clear_bss>:
     2f2:	15 e0       	ldi	r17, 0x05	; 5
     2f4:	a4 e3       	ldi	r26, 0x34	; 52
     2f6:	b1 e0       	ldi	r27, 0x01	; 1
     2f8:	01 c0       	rjmp	.+2      	; 0x2fc <.do_clear_bss_start>

000002fa <.do_clear_bss_loop>:
     2fa:	1d 92       	st	X+, r1

000002fc <.do_clear_bss_start>:
     2fc:	a6 35       	cpi	r26, 0x56	; 86
     2fe:	b1 07       	cpc	r27, r17
     300:	e1 f7       	brne	.-8      	; 0x2fa <.do_clear_bss_loop>
     302:	da d1       	rcall	.+948    	; 0x6b8 <main>
     304:	0c 94 81 10 	jmp	0x2102	; 0x2102 <_exit>

00000308 <__bad_interrupt>:
     308:	7b ce       	rjmp	.-778    	; 0x0 <__vectors>

0000030a <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     30a:	90 91 41 05 	lds	r25, 0x0541
     30e:	2d b7       	in	r18, 0x3d	; 61
     310:	3e b7       	in	r19, 0x3e	; 62
     312:	28 50       	subi	r18, 0x08	; 8
     314:	30 40       	sbci	r19, 0x00	; 0
     316:	0f b6       	in	r0, 0x3f	; 63
     318:	f8 94       	cli
     31a:	3e bf       	out	0x3e, r19	; 62
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	2d bf       	out	0x3d, r18	; 61
     320:	ed b7       	in	r30, 0x3d	; 61
     322:	fe b7       	in	r31, 0x3e	; 62
     324:	31 96       	adiw	r30, 0x01	; 1
     326:	28 e9       	ldi	r18, 0x98	; 152
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	ad b7       	in	r26, 0x3d	; 61
     32c:	be b7       	in	r27, 0x3e	; 62
     32e:	12 96       	adiw	r26, 0x02	; 2
     330:	3c 93       	st	X, r19
     332:	2e 93       	st	-X, r18
     334:	11 97       	sbiw	r26, 0x01	; 1
     336:	82 83       	std	Z+2, r24	; 0x02
     338:	13 82       	std	Z+3, r1	; 0x03
     33a:	64 83       	std	Z+4, r22	; 0x04
     33c:	15 82       	std	Z+5, r1	; 0x05
     33e:	96 83       	std	Z+6, r25	; 0x06
     340:	17 82       	std	Z+7, r1	; 0x07
     342:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <printf_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     346:	8b b1       	in	r24, 0x0b	; 11
     348:	8f 70       	andi	r24, 0x0F	; 15
     34a:	80 69       	ori	r24, 0x90	; 144
     34c:	8b b9       	out	0x0b, r24	; 11
     34e:	2d b7       	in	r18, 0x3d	; 61
     350:	3e b7       	in	r19, 0x3e	; 62
     352:	28 5f       	subi	r18, 0xF8	; 248
     354:	3f 4f       	sbci	r19, 0xFF	; 255
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	f8 94       	cli
     35a:	3e bf       	out	0x3e, r19	; 62
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     360:	08 95       	ret

00000362 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     362:	1f 93       	push	r17
     364:	18 2f       	mov	r17, r24
	USB_Disable();
     366:	99 d4       	rcall	.+2354   	; 0xc9a <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     368:	00 d0       	rcall	.+0      	; 0x36a <EVENT_USB_Host_HostError+0x8>
     36a:	00 d0       	rcall	.+0      	; 0x36c <EVENT_USB_Host_HostError+0xa>
     36c:	ed b7       	in	r30, 0x3d	; 61
     36e:	fe b7       	in	r31, 0x3e	; 62
     370:	31 96       	adiw	r30, 0x01	; 1
     372:	8e ee       	ldi	r24, 0xEE	; 238
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	ad b7       	in	r26, 0x3d	; 61
     378:	be b7       	in	r27, 0x3e	; 62
     37a:	12 96       	adiw	r26, 0x02	; 2
     37c:	9c 93       	st	X, r25
     37e:	8e 93       	st	-X, r24
     380:	11 97       	sbiw	r26, 0x01	; 1
     382:	12 83       	std	Z+2, r17	; 0x02
     384:	13 82       	std	Z+3, r1	; 0x03
     386:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <printf_P>
     38a:	8b b1       	in	r24, 0x0b	; 11
     38c:	8f 70       	andi	r24, 0x0F	; 15
     38e:	80 69       	ori	r24, 0x90	; 144
     390:	8b b9       	out	0x0b, r24	; 11
     392:	0f 90       	pop	r0
     394:	0f 90       	pop	r0
     396:	0f 90       	pop	r0
     398:	0f 90       	pop	r0
     39a:	ff cf       	rjmp	.-2      	; 0x39a <EVENT_USB_Host_HostError+0x38>

0000039c <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     39c:	8e e5       	ldi	r24, 0x5E	; 94
     39e:	92 e0       	ldi	r25, 0x02	; 2
     3a0:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <puts_P>
     3a4:	8b b1       	in	r24, 0x0b	; 11
     3a6:	8f 70       	andi	r24, 0x0F	; 15
     3a8:	80 61       	ori	r24, 0x10	; 16
     3aa:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     3ac:	08 95       	ret

000003ae <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     3ae:	85 e7       	ldi	r24, 0x75	; 117
     3b0:	92 e0       	ldi	r25, 0x02	; 2
     3b2:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <puts_P>
     3b6:	8b b1       	in	r24, 0x0b	; 11
     3b8:	8f 70       	andi	r24, 0x0F	; 15
     3ba:	80 6a       	ori	r24, 0xA0	; 160
     3bc:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     3be:	08 95       	ret

000003c0 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     3c0:	0f 93       	push	r16
     3c2:	1f 93       	push	r17
     3c4:	df 93       	push	r29
     3c6:	cf 93       	push	r28
     3c8:	cd b7       	in	r28, 0x3d	; 61
     3ca:	de b7       	in	r29, 0x3e	; 62
     3cc:	ca 50       	subi	r28, 0x0A	; 10
     3ce:	d2 40       	sbci	r29, 0x02	; 2
     3d0:	0f b6       	in	r0, 0x3f	; 63
     3d2:	f8 94       	cli
     3d4:	de bf       	out	0x3e, r29	; 62
     3d6:	0f be       	out	0x3f, r0	; 63
     3d8:	cd bf       	out	0x3d, r28	; 61
     3da:	8b b1       	in	r24, 0x0b	; 11
     3dc:	8f 70       	andi	r24, 0x0F	; 15
     3de:	80 6a       	ori	r24, 0xA0	; 160
     3e0:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     3e2:	8e 01       	movw	r16, r28
     3e4:	05 5f       	subi	r16, 0xF5	; 245
     3e6:	1f 4f       	sbci	r17, 0xFF	; 255
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	be 01       	movw	r22, r28
     3ec:	6f 5f       	subi	r22, 0xFF	; 255
     3ee:	7f 4f       	sbci	r23, 0xFF	; 255
     3f0:	a8 01       	movw	r20, r16
     3f2:	20 e0       	ldi	r18, 0x00	; 0
     3f4:	32 e0       	ldi	r19, 0x02	; 2
     3f6:	ec d5       	rcall	.+3032   	; 0xfd0 <USB_Host_GetDeviceConfigDescriptor>
     3f8:	88 23       	and	r24, r24
     3fa:	19 f0       	breq	.+6      	; 0x402 <EVENT_USB_Host_DeviceEnumerationComplete+0x42>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     3fc:	81 e3       	ldi	r24, 0x31	; 49
     3fe:	92 e0       	ldi	r25, 0x02	; 2
     400:	12 c0       	rjmp	.+36     	; 0x426 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (RNDIS_Host_ConfigurePipes(&Ethernet_RNDIS_Interface,
     402:	69 81       	ldd	r22, Y+1	; 0x01
     404:	7a 81       	ldd	r23, Y+2	; 0x02
     406:	88 e0       	ldi	r24, 0x08	; 8
     408:	91 e0       	ldi	r25, 0x01	; 1
     40a:	a8 01       	movw	r20, r16
     40c:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <RNDIS_Host_ConfigurePipes>
     410:	88 23       	and	r24, r24
     412:	19 f0       	breq	.+6      	; 0x41a <EVENT_USB_Host_DeviceEnumerationComplete+0x5a>
	                              ConfigDescriptorSize, ConfigDescriptorData) != RNDIS_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid RNDIS Class Device.\r\n"));
     414:	8f ef       	ldi	r24, 0xFF	; 255
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	06 c0       	rjmp	.+12     	; 0x426 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	7b d7       	rcall	.+3830   	; 0x1314 <USB_Host_SetDeviceConfiguration>
     41e:	88 23       	and	r24, r24
     420:	41 f0       	breq	.+16     	; 0x432 <EVENT_USB_Host_DeviceEnumerationComplete+0x72>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     422:	89 ed       	ldi	r24, 0xD9	; 217
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <puts_P>
     42a:	8b b1       	in	r24, 0x0b	; 11
     42c:	8f 70       	andi	r24, 0x0F	; 15
     42e:	80 69       	ori	r24, 0x90	; 144
     430:	7e c0       	rjmp	.+252    	; 0x52e <EVENT_USB_Host_DeviceEnumerationComplete+0x16e>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (RNDIS_Host_InitializeDevice(&Ethernet_RNDIS_Interface) != HOST_SENDCONTROL_Successful)
     432:	88 e0       	ldi	r24, 0x08	; 8
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <RNDIS_Host_InitializeDevice>
     43a:	88 23       	and	r24, r24
     43c:	19 f0       	breq	.+6      	; 0x444 <EVENT_USB_Host_DeviceEnumerationComplete+0x84>
	{
		puts_P(PSTR("Error Initializing Device.\r\n"));
     43e:	8c eb       	ldi	r24, 0xBC	; 188
     440:	91 e0       	ldi	r25, 0x01	; 1
     442:	4a c0       	rjmp	.+148    	; 0x4d8 <EVENT_USB_Host_DeviceEnumerationComplete+0x118>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	printf_P(PSTR("Device Max Transfer Size: %lu bytes.\r\n"), Ethernet_RNDIS_Interface.State.DeviceMaxPacketSize);
     444:	00 d0       	rcall	.+0      	; 0x446 <EVENT_USB_Host_DeviceEnumerationComplete+0x86>
     446:	00 d0       	rcall	.+0      	; 0x448 <EVENT_USB_Host_DeviceEnumerationComplete+0x88>
     448:	00 d0       	rcall	.+0      	; 0x44a <EVENT_USB_Host_DeviceEnumerationComplete+0x8a>
     44a:	85 e9       	ldi	r24, 0x95	; 149
     44c:	91 e0       	ldi	r25, 0x01	; 1
     44e:	ed b7       	in	r30, 0x3d	; 61
     450:	fe b7       	in	r31, 0x3e	; 62
     452:	92 83       	std	Z+2, r25	; 0x02
     454:	81 83       	std	Z+1, r24	; 0x01
     456:	80 91 1a 01 	lds	r24, 0x011A
     45a:	90 91 1b 01 	lds	r25, 0x011B
     45e:	a0 91 1c 01 	lds	r26, 0x011C
     462:	b0 91 1d 01 	lds	r27, 0x011D
     466:	83 83       	std	Z+3, r24	; 0x03
     468:	94 83       	std	Z+4, r25	; 0x04
     46a:	a5 83       	std	Z+5, r26	; 0x05
     46c:	b6 83       	std	Z+6, r27	; 0x06
     46e:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <printf_P>

	uint32_t PacketFilter = (REMOTE_NDIS_PACKET_DIRECTED | REMOTE_NDIS_PACKET_BROADCAST | REMOTE_NDIS_PACKET_ALL_MULTICAST);
     472:	8d e0       	ldi	r24, 0x0D	; 13
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	a0 e0       	ldi	r26, 0x00	; 0
     478:	b0 e0       	ldi	r27, 0x00	; 0
     47a:	8b 83       	std	Y+3, r24	; 0x03
     47c:	9c 83       	std	Y+4, r25	; 0x04
     47e:	ad 83       	std	Y+5, r26	; 0x05
     480:	be 83       	std	Y+6, r27	; 0x06
	if (RNDIS_Host_SetRNDISProperty(&Ethernet_RNDIS_Interface, OID_GEN_CURRENT_PACKET_FILTER,
     482:	8d b7       	in	r24, 0x3d	; 61
     484:	9e b7       	in	r25, 0x3e	; 62
     486:	06 96       	adiw	r24, 0x06	; 6
     488:	0f b6       	in	r0, 0x3f	; 63
     48a:	f8 94       	cli
     48c:	9e bf       	out	0x3e, r25	; 62
     48e:	0f be       	out	0x3f, r0	; 63
     490:	8d bf       	out	0x3d, r24	; 61
     492:	88 e0       	ldi	r24, 0x08	; 8
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	4e e0       	ldi	r20, 0x0E	; 14
     498:	51 e0       	ldi	r21, 0x01	; 1
     49a:	61 e0       	ldi	r22, 0x01	; 1
     49c:	70 e0       	ldi	r23, 0x00	; 0
     49e:	9e 01       	movw	r18, r28
     4a0:	2d 5f       	subi	r18, 0xFD	; 253
     4a2:	3f 4f       	sbci	r19, 0xFF	; 255
     4a4:	04 e0       	ldi	r16, 0x04	; 4
     4a6:	10 e0       	ldi	r17, 0x00	; 0
     4a8:	0e 94 45 0b 	call	0x168a	; 0x168a <RNDIS_Host_SetRNDISProperty>
     4ac:	88 23       	and	r24, r24
     4ae:	19 f0       	breq	.+6      	; 0x4b6 <EVENT_USB_Host_DeviceEnumerationComplete+0xf6>
	                                &PacketFilter, sizeof(PacketFilter)) != HOST_SENDCONTROL_Successful)
	{
		puts_P(PSTR("Error Setting Device Packet Filter.\r\n"));
     4b0:	8f e6       	ldi	r24, 0x6F	; 111
     4b2:	91 e0       	ldi	r25, 0x01	; 1
     4b4:	11 c0       	rjmp	.+34     	; 0x4d8 <EVENT_USB_Host_DeviceEnumerationComplete+0x118>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	uint32_t VendorID;
	if (RNDIS_Host_QueryRNDISProperty(&Ethernet_RNDIS_Interface, OID_GEN_VENDOR_ID,
     4b6:	88 e0       	ldi	r24, 0x08	; 8
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	4c e0       	ldi	r20, 0x0C	; 12
     4bc:	51 e0       	ldi	r21, 0x01	; 1
     4be:	61 e0       	ldi	r22, 0x01	; 1
     4c0:	70 e0       	ldi	r23, 0x00	; 0
     4c2:	9e 01       	movw	r18, r28
     4c4:	29 5f       	subi	r18, 0xF9	; 249
     4c6:	3f 4f       	sbci	r19, 0xFF	; 255
     4c8:	04 e0       	ldi	r16, 0x04	; 4
     4ca:	10 e0       	ldi	r17, 0x00	; 0
     4cc:	0e 94 a3 0a 	call	0x1546	; 0x1546 <RNDIS_Host_QueryRNDISProperty>
     4d0:	88 23       	and	r24, r24
     4d2:	59 f0       	breq	.+22     	; 0x4ea <EVENT_USB_Host_DeviceEnumerationComplete+0x12a>
	                                  &VendorID, sizeof(VendorID)) != HOST_SENDCONTROL_Successful)
	{
		puts_P(PSTR("Error Getting Vendor ID.\r\n"));
     4d4:	84 e5       	ldi	r24, 0x54	; 84
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <puts_P>
     4dc:	8b b1       	in	r24, 0x0b	; 11
     4de:	8f 70       	andi	r24, 0x0F	; 15
     4e0:	80 69       	ori	r24, 0x90	; 144
     4e2:	8b b9       	out	0x0b, r24	; 11

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	16 d7       	rcall	.+3628   	; 0x1314 <USB_Host_SetDeviceConfiguration>
     4e8:	23 c0       	rjmp	.+70     	; 0x530 <EVENT_USB_Host_DeviceEnumerationComplete+0x170>
		return;
	}

	printf_P(PSTR("Device Vendor ID: 0x%08lX\r\n"), VendorID);
     4ea:	00 d0       	rcall	.+0      	; 0x4ec <EVENT_USB_Host_DeviceEnumerationComplete+0x12c>
     4ec:	00 d0       	rcall	.+0      	; 0x4ee <EVENT_USB_Host_DeviceEnumerationComplete+0x12e>
     4ee:	00 d0       	rcall	.+0      	; 0x4f0 <EVENT_USB_Host_DeviceEnumerationComplete+0x130>
     4f0:	88 e3       	ldi	r24, 0x38	; 56
     4f2:	91 e0       	ldi	r25, 0x01	; 1
     4f4:	ed b7       	in	r30, 0x3d	; 61
     4f6:	fe b7       	in	r31, 0x3e	; 62
     4f8:	92 83       	std	Z+2, r25	; 0x02
     4fa:	81 83       	std	Z+1, r24	; 0x01
     4fc:	8f 81       	ldd	r24, Y+7	; 0x07
     4fe:	98 85       	ldd	r25, Y+8	; 0x08
     500:	a9 85       	ldd	r26, Y+9	; 0x09
     502:	ba 85       	ldd	r27, Y+10	; 0x0a
     504:	83 83       	std	Z+3, r24	; 0x03
     506:	94 83       	std	Z+4, r25	; 0x04
     508:	a5 83       	std	Z+5, r26	; 0x05
     50a:	b6 83       	std	Z+6, r27	; 0x06
     50c:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <printf_P>

	puts_P(PSTR("RNDIS Device Enumerated.\r\n"));
     510:	8d b7       	in	r24, 0x3d	; 61
     512:	9e b7       	in	r25, 0x3e	; 62
     514:	06 96       	adiw	r24, 0x06	; 6
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	f8 94       	cli
     51a:	9e bf       	out	0x3e, r25	; 62
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	8d bf       	out	0x3d, r24	; 61
     520:	8d e1       	ldi	r24, 0x1D	; 29
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <puts_P>
     528:	8b b1       	in	r24, 0x0b	; 11
     52a:	8f 70       	andi	r24, 0x0F	; 15
     52c:	80 66       	ori	r24, 0x60	; 96
     52e:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     530:	c6 5f       	subi	r28, 0xF6	; 246
     532:	dd 4f       	sbci	r29, 0xFD	; 253
     534:	0f b6       	in	r0, 0x3f	; 63
     536:	f8 94       	cli
     538:	de bf       	out	0x3e, r29	; 62
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	cd bf       	out	0x3d, r28	; 61
     53e:	cf 91       	pop	r28
     540:	df 91       	pop	r29
     542:	1f 91       	pop	r17
     544:	0f 91       	pop	r16
     546:	08 95       	ret

00000548 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     548:	84 b7       	in	r24, 0x34	; 52
     54a:	87 7f       	andi	r24, 0xF7	; 247
     54c:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     54e:	28 e1       	ldi	r18, 0x18	; 24
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	20 93 60 00 	sts	0x0060, r18
     558:	10 92 60 00 	sts	0x0060, r1
     55c:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	80 e8       	ldi	r24, 0x80	; 128
     562:	0f b6       	in	r0, 0x3f	; 63
     564:	f8 94       	cli
     566:	80 93 61 00 	sts	0x0061, r24
     56a:	90 93 61 00 	sts	0x0061, r25
     56e:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     570:	83 e3       	ldi	r24, 0x33	; 51
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	90 93 cd 00 	sts	0x00CD, r25
     578:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     57c:	86 e0       	ldi	r24, 0x06	; 6
     57e:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     582:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     586:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     58a:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     58c:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     58e:	8a b1       	in	r24, 0x0a	; 10
     590:	80 6f       	ori	r24, 0xF0	; 240
     592:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     594:	8b b1       	in	r24, 0x0b	; 11
     596:	8f 70       	andi	r24, 0x0F	; 15
     598:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     59a:	76 d3       	rcall	.+1772   	; 0xc88 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     59c:	e2 e4       	ldi	r30, 0x42	; 66
     59e:	f5 e0       	ldi	r31, 0x05	; 5
     5a0:	f0 93 51 05 	sts	0x0551, r31
     5a4:	e0 93 50 05 	sts	0x0550, r30
					stdout = Stream;
     5a8:	f0 93 53 05 	sts	0x0553, r31
     5ac:	e0 93 52 05 	sts	0x0552, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     5b0:	8e e0       	ldi	r24, 0x0E	; 14
     5b2:	df 01       	movw	r26, r30
     5b4:	1d 92       	st	X+, r1
     5b6:	8a 95       	dec	r24
     5b8:	e9 f7       	brne	.-6      	; 0x5b4 <SetupHardware+0x6c>
     5ba:	83 e0       	ldi	r24, 0x03	; 3
     5bc:	80 93 45 05 	sts	0x0545, r24
     5c0:	89 e5       	ldi	r24, 0x59	; 89
     5c2:	9d e0       	ldi	r25, 0x0D	; 13
     5c4:	90 93 4b 05 	sts	0x054B, r25
     5c8:	80 93 4a 05 	sts	0x054A, r24
     5cc:	83 e6       	ldi	r24, 0x63	; 99
     5ce:	9d e0       	ldi	r25, 0x0D	; 13
     5d0:	90 93 4d 05 	sts	0x054D, r25
     5d4:	80 93 4c 05 	sts	0x054C, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     5d8:	08 95       	ret

000005da <RNDISHost_Task>:

/** Task to manage an enumerated USB RNDIS device once connected, to display device
 *  received data packets.
 */
void RNDISHost_Task(void)
{
     5da:	ef 92       	push	r14
     5dc:	ff 92       	push	r15
     5de:	0f 93       	push	r16
     5e0:	1f 93       	push	r17
     5e2:	df 93       	push	r29
     5e4:	cf 93       	push	r28
     5e6:	00 d0       	rcall	.+0      	; 0x5e8 <RNDISHost_Task+0xe>
     5e8:	cd b7       	in	r28, 0x3d	; 61
     5ea:	de b7       	in	r29, 0x3e	; 62
	if (USB_HostState != HOST_STATE_Configured)
     5ec:	80 91 41 05 	lds	r24, 0x0541
     5f0:	8b 30       	cpi	r24, 0x0B	; 11
     5f2:	09 f0       	breq	.+2      	; 0x5f6 <RNDISHost_Task+0x1c>
     5f4:	58 c0       	rjmp	.+176    	; 0x6a6 <RNDISHost_Task+0xcc>
	  return;

	if (RNDIS_Host_IsPacketReceived(&Ethernet_RNDIS_Interface))
     5f6:	88 e0       	ldi	r24, 0x08	; 8
     5f8:	91 e0       	ldi	r25, 0x01	; 1
     5fa:	e2 d6       	rcall	.+3524   	; 0x13c0 <RNDIS_Host_IsPacketReceived>
     5fc:	88 23       	and	r24, r24
     5fe:	09 f4       	brne	.+2      	; 0x602 <RNDISHost_Task+0x28>
     600:	52 c0       	rjmp	.+164    	; 0x6a6 <RNDISHost_Task+0xcc>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     602:	8b b1       	in	r24, 0x0b	; 11
     604:	8f 70       	andi	r24, 0x0F	; 15
     606:	80 62       	ori	r24, 0x20	; 32
     608:	8b b9       	out	0x0b, r24	; 11
	{
		LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

		uint16_t PacketLength;
		RNDIS_Host_ReadPacket(&Ethernet_RNDIS_Interface, &PacketBuffer, &PacketLength);
     60a:	88 e0       	ldi	r24, 0x08	; 8
     60c:	91 e0       	ldi	r25, 0x01	; 1
     60e:	64 e3       	ldi	r22, 0x34	; 52
     610:	71 e0       	ldi	r23, 0x01	; 1
     612:	ae 01       	movw	r20, r28
     614:	4f 5f       	subi	r20, 0xFF	; 255
     616:	5f 4f       	sbci	r21, 0xFF	; 255
     618:	ef d6       	rcall	.+3550   	; 0x13f8 <RNDIS_Host_ReadPacket>

		printf_P(PSTR("***PACKET (Size %d)***\r\n"), PacketLength);
     61a:	00 d0       	rcall	.+0      	; 0x61c <RNDISHost_Task+0x42>
     61c:	00 d0       	rcall	.+0      	; 0x61e <RNDISHost_Task+0x44>
     61e:	8d e8       	ldi	r24, 0x8D	; 141
     620:	92 e0       	ldi	r25, 0x02	; 2
     622:	ed b7       	in	r30, 0x3d	; 61
     624:	fe b7       	in	r31, 0x3e	; 62
     626:	92 83       	std	Z+2, r25	; 0x02
     628:	81 83       	std	Z+1, r24	; 0x01
     62a:	89 81       	ldd	r24, Y+1	; 0x01
     62c:	9a 81       	ldd	r25, Y+2	; 0x02
     62e:	94 83       	std	Z+4, r25	; 0x04
     630:	83 83       	std	Z+3, r24	; 0x03
     632:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <printf_P>
     636:	00 e0       	ldi	r16, 0x00	; 0
     638:	10 e0       	ldi	r17, 0x00	; 0
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0

		for (uint16_t i = 0; i < PacketLength; i++)
		  printf("0x%02x ", PacketBuffer[i]);
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	e8 2e       	mov	r14, r24
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	f8 2e       	mov	r15, r24
     64a:	19 c0       	rjmp	.+50     	; 0x67e <RNDISHost_Task+0xa4>
     64c:	00 d0       	rcall	.+0      	; 0x64e <RNDISHost_Task+0x74>
     64e:	00 d0       	rcall	.+0      	; 0x650 <RNDISHost_Task+0x76>
     650:	ed b7       	in	r30, 0x3d	; 61
     652:	fe b7       	in	r31, 0x3e	; 62
     654:	f2 82       	std	Z+2, r15	; 0x02
     656:	e1 82       	std	Z+1, r14	; 0x01
     658:	f8 01       	movw	r30, r16
     65a:	ec 5c       	subi	r30, 0xCC	; 204
     65c:	fe 4f       	sbci	r31, 0xFE	; 254
     65e:	80 81       	ld	r24, Z
     660:	99 27       	eor	r25, r25
     662:	87 fd       	sbrc	r24, 7
     664:	90 95       	com	r25
     666:	ed b7       	in	r30, 0x3d	; 61
     668:	fe b7       	in	r31, 0x3e	; 62
     66a:	94 83       	std	Z+4, r25	; 0x04
     66c:	83 83       	std	Z+3, r24	; 0x03
     66e:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <printf>
		uint16_t PacketLength;
		RNDIS_Host_ReadPacket(&Ethernet_RNDIS_Interface, &PacketBuffer, &PacketLength);

		printf_P(PSTR("***PACKET (Size %d)***\r\n"), PacketLength);

		for (uint16_t i = 0; i < PacketLength; i++)
     672:	0f 5f       	subi	r16, 0xFF	; 255
     674:	1f 4f       	sbci	r17, 0xFF	; 255
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
     67e:	89 81       	ldd	r24, Y+1	; 0x01
     680:	9a 81       	ldd	r25, Y+2	; 0x02
     682:	08 17       	cp	r16, r24
     684:	19 07       	cpc	r17, r25
     686:	10 f3       	brcs	.-60     	; 0x64c <RNDISHost_Task+0x72>
		  printf("0x%02x ", PacketBuffer[i]);

		printf_P(PSTR("\r\n\r\n"));
     688:	00 d0       	rcall	.+0      	; 0x68a <RNDISHost_Task+0xb0>
     68a:	88 e8       	ldi	r24, 0x88	; 136
     68c:	92 e0       	ldi	r25, 0x02	; 2
     68e:	ed b7       	in	r30, 0x3d	; 61
     690:	fe b7       	in	r31, 0x3e	; 62
     692:	92 83       	std	Z+2, r25	; 0x02
     694:	81 83       	std	Z+1, r24	; 0x01
     696:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <printf_P>
     69a:	8b b1       	in	r24, 0x0b	; 11
     69c:	8f 70       	andi	r24, 0x0F	; 15
     69e:	80 66       	ori	r24, 0x60	; 96
     6a0:	8b b9       	out	0x0b, r24	; 11
     6a2:	0f 90       	pop	r0
     6a4:	0f 90       	pop	r0

		LEDs_SetAllLEDs(LEDMASK_USB_READY);
	}
}
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	cf 91       	pop	r28
     6ac:	df 91       	pop	r29
     6ae:	1f 91       	pop	r17
     6b0:	0f 91       	pop	r16
     6b2:	ff 90       	pop	r15
     6b4:	ef 90       	pop	r14
     6b6:	08 95       	ret

000006b8 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     6b8:	47 df       	rcall	.-370    	; 0x548 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "RNDIS Host Demo running.\r\n" ESC_FG_WHITE));
     6ba:	86 ea       	ldi	r24, 0xA6	; 166
     6bc:	92 e0       	ldi	r25, 0x02	; 2
     6be:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <puts_P>
     6c2:	8b b1       	in	r24, 0x0b	; 11
     6c4:	8f 70       	andi	r24, 0x0F	; 15
     6c6:	80 61       	ori	r24, 0x10	; 16
     6c8:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     6ca:	78 94       	sei

	for (;;)
	{
		RNDISHost_Task();
     6cc:	86 df       	rcall	.-244    	; 0x5da <RNDISHost_Task>

		RNDIS_Host_USBTask(&Ethernet_RNDIS_Interface);
		USB_USBTask();
     6ce:	47 d6       	rcall	.+3214   	; 0x135e <USB_USBTask>
     6d0:	fd cf       	rjmp	.-6      	; 0x6cc <main+0x14>

000006d2 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     6d2:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     6d4:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     6d8:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     6dc:	80 91 a0 00 	lds	r24, 0x00A0
     6e0:	8f 7d       	andi	r24, 0xDF	; 223
     6e2:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6e6:	80 91 9f 00 	lds	r24, 0x009F
     6ea:	8f 7d       	andi	r24, 0xDF	; 223
     6ec:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6f0:	80 91 9e 00 	lds	r24, 0x009E
     6f4:	81 60       	ori	r24, 0x01	; 1
     6f6:	80 93 9e 00 	sts	0x009E, r24
     6fa:	28 c0       	rjmp	.+80     	; 0x74c <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     6fc:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     700:	85 ff       	sbrs	r24, 5
     702:	06 c0       	rjmp	.+12     	; 0x710 <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     704:	80 91 9f 00 	lds	r24, 0x009F
     708:	8f 7d       	andi	r24, 0xDF	; 223
     70a:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     70e:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     710:	80 91 41 05 	lds	r24, 0x0541
     714:	81 30       	cpi	r24, 0x01	; 1
     716:	11 f4       	brne	.+4      	; 0x71c <USB_Host_WaitMS+0x4a>
     718:	91 e0       	ldi	r25, 0x01	; 1
     71a:	1a c0       	rjmp	.+52     	; 0x750 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     71c:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     720:	84 ff       	sbrs	r24, 4
     722:	09 c0       	rjmp	.+18     	; 0x736 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     724:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     728:	80 91 a6 00 	lds	r24, 0x00A6
     72c:	8f 7e       	andi	r24, 0xEF	; 239
     72e:	80 93 a6 00 	sts	0x00A6, r24
     732:	92 e0       	ldi	r25, 0x02	; 2
     734:	0d c0       	rjmp	.+26     	; 0x750 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     736:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     73a:	81 ff       	sbrs	r24, 1
     73c:	07 c0       	rjmp	.+14     	; 0x74c <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     73e:	80 91 a6 00 	lds	r24, 0x00A6
     742:	8d 7f       	andi	r24, 0xFD	; 253
     744:	80 93 a6 00 	sts	0x00A6, r24
     748:	93 e0       	ldi	r25, 0x03	; 3
     74a:	02 c0       	rjmp	.+4      	; 0x750 <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     74c:	99 23       	and	r25, r25
     74e:	b1 f6       	brne	.-84     	; 0x6fc <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     750:	20 fd       	sbrc	r18, 0
     752:	05 c0       	rjmp	.+10     	; 0x75e <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     754:	80 91 9e 00 	lds	r24, 0x009E
     758:	8e 7f       	andi	r24, 0xFE	; 254
     75a:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     75e:	35 ff       	sbrs	r19, 5
     760:	05 c0       	rjmp	.+10     	; 0x76c <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     762:	80 91 a0 00 	lds	r24, 0x00A0
     766:	80 62       	ori	r24, 0x20	; 32
     768:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     76c:	89 2f       	mov	r24, r25
     76e:	08 95       	ret

00000770 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     770:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     774:	80 91 a0 00 	lds	r24, 0x00A0
     778:	8d 7f       	andi	r24, 0xFD	; 253
     77a:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     77e:	80 91 9e 00 	lds	r24, 0x009E
     782:	82 60       	ori	r24, 0x02	; 2
     784:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     788:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     78c:	81 fd       	sbrc	r24, 1
     78e:	fc cf       	rjmp	.-8      	; 0x788 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     790:	80 91 9e 00 	lds	r24, 0x009E
     794:	81 60       	ori	r24, 0x01	; 1
     796:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     79a:	10 92 37 05 	sts	0x0537, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     79e:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     7a2:	80 91 a0 00 	lds	r24, 0x00A0
     7a6:	8f 7d       	andi	r24, 0xDF	; 223
     7a8:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     7ac:	80 91 9f 00 	lds	r24, 0x009F
     7b0:	8f 7d       	andi	r24, 0xDF	; 223
     7b2:	80 93 9f 00 	sts	0x009F, r24
     7b6:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7b8:	40 ed       	ldi	r20, 0xD0	; 208
     7ba:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     7bc:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     7c0:	85 ff       	sbrs	r24, 5
     7c2:	0b c0       	rjmp	.+22     	; 0x7da <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     7c4:	80 91 9f 00 	lds	r24, 0x009F
     7c8:	8f 7d       	andi	r24, 0xDF	; 223
     7ca:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     7ce:	80 91 9f 00 	lds	r24, 0x009F
     7d2:	8d 7f       	andi	r24, 0xFD	; 253
     7d4:	80 93 9f 00 	sts	0x009F, r24
     7d8:	05 c0       	rjmp	.+10     	; 0x7e4 <USB_Host_ResetDevice+0x74>
     7da:	ca 01       	movw	r24, r20
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	f1 f7       	brne	.-4      	; 0x7dc <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     7e0:	21 50       	subi	r18, 0x01	; 1
     7e2:	61 f7       	brne	.-40     	; 0x7bc <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     7e4:	35 ff       	sbrs	r19, 5
     7e6:	05 c0       	rjmp	.+10     	; 0x7f2 <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     7e8:	80 91 a0 00 	lds	r24, 0x00A0
     7ec:	80 62       	ori	r24, 0x20	; 32
     7ee:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     7f2:	60 fd       	sbrc	r22, 0
     7f4:	05 c0       	rjmp	.+10     	; 0x800 <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     7f6:	80 91 9e 00 	lds	r24, 0x009E
     7fa:	8e 7f       	andi	r24, 0xFE	; 254
     7fc:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     800:	80 91 a0 00 	lds	r24, 0x00A0
     804:	82 60       	ori	r24, 0x02	; 2
     806:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     80a:	08 95       	ret

0000080c <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     80c:	ef 92       	push	r14
     80e:	0f 93       	push	r16
     810:	1f 93       	push	r17
     812:	df 93       	push	r29
     814:	cf 93       	push	r28
     816:	cd b7       	in	r28, 0x3d	; 61
     818:	de b7       	in	r29, 0x3e	; 62
     81a:	28 97       	sbiw	r28, 0x08	; 8
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	f8 94       	cli
     820:	de bf       	out	0x3e, r29	; 62
     822:	0f be       	out	0x3f, r0	; 63
     824:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     826:	80 91 41 05 	lds	r24, 0x0541
     82a:	85 30       	cpi	r24, 0x05	; 5
     82c:	09 f4       	brne	.+2      	; 0x830 <USB_Host_ProcessNextHostState+0x24>
     82e:	94 c0       	rjmp	.+296    	; 0x958 <USB_Host_ProcessNextHostState+0x14c>
     830:	86 30       	cpi	r24, 0x06	; 6
     832:	68 f4       	brcc	.+26     	; 0x84e <USB_Host_ProcessNextHostState+0x42>
     834:	82 30       	cpi	r24, 0x02	; 2
     836:	b9 f1       	breq	.+110    	; 0x8a6 <USB_Host_ProcessNextHostState+0x9a>
     838:	83 30       	cpi	r24, 0x03	; 3
     83a:	18 f4       	brcc	.+6      	; 0x842 <USB_Host_ProcessNextHostState+0x36>
     83c:	88 23       	and	r24, r24
     83e:	a1 f0       	breq	.+40     	; 0x868 <USB_Host_ProcessNextHostState+0x5c>
     840:	04 c1       	rjmp	.+520    	; 0xa4a <USB_Host_ProcessNextHostState+0x23e>
     842:	83 30       	cpi	r24, 0x03	; 3
     844:	d1 f1       	breq	.+116    	; 0x8ba <USB_Host_ProcessNextHostState+0xae>
     846:	84 30       	cpi	r24, 0x04	; 4
     848:	09 f0       	breq	.+2      	; 0x84c <USB_Host_ProcessNextHostState+0x40>
     84a:	ff c0       	rjmp	.+510    	; 0xa4a <USB_Host_ProcessNextHostState+0x23e>
     84c:	5d c0       	rjmp	.+186    	; 0x908 <USB_Host_ProcessNextHostState+0xfc>
     84e:	87 30       	cpi	r24, 0x07	; 7
     850:	09 f4       	brne	.+2      	; 0x854 <USB_Host_ProcessNextHostState+0x48>
     852:	9b c0       	rjmp	.+310    	; 0x98a <USB_Host_ProcessNextHostState+0x17e>
     854:	87 30       	cpi	r24, 0x07	; 7
     856:	08 f4       	brcc	.+2      	; 0x85a <USB_Host_ProcessNextHostState+0x4e>
     858:	8a c0       	rjmp	.+276    	; 0x96e <USB_Host_ProcessNextHostState+0x162>
     85a:	88 30       	cpi	r24, 0x08	; 8
     85c:	09 f4       	brne	.+2      	; 0x860 <USB_Host_ProcessNextHostState+0x54>
     85e:	b3 c0       	rjmp	.+358    	; 0x9c6 <USB_Host_ProcessNextHostState+0x1ba>
     860:	89 30       	cpi	r24, 0x09	; 9
     862:	09 f0       	breq	.+2      	; 0x866 <USB_Host_ProcessNextHostState+0x5a>
     864:	f2 c0       	rjmp	.+484    	; 0xa4a <USB_Host_ProcessNextHostState+0x23e>
     866:	d7 c0       	rjmp	.+430    	; 0xa16 <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     868:	00 91 35 05 	lds	r16, 0x0535
     86c:	10 91 36 05 	lds	r17, 0x0536
     870:	01 15       	cp	r16, r1
     872:	11 05       	cpc	r17, r1
     874:	09 f4       	brne	.+2      	; 0x878 <USB_Host_ProcessNextHostState+0x6c>
     876:	e9 c0       	rjmp	.+466    	; 0xa4a <USB_Host_ProcessNextHostState+0x23e>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	2b df       	rcall	.-426    	; 0x6d2 <USB_Host_WaitMS>
     87c:	68 2f       	mov	r22, r24
     87e:	88 23       	and	r24, r24
     880:	31 f0       	breq	.+12     	; 0x88e <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
     882:	80 91 34 05 	lds	r24, 0x0534
     886:	80 93 41 05 	sts	0x0541, r24
     88a:	91 e0       	ldi	r25, 0x01	; 1
     88c:	da c0       	rjmp	.+436    	; 0xa42 <USB_Host_ProcessNextHostState+0x236>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     88e:	c8 01       	movw	r24, r16
     890:	01 97       	sbiw	r24, 0x01	; 1
     892:	90 93 36 05 	sts	0x0536, r25
     896:	80 93 35 05 	sts	0x0535, r24
     89a:	89 2b       	or	r24, r25
     89c:	09 f0       	breq	.+2      	; 0x8a0 <USB_Host_ProcessNextHostState+0x94>
     89e:	d5 c0       	rjmp	.+426    	; 0xa4a <USB_Host_ProcessNextHostState+0x23e>
				  USB_HostState = PostWaitState;
     8a0:	80 91 34 05 	lds	r24, 0x0534
     8a4:	07 c0       	rjmp	.+14     	; 0x8b4 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     8a6:	88 ee       	ldi	r24, 0xE8	; 232
     8a8:	93 e0       	ldi	r25, 0x03	; 3
     8aa:	90 93 36 05 	sts	0x0536, r25
     8ae:	80 93 35 05 	sts	0x0535, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	80 93 41 05 	sts	0x0541, r24
     8b8:	c8 c0       	rjmp	.+400    	; 0xa4a <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     8ba:	80 91 35 05 	lds	r24, 0x0535
     8be:	90 91 36 05 	lds	r25, 0x0536
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	90 93 36 05 	sts	0x0536, r25
     8c8:	80 93 35 05 	sts	0x0535, r24
     8cc:	01 96       	adiw	r24, 0x01	; 1
     8ce:	29 f0       	breq	.+10     	; 0x8da <USB_Host_ProcessNextHostState+0xce>
     8d0:	80 ed       	ldi	r24, 0xD0	; 208
     8d2:	97 e0       	ldi	r25, 0x07	; 7
     8d4:	01 97       	sbiw	r24, 0x01	; 1
     8d6:	f1 f7       	brne	.-4      	; 0x8d4 <USB_Host_ProcessNextHostState+0xc8>
     8d8:	b8 c0       	rjmp	.+368    	; 0xa4a <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     8da:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     8dc:	80 91 d8 00 	lds	r24, 0x00D8
     8e0:	80 61       	ori	r24, 0x10	; 16
     8e2:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     8e6:	80 91 dd 00 	lds	r24, 0x00DD
     8ea:	8b 7f       	andi	r24, 0xFB	; 251
     8ec:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     8f0:	80 91 d7 00 	lds	r24, 0x00D7
     8f4:	80 61       	ori	r24, 0x10	; 16
     8f6:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     8fa:	80 91 dd 00 	lds	r24, 0x00DD
     8fe:	82 60       	ori	r24, 0x02	; 2
     900:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     904:	84 e0       	ldi	r24, 0x04	; 4
     906:	d6 cf       	rjmp	.-84     	; 0x8b4 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     908:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     90c:	80 ff       	sbrs	r24, 0
     90e:	9d c0       	rjmp	.+314    	; 0xa4a <USB_Host_ProcessNextHostState+0x23e>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     910:	80 91 9f 00 	lds	r24, 0x009F
     914:	8e 7f       	andi	r24, 0xFE	; 254
     916:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     91a:	80 91 9f 00 	lds	r24, 0x009F
     91e:	8d 7f       	andi	r24, 0xFD	; 253
     920:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     924:	80 91 df 00 	lds	r24, 0x00DF
     928:	8d 7f       	andi	r24, 0xFD	; 253
     92a:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     92e:	80 91 de 00 	lds	r24, 0x00DE
     932:	82 60       	ori	r24, 0x02	; 2
     934:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     938:	80 91 9e 00 	lds	r24, 0x009E
     93c:	81 60       	ori	r24, 0x01	; 1
     93e:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     942:	ed d0       	rcall	.+474    	; 0xb1e <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     944:	10 92 41 05 	sts	0x0541, r1
     948:	84 e6       	ldi	r24, 0x64	; 100
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	90 93 36 05 	sts	0x0536, r25
     950:	80 93 35 05 	sts	0x0535, r24
     954:	85 e0       	ldi	r24, 0x05	; 5
     956:	5c c0       	rjmp	.+184    	; 0xa10 <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     958:	0b df       	rcall	.-490    	; 0x770 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     95a:	10 92 41 05 	sts	0x0541, r1
     95e:	88 ec       	ldi	r24, 0xC8	; 200
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	90 93 36 05 	sts	0x0536, r25
     966:	80 93 35 05 	sts	0x0535, r24
     96a:	86 e0       	ldi	r24, 0x06	; 6
     96c:	51 c0       	rjmp	.+162    	; 0xa10 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	60 e0       	ldi	r22, 0x00	; 0
     972:	40 e0       	ldi	r20, 0x00	; 0
     974:	20 e0       	ldi	r18, 0x00	; 0
     976:	00 e4       	ldi	r16, 0x40	; 64
     978:	10 e0       	ldi	r17, 0x00	; 0
     97a:	ee 24       	eor	r14, r14
     97c:	72 d0       	rcall	.+228    	; 0xa62 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     97e:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     982:	87 ff       	sbrs	r24, 7
     984:	5c c0       	rjmp	.+184    	; 0xa3e <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     986:	87 e0       	ldi	r24, 0x07	; 7
     988:	95 cf       	rjmp	.-214    	; 0x8b4 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     98a:	a9 e3       	ldi	r26, 0x39	; 57
     98c:	b5 e0       	ldi	r27, 0x05	; 5
     98e:	ea e2       	ldi	r30, 0x2A	; 42
     990:	f1 e0       	ldi	r31, 0x01	; 1
     992:	88 e0       	ldi	r24, 0x08	; 8
     994:	01 90       	ld	r0, Z+
     996:	0d 92       	st	X+, r0
     998:	81 50       	subi	r24, 0x01	; 1
     99a:	e1 f7       	brne	.-8      	; 0x994 <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     99c:	ce 01       	movw	r24, r28
     99e:	01 96       	adiw	r24, 0x01	; 1
     9a0:	9b d3       	rcall	.+1846   	; 0x10d8 <USB_Host_SendControlRequest>
     9a2:	68 2f       	mov	r22, r24
     9a4:	88 23       	and	r24, r24
     9a6:	09 f0       	breq	.+2      	; 0x9aa <USB_Host_ProcessNextHostState+0x19e>
     9a8:	48 c0       	rjmp	.+144    	; 0xa3a <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     9aa:	88 85       	ldd	r24, Y+8	; 0x08
     9ac:	80 93 32 01 	sts	0x0132, r24

			USB_Host_ResetDevice();
     9b0:	df de       	rcall	.-578    	; 0x770 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     9b2:	10 92 41 05 	sts	0x0541, r1
     9b6:	88 ec       	ldi	r24, 0xC8	; 200
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	90 93 36 05 	sts	0x0536, r25
     9be:	80 93 35 05 	sts	0x0535, r24
     9c2:	88 e0       	ldi	r24, 0x08	; 8
     9c4:	25 c0       	rjmp	.+74     	; 0xa10 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     9c6:	00 91 32 01 	lds	r16, 0x0132
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	40 e0       	ldi	r20, 0x00	; 0
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	10 e0       	ldi	r17, 0x00	; 0
     9d4:	ee 24       	eor	r14, r14
     9d6:	45 d0       	rcall	.+138    	; 0xa62 <Pipe_ConfigurePipe>
     9d8:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     9dc:	87 ff       	sbrs	r24, 7
     9de:	2f c0       	rjmp	.+94     	; 0xa3e <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     9e0:	a9 e3       	ldi	r26, 0x39	; 57
     9e2:	b5 e0       	ldi	r27, 0x05	; 5
     9e4:	e2 e2       	ldi	r30, 0x22	; 34
     9e6:	f1 e0       	ldi	r31, 0x01	; 1
     9e8:	88 e0       	ldi	r24, 0x08	; 8
     9ea:	01 90       	ld	r0, Z+
     9ec:	0d 92       	st	X+, r0
     9ee:	81 50       	subi	r24, 0x01	; 1
     9f0:	e1 f7       	brne	.-8      	; 0x9ea <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	70 d3       	rcall	.+1760   	; 0x10d8 <USB_Host_SendControlRequest>
     9f8:	68 2f       	mov	r22, r24
     9fa:	88 23       	and	r24, r24
     9fc:	f1 f4       	brne	.+60     	; 0xa3a <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     9fe:	10 92 41 05 	sts	0x0541, r1
     a02:	84 e6       	ldi	r24, 0x64	; 100
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	90 93 36 05 	sts	0x0536, r25
     a0a:	80 93 35 05 	sts	0x0535, r24
     a0e:	89 e0       	ldi	r24, 0x09	; 9
     a10:	80 93 34 05 	sts	0x0534, r24
     a14:	1a c0       	rjmp	.+52     	; 0xa4a <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     a1c:	8a e0       	ldi	r24, 0x0A	; 10
     a1e:	80 93 41 05 	sts	0x0541, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     a22:	ce dc       	rcall	.-1636   	; 0x3c0 <EVENT_USB_Host_DeviceEnumerationComplete>
     a24:	12 c0       	rjmp	.+36     	; 0xa4a <USB_Host_ProcessNextHostState+0x23e>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     a26:	89 2f       	mov	r24, r25
     a28:	70 dc       	rcall	.-1824   	; 0x30a <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     a2a:	80 91 dd 00 	lds	r24, 0x00DD
     a2e:	81 60       	ori	r24, 0x01	; 1
     a30:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     a34:	b3 dc       	rcall	.-1690   	; 0x39c <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     a36:	d8 d0       	rcall	.+432    	; 0xbe8 <USB_ResetInterface>
     a38:	08 c0       	rjmp	.+16     	; 0xa4a <USB_Host_ProcessNextHostState+0x23e>
	}
}
     a3a:	93 e0       	ldi	r25, 0x03	; 3
     a3c:	02 c0       	rjmp	.+4      	; 0xa42 <USB_Host_ProcessNextHostState+0x236>
     a3e:	94 e0       	ldi	r25, 0x04	; 4
     a40:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     a42:	80 91 41 05 	lds	r24, 0x0541
     a46:	81 30       	cpi	r24, 0x01	; 1
     a48:	71 f7       	brne	.-36     	; 0xa26 <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     a4a:	28 96       	adiw	r28, 0x08	; 8
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	f8 94       	cli
     a50:	de bf       	out	0x3e, r29	; 62
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	cd bf       	out	0x3d, r28	; 61
     a56:	cf 91       	pop	r28
     a58:	df 91       	pop	r29
     a5a:	1f 91       	pop	r17
     a5c:	0f 91       	pop	r16
     a5e:	ef 90       	pop	r14
     a60:	08 95       	ret

00000a62 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     a62:	ef 92       	push	r14
     a64:	0f 93       	push	r16
     a66:	1f 93       	push	r17
     a68:	e8 2f       	mov	r30, r24
     a6a:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     a6c:	62 95       	swap	r22
     a6e:	66 0f       	add	r22, r22
     a70:	66 0f       	add	r22, r22
     a72:	60 7c       	andi	r22, 0xC0	; 192
     a74:	64 2b       	or	r22, r20
     a76:	2f 70       	andi	r18, 0x0F	; 15
     a78:	62 2b       	or	r22, r18
     a7a:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     a7c:	72 60       	ori	r23, 0x02	; 2
     a7e:	45 c0       	rjmp	.+138    	; 0xb0a <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a80:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     a84:	3e 17       	cp	r19, r30
     a86:	a1 f4       	brne	.+40     	; 0xab0 <Pipe_ConfigurePipe+0x4e>
     a88:	88 e0       	ldi	r24, 0x08	; 8
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	20 e0       	ldi	r18, 0x00	; 0
     a8e:	03 c0       	rjmp	.+6      	; 0xa96 <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     a90:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     a92:	88 0f       	add	r24, r24
     a94:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     a96:	80 17       	cp	r24, r16
     a98:	91 07       	cpc	r25, r17
     a9a:	10 f4       	brcc	.+4      	; 0xaa0 <Pipe_ConfigurePipe+0x3e>
     a9c:	25 30       	cpi	r18, 0x05	; 5
     a9e:	c1 f7       	brne	.-16     	; 0xa90 <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     aa0:	92 2f       	mov	r25, r18
     aa2:	92 95       	swap	r25
     aa4:	90 7f       	andi	r25, 0xF0	; 240
     aa6:	97 2b       	or	r25, r23
     aa8:	56 2f       	mov	r21, r22
     aaa:	40 e0       	ldi	r20, 0x00	; 0
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	08 c0       	rjmp	.+16     	; 0xac0 <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     ab0:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     ab4:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     ab8:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
     abc:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     ac0:	91 ff       	sbrs	r25, 1
     ac2:	22 c0       	rjmp	.+68     	; 0xb08 <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     ac4:	80 91 a9 00 	lds	r24, 0x00A9
     ac8:	8e 7f       	andi	r24, 0xFE	; 254
     aca:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     ace:	80 91 ab 00 	lds	r24, 0x00AB
     ad2:	8d 7f       	andi	r24, 0xFD	; 253
     ad4:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     ad8:	80 91 a9 00 	lds	r24, 0x00A9
     adc:	81 60       	ori	r24, 0x01	; 1
     ade:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     ae2:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
     ae6:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
     aea:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
     aee:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     af2:	80 91 a9 00 	lds	r24, 0x00A9
     af6:	80 62       	ori	r24, 0x20	; 32
     af8:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     afc:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     b00:	87 fd       	sbrc	r24, 7
     b02:	02 c0       	rjmp	.+4      	; 0xb08 <Pipe_ConfigurePipe+0xa6>
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	07 c0       	rjmp	.+14     	; 0xb16 <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     b08:	3f 5f       	subi	r19, 0xFF	; 255
     b0a:	37 30       	cpi	r19, 0x07	; 7
     b0c:	08 f4       	brcc	.+2      	; 0xb10 <Pipe_ConfigurePipe+0xae>
     b0e:	b8 cf       	rjmp	.-144    	; 0xa80 <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     b10:	e0 93 a7 00 	sts	0x00A7, r30
     b14:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
     b16:	1f 91       	pop	r17
     b18:	0f 91       	pop	r16
     b1a:	ef 90       	pop	r14
     b1c:	08 95       	ret

00000b1e <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     b1e:	10 92 f8 00 	sts	0x00F8, r1
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     b28:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     b2c:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     b30:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     b34:	80 91 a9 00 	lds	r24, 0x00A9
     b38:	8e 7f       	andi	r24, 0xFE	; 254
     b3a:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b3e:	9f 5f       	subi	r25, 0xFF	; 255
     b40:	97 30       	cpi	r25, 0x07	; 7
     b42:	81 f7       	brne	.-32     	; 0xb24 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     b44:	08 95       	ret

00000b46 <Pipe_IsEndpointBound>:

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
     b46:	48 2f       	mov	r20, r24
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     b48:	30 91 a7 00 	lds	r19, 0x00A7
     b4c:	20 e0       	ldi	r18, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     b4e:	20 93 a7 00 	sts	0x00A7, r18
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     b52:	80 91 ac 00 	lds	r24, 0x00AC

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     b56:	87 ff       	sbrs	r24, 7
     b58:	10 c0       	rjmp	.+32     	; 0xb7a <Pipe_IsEndpointBound+0x34>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     b5a:	90 91 aa 00 	lds	r25, 0x00AA
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     b5e:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     b62:	80 73       	andi	r24, 0x30	; 48
     b64:	80 31       	cpi	r24, 0x10	; 16
     b66:	11 f0       	breq	.+4      	; 0xb6c <Pipe_IsEndpointBound+0x26>
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	01 c0       	rjmp	.+2      	; 0xb6e <Pipe_IsEndpointBound+0x28>
     b6c:	80 e8       	ldi	r24, 0x80	; 128
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     b6e:	9f 70       	andi	r25, 0x0F	; 15
     b70:	89 2b       	or	r24, r25
     b72:	84 17       	cp	r24, r20
     b74:	11 f4       	brne	.+4      	; 0xb7a <Pipe_IsEndpointBound+0x34>
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	08 95       	ret

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b7a:	2f 5f       	subi	r18, 0xFF	; 255
     b7c:	27 30       	cpi	r18, 0x07	; 7
     b7e:	39 f7       	brne	.-50     	; 0xb4e <Pipe_IsEndpointBound+0x8>
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     b80:	37 70       	andi	r19, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     b82:	30 93 a7 00 	sts	0x00A7, r19
     b86:	80 e0       	ldi	r24, 0x00	; 0
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     b88:	08 95       	ret

00000b8a <Pipe_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     b8a:	40 91 a2 00 	lds	r20, 0x00A2
     b8e:	50 91 a3 00 	lds	r21, 0x00A3
     b92:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     b94:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     b98:	80 73       	andi	r24, 0x30	; 48
     b9a:	80 31       	cpi	r24, 0x10	; 16
     b9c:	29 f4       	brne	.+10     	; 0xba8 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     b9e:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     ba2:	80 ff       	sbrs	r24, 0
     ba4:	05 c0       	rjmp	.+10     	; 0xbb0 <Pipe_WaitUntilReady+0x26>
     ba6:	1e c0       	rjmp	.+60     	; 0xbe4 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     ba8:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     bac:	82 fd       	sbrc	r24, 2
     bae:	1a c0       	rjmp	.+52     	; 0xbe4 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     bb0:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     bb4:	81 ff       	sbrs	r24, 1
     bb6:	02 c0       	rjmp	.+4      	; 0xbbc <Pipe_WaitUntilReady+0x32>
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     bbc:	80 91 41 05 	lds	r24, 0x0541
     bc0:	81 30       	cpi	r24, 0x01	; 1
     bc2:	11 f4       	brne	.+4      	; 0xbc8 <Pipe_WaitUntilReady+0x3e>
     bc4:	82 e0       	ldi	r24, 0x02	; 2
     bc6:	08 95       	ret
     bc8:	80 91 a2 00 	lds	r24, 0x00A2
     bcc:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     bd0:	84 17       	cp	r24, r20
     bd2:	95 07       	cpc	r25, r21
     bd4:	f9 f2       	breq	.-66     	; 0xb94 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     bd6:	22 23       	and	r18, r18
     bd8:	11 f4       	brne	.+4      	; 0xbde <Pipe_WaitUntilReady+0x54>
     bda:	83 e0       	ldi	r24, 0x03	; 3
     bdc:	08 95       	ret
     bde:	21 50       	subi	r18, 0x01	; 1
     be0:	ac 01       	movw	r20, r24
     be2:	d8 cf       	rjmp	.-80     	; 0xb94 <Pipe_WaitUntilReady+0xa>
     be4:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     be6:	08 95       	ret

00000be8 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     be8:	70 d0       	rcall	.+224    	; 0xcca <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     bea:	77 d0       	rcall	.+238    	; 0xcda <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     bec:	80 91 d8 00 	lds	r24, 0x00D8
     bf0:	8f 77       	andi	r24, 0x7F	; 127
     bf2:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     bf6:	80 91 d8 00 	lds	r24, 0x00D8
     bfa:	80 68       	ori	r24, 0x80	; 128
     bfc:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     c00:	80 91 d8 00 	lds	r24, 0x00D8
     c04:	8f 7d       	andi	r24, 0xDF	; 223
     c06:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     c0a:	80 91 d7 00 	lds	r24, 0x00D7
     c0e:	8f 77       	andi	r24, 0x7F	; 127
     c10:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     c14:	8c e0       	ldi	r24, 0x0C	; 12
     c16:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     c18:	8e e0       	ldi	r24, 0x0E	; 14
     c1a:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     c1c:	09 b4       	in	r0, 0x29	; 41
     c1e:	00 fe       	sbrs	r0, 0
     c20:	fd cf       	rjmp	.-6      	; 0xc1c <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	80 93 41 05 	sts	0x0541, r24
	USB_Host_ConfigurationNumber = 0;
     c28:	10 92 37 05 	sts	0x0537, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     c2c:	80 e4       	ldi	r24, 0x40	; 64
     c2e:	80 93 32 01 	sts	0x0132, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     c32:	80 91 d8 00 	lds	r24, 0x00D8
     c36:	80 64       	ori	r24, 0x40	; 64
     c38:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c3c:	80 91 dd 00 	lds	r24, 0x00DD
     c40:	81 60       	ori	r24, 0x01	; 1
     c42:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     c46:	80 91 dd 00 	lds	r24, 0x00DD
     c4a:	84 60       	ori	r24, 0x04	; 4
     c4c:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     c50:	80 91 d7 00 	lds	r24, 0x00D7
     c54:	8f 7e       	andi	r24, 0xEF	; 239
     c56:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     c5a:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     c5c:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     c5e:	80 91 de 00 	lds	r24, 0x00DE
     c62:	81 60       	ori	r24, 0x01	; 1
     c64:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     c68:	80 91 de 00 	lds	r24, 0x00DE
     c6c:	84 60       	ori	r24, 0x04	; 4
     c6e:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     c72:	80 91 e0 00 	lds	r24, 0x00E0
     c76:	8e 7f       	andi	r24, 0xFE	; 254
     c78:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     c7c:	80 91 d8 00 	lds	r24, 0x00D8
     c80:	80 61       	ori	r24, 0x10	; 16
     c82:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     c86:	08 95       	ret

00000c88 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     c88:	e7 ed       	ldi	r30, 0xD7	; 215
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	81 60       	ori	r24, 0x01	; 1
     c90:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	80 93 38 05 	sts	0x0538, r24

	USB_ResetInterface();
}
     c98:	a7 cf       	rjmp	.-178    	; 0xbe8 <USB_ResetInterface>

00000c9a <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     c9a:	17 d0       	rcall	.+46     	; 0xcca <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     c9c:	1e d0       	rcall	.+60     	; 0xcda <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     c9e:	e0 ee       	ldi	r30, 0xE0	; 224
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	81 60       	ori	r24, 0x01	; 1
     ca6:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     ca8:	a8 ed       	ldi	r26, 0xD8	; 216
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	8c 91       	ld	r24, X
     cae:	8f 77       	andi	r24, 0x7F	; 127
     cb0:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     cb2:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     cb4:	e7 ed       	ldi	r30, 0xD7	; 215
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	8e 7f       	andi	r24, 0xFE	; 254
     cbc:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     cbe:	8c 91       	ld	r24, X
     cc0:	8f 7e       	andi	r24, 0xEF	; 239
     cc2:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     cc4:	10 92 38 05 	sts	0x0538, r1
}
     cc8:	08 95       	ret

00000cca <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     cca:	e8 ed       	ldi	r30, 0xD8	; 216
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	8c 7f       	andi	r24, 0xFC	; 252
     cd2:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     cd4:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     cd8:	08 95       	ret

00000cda <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     cda:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     cde:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     ce2:	08 95       	ret

00000ce4 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     ce4:	1f 92       	push	r1
     ce6:	0f 92       	push	r0
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	0f 92       	push	r0
     cec:	0b b6       	in	r0, 0x3b	; 59
     cee:	0f 92       	push	r0
     cf0:	11 24       	eor	r1, r1
     cf2:	2f 93       	push	r18
     cf4:	3f 93       	push	r19
     cf6:	4f 93       	push	r20
     cf8:	5f 93       	push	r21
     cfa:	6f 93       	push	r22
     cfc:	7f 93       	push	r23
     cfe:	8f 93       	push	r24
     d00:	9f 93       	push	r25
     d02:	af 93       	push	r26
     d04:	bf 93       	push	r27
     d06:	ef 93       	push	r30
     d08:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     d0a:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     d0e:	85 ff       	sbrs	r24, 5
     d10:	0a c0       	rjmp	.+20     	; 0xd26 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     d12:	80 91 a0 00 	lds	r24, 0x00A0
     d16:	85 ff       	sbrs	r24, 5
     d18:	06 c0       	rjmp	.+12     	; 0xd26 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     d1a:	80 91 9f 00 	lds	r24, 0x009F
     d1e:	8f 7d       	andi	r24, 0xDF	; 223
     d20:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     d24:	af d1       	rcall	.+862    	; 0x1084 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     d26:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     d2a:	81 ff       	sbrs	r24, 1
     d2c:	15 c0       	rjmp	.+42     	; 0xd58 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     d2e:	80 91 a0 00 	lds	r24, 0x00A0
     d32:	81 ff       	sbrs	r24, 1
     d34:	11 c0       	rjmp	.+34     	; 0xd58 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     d36:	80 91 9f 00 	lds	r24, 0x009F
     d3a:	8d 7f       	andi	r24, 0xFD	; 253
     d3c:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     d40:	80 91 9f 00 	lds	r24, 0x009F
     d44:	8e 7f       	andi	r24, 0xFE	; 254
     d46:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     d4a:	80 91 a0 00 	lds	r24, 0x00A0
     d4e:	8d 7f       	andi	r24, 0xFD	; 253
     d50:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     d54:	23 db       	rcall	.-2490   	; 0x39c <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     d56:	48 df       	rcall	.-368    	; 0xbe8 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     d58:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     d5c:	81 ff       	sbrs	r24, 1
     d5e:	15 c0       	rjmp	.+42     	; 0xd8a <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     d60:	80 91 de 00 	lds	r24, 0x00DE
     d64:	81 ff       	sbrs	r24, 1
     d66:	11 c0       	rjmp	.+34     	; 0xd8a <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     d68:	80 91 df 00 	lds	r24, 0x00DF
     d6c:	8d 7f       	andi	r24, 0xFD	; 253
     d6e:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     d72:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d74:	80 91 dd 00 	lds	r24, 0x00DD
     d78:	81 60       	ori	r24, 0x01	; 1
     d7a:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	f0 da       	rcall	.-2592   	; 0x362 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     d82:	0c db       	rcall	.-2536   	; 0x39c <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	80 93 41 05 	sts	0x0541, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     d8a:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     d8e:	80 ff       	sbrs	r24, 0
     d90:	17 c0       	rjmp	.+46     	; 0xdc0 <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     d92:	80 91 de 00 	lds	r24, 0x00DE
     d96:	80 ff       	sbrs	r24, 0
     d98:	13 c0       	rjmp	.+38     	; 0xdc0 <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     d9a:	80 91 df 00 	lds	r24, 0x00DF
     d9e:	8e 7f       	andi	r24, 0xFE	; 254
     da0:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     da4:	80 91 de 00 	lds	r24, 0x00DE
     da8:	8e 7f       	andi	r24, 0xFE	; 254
     daa:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     dae:	ff da       	rcall	.-2562   	; 0x3ae <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     db0:	80 91 a0 00 	lds	r24, 0x00A0
     db4:	82 60       	ori	r24, 0x02	; 2
     db6:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     dba:	82 e0       	ldi	r24, 0x02	; 2
     dbc:	80 93 41 05 	sts	0x0541, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     dc0:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     dc4:	82 ff       	sbrs	r24, 2
     dc6:	0e c0       	rjmp	.+28     	; 0xde4 <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     dc8:	80 91 de 00 	lds	r24, 0x00DE
     dcc:	82 ff       	sbrs	r24, 2
     dce:	0a c0       	rjmp	.+20     	; 0xde4 <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     dd0:	80 91 df 00 	lds	r24, 0x00DF
     dd4:	8b 7f       	andi	r24, 0xFB	; 251
     dd6:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     dda:	82 e0       	ldi	r24, 0x02	; 2
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	95 da       	rcall	.-2774   	; 0x30a <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     de0:	dd da       	rcall	.-2630   	; 0x39c <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     de2:	02 df       	rcall	.-508    	; 0xbe8 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     de4:	ff 91       	pop	r31
     de6:	ef 91       	pop	r30
     de8:	bf 91       	pop	r27
     dea:	af 91       	pop	r26
     dec:	9f 91       	pop	r25
     dee:	8f 91       	pop	r24
     df0:	7f 91       	pop	r23
     df2:	6f 91       	pop	r22
     df4:	5f 91       	pop	r21
     df6:	4f 91       	pop	r20
     df8:	3f 91       	pop	r19
     dfa:	2f 91       	pop	r18
     dfc:	0f 90       	pop	r0
     dfe:	0b be       	out	0x3b, r0	; 59
     e00:	0f 90       	pop	r0
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	0f 90       	pop	r0
     e06:	1f 90       	pop	r1
     e08:	18 95       	reti

00000e0a <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     e0a:	bf 92       	push	r11
     e0c:	cf 92       	push	r12
     e0e:	df 92       	push	r13
     e10:	ef 92       	push	r14
     e12:	ff 92       	push	r15
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	18 2f       	mov	r17, r24
     e1e:	09 2f       	mov	r16, r25
     e20:	7b 01       	movw	r14, r22
     e22:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     e24:	80 91 aa 00 	lds	r24, 0x00AA
     e28:	8f 7c       	andi	r24, 0xCF	; 207
     e2a:	80 61       	ori	r24, 0x10	; 16
     e2c:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     e30:	ac de       	rcall	.-680    	; 0xb8a <Pipe_WaitUntilReady>
     e32:	b8 2e       	mov	r11, r24
     e34:	88 23       	and	r24, r24
     e36:	a9 f5       	brne	.+106    	; 0xea2 <Pipe_Read_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     e38:	81 2f       	mov	r24, r17
     e3a:	90 2f       	mov	r25, r16
     e3c:	9c 01       	movw	r18, r24
     e3e:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     e40:	c1 14       	cp	r12, r1
     e42:	d1 04       	cpc	r13, r1
     e44:	39 f0       	breq	.+14     	; 0xe54 <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
     e46:	f6 01       	movw	r30, r12
     e48:	80 81       	ld	r24, Z
     e4a:	91 81       	ldd	r25, Z+1	; 0x01
     e4c:	e8 1a       	sub	r14, r24
     e4e:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     e50:	c8 0f       	add	r28, r24
     e52:	d9 1f       	adc	r29, r25
     e54:	00 e0       	ldi	r16, 0x00	; 0
     e56:	10 e0       	ldi	r17, 0x00	; 0
     e58:	21 c0       	rjmp	.+66     	; 0xe9c <Pipe_Read_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     e5a:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     e5e:	85 fd       	sbrc	r24, 5
     e60:	15 c0       	rjmp	.+42     	; 0xe8c <Pipe_Read_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     e62:	80 91 a6 00 	lds	r24, 0x00A6
     e66:	8e 77       	andi	r24, 0x7E	; 126
     e68:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     e6c:	c1 14       	cp	r12, r1
     e6e:	d1 04       	cpc	r13, r1
     e70:	49 f0       	breq	.+18     	; 0xe84 <Pipe_Read_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
     e72:	f6 01       	movw	r30, r12
     e74:	80 81       	ld	r24, Z
     e76:	91 81       	ldd	r25, Z+1	; 0x01
     e78:	80 0f       	add	r24, r16
     e7a:	91 1f       	adc	r25, r17
     e7c:	91 83       	std	Z+1, r25	; 0x01
     e7e:	80 83       	st	Z, r24
     e80:	84 e0       	ldi	r24, 0x04	; 4
     e82:	10 c0       	rjmp	.+32     	; 0xea4 <Pipe_Read_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     e84:	82 de       	rcall	.-764    	; 0xb8a <Pipe_WaitUntilReady>
     e86:	88 23       	and	r24, r24
     e88:	49 f0       	breq	.+18     	; 0xe9c <Pipe_Read_Stream_LE+0x92>
     e8a:	0c c0       	rjmp	.+24     	; 0xea4 <Pipe_Read_Stream_LE+0x9a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     e8c:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     e90:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     e92:	08 94       	sec
     e94:	e1 08       	sbc	r14, r1
     e96:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
     e98:	0f 5f       	subi	r16, 0xFF	; 255
     e9a:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     e9c:	e1 14       	cp	r14, r1
     e9e:	f1 04       	cpc	r15, r1
     ea0:	e1 f6       	brne	.-72     	; 0xe5a <Pipe_Read_Stream_LE+0x50>
     ea2:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     ea4:	df 91       	pop	r29
     ea6:	cf 91       	pop	r28
     ea8:	1f 91       	pop	r17
     eaa:	0f 91       	pop	r16
     eac:	ff 90       	pop	r15
     eae:	ef 90       	pop	r14
     eb0:	df 90       	pop	r13
     eb2:	cf 90       	pop	r12
     eb4:	bf 90       	pop	r11
     eb6:	08 95       	ret

00000eb8 <Pipe_Discard_Stream>:

#include "PipeStream_AVR8.h"

uint8_t Pipe_Discard_Stream(uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     eb8:	df 92       	push	r13
     eba:	ef 92       	push	r14
     ebc:	ff 92       	push	r15
     ebe:	0f 93       	push	r16
     ec0:	1f 93       	push	r17
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
     ec6:	8c 01       	movw	r16, r24
     ec8:	7b 01       	movw	r14, r22
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     eca:	80 91 aa 00 	lds	r24, 0x00AA
     ece:	8f 7c       	andi	r24, 0xCF	; 207
     ed0:	80 61       	ori	r24, 0x10	; 16
     ed2:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;
	
	Pipe_SetPipeToken(PIPE_TOKEN_IN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     ed6:	59 de       	rcall	.-846    	; 0xb8a <Pipe_WaitUntilReady>
     ed8:	d8 2e       	mov	r13, r24
     eda:	88 23       	and	r24, r24
     edc:	61 f5       	brne	.+88     	; 0xf36 <Pipe_Discard_Stream+0x7e>
	  return ErrorCode;

	if (BytesProcessed != NULL)
     ede:	e1 14       	cp	r14, r1
     ee0:	f1 04       	cpc	r15, r1
     ee2:	29 f0       	breq	.+10     	; 0xeee <Pipe_Discard_Stream+0x36>
	  Length -= *BytesProcessed;
     ee4:	f7 01       	movw	r30, r14
     ee6:	80 81       	ld	r24, Z
     ee8:	91 81       	ldd	r25, Z+1	; 0x01
     eea:	08 1b       	sub	r16, r24
     eec:	19 0b       	sbc	r17, r25
     eee:	c0 e0       	ldi	r28, 0x00	; 0
     ef0:	d0 e0       	ldi	r29, 0x00	; 0
     ef2:	1e c0       	rjmp	.+60     	; 0xf30 <Pipe_Discard_Stream+0x78>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     ef4:	80 91 a6 00 	lds	r24, 0x00A6

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     ef8:	85 fd       	sbrc	r24, 5
     efa:	15 c0       	rjmp	.+42     	; 0xf26 <Pipe_Discard_Stream+0x6e>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     efc:	80 91 a6 00 	lds	r24, 0x00A6
     f00:	8e 77       	andi	r24, 0x7E	; 126
     f02:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearIN();
				
			if (BytesProcessed != NULL)
     f06:	e1 14       	cp	r14, r1
     f08:	f1 04       	cpc	r15, r1
     f0a:	49 f0       	breq	.+18     	; 0xf1e <Pipe_Discard_Stream+0x66>
			{
				*BytesProcessed += BytesInTransfer;
     f0c:	f7 01       	movw	r30, r14
     f0e:	80 81       	ld	r24, Z
     f10:	91 81       	ldd	r25, Z+1	; 0x01
     f12:	8c 0f       	add	r24, r28
     f14:	9d 1f       	adc	r25, r29
     f16:	91 83       	std	Z+1, r25	; 0x01
     f18:	80 83       	st	Z, r24
     f1a:	84 e0       	ldi	r24, 0x04	; 4
     f1c:	0d c0       	rjmp	.+26     	; 0xf38 <Pipe_Discard_Stream+0x80>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     f1e:	35 de       	rcall	.-918    	; 0xb8a <Pipe_WaitUntilReady>
     f20:	88 23       	and	r24, r24
     f22:	31 f0       	breq	.+12     	; 0xf30 <Pipe_Discard_Stream+0x78>
     f24:	09 c0       	rjmp	.+18     	; 0xf38 <Pipe_Discard_Stream+0x80>
			static inline void Pipe_Discard_8(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Discard_8(void)
			{
				uint8_t Dummy;

				Dummy = UPDATX;
     f26:	80 91 af 00 	lds	r24, 0x00AF
		}
		else
		{
			Pipe_Discard_8();
			
			Length--;
     f2a:	01 50       	subi	r16, 0x01	; 1
     f2c:	10 40       	sbci	r17, 0x00	; 0
			BytesInTransfer++;
     f2e:	21 96       	adiw	r28, 0x01	; 1
	  return ErrorCode;

	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
     f30:	01 15       	cp	r16, r1
     f32:	11 05       	cpc	r17, r1
     f34:	f9 f6       	brne	.-66     	; 0xef4 <Pipe_Discard_Stream+0x3c>
     f36:	8d 2d       	mov	r24, r13
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	1f 91       	pop	r17
     f3e:	0f 91       	pop	r16
     f40:	ff 90       	pop	r15
     f42:	ef 90       	pop	r14
     f44:	df 90       	pop	r13
     f46:	08 95       	ret

00000f48 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     f48:	af 92       	push	r10
     f4a:	bf 92       	push	r11
     f4c:	cf 92       	push	r12
     f4e:	df 92       	push	r13
     f50:	ef 92       	push	r14
     f52:	ff 92       	push	r15
     f54:	0f 93       	push	r16
     f56:	1f 93       	push	r17
     f58:	cf 93       	push	r28
     f5a:	df 93       	push	r29
     f5c:	7c 01       	movw	r14, r24
     f5e:	eb 01       	movw	r28, r22
     f60:	6a 01       	movw	r12, r20
     f62:	24 c0       	rjmp	.+72     	; 0xfac <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     f64:	e8 81       	ld	r30, Y
     f66:	f9 81       	ldd	r31, Y+1	; 0x01
     f68:	be 2e       	mov	r11, r30
     f6a:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     f6c:	80 81       	ld	r24, Z
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	98 01       	movw	r18, r16
     f72:	80 17       	cp	r24, r16
     f74:	91 07       	cpc	r25, r17
     f76:	08 f4       	brcc	.+2      	; 0xf7a <USB_GetNextDescriptorComp+0x32>
     f78:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     f7a:	e2 0f       	add	r30, r18
     f7c:	f3 1f       	adc	r31, r19
     f7e:	f9 83       	std	Y+1, r31	; 0x01
     f80:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     f82:	f7 01       	movw	r30, r14
     f84:	80 81       	ld	r24, Z
     f86:	91 81       	ldd	r25, Z+1	; 0x01
     f88:	82 1b       	sub	r24, r18
     f8a:	93 0b       	sbc	r25, r19
     f8c:	91 83       	std	Z+1, r25	; 0x01
     f8e:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     f90:	88 81       	ld	r24, Y
     f92:	99 81       	ldd	r25, Y+1	; 0x01
     f94:	f6 01       	movw	r30, r12
     f96:	09 95       	icall
     f98:	82 30       	cpi	r24, 0x02	; 2
     f9a:	41 f0       	breq	.+16     	; 0xfac <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     f9c:	81 30       	cpi	r24, 0x01	; 1
     f9e:	69 f4       	brne	.+26     	; 0xfba <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
     fa0:	b8 82       	st	Y, r11
     fa2:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
     fa4:	f7 01       	movw	r30, r14
     fa6:	11 83       	std	Z+1, r17	; 0x01
     fa8:	00 83       	st	Z, r16
     faa:	07 c0       	rjmp	.+14     	; 0xfba <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     fac:	f7 01       	movw	r30, r14
     fae:	00 81       	ld	r16, Z
     fb0:	11 81       	ldd	r17, Z+1	; 0x01
     fb2:	01 15       	cp	r16, r1
     fb4:	11 05       	cpc	r17, r1
     fb6:	b1 f6       	brne	.-84     	; 0xf64 <USB_GetNextDescriptorComp+0x1c>
     fb8:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	1f 91       	pop	r17
     fc0:	0f 91       	pop	r16
     fc2:	ff 90       	pop	r15
     fc4:	ef 90       	pop	r14
     fc6:	df 90       	pop	r13
     fc8:	cf 90       	pop	r12
     fca:	bf 90       	pop	r11
     fcc:	af 90       	pop	r10
     fce:	08 95       	ret

00000fd0 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     fd0:	cf 92       	push	r12
     fd2:	df 92       	push	r13
     fd4:	ef 92       	push	r14
     fd6:	ff 92       	push	r15
     fd8:	0f 93       	push	r16
     fda:	1f 93       	push	r17
     fdc:	df 93       	push	r29
     fde:	cf 93       	push	r28
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
     fe4:	29 97       	sbiw	r28, 0x09	; 9
     fe6:	0f b6       	in	r0, 0x3f	; 63
     fe8:	f8 94       	cli
     fea:	de bf       	out	0x3e, r29	; 62
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	cd bf       	out	0x3d, r28	; 61
     ff0:	6b 01       	movw	r12, r22
     ff2:	8a 01       	movw	r16, r20
     ff4:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     ff6:	90 e8       	ldi	r25, 0x80	; 128
     ff8:	90 93 39 05 	sts	0x0539, r25
     ffc:	96 e0       	ldi	r25, 0x06	; 6
     ffe:	90 93 3a 05 	sts	0x053A, r25
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	92 60       	ori	r25, 0x02	; 2
    1008:	90 93 3c 05 	sts	0x053C, r25
    100c:	80 93 3b 05 	sts	0x053B, r24
    1010:	10 92 3e 05 	sts	0x053E, r1
    1014:	10 92 3d 05 	sts	0x053D, r1
    1018:	89 e0       	ldi	r24, 0x09	; 9
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	90 93 40 05 	sts	0x0540, r25
    1020:	80 93 3f 05 	sts	0x053F, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1024:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    1028:	ce 01       	movw	r24, r28
    102a:	01 96       	adiw	r24, 0x01	; 1
    102c:	55 d0       	rcall	.+170    	; 0x10d8 <USB_Host_SendControlRequest>
    102e:	28 2f       	mov	r18, r24
    1030:	88 23       	and	r24, r24
    1032:	c1 f4       	brne	.+48     	; 0x1064 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	9c 81       	ldd	r25, Y+4	; 0x04
    1038:	f6 01       	movw	r30, r12
    103a:	91 83       	std	Z+1, r25	; 0x01
    103c:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    103e:	e8 16       	cp	r14, r24
    1040:	f9 06       	cpc	r15, r25
    1042:	10 f4       	brcc	.+4      	; 0x1048 <USB_Host_GetDeviceConfigDescriptor+0x78>
    1044:	25 e0       	ldi	r18, 0x05	; 5
    1046:	0e c0       	rjmp	.+28     	; 0x1064 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    1048:	90 93 40 05 	sts	0x0540, r25
    104c:	80 93 3f 05 	sts	0x053F, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1050:	c8 01       	movw	r24, r16
    1052:	42 d0       	rcall	.+132    	; 0x10d8 <USB_Host_SendControlRequest>
    1054:	28 2f       	mov	r18, r24
    1056:	88 23       	and	r24, r24
    1058:	29 f4       	brne	.+10     	; 0x1064 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    105a:	f8 01       	movw	r30, r16
    105c:	81 81       	ldd	r24, Z+1	; 0x01
    105e:	82 30       	cpi	r24, 0x02	; 2
    1060:	09 f0       	breq	.+2      	; 0x1064 <USB_Host_GetDeviceConfigDescriptor+0x94>
    1062:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    1064:	82 2f       	mov	r24, r18
    1066:	29 96       	adiw	r28, 0x09	; 9
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	de bf       	out	0x3e, r29	; 62
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	cd bf       	out	0x3d, r28	; 61
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	1f 91       	pop	r17
    1078:	0f 91       	pop	r16
    107a:	ff 90       	pop	r15
    107c:	ef 90       	pop	r14
    107e:	df 90       	pop	r13
    1080:	cf 90       	pop	r12
    1082:	08 95       	ret

00001084 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1084:	08 95       	ret

00001086 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1086:	1f 93       	push	r17
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	18 2f       	mov	r17, r24
    108e:	c8 ee       	ldi	r28, 0xE8	; 232
    1090:	d3 e0       	ldi	r29, 0x03	; 3
    1092:	09 c0       	rjmp	.+18     	; 0x10a6 <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	1d db       	rcall	.-2502   	; 0x6d2 <USB_Host_WaitMS>
    1098:	88 23       	and	r24, r24
    109a:	d1 f4       	brne	.+52     	; 0x10d0 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    109c:	20 97       	sbiw	r28, 0x00	; 0
    109e:	11 f4       	brne	.+4      	; 0x10a4 <USB_Host_WaitForIOS+0x1e>
    10a0:	84 e0       	ldi	r24, 0x04	; 4
    10a2:	16 c0       	rjmp	.+44     	; 0x10d0 <USB_Host_WaitForIOS+0x4a>
    10a4:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    10a6:	11 23       	and	r17, r17
    10a8:	29 f4       	brne	.+10     	; 0x10b4 <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    10aa:	80 91 a6 00 	lds	r24, 0x00A6
    10ae:	83 ff       	sbrs	r24, 3
    10b0:	f1 cf       	rjmp	.-30     	; 0x1094 <USB_Host_WaitForIOS+0xe>
    10b2:	0d c0       	rjmp	.+26     	; 0x10ce <USB_Host_WaitForIOS+0x48>
    10b4:	11 30       	cpi	r17, 0x01	; 1
    10b6:	29 f4       	brne	.+10     	; 0x10c2 <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    10b8:	80 91 a6 00 	lds	r24, 0x00A6
    10bc:	80 ff       	sbrs	r24, 0
    10be:	ea cf       	rjmp	.-44     	; 0x1094 <USB_Host_WaitForIOS+0xe>
    10c0:	06 c0       	rjmp	.+12     	; 0x10ce <USB_Host_WaitForIOS+0x48>
    10c2:	12 30       	cpi	r17, 0x02	; 2
    10c4:	39 f7       	brne	.-50     	; 0x1094 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    10c6:	80 91 a6 00 	lds	r24, 0x00A6
    10ca:	82 ff       	sbrs	r24, 2
    10cc:	e3 cf       	rjmp	.-58     	; 0x1094 <USB_Host_WaitForIOS+0xe>
    10ce:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	1f 91       	pop	r17
    10d6:	08 95       	ret

000010d8 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    10d8:	ff 92       	push	r15
    10da:	0f 93       	push	r16
    10dc:	1f 93       	push	r17
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	18 2f       	mov	r17, r24
    10e4:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    10e6:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    10ea:	c0 91 3f 05 	lds	r28, 0x053F
    10ee:	d0 91 40 05 	lds	r29, 0x0540
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    10f2:	80 91 9e 00 	lds	r24, 0x009E
    10f6:	81 60       	ori	r24, 0x01	; 1
    10f8:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	e9 da       	rcall	.-2606   	; 0x6d2 <USB_Host_WaitMS>
    1100:	98 2f       	mov	r25, r24
    1102:	88 23       	and	r24, r24
    1104:	09 f0       	breq	.+2      	; 0x1108 <USB_Host_SendControlRequest+0x30>
    1106:	ee c0       	rjmp	.+476    	; 0x12e4 <USB_Host_SendControlRequest+0x20c>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1108:	80 91 aa 00 	lds	r24, 0x00AA
    110c:	8f 7c       	andi	r24, 0xCF	; 207
    110e:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1112:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1116:	80 91 a6 00 	lds	r24, 0x00A6
    111a:	8f 7e       	andi	r24, 0xEF	; 239
    111c:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1120:	80 91 a9 00 	lds	r24, 0x00A9
    1124:	8f 7b       	andi	r24, 0xBF	; 191
    1126:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearError();

	Pipe_Unfreeze();

	Pipe_Write_8(USB_ControlRequest.bmRequestType);
    112a:	80 91 39 05 	lds	r24, 0x0539
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    112e:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
    1132:	80 91 3a 05 	lds	r24, 0x053A
    1136:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
    113a:	80 91 3b 05 	lds	r24, 0x053B
    113e:	90 91 3c 05 	lds	r25, 0x053C
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    1142:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    1146:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
    114a:	80 91 3d 05 	lds	r24, 0x053D
    114e:	90 91 3e 05 	lds	r25, 0x053E
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    1152:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    1156:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
    115a:	80 91 3f 05 	lds	r24, 0x053F
    115e:	90 91 40 05 	lds	r25, 0x0540
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    1162:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    1166:	90 93 af 00 	sts	0x00AF, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    116a:	80 91 a6 00 	lds	r24, 0x00A6
    116e:	87 77       	andi	r24, 0x77	; 119
    1170:	80 93 a6 00 	sts	0x00A6, r24

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	87 df       	rcall	.-242    	; 0x1086 <USB_Host_WaitForIOS>
    1178:	98 2f       	mov	r25, r24
    117a:	88 23       	and	r24, r24
    117c:	09 f0       	breq	.+2      	; 0x1180 <USB_Host_SendControlRequest+0xa8>
    117e:	b2 c0       	rjmp	.+356    	; 0x12e4 <USB_Host_SendControlRequest+0x20c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1180:	80 91 a9 00 	lds	r24, 0x00A9
    1184:	80 64       	ori	r24, 0x40	; 64
    1186:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	a2 da       	rcall	.-2748   	; 0x6d2 <USB_Host_WaitMS>
    118e:	98 2f       	mov	r25, r24
    1190:	88 23       	and	r24, r24
    1192:	09 f0       	breq	.+2      	; 0x1196 <USB_Host_SendControlRequest+0xbe>
    1194:	a7 c0       	rjmp	.+334    	; 0x12e4 <USB_Host_SendControlRequest+0x20c>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
    1196:	21 2f       	mov	r18, r17
    1198:	30 2f       	mov	r19, r16
    119a:	c9 01       	movw	r24, r18
    119c:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    119e:	80 91 39 05 	lds	r24, 0x0539
    11a2:	87 ff       	sbrs	r24, 7
    11a4:	52 c0       	rjmp	.+164    	; 0x124a <USB_Host_SendControlRequest+0x172>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11a6:	80 91 aa 00 	lds	r24, 0x00AA
    11aa:	8f 7c       	andi	r24, 0xCF	; 207
    11ac:	80 61       	ori	r24, 0x10	; 16
    11ae:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    11b2:	01 15       	cp	r16, r1
    11b4:	11 05       	cpc	r17, r1
    11b6:	69 f5       	brne	.+90     	; 0x1212 <USB_Host_SendControlRequest+0x13a>
    11b8:	2e c0       	rjmp	.+92     	; 0x1216 <USB_Host_SendControlRequest+0x13e>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11ba:	80 91 a9 00 	lds	r24, 0x00A9
    11be:	8f 7b       	andi	r24, 0xBF	; 191
    11c0:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	5f df       	rcall	.-322    	; 0x1086 <USB_Host_WaitForIOS>
    11c8:	98 2f       	mov	r25, r24
    11ca:	88 23       	and	r24, r24
    11cc:	09 f0       	breq	.+2      	; 0x11d0 <USB_Host_SendControlRequest+0xf8>
    11ce:	8a c0       	rjmp	.+276    	; 0x12e4 <USB_Host_SendControlRequest+0x20c>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    11d0:	80 91 f6 00 	lds	r24, 0x00F6
    11d4:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    11d8:	89 2b       	or	r24, r25
    11da:	49 f4       	brne	.+18     	; 0x11ee <USB_Host_SendControlRequest+0x116>
    11dc:	c0 e0       	ldi	r28, 0x00	; 0
    11de:	d0 e0       	ldi	r29, 0x00	; 0
    11e0:	06 c0       	rjmp	.+12     	; 0x11ee <USB_Host_SendControlRequest+0x116>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    11e2:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    11e6:	f8 01       	movw	r30, r16
    11e8:	81 93       	st	Z+, r24
    11ea:	8f 01       	movw	r16, r30
					DataLen--;
    11ec:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    11ee:	80 91 f6 00 	lds	r24, 0x00F6
    11f2:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    11f6:	89 2b       	or	r24, r25
    11f8:	11 f0       	breq	.+4      	; 0x11fe <USB_Host_SendControlRequest+0x126>
    11fa:	20 97       	sbiw	r28, 0x00	; 0
    11fc:	91 f7       	brne	.-28     	; 0x11e2 <USB_Host_SendControlRequest+0x10a>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11fe:	80 91 a9 00 	lds	r24, 0x00A9
    1202:	80 64       	ori	r24, 0x40	; 64
    1204:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1208:	80 91 a6 00 	lds	r24, 0x00A6
    120c:	8e 77       	andi	r24, 0x7E	; 126
    120e:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1212:	20 97       	sbiw	r28, 0x00	; 0
    1214:	91 f6       	brne	.-92     	; 0x11ba <USB_Host_SendControlRequest+0xe2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1216:	80 91 aa 00 	lds	r24, 0x00AA
    121a:	8f 7c       	andi	r24, 0xCF	; 207
    121c:	80 62       	ori	r24, 0x20	; 32
    121e:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1222:	80 91 a9 00 	lds	r24, 0x00A9
    1226:	8f 7b       	andi	r24, 0xBF	; 191
    1228:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    122c:	82 e0       	ldi	r24, 0x02	; 2
    122e:	2b df       	rcall	.-426    	; 0x1086 <USB_Host_WaitForIOS>
    1230:	98 2f       	mov	r25, r24
    1232:	88 23       	and	r24, r24
    1234:	09 f0       	breq	.+2      	; 0x1238 <USB_Host_SendControlRequest+0x160>
    1236:	56 c0       	rjmp	.+172    	; 0x12e4 <USB_Host_SendControlRequest+0x20c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1238:	80 91 a6 00 	lds	r24, 0x00A6
    123c:	8b 77       	andi	r24, 0x7B	; 123
    123e:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1242:	82 e0       	ldi	r24, 0x02	; 2
    1244:	20 df       	rcall	.-448    	; 0x1086 <USB_Host_WaitForIOS>
    1246:	98 2f       	mov	r25, r24
    1248:	4d c0       	rjmp	.+154    	; 0x12e4 <USB_Host_SendControlRequest+0x20c>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    124a:	01 15       	cp	r16, r1
    124c:	11 05       	cpc	r17, r1
    124e:	a9 f1       	breq	.+106    	; 0x12ba <USB_Host_SendControlRequest+0x1e2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1250:	80 91 aa 00 	lds	r24, 0x00AA
    1254:	8f 7c       	andi	r24, 0xCF	; 207
    1256:	80 62       	ori	r24, 0x20	; 32
    1258:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    125c:	80 91 a9 00 	lds	r24, 0x00A9
    1260:	8f 7b       	andi	r24, 0xBF	; 191
    1262:	80 93 a9 00 	sts	0x00A9, r24
    1266:	1d c0       	rjmp	.+58     	; 0x12a2 <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1268:	82 e0       	ldi	r24, 0x02	; 2
    126a:	0d df       	rcall	.-486    	; 0x1086 <USB_Host_WaitForIOS>
    126c:	98 2f       	mov	r25, r24
    126e:	88 23       	and	r24, r24
    1270:	c9 f5       	brne	.+114    	; 0x12e4 <USB_Host_SendControlRequest+0x20c>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1272:	80 91 32 01 	lds	r24, 0x0132
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	07 c0       	rjmp	.+14     	; 0x128a <USB_Host_SendControlRequest+0x1b2>
				{
					Pipe_Write_8(*(DataStream++));
    127c:	f8 01       	movw	r30, r16
    127e:	81 91       	ld	r24, Z+
    1280:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1282:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1286:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1288:	39 f0       	breq	.+14     	; 0x1298 <USB_Host_SendControlRequest+0x1c0>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    128a:	80 91 f6 00 	lds	r24, 0x00F6
    128e:	90 91 f7 00 	lds	r25, 0x00F7
    1292:	82 17       	cp	r24, r18
    1294:	93 07       	cpc	r25, r19
    1296:	90 f3       	brcs	.-28     	; 0x127c <USB_Host_SendControlRequest+0x1a4>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1298:	80 91 a6 00 	lds	r24, 0x00A6
    129c:	8b 77       	andi	r24, 0x7B	; 123
    129e:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    12a2:	20 97       	sbiw	r28, 0x00	; 0
    12a4:	09 f7       	brne	.-62     	; 0x1268 <USB_Host_SendControlRequest+0x190>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    12a6:	82 e0       	ldi	r24, 0x02	; 2
    12a8:	ee de       	rcall	.-548    	; 0x1086 <USB_Host_WaitForIOS>
    12aa:	98 2f       	mov	r25, r24
    12ac:	88 23       	and	r24, r24
    12ae:	d1 f4       	brne	.+52     	; 0x12e4 <USB_Host_SendControlRequest+0x20c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    12b0:	80 91 a9 00 	lds	r24, 0x00A9
    12b4:	80 64       	ori	r24, 0x40	; 64
    12b6:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    12ba:	80 91 aa 00 	lds	r24, 0x00AA
    12be:	8f 7c       	andi	r24, 0xCF	; 207
    12c0:	80 61       	ori	r24, 0x10	; 16
    12c2:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    12c6:	80 91 a9 00 	lds	r24, 0x00A9
    12ca:	8f 7b       	andi	r24, 0xBF	; 191
    12cc:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	d9 de       	rcall	.-590    	; 0x1086 <USB_Host_WaitForIOS>
    12d4:	98 2f       	mov	r25, r24
    12d6:	88 23       	and	r24, r24
    12d8:	29 f4       	brne	.+10     	; 0x12e4 <USB_Host_SendControlRequest+0x20c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    12da:	80 91 a6 00 	lds	r24, 0x00A6
    12de:	8e 77       	andi	r24, 0x7E	; 126
    12e0:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    12e4:	80 91 a9 00 	lds	r24, 0x00A9
    12e8:	80 64       	ori	r24, 0x40	; 64
    12ea:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    12ee:	f0 fc       	sbrc	r15, 0
    12f0:	05 c0       	rjmp	.+10     	; 0x12fc <USB_Host_SendControlRequest+0x224>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    12f2:	80 91 9e 00 	lds	r24, 0x009E
    12f6:	8e 7f       	andi	r24, 0xFE	; 254
    12f8:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    1302:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1306:	89 2f       	mov	r24, r25
    1308:	df 91       	pop	r29
    130a:	cf 91       	pop	r28
    130c:	1f 91       	pop	r17
    130e:	0f 91       	pop	r16
    1310:	ff 90       	pop	r15
    1312:	08 95       	ret

00001314 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1314:	1f 93       	push	r17
    1316:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1318:	10 92 39 05 	sts	0x0539, r1
    131c:	89 e0       	ldi	r24, 0x09	; 9
    131e:	80 93 3a 05 	sts	0x053A, r24
    1322:	10 93 3b 05 	sts	0x053B, r17
    1326:	10 92 3c 05 	sts	0x053C, r1
    132a:	10 92 3e 05 	sts	0x053E, r1
    132e:	10 92 3d 05 	sts	0x053D, r1
    1332:	10 92 40 05 	sts	0x0540, r1
    1336:	10 92 3f 05 	sts	0x053F, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    133a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	ca de       	rcall	.-620    	; 0x10d8 <USB_Host_SendControlRequest>
    1344:	88 23       	and	r24, r24
    1346:	49 f4       	brne	.+18     	; 0x135a <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1348:	10 93 37 05 	sts	0x0537, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    134c:	11 23       	and	r17, r17
    134e:	11 f4       	brne	.+4      	; 0x1354 <USB_Host_SetDeviceConfiguration+0x40>
    1350:	9a e0       	ldi	r25, 0x0A	; 10
    1352:	01 c0       	rjmp	.+2      	; 0x1356 <USB_Host_SetDeviceConfiguration+0x42>
    1354:	9b e0       	ldi	r25, 0x0B	; 11
    1356:	90 93 41 05 	sts	0x0541, r25
	}

	return ErrorCode;
}
    135a:	1f 91       	pop	r17
    135c:	08 95       	ret

0000135e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    135e:	ff 92       	push	r15
    1360:	0f 93       	push	r16
    1362:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1364:	07 ea       	ldi	r16, 0xA7	; 167
    1366:	10 e0       	ldi	r17, 0x00	; 0
    1368:	f8 01       	movw	r30, r16
    136a:	f0 80       	ld	r15, Z
    136c:	f7 e0       	ldi	r31, 0x07	; 7
    136e:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1370:	f8 01       	movw	r30, r16
    1372:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1374:	4b da       	rcall	.-2922   	; 0x80c <USB_Host_ProcessNextHostState>
    1376:	f8 01       	movw	r30, r16
    1378:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    137a:	1f 91       	pop	r17
    137c:	0f 91       	pop	r16
    137e:	ff 90       	pop	r15
    1380:	08 95       	ret

00001382 <DCOMP_RNDIS_Host_NextRNDISControlInterface>:

	return RNDIS_ENUMERROR_NoError;
}

static uint8_t DCOMP_RNDIS_Host_NextRNDISControlInterface(void* const CurrentDescriptor)
{
    1382:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1384:	81 81       	ldd	r24, Z+1	; 0x01
    1386:	84 30       	cpi	r24, 0x04	; 4
    1388:	59 f4       	brne	.+22     	; 0x13a0 <DCOMP_RNDIS_Host_NextRNDISControlInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == CDC_CSCP_CDCClass)    &&
    138a:	85 81       	ldd	r24, Z+5	; 0x05
    138c:	82 30       	cpi	r24, 0x02	; 2
    138e:	41 f4       	brne	.+16     	; 0x13a0 <DCOMP_RNDIS_Host_NextRNDISControlInterface+0x1e>
    1390:	86 81       	ldd	r24, Z+6	; 0x06
    1392:	82 30       	cpi	r24, 0x02	; 2
    1394:	29 f4       	brne	.+10     	; 0x13a0 <DCOMP_RNDIS_Host_NextRNDISControlInterface+0x1e>
    1396:	87 81       	ldd	r24, Z+7	; 0x07
    1398:	8f 3f       	cpi	r24, 0xFF	; 255
    139a:	11 f4       	brne	.+4      	; 0x13a0 <DCOMP_RNDIS_Host_NextRNDISControlInterface+0x1e>
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	08 95       	ret
    13a0:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    13a2:	08 95       	ret

000013a4 <DCOMP_RNDIS_Host_NextRNDISDataInterface>:

static uint8_t DCOMP_RNDIS_Host_NextRNDISDataInterface(void* const CurrentDescriptor)
{
    13a4:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    13a6:	81 81       	ldd	r24, Z+1	; 0x01
    13a8:	84 30       	cpi	r24, 0x04	; 4
    13aa:	41 f4       	brne	.+16     	; 0x13bc <DCOMP_RNDIS_Host_NextRNDISDataInterface+0x18>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor,
		                                                         USB_Descriptor_Interface_t);

		if ((Interface->Class    == CDC_CSCP_CDCDataClass)   &&
    13ac:	85 81       	ldd	r24, Z+5	; 0x05
    13ae:	8a 30       	cpi	r24, 0x0A	; 10
    13b0:	29 f4       	brne	.+10     	; 0x13bc <DCOMP_RNDIS_Host_NextRNDISDataInterface+0x18>
    13b2:	86 81       	ldd	r24, Z+6	; 0x06
    13b4:	88 23       	and	r24, r24
    13b6:	11 f4       	brne	.+4      	; 0x13bc <DCOMP_RNDIS_Host_NextRNDISDataInterface+0x18>
    13b8:	87 81       	ldd	r24, Z+7	; 0x07
    13ba:	81 11       	cpse	r24, r1
    13bc:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    13be:	08 95       	ret

000013c0 <RNDIS_Host_IsPacketReceived>:

	return HOST_SENDCONTROL_Successful;
}

bool RNDIS_Host_IsPacketReceived(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo)
{
    13c0:	fc 01       	movw	r30, r24
	bool PacketWaiting;

	if ((USB_HostState != HOST_STATE_Configured) || !(RNDISInterfaceInfo->State.IsActive))
    13c2:	80 91 41 05 	lds	r24, 0x0541
    13c6:	8b 30       	cpi	r24, 0x0B	; 11
    13c8:	a1 f4       	brne	.+40     	; 0x13f2 <RNDIS_Host_IsPacketReceived+0x32>
    13ca:	82 85       	ldd	r24, Z+10	; 0x0a
    13cc:	88 23       	and	r24, r24
    13ce:	89 f0       	breq	.+34     	; 0x13f2 <RNDIS_Host_IsPacketReceived+0x32>
	  return false;

	Pipe_SelectPipe(RNDISInterfaceInfo->Config.DataINPipeNumber);
    13d0:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    13d2:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    13d6:	80 91 a9 00 	lds	r24, 0x00A9
    13da:	8f 7b       	andi	r24, 0xBF	; 191
    13dc:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    13e0:	90 91 a6 00 	lds	r25, 0x00A6
    13e4:	91 70       	andi	r25, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    13e6:	80 91 a9 00 	lds	r24, 0x00A9
    13ea:	80 64       	ori	r24, 0x40	; 64
    13ec:	80 93 a9 00 	sts	0x00A9, r24
    13f0:	01 c0       	rjmp	.+2      	; 0x13f4 <RNDIS_Host_IsPacketReceived+0x34>

	Pipe_Unfreeze();
	PacketWaiting = Pipe_IsINReceived();
	Pipe_Freeze();

	return PacketWaiting;
    13f2:	90 e0       	ldi	r25, 0x00	; 0
}
    13f4:	89 2f       	mov	r24, r25
    13f6:	08 95       	ret

000013f8 <RNDIS_Host_ReadPacket>:

uint8_t RNDIS_Host_ReadPacket(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                              void* Buffer,
                              uint16_t* const PacketLength)
{
    13f8:	cf 92       	push	r12
    13fa:	df 92       	push	r13
    13fc:	ff 92       	push	r15
    13fe:	0f 93       	push	r16
    1400:	1f 93       	push	r17
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	ac 97       	sbiw	r28, 0x2c	; 44
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	de bf       	out	0x3e, r29	; 62
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	cd bf       	out	0x3d, r28	; 61
    1416:	fc 01       	movw	r30, r24
    1418:	6b 01       	movw	r12, r22
    141a:	8a 01       	movw	r16, r20
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(RNDISInterfaceInfo->State.IsActive))
    141c:	80 91 41 05 	lds	r24, 0x0541
    1420:	8b 30       	cpi	r24, 0x0B	; 11
    1422:	09 f0       	breq	.+2      	; 0x1426 <RNDIS_Host_ReadPacket+0x2e>
    1424:	50 c0       	rjmp	.+160    	; 0x14c6 <RNDIS_Host_ReadPacket+0xce>
    1426:	82 85       	ldd	r24, Z+10	; 0x0a
    1428:	88 23       	and	r24, r24
    142a:	09 f4       	brne	.+2      	; 0x142e <RNDIS_Host_ReadPacket+0x36>
    142c:	4c c0       	rjmp	.+152    	; 0x14c6 <RNDIS_Host_ReadPacket+0xce>
	  return PIPE_READYWAIT_DeviceDisconnected;

	Pipe_SelectPipe(RNDISInterfaceInfo->Config.DataINPipeNumber);
    142e:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1430:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1434:	80 91 a9 00 	lds	r24, 0x00A9
    1438:	8f 7b       	andi	r24, 0xBF	; 191
    143a:	80 93 a9 00 	sts	0x00A9, r24
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    143e:	80 91 a6 00 	lds	r24, 0x00A6
	Pipe_Unfreeze();

	if (!(Pipe_IsReadWriteAllowed()))
    1442:	85 fd       	sbrc	r24, 5
    1444:	13 c0       	rjmp	.+38     	; 0x146c <RNDIS_Host_ReadPacket+0x74>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1446:	80 91 a6 00 	lds	r24, 0x00A6
	{
		if (Pipe_IsINReceived())
    144a:	80 ff       	sbrs	r24, 0
    144c:	05 c0       	rjmp	.+10     	; 0x1458 <RNDIS_Host_ReadPacket+0x60>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    144e:	80 91 a6 00 	lds	r24, 0x00A6
    1452:	8e 77       	andi	r24, 0x7E	; 126
    1454:	80 93 a6 00 	sts	0x00A6, r24
		  Pipe_ClearIN();

		*PacketLength = 0;
    1458:	f8 01       	movw	r30, r16
    145a:	11 82       	std	Z+1, r1	; 0x01
    145c:	10 82       	st	Z, r1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    145e:	80 91 a9 00 	lds	r24, 0x00A9
    1462:	80 64       	ori	r24, 0x40	; 64
    1464:	80 93 a9 00 	sts	0x00A9, r24
    1468:	ff 24       	eor	r15, r15
    146a:	2f c0       	rjmp	.+94     	; 0x14ca <RNDIS_Host_ReadPacket+0xd2>
		return PIPE_RWSTREAM_NoError;
	}

	RNDIS_Packet_Message_t DeviceMessage;

	if ((ErrorCode = Pipe_Read_Stream_LE(&DeviceMessage, sizeof(RNDIS_Packet_Message_t),
    146c:	ce 01       	movw	r24, r28
    146e:	01 96       	adiw	r24, 0x01	; 1
    1470:	6c e2       	ldi	r22, 0x2C	; 44
    1472:	70 e0       	ldi	r23, 0x00	; 0
    1474:	40 e0       	ldi	r20, 0x00	; 0
    1476:	50 e0       	ldi	r21, 0x00	; 0
    1478:	c8 dc       	rcall	.-1648   	; 0xe0a <Pipe_Read_Stream_LE>
    147a:	f8 2e       	mov	r15, r24
    147c:	88 23       	and	r24, r24
    147e:	29 f5       	brne	.+74     	; 0x14ca <RNDIS_Host_ReadPacket+0xd2>
	                                     NULL)) != PIPE_RWSTREAM_NoError)
	{
		return ErrorCode;
	}

	*PacketLength = (uint16_t)le32_to_cpu(DeviceMessage.DataLength);
    1480:	8d 85       	ldd	r24, Y+13	; 0x0d
    1482:	9e 85       	ldd	r25, Y+14	; 0x0e
    1484:	f8 01       	movw	r30, r16
    1486:	91 83       	std	Z+1, r25	; 0x01
    1488:	80 83       	st	Z, r24

	Pipe_Discard_Stream(DeviceMessage.DataOffset -
    148a:	89 85       	ldd	r24, Y+9	; 0x09
    148c:	9a 85       	ldd	r25, Y+10	; 0x0a
    148e:	84 97       	sbiw	r24, 0x24	; 36
    1490:	60 e0       	ldi	r22, 0x00	; 0
    1492:	70 e0       	ldi	r23, 0x00	; 0
    1494:	11 dd       	rcall	.-1502   	; 0xeb8 <Pipe_Discard_Stream>
	                    (sizeof(RNDIS_Packet_Message_t) - sizeof(RNDIS_Message_Header_t)),
	                    NULL);

	Pipe_Read_Stream_LE(Buffer, *PacketLength, NULL);
    1496:	f8 01       	movw	r30, r16
    1498:	60 81       	ld	r22, Z
    149a:	71 81       	ldd	r23, Z+1	; 0x01
    149c:	c6 01       	movw	r24, r12
    149e:	40 e0       	ldi	r20, 0x00	; 0
    14a0:	50 e0       	ldi	r21, 0x00	; 0
    14a2:	b3 dc       	rcall	.-1690   	; 0xe0a <Pipe_Read_Stream_LE>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    14a4:	80 91 f6 00 	lds	r24, 0x00F6
    14a8:	90 91 f7 00 	lds	r25, 0x00F7

	if (!(Pipe_BytesInPipe()))
    14ac:	89 2b       	or	r24, r25
    14ae:	29 f4       	brne	.+10     	; 0x14ba <RNDIS_Host_ReadPacket+0xc2>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    14b0:	80 91 a6 00 	lds	r24, 0x00A6
    14b4:	8e 77       	andi	r24, 0x7E	; 126
    14b6:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    14ba:	80 91 a9 00 	lds	r24, 0x00A9
    14be:	80 64       	ori	r24, 0x40	; 64
    14c0:	80 93 a9 00 	sts	0x00A9, r24
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <RNDIS_Host_ReadPacket+0xd2>
	  Pipe_ClearIN();

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    14c6:	92 e0       	ldi	r25, 0x02	; 2
    14c8:	f9 2e       	mov	r15, r25
}
    14ca:	8f 2d       	mov	r24, r15
    14cc:	ac 96       	adiw	r28, 0x2c	; 44
    14ce:	0f b6       	in	r0, 0x3f	; 63
    14d0:	f8 94       	cli
    14d2:	de bf       	out	0x3e, r29	; 62
    14d4:	0f be       	out	0x3f, r0	; 63
    14d6:	cd bf       	out	0x3d, r28	; 61
    14d8:	cf 91       	pop	r28
    14da:	df 91       	pop	r29
    14dc:	1f 91       	pop	r17
    14de:	0f 91       	pop	r16
    14e0:	ff 90       	pop	r15
    14e2:	df 90       	pop	r13
    14e4:	cf 90       	pop	r12
    14e6:	08 95       	ret

000014e8 <RNDIS_SendEncapsulatedCommand>:

static uint8_t RNDIS_SendEncapsulatedCommand(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                                             void* Buffer,
                                             const uint16_t Length)
{
	USB_ControlRequest = (USB_Request_Header_t)
    14e8:	fc 01       	movw	r30, r24
    14ea:	93 85       	ldd	r25, Z+11	; 0x0b
    14ec:	81 e2       	ldi	r24, 0x21	; 33
    14ee:	80 93 39 05 	sts	0x0539, r24
    14f2:	10 92 3a 05 	sts	0x053A, r1
    14f6:	10 92 3c 05 	sts	0x053C, r1
    14fa:	10 92 3b 05 	sts	0x053B, r1
    14fe:	90 93 3d 05 	sts	0x053D, r25
    1502:	10 92 3e 05 	sts	0x053E, r1
    1506:	50 93 40 05 	sts	0x0540, r21
    150a:	40 93 3f 05 	sts	0x053F, r20
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    150e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = Length,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	return USB_Host_SendControlRequest(Buffer);
    1512:	cb 01       	movw	r24, r22
}
    1514:	e1 cd       	rjmp	.-1086   	; 0x10d8 <USB_Host_SendControlRequest>

00001516 <RNDIS_GetEncapsulatedResponse>:

static uint8_t RNDIS_GetEncapsulatedResponse(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                                             void* Buffer,
                                             const uint16_t Length)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1516:	fc 01       	movw	r30, r24
    1518:	93 85       	ldd	r25, Z+11	; 0x0b
    151a:	81 ea       	ldi	r24, 0xA1	; 161
    151c:	80 93 39 05 	sts	0x0539, r24
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	80 93 3a 05 	sts	0x053A, r24
    1526:	10 92 3c 05 	sts	0x053C, r1
    152a:	10 92 3b 05 	sts	0x053B, r1
    152e:	90 93 3d 05 	sts	0x053D, r25
    1532:	10 92 3e 05 	sts	0x053E, r1
    1536:	50 93 40 05 	sts	0x0540, r21
    153a:	40 93 3f 05 	sts	0x053F, r20
    153e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = Length,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	return USB_Host_SendControlRequest(Buffer);
    1542:	cb 01       	movw	r24, r22
}
    1544:	c9 cd       	rjmp	.-1134   	; 0x10d8 <USB_Host_SendControlRequest>

00001546 <RNDIS_Host_QueryRNDISProperty>:

uint8_t RNDIS_Host_QueryRNDISProperty(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                                      const uint32_t Oid,
                                      void* Buffer,
                                      const uint16_t MaxLength)
{
    1546:	4f 92       	push	r4
    1548:	5f 92       	push	r5
    154a:	6f 92       	push	r6
    154c:	7f 92       	push	r7
    154e:	8f 92       	push	r8
    1550:	9f 92       	push	r9
    1552:	af 92       	push	r10
    1554:	bf 92       	push	r11
    1556:	cf 92       	push	r12
    1558:	df 92       	push	r13
    155a:	ef 92       	push	r14
    155c:	ff 92       	push	r15
    155e:	0f 93       	push	r16
    1560:	1f 93       	push	r17
    1562:	df 93       	push	r29
    1564:	cf 93       	push	r28
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	6c 97       	sbiw	r28, 0x1c	; 28
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	f8 94       	cli
    1570:	de bf       	out	0x3e, r29	; 62
    1572:	0f be       	out	0x3f, r0	; 63
    1574:	cd bf       	out	0x3d, r28	; 61
    1576:	7c 01       	movw	r14, r24
    1578:	52 2e       	mov	r5, r18
    157a:	43 2e       	mov	r4, r19
    157c:	58 01       	movw	r10, r16
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);

	return HOST_SENDCONTROL_Successful;
}
    157e:	6d b6       	in	r6, 0x3d	; 61
    1580:	7e b6       	in	r7, 0x3e	; 62

	struct
	{
		RNDIS_Query_Complete_t QueryMessageResponse;
		uint8_t                ContiguousBuffer[MaxLength];
	} QueryMessageResponseData;
    1582:	28 e1       	ldi	r18, 0x18	; 24
    1584:	82 2e       	mov	r8, r18
    1586:	91 2c       	mov	r9, r1
    1588:	80 0e       	add	r8, r16
    158a:	91 1e       	adc	r9, r17
    158c:	8d b7       	in	r24, 0x3d	; 61
    158e:	9e b7       	in	r25, 0x3e	; 62
    1590:	88 19       	sub	r24, r8
    1592:	99 09       	sbc	r25, r9
    1594:	0f b6       	in	r0, 0x3f	; 63
    1596:	f8 94       	cli
    1598:	9e bf       	out	0x3e, r25	; 62
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	8d bf       	out	0x3d, r24	; 61
    159e:	cd b6       	in	r12, 0x3d	; 61
    15a0:	de b6       	in	r13, 0x3e	; 62
    15a2:	08 94       	sec
    15a4:	c1 1c       	adc	r12, r1
    15a6:	d1 1c       	adc	r13, r1

	QueryMessage.MessageType    = CPU_TO_LE32(REMOTE_NDIS_QUERY_MSG);
    15a8:	84 e0       	ldi	r24, 0x04	; 4
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	a0 e0       	ldi	r26, 0x00	; 0
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	89 83       	std	Y+1, r24	; 0x01
    15b2:	9a 83       	std	Y+2, r25	; 0x02
    15b4:	ab 83       	std	Y+3, r26	; 0x03
    15b6:	bc 83       	std	Y+4, r27	; 0x04
	QueryMessage.MessageLength  = CPU_TO_LE32(sizeof(RNDIS_Query_Message_t));
    15b8:	8c e1       	ldi	r24, 0x1C	; 28
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	a0 e0       	ldi	r26, 0x00	; 0
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	8d 83       	std	Y+5, r24	; 0x05
    15c2:	9e 83       	std	Y+6, r25	; 0x06
    15c4:	af 83       	std	Y+7, r26	; 0x07
    15c6:	b8 87       	std	Y+8, r27	; 0x08
	QueryMessage.RequestId      = cpu_to_le32(RNDISInterfaceInfo->State.RequestID++);
    15c8:	f7 01       	movw	r30, r14
    15ca:	86 89       	ldd	r24, Z+22	; 0x16
    15cc:	97 89       	ldd	r25, Z+23	; 0x17
    15ce:	a0 8d       	ldd	r26, Z+24	; 0x18
    15d0:	b1 8d       	ldd	r27, Z+25	; 0x19
    15d2:	89 87       	std	Y+9, r24	; 0x09
    15d4:	9a 87       	std	Y+10, r25	; 0x0a
    15d6:	ab 87       	std	Y+11, r26	; 0x0b
    15d8:	bc 87       	std	Y+12, r27	; 0x0c
    15da:	01 96       	adiw	r24, 0x01	; 1
    15dc:	a1 1d       	adc	r26, r1
    15de:	b1 1d       	adc	r27, r1
    15e0:	86 8b       	std	Z+22, r24	; 0x16
    15e2:	97 8b       	std	Z+23, r25	; 0x17
    15e4:	a0 8f       	std	Z+24, r26	; 0x18
    15e6:	b1 8f       	std	Z+25, r27	; 0x19

	QueryMessage.Oid            = cpu_to_le32(Oid);
    15e8:	4d 87       	std	Y+13, r20	; 0x0d
    15ea:	5e 87       	std	Y+14, r21	; 0x0e
    15ec:	6f 87       	std	Y+15, r22	; 0x0f
    15ee:	78 8b       	std	Y+16, r23	; 0x10
	QueryMessage.InformationBufferLength = CPU_TO_LE32(0);
    15f0:	19 8a       	std	Y+17, r1	; 0x11
    15f2:	1a 8a       	std	Y+18, r1	; 0x12
    15f4:	1b 8a       	std	Y+19, r1	; 0x13
    15f6:	1c 8a       	std	Y+20, r1	; 0x14
	QueryMessage.InformationBufferOffset = CPU_TO_LE32(0);
    15f8:	1d 8a       	std	Y+21, r1	; 0x15
    15fa:	1e 8a       	std	Y+22, r1	; 0x16
    15fc:	1f 8a       	std	Y+23, r1	; 0x17
    15fe:	18 8e       	std	Y+24, r1	; 0x18
	QueryMessage.DeviceVcHandle = CPU_TO_LE32(0);
    1600:	19 8e       	std	Y+25, r1	; 0x19
    1602:	1a 8e       	std	Y+26, r1	; 0x1a
    1604:	1b 8e       	std	Y+27, r1	; 0x1b
    1606:	1c 8e       	std	Y+28, r1	; 0x1c

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(RNDISInterfaceInfo, &QueryMessage,
    1608:	c7 01       	movw	r24, r14
    160a:	be 01       	movw	r22, r28
    160c:	6f 5f       	subi	r22, 0xFF	; 255
    160e:	7f 4f       	sbci	r23, 0xFF	; 255
    1610:	4c e1       	ldi	r20, 0x1C	; 28
    1612:	50 e0       	ldi	r21, 0x00	; 0
    1614:	69 df       	rcall	.-302    	; 0x14e8 <RNDIS_SendEncapsulatedCommand>
    1616:	18 2f       	mov	r17, r24
    1618:	88 23       	and	r24, r24
    161a:	d1 f4       	brne	.+52     	; 0x1650 <RNDIS_Host_QueryRNDISProperty+0x10a>
	                                               sizeof(RNDIS_Query_Message_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(RNDISInterfaceInfo, &QueryMessageResponseData,
    161c:	c7 01       	movw	r24, r14
    161e:	b6 01       	movw	r22, r12
    1620:	a4 01       	movw	r20, r8
    1622:	79 df       	rcall	.-270    	; 0x1516 <RNDIS_GetEncapsulatedResponse>
    1624:	18 2f       	mov	r17, r24
    1626:	88 23       	and	r24, r24
    1628:	99 f4       	brne	.+38     	; 0x1650 <RNDIS_Host_QueryRNDISProperty+0x10a>
	                                               sizeof(QueryMessageResponseData))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (QueryMessageResponseData.QueryMessageResponse.Status != CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS))
    162a:	f6 01       	movw	r30, r12
    162c:	84 85       	ldd	r24, Z+12	; 0x0c
    162e:	95 85       	ldd	r25, Z+13	; 0x0d
    1630:	a6 85       	ldd	r26, Z+14	; 0x0e
    1632:	b7 85       	ldd	r27, Z+15	; 0x0f
    1634:	00 97       	sbiw	r24, 0x00	; 0
    1636:	a1 05       	cpc	r26, r1
    1638:	b1 05       	cpc	r27, r1
    163a:	11 f0       	breq	.+4      	; 0x1640 <RNDIS_Host_QueryRNDISProperty+0xfa>
    163c:	10 e8       	ldi	r17, 0x80	; 128
    163e:	08 c0       	rjmp	.+16     	; 0x1650 <RNDIS_Host_QueryRNDISProperty+0x10a>
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);
    1640:	96 01       	movw	r18, r12
    1642:	28 5e       	subi	r18, 0xE8	; 232
    1644:	3f 4f       	sbci	r19, 0xFF	; 255
    1646:	85 2d       	mov	r24, r5
    1648:	94 2d       	mov	r25, r4
    164a:	b9 01       	movw	r22, r18
    164c:	a5 01       	movw	r20, r10
    164e:	4f d2       	rcall	.+1182   	; 0x1aee <memcpy>

	return HOST_SENDCONTROL_Successful;
}
    1650:	81 2f       	mov	r24, r17
    1652:	0f b6       	in	r0, 0x3f	; 63
    1654:	f8 94       	cli
    1656:	7e be       	out	0x3e, r7	; 62
    1658:	0f be       	out	0x3f, r0	; 63
    165a:	6d be       	out	0x3d, r6	; 61
    165c:	6c 96       	adiw	r28, 0x1c	; 28
    165e:	0f b6       	in	r0, 0x3f	; 63
    1660:	f8 94       	cli
    1662:	de bf       	out	0x3e, r29	; 62
    1664:	0f be       	out	0x3f, r0	; 63
    1666:	cd bf       	out	0x3d, r28	; 61
    1668:	cf 91       	pop	r28
    166a:	df 91       	pop	r29
    166c:	1f 91       	pop	r17
    166e:	0f 91       	pop	r16
    1670:	ff 90       	pop	r15
    1672:	ef 90       	pop	r14
    1674:	df 90       	pop	r13
    1676:	cf 90       	pop	r12
    1678:	bf 90       	pop	r11
    167a:	af 90       	pop	r10
    167c:	9f 90       	pop	r9
    167e:	8f 90       	pop	r8
    1680:	7f 90       	pop	r7
    1682:	6f 90       	pop	r6
    1684:	5f 90       	pop	r5
    1686:	4f 90       	pop	r4
    1688:	08 95       	ret

0000168a <RNDIS_Host_SetRNDISProperty>:

uint8_t RNDIS_Host_SetRNDISProperty(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                                    const uint32_t Oid,
                                    void* Buffer,
                                    const uint16_t Length)
{
    168a:	6f 92       	push	r6
    168c:	7f 92       	push	r7
    168e:	8f 92       	push	r8
    1690:	9f 92       	push	r9
    1692:	af 92       	push	r10
    1694:	bf 92       	push	r11
    1696:	cf 92       	push	r12
    1698:	df 92       	push	r13
    169a:	ef 92       	push	r14
    169c:	ff 92       	push	r15
    169e:	0f 93       	push	r16
    16a0:	1f 93       	push	r17
    16a2:	df 93       	push	r29
    16a4:	cf 93       	push	r28
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	60 97       	sbiw	r28, 0x10	; 16
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	f8 94       	cli
    16b0:	de bf       	out	0x3e, r29	; 62
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	cd bf       	out	0x3d, r28	; 61
    16b6:	4c 01       	movw	r8, r24

	if (SetMessageResponse.Status != CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS))
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;

	return HOST_SENDCONTROL_Successful;
}
    16b8:	6d b6       	in	r6, 0x3d	; 61
    16ba:	7e b6       	in	r7, 0x3e	; 62

	struct
	{
		RNDIS_Set_Message_t SetMessage;
		uint8_t             ContiguousBuffer[Length];
	} SetMessageData;
    16bc:	ec e1       	ldi	r30, 0x1C	; 28
    16be:	ce 2e       	mov	r12, r30
    16c0:	d1 2c       	mov	r13, r1
    16c2:	c0 0e       	add	r12, r16
    16c4:	d1 1e       	adc	r13, r17
    16c6:	8d b7       	in	r24, 0x3d	; 61
    16c8:	9e b7       	in	r25, 0x3e	; 62
    16ca:	8c 19       	sub	r24, r12
    16cc:	9d 09       	sbc	r25, r13
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	f8 94       	cli
    16d2:	9e bf       	out	0x3e, r25	; 62
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	8d bf       	out	0x3d, r24	; 61
    16d8:	ad b6       	in	r10, 0x3d	; 61
    16da:	be b6       	in	r11, 0x3e	; 62
    16dc:	08 94       	sec
    16de:	a1 1c       	adc	r10, r1
    16e0:	b1 1c       	adc	r11, r1

	RNDIS_Set_Complete_t SetMessageResponse;

	SetMessageData.SetMessage.MessageType    = CPU_TO_LE32(REMOTE_NDIS_SET_MSG);
    16e2:	85 e0       	ldi	r24, 0x05	; 5
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	a0 e0       	ldi	r26, 0x00	; 0
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	ed b7       	in	r30, 0x3d	; 61
    16ec:	fe b7       	in	r31, 0x3e	; 62
    16ee:	81 83       	std	Z+1, r24	; 0x01
    16f0:	92 83       	std	Z+2, r25	; 0x02
    16f2:	a3 83       	std	Z+3, r26	; 0x03
    16f4:	b4 83       	std	Z+4, r27	; 0x04
	SetMessageData.SetMessage.MessageLength  = cpu_to_le32(sizeof(RNDIS_Set_Message_t) + Length);
    16f6:	ee 24       	eor	r14, r14
    16f8:	ff 24       	eor	r15, r15
    16fa:	f5 01       	movw	r30, r10
    16fc:	c4 82       	std	Z+4, r12	; 0x04
    16fe:	d5 82       	std	Z+5, r13	; 0x05
    1700:	e6 82       	std	Z+6, r14	; 0x06
    1702:	f7 82       	std	Z+7, r15	; 0x07
	SetMessageData.SetMessage.RequestId      = cpu_to_le32(RNDISInterfaceInfo->State.RequestID++);
    1704:	f4 01       	movw	r30, r8
    1706:	86 89       	ldd	r24, Z+22	; 0x16
    1708:	97 89       	ldd	r25, Z+23	; 0x17
    170a:	a0 8d       	ldd	r26, Z+24	; 0x18
    170c:	b1 8d       	ldd	r27, Z+25	; 0x19
    170e:	f5 01       	movw	r30, r10
    1710:	80 87       	std	Z+8, r24	; 0x08
    1712:	91 87       	std	Z+9, r25	; 0x09
    1714:	a2 87       	std	Z+10, r26	; 0x0a
    1716:	b3 87       	std	Z+11, r27	; 0x0b
    1718:	01 96       	adiw	r24, 0x01	; 1
    171a:	a1 1d       	adc	r26, r1
    171c:	b1 1d       	adc	r27, r1
    171e:	f4 01       	movw	r30, r8
    1720:	86 8b       	std	Z+22, r24	; 0x16
    1722:	97 8b       	std	Z+23, r25	; 0x17
    1724:	a0 8f       	std	Z+24, r26	; 0x18
    1726:	b1 8f       	std	Z+25, r27	; 0x19

	SetMessageData.SetMessage.Oid            = cpu_to_le32(Oid);
    1728:	f5 01       	movw	r30, r10
    172a:	44 87       	std	Z+12, r20	; 0x0c
    172c:	55 87       	std	Z+13, r21	; 0x0d
    172e:	66 87       	std	Z+14, r22	; 0x0e
    1730:	77 87       	std	Z+15, r23	; 0x0f
	SetMessageData.SetMessage.InformationBufferLength = cpu_to_le32(Length);
    1732:	c8 01       	movw	r24, r16
    1734:	a0 e0       	ldi	r26, 0x00	; 0
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	80 8b       	std	Z+16, r24	; 0x10
    173a:	91 8b       	std	Z+17, r25	; 0x11
    173c:	a2 8b       	std	Z+18, r26	; 0x12
    173e:	b3 8b       	std	Z+19, r27	; 0x13
	SetMessageData.SetMessage.InformationBufferOffset = CPU_TO_LE32(sizeof(RNDIS_Set_Message_t) - sizeof(RNDIS_Message_Header_t));
    1740:	84 e1       	ldi	r24, 0x14	; 20
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	a0 e0       	ldi	r26, 0x00	; 0
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	84 8b       	std	Z+20, r24	; 0x14
    174a:	95 8b       	std	Z+21, r25	; 0x15
    174c:	a6 8b       	std	Z+22, r26	; 0x16
    174e:	b7 8b       	std	Z+23, r27	; 0x17
	SetMessageData.SetMessage.DeviceVcHandle = CPU_TO_LE32(0);
    1750:	10 8e       	std	Z+24, r1	; 0x18
    1752:	11 8e       	std	Z+25, r1	; 0x19
    1754:	12 8e       	std	Z+26, r1	; 0x1a
    1756:	13 8e       	std	Z+27, r1	; 0x1b

	memcpy(&SetMessageData.ContiguousBuffer, Buffer, Length);
    1758:	4d b7       	in	r20, 0x3d	; 61
    175a:	5e b7       	in	r21, 0x3e	; 62
    175c:	43 5e       	subi	r20, 0xE3	; 227
    175e:	5f 4f       	sbci	r21, 0xFF	; 255
    1760:	ca 01       	movw	r24, r20
    1762:	b9 01       	movw	r22, r18
    1764:	a8 01       	movw	r20, r16
    1766:	c3 d1       	rcall	.+902    	; 0x1aee <memcpy>

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(RNDISInterfaceInfo, &SetMessageData,
    1768:	f5 01       	movw	r30, r10
    176a:	44 81       	ldd	r20, Z+4	; 0x04
    176c:	55 81       	ldd	r21, Z+5	; 0x05
    176e:	c4 01       	movw	r24, r8
    1770:	b5 01       	movw	r22, r10
    1772:	ba de       	rcall	.-652    	; 0x14e8 <RNDIS_SendEncapsulatedCommand>
    1774:	28 2f       	mov	r18, r24
    1776:	88 23       	and	r24, r24
    1778:	99 f4       	brne	.+38     	; 0x17a0 <RNDIS_Host_SetRNDISProperty+0x116>
	                                               SetMessageData.SetMessage.MessageLength)) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(RNDISInterfaceInfo, &SetMessageResponse,
    177a:	c4 01       	movw	r24, r8
    177c:	be 01       	movw	r22, r28
    177e:	6f 5f       	subi	r22, 0xFF	; 255
    1780:	7f 4f       	sbci	r23, 0xFF	; 255
    1782:	40 e1       	ldi	r20, 0x10	; 16
    1784:	50 e0       	ldi	r21, 0x00	; 0
    1786:	c7 de       	rcall	.-626    	; 0x1516 <RNDIS_GetEncapsulatedResponse>
    1788:	28 2f       	mov	r18, r24
    178a:	88 23       	and	r24, r24
    178c:	49 f4       	brne	.+18     	; 0x17a0 <RNDIS_Host_SetRNDISProperty+0x116>
	                                               sizeof(RNDIS_Set_Complete_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (SetMessageResponse.Status != CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS))
    178e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1790:	9e 85       	ldd	r25, Y+14	; 0x0e
    1792:	af 85       	ldd	r26, Y+15	; 0x0f
    1794:	b8 89       	ldd	r27, Y+16	; 0x10
    1796:	00 97       	sbiw	r24, 0x00	; 0
    1798:	a1 05       	cpc	r26, r1
    179a:	b1 05       	cpc	r27, r1
    179c:	09 f0       	breq	.+2      	; 0x17a0 <RNDIS_Host_SetRNDISProperty+0x116>
    179e:	20 e8       	ldi	r18, 0x80	; 128
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;

	return HOST_SENDCONTROL_Successful;
}
    17a0:	82 2f       	mov	r24, r18
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	f8 94       	cli
    17a6:	7e be       	out	0x3e, r7	; 62
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	6d be       	out	0x3d, r6	; 61
    17ac:	60 96       	adiw	r28, 0x10	; 16
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	f8 94       	cli
    17b2:	de bf       	out	0x3e, r29	; 62
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	cd bf       	out	0x3d, r28	; 61
    17b8:	cf 91       	pop	r28
    17ba:	df 91       	pop	r29
    17bc:	1f 91       	pop	r17
    17be:	0f 91       	pop	r16
    17c0:	ff 90       	pop	r15
    17c2:	ef 90       	pop	r14
    17c4:	df 90       	pop	r13
    17c6:	cf 90       	pop	r12
    17c8:	bf 90       	pop	r11
    17ca:	af 90       	pop	r10
    17cc:	9f 90       	pop	r9
    17ce:	8f 90       	pop	r8
    17d0:	7f 90       	pop	r7
    17d2:	6f 90       	pop	r6
    17d4:	08 95       	ret

000017d6 <RNDIS_Host_InitializeDevice>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t RNDIS_Host_InitializeDevice(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo)
{
    17d6:	0f 93       	push	r16
    17d8:	1f 93       	push	r17
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
    17e2:	cc 54       	subi	r28, 0x4C	; 76
    17e4:	d0 40       	sbci	r29, 0x00	; 0
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	de bf       	out	0x3e, r29	; 62
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	cd bf       	out	0x3d, r28	; 61
    17f0:	8c 01       	movw	r16, r24
	uint8_t ErrorCode;

	RNDIS_Initialize_Message_t  InitMessage;
	RNDIS_Initialize_Complete_t InitMessageResponse;

	InitMessage.MessageType     = CPU_TO_LE32(REMOTE_NDIS_INITIALIZE_MSG);
    17f2:	82 e0       	ldi	r24, 0x02	; 2
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	a0 e0       	ldi	r26, 0x00	; 0
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	89 83       	std	Y+1, r24	; 0x01
    17fc:	9a 83       	std	Y+2, r25	; 0x02
    17fe:	ab 83       	std	Y+3, r26	; 0x03
    1800:	bc 83       	std	Y+4, r27	; 0x04
	InitMessage.MessageLength   = CPU_TO_LE32(sizeof(RNDIS_Initialize_Message_t));
    1802:	88 e1       	ldi	r24, 0x18	; 24
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	a0 e0       	ldi	r26, 0x00	; 0
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	8d 83       	std	Y+5, r24	; 0x05
    180c:	9e 83       	std	Y+6, r25	; 0x06
    180e:	af 83       	std	Y+7, r26	; 0x07
    1810:	b8 87       	std	Y+8, r27	; 0x08
	InitMessage.RequestId       = cpu_to_le32(RNDISInterfaceInfo->State.RequestID++);
    1812:	f8 01       	movw	r30, r16
    1814:	86 89       	ldd	r24, Z+22	; 0x16
    1816:	97 89       	ldd	r25, Z+23	; 0x17
    1818:	a0 8d       	ldd	r26, Z+24	; 0x18
    181a:	b1 8d       	ldd	r27, Z+25	; 0x19
    181c:	89 87       	std	Y+9, r24	; 0x09
    181e:	9a 87       	std	Y+10, r25	; 0x0a
    1820:	ab 87       	std	Y+11, r26	; 0x0b
    1822:	bc 87       	std	Y+12, r27	; 0x0c
    1824:	01 96       	adiw	r24, 0x01	; 1
    1826:	a1 1d       	adc	r26, r1
    1828:	b1 1d       	adc	r27, r1
    182a:	86 8b       	std	Z+22, r24	; 0x16
    182c:	97 8b       	std	Z+23, r25	; 0x17
    182e:	a0 8f       	std	Z+24, r26	; 0x18
    1830:	b1 8f       	std	Z+25, r27	; 0x19

	InitMessage.MajorVersion    = CPU_TO_LE32(REMOTE_NDIS_VERSION_MAJOR);
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	a0 e0       	ldi	r26, 0x00	; 0
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	8d 87       	std	Y+13, r24	; 0x0d
    183c:	9e 87       	std	Y+14, r25	; 0x0e
    183e:	af 87       	std	Y+15, r26	; 0x0f
    1840:	b8 8b       	std	Y+16, r27	; 0x10
	InitMessage.MinorVersion    = CPU_TO_LE32(REMOTE_NDIS_VERSION_MINOR);
    1842:	19 8a       	std	Y+17, r1	; 0x11
    1844:	1a 8a       	std	Y+18, r1	; 0x12
    1846:	1b 8a       	std	Y+19, r1	; 0x13
    1848:	1c 8a       	std	Y+20, r1	; 0x14
	InitMessage.MaxTransferSize = cpu_to_le32(RNDISInterfaceInfo->Config.HostMaxPacketSize);
    184a:	86 81       	ldd	r24, Z+6	; 0x06
    184c:	97 81       	ldd	r25, Z+7	; 0x07
    184e:	a0 85       	ldd	r26, Z+8	; 0x08
    1850:	b1 85       	ldd	r27, Z+9	; 0x09
    1852:	8d 8b       	std	Y+21, r24	; 0x15
    1854:	9e 8b       	std	Y+22, r25	; 0x16
    1856:	af 8b       	std	Y+23, r26	; 0x17
    1858:	b8 8f       	std	Y+24, r27	; 0x18

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(RNDISInterfaceInfo, &InitMessage,
    185a:	c8 01       	movw	r24, r16
    185c:	be 01       	movw	r22, r28
    185e:	6f 5f       	subi	r22, 0xFF	; 255
    1860:	7f 4f       	sbci	r23, 0xFF	; 255
    1862:	48 e1       	ldi	r20, 0x18	; 24
    1864:	50 e0       	ldi	r21, 0x00	; 0
    1866:	40 de       	rcall	.-896    	; 0x14e8 <RNDIS_SendEncapsulatedCommand>
    1868:	28 2f       	mov	r18, r24
    186a:	88 23       	and	r24, r24
    186c:	f9 f4       	brne	.+62     	; 0x18ac <RNDIS_Host_InitializeDevice+0xd6>
	                                               sizeof(RNDIS_Initialize_Message_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(RNDISInterfaceInfo, &InitMessageResponse,
    186e:	c8 01       	movw	r24, r16
    1870:	be 01       	movw	r22, r28
    1872:	67 5e       	subi	r22, 0xE7	; 231
    1874:	7f 4f       	sbci	r23, 0xFF	; 255
    1876:	44 e3       	ldi	r20, 0x34	; 52
    1878:	50 e0       	ldi	r21, 0x00	; 0
    187a:	4d de       	rcall	.-870    	; 0x1516 <RNDIS_GetEncapsulatedResponse>
    187c:	28 2f       	mov	r18, r24
    187e:	88 23       	and	r24, r24
    1880:	a9 f4       	brne	.+42     	; 0x18ac <RNDIS_Host_InitializeDevice+0xd6>
	                                               sizeof(RNDIS_Initialize_Complete_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (InitMessageResponse.Status != CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS))
    1882:	8d a1       	ldd	r24, Y+37	; 0x25
    1884:	9e a1       	ldd	r25, Y+38	; 0x26
    1886:	af a1       	ldd	r26, Y+39	; 0x27
    1888:	b8 a5       	ldd	r27, Y+40	; 0x28
    188a:	00 97       	sbiw	r24, 0x00	; 0
    188c:	a1 05       	cpc	r26, r1
    188e:	b1 05       	cpc	r27, r1
    1890:	11 f0       	breq	.+4      	; 0x1896 <RNDIS_Host_InitializeDevice+0xc0>
    1892:	20 e8       	ldi	r18, 0x80	; 128
    1894:	0b c0       	rjmp	.+22     	; 0x18ac <RNDIS_Host_InitializeDevice+0xd6>
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;

	RNDISInterfaceInfo->State.DeviceMaxPacketSize = le32_to_cpu(InitMessageResponse.MaxTransferSize);
    1896:	fe 01       	movw	r30, r28
    1898:	fd 96       	adiw	r30, 0x3d	; 61
    189a:	80 81       	ld	r24, Z
    189c:	91 81       	ldd	r25, Z+1	; 0x01
    189e:	a2 81       	ldd	r26, Z+2	; 0x02
    18a0:	b3 81       	ldd	r27, Z+3	; 0x03
    18a2:	f8 01       	movw	r30, r16
    18a4:	82 8b       	std	Z+18, r24	; 0x12
    18a6:	93 8b       	std	Z+19, r25	; 0x13
    18a8:	a4 8b       	std	Z+20, r26	; 0x14
    18aa:	b5 8b       	std	Z+21, r27	; 0x15

	return HOST_SENDCONTROL_Successful;
}
    18ac:	82 2f       	mov	r24, r18
    18ae:	c4 5b       	subi	r28, 0xB4	; 180
    18b0:	df 4f       	sbci	r29, 0xFF	; 255
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	de bf       	out	0x3e, r29	; 62
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	cd bf       	out	0x3d, r28	; 61
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	1f 91       	pop	r17
    18c2:	0f 91       	pop	r16
    18c4:	08 95       	ret

000018c6 <RNDIS_Host_ConfigurePipes>:
#include "RNDIS.h"

uint8_t RNDIS_Host_ConfigurePipes(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                                  uint16_t ConfigDescriptorSize,
                                  void* ConfigDescriptorData)
{
    18c6:	4f 92       	push	r4
    18c8:	5f 92       	push	r5
    18ca:	6f 92       	push	r6
    18cc:	7f 92       	push	r7
    18ce:	8f 92       	push	r8
    18d0:	9f 92       	push	r9
    18d2:	af 92       	push	r10
    18d4:	bf 92       	push	r11
    18d6:	cf 92       	push	r12
    18d8:	df 92       	push	r13
    18da:	ef 92       	push	r14
    18dc:	ff 92       	push	r15
    18de:	0f 93       	push	r16
    18e0:	1f 93       	push	r17
    18e2:	df 93       	push	r29
    18e4:	cf 93       	push	r28
    18e6:	00 d0       	rcall	.+0      	; 0x18e8 <RNDIS_Host_ConfigurePipes+0x22>
    18e8:	00 d0       	rcall	.+0      	; 0x18ea <RNDIS_Host_ConfigurePipes+0x24>
    18ea:	0f 92       	push	r0
    18ec:	cd b7       	in	r28, 0x3d	; 61
    18ee:	de b7       	in	r29, 0x3e	; 62
    18f0:	6c 01       	movw	r12, r24
    18f2:	7a 83       	std	Y+2, r23	; 0x02
    18f4:	69 83       	std	Y+1, r22	; 0x01
    18f6:	5c 83       	std	Y+4, r21	; 0x04
    18f8:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint        = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint       = NULL;
	USB_Descriptor_Endpoint_t*  NotificationEndpoint  = NULL;
	USB_Descriptor_Interface_t* RNDISControlInterface = NULL;

	memset(&RNDISInterfaceInfo->State, 0x00, sizeof(RNDISInterfaceInfo->State));
    18fa:	0a 96       	adiw	r24, 0x0a	; 10
    18fc:	fc 01       	movw	r30, r24
    18fe:	80 e1       	ldi	r24, 0x10	; 16
    1900:	df 01       	movw	r26, r30
    1902:	1d 92       	st	X+, r1
    1904:	8a 95       	dec	r24
    1906:	e9 f7       	brne	.-6      	; 0x1902 <RNDIS_Host_ConfigurePipes+0x3c>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1908:	eb 81       	ldd	r30, Y+3	; 0x03
    190a:	fc 81       	ldd	r31, Y+4	; 0x04
    190c:	81 81       	ldd	r24, Z+1	; 0x01
    190e:	82 30       	cpi	r24, 0x02	; 2
    1910:	11 f0       	breq	.+4      	; 0x1916 <RNDIS_Host_ConfigurePipes+0x50>
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	a4 c0       	rjmp	.+328    	; 0x1a5e <RNDIS_Host_ConfigurePipes+0x198>
	  return RNDIS_ENUMERROR_InvalidConfigDescriptor;

	RNDISControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1916:	2f 01       	movw	r4, r30
    1918:	66 24       	eor	r6, r6
    191a:	77 24       	eor	r7, r7
    191c:	88 24       	eor	r8, r8
    191e:	99 24       	eor	r9, r9
    1920:	aa 24       	eor	r10, r10
    1922:	bb 24       	eor	r11, r11

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		if (!(RNDISControlInterface) ||
    1924:	f3 e0       	ldi	r31, 0x03	; 3
    1926:	ef 2e       	mov	r14, r31
    1928:	f1 2c       	mov	r15, r1
    192a:	ec 0e       	add	r14, r28
    192c:	fd 1e       	adc	r15, r29
    192e:	8e 01       	movw	r16, r28
    1930:	0f 5f       	subi	r16, 0xFF	; 255
    1932:	1f 4f       	sbci	r17, 0xFF	; 255
    1934:	04 c0       	rjmp	.+8      	; 0x193e <RNDIS_Host_ConfigurePipes+0x78>
	memset(&RNDISInterfaceInfo->State, 0x00, sizeof(RNDISInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return RNDIS_ENUMERROR_InvalidConfigDescriptor;

	RNDISControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1936:	88 24       	eor	r8, r8
    1938:	99 24       	eor	r9, r9
    193a:	66 24       	eor	r6, r6
    193c:	77 24       	eor	r7, r7

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		if (!(RNDISControlInterface) ||
    193e:	41 14       	cp	r4, r1
    1940:	51 04       	cpc	r5, r1
    1942:	39 f0       	breq	.+14     	; 0x1952 <RNDIS_Host_ConfigurePipes+0x8c>
    1944:	c8 01       	movw	r24, r16
    1946:	b7 01       	movw	r22, r14
    1948:	45 e4       	ldi	r20, 0x45	; 69
    194a:	5d e0       	ldi	r21, 0x0D	; 13
    194c:	fd da       	rcall	.-2566   	; 0xf48 <USB_GetNextDescriptorComp>
    194e:	88 23       	and	r24, r24
    1950:	b1 f0       	breq	.+44     	; 0x197e <RNDIS_Host_ConfigurePipes+0xb8>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (NotificationEndpoint)
    1952:	a1 14       	cp	r10, r1
    1954:	b1 04       	cpc	r11, r1
    1956:	41 f0       	breq	.+16     	; 0x1968 <RNDIS_Host_ConfigurePipes+0xa2>
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1958:	c8 01       	movw	r24, r16
    195a:	b7 01       	movw	r22, r14
    195c:	42 ed       	ldi	r20, 0xD2	; 210
    195e:	59 e0       	ldi	r21, 0x09	; 9
    1960:	f3 da       	rcall	.-2586   	; 0xf48 <USB_GetNextDescriptorComp>
    1962:	88 23       	and	r24, r24
    1964:	41 f3       	breq	.-48     	; 0x1936 <RNDIS_Host_ConfigurePipes+0x70>
    1966:	7a c0       	rjmp	.+244    	; 0x1a5c <RNDIS_Host_ConfigurePipes+0x196>
				DataINEndpoint  = NULL;
				DataOUTEndpoint = NULL;
			}
			else
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1968:	c8 01       	movw	r24, r16
    196a:	b7 01       	movw	r22, r14
    196c:	41 ec       	ldi	r20, 0xC1	; 193
    196e:	59 e0       	ldi	r21, 0x09	; 9
    1970:	eb da       	rcall	.-2602   	; 0xf48 <USB_GetNextDescriptorComp>
    1972:	88 23       	and	r24, r24
    1974:	09 f0       	breq	.+2      	; 0x1978 <RNDIS_Host_ConfigurePipes+0xb2>
    1976:	72 c0       	rjmp	.+228    	; 0x1a5c <RNDIS_Host_ConfigurePipes+0x196>
											  DCOMP_RNDIS_Host_NextRNDISControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return RNDIS_ENUMERROR_NoCompatibleInterfaceFound;
				}

				RNDISControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1978:	4b 80       	ldd	r4, Y+3	; 0x03
    197a:	5c 80       	ldd	r5, Y+4	; 0x04
    197c:	0e c0       	rjmp	.+28     	; 0x199a <RNDIS_Host_ConfigurePipes+0xd4>
			}

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    197e:	eb 81       	ldd	r30, Y+3	; 0x03
    1980:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1982:	82 81       	ldd	r24, Z+2	; 0x02
    1984:	87 fd       	sbrc	r24, 7
    1986:	02 c0       	rjmp	.+4      	; 0x198c <RNDIS_Host_ConfigurePipes+0xc6>
    1988:	4f 01       	movw	r8, r30
    198a:	07 c0       	rjmp	.+14     	; 0x199a <RNDIS_Host_ConfigurePipes+0xd4>
		{
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
    198c:	83 81       	ldd	r24, Z+3	; 0x03
    198e:	83 70       	andi	r24, 0x03	; 3
    1990:	83 30       	cpi	r24, 0x03	; 3
    1992:	11 f0       	breq	.+4      	; 0x1998 <RNDIS_Host_ConfigurePipes+0xd2>
    1994:	3f 01       	movw	r6, r30
    1996:	01 c0       	rjmp	.+2      	; 0x199a <RNDIS_Host_ConfigurePipes+0xd4>
    1998:	5f 01       	movw	r10, r30
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return RNDIS_ENUMERROR_InvalidConfigDescriptor;

	RNDISControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
    199a:	61 14       	cp	r6, r1
    199c:	71 04       	cpc	r7, r1
    199e:	79 f2       	breq	.-98     	; 0x193e <RNDIS_Host_ConfigurePipes+0x78>
    19a0:	81 14       	cp	r8, r1
    19a2:	91 04       	cpc	r9, r1
    19a4:	61 f2       	breq	.-104    	; 0x193e <RNDIS_Host_ConfigurePipes+0x78>
    19a6:	a1 14       	cp	r10, r1
    19a8:	b1 04       	cpc	r11, r1
    19aa:	49 f2       	breq	.-110    	; 0x193e <RNDIS_Host_ConfigurePipes+0x78>
    19ac:	91 e0       	ldi	r25, 0x01	; 1
		uint8_t  Token;
		uint8_t  EndpointAddress;
		uint8_t  InterruptPeriod;
		bool     DoubleBanked;

		if (PipeNum == RNDISInterfaceInfo->Config.DataINPipeNumber)
    19ae:	f6 01       	movw	r30, r12
    19b0:	80 81       	ld	r24, Z
    19b2:	98 17       	cp	r25, r24
    19b4:	69 f4       	brne	.+26     	; 0x19d0 <RNDIS_Host_ConfigurePipes+0x10a>
		{
			Size            = le16_to_cpu(DataINEndpoint->EndpointSize);
    19b6:	d3 01       	movw	r26, r6
    19b8:	14 96       	adiw	r26, 0x04	; 4
    19ba:	0d 91       	ld	r16, X+
    19bc:	1c 91       	ld	r17, X
    19be:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataINEndpoint->EndpointAddress;
    19c0:	12 96       	adiw	r26, 0x02	; 2
    19c2:	2c 91       	ld	r18, X
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = RNDISInterfaceInfo->Config.DataINPipeDoubleBank;
    19c4:	81 81       	ldd	r24, Z+1	; 0x01
			InterruptPeriod = 0;

			RNDISInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    19c6:	15 87       	std	Z+13, r17	; 0x0d
    19c8:	04 87       	std	Z+12, r16	; 0x0c
    19ca:	62 e0       	ldi	r22, 0x02	; 2
    19cc:	40 e1       	ldi	r20, 0x10	; 16
    19ce:	10 c0       	rjmp	.+32     	; 0x19f0 <RNDIS_Host_ConfigurePipes+0x12a>
		}
		else if (PipeNum == RNDISInterfaceInfo->Config.DataOUTPipeNumber)
    19d0:	f6 01       	movw	r30, r12
    19d2:	82 81       	ldd	r24, Z+2	; 0x02
    19d4:	98 17       	cp	r25, r24
    19d6:	71 f4       	brne	.+28     	; 0x19f4 <RNDIS_Host_ConfigurePipes+0x12e>
		{
			Size            = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    19d8:	d4 01       	movw	r26, r8
    19da:	14 96       	adiw	r26, 0x04	; 4
    19dc:	0d 91       	ld	r16, X+
    19de:	1c 91       	ld	r17, X
    19e0:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
    19e2:	12 96       	adiw	r26, 0x02	; 2
    19e4:	2c 91       	ld	r18, X
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = RNDISInterfaceInfo->Config.DataOUTPipeDoubleBank;
    19e6:	83 81       	ldd	r24, Z+3	; 0x03
			InterruptPeriod = 0;

			RNDISInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    19e8:	17 87       	std	Z+15, r17	; 0x0f
    19ea:	06 87       	std	Z+14, r16	; 0x0e
    19ec:	62 e0       	ldi	r22, 0x02	; 2
    19ee:	40 e2       	ldi	r20, 0x20	; 32
    19f0:	ff 24       	eor	r15, r15
    19f2:	13 c0       	rjmp	.+38     	; 0x1a1a <RNDIS_Host_ConfigurePipes+0x154>
		}
		else if (PipeNum == RNDISInterfaceInfo->Config.NotificationPipeNumber)
    19f4:	f6 01       	movw	r30, r12
    19f6:	84 81       	ldd	r24, Z+4	; 0x04
    19f8:	98 17       	cp	r25, r24
    19fa:	09 f5       	brne	.+66     	; 0x1a3e <RNDIS_Host_ConfigurePipes+0x178>
		{
			Size            = le16_to_cpu(NotificationEndpoint->EndpointSize);
    19fc:	d5 01       	movw	r26, r10
    19fe:	14 96       	adiw	r26, 0x04	; 4
    1a00:	0d 91       	ld	r16, X+
    1a02:	1c 91       	ld	r17, X
    1a04:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = NotificationEndpoint->EndpointAddress;
    1a06:	12 96       	adiw	r26, 0x02	; 2
    1a08:	2c 91       	ld	r18, X
    1a0a:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_INTERRUPT;
			DoubleBanked    = RNDISInterfaceInfo->Config.NotificationPipeDoubleBank;
    1a0c:	85 81       	ldd	r24, Z+5	; 0x05
			InterruptPeriod = NotificationEndpoint->PollingIntervalMS;
    1a0e:	16 96       	adiw	r26, 0x06	; 6
    1a10:	fc 90       	ld	r15, X

			RNDISInterfaceInfo->State.NotificationPipeSize = NotificationEndpoint->EndpointSize;
    1a12:	11 8b       	std	Z+17, r17	; 0x11
    1a14:	00 8b       	std	Z+16, r16	; 0x10
    1a16:	63 e0       	ldi	r22, 0x03	; 3
    1a18:	40 e1       	ldi	r20, 0x10	; 16
		else
		{
			continue;
		}
		
		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    1a1a:	88 23       	and	r24, r24
    1a1c:	11 f4       	brne	.+4      	; 0x1a22 <RNDIS_Host_ConfigurePipes+0x15c>
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	01 c0       	rjmp	.+2      	; 0x1a24 <RNDIS_Host_ConfigurePipes+0x15e>
    1a22:	34 e0       	ldi	r19, 0x04	; 4
    1a24:	89 2f       	mov	r24, r25
    1a26:	e3 2e       	mov	r14, r19
    1a28:	9d 83       	std	Y+5, r25	; 0x05
    1a2a:	1b d8       	rcall	.-4042   	; 0xa62 <Pipe_ConfigurePipe>
    1a2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a2e:	88 23       	and	r24, r24
    1a30:	11 f4       	brne	.+4      	; 0x1a36 <RNDIS_Host_ConfigurePipes+0x170>
    1a32:	83 e0       	ldi	r24, 0x03	; 3
    1a34:	14 c0       	rjmp	.+40     	; 0x1a5e <RNDIS_Host_ConfigurePipes+0x198>
		                         DoubleBanked ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE)))
		{
			return CDC_ENUMERROR_PipeConfigurationFailed;
		}
		
		if (InterruptPeriod)
    1a36:	ff 20       	and	r15, r15
    1a38:	11 f0       	breq	.+4      	; 0x1a3e <RNDIS_Host_ConfigurePipes+0x178>
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
    1a3a:	f0 92 ad 00 	sts	0x00AD, r15
		{
			DataOUTEndpoint = EndpointData;
		}
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    1a3e:	9f 5f       	subi	r25, 0xFF	; 255
    1a40:	97 30       	cpi	r25, 0x07	; 7
    1a42:	09 f0       	breq	.+2      	; 0x1a46 <RNDIS_Host_ConfigurePipes+0x180>
    1a44:	b4 cf       	rjmp	.-152    	; 0x19ae <RNDIS_Host_ConfigurePipes+0xe8>
		
		if (InterruptPeriod)
		  Pipe_SetInterruptPeriod(InterruptPeriod);
	}

	RNDISInterfaceInfo->State.ControlInterfaceNumber = RNDISControlInterface->InterfaceNumber;
    1a46:	f2 01       	movw	r30, r4
    1a48:	82 81       	ldd	r24, Z+2	; 0x02
    1a4a:	d6 01       	movw	r26, r12
    1a4c:	1b 96       	adiw	r26, 0x0b	; 11
    1a4e:	8c 93       	st	X, r24
    1a50:	1b 97       	sbiw	r26, 0x0b	; 11
	RNDISInterfaceInfo->State.IsActive = true;
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	1a 96       	adiw	r26, 0x0a	; 10
    1a56:	8c 93       	st	X, r24
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	01 c0       	rjmp	.+2      	; 0x1a5e <RNDIS_Host_ConfigurePipes+0x198>

	return RNDIS_ENUMERROR_NoError;
    1a5c:	82 e0       	ldi	r24, 0x02	; 2
}
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	cf 91       	pop	r28
    1a6a:	df 91       	pop	r29
    1a6c:	1f 91       	pop	r17
    1a6e:	0f 91       	pop	r16
    1a70:	ff 90       	pop	r15
    1a72:	ef 90       	pop	r14
    1a74:	df 90       	pop	r13
    1a76:	cf 90       	pop	r12
    1a78:	bf 90       	pop	r11
    1a7a:	af 90       	pop	r10
    1a7c:	9f 90       	pop	r9
    1a7e:	8f 90       	pop	r8
    1a80:	7f 90       	pop	r7
    1a82:	6f 90       	pop	r6
    1a84:	5f 90       	pop	r5
    1a86:	4f 90       	pop	r4
    1a88:	08 95       	ret

00001a8a <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint>:

	return DESCRIPTOR_SEARCH_NotFound;
}

static uint8_t DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint(void* const CurrentDescriptor)
{
    1a8a:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1a8c:	81 81       	ldd	r24, Z+1	; 0x01
    1a8e:	85 30       	cpi	r24, 0x05	; 5
    1a90:	51 f4       	brne	.+20     	; 0x1aa6 <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint+0x1c>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
    1a92:	83 81       	ldd	r24, Z+3	; 0x03
    1a94:	83 70       	andi	r24, 0x03	; 3
    1a96:	82 50       	subi	r24, 0x02	; 2
    1a98:	82 30       	cpi	r24, 0x02	; 2
    1a9a:	48 f4       	brcc	.+18     	; 0x1aae <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint+0x24>
    1a9c:	82 81       	ldd	r24, Z+2	; 0x02
    1a9e:	53 d8       	rcall	.-3930   	; 0xb46 <Pipe_IsEndpointBound>
    1aa0:	88 23       	and	r24, r24
    1aa2:	29 f4       	brne	.+10     	; 0x1aae <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint+0x24>
    1aa4:	08 95       	ret
		    !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
    1aa6:	84 30       	cpi	r24, 0x04	; 4
    1aa8:	11 f4       	brne	.+4      	; 0x1aae <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint+0x24>
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	08 95       	ret
    1aae:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1ab0:	08 95       	ret

00001ab2 <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    1ab2:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1ab4:	80 91 c8 00 	lds	r24, 0x00C8
    1ab8:	85 ff       	sbrs	r24, 5
    1aba:	fc cf       	rjmp	.-8      	; 0x1ab4 <Serial_putchar+0x2>
				UDR1 = DataByte;
    1abc:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	08 95       	ret

00001ac6 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1ac6:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1aca:	87 fd       	sbrc	r24, 7
    1acc:	03 c0       	rjmp	.+6      	; 0x1ad4 <Serial_getchar+0xe>
    1ace:	2e ef       	ldi	r18, 0xFE	; 254
    1ad0:	3f ef       	ldi	r19, 0xFF	; 255
    1ad2:	0b c0       	rjmp	.+22     	; 0x1aea <Serial_getchar+0x24>
    1ad4:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1ad8:	87 fd       	sbrc	r24, 7
    1ada:	03 c0       	rjmp	.+6      	; 0x1ae2 <Serial_getchar+0x1c>
    1adc:	2f ef       	ldi	r18, 0xFF	; 255
    1ade:	3f ef       	ldi	r19, 0xFF	; 255
    1ae0:	04 c0       	rjmp	.+8      	; 0x1aea <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    1ae2:	80 91 ce 00 	lds	r24, 0x00CE
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    1aea:	c9 01       	movw	r24, r18
    1aec:	08 95       	ret

00001aee <memcpy>:
    1aee:	fb 01       	movw	r30, r22
    1af0:	dc 01       	movw	r26, r24
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <memcpy+0xa>
    1af4:	01 90       	ld	r0, Z+
    1af6:	0d 92       	st	X+, r0
    1af8:	41 50       	subi	r20, 0x01	; 1
    1afa:	50 40       	sbci	r21, 0x00	; 0
    1afc:	d8 f7       	brcc	.-10     	; 0x1af4 <memcpy+0x6>
    1afe:	08 95       	ret

00001b00 <printf>:
    1b00:	df 93       	push	r29
    1b02:	cf 93       	push	r28
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
    1b08:	fe 01       	movw	r30, r28
    1b0a:	35 96       	adiw	r30, 0x05	; 5
    1b0c:	61 91       	ld	r22, Z+
    1b0e:	71 91       	ld	r23, Z+
    1b10:	80 91 52 05 	lds	r24, 0x0552
    1b14:	90 91 53 05 	lds	r25, 0x0553
    1b18:	af 01       	movw	r20, r30
    1b1a:	5a d0       	rcall	.+180    	; 0x1bd0 <vfprintf>
    1b1c:	cf 91       	pop	r28
    1b1e:	df 91       	pop	r29
    1b20:	08 95       	ret

00001b22 <printf_P>:
    1b22:	df 93       	push	r29
    1b24:	cf 93       	push	r28
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	35 96       	adiw	r30, 0x05	; 5
    1b2e:	61 91       	ld	r22, Z+
    1b30:	71 91       	ld	r23, Z+
    1b32:	a0 91 52 05 	lds	r26, 0x0552
    1b36:	b0 91 53 05 	lds	r27, 0x0553
    1b3a:	13 96       	adiw	r26, 0x03	; 3
    1b3c:	8c 91       	ld	r24, X
    1b3e:	13 97       	sbiw	r26, 0x03	; 3
    1b40:	88 60       	ori	r24, 0x08	; 8
    1b42:	13 96       	adiw	r26, 0x03	; 3
    1b44:	8c 93       	st	X, r24
    1b46:	80 91 52 05 	lds	r24, 0x0552
    1b4a:	90 91 53 05 	lds	r25, 0x0553
    1b4e:	af 01       	movw	r20, r30
    1b50:	3f d0       	rcall	.+126    	; 0x1bd0 <vfprintf>
    1b52:	e0 91 52 05 	lds	r30, 0x0552
    1b56:	f0 91 53 05 	lds	r31, 0x0553
    1b5a:	23 81       	ldd	r18, Z+3	; 0x03
    1b5c:	27 7f       	andi	r18, 0xF7	; 247
    1b5e:	23 83       	std	Z+3, r18	; 0x03
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	08 95       	ret

00001b66 <puts_P>:
    1b66:	0f 93       	push	r16
    1b68:	1f 93       	push	r17
    1b6a:	cf 93       	push	r28
    1b6c:	df 93       	push	r29
    1b6e:	ec 01       	movw	r28, r24
    1b70:	e0 91 52 05 	lds	r30, 0x0552
    1b74:	f0 91 53 05 	lds	r31, 0x0553
    1b78:	83 81       	ldd	r24, Z+3	; 0x03
    1b7a:	81 ff       	sbrs	r24, 1
    1b7c:	21 c0       	rjmp	.+66     	; 0x1bc0 <puts_P+0x5a>
    1b7e:	00 e0       	ldi	r16, 0x00	; 0
    1b80:	10 e0       	ldi	r17, 0x00	; 0
    1b82:	0e c0       	rjmp	.+28     	; 0x1ba0 <puts_P+0x3a>
    1b84:	e0 91 52 05 	lds	r30, 0x0552
    1b88:	f0 91 53 05 	lds	r31, 0x0553
    1b8c:	20 85       	ldd	r18, Z+8	; 0x08
    1b8e:	31 85       	ldd	r19, Z+9	; 0x09
    1b90:	bf 01       	movw	r22, r30
    1b92:	f9 01       	movw	r30, r18
    1b94:	09 95       	icall
    1b96:	89 2b       	or	r24, r25
    1b98:	11 f0       	breq	.+4      	; 0x1b9e <puts_P+0x38>
    1b9a:	0f ef       	ldi	r16, 0xFF	; 255
    1b9c:	1f ef       	ldi	r17, 0xFF	; 255
    1b9e:	21 96       	adiw	r28, 0x01	; 1
    1ba0:	fe 01       	movw	r30, r28
    1ba2:	84 91       	lpm	r24, Z+
    1ba4:	88 23       	and	r24, r24
    1ba6:	71 f7       	brne	.-36     	; 0x1b84 <puts_P+0x1e>
    1ba8:	e0 91 52 05 	lds	r30, 0x0552
    1bac:	f0 91 53 05 	lds	r31, 0x0553
    1bb0:	20 85       	ldd	r18, Z+8	; 0x08
    1bb2:	31 85       	ldd	r19, Z+9	; 0x09
    1bb4:	8a e0       	ldi	r24, 0x0A	; 10
    1bb6:	bf 01       	movw	r22, r30
    1bb8:	f9 01       	movw	r30, r18
    1bba:	09 95       	icall
    1bbc:	89 2b       	or	r24, r25
    1bbe:	11 f0       	breq	.+4      	; 0x1bc4 <puts_P+0x5e>
    1bc0:	0f ef       	ldi	r16, 0xFF	; 255
    1bc2:	1f ef       	ldi	r17, 0xFF	; 255
    1bc4:	c8 01       	movw	r24, r16
    1bc6:	df 91       	pop	r29
    1bc8:	cf 91       	pop	r28
    1bca:	1f 91       	pop	r17
    1bcc:	0f 91       	pop	r16
    1bce:	08 95       	ret

00001bd0 <vfprintf>:
    1bd0:	2f 92       	push	r2
    1bd2:	3f 92       	push	r3
    1bd4:	4f 92       	push	r4
    1bd6:	5f 92       	push	r5
    1bd8:	6f 92       	push	r6
    1bda:	7f 92       	push	r7
    1bdc:	8f 92       	push	r8
    1bde:	9f 92       	push	r9
    1be0:	af 92       	push	r10
    1be2:	bf 92       	push	r11
    1be4:	cf 92       	push	r12
    1be6:	df 92       	push	r13
    1be8:	ef 92       	push	r14
    1bea:	ff 92       	push	r15
    1bec:	0f 93       	push	r16
    1bee:	1f 93       	push	r17
    1bf0:	df 93       	push	r29
    1bf2:	cf 93       	push	r28
    1bf4:	cd b7       	in	r28, 0x3d	; 61
    1bf6:	de b7       	in	r29, 0x3e	; 62
    1bf8:	2b 97       	sbiw	r28, 0x0b	; 11
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	f8 94       	cli
    1bfe:	de bf       	out	0x3e, r29	; 62
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	cd bf       	out	0x3d, r28	; 61
    1c04:	3c 01       	movw	r6, r24
    1c06:	2b 01       	movw	r4, r22
    1c08:	5a 01       	movw	r10, r20
    1c0a:	fc 01       	movw	r30, r24
    1c0c:	17 82       	std	Z+7, r1	; 0x07
    1c0e:	16 82       	std	Z+6, r1	; 0x06
    1c10:	83 81       	ldd	r24, Z+3	; 0x03
    1c12:	81 fd       	sbrc	r24, 1
    1c14:	03 c0       	rjmp	.+6      	; 0x1c1c <vfprintf+0x4c>
    1c16:	6f ef       	ldi	r22, 0xFF	; 255
    1c18:	7f ef       	ldi	r23, 0xFF	; 255
    1c1a:	b9 c1       	rjmp	.+882    	; 0x1f8e <vfprintf+0x3be>
    1c1c:	9a e0       	ldi	r25, 0x0A	; 10
    1c1e:	89 2e       	mov	r8, r25
    1c20:	1e 01       	movw	r2, r28
    1c22:	08 94       	sec
    1c24:	21 1c       	adc	r2, r1
    1c26:	31 1c       	adc	r3, r1
    1c28:	f3 01       	movw	r30, r6
    1c2a:	23 81       	ldd	r18, Z+3	; 0x03
    1c2c:	f2 01       	movw	r30, r4
    1c2e:	23 fd       	sbrc	r18, 3
    1c30:	85 91       	lpm	r24, Z+
    1c32:	23 ff       	sbrs	r18, 3
    1c34:	81 91       	ld	r24, Z+
    1c36:	2f 01       	movw	r4, r30
    1c38:	88 23       	and	r24, r24
    1c3a:	09 f4       	brne	.+2      	; 0x1c3e <vfprintf+0x6e>
    1c3c:	a5 c1       	rjmp	.+842    	; 0x1f88 <vfprintf+0x3b8>
    1c3e:	85 32       	cpi	r24, 0x25	; 37
    1c40:	39 f4       	brne	.+14     	; 0x1c50 <vfprintf+0x80>
    1c42:	23 fd       	sbrc	r18, 3
    1c44:	85 91       	lpm	r24, Z+
    1c46:	23 ff       	sbrs	r18, 3
    1c48:	81 91       	ld	r24, Z+
    1c4a:	2f 01       	movw	r4, r30
    1c4c:	85 32       	cpi	r24, 0x25	; 37
    1c4e:	21 f4       	brne	.+8      	; 0x1c58 <vfprintf+0x88>
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	b3 01       	movw	r22, r6
    1c54:	cc d1       	rcall	.+920    	; 0x1fee <fputc>
    1c56:	e8 cf       	rjmp	.-48     	; 0x1c28 <vfprintf+0x58>
    1c58:	98 2f       	mov	r25, r24
    1c5a:	ff 24       	eor	r15, r15
    1c5c:	ee 24       	eor	r14, r14
    1c5e:	99 24       	eor	r9, r9
    1c60:	ff e1       	ldi	r31, 0x1F	; 31
    1c62:	ff 15       	cp	r31, r15
    1c64:	d0 f0       	brcs	.+52     	; 0x1c9a <vfprintf+0xca>
    1c66:	9b 32       	cpi	r25, 0x2B	; 43
    1c68:	69 f0       	breq	.+26     	; 0x1c84 <vfprintf+0xb4>
    1c6a:	9c 32       	cpi	r25, 0x2C	; 44
    1c6c:	28 f4       	brcc	.+10     	; 0x1c78 <vfprintf+0xa8>
    1c6e:	90 32       	cpi	r25, 0x20	; 32
    1c70:	59 f0       	breq	.+22     	; 0x1c88 <vfprintf+0xb8>
    1c72:	93 32       	cpi	r25, 0x23	; 35
    1c74:	91 f4       	brne	.+36     	; 0x1c9a <vfprintf+0xca>
    1c76:	0e c0       	rjmp	.+28     	; 0x1c94 <vfprintf+0xc4>
    1c78:	9d 32       	cpi	r25, 0x2D	; 45
    1c7a:	49 f0       	breq	.+18     	; 0x1c8e <vfprintf+0xbe>
    1c7c:	90 33       	cpi	r25, 0x30	; 48
    1c7e:	69 f4       	brne	.+26     	; 0x1c9a <vfprintf+0xca>
    1c80:	41 e0       	ldi	r20, 0x01	; 1
    1c82:	24 c0       	rjmp	.+72     	; 0x1ccc <vfprintf+0xfc>
    1c84:	52 e0       	ldi	r21, 0x02	; 2
    1c86:	f5 2a       	or	r15, r21
    1c88:	84 e0       	ldi	r24, 0x04	; 4
    1c8a:	f8 2a       	or	r15, r24
    1c8c:	28 c0       	rjmp	.+80     	; 0x1cde <vfprintf+0x10e>
    1c8e:	98 e0       	ldi	r25, 0x08	; 8
    1c90:	f9 2a       	or	r15, r25
    1c92:	25 c0       	rjmp	.+74     	; 0x1cde <vfprintf+0x10e>
    1c94:	e0 e1       	ldi	r30, 0x10	; 16
    1c96:	fe 2a       	or	r15, r30
    1c98:	22 c0       	rjmp	.+68     	; 0x1cde <vfprintf+0x10e>
    1c9a:	f7 fc       	sbrc	r15, 7
    1c9c:	29 c0       	rjmp	.+82     	; 0x1cf0 <vfprintf+0x120>
    1c9e:	89 2f       	mov	r24, r25
    1ca0:	80 53       	subi	r24, 0x30	; 48
    1ca2:	8a 30       	cpi	r24, 0x0A	; 10
    1ca4:	70 f4       	brcc	.+28     	; 0x1cc2 <vfprintf+0xf2>
    1ca6:	f6 fe       	sbrs	r15, 6
    1ca8:	05 c0       	rjmp	.+10     	; 0x1cb4 <vfprintf+0xe4>
    1caa:	98 9c       	mul	r9, r8
    1cac:	90 2c       	mov	r9, r0
    1cae:	11 24       	eor	r1, r1
    1cb0:	98 0e       	add	r9, r24
    1cb2:	15 c0       	rjmp	.+42     	; 0x1cde <vfprintf+0x10e>
    1cb4:	e8 9c       	mul	r14, r8
    1cb6:	e0 2c       	mov	r14, r0
    1cb8:	11 24       	eor	r1, r1
    1cba:	e8 0e       	add	r14, r24
    1cbc:	f0 e2       	ldi	r31, 0x20	; 32
    1cbe:	ff 2a       	or	r15, r31
    1cc0:	0e c0       	rjmp	.+28     	; 0x1cde <vfprintf+0x10e>
    1cc2:	9e 32       	cpi	r25, 0x2E	; 46
    1cc4:	29 f4       	brne	.+10     	; 0x1cd0 <vfprintf+0x100>
    1cc6:	f6 fc       	sbrc	r15, 6
    1cc8:	5f c1       	rjmp	.+702    	; 0x1f88 <vfprintf+0x3b8>
    1cca:	40 e4       	ldi	r20, 0x40	; 64
    1ccc:	f4 2a       	or	r15, r20
    1cce:	07 c0       	rjmp	.+14     	; 0x1cde <vfprintf+0x10e>
    1cd0:	9c 36       	cpi	r25, 0x6C	; 108
    1cd2:	19 f4       	brne	.+6      	; 0x1cda <vfprintf+0x10a>
    1cd4:	50 e8       	ldi	r21, 0x80	; 128
    1cd6:	f5 2a       	or	r15, r21
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <vfprintf+0x10e>
    1cda:	98 36       	cpi	r25, 0x68	; 104
    1cdc:	49 f4       	brne	.+18     	; 0x1cf0 <vfprintf+0x120>
    1cde:	f2 01       	movw	r30, r4
    1ce0:	23 fd       	sbrc	r18, 3
    1ce2:	95 91       	lpm	r25, Z+
    1ce4:	23 ff       	sbrs	r18, 3
    1ce6:	91 91       	ld	r25, Z+
    1ce8:	2f 01       	movw	r4, r30
    1cea:	99 23       	and	r25, r25
    1cec:	09 f0       	breq	.+2      	; 0x1cf0 <vfprintf+0x120>
    1cee:	b8 cf       	rjmp	.-144    	; 0x1c60 <vfprintf+0x90>
    1cf0:	89 2f       	mov	r24, r25
    1cf2:	85 54       	subi	r24, 0x45	; 69
    1cf4:	83 30       	cpi	r24, 0x03	; 3
    1cf6:	18 f0       	brcs	.+6      	; 0x1cfe <vfprintf+0x12e>
    1cf8:	80 52       	subi	r24, 0x20	; 32
    1cfa:	83 30       	cpi	r24, 0x03	; 3
    1cfc:	38 f4       	brcc	.+14     	; 0x1d0c <vfprintf+0x13c>
    1cfe:	44 e0       	ldi	r20, 0x04	; 4
    1d00:	50 e0       	ldi	r21, 0x00	; 0
    1d02:	a4 0e       	add	r10, r20
    1d04:	b5 1e       	adc	r11, r21
    1d06:	5f e3       	ldi	r21, 0x3F	; 63
    1d08:	59 83       	std	Y+1, r21	; 0x01
    1d0a:	0f c0       	rjmp	.+30     	; 0x1d2a <vfprintf+0x15a>
    1d0c:	93 36       	cpi	r25, 0x63	; 99
    1d0e:	31 f0       	breq	.+12     	; 0x1d1c <vfprintf+0x14c>
    1d10:	93 37       	cpi	r25, 0x73	; 115
    1d12:	79 f0       	breq	.+30     	; 0x1d32 <vfprintf+0x162>
    1d14:	93 35       	cpi	r25, 0x53	; 83
    1d16:	09 f0       	breq	.+2      	; 0x1d1a <vfprintf+0x14a>
    1d18:	52 c0       	rjmp	.+164    	; 0x1dbe <vfprintf+0x1ee>
    1d1a:	1f c0       	rjmp	.+62     	; 0x1d5a <vfprintf+0x18a>
    1d1c:	f5 01       	movw	r30, r10
    1d1e:	80 81       	ld	r24, Z
    1d20:	89 83       	std	Y+1, r24	; 0x01
    1d22:	42 e0       	ldi	r20, 0x02	; 2
    1d24:	50 e0       	ldi	r21, 0x00	; 0
    1d26:	a4 0e       	add	r10, r20
    1d28:	b5 1e       	adc	r11, r21
    1d2a:	61 01       	movw	r12, r2
    1d2c:	01 e0       	ldi	r16, 0x01	; 1
    1d2e:	10 e0       	ldi	r17, 0x00	; 0
    1d30:	11 c0       	rjmp	.+34     	; 0x1d54 <vfprintf+0x184>
    1d32:	f5 01       	movw	r30, r10
    1d34:	c0 80       	ld	r12, Z
    1d36:	d1 80       	ldd	r13, Z+1	; 0x01
    1d38:	f6 fc       	sbrc	r15, 6
    1d3a:	03 c0       	rjmp	.+6      	; 0x1d42 <vfprintf+0x172>
    1d3c:	6f ef       	ldi	r22, 0xFF	; 255
    1d3e:	7f ef       	ldi	r23, 0xFF	; 255
    1d40:	02 c0       	rjmp	.+4      	; 0x1d46 <vfprintf+0x176>
    1d42:	69 2d       	mov	r22, r9
    1d44:	70 e0       	ldi	r23, 0x00	; 0
    1d46:	42 e0       	ldi	r20, 0x02	; 2
    1d48:	50 e0       	ldi	r21, 0x00	; 0
    1d4a:	a4 0e       	add	r10, r20
    1d4c:	b5 1e       	adc	r11, r21
    1d4e:	c6 01       	movw	r24, r12
    1d50:	43 d1       	rcall	.+646    	; 0x1fd8 <strnlen>
    1d52:	8c 01       	movw	r16, r24
    1d54:	5f e7       	ldi	r21, 0x7F	; 127
    1d56:	f5 22       	and	r15, r21
    1d58:	13 c0       	rjmp	.+38     	; 0x1d80 <vfprintf+0x1b0>
    1d5a:	f5 01       	movw	r30, r10
    1d5c:	c0 80       	ld	r12, Z
    1d5e:	d1 80       	ldd	r13, Z+1	; 0x01
    1d60:	f6 fc       	sbrc	r15, 6
    1d62:	03 c0       	rjmp	.+6      	; 0x1d6a <vfprintf+0x19a>
    1d64:	6f ef       	ldi	r22, 0xFF	; 255
    1d66:	7f ef       	ldi	r23, 0xFF	; 255
    1d68:	02 c0       	rjmp	.+4      	; 0x1d6e <vfprintf+0x19e>
    1d6a:	69 2d       	mov	r22, r9
    1d6c:	70 e0       	ldi	r23, 0x00	; 0
    1d6e:	42 e0       	ldi	r20, 0x02	; 2
    1d70:	50 e0       	ldi	r21, 0x00	; 0
    1d72:	a4 0e       	add	r10, r20
    1d74:	b5 1e       	adc	r11, r21
    1d76:	c6 01       	movw	r24, r12
    1d78:	24 d1       	rcall	.+584    	; 0x1fc2 <strnlen_P>
    1d7a:	8c 01       	movw	r16, r24
    1d7c:	50 e8       	ldi	r21, 0x80	; 128
    1d7e:	f5 2a       	or	r15, r21
    1d80:	f3 fe       	sbrs	r15, 3
    1d82:	06 c0       	rjmp	.+12     	; 0x1d90 <vfprintf+0x1c0>
    1d84:	18 c0       	rjmp	.+48     	; 0x1db6 <vfprintf+0x1e6>
    1d86:	80 e2       	ldi	r24, 0x20	; 32
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	b3 01       	movw	r22, r6
    1d8c:	30 d1       	rcall	.+608    	; 0x1fee <fputc>
    1d8e:	ea 94       	dec	r14
    1d90:	8e 2d       	mov	r24, r14
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	08 17       	cp	r16, r24
    1d96:	19 07       	cpc	r17, r25
    1d98:	b0 f3       	brcs	.-20     	; 0x1d86 <vfprintf+0x1b6>
    1d9a:	0d c0       	rjmp	.+26     	; 0x1db6 <vfprintf+0x1e6>
    1d9c:	f6 01       	movw	r30, r12
    1d9e:	f7 fc       	sbrc	r15, 7
    1da0:	85 91       	lpm	r24, Z+
    1da2:	f7 fe       	sbrs	r15, 7
    1da4:	81 91       	ld	r24, Z+
    1da6:	6f 01       	movw	r12, r30
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	b3 01       	movw	r22, r6
    1dac:	20 d1       	rcall	.+576    	; 0x1fee <fputc>
    1dae:	e1 10       	cpse	r14, r1
    1db0:	ea 94       	dec	r14
    1db2:	01 50       	subi	r16, 0x01	; 1
    1db4:	10 40       	sbci	r17, 0x00	; 0
    1db6:	01 15       	cp	r16, r1
    1db8:	11 05       	cpc	r17, r1
    1dba:	81 f7       	brne	.-32     	; 0x1d9c <vfprintf+0x1cc>
    1dbc:	e2 c0       	rjmp	.+452    	; 0x1f82 <vfprintf+0x3b2>
    1dbe:	94 36       	cpi	r25, 0x64	; 100
    1dc0:	11 f0       	breq	.+4      	; 0x1dc6 <vfprintf+0x1f6>
    1dc2:	99 36       	cpi	r25, 0x69	; 105
    1dc4:	61 f5       	brne	.+88     	; 0x1e1e <vfprintf+0x24e>
    1dc6:	f7 fe       	sbrs	r15, 7
    1dc8:	08 c0       	rjmp	.+16     	; 0x1dda <vfprintf+0x20a>
    1dca:	f5 01       	movw	r30, r10
    1dcc:	20 81       	ld	r18, Z
    1dce:	31 81       	ldd	r19, Z+1	; 0x01
    1dd0:	42 81       	ldd	r20, Z+2	; 0x02
    1dd2:	53 81       	ldd	r21, Z+3	; 0x03
    1dd4:	84 e0       	ldi	r24, 0x04	; 4
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	0a c0       	rjmp	.+20     	; 0x1dee <vfprintf+0x21e>
    1dda:	f5 01       	movw	r30, r10
    1ddc:	80 81       	ld	r24, Z
    1dde:	91 81       	ldd	r25, Z+1	; 0x01
    1de0:	9c 01       	movw	r18, r24
    1de2:	44 27       	eor	r20, r20
    1de4:	37 fd       	sbrc	r19, 7
    1de6:	40 95       	com	r20
    1de8:	54 2f       	mov	r21, r20
    1dea:	82 e0       	ldi	r24, 0x02	; 2
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	a8 0e       	add	r10, r24
    1df0:	b9 1e       	adc	r11, r25
    1df2:	9f e6       	ldi	r25, 0x6F	; 111
    1df4:	f9 22       	and	r15, r25
    1df6:	57 ff       	sbrs	r21, 7
    1df8:	09 c0       	rjmp	.+18     	; 0x1e0c <vfprintf+0x23c>
    1dfa:	50 95       	com	r21
    1dfc:	40 95       	com	r20
    1dfe:	30 95       	com	r19
    1e00:	21 95       	neg	r18
    1e02:	3f 4f       	sbci	r19, 0xFF	; 255
    1e04:	4f 4f       	sbci	r20, 0xFF	; 255
    1e06:	5f 4f       	sbci	r21, 0xFF	; 255
    1e08:	e0 e8       	ldi	r30, 0x80	; 128
    1e0a:	fe 2a       	or	r15, r30
    1e0c:	ca 01       	movw	r24, r20
    1e0e:	b9 01       	movw	r22, r18
    1e10:	a1 01       	movw	r20, r2
    1e12:	2a e0       	ldi	r18, 0x0A	; 10
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	17 d1       	rcall	.+558    	; 0x2046 <__ultoa_invert>
    1e18:	d8 2e       	mov	r13, r24
    1e1a:	d2 18       	sub	r13, r2
    1e1c:	3f c0       	rjmp	.+126    	; 0x1e9c <vfprintf+0x2cc>
    1e1e:	95 37       	cpi	r25, 0x75	; 117
    1e20:	29 f4       	brne	.+10     	; 0x1e2c <vfprintf+0x25c>
    1e22:	1f 2d       	mov	r17, r15
    1e24:	1f 7e       	andi	r17, 0xEF	; 239
    1e26:	2a e0       	ldi	r18, 0x0A	; 10
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	1d c0       	rjmp	.+58     	; 0x1e66 <vfprintf+0x296>
    1e2c:	1f 2d       	mov	r17, r15
    1e2e:	19 7f       	andi	r17, 0xF9	; 249
    1e30:	9f 36       	cpi	r25, 0x6F	; 111
    1e32:	61 f0       	breq	.+24     	; 0x1e4c <vfprintf+0x27c>
    1e34:	90 37       	cpi	r25, 0x70	; 112
    1e36:	20 f4       	brcc	.+8      	; 0x1e40 <vfprintf+0x270>
    1e38:	98 35       	cpi	r25, 0x58	; 88
    1e3a:	09 f0       	breq	.+2      	; 0x1e3e <vfprintf+0x26e>
    1e3c:	a5 c0       	rjmp	.+330    	; 0x1f88 <vfprintf+0x3b8>
    1e3e:	0f c0       	rjmp	.+30     	; 0x1e5e <vfprintf+0x28e>
    1e40:	90 37       	cpi	r25, 0x70	; 112
    1e42:	39 f0       	breq	.+14     	; 0x1e52 <vfprintf+0x282>
    1e44:	98 37       	cpi	r25, 0x78	; 120
    1e46:	09 f0       	breq	.+2      	; 0x1e4a <vfprintf+0x27a>
    1e48:	9f c0       	rjmp	.+318    	; 0x1f88 <vfprintf+0x3b8>
    1e4a:	04 c0       	rjmp	.+8      	; 0x1e54 <vfprintf+0x284>
    1e4c:	28 e0       	ldi	r18, 0x08	; 8
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	0a c0       	rjmp	.+20     	; 0x1e66 <vfprintf+0x296>
    1e52:	10 61       	ori	r17, 0x10	; 16
    1e54:	14 fd       	sbrc	r17, 4
    1e56:	14 60       	ori	r17, 0x04	; 4
    1e58:	20 e1       	ldi	r18, 0x10	; 16
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	04 c0       	rjmp	.+8      	; 0x1e66 <vfprintf+0x296>
    1e5e:	14 fd       	sbrc	r17, 4
    1e60:	16 60       	ori	r17, 0x06	; 6
    1e62:	20 e1       	ldi	r18, 0x10	; 16
    1e64:	32 e0       	ldi	r19, 0x02	; 2
    1e66:	17 ff       	sbrs	r17, 7
    1e68:	08 c0       	rjmp	.+16     	; 0x1e7a <vfprintf+0x2aa>
    1e6a:	f5 01       	movw	r30, r10
    1e6c:	60 81       	ld	r22, Z
    1e6e:	71 81       	ldd	r23, Z+1	; 0x01
    1e70:	82 81       	ldd	r24, Z+2	; 0x02
    1e72:	93 81       	ldd	r25, Z+3	; 0x03
    1e74:	44 e0       	ldi	r20, 0x04	; 4
    1e76:	50 e0       	ldi	r21, 0x00	; 0
    1e78:	08 c0       	rjmp	.+16     	; 0x1e8a <vfprintf+0x2ba>
    1e7a:	f5 01       	movw	r30, r10
    1e7c:	80 81       	ld	r24, Z
    1e7e:	91 81       	ldd	r25, Z+1	; 0x01
    1e80:	bc 01       	movw	r22, r24
    1e82:	80 e0       	ldi	r24, 0x00	; 0
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	42 e0       	ldi	r20, 0x02	; 2
    1e88:	50 e0       	ldi	r21, 0x00	; 0
    1e8a:	a4 0e       	add	r10, r20
    1e8c:	b5 1e       	adc	r11, r21
    1e8e:	a1 01       	movw	r20, r2
    1e90:	da d0       	rcall	.+436    	; 0x2046 <__ultoa_invert>
    1e92:	d8 2e       	mov	r13, r24
    1e94:	d2 18       	sub	r13, r2
    1e96:	8f e7       	ldi	r24, 0x7F	; 127
    1e98:	f8 2e       	mov	r15, r24
    1e9a:	f1 22       	and	r15, r17
    1e9c:	f6 fe       	sbrs	r15, 6
    1e9e:	0b c0       	rjmp	.+22     	; 0x1eb6 <vfprintf+0x2e6>
    1ea0:	5e ef       	ldi	r21, 0xFE	; 254
    1ea2:	f5 22       	and	r15, r21
    1ea4:	d9 14       	cp	r13, r9
    1ea6:	38 f4       	brcc	.+14     	; 0x1eb6 <vfprintf+0x2e6>
    1ea8:	f4 fe       	sbrs	r15, 4
    1eaa:	07 c0       	rjmp	.+14     	; 0x1eba <vfprintf+0x2ea>
    1eac:	f2 fc       	sbrc	r15, 2
    1eae:	05 c0       	rjmp	.+10     	; 0x1eba <vfprintf+0x2ea>
    1eb0:	8f ee       	ldi	r24, 0xEF	; 239
    1eb2:	f8 22       	and	r15, r24
    1eb4:	02 c0       	rjmp	.+4      	; 0x1eba <vfprintf+0x2ea>
    1eb6:	1d 2d       	mov	r17, r13
    1eb8:	01 c0       	rjmp	.+2      	; 0x1ebc <vfprintf+0x2ec>
    1eba:	19 2d       	mov	r17, r9
    1ebc:	f4 fe       	sbrs	r15, 4
    1ebe:	0d c0       	rjmp	.+26     	; 0x1eda <vfprintf+0x30a>
    1ec0:	fe 01       	movw	r30, r28
    1ec2:	ed 0d       	add	r30, r13
    1ec4:	f1 1d       	adc	r31, r1
    1ec6:	80 81       	ld	r24, Z
    1ec8:	80 33       	cpi	r24, 0x30	; 48
    1eca:	19 f4       	brne	.+6      	; 0x1ed2 <vfprintf+0x302>
    1ecc:	99 ee       	ldi	r25, 0xE9	; 233
    1ece:	f9 22       	and	r15, r25
    1ed0:	08 c0       	rjmp	.+16     	; 0x1ee2 <vfprintf+0x312>
    1ed2:	1f 5f       	subi	r17, 0xFF	; 255
    1ed4:	f2 fe       	sbrs	r15, 2
    1ed6:	05 c0       	rjmp	.+10     	; 0x1ee2 <vfprintf+0x312>
    1ed8:	03 c0       	rjmp	.+6      	; 0x1ee0 <vfprintf+0x310>
    1eda:	8f 2d       	mov	r24, r15
    1edc:	86 78       	andi	r24, 0x86	; 134
    1ede:	09 f0       	breq	.+2      	; 0x1ee2 <vfprintf+0x312>
    1ee0:	1f 5f       	subi	r17, 0xFF	; 255
    1ee2:	0f 2d       	mov	r16, r15
    1ee4:	f3 fc       	sbrc	r15, 3
    1ee6:	13 c0       	rjmp	.+38     	; 0x1f0e <vfprintf+0x33e>
    1ee8:	f0 fe       	sbrs	r15, 0
    1eea:	0e c0       	rjmp	.+28     	; 0x1f08 <vfprintf+0x338>
    1eec:	1e 15       	cp	r17, r14
    1eee:	10 f0       	brcs	.+4      	; 0x1ef4 <vfprintf+0x324>
    1ef0:	9d 2c       	mov	r9, r13
    1ef2:	0a c0       	rjmp	.+20     	; 0x1f08 <vfprintf+0x338>
    1ef4:	9d 2c       	mov	r9, r13
    1ef6:	9e 0c       	add	r9, r14
    1ef8:	91 1a       	sub	r9, r17
    1efa:	1e 2d       	mov	r17, r14
    1efc:	05 c0       	rjmp	.+10     	; 0x1f08 <vfprintf+0x338>
    1efe:	80 e2       	ldi	r24, 0x20	; 32
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	b3 01       	movw	r22, r6
    1f04:	74 d0       	rcall	.+232    	; 0x1fee <fputc>
    1f06:	1f 5f       	subi	r17, 0xFF	; 255
    1f08:	1e 15       	cp	r17, r14
    1f0a:	c8 f3       	brcs	.-14     	; 0x1efe <vfprintf+0x32e>
    1f0c:	04 c0       	rjmp	.+8      	; 0x1f16 <vfprintf+0x346>
    1f0e:	1e 15       	cp	r17, r14
    1f10:	10 f4       	brcc	.+4      	; 0x1f16 <vfprintf+0x346>
    1f12:	e1 1a       	sub	r14, r17
    1f14:	01 c0       	rjmp	.+2      	; 0x1f18 <vfprintf+0x348>
    1f16:	ee 24       	eor	r14, r14
    1f18:	04 ff       	sbrs	r16, 4
    1f1a:	0e c0       	rjmp	.+28     	; 0x1f38 <vfprintf+0x368>
    1f1c:	80 e3       	ldi	r24, 0x30	; 48
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	b3 01       	movw	r22, r6
    1f22:	65 d0       	rcall	.+202    	; 0x1fee <fputc>
    1f24:	02 ff       	sbrs	r16, 2
    1f26:	1b c0       	rjmp	.+54     	; 0x1f5e <vfprintf+0x38e>
    1f28:	01 fd       	sbrc	r16, 1
    1f2a:	03 c0       	rjmp	.+6      	; 0x1f32 <vfprintf+0x362>
    1f2c:	88 e7       	ldi	r24, 0x78	; 120
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	0e c0       	rjmp	.+28     	; 0x1f4e <vfprintf+0x37e>
    1f32:	88 e5       	ldi	r24, 0x58	; 88
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	0b c0       	rjmp	.+22     	; 0x1f4e <vfprintf+0x37e>
    1f38:	80 2f       	mov	r24, r16
    1f3a:	86 78       	andi	r24, 0x86	; 134
    1f3c:	81 f0       	breq	.+32     	; 0x1f5e <vfprintf+0x38e>
    1f3e:	01 ff       	sbrs	r16, 1
    1f40:	02 c0       	rjmp	.+4      	; 0x1f46 <vfprintf+0x376>
    1f42:	8b e2       	ldi	r24, 0x2B	; 43
    1f44:	01 c0       	rjmp	.+2      	; 0x1f48 <vfprintf+0x378>
    1f46:	80 e2       	ldi	r24, 0x20	; 32
    1f48:	f7 fc       	sbrc	r15, 7
    1f4a:	8d e2       	ldi	r24, 0x2D	; 45
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	b3 01       	movw	r22, r6
    1f50:	4e d0       	rcall	.+156    	; 0x1fee <fputc>
    1f52:	05 c0       	rjmp	.+10     	; 0x1f5e <vfprintf+0x38e>
    1f54:	80 e3       	ldi	r24, 0x30	; 48
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	b3 01       	movw	r22, r6
    1f5a:	49 d0       	rcall	.+146    	; 0x1fee <fputc>
    1f5c:	9a 94       	dec	r9
    1f5e:	d9 14       	cp	r13, r9
    1f60:	c8 f3       	brcs	.-14     	; 0x1f54 <vfprintf+0x384>
    1f62:	da 94       	dec	r13
    1f64:	f1 01       	movw	r30, r2
    1f66:	ed 0d       	add	r30, r13
    1f68:	f1 1d       	adc	r31, r1
    1f6a:	80 81       	ld	r24, Z
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	b3 01       	movw	r22, r6
    1f70:	3e d0       	rcall	.+124    	; 0x1fee <fputc>
    1f72:	dd 20       	and	r13, r13
    1f74:	b1 f7       	brne	.-20     	; 0x1f62 <vfprintf+0x392>
    1f76:	05 c0       	rjmp	.+10     	; 0x1f82 <vfprintf+0x3b2>
    1f78:	80 e2       	ldi	r24, 0x20	; 32
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	b3 01       	movw	r22, r6
    1f7e:	37 d0       	rcall	.+110    	; 0x1fee <fputc>
    1f80:	ea 94       	dec	r14
    1f82:	ee 20       	and	r14, r14
    1f84:	c9 f7       	brne	.-14     	; 0x1f78 <vfprintf+0x3a8>
    1f86:	50 ce       	rjmp	.-864    	; 0x1c28 <vfprintf+0x58>
    1f88:	f3 01       	movw	r30, r6
    1f8a:	66 81       	ldd	r22, Z+6	; 0x06
    1f8c:	77 81       	ldd	r23, Z+7	; 0x07
    1f8e:	cb 01       	movw	r24, r22
    1f90:	2b 96       	adiw	r28, 0x0b	; 11
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	de bf       	out	0x3e, r29	; 62
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	cd bf       	out	0x3d, r28	; 61
    1f9c:	cf 91       	pop	r28
    1f9e:	df 91       	pop	r29
    1fa0:	1f 91       	pop	r17
    1fa2:	0f 91       	pop	r16
    1fa4:	ff 90       	pop	r15
    1fa6:	ef 90       	pop	r14
    1fa8:	df 90       	pop	r13
    1faa:	cf 90       	pop	r12
    1fac:	bf 90       	pop	r11
    1fae:	af 90       	pop	r10
    1fb0:	9f 90       	pop	r9
    1fb2:	8f 90       	pop	r8
    1fb4:	7f 90       	pop	r7
    1fb6:	6f 90       	pop	r6
    1fb8:	5f 90       	pop	r5
    1fba:	4f 90       	pop	r4
    1fbc:	3f 90       	pop	r3
    1fbe:	2f 90       	pop	r2
    1fc0:	08 95       	ret

00001fc2 <strnlen_P>:
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	05 90       	lpm	r0, Z+
    1fc6:	61 50       	subi	r22, 0x01	; 1
    1fc8:	70 40       	sbci	r23, 0x00	; 0
    1fca:	01 10       	cpse	r0, r1
    1fcc:	d8 f7       	brcc	.-10     	; 0x1fc4 <strnlen_P+0x2>
    1fce:	80 95       	com	r24
    1fd0:	90 95       	com	r25
    1fd2:	8e 0f       	add	r24, r30
    1fd4:	9f 1f       	adc	r25, r31
    1fd6:	08 95       	ret

00001fd8 <strnlen>:
    1fd8:	fc 01       	movw	r30, r24
    1fda:	61 50       	subi	r22, 0x01	; 1
    1fdc:	70 40       	sbci	r23, 0x00	; 0
    1fde:	01 90       	ld	r0, Z+
    1fe0:	01 10       	cpse	r0, r1
    1fe2:	d8 f7       	brcc	.-10     	; 0x1fda <strnlen+0x2>
    1fe4:	80 95       	com	r24
    1fe6:	90 95       	com	r25
    1fe8:	8e 0f       	add	r24, r30
    1fea:	9f 1f       	adc	r25, r31
    1fec:	08 95       	ret

00001fee <fputc>:
    1fee:	0f 93       	push	r16
    1ff0:	1f 93       	push	r17
    1ff2:	cf 93       	push	r28
    1ff4:	df 93       	push	r29
    1ff6:	8c 01       	movw	r16, r24
    1ff8:	eb 01       	movw	r28, r22
    1ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffc:	81 ff       	sbrs	r24, 1
    1ffe:	1b c0       	rjmp	.+54     	; 0x2036 <fputc+0x48>
    2000:	82 ff       	sbrs	r24, 2
    2002:	0d c0       	rjmp	.+26     	; 0x201e <fputc+0x30>
    2004:	2e 81       	ldd	r18, Y+6	; 0x06
    2006:	3f 81       	ldd	r19, Y+7	; 0x07
    2008:	8c 81       	ldd	r24, Y+4	; 0x04
    200a:	9d 81       	ldd	r25, Y+5	; 0x05
    200c:	28 17       	cp	r18, r24
    200e:	39 07       	cpc	r19, r25
    2010:	64 f4       	brge	.+24     	; 0x202a <fputc+0x3c>
    2012:	e8 81       	ld	r30, Y
    2014:	f9 81       	ldd	r31, Y+1	; 0x01
    2016:	01 93       	st	Z+, r16
    2018:	f9 83       	std	Y+1, r31	; 0x01
    201a:	e8 83       	st	Y, r30
    201c:	06 c0       	rjmp	.+12     	; 0x202a <fputc+0x3c>
    201e:	e8 85       	ldd	r30, Y+8	; 0x08
    2020:	f9 85       	ldd	r31, Y+9	; 0x09
    2022:	80 2f       	mov	r24, r16
    2024:	09 95       	icall
    2026:	89 2b       	or	r24, r25
    2028:	31 f4       	brne	.+12     	; 0x2036 <fputc+0x48>
    202a:	8e 81       	ldd	r24, Y+6	; 0x06
    202c:	9f 81       	ldd	r25, Y+7	; 0x07
    202e:	01 96       	adiw	r24, 0x01	; 1
    2030:	9f 83       	std	Y+7, r25	; 0x07
    2032:	8e 83       	std	Y+6, r24	; 0x06
    2034:	02 c0       	rjmp	.+4      	; 0x203a <fputc+0x4c>
    2036:	0f ef       	ldi	r16, 0xFF	; 255
    2038:	1f ef       	ldi	r17, 0xFF	; 255
    203a:	c8 01       	movw	r24, r16
    203c:	df 91       	pop	r29
    203e:	cf 91       	pop	r28
    2040:	1f 91       	pop	r17
    2042:	0f 91       	pop	r16
    2044:	08 95       	ret

00002046 <__ultoa_invert>:
    2046:	fa 01       	movw	r30, r20
    2048:	aa 27       	eor	r26, r26
    204a:	28 30       	cpi	r18, 0x08	; 8
    204c:	51 f1       	breq	.+84     	; 0x20a2 <__ultoa_invert+0x5c>
    204e:	20 31       	cpi	r18, 0x10	; 16
    2050:	81 f1       	breq	.+96     	; 0x20b2 <__ultoa_invert+0x6c>
    2052:	e8 94       	clt
    2054:	6f 93       	push	r22
    2056:	6e 7f       	andi	r22, 0xFE	; 254
    2058:	6e 5f       	subi	r22, 0xFE	; 254
    205a:	7f 4f       	sbci	r23, 0xFF	; 255
    205c:	8f 4f       	sbci	r24, 0xFF	; 255
    205e:	9f 4f       	sbci	r25, 0xFF	; 255
    2060:	af 4f       	sbci	r26, 0xFF	; 255
    2062:	b1 e0       	ldi	r27, 0x01	; 1
    2064:	3e d0       	rcall	.+124    	; 0x20e2 <__ultoa_invert+0x9c>
    2066:	b4 e0       	ldi	r27, 0x04	; 4
    2068:	3c d0       	rcall	.+120    	; 0x20e2 <__ultoa_invert+0x9c>
    206a:	67 0f       	add	r22, r23
    206c:	78 1f       	adc	r23, r24
    206e:	89 1f       	adc	r24, r25
    2070:	9a 1f       	adc	r25, r26
    2072:	a1 1d       	adc	r26, r1
    2074:	68 0f       	add	r22, r24
    2076:	79 1f       	adc	r23, r25
    2078:	8a 1f       	adc	r24, r26
    207a:	91 1d       	adc	r25, r1
    207c:	a1 1d       	adc	r26, r1
    207e:	6a 0f       	add	r22, r26
    2080:	71 1d       	adc	r23, r1
    2082:	81 1d       	adc	r24, r1
    2084:	91 1d       	adc	r25, r1
    2086:	a1 1d       	adc	r26, r1
    2088:	20 d0       	rcall	.+64     	; 0x20ca <__ultoa_invert+0x84>
    208a:	09 f4       	brne	.+2      	; 0x208e <__ultoa_invert+0x48>
    208c:	68 94       	set
    208e:	3f 91       	pop	r19
    2090:	2a e0       	ldi	r18, 0x0A	; 10
    2092:	26 9f       	mul	r18, r22
    2094:	11 24       	eor	r1, r1
    2096:	30 19       	sub	r19, r0
    2098:	30 5d       	subi	r19, 0xD0	; 208
    209a:	31 93       	st	Z+, r19
    209c:	de f6       	brtc	.-74     	; 0x2054 <__ultoa_invert+0xe>
    209e:	cf 01       	movw	r24, r30
    20a0:	08 95       	ret
    20a2:	46 2f       	mov	r20, r22
    20a4:	47 70       	andi	r20, 0x07	; 7
    20a6:	40 5d       	subi	r20, 0xD0	; 208
    20a8:	41 93       	st	Z+, r20
    20aa:	b3 e0       	ldi	r27, 0x03	; 3
    20ac:	0f d0       	rcall	.+30     	; 0x20cc <__ultoa_invert+0x86>
    20ae:	c9 f7       	brne	.-14     	; 0x20a2 <__ultoa_invert+0x5c>
    20b0:	f6 cf       	rjmp	.-20     	; 0x209e <__ultoa_invert+0x58>
    20b2:	46 2f       	mov	r20, r22
    20b4:	4f 70       	andi	r20, 0x0F	; 15
    20b6:	40 5d       	subi	r20, 0xD0	; 208
    20b8:	4a 33       	cpi	r20, 0x3A	; 58
    20ba:	18 f0       	brcs	.+6      	; 0x20c2 <__ultoa_invert+0x7c>
    20bc:	49 5d       	subi	r20, 0xD9	; 217
    20be:	31 fd       	sbrc	r19, 1
    20c0:	40 52       	subi	r20, 0x20	; 32
    20c2:	41 93       	st	Z+, r20
    20c4:	02 d0       	rcall	.+4      	; 0x20ca <__ultoa_invert+0x84>
    20c6:	a9 f7       	brne	.-22     	; 0x20b2 <__ultoa_invert+0x6c>
    20c8:	ea cf       	rjmp	.-44     	; 0x209e <__ultoa_invert+0x58>
    20ca:	b4 e0       	ldi	r27, 0x04	; 4
    20cc:	a6 95       	lsr	r26
    20ce:	97 95       	ror	r25
    20d0:	87 95       	ror	r24
    20d2:	77 95       	ror	r23
    20d4:	67 95       	ror	r22
    20d6:	ba 95       	dec	r27
    20d8:	c9 f7       	brne	.-14     	; 0x20cc <__ultoa_invert+0x86>
    20da:	00 97       	sbiw	r24, 0x00	; 0
    20dc:	61 05       	cpc	r22, r1
    20de:	71 05       	cpc	r23, r1
    20e0:	08 95       	ret
    20e2:	9b 01       	movw	r18, r22
    20e4:	ac 01       	movw	r20, r24
    20e6:	0a 2e       	mov	r0, r26
    20e8:	06 94       	lsr	r0
    20ea:	57 95       	ror	r21
    20ec:	47 95       	ror	r20
    20ee:	37 95       	ror	r19
    20f0:	27 95       	ror	r18
    20f2:	ba 95       	dec	r27
    20f4:	c9 f7       	brne	.-14     	; 0x20e8 <__ultoa_invert+0xa2>
    20f6:	62 0f       	add	r22, r18
    20f8:	73 1f       	adc	r23, r19
    20fa:	84 1f       	adc	r24, r20
    20fc:	95 1f       	adc	r25, r21
    20fe:	a0 1d       	adc	r26, r0
    2100:	08 95       	ret

00002102 <_exit>:
    2102:	f8 94       	cli

00002104 <__stop_program>:
    2104:	ff cf       	rjmp	.-2      	; 0x2104 <__stop_program>
