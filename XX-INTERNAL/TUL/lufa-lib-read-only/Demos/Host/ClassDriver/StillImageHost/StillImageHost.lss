
StillImageHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00001eea  00001f7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001eea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800124  00800124  00001fa2  2**0
                  ALLOC
  3 .stab         00002208  00000000  00000000  00001fa4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dff  00000000  00000000  000041ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000006c8  00000000  00000000  00004fab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000f94  00000000  00000000  00005673  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000b6bb  00000000  00000000  00006607  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000027ee  00000000  00000000  00011cc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007cd8  00000000  00000000  000144b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b10  00000000  00000000  0001c188  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004589  00000000  00000000  0001cc98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000568a  00000000  00000000  00021221  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000798  00000000  00000000  000268ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       0:	64 c1       	rjmp	.+712    	; 0x2ca <__ctors_end>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       2:	00 00       	nop
	return USB_Host_SendControlRequest(NULL);
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
       4:	80 c1       	rjmp	.+768    	; 0x306 <__bad_interrupt>

	return ErrorCode;
}

bool SI_Host_IsEventReceived(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
       6:	00 00       	nop

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       8:	7e c1       	rjmp	.+764    	; 0x306 <__bad_interrupt>
       a:	00 00       	nop
       c:	7c c1       	rjmp	.+760    	; 0x306 <__bad_interrupt>
       e:	00 00       	nop
      10:	7a c1       	rjmp	.+756    	; 0x306 <__bad_interrupt>
      12:	00 00       	nop
      14:	78 c1       	rjmp	.+752    	; 0x306 <__bad_interrupt>
      16:	00 00       	nop
      18:	76 c1       	rjmp	.+748    	; 0x306 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	74 c1       	rjmp	.+744    	; 0x306 <__bad_interrupt>
      1e:	00 00       	nop
      20:	72 c1       	rjmp	.+740    	; 0x306 <__bad_interrupt>
      22:	00 00       	nop
      24:	70 c1       	rjmp	.+736    	; 0x306 <__bad_interrupt>
      26:	00 00       	nop
      28:	b8 c5       	rjmp	.+2928   	; 0xb9a <__vector_10>
      2a:	00 00       	nop
      2c:	6c c1       	rjmp	.+728    	; 0x306 <__bad_interrupt>
      2e:	00 00       	nop
      30:	6a c1       	rjmp	.+724    	; 0x306 <__bad_interrupt>
      32:	00 00       	nop
      34:	68 c1       	rjmp	.+720    	; 0x306 <__bad_interrupt>
      36:	00 00       	nop
      38:	66 c1       	rjmp	.+716    	; 0x306 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	64 c1       	rjmp	.+712    	; 0x306 <__bad_interrupt>
      3e:	00 00       	nop
      40:	62 c1       	rjmp	.+708    	; 0x306 <__bad_interrupt>
      42:	00 00       	nop
      44:	60 c1       	rjmp	.+704    	; 0x306 <__bad_interrupt>
      46:	00 00       	nop
      48:	5e c1       	rjmp	.+700    	; 0x306 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5c c1       	rjmp	.+696    	; 0x306 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5a c1       	rjmp	.+692    	; 0x306 <__bad_interrupt>
      52:	00 00       	nop
      54:	58 c1       	rjmp	.+688    	; 0x306 <__bad_interrupt>
      56:	00 00       	nop
      58:	56 c1       	rjmp	.+684    	; 0x306 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	54 c1       	rjmp	.+680    	; 0x306 <__bad_interrupt>
      5e:	00 00       	nop
      60:	52 c1       	rjmp	.+676    	; 0x306 <__bad_interrupt>
      62:	00 00       	nop
      64:	50 c1       	rjmp	.+672    	; 0x306 <__bad_interrupt>
      66:	00 00       	nop
      68:	4e c1       	rjmp	.+668    	; 0x306 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4c c1       	rjmp	.+664    	; 0x306 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4a c1       	rjmp	.+660    	; 0x306 <__bad_interrupt>
      72:	00 00       	nop
      74:	48 c1       	rjmp	.+656    	; 0x306 <__bad_interrupt>
      76:	00 00       	nop
      78:	46 c1       	rjmp	.+652    	; 0x306 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	44 c1       	rjmp	.+648    	; 0x306 <__bad_interrupt>
      7e:	00 00       	nop
      80:	42 c1       	rjmp	.+644    	; 0x306 <__bad_interrupt>
      82:	00 00       	nop
      84:	40 c1       	rjmp	.+640    	; 0x306 <__bad_interrupt>
      86:	00 00       	nop
      88:	3e c1       	rjmp	.+636    	; 0x306 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3c c1       	rjmp	.+632    	; 0x306 <__bad_interrupt>
      8e:	00 00       	nop
      90:	3a c1       	rjmp	.+628    	; 0x306 <__bad_interrupt>
      92:	00 00       	nop
      94:	38 c1       	rjmp	.+624    	; 0x306 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4579>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4571>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4562>:
     11d:	53 74 69 6c 6c 20 49 6d 61 67 65 20 44 65 76 69     Still Image Devi
     12d:	63 65 20 45 6e 75 6d 65 72 61 74 65 64 2e 0d 0a     ce Enumerated...
     13d:	00                                                  .

0000013e <__c.4560>:
     13e:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     14e:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     15e:	6f 6e 2e 0d 0a 00                                   on....

00000164 <__c.4558>:
     164:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     174:	4e 6f 74 20 61 20 56 61 6c 69 64 20 53 74 69 6c     Not a Valid Stil
     184:	6c 20 49 6d 61 67 65 20 43 6c 61 73 73 20 44 65     l Image Class De
     194:	76 69 63 65 2e 0d 0a 00                             vice....

0000019c <__c.4556>:
     19c:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1ac:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1bc:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001c9 <__c.4549>:
     1c9:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1d9:	68 65 64 2e 0d 0a 00                                hed....

000001e0 <__c.4544>:
     1e0:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     1f0:	0d 0a 00                                            ...

000001f3 <__c.4535>:
     1f3:	43 6f 75 6c 64 20 6e 6f 74 20 63 6c 6f 73 65 20     Could not close 
     203:	50 49 4d 41 20 73 65 73 73 69 6f 6e 2e 0d 0a 00     PIMA session....

00000213 <__c.4533>:
     213:	43 6c 6f 73 69 6e 67 20 53 65 73 73 69 6f 6e 2e     Closing Session.
     223:	2e 2e 0d 0a 00                                      .....

00000228 <__c.4531>:
     228:	44 65 76 69 63 65 20 4f 66 66 2e 0d 0a 00           Device Off....

00000236 <__c.4529>:
     236:	43 6f 75 6c 64 20 6e 6f 74 20 74 75 72 6e 20 6f     Could not turn o
     246:	66 66 20 64 65 76 69 63 65 2e 0d 0a 00              ff device....

00000253 <__c.4527>:
     253:	54 75 72 6e 69 6e 67 20 6f 66 66 20 44 65 76 69     Turning off Devi
     263:	63 65 2e 2e 2e 0d 0a 00                             ce......

0000026b <__c.4525>:
     26b:	43 6f 75 6c 64 20 6e 6f 74 20 6f 70 65 6e 20 50     Could not open P
     27b:	49 4d 41 20 73 65 73 73 69 6f 6e 2e 0d 0a 00        IMA session....

0000028a <__c.4523>:
     28a:	4f 70 65 6e 69 6e 67 20 53 65 73 73 69 6f 6e 2e     Opening Session.
     29a:	2e 2e 0d 0a 00                                      .....

0000029f <__c.4510>:
     29f:	1b 5b 33 36 6d 53 74 69 6c 6c 20 49 6d 61 67 65     .[36mStill Image
     2af:	20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e 69      Host Demo runni
     2bf:	6e 67 2e 0d 0a 1b 5b 33 37 6d 00                    ng....[37m.

000002ca <__ctors_end>:
     2ca:	11 24       	eor	r1, r1
     2cc:	1f be       	out	0x3f, r1	; 63
     2ce:	cf ef       	ldi	r28, 0xFF	; 255
     2d0:	d0 e2       	ldi	r29, 0x20	; 32
     2d2:	de bf       	out	0x3e, r29	; 62
     2d4:	cd bf       	out	0x3d, r28	; 61

000002d6 <__do_copy_data>:
     2d6:	11 e0       	ldi	r17, 0x01	; 1
     2d8:	a0 e0       	ldi	r26, 0x00	; 0
     2da:	b1 e0       	ldi	r27, 0x01	; 1
     2dc:	ea ee       	ldi	r30, 0xEA	; 234
     2de:	fe e1       	ldi	r31, 0x1E	; 30
     2e0:	00 e0       	ldi	r16, 0x00	; 0
     2e2:	0b bf       	out	0x3b, r16	; 59
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <__do_copy_data+0x14>
     2e6:	07 90       	elpm	r0, Z+
     2e8:	0d 92       	st	X+, r0
     2ea:	a4 32       	cpi	r26, 0x24	; 36
     2ec:	b1 07       	cpc	r27, r17
     2ee:	d9 f7       	brne	.-10     	; 0x2e6 <__do_copy_data+0x10>

000002f0 <__do_clear_bss>:
     2f0:	11 e0       	ldi	r17, 0x01	; 1
     2f2:	a4 e2       	ldi	r26, 0x24	; 36
     2f4:	b1 e0       	ldi	r27, 0x01	; 1
     2f6:	01 c0       	rjmp	.+2      	; 0x2fa <.do_clear_bss_start>

000002f8 <.do_clear_bss_loop>:
     2f8:	1d 92       	st	X+, r1

000002fa <.do_clear_bss_start>:
     2fa:	a6 34       	cpi	r26, 0x46	; 70
     2fc:	b1 07       	cpc	r27, r17
     2fe:	e1 f7       	brne	.-8      	; 0x2f8 <.do_clear_bss_loop>
     300:	36 d1       	rcall	.+620    	; 0x56e <main>
     302:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <_exit>

00000306 <__bad_interrupt>:
     306:	7c ce       	rjmp	.-776    	; 0x0 <__vectors>

00000308 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     308:	90 91 31 01 	lds	r25, 0x0131
     30c:	2d b7       	in	r18, 0x3d	; 61
     30e:	3e b7       	in	r19, 0x3e	; 62
     310:	28 50       	subi	r18, 0x08	; 8
     312:	30 40       	sbci	r19, 0x00	; 0
     314:	0f b6       	in	r0, 0x3f	; 63
     316:	f8 94       	cli
     318:	3e bf       	out	0x3e, r19	; 62
     31a:	0f be       	out	0x3f, r0	; 63
     31c:	2d bf       	out	0x3d, r18	; 61
     31e:	ed b7       	in	r30, 0x3d	; 61
     320:	fe b7       	in	r31, 0x3e	; 62
     322:	31 96       	adiw	r30, 0x01	; 1
     324:	28 e9       	ldi	r18, 0x98	; 152
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	ad b7       	in	r26, 0x3d	; 61
     32a:	be b7       	in	r27, 0x3e	; 62
     32c:	12 96       	adiw	r26, 0x02	; 2
     32e:	3c 93       	st	X, r19
     330:	2e 93       	st	-X, r18
     332:	11 97       	sbiw	r26, 0x01	; 1
     334:	82 83       	std	Z+2, r24	; 0x02
     336:	13 82       	std	Z+3, r1	; 0x03
     338:	64 83       	std	Z+4, r22	; 0x04
     33a:	15 82       	std	Z+5, r1	; 0x05
     33c:	96 83       	std	Z+6, r25	; 0x06
     33e:	17 82       	std	Z+7, r1	; 0x07
     340:	0e 94 83 0c 	call	0x1906	; 0x1906 <printf_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     344:	8b b1       	in	r24, 0x0b	; 11
     346:	8f 70       	andi	r24, 0x0F	; 15
     348:	80 69       	ori	r24, 0x90	; 144
     34a:	8b b9       	out	0x0b, r24	; 11
     34c:	2d b7       	in	r18, 0x3d	; 61
     34e:	3e b7       	in	r19, 0x3e	; 62
     350:	28 5f       	subi	r18, 0xF8	; 248
     352:	3f 4f       	sbci	r19, 0xFF	; 255
     354:	0f b6       	in	r0, 0x3f	; 63
     356:	f8 94       	cli
     358:	3e bf       	out	0x3e, r19	; 62
     35a:	0f be       	out	0x3f, r0	; 63
     35c:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     35e:	08 95       	ret

00000360 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     360:	1f 93       	push	r17
     362:	18 2f       	mov	r17, r24
	USB_Disable();
     364:	f5 d3       	rcall	.+2026   	; 0xb50 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     366:	00 d0       	rcall	.+0      	; 0x368 <EVENT_USB_Host_HostError+0x8>
     368:	00 d0       	rcall	.+0      	; 0x36a <EVENT_USB_Host_HostError+0xa>
     36a:	ed b7       	in	r30, 0x3d	; 61
     36c:	fe b7       	in	r31, 0x3e	; 62
     36e:	31 96       	adiw	r30, 0x01	; 1
     370:	8e ee       	ldi	r24, 0xEE	; 238
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	ad b7       	in	r26, 0x3d	; 61
     376:	be b7       	in	r27, 0x3e	; 62
     378:	12 96       	adiw	r26, 0x02	; 2
     37a:	9c 93       	st	X, r25
     37c:	8e 93       	st	-X, r24
     37e:	11 97       	sbiw	r26, 0x01	; 1
     380:	12 83       	std	Z+2, r17	; 0x02
     382:	13 82       	std	Z+3, r1	; 0x03
     384:	0e 94 83 0c 	call	0x1906	; 0x1906 <printf_P>
     388:	8b b1       	in	r24, 0x0b	; 11
     38a:	8f 70       	andi	r24, 0x0F	; 15
     38c:	80 69       	ori	r24, 0x90	; 144
     38e:	8b b9       	out	0x0b, r24	; 11
     390:	0f 90       	pop	r0
     392:	0f 90       	pop	r0
     394:	0f 90       	pop	r0
     396:	0f 90       	pop	r0
     398:	ff cf       	rjmp	.-2      	; 0x398 <EVENT_USB_Host_HostError+0x38>

0000039a <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     39a:	89 ec       	ldi	r24, 0xC9	; 201
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	0e 94 a5 0c 	call	0x194a	; 0x194a <puts_P>
     3a2:	8b b1       	in	r24, 0x0b	; 11
     3a4:	8f 70       	andi	r24, 0x0F	; 15
     3a6:	80 61       	ori	r24, 0x10	; 16
     3a8:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     3aa:	08 95       	ret

000003ac <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     3ac:	80 ee       	ldi	r24, 0xE0	; 224
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	0e 94 a5 0c 	call	0x194a	; 0x194a <puts_P>
     3b4:	8b b1       	in	r24, 0x0b	; 11
     3b6:	8f 70       	andi	r24, 0x0F	; 15
     3b8:	80 6a       	ori	r24, 0xA0	; 160
     3ba:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     3bc:	08 95       	ret

000003be <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     3be:	0f 93       	push	r16
     3c0:	1f 93       	push	r17
     3c2:	df 93       	push	r29
     3c4:	cf 93       	push	r28
     3c6:	cd b7       	in	r28, 0x3d	; 61
     3c8:	de b7       	in	r29, 0x3e	; 62
     3ca:	c2 50       	subi	r28, 0x02	; 2
     3cc:	d2 40       	sbci	r29, 0x02	; 2
     3ce:	0f b6       	in	r0, 0x3f	; 63
     3d0:	f8 94       	cli
     3d2:	de bf       	out	0x3e, r29	; 62
     3d4:	0f be       	out	0x3f, r0	; 63
     3d6:	cd bf       	out	0x3d, r28	; 61
     3d8:	8b b1       	in	r24, 0x0b	; 11
     3da:	8f 70       	andi	r24, 0x0F	; 15
     3dc:	80 6a       	ori	r24, 0xA0	; 160
     3de:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     3e0:	8e 01       	movw	r16, r28
     3e2:	0d 5f       	subi	r16, 0xFD	; 253
     3e4:	1f 4f       	sbci	r17, 0xFF	; 255
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	be 01       	movw	r22, r28
     3ea:	6f 5f       	subi	r22, 0xFF	; 255
     3ec:	7f 4f       	sbci	r23, 0xFF	; 255
     3ee:	a8 01       	movw	r20, r16
     3f0:	20 e0       	ldi	r18, 0x00	; 0
     3f2:	32 e0       	ldi	r19, 0x02	; 2
     3f4:	57 d5       	rcall	.+2734   	; 0xea4 <USB_Host_GetDeviceConfigDescriptor>
     3f6:	88 23       	and	r24, r24
     3f8:	19 f0       	breq	.+6      	; 0x400 <EVENT_USB_Host_DeviceEnumerationComplete+0x42>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     3fa:	8c e9       	ldi	r24, 0x9C	; 156
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	12 c0       	rjmp	.+36     	; 0x424 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (SI_Host_ConfigurePipes(&DigitalCamera_SI_Interface,
     400:	69 81       	ldd	r22, Y+1	; 0x01
     402:	7a 81       	ldd	r23, Y+2	; 0x02
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	91 e0       	ldi	r25, 0x01	; 1
     408:	a8 01       	movw	r20, r16
     40a:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <SI_Host_ConfigurePipes>
     40e:	88 23       	and	r24, r24
     410:	19 f0       	breq	.+6      	; 0x418 <EVENT_USB_Host_DeviceEnumerationComplete+0x5a>
	                           ConfigDescriptorSize, ConfigDescriptorData) != SI_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Still Image Class Device.\r\n"));
     412:	84 e6       	ldi	r24, 0x64	; 100
     414:	91 e0       	ldi	r25, 0x01	; 1
     416:	06 c0       	rjmp	.+12     	; 0x424 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	fd d6       	rcall	.+3578   	; 0x1216 <USB_Host_SetDeviceConfiguration>
     41c:	88 23       	and	r24, r24
     41e:	41 f0       	breq	.+16     	; 0x430 <EVENT_USB_Host_DeviceEnumerationComplete+0x72>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     420:	8e e3       	ldi	r24, 0x3E	; 62
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	0e 94 a5 0c 	call	0x194a	; 0x194a <puts_P>
     428:	8b b1       	in	r24, 0x0b	; 11
     42a:	8f 70       	andi	r24, 0x0F	; 15
     42c:	80 69       	ori	r24, 0x90	; 144
     42e:	07 c0       	rjmp	.+14     	; 0x43e <EVENT_USB_Host_DeviceEnumerationComplete+0x80>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	puts_P(PSTR("Still Image Device Enumerated.\r\n"));
     430:	8d e1       	ldi	r24, 0x1D	; 29
     432:	91 e0       	ldi	r25, 0x01	; 1
     434:	0e 94 a5 0c 	call	0x194a	; 0x194a <puts_P>
     438:	8b b1       	in	r24, 0x0b	; 11
     43a:	8f 70       	andi	r24, 0x0F	; 15
     43c:	80 66       	ori	r24, 0x60	; 96
     43e:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     440:	ce 5f       	subi	r28, 0xFE	; 254
     442:	dd 4f       	sbci	r29, 0xFD	; 253
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	f8 94       	cli
     448:	de bf       	out	0x3e, r29	; 62
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	cd bf       	out	0x3d, r28	; 61
     44e:	cf 91       	pop	r28
     450:	df 91       	pop	r29
     452:	1f 91       	pop	r17
     454:	0f 91       	pop	r16
     456:	08 95       	ret

00000458 <StillImageHost_Task>:
/** Task to manage an enumerated USB Still Image device once connected, to manage a
 *  new PIMA session in order to send commands to the attached device.
 */
void StillImageHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     458:	80 91 31 01 	lds	r24, 0x0131
     45c:	8b 30       	cpi	r24, 0x0B	; 11
     45e:	09 f0       	breq	.+2      	; 0x462 <StillImageHost_Task+0xa>
     460:	3c c0       	rjmp	.+120    	; 0x4da <StillImageHost_Task+0x82>
	  return;

	puts_P(PSTR("Opening Session...\r\n"));
     462:	8a e8       	ldi	r24, 0x8A	; 138
     464:	92 e0       	ldi	r25, 0x02	; 2
     466:	0e 94 a5 0c 	call	0x194a	; 0x194a <puts_P>

	if (SI_Host_OpenSession(&DigitalCamera_SI_Interface) != PIPE_RWSTREAM_NoError)
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	91 e0       	ldi	r25, 0x01	; 1
     46e:	0e 94 07 0b 	call	0x160e	; 0x160e <SI_Host_OpenSession>
     472:	88 23       	and	r24, r24
     474:	19 f0       	breq	.+6      	; 0x47c <StillImageHost_Task+0x24>
	{
		puts_P(PSTR("Could not open PIMA session.\r\n"));
     476:	8b e6       	ldi	r24, 0x6B	; 107
     478:	92 e0       	ldi	r25, 0x02	; 2
     47a:	25 c0       	rjmp	.+74     	; 0x4c6 <StillImageHost_Task+0x6e>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Turning off Device...\r\n"));
     47c:	83 e5       	ldi	r24, 0x53	; 83
     47e:	92 e0       	ldi	r25, 0x02	; 2
     480:	0e 94 a5 0c 	call	0x194a	; 0x194a <puts_P>

	SI_Host_SendCommand(&DigitalCamera_SI_Interface, 0x1013, 0, NULL);
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	63 e1       	ldi	r22, 0x13	; 19
     48a:	70 e1       	ldi	r23, 0x10	; 16
     48c:	40 e0       	ldi	r20, 0x00	; 0
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	57 d7       	rcall	.+3758   	; 0x1342 <SI_Host_SendCommand>
	if (SI_Host_ReceiveResponse(&DigitalCamera_SI_Interface))
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <SI_Host_ReceiveResponse>
     49c:	88 23       	and	r24, r24
     49e:	19 f0       	breq	.+6      	; 0x4a6 <StillImageHost_Task+0x4e>
	{
		puts_P(PSTR("Could not turn off device.\r\n"));
     4a0:	86 e3       	ldi	r24, 0x36	; 54
     4a2:	92 e0       	ldi	r25, 0x02	; 2
     4a4:	10 c0       	rjmp	.+32     	; 0x4c6 <StillImageHost_Task+0x6e>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Device Off.\r\n"));
     4a6:	88 e2       	ldi	r24, 0x28	; 40
     4a8:	92 e0       	ldi	r25, 0x02	; 2
     4aa:	0e 94 a5 0c 	call	0x194a	; 0x194a <puts_P>

	puts_P(PSTR("Closing Session...\r\n"));
     4ae:	83 e1       	ldi	r24, 0x13	; 19
     4b0:	92 e0       	ldi	r25, 0x02	; 2
     4b2:	0e 94 a5 0c 	call	0x194a	; 0x194a <puts_P>

	if (SI_Host_CloseSession(&DigitalCamera_SI_Interface) != PIPE_RWSTREAM_NoError)
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	0e 94 a5 0a 	call	0x154a	; 0x154a <SI_Host_CloseSession>
     4be:	88 23       	and	r24, r24
     4c0:	31 f0       	breq	.+12     	; 0x4ce <StillImageHost_Task+0x76>
	{
		puts_P(PSTR("Could not close PIMA session.\r\n"));
     4c2:	83 ef       	ldi	r24, 0xF3	; 243
     4c4:	91 e0       	ldi	r25, 0x01	; 1
     4c6:	0e 94 a5 0c 	call	0x194a	; 0x194a <puts_P>
		USB_Host_SetDeviceConfiguration(0);
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	a4 c6       	rjmp	.+3400   	; 0x1216 <USB_Host_SetDeviceConfiguration>
     4ce:	8b b1       	in	r24, 0x0b	; 11
     4d0:	8f 70       	andi	r24, 0x0F	; 15
     4d2:	80 66       	ori	r24, 0x60	; 96
     4d4:	8b b9       	out	0x0b, r24	; 11
		return;
	}

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
	USB_Host_SetDeviceConfiguration(0);
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	9e c6       	rjmp	.+3388   	; 0x1216 <USB_Host_SetDeviceConfiguration>
     4da:	08 95       	ret

000004dc <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     4dc:	84 b7       	in	r24, 0x34	; 52
     4de:	87 7f       	andi	r24, 0xF7	; 247
     4e0:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     4e2:	28 e1       	ldi	r18, 0x18	; 24
     4e4:	0f b6       	in	r0, 0x3f	; 63
     4e6:	f8 94       	cli
     4e8:	20 93 60 00 	sts	0x0060, r18
     4ec:	10 92 60 00 	sts	0x0060, r1
     4f0:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	80 e8       	ldi	r24, 0x80	; 128
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	f8 94       	cli
     4fa:	80 93 61 00 	sts	0x0061, r24
     4fe:	90 93 61 00 	sts	0x0061, r25
     502:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     504:	83 e3       	ldi	r24, 0x33	; 51
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	90 93 cd 00 	sts	0x00CD, r25
     50c:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     510:	86 e0       	ldi	r24, 0x06	; 6
     512:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     516:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     51a:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     51e:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     520:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     522:	8a b1       	in	r24, 0x0a	; 10
     524:	80 6f       	ori	r24, 0xF0	; 240
     526:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     528:	8b b1       	in	r24, 0x0b	; 11
     52a:	8f 70       	andi	r24, 0x0F	; 15
     52c:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     52e:	07 d3       	rcall	.+1550   	; 0xb3e <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     530:	e2 e3       	ldi	r30, 0x32	; 50
     532:	f1 e0       	ldi	r31, 0x01	; 1
     534:	f0 93 41 01 	sts	0x0141, r31
     538:	e0 93 40 01 	sts	0x0140, r30
					stdout = Stream;
     53c:	f0 93 43 01 	sts	0x0143, r31
     540:	e0 93 42 01 	sts	0x0142, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     544:	8e e0       	ldi	r24, 0x0E	; 14
     546:	df 01       	movw	r26, r30
     548:	1d 92       	st	X+, r1
     54a:	8a 95       	dec	r24
     54c:	e9 f7       	brne	.-6      	; 0x548 <SetupHardware+0x6c>
     54e:	83 e0       	ldi	r24, 0x03	; 3
     550:	80 93 35 01 	sts	0x0135, r24
     554:	8c e5       	ldi	r24, 0x5C	; 92
     556:	9c e0       	ldi	r25, 0x0C	; 12
     558:	90 93 3b 01 	sts	0x013B, r25
     55c:	80 93 3a 01 	sts	0x013A, r24
     560:	86 e6       	ldi	r24, 0x66	; 102
     562:	9c e0       	ldi	r25, 0x0C	; 12
     564:	90 93 3d 01 	sts	0x013D, r25
     568:	80 93 3c 01 	sts	0x013C, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     56c:	08 95       	ret

0000056e <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     56e:	b6 df       	rcall	.-148    	; 0x4dc <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Still Image Host Demo running.\r\n" ESC_FG_WHITE));
     570:	8f e9       	ldi	r24, 0x9F	; 159
     572:	92 e0       	ldi	r25, 0x02	; 2
     574:	0e 94 a5 0c 	call	0x194a	; 0x194a <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     578:	8b b1       	in	r24, 0x0b	; 11
     57a:	8f 70       	andi	r24, 0x0F	; 15
     57c:	80 61       	ori	r24, 0x10	; 16
     57e:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     580:	78 94       	sei

	for (;;)
	{
		StillImageHost_Task();
     582:	6a df       	rcall	.-300    	; 0x458 <StillImageHost_Task>
		
		SI_Host_USBTask(&DigitalCamera_SI_Interface);
		USB_USBTask();
     584:	6d d6       	rcall	.+3290   	; 0x1260 <USB_USBTask>
     586:	fd cf       	rjmp	.-6      	; 0x582 <main+0x14>

00000588 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     588:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     58a:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     58e:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     592:	80 91 a0 00 	lds	r24, 0x00A0
     596:	8f 7d       	andi	r24, 0xDF	; 223
     598:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     59c:	80 91 9f 00 	lds	r24, 0x009F
     5a0:	8f 7d       	andi	r24, 0xDF	; 223
     5a2:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     5a6:	80 91 9e 00 	lds	r24, 0x009E
     5aa:	81 60       	ori	r24, 0x01	; 1
     5ac:	80 93 9e 00 	sts	0x009E, r24
     5b0:	28 c0       	rjmp	.+80     	; 0x602 <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     5b2:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     5b6:	85 ff       	sbrs	r24, 5
     5b8:	06 c0       	rjmp	.+12     	; 0x5c6 <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     5ba:	80 91 9f 00 	lds	r24, 0x009F
     5be:	8f 7d       	andi	r24, 0xDF	; 223
     5c0:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     5c4:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     5c6:	80 91 31 01 	lds	r24, 0x0131
     5ca:	81 30       	cpi	r24, 0x01	; 1
     5cc:	11 f4       	brne	.+4      	; 0x5d2 <USB_Host_WaitMS+0x4a>
     5ce:	91 e0       	ldi	r25, 0x01	; 1
     5d0:	1a c0       	rjmp	.+52     	; 0x606 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     5d2:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     5d6:	84 ff       	sbrs	r24, 4
     5d8:	09 c0       	rjmp	.+18     	; 0x5ec <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     5da:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     5de:	80 91 a6 00 	lds	r24, 0x00A6
     5e2:	8f 7e       	andi	r24, 0xEF	; 239
     5e4:	80 93 a6 00 	sts	0x00A6, r24
     5e8:	92 e0       	ldi	r25, 0x02	; 2
     5ea:	0d c0       	rjmp	.+26     	; 0x606 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     5ec:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     5f0:	81 ff       	sbrs	r24, 1
     5f2:	07 c0       	rjmp	.+14     	; 0x602 <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     5f4:	80 91 a6 00 	lds	r24, 0x00A6
     5f8:	8d 7f       	andi	r24, 0xFD	; 253
     5fa:	80 93 a6 00 	sts	0x00A6, r24
     5fe:	93 e0       	ldi	r25, 0x03	; 3
     600:	02 c0       	rjmp	.+4      	; 0x606 <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     602:	99 23       	and	r25, r25
     604:	b1 f6       	brne	.-84     	; 0x5b2 <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     606:	20 fd       	sbrc	r18, 0
     608:	05 c0       	rjmp	.+10     	; 0x614 <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     60a:	80 91 9e 00 	lds	r24, 0x009E
     60e:	8e 7f       	andi	r24, 0xFE	; 254
     610:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     614:	35 ff       	sbrs	r19, 5
     616:	05 c0       	rjmp	.+10     	; 0x622 <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     618:	80 91 a0 00 	lds	r24, 0x00A0
     61c:	80 62       	ori	r24, 0x20	; 32
     61e:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     622:	89 2f       	mov	r24, r25
     624:	08 95       	ret

00000626 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     626:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     62a:	80 91 a0 00 	lds	r24, 0x00A0
     62e:	8d 7f       	andi	r24, 0xFD	; 253
     630:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     634:	80 91 9e 00 	lds	r24, 0x009E
     638:	82 60       	ori	r24, 0x02	; 2
     63a:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     63e:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     642:	81 fd       	sbrc	r24, 1
     644:	fc cf       	rjmp	.-8      	; 0x63e <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     646:	80 91 9e 00 	lds	r24, 0x009E
     64a:	81 60       	ori	r24, 0x01	; 1
     64c:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     650:	10 92 27 01 	sts	0x0127, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     654:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     658:	80 91 a0 00 	lds	r24, 0x00A0
     65c:	8f 7d       	andi	r24, 0xDF	; 223
     65e:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     662:	80 91 9f 00 	lds	r24, 0x009F
     666:	8f 7d       	andi	r24, 0xDF	; 223
     668:	80 93 9f 00 	sts	0x009F, r24
     66c:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     66e:	40 ed       	ldi	r20, 0xD0	; 208
     670:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     672:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     676:	85 ff       	sbrs	r24, 5
     678:	0b c0       	rjmp	.+22     	; 0x690 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     67a:	80 91 9f 00 	lds	r24, 0x009F
     67e:	8f 7d       	andi	r24, 0xDF	; 223
     680:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     684:	80 91 9f 00 	lds	r24, 0x009F
     688:	8d 7f       	andi	r24, 0xFD	; 253
     68a:	80 93 9f 00 	sts	0x009F, r24
     68e:	05 c0       	rjmp	.+10     	; 0x69a <USB_Host_ResetDevice+0x74>
     690:	ca 01       	movw	r24, r20
     692:	01 97       	sbiw	r24, 0x01	; 1
     694:	f1 f7       	brne	.-4      	; 0x692 <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     696:	21 50       	subi	r18, 0x01	; 1
     698:	61 f7       	brne	.-40     	; 0x672 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     69a:	35 ff       	sbrs	r19, 5
     69c:	05 c0       	rjmp	.+10     	; 0x6a8 <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     69e:	80 91 a0 00 	lds	r24, 0x00A0
     6a2:	80 62       	ori	r24, 0x20	; 32
     6a4:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     6a8:	60 fd       	sbrc	r22, 0
     6aa:	05 c0       	rjmp	.+10     	; 0x6b6 <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     6ac:	80 91 9e 00 	lds	r24, 0x009E
     6b0:	8e 7f       	andi	r24, 0xFE	; 254
     6b2:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     6b6:	80 91 a0 00 	lds	r24, 0x00A0
     6ba:	82 60       	ori	r24, 0x02	; 2
     6bc:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     6c0:	08 95       	ret

000006c2 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     6c2:	ef 92       	push	r14
     6c4:	0f 93       	push	r16
     6c6:	1f 93       	push	r17
     6c8:	df 93       	push	r29
     6ca:	cf 93       	push	r28
     6cc:	cd b7       	in	r28, 0x3d	; 61
     6ce:	de b7       	in	r29, 0x3e	; 62
     6d0:	28 97       	sbiw	r28, 0x08	; 8
     6d2:	0f b6       	in	r0, 0x3f	; 63
     6d4:	f8 94       	cli
     6d6:	de bf       	out	0x3e, r29	; 62
     6d8:	0f be       	out	0x3f, r0	; 63
     6da:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     6dc:	80 91 31 01 	lds	r24, 0x0131
     6e0:	85 30       	cpi	r24, 0x05	; 5
     6e2:	09 f4       	brne	.+2      	; 0x6e6 <USB_Host_ProcessNextHostState+0x24>
     6e4:	94 c0       	rjmp	.+296    	; 0x80e <USB_Host_ProcessNextHostState+0x14c>
     6e6:	86 30       	cpi	r24, 0x06	; 6
     6e8:	68 f4       	brcc	.+26     	; 0x704 <USB_Host_ProcessNextHostState+0x42>
     6ea:	82 30       	cpi	r24, 0x02	; 2
     6ec:	b9 f1       	breq	.+110    	; 0x75c <USB_Host_ProcessNextHostState+0x9a>
     6ee:	83 30       	cpi	r24, 0x03	; 3
     6f0:	18 f4       	brcc	.+6      	; 0x6f8 <USB_Host_ProcessNextHostState+0x36>
     6f2:	88 23       	and	r24, r24
     6f4:	a1 f0       	breq	.+40     	; 0x71e <USB_Host_ProcessNextHostState+0x5c>
     6f6:	04 c1       	rjmp	.+520    	; 0x900 <USB_Host_ProcessNextHostState+0x23e>
     6f8:	83 30       	cpi	r24, 0x03	; 3
     6fa:	d1 f1       	breq	.+116    	; 0x770 <USB_Host_ProcessNextHostState+0xae>
     6fc:	84 30       	cpi	r24, 0x04	; 4
     6fe:	09 f0       	breq	.+2      	; 0x702 <USB_Host_ProcessNextHostState+0x40>
     700:	ff c0       	rjmp	.+510    	; 0x900 <USB_Host_ProcessNextHostState+0x23e>
     702:	5d c0       	rjmp	.+186    	; 0x7be <USB_Host_ProcessNextHostState+0xfc>
     704:	87 30       	cpi	r24, 0x07	; 7
     706:	09 f4       	brne	.+2      	; 0x70a <USB_Host_ProcessNextHostState+0x48>
     708:	9b c0       	rjmp	.+310    	; 0x840 <USB_Host_ProcessNextHostState+0x17e>
     70a:	87 30       	cpi	r24, 0x07	; 7
     70c:	08 f4       	brcc	.+2      	; 0x710 <USB_Host_ProcessNextHostState+0x4e>
     70e:	8a c0       	rjmp	.+276    	; 0x824 <USB_Host_ProcessNextHostState+0x162>
     710:	88 30       	cpi	r24, 0x08	; 8
     712:	09 f4       	brne	.+2      	; 0x716 <USB_Host_ProcessNextHostState+0x54>
     714:	b3 c0       	rjmp	.+358    	; 0x87c <USB_Host_ProcessNextHostState+0x1ba>
     716:	89 30       	cpi	r24, 0x09	; 9
     718:	09 f0       	breq	.+2      	; 0x71c <USB_Host_ProcessNextHostState+0x5a>
     71a:	f2 c0       	rjmp	.+484    	; 0x900 <USB_Host_ProcessNextHostState+0x23e>
     71c:	d7 c0       	rjmp	.+430    	; 0x8cc <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     71e:	00 91 25 01 	lds	r16, 0x0125
     722:	10 91 26 01 	lds	r17, 0x0126
     726:	01 15       	cp	r16, r1
     728:	11 05       	cpc	r17, r1
     72a:	09 f4       	brne	.+2      	; 0x72e <USB_Host_ProcessNextHostState+0x6c>
     72c:	e9 c0       	rjmp	.+466    	; 0x900 <USB_Host_ProcessNextHostState+0x23e>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	2b df       	rcall	.-426    	; 0x588 <USB_Host_WaitMS>
     732:	68 2f       	mov	r22, r24
     734:	88 23       	and	r24, r24
     736:	31 f0       	breq	.+12     	; 0x744 <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
     738:	80 91 24 01 	lds	r24, 0x0124
     73c:	80 93 31 01 	sts	0x0131, r24
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	da c0       	rjmp	.+436    	; 0x8f8 <USB_Host_ProcessNextHostState+0x236>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     744:	c8 01       	movw	r24, r16
     746:	01 97       	sbiw	r24, 0x01	; 1
     748:	90 93 26 01 	sts	0x0126, r25
     74c:	80 93 25 01 	sts	0x0125, r24
     750:	89 2b       	or	r24, r25
     752:	09 f0       	breq	.+2      	; 0x756 <USB_Host_ProcessNextHostState+0x94>
     754:	d5 c0       	rjmp	.+426    	; 0x900 <USB_Host_ProcessNextHostState+0x23e>
				  USB_HostState = PostWaitState;
     756:	80 91 24 01 	lds	r24, 0x0124
     75a:	07 c0       	rjmp	.+14     	; 0x76a <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     75c:	88 ee       	ldi	r24, 0xE8	; 232
     75e:	93 e0       	ldi	r25, 0x03	; 3
     760:	90 93 26 01 	sts	0x0126, r25
     764:	80 93 25 01 	sts	0x0125, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     768:	83 e0       	ldi	r24, 0x03	; 3
     76a:	80 93 31 01 	sts	0x0131, r24
     76e:	c8 c0       	rjmp	.+400    	; 0x900 <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     770:	80 91 25 01 	lds	r24, 0x0125
     774:	90 91 26 01 	lds	r25, 0x0126
     778:	01 97       	sbiw	r24, 0x01	; 1
     77a:	90 93 26 01 	sts	0x0126, r25
     77e:	80 93 25 01 	sts	0x0125, r24
     782:	01 96       	adiw	r24, 0x01	; 1
     784:	29 f0       	breq	.+10     	; 0x790 <USB_Host_ProcessNextHostState+0xce>
     786:	80 ed       	ldi	r24, 0xD0	; 208
     788:	97 e0       	ldi	r25, 0x07	; 7
     78a:	01 97       	sbiw	r24, 0x01	; 1
     78c:	f1 f7       	brne	.-4      	; 0x78a <USB_Host_ProcessNextHostState+0xc8>
     78e:	b8 c0       	rjmp	.+368    	; 0x900 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     790:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     792:	80 91 d8 00 	lds	r24, 0x00D8
     796:	80 61       	ori	r24, 0x10	; 16
     798:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     79c:	80 91 dd 00 	lds	r24, 0x00DD
     7a0:	8b 7f       	andi	r24, 0xFB	; 251
     7a2:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     7a6:	80 91 d7 00 	lds	r24, 0x00D7
     7aa:	80 61       	ori	r24, 0x10	; 16
     7ac:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     7b0:	80 91 dd 00 	lds	r24, 0x00DD
     7b4:	82 60       	ori	r24, 0x02	; 2
     7b6:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     7ba:	84 e0       	ldi	r24, 0x04	; 4
     7bc:	d6 cf       	rjmp	.-84     	; 0x76a <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     7be:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     7c2:	80 ff       	sbrs	r24, 0
     7c4:	9d c0       	rjmp	.+314    	; 0x900 <USB_Host_ProcessNextHostState+0x23e>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     7c6:	80 91 9f 00 	lds	r24, 0x009F
     7ca:	8e 7f       	andi	r24, 0xFE	; 254
     7cc:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     7d0:	80 91 9f 00 	lds	r24, 0x009F
     7d4:	8d 7f       	andi	r24, 0xFD	; 253
     7d6:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     7da:	80 91 df 00 	lds	r24, 0x00DF
     7de:	8d 7f       	andi	r24, 0xFD	; 253
     7e0:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     7e4:	80 91 de 00 	lds	r24, 0x00DE
     7e8:	82 60       	ori	r24, 0x02	; 2
     7ea:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     7ee:	80 91 9e 00 	lds	r24, 0x009E
     7f2:	81 60       	ori	r24, 0x01	; 1
     7f4:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     7f8:	ed d0       	rcall	.+474    	; 0x9d4 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     7fa:	10 92 31 01 	sts	0x0131, r1
     7fe:	84 e6       	ldi	r24, 0x64	; 100
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	90 93 26 01 	sts	0x0126, r25
     806:	80 93 25 01 	sts	0x0125, r24
     80a:	85 e0       	ldi	r24, 0x05	; 5
     80c:	5c c0       	rjmp	.+184    	; 0x8c6 <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     80e:	0b df       	rcall	.-490    	; 0x626 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     810:	10 92 31 01 	sts	0x0131, r1
     814:	88 ec       	ldi	r24, 0xC8	; 200
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	90 93 26 01 	sts	0x0126, r25
     81c:	80 93 25 01 	sts	0x0125, r24
     820:	86 e0       	ldi	r24, 0x06	; 6
     822:	51 c0       	rjmp	.+162    	; 0x8c6 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	40 e0       	ldi	r20, 0x00	; 0
     82a:	20 e0       	ldi	r18, 0x00	; 0
     82c:	00 e4       	ldi	r16, 0x40	; 64
     82e:	10 e0       	ldi	r17, 0x00	; 0
     830:	ee 24       	eor	r14, r14
     832:	72 d0       	rcall	.+228    	; 0x918 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     834:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     838:	87 ff       	sbrs	r24, 7
     83a:	5c c0       	rjmp	.+184    	; 0x8f4 <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     83c:	87 e0       	ldi	r24, 0x07	; 7
     83e:	95 cf       	rjmp	.-214    	; 0x76a <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     840:	a9 e2       	ldi	r26, 0x29	; 41
     842:	b1 e0       	ldi	r27, 0x01	; 1
     844:	eb e1       	ldi	r30, 0x1B	; 27
     846:	f1 e0       	ldi	r31, 0x01	; 1
     848:	88 e0       	ldi	r24, 0x08	; 8
     84a:	01 90       	ld	r0, Z+
     84c:	0d 92       	st	X+, r0
     84e:	81 50       	subi	r24, 0x01	; 1
     850:	e1 f7       	brne	.-8      	; 0x84a <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     852:	ce 01       	movw	r24, r28
     854:	01 96       	adiw	r24, 0x01	; 1
     856:	aa d3       	rcall	.+1876   	; 0xfac <USB_Host_SendControlRequest>
     858:	68 2f       	mov	r22, r24
     85a:	88 23       	and	r24, r24
     85c:	09 f0       	breq	.+2      	; 0x860 <USB_Host_ProcessNextHostState+0x19e>
     85e:	48 c0       	rjmp	.+144    	; 0x8f0 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     860:	88 85       	ldd	r24, Y+8	; 0x08
     862:	80 93 23 01 	sts	0x0123, r24

			USB_Host_ResetDevice();
     866:	df de       	rcall	.-578    	; 0x626 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     868:	10 92 31 01 	sts	0x0131, r1
     86c:	88 ec       	ldi	r24, 0xC8	; 200
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	90 93 26 01 	sts	0x0126, r25
     874:	80 93 25 01 	sts	0x0125, r24
     878:	88 e0       	ldi	r24, 0x08	; 8
     87a:	25 c0       	rjmp	.+74     	; 0x8c6 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     87c:	00 91 23 01 	lds	r16, 0x0123
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	40 e0       	ldi	r20, 0x00	; 0
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	10 e0       	ldi	r17, 0x00	; 0
     88a:	ee 24       	eor	r14, r14
     88c:	45 d0       	rcall	.+138    	; 0x918 <Pipe_ConfigurePipe>
     88e:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     892:	87 ff       	sbrs	r24, 7
     894:	2f c0       	rjmp	.+94     	; 0x8f4 <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     896:	a9 e2       	ldi	r26, 0x29	; 41
     898:	b1 e0       	ldi	r27, 0x01	; 1
     89a:	e3 e1       	ldi	r30, 0x13	; 19
     89c:	f1 e0       	ldi	r31, 0x01	; 1
     89e:	88 e0       	ldi	r24, 0x08	; 8
     8a0:	01 90       	ld	r0, Z+
     8a2:	0d 92       	st	X+, r0
     8a4:	81 50       	subi	r24, 0x01	; 1
     8a6:	e1 f7       	brne	.-8      	; 0x8a0 <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	7f d3       	rcall	.+1790   	; 0xfac <USB_Host_SendControlRequest>
     8ae:	68 2f       	mov	r22, r24
     8b0:	88 23       	and	r24, r24
     8b2:	f1 f4       	brne	.+60     	; 0x8f0 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     8b4:	10 92 31 01 	sts	0x0131, r1
     8b8:	84 e6       	ldi	r24, 0x64	; 100
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	90 93 26 01 	sts	0x0126, r25
     8c0:	80 93 25 01 	sts	0x0125, r24
     8c4:	89 e0       	ldi	r24, 0x09	; 9
     8c6:	80 93 24 01 	sts	0x0124, r24
     8ca:	1a c0       	rjmp	.+52     	; 0x900 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     8d2:	8a e0       	ldi	r24, 0x0A	; 10
     8d4:	80 93 31 01 	sts	0x0131, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     8d8:	72 dd       	rcall	.-1308   	; 0x3be <EVENT_USB_Host_DeviceEnumerationComplete>
     8da:	12 c0       	rjmp	.+36     	; 0x900 <USB_Host_ProcessNextHostState+0x23e>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     8dc:	89 2f       	mov	r24, r25
     8de:	14 dd       	rcall	.-1496   	; 0x308 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     8e0:	80 91 dd 00 	lds	r24, 0x00DD
     8e4:	81 60       	ori	r24, 0x01	; 1
     8e6:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     8ea:	57 dd       	rcall	.-1362   	; 0x39a <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     8ec:	d8 d0       	rcall	.+432    	; 0xa9e <USB_ResetInterface>
     8ee:	08 c0       	rjmp	.+16     	; 0x900 <USB_Host_ProcessNextHostState+0x23e>
	}
}
     8f0:	93 e0       	ldi	r25, 0x03	; 3
     8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <USB_Host_ProcessNextHostState+0x236>
     8f4:	94 e0       	ldi	r25, 0x04	; 4
     8f6:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     8f8:	80 91 31 01 	lds	r24, 0x0131
     8fc:	81 30       	cpi	r24, 0x01	; 1
     8fe:	71 f7       	brne	.-36     	; 0x8dc <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     900:	28 96       	adiw	r28, 0x08	; 8
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	f8 94       	cli
     906:	de bf       	out	0x3e, r29	; 62
     908:	0f be       	out	0x3f, r0	; 63
     90a:	cd bf       	out	0x3d, r28	; 61
     90c:	cf 91       	pop	r28
     90e:	df 91       	pop	r29
     910:	1f 91       	pop	r17
     912:	0f 91       	pop	r16
     914:	ef 90       	pop	r14
     916:	08 95       	ret

00000918 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     918:	ef 92       	push	r14
     91a:	0f 93       	push	r16
     91c:	1f 93       	push	r17
     91e:	e8 2f       	mov	r30, r24
     920:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     922:	62 95       	swap	r22
     924:	66 0f       	add	r22, r22
     926:	66 0f       	add	r22, r22
     928:	60 7c       	andi	r22, 0xC0	; 192
     92a:	64 2b       	or	r22, r20
     92c:	2f 70       	andi	r18, 0x0F	; 15
     92e:	62 2b       	or	r22, r18
     930:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     932:	72 60       	ori	r23, 0x02	; 2
     934:	45 c0       	rjmp	.+138    	; 0x9c0 <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     936:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     93a:	3e 17       	cp	r19, r30
     93c:	a1 f4       	brne	.+40     	; 0x966 <Pipe_ConfigurePipe+0x4e>
     93e:	88 e0       	ldi	r24, 0x08	; 8
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	20 e0       	ldi	r18, 0x00	; 0
     944:	03 c0       	rjmp	.+6      	; 0x94c <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     946:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     948:	88 0f       	add	r24, r24
     94a:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     94c:	80 17       	cp	r24, r16
     94e:	91 07       	cpc	r25, r17
     950:	10 f4       	brcc	.+4      	; 0x956 <Pipe_ConfigurePipe+0x3e>
     952:	25 30       	cpi	r18, 0x05	; 5
     954:	c1 f7       	brne	.-16     	; 0x946 <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     956:	92 2f       	mov	r25, r18
     958:	92 95       	swap	r25
     95a:	90 7f       	andi	r25, 0xF0	; 240
     95c:	97 2b       	or	r25, r23
     95e:	56 2f       	mov	r21, r22
     960:	40 e0       	ldi	r20, 0x00	; 0
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	08 c0       	rjmp	.+16     	; 0x976 <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     966:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     96a:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     96e:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
     972:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     976:	91 ff       	sbrs	r25, 1
     978:	22 c0       	rjmp	.+68     	; 0x9be <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     97a:	80 91 a9 00 	lds	r24, 0x00A9
     97e:	8e 7f       	andi	r24, 0xFE	; 254
     980:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     984:	80 91 ab 00 	lds	r24, 0x00AB
     988:	8d 7f       	andi	r24, 0xFD	; 253
     98a:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     98e:	80 91 a9 00 	lds	r24, 0x00A9
     992:	81 60       	ori	r24, 0x01	; 1
     994:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     998:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
     99c:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
     9a0:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
     9a4:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     9a8:	80 91 a9 00 	lds	r24, 0x00A9
     9ac:	80 62       	ori	r24, 0x20	; 32
     9ae:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     9b2:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     9b6:	87 fd       	sbrc	r24, 7
     9b8:	02 c0       	rjmp	.+4      	; 0x9be <Pipe_ConfigurePipe+0xa6>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	07 c0       	rjmp	.+14     	; 0x9cc <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     9be:	3f 5f       	subi	r19, 0xFF	; 255
     9c0:	37 30       	cpi	r19, 0x07	; 7
     9c2:	08 f4       	brcc	.+2      	; 0x9c6 <Pipe_ConfigurePipe+0xae>
     9c4:	b8 cf       	rjmp	.-144    	; 0x936 <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     9c6:	e0 93 a7 00 	sts	0x00A7, r30
     9ca:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
     9cc:	1f 91       	pop	r17
     9ce:	0f 91       	pop	r16
     9d0:	ef 90       	pop	r14
     9d2:	08 95       	ret

000009d4 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     9d4:	10 92 f8 00 	sts	0x00F8, r1
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     9de:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     9e2:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     9e6:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     9ea:	80 91 a9 00 	lds	r24, 0x00A9
     9ee:	8e 7f       	andi	r24, 0xFE	; 254
     9f0:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     9f4:	9f 5f       	subi	r25, 0xFF	; 255
     9f6:	97 30       	cpi	r25, 0x07	; 7
     9f8:	81 f7       	brne	.-32     	; 0x9da <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     9fa:	08 95       	ret

000009fc <Pipe_IsEndpointBound>:

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
     9fc:	48 2f       	mov	r20, r24
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     9fe:	30 91 a7 00 	lds	r19, 0x00A7
     a02:	20 e0       	ldi	r18, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a04:	20 93 a7 00 	sts	0x00A7, r18
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a08:	80 91 ac 00 	lds	r24, 0x00AC

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     a0c:	87 ff       	sbrs	r24, 7
     a0e:	10 c0       	rjmp	.+32     	; 0xa30 <Pipe_IsEndpointBound+0x34>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     a10:	90 91 aa 00 	lds	r25, 0x00AA
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     a14:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     a18:	80 73       	andi	r24, 0x30	; 48
     a1a:	80 31       	cpi	r24, 0x10	; 16
     a1c:	11 f0       	breq	.+4      	; 0xa22 <Pipe_IsEndpointBound+0x26>
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	01 c0       	rjmp	.+2      	; 0xa24 <Pipe_IsEndpointBound+0x28>
     a22:	80 e8       	ldi	r24, 0x80	; 128
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     a24:	9f 70       	andi	r25, 0x0F	; 15
     a26:	89 2b       	or	r24, r25
     a28:	84 17       	cp	r24, r20
     a2a:	11 f4       	brne	.+4      	; 0xa30 <Pipe_IsEndpointBound+0x34>
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	08 95       	ret

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a30:	2f 5f       	subi	r18, 0xFF	; 255
     a32:	27 30       	cpi	r18, 0x07	; 7
     a34:	39 f7       	brne	.-50     	; 0xa04 <Pipe_IsEndpointBound+0x8>
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     a36:	37 70       	andi	r19, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a38:	30 93 a7 00 	sts	0x00A7, r19
     a3c:	80 e0       	ldi	r24, 0x00	; 0
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     a3e:	08 95       	ret

00000a40 <Pipe_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     a40:	40 91 a2 00 	lds	r20, 0x00A2
     a44:	50 91 a3 00 	lds	r21, 0x00A3
     a48:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     a4a:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     a4e:	80 73       	andi	r24, 0x30	; 48
     a50:	80 31       	cpi	r24, 0x10	; 16
     a52:	29 f4       	brne	.+10     	; 0xa5e <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     a54:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     a58:	80 ff       	sbrs	r24, 0
     a5a:	05 c0       	rjmp	.+10     	; 0xa66 <Pipe_WaitUntilReady+0x26>
     a5c:	1e c0       	rjmp	.+60     	; 0xa9a <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     a5e:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     a62:	82 fd       	sbrc	r24, 2
     a64:	1a c0       	rjmp	.+52     	; 0xa9a <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     a66:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     a6a:	81 ff       	sbrs	r24, 1
     a6c:	02 c0       	rjmp	.+4      	; 0xa72 <Pipe_WaitUntilReady+0x32>
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     a72:	80 91 31 01 	lds	r24, 0x0131
     a76:	81 30       	cpi	r24, 0x01	; 1
     a78:	11 f4       	brne	.+4      	; 0xa7e <Pipe_WaitUntilReady+0x3e>
     a7a:	82 e0       	ldi	r24, 0x02	; 2
     a7c:	08 95       	ret
     a7e:	80 91 a2 00 	lds	r24, 0x00A2
     a82:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     a86:	84 17       	cp	r24, r20
     a88:	95 07       	cpc	r25, r21
     a8a:	f9 f2       	breq	.-66     	; 0xa4a <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     a8c:	22 23       	and	r18, r18
     a8e:	11 f4       	brne	.+4      	; 0xa94 <Pipe_WaitUntilReady+0x54>
     a90:	83 e0       	ldi	r24, 0x03	; 3
     a92:	08 95       	ret
     a94:	21 50       	subi	r18, 0x01	; 1
     a96:	ac 01       	movw	r20, r24
     a98:	d8 cf       	rjmp	.-80     	; 0xa4a <Pipe_WaitUntilReady+0xa>
     a9a:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     a9c:	08 95       	ret

00000a9e <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     a9e:	70 d0       	rcall	.+224    	; 0xb80 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     aa0:	77 d0       	rcall	.+238    	; 0xb90 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     aa2:	80 91 d8 00 	lds	r24, 0x00D8
     aa6:	8f 77       	andi	r24, 0x7F	; 127
     aa8:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     aac:	80 91 d8 00 	lds	r24, 0x00D8
     ab0:	80 68       	ori	r24, 0x80	; 128
     ab2:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     ab6:	80 91 d8 00 	lds	r24, 0x00D8
     aba:	8f 7d       	andi	r24, 0xDF	; 223
     abc:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     ac0:	80 91 d7 00 	lds	r24, 0x00D7
     ac4:	8f 77       	andi	r24, 0x7F	; 127
     ac6:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     aca:	8c e0       	ldi	r24, 0x0C	; 12
     acc:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     ace:	8e e0       	ldi	r24, 0x0E	; 14
     ad0:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     ad2:	09 b4       	in	r0, 0x29	; 41
     ad4:	00 fe       	sbrs	r0, 0
     ad6:	fd cf       	rjmp	.-6      	; 0xad2 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	80 93 31 01 	sts	0x0131, r24
	USB_Host_ConfigurationNumber = 0;
     ade:	10 92 27 01 	sts	0x0127, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     ae2:	80 e4       	ldi	r24, 0x40	; 64
     ae4:	80 93 23 01 	sts	0x0123, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     ae8:	80 91 d8 00 	lds	r24, 0x00D8
     aec:	80 64       	ori	r24, 0x40	; 64
     aee:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     af2:	80 91 dd 00 	lds	r24, 0x00DD
     af6:	81 60       	ori	r24, 0x01	; 1
     af8:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     afc:	80 91 dd 00 	lds	r24, 0x00DD
     b00:	84 60       	ori	r24, 0x04	; 4
     b02:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     b06:	80 91 d7 00 	lds	r24, 0x00D7
     b0a:	8f 7e       	andi	r24, 0xEF	; 239
     b0c:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     b10:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     b12:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     b14:	80 91 de 00 	lds	r24, 0x00DE
     b18:	81 60       	ori	r24, 0x01	; 1
     b1a:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     b1e:	80 91 de 00 	lds	r24, 0x00DE
     b22:	84 60       	ori	r24, 0x04	; 4
     b24:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     b28:	80 91 e0 00 	lds	r24, 0x00E0
     b2c:	8e 7f       	andi	r24, 0xFE	; 254
     b2e:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     b32:	80 91 d8 00 	lds	r24, 0x00D8
     b36:	80 61       	ori	r24, 0x10	; 16
     b38:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     b3c:	08 95       	ret

00000b3e <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     b3e:	e7 ed       	ldi	r30, 0xD7	; 215
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	80 81       	ld	r24, Z
     b44:	81 60       	ori	r24, 0x01	; 1
     b46:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	80 93 28 01 	sts	0x0128, r24

	USB_ResetInterface();
}
     b4e:	a7 cf       	rjmp	.-178    	; 0xa9e <USB_ResetInterface>

00000b50 <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     b50:	17 d0       	rcall	.+46     	; 0xb80 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b52:	1e d0       	rcall	.+60     	; 0xb90 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     b54:	e0 ee       	ldi	r30, 0xE0	; 224
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	80 81       	ld	r24, Z
     b5a:	81 60       	ori	r24, 0x01	; 1
     b5c:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     b5e:	a8 ed       	ldi	r26, 0xD8	; 216
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	8c 91       	ld	r24, X
     b64:	8f 77       	andi	r24, 0x7F	; 127
     b66:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     b68:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     b6a:	e7 ed       	ldi	r30, 0xD7	; 215
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	8e 7f       	andi	r24, 0xFE	; 254
     b72:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     b74:	8c 91       	ld	r24, X
     b76:	8f 7e       	andi	r24, 0xEF	; 239
     b78:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     b7a:	10 92 28 01 	sts	0x0128, r1
}
     b7e:	08 95       	ret

00000b80 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     b80:	e8 ed       	ldi	r30, 0xD8	; 216
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	8c 7f       	andi	r24, 0xFC	; 252
     b88:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     b8a:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     b8e:	08 95       	ret

00000b90 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     b90:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     b94:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     b98:	08 95       	ret

00000b9a <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     b9a:	1f 92       	push	r1
     b9c:	0f 92       	push	r0
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	0f 92       	push	r0
     ba2:	0b b6       	in	r0, 0x3b	; 59
     ba4:	0f 92       	push	r0
     ba6:	11 24       	eor	r1, r1
     ba8:	2f 93       	push	r18
     baa:	3f 93       	push	r19
     bac:	4f 93       	push	r20
     bae:	5f 93       	push	r21
     bb0:	6f 93       	push	r22
     bb2:	7f 93       	push	r23
     bb4:	8f 93       	push	r24
     bb6:	9f 93       	push	r25
     bb8:	af 93       	push	r26
     bba:	bf 93       	push	r27
     bbc:	ef 93       	push	r30
     bbe:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     bc0:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     bc4:	85 ff       	sbrs	r24, 5
     bc6:	0a c0       	rjmp	.+20     	; 0xbdc <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     bc8:	80 91 a0 00 	lds	r24, 0x00A0
     bcc:	85 ff       	sbrs	r24, 5
     bce:	06 c0       	rjmp	.+12     	; 0xbdc <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     bd0:	80 91 9f 00 	lds	r24, 0x009F
     bd4:	8f 7d       	andi	r24, 0xDF	; 223
     bd6:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     bda:	be d1       	rcall	.+892    	; 0xf58 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     bdc:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     be0:	81 ff       	sbrs	r24, 1
     be2:	15 c0       	rjmp	.+42     	; 0xc0e <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     be4:	80 91 a0 00 	lds	r24, 0x00A0
     be8:	81 ff       	sbrs	r24, 1
     bea:	11 c0       	rjmp	.+34     	; 0xc0e <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     bec:	80 91 9f 00 	lds	r24, 0x009F
     bf0:	8d 7f       	andi	r24, 0xFD	; 253
     bf2:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     bf6:	80 91 9f 00 	lds	r24, 0x009F
     bfa:	8e 7f       	andi	r24, 0xFE	; 254
     bfc:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     c00:	80 91 a0 00 	lds	r24, 0x00A0
     c04:	8d 7f       	andi	r24, 0xFD	; 253
     c06:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     c0a:	c7 db       	rcall	.-2162   	; 0x39a <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     c0c:	48 df       	rcall	.-368    	; 0xa9e <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     c0e:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     c12:	81 ff       	sbrs	r24, 1
     c14:	15 c0       	rjmp	.+42     	; 0xc40 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     c16:	80 91 de 00 	lds	r24, 0x00DE
     c1a:	81 ff       	sbrs	r24, 1
     c1c:	11 c0       	rjmp	.+34     	; 0xc40 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     c1e:	80 91 df 00 	lds	r24, 0x00DF
     c22:	8d 7f       	andi	r24, 0xFD	; 253
     c24:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     c28:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c2a:	80 91 dd 00 	lds	r24, 0x00DD
     c2e:	81 60       	ori	r24, 0x01	; 1
     c30:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	94 db       	rcall	.-2264   	; 0x360 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     c38:	b0 db       	rcall	.-2208   	; 0x39a <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	80 93 31 01 	sts	0x0131, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     c40:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     c44:	80 ff       	sbrs	r24, 0
     c46:	17 c0       	rjmp	.+46     	; 0xc76 <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     c48:	80 91 de 00 	lds	r24, 0x00DE
     c4c:	80 ff       	sbrs	r24, 0
     c4e:	13 c0       	rjmp	.+38     	; 0xc76 <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     c50:	80 91 df 00 	lds	r24, 0x00DF
     c54:	8e 7f       	andi	r24, 0xFE	; 254
     c56:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     c5a:	80 91 de 00 	lds	r24, 0x00DE
     c5e:	8e 7f       	andi	r24, 0xFE	; 254
     c60:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     c64:	a3 db       	rcall	.-2234   	; 0x3ac <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     c66:	80 91 a0 00 	lds	r24, 0x00A0
     c6a:	82 60       	ori	r24, 0x02	; 2
     c6c:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     c70:	82 e0       	ldi	r24, 0x02	; 2
     c72:	80 93 31 01 	sts	0x0131, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     c76:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     c7a:	82 ff       	sbrs	r24, 2
     c7c:	0e c0       	rjmp	.+28     	; 0xc9a <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     c7e:	80 91 de 00 	lds	r24, 0x00DE
     c82:	82 ff       	sbrs	r24, 2
     c84:	0a c0       	rjmp	.+20     	; 0xc9a <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     c86:	80 91 df 00 	lds	r24, 0x00DF
     c8a:	8b 7f       	andi	r24, 0xFB	; 251
     c8c:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     c90:	82 e0       	ldi	r24, 0x02	; 2
     c92:	60 e0       	ldi	r22, 0x00	; 0
     c94:	39 db       	rcall	.-2446   	; 0x308 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     c96:	81 db       	rcall	.-2302   	; 0x39a <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     c98:	02 df       	rcall	.-508    	; 0xa9e <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     c9a:	ff 91       	pop	r31
     c9c:	ef 91       	pop	r30
     c9e:	bf 91       	pop	r27
     ca0:	af 91       	pop	r26
     ca2:	9f 91       	pop	r25
     ca4:	8f 91       	pop	r24
     ca6:	7f 91       	pop	r23
     ca8:	6f 91       	pop	r22
     caa:	5f 91       	pop	r21
     cac:	4f 91       	pop	r20
     cae:	3f 91       	pop	r19
     cb0:	2f 91       	pop	r18
     cb2:	0f 90       	pop	r0
     cb4:	0b be       	out	0x3b, r0	; 59
     cb6:	0f 90       	pop	r0
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	0f 90       	pop	r0
     cbc:	1f 90       	pop	r1
     cbe:	18 95       	reti

00000cc0 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     cc0:	bf 92       	push	r11
     cc2:	cf 92       	push	r12
     cc4:	df 92       	push	r13
     cc6:	ef 92       	push	r14
     cc8:	ff 92       	push	r15
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	18 2f       	mov	r17, r24
     cd4:	09 2f       	mov	r16, r25
     cd6:	7b 01       	movw	r14, r22
     cd8:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     cda:	80 91 aa 00 	lds	r24, 0x00AA
     cde:	8f 7c       	andi	r24, 0xCF	; 207
     ce0:	80 61       	ori	r24, 0x10	; 16
     ce2:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     ce6:	ac de       	rcall	.-680    	; 0xa40 <Pipe_WaitUntilReady>
     ce8:	b8 2e       	mov	r11, r24
     cea:	88 23       	and	r24, r24
     cec:	a9 f5       	brne	.+106    	; 0xd58 <Pipe_Read_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     cee:	81 2f       	mov	r24, r17
     cf0:	90 2f       	mov	r25, r16
     cf2:	9c 01       	movw	r18, r24
     cf4:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     cf6:	c1 14       	cp	r12, r1
     cf8:	d1 04       	cpc	r13, r1
     cfa:	39 f0       	breq	.+14     	; 0xd0a <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
     cfc:	f6 01       	movw	r30, r12
     cfe:	80 81       	ld	r24, Z
     d00:	91 81       	ldd	r25, Z+1	; 0x01
     d02:	e8 1a       	sub	r14, r24
     d04:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     d06:	c8 0f       	add	r28, r24
     d08:	d9 1f       	adc	r29, r25
     d0a:	00 e0       	ldi	r16, 0x00	; 0
     d0c:	10 e0       	ldi	r17, 0x00	; 0
     d0e:	21 c0       	rjmp	.+66     	; 0xd52 <Pipe_Read_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     d10:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     d14:	85 fd       	sbrc	r24, 5
     d16:	15 c0       	rjmp	.+42     	; 0xd42 <Pipe_Read_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     d18:	80 91 a6 00 	lds	r24, 0x00A6
     d1c:	8e 77       	andi	r24, 0x7E	; 126
     d1e:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     d22:	c1 14       	cp	r12, r1
     d24:	d1 04       	cpc	r13, r1
     d26:	49 f0       	breq	.+18     	; 0xd3a <Pipe_Read_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
     d28:	f6 01       	movw	r30, r12
     d2a:	80 81       	ld	r24, Z
     d2c:	91 81       	ldd	r25, Z+1	; 0x01
     d2e:	80 0f       	add	r24, r16
     d30:	91 1f       	adc	r25, r17
     d32:	91 83       	std	Z+1, r25	; 0x01
     d34:	80 83       	st	Z, r24
     d36:	84 e0       	ldi	r24, 0x04	; 4
     d38:	10 c0       	rjmp	.+32     	; 0xd5a <Pipe_Read_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     d3a:	82 de       	rcall	.-764    	; 0xa40 <Pipe_WaitUntilReady>
     d3c:	88 23       	and	r24, r24
     d3e:	49 f0       	breq	.+18     	; 0xd52 <Pipe_Read_Stream_LE+0x92>
     d40:	0c c0       	rjmp	.+24     	; 0xd5a <Pipe_Read_Stream_LE+0x9a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     d42:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     d46:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     d48:	08 94       	sec
     d4a:	e1 08       	sbc	r14, r1
     d4c:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
     d4e:	0f 5f       	subi	r16, 0xFF	; 255
     d50:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     d52:	e1 14       	cp	r14, r1
     d54:	f1 04       	cpc	r15, r1
     d56:	e1 f6       	brne	.-72     	; 0xd10 <Pipe_Read_Stream_LE+0x50>
     d58:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     d5a:	df 91       	pop	r29
     d5c:	cf 91       	pop	r28
     d5e:	1f 91       	pop	r17
     d60:	0f 91       	pop	r16
     d62:	ff 90       	pop	r15
     d64:	ef 90       	pop	r14
     d66:	df 90       	pop	r13
     d68:	cf 90       	pop	r12
     d6a:	bf 90       	pop	r11
     d6c:	08 95       	ret

00000d6e <Pipe_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     d6e:	bf 92       	push	r11
     d70:	cf 92       	push	r12
     d72:	df 92       	push	r13
     d74:	ef 92       	push	r14
     d76:	ff 92       	push	r15
     d78:	0f 93       	push	r16
     d7a:	1f 93       	push	r17
     d7c:	cf 93       	push	r28
     d7e:	df 93       	push	r29
     d80:	18 2f       	mov	r17, r24
     d82:	09 2f       	mov	r16, r25
     d84:	7b 01       	movw	r14, r22
     d86:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     d88:	80 91 aa 00 	lds	r24, 0x00AA
     d8c:	8f 7c       	andi	r24, 0xCF	; 207
     d8e:	80 62       	ori	r24, 0x20	; 32
     d90:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     d94:	55 de       	rcall	.-854    	; 0xa40 <Pipe_WaitUntilReady>
     d96:	b8 2e       	mov	r11, r24
     d98:	88 23       	and	r24, r24
     d9a:	a9 f5       	brne	.+106    	; 0xe06 <Pipe_Write_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     d9c:	81 2f       	mov	r24, r17
     d9e:	90 2f       	mov	r25, r16
     da0:	9c 01       	movw	r18, r24
     da2:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     da4:	c1 14       	cp	r12, r1
     da6:	d1 04       	cpc	r13, r1
     da8:	39 f0       	breq	.+14     	; 0xdb8 <Pipe_Write_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
     daa:	f6 01       	movw	r30, r12
     dac:	80 81       	ld	r24, Z
     dae:	91 81       	ldd	r25, Z+1	; 0x01
     db0:	e8 1a       	sub	r14, r24
     db2:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     db4:	c8 0f       	add	r28, r24
     db6:	d9 1f       	adc	r29, r25
     db8:	00 e0       	ldi	r16, 0x00	; 0
     dba:	10 e0       	ldi	r17, 0x00	; 0
     dbc:	21 c0       	rjmp	.+66     	; 0xe00 <Pipe_Write_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     dbe:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     dc2:	85 fd       	sbrc	r24, 5
     dc4:	15 c0       	rjmp	.+42     	; 0xdf0 <Pipe_Write_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     dc6:	80 91 a6 00 	lds	r24, 0x00A6
     dca:	8b 77       	andi	r24, 0x7B	; 123
     dcc:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     dd0:	c1 14       	cp	r12, r1
     dd2:	d1 04       	cpc	r13, r1
     dd4:	49 f0       	breq	.+18     	; 0xde8 <Pipe_Write_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
     dd6:	f6 01       	movw	r30, r12
     dd8:	80 81       	ld	r24, Z
     dda:	91 81       	ldd	r25, Z+1	; 0x01
     ddc:	80 0f       	add	r24, r16
     dde:	91 1f       	adc	r25, r17
     de0:	91 83       	std	Z+1, r25	; 0x01
     de2:	80 83       	st	Z, r24
     de4:	84 e0       	ldi	r24, 0x04	; 4
     de6:	10 c0       	rjmp	.+32     	; 0xe08 <Pipe_Write_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     de8:	2b de       	rcall	.-938    	; 0xa40 <Pipe_WaitUntilReady>
     dea:	88 23       	and	r24, r24
     dec:	49 f0       	breq	.+18     	; 0xe00 <Pipe_Write_Stream_LE+0x92>
     dee:	0c c0       	rjmp	.+24     	; 0xe08 <Pipe_Write_Stream_LE+0x9a>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     df0:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     df2:	80 93 af 00 	sts	0x00AF, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     df6:	08 94       	sec
     df8:	e1 08       	sbc	r14, r1
     dfa:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
     dfc:	0f 5f       	subi	r16, 0xFF	; 255
     dfe:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     e00:	e1 14       	cp	r14, r1
     e02:	f1 04       	cpc	r15, r1
     e04:	e1 f6       	brne	.-72     	; 0xdbe <Pipe_Write_Stream_LE+0x50>
     e06:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	1f 91       	pop	r17
     e0e:	0f 91       	pop	r16
     e10:	ff 90       	pop	r15
     e12:	ef 90       	pop	r14
     e14:	df 90       	pop	r13
     e16:	cf 90       	pop	r12
     e18:	bf 90       	pop	r11
     e1a:	08 95       	ret

00000e1c <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     e1c:	af 92       	push	r10
     e1e:	bf 92       	push	r11
     e20:	cf 92       	push	r12
     e22:	df 92       	push	r13
     e24:	ef 92       	push	r14
     e26:	ff 92       	push	r15
     e28:	0f 93       	push	r16
     e2a:	1f 93       	push	r17
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	7c 01       	movw	r14, r24
     e32:	eb 01       	movw	r28, r22
     e34:	6a 01       	movw	r12, r20
     e36:	24 c0       	rjmp	.+72     	; 0xe80 <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     e38:	e8 81       	ld	r30, Y
     e3a:	f9 81       	ldd	r31, Y+1	; 0x01
     e3c:	be 2e       	mov	r11, r30
     e3e:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     e40:	80 81       	ld	r24, Z
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	98 01       	movw	r18, r16
     e46:	80 17       	cp	r24, r16
     e48:	91 07       	cpc	r25, r17
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <USB_GetNextDescriptorComp+0x32>
     e4c:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     e4e:	e2 0f       	add	r30, r18
     e50:	f3 1f       	adc	r31, r19
     e52:	f9 83       	std	Y+1, r31	; 0x01
     e54:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     e56:	f7 01       	movw	r30, r14
     e58:	80 81       	ld	r24, Z
     e5a:	91 81       	ldd	r25, Z+1	; 0x01
     e5c:	82 1b       	sub	r24, r18
     e5e:	93 0b       	sbc	r25, r19
     e60:	91 83       	std	Z+1, r25	; 0x01
     e62:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     e64:	88 81       	ld	r24, Y
     e66:	99 81       	ldd	r25, Y+1	; 0x01
     e68:	f6 01       	movw	r30, r12
     e6a:	09 95       	icall
     e6c:	82 30       	cpi	r24, 0x02	; 2
     e6e:	41 f0       	breq	.+16     	; 0xe80 <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     e70:	81 30       	cpi	r24, 0x01	; 1
     e72:	69 f4       	brne	.+26     	; 0xe8e <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
     e74:	b8 82       	st	Y, r11
     e76:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
     e78:	f7 01       	movw	r30, r14
     e7a:	11 83       	std	Z+1, r17	; 0x01
     e7c:	00 83       	st	Z, r16
     e7e:	07 c0       	rjmp	.+14     	; 0xe8e <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     e80:	f7 01       	movw	r30, r14
     e82:	00 81       	ld	r16, Z
     e84:	11 81       	ldd	r17, Z+1	; 0x01
     e86:	01 15       	cp	r16, r1
     e88:	11 05       	cpc	r17, r1
     e8a:	b1 f6       	brne	.-84     	; 0xe38 <USB_GetNextDescriptorComp+0x1c>
     e8c:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	1f 91       	pop	r17
     e94:	0f 91       	pop	r16
     e96:	ff 90       	pop	r15
     e98:	ef 90       	pop	r14
     e9a:	df 90       	pop	r13
     e9c:	cf 90       	pop	r12
     e9e:	bf 90       	pop	r11
     ea0:	af 90       	pop	r10
     ea2:	08 95       	ret

00000ea4 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     ea4:	cf 92       	push	r12
     ea6:	df 92       	push	r13
     ea8:	ef 92       	push	r14
     eaa:	ff 92       	push	r15
     eac:	0f 93       	push	r16
     eae:	1f 93       	push	r17
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	29 97       	sbiw	r28, 0x09	; 9
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	f8 94       	cli
     ebe:	de bf       	out	0x3e, r29	; 62
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	cd bf       	out	0x3d, r28	; 61
     ec4:	6b 01       	movw	r12, r22
     ec6:	8a 01       	movw	r16, r20
     ec8:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     eca:	90 e8       	ldi	r25, 0x80	; 128
     ecc:	90 93 29 01 	sts	0x0129, r25
     ed0:	96 e0       	ldi	r25, 0x06	; 6
     ed2:	90 93 2a 01 	sts	0x012A, r25
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	01 97       	sbiw	r24, 0x01	; 1
     eda:	92 60       	ori	r25, 0x02	; 2
     edc:	90 93 2c 01 	sts	0x012C, r25
     ee0:	80 93 2b 01 	sts	0x012B, r24
     ee4:	10 92 2e 01 	sts	0x012E, r1
     ee8:	10 92 2d 01 	sts	0x012D, r1
     eec:	89 e0       	ldi	r24, 0x09	; 9
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	90 93 30 01 	sts	0x0130, r25
     ef4:	80 93 2f 01 	sts	0x012F, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     ef8:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     efc:	ce 01       	movw	r24, r28
     efe:	01 96       	adiw	r24, 0x01	; 1
     f00:	55 d0       	rcall	.+170    	; 0xfac <USB_Host_SendControlRequest>
     f02:	28 2f       	mov	r18, r24
     f04:	88 23       	and	r24, r24
     f06:	c1 f4       	brne	.+48     	; 0xf38 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	9c 81       	ldd	r25, Y+4	; 0x04
     f0c:	f6 01       	movw	r30, r12
     f0e:	91 83       	std	Z+1, r25	; 0x01
     f10:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     f12:	e8 16       	cp	r14, r24
     f14:	f9 06       	cpc	r15, r25
     f16:	10 f4       	brcc	.+4      	; 0xf1c <USB_Host_GetDeviceConfigDescriptor+0x78>
     f18:	25 e0       	ldi	r18, 0x05	; 5
     f1a:	0e c0       	rjmp	.+28     	; 0xf38 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     f1c:	90 93 30 01 	sts	0x0130, r25
     f20:	80 93 2f 01 	sts	0x012F, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     f24:	c8 01       	movw	r24, r16
     f26:	42 d0       	rcall	.+132    	; 0xfac <USB_Host_SendControlRequest>
     f28:	28 2f       	mov	r18, r24
     f2a:	88 23       	and	r24, r24
     f2c:	29 f4       	brne	.+10     	; 0xf38 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     f2e:	f8 01       	movw	r30, r16
     f30:	81 81       	ldd	r24, Z+1	; 0x01
     f32:	82 30       	cpi	r24, 0x02	; 2
     f34:	09 f0       	breq	.+2      	; 0xf38 <USB_Host_GetDeviceConfigDescriptor+0x94>
     f36:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     f38:	82 2f       	mov	r24, r18
     f3a:	29 96       	adiw	r28, 0x09	; 9
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	de bf       	out	0x3e, r29	; 62
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	1f 91       	pop	r17
     f4c:	0f 91       	pop	r16
     f4e:	ff 90       	pop	r15
     f50:	ef 90       	pop	r14
     f52:	df 90       	pop	r13
     f54:	cf 90       	pop	r12
     f56:	08 95       	ret

00000f58 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     f58:	08 95       	ret

00000f5a <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     f5a:	1f 93       	push	r17
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	18 2f       	mov	r17, r24
     f62:	c8 ee       	ldi	r28, 0xE8	; 232
     f64:	d3 e0       	ldi	r29, 0x03	; 3
     f66:	09 c0       	rjmp	.+18     	; 0xf7a <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	0e db       	rcall	.-2532   	; 0x588 <USB_Host_WaitMS>
     f6c:	88 23       	and	r24, r24
     f6e:	d1 f4       	brne	.+52     	; 0xfa4 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     f70:	20 97       	sbiw	r28, 0x00	; 0
     f72:	11 f4       	brne	.+4      	; 0xf78 <USB_Host_WaitForIOS+0x1e>
     f74:	84 e0       	ldi	r24, 0x04	; 4
     f76:	16 c0       	rjmp	.+44     	; 0xfa4 <USB_Host_WaitForIOS+0x4a>
     f78:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f7a:	11 23       	and	r17, r17
     f7c:	29 f4       	brne	.+10     	; 0xf88 <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     f7e:	80 91 a6 00 	lds	r24, 0x00A6
     f82:	83 ff       	sbrs	r24, 3
     f84:	f1 cf       	rjmp	.-30     	; 0xf68 <USB_Host_WaitForIOS+0xe>
     f86:	0d c0       	rjmp	.+26     	; 0xfa2 <USB_Host_WaitForIOS+0x48>
     f88:	11 30       	cpi	r17, 0x01	; 1
     f8a:	29 f4       	brne	.+10     	; 0xf96 <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     f8c:	80 91 a6 00 	lds	r24, 0x00A6
     f90:	80 ff       	sbrs	r24, 0
     f92:	ea cf       	rjmp	.-44     	; 0xf68 <USB_Host_WaitForIOS+0xe>
     f94:	06 c0       	rjmp	.+12     	; 0xfa2 <USB_Host_WaitForIOS+0x48>
     f96:	12 30       	cpi	r17, 0x02	; 2
     f98:	39 f7       	brne	.-50     	; 0xf68 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     f9a:	80 91 a6 00 	lds	r24, 0x00A6
     f9e:	82 ff       	sbrs	r24, 2
     fa0:	e3 cf       	rjmp	.-58     	; 0xf68 <USB_Host_WaitForIOS+0xe>
     fa2:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	1f 91       	pop	r17
     faa:	08 95       	ret

00000fac <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     fac:	ff 92       	push	r15
     fae:	0f 93       	push	r16
     fb0:	1f 93       	push	r17
     fb2:	cf 93       	push	r28
     fb4:	df 93       	push	r29
     fb6:	18 2f       	mov	r17, r24
     fb8:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     fba:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     fbe:	c0 91 2f 01 	lds	r28, 0x012F
     fc2:	d0 91 30 01 	lds	r29, 0x0130
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     fc6:	80 91 9e 00 	lds	r24, 0x009E
     fca:	81 60       	ori	r24, 0x01	; 1
     fcc:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	da da       	rcall	.-2636   	; 0x588 <USB_Host_WaitMS>
     fd4:	98 2f       	mov	r25, r24
     fd6:	88 23       	and	r24, r24
     fd8:	09 f0       	breq	.+2      	; 0xfdc <USB_Host_SendControlRequest+0x30>
     fda:	ee c0       	rjmp	.+476    	; 0x11b8 <USB_Host_SendControlRequest+0x20c>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fdc:	80 91 aa 00 	lds	r24, 0x00AA
     fe0:	8f 7c       	andi	r24, 0xCF	; 207
     fe2:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     fe6:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     fea:	80 91 a6 00 	lds	r24, 0x00A6
     fee:	8f 7e       	andi	r24, 0xEF	; 239
     ff0:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     ff4:	80 91 a9 00 	lds	r24, 0x00A9
     ff8:	8f 7b       	andi	r24, 0xBF	; 191
     ffa:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearError();

	Pipe_Unfreeze();

	Pipe_Write_8(USB_ControlRequest.bmRequestType);
     ffe:	80 91 29 01 	lds	r24, 0x0129
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1002:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
    1006:	80 91 2a 01 	lds	r24, 0x012A
    100a:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
    100e:	80 91 2b 01 	lds	r24, 0x012B
    1012:	90 91 2c 01 	lds	r25, 0x012C
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    1016:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    101a:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
    101e:	80 91 2d 01 	lds	r24, 0x012D
    1022:	90 91 2e 01 	lds	r25, 0x012E
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    1026:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    102a:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
    102e:	80 91 2f 01 	lds	r24, 0x012F
    1032:	90 91 30 01 	lds	r25, 0x0130
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    1036:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    103a:	90 93 af 00 	sts	0x00AF, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    103e:	80 91 a6 00 	lds	r24, 0x00A6
    1042:	87 77       	andi	r24, 0x77	; 119
    1044:	80 93 a6 00 	sts	0x00A6, r24

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	87 df       	rcall	.-242    	; 0xf5a <USB_Host_WaitForIOS>
    104c:	98 2f       	mov	r25, r24
    104e:	88 23       	and	r24, r24
    1050:	09 f0       	breq	.+2      	; 0x1054 <USB_Host_SendControlRequest+0xa8>
    1052:	b2 c0       	rjmp	.+356    	; 0x11b8 <USB_Host_SendControlRequest+0x20c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1054:	80 91 a9 00 	lds	r24, 0x00A9
    1058:	80 64       	ori	r24, 0x40	; 64
    105a:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	93 da       	rcall	.-2778   	; 0x588 <USB_Host_WaitMS>
    1062:	98 2f       	mov	r25, r24
    1064:	88 23       	and	r24, r24
    1066:	09 f0       	breq	.+2      	; 0x106a <USB_Host_SendControlRequest+0xbe>
    1068:	a7 c0       	rjmp	.+334    	; 0x11b8 <USB_Host_SendControlRequest+0x20c>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
    106a:	21 2f       	mov	r18, r17
    106c:	30 2f       	mov	r19, r16
    106e:	c9 01       	movw	r24, r18
    1070:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1072:	80 91 29 01 	lds	r24, 0x0129
    1076:	87 ff       	sbrs	r24, 7
    1078:	52 c0       	rjmp	.+164    	; 0x111e <USB_Host_SendControlRequest+0x172>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    107a:	80 91 aa 00 	lds	r24, 0x00AA
    107e:	8f 7c       	andi	r24, 0xCF	; 207
    1080:	80 61       	ori	r24, 0x10	; 16
    1082:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1086:	01 15       	cp	r16, r1
    1088:	11 05       	cpc	r17, r1
    108a:	69 f5       	brne	.+90     	; 0x10e6 <USB_Host_SendControlRequest+0x13a>
    108c:	2e c0       	rjmp	.+92     	; 0x10ea <USB_Host_SendControlRequest+0x13e>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    108e:	80 91 a9 00 	lds	r24, 0x00A9
    1092:	8f 7b       	andi	r24, 0xBF	; 191
    1094:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	5f df       	rcall	.-322    	; 0xf5a <USB_Host_WaitForIOS>
    109c:	98 2f       	mov	r25, r24
    109e:	88 23       	and	r24, r24
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <USB_Host_SendControlRequest+0xf8>
    10a2:	8a c0       	rjmp	.+276    	; 0x11b8 <USB_Host_SendControlRequest+0x20c>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    10a4:	80 91 f6 00 	lds	r24, 0x00F6
    10a8:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    10ac:	89 2b       	or	r24, r25
    10ae:	49 f4       	brne	.+18     	; 0x10c2 <USB_Host_SendControlRequest+0x116>
    10b0:	c0 e0       	ldi	r28, 0x00	; 0
    10b2:	d0 e0       	ldi	r29, 0x00	; 0
    10b4:	06 c0       	rjmp	.+12     	; 0x10c2 <USB_Host_SendControlRequest+0x116>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    10b6:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    10ba:	f8 01       	movw	r30, r16
    10bc:	81 93       	st	Z+, r24
    10be:	8f 01       	movw	r16, r30
					DataLen--;
    10c0:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    10c2:	80 91 f6 00 	lds	r24, 0x00F6
    10c6:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    10ca:	89 2b       	or	r24, r25
    10cc:	11 f0       	breq	.+4      	; 0x10d2 <USB_Host_SendControlRequest+0x126>
    10ce:	20 97       	sbiw	r28, 0x00	; 0
    10d0:	91 f7       	brne	.-28     	; 0x10b6 <USB_Host_SendControlRequest+0x10a>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10d2:	80 91 a9 00 	lds	r24, 0x00A9
    10d6:	80 64       	ori	r24, 0x40	; 64
    10d8:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    10dc:	80 91 a6 00 	lds	r24, 0x00A6
    10e0:	8e 77       	andi	r24, 0x7E	; 126
    10e2:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    10e6:	20 97       	sbiw	r28, 0x00	; 0
    10e8:	91 f6       	brne	.-92     	; 0x108e <USB_Host_SendControlRequest+0xe2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10ea:	80 91 aa 00 	lds	r24, 0x00AA
    10ee:	8f 7c       	andi	r24, 0xCF	; 207
    10f0:	80 62       	ori	r24, 0x20	; 32
    10f2:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10f6:	80 91 a9 00 	lds	r24, 0x00A9
    10fa:	8f 7b       	andi	r24, 0xBF	; 191
    10fc:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1100:	82 e0       	ldi	r24, 0x02	; 2
    1102:	2b df       	rcall	.-426    	; 0xf5a <USB_Host_WaitForIOS>
    1104:	98 2f       	mov	r25, r24
    1106:	88 23       	and	r24, r24
    1108:	09 f0       	breq	.+2      	; 0x110c <USB_Host_SendControlRequest+0x160>
    110a:	56 c0       	rjmp	.+172    	; 0x11b8 <USB_Host_SendControlRequest+0x20c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    110c:	80 91 a6 00 	lds	r24, 0x00A6
    1110:	8b 77       	andi	r24, 0x7B	; 123
    1112:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1116:	82 e0       	ldi	r24, 0x02	; 2
    1118:	20 df       	rcall	.-448    	; 0xf5a <USB_Host_WaitForIOS>
    111a:	98 2f       	mov	r25, r24
    111c:	4d c0       	rjmp	.+154    	; 0x11b8 <USB_Host_SendControlRequest+0x20c>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    111e:	01 15       	cp	r16, r1
    1120:	11 05       	cpc	r17, r1
    1122:	a9 f1       	breq	.+106    	; 0x118e <USB_Host_SendControlRequest+0x1e2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1124:	80 91 aa 00 	lds	r24, 0x00AA
    1128:	8f 7c       	andi	r24, 0xCF	; 207
    112a:	80 62       	ori	r24, 0x20	; 32
    112c:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1130:	80 91 a9 00 	lds	r24, 0x00A9
    1134:	8f 7b       	andi	r24, 0xBF	; 191
    1136:	80 93 a9 00 	sts	0x00A9, r24
    113a:	1d c0       	rjmp	.+58     	; 0x1176 <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    113c:	82 e0       	ldi	r24, 0x02	; 2
    113e:	0d df       	rcall	.-486    	; 0xf5a <USB_Host_WaitForIOS>
    1140:	98 2f       	mov	r25, r24
    1142:	88 23       	and	r24, r24
    1144:	c9 f5       	brne	.+114    	; 0x11b8 <USB_Host_SendControlRequest+0x20c>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1146:	80 91 23 01 	lds	r24, 0x0123
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	07 c0       	rjmp	.+14     	; 0x115e <USB_Host_SendControlRequest+0x1b2>
				{
					Pipe_Write_8(*(DataStream++));
    1150:	f8 01       	movw	r30, r16
    1152:	81 91       	ld	r24, Z+
    1154:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1156:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    115a:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    115c:	39 f0       	breq	.+14     	; 0x116c <USB_Host_SendControlRequest+0x1c0>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    115e:	80 91 f6 00 	lds	r24, 0x00F6
    1162:	90 91 f7 00 	lds	r25, 0x00F7
    1166:	82 17       	cp	r24, r18
    1168:	93 07       	cpc	r25, r19
    116a:	90 f3       	brcs	.-28     	; 0x1150 <USB_Host_SendControlRequest+0x1a4>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    116c:	80 91 a6 00 	lds	r24, 0x00A6
    1170:	8b 77       	andi	r24, 0x7B	; 123
    1172:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1176:	20 97       	sbiw	r28, 0x00	; 0
    1178:	09 f7       	brne	.-62     	; 0x113c <USB_Host_SendControlRequest+0x190>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    117a:	82 e0       	ldi	r24, 0x02	; 2
    117c:	ee de       	rcall	.-548    	; 0xf5a <USB_Host_WaitForIOS>
    117e:	98 2f       	mov	r25, r24
    1180:	88 23       	and	r24, r24
    1182:	d1 f4       	brne	.+52     	; 0x11b8 <USB_Host_SendControlRequest+0x20c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1184:	80 91 a9 00 	lds	r24, 0x00A9
    1188:	80 64       	ori	r24, 0x40	; 64
    118a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    118e:	80 91 aa 00 	lds	r24, 0x00AA
    1192:	8f 7c       	andi	r24, 0xCF	; 207
    1194:	80 61       	ori	r24, 0x10	; 16
    1196:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    119a:	80 91 a9 00 	lds	r24, 0x00A9
    119e:	8f 7b       	andi	r24, 0xBF	; 191
    11a0:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	d9 de       	rcall	.-590    	; 0xf5a <USB_Host_WaitForIOS>
    11a8:	98 2f       	mov	r25, r24
    11aa:	88 23       	and	r24, r24
    11ac:	29 f4       	brne	.+10     	; 0x11b8 <USB_Host_SendControlRequest+0x20c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    11ae:	80 91 a6 00 	lds	r24, 0x00A6
    11b2:	8e 77       	andi	r24, 0x7E	; 126
    11b4:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11b8:	80 91 a9 00 	lds	r24, 0x00A9
    11bc:	80 64       	ori	r24, 0x40	; 64
    11be:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    11c2:	f0 fc       	sbrc	r15, 0
    11c4:	05 c0       	rjmp	.+10     	; 0x11d0 <USB_Host_SendControlRequest+0x224>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    11c6:	80 91 9e 00 	lds	r24, 0x009E
    11ca:	8e 7f       	andi	r24, 0xFE	; 254
    11cc:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    11d6:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    11da:	89 2f       	mov	r24, r25
    11dc:	df 91       	pop	r29
    11de:	cf 91       	pop	r28
    11e0:	1f 91       	pop	r17
    11e2:	0f 91       	pop	r16
    11e4:	ff 90       	pop	r15
    11e6:	08 95       	ret

000011e8 <USB_Host_ClearPipeStall>:
	return USB_Host_SendControlRequest(FeatureStatus);
}

uint8_t USB_Host_ClearPipeStall(const uint8_t EndpointAddress)
{
	USB_ControlRequest = (USB_Request_Header_t)
    11e8:	92 e0       	ldi	r25, 0x02	; 2
    11ea:	90 93 29 01 	sts	0x0129, r25
    11ee:	91 e0       	ldi	r25, 0x01	; 1
    11f0:	90 93 2a 01 	sts	0x012A, r25
    11f4:	10 92 2c 01 	sts	0x012C, r1
    11f8:	10 92 2b 01 	sts	0x012B, r1
    11fc:	80 93 2d 01 	sts	0x012D, r24
    1200:	10 92 2e 01 	sts	0x012E, r1
    1204:	10 92 30 01 	sts	0x0130, r1
    1208:	10 92 2f 01 	sts	0x012F, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    120c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	90 e0       	ldi	r25, 0x00	; 0
}
    1214:	cb ce       	rjmp	.-618    	; 0xfac <USB_Host_SendControlRequest>

00001216 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1216:	1f 93       	push	r17
    1218:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    121a:	10 92 29 01 	sts	0x0129, r1
    121e:	89 e0       	ldi	r24, 0x09	; 9
    1220:	80 93 2a 01 	sts	0x012A, r24
    1224:	10 93 2b 01 	sts	0x012B, r17
    1228:	10 92 2c 01 	sts	0x012C, r1
    122c:	10 92 2e 01 	sts	0x012E, r1
    1230:	10 92 2d 01 	sts	0x012D, r1
    1234:	10 92 30 01 	sts	0x0130, r1
    1238:	10 92 2f 01 	sts	0x012F, r1
    123c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	b3 de       	rcall	.-666    	; 0xfac <USB_Host_SendControlRequest>
    1246:	88 23       	and	r24, r24
    1248:	49 f4       	brne	.+18     	; 0x125c <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    124a:	10 93 27 01 	sts	0x0127, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    124e:	11 23       	and	r17, r17
    1250:	11 f4       	brne	.+4      	; 0x1256 <USB_Host_SetDeviceConfiguration+0x40>
    1252:	9a e0       	ldi	r25, 0x0A	; 10
    1254:	01 c0       	rjmp	.+2      	; 0x1258 <USB_Host_SetDeviceConfiguration+0x42>
    1256:	9b e0       	ldi	r25, 0x0B	; 11
    1258:	90 93 31 01 	sts	0x0131, r25
	}

	return ErrorCode;
}
    125c:	1f 91       	pop	r17
    125e:	08 95       	ret

00001260 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1260:	ff 92       	push	r15
    1262:	0f 93       	push	r16
    1264:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1266:	07 ea       	ldi	r16, 0xA7	; 167
    1268:	10 e0       	ldi	r17, 0x00	; 0
    126a:	f8 01       	movw	r30, r16
    126c:	f0 80       	ld	r15, Z
    126e:	f7 e0       	ldi	r31, 0x07	; 7
    1270:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1272:	f8 01       	movw	r30, r16
    1274:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1276:	25 da       	rcall	.-2998   	; 0x6c2 <USB_Host_ProcessNextHostState>
    1278:	f8 01       	movw	r30, r16
    127a:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    127c:	1f 91       	pop	r17
    127e:	0f 91       	pop	r16
    1280:	ff 90       	pop	r15
    1282:	08 95       	ret

00001284 <DCOMP_SI_Host_NextSIInterface>:

	return SI_ENUMERROR_NoError;
}

uint8_t DCOMP_SI_Host_NextSIInterface(void* const CurrentDescriptor)
{
    1284:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1286:	81 81       	ldd	r24, Z+1	; 0x01
    1288:	84 30       	cpi	r24, 0x04	; 4
    128a:	59 f4       	brne	.+22     	; 0x12a2 <DCOMP_SI_Host_NextSIInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == SI_CSCP_StillImageClass)    &&
    128c:	85 81       	ldd	r24, Z+5	; 0x05
    128e:	86 30       	cpi	r24, 0x06	; 6
    1290:	41 f4       	brne	.+16     	; 0x12a2 <DCOMP_SI_Host_NextSIInterface+0x1e>
    1292:	86 81       	ldd	r24, Z+6	; 0x06
    1294:	81 30       	cpi	r24, 0x01	; 1
    1296:	29 f4       	brne	.+10     	; 0x12a2 <DCOMP_SI_Host_NextSIInterface+0x1e>
    1298:	87 81       	ldd	r24, Z+7	; 0x07
    129a:	81 30       	cpi	r24, 0x01	; 1
    129c:	11 f4       	brne	.+4      	; 0x12a2 <DCOMP_SI_Host_NextSIInterface+0x1e>
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	08 95       	ret
    12a2:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    12a4:	08 95       	ret

000012a6 <SI_Host_SendBlockHeader>:
	return DESCRIPTOR_SEARCH_NotFound;
}

uint8_t SI_Host_SendBlockHeader(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                                PIMA_Container_t* const PIMAHeader)
{
    12a6:	1f 93       	push	r17
    12a8:	cf 93       	push	r28
    12aa:	df 93       	push	r29
    12ac:	fc 01       	movw	r30, r24
    12ae:	eb 01       	movw	r28, r22
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    12b0:	80 91 31 01 	lds	r24, 0x0131
    12b4:	8b 30       	cpi	r24, 0x0B	; 11
    12b6:	09 f0       	breq	.+2      	; 0x12ba <SI_Host_SendBlockHeader+0x14>
    12b8:	3e c0       	rjmp	.+124    	; 0x1336 <SI_Host_SendBlockHeader+0x90>
    12ba:	86 81       	ldd	r24, Z+6	; 0x06
    12bc:	88 23       	and	r24, r24
    12be:	d9 f1       	breq	.+118    	; 0x1336 <SI_Host_SendBlockHeader+0x90>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	if (SIInterfaceInfo->State.IsSessionOpen)
    12c0:	86 85       	ldd	r24, Z+14	; 0x0e
    12c2:	88 23       	and	r24, r24
    12c4:	79 f0       	breq	.+30     	; 0x12e4 <SI_Host_SendBlockHeader+0x3e>
	  PIMAHeader->TransactionID = cpu_to_le32(SIInterfaceInfo->State.TransactionID++);
    12c6:	87 85       	ldd	r24, Z+15	; 0x0f
    12c8:	90 89       	ldd	r25, Z+16	; 0x10
    12ca:	a1 89       	ldd	r26, Z+17	; 0x11
    12cc:	b2 89       	ldd	r27, Z+18	; 0x12
    12ce:	88 87       	std	Y+8, r24	; 0x08
    12d0:	99 87       	std	Y+9, r25	; 0x09
    12d2:	aa 87       	std	Y+10, r26	; 0x0a
    12d4:	bb 87       	std	Y+11, r27	; 0x0b
    12d6:	01 96       	adiw	r24, 0x01	; 1
    12d8:	a1 1d       	adc	r26, r1
    12da:	b1 1d       	adc	r27, r1
    12dc:	87 87       	std	Z+15, r24	; 0x0f
    12de:	90 8b       	std	Z+16, r25	; 0x10
    12e0:	a1 8b       	std	Z+17, r26	; 0x11
    12e2:	b2 8b       	std	Z+18, r27	; 0x12

	Pipe_SelectPipe(SIInterfaceInfo->Config.DataOUTPipeNumber);
    12e4:	82 81       	ldd	r24, Z+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    12e6:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    12ea:	80 91 a9 00 	lds	r24, 0x00A9
    12ee:	8f 7b       	andi	r24, 0xBF	; 191
    12f0:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Write_Stream_LE(PIMAHeader, PIMA_COMMAND_SIZE(0), NULL)) != PIPE_RWSTREAM_NoError)
    12f4:	ce 01       	movw	r24, r28
    12f6:	6c e0       	ldi	r22, 0x0C	; 12
    12f8:	70 e0       	ldi	r23, 0x00	; 0
    12fa:	40 e0       	ldi	r20, 0x00	; 0
    12fc:	50 e0       	ldi	r21, 0x00	; 0
    12fe:	37 dd       	rcall	.-1426   	; 0xd6e <Pipe_Write_Stream_LE>
    1300:	18 2f       	mov	r17, r24
    1302:	88 23       	and	r24, r24
    1304:	c9 f4       	brne	.+50     	; 0x1338 <SI_Host_SendBlockHeader+0x92>
	  return ErrorCode;

	uint8_t ParamBytes = (PIMAHeader->DataLength - PIMA_COMMAND_SIZE(0));
    1306:	68 81       	ld	r22, Y
    1308:	6c 50       	subi	r22, 0x0C	; 12

	if (ParamBytes)
    130a:	51 f0       	breq	.+20     	; 0x1320 <SI_Host_SendBlockHeader+0x7a>
	{
		if ((ErrorCode = Pipe_Write_Stream_LE(&PIMAHeader->Params, ParamBytes, NULL)) != PIPE_RWSTREAM_NoError)
    130c:	ce 01       	movw	r24, r28
    130e:	0c 96       	adiw	r24, 0x0c	; 12
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	40 e0       	ldi	r20, 0x00	; 0
    1314:	50 e0       	ldi	r21, 0x00	; 0
    1316:	2b dd       	rcall	.-1450   	; 0xd6e <Pipe_Write_Stream_LE>
    1318:	88 23       	and	r24, r24
    131a:	11 f0       	breq	.+4      	; 0x1320 <SI_Host_SendBlockHeader+0x7a>
    131c:	18 2f       	mov	r17, r24
    131e:	0c c0       	rjmp	.+24     	; 0x1338 <SI_Host_SendBlockHeader+0x92>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1320:	80 91 a6 00 	lds	r24, 0x00A6
    1324:	8b 77       	andi	r24, 0x7B	; 123
    1326:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    132a:	80 91 a9 00 	lds	r24, 0x00A9
    132e:	80 64       	ori	r24, 0x40	; 64
    1330:	80 93 a9 00 	sts	0x00A9, r24
    1334:	01 c0       	rjmp	.+2      	; 0x1338 <SI_Host_SendBlockHeader+0x92>
	}

	Pipe_ClearOUT();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    1336:	12 e0       	ldi	r17, 0x02	; 2
}
    1338:	81 2f       	mov	r24, r17
    133a:	df 91       	pop	r29
    133c:	cf 91       	pop	r28
    133e:	1f 91       	pop	r17
    1340:	08 95       	ret

00001342 <SI_Host_SendCommand>:

uint8_t SI_Host_SendCommand(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                            const uint16_t Operation,
                            const uint8_t TotalParams,
                            uint32_t* const Params)
{
    1342:	df 92       	push	r13
    1344:	ef 92       	push	r14
    1346:	ff 92       	push	r15
    1348:	0f 93       	push	r16
    134a:	1f 93       	push	r17
    134c:	df 93       	push	r29
    134e:	cf 93       	push	r28
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
    1354:	68 97       	sbiw	r28, 0x18	; 24
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	f8 94       	cli
    135a:	de bf       	out	0x3e, r29	; 62
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	cd bf       	out	0x3d, r28	; 61
    1360:	7c 01       	movw	r14, r24
    1362:	52 2f       	mov	r21, r18
    1364:	d3 2e       	mov	r13, r19
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    1366:	80 91 31 01 	lds	r24, 0x0131
    136a:	8b 30       	cpi	r24, 0x0B	; 11
    136c:	89 f5       	brne	.+98     	; 0x13d0 <SI_Host_SendCommand+0x8e>
    136e:	d7 01       	movw	r26, r14
    1370:	16 96       	adiw	r26, 0x06	; 6
    1372:	8c 91       	ld	r24, X
    1374:	88 23       	and	r24, r24
    1376:	61 f1       	breq	.+88     	; 0x13d0 <SI_Host_SendCommand+0x8e>
	PIMA_Container_t PIMABlock = (PIMA_Container_t)
		{
			.DataLength    = cpu_to_le32(PIMA_COMMAND_SIZE(TotalParams)),
			.Type          = CPU_TO_LE16(PIMA_CONTAINER_CommandBlock),
			.Code          = cpu_to_le16(Operation),
		};
    1378:	e4 2f       	mov	r30, r20
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	8e 01       	movw	r16, r28
    137e:	0f 5f       	subi	r16, 0xFF	; 255
    1380:	1f 4f       	sbci	r17, 0xFF	; 255
    1382:	88 e1       	ldi	r24, 0x18	; 24
    1384:	d8 01       	movw	r26, r16
    1386:	1d 92       	st	X+, r1
    1388:	8a 95       	dec	r24
    138a:	e9 f7       	brne	.-6      	; 0x1386 <SI_Host_SendCommand+0x44>
    138c:	cf 01       	movw	r24, r30
    138e:	03 96       	adiw	r24, 0x03	; 3
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	a0 e0       	ldi	r26, 0x00	; 0
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	89 83       	std	Y+1, r24	; 0x01
    139e:	9a 83       	std	Y+2, r25	; 0x02
    13a0:	ab 83       	std	Y+3, r26	; 0x03
    13a2:	bc 83       	std	Y+4, r27	; 0x04
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	9e 83       	std	Y+6, r25	; 0x06
    13aa:	8d 83       	std	Y+5, r24	; 0x05
    13ac:	78 87       	std	Y+8, r23	; 0x08
    13ae:	6f 83       	std	Y+7, r22	; 0x07

	memcpy(&PIMABlock.Params, Params, sizeof(uint32_t) * TotalParams);
    13b0:	9e 01       	movw	r18, r28
    13b2:	23 5f       	subi	r18, 0xF3	; 243
    13b4:	3f 4f       	sbci	r19, 0xFF	; 255
    13b6:	ee 0f       	add	r30, r30
    13b8:	ff 1f       	adc	r31, r31
    13ba:	ee 0f       	add	r30, r30
    13bc:	ff 1f       	adc	r31, r31
    13be:	c9 01       	movw	r24, r18
    13c0:	65 2f       	mov	r22, r21
    13c2:	7d 2d       	mov	r23, r13
    13c4:	af 01       	movw	r20, r30
    13c6:	96 d2       	rcall	.+1324   	; 0x18f4 <memcpy>

	if ((ErrorCode = SI_Host_SendBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    13c8:	c7 01       	movw	r24, r14
    13ca:	b8 01       	movw	r22, r16
    13cc:	6c df       	rcall	.-296    	; 0x12a6 <SI_Host_SendBlockHeader>
    13ce:	01 c0       	rjmp	.+2      	; 0x13d2 <SI_Host_SendCommand+0x90>
    13d0:	82 e0       	ldi	r24, 0x02	; 2
	  return ErrorCode;

	return PIPE_RWSTREAM_NoError;
}
    13d2:	68 96       	adiw	r28, 0x18	; 24
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	f8 94       	cli
    13d8:	de bf       	out	0x3e, r29	; 62
    13da:	0f be       	out	0x3f, r0	; 63
    13dc:	cd bf       	out	0x3d, r28	; 61
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	1f 91       	pop	r17
    13e4:	0f 91       	pop	r16
    13e6:	ff 90       	pop	r15
    13e8:	ef 90       	pop	r14
    13ea:	df 90       	pop	r13
    13ec:	08 95       	ret

000013ee <SI_Host_ReceiveBlockHeader>:
	return PIPE_RWSTREAM_NoError;
}

uint8_t SI_Host_ReceiveBlockHeader(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                                   PIMA_Container_t* const PIMAHeader)
{
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
    13f2:	fc 01       	movw	r30, r24
    13f4:	eb 01       	movw	r28, r22
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    13f6:	60 91 a2 00 	lds	r22, 0x00A2
    13fa:	70 91 a3 00 	lds	r23, 0x00A3
	uint16_t TimeoutMSRem        = SI_COMMAND_DATA_TIMEOUT_MS;
	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    13fe:	80 91 31 01 	lds	r24, 0x0131
    1402:	8b 30       	cpi	r24, 0x0B	; 11
    1404:	09 f0       	breq	.+2      	; 0x1408 <SI_Host_ReceiveBlockHeader+0x1a>
    1406:	6c c0       	rjmp	.+216    	; 0x14e0 <SI_Host_ReceiveBlockHeader+0xf2>
    1408:	86 81       	ldd	r24, Z+6	; 0x06
    140a:	88 23       	and	r24, r24
    140c:	09 f4       	brne	.+2      	; 0x1410 <SI_Host_ReceiveBlockHeader+0x22>
    140e:	68 c0       	rjmp	.+208    	; 0x14e0 <SI_Host_ReceiveBlockHeader+0xf2>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	Pipe_SelectPipe(SIInterfaceInfo->Config.DataINPipeNumber);
    1410:	40 81       	ld	r20, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1412:	40 93 a7 00 	sts	0x00A7, r20

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1416:	80 91 a9 00 	lds	r24, 0x00A9
    141a:	8f 7b       	andi	r24, 0xBF	; 191
    141c:	80 93 a9 00 	sts	0x00A9, r24
    1420:	20 e1       	ldi	r18, 0x10	; 16
    1422:	37 e2       	ldi	r19, 0x27	; 39
    1424:	3a c0       	rjmp	.+116    	; 0x149a <SI_Host_ReceiveBlockHeader+0xac>
    1426:	80 91 a2 00 	lds	r24, 0x00A2
    142a:	90 91 a3 00 	lds	r25, 0x00A3

	while (!(Pipe_IsINReceived()))
	{
		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    142e:	86 17       	cp	r24, r22
    1430:	97 07       	cpc	r25, r23
    1432:	41 f0       	breq	.+16     	; 0x1444 <SI_Host_ReceiveBlockHeader+0x56>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1434:	21 15       	cp	r18, r1
    1436:	31 05       	cpc	r19, r1
    1438:	11 f4       	brne	.+4      	; 0x143e <SI_Host_ReceiveBlockHeader+0x50>
    143a:	83 e0       	ldi	r24, 0x03	; 3
    143c:	52 c0       	rjmp	.+164    	; 0x14e2 <SI_Host_ReceiveBlockHeader+0xf4>
    143e:	21 50       	subi	r18, 0x01	; 1
    1440:	30 40       	sbci	r19, 0x00	; 0
    1442:	bc 01       	movw	r22, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1444:	80 91 a9 00 	lds	r24, 0x00A9
    1448:	80 64       	ori	r24, 0x40	; 64
    144a:	80 93 a9 00 	sts	0x00A9, r24
			  return PIPE_RWSTREAM_Timeout;
		}

		Pipe_Freeze();
		Pipe_SelectPipe(SIInterfaceInfo->Config.DataOUTPipeNumber);
    144e:	92 81       	ldd	r25, Z+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1450:	90 93 a7 00 	sts	0x00A7, r25

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1454:	80 91 a9 00 	lds	r24, 0x00A9
    1458:	8f 7b       	andi	r24, 0xBF	; 191
    145a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    145e:	80 91 a6 00 	lds	r24, 0x00A6
		Pipe_Unfreeze();

		if (Pipe_IsStalled())
    1462:	81 ff       	sbrs	r24, 1
    1464:	02 c0       	rjmp	.+4      	; 0x146a <SI_Host_ReceiveBlockHeader+0x7c>
		{
			USB_Host_ClearPipeStall(SIInterfaceInfo->Config.DataOUTPipeNumber);
    1466:	89 2f       	mov	r24, r25
    1468:	11 c0       	rjmp	.+34     	; 0x148c <SI_Host_ReceiveBlockHeader+0x9e>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    146a:	80 91 a9 00 	lds	r24, 0x00A9
    146e:	80 64       	ori	r24, 0x40	; 64
    1470:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1474:	40 93 a7 00 	sts	0x00A7, r20

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1478:	80 91 a9 00 	lds	r24, 0x00A9
    147c:	8f 7b       	andi	r24, 0xBF	; 191
    147e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1482:	80 91 a6 00 	lds	r24, 0x00A6

		Pipe_Freeze();
		Pipe_SelectPipe(SIInterfaceInfo->Config.DataINPipeNumber);
		Pipe_Unfreeze();

		if (Pipe_IsStalled())
    1486:	81 ff       	sbrs	r24, 1
    1488:	04 c0       	rjmp	.+8      	; 0x1492 <SI_Host_ReceiveBlockHeader+0xa4>
		{
			USB_Host_ClearPipeStall(SIInterfaceInfo->Config.DataINPipeNumber);
    148a:	84 2f       	mov	r24, r20
    148c:	ad de       	rcall	.-678    	; 0x11e8 <USB_Host_ClearPipeStall>
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	28 c0       	rjmp	.+80     	; 0x14e2 <SI_Host_ReceiveBlockHeader+0xf4>
			return PIPE_RWSTREAM_PipeStalled;
		}

		if (USB_HostState == HOST_STATE_Unattached)
    1492:	80 91 31 01 	lds	r24, 0x0131
    1496:	81 30       	cpi	r24, 0x01	; 1
    1498:	19 f1       	breq	.+70     	; 0x14e0 <SI_Host_ReceiveBlockHeader+0xf2>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    149a:	80 91 a6 00 	lds	r24, 0x00A6
	  return PIPE_RWSTREAM_DeviceDisconnected;

	Pipe_SelectPipe(SIInterfaceInfo->Config.DataINPipeNumber);
	Pipe_Unfreeze();

	while (!(Pipe_IsINReceived()))
    149e:	80 ff       	sbrs	r24, 0
    14a0:	c2 cf       	rjmp	.-124    	; 0x1426 <SI_Host_ReceiveBlockHeader+0x38>

		if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_RWSTREAM_DeviceDisconnected;
	}

	Pipe_Read_Stream_LE(PIMAHeader, PIMA_COMMAND_SIZE(0), NULL);
    14a2:	ce 01       	movw	r24, r28
    14a4:	6c e0       	ldi	r22, 0x0C	; 12
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	40 e0       	ldi	r20, 0x00	; 0
    14aa:	50 e0       	ldi	r21, 0x00	; 0
    14ac:	09 dc       	rcall	.-2030   	; 0xcc0 <Pipe_Read_Stream_LE>

	if (PIMAHeader->Type == CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock))
    14ae:	8c 81       	ldd	r24, Y+4	; 0x04
    14b0:	9d 81       	ldd	r25, Y+5	; 0x05
    14b2:	03 97       	sbiw	r24, 0x03	; 3
    14b4:	71 f4       	brne	.+28     	; 0x14d2 <SI_Host_ReceiveBlockHeader+0xe4>
	{
		uint8_t ParamBytes = (PIMAHeader->DataLength - PIMA_COMMAND_SIZE(0));
    14b6:	68 81       	ld	r22, Y
    14b8:	6c 50       	subi	r22, 0x0C	; 12

		if (ParamBytes)
    14ba:	31 f0       	breq	.+12     	; 0x14c8 <SI_Host_ReceiveBlockHeader+0xda>
		  Pipe_Read_Stream_LE(&PIMAHeader->Params, ParamBytes, NULL);
    14bc:	ce 01       	movw	r24, r28
    14be:	0c 96       	adiw	r24, 0x0c	; 12
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	40 e0       	ldi	r20, 0x00	; 0
    14c4:	50 e0       	ldi	r21, 0x00	; 0
    14c6:	fc db       	rcall	.-2056   	; 0xcc0 <Pipe_Read_Stream_LE>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    14c8:	80 91 a6 00 	lds	r24, 0x00A6
    14cc:	8e 77       	andi	r24, 0x7E	; 126
    14ce:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    14d2:	80 91 a9 00 	lds	r24, 0x00A9
    14d6:	80 64       	ori	r24, 0x40	; 64
    14d8:	80 93 a9 00 	sts	0x00A9, r24
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	01 c0       	rjmp	.+2      	; 0x14e2 <SI_Host_ReceiveBlockHeader+0xf4>
		Pipe_ClearIN();
	}

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    14e0:	82 e0       	ldi	r24, 0x02	; 2
}
    14e2:	df 91       	pop	r29
    14e4:	cf 91       	pop	r28
    14e6:	08 95       	ret

000014e8 <SI_Host_ReceiveResponse>:

	return PIPE_RWSTREAM_NoError;
}

uint8_t SI_Host_ReceiveResponse(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
    14e8:	df 93       	push	r29
    14ea:	cf 93       	push	r28
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	68 97       	sbiw	r28, 0x18	; 24
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	f8 94       	cli
    14f6:	de bf       	out	0x3e, r29	; 62
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	cd bf       	out	0x3d, r28	; 61
    14fc:	fc 01       	movw	r30, r24
	uint8_t ErrorCode;
	PIMA_Container_t PIMABlock;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    14fe:	80 91 31 01 	lds	r24, 0x0131
    1502:	8b 30       	cpi	r24, 0x0B	; 11
    1504:	a9 f4       	brne	.+42     	; 0x1530 <SI_Host_ReceiveResponse+0x48>
    1506:	86 81       	ldd	r24, Z+6	; 0x06
    1508:	88 23       	and	r24, r24
    150a:	91 f0       	breq	.+36     	; 0x1530 <SI_Host_ReceiveResponse+0x48>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    150c:	cf 01       	movw	r24, r30
    150e:	be 01       	movw	r22, r28
    1510:	6f 5f       	subi	r22, 0xFF	; 255
    1512:	7f 4f       	sbci	r23, 0xFF	; 255
    1514:	6c df       	rcall	.-296    	; 0x13ee <SI_Host_ReceiveBlockHeader>
    1516:	28 2f       	mov	r18, r24
    1518:	88 23       	and	r24, r24
    151a:	69 f4       	brne	.+26     	; 0x1536 <SI_Host_ReceiveResponse+0x4e>
	  return ErrorCode;

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
    151c:	8d 81       	ldd	r24, Y+5	; 0x05
    151e:	9e 81       	ldd	r25, Y+6	; 0x06
    1520:	03 97       	sbiw	r24, 0x03	; 3
    1522:	41 f4       	brne	.+16     	; 0x1534 <SI_Host_ReceiveResponse+0x4c>
    1524:	8f 81       	ldd	r24, Y+7	; 0x07
    1526:	98 85       	ldd	r25, Y+8	; 0x08
    1528:	81 50       	subi	r24, 0x01	; 1
    152a:	90 42       	sbci	r25, 0x20	; 32
    152c:	19 f4       	brne	.+6      	; 0x1534 <SI_Host_ReceiveResponse+0x4c>
    152e:	03 c0       	rjmp	.+6      	; 0x1536 <SI_Host_ReceiveResponse+0x4e>
    1530:	22 e0       	ldi	r18, 0x02	; 2
    1532:	01 c0       	rjmp	.+2      	; 0x1536 <SI_Host_ReceiveResponse+0x4e>
    1534:	20 e8       	ldi	r18, 0x80	; 128
	  return SI_ERROR_LOGICAL_CMD_FAILED;

	return PIPE_RWSTREAM_NoError;
}
    1536:	82 2f       	mov	r24, r18
    1538:	68 96       	adiw	r28, 0x18	; 24
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	cd bf       	out	0x3d, r28	; 61
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	08 95       	ret

0000154a <SI_Host_CloseSession>:

	return PIPE_RWSTREAM_NoError;
}

uint8_t SI_Host_CloseSession(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
    154a:	ef 92       	push	r14
    154c:	ff 92       	push	r15
    154e:	0f 93       	push	r16
    1550:	1f 93       	push	r17
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
    155a:	68 97       	sbiw	r28, 0x18	; 24
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	de bf       	out	0x3e, r29	; 62
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	cd bf       	out	0x3d, r28	; 61
    1566:	8c 01       	movw	r16, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    1568:	80 91 31 01 	lds	r24, 0x0131
    156c:	8b 30       	cpi	r24, 0x0B	; 11
    156e:	09 f0       	breq	.+2      	; 0x1572 <SI_Host_CloseSession+0x28>
    1570:	3d c0       	rjmp	.+122    	; 0x15ec <SI_Host_CloseSession+0xa2>
    1572:	f8 01       	movw	r30, r16
    1574:	86 81       	ldd	r24, Z+6	; 0x06
    1576:	88 23       	and	r24, r24
    1578:	c9 f1       	breq	.+114    	; 0x15ec <SI_Host_CloseSession+0xa2>
		{
			.DataLength    = CPU_TO_LE32(PIMA_COMMAND_SIZE(1)),
			.Type          = CPU_TO_LE16(PIMA_CONTAINER_CommandBlock),
			.Code          = CPU_TO_LE16(0x1003),
			.Params        = {CPU_TO_LE32(1)},
		};
    157a:	7e 01       	movw	r14, r28
    157c:	08 94       	sec
    157e:	e1 1c       	adc	r14, r1
    1580:	f1 1c       	adc	r15, r1
    1582:	88 e1       	ldi	r24, 0x18	; 24
    1584:	f7 01       	movw	r30, r14
    1586:	11 92       	st	Z+, r1
    1588:	8a 95       	dec	r24
    158a:	e9 f7       	brne	.-6      	; 0x1586 <SI_Host_CloseSession+0x3c>
    158c:	80 e1       	ldi	r24, 0x10	; 16
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	a0 e0       	ldi	r26, 0x00	; 0
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	9a 83       	std	Y+2, r25	; 0x02
    1598:	ab 83       	std	Y+3, r26	; 0x03
    159a:	bc 83       	std	Y+4, r27	; 0x04
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	9e 83       	std	Y+6, r25	; 0x06
    15a2:	8d 83       	std	Y+5, r24	; 0x05
    15a4:	83 e0       	ldi	r24, 0x03	; 3
    15a6:	90 e1       	ldi	r25, 0x10	; 16
    15a8:	98 87       	std	Y+8, r25	; 0x08
    15aa:	8f 83       	std	Y+7, r24	; 0x07
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	a0 e0       	ldi	r26, 0x00	; 0
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	8d 87       	std	Y+13, r24	; 0x0d
    15b6:	9e 87       	std	Y+14, r25	; 0x0e
    15b8:	af 87       	std	Y+15, r26	; 0x0f
    15ba:	b8 8b       	std	Y+16, r27	; 0x10

	if ((ErrorCode = SI_Host_SendBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    15bc:	c8 01       	movw	r24, r16
    15be:	b7 01       	movw	r22, r14
    15c0:	72 de       	rcall	.-796    	; 0x12a6 <SI_Host_SendBlockHeader>
    15c2:	28 2f       	mov	r18, r24
    15c4:	88 23       	and	r24, r24
    15c6:	a9 f4       	brne	.+42     	; 0x15f2 <SI_Host_CloseSession+0xa8>
	  return ErrorCode;

	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    15c8:	c8 01       	movw	r24, r16
    15ca:	b7 01       	movw	r22, r14
    15cc:	10 df       	rcall	.-480    	; 0x13ee <SI_Host_ReceiveBlockHeader>
    15ce:	28 2f       	mov	r18, r24
    15d0:	88 23       	and	r24, r24
    15d2:	79 f4       	brne	.+30     	; 0x15f2 <SI_Host_CloseSession+0xa8>
	  return ErrorCode;

	SIInterfaceInfo->State.IsSessionOpen = false;
    15d4:	f8 01       	movw	r30, r16
    15d6:	16 86       	std	Z+14, r1	; 0x0e

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
    15d8:	8d 81       	ldd	r24, Y+5	; 0x05
    15da:	9e 81       	ldd	r25, Y+6	; 0x06
    15dc:	03 97       	sbiw	r24, 0x03	; 3
    15de:	41 f4       	brne	.+16     	; 0x15f0 <SI_Host_CloseSession+0xa6>
    15e0:	8f 81       	ldd	r24, Y+7	; 0x07
    15e2:	98 85       	ldd	r25, Y+8	; 0x08
    15e4:	81 50       	subi	r24, 0x01	; 1
    15e6:	90 42       	sbci	r25, 0x20	; 32
    15e8:	19 f4       	brne	.+6      	; 0x15f0 <SI_Host_CloseSession+0xa6>
    15ea:	03 c0       	rjmp	.+6      	; 0x15f2 <SI_Host_CloseSession+0xa8>
    15ec:	22 e0       	ldi	r18, 0x02	; 2
    15ee:	01 c0       	rjmp	.+2      	; 0x15f2 <SI_Host_CloseSession+0xa8>
    15f0:	20 e8       	ldi	r18, 0x80	; 128
	  return SI_ERROR_LOGICAL_CMD_FAILED;

	return PIPE_RWSTREAM_NoError;
}
    15f2:	82 2f       	mov	r24, r18
    15f4:	68 96       	adiw	r28, 0x18	; 24
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	de bf       	out	0x3e, r29	; 62
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	cd bf       	out	0x3d, r28	; 61
    1600:	cf 91       	pop	r28
    1602:	df 91       	pop	r29
    1604:	1f 91       	pop	r17
    1606:	0f 91       	pop	r16
    1608:	ff 90       	pop	r15
    160a:	ef 90       	pop	r14
    160c:	08 95       	ret

0000160e <SI_Host_OpenSession>:

	return ErrorCode;
}

uint8_t SI_Host_OpenSession(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
    160e:	ef 92       	push	r14
    1610:	ff 92       	push	r15
    1612:	0f 93       	push	r16
    1614:	1f 93       	push	r17
    1616:	df 93       	push	r29
    1618:	cf 93       	push	r28
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
    161e:	68 97       	sbiw	r28, 0x18	; 24
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	f8 94       	cli
    1624:	de bf       	out	0x3e, r29	; 62
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	cd bf       	out	0x3d, r28	; 61
    162a:	8c 01       	movw	r16, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    162c:	80 91 31 01 	lds	r24, 0x0131
    1630:	8b 30       	cpi	r24, 0x0B	; 11
    1632:	09 f0       	breq	.+2      	; 0x1636 <SI_Host_OpenSession+0x28>
    1634:	44 c0       	rjmp	.+136    	; 0x16be <SI_Host_OpenSession+0xb0>
    1636:	f8 01       	movw	r30, r16
    1638:	86 81       	ldd	r24, Z+6	; 0x06
    163a:	88 23       	and	r24, r24
    163c:	09 f4       	brne	.+2      	; 0x1640 <SI_Host_OpenSession+0x32>
    163e:	3f c0       	rjmp	.+126    	; 0x16be <SI_Host_OpenSession+0xb0>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	SIInterfaceInfo->State.TransactionID = 0;
    1640:	17 86       	std	Z+15, r1	; 0x0f
    1642:	10 8a       	std	Z+16, r1	; 0x10
    1644:	11 8a       	std	Z+17, r1	; 0x11
    1646:	12 8a       	std	Z+18, r1	; 0x12
	SIInterfaceInfo->State.IsSessionOpen = false;
    1648:	16 86       	std	Z+14, r1	; 0x0e
		{
			.DataLength    = CPU_TO_LE32(PIMA_COMMAND_SIZE(1)),
			.Type          = CPU_TO_LE16(PIMA_CONTAINER_CommandBlock),
			.Code          = CPU_TO_LE16(0x1002),
			.Params        = {CPU_TO_LE32(1)},
		};
    164a:	7e 01       	movw	r14, r28
    164c:	08 94       	sec
    164e:	e1 1c       	adc	r14, r1
    1650:	f1 1c       	adc	r15, r1
    1652:	88 e1       	ldi	r24, 0x18	; 24
    1654:	f7 01       	movw	r30, r14
    1656:	11 92       	st	Z+, r1
    1658:	8a 95       	dec	r24
    165a:	e9 f7       	brne	.-6      	; 0x1656 <SI_Host_OpenSession+0x48>
    165c:	80 e1       	ldi	r24, 0x10	; 16
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	a0 e0       	ldi	r26, 0x00	; 0
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	89 83       	std	Y+1, r24	; 0x01
    1666:	9a 83       	std	Y+2, r25	; 0x02
    1668:	ab 83       	std	Y+3, r26	; 0x03
    166a:	bc 83       	std	Y+4, r27	; 0x04
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	9e 83       	std	Y+6, r25	; 0x06
    1672:	8d 83       	std	Y+5, r24	; 0x05
    1674:	82 e0       	ldi	r24, 0x02	; 2
    1676:	90 e1       	ldi	r25, 0x10	; 16
    1678:	98 87       	std	Y+8, r25	; 0x08
    167a:	8f 83       	std	Y+7, r24	; 0x07
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	a0 e0       	ldi	r26, 0x00	; 0
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	8d 87       	std	Y+13, r24	; 0x0d
    1686:	9e 87       	std	Y+14, r25	; 0x0e
    1688:	af 87       	std	Y+15, r26	; 0x0f
    168a:	b8 8b       	std	Y+16, r27	; 0x10

	if ((ErrorCode = SI_Host_SendBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    168c:	c8 01       	movw	r24, r16
    168e:	b7 01       	movw	r22, r14
    1690:	0a de       	rcall	.-1004   	; 0x12a6 <SI_Host_SendBlockHeader>
    1692:	28 2f       	mov	r18, r24
    1694:	88 23       	and	r24, r24
    1696:	b1 f4       	brne	.+44     	; 0x16c4 <SI_Host_OpenSession+0xb6>
	  return ErrorCode;

	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    1698:	c8 01       	movw	r24, r16
    169a:	b7 01       	movw	r22, r14
    169c:	a8 de       	rcall	.-688    	; 0x13ee <SI_Host_ReceiveBlockHeader>
    169e:	28 2f       	mov	r18, r24
    16a0:	88 23       	and	r24, r24
    16a2:	81 f4       	brne	.+32     	; 0x16c4 <SI_Host_OpenSession+0xb6>
	  return ErrorCode;

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
    16a4:	8d 81       	ldd	r24, Y+5	; 0x05
    16a6:	9e 81       	ldd	r25, Y+6	; 0x06
    16a8:	03 97       	sbiw	r24, 0x03	; 3
    16aa:	59 f4       	brne	.+22     	; 0x16c2 <SI_Host_OpenSession+0xb4>
    16ac:	8f 81       	ldd	r24, Y+7	; 0x07
    16ae:	98 85       	ldd	r25, Y+8	; 0x08
    16b0:	81 50       	subi	r24, 0x01	; 1
    16b2:	90 42       	sbci	r25, 0x20	; 32
    16b4:	31 f4       	brne	.+12     	; 0x16c2 <SI_Host_OpenSession+0xb4>
	  return SI_ERROR_LOGICAL_CMD_FAILED;

	SIInterfaceInfo->State.IsSessionOpen = true;
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	f8 01       	movw	r30, r16
    16ba:	86 87       	std	Z+14, r24	; 0x0e
    16bc:	03 c0       	rjmp	.+6      	; 0x16c4 <SI_Host_OpenSession+0xb6>

	return PIPE_RWSTREAM_NoError;
    16be:	22 e0       	ldi	r18, 0x02	; 2
    16c0:	01 c0       	rjmp	.+2      	; 0x16c4 <SI_Host_OpenSession+0xb6>
    16c2:	20 e8       	ldi	r18, 0x80	; 128
}
    16c4:	82 2f       	mov	r24, r18
    16c6:	68 96       	adiw	r28, 0x18	; 24
    16c8:	0f b6       	in	r0, 0x3f	; 63
    16ca:	f8 94       	cli
    16cc:	de bf       	out	0x3e, r29	; 62
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	cd bf       	out	0x3d, r28	; 61
    16d2:	cf 91       	pop	r28
    16d4:	df 91       	pop	r29
    16d6:	1f 91       	pop	r17
    16d8:	0f 91       	pop	r16
    16da:	ff 90       	pop	r15
    16dc:	ef 90       	pop	r14
    16de:	08 95       	ret

000016e0 <SI_Host_ConfigurePipes>:
#include "StillImage.h"

uint8_t SI_Host_ConfigurePipes(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                               uint16_t ConfigDescriptorSize,
                               void* ConfigDescriptorData)
{
    16e0:	4f 92       	push	r4
    16e2:	5f 92       	push	r5
    16e4:	6f 92       	push	r6
    16e6:	7f 92       	push	r7
    16e8:	8f 92       	push	r8
    16ea:	9f 92       	push	r9
    16ec:	af 92       	push	r10
    16ee:	bf 92       	push	r11
    16f0:	cf 92       	push	r12
    16f2:	df 92       	push	r13
    16f4:	ef 92       	push	r14
    16f6:	ff 92       	push	r15
    16f8:	0f 93       	push	r16
    16fa:	1f 93       	push	r17
    16fc:	df 93       	push	r29
    16fe:	cf 93       	push	r28
    1700:	00 d0       	rcall	.+0      	; 0x1702 <SI_Host_ConfigurePipes+0x22>
    1702:	00 d0       	rcall	.+0      	; 0x1704 <SI_Host_ConfigurePipes+0x24>
    1704:	0f 92       	push	r0
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
    170a:	6c 01       	movw	r12, r24
    170c:	7a 83       	std	Y+2, r23	; 0x02
    170e:	69 83       	std	Y+1, r22	; 0x01
    1710:	5c 83       	std	Y+4, r21	; 0x04
    1712:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint      = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint     = NULL;
	USB_Descriptor_Endpoint_t*  EventsEndpoint      = NULL;
	USB_Descriptor_Interface_t* StillImageInterface = NULL;

	memset(&SIInterfaceInfo->State, 0x00, sizeof(SIInterfaceInfo->State));
    1714:	06 96       	adiw	r24, 0x06	; 6
    1716:	fc 01       	movw	r30, r24
    1718:	8d e0       	ldi	r24, 0x0D	; 13
    171a:	df 01       	movw	r26, r30
    171c:	1d 92       	st	X+, r1
    171e:	8a 95       	dec	r24
    1720:	e9 f7       	brne	.-6      	; 0x171c <SI_Host_ConfigurePipes+0x3c>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1722:	eb 81       	ldd	r30, Y+3	; 0x03
    1724:	fc 81       	ldd	r31, Y+4	; 0x04
    1726:	81 81       	ldd	r24, Z+1	; 0x01
    1728:	82 30       	cpi	r24, 0x02	; 2
    172a:	11 f0       	breq	.+4      	; 0x1730 <SI_Host_ConfigurePipes+0x50>
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	9a c0       	rjmp	.+308    	; 0x1864 <SI_Host_ConfigurePipes+0x184>
    1730:	66 24       	eor	r6, r6
    1732:	77 24       	eor	r7, r7
    1734:	aa 24       	eor	r10, r10
    1736:	bb 24       	eor	r11, r11
    1738:	44 24       	eor	r4, r4
    173a:	55 24       	eor	r5, r5
    173c:	88 24       	eor	r8, r8
    173e:	99 24       	eor	r9, r9
	  return SI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(EventsEndpoint))
	{
		if (!(StillImageInterface) ||
    1740:	33 e0       	ldi	r19, 0x03	; 3
    1742:	e3 2e       	mov	r14, r19
    1744:	f1 2c       	mov	r15, r1
    1746:	ec 0e       	add	r14, r28
    1748:	fd 1e       	adc	r15, r29
    174a:	8e 01       	movw	r16, r28
    174c:	0f 5f       	subi	r16, 0xFF	; 255
    174e:	1f 4f       	sbci	r17, 0xFF	; 255
    1750:	41 14       	cp	r4, r1
    1752:	51 04       	cpc	r5, r1
    1754:	39 f0       	breq	.+14     	; 0x1764 <SI_Host_ConfigurePipes+0x84>
    1756:	c8 01       	movw	r24, r16
    1758:	b7 01       	movw	r22, r14
    175a:	48 e4       	ldi	r20, 0x48	; 72
    175c:	5c e0       	ldi	r21, 0x0C	; 12
    175e:	5e db       	rcall	.-2372   	; 0xe1c <USB_GetNextDescriptorComp>
    1760:	88 23       	and	r24, r24
    1762:	91 f0       	breq	.+36     	; 0x1788 <SI_Host_ConfigurePipes+0xa8>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_SI_Host_NextSIInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1764:	c8 01       	movw	r24, r16
    1766:	b7 01       	movw	r22, r14
    1768:	42 e4       	ldi	r20, 0x42	; 66
    176a:	59 e0       	ldi	r21, 0x09	; 9
    176c:	57 db       	rcall	.-2386   	; 0xe1c <USB_GetNextDescriptorComp>
    176e:	88 23       	and	r24, r24
    1770:	11 f0       	breq	.+4      	; 0x1776 <SI_Host_ConfigurePipes+0x96>
    1772:	82 e0       	ldi	r24, 0x02	; 2
    1774:	77 c0       	rjmp	.+238    	; 0x1864 <SI_Host_ConfigurePipes+0x184>
			                              DCOMP_SI_Host_NextSIInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return SI_ENUMERROR_NoCompatibleInterfaceFound;
			}

			StillImageInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1776:	4b 80       	ldd	r4, Y+3	; 0x03
    1778:	5c 80       	ldd	r5, Y+4	; 0x04
    177a:	88 24       	eor	r8, r8
    177c:	99 24       	eor	r9, r9
    177e:	aa 24       	eor	r10, r10
    1780:	bb 24       	eor	r11, r11
    1782:	66 24       	eor	r6, r6
    1784:	77 24       	eor	r7, r7
    1786:	e4 cf       	rjmp	.-56     	; 0x1750 <SI_Host_ConfigurePipes+0x70>
			EventsEndpoint  = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1788:	eb 81       	ldd	r30, Y+3	; 0x03
    178a:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    178c:	82 81       	ldd	r24, Z+2	; 0x02
    178e:	87 fd       	sbrc	r24, 7
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <SI_Host_ConfigurePipes+0xb6>
    1792:	3f 01       	movw	r6, r30
    1794:	07 c0       	rjmp	.+14     	; 0x17a4 <SI_Host_ConfigurePipes+0xc4>
		{
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
    1796:	83 81       	ldd	r24, Z+3	; 0x03
    1798:	83 70       	andi	r24, 0x03	; 3
    179a:	83 30       	cpi	r24, 0x03	; 3
    179c:	11 f0       	breq	.+4      	; 0x17a2 <SI_Host_ConfigurePipes+0xc2>
    179e:	4f 01       	movw	r8, r30
    17a0:	01 c0       	rjmp	.+2      	; 0x17a4 <SI_Host_ConfigurePipes+0xc4>
    17a2:	5f 01       	movw	r10, r30
	memset(&SIInterfaceInfo->State, 0x00, sizeof(SIInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return SI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(EventsEndpoint))
    17a4:	81 14       	cp	r8, r1
    17a6:	91 04       	cpc	r9, r1
    17a8:	99 f2       	breq	.-90     	; 0x1750 <SI_Host_ConfigurePipes+0x70>
    17aa:	61 14       	cp	r6, r1
    17ac:	71 04       	cpc	r7, r1
    17ae:	81 f2       	breq	.-96     	; 0x1750 <SI_Host_ConfigurePipes+0x70>
    17b0:	a1 14       	cp	r10, r1
    17b2:	b1 04       	cpc	r11, r1
    17b4:	69 f2       	breq	.-102    	; 0x1750 <SI_Host_ConfigurePipes+0x70>
    17b6:	91 e0       	ldi	r25, 0x01	; 1
		uint8_t  Token;
		uint8_t  EndpointAddress;
		uint8_t  InterruptPeriod;
		bool     DoubleBanked;

		if (PipeNum == SIInterfaceInfo->Config.DataINPipeNumber)
    17b8:	f6 01       	movw	r30, r12
    17ba:	80 81       	ld	r24, Z
    17bc:	98 17       	cp	r25, r24
    17be:	69 f4       	brne	.+26     	; 0x17da <SI_Host_ConfigurePipes+0xfa>
		{
			Size            = DataINEndpoint->EndpointSize;
    17c0:	d4 01       	movw	r26, r8
    17c2:	14 96       	adiw	r26, 0x04	; 4
    17c4:	0d 91       	ld	r16, X+
    17c6:	1c 91       	ld	r17, X
    17c8:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataINEndpoint->EndpointAddress;
    17ca:	12 96       	adiw	r26, 0x02	; 2
    17cc:	2c 91       	ld	r18, X
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataINPipeDoubleBank;
    17ce:	81 81       	ldd	r24, Z+1	; 0x01
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    17d0:	11 87       	std	Z+9, r17	; 0x09
    17d2:	00 87       	std	Z+8, r16	; 0x08
    17d4:	62 e0       	ldi	r22, 0x02	; 2
    17d6:	40 e1       	ldi	r20, 0x10	; 16
    17d8:	10 c0       	rjmp	.+32     	; 0x17fa <SI_Host_ConfigurePipes+0x11a>
		}
		else if (PipeNum == SIInterfaceInfo->Config.DataOUTPipeNumber)
    17da:	f6 01       	movw	r30, r12
    17dc:	82 81       	ldd	r24, Z+2	; 0x02
    17de:	98 17       	cp	r25, r24
    17e0:	71 f4       	brne	.+28     	; 0x17fe <SI_Host_ConfigurePipes+0x11e>
		{
			Size            = DataOUTEndpoint->EndpointSize;
    17e2:	d3 01       	movw	r26, r6
    17e4:	14 96       	adiw	r26, 0x04	; 4
    17e6:	0d 91       	ld	r16, X+
    17e8:	1c 91       	ld	r17, X
    17ea:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
    17ec:	12 96       	adiw	r26, 0x02	; 2
    17ee:	2c 91       	ld	r18, X
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataOUTPipeDoubleBank;
    17f0:	83 81       	ldd	r24, Z+3	; 0x03
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    17f2:	13 87       	std	Z+11, r17	; 0x0b
    17f4:	02 87       	std	Z+10, r16	; 0x0a
    17f6:	62 e0       	ldi	r22, 0x02	; 2
    17f8:	40 e2       	ldi	r20, 0x20	; 32
    17fa:	ff 24       	eor	r15, r15
    17fc:	13 c0       	rjmp	.+38     	; 0x1824 <SI_Host_ConfigurePipes+0x144>
		}
		else if (PipeNum == SIInterfaceInfo->Config.EventsPipeNumber)
    17fe:	f6 01       	movw	r30, r12
    1800:	84 81       	ldd	r24, Z+4	; 0x04
    1802:	98 17       	cp	r25, r24
    1804:	09 f5       	brne	.+66     	; 0x1848 <SI_Host_ConfigurePipes+0x168>
		{
			Size            = EventsEndpoint->EndpointSize;
    1806:	d5 01       	movw	r26, r10
    1808:	14 96       	adiw	r26, 0x04	; 4
    180a:	0d 91       	ld	r16, X+
    180c:	1c 91       	ld	r17, X
    180e:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = EventsEndpoint->EndpointAddress;
    1810:	12 96       	adiw	r26, 0x02	; 2
    1812:	2c 91       	ld	r18, X
    1814:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_INTERRUPT;
			DoubleBanked    = SIInterfaceInfo->Config.EventsPipeDoubleBank;
    1816:	85 81       	ldd	r24, Z+5	; 0x05
			InterruptPeriod = EventsEndpoint->PollingIntervalMS;
    1818:	16 96       	adiw	r26, 0x06	; 6
    181a:	fc 90       	ld	r15, X

			SIInterfaceInfo->State.EventsPipeSize = EventsEndpoint->EndpointSize;
    181c:	15 87       	std	Z+13, r17	; 0x0d
    181e:	04 87       	std	Z+12, r16	; 0x0c
    1820:	63 e0       	ldi	r22, 0x03	; 3
    1822:	40 e1       	ldi	r20, 0x10	; 16
		else
		{
			continue;
		}
		
		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    1824:	88 23       	and	r24, r24
    1826:	11 f4       	brne	.+4      	; 0x182c <SI_Host_ConfigurePipes+0x14c>
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	01 c0       	rjmp	.+2      	; 0x182e <SI_Host_ConfigurePipes+0x14e>
    182c:	34 e0       	ldi	r19, 0x04	; 4
    182e:	89 2f       	mov	r24, r25
    1830:	e3 2e       	mov	r14, r19
    1832:	9d 83       	std	Y+5, r25	; 0x05
    1834:	71 d8       	rcall	.-3870   	; 0x918 <Pipe_ConfigurePipe>
    1836:	9d 81       	ldd	r25, Y+5	; 0x05
    1838:	88 23       	and	r24, r24
    183a:	11 f4       	brne	.+4      	; 0x1840 <SI_Host_ConfigurePipes+0x160>
    183c:	83 e0       	ldi	r24, 0x03	; 3
    183e:	12 c0       	rjmp	.+36     	; 0x1864 <SI_Host_ConfigurePipes+0x184>
		                         DoubleBanked ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE)))
		{
			return SI_ENUMERROR_PipeConfigurationFailed;
		}
		
		if (InterruptPeriod)
    1840:	ff 20       	and	r15, r15
    1842:	11 f0       	breq	.+4      	; 0x1848 <SI_Host_ConfigurePipes+0x168>
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
    1844:	f0 92 ad 00 	sts	0x00AD, r15
		{
			DataOUTEndpoint = EndpointData;
		}
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    1848:	9f 5f       	subi	r25, 0xFF	; 255
    184a:	97 30       	cpi	r25, 0x07	; 7
    184c:	09 f0       	breq	.+2      	; 0x1850 <SI_Host_ConfigurePipes+0x170>
    184e:	b4 cf       	rjmp	.-152    	; 0x17b8 <SI_Host_ConfigurePipes+0xd8>
		
		if (InterruptPeriod)
		  Pipe_SetInterruptPeriod(InterruptPeriod);
	}

	SIInterfaceInfo->State.InterfaceNumber = StillImageInterface->InterfaceNumber;
    1850:	f2 01       	movw	r30, r4
    1852:	82 81       	ldd	r24, Z+2	; 0x02
    1854:	d6 01       	movw	r26, r12
    1856:	17 96       	adiw	r26, 0x07	; 7
    1858:	8c 93       	st	X, r24
    185a:	17 97       	sbiw	r26, 0x07	; 7
	SIInterfaceInfo->State.IsActive = true;
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	16 96       	adiw	r26, 0x06	; 6
    1860:	8c 93       	st	X, r24
    1862:	80 e0       	ldi	r24, 0x00	; 0

	return SI_ENUMERROR_NoError;
}
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	cf 91       	pop	r28
    1870:	df 91       	pop	r29
    1872:	1f 91       	pop	r17
    1874:	0f 91       	pop	r16
    1876:	ff 90       	pop	r15
    1878:	ef 90       	pop	r14
    187a:	df 90       	pop	r13
    187c:	cf 90       	pop	r12
    187e:	bf 90       	pop	r11
    1880:	af 90       	pop	r10
    1882:	9f 90       	pop	r9
    1884:	8f 90       	pop	r8
    1886:	7f 90       	pop	r7
    1888:	6f 90       	pop	r6
    188a:	5f 90       	pop	r5
    188c:	4f 90       	pop	r4
    188e:	08 95       	ret

00001890 <DCOMP_SI_Host_NextSIInterfaceEndpoint>:

	return DESCRIPTOR_SEARCH_NotFound;
}

uint8_t DCOMP_SI_Host_NextSIInterfaceEndpoint(void* const CurrentDescriptor)
{
    1890:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1892:	81 81       	ldd	r24, Z+1	; 0x01
    1894:	85 30       	cpi	r24, 0x05	; 5
    1896:	51 f4       	brne	.+20     	; 0x18ac <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x1c>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
    1898:	83 81       	ldd	r24, Z+3	; 0x03
    189a:	83 70       	andi	r24, 0x03	; 3
    189c:	82 50       	subi	r24, 0x02	; 2
    189e:	82 30       	cpi	r24, 0x02	; 2
    18a0:	48 f4       	brcc	.+18     	; 0x18b4 <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x24>
    18a2:	82 81       	ldd	r24, Z+2	; 0x02
    18a4:	ab d8       	rcall	.-3754   	; 0x9fc <Pipe_IsEndpointBound>
    18a6:	88 23       	and	r24, r24
    18a8:	29 f4       	brne	.+10     	; 0x18b4 <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x24>
    18aa:	08 95       	ret
		    (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
    18ac:	84 30       	cpi	r24, 0x04	; 4
    18ae:	11 f4       	brne	.+4      	; 0x18b4 <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x24>
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	08 95       	ret
    18b4:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    18b6:	08 95       	ret

000018b8 <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    18b8:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    18ba:	80 91 c8 00 	lds	r24, 0x00C8
    18be:	85 ff       	sbrs	r24, 5
    18c0:	fc cf       	rjmp	.-8      	; 0x18ba <Serial_putchar+0x2>
				UDR1 = DataByte;
    18c2:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	08 95       	ret

000018cc <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    18cc:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    18d0:	87 fd       	sbrc	r24, 7
    18d2:	03 c0       	rjmp	.+6      	; 0x18da <Serial_getchar+0xe>
    18d4:	2e ef       	ldi	r18, 0xFE	; 254
    18d6:	3f ef       	ldi	r19, 0xFF	; 255
    18d8:	0b c0       	rjmp	.+22     	; 0x18f0 <Serial_getchar+0x24>
    18da:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    18de:	87 fd       	sbrc	r24, 7
    18e0:	03 c0       	rjmp	.+6      	; 0x18e8 <Serial_getchar+0x1c>
    18e2:	2f ef       	ldi	r18, 0xFF	; 255
    18e4:	3f ef       	ldi	r19, 0xFF	; 255
    18e6:	04 c0       	rjmp	.+8      	; 0x18f0 <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    18e8:	80 91 ce 00 	lds	r24, 0x00CE
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    18f0:	c9 01       	movw	r24, r18
    18f2:	08 95       	ret

000018f4 <memcpy>:
    18f4:	fb 01       	movw	r30, r22
    18f6:	dc 01       	movw	r26, r24
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <memcpy+0xa>
    18fa:	01 90       	ld	r0, Z+
    18fc:	0d 92       	st	X+, r0
    18fe:	41 50       	subi	r20, 0x01	; 1
    1900:	50 40       	sbci	r21, 0x00	; 0
    1902:	d8 f7       	brcc	.-10     	; 0x18fa <memcpy+0x6>
    1904:	08 95       	ret

00001906 <printf_P>:
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
    190e:	fe 01       	movw	r30, r28
    1910:	35 96       	adiw	r30, 0x05	; 5
    1912:	61 91       	ld	r22, Z+
    1914:	71 91       	ld	r23, Z+
    1916:	a0 91 42 01 	lds	r26, 0x0142
    191a:	b0 91 43 01 	lds	r27, 0x0143
    191e:	13 96       	adiw	r26, 0x03	; 3
    1920:	8c 91       	ld	r24, X
    1922:	13 97       	sbiw	r26, 0x03	; 3
    1924:	88 60       	ori	r24, 0x08	; 8
    1926:	13 96       	adiw	r26, 0x03	; 3
    1928:	8c 93       	st	X, r24
    192a:	80 91 42 01 	lds	r24, 0x0142
    192e:	90 91 43 01 	lds	r25, 0x0143
    1932:	af 01       	movw	r20, r30
    1934:	3f d0       	rcall	.+126    	; 0x19b4 <vfprintf>
    1936:	e0 91 42 01 	lds	r30, 0x0142
    193a:	f0 91 43 01 	lds	r31, 0x0143
    193e:	23 81       	ldd	r18, Z+3	; 0x03
    1940:	27 7f       	andi	r18, 0xF7	; 247
    1942:	23 83       	std	Z+3, r18	; 0x03
    1944:	cf 91       	pop	r28
    1946:	df 91       	pop	r29
    1948:	08 95       	ret

0000194a <puts_P>:
    194a:	0f 93       	push	r16
    194c:	1f 93       	push	r17
    194e:	cf 93       	push	r28
    1950:	df 93       	push	r29
    1952:	ec 01       	movw	r28, r24
    1954:	e0 91 42 01 	lds	r30, 0x0142
    1958:	f0 91 43 01 	lds	r31, 0x0143
    195c:	83 81       	ldd	r24, Z+3	; 0x03
    195e:	81 ff       	sbrs	r24, 1
    1960:	21 c0       	rjmp	.+66     	; 0x19a4 <puts_P+0x5a>
    1962:	00 e0       	ldi	r16, 0x00	; 0
    1964:	10 e0       	ldi	r17, 0x00	; 0
    1966:	0e c0       	rjmp	.+28     	; 0x1984 <puts_P+0x3a>
    1968:	e0 91 42 01 	lds	r30, 0x0142
    196c:	f0 91 43 01 	lds	r31, 0x0143
    1970:	20 85       	ldd	r18, Z+8	; 0x08
    1972:	31 85       	ldd	r19, Z+9	; 0x09
    1974:	bf 01       	movw	r22, r30
    1976:	f9 01       	movw	r30, r18
    1978:	09 95       	icall
    197a:	89 2b       	or	r24, r25
    197c:	11 f0       	breq	.+4      	; 0x1982 <puts_P+0x38>
    197e:	0f ef       	ldi	r16, 0xFF	; 255
    1980:	1f ef       	ldi	r17, 0xFF	; 255
    1982:	21 96       	adiw	r28, 0x01	; 1
    1984:	fe 01       	movw	r30, r28
    1986:	84 91       	lpm	r24, Z+
    1988:	88 23       	and	r24, r24
    198a:	71 f7       	brne	.-36     	; 0x1968 <puts_P+0x1e>
    198c:	e0 91 42 01 	lds	r30, 0x0142
    1990:	f0 91 43 01 	lds	r31, 0x0143
    1994:	20 85       	ldd	r18, Z+8	; 0x08
    1996:	31 85       	ldd	r19, Z+9	; 0x09
    1998:	8a e0       	ldi	r24, 0x0A	; 10
    199a:	bf 01       	movw	r22, r30
    199c:	f9 01       	movw	r30, r18
    199e:	09 95       	icall
    19a0:	89 2b       	or	r24, r25
    19a2:	11 f0       	breq	.+4      	; 0x19a8 <puts_P+0x5e>
    19a4:	0f ef       	ldi	r16, 0xFF	; 255
    19a6:	1f ef       	ldi	r17, 0xFF	; 255
    19a8:	c8 01       	movw	r24, r16
    19aa:	df 91       	pop	r29
    19ac:	cf 91       	pop	r28
    19ae:	1f 91       	pop	r17
    19b0:	0f 91       	pop	r16
    19b2:	08 95       	ret

000019b4 <vfprintf>:
    19b4:	2f 92       	push	r2
    19b6:	3f 92       	push	r3
    19b8:	4f 92       	push	r4
    19ba:	5f 92       	push	r5
    19bc:	6f 92       	push	r6
    19be:	7f 92       	push	r7
    19c0:	8f 92       	push	r8
    19c2:	9f 92       	push	r9
    19c4:	af 92       	push	r10
    19c6:	bf 92       	push	r11
    19c8:	cf 92       	push	r12
    19ca:	df 92       	push	r13
    19cc:	ef 92       	push	r14
    19ce:	ff 92       	push	r15
    19d0:	0f 93       	push	r16
    19d2:	1f 93       	push	r17
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
    19dc:	2b 97       	sbiw	r28, 0x0b	; 11
    19de:	0f b6       	in	r0, 0x3f	; 63
    19e0:	f8 94       	cli
    19e2:	de bf       	out	0x3e, r29	; 62
    19e4:	0f be       	out	0x3f, r0	; 63
    19e6:	cd bf       	out	0x3d, r28	; 61
    19e8:	3c 01       	movw	r6, r24
    19ea:	2b 01       	movw	r4, r22
    19ec:	5a 01       	movw	r10, r20
    19ee:	fc 01       	movw	r30, r24
    19f0:	17 82       	std	Z+7, r1	; 0x07
    19f2:	16 82       	std	Z+6, r1	; 0x06
    19f4:	83 81       	ldd	r24, Z+3	; 0x03
    19f6:	81 fd       	sbrc	r24, 1
    19f8:	03 c0       	rjmp	.+6      	; 0x1a00 <vfprintf+0x4c>
    19fa:	6f ef       	ldi	r22, 0xFF	; 255
    19fc:	7f ef       	ldi	r23, 0xFF	; 255
    19fe:	b9 c1       	rjmp	.+882    	; 0x1d72 <vfprintf+0x3be>
    1a00:	9a e0       	ldi	r25, 0x0A	; 10
    1a02:	89 2e       	mov	r8, r25
    1a04:	1e 01       	movw	r2, r28
    1a06:	08 94       	sec
    1a08:	21 1c       	adc	r2, r1
    1a0a:	31 1c       	adc	r3, r1
    1a0c:	f3 01       	movw	r30, r6
    1a0e:	23 81       	ldd	r18, Z+3	; 0x03
    1a10:	f2 01       	movw	r30, r4
    1a12:	23 fd       	sbrc	r18, 3
    1a14:	85 91       	lpm	r24, Z+
    1a16:	23 ff       	sbrs	r18, 3
    1a18:	81 91       	ld	r24, Z+
    1a1a:	2f 01       	movw	r4, r30
    1a1c:	88 23       	and	r24, r24
    1a1e:	09 f4       	brne	.+2      	; 0x1a22 <vfprintf+0x6e>
    1a20:	a5 c1       	rjmp	.+842    	; 0x1d6c <vfprintf+0x3b8>
    1a22:	85 32       	cpi	r24, 0x25	; 37
    1a24:	39 f4       	brne	.+14     	; 0x1a34 <vfprintf+0x80>
    1a26:	23 fd       	sbrc	r18, 3
    1a28:	85 91       	lpm	r24, Z+
    1a2a:	23 ff       	sbrs	r18, 3
    1a2c:	81 91       	ld	r24, Z+
    1a2e:	2f 01       	movw	r4, r30
    1a30:	85 32       	cpi	r24, 0x25	; 37
    1a32:	21 f4       	brne	.+8      	; 0x1a3c <vfprintf+0x88>
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	b3 01       	movw	r22, r6
    1a38:	cc d1       	rcall	.+920    	; 0x1dd2 <fputc>
    1a3a:	e8 cf       	rjmp	.-48     	; 0x1a0c <vfprintf+0x58>
    1a3c:	98 2f       	mov	r25, r24
    1a3e:	ff 24       	eor	r15, r15
    1a40:	ee 24       	eor	r14, r14
    1a42:	99 24       	eor	r9, r9
    1a44:	ff e1       	ldi	r31, 0x1F	; 31
    1a46:	ff 15       	cp	r31, r15
    1a48:	d0 f0       	brcs	.+52     	; 0x1a7e <vfprintf+0xca>
    1a4a:	9b 32       	cpi	r25, 0x2B	; 43
    1a4c:	69 f0       	breq	.+26     	; 0x1a68 <vfprintf+0xb4>
    1a4e:	9c 32       	cpi	r25, 0x2C	; 44
    1a50:	28 f4       	brcc	.+10     	; 0x1a5c <vfprintf+0xa8>
    1a52:	90 32       	cpi	r25, 0x20	; 32
    1a54:	59 f0       	breq	.+22     	; 0x1a6c <vfprintf+0xb8>
    1a56:	93 32       	cpi	r25, 0x23	; 35
    1a58:	91 f4       	brne	.+36     	; 0x1a7e <vfprintf+0xca>
    1a5a:	0e c0       	rjmp	.+28     	; 0x1a78 <vfprintf+0xc4>
    1a5c:	9d 32       	cpi	r25, 0x2D	; 45
    1a5e:	49 f0       	breq	.+18     	; 0x1a72 <vfprintf+0xbe>
    1a60:	90 33       	cpi	r25, 0x30	; 48
    1a62:	69 f4       	brne	.+26     	; 0x1a7e <vfprintf+0xca>
    1a64:	41 e0       	ldi	r20, 0x01	; 1
    1a66:	24 c0       	rjmp	.+72     	; 0x1ab0 <vfprintf+0xfc>
    1a68:	52 e0       	ldi	r21, 0x02	; 2
    1a6a:	f5 2a       	or	r15, r21
    1a6c:	84 e0       	ldi	r24, 0x04	; 4
    1a6e:	f8 2a       	or	r15, r24
    1a70:	28 c0       	rjmp	.+80     	; 0x1ac2 <vfprintf+0x10e>
    1a72:	98 e0       	ldi	r25, 0x08	; 8
    1a74:	f9 2a       	or	r15, r25
    1a76:	25 c0       	rjmp	.+74     	; 0x1ac2 <vfprintf+0x10e>
    1a78:	e0 e1       	ldi	r30, 0x10	; 16
    1a7a:	fe 2a       	or	r15, r30
    1a7c:	22 c0       	rjmp	.+68     	; 0x1ac2 <vfprintf+0x10e>
    1a7e:	f7 fc       	sbrc	r15, 7
    1a80:	29 c0       	rjmp	.+82     	; 0x1ad4 <vfprintf+0x120>
    1a82:	89 2f       	mov	r24, r25
    1a84:	80 53       	subi	r24, 0x30	; 48
    1a86:	8a 30       	cpi	r24, 0x0A	; 10
    1a88:	70 f4       	brcc	.+28     	; 0x1aa6 <vfprintf+0xf2>
    1a8a:	f6 fe       	sbrs	r15, 6
    1a8c:	05 c0       	rjmp	.+10     	; 0x1a98 <vfprintf+0xe4>
    1a8e:	98 9c       	mul	r9, r8
    1a90:	90 2c       	mov	r9, r0
    1a92:	11 24       	eor	r1, r1
    1a94:	98 0e       	add	r9, r24
    1a96:	15 c0       	rjmp	.+42     	; 0x1ac2 <vfprintf+0x10e>
    1a98:	e8 9c       	mul	r14, r8
    1a9a:	e0 2c       	mov	r14, r0
    1a9c:	11 24       	eor	r1, r1
    1a9e:	e8 0e       	add	r14, r24
    1aa0:	f0 e2       	ldi	r31, 0x20	; 32
    1aa2:	ff 2a       	or	r15, r31
    1aa4:	0e c0       	rjmp	.+28     	; 0x1ac2 <vfprintf+0x10e>
    1aa6:	9e 32       	cpi	r25, 0x2E	; 46
    1aa8:	29 f4       	brne	.+10     	; 0x1ab4 <vfprintf+0x100>
    1aaa:	f6 fc       	sbrc	r15, 6
    1aac:	5f c1       	rjmp	.+702    	; 0x1d6c <vfprintf+0x3b8>
    1aae:	40 e4       	ldi	r20, 0x40	; 64
    1ab0:	f4 2a       	or	r15, r20
    1ab2:	07 c0       	rjmp	.+14     	; 0x1ac2 <vfprintf+0x10e>
    1ab4:	9c 36       	cpi	r25, 0x6C	; 108
    1ab6:	19 f4       	brne	.+6      	; 0x1abe <vfprintf+0x10a>
    1ab8:	50 e8       	ldi	r21, 0x80	; 128
    1aba:	f5 2a       	or	r15, r21
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <vfprintf+0x10e>
    1abe:	98 36       	cpi	r25, 0x68	; 104
    1ac0:	49 f4       	brne	.+18     	; 0x1ad4 <vfprintf+0x120>
    1ac2:	f2 01       	movw	r30, r4
    1ac4:	23 fd       	sbrc	r18, 3
    1ac6:	95 91       	lpm	r25, Z+
    1ac8:	23 ff       	sbrs	r18, 3
    1aca:	91 91       	ld	r25, Z+
    1acc:	2f 01       	movw	r4, r30
    1ace:	99 23       	and	r25, r25
    1ad0:	09 f0       	breq	.+2      	; 0x1ad4 <vfprintf+0x120>
    1ad2:	b8 cf       	rjmp	.-144    	; 0x1a44 <vfprintf+0x90>
    1ad4:	89 2f       	mov	r24, r25
    1ad6:	85 54       	subi	r24, 0x45	; 69
    1ad8:	83 30       	cpi	r24, 0x03	; 3
    1ada:	18 f0       	brcs	.+6      	; 0x1ae2 <vfprintf+0x12e>
    1adc:	80 52       	subi	r24, 0x20	; 32
    1ade:	83 30       	cpi	r24, 0x03	; 3
    1ae0:	38 f4       	brcc	.+14     	; 0x1af0 <vfprintf+0x13c>
    1ae2:	44 e0       	ldi	r20, 0x04	; 4
    1ae4:	50 e0       	ldi	r21, 0x00	; 0
    1ae6:	a4 0e       	add	r10, r20
    1ae8:	b5 1e       	adc	r11, r21
    1aea:	5f e3       	ldi	r21, 0x3F	; 63
    1aec:	59 83       	std	Y+1, r21	; 0x01
    1aee:	0f c0       	rjmp	.+30     	; 0x1b0e <vfprintf+0x15a>
    1af0:	93 36       	cpi	r25, 0x63	; 99
    1af2:	31 f0       	breq	.+12     	; 0x1b00 <vfprintf+0x14c>
    1af4:	93 37       	cpi	r25, 0x73	; 115
    1af6:	79 f0       	breq	.+30     	; 0x1b16 <vfprintf+0x162>
    1af8:	93 35       	cpi	r25, 0x53	; 83
    1afa:	09 f0       	breq	.+2      	; 0x1afe <vfprintf+0x14a>
    1afc:	52 c0       	rjmp	.+164    	; 0x1ba2 <vfprintf+0x1ee>
    1afe:	1f c0       	rjmp	.+62     	; 0x1b3e <vfprintf+0x18a>
    1b00:	f5 01       	movw	r30, r10
    1b02:	80 81       	ld	r24, Z
    1b04:	89 83       	std	Y+1, r24	; 0x01
    1b06:	42 e0       	ldi	r20, 0x02	; 2
    1b08:	50 e0       	ldi	r21, 0x00	; 0
    1b0a:	a4 0e       	add	r10, r20
    1b0c:	b5 1e       	adc	r11, r21
    1b0e:	61 01       	movw	r12, r2
    1b10:	01 e0       	ldi	r16, 0x01	; 1
    1b12:	10 e0       	ldi	r17, 0x00	; 0
    1b14:	11 c0       	rjmp	.+34     	; 0x1b38 <vfprintf+0x184>
    1b16:	f5 01       	movw	r30, r10
    1b18:	c0 80       	ld	r12, Z
    1b1a:	d1 80       	ldd	r13, Z+1	; 0x01
    1b1c:	f6 fc       	sbrc	r15, 6
    1b1e:	03 c0       	rjmp	.+6      	; 0x1b26 <vfprintf+0x172>
    1b20:	6f ef       	ldi	r22, 0xFF	; 255
    1b22:	7f ef       	ldi	r23, 0xFF	; 255
    1b24:	02 c0       	rjmp	.+4      	; 0x1b2a <vfprintf+0x176>
    1b26:	69 2d       	mov	r22, r9
    1b28:	70 e0       	ldi	r23, 0x00	; 0
    1b2a:	42 e0       	ldi	r20, 0x02	; 2
    1b2c:	50 e0       	ldi	r21, 0x00	; 0
    1b2e:	a4 0e       	add	r10, r20
    1b30:	b5 1e       	adc	r11, r21
    1b32:	c6 01       	movw	r24, r12
    1b34:	43 d1       	rcall	.+646    	; 0x1dbc <strnlen>
    1b36:	8c 01       	movw	r16, r24
    1b38:	5f e7       	ldi	r21, 0x7F	; 127
    1b3a:	f5 22       	and	r15, r21
    1b3c:	13 c0       	rjmp	.+38     	; 0x1b64 <vfprintf+0x1b0>
    1b3e:	f5 01       	movw	r30, r10
    1b40:	c0 80       	ld	r12, Z
    1b42:	d1 80       	ldd	r13, Z+1	; 0x01
    1b44:	f6 fc       	sbrc	r15, 6
    1b46:	03 c0       	rjmp	.+6      	; 0x1b4e <vfprintf+0x19a>
    1b48:	6f ef       	ldi	r22, 0xFF	; 255
    1b4a:	7f ef       	ldi	r23, 0xFF	; 255
    1b4c:	02 c0       	rjmp	.+4      	; 0x1b52 <vfprintf+0x19e>
    1b4e:	69 2d       	mov	r22, r9
    1b50:	70 e0       	ldi	r23, 0x00	; 0
    1b52:	42 e0       	ldi	r20, 0x02	; 2
    1b54:	50 e0       	ldi	r21, 0x00	; 0
    1b56:	a4 0e       	add	r10, r20
    1b58:	b5 1e       	adc	r11, r21
    1b5a:	c6 01       	movw	r24, r12
    1b5c:	24 d1       	rcall	.+584    	; 0x1da6 <strnlen_P>
    1b5e:	8c 01       	movw	r16, r24
    1b60:	50 e8       	ldi	r21, 0x80	; 128
    1b62:	f5 2a       	or	r15, r21
    1b64:	f3 fe       	sbrs	r15, 3
    1b66:	06 c0       	rjmp	.+12     	; 0x1b74 <vfprintf+0x1c0>
    1b68:	18 c0       	rjmp	.+48     	; 0x1b9a <vfprintf+0x1e6>
    1b6a:	80 e2       	ldi	r24, 0x20	; 32
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	b3 01       	movw	r22, r6
    1b70:	30 d1       	rcall	.+608    	; 0x1dd2 <fputc>
    1b72:	ea 94       	dec	r14
    1b74:	8e 2d       	mov	r24, r14
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	08 17       	cp	r16, r24
    1b7a:	19 07       	cpc	r17, r25
    1b7c:	b0 f3       	brcs	.-20     	; 0x1b6a <vfprintf+0x1b6>
    1b7e:	0d c0       	rjmp	.+26     	; 0x1b9a <vfprintf+0x1e6>
    1b80:	f6 01       	movw	r30, r12
    1b82:	f7 fc       	sbrc	r15, 7
    1b84:	85 91       	lpm	r24, Z+
    1b86:	f7 fe       	sbrs	r15, 7
    1b88:	81 91       	ld	r24, Z+
    1b8a:	6f 01       	movw	r12, r30
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	b3 01       	movw	r22, r6
    1b90:	20 d1       	rcall	.+576    	; 0x1dd2 <fputc>
    1b92:	e1 10       	cpse	r14, r1
    1b94:	ea 94       	dec	r14
    1b96:	01 50       	subi	r16, 0x01	; 1
    1b98:	10 40       	sbci	r17, 0x00	; 0
    1b9a:	01 15       	cp	r16, r1
    1b9c:	11 05       	cpc	r17, r1
    1b9e:	81 f7       	brne	.-32     	; 0x1b80 <vfprintf+0x1cc>
    1ba0:	e2 c0       	rjmp	.+452    	; 0x1d66 <vfprintf+0x3b2>
    1ba2:	94 36       	cpi	r25, 0x64	; 100
    1ba4:	11 f0       	breq	.+4      	; 0x1baa <vfprintf+0x1f6>
    1ba6:	99 36       	cpi	r25, 0x69	; 105
    1ba8:	61 f5       	brne	.+88     	; 0x1c02 <vfprintf+0x24e>
    1baa:	f7 fe       	sbrs	r15, 7
    1bac:	08 c0       	rjmp	.+16     	; 0x1bbe <vfprintf+0x20a>
    1bae:	f5 01       	movw	r30, r10
    1bb0:	20 81       	ld	r18, Z
    1bb2:	31 81       	ldd	r19, Z+1	; 0x01
    1bb4:	42 81       	ldd	r20, Z+2	; 0x02
    1bb6:	53 81       	ldd	r21, Z+3	; 0x03
    1bb8:	84 e0       	ldi	r24, 0x04	; 4
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	0a c0       	rjmp	.+20     	; 0x1bd2 <vfprintf+0x21e>
    1bbe:	f5 01       	movw	r30, r10
    1bc0:	80 81       	ld	r24, Z
    1bc2:	91 81       	ldd	r25, Z+1	; 0x01
    1bc4:	9c 01       	movw	r18, r24
    1bc6:	44 27       	eor	r20, r20
    1bc8:	37 fd       	sbrc	r19, 7
    1bca:	40 95       	com	r20
    1bcc:	54 2f       	mov	r21, r20
    1bce:	82 e0       	ldi	r24, 0x02	; 2
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	a8 0e       	add	r10, r24
    1bd4:	b9 1e       	adc	r11, r25
    1bd6:	9f e6       	ldi	r25, 0x6F	; 111
    1bd8:	f9 22       	and	r15, r25
    1bda:	57 ff       	sbrs	r21, 7
    1bdc:	09 c0       	rjmp	.+18     	; 0x1bf0 <vfprintf+0x23c>
    1bde:	50 95       	com	r21
    1be0:	40 95       	com	r20
    1be2:	30 95       	com	r19
    1be4:	21 95       	neg	r18
    1be6:	3f 4f       	sbci	r19, 0xFF	; 255
    1be8:	4f 4f       	sbci	r20, 0xFF	; 255
    1bea:	5f 4f       	sbci	r21, 0xFF	; 255
    1bec:	e0 e8       	ldi	r30, 0x80	; 128
    1bee:	fe 2a       	or	r15, r30
    1bf0:	ca 01       	movw	r24, r20
    1bf2:	b9 01       	movw	r22, r18
    1bf4:	a1 01       	movw	r20, r2
    1bf6:	2a e0       	ldi	r18, 0x0A	; 10
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	17 d1       	rcall	.+558    	; 0x1e2a <__ultoa_invert>
    1bfc:	d8 2e       	mov	r13, r24
    1bfe:	d2 18       	sub	r13, r2
    1c00:	3f c0       	rjmp	.+126    	; 0x1c80 <vfprintf+0x2cc>
    1c02:	95 37       	cpi	r25, 0x75	; 117
    1c04:	29 f4       	brne	.+10     	; 0x1c10 <vfprintf+0x25c>
    1c06:	1f 2d       	mov	r17, r15
    1c08:	1f 7e       	andi	r17, 0xEF	; 239
    1c0a:	2a e0       	ldi	r18, 0x0A	; 10
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	1d c0       	rjmp	.+58     	; 0x1c4a <vfprintf+0x296>
    1c10:	1f 2d       	mov	r17, r15
    1c12:	19 7f       	andi	r17, 0xF9	; 249
    1c14:	9f 36       	cpi	r25, 0x6F	; 111
    1c16:	61 f0       	breq	.+24     	; 0x1c30 <vfprintf+0x27c>
    1c18:	90 37       	cpi	r25, 0x70	; 112
    1c1a:	20 f4       	brcc	.+8      	; 0x1c24 <vfprintf+0x270>
    1c1c:	98 35       	cpi	r25, 0x58	; 88
    1c1e:	09 f0       	breq	.+2      	; 0x1c22 <vfprintf+0x26e>
    1c20:	a5 c0       	rjmp	.+330    	; 0x1d6c <vfprintf+0x3b8>
    1c22:	0f c0       	rjmp	.+30     	; 0x1c42 <vfprintf+0x28e>
    1c24:	90 37       	cpi	r25, 0x70	; 112
    1c26:	39 f0       	breq	.+14     	; 0x1c36 <vfprintf+0x282>
    1c28:	98 37       	cpi	r25, 0x78	; 120
    1c2a:	09 f0       	breq	.+2      	; 0x1c2e <vfprintf+0x27a>
    1c2c:	9f c0       	rjmp	.+318    	; 0x1d6c <vfprintf+0x3b8>
    1c2e:	04 c0       	rjmp	.+8      	; 0x1c38 <vfprintf+0x284>
    1c30:	28 e0       	ldi	r18, 0x08	; 8
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	0a c0       	rjmp	.+20     	; 0x1c4a <vfprintf+0x296>
    1c36:	10 61       	ori	r17, 0x10	; 16
    1c38:	14 fd       	sbrc	r17, 4
    1c3a:	14 60       	ori	r17, 0x04	; 4
    1c3c:	20 e1       	ldi	r18, 0x10	; 16
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	04 c0       	rjmp	.+8      	; 0x1c4a <vfprintf+0x296>
    1c42:	14 fd       	sbrc	r17, 4
    1c44:	16 60       	ori	r17, 0x06	; 6
    1c46:	20 e1       	ldi	r18, 0x10	; 16
    1c48:	32 e0       	ldi	r19, 0x02	; 2
    1c4a:	17 ff       	sbrs	r17, 7
    1c4c:	08 c0       	rjmp	.+16     	; 0x1c5e <vfprintf+0x2aa>
    1c4e:	f5 01       	movw	r30, r10
    1c50:	60 81       	ld	r22, Z
    1c52:	71 81       	ldd	r23, Z+1	; 0x01
    1c54:	82 81       	ldd	r24, Z+2	; 0x02
    1c56:	93 81       	ldd	r25, Z+3	; 0x03
    1c58:	44 e0       	ldi	r20, 0x04	; 4
    1c5a:	50 e0       	ldi	r21, 0x00	; 0
    1c5c:	08 c0       	rjmp	.+16     	; 0x1c6e <vfprintf+0x2ba>
    1c5e:	f5 01       	movw	r30, r10
    1c60:	80 81       	ld	r24, Z
    1c62:	91 81       	ldd	r25, Z+1	; 0x01
    1c64:	bc 01       	movw	r22, r24
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	42 e0       	ldi	r20, 0x02	; 2
    1c6c:	50 e0       	ldi	r21, 0x00	; 0
    1c6e:	a4 0e       	add	r10, r20
    1c70:	b5 1e       	adc	r11, r21
    1c72:	a1 01       	movw	r20, r2
    1c74:	da d0       	rcall	.+436    	; 0x1e2a <__ultoa_invert>
    1c76:	d8 2e       	mov	r13, r24
    1c78:	d2 18       	sub	r13, r2
    1c7a:	8f e7       	ldi	r24, 0x7F	; 127
    1c7c:	f8 2e       	mov	r15, r24
    1c7e:	f1 22       	and	r15, r17
    1c80:	f6 fe       	sbrs	r15, 6
    1c82:	0b c0       	rjmp	.+22     	; 0x1c9a <vfprintf+0x2e6>
    1c84:	5e ef       	ldi	r21, 0xFE	; 254
    1c86:	f5 22       	and	r15, r21
    1c88:	d9 14       	cp	r13, r9
    1c8a:	38 f4       	brcc	.+14     	; 0x1c9a <vfprintf+0x2e6>
    1c8c:	f4 fe       	sbrs	r15, 4
    1c8e:	07 c0       	rjmp	.+14     	; 0x1c9e <vfprintf+0x2ea>
    1c90:	f2 fc       	sbrc	r15, 2
    1c92:	05 c0       	rjmp	.+10     	; 0x1c9e <vfprintf+0x2ea>
    1c94:	8f ee       	ldi	r24, 0xEF	; 239
    1c96:	f8 22       	and	r15, r24
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <vfprintf+0x2ea>
    1c9a:	1d 2d       	mov	r17, r13
    1c9c:	01 c0       	rjmp	.+2      	; 0x1ca0 <vfprintf+0x2ec>
    1c9e:	19 2d       	mov	r17, r9
    1ca0:	f4 fe       	sbrs	r15, 4
    1ca2:	0d c0       	rjmp	.+26     	; 0x1cbe <vfprintf+0x30a>
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	ed 0d       	add	r30, r13
    1ca8:	f1 1d       	adc	r31, r1
    1caa:	80 81       	ld	r24, Z
    1cac:	80 33       	cpi	r24, 0x30	; 48
    1cae:	19 f4       	brne	.+6      	; 0x1cb6 <vfprintf+0x302>
    1cb0:	99 ee       	ldi	r25, 0xE9	; 233
    1cb2:	f9 22       	and	r15, r25
    1cb4:	08 c0       	rjmp	.+16     	; 0x1cc6 <vfprintf+0x312>
    1cb6:	1f 5f       	subi	r17, 0xFF	; 255
    1cb8:	f2 fe       	sbrs	r15, 2
    1cba:	05 c0       	rjmp	.+10     	; 0x1cc6 <vfprintf+0x312>
    1cbc:	03 c0       	rjmp	.+6      	; 0x1cc4 <vfprintf+0x310>
    1cbe:	8f 2d       	mov	r24, r15
    1cc0:	86 78       	andi	r24, 0x86	; 134
    1cc2:	09 f0       	breq	.+2      	; 0x1cc6 <vfprintf+0x312>
    1cc4:	1f 5f       	subi	r17, 0xFF	; 255
    1cc6:	0f 2d       	mov	r16, r15
    1cc8:	f3 fc       	sbrc	r15, 3
    1cca:	13 c0       	rjmp	.+38     	; 0x1cf2 <vfprintf+0x33e>
    1ccc:	f0 fe       	sbrs	r15, 0
    1cce:	0e c0       	rjmp	.+28     	; 0x1cec <vfprintf+0x338>
    1cd0:	1e 15       	cp	r17, r14
    1cd2:	10 f0       	brcs	.+4      	; 0x1cd8 <vfprintf+0x324>
    1cd4:	9d 2c       	mov	r9, r13
    1cd6:	0a c0       	rjmp	.+20     	; 0x1cec <vfprintf+0x338>
    1cd8:	9d 2c       	mov	r9, r13
    1cda:	9e 0c       	add	r9, r14
    1cdc:	91 1a       	sub	r9, r17
    1cde:	1e 2d       	mov	r17, r14
    1ce0:	05 c0       	rjmp	.+10     	; 0x1cec <vfprintf+0x338>
    1ce2:	80 e2       	ldi	r24, 0x20	; 32
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	b3 01       	movw	r22, r6
    1ce8:	74 d0       	rcall	.+232    	; 0x1dd2 <fputc>
    1cea:	1f 5f       	subi	r17, 0xFF	; 255
    1cec:	1e 15       	cp	r17, r14
    1cee:	c8 f3       	brcs	.-14     	; 0x1ce2 <vfprintf+0x32e>
    1cf0:	04 c0       	rjmp	.+8      	; 0x1cfa <vfprintf+0x346>
    1cf2:	1e 15       	cp	r17, r14
    1cf4:	10 f4       	brcc	.+4      	; 0x1cfa <vfprintf+0x346>
    1cf6:	e1 1a       	sub	r14, r17
    1cf8:	01 c0       	rjmp	.+2      	; 0x1cfc <vfprintf+0x348>
    1cfa:	ee 24       	eor	r14, r14
    1cfc:	04 ff       	sbrs	r16, 4
    1cfe:	0e c0       	rjmp	.+28     	; 0x1d1c <vfprintf+0x368>
    1d00:	80 e3       	ldi	r24, 0x30	; 48
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	b3 01       	movw	r22, r6
    1d06:	65 d0       	rcall	.+202    	; 0x1dd2 <fputc>
    1d08:	02 ff       	sbrs	r16, 2
    1d0a:	1b c0       	rjmp	.+54     	; 0x1d42 <vfprintf+0x38e>
    1d0c:	01 fd       	sbrc	r16, 1
    1d0e:	03 c0       	rjmp	.+6      	; 0x1d16 <vfprintf+0x362>
    1d10:	88 e7       	ldi	r24, 0x78	; 120
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	0e c0       	rjmp	.+28     	; 0x1d32 <vfprintf+0x37e>
    1d16:	88 e5       	ldi	r24, 0x58	; 88
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	0b c0       	rjmp	.+22     	; 0x1d32 <vfprintf+0x37e>
    1d1c:	80 2f       	mov	r24, r16
    1d1e:	86 78       	andi	r24, 0x86	; 134
    1d20:	81 f0       	breq	.+32     	; 0x1d42 <vfprintf+0x38e>
    1d22:	01 ff       	sbrs	r16, 1
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <vfprintf+0x376>
    1d26:	8b e2       	ldi	r24, 0x2B	; 43
    1d28:	01 c0       	rjmp	.+2      	; 0x1d2c <vfprintf+0x378>
    1d2a:	80 e2       	ldi	r24, 0x20	; 32
    1d2c:	f7 fc       	sbrc	r15, 7
    1d2e:	8d e2       	ldi	r24, 0x2D	; 45
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	b3 01       	movw	r22, r6
    1d34:	4e d0       	rcall	.+156    	; 0x1dd2 <fputc>
    1d36:	05 c0       	rjmp	.+10     	; 0x1d42 <vfprintf+0x38e>
    1d38:	80 e3       	ldi	r24, 0x30	; 48
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	b3 01       	movw	r22, r6
    1d3e:	49 d0       	rcall	.+146    	; 0x1dd2 <fputc>
    1d40:	9a 94       	dec	r9
    1d42:	d9 14       	cp	r13, r9
    1d44:	c8 f3       	brcs	.-14     	; 0x1d38 <vfprintf+0x384>
    1d46:	da 94       	dec	r13
    1d48:	f1 01       	movw	r30, r2
    1d4a:	ed 0d       	add	r30, r13
    1d4c:	f1 1d       	adc	r31, r1
    1d4e:	80 81       	ld	r24, Z
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	b3 01       	movw	r22, r6
    1d54:	3e d0       	rcall	.+124    	; 0x1dd2 <fputc>
    1d56:	dd 20       	and	r13, r13
    1d58:	b1 f7       	brne	.-20     	; 0x1d46 <vfprintf+0x392>
    1d5a:	05 c0       	rjmp	.+10     	; 0x1d66 <vfprintf+0x3b2>
    1d5c:	80 e2       	ldi	r24, 0x20	; 32
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	b3 01       	movw	r22, r6
    1d62:	37 d0       	rcall	.+110    	; 0x1dd2 <fputc>
    1d64:	ea 94       	dec	r14
    1d66:	ee 20       	and	r14, r14
    1d68:	c9 f7       	brne	.-14     	; 0x1d5c <vfprintf+0x3a8>
    1d6a:	50 ce       	rjmp	.-864    	; 0x1a0c <vfprintf+0x58>
    1d6c:	f3 01       	movw	r30, r6
    1d6e:	66 81       	ldd	r22, Z+6	; 0x06
    1d70:	77 81       	ldd	r23, Z+7	; 0x07
    1d72:	cb 01       	movw	r24, r22
    1d74:	2b 96       	adiw	r28, 0x0b	; 11
    1d76:	0f b6       	in	r0, 0x3f	; 63
    1d78:	f8 94       	cli
    1d7a:	de bf       	out	0x3e, r29	; 62
    1d7c:	0f be       	out	0x3f, r0	; 63
    1d7e:	cd bf       	out	0x3d, r28	; 61
    1d80:	cf 91       	pop	r28
    1d82:	df 91       	pop	r29
    1d84:	1f 91       	pop	r17
    1d86:	0f 91       	pop	r16
    1d88:	ff 90       	pop	r15
    1d8a:	ef 90       	pop	r14
    1d8c:	df 90       	pop	r13
    1d8e:	cf 90       	pop	r12
    1d90:	bf 90       	pop	r11
    1d92:	af 90       	pop	r10
    1d94:	9f 90       	pop	r9
    1d96:	8f 90       	pop	r8
    1d98:	7f 90       	pop	r7
    1d9a:	6f 90       	pop	r6
    1d9c:	5f 90       	pop	r5
    1d9e:	4f 90       	pop	r4
    1da0:	3f 90       	pop	r3
    1da2:	2f 90       	pop	r2
    1da4:	08 95       	ret

00001da6 <strnlen_P>:
    1da6:	fc 01       	movw	r30, r24
    1da8:	05 90       	lpm	r0, Z+
    1daa:	61 50       	subi	r22, 0x01	; 1
    1dac:	70 40       	sbci	r23, 0x00	; 0
    1dae:	01 10       	cpse	r0, r1
    1db0:	d8 f7       	brcc	.-10     	; 0x1da8 <strnlen_P+0x2>
    1db2:	80 95       	com	r24
    1db4:	90 95       	com	r25
    1db6:	8e 0f       	add	r24, r30
    1db8:	9f 1f       	adc	r25, r31
    1dba:	08 95       	ret

00001dbc <strnlen>:
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	61 50       	subi	r22, 0x01	; 1
    1dc0:	70 40       	sbci	r23, 0x00	; 0
    1dc2:	01 90       	ld	r0, Z+
    1dc4:	01 10       	cpse	r0, r1
    1dc6:	d8 f7       	brcc	.-10     	; 0x1dbe <strnlen+0x2>
    1dc8:	80 95       	com	r24
    1dca:	90 95       	com	r25
    1dcc:	8e 0f       	add	r24, r30
    1dce:	9f 1f       	adc	r25, r31
    1dd0:	08 95       	ret

00001dd2 <fputc>:
    1dd2:	0f 93       	push	r16
    1dd4:	1f 93       	push	r17
    1dd6:	cf 93       	push	r28
    1dd8:	df 93       	push	r29
    1dda:	8c 01       	movw	r16, r24
    1ddc:	eb 01       	movw	r28, r22
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	81 ff       	sbrs	r24, 1
    1de2:	1b c0       	rjmp	.+54     	; 0x1e1a <fputc+0x48>
    1de4:	82 ff       	sbrs	r24, 2
    1de6:	0d c0       	rjmp	.+26     	; 0x1e02 <fputc+0x30>
    1de8:	2e 81       	ldd	r18, Y+6	; 0x06
    1dea:	3f 81       	ldd	r19, Y+7	; 0x07
    1dec:	8c 81       	ldd	r24, Y+4	; 0x04
    1dee:	9d 81       	ldd	r25, Y+5	; 0x05
    1df0:	28 17       	cp	r18, r24
    1df2:	39 07       	cpc	r19, r25
    1df4:	64 f4       	brge	.+24     	; 0x1e0e <fputc+0x3c>
    1df6:	e8 81       	ld	r30, Y
    1df8:	f9 81       	ldd	r31, Y+1	; 0x01
    1dfa:	01 93       	st	Z+, r16
    1dfc:	f9 83       	std	Y+1, r31	; 0x01
    1dfe:	e8 83       	st	Y, r30
    1e00:	06 c0       	rjmp	.+12     	; 0x1e0e <fputc+0x3c>
    1e02:	e8 85       	ldd	r30, Y+8	; 0x08
    1e04:	f9 85       	ldd	r31, Y+9	; 0x09
    1e06:	80 2f       	mov	r24, r16
    1e08:	09 95       	icall
    1e0a:	89 2b       	or	r24, r25
    1e0c:	31 f4       	brne	.+12     	; 0x1e1a <fputc+0x48>
    1e0e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e10:	9f 81       	ldd	r25, Y+7	; 0x07
    1e12:	01 96       	adiw	r24, 0x01	; 1
    1e14:	9f 83       	std	Y+7, r25	; 0x07
    1e16:	8e 83       	std	Y+6, r24	; 0x06
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <fputc+0x4c>
    1e1a:	0f ef       	ldi	r16, 0xFF	; 255
    1e1c:	1f ef       	ldi	r17, 0xFF	; 255
    1e1e:	c8 01       	movw	r24, r16
    1e20:	df 91       	pop	r29
    1e22:	cf 91       	pop	r28
    1e24:	1f 91       	pop	r17
    1e26:	0f 91       	pop	r16
    1e28:	08 95       	ret

00001e2a <__ultoa_invert>:
    1e2a:	fa 01       	movw	r30, r20
    1e2c:	aa 27       	eor	r26, r26
    1e2e:	28 30       	cpi	r18, 0x08	; 8
    1e30:	51 f1       	breq	.+84     	; 0x1e86 <__ultoa_invert+0x5c>
    1e32:	20 31       	cpi	r18, 0x10	; 16
    1e34:	81 f1       	breq	.+96     	; 0x1e96 <__ultoa_invert+0x6c>
    1e36:	e8 94       	clt
    1e38:	6f 93       	push	r22
    1e3a:	6e 7f       	andi	r22, 0xFE	; 254
    1e3c:	6e 5f       	subi	r22, 0xFE	; 254
    1e3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e40:	8f 4f       	sbci	r24, 0xFF	; 255
    1e42:	9f 4f       	sbci	r25, 0xFF	; 255
    1e44:	af 4f       	sbci	r26, 0xFF	; 255
    1e46:	b1 e0       	ldi	r27, 0x01	; 1
    1e48:	3e d0       	rcall	.+124    	; 0x1ec6 <__ultoa_invert+0x9c>
    1e4a:	b4 e0       	ldi	r27, 0x04	; 4
    1e4c:	3c d0       	rcall	.+120    	; 0x1ec6 <__ultoa_invert+0x9c>
    1e4e:	67 0f       	add	r22, r23
    1e50:	78 1f       	adc	r23, r24
    1e52:	89 1f       	adc	r24, r25
    1e54:	9a 1f       	adc	r25, r26
    1e56:	a1 1d       	adc	r26, r1
    1e58:	68 0f       	add	r22, r24
    1e5a:	79 1f       	adc	r23, r25
    1e5c:	8a 1f       	adc	r24, r26
    1e5e:	91 1d       	adc	r25, r1
    1e60:	a1 1d       	adc	r26, r1
    1e62:	6a 0f       	add	r22, r26
    1e64:	71 1d       	adc	r23, r1
    1e66:	81 1d       	adc	r24, r1
    1e68:	91 1d       	adc	r25, r1
    1e6a:	a1 1d       	adc	r26, r1
    1e6c:	20 d0       	rcall	.+64     	; 0x1eae <__ultoa_invert+0x84>
    1e6e:	09 f4       	brne	.+2      	; 0x1e72 <__ultoa_invert+0x48>
    1e70:	68 94       	set
    1e72:	3f 91       	pop	r19
    1e74:	2a e0       	ldi	r18, 0x0A	; 10
    1e76:	26 9f       	mul	r18, r22
    1e78:	11 24       	eor	r1, r1
    1e7a:	30 19       	sub	r19, r0
    1e7c:	30 5d       	subi	r19, 0xD0	; 208
    1e7e:	31 93       	st	Z+, r19
    1e80:	de f6       	brtc	.-74     	; 0x1e38 <__ultoa_invert+0xe>
    1e82:	cf 01       	movw	r24, r30
    1e84:	08 95       	ret
    1e86:	46 2f       	mov	r20, r22
    1e88:	47 70       	andi	r20, 0x07	; 7
    1e8a:	40 5d       	subi	r20, 0xD0	; 208
    1e8c:	41 93       	st	Z+, r20
    1e8e:	b3 e0       	ldi	r27, 0x03	; 3
    1e90:	0f d0       	rcall	.+30     	; 0x1eb0 <__ultoa_invert+0x86>
    1e92:	c9 f7       	brne	.-14     	; 0x1e86 <__ultoa_invert+0x5c>
    1e94:	f6 cf       	rjmp	.-20     	; 0x1e82 <__ultoa_invert+0x58>
    1e96:	46 2f       	mov	r20, r22
    1e98:	4f 70       	andi	r20, 0x0F	; 15
    1e9a:	40 5d       	subi	r20, 0xD0	; 208
    1e9c:	4a 33       	cpi	r20, 0x3A	; 58
    1e9e:	18 f0       	brcs	.+6      	; 0x1ea6 <__ultoa_invert+0x7c>
    1ea0:	49 5d       	subi	r20, 0xD9	; 217
    1ea2:	31 fd       	sbrc	r19, 1
    1ea4:	40 52       	subi	r20, 0x20	; 32
    1ea6:	41 93       	st	Z+, r20
    1ea8:	02 d0       	rcall	.+4      	; 0x1eae <__ultoa_invert+0x84>
    1eaa:	a9 f7       	brne	.-22     	; 0x1e96 <__ultoa_invert+0x6c>
    1eac:	ea cf       	rjmp	.-44     	; 0x1e82 <__ultoa_invert+0x58>
    1eae:	b4 e0       	ldi	r27, 0x04	; 4
    1eb0:	a6 95       	lsr	r26
    1eb2:	97 95       	ror	r25
    1eb4:	87 95       	ror	r24
    1eb6:	77 95       	ror	r23
    1eb8:	67 95       	ror	r22
    1eba:	ba 95       	dec	r27
    1ebc:	c9 f7       	brne	.-14     	; 0x1eb0 <__ultoa_invert+0x86>
    1ebe:	00 97       	sbiw	r24, 0x00	; 0
    1ec0:	61 05       	cpc	r22, r1
    1ec2:	71 05       	cpc	r23, r1
    1ec4:	08 95       	ret
    1ec6:	9b 01       	movw	r18, r22
    1ec8:	ac 01       	movw	r20, r24
    1eca:	0a 2e       	mov	r0, r26
    1ecc:	06 94       	lsr	r0
    1ece:	57 95       	ror	r21
    1ed0:	47 95       	ror	r20
    1ed2:	37 95       	ror	r19
    1ed4:	27 95       	ror	r18
    1ed6:	ba 95       	dec	r27
    1ed8:	c9 f7       	brne	.-14     	; 0x1ecc <__ultoa_invert+0xa2>
    1eda:	62 0f       	add	r22, r18
    1edc:	73 1f       	adc	r23, r19
    1ede:	84 1f       	adc	r24, r20
    1ee0:	95 1f       	adc	r25, r21
    1ee2:	a0 1d       	adc	r26, r0
    1ee4:	08 95       	ret

00001ee6 <_exit>:
    1ee6:	f8 94       	cli

00001ee8 <__stop_program>:
    1ee8:	ff cf       	rjmp	.-2      	; 0x1ee8 <__stop_program>
