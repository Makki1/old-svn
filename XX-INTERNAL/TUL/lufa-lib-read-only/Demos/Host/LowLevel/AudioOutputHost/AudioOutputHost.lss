
AudioOutputHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000018e8  0000197c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800114  00800114  00001990  2**0
                  ALLOC
  3 .stab         000020a0  00000000  00000000  00001990  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000da2  00000000  00000000  00003a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000328  00000000  00000000  000047d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000083b  00000000  00000000  00004afa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004d75  00000000  00000000  00005335  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001630  00000000  00000000  0000a0aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003e76  00000000  00000000  0000b6da  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004b0  00000000  00000000  0000f550  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000024b7  00000000  00000000  0000fa00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000020d2  00000000  00000000  00011eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003f8  00000000  00000000  00013f89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		Pipe_DisablePipe();
	}
}

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
       0:	53 c1       	rjmp	.+678    	; 0x2a8 <__ctors_end>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       2:	00 00       	nop

	return USB_Host_SendControlRequest(FeatureStatus);
}

uint8_t USB_Host_ClearPipeStall(const uint8_t EndpointAddress)
{
       4:	6f c1       	rjmp	.+734    	; 0x2e4 <__bad_interrupt>

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       6:	00 00       	nop
       8:	6d c1       	rjmp	.+730    	; 0x2e4 <__bad_interrupt>
       a:	00 00       	nop
       c:	6b c1       	rjmp	.+726    	; 0x2e4 <__bad_interrupt>
       e:	00 00       	nop
      10:	69 c1       	rjmp	.+722    	; 0x2e4 <__bad_interrupt>
      12:	00 00       	nop
      14:	67 c1       	rjmp	.+718    	; 0x2e4 <__bad_interrupt>
      16:	00 00       	nop
      18:	65 c1       	rjmp	.+714    	; 0x2e4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	63 c1       	rjmp	.+710    	; 0x2e4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	61 c1       	rjmp	.+706    	; 0x2e4 <__bad_interrupt>
      22:	00 00       	nop
      24:	5f c1       	rjmp	.+702    	; 0x2e4 <__bad_interrupt>
      26:	00 00       	nop
      28:	88 c6       	rjmp	.+3344   	; 0xd3a <__vector_10>
      2a:	00 00       	nop
      2c:	5b c1       	rjmp	.+694    	; 0x2e4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	59 c1       	rjmp	.+690    	; 0x2e4 <__bad_interrupt>
      32:	00 00       	nop
      34:	57 c1       	rjmp	.+686    	; 0x2e4 <__bad_interrupt>
      36:	00 00       	nop
      38:	55 c1       	rjmp	.+682    	; 0x2e4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	53 c1       	rjmp	.+678    	; 0x2e4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	51 c1       	rjmp	.+674    	; 0x2e4 <__bad_interrupt>
      42:	00 00       	nop
      44:	4f c1       	rjmp	.+670    	; 0x2e4 <__bad_interrupt>
      46:	00 00       	nop
      48:	4d c1       	rjmp	.+666    	; 0x2e4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4b c1       	rjmp	.+662    	; 0x2e4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	49 c1       	rjmp	.+658    	; 0x2e4 <__bad_interrupt>
      52:	00 00       	nop
      54:	48 c1       	rjmp	.+656    	; 0x2e6 <__vector_21>
      56:	00 00       	nop
      58:	45 c1       	rjmp	.+650    	; 0x2e4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	43 c1       	rjmp	.+646    	; 0x2e4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	41 c1       	rjmp	.+642    	; 0x2e4 <__bad_interrupt>
      62:	00 00       	nop
      64:	3f c1       	rjmp	.+638    	; 0x2e4 <__bad_interrupt>
      66:	00 00       	nop
      68:	3d c1       	rjmp	.+634    	; 0x2e4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3b c1       	rjmp	.+630    	; 0x2e4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	39 c1       	rjmp	.+626    	; 0x2e4 <__bad_interrupt>
      72:	00 00       	nop
      74:	37 c1       	rjmp	.+622    	; 0x2e4 <__bad_interrupt>
      76:	00 00       	nop
      78:	35 c1       	rjmp	.+618    	; 0x2e4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	33 c1       	rjmp	.+614    	; 0x2e4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	31 c1       	rjmp	.+610    	; 0x2e4 <__bad_interrupt>
      82:	00 00       	nop
      84:	2f c1       	rjmp	.+606    	; 0x2e4 <__bad_interrupt>
      86:	00 00       	nop
      88:	2d c1       	rjmp	.+602    	; 0x2e4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2b c1       	rjmp	.+598    	; 0x2e4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	29 c1       	rjmp	.+594    	; 0x2e4 <__bad_interrupt>
      92:	00 00       	nop
      94:	27 c1       	rjmp	.+590    	; 0x2e4 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4703>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4695>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4676>:
     11d:	53 70 65 61 6b 65 72 20 45 6e 75 6d 65 72 61 74     Speaker Enumerat
     12d:	65 64 2e 0d 0a 00                                   ed....

00000133 <__c.4672>:
     133:	1b 5b 33 31 6d 43 6f 75 6c 64 20 6e 6f 74 20 73     .[31mCould not s
     143:	65 74 20 61 6c 74 65 72 6e 61 74 69 76 65 20 73     et alternative s
     153:	74 72 65 61 6d 69 6e 67 20 69 6e 74 65 72 66 61     treaming interfa
     163:	63 65 20 73 65 74 74 69 6e 67 2e 0d 0a 20 2d 2d     ce setting... --
     173:	20 45 72 72 6f 72 20 43 6f 64 65 3a 20 25 64 0d      Error Code: %d.
     183:	0a 1b 5b 33 37 6d 00                                ..[37m.

0000018a <__c.4670>:
     18a:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     19a:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     1aa:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     1ba:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     1ca:	37 6d 00                                            7m.

000001cd <__c.4668>:
     1cd:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     1dd:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

000001e7 <__c.4666>:
     1e7:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     1f7:	69 63 65 2e 0d 0a 00                                ice....

000001fe <__c.4664>:
     1fe:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     20e:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     21e:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

00000228 <__c.4661>:
     228:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     238:	61 74 61 2e 0d 0a 00                                ata....

0000023f <__c.4656>:
     23f:	1b 5b 33 32 6d 44 65 76 69 63 65 20 55 6e 61 74     .[32mDevice Unat
     24f:	74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00        tached....[37m.

0000025e <__c.4651>:
     25e:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     26e:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

0000027b <__c.4638>:
     27b:	1b 5b 33 36 6d 41 75 64 69 6f 20 4f 75 74 70 75     .[36mAudio Outpu
     28b:	74 20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e     t Host Demo runn
     29b:	69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00 00              ing....[37m..

000002a8 <__ctors_end>:
     2a8:	11 24       	eor	r1, r1
     2aa:	1f be       	out	0x3f, r1	; 63
     2ac:	cf ef       	ldi	r28, 0xFF	; 255
     2ae:	d0 e2       	ldi	r29, 0x20	; 32
     2b0:	de bf       	out	0x3e, r29	; 62
     2b2:	cd bf       	out	0x3d, r28	; 61

000002b4 <__do_copy_data>:
     2b4:	11 e0       	ldi	r17, 0x01	; 1
     2b6:	a0 e0       	ldi	r26, 0x00	; 0
     2b8:	b1 e0       	ldi	r27, 0x01	; 1
     2ba:	e8 ee       	ldi	r30, 0xE8	; 232
     2bc:	f8 e1       	ldi	r31, 0x18	; 24
     2be:	00 e0       	ldi	r16, 0x00	; 0
     2c0:	0b bf       	out	0x3b, r16	; 59
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <__do_copy_data+0x14>
     2c4:	07 90       	elpm	r0, Z+
     2c6:	0d 92       	st	X+, r0
     2c8:	a4 31       	cpi	r26, 0x14	; 20
     2ca:	b1 07       	cpc	r27, r17
     2cc:	d9 f7       	brne	.-10     	; 0x2c4 <__do_copy_data+0x10>

000002ce <__do_clear_bss>:
     2ce:	11 e0       	ldi	r17, 0x01	; 1
     2d0:	a4 e1       	ldi	r26, 0x14	; 20
     2d2:	b1 e0       	ldi	r27, 0x01	; 1
     2d4:	01 c0       	rjmp	.+2      	; 0x2d8 <.do_clear_bss_start>

000002d6 <.do_clear_bss_loop>:
     2d6:	1d 92       	st	X+, r1

000002d8 <.do_clear_bss_start>:
     2d8:	ac 33       	cpi	r26, 0x3C	; 60
     2da:	b1 07       	cpc	r27, r17
     2dc:	e1 f7       	brne	.-8      	; 0x2d6 <.do_clear_bss_loop>
     2de:	a7 d1       	rcall	.+846    	; 0x62e <main>
     2e0:	0c 94 72 0c 	jmp	0x18e4	; 0x18e4 <_exit>

000002e4 <__bad_interrupt>:
     2e4:	8d ce       	rjmp	.-742    	; 0x0 <__vectors>

000002e6 <__vector_21>:
	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}

/** ISR to handle the reloading of the endpoint with the next sample. */
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
     2e6:	1f 92       	push	r1
     2e8:	0f 92       	push	r0
     2ea:	0f b6       	in	r0, 0x3f	; 63
     2ec:	0f 92       	push	r0
     2ee:	11 24       	eor	r1, r1
     2f0:	2f 93       	push	r18
     2f2:	8f 93       	push	r24
     2f4:	9f 93       	push	r25
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     2f6:	20 91 a7 00 	lds	r18, 0x00A7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     300:	80 91 a9 00 	lds	r24, 0x00A9
     304:	8f 7b       	andi	r24, 0xBF	; 191
     306:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     30a:	80 91 a6 00 	lds	r24, 0x00A6

	Pipe_SelectPipe(AUDIO_DATA_OUT_PIPE);
	Pipe_Unfreeze();

	/* Check if the current pipe can be written to (device ready for more data) */
	if (Pipe_IsOUTReady())
     30e:	82 ff       	sbrs	r24, 2
     310:	2b c0       	rjmp	.+86     	; 0x368 <__vector_21+0x82>
		#if defined(USE_TEST_TONE)
			static uint8_t SquareWaveSampleCount;
			static int16_t CurrentWaveValue;
			
			/* In test tone mode, generate a square wave at 1/256 of the sample rate */
			if (SquareWaveSampleCount++ == 0xFF)
     312:	80 91 16 01 	lds	r24, 0x0116
     316:	8f 5f       	subi	r24, 0xFF	; 255
     318:	80 93 16 01 	sts	0x0116, r24
     31c:	81 50       	subi	r24, 0x01	; 1
     31e:	50 f4       	brcc	.+20     	; 0x334 <__vector_21+0x4e>
			  CurrentWaveValue ^= 0x8000;
     320:	80 91 14 01 	lds	r24, 0x0114
     324:	90 91 15 01 	lds	r25, 0x0115
     328:	80 50       	subi	r24, 0x00	; 0
     32a:	90 48       	sbci	r25, 0x80	; 128
     32c:	90 93 15 01 	sts	0x0115, r25
     330:	80 93 14 01 	sts	0x0114, r24
			
			/* Only generate audio if the board button is being pressed */
			AudioSample = (Buttons_GetStatus() & BUTTONS_BUTTON1) ? CurrentWaveValue : 0;
     334:	62 9b       	sbis	0x0c, 2	; 12
     336:	03 c0       	rjmp	.+6      	; 0x33e <__vector_21+0x58>
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	04 c0       	rjmp	.+8      	; 0x346 <__vector_21+0x60>
     33e:	80 91 14 01 	lds	r24, 0x0114
     342:	90 91 15 01 	lds	r25, 0x0115
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
     346:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
     34a:	90 93 af 00 	sts	0x00AF, r25
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
     34e:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
     352:	90 93 af 00 	sts	0x00AF, r25
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     356:	80 91 a6 00 	lds	r24, 0x00A6
		#endif
		
		Pipe_Write_16_LE(AudioSample);
		Pipe_Write_16_LE(AudioSample);
		
		if (!(Pipe_IsReadWriteAllowed()))
     35a:	85 fd       	sbrc	r24, 5
     35c:	05 c0       	rjmp	.+10     	; 0x368 <__vector_21+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     35e:	80 91 a6 00 	lds	r24, 0x00A6
     362:	8b 77       	andi	r24, 0x7B	; 123
     364:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     368:	80 91 a9 00 	lds	r24, 0x00A9
     36c:	80 64       	ori	r24, 0x40	; 64
     36e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     372:	27 70       	andi	r18, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     374:	20 93 a7 00 	sts	0x00A7, r18
		  Pipe_ClearOUT();
	}

	Pipe_Freeze();
	Pipe_SelectPipe(PrevPipe);
}
     378:	9f 91       	pop	r25
     37a:	8f 91       	pop	r24
     37c:	2f 91       	pop	r18
     37e:	0f 90       	pop	r0
     380:	0f be       	out	0x3f, r0	; 63
     382:	0f 90       	pop	r0
     384:	1f 90       	pop	r1
     386:	18 95       	reti

00000388 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     388:	90 91 27 01 	lds	r25, 0x0127
     38c:	2d b7       	in	r18, 0x3d	; 61
     38e:	3e b7       	in	r19, 0x3e	; 62
     390:	28 50       	subi	r18, 0x08	; 8
     392:	30 40       	sbci	r19, 0x00	; 0
     394:	0f b6       	in	r0, 0x3f	; 63
     396:	f8 94       	cli
     398:	3e bf       	out	0x3e, r19	; 62
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	2d bf       	out	0x3d, r18	; 61
     39e:	ed b7       	in	r30, 0x3d	; 61
     3a0:	fe b7       	in	r31, 0x3e	; 62
     3a2:	31 96       	adiw	r30, 0x01	; 1
     3a4:	28 e9       	ldi	r18, 0x98	; 152
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	ad b7       	in	r26, 0x3d	; 61
     3aa:	be b7       	in	r27, 0x3e	; 62
     3ac:	12 96       	adiw	r26, 0x02	; 2
     3ae:	3c 93       	st	X, r19
     3b0:	2e 93       	st	-X, r18
     3b2:	11 97       	sbiw	r26, 0x01	; 1
     3b4:	82 83       	std	Z+2, r24	; 0x02
     3b6:	13 82       	std	Z+3, r1	; 0x03
     3b8:	64 83       	std	Z+4, r22	; 0x04
     3ba:	15 82       	std	Z+5, r1	; 0x05
     3bc:	96 83       	std	Z+6, r25	; 0x06
     3be:	17 82       	std	Z+7, r1	; 0x07
     3c0:	a1 d7       	rcall	.+3906   	; 0x1304 <printf_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     3c2:	8b b1       	in	r24, 0x0b	; 11
     3c4:	8f 70       	andi	r24, 0x0F	; 15
     3c6:	80 69       	ori	r24, 0x90	; 144
     3c8:	8b b9       	out	0x0b, r24	; 11
     3ca:	2d b7       	in	r18, 0x3d	; 61
     3cc:	3e b7       	in	r19, 0x3e	; 62
     3ce:	28 5f       	subi	r18, 0xF8	; 248
     3d0:	3f 4f       	sbci	r19, 0xFF	; 255
     3d2:	0f b6       	in	r0, 0x3f	; 63
     3d4:	f8 94       	cli
     3d6:	3e bf       	out	0x3e, r19	; 62
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     3dc:	08 95       	ret

000003de <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     3de:	1f 93       	push	r17
     3e0:	18 2f       	mov	r17, r24
	USB_Disable();
     3e2:	86 d4       	rcall	.+2316   	; 0xcf0 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     3e4:	00 d0       	rcall	.+0      	; 0x3e6 <EVENT_USB_Host_HostError+0x8>
     3e6:	00 d0       	rcall	.+0      	; 0x3e8 <EVENT_USB_Host_HostError+0xa>
     3e8:	ed b7       	in	r30, 0x3d	; 61
     3ea:	fe b7       	in	r31, 0x3e	; 62
     3ec:	31 96       	adiw	r30, 0x01	; 1
     3ee:	8e ee       	ldi	r24, 0xEE	; 238
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	ad b7       	in	r26, 0x3d	; 61
     3f4:	be b7       	in	r27, 0x3e	; 62
     3f6:	12 96       	adiw	r26, 0x02	; 2
     3f8:	9c 93       	st	X, r25
     3fa:	8e 93       	st	-X, r24
     3fc:	11 97       	sbiw	r26, 0x01	; 1
     3fe:	12 83       	std	Z+2, r17	; 0x02
     400:	13 82       	std	Z+3, r1	; 0x03
     402:	80 d7       	rcall	.+3840   	; 0x1304 <printf_P>
     404:	8b b1       	in	r24, 0x0b	; 11
     406:	8f 70       	andi	r24, 0x0F	; 15
     408:	80 69       	ori	r24, 0x90	; 144
     40a:	8b b9       	out	0x0b, r24	; 11
     40c:	0f 90       	pop	r0
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
     414:	ff cf       	rjmp	.-2      	; 0x414 <EVENT_USB_Host_HostError+0x36>

00000416 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Unattached.\r\n" ESC_FG_WHITE));
     416:	8f e3       	ldi	r24, 0x3F	; 63
     418:	92 e0       	ldi	r25, 0x02	; 2
     41a:	96 d7       	rcall	.+3884   	; 0x1348 <puts_P>
     41c:	8b b1       	in	r24, 0x0b	; 11
     41e:	8f 70       	andi	r24, 0x0F	; 15
     420:	80 61       	ori	r24, 0x10	; 16
     422:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     424:	08 95       	ret

00000426 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     426:	8e e5       	ldi	r24, 0x5E	; 94
     428:	92 e0       	ldi	r25, 0x02	; 2
     42a:	8e d7       	rcall	.+3868   	; 0x1348 <puts_P>
     42c:	8b b1       	in	r24, 0x0b	; 11
     42e:	8f 70       	andi	r24, 0x0F	; 15
     430:	80 6a       	ori	r24, 0xA0	; 160
     432:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     434:	08 95       	ret

00000436 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     436:	1f 93       	push	r17
     438:	df 93       	push	r29
     43a:	cf 93       	push	r28
     43c:	00 d0       	rcall	.+0      	; 0x43e <EVENT_USB_Host_DeviceEnumerationComplete+0x8>
     43e:	0f 92       	push	r0
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
	puts_P(PSTR("Getting Config Data.\r\n"));
     444:	88 e2       	ldi	r24, 0x28	; 40
     446:	92 e0       	ldi	r25, 0x02	; 2
     448:	7f d7       	rcall	.+3838   	; 0x1348 <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     44a:	28 d1       	rcall	.+592    	; 0x69c <ProcessConfigurationDescriptor>
     44c:	18 2f       	mov	r17, r24
     44e:	88 23       	and	r24, r24
     450:	b9 f0       	breq	.+46     	; 0x480 <EVENT_USB_Host_DeviceEnumerationComplete+0x4a>
	{
		if (ErrorCode == ControlError)
     452:	81 30       	cpi	r24, 0x01	; 1
     454:	19 f4       	brne	.+6      	; 0x45c <EVENT_USB_Host_DeviceEnumerationComplete+0x26>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     456:	8e ef       	ldi	r24, 0xFE	; 254
     458:	91 e0       	ldi	r25, 0x01	; 1
     45a:	02 c0       	rjmp	.+4      	; 0x460 <EVENT_USB_Host_DeviceEnumerationComplete+0x2a>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     45c:	87 ee       	ldi	r24, 0xE7	; 231
     45e:	91 e0       	ldi	r25, 0x01	; 1
     460:	73 d7       	rcall	.+3814   	; 0x1348 <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     462:	00 d0       	rcall	.+0      	; 0x464 <EVENT_USB_Host_DeviceEnumerationComplete+0x2e>
     464:	00 d0       	rcall	.+0      	; 0x466 <EVENT_USB_Host_DeviceEnumerationComplete+0x30>
     466:	ed b7       	in	r30, 0x3d	; 61
     468:	fe b7       	in	r31, 0x3e	; 62
     46a:	31 96       	adiw	r30, 0x01	; 1
     46c:	8d ec       	ldi	r24, 0xCD	; 205
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	ad b7       	in	r26, 0x3d	; 61
     472:	be b7       	in	r27, 0x3e	; 62
     474:	12 96       	adiw	r26, 0x02	; 2
     476:	9c 93       	st	X, r25
     478:	8e 93       	st	-X, r24
     47a:	11 97       	sbiw	r26, 0x01	; 1
     47c:	12 83       	std	Z+2, r17	; 0x02
     47e:	13 c0       	rjmp	.+38     	; 0x4a6 <EVENT_USB_Host_DeviceEnumerationComplete+0x70>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	eb d6       	rcall	.+3542   	; 0x125a <USB_Host_SetDeviceConfiguration>
     484:	28 2f       	mov	r18, r24
     486:	88 23       	and	r24, r24
     488:	c9 f0       	breq	.+50     	; 0x4bc <EVENT_USB_Host_DeviceEnumerationComplete+0x86>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     48a:	00 d0       	rcall	.+0      	; 0x48c <EVENT_USB_Host_DeviceEnumerationComplete+0x56>
     48c:	00 d0       	rcall	.+0      	; 0x48e <EVENT_USB_Host_DeviceEnumerationComplete+0x58>
     48e:	ed b7       	in	r30, 0x3d	; 61
     490:	fe b7       	in	r31, 0x3e	; 62
     492:	31 96       	adiw	r30, 0x01	; 1
     494:	8a e8       	ldi	r24, 0x8A	; 138
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	ad b7       	in	r26, 0x3d	; 61
     49a:	be b7       	in	r27, 0x3e	; 62
     49c:	12 96       	adiw	r26, 0x02	; 2
     49e:	9c 93       	st	X, r25
     4a0:	8e 93       	st	-X, r24
     4a2:	11 97       	sbiw	r26, 0x01	; 1
     4a4:	22 83       	std	Z+2, r18	; 0x02
     4a6:	13 82       	std	Z+3, r1	; 0x03
     4a8:	2d d7       	rcall	.+3674   	; 0x1304 <printf_P>
     4aa:	8b b1       	in	r24, 0x0b	; 11
     4ac:	8f 70       	andi	r24, 0x0F	; 15
     4ae:	80 69       	ori	r24, 0x90	; 144
     4b0:	8b b9       	out	0x0b, r24	; 11
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	5e c0       	rjmp	.+188    	; 0x578 <EVENT_USB_Host_DeviceEnumerationComplete+0x142>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}
	
	if ((ErrorCode = USB_Host_SetInterfaceAltSetting(StreamingInterfaceIndex,
     4bc:	80 91 17 01 	lds	r24, 0x0117
     4c0:	60 91 18 01 	lds	r22, 0x0118
     4c4:	b3 d6       	rcall	.+3430   	; 0x122c <USB_Host_SetInterfaceAltSetting>
     4c6:	28 2f       	mov	r18, r24
     4c8:	88 23       	and	r24, r24
     4ca:	c9 f0       	breq	.+50     	; 0x4fe <EVENT_USB_Host_DeviceEnumerationComplete+0xc8>
	                                                 StreamingInterfaceAltSetting)) != HOST_SENDCONTROL_Successful)
	{
		printf_P(PSTR(ESC_FG_RED "Could not set alternative streaming interface setting.\r\n"
     4cc:	00 d0       	rcall	.+0      	; 0x4ce <EVENT_USB_Host_DeviceEnumerationComplete+0x98>
     4ce:	00 d0       	rcall	.+0      	; 0x4d0 <EVENT_USB_Host_DeviceEnumerationComplete+0x9a>
     4d0:	ed b7       	in	r30, 0x3d	; 61
     4d2:	fe b7       	in	r31, 0x3e	; 62
     4d4:	31 96       	adiw	r30, 0x01	; 1
     4d6:	83 e3       	ldi	r24, 0x33	; 51
     4d8:	91 e0       	ldi	r25, 0x01	; 1
     4da:	ad b7       	in	r26, 0x3d	; 61
     4dc:	be b7       	in	r27, 0x3e	; 62
     4de:	12 96       	adiw	r26, 0x02	; 2
     4e0:	9c 93       	st	X, r25
     4e2:	8e 93       	st	-X, r24
     4e4:	11 97       	sbiw	r26, 0x01	; 1
     4e6:	22 83       	std	Z+2, r18	; 0x02
     4e8:	13 82       	std	Z+3, r1	; 0x03
     4ea:	0c d7       	rcall	.+3608   	; 0x1304 <printf_P>
     4ec:	8b b1       	in	r24, 0x0b	; 11
     4ee:	8f 70       	andi	r24, 0x0F	; 15
     4f0:	80 69       	ori	r24, 0x90	; 144
     4f2:	8b b9       	out	0x0b, r24	; 11
		                         " -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
     4f4:	0f 90       	pop	r0
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
     4fc:	2c c0       	rjmp	.+88     	; 0x556 <EVENT_USB_Host_DeviceEnumerationComplete+0x120>
		return;
	}

	USB_ControlRequest = (USB_Request_Header_t)
     4fe:	20 91 19 01 	lds	r18, 0x0119
     502:	82 e2       	ldi	r24, 0x22	; 34
     504:	80 93 1f 01 	sts	0x011F, r24
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	80 93 20 01 	sts	0x0120, r24
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	90 93 22 01 	sts	0x0122, r25
     516:	80 93 21 01 	sts	0x0121, r24
     51a:	20 93 23 01 	sts	0x0123, r18
     51e:	10 92 24 01 	sts	0x0124, r1
     522:	83 e0       	ldi	r24, 0x03	; 3
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	90 93 26 01 	sts	0x0126, r25
     52a:	80 93 25 01 	sts	0x0125, r24
			.wValue        = (AUDIO_EPCONTROL_SamplingFreq << 8),
			.wIndex        = StreamingEndpointAddress,
			.wLength       = sizeof(USB_Audio_SampleFreq_t),
		};
		
	USB_Audio_SampleFreq_t SampleRate = AUDIO_SAMPLE_FREQ(48000);
     52e:	de 01       	movw	r26, r28
     530:	11 96       	adiw	r26, 0x01	; 1
     532:	e0 e0       	ldi	r30, 0x00	; 0
     534:	f1 e0       	ldi	r31, 0x01	; 1
     536:	83 e0       	ldi	r24, 0x03	; 3
     538:	01 90       	ld	r0, Z+
     53a:	0d 92       	st	X+, r0
     53c:	81 50       	subi	r24, 0x01	; 1
     53e:	e1 f7       	brne	.-8      	; 0x538 <EVENT_USB_Host_DeviceEnumerationComplete+0x102>
     540:	10 92 a7 00 	sts	0x00A7, r1

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	/* Set the sample rate on the streaming interface endpoint */
	if ((ErrorCode = USB_Host_SendControlRequest(&SampleRate)) != HOST_SENDCONTROL_Successful)
     544:	ce 01       	movw	r24, r28
     546:	01 96       	adiw	r24, 0x01	; 1
     548:	53 d5       	rcall	.+2726   	; 0xff0 <USB_Host_SendControlRequest>
     54a:	88 23       	and	r24, r24
     54c:	39 f0       	breq	.+14     	; 0x55c <EVENT_USB_Host_DeviceEnumerationComplete+0x126>
     54e:	8b b1       	in	r24, 0x0b	; 11
     550:	8f 70       	andi	r24, 0x0F	; 15
     552:	80 69       	ori	r24, 0x90	; 144
     554:	8b b9       	out	0x0b, r24	; 11
	{
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	80 d6       	rcall	.+3328   	; 0x125a <USB_Host_SetDeviceConfiguration>
     55a:	0e c0       	rjmp	.+28     	; 0x578 <EVENT_USB_Host_DeviceEnumerationComplete+0x142>
		return;
	}

	/* Sample reload timer initialization */
	TIMSK0  = (1 << OCIE0A);
     55c:	92 e0       	ldi	r25, 0x02	; 2
     55e:	90 93 6e 00 	sts	0x006E, r25
	OCR0A   = ((F_CPU / 8 / 48000) - 1);
     562:	83 e1       	ldi	r24, 0x13	; 19
     564:	87 bd       	out	0x27, r24	; 39
	TCCR0A  = (1 << WGM01);  // CTC mode
     566:	94 bd       	out	0x24, r25	; 36
	TCCR0B  = (1 << CS01);   // Fcpu/8 speed	
     568:	95 bd       	out	0x25, r25	; 37
	
	puts_P(PSTR("Speaker Enumerated.\r\n"));
     56a:	8d e1       	ldi	r24, 0x1D	; 29
     56c:	91 e0       	ldi	r25, 0x01	; 1
     56e:	ec d6       	rcall	.+3544   	; 0x1348 <puts_P>
     570:	8b b1       	in	r24, 0x0b	; 11
     572:	8f 70       	andi	r24, 0x0F	; 15
     574:	80 66       	ori	r24, 0x60	; 96
     576:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     578:	0f 90       	pop	r0
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	cf 91       	pop	r28
     580:	df 91       	pop	r29
     582:	1f 91       	pop	r17
     584:	08 95       	ret

00000586 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     586:	84 b7       	in	r24, 0x34	; 52
     588:	87 7f       	andi	r24, 0xF7	; 247
     58a:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     58c:	28 e1       	ldi	r18, 0x18	; 24
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	f8 94       	cli
     592:	20 93 60 00 	sts	0x0060, r18
     596:	10 92 60 00 	sts	0x0060, r1
     59a:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	80 e8       	ldi	r24, 0x80	; 128
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	f8 94       	cli
     5a4:	80 93 61 00 	sts	0x0061, r24
     5a8:	90 93 61 00 	sts	0x0061, r25
     5ac:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     5ae:	83 e3       	ldi	r24, 0x33	; 51
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	90 93 cd 00 	sts	0x00CD, r25
     5b6:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     5ba:	86 e0       	ldi	r24, 0x06	; 6
     5bc:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     5c0:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     5c4:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     5c8:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     5ca:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     5cc:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     5ce:	72 9a       	sbi	0x0e, 2	; 14
			 *  \param[in] Mode  Mask of ADC prescale and mode settings.
			 */
			static inline void ADC_Init(uint8_t Mode) ATTR_ALWAYS_INLINE;
			static inline void ADC_Init(uint8_t Mode)
			{
				ADCSRA = ((1 << ADEN) | Mode);
     5d0:	85 ea       	ldi	r24, 0xA5	; 165
     5d2:	80 93 7a 00 	sts	0x007A, r24
			static inline void ADC_SetupChannel(const uint8_t ChannelIndex)
			{
				#if (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) || \
					 defined(__AVR_AT90USB1287__) || defined(__AVR_AT90USB647__) || \
					 defined(__AVR_ATmega32U6__))
				DDRF  &= ~(1 << ChannelIndex);
     5d6:	82 98       	cbi	0x10, 2	; 16
				DIDR0 |=  (1 << ChannelIndex);
     5d8:	ee e7       	ldi	r30, 0x7E	; 126
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	80 81       	ld	r24, Z
     5de:	84 60       	ori	r24, 0x04	; 4
     5e0:	80 83       	st	Z, r24

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     5e2:	8a b1       	in	r24, 0x0a	; 10
     5e4:	80 6f       	ori	r24, 0xF0	; 240
     5e6:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     5e8:	8b b1       	in	r24, 0x0b	; 11
     5ea:	8f 70       	andi	r24, 0x0F	; 15
     5ec:	8b b9       	out	0x0b, r24	; 11
	Serial_Init(9600, false);
	Buttons_Init();
	ADC_Init(ADC_FREE_RUNNING | ADC_PRESCALE_32);
	ADC_SetupChannel(MIC_IN_ADC_CHANNEL);	
	LEDs_Init();
	USB_Init();
     5ee:	77 d3       	rcall	.+1774   	; 0xcde <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     5f0:	e8 e2       	ldi	r30, 0x28	; 40
     5f2:	f1 e0       	ldi	r31, 0x01	; 1
     5f4:	f0 93 37 01 	sts	0x0137, r31
     5f8:	e0 93 36 01 	sts	0x0136, r30
					stdout = Stream;
     5fc:	f0 93 39 01 	sts	0x0139, r31
     600:	e0 93 38 01 	sts	0x0138, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     604:	8e e0       	ldi	r24, 0x0E	; 14
     606:	df 01       	movw	r26, r30
     608:	1d 92       	st	X+, r1
     60a:	8a 95       	dec	r24
     60c:	e9 f7       	brne	.-6      	; 0x608 <SetupHardware+0x82>
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	80 93 2b 01 	sts	0x012B, r24
     614:	84 e6       	ldi	r24, 0x64	; 100
     616:	99 e0       	ldi	r25, 0x09	; 9
     618:	90 93 31 01 	sts	0x0131, r25
     61c:	80 93 30 01 	sts	0x0130, r24
     620:	8e e6       	ldi	r24, 0x6E	; 110
     622:	99 e0       	ldi	r25, 0x09	; 9
     624:	90 93 33 01 	sts	0x0133, r25
     628:	80 93 32 01 	sts	0x0132, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     62c:	08 95       	ret

0000062e <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     62e:	ab df       	rcall	.-170    	; 0x586 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Audio Output Host Demo running.\r\n" ESC_FG_WHITE));
     630:	8b e7       	ldi	r24, 0x7B	; 123
     632:	92 e0       	ldi	r25, 0x02	; 2
     634:	89 d6       	rcall	.+3346   	; 0x1348 <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     636:	8b b1       	in	r24, 0x0b	; 11
     638:	8f 70       	andi	r24, 0x0F	; 15
     63a:	80 61       	ori	r24, 0x10	; 16
     63c:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     63e:	78 94       	sei

	for (;;)
	{
		USB_USBTask();
     640:	31 d6       	rcall	.+3170   	; 0x12a4 <USB_USBTask>
     642:	fe cf       	rjmp	.-4      	; 0x640 <main+0x12>

00000644 <DComp_NextAudioControlInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Audio Control Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextAudioControlInterface(void* CurrentDescriptor)
{
     644:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     646:	81 81       	ldd	r24, Z+1	; 0x01
     648:	84 30       	cpi	r24, 0x04	; 4
     64a:	41 f4       	brne	.+16     	; 0x65c <DComp_NextAudioControlInterface+0x18>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
     64c:	85 81       	ldd	r24, Z+5	; 0x05
     64e:	81 30       	cpi	r24, 0x01	; 1
     650:	29 f4       	brne	.+10     	; 0x65c <DComp_NextAudioControlInterface+0x18>
     652:	86 81       	ldd	r24, Z+6	; 0x06
     654:	81 30       	cpi	r24, 0x01	; 1
     656:	11 f4       	brne	.+4      	; 0x65c <DComp_NextAudioControlInterface+0x18>
     658:	87 81       	ldd	r24, Z+7	; 0x07
     65a:	81 11       	cpse	r24, r1
     65c:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     65e:	08 95       	ret

00000660 <DComp_NextAudioStreamInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Audio Streaming Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextAudioStreamInterface(void* CurrentDescriptor)
{
     660:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     662:	81 81       	ldd	r24, Z+1	; 0x01
     664:	84 30       	cpi	r24, 0x04	; 4
     666:	41 f4       	brne	.+16     	; 0x678 <DComp_NextAudioStreamInterface+0x18>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
     668:	85 81       	ldd	r24, Z+5	; 0x05
     66a:	81 30       	cpi	r24, 0x01	; 1
     66c:	29 f4       	brne	.+10     	; 0x678 <DComp_NextAudioStreamInterface+0x18>
     66e:	86 81       	ldd	r24, Z+6	; 0x06
     670:	82 30       	cpi	r24, 0x02	; 2
     672:	11 f4       	brne	.+4      	; 0x678 <DComp_NextAudioStreamInterface+0x18>
     674:	87 81       	ldd	r24, Z+7	; 0x07
     676:	81 11       	cpse	r24, r1
     678:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     67a:	08 95       	ret

0000067c <DComp_NextAudioInterfaceDataEndpoint>:
 *  search if another interface descriptor is found before the next endpoint.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextAudioInterfaceDataEndpoint(void* CurrentDescriptor)
{
     67c:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     67e:	81 81       	ldd	r24, Z+1	; 0x01
     680:	85 30       	cpi	r24, 0x05	; 5
     682:	31 f4       	brne	.+12     	; 0x690 <DComp_NextAudioInterfaceDataEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_ISOCHRONOUS)
     684:	83 81       	ldd	r24, Z+3	; 0x03
     686:	83 70       	andi	r24, 0x03	; 3
     688:	81 30       	cpi	r24, 0x01	; 1
     68a:	31 f4       	brne	.+12     	; 0x698 <DComp_NextAudioInterfaceDataEndpoint+0x1c>
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	08 95       	ret
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
     690:	84 30       	cpi	r24, 0x04	; 4
     692:	11 f4       	brne	.+4      	; 0x698 <DComp_NextAudioInterfaceDataEndpoint+0x1c>
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	08 95       	ret
     698:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     69a:	08 95       	ret

0000069c <ProcessConfigurationDescriptor>:
 *  This routine searches for a Streaming Audio interface descriptor containing a valid Isochronous audio endpoint.
 *
 *  \return An error code from the \ref AudioHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     69c:	af 92       	push	r10
     69e:	bf 92       	push	r11
     6a0:	cf 92       	push	r12
     6a2:	df 92       	push	r13
     6a4:	ef 92       	push	r14
     6a6:	ff 92       	push	r15
     6a8:	0f 93       	push	r16
     6aa:	1f 93       	push	r17
     6ac:	df 93       	push	r29
     6ae:	cf 93       	push	r28
     6b0:	cd b7       	in	r28, 0x3d	; 61
     6b2:	de b7       	in	r29, 0x3e	; 62
     6b4:	c4 50       	subi	r28, 0x04	; 4
     6b6:	d2 40       	sbci	r29, 0x02	; 2
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	f8 94       	cli
     6bc:	de bf       	out	0x3e, r29	; 62
     6be:	0f be       	out	0x3f, r0	; 63
     6c0:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     6c2:	ae 01       	movw	r20, r28
     6c4:	4b 5f       	subi	r20, 0xFB	; 251
     6c6:	5f 4f       	sbci	r21, 0xFF	; 255
     6c8:	5a 83       	std	Y+2, r21	; 0x02
     6ca:	49 83       	std	Y+1, r20	; 0x01
	USB_Descriptor_Interface_t* AudioControlInterface   = NULL;
	USB_Descriptor_Interface_t* AudioStreamingInterface = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint         = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     6cc:	23 e0       	ldi	r18, 0x03	; 3
     6ce:	e2 2e       	mov	r14, r18
     6d0:	f1 2c       	mov	r15, r1
     6d2:	ec 0e       	add	r14, r28
     6d4:	fd 1e       	adc	r15, r29
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	b7 01       	movw	r22, r14
     6da:	20 e0       	ldi	r18, 0x00	; 0
     6dc:	32 e0       	ldi	r19, 0x02	; 2
     6de:	04 d4       	rcall	.+2056   	; 0xee8 <USB_Host_GetDeviceConfigDescriptor>
     6e0:	85 30       	cpi	r24, 0x05	; 5
     6e2:	29 f0       	breq	.+10     	; 0x6ee <ProcessConfigurationDescriptor+0x52>
     6e4:	86 30       	cpi	r24, 0x06	; 6
     6e6:	79 f0       	breq	.+30     	; 0x706 <ProcessConfigurationDescriptor+0x6a>
     6e8:	88 23       	and	r24, r24
     6ea:	19 f0       	breq	.+6      	; 0x6f2 <ProcessConfigurationDescriptor+0x56>
     6ec:	0e c0       	rjmp	.+28     	; 0x70a <ProcessConfigurationDescriptor+0x6e>
     6ee:	82 e0       	ldi	r24, 0x02	; 2
     6f0:	51 c0       	rjmp	.+162    	; 0x794 <ProcessConfigurationDescriptor+0xf8>
     6f2:	aa 24       	eor	r10, r10
     6f4:	bb 24       	eor	r11, r11
     6f6:	00 e0       	ldi	r16, 0x00	; 0
     6f8:	10 e0       	ldi	r17, 0x00	; 0
	}

	while (!(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(AudioControlInterface) ||
     6fa:	67 01       	movw	r12, r14
     6fc:	7e 01       	movw	r14, r28
     6fe:	08 94       	sec
     700:	e1 1c       	adc	r14, r1
     702:	f1 1c       	adc	r15, r1
     704:	04 c0       	rjmp	.+8      	; 0x70e <ProcessConfigurationDescriptor+0x72>
	USB_Descriptor_Interface_t* AudioControlInterface   = NULL;
	USB_Descriptor_Interface_t* AudioStreamingInterface = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint         = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     706:	83 e0       	ldi	r24, 0x03	; 3
     708:	45 c0       	rjmp	.+138    	; 0x794 <ProcessConfigurationDescriptor+0xf8>
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	43 c0       	rjmp	.+134    	; 0x794 <ProcessConfigurationDescriptor+0xf8>
	}

	while (!(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(AudioControlInterface) ||
     70e:	a1 14       	cp	r10, r1
     710:	b1 04       	cpc	r11, r1
     712:	49 f0       	breq	.+18     	; 0x726 <ProcessConfigurationDescriptor+0x8a>
     714:	c6 01       	movw	r24, r12
     716:	b7 01       	movw	r22, r14
     718:	4e e3       	ldi	r20, 0x3E	; 62
     71a:	53 e0       	ldi	r21, 0x03	; 3
     71c:	a1 d3       	rcall	.+1858   	; 0xe60 <USB_GetNextDescriptorComp>
     71e:	88 23       	and	r24, r24
     720:	09 f0       	breq	.+2      	; 0x724 <ProcessConfigurationDescriptor+0x88>
     722:	4a c0       	rjmp	.+148    	; 0x7b8 <ProcessConfigurationDescriptor+0x11c>
     724:	17 c0       	rjmp	.+46     	; 0x754 <ProcessConfigurationDescriptor+0xb8>
			if (!(AudioControlInterface) ||
			    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
				                          DComp_NextAudioStreamInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Find a new Audio Control interface if the current one doesn't contain a compatible streaming interface */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     726:	c6 01       	movw	r24, r12
     728:	b7 01       	movw	r22, r14
     72a:	42 e2       	ldi	r20, 0x22	; 34
     72c:	53 e0       	ldi	r21, 0x03	; 3
     72e:	98 d3       	rcall	.+1840   	; 0xe60 <USB_GetNextDescriptorComp>
     730:	88 23       	and	r24, r24
     732:	79 f5       	brne	.+94     	; 0x792 <ProcessConfigurationDescriptor+0xf6>
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
				}

				/* Save the interface in case we need to refer back to it later */
				AudioControlInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);			
     734:	19 81       	ldd	r17, Y+1	; 0x01
     736:	0a 81       	ldd	r16, Y+2	; 0x02

				/* Find the next Audio Streaming interface within that Audio Control interface */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     738:	c6 01       	movw	r24, r12
     73a:	b7 01       	movw	r22, r14
     73c:	40 e3       	ldi	r20, 0x30	; 48
     73e:	53 e0       	ldi	r21, 0x03	; 3
     740:	8f d3       	rcall	.+1822   	; 0xe60 <USB_GetNextDescriptorComp>
     742:	88 23       	and	r24, r24
     744:	31 f5       	brne	.+76     	; 0x792 <ProcessConfigurationDescriptor+0xf6>
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
				}

				/* Save the interface in case we need to refer back to it later */
				AudioControlInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);			
     746:	81 2f       	mov	r24, r17
     748:	90 2f       	mov	r25, r16
     74a:	9c 01       	movw	r18, r24
     74c:	59 01       	movw	r10, r18
					return NoCompatibleInterfaceFound;
				}
			}

			/* Save the interface in case we need to refer back to it later */
			AudioStreamingInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     74e:	09 81       	ldd	r16, Y+1	; 0x01
     750:	1a 81       	ldd	r17, Y+2	; 0x02
     752:	dd cf       	rjmp	.-70     	; 0x70e <ProcessConfigurationDescriptor+0x72>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     754:	e9 81       	ldd	r30, Y+1	; 0x01
     756:	fa 81       	ldd	r31, Y+2	; 0x02

		/* Save the endpoint if it is an OUT type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_OUT)
     758:	82 81       	ldd	r24, Z+2	; 0x02
     75a:	87 fd       	sbrc	r24, 7
     75c:	d8 cf       	rjmp	.-80     	; 0x70e <ProcessConfigurationDescriptor+0x72>
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataOUTEndpoint))
     75e:	30 97       	sbiw	r30, 0x00	; 0
     760:	b1 f2       	breq	.-84     	; 0x70e <ProcessConfigurationDescriptor+0x72>
		/* Save the endpoint if it is an OUT type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_OUT)
		  DataOUTEndpoint = EndpointData;
	}

	StreamingInterfaceIndex      = AudioStreamingInterface->InterfaceNumber;
     762:	d8 01       	movw	r26, r16
     764:	12 96       	adiw	r26, 0x02	; 2
     766:	8c 91       	ld	r24, X
     768:	12 97       	sbiw	r26, 0x02	; 2
     76a:	80 93 17 01 	sts	0x0117, r24
	StreamingInterfaceAltSetting = AudioStreamingInterface->AlternateSetting;
     76e:	13 96       	adiw	r26, 0x03	; 3
     770:	8c 91       	ld	r24, X
     772:	80 93 18 01 	sts	0x0118, r24
	StreamingEndpointAddress     = DataOUTEndpoint->EndpointAddress;
     776:	82 81       	ldd	r24, Z+2	; 0x02
     778:	80 93 19 01 	sts	0x0119, r24

	/* Configure the Audio data OUT pipe */
	Pipe_ConfigurePipe(AUDIO_DATA_OUT_PIPE, EP_TYPE_ISOCHRONOUS, PIPE_TOKEN_OUT,
     77c:	04 81       	ldd	r16, Z+4	; 0x04
     77e:	15 81       	ldd	r17, Z+5	; 0x05
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	61 e0       	ldi	r22, 0x01	; 1
     784:	40 e2       	ldi	r20, 0x20	; 32
     786:	22 81       	ldd	r18, Z+2	; 0x02
     788:	94 e0       	ldi	r25, 0x04	; 4
     78a:	e9 2e       	mov	r14, r25
     78c:	e6 d1       	rcall	.+972    	; 0xb5a <Pipe_ConfigurePipe>
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	01 c0       	rjmp	.+2      	; 0x794 <ProcessConfigurationDescriptor+0xf8>
	                   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, PIPE_BANK_DOUBLE);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     792:	84 e0       	ldi	r24, 0x04	; 4
}
     794:	cc 5f       	subi	r28, 0xFC	; 252
     796:	dd 4f       	sbci	r29, 0xFD	; 253
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	f8 94       	cli
     79c:	de bf       	out	0x3e, r29	; 62
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	cd bf       	out	0x3d, r28	; 61
     7a2:	cf 91       	pop	r28
     7a4:	df 91       	pop	r29
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	ff 90       	pop	r15
     7ac:	ef 90       	pop	r14
     7ae:	df 90       	pop	r13
     7b0:	cf 90       	pop	r12
     7b2:	bf 90       	pop	r11
     7b4:	af 90       	pop	r10
     7b6:	08 95       	ret
		if (!(AudioControlInterface) ||
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextAudioInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Check if we haven't found an Audio Control interface yet, or if we have run out of related Audio Streaming interfaces */
			if (!(AudioControlInterface) ||
     7b8:	c6 01       	movw	r24, r12
     7ba:	b7 01       	movw	r22, r14
     7bc:	40 e3       	ldi	r20, 0x30	; 48
     7be:	53 e0       	ldi	r21, 0x03	; 3
     7c0:	4f d3       	rcall	.+1694   	; 0xe60 <USB_GetNextDescriptorComp>
     7c2:	88 23       	and	r24, r24
     7c4:	09 f0       	breq	.+2      	; 0x7c8 <ProcessConfigurationDescriptor+0x12c>
     7c6:	af cf       	rjmp	.-162    	; 0x726 <ProcessConfigurationDescriptor+0x8a>
     7c8:	c2 cf       	rjmp	.-124    	; 0x74e <ProcessConfigurationDescriptor+0xb2>

000007ca <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     7ca:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     7cc:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     7d0:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     7d4:	80 91 a0 00 	lds	r24, 0x00A0
     7d8:	8f 7d       	andi	r24, 0xDF	; 223
     7da:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     7de:	80 91 9f 00 	lds	r24, 0x009F
     7e2:	8f 7d       	andi	r24, 0xDF	; 223
     7e4:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     7e8:	80 91 9e 00 	lds	r24, 0x009E
     7ec:	81 60       	ori	r24, 0x01	; 1
     7ee:	80 93 9e 00 	sts	0x009E, r24
     7f2:	28 c0       	rjmp	.+80     	; 0x844 <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     7f4:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     7f8:	85 ff       	sbrs	r24, 5
     7fa:	06 c0       	rjmp	.+12     	; 0x808 <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     7fc:	80 91 9f 00 	lds	r24, 0x009F
     800:	8f 7d       	andi	r24, 0xDF	; 223
     802:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     806:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     808:	80 91 27 01 	lds	r24, 0x0127
     80c:	81 30       	cpi	r24, 0x01	; 1
     80e:	11 f4       	brne	.+4      	; 0x814 <USB_Host_WaitMS+0x4a>
     810:	91 e0       	ldi	r25, 0x01	; 1
     812:	1a c0       	rjmp	.+52     	; 0x848 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     814:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     818:	84 ff       	sbrs	r24, 4
     81a:	09 c0       	rjmp	.+18     	; 0x82e <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     81c:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     820:	80 91 a6 00 	lds	r24, 0x00A6
     824:	8f 7e       	andi	r24, 0xEF	; 239
     826:	80 93 a6 00 	sts	0x00A6, r24
     82a:	92 e0       	ldi	r25, 0x02	; 2
     82c:	0d c0       	rjmp	.+26     	; 0x848 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     82e:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     832:	81 ff       	sbrs	r24, 1
     834:	07 c0       	rjmp	.+14     	; 0x844 <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     836:	80 91 a6 00 	lds	r24, 0x00A6
     83a:	8d 7f       	andi	r24, 0xFD	; 253
     83c:	80 93 a6 00 	sts	0x00A6, r24
     840:	93 e0       	ldi	r25, 0x03	; 3
     842:	02 c0       	rjmp	.+4      	; 0x848 <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     844:	99 23       	and	r25, r25
     846:	b1 f6       	brne	.-84     	; 0x7f4 <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     848:	20 fd       	sbrc	r18, 0
     84a:	05 c0       	rjmp	.+10     	; 0x856 <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     84c:	80 91 9e 00 	lds	r24, 0x009E
     850:	8e 7f       	andi	r24, 0xFE	; 254
     852:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     856:	35 ff       	sbrs	r19, 5
     858:	05 c0       	rjmp	.+10     	; 0x864 <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     85a:	80 91 a0 00 	lds	r24, 0x00A0
     85e:	80 62       	ori	r24, 0x20	; 32
     860:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     864:	89 2f       	mov	r24, r25
     866:	08 95       	ret

00000868 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     868:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     86c:	80 91 a0 00 	lds	r24, 0x00A0
     870:	8d 7f       	andi	r24, 0xFD	; 253
     872:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     876:	80 91 9e 00 	lds	r24, 0x009E
     87a:	82 60       	ori	r24, 0x02	; 2
     87c:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     880:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     884:	81 fd       	sbrc	r24, 1
     886:	fc cf       	rjmp	.-8      	; 0x880 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     888:	80 91 9e 00 	lds	r24, 0x009E
     88c:	81 60       	ori	r24, 0x01	; 1
     88e:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     892:	10 92 1d 01 	sts	0x011D, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     896:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     89a:	80 91 a0 00 	lds	r24, 0x00A0
     89e:	8f 7d       	andi	r24, 0xDF	; 223
     8a0:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     8a4:	80 91 9f 00 	lds	r24, 0x009F
     8a8:	8f 7d       	andi	r24, 0xDF	; 223
     8aa:	80 93 9f 00 	sts	0x009F, r24
     8ae:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8b0:	40 ed       	ldi	r20, 0xD0	; 208
     8b2:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     8b4:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     8b8:	85 ff       	sbrs	r24, 5
     8ba:	0b c0       	rjmp	.+22     	; 0x8d2 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     8bc:	80 91 9f 00 	lds	r24, 0x009F
     8c0:	8f 7d       	andi	r24, 0xDF	; 223
     8c2:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     8c6:	80 91 9f 00 	lds	r24, 0x009F
     8ca:	8d 7f       	andi	r24, 0xFD	; 253
     8cc:	80 93 9f 00 	sts	0x009F, r24
     8d0:	05 c0       	rjmp	.+10     	; 0x8dc <USB_Host_ResetDevice+0x74>
     8d2:	ca 01       	movw	r24, r20
     8d4:	01 97       	sbiw	r24, 0x01	; 1
     8d6:	f1 f7       	brne	.-4      	; 0x8d4 <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     8d8:	21 50       	subi	r18, 0x01	; 1
     8da:	61 f7       	brne	.-40     	; 0x8b4 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     8dc:	35 ff       	sbrs	r19, 5
     8de:	05 c0       	rjmp	.+10     	; 0x8ea <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     8e0:	80 91 a0 00 	lds	r24, 0x00A0
     8e4:	80 62       	ori	r24, 0x20	; 32
     8e6:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     8ea:	60 fd       	sbrc	r22, 0
     8ec:	05 c0       	rjmp	.+10     	; 0x8f8 <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     8ee:	80 91 9e 00 	lds	r24, 0x009E
     8f2:	8e 7f       	andi	r24, 0xFE	; 254
     8f4:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     8f8:	80 91 a0 00 	lds	r24, 0x00A0
     8fc:	82 60       	ori	r24, 0x02	; 2
     8fe:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     902:	08 95       	ret

00000904 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     904:	ef 92       	push	r14
     906:	0f 93       	push	r16
     908:	1f 93       	push	r17
     90a:	df 93       	push	r29
     90c:	cf 93       	push	r28
     90e:	cd b7       	in	r28, 0x3d	; 61
     910:	de b7       	in	r29, 0x3e	; 62
     912:	28 97       	sbiw	r28, 0x08	; 8
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	f8 94       	cli
     918:	de bf       	out	0x3e, r29	; 62
     91a:	0f be       	out	0x3f, r0	; 63
     91c:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     91e:	80 91 27 01 	lds	r24, 0x0127
     922:	85 30       	cpi	r24, 0x05	; 5
     924:	09 f4       	brne	.+2      	; 0x928 <USB_Host_ProcessNextHostState+0x24>
     926:	94 c0       	rjmp	.+296    	; 0xa50 <USB_Host_ProcessNextHostState+0x14c>
     928:	86 30       	cpi	r24, 0x06	; 6
     92a:	68 f4       	brcc	.+26     	; 0x946 <USB_Host_ProcessNextHostState+0x42>
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	b9 f1       	breq	.+110    	; 0x99e <USB_Host_ProcessNextHostState+0x9a>
     930:	83 30       	cpi	r24, 0x03	; 3
     932:	18 f4       	brcc	.+6      	; 0x93a <USB_Host_ProcessNextHostState+0x36>
     934:	88 23       	and	r24, r24
     936:	a1 f0       	breq	.+40     	; 0x960 <USB_Host_ProcessNextHostState+0x5c>
     938:	04 c1       	rjmp	.+520    	; 0xb42 <USB_Host_ProcessNextHostState+0x23e>
     93a:	83 30       	cpi	r24, 0x03	; 3
     93c:	d1 f1       	breq	.+116    	; 0x9b2 <USB_Host_ProcessNextHostState+0xae>
     93e:	84 30       	cpi	r24, 0x04	; 4
     940:	09 f0       	breq	.+2      	; 0x944 <USB_Host_ProcessNextHostState+0x40>
     942:	ff c0       	rjmp	.+510    	; 0xb42 <USB_Host_ProcessNextHostState+0x23e>
     944:	5d c0       	rjmp	.+186    	; 0xa00 <USB_Host_ProcessNextHostState+0xfc>
     946:	87 30       	cpi	r24, 0x07	; 7
     948:	09 f4       	brne	.+2      	; 0x94c <USB_Host_ProcessNextHostState+0x48>
     94a:	9b c0       	rjmp	.+310    	; 0xa82 <USB_Host_ProcessNextHostState+0x17e>
     94c:	87 30       	cpi	r24, 0x07	; 7
     94e:	08 f4       	brcc	.+2      	; 0x952 <USB_Host_ProcessNextHostState+0x4e>
     950:	8a c0       	rjmp	.+276    	; 0xa66 <USB_Host_ProcessNextHostState+0x162>
     952:	88 30       	cpi	r24, 0x08	; 8
     954:	09 f4       	brne	.+2      	; 0x958 <USB_Host_ProcessNextHostState+0x54>
     956:	b3 c0       	rjmp	.+358    	; 0xabe <USB_Host_ProcessNextHostState+0x1ba>
     958:	89 30       	cpi	r24, 0x09	; 9
     95a:	09 f0       	breq	.+2      	; 0x95e <USB_Host_ProcessNextHostState+0x5a>
     95c:	f2 c0       	rjmp	.+484    	; 0xb42 <USB_Host_ProcessNextHostState+0x23e>
     95e:	d7 c0       	rjmp	.+430    	; 0xb0e <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     960:	00 91 1b 01 	lds	r16, 0x011B
     964:	10 91 1c 01 	lds	r17, 0x011C
     968:	01 15       	cp	r16, r1
     96a:	11 05       	cpc	r17, r1
     96c:	09 f4       	brne	.+2      	; 0x970 <USB_Host_ProcessNextHostState+0x6c>
     96e:	e9 c0       	rjmp	.+466    	; 0xb42 <USB_Host_ProcessNextHostState+0x23e>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	2b df       	rcall	.-426    	; 0x7ca <USB_Host_WaitMS>
     974:	68 2f       	mov	r22, r24
     976:	88 23       	and	r24, r24
     978:	31 f0       	breq	.+12     	; 0x986 <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
     97a:	80 91 1a 01 	lds	r24, 0x011A
     97e:	80 93 27 01 	sts	0x0127, r24
     982:	91 e0       	ldi	r25, 0x01	; 1
     984:	da c0       	rjmp	.+436    	; 0xb3a <USB_Host_ProcessNextHostState+0x236>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     986:	c8 01       	movw	r24, r16
     988:	01 97       	sbiw	r24, 0x01	; 1
     98a:	90 93 1c 01 	sts	0x011C, r25
     98e:	80 93 1b 01 	sts	0x011B, r24
     992:	89 2b       	or	r24, r25
     994:	09 f0       	breq	.+2      	; 0x998 <USB_Host_ProcessNextHostState+0x94>
     996:	d5 c0       	rjmp	.+426    	; 0xb42 <USB_Host_ProcessNextHostState+0x23e>
				  USB_HostState = PostWaitState;
     998:	80 91 1a 01 	lds	r24, 0x011A
     99c:	07 c0       	rjmp	.+14     	; 0x9ac <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     99e:	88 ee       	ldi	r24, 0xE8	; 232
     9a0:	93 e0       	ldi	r25, 0x03	; 3
     9a2:	90 93 1c 01 	sts	0x011C, r25
     9a6:	80 93 1b 01 	sts	0x011B, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     9aa:	83 e0       	ldi	r24, 0x03	; 3
     9ac:	80 93 27 01 	sts	0x0127, r24
     9b0:	c8 c0       	rjmp	.+400    	; 0xb42 <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     9b2:	80 91 1b 01 	lds	r24, 0x011B
     9b6:	90 91 1c 01 	lds	r25, 0x011C
     9ba:	01 97       	sbiw	r24, 0x01	; 1
     9bc:	90 93 1c 01 	sts	0x011C, r25
     9c0:	80 93 1b 01 	sts	0x011B, r24
     9c4:	01 96       	adiw	r24, 0x01	; 1
     9c6:	29 f0       	breq	.+10     	; 0x9d2 <USB_Host_ProcessNextHostState+0xce>
     9c8:	80 ed       	ldi	r24, 0xD0	; 208
     9ca:	97 e0       	ldi	r25, 0x07	; 7
     9cc:	01 97       	sbiw	r24, 0x01	; 1
     9ce:	f1 f7       	brne	.-4      	; 0x9cc <USB_Host_ProcessNextHostState+0xc8>
     9d0:	b8 c0       	rjmp	.+368    	; 0xb42 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     9d2:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     9d4:	80 91 d8 00 	lds	r24, 0x00D8
     9d8:	80 61       	ori	r24, 0x10	; 16
     9da:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     9de:	80 91 dd 00 	lds	r24, 0x00DD
     9e2:	8b 7f       	andi	r24, 0xFB	; 251
     9e4:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     9e8:	80 91 d7 00 	lds	r24, 0x00D7
     9ec:	80 61       	ori	r24, 0x10	; 16
     9ee:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     9f2:	80 91 dd 00 	lds	r24, 0x00DD
     9f6:	82 60       	ori	r24, 0x02	; 2
     9f8:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     9fc:	84 e0       	ldi	r24, 0x04	; 4
     9fe:	d6 cf       	rjmp	.-84     	; 0x9ac <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     a00:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     a04:	80 ff       	sbrs	r24, 0
     a06:	9d c0       	rjmp	.+314    	; 0xb42 <USB_Host_ProcessNextHostState+0x23e>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     a08:	80 91 9f 00 	lds	r24, 0x009F
     a0c:	8e 7f       	andi	r24, 0xFE	; 254
     a0e:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     a12:	80 91 9f 00 	lds	r24, 0x009F
     a16:	8d 7f       	andi	r24, 0xFD	; 253
     a18:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     a1c:	80 91 df 00 	lds	r24, 0x00DF
     a20:	8d 7f       	andi	r24, 0xFD	; 253
     a22:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     a26:	80 91 de 00 	lds	r24, 0x00DE
     a2a:	82 60       	ori	r24, 0x02	; 2
     a2c:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     a30:	80 91 9e 00 	lds	r24, 0x009E
     a34:	81 60       	ori	r24, 0x01	; 1
     a36:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     a3a:	ed d0       	rcall	.+474    	; 0xc16 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     a3c:	10 92 27 01 	sts	0x0127, r1
     a40:	84 e6       	ldi	r24, 0x64	; 100
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	90 93 1c 01 	sts	0x011C, r25
     a48:	80 93 1b 01 	sts	0x011B, r24
     a4c:	85 e0       	ldi	r24, 0x05	; 5
     a4e:	5c c0       	rjmp	.+184    	; 0xb08 <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     a50:	0b df       	rcall	.-490    	; 0x868 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     a52:	10 92 27 01 	sts	0x0127, r1
     a56:	88 ec       	ldi	r24, 0xC8	; 200
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	90 93 1c 01 	sts	0x011C, r25
     a5e:	80 93 1b 01 	sts	0x011B, r24
     a62:	86 e0       	ldi	r24, 0x06	; 6
     a64:	51 c0       	rjmp	.+162    	; 0xb08 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	60 e0       	ldi	r22, 0x00	; 0
     a6a:	40 e0       	ldi	r20, 0x00	; 0
     a6c:	20 e0       	ldi	r18, 0x00	; 0
     a6e:	00 e4       	ldi	r16, 0x40	; 64
     a70:	10 e0       	ldi	r17, 0x00	; 0
     a72:	ee 24       	eor	r14, r14
     a74:	72 d0       	rcall	.+228    	; 0xb5a <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a76:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     a7a:	87 ff       	sbrs	r24, 7
     a7c:	5c c0       	rjmp	.+184    	; 0xb36 <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     a7e:	87 e0       	ldi	r24, 0x07	; 7
     a80:	95 cf       	rjmp	.-214    	; 0x9ac <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     a82:	af e1       	ldi	r26, 0x1F	; 31
     a84:	b1 e0       	ldi	r27, 0x01	; 1
     a86:	eb e0       	ldi	r30, 0x0B	; 11
     a88:	f1 e0       	ldi	r31, 0x01	; 1
     a8a:	88 e0       	ldi	r24, 0x08	; 8
     a8c:	01 90       	ld	r0, Z+
     a8e:	0d 92       	st	X+, r0
     a90:	81 50       	subi	r24, 0x01	; 1
     a92:	e1 f7       	brne	.-8      	; 0xa8c <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	ab d2       	rcall	.+1366   	; 0xff0 <USB_Host_SendControlRequest>
     a9a:	68 2f       	mov	r22, r24
     a9c:	88 23       	and	r24, r24
     a9e:	09 f0       	breq	.+2      	; 0xaa2 <USB_Host_ProcessNextHostState+0x19e>
     aa0:	48 c0       	rjmp	.+144    	; 0xb32 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     aa2:	88 85       	ldd	r24, Y+8	; 0x08
     aa4:	80 93 13 01 	sts	0x0113, r24

			USB_Host_ResetDevice();
     aa8:	df de       	rcall	.-578    	; 0x868 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     aaa:	10 92 27 01 	sts	0x0127, r1
     aae:	88 ec       	ldi	r24, 0xC8	; 200
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	90 93 1c 01 	sts	0x011C, r25
     ab6:	80 93 1b 01 	sts	0x011B, r24
     aba:	88 e0       	ldi	r24, 0x08	; 8
     abc:	25 c0       	rjmp	.+74     	; 0xb08 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     abe:	00 91 13 01 	lds	r16, 0x0113
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	60 e0       	ldi	r22, 0x00	; 0
     ac6:	40 e0       	ldi	r20, 0x00	; 0
     ac8:	20 e0       	ldi	r18, 0x00	; 0
     aca:	10 e0       	ldi	r17, 0x00	; 0
     acc:	ee 24       	eor	r14, r14
     ace:	45 d0       	rcall	.+138    	; 0xb5a <Pipe_ConfigurePipe>
     ad0:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     ad4:	87 ff       	sbrs	r24, 7
     ad6:	2f c0       	rjmp	.+94     	; 0xb36 <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     ad8:	af e1       	ldi	r26, 0x1F	; 31
     ada:	b1 e0       	ldi	r27, 0x01	; 1
     adc:	e3 e0       	ldi	r30, 0x03	; 3
     ade:	f1 e0       	ldi	r31, 0x01	; 1
     ae0:	88 e0       	ldi	r24, 0x08	; 8
     ae2:	01 90       	ld	r0, Z+
     ae4:	0d 92       	st	X+, r0
     ae6:	81 50       	subi	r24, 0x01	; 1
     ae8:	e1 f7       	brne	.-8      	; 0xae2 <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	80 d2       	rcall	.+1280   	; 0xff0 <USB_Host_SendControlRequest>
     af0:	68 2f       	mov	r22, r24
     af2:	88 23       	and	r24, r24
     af4:	f1 f4       	brne	.+60     	; 0xb32 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     af6:	10 92 27 01 	sts	0x0127, r1
     afa:	84 e6       	ldi	r24, 0x64	; 100
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	90 93 1c 01 	sts	0x011C, r25
     b02:	80 93 1b 01 	sts	0x011B, r24
     b06:	89 e0       	ldi	r24, 0x09	; 9
     b08:	80 93 1a 01 	sts	0x011A, r24
     b0c:	1a c0       	rjmp	.+52     	; 0xb42 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     b14:	8a e0       	ldi	r24, 0x0A	; 10
     b16:	80 93 27 01 	sts	0x0127, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     b1a:	8d dc       	rcall	.-1766   	; 0x436 <EVENT_USB_Host_DeviceEnumerationComplete>
     b1c:	12 c0       	rjmp	.+36     	; 0xb42 <USB_Host_ProcessNextHostState+0x23e>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     b1e:	89 2f       	mov	r24, r25
     b20:	33 dc       	rcall	.-1946   	; 0x388 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b22:	80 91 dd 00 	lds	r24, 0x00DD
     b26:	81 60       	ori	r24, 0x01	; 1
     b28:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     b2c:	74 dc       	rcall	.-1816   	; 0x416 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     b2e:	87 d0       	rcall	.+270    	; 0xc3e <USB_ResetInterface>
     b30:	08 c0       	rjmp	.+16     	; 0xb42 <USB_Host_ProcessNextHostState+0x23e>
	}
}
     b32:	93 e0       	ldi	r25, 0x03	; 3
     b34:	02 c0       	rjmp	.+4      	; 0xb3a <USB_Host_ProcessNextHostState+0x236>
     b36:	94 e0       	ldi	r25, 0x04	; 4
     b38:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     b3a:	80 91 27 01 	lds	r24, 0x0127
     b3e:	81 30       	cpi	r24, 0x01	; 1
     b40:	71 f7       	brne	.-36     	; 0xb1e <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     b42:	28 96       	adiw	r28, 0x08	; 8
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	f8 94       	cli
     b48:	de bf       	out	0x3e, r29	; 62
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	cd bf       	out	0x3d, r28	; 61
     b4e:	cf 91       	pop	r28
     b50:	df 91       	pop	r29
     b52:	1f 91       	pop	r17
     b54:	0f 91       	pop	r16
     b56:	ef 90       	pop	r14
     b58:	08 95       	ret

00000b5a <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     b5a:	ef 92       	push	r14
     b5c:	0f 93       	push	r16
     b5e:	1f 93       	push	r17
     b60:	e8 2f       	mov	r30, r24
     b62:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     b64:	62 95       	swap	r22
     b66:	66 0f       	add	r22, r22
     b68:	66 0f       	add	r22, r22
     b6a:	60 7c       	andi	r22, 0xC0	; 192
     b6c:	64 2b       	or	r22, r20
     b6e:	2f 70       	andi	r18, 0x0F	; 15
     b70:	62 2b       	or	r22, r18
     b72:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     b74:	72 60       	ori	r23, 0x02	; 2
     b76:	45 c0       	rjmp	.+138    	; 0xc02 <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     b78:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     b7c:	3e 17       	cp	r19, r30
     b7e:	a1 f4       	brne	.+40     	; 0xba8 <Pipe_ConfigurePipe+0x4e>
     b80:	88 e0       	ldi	r24, 0x08	; 8
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	03 c0       	rjmp	.+6      	; 0xb8e <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     b88:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     b8a:	88 0f       	add	r24, r24
     b8c:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     b8e:	80 17       	cp	r24, r16
     b90:	91 07       	cpc	r25, r17
     b92:	10 f4       	brcc	.+4      	; 0xb98 <Pipe_ConfigurePipe+0x3e>
     b94:	25 30       	cpi	r18, 0x05	; 5
     b96:	c1 f7       	brne	.-16     	; 0xb88 <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     b98:	92 2f       	mov	r25, r18
     b9a:	92 95       	swap	r25
     b9c:	90 7f       	andi	r25, 0xF0	; 240
     b9e:	97 2b       	or	r25, r23
     ba0:	56 2f       	mov	r21, r22
     ba2:	40 e0       	ldi	r20, 0x00	; 0
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	08 c0       	rjmp	.+16     	; 0xbb8 <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     ba8:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     bac:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     bb0:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
     bb4:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     bb8:	91 ff       	sbrs	r25, 1
     bba:	22 c0       	rjmp	.+68     	; 0xc00 <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     bbc:	80 91 a9 00 	lds	r24, 0x00A9
     bc0:	8e 7f       	andi	r24, 0xFE	; 254
     bc2:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     bc6:	80 91 ab 00 	lds	r24, 0x00AB
     bca:	8d 7f       	andi	r24, 0xFD	; 253
     bcc:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     bd0:	80 91 a9 00 	lds	r24, 0x00A9
     bd4:	81 60       	ori	r24, 0x01	; 1
     bd6:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     bda:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
     bde:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
     be2:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
     be6:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     bea:	80 91 a9 00 	lds	r24, 0x00A9
     bee:	80 62       	ori	r24, 0x20	; 32
     bf0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     bf4:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     bf8:	87 fd       	sbrc	r24, 7
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <Pipe_ConfigurePipe+0xa6>
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	07 c0       	rjmp	.+14     	; 0xc0e <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     c00:	3f 5f       	subi	r19, 0xFF	; 255
     c02:	37 30       	cpi	r19, 0x07	; 7
     c04:	08 f4       	brcc	.+2      	; 0xc08 <Pipe_ConfigurePipe+0xae>
     c06:	b8 cf       	rjmp	.-144    	; 0xb78 <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     c08:	e0 93 a7 00 	sts	0x00A7, r30
     c0c:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
     c0e:	1f 91       	pop	r17
     c10:	0f 91       	pop	r16
     c12:	ef 90       	pop	r14
     c14:	08 95       	ret

00000c16 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     c16:	10 92 f8 00 	sts	0x00F8, r1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     c20:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     c24:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     c28:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     c2c:	80 91 a9 00 	lds	r24, 0x00A9
     c30:	8e 7f       	andi	r24, 0xFE	; 254
     c32:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     c36:	9f 5f       	subi	r25, 0xFF	; 255
     c38:	97 30       	cpi	r25, 0x07	; 7
     c3a:	81 f7       	brne	.-32     	; 0xc1c <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     c3c:	08 95       	ret

00000c3e <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     c3e:	70 d0       	rcall	.+224    	; 0xd20 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     c40:	77 d0       	rcall	.+238    	; 0xd30 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     c42:	80 91 d8 00 	lds	r24, 0x00D8
     c46:	8f 77       	andi	r24, 0x7F	; 127
     c48:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     c4c:	80 91 d8 00 	lds	r24, 0x00D8
     c50:	80 68       	ori	r24, 0x80	; 128
     c52:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     c56:	80 91 d8 00 	lds	r24, 0x00D8
     c5a:	8f 7d       	andi	r24, 0xDF	; 223
     c5c:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     c60:	80 91 d7 00 	lds	r24, 0x00D7
     c64:	8f 77       	andi	r24, 0x7F	; 127
     c66:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     c6a:	8c e0       	ldi	r24, 0x0C	; 12
     c6c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     c6e:	8e e0       	ldi	r24, 0x0E	; 14
     c70:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     c72:	09 b4       	in	r0, 0x29	; 41
     c74:	00 fe       	sbrs	r0, 0
     c76:	fd cf       	rjmp	.-6      	; 0xc72 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	80 93 27 01 	sts	0x0127, r24
	USB_Host_ConfigurationNumber = 0;
     c7e:	10 92 1d 01 	sts	0x011D, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     c82:	80 e4       	ldi	r24, 0x40	; 64
     c84:	80 93 13 01 	sts	0x0113, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     c88:	80 91 d8 00 	lds	r24, 0x00D8
     c8c:	80 64       	ori	r24, 0x40	; 64
     c8e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c92:	80 91 dd 00 	lds	r24, 0x00DD
     c96:	81 60       	ori	r24, 0x01	; 1
     c98:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     c9c:	80 91 dd 00 	lds	r24, 0x00DD
     ca0:	84 60       	ori	r24, 0x04	; 4
     ca2:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     ca6:	80 91 d7 00 	lds	r24, 0x00D7
     caa:	8f 7e       	andi	r24, 0xEF	; 239
     cac:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     cb0:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     cb2:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     cb4:	80 91 de 00 	lds	r24, 0x00DE
     cb8:	81 60       	ori	r24, 0x01	; 1
     cba:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     cbe:	80 91 de 00 	lds	r24, 0x00DE
     cc2:	84 60       	ori	r24, 0x04	; 4
     cc4:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     cc8:	80 91 e0 00 	lds	r24, 0x00E0
     ccc:	8e 7f       	andi	r24, 0xFE	; 254
     cce:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     cd2:	80 91 d8 00 	lds	r24, 0x00D8
     cd6:	80 61       	ori	r24, 0x10	; 16
     cd8:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     cdc:	08 95       	ret

00000cde <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     cde:	e7 ed       	ldi	r30, 0xD7	; 215
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	81 60       	ori	r24, 0x01	; 1
     ce6:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	80 93 1e 01 	sts	0x011E, r24

	USB_ResetInterface();
}
     cee:	a7 cf       	rjmp	.-178    	; 0xc3e <USB_ResetInterface>

00000cf0 <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     cf0:	17 d0       	rcall	.+46     	; 0xd20 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     cf2:	1e d0       	rcall	.+60     	; 0xd30 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     cf4:	e0 ee       	ldi	r30, 0xE0	; 224
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	81 60       	ori	r24, 0x01	; 1
     cfc:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     cfe:	a8 ed       	ldi	r26, 0xD8	; 216
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	8c 91       	ld	r24, X
     d04:	8f 77       	andi	r24, 0x7F	; 127
     d06:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     d08:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     d0a:	e7 ed       	ldi	r30, 0xD7	; 215
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	8e 7f       	andi	r24, 0xFE	; 254
     d12:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     d14:	8c 91       	ld	r24, X
     d16:	8f 7e       	andi	r24, 0xEF	; 239
     d18:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     d1a:	10 92 1e 01 	sts	0x011E, r1
}
     d1e:	08 95       	ret

00000d20 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     d20:	e8 ed       	ldi	r30, 0xD8	; 216
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	8c 7f       	andi	r24, 0xFC	; 252
     d28:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     d2a:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     d2e:	08 95       	ret

00000d30 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     d30:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     d34:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     d38:	08 95       	ret

00000d3a <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     d3a:	1f 92       	push	r1
     d3c:	0f 92       	push	r0
     d3e:	0f b6       	in	r0, 0x3f	; 63
     d40:	0f 92       	push	r0
     d42:	0b b6       	in	r0, 0x3b	; 59
     d44:	0f 92       	push	r0
     d46:	11 24       	eor	r1, r1
     d48:	2f 93       	push	r18
     d4a:	3f 93       	push	r19
     d4c:	4f 93       	push	r20
     d4e:	5f 93       	push	r21
     d50:	6f 93       	push	r22
     d52:	7f 93       	push	r23
     d54:	8f 93       	push	r24
     d56:	9f 93       	push	r25
     d58:	af 93       	push	r26
     d5a:	bf 93       	push	r27
     d5c:	ef 93       	push	r30
     d5e:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     d60:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     d64:	85 ff       	sbrs	r24, 5
     d66:	0a c0       	rjmp	.+20     	; 0xd7c <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     d68:	80 91 a0 00 	lds	r24, 0x00A0
     d6c:	85 ff       	sbrs	r24, 5
     d6e:	06 c0       	rjmp	.+12     	; 0xd7c <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     d70:	80 91 9f 00 	lds	r24, 0x009F
     d74:	8f 7d       	andi	r24, 0xDF	; 223
     d76:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     d7a:	10 d1       	rcall	.+544    	; 0xf9c <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     d7c:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     d80:	81 ff       	sbrs	r24, 1
     d82:	15 c0       	rjmp	.+42     	; 0xdae <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     d84:	80 91 a0 00 	lds	r24, 0x00A0
     d88:	81 ff       	sbrs	r24, 1
     d8a:	11 c0       	rjmp	.+34     	; 0xdae <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     d8c:	80 91 9f 00 	lds	r24, 0x009F
     d90:	8d 7f       	andi	r24, 0xFD	; 253
     d92:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     d96:	80 91 9f 00 	lds	r24, 0x009F
     d9a:	8e 7f       	andi	r24, 0xFE	; 254
     d9c:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     da0:	80 91 a0 00 	lds	r24, 0x00A0
     da4:	8d 7f       	andi	r24, 0xFD	; 253
     da6:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     daa:	35 db       	rcall	.-2454   	; 0x416 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     dac:	48 df       	rcall	.-368    	; 0xc3e <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     dae:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     db2:	81 ff       	sbrs	r24, 1
     db4:	15 c0       	rjmp	.+42     	; 0xde0 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     db6:	80 91 de 00 	lds	r24, 0x00DE
     dba:	81 ff       	sbrs	r24, 1
     dbc:	11 c0       	rjmp	.+34     	; 0xde0 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     dbe:	80 91 df 00 	lds	r24, 0x00DF
     dc2:	8d 7f       	andi	r24, 0xFD	; 253
     dc4:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     dc8:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     dca:	80 91 dd 00 	lds	r24, 0x00DD
     dce:	81 60       	ori	r24, 0x01	; 1
     dd0:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	03 db       	rcall	.-2554   	; 0x3de <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     dd8:	1e db       	rcall	.-2500   	; 0x416 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	80 93 27 01 	sts	0x0127, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     de0:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     de4:	80 ff       	sbrs	r24, 0
     de6:	17 c0       	rjmp	.+46     	; 0xe16 <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     de8:	80 91 de 00 	lds	r24, 0x00DE
     dec:	80 ff       	sbrs	r24, 0
     dee:	13 c0       	rjmp	.+38     	; 0xe16 <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     df0:	80 91 df 00 	lds	r24, 0x00DF
     df4:	8e 7f       	andi	r24, 0xFE	; 254
     df6:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     dfa:	80 91 de 00 	lds	r24, 0x00DE
     dfe:	8e 7f       	andi	r24, 0xFE	; 254
     e00:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     e04:	10 db       	rcall	.-2528   	; 0x426 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     e06:	80 91 a0 00 	lds	r24, 0x00A0
     e0a:	82 60       	ori	r24, 0x02	; 2
     e0c:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     e10:	82 e0       	ldi	r24, 0x02	; 2
     e12:	80 93 27 01 	sts	0x0127, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     e16:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     e1a:	82 ff       	sbrs	r24, 2
     e1c:	0e c0       	rjmp	.+28     	; 0xe3a <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     e1e:	80 91 de 00 	lds	r24, 0x00DE
     e22:	82 ff       	sbrs	r24, 2
     e24:	0a c0       	rjmp	.+20     	; 0xe3a <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     e26:	80 91 df 00 	lds	r24, 0x00DF
     e2a:	8b 7f       	andi	r24, 0xFB	; 251
     e2c:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     e30:	82 e0       	ldi	r24, 0x02	; 2
     e32:	60 e0       	ldi	r22, 0x00	; 0
     e34:	a9 da       	rcall	.-2734   	; 0x388 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     e36:	ef da       	rcall	.-2594   	; 0x416 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     e38:	02 df       	rcall	.-508    	; 0xc3e <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     e3a:	ff 91       	pop	r31
     e3c:	ef 91       	pop	r30
     e3e:	bf 91       	pop	r27
     e40:	af 91       	pop	r26
     e42:	9f 91       	pop	r25
     e44:	8f 91       	pop	r24
     e46:	7f 91       	pop	r23
     e48:	6f 91       	pop	r22
     e4a:	5f 91       	pop	r21
     e4c:	4f 91       	pop	r20
     e4e:	3f 91       	pop	r19
     e50:	2f 91       	pop	r18
     e52:	0f 90       	pop	r0
     e54:	0b be       	out	0x3b, r0	; 59
     e56:	0f 90       	pop	r0
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	0f 90       	pop	r0
     e5c:	1f 90       	pop	r1
     e5e:	18 95       	reti

00000e60 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     e60:	af 92       	push	r10
     e62:	bf 92       	push	r11
     e64:	cf 92       	push	r12
     e66:	df 92       	push	r13
     e68:	ef 92       	push	r14
     e6a:	ff 92       	push	r15
     e6c:	0f 93       	push	r16
     e6e:	1f 93       	push	r17
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
     e74:	7c 01       	movw	r14, r24
     e76:	eb 01       	movw	r28, r22
     e78:	6a 01       	movw	r12, r20
     e7a:	24 c0       	rjmp	.+72     	; 0xec4 <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     e7c:	e8 81       	ld	r30, Y
     e7e:	f9 81       	ldd	r31, Y+1	; 0x01
     e80:	be 2e       	mov	r11, r30
     e82:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     e84:	80 81       	ld	r24, Z
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	98 01       	movw	r18, r16
     e8a:	80 17       	cp	r24, r16
     e8c:	91 07       	cpc	r25, r17
     e8e:	08 f4       	brcc	.+2      	; 0xe92 <USB_GetNextDescriptorComp+0x32>
     e90:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     e92:	e2 0f       	add	r30, r18
     e94:	f3 1f       	adc	r31, r19
     e96:	f9 83       	std	Y+1, r31	; 0x01
     e98:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     e9a:	f7 01       	movw	r30, r14
     e9c:	80 81       	ld	r24, Z
     e9e:	91 81       	ldd	r25, Z+1	; 0x01
     ea0:	82 1b       	sub	r24, r18
     ea2:	93 0b       	sbc	r25, r19
     ea4:	91 83       	std	Z+1, r25	; 0x01
     ea6:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     ea8:	88 81       	ld	r24, Y
     eaa:	99 81       	ldd	r25, Y+1	; 0x01
     eac:	f6 01       	movw	r30, r12
     eae:	09 95       	icall
     eb0:	82 30       	cpi	r24, 0x02	; 2
     eb2:	41 f0       	breq	.+16     	; 0xec4 <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     eb4:	81 30       	cpi	r24, 0x01	; 1
     eb6:	69 f4       	brne	.+26     	; 0xed2 <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
     eb8:	b8 82       	st	Y, r11
     eba:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
     ebc:	f7 01       	movw	r30, r14
     ebe:	11 83       	std	Z+1, r17	; 0x01
     ec0:	00 83       	st	Z, r16
     ec2:	07 c0       	rjmp	.+14     	; 0xed2 <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     ec4:	f7 01       	movw	r30, r14
     ec6:	00 81       	ld	r16, Z
     ec8:	11 81       	ldd	r17, Z+1	; 0x01
     eca:	01 15       	cp	r16, r1
     ecc:	11 05       	cpc	r17, r1
     ece:	b1 f6       	brne	.-84     	; 0xe7c <USB_GetNextDescriptorComp+0x1c>
     ed0:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
     ed6:	1f 91       	pop	r17
     ed8:	0f 91       	pop	r16
     eda:	ff 90       	pop	r15
     edc:	ef 90       	pop	r14
     ede:	df 90       	pop	r13
     ee0:	cf 90       	pop	r12
     ee2:	bf 90       	pop	r11
     ee4:	af 90       	pop	r10
     ee6:	08 95       	ret

00000ee8 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     ee8:	cf 92       	push	r12
     eea:	df 92       	push	r13
     eec:	ef 92       	push	r14
     eee:	ff 92       	push	r15
     ef0:	0f 93       	push	r16
     ef2:	1f 93       	push	r17
     ef4:	df 93       	push	r29
     ef6:	cf 93       	push	r28
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
     efc:	29 97       	sbiw	r28, 0x09	; 9
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	f8 94       	cli
     f02:	de bf       	out	0x3e, r29	; 62
     f04:	0f be       	out	0x3f, r0	; 63
     f06:	cd bf       	out	0x3d, r28	; 61
     f08:	6b 01       	movw	r12, r22
     f0a:	8a 01       	movw	r16, r20
     f0c:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     f0e:	90 e8       	ldi	r25, 0x80	; 128
     f10:	90 93 1f 01 	sts	0x011F, r25
     f14:	96 e0       	ldi	r25, 0x06	; 6
     f16:	90 93 20 01 	sts	0x0120, r25
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	01 97       	sbiw	r24, 0x01	; 1
     f1e:	92 60       	ori	r25, 0x02	; 2
     f20:	90 93 22 01 	sts	0x0122, r25
     f24:	80 93 21 01 	sts	0x0121, r24
     f28:	10 92 24 01 	sts	0x0124, r1
     f2c:	10 92 23 01 	sts	0x0123, r1
     f30:	89 e0       	ldi	r24, 0x09	; 9
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	90 93 26 01 	sts	0x0126, r25
     f38:	80 93 25 01 	sts	0x0125, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     f3c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     f40:	ce 01       	movw	r24, r28
     f42:	01 96       	adiw	r24, 0x01	; 1
     f44:	55 d0       	rcall	.+170    	; 0xff0 <USB_Host_SendControlRequest>
     f46:	28 2f       	mov	r18, r24
     f48:	88 23       	and	r24, r24
     f4a:	c1 f4       	brne	.+48     	; 0xf7c <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     f4c:	8b 81       	ldd	r24, Y+3	; 0x03
     f4e:	9c 81       	ldd	r25, Y+4	; 0x04
     f50:	f6 01       	movw	r30, r12
     f52:	91 83       	std	Z+1, r25	; 0x01
     f54:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     f56:	e8 16       	cp	r14, r24
     f58:	f9 06       	cpc	r15, r25
     f5a:	10 f4       	brcc	.+4      	; 0xf60 <USB_Host_GetDeviceConfigDescriptor+0x78>
     f5c:	25 e0       	ldi	r18, 0x05	; 5
     f5e:	0e c0       	rjmp	.+28     	; 0xf7c <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     f60:	90 93 26 01 	sts	0x0126, r25
     f64:	80 93 25 01 	sts	0x0125, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     f68:	c8 01       	movw	r24, r16
     f6a:	42 d0       	rcall	.+132    	; 0xff0 <USB_Host_SendControlRequest>
     f6c:	28 2f       	mov	r18, r24
     f6e:	88 23       	and	r24, r24
     f70:	29 f4       	brne	.+10     	; 0xf7c <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     f72:	f8 01       	movw	r30, r16
     f74:	81 81       	ldd	r24, Z+1	; 0x01
     f76:	82 30       	cpi	r24, 0x02	; 2
     f78:	09 f0       	breq	.+2      	; 0xf7c <USB_Host_GetDeviceConfigDescriptor+0x94>
     f7a:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     f7c:	82 2f       	mov	r24, r18
     f7e:	29 96       	adiw	r28, 0x09	; 9
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	f8 94       	cli
     f84:	de bf       	out	0x3e, r29	; 62
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	cd bf       	out	0x3d, r28	; 61
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	1f 91       	pop	r17
     f90:	0f 91       	pop	r16
     f92:	ff 90       	pop	r15
     f94:	ef 90       	pop	r14
     f96:	df 90       	pop	r13
     f98:	cf 90       	pop	r12
     f9a:	08 95       	ret

00000f9c <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     f9c:	08 95       	ret

00000f9e <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     f9e:	1f 93       	push	r17
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	18 2f       	mov	r17, r24
     fa6:	c8 ee       	ldi	r28, 0xE8	; 232
     fa8:	d3 e0       	ldi	r29, 0x03	; 3
     faa:	09 c0       	rjmp	.+18     	; 0xfbe <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	0d dc       	rcall	.-2022   	; 0x7ca <USB_Host_WaitMS>
     fb0:	88 23       	and	r24, r24
     fb2:	d1 f4       	brne	.+52     	; 0xfe8 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     fb4:	20 97       	sbiw	r28, 0x00	; 0
     fb6:	11 f4       	brne	.+4      	; 0xfbc <USB_Host_WaitForIOS+0x1e>
     fb8:	84 e0       	ldi	r24, 0x04	; 4
     fba:	16 c0       	rjmp	.+44     	; 0xfe8 <USB_Host_WaitForIOS+0x4a>
     fbc:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     fbe:	11 23       	and	r17, r17
     fc0:	29 f4       	brne	.+10     	; 0xfcc <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     fc2:	80 91 a6 00 	lds	r24, 0x00A6
     fc6:	83 ff       	sbrs	r24, 3
     fc8:	f1 cf       	rjmp	.-30     	; 0xfac <USB_Host_WaitForIOS+0xe>
     fca:	0d c0       	rjmp	.+26     	; 0xfe6 <USB_Host_WaitForIOS+0x48>
     fcc:	11 30       	cpi	r17, 0x01	; 1
     fce:	29 f4       	brne	.+10     	; 0xfda <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     fd0:	80 91 a6 00 	lds	r24, 0x00A6
     fd4:	80 ff       	sbrs	r24, 0
     fd6:	ea cf       	rjmp	.-44     	; 0xfac <USB_Host_WaitForIOS+0xe>
     fd8:	06 c0       	rjmp	.+12     	; 0xfe6 <USB_Host_WaitForIOS+0x48>
     fda:	12 30       	cpi	r17, 0x02	; 2
     fdc:	39 f7       	brne	.-50     	; 0xfac <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     fde:	80 91 a6 00 	lds	r24, 0x00A6
     fe2:	82 ff       	sbrs	r24, 2
     fe4:	e3 cf       	rjmp	.-58     	; 0xfac <USB_Host_WaitForIOS+0xe>
     fe6:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	08 95       	ret

00000ff0 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     ff0:	ff 92       	push	r15
     ff2:	0f 93       	push	r16
     ff4:	1f 93       	push	r17
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	18 2f       	mov	r17, r24
     ffc:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     ffe:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1002:	c0 91 25 01 	lds	r28, 0x0125
    1006:	d0 91 26 01 	lds	r29, 0x0126
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    100a:	80 91 9e 00 	lds	r24, 0x009E
    100e:	81 60       	ori	r24, 0x01	; 1
    1010:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	d9 db       	rcall	.-2126   	; 0x7ca <USB_Host_WaitMS>
    1018:	98 2f       	mov	r25, r24
    101a:	88 23       	and	r24, r24
    101c:	09 f0       	breq	.+2      	; 0x1020 <USB_Host_SendControlRequest+0x30>
    101e:	ee c0       	rjmp	.+476    	; 0x11fc <USB_Host_SendControlRequest+0x20c>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1020:	80 91 aa 00 	lds	r24, 0x00AA
    1024:	8f 7c       	andi	r24, 0xCF	; 207
    1026:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    102a:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    102e:	80 91 a6 00 	lds	r24, 0x00A6
    1032:	8f 7e       	andi	r24, 0xEF	; 239
    1034:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1038:	80 91 a9 00 	lds	r24, 0x00A9
    103c:	8f 7b       	andi	r24, 0xBF	; 191
    103e:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearError();

	Pipe_Unfreeze();

	Pipe_Write_8(USB_ControlRequest.bmRequestType);
    1042:	80 91 1f 01 	lds	r24, 0x011F
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1046:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
    104a:	80 91 20 01 	lds	r24, 0x0120
    104e:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
    1052:	80 91 21 01 	lds	r24, 0x0121
    1056:	90 91 22 01 	lds	r25, 0x0122
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    105a:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    105e:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
    1062:	80 91 23 01 	lds	r24, 0x0123
    1066:	90 91 24 01 	lds	r25, 0x0124
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    106a:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    106e:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
    1072:	80 91 25 01 	lds	r24, 0x0125
    1076:	90 91 26 01 	lds	r25, 0x0126
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    107a:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    107e:	90 93 af 00 	sts	0x00AF, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1082:	80 91 a6 00 	lds	r24, 0x00A6
    1086:	87 77       	andi	r24, 0x77	; 119
    1088:	80 93 a6 00 	sts	0x00A6, r24

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	87 df       	rcall	.-242    	; 0xf9e <USB_Host_WaitForIOS>
    1090:	98 2f       	mov	r25, r24
    1092:	88 23       	and	r24, r24
    1094:	09 f0       	breq	.+2      	; 0x1098 <USB_Host_SendControlRequest+0xa8>
    1096:	b2 c0       	rjmp	.+356    	; 0x11fc <USB_Host_SendControlRequest+0x20c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1098:	80 91 a9 00 	lds	r24, 0x00A9
    109c:	80 64       	ori	r24, 0x40	; 64
    109e:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	92 db       	rcall	.-2268   	; 0x7ca <USB_Host_WaitMS>
    10a6:	98 2f       	mov	r25, r24
    10a8:	88 23       	and	r24, r24
    10aa:	09 f0       	breq	.+2      	; 0x10ae <USB_Host_SendControlRequest+0xbe>
    10ac:	a7 c0       	rjmp	.+334    	; 0x11fc <USB_Host_SendControlRequest+0x20c>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
    10ae:	21 2f       	mov	r18, r17
    10b0:	30 2f       	mov	r19, r16
    10b2:	c9 01       	movw	r24, r18
    10b4:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    10b6:	80 91 1f 01 	lds	r24, 0x011F
    10ba:	87 ff       	sbrs	r24, 7
    10bc:	52 c0       	rjmp	.+164    	; 0x1162 <USB_Host_SendControlRequest+0x172>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10be:	80 91 aa 00 	lds	r24, 0x00AA
    10c2:	8f 7c       	andi	r24, 0xCF	; 207
    10c4:	80 61       	ori	r24, 0x10	; 16
    10c6:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    10ca:	01 15       	cp	r16, r1
    10cc:	11 05       	cpc	r17, r1
    10ce:	69 f5       	brne	.+90     	; 0x112a <USB_Host_SendControlRequest+0x13a>
    10d0:	2e c0       	rjmp	.+92     	; 0x112e <USB_Host_SendControlRequest+0x13e>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10d2:	80 91 a9 00 	lds	r24, 0x00A9
    10d6:	8f 7b       	andi	r24, 0xBF	; 191
    10d8:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	5f df       	rcall	.-322    	; 0xf9e <USB_Host_WaitForIOS>
    10e0:	98 2f       	mov	r25, r24
    10e2:	88 23       	and	r24, r24
    10e4:	09 f0       	breq	.+2      	; 0x10e8 <USB_Host_SendControlRequest+0xf8>
    10e6:	8a c0       	rjmp	.+276    	; 0x11fc <USB_Host_SendControlRequest+0x20c>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    10e8:	80 91 f6 00 	lds	r24, 0x00F6
    10ec:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    10f0:	89 2b       	or	r24, r25
    10f2:	49 f4       	brne	.+18     	; 0x1106 <USB_Host_SendControlRequest+0x116>
    10f4:	c0 e0       	ldi	r28, 0x00	; 0
    10f6:	d0 e0       	ldi	r29, 0x00	; 0
    10f8:	06 c0       	rjmp	.+12     	; 0x1106 <USB_Host_SendControlRequest+0x116>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    10fa:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    10fe:	f8 01       	movw	r30, r16
    1100:	81 93       	st	Z+, r24
    1102:	8f 01       	movw	r16, r30
					DataLen--;
    1104:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1106:	80 91 f6 00 	lds	r24, 0x00F6
    110a:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    110e:	89 2b       	or	r24, r25
    1110:	11 f0       	breq	.+4      	; 0x1116 <USB_Host_SendControlRequest+0x126>
    1112:	20 97       	sbiw	r28, 0x00	; 0
    1114:	91 f7       	brne	.-28     	; 0x10fa <USB_Host_SendControlRequest+0x10a>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1116:	80 91 a9 00 	lds	r24, 0x00A9
    111a:	80 64       	ori	r24, 0x40	; 64
    111c:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1120:	80 91 a6 00 	lds	r24, 0x00A6
    1124:	8e 77       	andi	r24, 0x7E	; 126
    1126:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    112a:	20 97       	sbiw	r28, 0x00	; 0
    112c:	91 f6       	brne	.-92     	; 0x10d2 <USB_Host_SendControlRequest+0xe2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    112e:	80 91 aa 00 	lds	r24, 0x00AA
    1132:	8f 7c       	andi	r24, 0xCF	; 207
    1134:	80 62       	ori	r24, 0x20	; 32
    1136:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    113a:	80 91 a9 00 	lds	r24, 0x00A9
    113e:	8f 7b       	andi	r24, 0xBF	; 191
    1140:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1144:	82 e0       	ldi	r24, 0x02	; 2
    1146:	2b df       	rcall	.-426    	; 0xf9e <USB_Host_WaitForIOS>
    1148:	98 2f       	mov	r25, r24
    114a:	88 23       	and	r24, r24
    114c:	09 f0       	breq	.+2      	; 0x1150 <USB_Host_SendControlRequest+0x160>
    114e:	56 c0       	rjmp	.+172    	; 0x11fc <USB_Host_SendControlRequest+0x20c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1150:	80 91 a6 00 	lds	r24, 0x00A6
    1154:	8b 77       	andi	r24, 0x7B	; 123
    1156:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    115a:	82 e0       	ldi	r24, 0x02	; 2
    115c:	20 df       	rcall	.-448    	; 0xf9e <USB_Host_WaitForIOS>
    115e:	98 2f       	mov	r25, r24
    1160:	4d c0       	rjmp	.+154    	; 0x11fc <USB_Host_SendControlRequest+0x20c>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    1162:	01 15       	cp	r16, r1
    1164:	11 05       	cpc	r17, r1
    1166:	a9 f1       	breq	.+106    	; 0x11d2 <USB_Host_SendControlRequest+0x1e2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1168:	80 91 aa 00 	lds	r24, 0x00AA
    116c:	8f 7c       	andi	r24, 0xCF	; 207
    116e:	80 62       	ori	r24, 0x20	; 32
    1170:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1174:	80 91 a9 00 	lds	r24, 0x00A9
    1178:	8f 7b       	andi	r24, 0xBF	; 191
    117a:	80 93 a9 00 	sts	0x00A9, r24
    117e:	1d c0       	rjmp	.+58     	; 0x11ba <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1180:	82 e0       	ldi	r24, 0x02	; 2
    1182:	0d df       	rcall	.-486    	; 0xf9e <USB_Host_WaitForIOS>
    1184:	98 2f       	mov	r25, r24
    1186:	88 23       	and	r24, r24
    1188:	c9 f5       	brne	.+114    	; 0x11fc <USB_Host_SendControlRequest+0x20c>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    118a:	80 91 13 01 	lds	r24, 0x0113
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	07 c0       	rjmp	.+14     	; 0x11a2 <USB_Host_SendControlRequest+0x1b2>
				{
					Pipe_Write_8(*(DataStream++));
    1194:	f8 01       	movw	r30, r16
    1196:	81 91       	ld	r24, Z+
    1198:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    119a:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    119e:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    11a0:	39 f0       	breq	.+14     	; 0x11b0 <USB_Host_SendControlRequest+0x1c0>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    11a2:	80 91 f6 00 	lds	r24, 0x00F6
    11a6:	90 91 f7 00 	lds	r25, 0x00F7
    11aa:	82 17       	cp	r24, r18
    11ac:	93 07       	cpc	r25, r19
    11ae:	90 f3       	brcs	.-28     	; 0x1194 <USB_Host_SendControlRequest+0x1a4>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    11b0:	80 91 a6 00 	lds	r24, 0x00A6
    11b4:	8b 77       	andi	r24, 0x7B	; 123
    11b6:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    11ba:	20 97       	sbiw	r28, 0x00	; 0
    11bc:	09 f7       	brne	.-62     	; 0x1180 <USB_Host_SendControlRequest+0x190>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11be:	82 e0       	ldi	r24, 0x02	; 2
    11c0:	ee de       	rcall	.-548    	; 0xf9e <USB_Host_WaitForIOS>
    11c2:	98 2f       	mov	r25, r24
    11c4:	88 23       	and	r24, r24
    11c6:	d1 f4       	brne	.+52     	; 0x11fc <USB_Host_SendControlRequest+0x20c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11c8:	80 91 a9 00 	lds	r24, 0x00A9
    11cc:	80 64       	ori	r24, 0x40	; 64
    11ce:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11d2:	80 91 aa 00 	lds	r24, 0x00AA
    11d6:	8f 7c       	andi	r24, 0xCF	; 207
    11d8:	80 61       	ori	r24, 0x10	; 16
    11da:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11de:	80 91 a9 00 	lds	r24, 0x00A9
    11e2:	8f 7b       	andi	r24, 0xBF	; 191
    11e4:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	d9 de       	rcall	.-590    	; 0xf9e <USB_Host_WaitForIOS>
    11ec:	98 2f       	mov	r25, r24
    11ee:	88 23       	and	r24, r24
    11f0:	29 f4       	brne	.+10     	; 0x11fc <USB_Host_SendControlRequest+0x20c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    11f2:	80 91 a6 00 	lds	r24, 0x00A6
    11f6:	8e 77       	andi	r24, 0x7E	; 126
    11f8:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11fc:	80 91 a9 00 	lds	r24, 0x00A9
    1200:	80 64       	ori	r24, 0x40	; 64
    1202:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    1206:	f0 fc       	sbrc	r15, 0
    1208:	05 c0       	rjmp	.+10     	; 0x1214 <USB_Host_SendControlRequest+0x224>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    120a:	80 91 9e 00 	lds	r24, 0x009E
    120e:	8e 7f       	andi	r24, 0xFE	; 254
    1210:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    121a:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    121e:	89 2f       	mov	r24, r25
    1220:	df 91       	pop	r29
    1222:	cf 91       	pop	r28
    1224:	1f 91       	pop	r17
    1226:	0f 91       	pop	r16
    1228:	ff 90       	pop	r15
    122a:	08 95       	ret

0000122c <USB_Host_SetInterfaceAltSetting>:
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
	USB_ControlRequest = (USB_Request_Header_t)
    122c:	ef e1       	ldi	r30, 0x1F	; 31
    122e:	f1 e0       	ldi	r31, 0x01	; 1
    1230:	91 e0       	ldi	r25, 0x01	; 1
    1232:	90 93 1f 01 	sts	0x011F, r25
    1236:	9b e0       	ldi	r25, 0x0B	; 11
    1238:	90 93 20 01 	sts	0x0120, r25
    123c:	60 93 21 01 	sts	0x0121, r22
    1240:	13 82       	std	Z+3, r1	; 0x03
    1242:	80 93 23 01 	sts	0x0123, r24
    1246:	15 82       	std	Z+5, r1	; 0x05
    1248:	10 92 26 01 	sts	0x0126, r1
    124c:	10 92 25 01 	sts	0x0125, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1250:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	90 e0       	ldi	r25, 0x00	; 0
}
    1258:	cb ce       	rjmp	.-618    	; 0xff0 <USB_Host_SendControlRequest>

0000125a <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    125a:	1f 93       	push	r17
    125c:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    125e:	10 92 1f 01 	sts	0x011F, r1
    1262:	89 e0       	ldi	r24, 0x09	; 9
    1264:	80 93 20 01 	sts	0x0120, r24
    1268:	10 93 21 01 	sts	0x0121, r17
    126c:	10 92 22 01 	sts	0x0122, r1
    1270:	10 92 24 01 	sts	0x0124, r1
    1274:	10 92 23 01 	sts	0x0123, r1
    1278:	10 92 26 01 	sts	0x0126, r1
    127c:	10 92 25 01 	sts	0x0125, r1
    1280:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	b3 de       	rcall	.-666    	; 0xff0 <USB_Host_SendControlRequest>
    128a:	88 23       	and	r24, r24
    128c:	49 f4       	brne	.+18     	; 0x12a0 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    128e:	10 93 1d 01 	sts	0x011D, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1292:	11 23       	and	r17, r17
    1294:	11 f4       	brne	.+4      	; 0x129a <USB_Host_SetDeviceConfiguration+0x40>
    1296:	9a e0       	ldi	r25, 0x0A	; 10
    1298:	01 c0       	rjmp	.+2      	; 0x129c <USB_Host_SetDeviceConfiguration+0x42>
    129a:	9b e0       	ldi	r25, 0x0B	; 11
    129c:	90 93 27 01 	sts	0x0127, r25
	}

	return ErrorCode;
}
    12a0:	1f 91       	pop	r17
    12a2:	08 95       	ret

000012a4 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    12a4:	ff 92       	push	r15
    12a6:	0f 93       	push	r16
    12a8:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    12aa:	07 ea       	ldi	r16, 0xA7	; 167
    12ac:	10 e0       	ldi	r17, 0x00	; 0
    12ae:	f8 01       	movw	r30, r16
    12b0:	f0 80       	ld	r15, Z
    12b2:	f7 e0       	ldi	r31, 0x07	; 7
    12b4:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    12b6:	f8 01       	movw	r30, r16
    12b8:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    12ba:	24 db       	rcall	.-2488   	; 0x904 <USB_Host_ProcessNextHostState>
    12bc:	f8 01       	movw	r30, r16
    12be:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    12c0:	1f 91       	pop	r17
    12c2:	0f 91       	pop	r16
    12c4:	ff 90       	pop	r15
    12c6:	08 95       	ret

000012c8 <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    12c8:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    12ca:	80 91 c8 00 	lds	r24, 0x00C8
    12ce:	85 ff       	sbrs	r24, 5
    12d0:	fc cf       	rjmp	.-8      	; 0x12ca <Serial_putchar+0x2>
				UDR1 = DataByte;
    12d2:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	08 95       	ret

000012dc <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    12dc:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    12e0:	87 fd       	sbrc	r24, 7
    12e2:	03 c0       	rjmp	.+6      	; 0x12ea <Serial_getchar+0xe>
    12e4:	2e ef       	ldi	r18, 0xFE	; 254
    12e6:	3f ef       	ldi	r19, 0xFF	; 255
    12e8:	0b c0       	rjmp	.+22     	; 0x1300 <Serial_getchar+0x24>
    12ea:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    12ee:	87 fd       	sbrc	r24, 7
    12f0:	03 c0       	rjmp	.+6      	; 0x12f8 <Serial_getchar+0x1c>
    12f2:	2f ef       	ldi	r18, 0xFF	; 255
    12f4:	3f ef       	ldi	r19, 0xFF	; 255
    12f6:	04 c0       	rjmp	.+8      	; 0x1300 <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    12f8:	80 91 ce 00 	lds	r24, 0x00CE
    12fc:	28 2f       	mov	r18, r24
    12fe:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    1300:	c9 01       	movw	r24, r18
    1302:	08 95       	ret

00001304 <printf_P>:
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
    130c:	fe 01       	movw	r30, r28
    130e:	35 96       	adiw	r30, 0x05	; 5
    1310:	61 91       	ld	r22, Z+
    1312:	71 91       	ld	r23, Z+
    1314:	a0 91 38 01 	lds	r26, 0x0138
    1318:	b0 91 39 01 	lds	r27, 0x0139
    131c:	13 96       	adiw	r26, 0x03	; 3
    131e:	8c 91       	ld	r24, X
    1320:	13 97       	sbiw	r26, 0x03	; 3
    1322:	88 60       	ori	r24, 0x08	; 8
    1324:	13 96       	adiw	r26, 0x03	; 3
    1326:	8c 93       	st	X, r24
    1328:	80 91 38 01 	lds	r24, 0x0138
    132c:	90 91 39 01 	lds	r25, 0x0139
    1330:	af 01       	movw	r20, r30
    1332:	3f d0       	rcall	.+126    	; 0x13b2 <vfprintf>
    1334:	e0 91 38 01 	lds	r30, 0x0138
    1338:	f0 91 39 01 	lds	r31, 0x0139
    133c:	23 81       	ldd	r18, Z+3	; 0x03
    133e:	27 7f       	andi	r18, 0xF7	; 247
    1340:	23 83       	std	Z+3, r18	; 0x03
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	08 95       	ret

00001348 <puts_P>:
    1348:	0f 93       	push	r16
    134a:	1f 93       	push	r17
    134c:	cf 93       	push	r28
    134e:	df 93       	push	r29
    1350:	ec 01       	movw	r28, r24
    1352:	e0 91 38 01 	lds	r30, 0x0138
    1356:	f0 91 39 01 	lds	r31, 0x0139
    135a:	83 81       	ldd	r24, Z+3	; 0x03
    135c:	81 ff       	sbrs	r24, 1
    135e:	21 c0       	rjmp	.+66     	; 0x13a2 <puts_P+0x5a>
    1360:	00 e0       	ldi	r16, 0x00	; 0
    1362:	10 e0       	ldi	r17, 0x00	; 0
    1364:	0e c0       	rjmp	.+28     	; 0x1382 <puts_P+0x3a>
    1366:	e0 91 38 01 	lds	r30, 0x0138
    136a:	f0 91 39 01 	lds	r31, 0x0139
    136e:	20 85       	ldd	r18, Z+8	; 0x08
    1370:	31 85       	ldd	r19, Z+9	; 0x09
    1372:	bf 01       	movw	r22, r30
    1374:	f9 01       	movw	r30, r18
    1376:	09 95       	icall
    1378:	89 2b       	or	r24, r25
    137a:	11 f0       	breq	.+4      	; 0x1380 <puts_P+0x38>
    137c:	0f ef       	ldi	r16, 0xFF	; 255
    137e:	1f ef       	ldi	r17, 0xFF	; 255
    1380:	21 96       	adiw	r28, 0x01	; 1
    1382:	fe 01       	movw	r30, r28
    1384:	84 91       	lpm	r24, Z+
    1386:	88 23       	and	r24, r24
    1388:	71 f7       	brne	.-36     	; 0x1366 <puts_P+0x1e>
    138a:	e0 91 38 01 	lds	r30, 0x0138
    138e:	f0 91 39 01 	lds	r31, 0x0139
    1392:	20 85       	ldd	r18, Z+8	; 0x08
    1394:	31 85       	ldd	r19, Z+9	; 0x09
    1396:	8a e0       	ldi	r24, 0x0A	; 10
    1398:	bf 01       	movw	r22, r30
    139a:	f9 01       	movw	r30, r18
    139c:	09 95       	icall
    139e:	89 2b       	or	r24, r25
    13a0:	11 f0       	breq	.+4      	; 0x13a6 <puts_P+0x5e>
    13a2:	0f ef       	ldi	r16, 0xFF	; 255
    13a4:	1f ef       	ldi	r17, 0xFF	; 255
    13a6:	c8 01       	movw	r24, r16
    13a8:	df 91       	pop	r29
    13aa:	cf 91       	pop	r28
    13ac:	1f 91       	pop	r17
    13ae:	0f 91       	pop	r16
    13b0:	08 95       	ret

000013b2 <vfprintf>:
    13b2:	2f 92       	push	r2
    13b4:	3f 92       	push	r3
    13b6:	4f 92       	push	r4
    13b8:	5f 92       	push	r5
    13ba:	6f 92       	push	r6
    13bc:	7f 92       	push	r7
    13be:	8f 92       	push	r8
    13c0:	9f 92       	push	r9
    13c2:	af 92       	push	r10
    13c4:	bf 92       	push	r11
    13c6:	cf 92       	push	r12
    13c8:	df 92       	push	r13
    13ca:	ef 92       	push	r14
    13cc:	ff 92       	push	r15
    13ce:	0f 93       	push	r16
    13d0:	1f 93       	push	r17
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	2b 97       	sbiw	r28, 0x0b	; 11
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	f8 94       	cli
    13e0:	de bf       	out	0x3e, r29	; 62
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	cd bf       	out	0x3d, r28	; 61
    13e6:	3c 01       	movw	r6, r24
    13e8:	2b 01       	movw	r4, r22
    13ea:	5a 01       	movw	r10, r20
    13ec:	fc 01       	movw	r30, r24
    13ee:	17 82       	std	Z+7, r1	; 0x07
    13f0:	16 82       	std	Z+6, r1	; 0x06
    13f2:	83 81       	ldd	r24, Z+3	; 0x03
    13f4:	81 fd       	sbrc	r24, 1
    13f6:	03 c0       	rjmp	.+6      	; 0x13fe <vfprintf+0x4c>
    13f8:	6f ef       	ldi	r22, 0xFF	; 255
    13fa:	7f ef       	ldi	r23, 0xFF	; 255
    13fc:	b9 c1       	rjmp	.+882    	; 0x1770 <vfprintf+0x3be>
    13fe:	9a e0       	ldi	r25, 0x0A	; 10
    1400:	89 2e       	mov	r8, r25
    1402:	1e 01       	movw	r2, r28
    1404:	08 94       	sec
    1406:	21 1c       	adc	r2, r1
    1408:	31 1c       	adc	r3, r1
    140a:	f3 01       	movw	r30, r6
    140c:	23 81       	ldd	r18, Z+3	; 0x03
    140e:	f2 01       	movw	r30, r4
    1410:	23 fd       	sbrc	r18, 3
    1412:	85 91       	lpm	r24, Z+
    1414:	23 ff       	sbrs	r18, 3
    1416:	81 91       	ld	r24, Z+
    1418:	2f 01       	movw	r4, r30
    141a:	88 23       	and	r24, r24
    141c:	09 f4       	brne	.+2      	; 0x1420 <vfprintf+0x6e>
    141e:	a5 c1       	rjmp	.+842    	; 0x176a <vfprintf+0x3b8>
    1420:	85 32       	cpi	r24, 0x25	; 37
    1422:	39 f4       	brne	.+14     	; 0x1432 <vfprintf+0x80>
    1424:	23 fd       	sbrc	r18, 3
    1426:	85 91       	lpm	r24, Z+
    1428:	23 ff       	sbrs	r18, 3
    142a:	81 91       	ld	r24, Z+
    142c:	2f 01       	movw	r4, r30
    142e:	85 32       	cpi	r24, 0x25	; 37
    1430:	21 f4       	brne	.+8      	; 0x143a <vfprintf+0x88>
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	b3 01       	movw	r22, r6
    1436:	cc d1       	rcall	.+920    	; 0x17d0 <fputc>
    1438:	e8 cf       	rjmp	.-48     	; 0x140a <vfprintf+0x58>
    143a:	98 2f       	mov	r25, r24
    143c:	ff 24       	eor	r15, r15
    143e:	ee 24       	eor	r14, r14
    1440:	99 24       	eor	r9, r9
    1442:	ff e1       	ldi	r31, 0x1F	; 31
    1444:	ff 15       	cp	r31, r15
    1446:	d0 f0       	brcs	.+52     	; 0x147c <vfprintf+0xca>
    1448:	9b 32       	cpi	r25, 0x2B	; 43
    144a:	69 f0       	breq	.+26     	; 0x1466 <vfprintf+0xb4>
    144c:	9c 32       	cpi	r25, 0x2C	; 44
    144e:	28 f4       	brcc	.+10     	; 0x145a <vfprintf+0xa8>
    1450:	90 32       	cpi	r25, 0x20	; 32
    1452:	59 f0       	breq	.+22     	; 0x146a <vfprintf+0xb8>
    1454:	93 32       	cpi	r25, 0x23	; 35
    1456:	91 f4       	brne	.+36     	; 0x147c <vfprintf+0xca>
    1458:	0e c0       	rjmp	.+28     	; 0x1476 <vfprintf+0xc4>
    145a:	9d 32       	cpi	r25, 0x2D	; 45
    145c:	49 f0       	breq	.+18     	; 0x1470 <vfprintf+0xbe>
    145e:	90 33       	cpi	r25, 0x30	; 48
    1460:	69 f4       	brne	.+26     	; 0x147c <vfprintf+0xca>
    1462:	41 e0       	ldi	r20, 0x01	; 1
    1464:	24 c0       	rjmp	.+72     	; 0x14ae <vfprintf+0xfc>
    1466:	52 e0       	ldi	r21, 0x02	; 2
    1468:	f5 2a       	or	r15, r21
    146a:	84 e0       	ldi	r24, 0x04	; 4
    146c:	f8 2a       	or	r15, r24
    146e:	28 c0       	rjmp	.+80     	; 0x14c0 <vfprintf+0x10e>
    1470:	98 e0       	ldi	r25, 0x08	; 8
    1472:	f9 2a       	or	r15, r25
    1474:	25 c0       	rjmp	.+74     	; 0x14c0 <vfprintf+0x10e>
    1476:	e0 e1       	ldi	r30, 0x10	; 16
    1478:	fe 2a       	or	r15, r30
    147a:	22 c0       	rjmp	.+68     	; 0x14c0 <vfprintf+0x10e>
    147c:	f7 fc       	sbrc	r15, 7
    147e:	29 c0       	rjmp	.+82     	; 0x14d2 <vfprintf+0x120>
    1480:	89 2f       	mov	r24, r25
    1482:	80 53       	subi	r24, 0x30	; 48
    1484:	8a 30       	cpi	r24, 0x0A	; 10
    1486:	70 f4       	brcc	.+28     	; 0x14a4 <vfprintf+0xf2>
    1488:	f6 fe       	sbrs	r15, 6
    148a:	05 c0       	rjmp	.+10     	; 0x1496 <vfprintf+0xe4>
    148c:	98 9c       	mul	r9, r8
    148e:	90 2c       	mov	r9, r0
    1490:	11 24       	eor	r1, r1
    1492:	98 0e       	add	r9, r24
    1494:	15 c0       	rjmp	.+42     	; 0x14c0 <vfprintf+0x10e>
    1496:	e8 9c       	mul	r14, r8
    1498:	e0 2c       	mov	r14, r0
    149a:	11 24       	eor	r1, r1
    149c:	e8 0e       	add	r14, r24
    149e:	f0 e2       	ldi	r31, 0x20	; 32
    14a0:	ff 2a       	or	r15, r31
    14a2:	0e c0       	rjmp	.+28     	; 0x14c0 <vfprintf+0x10e>
    14a4:	9e 32       	cpi	r25, 0x2E	; 46
    14a6:	29 f4       	brne	.+10     	; 0x14b2 <vfprintf+0x100>
    14a8:	f6 fc       	sbrc	r15, 6
    14aa:	5f c1       	rjmp	.+702    	; 0x176a <vfprintf+0x3b8>
    14ac:	40 e4       	ldi	r20, 0x40	; 64
    14ae:	f4 2a       	or	r15, r20
    14b0:	07 c0       	rjmp	.+14     	; 0x14c0 <vfprintf+0x10e>
    14b2:	9c 36       	cpi	r25, 0x6C	; 108
    14b4:	19 f4       	brne	.+6      	; 0x14bc <vfprintf+0x10a>
    14b6:	50 e8       	ldi	r21, 0x80	; 128
    14b8:	f5 2a       	or	r15, r21
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <vfprintf+0x10e>
    14bc:	98 36       	cpi	r25, 0x68	; 104
    14be:	49 f4       	brne	.+18     	; 0x14d2 <vfprintf+0x120>
    14c0:	f2 01       	movw	r30, r4
    14c2:	23 fd       	sbrc	r18, 3
    14c4:	95 91       	lpm	r25, Z+
    14c6:	23 ff       	sbrs	r18, 3
    14c8:	91 91       	ld	r25, Z+
    14ca:	2f 01       	movw	r4, r30
    14cc:	99 23       	and	r25, r25
    14ce:	09 f0       	breq	.+2      	; 0x14d2 <vfprintf+0x120>
    14d0:	b8 cf       	rjmp	.-144    	; 0x1442 <vfprintf+0x90>
    14d2:	89 2f       	mov	r24, r25
    14d4:	85 54       	subi	r24, 0x45	; 69
    14d6:	83 30       	cpi	r24, 0x03	; 3
    14d8:	18 f0       	brcs	.+6      	; 0x14e0 <vfprintf+0x12e>
    14da:	80 52       	subi	r24, 0x20	; 32
    14dc:	83 30       	cpi	r24, 0x03	; 3
    14de:	38 f4       	brcc	.+14     	; 0x14ee <vfprintf+0x13c>
    14e0:	44 e0       	ldi	r20, 0x04	; 4
    14e2:	50 e0       	ldi	r21, 0x00	; 0
    14e4:	a4 0e       	add	r10, r20
    14e6:	b5 1e       	adc	r11, r21
    14e8:	5f e3       	ldi	r21, 0x3F	; 63
    14ea:	59 83       	std	Y+1, r21	; 0x01
    14ec:	0f c0       	rjmp	.+30     	; 0x150c <vfprintf+0x15a>
    14ee:	93 36       	cpi	r25, 0x63	; 99
    14f0:	31 f0       	breq	.+12     	; 0x14fe <vfprintf+0x14c>
    14f2:	93 37       	cpi	r25, 0x73	; 115
    14f4:	79 f0       	breq	.+30     	; 0x1514 <vfprintf+0x162>
    14f6:	93 35       	cpi	r25, 0x53	; 83
    14f8:	09 f0       	breq	.+2      	; 0x14fc <vfprintf+0x14a>
    14fa:	52 c0       	rjmp	.+164    	; 0x15a0 <vfprintf+0x1ee>
    14fc:	1f c0       	rjmp	.+62     	; 0x153c <vfprintf+0x18a>
    14fe:	f5 01       	movw	r30, r10
    1500:	80 81       	ld	r24, Z
    1502:	89 83       	std	Y+1, r24	; 0x01
    1504:	42 e0       	ldi	r20, 0x02	; 2
    1506:	50 e0       	ldi	r21, 0x00	; 0
    1508:	a4 0e       	add	r10, r20
    150a:	b5 1e       	adc	r11, r21
    150c:	61 01       	movw	r12, r2
    150e:	01 e0       	ldi	r16, 0x01	; 1
    1510:	10 e0       	ldi	r17, 0x00	; 0
    1512:	11 c0       	rjmp	.+34     	; 0x1536 <vfprintf+0x184>
    1514:	f5 01       	movw	r30, r10
    1516:	c0 80       	ld	r12, Z
    1518:	d1 80       	ldd	r13, Z+1	; 0x01
    151a:	f6 fc       	sbrc	r15, 6
    151c:	03 c0       	rjmp	.+6      	; 0x1524 <vfprintf+0x172>
    151e:	6f ef       	ldi	r22, 0xFF	; 255
    1520:	7f ef       	ldi	r23, 0xFF	; 255
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <vfprintf+0x176>
    1524:	69 2d       	mov	r22, r9
    1526:	70 e0       	ldi	r23, 0x00	; 0
    1528:	42 e0       	ldi	r20, 0x02	; 2
    152a:	50 e0       	ldi	r21, 0x00	; 0
    152c:	a4 0e       	add	r10, r20
    152e:	b5 1e       	adc	r11, r21
    1530:	c6 01       	movw	r24, r12
    1532:	43 d1       	rcall	.+646    	; 0x17ba <strnlen>
    1534:	8c 01       	movw	r16, r24
    1536:	5f e7       	ldi	r21, 0x7F	; 127
    1538:	f5 22       	and	r15, r21
    153a:	13 c0       	rjmp	.+38     	; 0x1562 <vfprintf+0x1b0>
    153c:	f5 01       	movw	r30, r10
    153e:	c0 80       	ld	r12, Z
    1540:	d1 80       	ldd	r13, Z+1	; 0x01
    1542:	f6 fc       	sbrc	r15, 6
    1544:	03 c0       	rjmp	.+6      	; 0x154c <vfprintf+0x19a>
    1546:	6f ef       	ldi	r22, 0xFF	; 255
    1548:	7f ef       	ldi	r23, 0xFF	; 255
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <vfprintf+0x19e>
    154c:	69 2d       	mov	r22, r9
    154e:	70 e0       	ldi	r23, 0x00	; 0
    1550:	42 e0       	ldi	r20, 0x02	; 2
    1552:	50 e0       	ldi	r21, 0x00	; 0
    1554:	a4 0e       	add	r10, r20
    1556:	b5 1e       	adc	r11, r21
    1558:	c6 01       	movw	r24, r12
    155a:	24 d1       	rcall	.+584    	; 0x17a4 <strnlen_P>
    155c:	8c 01       	movw	r16, r24
    155e:	50 e8       	ldi	r21, 0x80	; 128
    1560:	f5 2a       	or	r15, r21
    1562:	f3 fe       	sbrs	r15, 3
    1564:	06 c0       	rjmp	.+12     	; 0x1572 <vfprintf+0x1c0>
    1566:	18 c0       	rjmp	.+48     	; 0x1598 <vfprintf+0x1e6>
    1568:	80 e2       	ldi	r24, 0x20	; 32
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	b3 01       	movw	r22, r6
    156e:	30 d1       	rcall	.+608    	; 0x17d0 <fputc>
    1570:	ea 94       	dec	r14
    1572:	8e 2d       	mov	r24, r14
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	08 17       	cp	r16, r24
    1578:	19 07       	cpc	r17, r25
    157a:	b0 f3       	brcs	.-20     	; 0x1568 <vfprintf+0x1b6>
    157c:	0d c0       	rjmp	.+26     	; 0x1598 <vfprintf+0x1e6>
    157e:	f6 01       	movw	r30, r12
    1580:	f7 fc       	sbrc	r15, 7
    1582:	85 91       	lpm	r24, Z+
    1584:	f7 fe       	sbrs	r15, 7
    1586:	81 91       	ld	r24, Z+
    1588:	6f 01       	movw	r12, r30
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	b3 01       	movw	r22, r6
    158e:	20 d1       	rcall	.+576    	; 0x17d0 <fputc>
    1590:	e1 10       	cpse	r14, r1
    1592:	ea 94       	dec	r14
    1594:	01 50       	subi	r16, 0x01	; 1
    1596:	10 40       	sbci	r17, 0x00	; 0
    1598:	01 15       	cp	r16, r1
    159a:	11 05       	cpc	r17, r1
    159c:	81 f7       	brne	.-32     	; 0x157e <vfprintf+0x1cc>
    159e:	e2 c0       	rjmp	.+452    	; 0x1764 <vfprintf+0x3b2>
    15a0:	94 36       	cpi	r25, 0x64	; 100
    15a2:	11 f0       	breq	.+4      	; 0x15a8 <vfprintf+0x1f6>
    15a4:	99 36       	cpi	r25, 0x69	; 105
    15a6:	61 f5       	brne	.+88     	; 0x1600 <vfprintf+0x24e>
    15a8:	f7 fe       	sbrs	r15, 7
    15aa:	08 c0       	rjmp	.+16     	; 0x15bc <vfprintf+0x20a>
    15ac:	f5 01       	movw	r30, r10
    15ae:	20 81       	ld	r18, Z
    15b0:	31 81       	ldd	r19, Z+1	; 0x01
    15b2:	42 81       	ldd	r20, Z+2	; 0x02
    15b4:	53 81       	ldd	r21, Z+3	; 0x03
    15b6:	84 e0       	ldi	r24, 0x04	; 4
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	0a c0       	rjmp	.+20     	; 0x15d0 <vfprintf+0x21e>
    15bc:	f5 01       	movw	r30, r10
    15be:	80 81       	ld	r24, Z
    15c0:	91 81       	ldd	r25, Z+1	; 0x01
    15c2:	9c 01       	movw	r18, r24
    15c4:	44 27       	eor	r20, r20
    15c6:	37 fd       	sbrc	r19, 7
    15c8:	40 95       	com	r20
    15ca:	54 2f       	mov	r21, r20
    15cc:	82 e0       	ldi	r24, 0x02	; 2
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	a8 0e       	add	r10, r24
    15d2:	b9 1e       	adc	r11, r25
    15d4:	9f e6       	ldi	r25, 0x6F	; 111
    15d6:	f9 22       	and	r15, r25
    15d8:	57 ff       	sbrs	r21, 7
    15da:	09 c0       	rjmp	.+18     	; 0x15ee <vfprintf+0x23c>
    15dc:	50 95       	com	r21
    15de:	40 95       	com	r20
    15e0:	30 95       	com	r19
    15e2:	21 95       	neg	r18
    15e4:	3f 4f       	sbci	r19, 0xFF	; 255
    15e6:	4f 4f       	sbci	r20, 0xFF	; 255
    15e8:	5f 4f       	sbci	r21, 0xFF	; 255
    15ea:	e0 e8       	ldi	r30, 0x80	; 128
    15ec:	fe 2a       	or	r15, r30
    15ee:	ca 01       	movw	r24, r20
    15f0:	b9 01       	movw	r22, r18
    15f2:	a1 01       	movw	r20, r2
    15f4:	2a e0       	ldi	r18, 0x0A	; 10
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	17 d1       	rcall	.+558    	; 0x1828 <__ultoa_invert>
    15fa:	d8 2e       	mov	r13, r24
    15fc:	d2 18       	sub	r13, r2
    15fe:	3f c0       	rjmp	.+126    	; 0x167e <vfprintf+0x2cc>
    1600:	95 37       	cpi	r25, 0x75	; 117
    1602:	29 f4       	brne	.+10     	; 0x160e <vfprintf+0x25c>
    1604:	1f 2d       	mov	r17, r15
    1606:	1f 7e       	andi	r17, 0xEF	; 239
    1608:	2a e0       	ldi	r18, 0x0A	; 10
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	1d c0       	rjmp	.+58     	; 0x1648 <vfprintf+0x296>
    160e:	1f 2d       	mov	r17, r15
    1610:	19 7f       	andi	r17, 0xF9	; 249
    1612:	9f 36       	cpi	r25, 0x6F	; 111
    1614:	61 f0       	breq	.+24     	; 0x162e <vfprintf+0x27c>
    1616:	90 37       	cpi	r25, 0x70	; 112
    1618:	20 f4       	brcc	.+8      	; 0x1622 <vfprintf+0x270>
    161a:	98 35       	cpi	r25, 0x58	; 88
    161c:	09 f0       	breq	.+2      	; 0x1620 <vfprintf+0x26e>
    161e:	a5 c0       	rjmp	.+330    	; 0x176a <vfprintf+0x3b8>
    1620:	0f c0       	rjmp	.+30     	; 0x1640 <vfprintf+0x28e>
    1622:	90 37       	cpi	r25, 0x70	; 112
    1624:	39 f0       	breq	.+14     	; 0x1634 <vfprintf+0x282>
    1626:	98 37       	cpi	r25, 0x78	; 120
    1628:	09 f0       	breq	.+2      	; 0x162c <vfprintf+0x27a>
    162a:	9f c0       	rjmp	.+318    	; 0x176a <vfprintf+0x3b8>
    162c:	04 c0       	rjmp	.+8      	; 0x1636 <vfprintf+0x284>
    162e:	28 e0       	ldi	r18, 0x08	; 8
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	0a c0       	rjmp	.+20     	; 0x1648 <vfprintf+0x296>
    1634:	10 61       	ori	r17, 0x10	; 16
    1636:	14 fd       	sbrc	r17, 4
    1638:	14 60       	ori	r17, 0x04	; 4
    163a:	20 e1       	ldi	r18, 0x10	; 16
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	04 c0       	rjmp	.+8      	; 0x1648 <vfprintf+0x296>
    1640:	14 fd       	sbrc	r17, 4
    1642:	16 60       	ori	r17, 0x06	; 6
    1644:	20 e1       	ldi	r18, 0x10	; 16
    1646:	32 e0       	ldi	r19, 0x02	; 2
    1648:	17 ff       	sbrs	r17, 7
    164a:	08 c0       	rjmp	.+16     	; 0x165c <vfprintf+0x2aa>
    164c:	f5 01       	movw	r30, r10
    164e:	60 81       	ld	r22, Z
    1650:	71 81       	ldd	r23, Z+1	; 0x01
    1652:	82 81       	ldd	r24, Z+2	; 0x02
    1654:	93 81       	ldd	r25, Z+3	; 0x03
    1656:	44 e0       	ldi	r20, 0x04	; 4
    1658:	50 e0       	ldi	r21, 0x00	; 0
    165a:	08 c0       	rjmp	.+16     	; 0x166c <vfprintf+0x2ba>
    165c:	f5 01       	movw	r30, r10
    165e:	80 81       	ld	r24, Z
    1660:	91 81       	ldd	r25, Z+1	; 0x01
    1662:	bc 01       	movw	r22, r24
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	42 e0       	ldi	r20, 0x02	; 2
    166a:	50 e0       	ldi	r21, 0x00	; 0
    166c:	a4 0e       	add	r10, r20
    166e:	b5 1e       	adc	r11, r21
    1670:	a1 01       	movw	r20, r2
    1672:	da d0       	rcall	.+436    	; 0x1828 <__ultoa_invert>
    1674:	d8 2e       	mov	r13, r24
    1676:	d2 18       	sub	r13, r2
    1678:	8f e7       	ldi	r24, 0x7F	; 127
    167a:	f8 2e       	mov	r15, r24
    167c:	f1 22       	and	r15, r17
    167e:	f6 fe       	sbrs	r15, 6
    1680:	0b c0       	rjmp	.+22     	; 0x1698 <vfprintf+0x2e6>
    1682:	5e ef       	ldi	r21, 0xFE	; 254
    1684:	f5 22       	and	r15, r21
    1686:	d9 14       	cp	r13, r9
    1688:	38 f4       	brcc	.+14     	; 0x1698 <vfprintf+0x2e6>
    168a:	f4 fe       	sbrs	r15, 4
    168c:	07 c0       	rjmp	.+14     	; 0x169c <vfprintf+0x2ea>
    168e:	f2 fc       	sbrc	r15, 2
    1690:	05 c0       	rjmp	.+10     	; 0x169c <vfprintf+0x2ea>
    1692:	8f ee       	ldi	r24, 0xEF	; 239
    1694:	f8 22       	and	r15, r24
    1696:	02 c0       	rjmp	.+4      	; 0x169c <vfprintf+0x2ea>
    1698:	1d 2d       	mov	r17, r13
    169a:	01 c0       	rjmp	.+2      	; 0x169e <vfprintf+0x2ec>
    169c:	19 2d       	mov	r17, r9
    169e:	f4 fe       	sbrs	r15, 4
    16a0:	0d c0       	rjmp	.+26     	; 0x16bc <vfprintf+0x30a>
    16a2:	fe 01       	movw	r30, r28
    16a4:	ed 0d       	add	r30, r13
    16a6:	f1 1d       	adc	r31, r1
    16a8:	80 81       	ld	r24, Z
    16aa:	80 33       	cpi	r24, 0x30	; 48
    16ac:	19 f4       	brne	.+6      	; 0x16b4 <vfprintf+0x302>
    16ae:	99 ee       	ldi	r25, 0xE9	; 233
    16b0:	f9 22       	and	r15, r25
    16b2:	08 c0       	rjmp	.+16     	; 0x16c4 <vfprintf+0x312>
    16b4:	1f 5f       	subi	r17, 0xFF	; 255
    16b6:	f2 fe       	sbrs	r15, 2
    16b8:	05 c0       	rjmp	.+10     	; 0x16c4 <vfprintf+0x312>
    16ba:	03 c0       	rjmp	.+6      	; 0x16c2 <vfprintf+0x310>
    16bc:	8f 2d       	mov	r24, r15
    16be:	86 78       	andi	r24, 0x86	; 134
    16c0:	09 f0       	breq	.+2      	; 0x16c4 <vfprintf+0x312>
    16c2:	1f 5f       	subi	r17, 0xFF	; 255
    16c4:	0f 2d       	mov	r16, r15
    16c6:	f3 fc       	sbrc	r15, 3
    16c8:	13 c0       	rjmp	.+38     	; 0x16f0 <vfprintf+0x33e>
    16ca:	f0 fe       	sbrs	r15, 0
    16cc:	0e c0       	rjmp	.+28     	; 0x16ea <vfprintf+0x338>
    16ce:	1e 15       	cp	r17, r14
    16d0:	10 f0       	brcs	.+4      	; 0x16d6 <vfprintf+0x324>
    16d2:	9d 2c       	mov	r9, r13
    16d4:	0a c0       	rjmp	.+20     	; 0x16ea <vfprintf+0x338>
    16d6:	9d 2c       	mov	r9, r13
    16d8:	9e 0c       	add	r9, r14
    16da:	91 1a       	sub	r9, r17
    16dc:	1e 2d       	mov	r17, r14
    16de:	05 c0       	rjmp	.+10     	; 0x16ea <vfprintf+0x338>
    16e0:	80 e2       	ldi	r24, 0x20	; 32
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	b3 01       	movw	r22, r6
    16e6:	74 d0       	rcall	.+232    	; 0x17d0 <fputc>
    16e8:	1f 5f       	subi	r17, 0xFF	; 255
    16ea:	1e 15       	cp	r17, r14
    16ec:	c8 f3       	brcs	.-14     	; 0x16e0 <vfprintf+0x32e>
    16ee:	04 c0       	rjmp	.+8      	; 0x16f8 <vfprintf+0x346>
    16f0:	1e 15       	cp	r17, r14
    16f2:	10 f4       	brcc	.+4      	; 0x16f8 <vfprintf+0x346>
    16f4:	e1 1a       	sub	r14, r17
    16f6:	01 c0       	rjmp	.+2      	; 0x16fa <vfprintf+0x348>
    16f8:	ee 24       	eor	r14, r14
    16fa:	04 ff       	sbrs	r16, 4
    16fc:	0e c0       	rjmp	.+28     	; 0x171a <vfprintf+0x368>
    16fe:	80 e3       	ldi	r24, 0x30	; 48
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	b3 01       	movw	r22, r6
    1704:	65 d0       	rcall	.+202    	; 0x17d0 <fputc>
    1706:	02 ff       	sbrs	r16, 2
    1708:	1b c0       	rjmp	.+54     	; 0x1740 <vfprintf+0x38e>
    170a:	01 fd       	sbrc	r16, 1
    170c:	03 c0       	rjmp	.+6      	; 0x1714 <vfprintf+0x362>
    170e:	88 e7       	ldi	r24, 0x78	; 120
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	0e c0       	rjmp	.+28     	; 0x1730 <vfprintf+0x37e>
    1714:	88 e5       	ldi	r24, 0x58	; 88
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	0b c0       	rjmp	.+22     	; 0x1730 <vfprintf+0x37e>
    171a:	80 2f       	mov	r24, r16
    171c:	86 78       	andi	r24, 0x86	; 134
    171e:	81 f0       	breq	.+32     	; 0x1740 <vfprintf+0x38e>
    1720:	01 ff       	sbrs	r16, 1
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <vfprintf+0x376>
    1724:	8b e2       	ldi	r24, 0x2B	; 43
    1726:	01 c0       	rjmp	.+2      	; 0x172a <vfprintf+0x378>
    1728:	80 e2       	ldi	r24, 0x20	; 32
    172a:	f7 fc       	sbrc	r15, 7
    172c:	8d e2       	ldi	r24, 0x2D	; 45
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	b3 01       	movw	r22, r6
    1732:	4e d0       	rcall	.+156    	; 0x17d0 <fputc>
    1734:	05 c0       	rjmp	.+10     	; 0x1740 <vfprintf+0x38e>
    1736:	80 e3       	ldi	r24, 0x30	; 48
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	b3 01       	movw	r22, r6
    173c:	49 d0       	rcall	.+146    	; 0x17d0 <fputc>
    173e:	9a 94       	dec	r9
    1740:	d9 14       	cp	r13, r9
    1742:	c8 f3       	brcs	.-14     	; 0x1736 <vfprintf+0x384>
    1744:	da 94       	dec	r13
    1746:	f1 01       	movw	r30, r2
    1748:	ed 0d       	add	r30, r13
    174a:	f1 1d       	adc	r31, r1
    174c:	80 81       	ld	r24, Z
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	b3 01       	movw	r22, r6
    1752:	3e d0       	rcall	.+124    	; 0x17d0 <fputc>
    1754:	dd 20       	and	r13, r13
    1756:	b1 f7       	brne	.-20     	; 0x1744 <vfprintf+0x392>
    1758:	05 c0       	rjmp	.+10     	; 0x1764 <vfprintf+0x3b2>
    175a:	80 e2       	ldi	r24, 0x20	; 32
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	b3 01       	movw	r22, r6
    1760:	37 d0       	rcall	.+110    	; 0x17d0 <fputc>
    1762:	ea 94       	dec	r14
    1764:	ee 20       	and	r14, r14
    1766:	c9 f7       	brne	.-14     	; 0x175a <vfprintf+0x3a8>
    1768:	50 ce       	rjmp	.-864    	; 0x140a <vfprintf+0x58>
    176a:	f3 01       	movw	r30, r6
    176c:	66 81       	ldd	r22, Z+6	; 0x06
    176e:	77 81       	ldd	r23, Z+7	; 0x07
    1770:	cb 01       	movw	r24, r22
    1772:	2b 96       	adiw	r28, 0x0b	; 11
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	cf 91       	pop	r28
    1780:	df 91       	pop	r29
    1782:	1f 91       	pop	r17
    1784:	0f 91       	pop	r16
    1786:	ff 90       	pop	r15
    1788:	ef 90       	pop	r14
    178a:	df 90       	pop	r13
    178c:	cf 90       	pop	r12
    178e:	bf 90       	pop	r11
    1790:	af 90       	pop	r10
    1792:	9f 90       	pop	r9
    1794:	8f 90       	pop	r8
    1796:	7f 90       	pop	r7
    1798:	6f 90       	pop	r6
    179a:	5f 90       	pop	r5
    179c:	4f 90       	pop	r4
    179e:	3f 90       	pop	r3
    17a0:	2f 90       	pop	r2
    17a2:	08 95       	ret

000017a4 <strnlen_P>:
    17a4:	fc 01       	movw	r30, r24
    17a6:	05 90       	lpm	r0, Z+
    17a8:	61 50       	subi	r22, 0x01	; 1
    17aa:	70 40       	sbci	r23, 0x00	; 0
    17ac:	01 10       	cpse	r0, r1
    17ae:	d8 f7       	brcc	.-10     	; 0x17a6 <strnlen_P+0x2>
    17b0:	80 95       	com	r24
    17b2:	90 95       	com	r25
    17b4:	8e 0f       	add	r24, r30
    17b6:	9f 1f       	adc	r25, r31
    17b8:	08 95       	ret

000017ba <strnlen>:
    17ba:	fc 01       	movw	r30, r24
    17bc:	61 50       	subi	r22, 0x01	; 1
    17be:	70 40       	sbci	r23, 0x00	; 0
    17c0:	01 90       	ld	r0, Z+
    17c2:	01 10       	cpse	r0, r1
    17c4:	d8 f7       	brcc	.-10     	; 0x17bc <strnlen+0x2>
    17c6:	80 95       	com	r24
    17c8:	90 95       	com	r25
    17ca:	8e 0f       	add	r24, r30
    17cc:	9f 1f       	adc	r25, r31
    17ce:	08 95       	ret

000017d0 <fputc>:
    17d0:	0f 93       	push	r16
    17d2:	1f 93       	push	r17
    17d4:	cf 93       	push	r28
    17d6:	df 93       	push	r29
    17d8:	8c 01       	movw	r16, r24
    17da:	eb 01       	movw	r28, r22
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	81 ff       	sbrs	r24, 1
    17e0:	1b c0       	rjmp	.+54     	; 0x1818 <fputc+0x48>
    17e2:	82 ff       	sbrs	r24, 2
    17e4:	0d c0       	rjmp	.+26     	; 0x1800 <fputc+0x30>
    17e6:	2e 81       	ldd	r18, Y+6	; 0x06
    17e8:	3f 81       	ldd	r19, Y+7	; 0x07
    17ea:	8c 81       	ldd	r24, Y+4	; 0x04
    17ec:	9d 81       	ldd	r25, Y+5	; 0x05
    17ee:	28 17       	cp	r18, r24
    17f0:	39 07       	cpc	r19, r25
    17f2:	64 f4       	brge	.+24     	; 0x180c <fputc+0x3c>
    17f4:	e8 81       	ld	r30, Y
    17f6:	f9 81       	ldd	r31, Y+1	; 0x01
    17f8:	01 93       	st	Z+, r16
    17fa:	f9 83       	std	Y+1, r31	; 0x01
    17fc:	e8 83       	st	Y, r30
    17fe:	06 c0       	rjmp	.+12     	; 0x180c <fputc+0x3c>
    1800:	e8 85       	ldd	r30, Y+8	; 0x08
    1802:	f9 85       	ldd	r31, Y+9	; 0x09
    1804:	80 2f       	mov	r24, r16
    1806:	09 95       	icall
    1808:	89 2b       	or	r24, r25
    180a:	31 f4       	brne	.+12     	; 0x1818 <fputc+0x48>
    180c:	8e 81       	ldd	r24, Y+6	; 0x06
    180e:	9f 81       	ldd	r25, Y+7	; 0x07
    1810:	01 96       	adiw	r24, 0x01	; 1
    1812:	9f 83       	std	Y+7, r25	; 0x07
    1814:	8e 83       	std	Y+6, r24	; 0x06
    1816:	02 c0       	rjmp	.+4      	; 0x181c <fputc+0x4c>
    1818:	0f ef       	ldi	r16, 0xFF	; 255
    181a:	1f ef       	ldi	r17, 0xFF	; 255
    181c:	c8 01       	movw	r24, r16
    181e:	df 91       	pop	r29
    1820:	cf 91       	pop	r28
    1822:	1f 91       	pop	r17
    1824:	0f 91       	pop	r16
    1826:	08 95       	ret

00001828 <__ultoa_invert>:
    1828:	fa 01       	movw	r30, r20
    182a:	aa 27       	eor	r26, r26
    182c:	28 30       	cpi	r18, 0x08	; 8
    182e:	51 f1       	breq	.+84     	; 0x1884 <__ultoa_invert+0x5c>
    1830:	20 31       	cpi	r18, 0x10	; 16
    1832:	81 f1       	breq	.+96     	; 0x1894 <__ultoa_invert+0x6c>
    1834:	e8 94       	clt
    1836:	6f 93       	push	r22
    1838:	6e 7f       	andi	r22, 0xFE	; 254
    183a:	6e 5f       	subi	r22, 0xFE	; 254
    183c:	7f 4f       	sbci	r23, 0xFF	; 255
    183e:	8f 4f       	sbci	r24, 0xFF	; 255
    1840:	9f 4f       	sbci	r25, 0xFF	; 255
    1842:	af 4f       	sbci	r26, 0xFF	; 255
    1844:	b1 e0       	ldi	r27, 0x01	; 1
    1846:	3e d0       	rcall	.+124    	; 0x18c4 <__ultoa_invert+0x9c>
    1848:	b4 e0       	ldi	r27, 0x04	; 4
    184a:	3c d0       	rcall	.+120    	; 0x18c4 <__ultoa_invert+0x9c>
    184c:	67 0f       	add	r22, r23
    184e:	78 1f       	adc	r23, r24
    1850:	89 1f       	adc	r24, r25
    1852:	9a 1f       	adc	r25, r26
    1854:	a1 1d       	adc	r26, r1
    1856:	68 0f       	add	r22, r24
    1858:	79 1f       	adc	r23, r25
    185a:	8a 1f       	adc	r24, r26
    185c:	91 1d       	adc	r25, r1
    185e:	a1 1d       	adc	r26, r1
    1860:	6a 0f       	add	r22, r26
    1862:	71 1d       	adc	r23, r1
    1864:	81 1d       	adc	r24, r1
    1866:	91 1d       	adc	r25, r1
    1868:	a1 1d       	adc	r26, r1
    186a:	20 d0       	rcall	.+64     	; 0x18ac <__ultoa_invert+0x84>
    186c:	09 f4       	brne	.+2      	; 0x1870 <__ultoa_invert+0x48>
    186e:	68 94       	set
    1870:	3f 91       	pop	r19
    1872:	2a e0       	ldi	r18, 0x0A	; 10
    1874:	26 9f       	mul	r18, r22
    1876:	11 24       	eor	r1, r1
    1878:	30 19       	sub	r19, r0
    187a:	30 5d       	subi	r19, 0xD0	; 208
    187c:	31 93       	st	Z+, r19
    187e:	de f6       	brtc	.-74     	; 0x1836 <__ultoa_invert+0xe>
    1880:	cf 01       	movw	r24, r30
    1882:	08 95       	ret
    1884:	46 2f       	mov	r20, r22
    1886:	47 70       	andi	r20, 0x07	; 7
    1888:	40 5d       	subi	r20, 0xD0	; 208
    188a:	41 93       	st	Z+, r20
    188c:	b3 e0       	ldi	r27, 0x03	; 3
    188e:	0f d0       	rcall	.+30     	; 0x18ae <__ultoa_invert+0x86>
    1890:	c9 f7       	brne	.-14     	; 0x1884 <__ultoa_invert+0x5c>
    1892:	f6 cf       	rjmp	.-20     	; 0x1880 <__ultoa_invert+0x58>
    1894:	46 2f       	mov	r20, r22
    1896:	4f 70       	andi	r20, 0x0F	; 15
    1898:	40 5d       	subi	r20, 0xD0	; 208
    189a:	4a 33       	cpi	r20, 0x3A	; 58
    189c:	18 f0       	brcs	.+6      	; 0x18a4 <__ultoa_invert+0x7c>
    189e:	49 5d       	subi	r20, 0xD9	; 217
    18a0:	31 fd       	sbrc	r19, 1
    18a2:	40 52       	subi	r20, 0x20	; 32
    18a4:	41 93       	st	Z+, r20
    18a6:	02 d0       	rcall	.+4      	; 0x18ac <__ultoa_invert+0x84>
    18a8:	a9 f7       	brne	.-22     	; 0x1894 <__ultoa_invert+0x6c>
    18aa:	ea cf       	rjmp	.-44     	; 0x1880 <__ultoa_invert+0x58>
    18ac:	b4 e0       	ldi	r27, 0x04	; 4
    18ae:	a6 95       	lsr	r26
    18b0:	97 95       	ror	r25
    18b2:	87 95       	ror	r24
    18b4:	77 95       	ror	r23
    18b6:	67 95       	ror	r22
    18b8:	ba 95       	dec	r27
    18ba:	c9 f7       	brne	.-14     	; 0x18ae <__ultoa_invert+0x86>
    18bc:	00 97       	sbiw	r24, 0x00	; 0
    18be:	61 05       	cpc	r22, r1
    18c0:	71 05       	cpc	r23, r1
    18c2:	08 95       	ret
    18c4:	9b 01       	movw	r18, r22
    18c6:	ac 01       	movw	r20, r24
    18c8:	0a 2e       	mov	r0, r26
    18ca:	06 94       	lsr	r0
    18cc:	57 95       	ror	r21
    18ce:	47 95       	ror	r20
    18d0:	37 95       	ror	r19
    18d2:	27 95       	ror	r18
    18d4:	ba 95       	dec	r27
    18d6:	c9 f7       	brne	.-14     	; 0x18ca <__ultoa_invert+0xa2>
    18d8:	62 0f       	add	r22, r18
    18da:	73 1f       	adc	r23, r19
    18dc:	84 1f       	adc	r24, r20
    18de:	95 1f       	adc	r25, r21
    18e0:	a0 1d       	adc	r26, r0
    18e2:	08 95       	ret

000018e4 <_exit>:
    18e4:	f8 94       	cli

000018e6 <__stop_program>:
    18e6:	ff cf       	rjmp	.-2      	; 0x18e6 <__stop_program>
