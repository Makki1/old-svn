
MIDIHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00001a4a  00001ade  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800118  00800118  00001af6  2**0
                  ALLOC
  3 .stab         000020a0  00000000  00000000  00001af8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000da2  00000000  00000000  00003b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000320  00000000  00000000  0000493a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000007c0  00000000  00000000  00004c5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004bc9  00000000  00000000  0000541a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000015fe  00000000  00000000  00009fe3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003e06  00000000  00000000  0000b5e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004a0  00000000  00000000  0000f3e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000234b  00000000  00000000  0000f888  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000020e2  00000000  00000000  00011bd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003d0  00000000  00000000  00013cb5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		Pipe_DisablePipe();
	}
}

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
       0:	40 c1       	rjmp	.+640    	; 0x282 <__ctors_end>
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       2:	00 00       	nop
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       4:	5c c1       	rjmp	.+696    	; 0x2be <__bad_interrupt>
	return USB_Host_SendControlRequest(NULL);
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
       6:	00 00       	nop

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       8:	5a c1       	rjmp	.+692    	; 0x2be <__bad_interrupt>
       a:	00 00       	nop
       c:	58 c1       	rjmp	.+688    	; 0x2be <__bad_interrupt>
       e:	00 00       	nop
      10:	56 c1       	rjmp	.+684    	; 0x2be <__bad_interrupt>
      12:	00 00       	nop
      14:	54 c1       	rjmp	.+680    	; 0x2be <__bad_interrupt>
      16:	00 00       	nop
      18:	52 c1       	rjmp	.+676    	; 0x2be <__bad_interrupt>
      1a:	00 00       	nop
      1c:	50 c1       	rjmp	.+672    	; 0x2be <__bad_interrupt>
      1e:	00 00       	nop
      20:	4e c1       	rjmp	.+668    	; 0x2be <__bad_interrupt>
      22:	00 00       	nop
      24:	4c c1       	rjmp	.+664    	; 0x2be <__bad_interrupt>
      26:	00 00       	nop
      28:	a2 c6       	rjmp	.+3396   	; 0xd6e <__vector_10>
      2a:	00 00       	nop
      2c:	48 c1       	rjmp	.+656    	; 0x2be <__bad_interrupt>
      2e:	00 00       	nop
      30:	46 c1       	rjmp	.+652    	; 0x2be <__bad_interrupt>
      32:	00 00       	nop
      34:	44 c1       	rjmp	.+648    	; 0x2be <__bad_interrupt>
      36:	00 00       	nop
      38:	42 c1       	rjmp	.+644    	; 0x2be <__bad_interrupt>
      3a:	00 00       	nop
      3c:	40 c1       	rjmp	.+640    	; 0x2be <__bad_interrupt>
      3e:	00 00       	nop
      40:	3e c1       	rjmp	.+636    	; 0x2be <__bad_interrupt>
      42:	00 00       	nop
      44:	3c c1       	rjmp	.+632    	; 0x2be <__bad_interrupt>
      46:	00 00       	nop
      48:	3a c1       	rjmp	.+628    	; 0x2be <__bad_interrupt>
      4a:	00 00       	nop
      4c:	38 c1       	rjmp	.+624    	; 0x2be <__bad_interrupt>
      4e:	00 00       	nop
      50:	36 c1       	rjmp	.+620    	; 0x2be <__bad_interrupt>
      52:	00 00       	nop
      54:	34 c1       	rjmp	.+616    	; 0x2be <__bad_interrupt>
      56:	00 00       	nop
      58:	32 c1       	rjmp	.+612    	; 0x2be <__bad_interrupt>
      5a:	00 00       	nop
      5c:	30 c1       	rjmp	.+608    	; 0x2be <__bad_interrupt>
      5e:	00 00       	nop
      60:	2e c1       	rjmp	.+604    	; 0x2be <__bad_interrupt>
      62:	00 00       	nop
      64:	2c c1       	rjmp	.+600    	; 0x2be <__bad_interrupt>
      66:	00 00       	nop
      68:	2a c1       	rjmp	.+596    	; 0x2be <__bad_interrupt>
      6a:	00 00       	nop
      6c:	28 c1       	rjmp	.+592    	; 0x2be <__bad_interrupt>
      6e:	00 00       	nop
      70:	26 c1       	rjmp	.+588    	; 0x2be <__bad_interrupt>
      72:	00 00       	nop
      74:	24 c1       	rjmp	.+584    	; 0x2be <__bad_interrupt>
      76:	00 00       	nop
      78:	22 c1       	rjmp	.+580    	; 0x2be <__bad_interrupt>
      7a:	00 00       	nop
      7c:	20 c1       	rjmp	.+576    	; 0x2be <__bad_interrupt>
      7e:	00 00       	nop
      80:	1e c1       	rjmp	.+572    	; 0x2be <__bad_interrupt>
      82:	00 00       	nop
      84:	1c c1       	rjmp	.+568    	; 0x2be <__bad_interrupt>
      86:	00 00       	nop
      88:	1a c1       	rjmp	.+564    	; 0x2be <__bad_interrupt>
      8a:	00 00       	nop
      8c:	18 c1       	rjmp	.+560    	; 0x2be <__bad_interrupt>
      8e:	00 00       	nop
      90:	16 c1       	rjmp	.+556    	; 0x2be <__bad_interrupt>
      92:	00 00       	nop
      94:	14 c1       	rjmp	.+552    	; 0x2be <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4635>:
      98:	4d 49 44 49 20 4e 6f 74 65 20 25 73 20 2d 20 43     MIDI Note %s - C
      a8:	68 61 6e 6e 65 6c 20 25 64 2c 20 50 69 74 63 68     hannel %d, Pitch
      b8:	20 25 64 2c 20 56 65 6c 6f 63 69 74 79 20 25 64      %d, Velocity %d
      c8:	0d 0a 00                                            ...

000000cb <__c.4623>:
      cb:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      db:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      eb:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      fb:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     10b:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     11b:	1b 5b 33 37 6d 00                                   .[37m.

00000121 <__c.4615>:
     121:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     131:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     141:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000150 <__c.4607>:
     150:	4d 49 44 49 20 44 65 76 69 63 65 20 45 6e 75 6d     MIDI Device Enum
     160:	65 72 61 74 65 64 2e 0d 0a 00                       erated....

0000016a <__c.4605>:
     16a:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     17a:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     18a:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     19a:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     1aa:	37 6d 00                                            7m.

000001ad <__c.4603>:
     1ad:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     1bd:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

000001c7 <__c.4601>:
     1c7:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     1d7:	69 63 65 2e 0d 0a 00                                ice....

000001de <__c.4599>:
     1de:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1ee:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     1fe:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

00000208 <__c.4596>:
     208:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     218:	61 74 61 2e 0d 0a 00                                ata....

0000021f <__c.4591>:
     21f:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
     22f:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
     23f:	00                                                  .

00000240 <__c.4586>:
     240:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     250:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

0000025d <__c.4573>:
     25d:	1b 5b 33 36 6d 4d 49 44 49 20 48 6f 73 74 20 44     .[36mMIDI Host D
     26d:	65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b     emo running....[
     27d:	33 37 6d 00 00                                      37m..

00000282 <__ctors_end>:
     282:	11 24       	eor	r1, r1
     284:	1f be       	out	0x3f, r1	; 63
     286:	cf ef       	ldi	r28, 0xFF	; 255
     288:	d0 e2       	ldi	r29, 0x20	; 32
     28a:	de bf       	out	0x3e, r29	; 62
     28c:	cd bf       	out	0x3d, r28	; 61

0000028e <__do_copy_data>:
     28e:	11 e0       	ldi	r17, 0x01	; 1
     290:	a0 e0       	ldi	r26, 0x00	; 0
     292:	b1 e0       	ldi	r27, 0x01	; 1
     294:	ea e4       	ldi	r30, 0x4A	; 74
     296:	fa e1       	ldi	r31, 0x1A	; 26
     298:	00 e0       	ldi	r16, 0x00	; 0
     29a:	0b bf       	out	0x3b, r16	; 59
     29c:	02 c0       	rjmp	.+4      	; 0x2a2 <__do_copy_data+0x14>
     29e:	07 90       	elpm	r0, Z+
     2a0:	0d 92       	st	X+, r0
     2a2:	a8 31       	cpi	r26, 0x18	; 24
     2a4:	b1 07       	cpc	r27, r17
     2a6:	d9 f7       	brne	.-10     	; 0x29e <__do_copy_data+0x10>

000002a8 <__do_clear_bss>:
     2a8:	11 e0       	ldi	r17, 0x01	; 1
     2aa:	a8 e1       	ldi	r26, 0x18	; 24
     2ac:	b1 e0       	ldi	r27, 0x01	; 1
     2ae:	01 c0       	rjmp	.+2      	; 0x2b2 <.do_clear_bss_start>

000002b0 <.do_clear_bss_loop>:
     2b0:	1d 92       	st	X+, r1

000002b2 <.do_clear_bss_start>:
     2b2:	ab 33       	cpi	r26, 0x3B	; 59
     2b4:	b1 07       	cpc	r27, r17
     2b6:	e1 f7       	brne	.-8      	; 0x2b0 <.do_clear_bss_loop>
     2b8:	be d1       	rcall	.+892    	; 0x636 <main>
     2ba:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <_exit>

000002be <__bad_interrupt>:
     2be:	a0 ce       	rjmp	.-704    	; 0x0 <__vectors>

000002c0 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     2c0:	90 91 26 01 	lds	r25, 0x0126
     2c4:	2d b7       	in	r18, 0x3d	; 61
     2c6:	3e b7       	in	r19, 0x3e	; 62
     2c8:	28 50       	subi	r18, 0x08	; 8
     2ca:	30 40       	sbci	r19, 0x00	; 0
     2cc:	0f b6       	in	r0, 0x3f	; 63
     2ce:	f8 94       	cli
     2d0:	3e bf       	out	0x3e, r19	; 62
     2d2:	0f be       	out	0x3f, r0	; 63
     2d4:	2d bf       	out	0x3d, r18	; 61
     2d6:	ed b7       	in	r30, 0x3d	; 61
     2d8:	fe b7       	in	r31, 0x3e	; 62
     2da:	31 96       	adiw	r30, 0x01	; 1
     2dc:	2b ec       	ldi	r18, 0xCB	; 203
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	ad b7       	in	r26, 0x3d	; 61
     2e2:	be b7       	in	r27, 0x3e	; 62
     2e4:	12 96       	adiw	r26, 0x02	; 2
     2e6:	3c 93       	st	X, r19
     2e8:	2e 93       	st	-X, r18
     2ea:	11 97       	sbiw	r26, 0x01	; 1
     2ec:	82 83       	std	Z+2, r24	; 0x02
     2ee:	13 82       	std	Z+3, r1	; 0x03
     2f0:	64 83       	std	Z+4, r22	; 0x04
     2f2:	15 82       	std	Z+5, r1	; 0x05
     2f4:	96 83       	std	Z+6, r25	; 0x06
     2f6:	17 82       	std	Z+7, r1	; 0x07
     2f8:	0e 94 33 0a 	call	0x1466	; 0x1466 <printf_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     2fc:	8b b1       	in	r24, 0x0b	; 11
     2fe:	8f 70       	andi	r24, 0x0F	; 15
     300:	80 69       	ori	r24, 0x90	; 144
     302:	8b b9       	out	0x0b, r24	; 11
     304:	2d b7       	in	r18, 0x3d	; 61
     306:	3e b7       	in	r19, 0x3e	; 62
     308:	28 5f       	subi	r18, 0xF8	; 248
     30a:	3f 4f       	sbci	r19, 0xFF	; 255
     30c:	0f b6       	in	r0, 0x3f	; 63
     30e:	f8 94       	cli
     310:	3e bf       	out	0x3e, r19	; 62
     312:	0f be       	out	0x3f, r0	; 63
     314:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     316:	08 95       	ret

00000318 <MIDIHost_Task>:

/** Task to read in note on/off messages from the attached MIDI device and print it to the serial port.
 *  When the board joystick or buttons are pressed, note on/off messages are sent to the attached device.
 */
void MIDIHost_Task(void)
{
     318:	1f 93       	push	r17
     31a:	df 93       	push	r29
     31c:	cf 93       	push	r28
     31e:	00 d0       	rcall	.+0      	; 0x320 <MIDIHost_Task+0x8>
     320:	00 d0       	rcall	.+0      	; 0x322 <MIDIHost_Task+0xa>
     322:	cd b7       	in	r28, 0x3d	; 61
     324:	de b7       	in	r29, 0x3e	; 62
	if (USB_HostState != HOST_STATE_Configured)
     326:	80 91 26 01 	lds	r24, 0x0126
     32a:	8b 30       	cpi	r24, 0x0B	; 11
     32c:	09 f0       	breq	.+2      	; 0x330 <MIDIHost_Task+0x18>
     32e:	b2 c0       	rjmp	.+356    	; 0x494 <MIDIHost_Task+0x17c>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	80 93 a7 00 	sts	0x00A7, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     336:	80 91 a6 00 	lds	r24, 0x00A6
	  return;
	  
	Pipe_SelectPipe(MIDI_DATA_IN_PIPE);

	if (Pipe_IsINReceived())
     33a:	80 ff       	sbrs	r24, 0
     33c:	4b c0       	rjmp	.+150    	; 0x3d4 <MIDIHost_Task+0xbc>
	{
		MIDI_EventPacket_t MIDIEvent;

		Pipe_Read_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
     33e:	ce 01       	movw	r24, r28
     340:	01 96       	adiw	r24, 0x01	; 1
     342:	64 e0       	ldi	r22, 0x04	; 4
     344:	70 e0       	ldi	r23, 0x00	; 0
     346:	40 e0       	ldi	r20, 0x00	; 0
     348:	50 e0       	ldi	r21, 0x00	; 0
     34a:	a4 d5       	rcall	.+2888   	; 0xe94 <Pipe_Read_Stream_LE>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     34c:	80 91 f6 00 	lds	r24, 0x00F6
     350:	90 91 f7 00 	lds	r25, 0x00F7

		if (!(Pipe_BytesInPipe()))
     354:	89 2b       	or	r24, r25
     356:	29 f4       	brne	.+10     	; 0x362 <MIDIHost_Task+0x4a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     358:	80 91 a6 00 	lds	r24, 0x00A6
     35c:	8e 77       	andi	r24, 0x7E	; 126
     35e:	80 93 a6 00 	sts	0x00A6, r24
		  Pipe_ClearIN();

		bool NoteOnEvent  = ((MIDIEvent.Command & 0x0F) == (MIDI_COMMAND_NOTE_ON  >> 4));
     362:	89 81       	ldd	r24, Y+1	; 0x01
     364:	8f 70       	andi	r24, 0x0F	; 15
     366:	90 e0       	ldi	r25, 0x00	; 0
		bool NoteOffEvent = ((MIDIEvent.Command & 0x0F) == (MIDI_COMMAND_NOTE_OFF >> 4));

		if (NoteOnEvent || NoteOffEvent)
     368:	89 30       	cpi	r24, 0x09	; 9
     36a:	91 05       	cpc	r25, r1
     36c:	19 f4       	brne	.+6      	; 0x374 <MIDIHost_Task+0x5c>
     36e:	20 e0       	ldi	r18, 0x00	; 0
     370:	31 e0       	ldi	r19, 0x01	; 1
     372:	04 c0       	rjmp	.+8      	; 0x37c <MIDIHost_Task+0x64>
     374:	08 97       	sbiw	r24, 0x08	; 8
     376:	71 f5       	brne	.+92     	; 0x3d4 <MIDIHost_Task+0xbc>
     378:	23 e0       	ldi	r18, 0x03	; 3
     37a:	31 e0       	ldi	r19, 0x01	; 1
		{
			printf_P(PSTR("MIDI Note %s - Channel %d, Pitch %d, Velocity %d\r\n"), NoteOnEvent ? "On" : "Off",
     37c:	8d b7       	in	r24, 0x3d	; 61
     37e:	9e b7       	in	r25, 0x3e	; 62
     380:	0a 97       	sbiw	r24, 0x0a	; 10
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	f8 94       	cli
     386:	9e bf       	out	0x3e, r25	; 62
     388:	0f be       	out	0x3f, r0	; 63
     38a:	8d bf       	out	0x3d, r24	; 61
     38c:	ed b7       	in	r30, 0x3d	; 61
     38e:	fe b7       	in	r31, 0x3e	; 62
     390:	31 96       	adiw	r30, 0x01	; 1
     392:	88 e9       	ldi	r24, 0x98	; 152
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	ad b7       	in	r26, 0x3d	; 61
     398:	be b7       	in	r27, 0x3e	; 62
     39a:	12 96       	adiw	r26, 0x02	; 2
     39c:	9c 93       	st	X, r25
     39e:	8e 93       	st	-X, r24
     3a0:	11 97       	sbiw	r26, 0x01	; 1
     3a2:	33 83       	std	Z+3, r19	; 0x03
     3a4:	22 83       	std	Z+2, r18	; 0x02
     3a6:	8a 81       	ldd	r24, Y+2	; 0x02
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	8f 70       	andi	r24, 0x0F	; 15
     3ac:	90 70       	andi	r25, 0x00	; 0
     3ae:	01 96       	adiw	r24, 0x01	; 1
     3b0:	95 83       	std	Z+5, r25	; 0x05
     3b2:	84 83       	std	Z+4, r24	; 0x04
     3b4:	8b 81       	ldd	r24, Y+3	; 0x03
     3b6:	86 83       	std	Z+6, r24	; 0x06
     3b8:	17 82       	std	Z+7, r1	; 0x07
     3ba:	8c 81       	ldd	r24, Y+4	; 0x04
     3bc:	80 87       	std	Z+8, r24	; 0x08
     3be:	11 86       	std	Z+9, r1	; 0x09
     3c0:	0e 94 33 0a 	call	0x1466	; 0x1466 <printf_P>
     3c4:	8d b7       	in	r24, 0x3d	; 61
     3c6:	9e b7       	in	r25, 0x3e	; 62
     3c8:	0a 96       	adiw	r24, 0x0a	; 10
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	f8 94       	cli
     3ce:	9e bf       	out	0x3e, r25	; 62
     3d0:	0f be       	out	0x3f, r0	; 63
     3d2:	8d bf       	out	0x3d, r24	; 61
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     3d4:	82 e0       	ldi	r24, 0x02	; 2
     3d6:	80 93 a7 00 	sts	0x00A7, r24
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     3da:	80 91 a6 00 	lds	r24, 0x00A6
		}				
	}

	Pipe_SelectPipe(MIDI_DATA_OUT_PIPE);

	if (Pipe_IsOUTReady())
     3de:	82 ff       	sbrs	r24, 2
     3e0:	59 c0       	rjmp	.+178    	; 0x494 <MIDIHost_Task+0x17c>
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     3e2:	13 b1       	in	r17, 0x03	; 3
     3e4:	8c b1       	in	r24, 0x0c	; 12
     3e6:	80 95       	com	r24
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	80 73       	andi	r24, 0x30	; 48
     3ec:	90 70       	andi	r25, 0x00	; 0
     3ee:	95 95       	asr	r25
     3f0:	87 95       	ror	r24
     3f2:	10 95       	com	r17
     3f4:	10 7e       	andi	r17, 0xE0	; 224
     3f6:	18 2b       	or	r17, r24
		uint8_t MIDICommand = 0;
		uint8_t MIDIPitch;

		static uint8_t PrevJoystickStatus;
		uint8_t JoystickStatus  = Joystick_GetStatus();
		uint8_t JoystickChanges = (JoystickStatus ^ PrevJoystickStatus);
     3f8:	80 91 18 01 	lds	r24, 0x0118
     3fc:	81 27       	eor	r24, r17

		/* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 1 */
		uint8_t Channel = ((Buttons_GetStatus() & BUTTONS_BUTTON1) ? MIDI_CHANNEL(10) : MIDI_CHANNEL(1));
     3fe:	62 9b       	sbis	0x0c, 2	; 12
     400:	02 c0       	rjmp	.+4      	; 0x406 <MIDIHost_Task+0xee>
     402:	40 e0       	ldi	r20, 0x00	; 0
     404:	01 c0       	rjmp	.+2      	; 0x408 <MIDIHost_Task+0xf0>
     406:	49 e0       	ldi	r20, 0x09	; 9

		if (JoystickChanges & JOY_LEFT)
     408:	38 2f       	mov	r19, r24
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	86 ff       	sbrs	r24, 6
     40e:	05 c0       	rjmp	.+10     	; 0x41a <MIDIHost_Task+0x102>
		{
			MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     410:	16 fd       	sbrc	r17, 6
     412:	02 c0       	rjmp	.+4      	; 0x418 <MIDIHost_Task+0x100>
     414:	90 e8       	ldi	r25, 0x80	; 128
     416:	01 c0       	rjmp	.+2      	; 0x41a <MIDIHost_Task+0x102>
     418:	90 e9       	ldi	r25, 0x90	; 144
			MIDIPitch   = 0x3C;
		}

		if (JoystickChanges & JOY_UP)
     41a:	87 fd       	sbrc	r24, 7
     41c:	02 c0       	rjmp	.+4      	; 0x422 <MIDIHost_Task+0x10a>
     41e:	2c e3       	ldi	r18, 0x3C	; 60
     420:	06 c0       	rjmp	.+12     	; 0x42e <MIDIHost_Task+0x116>
		{
			MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     422:	17 fd       	sbrc	r17, 7
     424:	02 c0       	rjmp	.+4      	; 0x42a <MIDIHost_Task+0x112>
     426:	90 e8       	ldi	r25, 0x80	; 128
     428:	01 c0       	rjmp	.+2      	; 0x42c <MIDIHost_Task+0x114>
     42a:	90 e9       	ldi	r25, 0x90	; 144
     42c:	2d e3       	ldi	r18, 0x3D	; 61
			MIDIPitch   = 0x3D;
		}

		if (JoystickChanges & JOY_RIGHT)
     42e:	33 ff       	sbrs	r19, 3
     430:	06 c0       	rjmp	.+12     	; 0x43e <MIDIHost_Task+0x126>
		{
			MIDICommand = ((JoystickStatus & JOY_RIGHT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     432:	13 fd       	sbrc	r17, 3
     434:	02 c0       	rjmp	.+4      	; 0x43a <MIDIHost_Task+0x122>
     436:	90 e8       	ldi	r25, 0x80	; 128
     438:	01 c0       	rjmp	.+2      	; 0x43c <MIDIHost_Task+0x124>
     43a:	90 e9       	ldi	r25, 0x90	; 144
     43c:	2e e3       	ldi	r18, 0x3E	; 62
			MIDIPitch   = 0x3E;
		}

		if (JoystickChanges & JOY_DOWN)
     43e:	34 ff       	sbrs	r19, 4
     440:	06 c0       	rjmp	.+12     	; 0x44e <MIDIHost_Task+0x136>
		{
			MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     442:	14 fd       	sbrc	r17, 4
     444:	02 c0       	rjmp	.+4      	; 0x44a <MIDIHost_Task+0x132>
     446:	90 e8       	ldi	r25, 0x80	; 128
     448:	01 c0       	rjmp	.+2      	; 0x44c <MIDIHost_Task+0x134>
     44a:	90 e9       	ldi	r25, 0x90	; 144
     44c:	2f e3       	ldi	r18, 0x3F	; 63
			MIDIPitch   = 0x3F;
		}

		if (JoystickChanges & JOY_PRESS)
     44e:	35 ff       	sbrs	r19, 5
     450:	04 c0       	rjmp	.+8      	; 0x45a <MIDIHost_Task+0x142>
		{
			MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     452:	15 ff       	sbrs	r17, 5
     454:	1c c0       	rjmp	.+56     	; 0x48e <MIDIHost_Task+0x176>
     456:	90 e9       	ldi	r25, 0x90	; 144
     458:	1b c0       	rjmp	.+54     	; 0x490 <MIDIHost_Task+0x178>
			MIDIPitch   = 0x3B;
		}

		/* Check if a MIDI command is to be sent */
		if (MIDICommand)
     45a:	99 23       	and	r25, r25
     45c:	a9 f0       	breq	.+42     	; 0x488 <MIDIHost_Task+0x170>
					.Command     = (MIDICommand >> 4),

					.Data1       = MIDICommand | Channel,
					.Data2       = MIDIPitch,
					.Data3       = MIDI_STANDARD_VELOCITY,
				};
     45e:	89 2f       	mov	r24, r25
     460:	82 95       	swap	r24
     462:	8f 70       	andi	r24, 0x0F	; 15
     464:	89 83       	std	Y+1, r24	; 0x01
     466:	94 2b       	or	r25, r20
     468:	9a 83       	std	Y+2, r25	; 0x02
     46a:	2b 83       	std	Y+3, r18	; 0x03
     46c:	80 e4       	ldi	r24, 0x40	; 64
     46e:	8c 83       	std	Y+4, r24	; 0x04

			/* Write the MIDI event packet to the pipe */
			Pipe_Write_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
     470:	ce 01       	movw	r24, r28
     472:	01 96       	adiw	r24, 0x01	; 1
     474:	64 e0       	ldi	r22, 0x04	; 4
     476:	70 e0       	ldi	r23, 0x00	; 0
     478:	40 e0       	ldi	r20, 0x00	; 0
     47a:	50 e0       	ldi	r21, 0x00	; 0
     47c:	62 d5       	rcall	.+2756   	; 0xf42 <Pipe_Write_Stream_LE>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     47e:	80 91 a6 00 	lds	r24, 0x00A6
     482:	8b 77       	andi	r24, 0x7B	; 123
     484:	80 93 a6 00 	sts	0x00A6, r24
			/* Send the data in the pipe to the device */
			Pipe_ClearOUT();
		}

		/* Save previous joystick value for next joystick change detection */
		PrevJoystickStatus = JoystickStatus;
     488:	10 93 18 01 	sts	0x0118, r17
     48c:	03 c0       	rjmp	.+6      	; 0x494 <MIDIHost_Task+0x17c>
     48e:	90 e8       	ldi	r25, 0x80	; 128
     490:	2b e3       	ldi	r18, 0x3B	; 59
     492:	e5 cf       	rjmp	.-54     	; 0x45e <MIDIHost_Task+0x146>
	}
}
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	cf 91       	pop	r28
     49e:	df 91       	pop	r29
     4a0:	1f 91       	pop	r17
     4a2:	08 95       	ret

000004a4 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     4a4:	1f 93       	push	r17
     4a6:	18 2f       	mov	r17, r24
	USB_Disable();
     4a8:	3d d4       	rcall	.+2170   	; 0xd24 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     4aa:	00 d0       	rcall	.+0      	; 0x4ac <EVENT_USB_Host_HostError+0x8>
     4ac:	00 d0       	rcall	.+0      	; 0x4ae <EVENT_USB_Host_HostError+0xa>
     4ae:	ed b7       	in	r30, 0x3d	; 61
     4b0:	fe b7       	in	r31, 0x3e	; 62
     4b2:	31 96       	adiw	r30, 0x01	; 1
     4b4:	81 e2       	ldi	r24, 0x21	; 33
     4b6:	91 e0       	ldi	r25, 0x01	; 1
     4b8:	ad b7       	in	r26, 0x3d	; 61
     4ba:	be b7       	in	r27, 0x3e	; 62
     4bc:	12 96       	adiw	r26, 0x02	; 2
     4be:	9c 93       	st	X, r25
     4c0:	8e 93       	st	-X, r24
     4c2:	11 97       	sbiw	r26, 0x01	; 1
     4c4:	12 83       	std	Z+2, r17	; 0x02
     4c6:	13 82       	std	Z+3, r1	; 0x03
     4c8:	ce d7       	rcall	.+3996   	; 0x1466 <printf_P>
     4ca:	8b b1       	in	r24, 0x0b	; 11
     4cc:	8f 70       	andi	r24, 0x0F	; 15
     4ce:	80 69       	ori	r24, 0x90	; 144
     4d0:	8b b9       	out	0x0b, r24	; 11
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	ff cf       	rjmp	.-2      	; 0x4da <EVENT_USB_Host_HostError+0x36>

000004dc <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     4dc:	8f e1       	ldi	r24, 0x1F	; 31
     4de:	92 e0       	ldi	r25, 0x02	; 2
     4e0:	e4 d7       	rcall	.+4040   	; 0x14aa <puts_P>
     4e2:	8b b1       	in	r24, 0x0b	; 11
     4e4:	8f 70       	andi	r24, 0x0F	; 15
     4e6:	80 61       	ori	r24, 0x10	; 16
     4e8:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     4ea:	08 95       	ret

000004ec <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     4ec:	80 e4       	ldi	r24, 0x40	; 64
     4ee:	92 e0       	ldi	r25, 0x02	; 2
     4f0:	dc d7       	rcall	.+4024   	; 0x14aa <puts_P>
     4f2:	8b b1       	in	r24, 0x0b	; 11
     4f4:	8f 70       	andi	r24, 0x0F	; 15
     4f6:	80 6a       	ori	r24, 0xA0	; 160
     4f8:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     4fa:	08 95       	ret

000004fc <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     4fc:	1f 93       	push	r17
	puts_P(PSTR("Getting Config Data.\r\n"));
     4fe:	88 e0       	ldi	r24, 0x08	; 8
     500:	92 e0       	ldi	r25, 0x02	; 2
     502:	d3 d7       	rcall	.+4006   	; 0x14aa <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     504:	c2 d0       	rcall	.+388    	; 0x68a <ProcessConfigurationDescriptor>
     506:	18 2f       	mov	r17, r24
     508:	88 23       	and	r24, r24
     50a:	b9 f0       	breq	.+46     	; 0x53a <EVENT_USB_Host_DeviceEnumerationComplete+0x3e>
	{
		if (ErrorCode == ControlError)
     50c:	81 30       	cpi	r24, 0x01	; 1
     50e:	19 f4       	brne	.+6      	; 0x516 <EVENT_USB_Host_DeviceEnumerationComplete+0x1a>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     510:	8e ed       	ldi	r24, 0xDE	; 222
     512:	91 e0       	ldi	r25, 0x01	; 1
     514:	02 c0       	rjmp	.+4      	; 0x51a <EVENT_USB_Host_DeviceEnumerationComplete+0x1e>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     516:	87 ec       	ldi	r24, 0xC7	; 199
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	c7 d7       	rcall	.+3982   	; 0x14aa <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     51c:	00 d0       	rcall	.+0      	; 0x51e <EVENT_USB_Host_DeviceEnumerationComplete+0x22>
     51e:	00 d0       	rcall	.+0      	; 0x520 <EVENT_USB_Host_DeviceEnumerationComplete+0x24>
     520:	ed b7       	in	r30, 0x3d	; 61
     522:	fe b7       	in	r31, 0x3e	; 62
     524:	31 96       	adiw	r30, 0x01	; 1
     526:	8d ea       	ldi	r24, 0xAD	; 173
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	ad b7       	in	r26, 0x3d	; 61
     52c:	be b7       	in	r27, 0x3e	; 62
     52e:	12 96       	adiw	r26, 0x02	; 2
     530:	9c 93       	st	X, r25
     532:	8e 93       	st	-X, r24
     534:	11 97       	sbiw	r26, 0x01	; 1
     536:	12 83       	std	Z+2, r17	; 0x02
     538:	13 c0       	rjmp	.+38     	; 0x560 <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	3f d7       	rcall	.+3710   	; 0x13bc <USB_Host_SetDeviceConfiguration>
     53e:	28 2f       	mov	r18, r24
     540:	88 23       	and	r24, r24
     542:	c9 f0       	breq	.+50     	; 0x576 <EVENT_USB_Host_DeviceEnumerationComplete+0x7a>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     544:	00 d0       	rcall	.+0      	; 0x546 <EVENT_USB_Host_DeviceEnumerationComplete+0x4a>
     546:	00 d0       	rcall	.+0      	; 0x548 <EVENT_USB_Host_DeviceEnumerationComplete+0x4c>
     548:	ed b7       	in	r30, 0x3d	; 61
     54a:	fe b7       	in	r31, 0x3e	; 62
     54c:	31 96       	adiw	r30, 0x01	; 1
     54e:	8a e6       	ldi	r24, 0x6A	; 106
     550:	91 e0       	ldi	r25, 0x01	; 1
     552:	ad b7       	in	r26, 0x3d	; 61
     554:	be b7       	in	r27, 0x3e	; 62
     556:	12 96       	adiw	r26, 0x02	; 2
     558:	9c 93       	st	X, r25
     55a:	8e 93       	st	-X, r24
     55c:	11 97       	sbiw	r26, 0x01	; 1
     55e:	22 83       	std	Z+2, r18	; 0x02
     560:	13 82       	std	Z+3, r1	; 0x03
     562:	81 d7       	rcall	.+3842   	; 0x1466 <printf_P>
     564:	8b b1       	in	r24, 0x0b	; 11
     566:	8f 70       	andi	r24, 0x0F	; 15
     568:	80 69       	ori	r24, 0x90	; 144
     56a:	8b b9       	out	0x0b, r24	; 11
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
     574:	07 c0       	rjmp	.+14     	; 0x584 <EVENT_USB_Host_DeviceEnumerationComplete+0x88>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	puts_P(PSTR("MIDI Device Enumerated.\r\n"));
     576:	80 e5       	ldi	r24, 0x50	; 80
     578:	91 e0       	ldi	r25, 0x01	; 1
     57a:	97 d7       	rcall	.+3886   	; 0x14aa <puts_P>
     57c:	8b b1       	in	r24, 0x0b	; 11
     57e:	8f 70       	andi	r24, 0x0F	; 15
     580:	80 66       	ori	r24, 0x60	; 96
     582:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     584:	1f 91       	pop	r17
     586:	08 95       	ret

00000588 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     588:	84 b7       	in	r24, 0x34	; 52
     58a:	87 7f       	andi	r24, 0xF7	; 247
     58c:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     58e:	28 e1       	ldi	r18, 0x18	; 24
     590:	0f b6       	in	r0, 0x3f	; 63
     592:	f8 94       	cli
     594:	20 93 60 00 	sts	0x0060, r18
     598:	10 92 60 00 	sts	0x0060, r1
     59c:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	80 e8       	ldi	r24, 0x80	; 128
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	f8 94       	cli
     5a6:	80 93 61 00 	sts	0x0061, r24
     5aa:	90 93 61 00 	sts	0x0061, r25
     5ae:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     5b0:	83 e3       	ldi	r24, 0x33	; 51
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	90 93 cd 00 	sts	0x00CD, r25
     5b8:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     5bc:	86 e0       	ldi	r24, 0x06	; 6
     5be:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     5c2:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     5c6:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     5ca:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     5cc:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     5ce:	8a b1       	in	r24, 0x0a	; 10
     5d0:	80 6f       	ori	r24, 0xF0	; 240
     5d2:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     5d4:	8b b1       	in	r24, 0x0b	; 11
     5d6:	8f 70       	andi	r24, 0x0F	; 15
     5d8:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     5da:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     5dc:	72 9a       	sbi	0x0e, 2	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
     5de:	84 b1       	in	r24, 0x04	; 4
     5e0:	8f 71       	andi	r24, 0x1F	; 31
     5e2:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
     5e4:	8d b1       	in	r24, 0x0d	; 13
     5e6:	8f 7c       	andi	r24, 0xCF	; 207
     5e8:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
     5ea:	85 b1       	in	r24, 0x05	; 5
     5ec:	80 6e       	ori	r24, 0xE0	; 224
     5ee:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
     5f0:	8e b1       	in	r24, 0x0e	; 14
     5f2:	80 63       	ori	r24, 0x30	; 48
     5f4:	8e b9       	out	0x0e, r24	; 14
	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	Buttons_Init();
	Joystick_Init();
	USB_Init();
     5f6:	8d d3       	rcall	.+1818   	; 0xd12 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     5f8:	e7 e2       	ldi	r30, 0x27	; 39
     5fa:	f1 e0       	ldi	r31, 0x01	; 1
     5fc:	f0 93 36 01 	sts	0x0136, r31
     600:	e0 93 35 01 	sts	0x0135, r30
					stdout = Stream;
     604:	f0 93 38 01 	sts	0x0138, r31
     608:	e0 93 37 01 	sts	0x0137, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     60c:	8e e0       	ldi	r24, 0x0E	; 14
     60e:	df 01       	movw	r26, r30
     610:	1d 92       	st	X+, r1
     612:	8a 95       	dec	r24
     614:	e9 f7       	brne	.-6      	; 0x610 <SetupHardware+0x88>
     616:	83 e0       	ldi	r24, 0x03	; 3
     618:	80 93 2a 01 	sts	0x012A, r24
     61c:	85 e1       	ldi	r24, 0x15	; 21
     61e:	9a e0       	ldi	r25, 0x0A	; 10
     620:	90 93 30 01 	sts	0x0130, r25
     624:	80 93 2f 01 	sts	0x012F, r24
     628:	8f e1       	ldi	r24, 0x1F	; 31
     62a:	9a e0       	ldi	r25, 0x0A	; 10
     62c:	90 93 32 01 	sts	0x0132, r25
     630:	80 93 31 01 	sts	0x0131, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     634:	08 95       	ret

00000636 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     636:	a8 df       	rcall	.-176    	; 0x588 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "MIDI Host Demo running.\r\n" ESC_FG_WHITE));
     638:	8d e5       	ldi	r24, 0x5D	; 93
     63a:	92 e0       	ldi	r25, 0x02	; 2
     63c:	36 d7       	rcall	.+3692   	; 0x14aa <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     63e:	8b b1       	in	r24, 0x0b	; 11
     640:	8f 70       	andi	r24, 0x0F	; 15
     642:	80 61       	ori	r24, 0x10	; 16
     644:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     646:	78 94       	sei

	for (;;)
	{
		MIDIHost_Task();
     648:	67 de       	rcall	.-818    	; 0x318 <MIDIHost_Task>

		USB_USBTask();
     64a:	dd d6       	rcall	.+3514   	; 0x1406 <USB_USBTask>
     64c:	fd cf       	rjmp	.-6      	; 0x648 <main+0x12>

0000064e <DComp_NextMIDIStreamingInterface>:
 *  This comparator searches for the next Interface descriptor of the correct MIDI Streaming Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextMIDIStreamingInterface(void* CurrentDescriptor)
{
     64e:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     650:	81 81       	ldd	r24, Z+1	; 0x01
     652:	84 30       	cpi	r24, 0x04	; 4
     654:	41 f4       	brne	.+16     	; 0x666 <DComp_NextMIDIStreamingInterface+0x18>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the MIDI descriptor class, subclass and protocol, break out if correct data interface found */
		if ((Interface->Class    == AUDIO_CSCP_AudioClass)            &&
     656:	85 81       	ldd	r24, Z+5	; 0x05
     658:	81 30       	cpi	r24, 0x01	; 1
     65a:	29 f4       	brne	.+10     	; 0x666 <DComp_NextMIDIStreamingInterface+0x18>
     65c:	86 81       	ldd	r24, Z+6	; 0x06
     65e:	83 30       	cpi	r24, 0x03	; 3
     660:	11 f4       	brne	.+4      	; 0x666 <DComp_NextMIDIStreamingInterface+0x18>
     662:	87 81       	ldd	r24, Z+7	; 0x07
     664:	81 11       	cpse	r24, r1
     666:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     668:	08 95       	ret

0000066a <DComp_NextMIDIStreamingDataEndpoint>:
 *  another interface descriptor is found before the required endpoint.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextMIDIStreamingDataEndpoint(void* CurrentDescriptor)
{
     66a:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     66c:	81 81       	ldd	r24, Z+1	; 0x01
     66e:	85 30       	cpi	r24, 0x05	; 5
     670:	31 f4       	brne	.+12     	; 0x67e <DComp_NextMIDIStreamingDataEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK type endpoint found */
		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK)
     672:	83 81       	ldd	r24, Z+3	; 0x03
     674:	83 70       	andi	r24, 0x03	; 3
     676:	82 30       	cpi	r24, 0x02	; 2
     678:	31 f4       	brne	.+12     	; 0x686 <DComp_NextMIDIStreamingDataEndpoint+0x1c>
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	08 95       	ret
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
     67e:	84 30       	cpi	r24, 0x04	; 4
     680:	11 f4       	brne	.+4      	; 0x686 <DComp_NextMIDIStreamingDataEndpoint+0x1c>
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	08 95       	ret
     686:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     688:	08 95       	ret

0000068a <ProcessConfigurationDescriptor>:
 *  This routine searches for a MIDI interface descriptor pair containing bulk data IN and OUT endpoints.
 *
 *  \return An error code from the \ref MIDIHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     68a:	8f 92       	push	r8
     68c:	9f 92       	push	r9
     68e:	af 92       	push	r10
     690:	bf 92       	push	r11
     692:	cf 92       	push	r12
     694:	df 92       	push	r13
     696:	ef 92       	push	r14
     698:	ff 92       	push	r15
     69a:	0f 93       	push	r16
     69c:	1f 93       	push	r17
     69e:	df 93       	push	r29
     6a0:	cf 93       	push	r28
     6a2:	cd b7       	in	r28, 0x3d	; 61
     6a4:	de b7       	in	r29, 0x3e	; 62
     6a6:	c4 50       	subi	r28, 0x04	; 4
     6a8:	d2 40       	sbci	r29, 0x02	; 2
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	f8 94       	cli
     6ae:	de bf       	out	0x3e, r29	; 62
     6b0:	0f be       	out	0x3f, r0	; 63
     6b2:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     6b4:	ae 01       	movw	r20, r28
     6b6:	4b 5f       	subi	r20, 0xFB	; 251
     6b8:	5f 4f       	sbci	r21, 0xFF	; 255
     6ba:	5a 83       	std	Y+2, r21	; 0x02
     6bc:	49 83       	std	Y+1, r20	; 0x01
	USB_Descriptor_Interface_t* MIDIInterface   = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     6be:	83 e0       	ldi	r24, 0x03	; 3
     6c0:	a8 2e       	mov	r10, r24
     6c2:	b1 2c       	mov	r11, r1
     6c4:	ac 0e       	add	r10, r28
     6c6:	bd 1e       	adc	r11, r29
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	b5 01       	movw	r22, r10
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	32 e0       	ldi	r19, 0x02	; 2
     6d0:	d3 d4       	rcall	.+2470   	; 0x1078 <USB_Host_GetDeviceConfigDescriptor>
     6d2:	85 30       	cpi	r24, 0x05	; 5
     6d4:	29 f0       	breq	.+10     	; 0x6e0 <ProcessConfigurationDescriptor+0x56>
     6d6:	86 30       	cpi	r24, 0x06	; 6
     6d8:	89 f0       	breq	.+34     	; 0x6fc <ProcessConfigurationDescriptor+0x72>
     6da:	88 23       	and	r24, r24
     6dc:	19 f0       	breq	.+6      	; 0x6e4 <ProcessConfigurationDescriptor+0x5a>
     6de:	10 c0       	rjmp	.+32     	; 0x700 <ProcessConfigurationDescriptor+0x76>
     6e0:	82 e0       	ldi	r24, 0x02	; 2
     6e2:	4a c0       	rjmp	.+148    	; 0x778 <ProcessConfigurationDescriptor+0xee>
     6e4:	00 e0       	ldi	r16, 0x00	; 0
     6e6:	10 e0       	ldi	r17, 0x00	; 0
     6e8:	ee 24       	eor	r14, r14
     6ea:	ff 24       	eor	r15, r15
     6ec:	cc 24       	eor	r12, r12
     6ee:	dd 24       	eor	r13, r13
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(MIDIInterface) ||
     6f0:	45 01       	movw	r8, r10
     6f2:	5e 01       	movw	r10, r28
     6f4:	08 94       	sec
     6f6:	a1 1c       	adc	r10, r1
     6f8:	b1 1c       	adc	r11, r1
     6fa:	04 c0       	rjmp	.+8      	; 0x704 <ProcessConfigurationDescriptor+0x7a>
	USB_Descriptor_Interface_t* MIDIInterface   = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     6fc:	83 e0       	ldi	r24, 0x03	; 3
     6fe:	3c c0       	rjmp	.+120    	; 0x778 <ProcessConfigurationDescriptor+0xee>
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	3a c0       	rjmp	.+116    	; 0x778 <ProcessConfigurationDescriptor+0xee>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(MIDIInterface) ||
     704:	01 15       	cp	r16, r1
     706:	11 05       	cpc	r17, r1
     708:	39 f0       	breq	.+14     	; 0x718 <ProcessConfigurationDescriptor+0x8e>
     70a:	c4 01       	movw	r24, r8
     70c:	b5 01       	movw	r22, r10
     70e:	45 e3       	ldi	r20, 0x35	; 53
     710:	53 e0       	ldi	r21, 0x03	; 3
     712:	6e d4       	rcall	.+2268   	; 0xff0 <USB_GetNextDescriptorComp>
     714:	88 23       	and	r24, r24
     716:	81 f0       	breq	.+32     	; 0x738 <ProcessConfigurationDescriptor+0xae>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextMIDIStreamingDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next Mass Storage interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     718:	c4 01       	movw	r24, r8
     71a:	b5 01       	movw	r22, r10
     71c:	47 e2       	ldi	r20, 0x27	; 39
     71e:	53 e0       	ldi	r21, 0x03	; 3
     720:	67 d4       	rcall	.+2254   	; 0xff0 <USB_GetNextDescriptorComp>
     722:	88 23       	and	r24, r24
     724:	11 f0       	breq	.+4      	; 0x72a <ProcessConfigurationDescriptor+0xa0>
     726:	84 e0       	ldi	r24, 0x04	; 4
     728:	27 c0       	rjmp	.+78     	; 0x778 <ProcessConfigurationDescriptor+0xee>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			MIDIInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     72a:	09 81       	ldd	r16, Y+1	; 0x01
     72c:	1a 81       	ldd	r17, Y+2	; 0x02
     72e:	cc 24       	eor	r12, r12
     730:	dd 24       	eor	r13, r13
     732:	ee 24       	eor	r14, r14
     734:	ff 24       	eor	r15, r15
     736:	e6 cf       	rjmp	.-52     	; 0x704 <ProcessConfigurationDescriptor+0x7a>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     738:	e9 81       	ldd	r30, Y+1	; 0x01
     73a:	fa 81       	ldd	r31, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     73c:	82 81       	ldd	r24, Z+2	; 0x02
     73e:	87 fd       	sbrc	r24, 7
     740:	02 c0       	rjmp	.+4      	; 0x746 <ProcessConfigurationDescriptor+0xbc>
     742:	6f 01       	movw	r12, r30
     744:	01 c0       	rjmp	.+2      	; 0x748 <ProcessConfigurationDescriptor+0xbe>
     746:	7f 01       	movw	r14, r30
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     748:	e1 14       	cp	r14, r1
     74a:	f1 04       	cpc	r15, r1
     74c:	d9 f2       	breq	.-74     	; 0x704 <ProcessConfigurationDescriptor+0x7a>
     74e:	c1 14       	cp	r12, r1
     750:	d1 04       	cpc	r13, r1
     752:	c1 f2       	breq	.-80     	; 0x704 <ProcessConfigurationDescriptor+0x7a>
		else
		  DataOUTEndpoint = EndpointData;
	}

	/* Configure the MIDI data IN pipe */
	Pipe_ConfigurePipe(MIDI_DATA_IN_PIPE, EP_TYPE_BULK, PIPE_TOKEN_IN,
     754:	f7 01       	movw	r30, r14
     756:	04 81       	ldd	r16, Z+4	; 0x04
     758:	15 81       	ldd	r17, Z+5	; 0x05
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	62 e0       	ldi	r22, 0x02	; 2
     75e:	40 e1       	ldi	r20, 0x10	; 16
     760:	22 81       	ldd	r18, Z+2	; 0x02
     762:	ee 24       	eor	r14, r14
     764:	e5 d1       	rcall	.+970    	; 0xb30 <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Configure the MIDI data OUT pipe */
	Pipe_ConfigurePipe(MIDI_DATA_OUT_PIPE, EP_TYPE_BULK, PIPE_TOKEN_OUT,
     766:	f6 01       	movw	r30, r12
     768:	04 81       	ldd	r16, Z+4	; 0x04
     76a:	15 81       	ldd	r17, Z+5	; 0x05
     76c:	82 e0       	ldi	r24, 0x02	; 2
     76e:	62 e0       	ldi	r22, 0x02	; 2
     770:	40 e2       	ldi	r20, 0x20	; 32
     772:	22 81       	ldd	r18, Z+2	; 0x02
     774:	dd d1       	rcall	.+954    	; 0xb30 <Pipe_ConfigurePipe>
     776:	80 e0       	ldi	r24, 0x00	; 0
					   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     778:	cc 5f       	subi	r28, 0xFC	; 252
     77a:	dd 4f       	sbci	r29, 0xFD	; 253
     77c:	0f b6       	in	r0, 0x3f	; 63
     77e:	f8 94       	cli
     780:	de bf       	out	0x3e, r29	; 62
     782:	0f be       	out	0x3f, r0	; 63
     784:	cd bf       	out	0x3d, r28	; 61
     786:	cf 91       	pop	r28
     788:	df 91       	pop	r29
     78a:	1f 91       	pop	r17
     78c:	0f 91       	pop	r16
     78e:	ff 90       	pop	r15
     790:	ef 90       	pop	r14
     792:	df 90       	pop	r13
     794:	cf 90       	pop	r12
     796:	bf 90       	pop	r11
     798:	af 90       	pop	r10
     79a:	9f 90       	pop	r9
     79c:	8f 90       	pop	r8
     79e:	08 95       	ret

000007a0 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     7a0:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     7a2:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     7a6:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     7aa:	80 91 a0 00 	lds	r24, 0x00A0
     7ae:	8f 7d       	andi	r24, 0xDF	; 223
     7b0:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     7b4:	80 91 9f 00 	lds	r24, 0x009F
     7b8:	8f 7d       	andi	r24, 0xDF	; 223
     7ba:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     7be:	80 91 9e 00 	lds	r24, 0x009E
     7c2:	81 60       	ori	r24, 0x01	; 1
     7c4:	80 93 9e 00 	sts	0x009E, r24
     7c8:	28 c0       	rjmp	.+80     	; 0x81a <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     7ca:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     7ce:	85 ff       	sbrs	r24, 5
     7d0:	06 c0       	rjmp	.+12     	; 0x7de <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     7d2:	80 91 9f 00 	lds	r24, 0x009F
     7d6:	8f 7d       	andi	r24, 0xDF	; 223
     7d8:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     7dc:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     7de:	80 91 26 01 	lds	r24, 0x0126
     7e2:	81 30       	cpi	r24, 0x01	; 1
     7e4:	11 f4       	brne	.+4      	; 0x7ea <USB_Host_WaitMS+0x4a>
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	1a c0       	rjmp	.+52     	; 0x81e <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     7ea:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     7ee:	84 ff       	sbrs	r24, 4
     7f0:	09 c0       	rjmp	.+18     	; 0x804 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     7f2:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     7f6:	80 91 a6 00 	lds	r24, 0x00A6
     7fa:	8f 7e       	andi	r24, 0xEF	; 239
     7fc:	80 93 a6 00 	sts	0x00A6, r24
     800:	92 e0       	ldi	r25, 0x02	; 2
     802:	0d c0       	rjmp	.+26     	; 0x81e <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     804:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     808:	81 ff       	sbrs	r24, 1
     80a:	07 c0       	rjmp	.+14     	; 0x81a <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     80c:	80 91 a6 00 	lds	r24, 0x00A6
     810:	8d 7f       	andi	r24, 0xFD	; 253
     812:	80 93 a6 00 	sts	0x00A6, r24
     816:	93 e0       	ldi	r25, 0x03	; 3
     818:	02 c0       	rjmp	.+4      	; 0x81e <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     81a:	99 23       	and	r25, r25
     81c:	b1 f6       	brne	.-84     	; 0x7ca <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     81e:	20 fd       	sbrc	r18, 0
     820:	05 c0       	rjmp	.+10     	; 0x82c <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     822:	80 91 9e 00 	lds	r24, 0x009E
     826:	8e 7f       	andi	r24, 0xFE	; 254
     828:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     82c:	35 ff       	sbrs	r19, 5
     82e:	05 c0       	rjmp	.+10     	; 0x83a <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     830:	80 91 a0 00 	lds	r24, 0x00A0
     834:	80 62       	ori	r24, 0x20	; 32
     836:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     83a:	89 2f       	mov	r24, r25
     83c:	08 95       	ret

0000083e <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     83e:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     842:	80 91 a0 00 	lds	r24, 0x00A0
     846:	8d 7f       	andi	r24, 0xFD	; 253
     848:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     84c:	80 91 9e 00 	lds	r24, 0x009E
     850:	82 60       	ori	r24, 0x02	; 2
     852:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     856:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     85a:	81 fd       	sbrc	r24, 1
     85c:	fc cf       	rjmp	.-8      	; 0x856 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     85e:	80 91 9e 00 	lds	r24, 0x009E
     862:	81 60       	ori	r24, 0x01	; 1
     864:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     868:	10 92 1c 01 	sts	0x011C, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     86c:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     870:	80 91 a0 00 	lds	r24, 0x00A0
     874:	8f 7d       	andi	r24, 0xDF	; 223
     876:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     87a:	80 91 9f 00 	lds	r24, 0x009F
     87e:	8f 7d       	andi	r24, 0xDF	; 223
     880:	80 93 9f 00 	sts	0x009F, r24
     884:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     886:	40 ed       	ldi	r20, 0xD0	; 208
     888:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     88a:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     88e:	85 ff       	sbrs	r24, 5
     890:	0b c0       	rjmp	.+22     	; 0x8a8 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     892:	80 91 9f 00 	lds	r24, 0x009F
     896:	8f 7d       	andi	r24, 0xDF	; 223
     898:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     89c:	80 91 9f 00 	lds	r24, 0x009F
     8a0:	8d 7f       	andi	r24, 0xFD	; 253
     8a2:	80 93 9f 00 	sts	0x009F, r24
     8a6:	05 c0       	rjmp	.+10     	; 0x8b2 <USB_Host_ResetDevice+0x74>
     8a8:	ca 01       	movw	r24, r20
     8aa:	01 97       	sbiw	r24, 0x01	; 1
     8ac:	f1 f7       	brne	.-4      	; 0x8aa <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     8ae:	21 50       	subi	r18, 0x01	; 1
     8b0:	61 f7       	brne	.-40     	; 0x88a <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     8b2:	35 ff       	sbrs	r19, 5
     8b4:	05 c0       	rjmp	.+10     	; 0x8c0 <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     8b6:	80 91 a0 00 	lds	r24, 0x00A0
     8ba:	80 62       	ori	r24, 0x20	; 32
     8bc:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     8c0:	60 fd       	sbrc	r22, 0
     8c2:	05 c0       	rjmp	.+10     	; 0x8ce <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     8c4:	80 91 9e 00 	lds	r24, 0x009E
     8c8:	8e 7f       	andi	r24, 0xFE	; 254
     8ca:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     8ce:	80 91 a0 00 	lds	r24, 0x00A0
     8d2:	82 60       	ori	r24, 0x02	; 2
     8d4:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     8d8:	08 95       	ret

000008da <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     8da:	ef 92       	push	r14
     8dc:	0f 93       	push	r16
     8de:	1f 93       	push	r17
     8e0:	df 93       	push	r29
     8e2:	cf 93       	push	r28
     8e4:	cd b7       	in	r28, 0x3d	; 61
     8e6:	de b7       	in	r29, 0x3e	; 62
     8e8:	28 97       	sbiw	r28, 0x08	; 8
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	f8 94       	cli
     8ee:	de bf       	out	0x3e, r29	; 62
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     8f4:	80 91 26 01 	lds	r24, 0x0126
     8f8:	85 30       	cpi	r24, 0x05	; 5
     8fa:	09 f4       	brne	.+2      	; 0x8fe <USB_Host_ProcessNextHostState+0x24>
     8fc:	94 c0       	rjmp	.+296    	; 0xa26 <USB_Host_ProcessNextHostState+0x14c>
     8fe:	86 30       	cpi	r24, 0x06	; 6
     900:	68 f4       	brcc	.+26     	; 0x91c <USB_Host_ProcessNextHostState+0x42>
     902:	82 30       	cpi	r24, 0x02	; 2
     904:	b9 f1       	breq	.+110    	; 0x974 <USB_Host_ProcessNextHostState+0x9a>
     906:	83 30       	cpi	r24, 0x03	; 3
     908:	18 f4       	brcc	.+6      	; 0x910 <USB_Host_ProcessNextHostState+0x36>
     90a:	88 23       	and	r24, r24
     90c:	a1 f0       	breq	.+40     	; 0x936 <USB_Host_ProcessNextHostState+0x5c>
     90e:	04 c1       	rjmp	.+520    	; 0xb18 <USB_Host_ProcessNextHostState+0x23e>
     910:	83 30       	cpi	r24, 0x03	; 3
     912:	d1 f1       	breq	.+116    	; 0x988 <USB_Host_ProcessNextHostState+0xae>
     914:	84 30       	cpi	r24, 0x04	; 4
     916:	09 f0       	breq	.+2      	; 0x91a <USB_Host_ProcessNextHostState+0x40>
     918:	ff c0       	rjmp	.+510    	; 0xb18 <USB_Host_ProcessNextHostState+0x23e>
     91a:	5d c0       	rjmp	.+186    	; 0x9d6 <USB_Host_ProcessNextHostState+0xfc>
     91c:	87 30       	cpi	r24, 0x07	; 7
     91e:	09 f4       	brne	.+2      	; 0x922 <USB_Host_ProcessNextHostState+0x48>
     920:	9b c0       	rjmp	.+310    	; 0xa58 <USB_Host_ProcessNextHostState+0x17e>
     922:	87 30       	cpi	r24, 0x07	; 7
     924:	08 f4       	brcc	.+2      	; 0x928 <USB_Host_ProcessNextHostState+0x4e>
     926:	8a c0       	rjmp	.+276    	; 0xa3c <USB_Host_ProcessNextHostState+0x162>
     928:	88 30       	cpi	r24, 0x08	; 8
     92a:	09 f4       	brne	.+2      	; 0x92e <USB_Host_ProcessNextHostState+0x54>
     92c:	b3 c0       	rjmp	.+358    	; 0xa94 <USB_Host_ProcessNextHostState+0x1ba>
     92e:	89 30       	cpi	r24, 0x09	; 9
     930:	09 f0       	breq	.+2      	; 0x934 <USB_Host_ProcessNextHostState+0x5a>
     932:	f2 c0       	rjmp	.+484    	; 0xb18 <USB_Host_ProcessNextHostState+0x23e>
     934:	d7 c0       	rjmp	.+430    	; 0xae4 <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     936:	00 91 1a 01 	lds	r16, 0x011A
     93a:	10 91 1b 01 	lds	r17, 0x011B
     93e:	01 15       	cp	r16, r1
     940:	11 05       	cpc	r17, r1
     942:	09 f4       	brne	.+2      	; 0x946 <USB_Host_ProcessNextHostState+0x6c>
     944:	e9 c0       	rjmp	.+466    	; 0xb18 <USB_Host_ProcessNextHostState+0x23e>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	2b df       	rcall	.-426    	; 0x7a0 <USB_Host_WaitMS>
     94a:	68 2f       	mov	r22, r24
     94c:	88 23       	and	r24, r24
     94e:	31 f0       	breq	.+12     	; 0x95c <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
     950:	80 91 19 01 	lds	r24, 0x0119
     954:	80 93 26 01 	sts	0x0126, r24
     958:	91 e0       	ldi	r25, 0x01	; 1
     95a:	da c0       	rjmp	.+436    	; 0xb10 <USB_Host_ProcessNextHostState+0x236>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     95c:	c8 01       	movw	r24, r16
     95e:	01 97       	sbiw	r24, 0x01	; 1
     960:	90 93 1b 01 	sts	0x011B, r25
     964:	80 93 1a 01 	sts	0x011A, r24
     968:	89 2b       	or	r24, r25
     96a:	09 f0       	breq	.+2      	; 0x96e <USB_Host_ProcessNextHostState+0x94>
     96c:	d5 c0       	rjmp	.+426    	; 0xb18 <USB_Host_ProcessNextHostState+0x23e>
				  USB_HostState = PostWaitState;
     96e:	80 91 19 01 	lds	r24, 0x0119
     972:	07 c0       	rjmp	.+14     	; 0x982 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     974:	88 ee       	ldi	r24, 0xE8	; 232
     976:	93 e0       	ldi	r25, 0x03	; 3
     978:	90 93 1b 01 	sts	0x011B, r25
     97c:	80 93 1a 01 	sts	0x011A, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     980:	83 e0       	ldi	r24, 0x03	; 3
     982:	80 93 26 01 	sts	0x0126, r24
     986:	c8 c0       	rjmp	.+400    	; 0xb18 <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     988:	80 91 1a 01 	lds	r24, 0x011A
     98c:	90 91 1b 01 	lds	r25, 0x011B
     990:	01 97       	sbiw	r24, 0x01	; 1
     992:	90 93 1b 01 	sts	0x011B, r25
     996:	80 93 1a 01 	sts	0x011A, r24
     99a:	01 96       	adiw	r24, 0x01	; 1
     99c:	29 f0       	breq	.+10     	; 0x9a8 <USB_Host_ProcessNextHostState+0xce>
     99e:	80 ed       	ldi	r24, 0xD0	; 208
     9a0:	97 e0       	ldi	r25, 0x07	; 7
     9a2:	01 97       	sbiw	r24, 0x01	; 1
     9a4:	f1 f7       	brne	.-4      	; 0x9a2 <USB_Host_ProcessNextHostState+0xc8>
     9a6:	b8 c0       	rjmp	.+368    	; 0xb18 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     9a8:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     9aa:	80 91 d8 00 	lds	r24, 0x00D8
     9ae:	80 61       	ori	r24, 0x10	; 16
     9b0:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     9b4:	80 91 dd 00 	lds	r24, 0x00DD
     9b8:	8b 7f       	andi	r24, 0xFB	; 251
     9ba:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     9be:	80 91 d7 00 	lds	r24, 0x00D7
     9c2:	80 61       	ori	r24, 0x10	; 16
     9c4:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     9c8:	80 91 dd 00 	lds	r24, 0x00DD
     9cc:	82 60       	ori	r24, 0x02	; 2
     9ce:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     9d2:	84 e0       	ldi	r24, 0x04	; 4
     9d4:	d6 cf       	rjmp	.-84     	; 0x982 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     9d6:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     9da:	80 ff       	sbrs	r24, 0
     9dc:	9d c0       	rjmp	.+314    	; 0xb18 <USB_Host_ProcessNextHostState+0x23e>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     9de:	80 91 9f 00 	lds	r24, 0x009F
     9e2:	8e 7f       	andi	r24, 0xFE	; 254
     9e4:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     9e8:	80 91 9f 00 	lds	r24, 0x009F
     9ec:	8d 7f       	andi	r24, 0xFD	; 253
     9ee:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     9f2:	80 91 df 00 	lds	r24, 0x00DF
     9f6:	8d 7f       	andi	r24, 0xFD	; 253
     9f8:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     9fc:	80 91 de 00 	lds	r24, 0x00DE
     a00:	82 60       	ori	r24, 0x02	; 2
     a02:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     a06:	80 91 9e 00 	lds	r24, 0x009E
     a0a:	81 60       	ori	r24, 0x01	; 1
     a0c:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     a10:	ed d0       	rcall	.+474    	; 0xbec <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     a12:	10 92 26 01 	sts	0x0126, r1
     a16:	84 e6       	ldi	r24, 0x64	; 100
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	90 93 1b 01 	sts	0x011B, r25
     a1e:	80 93 1a 01 	sts	0x011A, r24
     a22:	85 e0       	ldi	r24, 0x05	; 5
     a24:	5c c0       	rjmp	.+184    	; 0xade <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     a26:	0b df       	rcall	.-490    	; 0x83e <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     a28:	10 92 26 01 	sts	0x0126, r1
     a2c:	88 ec       	ldi	r24, 0xC8	; 200
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	90 93 1b 01 	sts	0x011B, r25
     a34:	80 93 1a 01 	sts	0x011A, r24
     a38:	86 e0       	ldi	r24, 0x06	; 6
     a3a:	51 c0       	rjmp	.+162    	; 0xade <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	60 e0       	ldi	r22, 0x00	; 0
     a40:	40 e0       	ldi	r20, 0x00	; 0
     a42:	20 e0       	ldi	r18, 0x00	; 0
     a44:	00 e4       	ldi	r16, 0x40	; 64
     a46:	10 e0       	ldi	r17, 0x00	; 0
     a48:	ee 24       	eor	r14, r14
     a4a:	72 d0       	rcall	.+228    	; 0xb30 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a4c:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     a50:	87 ff       	sbrs	r24, 7
     a52:	5c c0       	rjmp	.+184    	; 0xb0c <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     a54:	87 e0       	ldi	r24, 0x07	; 7
     a56:	95 cf       	rjmp	.-214    	; 0x982 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     a58:	ae e1       	ldi	r26, 0x1E	; 30
     a5a:	b1 e0       	ldi	r27, 0x01	; 1
     a5c:	ef e0       	ldi	r30, 0x0F	; 15
     a5e:	f1 e0       	ldi	r31, 0x01	; 1
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	01 90       	ld	r0, Z+
     a64:	0d 92       	st	X+, r0
     a66:	81 50       	subi	r24, 0x01	; 1
     a68:	e1 f7       	brne	.-8      	; 0xa62 <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     a6a:	ce 01       	movw	r24, r28
     a6c:	01 96       	adiw	r24, 0x01	; 1
     a6e:	88 d3       	rcall	.+1808   	; 0x1180 <USB_Host_SendControlRequest>
     a70:	68 2f       	mov	r22, r24
     a72:	88 23       	and	r24, r24
     a74:	09 f0       	breq	.+2      	; 0xa78 <USB_Host_ProcessNextHostState+0x19e>
     a76:	48 c0       	rjmp	.+144    	; 0xb08 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     a78:	88 85       	ldd	r24, Y+8	; 0x08
     a7a:	80 93 17 01 	sts	0x0117, r24

			USB_Host_ResetDevice();
     a7e:	df de       	rcall	.-578    	; 0x83e <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     a80:	10 92 26 01 	sts	0x0126, r1
     a84:	88 ec       	ldi	r24, 0xC8	; 200
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	90 93 1b 01 	sts	0x011B, r25
     a8c:	80 93 1a 01 	sts	0x011A, r24
     a90:	88 e0       	ldi	r24, 0x08	; 8
     a92:	25 c0       	rjmp	.+74     	; 0xade <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     a94:	00 91 17 01 	lds	r16, 0x0117
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	60 e0       	ldi	r22, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	20 e0       	ldi	r18, 0x00	; 0
     aa0:	10 e0       	ldi	r17, 0x00	; 0
     aa2:	ee 24       	eor	r14, r14
     aa4:	45 d0       	rcall	.+138    	; 0xb30 <Pipe_ConfigurePipe>
     aa6:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     aaa:	87 ff       	sbrs	r24, 7
     aac:	2f c0       	rjmp	.+94     	; 0xb0c <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     aae:	ae e1       	ldi	r26, 0x1E	; 30
     ab0:	b1 e0       	ldi	r27, 0x01	; 1
     ab2:	e7 e0       	ldi	r30, 0x07	; 7
     ab4:	f1 e0       	ldi	r31, 0x01	; 1
     ab6:	88 e0       	ldi	r24, 0x08	; 8
     ab8:	01 90       	ld	r0, Z+
     aba:	0d 92       	st	X+, r0
     abc:	81 50       	subi	r24, 0x01	; 1
     abe:	e1 f7       	brne	.-8      	; 0xab8 <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	5d d3       	rcall	.+1722   	; 0x1180 <USB_Host_SendControlRequest>
     ac6:	68 2f       	mov	r22, r24
     ac8:	88 23       	and	r24, r24
     aca:	f1 f4       	brne	.+60     	; 0xb08 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     acc:	10 92 26 01 	sts	0x0126, r1
     ad0:	84 e6       	ldi	r24, 0x64	; 100
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	90 93 1b 01 	sts	0x011B, r25
     ad8:	80 93 1a 01 	sts	0x011A, r24
     adc:	89 e0       	ldi	r24, 0x09	; 9
     ade:	80 93 19 01 	sts	0x0119, r24
     ae2:	1a c0       	rjmp	.+52     	; 0xb18 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     aea:	8a e0       	ldi	r24, 0x0A	; 10
     aec:	80 93 26 01 	sts	0x0126, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     af0:	05 dd       	rcall	.-1526   	; 0x4fc <EVENT_USB_Host_DeviceEnumerationComplete>
     af2:	12 c0       	rjmp	.+36     	; 0xb18 <USB_Host_ProcessNextHostState+0x23e>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     af4:	89 2f       	mov	r24, r25
     af6:	e4 db       	rcall	.-2104   	; 0x2c0 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     af8:	80 91 dd 00 	lds	r24, 0x00DD
     afc:	81 60       	ori	r24, 0x01	; 1
     afe:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     b02:	ec dc       	rcall	.-1576   	; 0x4dc <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     b04:	b6 d0       	rcall	.+364    	; 0xc72 <USB_ResetInterface>
     b06:	08 c0       	rjmp	.+16     	; 0xb18 <USB_Host_ProcessNextHostState+0x23e>
	}
}
     b08:	93 e0       	ldi	r25, 0x03	; 3
     b0a:	02 c0       	rjmp	.+4      	; 0xb10 <USB_Host_ProcessNextHostState+0x236>
     b0c:	94 e0       	ldi	r25, 0x04	; 4
     b0e:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     b10:	80 91 26 01 	lds	r24, 0x0126
     b14:	81 30       	cpi	r24, 0x01	; 1
     b16:	71 f7       	brne	.-36     	; 0xaf4 <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     b18:	28 96       	adiw	r28, 0x08	; 8
     b1a:	0f b6       	in	r0, 0x3f	; 63
     b1c:	f8 94       	cli
     b1e:	de bf       	out	0x3e, r29	; 62
     b20:	0f be       	out	0x3f, r0	; 63
     b22:	cd bf       	out	0x3d, r28	; 61
     b24:	cf 91       	pop	r28
     b26:	df 91       	pop	r29
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ef 90       	pop	r14
     b2e:	08 95       	ret

00000b30 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     b30:	ef 92       	push	r14
     b32:	0f 93       	push	r16
     b34:	1f 93       	push	r17
     b36:	e8 2f       	mov	r30, r24
     b38:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     b3a:	62 95       	swap	r22
     b3c:	66 0f       	add	r22, r22
     b3e:	66 0f       	add	r22, r22
     b40:	60 7c       	andi	r22, 0xC0	; 192
     b42:	64 2b       	or	r22, r20
     b44:	2f 70       	andi	r18, 0x0F	; 15
     b46:	62 2b       	or	r22, r18
     b48:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     b4a:	72 60       	ori	r23, 0x02	; 2
     b4c:	45 c0       	rjmp	.+138    	; 0xbd8 <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     b4e:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     b52:	3e 17       	cp	r19, r30
     b54:	a1 f4       	brne	.+40     	; 0xb7e <Pipe_ConfigurePipe+0x4e>
     b56:	88 e0       	ldi	r24, 0x08	; 8
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	20 e0       	ldi	r18, 0x00	; 0
     b5c:	03 c0       	rjmp	.+6      	; 0xb64 <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     b5e:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     b60:	88 0f       	add	r24, r24
     b62:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     b64:	80 17       	cp	r24, r16
     b66:	91 07       	cpc	r25, r17
     b68:	10 f4       	brcc	.+4      	; 0xb6e <Pipe_ConfigurePipe+0x3e>
     b6a:	25 30       	cpi	r18, 0x05	; 5
     b6c:	c1 f7       	brne	.-16     	; 0xb5e <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     b6e:	92 2f       	mov	r25, r18
     b70:	92 95       	swap	r25
     b72:	90 7f       	andi	r25, 0xF0	; 240
     b74:	97 2b       	or	r25, r23
     b76:	56 2f       	mov	r21, r22
     b78:	40 e0       	ldi	r20, 0x00	; 0
     b7a:	20 e0       	ldi	r18, 0x00	; 0
     b7c:	08 c0       	rjmp	.+16     	; 0xb8e <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     b7e:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     b82:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     b86:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
     b8a:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     b8e:	91 ff       	sbrs	r25, 1
     b90:	22 c0       	rjmp	.+68     	; 0xbd6 <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     b92:	80 91 a9 00 	lds	r24, 0x00A9
     b96:	8e 7f       	andi	r24, 0xFE	; 254
     b98:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     b9c:	80 91 ab 00 	lds	r24, 0x00AB
     ba0:	8d 7f       	andi	r24, 0xFD	; 253
     ba2:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     ba6:	80 91 a9 00 	lds	r24, 0x00A9
     baa:	81 60       	ori	r24, 0x01	; 1
     bac:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     bb0:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
     bb4:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
     bb8:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
     bbc:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     bc0:	80 91 a9 00 	lds	r24, 0x00A9
     bc4:	80 62       	ori	r24, 0x20	; 32
     bc6:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     bca:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     bce:	87 fd       	sbrc	r24, 7
     bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <Pipe_ConfigurePipe+0xa6>
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	07 c0       	rjmp	.+14     	; 0xbe4 <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     bd6:	3f 5f       	subi	r19, 0xFF	; 255
     bd8:	37 30       	cpi	r19, 0x07	; 7
     bda:	08 f4       	brcc	.+2      	; 0xbde <Pipe_ConfigurePipe+0xae>
     bdc:	b8 cf       	rjmp	.-144    	; 0xb4e <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     bde:	e0 93 a7 00 	sts	0x00A7, r30
     be2:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ef 90       	pop	r14
     bea:	08 95       	ret

00000bec <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     bec:	10 92 f8 00 	sts	0x00F8, r1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     bf6:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     bfa:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     bfe:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     c02:	80 91 a9 00 	lds	r24, 0x00A9
     c06:	8e 7f       	andi	r24, 0xFE	; 254
     c08:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     c0c:	9f 5f       	subi	r25, 0xFF	; 255
     c0e:	97 30       	cpi	r25, 0x07	; 7
     c10:	81 f7       	brne	.-32     	; 0xbf2 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     c12:	08 95       	ret

00000c14 <Pipe_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     c14:	40 91 a2 00 	lds	r20, 0x00A2
     c18:	50 91 a3 00 	lds	r21, 0x00A3
     c1c:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     c1e:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     c22:	80 73       	andi	r24, 0x30	; 48
     c24:	80 31       	cpi	r24, 0x10	; 16
     c26:	29 f4       	brne	.+10     	; 0xc32 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     c28:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     c2c:	80 ff       	sbrs	r24, 0
     c2e:	05 c0       	rjmp	.+10     	; 0xc3a <Pipe_WaitUntilReady+0x26>
     c30:	1e c0       	rjmp	.+60     	; 0xc6e <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     c32:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     c36:	82 fd       	sbrc	r24, 2
     c38:	1a c0       	rjmp	.+52     	; 0xc6e <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     c3a:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     c3e:	81 ff       	sbrs	r24, 1
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <Pipe_WaitUntilReady+0x32>
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     c46:	80 91 26 01 	lds	r24, 0x0126
     c4a:	81 30       	cpi	r24, 0x01	; 1
     c4c:	11 f4       	brne	.+4      	; 0xc52 <Pipe_WaitUntilReady+0x3e>
     c4e:	82 e0       	ldi	r24, 0x02	; 2
     c50:	08 95       	ret
     c52:	80 91 a2 00 	lds	r24, 0x00A2
     c56:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     c5a:	84 17       	cp	r24, r20
     c5c:	95 07       	cpc	r25, r21
     c5e:	f9 f2       	breq	.-66     	; 0xc1e <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     c60:	22 23       	and	r18, r18
     c62:	11 f4       	brne	.+4      	; 0xc68 <Pipe_WaitUntilReady+0x54>
     c64:	83 e0       	ldi	r24, 0x03	; 3
     c66:	08 95       	ret
     c68:	21 50       	subi	r18, 0x01	; 1
     c6a:	ac 01       	movw	r20, r24
     c6c:	d8 cf       	rjmp	.-80     	; 0xc1e <Pipe_WaitUntilReady+0xa>
     c6e:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     c70:	08 95       	ret

00000c72 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     c72:	70 d0       	rcall	.+224    	; 0xd54 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     c74:	77 d0       	rcall	.+238    	; 0xd64 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     c76:	80 91 d8 00 	lds	r24, 0x00D8
     c7a:	8f 77       	andi	r24, 0x7F	; 127
     c7c:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     c80:	80 91 d8 00 	lds	r24, 0x00D8
     c84:	80 68       	ori	r24, 0x80	; 128
     c86:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     c8a:	80 91 d8 00 	lds	r24, 0x00D8
     c8e:	8f 7d       	andi	r24, 0xDF	; 223
     c90:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     c94:	80 91 d7 00 	lds	r24, 0x00D7
     c98:	8f 77       	andi	r24, 0x7F	; 127
     c9a:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     c9e:	8c e0       	ldi	r24, 0x0C	; 12
     ca0:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     ca2:	8e e0       	ldi	r24, 0x0E	; 14
     ca4:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     ca6:	09 b4       	in	r0, 0x29	; 41
     ca8:	00 fe       	sbrs	r0, 0
     caa:	fd cf       	rjmp	.-6      	; 0xca6 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	80 93 26 01 	sts	0x0126, r24
	USB_Host_ConfigurationNumber = 0;
     cb2:	10 92 1c 01 	sts	0x011C, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     cb6:	80 e4       	ldi	r24, 0x40	; 64
     cb8:	80 93 17 01 	sts	0x0117, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     cbc:	80 91 d8 00 	lds	r24, 0x00D8
     cc0:	80 64       	ori	r24, 0x40	; 64
     cc2:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     cc6:	80 91 dd 00 	lds	r24, 0x00DD
     cca:	81 60       	ori	r24, 0x01	; 1
     ccc:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     cd0:	80 91 dd 00 	lds	r24, 0x00DD
     cd4:	84 60       	ori	r24, 0x04	; 4
     cd6:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     cda:	80 91 d7 00 	lds	r24, 0x00D7
     cde:	8f 7e       	andi	r24, 0xEF	; 239
     ce0:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     ce4:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     ce6:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     ce8:	80 91 de 00 	lds	r24, 0x00DE
     cec:	81 60       	ori	r24, 0x01	; 1
     cee:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     cf2:	80 91 de 00 	lds	r24, 0x00DE
     cf6:	84 60       	ori	r24, 0x04	; 4
     cf8:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     cfc:	80 91 e0 00 	lds	r24, 0x00E0
     d00:	8e 7f       	andi	r24, 0xFE	; 254
     d02:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     d06:	80 91 d8 00 	lds	r24, 0x00D8
     d0a:	80 61       	ori	r24, 0x10	; 16
     d0c:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     d10:	08 95       	ret

00000d12 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     d12:	e7 ed       	ldi	r30, 0xD7	; 215
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	81 60       	ori	r24, 0x01	; 1
     d1a:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	80 93 1d 01 	sts	0x011D, r24

	USB_ResetInterface();
}
     d22:	a7 cf       	rjmp	.-178    	; 0xc72 <USB_ResetInterface>

00000d24 <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     d24:	17 d0       	rcall	.+46     	; 0xd54 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     d26:	1e d0       	rcall	.+60     	; 0xd64 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     d28:	e0 ee       	ldi	r30, 0xE0	; 224
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	81 60       	ori	r24, 0x01	; 1
     d30:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     d32:	a8 ed       	ldi	r26, 0xD8	; 216
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	8c 91       	ld	r24, X
     d38:	8f 77       	andi	r24, 0x7F	; 127
     d3a:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     d3c:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     d3e:	e7 ed       	ldi	r30, 0xD7	; 215
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	8e 7f       	andi	r24, 0xFE	; 254
     d46:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     d48:	8c 91       	ld	r24, X
     d4a:	8f 7e       	andi	r24, 0xEF	; 239
     d4c:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     d4e:	10 92 1d 01 	sts	0x011D, r1
}
     d52:	08 95       	ret

00000d54 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     d54:	e8 ed       	ldi	r30, 0xD8	; 216
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	8c 7f       	andi	r24, 0xFC	; 252
     d5c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     d5e:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     d62:	08 95       	ret

00000d64 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     d64:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     d68:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     d6c:	08 95       	ret

00000d6e <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     d6e:	1f 92       	push	r1
     d70:	0f 92       	push	r0
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	0f 92       	push	r0
     d76:	0b b6       	in	r0, 0x3b	; 59
     d78:	0f 92       	push	r0
     d7a:	11 24       	eor	r1, r1
     d7c:	2f 93       	push	r18
     d7e:	3f 93       	push	r19
     d80:	4f 93       	push	r20
     d82:	5f 93       	push	r21
     d84:	6f 93       	push	r22
     d86:	7f 93       	push	r23
     d88:	8f 93       	push	r24
     d8a:	9f 93       	push	r25
     d8c:	af 93       	push	r26
     d8e:	bf 93       	push	r27
     d90:	ef 93       	push	r30
     d92:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     d94:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     d98:	85 ff       	sbrs	r24, 5
     d9a:	0a c0       	rjmp	.+20     	; 0xdb0 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     d9c:	80 91 a0 00 	lds	r24, 0x00A0
     da0:	85 ff       	sbrs	r24, 5
     da2:	06 c0       	rjmp	.+12     	; 0xdb0 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     da4:	80 91 9f 00 	lds	r24, 0x009F
     da8:	8f 7d       	andi	r24, 0xDF	; 223
     daa:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     dae:	be d1       	rcall	.+892    	; 0x112c <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     db0:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     db4:	81 ff       	sbrs	r24, 1
     db6:	15 c0       	rjmp	.+42     	; 0xde2 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     db8:	80 91 a0 00 	lds	r24, 0x00A0
     dbc:	81 ff       	sbrs	r24, 1
     dbe:	11 c0       	rjmp	.+34     	; 0xde2 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     dc0:	80 91 9f 00 	lds	r24, 0x009F
     dc4:	8d 7f       	andi	r24, 0xFD	; 253
     dc6:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     dca:	80 91 9f 00 	lds	r24, 0x009F
     dce:	8e 7f       	andi	r24, 0xFE	; 254
     dd0:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     dd4:	80 91 a0 00 	lds	r24, 0x00A0
     dd8:	8d 7f       	andi	r24, 0xFD	; 253
     dda:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     dde:	7e db       	rcall	.-2308   	; 0x4dc <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     de0:	48 df       	rcall	.-368    	; 0xc72 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     de2:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     de6:	81 ff       	sbrs	r24, 1
     de8:	15 c0       	rjmp	.+42     	; 0xe14 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     dea:	80 91 de 00 	lds	r24, 0x00DE
     dee:	81 ff       	sbrs	r24, 1
     df0:	11 c0       	rjmp	.+34     	; 0xe14 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     df2:	80 91 df 00 	lds	r24, 0x00DF
     df6:	8d 7f       	andi	r24, 0xFD	; 253
     df8:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     dfc:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     dfe:	80 91 dd 00 	lds	r24, 0x00DD
     e02:	81 60       	ori	r24, 0x01	; 1
     e04:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	4c db       	rcall	.-2408   	; 0x4a4 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     e0c:	67 db       	rcall	.-2354   	; 0x4dc <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	80 93 26 01 	sts	0x0126, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     e14:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     e18:	80 ff       	sbrs	r24, 0
     e1a:	17 c0       	rjmp	.+46     	; 0xe4a <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     e1c:	80 91 de 00 	lds	r24, 0x00DE
     e20:	80 ff       	sbrs	r24, 0
     e22:	13 c0       	rjmp	.+38     	; 0xe4a <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     e24:	80 91 df 00 	lds	r24, 0x00DF
     e28:	8e 7f       	andi	r24, 0xFE	; 254
     e2a:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     e2e:	80 91 de 00 	lds	r24, 0x00DE
     e32:	8e 7f       	andi	r24, 0xFE	; 254
     e34:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     e38:	59 db       	rcall	.-2382   	; 0x4ec <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     e3a:	80 91 a0 00 	lds	r24, 0x00A0
     e3e:	82 60       	ori	r24, 0x02	; 2
     e40:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	80 93 26 01 	sts	0x0126, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     e4a:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     e4e:	82 ff       	sbrs	r24, 2
     e50:	0e c0       	rjmp	.+28     	; 0xe6e <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     e52:	80 91 de 00 	lds	r24, 0x00DE
     e56:	82 ff       	sbrs	r24, 2
     e58:	0a c0       	rjmp	.+20     	; 0xe6e <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     e5a:	80 91 df 00 	lds	r24, 0x00DF
     e5e:	8b 7f       	andi	r24, 0xFB	; 251
     e60:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     e64:	82 e0       	ldi	r24, 0x02	; 2
     e66:	60 e0       	ldi	r22, 0x00	; 0
     e68:	2b da       	rcall	.-2986   	; 0x2c0 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     e6a:	38 db       	rcall	.-2448   	; 0x4dc <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     e6c:	02 df       	rcall	.-508    	; 0xc72 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     e6e:	ff 91       	pop	r31
     e70:	ef 91       	pop	r30
     e72:	bf 91       	pop	r27
     e74:	af 91       	pop	r26
     e76:	9f 91       	pop	r25
     e78:	8f 91       	pop	r24
     e7a:	7f 91       	pop	r23
     e7c:	6f 91       	pop	r22
     e7e:	5f 91       	pop	r21
     e80:	4f 91       	pop	r20
     e82:	3f 91       	pop	r19
     e84:	2f 91       	pop	r18
     e86:	0f 90       	pop	r0
     e88:	0b be       	out	0x3b, r0	; 59
     e8a:	0f 90       	pop	r0
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	0f 90       	pop	r0
     e90:	1f 90       	pop	r1
     e92:	18 95       	reti

00000e94 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     e94:	bf 92       	push	r11
     e96:	cf 92       	push	r12
     e98:	df 92       	push	r13
     e9a:	ef 92       	push	r14
     e9c:	ff 92       	push	r15
     e9e:	0f 93       	push	r16
     ea0:	1f 93       	push	r17
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	18 2f       	mov	r17, r24
     ea8:	09 2f       	mov	r16, r25
     eaa:	7b 01       	movw	r14, r22
     eac:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     eae:	80 91 aa 00 	lds	r24, 0x00AA
     eb2:	8f 7c       	andi	r24, 0xCF	; 207
     eb4:	80 61       	ori	r24, 0x10	; 16
     eb6:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     eba:	ac de       	rcall	.-680    	; 0xc14 <Pipe_WaitUntilReady>
     ebc:	b8 2e       	mov	r11, r24
     ebe:	88 23       	and	r24, r24
     ec0:	a9 f5       	brne	.+106    	; 0xf2c <Pipe_Read_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     ec2:	81 2f       	mov	r24, r17
     ec4:	90 2f       	mov	r25, r16
     ec6:	9c 01       	movw	r18, r24
     ec8:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     eca:	c1 14       	cp	r12, r1
     ecc:	d1 04       	cpc	r13, r1
     ece:	39 f0       	breq	.+14     	; 0xede <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
     ed0:	f6 01       	movw	r30, r12
     ed2:	80 81       	ld	r24, Z
     ed4:	91 81       	ldd	r25, Z+1	; 0x01
     ed6:	e8 1a       	sub	r14, r24
     ed8:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     eda:	c8 0f       	add	r28, r24
     edc:	d9 1f       	adc	r29, r25
     ede:	00 e0       	ldi	r16, 0x00	; 0
     ee0:	10 e0       	ldi	r17, 0x00	; 0
     ee2:	21 c0       	rjmp	.+66     	; 0xf26 <Pipe_Read_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     ee4:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     ee8:	85 fd       	sbrc	r24, 5
     eea:	15 c0       	rjmp	.+42     	; 0xf16 <Pipe_Read_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     eec:	80 91 a6 00 	lds	r24, 0x00A6
     ef0:	8e 77       	andi	r24, 0x7E	; 126
     ef2:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     ef6:	c1 14       	cp	r12, r1
     ef8:	d1 04       	cpc	r13, r1
     efa:	49 f0       	breq	.+18     	; 0xf0e <Pipe_Read_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
     efc:	f6 01       	movw	r30, r12
     efe:	80 81       	ld	r24, Z
     f00:	91 81       	ldd	r25, Z+1	; 0x01
     f02:	80 0f       	add	r24, r16
     f04:	91 1f       	adc	r25, r17
     f06:	91 83       	std	Z+1, r25	; 0x01
     f08:	80 83       	st	Z, r24
     f0a:	84 e0       	ldi	r24, 0x04	; 4
     f0c:	10 c0       	rjmp	.+32     	; 0xf2e <Pipe_Read_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     f0e:	82 de       	rcall	.-764    	; 0xc14 <Pipe_WaitUntilReady>
     f10:	88 23       	and	r24, r24
     f12:	49 f0       	breq	.+18     	; 0xf26 <Pipe_Read_Stream_LE+0x92>
     f14:	0c c0       	rjmp	.+24     	; 0xf2e <Pipe_Read_Stream_LE+0x9a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     f16:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     f1a:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     f1c:	08 94       	sec
     f1e:	e1 08       	sbc	r14, r1
     f20:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
     f22:	0f 5f       	subi	r16, 0xFF	; 255
     f24:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     f26:	e1 14       	cp	r14, r1
     f28:	f1 04       	cpc	r15, r1
     f2a:	e1 f6       	brne	.-72     	; 0xee4 <Pipe_Read_Stream_LE+0x50>
     f2c:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	1f 91       	pop	r17
     f34:	0f 91       	pop	r16
     f36:	ff 90       	pop	r15
     f38:	ef 90       	pop	r14
     f3a:	df 90       	pop	r13
     f3c:	cf 90       	pop	r12
     f3e:	bf 90       	pop	r11
     f40:	08 95       	ret

00000f42 <Pipe_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     f42:	bf 92       	push	r11
     f44:	cf 92       	push	r12
     f46:	df 92       	push	r13
     f48:	ef 92       	push	r14
     f4a:	ff 92       	push	r15
     f4c:	0f 93       	push	r16
     f4e:	1f 93       	push	r17
     f50:	cf 93       	push	r28
     f52:	df 93       	push	r29
     f54:	18 2f       	mov	r17, r24
     f56:	09 2f       	mov	r16, r25
     f58:	7b 01       	movw	r14, r22
     f5a:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f5c:	80 91 aa 00 	lds	r24, 0x00AA
     f60:	8f 7c       	andi	r24, 0xCF	; 207
     f62:	80 62       	ori	r24, 0x20	; 32
     f64:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     f68:	55 de       	rcall	.-854    	; 0xc14 <Pipe_WaitUntilReady>
     f6a:	b8 2e       	mov	r11, r24
     f6c:	88 23       	and	r24, r24
     f6e:	a9 f5       	brne	.+106    	; 0xfda <Pipe_Write_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     f70:	81 2f       	mov	r24, r17
     f72:	90 2f       	mov	r25, r16
     f74:	9c 01       	movw	r18, r24
     f76:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     f78:	c1 14       	cp	r12, r1
     f7a:	d1 04       	cpc	r13, r1
     f7c:	39 f0       	breq	.+14     	; 0xf8c <Pipe_Write_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
     f7e:	f6 01       	movw	r30, r12
     f80:	80 81       	ld	r24, Z
     f82:	91 81       	ldd	r25, Z+1	; 0x01
     f84:	e8 1a       	sub	r14, r24
     f86:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     f88:	c8 0f       	add	r28, r24
     f8a:	d9 1f       	adc	r29, r25
     f8c:	00 e0       	ldi	r16, 0x00	; 0
     f8e:	10 e0       	ldi	r17, 0x00	; 0
     f90:	21 c0       	rjmp	.+66     	; 0xfd4 <Pipe_Write_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     f92:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     f96:	85 fd       	sbrc	r24, 5
     f98:	15 c0       	rjmp	.+42     	; 0xfc4 <Pipe_Write_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     f9a:	80 91 a6 00 	lds	r24, 0x00A6
     f9e:	8b 77       	andi	r24, 0x7B	; 123
     fa0:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     fa4:	c1 14       	cp	r12, r1
     fa6:	d1 04       	cpc	r13, r1
     fa8:	49 f0       	breq	.+18     	; 0xfbc <Pipe_Write_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
     faa:	f6 01       	movw	r30, r12
     fac:	80 81       	ld	r24, Z
     fae:	91 81       	ldd	r25, Z+1	; 0x01
     fb0:	80 0f       	add	r24, r16
     fb2:	91 1f       	adc	r25, r17
     fb4:	91 83       	std	Z+1, r25	; 0x01
     fb6:	80 83       	st	Z, r24
     fb8:	84 e0       	ldi	r24, 0x04	; 4
     fba:	10 c0       	rjmp	.+32     	; 0xfdc <Pipe_Write_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     fbc:	2b de       	rcall	.-938    	; 0xc14 <Pipe_WaitUntilReady>
     fbe:	88 23       	and	r24, r24
     fc0:	49 f0       	breq	.+18     	; 0xfd4 <Pipe_Write_Stream_LE+0x92>
     fc2:	0c c0       	rjmp	.+24     	; 0xfdc <Pipe_Write_Stream_LE+0x9a>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     fc4:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     fc6:	80 93 af 00 	sts	0x00AF, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     fca:	08 94       	sec
     fcc:	e1 08       	sbc	r14, r1
     fce:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
     fd0:	0f 5f       	subi	r16, 0xFF	; 255
     fd2:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     fd4:	e1 14       	cp	r14, r1
     fd6:	f1 04       	cpc	r15, r1
     fd8:	e1 f6       	brne	.-72     	; 0xf92 <Pipe_Write_Stream_LE+0x50>
     fda:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	1f 91       	pop	r17
     fe2:	0f 91       	pop	r16
     fe4:	ff 90       	pop	r15
     fe6:	ef 90       	pop	r14
     fe8:	df 90       	pop	r13
     fea:	cf 90       	pop	r12
     fec:	bf 90       	pop	r11
     fee:	08 95       	ret

00000ff0 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     ff0:	af 92       	push	r10
     ff2:	bf 92       	push	r11
     ff4:	cf 92       	push	r12
     ff6:	df 92       	push	r13
     ff8:	ef 92       	push	r14
     ffa:	ff 92       	push	r15
     ffc:	0f 93       	push	r16
     ffe:	1f 93       	push	r17
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	7c 01       	movw	r14, r24
    1006:	eb 01       	movw	r28, r22
    1008:	6a 01       	movw	r12, r20
    100a:	24 c0       	rjmp	.+72     	; 0x1054 <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    100c:	e8 81       	ld	r30, Y
    100e:	f9 81       	ldd	r31, Y+1	; 0x01
    1010:	be 2e       	mov	r11, r30
    1012:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1014:	80 81       	ld	r24, Z
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	98 01       	movw	r18, r16
    101a:	80 17       	cp	r24, r16
    101c:	91 07       	cpc	r25, r17
    101e:	08 f4       	brcc	.+2      	; 0x1022 <USB_GetNextDescriptorComp+0x32>
    1020:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1022:	e2 0f       	add	r30, r18
    1024:	f3 1f       	adc	r31, r19
    1026:	f9 83       	std	Y+1, r31	; 0x01
    1028:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
    102a:	f7 01       	movw	r30, r14
    102c:	80 81       	ld	r24, Z
    102e:	91 81       	ldd	r25, Z+1	; 0x01
    1030:	82 1b       	sub	r24, r18
    1032:	93 0b       	sbc	r25, r19
    1034:	91 83       	std	Z+1, r25	; 0x01
    1036:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1038:	88 81       	ld	r24, Y
    103a:	99 81       	ldd	r25, Y+1	; 0x01
    103c:	f6 01       	movw	r30, r12
    103e:	09 95       	icall
    1040:	82 30       	cpi	r24, 0x02	; 2
    1042:	41 f0       	breq	.+16     	; 0x1054 <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1044:	81 30       	cpi	r24, 0x01	; 1
    1046:	69 f4       	brne	.+26     	; 0x1062 <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
    1048:	b8 82       	st	Y, r11
    104a:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
    104c:	f7 01       	movw	r30, r14
    104e:	11 83       	std	Z+1, r17	; 0x01
    1050:	00 83       	st	Z, r16
    1052:	07 c0       	rjmp	.+14     	; 0x1062 <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    1054:	f7 01       	movw	r30, r14
    1056:	00 81       	ld	r16, Z
    1058:	11 81       	ldd	r17, Z+1	; 0x01
    105a:	01 15       	cp	r16, r1
    105c:	11 05       	cpc	r17, r1
    105e:	b1 f6       	brne	.-84     	; 0x100c <USB_GetNextDescriptorComp+0x1c>
    1060:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
    1062:	df 91       	pop	r29
    1064:	cf 91       	pop	r28
    1066:	1f 91       	pop	r17
    1068:	0f 91       	pop	r16
    106a:	ff 90       	pop	r15
    106c:	ef 90       	pop	r14
    106e:	df 90       	pop	r13
    1070:	cf 90       	pop	r12
    1072:	bf 90       	pop	r11
    1074:	af 90       	pop	r10
    1076:	08 95       	ret

00001078 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    1078:	cf 92       	push	r12
    107a:	df 92       	push	r13
    107c:	ef 92       	push	r14
    107e:	ff 92       	push	r15
    1080:	0f 93       	push	r16
    1082:	1f 93       	push	r17
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	29 97       	sbiw	r28, 0x09	; 9
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	6b 01       	movw	r12, r22
    109a:	8a 01       	movw	r16, r20
    109c:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    109e:	90 e8       	ldi	r25, 0x80	; 128
    10a0:	90 93 1e 01 	sts	0x011E, r25
    10a4:	96 e0       	ldi	r25, 0x06	; 6
    10a6:	90 93 1f 01 	sts	0x011F, r25
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	01 97       	sbiw	r24, 0x01	; 1
    10ae:	92 60       	ori	r25, 0x02	; 2
    10b0:	90 93 21 01 	sts	0x0121, r25
    10b4:	80 93 20 01 	sts	0x0120, r24
    10b8:	10 92 23 01 	sts	0x0123, r1
    10bc:	10 92 22 01 	sts	0x0122, r1
    10c0:	89 e0       	ldi	r24, 0x09	; 9
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	90 93 25 01 	sts	0x0125, r25
    10c8:	80 93 24 01 	sts	0x0124, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    10cc:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    10d0:	ce 01       	movw	r24, r28
    10d2:	01 96       	adiw	r24, 0x01	; 1
    10d4:	55 d0       	rcall	.+170    	; 0x1180 <USB_Host_SendControlRequest>
    10d6:	28 2f       	mov	r18, r24
    10d8:	88 23       	and	r24, r24
    10da:	c1 f4       	brne	.+48     	; 0x110c <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	9c 81       	ldd	r25, Y+4	; 0x04
    10e0:	f6 01       	movw	r30, r12
    10e2:	91 83       	std	Z+1, r25	; 0x01
    10e4:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    10e6:	e8 16       	cp	r14, r24
    10e8:	f9 06       	cpc	r15, r25
    10ea:	10 f4       	brcc	.+4      	; 0x10f0 <USB_Host_GetDeviceConfigDescriptor+0x78>
    10ec:	25 e0       	ldi	r18, 0x05	; 5
    10ee:	0e c0       	rjmp	.+28     	; 0x110c <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    10f0:	90 93 25 01 	sts	0x0125, r25
    10f4:	80 93 24 01 	sts	0x0124, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    10f8:	c8 01       	movw	r24, r16
    10fa:	42 d0       	rcall	.+132    	; 0x1180 <USB_Host_SendControlRequest>
    10fc:	28 2f       	mov	r18, r24
    10fe:	88 23       	and	r24, r24
    1100:	29 f4       	brne	.+10     	; 0x110c <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1102:	f8 01       	movw	r30, r16
    1104:	81 81       	ldd	r24, Z+1	; 0x01
    1106:	82 30       	cpi	r24, 0x02	; 2
    1108:	09 f0       	breq	.+2      	; 0x110c <USB_Host_GetDeviceConfigDescriptor+0x94>
    110a:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    110c:	82 2f       	mov	r24, r18
    110e:	29 96       	adiw	r28, 0x09	; 9
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	1f 91       	pop	r17
    1120:	0f 91       	pop	r16
    1122:	ff 90       	pop	r15
    1124:	ef 90       	pop	r14
    1126:	df 90       	pop	r13
    1128:	cf 90       	pop	r12
    112a:	08 95       	ret

0000112c <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    112c:	08 95       	ret

0000112e <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    112e:	1f 93       	push	r17
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	18 2f       	mov	r17, r24
    1136:	c8 ee       	ldi	r28, 0xE8	; 232
    1138:	d3 e0       	ldi	r29, 0x03	; 3
    113a:	09 c0       	rjmp	.+18     	; 0x114e <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	30 db       	rcall	.-2464   	; 0x7a0 <USB_Host_WaitMS>
    1140:	88 23       	and	r24, r24
    1142:	d1 f4       	brne	.+52     	; 0x1178 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1144:	20 97       	sbiw	r28, 0x00	; 0
    1146:	11 f4       	brne	.+4      	; 0x114c <USB_Host_WaitForIOS+0x1e>
    1148:	84 e0       	ldi	r24, 0x04	; 4
    114a:	16 c0       	rjmp	.+44     	; 0x1178 <USB_Host_WaitForIOS+0x4a>
    114c:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    114e:	11 23       	and	r17, r17
    1150:	29 f4       	brne	.+10     	; 0x115c <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1152:	80 91 a6 00 	lds	r24, 0x00A6
    1156:	83 ff       	sbrs	r24, 3
    1158:	f1 cf       	rjmp	.-30     	; 0x113c <USB_Host_WaitForIOS+0xe>
    115a:	0d c0       	rjmp	.+26     	; 0x1176 <USB_Host_WaitForIOS+0x48>
    115c:	11 30       	cpi	r17, 0x01	; 1
    115e:	29 f4       	brne	.+10     	; 0x116a <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1160:	80 91 a6 00 	lds	r24, 0x00A6
    1164:	80 ff       	sbrs	r24, 0
    1166:	ea cf       	rjmp	.-44     	; 0x113c <USB_Host_WaitForIOS+0xe>
    1168:	06 c0       	rjmp	.+12     	; 0x1176 <USB_Host_WaitForIOS+0x48>
    116a:	12 30       	cpi	r17, 0x02	; 2
    116c:	39 f7       	brne	.-50     	; 0x113c <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    116e:	80 91 a6 00 	lds	r24, 0x00A6
    1172:	82 ff       	sbrs	r24, 2
    1174:	e3 cf       	rjmp	.-58     	; 0x113c <USB_Host_WaitForIOS+0xe>
    1176:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
    1178:	df 91       	pop	r29
    117a:	cf 91       	pop	r28
    117c:	1f 91       	pop	r17
    117e:	08 95       	ret

00001180 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1180:	ff 92       	push	r15
    1182:	0f 93       	push	r16
    1184:	1f 93       	push	r17
    1186:	cf 93       	push	r28
    1188:	df 93       	push	r29
    118a:	18 2f       	mov	r17, r24
    118c:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    118e:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1192:	c0 91 24 01 	lds	r28, 0x0124
    1196:	d0 91 25 01 	lds	r29, 0x0125
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    119a:	80 91 9e 00 	lds	r24, 0x009E
    119e:	81 60       	ori	r24, 0x01	; 1
    11a0:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	fc da       	rcall	.-2568   	; 0x7a0 <USB_Host_WaitMS>
    11a8:	98 2f       	mov	r25, r24
    11aa:	88 23       	and	r24, r24
    11ac:	09 f0       	breq	.+2      	; 0x11b0 <USB_Host_SendControlRequest+0x30>
    11ae:	ee c0       	rjmp	.+476    	; 0x138c <USB_Host_SendControlRequest+0x20c>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11b0:	80 91 aa 00 	lds	r24, 0x00AA
    11b4:	8f 7c       	andi	r24, 0xCF	; 207
    11b6:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    11ba:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    11be:	80 91 a6 00 	lds	r24, 0x00A6
    11c2:	8f 7e       	andi	r24, 0xEF	; 239
    11c4:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11c8:	80 91 a9 00 	lds	r24, 0x00A9
    11cc:	8f 7b       	andi	r24, 0xBF	; 191
    11ce:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearError();

	Pipe_Unfreeze();

	Pipe_Write_8(USB_ControlRequest.bmRequestType);
    11d2:	80 91 1e 01 	lds	r24, 0x011E
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    11d6:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
    11da:	80 91 1f 01 	lds	r24, 0x011F
    11de:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
    11e2:	80 91 20 01 	lds	r24, 0x0120
    11e6:	90 91 21 01 	lds	r25, 0x0121
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    11ea:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    11ee:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
    11f2:	80 91 22 01 	lds	r24, 0x0122
    11f6:	90 91 23 01 	lds	r25, 0x0123
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    11fa:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    11fe:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
    1202:	80 91 24 01 	lds	r24, 0x0124
    1206:	90 91 25 01 	lds	r25, 0x0125
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    120a:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    120e:	90 93 af 00 	sts	0x00AF, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1212:	80 91 a6 00 	lds	r24, 0x00A6
    1216:	87 77       	andi	r24, 0x77	; 119
    1218:	80 93 a6 00 	sts	0x00A6, r24

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	87 df       	rcall	.-242    	; 0x112e <USB_Host_WaitForIOS>
    1220:	98 2f       	mov	r25, r24
    1222:	88 23       	and	r24, r24
    1224:	09 f0       	breq	.+2      	; 0x1228 <USB_Host_SendControlRequest+0xa8>
    1226:	b2 c0       	rjmp	.+356    	; 0x138c <USB_Host_SendControlRequest+0x20c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1228:	80 91 a9 00 	lds	r24, 0x00A9
    122c:	80 64       	ori	r24, 0x40	; 64
    122e:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	b5 da       	rcall	.-2710   	; 0x7a0 <USB_Host_WaitMS>
    1236:	98 2f       	mov	r25, r24
    1238:	88 23       	and	r24, r24
    123a:	09 f0       	breq	.+2      	; 0x123e <USB_Host_SendControlRequest+0xbe>
    123c:	a7 c0       	rjmp	.+334    	; 0x138c <USB_Host_SendControlRequest+0x20c>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
    123e:	21 2f       	mov	r18, r17
    1240:	30 2f       	mov	r19, r16
    1242:	c9 01       	movw	r24, r18
    1244:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1246:	80 91 1e 01 	lds	r24, 0x011E
    124a:	87 ff       	sbrs	r24, 7
    124c:	52 c0       	rjmp	.+164    	; 0x12f2 <USB_Host_SendControlRequest+0x172>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    124e:	80 91 aa 00 	lds	r24, 0x00AA
    1252:	8f 7c       	andi	r24, 0xCF	; 207
    1254:	80 61       	ori	r24, 0x10	; 16
    1256:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    125a:	01 15       	cp	r16, r1
    125c:	11 05       	cpc	r17, r1
    125e:	69 f5       	brne	.+90     	; 0x12ba <USB_Host_SendControlRequest+0x13a>
    1260:	2e c0       	rjmp	.+92     	; 0x12be <USB_Host_SendControlRequest+0x13e>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1262:	80 91 a9 00 	lds	r24, 0x00A9
    1266:	8f 7b       	andi	r24, 0xBF	; 191
    1268:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	5f df       	rcall	.-322    	; 0x112e <USB_Host_WaitForIOS>
    1270:	98 2f       	mov	r25, r24
    1272:	88 23       	and	r24, r24
    1274:	09 f0       	breq	.+2      	; 0x1278 <USB_Host_SendControlRequest+0xf8>
    1276:	8a c0       	rjmp	.+276    	; 0x138c <USB_Host_SendControlRequest+0x20c>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1278:	80 91 f6 00 	lds	r24, 0x00F6
    127c:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    1280:	89 2b       	or	r24, r25
    1282:	49 f4       	brne	.+18     	; 0x1296 <USB_Host_SendControlRequest+0x116>
    1284:	c0 e0       	ldi	r28, 0x00	; 0
    1286:	d0 e0       	ldi	r29, 0x00	; 0
    1288:	06 c0       	rjmp	.+12     	; 0x1296 <USB_Host_SendControlRequest+0x116>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    128a:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    128e:	f8 01       	movw	r30, r16
    1290:	81 93       	st	Z+, r24
    1292:	8f 01       	movw	r16, r30
					DataLen--;
    1294:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1296:	80 91 f6 00 	lds	r24, 0x00F6
    129a:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    129e:	89 2b       	or	r24, r25
    12a0:	11 f0       	breq	.+4      	; 0x12a6 <USB_Host_SendControlRequest+0x126>
    12a2:	20 97       	sbiw	r28, 0x00	; 0
    12a4:	91 f7       	brne	.-28     	; 0x128a <USB_Host_SendControlRequest+0x10a>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    12a6:	80 91 a9 00 	lds	r24, 0x00A9
    12aa:	80 64       	ori	r24, 0x40	; 64
    12ac:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    12b0:	80 91 a6 00 	lds	r24, 0x00A6
    12b4:	8e 77       	andi	r24, 0x7E	; 126
    12b6:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    12ba:	20 97       	sbiw	r28, 0x00	; 0
    12bc:	91 f6       	brne	.-92     	; 0x1262 <USB_Host_SendControlRequest+0xe2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    12be:	80 91 aa 00 	lds	r24, 0x00AA
    12c2:	8f 7c       	andi	r24, 0xCF	; 207
    12c4:	80 62       	ori	r24, 0x20	; 32
    12c6:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    12ca:	80 91 a9 00 	lds	r24, 0x00A9
    12ce:	8f 7b       	andi	r24, 0xBF	; 191
    12d0:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    12d4:	82 e0       	ldi	r24, 0x02	; 2
    12d6:	2b df       	rcall	.-426    	; 0x112e <USB_Host_WaitForIOS>
    12d8:	98 2f       	mov	r25, r24
    12da:	88 23       	and	r24, r24
    12dc:	09 f0       	breq	.+2      	; 0x12e0 <USB_Host_SendControlRequest+0x160>
    12de:	56 c0       	rjmp	.+172    	; 0x138c <USB_Host_SendControlRequest+0x20c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    12e0:	80 91 a6 00 	lds	r24, 0x00A6
    12e4:	8b 77       	andi	r24, 0x7B	; 123
    12e6:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    12ea:	82 e0       	ldi	r24, 0x02	; 2
    12ec:	20 df       	rcall	.-448    	; 0x112e <USB_Host_WaitForIOS>
    12ee:	98 2f       	mov	r25, r24
    12f0:	4d c0       	rjmp	.+154    	; 0x138c <USB_Host_SendControlRequest+0x20c>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    12f2:	01 15       	cp	r16, r1
    12f4:	11 05       	cpc	r17, r1
    12f6:	a9 f1       	breq	.+106    	; 0x1362 <USB_Host_SendControlRequest+0x1e2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    12f8:	80 91 aa 00 	lds	r24, 0x00AA
    12fc:	8f 7c       	andi	r24, 0xCF	; 207
    12fe:	80 62       	ori	r24, 0x20	; 32
    1300:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1304:	80 91 a9 00 	lds	r24, 0x00A9
    1308:	8f 7b       	andi	r24, 0xBF	; 191
    130a:	80 93 a9 00 	sts	0x00A9, r24
    130e:	1d c0       	rjmp	.+58     	; 0x134a <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1310:	82 e0       	ldi	r24, 0x02	; 2
    1312:	0d df       	rcall	.-486    	; 0x112e <USB_Host_WaitForIOS>
    1314:	98 2f       	mov	r25, r24
    1316:	88 23       	and	r24, r24
    1318:	c9 f5       	brne	.+114    	; 0x138c <USB_Host_SendControlRequest+0x20c>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    131a:	80 91 17 01 	lds	r24, 0x0117
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	07 c0       	rjmp	.+14     	; 0x1332 <USB_Host_SendControlRequest+0x1b2>
				{
					Pipe_Write_8(*(DataStream++));
    1324:	f8 01       	movw	r30, r16
    1326:	81 91       	ld	r24, Z+
    1328:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    132a:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    132e:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1330:	39 f0       	breq	.+14     	; 0x1340 <USB_Host_SendControlRequest+0x1c0>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1332:	80 91 f6 00 	lds	r24, 0x00F6
    1336:	90 91 f7 00 	lds	r25, 0x00F7
    133a:	82 17       	cp	r24, r18
    133c:	93 07       	cpc	r25, r19
    133e:	90 f3       	brcs	.-28     	; 0x1324 <USB_Host_SendControlRequest+0x1a4>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1340:	80 91 a6 00 	lds	r24, 0x00A6
    1344:	8b 77       	andi	r24, 0x7B	; 123
    1346:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    134a:	20 97       	sbiw	r28, 0x00	; 0
    134c:	09 f7       	brne	.-62     	; 0x1310 <USB_Host_SendControlRequest+0x190>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    134e:	82 e0       	ldi	r24, 0x02	; 2
    1350:	ee de       	rcall	.-548    	; 0x112e <USB_Host_WaitForIOS>
    1352:	98 2f       	mov	r25, r24
    1354:	88 23       	and	r24, r24
    1356:	d1 f4       	brne	.+52     	; 0x138c <USB_Host_SendControlRequest+0x20c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1358:	80 91 a9 00 	lds	r24, 0x00A9
    135c:	80 64       	ori	r24, 0x40	; 64
    135e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1362:	80 91 aa 00 	lds	r24, 0x00AA
    1366:	8f 7c       	andi	r24, 0xCF	; 207
    1368:	80 61       	ori	r24, 0x10	; 16
    136a:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    136e:	80 91 a9 00 	lds	r24, 0x00A9
    1372:	8f 7b       	andi	r24, 0xBF	; 191
    1374:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	d9 de       	rcall	.-590    	; 0x112e <USB_Host_WaitForIOS>
    137c:	98 2f       	mov	r25, r24
    137e:	88 23       	and	r24, r24
    1380:	29 f4       	brne	.+10     	; 0x138c <USB_Host_SendControlRequest+0x20c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1382:	80 91 a6 00 	lds	r24, 0x00A6
    1386:	8e 77       	andi	r24, 0x7E	; 126
    1388:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    138c:	80 91 a9 00 	lds	r24, 0x00A9
    1390:	80 64       	ori	r24, 0x40	; 64
    1392:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    1396:	f0 fc       	sbrc	r15, 0
    1398:	05 c0       	rjmp	.+10     	; 0x13a4 <USB_Host_SendControlRequest+0x224>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    139a:	80 91 9e 00 	lds	r24, 0x009E
    139e:	8e 7f       	andi	r24, 0xFE	; 254
    13a0:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    13aa:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    13ae:	89 2f       	mov	r24, r25
    13b0:	df 91       	pop	r29
    13b2:	cf 91       	pop	r28
    13b4:	1f 91       	pop	r17
    13b6:	0f 91       	pop	r16
    13b8:	ff 90       	pop	r15
    13ba:	08 95       	ret

000013bc <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    13bc:	1f 93       	push	r17
    13be:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    13c0:	10 92 1e 01 	sts	0x011E, r1
    13c4:	89 e0       	ldi	r24, 0x09	; 9
    13c6:	80 93 1f 01 	sts	0x011F, r24
    13ca:	10 93 20 01 	sts	0x0120, r17
    13ce:	10 92 21 01 	sts	0x0121, r1
    13d2:	10 92 23 01 	sts	0x0123, r1
    13d6:	10 92 22 01 	sts	0x0122, r1
    13da:	10 92 25 01 	sts	0x0125, r1
    13de:	10 92 24 01 	sts	0x0124, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    13e2:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	ca de       	rcall	.-620    	; 0x1180 <USB_Host_SendControlRequest>
    13ec:	88 23       	and	r24, r24
    13ee:	49 f4       	brne	.+18     	; 0x1402 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    13f0:	10 93 1c 01 	sts	0x011C, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    13f4:	11 23       	and	r17, r17
    13f6:	11 f4       	brne	.+4      	; 0x13fc <USB_Host_SetDeviceConfiguration+0x40>
    13f8:	9a e0       	ldi	r25, 0x0A	; 10
    13fa:	01 c0       	rjmp	.+2      	; 0x13fe <USB_Host_SetDeviceConfiguration+0x42>
    13fc:	9b e0       	ldi	r25, 0x0B	; 11
    13fe:	90 93 26 01 	sts	0x0126, r25
	}

	return ErrorCode;
}
    1402:	1f 91       	pop	r17
    1404:	08 95       	ret

00001406 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1406:	ff 92       	push	r15
    1408:	0f 93       	push	r16
    140a:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    140c:	07 ea       	ldi	r16, 0xA7	; 167
    140e:	10 e0       	ldi	r17, 0x00	; 0
    1410:	f8 01       	movw	r30, r16
    1412:	f0 80       	ld	r15, Z
    1414:	f7 e0       	ldi	r31, 0x07	; 7
    1416:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1418:	f8 01       	movw	r30, r16
    141a:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    141c:	5e da       	rcall	.-2884   	; 0x8da <USB_Host_ProcessNextHostState>
    141e:	f8 01       	movw	r30, r16
    1420:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1422:	1f 91       	pop	r17
    1424:	0f 91       	pop	r16
    1426:	ff 90       	pop	r15
    1428:	08 95       	ret

0000142a <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    142a:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    142c:	80 91 c8 00 	lds	r24, 0x00C8
    1430:	85 ff       	sbrs	r24, 5
    1432:	fc cf       	rjmp	.-8      	; 0x142c <Serial_putchar+0x2>
				UDR1 = DataByte;
    1434:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	08 95       	ret

0000143e <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    143e:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1442:	87 fd       	sbrc	r24, 7
    1444:	03 c0       	rjmp	.+6      	; 0x144c <Serial_getchar+0xe>
    1446:	2e ef       	ldi	r18, 0xFE	; 254
    1448:	3f ef       	ldi	r19, 0xFF	; 255
    144a:	0b c0       	rjmp	.+22     	; 0x1462 <Serial_getchar+0x24>
    144c:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1450:	87 fd       	sbrc	r24, 7
    1452:	03 c0       	rjmp	.+6      	; 0x145a <Serial_getchar+0x1c>
    1454:	2f ef       	ldi	r18, 0xFF	; 255
    1456:	3f ef       	ldi	r19, 0xFF	; 255
    1458:	04 c0       	rjmp	.+8      	; 0x1462 <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    145a:	80 91 ce 00 	lds	r24, 0x00CE
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    1462:	c9 01       	movw	r24, r18
    1464:	08 95       	ret

00001466 <printf_P>:
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
    146e:	fe 01       	movw	r30, r28
    1470:	35 96       	adiw	r30, 0x05	; 5
    1472:	61 91       	ld	r22, Z+
    1474:	71 91       	ld	r23, Z+
    1476:	a0 91 37 01 	lds	r26, 0x0137
    147a:	b0 91 38 01 	lds	r27, 0x0138
    147e:	13 96       	adiw	r26, 0x03	; 3
    1480:	8c 91       	ld	r24, X
    1482:	13 97       	sbiw	r26, 0x03	; 3
    1484:	88 60       	ori	r24, 0x08	; 8
    1486:	13 96       	adiw	r26, 0x03	; 3
    1488:	8c 93       	st	X, r24
    148a:	80 91 37 01 	lds	r24, 0x0137
    148e:	90 91 38 01 	lds	r25, 0x0138
    1492:	af 01       	movw	r20, r30
    1494:	3f d0       	rcall	.+126    	; 0x1514 <vfprintf>
    1496:	e0 91 37 01 	lds	r30, 0x0137
    149a:	f0 91 38 01 	lds	r31, 0x0138
    149e:	23 81       	ldd	r18, Z+3	; 0x03
    14a0:	27 7f       	andi	r18, 0xF7	; 247
    14a2:	23 83       	std	Z+3, r18	; 0x03
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <puts_P>:
    14aa:	0f 93       	push	r16
    14ac:	1f 93       	push	r17
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	ec 01       	movw	r28, r24
    14b4:	e0 91 37 01 	lds	r30, 0x0137
    14b8:	f0 91 38 01 	lds	r31, 0x0138
    14bc:	83 81       	ldd	r24, Z+3	; 0x03
    14be:	81 ff       	sbrs	r24, 1
    14c0:	21 c0       	rjmp	.+66     	; 0x1504 <puts_P+0x5a>
    14c2:	00 e0       	ldi	r16, 0x00	; 0
    14c4:	10 e0       	ldi	r17, 0x00	; 0
    14c6:	0e c0       	rjmp	.+28     	; 0x14e4 <puts_P+0x3a>
    14c8:	e0 91 37 01 	lds	r30, 0x0137
    14cc:	f0 91 38 01 	lds	r31, 0x0138
    14d0:	20 85       	ldd	r18, Z+8	; 0x08
    14d2:	31 85       	ldd	r19, Z+9	; 0x09
    14d4:	bf 01       	movw	r22, r30
    14d6:	f9 01       	movw	r30, r18
    14d8:	09 95       	icall
    14da:	89 2b       	or	r24, r25
    14dc:	11 f0       	breq	.+4      	; 0x14e2 <puts_P+0x38>
    14de:	0f ef       	ldi	r16, 0xFF	; 255
    14e0:	1f ef       	ldi	r17, 0xFF	; 255
    14e2:	21 96       	adiw	r28, 0x01	; 1
    14e4:	fe 01       	movw	r30, r28
    14e6:	84 91       	lpm	r24, Z+
    14e8:	88 23       	and	r24, r24
    14ea:	71 f7       	brne	.-36     	; 0x14c8 <puts_P+0x1e>
    14ec:	e0 91 37 01 	lds	r30, 0x0137
    14f0:	f0 91 38 01 	lds	r31, 0x0138
    14f4:	20 85       	ldd	r18, Z+8	; 0x08
    14f6:	31 85       	ldd	r19, Z+9	; 0x09
    14f8:	8a e0       	ldi	r24, 0x0A	; 10
    14fa:	bf 01       	movw	r22, r30
    14fc:	f9 01       	movw	r30, r18
    14fe:	09 95       	icall
    1500:	89 2b       	or	r24, r25
    1502:	11 f0       	breq	.+4      	; 0x1508 <puts_P+0x5e>
    1504:	0f ef       	ldi	r16, 0xFF	; 255
    1506:	1f ef       	ldi	r17, 0xFF	; 255
    1508:	c8 01       	movw	r24, r16
    150a:	df 91       	pop	r29
    150c:	cf 91       	pop	r28
    150e:	1f 91       	pop	r17
    1510:	0f 91       	pop	r16
    1512:	08 95       	ret

00001514 <vfprintf>:
    1514:	2f 92       	push	r2
    1516:	3f 92       	push	r3
    1518:	4f 92       	push	r4
    151a:	5f 92       	push	r5
    151c:	6f 92       	push	r6
    151e:	7f 92       	push	r7
    1520:	8f 92       	push	r8
    1522:	9f 92       	push	r9
    1524:	af 92       	push	r10
    1526:	bf 92       	push	r11
    1528:	cf 92       	push	r12
    152a:	df 92       	push	r13
    152c:	ef 92       	push	r14
    152e:	ff 92       	push	r15
    1530:	0f 93       	push	r16
    1532:	1f 93       	push	r17
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
    153c:	2b 97       	sbiw	r28, 0x0b	; 11
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	f8 94       	cli
    1542:	de bf       	out	0x3e, r29	; 62
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	cd bf       	out	0x3d, r28	; 61
    1548:	3c 01       	movw	r6, r24
    154a:	2b 01       	movw	r4, r22
    154c:	5a 01       	movw	r10, r20
    154e:	fc 01       	movw	r30, r24
    1550:	17 82       	std	Z+7, r1	; 0x07
    1552:	16 82       	std	Z+6, r1	; 0x06
    1554:	83 81       	ldd	r24, Z+3	; 0x03
    1556:	81 fd       	sbrc	r24, 1
    1558:	03 c0       	rjmp	.+6      	; 0x1560 <vfprintf+0x4c>
    155a:	6f ef       	ldi	r22, 0xFF	; 255
    155c:	7f ef       	ldi	r23, 0xFF	; 255
    155e:	b9 c1       	rjmp	.+882    	; 0x18d2 <vfprintf+0x3be>
    1560:	9a e0       	ldi	r25, 0x0A	; 10
    1562:	89 2e       	mov	r8, r25
    1564:	1e 01       	movw	r2, r28
    1566:	08 94       	sec
    1568:	21 1c       	adc	r2, r1
    156a:	31 1c       	adc	r3, r1
    156c:	f3 01       	movw	r30, r6
    156e:	23 81       	ldd	r18, Z+3	; 0x03
    1570:	f2 01       	movw	r30, r4
    1572:	23 fd       	sbrc	r18, 3
    1574:	85 91       	lpm	r24, Z+
    1576:	23 ff       	sbrs	r18, 3
    1578:	81 91       	ld	r24, Z+
    157a:	2f 01       	movw	r4, r30
    157c:	88 23       	and	r24, r24
    157e:	09 f4       	brne	.+2      	; 0x1582 <vfprintf+0x6e>
    1580:	a5 c1       	rjmp	.+842    	; 0x18cc <vfprintf+0x3b8>
    1582:	85 32       	cpi	r24, 0x25	; 37
    1584:	39 f4       	brne	.+14     	; 0x1594 <vfprintf+0x80>
    1586:	23 fd       	sbrc	r18, 3
    1588:	85 91       	lpm	r24, Z+
    158a:	23 ff       	sbrs	r18, 3
    158c:	81 91       	ld	r24, Z+
    158e:	2f 01       	movw	r4, r30
    1590:	85 32       	cpi	r24, 0x25	; 37
    1592:	21 f4       	brne	.+8      	; 0x159c <vfprintf+0x88>
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	b3 01       	movw	r22, r6
    1598:	cc d1       	rcall	.+920    	; 0x1932 <fputc>
    159a:	e8 cf       	rjmp	.-48     	; 0x156c <vfprintf+0x58>
    159c:	98 2f       	mov	r25, r24
    159e:	ff 24       	eor	r15, r15
    15a0:	ee 24       	eor	r14, r14
    15a2:	99 24       	eor	r9, r9
    15a4:	ff e1       	ldi	r31, 0x1F	; 31
    15a6:	ff 15       	cp	r31, r15
    15a8:	d0 f0       	brcs	.+52     	; 0x15de <vfprintf+0xca>
    15aa:	9b 32       	cpi	r25, 0x2B	; 43
    15ac:	69 f0       	breq	.+26     	; 0x15c8 <vfprintf+0xb4>
    15ae:	9c 32       	cpi	r25, 0x2C	; 44
    15b0:	28 f4       	brcc	.+10     	; 0x15bc <vfprintf+0xa8>
    15b2:	90 32       	cpi	r25, 0x20	; 32
    15b4:	59 f0       	breq	.+22     	; 0x15cc <vfprintf+0xb8>
    15b6:	93 32       	cpi	r25, 0x23	; 35
    15b8:	91 f4       	brne	.+36     	; 0x15de <vfprintf+0xca>
    15ba:	0e c0       	rjmp	.+28     	; 0x15d8 <vfprintf+0xc4>
    15bc:	9d 32       	cpi	r25, 0x2D	; 45
    15be:	49 f0       	breq	.+18     	; 0x15d2 <vfprintf+0xbe>
    15c0:	90 33       	cpi	r25, 0x30	; 48
    15c2:	69 f4       	brne	.+26     	; 0x15de <vfprintf+0xca>
    15c4:	41 e0       	ldi	r20, 0x01	; 1
    15c6:	24 c0       	rjmp	.+72     	; 0x1610 <vfprintf+0xfc>
    15c8:	52 e0       	ldi	r21, 0x02	; 2
    15ca:	f5 2a       	or	r15, r21
    15cc:	84 e0       	ldi	r24, 0x04	; 4
    15ce:	f8 2a       	or	r15, r24
    15d0:	28 c0       	rjmp	.+80     	; 0x1622 <vfprintf+0x10e>
    15d2:	98 e0       	ldi	r25, 0x08	; 8
    15d4:	f9 2a       	or	r15, r25
    15d6:	25 c0       	rjmp	.+74     	; 0x1622 <vfprintf+0x10e>
    15d8:	e0 e1       	ldi	r30, 0x10	; 16
    15da:	fe 2a       	or	r15, r30
    15dc:	22 c0       	rjmp	.+68     	; 0x1622 <vfprintf+0x10e>
    15de:	f7 fc       	sbrc	r15, 7
    15e0:	29 c0       	rjmp	.+82     	; 0x1634 <vfprintf+0x120>
    15e2:	89 2f       	mov	r24, r25
    15e4:	80 53       	subi	r24, 0x30	; 48
    15e6:	8a 30       	cpi	r24, 0x0A	; 10
    15e8:	70 f4       	brcc	.+28     	; 0x1606 <vfprintf+0xf2>
    15ea:	f6 fe       	sbrs	r15, 6
    15ec:	05 c0       	rjmp	.+10     	; 0x15f8 <vfprintf+0xe4>
    15ee:	98 9c       	mul	r9, r8
    15f0:	90 2c       	mov	r9, r0
    15f2:	11 24       	eor	r1, r1
    15f4:	98 0e       	add	r9, r24
    15f6:	15 c0       	rjmp	.+42     	; 0x1622 <vfprintf+0x10e>
    15f8:	e8 9c       	mul	r14, r8
    15fa:	e0 2c       	mov	r14, r0
    15fc:	11 24       	eor	r1, r1
    15fe:	e8 0e       	add	r14, r24
    1600:	f0 e2       	ldi	r31, 0x20	; 32
    1602:	ff 2a       	or	r15, r31
    1604:	0e c0       	rjmp	.+28     	; 0x1622 <vfprintf+0x10e>
    1606:	9e 32       	cpi	r25, 0x2E	; 46
    1608:	29 f4       	brne	.+10     	; 0x1614 <vfprintf+0x100>
    160a:	f6 fc       	sbrc	r15, 6
    160c:	5f c1       	rjmp	.+702    	; 0x18cc <vfprintf+0x3b8>
    160e:	40 e4       	ldi	r20, 0x40	; 64
    1610:	f4 2a       	or	r15, r20
    1612:	07 c0       	rjmp	.+14     	; 0x1622 <vfprintf+0x10e>
    1614:	9c 36       	cpi	r25, 0x6C	; 108
    1616:	19 f4       	brne	.+6      	; 0x161e <vfprintf+0x10a>
    1618:	50 e8       	ldi	r21, 0x80	; 128
    161a:	f5 2a       	or	r15, r21
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <vfprintf+0x10e>
    161e:	98 36       	cpi	r25, 0x68	; 104
    1620:	49 f4       	brne	.+18     	; 0x1634 <vfprintf+0x120>
    1622:	f2 01       	movw	r30, r4
    1624:	23 fd       	sbrc	r18, 3
    1626:	95 91       	lpm	r25, Z+
    1628:	23 ff       	sbrs	r18, 3
    162a:	91 91       	ld	r25, Z+
    162c:	2f 01       	movw	r4, r30
    162e:	99 23       	and	r25, r25
    1630:	09 f0       	breq	.+2      	; 0x1634 <vfprintf+0x120>
    1632:	b8 cf       	rjmp	.-144    	; 0x15a4 <vfprintf+0x90>
    1634:	89 2f       	mov	r24, r25
    1636:	85 54       	subi	r24, 0x45	; 69
    1638:	83 30       	cpi	r24, 0x03	; 3
    163a:	18 f0       	brcs	.+6      	; 0x1642 <vfprintf+0x12e>
    163c:	80 52       	subi	r24, 0x20	; 32
    163e:	83 30       	cpi	r24, 0x03	; 3
    1640:	38 f4       	brcc	.+14     	; 0x1650 <vfprintf+0x13c>
    1642:	44 e0       	ldi	r20, 0x04	; 4
    1644:	50 e0       	ldi	r21, 0x00	; 0
    1646:	a4 0e       	add	r10, r20
    1648:	b5 1e       	adc	r11, r21
    164a:	5f e3       	ldi	r21, 0x3F	; 63
    164c:	59 83       	std	Y+1, r21	; 0x01
    164e:	0f c0       	rjmp	.+30     	; 0x166e <vfprintf+0x15a>
    1650:	93 36       	cpi	r25, 0x63	; 99
    1652:	31 f0       	breq	.+12     	; 0x1660 <vfprintf+0x14c>
    1654:	93 37       	cpi	r25, 0x73	; 115
    1656:	79 f0       	breq	.+30     	; 0x1676 <vfprintf+0x162>
    1658:	93 35       	cpi	r25, 0x53	; 83
    165a:	09 f0       	breq	.+2      	; 0x165e <vfprintf+0x14a>
    165c:	52 c0       	rjmp	.+164    	; 0x1702 <vfprintf+0x1ee>
    165e:	1f c0       	rjmp	.+62     	; 0x169e <vfprintf+0x18a>
    1660:	f5 01       	movw	r30, r10
    1662:	80 81       	ld	r24, Z
    1664:	89 83       	std	Y+1, r24	; 0x01
    1666:	42 e0       	ldi	r20, 0x02	; 2
    1668:	50 e0       	ldi	r21, 0x00	; 0
    166a:	a4 0e       	add	r10, r20
    166c:	b5 1e       	adc	r11, r21
    166e:	61 01       	movw	r12, r2
    1670:	01 e0       	ldi	r16, 0x01	; 1
    1672:	10 e0       	ldi	r17, 0x00	; 0
    1674:	11 c0       	rjmp	.+34     	; 0x1698 <vfprintf+0x184>
    1676:	f5 01       	movw	r30, r10
    1678:	c0 80       	ld	r12, Z
    167a:	d1 80       	ldd	r13, Z+1	; 0x01
    167c:	f6 fc       	sbrc	r15, 6
    167e:	03 c0       	rjmp	.+6      	; 0x1686 <vfprintf+0x172>
    1680:	6f ef       	ldi	r22, 0xFF	; 255
    1682:	7f ef       	ldi	r23, 0xFF	; 255
    1684:	02 c0       	rjmp	.+4      	; 0x168a <vfprintf+0x176>
    1686:	69 2d       	mov	r22, r9
    1688:	70 e0       	ldi	r23, 0x00	; 0
    168a:	42 e0       	ldi	r20, 0x02	; 2
    168c:	50 e0       	ldi	r21, 0x00	; 0
    168e:	a4 0e       	add	r10, r20
    1690:	b5 1e       	adc	r11, r21
    1692:	c6 01       	movw	r24, r12
    1694:	43 d1       	rcall	.+646    	; 0x191c <strnlen>
    1696:	8c 01       	movw	r16, r24
    1698:	5f e7       	ldi	r21, 0x7F	; 127
    169a:	f5 22       	and	r15, r21
    169c:	13 c0       	rjmp	.+38     	; 0x16c4 <vfprintf+0x1b0>
    169e:	f5 01       	movw	r30, r10
    16a0:	c0 80       	ld	r12, Z
    16a2:	d1 80       	ldd	r13, Z+1	; 0x01
    16a4:	f6 fc       	sbrc	r15, 6
    16a6:	03 c0       	rjmp	.+6      	; 0x16ae <vfprintf+0x19a>
    16a8:	6f ef       	ldi	r22, 0xFF	; 255
    16aa:	7f ef       	ldi	r23, 0xFF	; 255
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <vfprintf+0x19e>
    16ae:	69 2d       	mov	r22, r9
    16b0:	70 e0       	ldi	r23, 0x00	; 0
    16b2:	42 e0       	ldi	r20, 0x02	; 2
    16b4:	50 e0       	ldi	r21, 0x00	; 0
    16b6:	a4 0e       	add	r10, r20
    16b8:	b5 1e       	adc	r11, r21
    16ba:	c6 01       	movw	r24, r12
    16bc:	24 d1       	rcall	.+584    	; 0x1906 <strnlen_P>
    16be:	8c 01       	movw	r16, r24
    16c0:	50 e8       	ldi	r21, 0x80	; 128
    16c2:	f5 2a       	or	r15, r21
    16c4:	f3 fe       	sbrs	r15, 3
    16c6:	06 c0       	rjmp	.+12     	; 0x16d4 <vfprintf+0x1c0>
    16c8:	18 c0       	rjmp	.+48     	; 0x16fa <vfprintf+0x1e6>
    16ca:	80 e2       	ldi	r24, 0x20	; 32
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	b3 01       	movw	r22, r6
    16d0:	30 d1       	rcall	.+608    	; 0x1932 <fputc>
    16d2:	ea 94       	dec	r14
    16d4:	8e 2d       	mov	r24, r14
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	08 17       	cp	r16, r24
    16da:	19 07       	cpc	r17, r25
    16dc:	b0 f3       	brcs	.-20     	; 0x16ca <vfprintf+0x1b6>
    16de:	0d c0       	rjmp	.+26     	; 0x16fa <vfprintf+0x1e6>
    16e0:	f6 01       	movw	r30, r12
    16e2:	f7 fc       	sbrc	r15, 7
    16e4:	85 91       	lpm	r24, Z+
    16e6:	f7 fe       	sbrs	r15, 7
    16e8:	81 91       	ld	r24, Z+
    16ea:	6f 01       	movw	r12, r30
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	b3 01       	movw	r22, r6
    16f0:	20 d1       	rcall	.+576    	; 0x1932 <fputc>
    16f2:	e1 10       	cpse	r14, r1
    16f4:	ea 94       	dec	r14
    16f6:	01 50       	subi	r16, 0x01	; 1
    16f8:	10 40       	sbci	r17, 0x00	; 0
    16fa:	01 15       	cp	r16, r1
    16fc:	11 05       	cpc	r17, r1
    16fe:	81 f7       	brne	.-32     	; 0x16e0 <vfprintf+0x1cc>
    1700:	e2 c0       	rjmp	.+452    	; 0x18c6 <vfprintf+0x3b2>
    1702:	94 36       	cpi	r25, 0x64	; 100
    1704:	11 f0       	breq	.+4      	; 0x170a <vfprintf+0x1f6>
    1706:	99 36       	cpi	r25, 0x69	; 105
    1708:	61 f5       	brne	.+88     	; 0x1762 <vfprintf+0x24e>
    170a:	f7 fe       	sbrs	r15, 7
    170c:	08 c0       	rjmp	.+16     	; 0x171e <vfprintf+0x20a>
    170e:	f5 01       	movw	r30, r10
    1710:	20 81       	ld	r18, Z
    1712:	31 81       	ldd	r19, Z+1	; 0x01
    1714:	42 81       	ldd	r20, Z+2	; 0x02
    1716:	53 81       	ldd	r21, Z+3	; 0x03
    1718:	84 e0       	ldi	r24, 0x04	; 4
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	0a c0       	rjmp	.+20     	; 0x1732 <vfprintf+0x21e>
    171e:	f5 01       	movw	r30, r10
    1720:	80 81       	ld	r24, Z
    1722:	91 81       	ldd	r25, Z+1	; 0x01
    1724:	9c 01       	movw	r18, r24
    1726:	44 27       	eor	r20, r20
    1728:	37 fd       	sbrc	r19, 7
    172a:	40 95       	com	r20
    172c:	54 2f       	mov	r21, r20
    172e:	82 e0       	ldi	r24, 0x02	; 2
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	a8 0e       	add	r10, r24
    1734:	b9 1e       	adc	r11, r25
    1736:	9f e6       	ldi	r25, 0x6F	; 111
    1738:	f9 22       	and	r15, r25
    173a:	57 ff       	sbrs	r21, 7
    173c:	09 c0       	rjmp	.+18     	; 0x1750 <vfprintf+0x23c>
    173e:	50 95       	com	r21
    1740:	40 95       	com	r20
    1742:	30 95       	com	r19
    1744:	21 95       	neg	r18
    1746:	3f 4f       	sbci	r19, 0xFF	; 255
    1748:	4f 4f       	sbci	r20, 0xFF	; 255
    174a:	5f 4f       	sbci	r21, 0xFF	; 255
    174c:	e0 e8       	ldi	r30, 0x80	; 128
    174e:	fe 2a       	or	r15, r30
    1750:	ca 01       	movw	r24, r20
    1752:	b9 01       	movw	r22, r18
    1754:	a1 01       	movw	r20, r2
    1756:	2a e0       	ldi	r18, 0x0A	; 10
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	17 d1       	rcall	.+558    	; 0x198a <__ultoa_invert>
    175c:	d8 2e       	mov	r13, r24
    175e:	d2 18       	sub	r13, r2
    1760:	3f c0       	rjmp	.+126    	; 0x17e0 <vfprintf+0x2cc>
    1762:	95 37       	cpi	r25, 0x75	; 117
    1764:	29 f4       	brne	.+10     	; 0x1770 <vfprintf+0x25c>
    1766:	1f 2d       	mov	r17, r15
    1768:	1f 7e       	andi	r17, 0xEF	; 239
    176a:	2a e0       	ldi	r18, 0x0A	; 10
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	1d c0       	rjmp	.+58     	; 0x17aa <vfprintf+0x296>
    1770:	1f 2d       	mov	r17, r15
    1772:	19 7f       	andi	r17, 0xF9	; 249
    1774:	9f 36       	cpi	r25, 0x6F	; 111
    1776:	61 f0       	breq	.+24     	; 0x1790 <vfprintf+0x27c>
    1778:	90 37       	cpi	r25, 0x70	; 112
    177a:	20 f4       	brcc	.+8      	; 0x1784 <vfprintf+0x270>
    177c:	98 35       	cpi	r25, 0x58	; 88
    177e:	09 f0       	breq	.+2      	; 0x1782 <vfprintf+0x26e>
    1780:	a5 c0       	rjmp	.+330    	; 0x18cc <vfprintf+0x3b8>
    1782:	0f c0       	rjmp	.+30     	; 0x17a2 <vfprintf+0x28e>
    1784:	90 37       	cpi	r25, 0x70	; 112
    1786:	39 f0       	breq	.+14     	; 0x1796 <vfprintf+0x282>
    1788:	98 37       	cpi	r25, 0x78	; 120
    178a:	09 f0       	breq	.+2      	; 0x178e <vfprintf+0x27a>
    178c:	9f c0       	rjmp	.+318    	; 0x18cc <vfprintf+0x3b8>
    178e:	04 c0       	rjmp	.+8      	; 0x1798 <vfprintf+0x284>
    1790:	28 e0       	ldi	r18, 0x08	; 8
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	0a c0       	rjmp	.+20     	; 0x17aa <vfprintf+0x296>
    1796:	10 61       	ori	r17, 0x10	; 16
    1798:	14 fd       	sbrc	r17, 4
    179a:	14 60       	ori	r17, 0x04	; 4
    179c:	20 e1       	ldi	r18, 0x10	; 16
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	04 c0       	rjmp	.+8      	; 0x17aa <vfprintf+0x296>
    17a2:	14 fd       	sbrc	r17, 4
    17a4:	16 60       	ori	r17, 0x06	; 6
    17a6:	20 e1       	ldi	r18, 0x10	; 16
    17a8:	32 e0       	ldi	r19, 0x02	; 2
    17aa:	17 ff       	sbrs	r17, 7
    17ac:	08 c0       	rjmp	.+16     	; 0x17be <vfprintf+0x2aa>
    17ae:	f5 01       	movw	r30, r10
    17b0:	60 81       	ld	r22, Z
    17b2:	71 81       	ldd	r23, Z+1	; 0x01
    17b4:	82 81       	ldd	r24, Z+2	; 0x02
    17b6:	93 81       	ldd	r25, Z+3	; 0x03
    17b8:	44 e0       	ldi	r20, 0x04	; 4
    17ba:	50 e0       	ldi	r21, 0x00	; 0
    17bc:	08 c0       	rjmp	.+16     	; 0x17ce <vfprintf+0x2ba>
    17be:	f5 01       	movw	r30, r10
    17c0:	80 81       	ld	r24, Z
    17c2:	91 81       	ldd	r25, Z+1	; 0x01
    17c4:	bc 01       	movw	r22, r24
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	42 e0       	ldi	r20, 0x02	; 2
    17cc:	50 e0       	ldi	r21, 0x00	; 0
    17ce:	a4 0e       	add	r10, r20
    17d0:	b5 1e       	adc	r11, r21
    17d2:	a1 01       	movw	r20, r2
    17d4:	da d0       	rcall	.+436    	; 0x198a <__ultoa_invert>
    17d6:	d8 2e       	mov	r13, r24
    17d8:	d2 18       	sub	r13, r2
    17da:	8f e7       	ldi	r24, 0x7F	; 127
    17dc:	f8 2e       	mov	r15, r24
    17de:	f1 22       	and	r15, r17
    17e0:	f6 fe       	sbrs	r15, 6
    17e2:	0b c0       	rjmp	.+22     	; 0x17fa <vfprintf+0x2e6>
    17e4:	5e ef       	ldi	r21, 0xFE	; 254
    17e6:	f5 22       	and	r15, r21
    17e8:	d9 14       	cp	r13, r9
    17ea:	38 f4       	brcc	.+14     	; 0x17fa <vfprintf+0x2e6>
    17ec:	f4 fe       	sbrs	r15, 4
    17ee:	07 c0       	rjmp	.+14     	; 0x17fe <vfprintf+0x2ea>
    17f0:	f2 fc       	sbrc	r15, 2
    17f2:	05 c0       	rjmp	.+10     	; 0x17fe <vfprintf+0x2ea>
    17f4:	8f ee       	ldi	r24, 0xEF	; 239
    17f6:	f8 22       	and	r15, r24
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <vfprintf+0x2ea>
    17fa:	1d 2d       	mov	r17, r13
    17fc:	01 c0       	rjmp	.+2      	; 0x1800 <vfprintf+0x2ec>
    17fe:	19 2d       	mov	r17, r9
    1800:	f4 fe       	sbrs	r15, 4
    1802:	0d c0       	rjmp	.+26     	; 0x181e <vfprintf+0x30a>
    1804:	fe 01       	movw	r30, r28
    1806:	ed 0d       	add	r30, r13
    1808:	f1 1d       	adc	r31, r1
    180a:	80 81       	ld	r24, Z
    180c:	80 33       	cpi	r24, 0x30	; 48
    180e:	19 f4       	brne	.+6      	; 0x1816 <vfprintf+0x302>
    1810:	99 ee       	ldi	r25, 0xE9	; 233
    1812:	f9 22       	and	r15, r25
    1814:	08 c0       	rjmp	.+16     	; 0x1826 <vfprintf+0x312>
    1816:	1f 5f       	subi	r17, 0xFF	; 255
    1818:	f2 fe       	sbrs	r15, 2
    181a:	05 c0       	rjmp	.+10     	; 0x1826 <vfprintf+0x312>
    181c:	03 c0       	rjmp	.+6      	; 0x1824 <vfprintf+0x310>
    181e:	8f 2d       	mov	r24, r15
    1820:	86 78       	andi	r24, 0x86	; 134
    1822:	09 f0       	breq	.+2      	; 0x1826 <vfprintf+0x312>
    1824:	1f 5f       	subi	r17, 0xFF	; 255
    1826:	0f 2d       	mov	r16, r15
    1828:	f3 fc       	sbrc	r15, 3
    182a:	13 c0       	rjmp	.+38     	; 0x1852 <vfprintf+0x33e>
    182c:	f0 fe       	sbrs	r15, 0
    182e:	0e c0       	rjmp	.+28     	; 0x184c <vfprintf+0x338>
    1830:	1e 15       	cp	r17, r14
    1832:	10 f0       	brcs	.+4      	; 0x1838 <vfprintf+0x324>
    1834:	9d 2c       	mov	r9, r13
    1836:	0a c0       	rjmp	.+20     	; 0x184c <vfprintf+0x338>
    1838:	9d 2c       	mov	r9, r13
    183a:	9e 0c       	add	r9, r14
    183c:	91 1a       	sub	r9, r17
    183e:	1e 2d       	mov	r17, r14
    1840:	05 c0       	rjmp	.+10     	; 0x184c <vfprintf+0x338>
    1842:	80 e2       	ldi	r24, 0x20	; 32
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	b3 01       	movw	r22, r6
    1848:	74 d0       	rcall	.+232    	; 0x1932 <fputc>
    184a:	1f 5f       	subi	r17, 0xFF	; 255
    184c:	1e 15       	cp	r17, r14
    184e:	c8 f3       	brcs	.-14     	; 0x1842 <vfprintf+0x32e>
    1850:	04 c0       	rjmp	.+8      	; 0x185a <vfprintf+0x346>
    1852:	1e 15       	cp	r17, r14
    1854:	10 f4       	brcc	.+4      	; 0x185a <vfprintf+0x346>
    1856:	e1 1a       	sub	r14, r17
    1858:	01 c0       	rjmp	.+2      	; 0x185c <vfprintf+0x348>
    185a:	ee 24       	eor	r14, r14
    185c:	04 ff       	sbrs	r16, 4
    185e:	0e c0       	rjmp	.+28     	; 0x187c <vfprintf+0x368>
    1860:	80 e3       	ldi	r24, 0x30	; 48
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	b3 01       	movw	r22, r6
    1866:	65 d0       	rcall	.+202    	; 0x1932 <fputc>
    1868:	02 ff       	sbrs	r16, 2
    186a:	1b c0       	rjmp	.+54     	; 0x18a2 <vfprintf+0x38e>
    186c:	01 fd       	sbrc	r16, 1
    186e:	03 c0       	rjmp	.+6      	; 0x1876 <vfprintf+0x362>
    1870:	88 e7       	ldi	r24, 0x78	; 120
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	0e c0       	rjmp	.+28     	; 0x1892 <vfprintf+0x37e>
    1876:	88 e5       	ldi	r24, 0x58	; 88
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	0b c0       	rjmp	.+22     	; 0x1892 <vfprintf+0x37e>
    187c:	80 2f       	mov	r24, r16
    187e:	86 78       	andi	r24, 0x86	; 134
    1880:	81 f0       	breq	.+32     	; 0x18a2 <vfprintf+0x38e>
    1882:	01 ff       	sbrs	r16, 1
    1884:	02 c0       	rjmp	.+4      	; 0x188a <vfprintf+0x376>
    1886:	8b e2       	ldi	r24, 0x2B	; 43
    1888:	01 c0       	rjmp	.+2      	; 0x188c <vfprintf+0x378>
    188a:	80 e2       	ldi	r24, 0x20	; 32
    188c:	f7 fc       	sbrc	r15, 7
    188e:	8d e2       	ldi	r24, 0x2D	; 45
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	b3 01       	movw	r22, r6
    1894:	4e d0       	rcall	.+156    	; 0x1932 <fputc>
    1896:	05 c0       	rjmp	.+10     	; 0x18a2 <vfprintf+0x38e>
    1898:	80 e3       	ldi	r24, 0x30	; 48
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	b3 01       	movw	r22, r6
    189e:	49 d0       	rcall	.+146    	; 0x1932 <fputc>
    18a0:	9a 94       	dec	r9
    18a2:	d9 14       	cp	r13, r9
    18a4:	c8 f3       	brcs	.-14     	; 0x1898 <vfprintf+0x384>
    18a6:	da 94       	dec	r13
    18a8:	f1 01       	movw	r30, r2
    18aa:	ed 0d       	add	r30, r13
    18ac:	f1 1d       	adc	r31, r1
    18ae:	80 81       	ld	r24, Z
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	b3 01       	movw	r22, r6
    18b4:	3e d0       	rcall	.+124    	; 0x1932 <fputc>
    18b6:	dd 20       	and	r13, r13
    18b8:	b1 f7       	brne	.-20     	; 0x18a6 <vfprintf+0x392>
    18ba:	05 c0       	rjmp	.+10     	; 0x18c6 <vfprintf+0x3b2>
    18bc:	80 e2       	ldi	r24, 0x20	; 32
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	b3 01       	movw	r22, r6
    18c2:	37 d0       	rcall	.+110    	; 0x1932 <fputc>
    18c4:	ea 94       	dec	r14
    18c6:	ee 20       	and	r14, r14
    18c8:	c9 f7       	brne	.-14     	; 0x18bc <vfprintf+0x3a8>
    18ca:	50 ce       	rjmp	.-864    	; 0x156c <vfprintf+0x58>
    18cc:	f3 01       	movw	r30, r6
    18ce:	66 81       	ldd	r22, Z+6	; 0x06
    18d0:	77 81       	ldd	r23, Z+7	; 0x07
    18d2:	cb 01       	movw	r24, r22
    18d4:	2b 96       	adiw	r28, 0x0b	; 11
    18d6:	0f b6       	in	r0, 0x3f	; 63
    18d8:	f8 94       	cli
    18da:	de bf       	out	0x3e, r29	; 62
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	cd bf       	out	0x3d, r28	; 61
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	1f 91       	pop	r17
    18e6:	0f 91       	pop	r16
    18e8:	ff 90       	pop	r15
    18ea:	ef 90       	pop	r14
    18ec:	df 90       	pop	r13
    18ee:	cf 90       	pop	r12
    18f0:	bf 90       	pop	r11
    18f2:	af 90       	pop	r10
    18f4:	9f 90       	pop	r9
    18f6:	8f 90       	pop	r8
    18f8:	7f 90       	pop	r7
    18fa:	6f 90       	pop	r6
    18fc:	5f 90       	pop	r5
    18fe:	4f 90       	pop	r4
    1900:	3f 90       	pop	r3
    1902:	2f 90       	pop	r2
    1904:	08 95       	ret

00001906 <strnlen_P>:
    1906:	fc 01       	movw	r30, r24
    1908:	05 90       	lpm	r0, Z+
    190a:	61 50       	subi	r22, 0x01	; 1
    190c:	70 40       	sbci	r23, 0x00	; 0
    190e:	01 10       	cpse	r0, r1
    1910:	d8 f7       	brcc	.-10     	; 0x1908 <strnlen_P+0x2>
    1912:	80 95       	com	r24
    1914:	90 95       	com	r25
    1916:	8e 0f       	add	r24, r30
    1918:	9f 1f       	adc	r25, r31
    191a:	08 95       	ret

0000191c <strnlen>:
    191c:	fc 01       	movw	r30, r24
    191e:	61 50       	subi	r22, 0x01	; 1
    1920:	70 40       	sbci	r23, 0x00	; 0
    1922:	01 90       	ld	r0, Z+
    1924:	01 10       	cpse	r0, r1
    1926:	d8 f7       	brcc	.-10     	; 0x191e <strnlen+0x2>
    1928:	80 95       	com	r24
    192a:	90 95       	com	r25
    192c:	8e 0f       	add	r24, r30
    192e:	9f 1f       	adc	r25, r31
    1930:	08 95       	ret

00001932 <fputc>:
    1932:	0f 93       	push	r16
    1934:	1f 93       	push	r17
    1936:	cf 93       	push	r28
    1938:	df 93       	push	r29
    193a:	8c 01       	movw	r16, r24
    193c:	eb 01       	movw	r28, r22
    193e:	8b 81       	ldd	r24, Y+3	; 0x03
    1940:	81 ff       	sbrs	r24, 1
    1942:	1b c0       	rjmp	.+54     	; 0x197a <fputc+0x48>
    1944:	82 ff       	sbrs	r24, 2
    1946:	0d c0       	rjmp	.+26     	; 0x1962 <fputc+0x30>
    1948:	2e 81       	ldd	r18, Y+6	; 0x06
    194a:	3f 81       	ldd	r19, Y+7	; 0x07
    194c:	8c 81       	ldd	r24, Y+4	; 0x04
    194e:	9d 81       	ldd	r25, Y+5	; 0x05
    1950:	28 17       	cp	r18, r24
    1952:	39 07       	cpc	r19, r25
    1954:	64 f4       	brge	.+24     	; 0x196e <fputc+0x3c>
    1956:	e8 81       	ld	r30, Y
    1958:	f9 81       	ldd	r31, Y+1	; 0x01
    195a:	01 93       	st	Z+, r16
    195c:	f9 83       	std	Y+1, r31	; 0x01
    195e:	e8 83       	st	Y, r30
    1960:	06 c0       	rjmp	.+12     	; 0x196e <fputc+0x3c>
    1962:	e8 85       	ldd	r30, Y+8	; 0x08
    1964:	f9 85       	ldd	r31, Y+9	; 0x09
    1966:	80 2f       	mov	r24, r16
    1968:	09 95       	icall
    196a:	89 2b       	or	r24, r25
    196c:	31 f4       	brne	.+12     	; 0x197a <fputc+0x48>
    196e:	8e 81       	ldd	r24, Y+6	; 0x06
    1970:	9f 81       	ldd	r25, Y+7	; 0x07
    1972:	01 96       	adiw	r24, 0x01	; 1
    1974:	9f 83       	std	Y+7, r25	; 0x07
    1976:	8e 83       	std	Y+6, r24	; 0x06
    1978:	02 c0       	rjmp	.+4      	; 0x197e <fputc+0x4c>
    197a:	0f ef       	ldi	r16, 0xFF	; 255
    197c:	1f ef       	ldi	r17, 0xFF	; 255
    197e:	c8 01       	movw	r24, r16
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	1f 91       	pop	r17
    1986:	0f 91       	pop	r16
    1988:	08 95       	ret

0000198a <__ultoa_invert>:
    198a:	fa 01       	movw	r30, r20
    198c:	aa 27       	eor	r26, r26
    198e:	28 30       	cpi	r18, 0x08	; 8
    1990:	51 f1       	breq	.+84     	; 0x19e6 <__ultoa_invert+0x5c>
    1992:	20 31       	cpi	r18, 0x10	; 16
    1994:	81 f1       	breq	.+96     	; 0x19f6 <__ultoa_invert+0x6c>
    1996:	e8 94       	clt
    1998:	6f 93       	push	r22
    199a:	6e 7f       	andi	r22, 0xFE	; 254
    199c:	6e 5f       	subi	r22, 0xFE	; 254
    199e:	7f 4f       	sbci	r23, 0xFF	; 255
    19a0:	8f 4f       	sbci	r24, 0xFF	; 255
    19a2:	9f 4f       	sbci	r25, 0xFF	; 255
    19a4:	af 4f       	sbci	r26, 0xFF	; 255
    19a6:	b1 e0       	ldi	r27, 0x01	; 1
    19a8:	3e d0       	rcall	.+124    	; 0x1a26 <__ultoa_invert+0x9c>
    19aa:	b4 e0       	ldi	r27, 0x04	; 4
    19ac:	3c d0       	rcall	.+120    	; 0x1a26 <__ultoa_invert+0x9c>
    19ae:	67 0f       	add	r22, r23
    19b0:	78 1f       	adc	r23, r24
    19b2:	89 1f       	adc	r24, r25
    19b4:	9a 1f       	adc	r25, r26
    19b6:	a1 1d       	adc	r26, r1
    19b8:	68 0f       	add	r22, r24
    19ba:	79 1f       	adc	r23, r25
    19bc:	8a 1f       	adc	r24, r26
    19be:	91 1d       	adc	r25, r1
    19c0:	a1 1d       	adc	r26, r1
    19c2:	6a 0f       	add	r22, r26
    19c4:	71 1d       	adc	r23, r1
    19c6:	81 1d       	adc	r24, r1
    19c8:	91 1d       	adc	r25, r1
    19ca:	a1 1d       	adc	r26, r1
    19cc:	20 d0       	rcall	.+64     	; 0x1a0e <__ultoa_invert+0x84>
    19ce:	09 f4       	brne	.+2      	; 0x19d2 <__ultoa_invert+0x48>
    19d0:	68 94       	set
    19d2:	3f 91       	pop	r19
    19d4:	2a e0       	ldi	r18, 0x0A	; 10
    19d6:	26 9f       	mul	r18, r22
    19d8:	11 24       	eor	r1, r1
    19da:	30 19       	sub	r19, r0
    19dc:	30 5d       	subi	r19, 0xD0	; 208
    19de:	31 93       	st	Z+, r19
    19e0:	de f6       	brtc	.-74     	; 0x1998 <__ultoa_invert+0xe>
    19e2:	cf 01       	movw	r24, r30
    19e4:	08 95       	ret
    19e6:	46 2f       	mov	r20, r22
    19e8:	47 70       	andi	r20, 0x07	; 7
    19ea:	40 5d       	subi	r20, 0xD0	; 208
    19ec:	41 93       	st	Z+, r20
    19ee:	b3 e0       	ldi	r27, 0x03	; 3
    19f0:	0f d0       	rcall	.+30     	; 0x1a10 <__ultoa_invert+0x86>
    19f2:	c9 f7       	brne	.-14     	; 0x19e6 <__ultoa_invert+0x5c>
    19f4:	f6 cf       	rjmp	.-20     	; 0x19e2 <__ultoa_invert+0x58>
    19f6:	46 2f       	mov	r20, r22
    19f8:	4f 70       	andi	r20, 0x0F	; 15
    19fa:	40 5d       	subi	r20, 0xD0	; 208
    19fc:	4a 33       	cpi	r20, 0x3A	; 58
    19fe:	18 f0       	brcs	.+6      	; 0x1a06 <__ultoa_invert+0x7c>
    1a00:	49 5d       	subi	r20, 0xD9	; 217
    1a02:	31 fd       	sbrc	r19, 1
    1a04:	40 52       	subi	r20, 0x20	; 32
    1a06:	41 93       	st	Z+, r20
    1a08:	02 d0       	rcall	.+4      	; 0x1a0e <__ultoa_invert+0x84>
    1a0a:	a9 f7       	brne	.-22     	; 0x19f6 <__ultoa_invert+0x6c>
    1a0c:	ea cf       	rjmp	.-44     	; 0x19e2 <__ultoa_invert+0x58>
    1a0e:	b4 e0       	ldi	r27, 0x04	; 4
    1a10:	a6 95       	lsr	r26
    1a12:	97 95       	ror	r25
    1a14:	87 95       	ror	r24
    1a16:	77 95       	ror	r23
    1a18:	67 95       	ror	r22
    1a1a:	ba 95       	dec	r27
    1a1c:	c9 f7       	brne	.-14     	; 0x1a10 <__ultoa_invert+0x86>
    1a1e:	00 97       	sbiw	r24, 0x00	; 0
    1a20:	61 05       	cpc	r22, r1
    1a22:	71 05       	cpc	r23, r1
    1a24:	08 95       	ret
    1a26:	9b 01       	movw	r18, r22
    1a28:	ac 01       	movw	r20, r24
    1a2a:	0a 2e       	mov	r0, r26
    1a2c:	06 94       	lsr	r0
    1a2e:	57 95       	ror	r21
    1a30:	47 95       	ror	r20
    1a32:	37 95       	ror	r19
    1a34:	27 95       	ror	r18
    1a36:	ba 95       	dec	r27
    1a38:	c9 f7       	brne	.-14     	; 0x1a2c <__ultoa_invert+0xa2>
    1a3a:	62 0f       	add	r22, r18
    1a3c:	73 1f       	adc	r23, r19
    1a3e:	84 1f       	adc	r24, r20
    1a40:	95 1f       	adc	r25, r21
    1a42:	a0 1d       	adc	r26, r0
    1a44:	08 95       	ret

00001a46 <_exit>:
    1a46:	f8 94       	cli

00001a48 <__stop_program>:
    1a48:	ff cf       	rjmp	.-2      	; 0x1a48 <__stop_program>
