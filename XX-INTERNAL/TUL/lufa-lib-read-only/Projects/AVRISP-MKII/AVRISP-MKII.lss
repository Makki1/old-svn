
AVRISP-MKII.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  000026ce  00002782  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026ce  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800142  00800142  000027c4  2**0
                  ALLOC
  3 .eeprom       00000001  00810000  00810000  000027c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000858  00000000  00000000  000027c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000000b3  00000000  00000000  00003020  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000570  00000000  00000000  000030d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000ed1  00000000  00000000  00003643  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00007621  00000000  00000000  00004514  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001e17  00000000  00000000  0000bb35  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000062d8  00000000  00000000  0000d94c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000860  00000000  00000000  00013c24  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002c54  00000000  00000000  00014484  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003332  00000000  00000000  000170d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000618  00000000  00000000  0001a40a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       0:	29 c1       	rjmp	.+594    	; 0x254 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
       4:	43 c1       	rjmp	.+646    	; 0x28c <__bad_interrupt>
       6:	00 00       	nop
       8:	41 c1       	rjmp	.+642    	; 0x28c <__bad_interrupt>
       a:	00 00       	nop
       c:	3f c1       	rjmp	.+638    	; 0x28c <__bad_interrupt>
       e:	00 00       	nop
      10:	3d c1       	rjmp	.+634    	; 0x28c <__bad_interrupt>
      12:	00 00       	nop
      14:	3b c1       	rjmp	.+630    	; 0x28c <__bad_interrupt>
      16:	00 00       	nop
      18:	39 c1       	rjmp	.+626    	; 0x28c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	37 c1       	rjmp	.+622    	; 0x28c <__bad_interrupt>
      1e:	00 00       	nop
      20:	35 c1       	rjmp	.+618    	; 0x28c <__bad_interrupt>
      22:	00 00       	nop
      24:	33 c1       	rjmp	.+614    	; 0x28c <__bad_interrupt>
      26:	00 00       	nop
      28:	31 c1       	rjmp	.+610    	; 0x28c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 20 10 	jmp	0x2040	; 0x2040 <__vector_11>
      30:	2d c1       	rjmp	.+602    	; 0x28c <__bad_interrupt>
      32:	00 00       	nop
      34:	be c1       	rjmp	.+892    	; 0x3b2 <__vector_13>
      36:	00 00       	nop
      38:	29 c1       	rjmp	.+594    	; 0x28c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	bc c7       	rjmp	.+3960   	; 0xfb6 <__vector_15>
      3e:	00 00       	nop
      40:	25 c1       	rjmp	.+586    	; 0x28c <__bad_interrupt>
      42:	00 00       	nop
      44:	23 c1       	rjmp	.+582    	; 0x28c <__bad_interrupt>
      46:	00 00       	nop
      48:	21 c1       	rjmp	.+578    	; 0x28c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1f c1       	rjmp	.+574    	; 0x28c <__bad_interrupt>
      4e:	00 00       	nop
      50:	1d c1       	rjmp	.+570    	; 0x28c <__bad_interrupt>
      52:	00 00       	nop
      54:	1b c1       	rjmp	.+566    	; 0x28c <__bad_interrupt>
      56:	00 00       	nop
      58:	19 c1       	rjmp	.+562    	; 0x28c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	17 c1       	rjmp	.+558    	; 0x28c <__bad_interrupt>
      5e:	00 00       	nop
      60:	15 c1       	rjmp	.+554    	; 0x28c <__bad_interrupt>
      62:	00 00       	nop
      64:	13 c1       	rjmp	.+550    	; 0x28c <__bad_interrupt>
      66:	00 00       	nop
      68:	11 c1       	rjmp	.+546    	; 0x28c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0f c1       	rjmp	.+542    	; 0x28c <__bad_interrupt>
      6e:	00 00       	nop
      70:	0d c1       	rjmp	.+538    	; 0x28c <__bad_interrupt>
      72:	00 00       	nop

00000074 <DeviceDescriptor>:
      74:	12 01 10 01 ff 00 00 10 eb 03 04 21 00 02 01 02     ...........!....
      84:	03 01                                               ..

00000086 <ConfigurationDescriptor>:
      86:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 ff 00     .. .....2.......
      96:	00 00 07 05 82 02 40 00 0a 07 05 02 02 40 00 0a     ......@......@..

000000a6 <LanguageString>:
      a6:	04 03 09 04                                         ....

000000aa <ManufacturerString>:
      aa:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      ba:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000c4 <ProductString>:
      c4:	2e 03 4c 00 55 00 46 00 41 00 20 00 41 00 56 00     ..L.U.F.A. .A.V.
      d4:	52 00 49 00 53 00 50 00 20 00 4d 00 6b 00 49 00     R.I.S.P. .M.k.I.
      e4:	49 00 20 00 43 00 6c 00 6f 00 6e 00 65 00 00 00     I. .C.l.o.n.e...

000000f4 <SerialString>:
      f4:	1c 03 30 00 30 00 30 00 30 00 41 00 30 00 30 00     ..0.0.0.0.A.0.0.
     104:	31 00 32 00 38 00 32 00 35 00 35 00 00 00           1.2.8.2.5.5...

00000112 <TimerCompareFromSCKDuration>:
     112:	09 00 0a 00 0a 00 0b 00 0c 00 0d 00 0d 00 0e 00     ................
     122:	0f 00 10 00 10 00 12 00 13 00 13 00 14 00 16 00     ................
     132:	16 00 18 00 19 00 1a 00 1c 00 1d 00 1f 00 20 00     .............. .
     142:	22 00 23 00 25 00 27 00 29 00 2b 00 2e 00 30 00     ".#.%.'.).+...0.
     152:	32 00 34 00 37 00 3a 00 3d 00 40 00 43 00 46 00     2.4.7.:.=.@.C.F.
     162:	4a 00 4e 00 52 00 55 00 5a 00 5e 00 63 00 68 00     J.N.R.U.Z.^.c.h.
     172:	6d 00 73 00 78 00 7e 00 84 00 8b 00 91 00 99 00     m.s.x.~.........
     182:	a0 00 a9 00 b1 00 b9 00 c3 00 cc 00 d6 00 e1 00     ................
     192:	ec 00 f7 00 04 01 11 01 1e 01 2d 01 3b 01 4b 01     ..........-.;.K.
     1a2:	5b 01 6c 01 7d 01 91 01 a5 01 ba 01 cf 01 e6 01     [.l.}...........
     1b2:	fe 01 16 02 31 02 4c 02 6a 02 88 02 a8 02 ca 02     ....1.L.j.......
     1c2:	ed 02 11 03 38 03 60 03 8b 03 b8 03 e7 03 18 04     ....8.`.........
     1d2:	4b 04 81 04 b9 04 f5 04 34 05 75 05 b9 05 01 06     K.......4.u.....
     1e2:	4e 06 9d 06 ef 06 48 07 a3 07 04 08 65 08 d0 08     N.....H.....e...
     1f2:	40 09 b6 09 2b 0a ab 0a 30 0b c3 0b 51 0c ee 0c     @...+...0...Q...
     202:	8f 0d 40 0e f6 0e af 0f 68 10 47 11 14 12 f5 12     ..@.....h.G.....
     212:	ed 13 e2 14 f0 15 f9 16 1b 18 5c 19 91 1a e5 1b     ..........\.....
     222:	25 1d 83 1e 03 20 ab 21 30 23 32 25 0f 27 f1 28     %.... .!0#2%.'.(
     232:	f8 2a 1a 2d 49 2f a1 31 14 34 a1 36 45 39 17 3c     .*.-I/.1.4.6E9.<
     242:	1a 3f 34 42 60 45 df 48 70 4c                       .?4B`E.HpL

0000024c <SPIMaskFromSCKDuration>:
     24c:	40 00 41 01 42 43 03 00                             @.A.BC..

00000254 <__ctors_end>:
     254:	11 24       	eor	r1, r1
     256:	1f be       	out	0x3f, r1	; 63
     258:	cf ef       	ldi	r28, 0xFF	; 255
     25a:	d2 e0       	ldi	r29, 0x02	; 2
     25c:	de bf       	out	0x3e, r29	; 62
     25e:	cd bf       	out	0x3d, r28	; 61

00000260 <__do_copy_data>:
     260:	11 e0       	ldi	r17, 0x01	; 1
     262:	a0 e0       	ldi	r26, 0x00	; 0
     264:	b1 e0       	ldi	r27, 0x01	; 1
     266:	ee ec       	ldi	r30, 0xCE	; 206
     268:	f6 e2       	ldi	r31, 0x26	; 38
     26a:	02 c0       	rjmp	.+4      	; 0x270 <.do_copy_data_start>

0000026c <.do_copy_data_loop>:
     26c:	05 90       	lpm	r0, Z+
     26e:	0d 92       	st	X+, r0

00000270 <.do_copy_data_start>:
     270:	a2 34       	cpi	r26, 0x42	; 66
     272:	b1 07       	cpc	r27, r17
     274:	d9 f7       	brne	.-10     	; 0x26c <.do_copy_data_loop>

00000276 <__do_clear_bss>:
     276:	11 e0       	ldi	r17, 0x01	; 1
     278:	a2 e4       	ldi	r26, 0x42	; 66
     27a:	b1 e0       	ldi	r27, 0x01	; 1
     27c:	01 c0       	rjmp	.+2      	; 0x280 <.do_clear_bss_start>

0000027e <.do_clear_bss_loop>:
     27e:	1d 92       	st	X+, r1

00000280 <.do_clear_bss_start>:
     280:	a5 35       	cpi	r26, 0x55	; 85
     282:	b1 07       	cpc	r27, r17
     284:	e1 f7       	brne	.-8      	; 0x27e <.do_clear_bss_loop>
     286:	4d d0       	rcall	.+154    	; 0x322 <main>
     288:	0c 94 65 13 	jmp	0x26ca	; 0x26ca <_exit>

0000028c <__bad_interrupt>:
     28c:	b9 ce       	rjmp	.-654    	; 0x0 <__vectors>

0000028e <EVENT_USB_Device_Connect>:
				PORTB &= ~LedMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LedMask)
			{
				PORTB = ((PORTB & ~LEDS_ALL_LEDS) | LedMask);
     28e:	85 b1       	in	r24, 0x05	; 5
     290:	8f 71       	andi	r24, 0x1F	; 31
     292:	80 6c       	ori	r24, 0xC0	; 192
     294:	85 b9       	out	0x05, r24	; 5

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     296:	08 95       	ret

00000298 <EVENT_USB_Device_Disconnect>:
     298:	85 b1       	in	r24, 0x05	; 5
     29a:	8f 71       	andi	r24, 0x1F	; 31
     29c:	80 64       	ori	r24, 0x40	; 64
     29e:	85 b9       	out	0x05, r24	; 5

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     2a0:	08 95       	ret

000002a2 <AVRISP_Task>:

/** Processes incoming V2 Protocol commands from the host, returning a response when required. */
void AVRISP_Task(void)
{
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     2a2:	8e b3       	in	r24, 0x1e	; 30
     2a4:	84 30       	cpi	r24, 0x04	; 4
     2a6:	89 f4       	brne	.+34     	; 0x2ca <AVRISP_Task+0x28>
	  return;

	V2Params_UpdateParamValues();
     2a8:	c9 d1       	rcall	.+914    	; 0x63c <V2Params_UpdateParamValues>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     2aa:	82 e0       	ldi	r24, 0x02	; 2
     2ac:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     2b0:	80 91 e8 00 	lds	r24, 0x00E8

	Endpoint_SelectEndpoint(AVRISP_DATA_OUT_EPNUM);

	/* Check to see if a V2 Protocol command has been received */
	if (Endpoint_IsOUTReceived())
     2b4:	82 ff       	sbrs	r24, 2
     2b6:	09 c0       	rjmp	.+18     	; 0x2ca <AVRISP_Task+0x28>
     2b8:	85 b1       	in	r24, 0x05	; 5
     2ba:	8f 71       	andi	r24, 0x1F	; 31
     2bc:	80 6c       	ori	r24, 0xC0	; 192
     2be:	85 b9       	out	0x05, r24	; 5
	{
		LEDs_SetAllLEDs(LEDMASK_BUSY);

		/* Pass off processing of the V2 Protocol command to the V2 Protocol handler */
		V2Protocol_ProcessCommand();
     2c0:	8e d0       	rcall	.+284    	; 0x3de <V2Protocol_ProcessCommand>
     2c2:	85 b1       	in	r24, 0x05	; 5
     2c4:	8f 71       	andi	r24, 0x1F	; 31
     2c6:	80 68       	ori	r24, 0x80	; 128
     2c8:	85 b9       	out	0x05, r24	; 5
     2ca:	08 95       	ret

000002cc <EVENT_USB_Device_ConfigurationChanged>:
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     2cc:	82 e0       	ldi	r24, 0x02	; 2
     2ce:	60 e8       	ldi	r22, 0x80	; 128
     2d0:	42 e3       	ldi	r20, 0x32	; 50
     2d2:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <Endpoint_ConfigureEndpoint_Prv>
	ConfigSuccess &= Endpoint_ConfigureEndpoint(AVRISP_DATA_IN_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_IN,
	                                            AVRISP_DATA_EPSIZE, ENDPOINT_BANK_SINGLE);
	#endif

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     2d6:	80 fd       	sbrc	r24, 0
     2d8:	02 c0       	rjmp	.+4      	; 0x2de <EVENT_USB_Device_ConfigurationChanged+0x12>
     2da:	90 e4       	ldi	r25, 0x40	; 64
     2dc:	01 c0       	rjmp	.+2      	; 0x2e0 <EVENT_USB_Device_ConfigurationChanged+0x14>
     2de:	90 e8       	ldi	r25, 0x80	; 128
     2e0:	85 b1       	in	r24, 0x05	; 5
     2e2:	8f 71       	andi	r24, 0x1F	; 31
     2e4:	98 2b       	or	r25, r24
     2e6:	95 b9       	out	0x05, r25	; 5
}
     2e8:	08 95       	ret

000002ea <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     2ea:	84 b7       	in	r24, 0x34	; 52
     2ec:	87 7f       	andi	r24, 0xF7	; 247
     2ee:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     2f0:	88 e1       	ldi	r24, 0x18	; 24
     2f2:	0f b6       	in	r0, 0x3f	; 63
     2f4:	f8 94       	cli
     2f6:	80 93 60 00 	sts	0x0060, r24
     2fa:	10 92 60 00 	sts	0x0060, r1
     2fe:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	80 e8       	ldi	r24, 0x80	; 128
     304:	0f b6       	in	r0, 0x3f	; 63
     306:	f8 94       	cli
     308:	80 93 61 00 	sts	0x0061, r24
     30c:	90 93 61 00 	sts	0x0061, r25
     310:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRB  |=  LEDS_ALL_LEDS;
     312:	84 b1       	in	r24, 0x04	; 4
     314:	80 6e       	ori	r24, 0xE0	; 224
     316:	84 b9       	out	0x04, r24	; 4
				PORTB &= ~LEDS_ALL_LEDS;
     318:	85 b1       	in	r24, 0x05	; 5
     31a:	8f 71       	andi	r24, 0x1F	; 31
     31c:	85 b9       	out	0x05, r24	; 5
	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
     31e:	0c 94 11 10 	jmp	0x2022	; 0x2022 <USB_Init>

00000322 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     322:	e3 df       	rcall	.-58     	; 0x2ea <SetupHardware>
	V2Protocol_Init();
     324:	89 d1       	rcall	.+786    	; 0x638 <V2Protocol_Init>
				PORTB &= ~LedMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LedMask)
			{
				PORTB = ((PORTB & ~LEDS_ALL_LEDS) | LedMask);
     326:	85 b1       	in	r24, 0x05	; 5
     328:	8f 71       	andi	r24, 0x1F	; 31
     32a:	80 64       	ori	r24, 0x40	; 64
     32c:	85 b9       	out	0x05, r24	; 5

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     32e:	78 94       	sei
	for (;;)
	{
		#if (BOARD == BOARD_USBTINYMKII)
		/* On the USBTINY-MKII target, there is a secondary LED which indicates the current selected power
		   mode - either VBUS, or sourced from the VTARGET pin of the programming connectors */
		LEDs_ChangeLEDs(LEDMASK_VBUSPOWER, (PIND & (1 << 0)) ? 0 : LEDMASK_VBUSPOWER);
     330:	48 99       	sbic	0x09, 0	; 9
     332:	02 c0       	rjmp	.+4      	; 0x338 <main+0x16>
     334:	90 e2       	ldi	r25, 0x20	; 32
     336:	01 c0       	rjmp	.+2      	; 0x33a <main+0x18>
     338:	90 e0       	ldi	r25, 0x00	; 0
			}

			static inline void LEDs_ChangeLEDs(const uint8_t LedMask,
			                                   const uint8_t ActiveMask)
			{
				PORTB = ((PORTB & ~LedMask) | ActiveMask);
     33a:	85 b1       	in	r24, 0x05	; 5
     33c:	8f 7d       	andi	r24, 0xDF	; 223
     33e:	98 2b       	or	r25, r24
     340:	95 b9       	out	0x05, r25	; 5
		#endif

		AVRISP_Task();
     342:	af df       	rcall	.-162    	; 0x2a2 <AVRISP_Task>
		USB_USBTask();
     344:	0e 94 39 13 	call	0x2672	; 0x2672 <USB_USBTask>
     348:	f3 cf       	rjmp	.-26     	; 0x330 <main+0xe>

0000034a <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     34a:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     34c:	29 2f       	mov	r18, r25
     34e:	33 27       	eor	r19, r19
     350:	22 30       	cpi	r18, 0x02	; 2
     352:	49 f0       	breq	.+18     	; 0x366 <CALLBACK_USB_GetDescriptor+0x1c>
     354:	23 30       	cpi	r18, 0x03	; 3
     356:	61 f0       	breq	.+24     	; 0x370 <CALLBACK_USB_GetDescriptor+0x26>
     358:	21 30       	cpi	r18, 0x01	; 1
     35a:	21 f5       	brne	.+72     	; 0x3a4 <CALLBACK_USB_GetDescriptor+0x5a>
     35c:	e4 e7       	ldi	r30, 0x74	; 116
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	82 e1       	ldi	r24, 0x12	; 18
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	23 c0       	rjmp	.+70     	; 0x3ac <CALLBACK_USB_GetDescriptor+0x62>
     366:	e6 e8       	ldi	r30, 0x86	; 134
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	80 e2       	ldi	r24, 0x20	; 32
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	1e c0       	rjmp	.+60     	; 0x3ac <CALLBACK_USB_GetDescriptor+0x62>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     370:	81 30       	cpi	r24, 0x01	; 1
     372:	59 f0       	breq	.+22     	; 0x38a <CALLBACK_USB_GetDescriptor+0x40>
     374:	81 30       	cpi	r24, 0x01	; 1
     376:	28 f0       	brcs	.+10     	; 0x382 <CALLBACK_USB_GetDescriptor+0x38>
     378:	82 30       	cpi	r24, 0x02	; 2
     37a:	59 f0       	breq	.+22     	; 0x392 <CALLBACK_USB_GetDescriptor+0x48>
     37c:	83 30       	cpi	r24, 0x03	; 3
     37e:	91 f4       	brne	.+36     	; 0x3a4 <CALLBACK_USB_GetDescriptor+0x5a>
     380:	0c c0       	rjmp	.+24     	; 0x39a <CALLBACK_USB_GetDescriptor+0x50>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     382:	e6 ea       	ldi	r30, 0xA6	; 166
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	84 91       	lpm	r24, Z+
     388:	0b c0       	rjmp	.+22     	; 0x3a0 <CALLBACK_USB_GetDescriptor+0x56>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     38a:	ea ea       	ldi	r30, 0xAA	; 170
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	84 91       	lpm	r24, Z+
     390:	07 c0       	rjmp	.+14     	; 0x3a0 <CALLBACK_USB_GetDescriptor+0x56>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     392:	e4 ec       	ldi	r30, 0xC4	; 196
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	84 91       	lpm	r24, Z+
     398:	03 c0       	rjmp	.+6      	; 0x3a0 <CALLBACK_USB_GetDescriptor+0x56>
					break;
				case 0x03:
					Address = &SerialString;
					Size    = pgm_read_byte(&SerialString.Header.Size);
     39a:	e4 ef       	ldi	r30, 0xF4	; 244
     39c:	f0 e0       	ldi	r31, 0x00	; 0
     39e:	84 91       	lpm	r24, Z+
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	04 c0       	rjmp	.+8      	; 0x3ac <CALLBACK_USB_GetDescriptor+0x62>
     3a4:	e0 e0       	ldi	r30, 0x00	; 0
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	90 e0       	ldi	r25, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     3ac:	ed 93       	st	X+, r30
     3ae:	fc 93       	st	X, r31
	return Size;
}
     3b0:	08 95       	ret

000003b2 <__vector_13>:
bool MustLoadExtendedAddress;


/** ISR to manage timeouts whilst processing a V2Protocol command */
ISR(WDT_vect, ISR_BLOCK)
{
     3b2:	1f 92       	push	r1
     3b4:	0f 92       	push	r0
     3b6:	0f b6       	in	r0, 0x3f	; 63
     3b8:	0f 92       	push	r0
     3ba:	11 24       	eor	r1, r1
     3bc:	8f 93       	push	r24
	TimeoutExpired = true;
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	8a bd       	out	0x2a, r24	; 42
	wdt_disable();
     3c2:	88 e1       	ldi	r24, 0x18	; 24
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	f8 94       	cli
     3c8:	80 93 60 00 	sts	0x0060, r24
     3cc:	10 92 60 00 	sts	0x0060, r1
     3d0:	0f be       	out	0x3f, r0	; 63
}
     3d2:	8f 91       	pop	r24
     3d4:	0f 90       	pop	r0
     3d6:	0f be       	out	0x3f, r0	; 63
     3d8:	0f 90       	pop	r0
     3da:	1f 90       	pop	r1
     3dc:	18 95       	reti

000003de <V2Protocol_ProcessCommand>:
/** Master V2 Protocol packet handler, for received V2 Protocol packets from a connected host.
 *  This routine decodes the issued command and passes off the handling of the command to the
 *  appropriate function.
 */
void V2Protocol_ProcessCommand(void)
{
     3de:	ff 92       	push	r15
     3e0:	0f 93       	push	r16
     3e2:	1f 93       	push	r17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     3e4:	10 91 f1 00 	lds	r17, 0x00F1
	uint8_t V2Command = Endpoint_Read_8();

	/* Start the watchdog with timeout interrupt enabled to manage the timeout */
	TimeoutExpired = false;
     3e8:	1a bc       	out	0x2a, r1	; 42
	wdt_enable(WDTO_1S);
     3ea:	8e e0       	ldi	r24, 0x0E	; 14
     3ec:	28 e1       	ldi	r18, 0x18	; 24
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	f8 94       	cli
     3f4:	a8 95       	wdr
     3f6:	20 93 60 00 	sts	0x0060, r18
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	80 93 60 00 	sts	0x0060, r24
	WDTCSR |= (1 << WDIE);
     400:	80 91 60 00 	lds	r24, 0x0060
     404:	80 64       	ori	r24, 0x40	; 64
     406:	80 93 60 00 	sts	0x0060, r24

	switch (V2Command)
     40a:	14 31       	cpi	r17, 0x14	; 20
     40c:	09 f4       	brne	.+2      	; 0x410 <V2Protocol_ProcessCommand+0x32>
     40e:	cb c0       	rjmp	.+406    	; 0x5a6 <V2Protocol_ProcessCommand+0x1c8>
     410:	15 31       	cpi	r17, 0x15	; 21
     412:	10 f5       	brcc	.+68     	; 0x458 <V2Protocol_ProcessCommand+0x7a>
     414:	1a 30       	cpi	r17, 0x0A	; 10
     416:	09 f4       	brne	.+2      	; 0x41a <V2Protocol_ProcessCommand+0x3c>
     418:	ad c0       	rjmp	.+346    	; 0x574 <V2Protocol_ProcessCommand+0x196>
     41a:	1b 30       	cpi	r17, 0x0B	; 11
     41c:	68 f4       	brcc	.+26     	; 0x438 <V2Protocol_ProcessCommand+0x5a>
     41e:	14 30       	cpi	r17, 0x04	; 4
     420:	38 f4       	brcc	.+14     	; 0x430 <V2Protocol_ProcessCommand+0x52>
     422:	12 30       	cpi	r17, 0x02	; 2
     424:	08 f0       	brcs	.+2      	; 0x428 <V2Protocol_ProcessCommand+0x4a>
     426:	54 c0       	rjmp	.+168    	; 0x4d0 <V2Protocol_ProcessCommand+0xf2>
     428:	11 30       	cpi	r17, 0x01	; 1
     42a:	09 f0       	breq	.+2      	; 0x42e <V2Protocol_ProcessCommand+0x50>
     42c:	d4 c0       	rjmp	.+424    	; 0x5d6 <V2Protocol_ProcessCommand+0x1f8>
     42e:	33 c0       	rjmp	.+102    	; 0x496 <V2Protocol_ProcessCommand+0xb8>
     430:	16 30       	cpi	r17, 0x06	; 6
     432:	09 f0       	breq	.+2      	; 0x436 <V2Protocol_ProcessCommand+0x58>
     434:	d0 c0       	rjmp	.+416    	; 0x5d6 <V2Protocol_ProcessCommand+0x1f8>
     436:	78 c0       	rjmp	.+240    	; 0x528 <V2Protocol_ProcessCommand+0x14a>
     438:	11 31       	cpi	r17, 0x11	; 17
     43a:	09 f4       	brne	.+2      	; 0x43e <V2Protocol_ProcessCommand+0x60>
     43c:	af c0       	rjmp	.+350    	; 0x59c <V2Protocol_ProcessCommand+0x1be>
     43e:	12 31       	cpi	r17, 0x12	; 18
     440:	20 f4       	brcc	.+8      	; 0x44a <V2Protocol_ProcessCommand+0x6c>
     442:	10 31       	cpi	r17, 0x10	; 16
     444:	09 f0       	breq	.+2      	; 0x448 <V2Protocol_ProcessCommand+0x6a>
     446:	c7 c0       	rjmp	.+398    	; 0x5d6 <V2Protocol_ProcessCommand+0x1f8>
     448:	a7 c0       	rjmp	.+334    	; 0x598 <V2Protocol_ProcessCommand+0x1ba>
     44a:	12 31       	cpi	r17, 0x12	; 18
     44c:	09 f4       	brne	.+2      	; 0x450 <V2Protocol_ProcessCommand+0x72>
     44e:	ae c0       	rjmp	.+348    	; 0x5ac <V2Protocol_ProcessCommand+0x1ce>
     450:	13 31       	cpi	r17, 0x13	; 19
     452:	09 f0       	breq	.+2      	; 0x456 <V2Protocol_ProcessCommand+0x78>
     454:	c0 c0       	rjmp	.+384    	; 0x5d6 <V2Protocol_ProcessCommand+0x1f8>
     456:	a4 c0       	rjmp	.+328    	; 0x5a0 <V2Protocol_ProcessCommand+0x1c2>
     458:	19 31       	cpi	r17, 0x19	; 25
     45a:	09 f4       	brne	.+2      	; 0x45e <V2Protocol_ProcessCommand+0x80>
     45c:	ac c0       	rjmp	.+344    	; 0x5b6 <V2Protocol_ProcessCommand+0x1d8>
     45e:	1a 31       	cpi	r17, 0x1A	; 26
     460:	68 f4       	brcc	.+26     	; 0x47c <V2Protocol_ProcessCommand+0x9e>
     462:	16 31       	cpi	r17, 0x16	; 22
     464:	09 f4       	brne	.+2      	; 0x468 <V2Protocol_ProcessCommand+0x8a>
     466:	9f c0       	rjmp	.+318    	; 0x5a6 <V2Protocol_ProcessCommand+0x1c8>
     468:	16 31       	cpi	r17, 0x16	; 22
     46a:	08 f4       	brcc	.+2      	; 0x46e <V2Protocol_ProcessCommand+0x90>
     46c:	99 c0       	rjmp	.+306    	; 0x5a0 <V2Protocol_ProcessCommand+0x1c2>
     46e:	17 31       	cpi	r17, 0x17	; 23
     470:	09 f4       	brne	.+2      	; 0x474 <V2Protocol_ProcessCommand+0x96>
     472:	a1 c0       	rjmp	.+322    	; 0x5b6 <V2Protocol_ProcessCommand+0x1d8>
     474:	18 31       	cpi	r17, 0x18	; 24
     476:	09 f0       	breq	.+2      	; 0x47a <V2Protocol_ProcessCommand+0x9c>
     478:	ae c0       	rjmp	.+348    	; 0x5d6 <V2Protocol_ProcessCommand+0x1f8>
     47a:	9a c0       	rjmp	.+308    	; 0x5b0 <V2Protocol_ProcessCommand+0x1d2>
     47c:	1d 31       	cpi	r17, 0x1D	; 29
     47e:	09 f4       	brne	.+2      	; 0x482 <V2Protocol_ProcessCommand+0xa4>
     480:	9d c0       	rjmp	.+314    	; 0x5bc <V2Protocol_ProcessCommand+0x1de>
     482:	1d 31       	cpi	r17, 0x1D	; 29
     484:	08 f4       	brcc	.+2      	; 0x488 <V2Protocol_ProcessCommand+0xaa>
     486:	94 c0       	rjmp	.+296    	; 0x5b0 <V2Protocol_ProcessCommand+0x1d2>
     488:	10 35       	cpi	r17, 0x50	; 80
     48a:	09 f4       	brne	.+2      	; 0x48e <V2Protocol_ProcessCommand+0xb0>
     48c:	9b c0       	rjmp	.+310    	; 0x5c4 <V2Protocol_ProcessCommand+0x1e6>
     48e:	11 35       	cpi	r17, 0x51	; 81
     490:	09 f0       	breq	.+2      	; 0x494 <V2Protocol_ProcessCommand+0xb6>
     492:	a1 c0       	rjmp	.+322    	; 0x5d6 <V2Protocol_ProcessCommand+0x1f8>
     494:	95 c0       	rjmp	.+298    	; 0x5c0 <V2Protocol_ProcessCommand+0x1e2>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     496:	80 91 e8 00 	lds	r24, 0x00E8
     49a:	8b 77       	andi	r24, 0x7B	; 123
     49c:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     4a0:	82 e0       	ldi	r24, 0x02	; 2
     4a2:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     4a6:	80 91 ec 00 	lds	r24, 0x00EC
     4aa:	80 68       	ori	r24, 0x80	; 128
     4ac:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     4b0:	10 93 f1 00 	sts	0x00F1, r17
     4b4:	10 92 f1 00 	sts	0x00F1, r1
     4b8:	8a e0       	ldi	r24, 0x0A	; 10
     4ba:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	Endpoint_Write_8(CMD_SIGN_ON);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_Write_8(sizeof(PROGRAMMER_ID) - 1);
	Endpoint_Write_Stream_LE(PROGRAMMER_ID, (sizeof(PROGRAMMER_ID) - 1), NULL);
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	91 e0       	ldi	r25, 0x01	; 1
     4c2:	6a e0       	ldi	r22, 0x0A	; 10
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	40 e0       	ldi	r20, 0x00	; 0
     4c8:	50 e0       	ldi	r21, 0x00	; 0
     4ca:	0e 94 be 11 	call	0x237c	; 0x237c <Endpoint_Write_Stream_LE>
     4ce:	99 c0       	rjmp	.+306    	; 0x602 <V2Protocol_ProcessCommand+0x224>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     4d0:	00 91 f1 00 	lds	r16, 0x00F1
static void V2Protocol_GetSetParam(const uint8_t V2Command)
{
	uint8_t ParamID = Endpoint_Read_8();
	uint8_t ParamValue;

	if (V2Command == CMD_SET_PARAMETER)
     4d4:	12 30       	cpi	r17, 0x02	; 2
     4d6:	11 f0       	breq	.+4      	; 0x4dc <V2Protocol_ProcessCommand+0xfe>
     4d8:	ff 24       	eor	r15, r15
     4da:	02 c0       	rjmp	.+4      	; 0x4e0 <V2Protocol_ProcessCommand+0x102>
     4dc:	f0 90 f1 00 	lds	r15, 0x00F1
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     4e0:	80 91 e8 00 	lds	r24, 0x00E8
     4e4:	8b 77       	andi	r24, 0x7B	; 123
     4e6:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     4ea:	82 e0       	ldi	r24, 0x02	; 2
     4ec:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     4f0:	80 91 ec 00 	lds	r24, 0x00EC
     4f4:	80 68       	ori	r24, 0x80	; 128
     4f6:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     4fa:	10 93 f1 00 	sts	0x00F1, r17
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	Endpoint_Write_8(V2Command);

	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
     4fe:	80 2f       	mov	r24, r16
     500:	b6 d0       	rcall	.+364    	; 0x66e <V2Params_GetParameterPrivileges>

	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
     502:	12 30       	cpi	r17, 0x02	; 2
     504:	41 f4       	brne	.+16     	; 0x516 <V2Protocol_ProcessCommand+0x138>
     506:	81 ff       	sbrs	r24, 1
     508:	0d c0       	rjmp	.+26     	; 0x524 <V2Protocol_ProcessCommand+0x146>
     50a:	10 92 f1 00 	sts	0x00F1, r1
	{
		Endpoint_Write_8(STATUS_CMD_OK);
		V2Params_SetParameterValue(ParamID, ParamValue);
     50e:	80 2f       	mov	r24, r16
     510:	6f 2d       	mov	r22, r15
     512:	b5 d0       	rcall	.+362    	; 0x67e <V2Params_SetParameterValue>
     514:	76 c0       	rjmp	.+236    	; 0x602 <V2Protocol_ProcessCommand+0x224>
	}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
     516:	80 ff       	sbrs	r24, 0
     518:	05 c0       	rjmp	.+10     	; 0x524 <V2Protocol_ProcessCommand+0x146>
     51a:	10 92 f1 00 	sts	0x00F1, r1
	{
		Endpoint_Write_8(STATUS_CMD_OK);
		Endpoint_Write_8(V2Params_GetParameterValue(ParamID));
     51e:	80 2f       	mov	r24, r16
     520:	9e d0       	rcall	.+316    	; 0x65e <V2Params_GetParameterValue>
     522:	6d c0       	rjmp	.+218    	; 0x5fe <V2Protocol_ProcessCommand+0x220>
     524:	80 ec       	ldi	r24, 0xC0	; 192
     526:	6b c0       	rjmp	.+214    	; 0x5fe <V2Protocol_ProcessCommand+0x220>
 *  global storage variable for later use, and issuing LOAD EXTENDED ADDRESS commands
 *  to the attached device as required.
 */
static void V2Protocol_LoadAddress(void)
{
	Endpoint_Read_Stream_BE(&CurrentAddress, sizeof(CurrentAddress), NULL);
     528:	86 e4       	ldi	r24, 0x46	; 70
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	64 e0       	ldi	r22, 0x04	; 4
     52e:	70 e0       	ldi	r23, 0x00	; 0
     530:	40 e0       	ldi	r20, 0x00	; 0
     532:	50 e0       	ldi	r21, 0x00	; 0
     534:	0e 94 1f 11 	call	0x223e	; 0x223e <Endpoint_Read_Stream_BE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     538:	80 91 e8 00 	lds	r24, 0x00E8
     53c:	8b 77       	andi	r24, 0x7B	; 123
     53e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     542:	82 e0       	ldi	r24, 0x02	; 2
     544:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     548:	80 91 ec 00 	lds	r24, 0x00EC
     54c:	80 68       	ori	r24, 0x80	; 128
     54e:	80 93 ec 00 	sts	0x00EC, r24

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (CurrentAddress & (1UL << 31))
     552:	80 91 46 01 	lds	r24, 0x0146
     556:	90 91 47 01 	lds	r25, 0x0147
     55a:	a0 91 48 01 	lds	r26, 0x0148
     55e:	b0 91 49 01 	lds	r27, 0x0149
     562:	b7 ff       	sbrs	r27, 7
     564:	03 c0       	rjmp	.+6      	; 0x56c <V2Protocol_ProcessCommand+0x18e>
	  MustLoadExtendedAddress = true;
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	80 93 45 01 	sts	0x0145, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     56c:	86 e0       	ldi	r24, 0x06	; 6
     56e:	80 93 f1 00 	sts	0x00F1, r24
     572:	0f c0       	rjmp	.+30     	; 0x592 <V2Protocol_ProcessCommand+0x1b4>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     574:	80 91 e8 00 	lds	r24, 0x00E8
     578:	8b 77       	andi	r24, 0x7B	; 123
     57a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     57e:	82 e0       	ldi	r24, 0x02	; 2
     580:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     584:	80 91 ec 00 	lds	r24, 0x00EC
     588:	80 68       	ori	r24, 0x80	; 128
     58a:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     58e:	10 93 f1 00 	sts	0x00F1, r17
     592:	10 92 f1 00 	sts	0x00F1, r1
     596:	35 c0       	rjmp	.+106    	; 0x602 <V2Protocol_ProcessCommand+0x224>
		case CMD_RESET_PROTECTION:
			V2Protocol_ResetProtection();
			break;
#if defined(ENABLE_ISP_PROTOCOL)
		case CMD_ENTER_PROGMODE_ISP:
			ISPProtocol_EnterISPMode();
     598:	71 d4       	rcall	.+2274   	; 0xe7c <ISPProtocol_EnterISPMode>
     59a:	38 c0       	rjmp	.+112    	; 0x60c <V2Protocol_ProcessCommand+0x22e>
			break;
		case CMD_LEAVE_PROGMODE_ISP:
			ISPProtocol_LeaveISPMode();
     59c:	3b d4       	rcall	.+2166   	; 0xe14 <ISPProtocol_LeaveISPMode>
     59e:	36 c0       	rjmp	.+108    	; 0x60c <V2Protocol_ProcessCommand+0x22e>
			break;
		case CMD_PROGRAM_FLASH_ISP:
		case CMD_PROGRAM_EEPROM_ISP:
			ISPProtocol_ProgramMemory(V2Command);
     5a0:	81 2f       	mov	r24, r17
     5a2:	f6 d2       	rcall	.+1516   	; 0xb90 <ISPProtocol_ProgramMemory>
     5a4:	33 c0       	rjmp	.+102    	; 0x60c <V2Protocol_ProcessCommand+0x22e>
			break;
		case CMD_READ_FLASH_ISP:
		case CMD_READ_EEPROM_ISP:
			ISPProtocol_ReadMemory(V2Command);
     5a6:	81 2f       	mov	r24, r17
     5a8:	42 d2       	rcall	.+1156   	; 0xa2e <ISPProtocol_ReadMemory>
     5aa:	30 c0       	rjmp	.+96     	; 0x60c <V2Protocol_ProcessCommand+0x22e>
			break;
		case CMD_CHIP_ERASE_ISP:
			ISPProtocol_ChipErase();
     5ac:	f1 d1       	rcall	.+994    	; 0x990 <ISPProtocol_ChipErase>
     5ae:	2e c0       	rjmp	.+92     	; 0x60c <V2Protocol_ProcessCommand+0x22e>
			break;
		case CMD_READ_FUSE_ISP:
		case CMD_READ_LOCK_ISP:
		case CMD_READ_SIGNATURE_ISP:
		case CMD_READ_OSCCAL_ISP:
			ISPProtocol_ReadFuseLockSigOSCCAL(V2Command);
     5b0:	81 2f       	mov	r24, r17
     5b2:	e6 d0       	rcall	.+460    	; 0x780 <ISPProtocol_ReadFuseLockSigOSCCAL>
     5b4:	2b c0       	rjmp	.+86     	; 0x60c <V2Protocol_ProcessCommand+0x22e>
			break;
		case CMD_PROGRAM_FUSE_ISP:
		case CMD_PROGRAM_LOCK_ISP:
			ISPProtocol_WriteFuseLock(V2Command);
     5b6:	81 2f       	mov	r24, r17
     5b8:	9d d0       	rcall	.+314    	; 0x6f4 <ISPProtocol_WriteFuseLock>
     5ba:	28 c0       	rjmp	.+80     	; 0x60c <V2Protocol_ProcessCommand+0x22e>
			break;
		case CMD_SPI_MULTI:
			ISPProtocol_SPIMulti();
     5bc:	4c d1       	rcall	.+664    	; 0x856 <ISPProtocol_SPIMulti>
     5be:	26 c0       	rjmp	.+76     	; 0x60c <V2Protocol_ProcessCommand+0x22e>
			break;
#endif
#if defined(ENABLE_XPROG_PROTOCOL)
		case CMD_XPROG_SETMODE:
			XPROGProtocol_SetMode();
     5c0:	33 d6       	rcall	.+3174   	; 0x1228 <XPROGProtocol_SetMode>
     5c2:	24 c0       	rjmp	.+72     	; 0x60c <V2Protocol_ProcessCommand+0x22e>
			break;
		case CMD_XPROG:
			XPROGProtocol_Command();
     5c4:	80 d7       	rcall	.+3840   	; 0x14c6 <XPROGProtocol_Command>
     5c6:	22 c0       	rjmp	.+68     	; 0x60c <V2Protocol_ProcessCommand+0x22e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     5c8:	80 91 e8 00 	lds	r24, 0x00E8
     5cc:	8b 77       	andi	r24, 0x7B	; 123
     5ce:	80 93 e8 00 	sts	0x00E8, r24
{
	/* Discard all incoming data */
	while (Endpoint_BytesInEndpoint() == AVRISP_DATA_EPSIZE)
	{
		Endpoint_ClearOUT();
		Endpoint_WaitUntilReady();
     5d2:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <Endpoint_WaitUntilReady>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     5d6:	80 91 f2 00 	lds	r24, 0x00F2
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
static void V2Protocol_UnknownCommand(const uint8_t V2Command)
{
	/* Discard all incoming data */
	while (Endpoint_BytesInEndpoint() == AVRISP_DATA_EPSIZE)
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	a9 f3       	breq	.-22     	; 0x5c8 <V2Protocol_ProcessCommand+0x1ea>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     5de:	80 91 e8 00 	lds	r24, 0x00E8
     5e2:	8b 77       	andi	r24, 0x7B	; 123
     5e4:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     5e8:	82 e0       	ldi	r24, 0x02	; 2
     5ea:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     5ee:	80 91 ec 00 	lds	r24, 0x00EC
     5f2:	80 68       	ori	r24, 0x80	; 128
     5f4:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     5f8:	10 93 f1 00 	sts	0x00F1, r17
     5fc:	89 ec       	ldi	r24, 0xC9	; 201
     5fe:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     602:	80 91 e8 00 	lds	r24, 0x00E8
     606:	8e 77       	andi	r24, 0x7E	; 126
     608:	80 93 e8 00 	sts	0x00E8, r24
			V2Protocol_UnknownCommand(V2Command);
			break;
	}

	/* Disable the timeout management watchdog timer */
	wdt_disable();
     60c:	88 e1       	ldi	r24, 0x18	; 24
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	f8 94       	cli
     612:	80 93 60 00 	sts	0x0060, r24
     616:	10 92 60 00 	sts	0x0060, r1
     61a:	0f be       	out	0x3f, r0	; 63

	Endpoint_WaitUntilReady();
     61c:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <Endpoint_WaitUntilReady>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     620:	82 e0       	ldi	r24, 0x02	; 2
     622:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     626:	80 91 ec 00 	lds	r24, 0x00EC
     62a:	8f 77       	andi	r24, 0x7F	; 127
     62c:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_OUT_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_OUT);
}
     630:	1f 91       	pop	r17
     632:	0f 91       	pop	r16
     634:	ff 90       	pop	r15
     636:	08 95       	ret

00000638 <V2Protocol_Init>:
	ADC_Init(ADC_FREE_RUNNING | ADC_PRESCALE_128);
	ADC_SetupChannel(VTARGET_ADC_CHANNEL);
	ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | VTARGET_ADC_CHANNEL_MASK);
	#endif

	V2Params_LoadNonVolatileParamValues();
     638:	35 d0       	rcall	.+106    	; 0x6a4 <V2Params_LoadNonVolatileParamValues>
	
	#if defined(ENABLE_ISP_PROTOCOL)
	ISPTarget_ConfigureRescueClock();
	#endif
}
     63a:	e9 c4       	rjmp	.+2514   	; 0x100e <ISPTarget_ConfigureRescueClock>

0000063c <V2Params_UpdateParamValues>:
{
	#if (defined(ADC) && !defined(NO_VTARGET_DETECT))
	/* Update VTARGET parameter with the latest ADC conversion of VTARGET on supported AVR models */
	V2Params_GetParamFromTable(PARAM_VTARGET)->ParamValue = (((uint16_t)(VTARGET_REF_VOLTS * 10 * VTARGET_SCALE_FACTOR) * ADC_GetResult()) / 1024);
	#endif
}
     63c:	08 95       	ret

0000063e <V2Params_GetParamFromTable>:
 *  \param[in] ParamID  Parameter ID to find in the table
 *
 *  \return Pointer to the associated parameter information from the parameter table if found, NULL otherwise
 */
static ParameterItem_t* V2Params_GetParamFromTable(const uint8_t ParamID)
{
     63e:	98 2f       	mov	r25, r24
     640:	eb e0       	ldi	r30, 0x0B	; 11
     642:	f1 e0       	ldi	r31, 0x01	; 1
	ParameterItem_t* CurrTableItem = ParameterTable;

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
	{
		if (ParamID == CurrTableItem->ParamID)
     644:	80 81       	ld	r24, Z
     646:	98 17       	cp	r25, r24
     648:	41 f0       	breq	.+16     	; 0x65a <V2Params_GetParamFromTable+0x1c>
static ParameterItem_t* V2Params_GetParamFromTable(const uint8_t ParamID)
{
	ParameterItem_t* CurrTableItem = ParameterTable;

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	e6 32       	cpi	r30, 0x26	; 38
     64e:	f8 07       	cpc	r31, r24
     650:	11 f0       	breq	.+4      	; 0x656 <V2Params_GetParamFromTable+0x18>
	{
		if (ParamID == CurrTableItem->ParamID)
		  return CurrTableItem;

		CurrTableItem++;
     652:	33 96       	adiw	r30, 0x03	; 3
     654:	f7 cf       	rjmp	.-18     	; 0x644 <V2Params_GetParamFromTable+0x6>
     656:	e0 e0       	ldi	r30, 0x00	; 0
     658:	f0 e0       	ldi	r31, 0x00	; 0
	}

	return NULL;
}
     65a:	cf 01       	movw	r24, r30
     65c:	08 95       	ret

0000065e <V2Params_GetParameterValue>:
 *
 *  \return Current value of the parameter in the table, or 0 if not found
 */
uint8_t V2Params_GetParameterValue(const uint8_t ParamID)
{
	ParameterItem_t* ParamInfo = V2Params_GetParamFromTable(ParamID);
     65e:	ef df       	rcall	.-34     	; 0x63e <V2Params_GetParamFromTable>
     660:	fc 01       	movw	r30, r24

	if (ParamInfo == NULL)
     662:	00 97       	sbiw	r24, 0x00	; 0
     664:	11 f4       	brne	.+4      	; 0x66a <V2Params_GetParameterValue+0xc>
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	08 95       	ret
	  return 0;

	return ParamInfo->ParamValue;
     66a:	82 81       	ldd	r24, Z+2	; 0x02
}
     66c:	08 95       	ret

0000066e <V2Params_GetParameterPrivileges>:
 *
 *  \return Privileges for the requested parameter, as a mask of PARAM_PRIV_* masks
 */
uint8_t V2Params_GetParameterPrivileges(const uint8_t ParamID)
{
	ParameterItem_t* ParamInfo = V2Params_GetParamFromTable(ParamID);
     66e:	e7 df       	rcall	.-50     	; 0x63e <V2Params_GetParamFromTable>
     670:	fc 01       	movw	r30, r24

	if (ParamInfo == NULL)
     672:	00 97       	sbiw	r24, 0x00	; 0
     674:	11 f4       	brne	.+4      	; 0x67a <V2Params_GetParameterPrivileges+0xc>
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	08 95       	ret
	  return 0;

	return ParamInfo->ParamPrivileges;
     67a:	81 81       	ldd	r24, Z+1	; 0x01
}
     67c:	08 95       	ret

0000067e <V2Params_SetParameterValue>:
 *
 *  \return Pointer to the associated parameter information from the parameter table if found, NULL otherwise
 */
void V2Params_SetParameterValue(const uint8_t ParamID,
                                const uint8_t Value)
{
     67e:	0f 93       	push	r16
     680:	1f 93       	push	r17
     682:	18 2f       	mov	r17, r24
     684:	06 2f       	mov	r16, r22
	ParameterItem_t* ParamInfo = V2Params_GetParamFromTable(ParamID);
     686:	db df       	rcall	.-74     	; 0x63e <V2Params_GetParamFromTable>
     688:	fc 01       	movw	r30, r24

	if (ParamInfo == NULL)
     68a:	00 97       	sbiw	r24, 0x00	; 0
     68c:	41 f0       	breq	.+16     	; 0x69e <V2Params_SetParameterValue+0x20>
	  return;

	ParamInfo->ParamValue = Value;
     68e:	02 83       	std	Z+2, r16	; 0x02

	/* The target RESET line polarity is a non-volatile parameter, save to EEPROM when changed */
	if (ParamID == PARAM_RESET_POLARITY)
     690:	1e 39       	cpi	r17, 0x9E	; 158
     692:	29 f4       	brne	.+10     	; 0x69e <V2Params_SetParameterValue+0x20>
	  eeprom_update_byte(&EEPROM_Rest_Polarity, Value);
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	60 2f       	mov	r22, r16
     69a:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__eeupd_byte_usb162>
}
     69e:	1f 91       	pop	r17
     6a0:	0f 91       	pop	r16
     6a2:	08 95       	ret

000006a4 <V2Params_LoadNonVolatileParamValues>:
	};


/** Loads saved non-volatile parameter values from the EEPROM into the parameter table, as needed. */
void V2Params_LoadNonVolatileParamValues(void)
{
     6a4:	0f 93       	push	r16
     6a6:	1f 93       	push	r17
	/* Target RESET line polarity is a non-volatile value, retrieve current parameter value from EEPROM */
	V2Params_GetParamFromTable(PARAM_RESET_POLARITY)->ParamValue = eeprom_read_byte(&EEPROM_Rest_Polarity);
     6a8:	8e e9       	ldi	r24, 0x9E	; 158
     6aa:	c9 df       	rcall	.-110    	; 0x63e <V2Params_GetParamFromTable>
     6ac:	8c 01       	movw	r16, r24
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	0e 94 4b 13 	call	0x2696	; 0x2696 <__eerd_byte_usb162>
     6b6:	f8 01       	movw	r30, r16
     6b8:	82 83       	std	Z+2, r24	; 0x02
}
     6ba:	1f 91       	pop	r17
     6bc:	0f 91       	pop	r16
     6be:	08 95       	ret

000006c0 <ISPProtocol_DelayMS>:
/** Blocking delay for a given number of milliseconds.
 *
 *  \param[in] DelayMS  Number of milliseconds to delay for
 */
void ISPProtocol_DelayMS(uint8_t DelayMS)
{
     6c0:	28 2f       	mov	r18, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6c2:	40 ea       	ldi	r20, 0xA0	; 160
     6c4:	5f e0       	ldi	r21, 0x0F	; 15
     6c6:	03 c0       	rjmp	.+6      	; 0x6ce <ISPProtocol_DelayMS+0xe>
     6c8:	ca 01       	movw	r24, r20
     6ca:	01 97       	sbiw	r24, 0x01	; 1
     6cc:	f1 f7       	brne	.-4      	; 0x6ca <ISPProtocol_DelayMS+0xa>
	while (DelayMS-- && !(TimeoutExpired))
     6ce:	22 23       	and	r18, r18
     6d0:	21 f0       	breq	.+8      	; 0x6da <ISPProtocol_DelayMS+0x1a>
     6d2:	8a b5       	in	r24, 0x2a	; 42
     6d4:	21 50       	subi	r18, 0x01	; 1
     6d6:	88 23       	and	r24, r24
     6d8:	b9 f3       	breq	.-18     	; 0x6c8 <ISPProtocol_DelayMS+0x8>
     6da:	08 95       	ret

000006dc <ISPTarget_SendByte>:
		 *  software routines depending on the selected ISP speed.
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
     6dc:	98 2f       	mov	r25, r24
			if (HardwareSPIMode)
     6de:	80 91 29 01 	lds	r24, 0x0129
     6e2:	88 23       	and	r24, r24
     6e4:	29 f0       	breq	.+10     	; 0x6f0 <ISPTarget_SendByte+0x14>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6e6:	9e bd       	out	0x2e, r25	; 46
				while (!(SPSR & (1 << SPIF)));
     6e8:	0d b4       	in	r0, 0x2d	; 45
     6ea:	07 fe       	sbrs	r0, 7
     6ec:	fd cf       	rjmp	.-6      	; 0x6e8 <ISPTarget_SendByte+0xc>
     6ee:	08 95       	ret
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     6f0:	89 2f       	mov	r24, r25
     6f2:	cd c4       	rjmp	.+2458   	; 0x108e <ISPTarget_TransferSoftSPIByte>

000006f4 <ISPProtocol_WriteFuseLock>:
 *  byte to the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_WriteFuseLock(uint8_t V2Command)
{
     6f4:	df 92       	push	r13
     6f6:	ef 92       	push	r14
     6f8:	ff 92       	push	r15
     6fa:	0f 93       	push	r16
     6fc:	1f 93       	push	r17
     6fe:	df 93       	push	r29
     700:	cf 93       	push	r28
     702:	00 d0       	rcall	.+0      	; 0x704 <ISPProtocol_WriteFuseLock+0x10>
     704:	00 d0       	rcall	.+0      	; 0x706 <ISPProtocol_WriteFuseLock+0x12>
     706:	cd b7       	in	r28, 0x3d	; 61
     708:	de b7       	in	r29, 0x3e	; 62
     70a:	d8 2e       	mov	r13, r24
	struct
	{
		uint8_t WriteCommandBytes[4];
	} Write_FuseLockSig_Params;

	Endpoint_Read_Stream_LE(&Write_FuseLockSig_Params, sizeof(Write_FuseLockSig_Params), NULL);
     70c:	8e 01       	movw	r16, r28
     70e:	0f 5f       	subi	r16, 0xFF	; 255
     710:	1f 4f       	sbci	r17, 0xFF	; 255
     712:	c8 01       	movw	r24, r16
     714:	64 e0       	ldi	r22, 0x04	; 4
     716:	70 e0       	ldi	r23, 0x00	; 0
     718:	40 e0       	ldi	r20, 0x00	; 0
     71a:	50 e0       	ldi	r21, 0x00	; 0
     71c:	0e 94 71 11 	call	0x22e2	; 0x22e2 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     720:	80 91 e8 00 	lds	r24, 0x00E8
     724:	8b 77       	andi	r24, 0x7B	; 123
     726:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     72a:	82 e0       	ldi	r24, 0x02	; 2
     72c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     730:	80 91 ec 00 	lds	r24, 0x00EC
     734:	80 68       	ori	r24, 0x80	; 128
     736:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	/* Send the Fuse or Lock byte program commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Write_FuseLockSig_Params.WriteCommandBytes); SByte++)
     73a:	85 e0       	ldi	r24, 0x05	; 5
     73c:	e8 2e       	mov	r14, r24
     73e:	f1 2c       	mov	r15, r1
     740:	ec 0e       	add	r14, r28
     742:	fd 1e       	adc	r15, r29
	  ISPTarget_SendByte(Write_FuseLockSig_Params.WriteCommandBytes[SByte]);
     744:	f8 01       	movw	r30, r16
     746:	81 91       	ld	r24, Z+
     748:	8f 01       	movw	r16, r30
     74a:	c8 df       	rcall	.-112    	; 0x6dc <ISPTarget_SendByte>
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	/* Send the Fuse or Lock byte program commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Write_FuseLockSig_Params.WriteCommandBytes); SByte++)
     74c:	0e 15       	cp	r16, r14
     74e:	1f 05       	cpc	r17, r15
     750:	c9 f7       	brne	.-14     	; 0x744 <ISPProtocol_WriteFuseLock+0x50>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     752:	d0 92 f1 00 	sts	0x00F1, r13
     756:	10 92 f1 00 	sts	0x00F1, r1
     75a:	10 92 f1 00 	sts	0x00F1, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     75e:	80 91 e8 00 	lds	r24, 0x00E8
     762:	8e 77       	andi	r24, 0x7E	; 126
     764:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_ClearIN();
}
     768:	0f 90       	pop	r0
     76a:	0f 90       	pop	r0
     76c:	0f 90       	pop	r0
     76e:	0f 90       	pop	r0
     770:	cf 91       	pop	r28
     772:	df 91       	pop	r29
     774:	1f 91       	pop	r17
     776:	0f 91       	pop	r16
     778:	ff 90       	pop	r15
     77a:	ef 90       	pop	r14
     77c:	df 90       	pop	r13
     77e:	08 95       	ret

00000780 <ISPProtocol_ReadFuseLockSigOSCCAL>:
 *  reading the requested configuration byte from the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadFuseLockSigOSCCAL(uint8_t V2Command)
{
     780:	bf 92       	push	r11
     782:	cf 92       	push	r12
     784:	df 92       	push	r13
     786:	ef 92       	push	r14
     788:	ff 92       	push	r15
     78a:	0f 93       	push	r16
     78c:	1f 93       	push	r17
     78e:	df 93       	push	r29
     790:	cf 93       	push	r28
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	de b7       	in	r29, 0x3e	; 62
     796:	29 97       	sbiw	r28, 0x09	; 9
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	f8 94       	cli
     79c:	de bf       	out	0x3e, r29	; 62
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	cd bf       	out	0x3d, r28	; 61
     7a2:	b8 2e       	mov	r11, r24
	{
		uint8_t RetByte;
		uint8_t ReadCommandBytes[4];
	} Read_FuseLockSigOSCCAL_Params;

	Endpoint_Read_Stream_LE(&Read_FuseLockSigOSCCAL_Params, sizeof(Read_FuseLockSigOSCCAL_Params), NULL);
     7a4:	ce 01       	movw	r24, r28
     7a6:	05 96       	adiw	r24, 0x05	; 5
     7a8:	65 e0       	ldi	r22, 0x05	; 5
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	40 e0       	ldi	r20, 0x00	; 0
     7ae:	50 e0       	ldi	r21, 0x00	; 0
     7b0:	0e 94 71 11 	call	0x22e2	; 0x22e2 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     7b4:	80 91 e8 00 	lds	r24, 0x00E8
     7b8:	8b 77       	andi	r24, 0x7B	; 123
     7ba:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     7be:	82 e0       	ldi	r24, 0x02	; 2
     7c0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     7c4:	80 91 ec 00 	lds	r24, 0x00EC
     7c8:	80 68       	ori	r24, 0x80	; 128
     7ca:	80 93 ec 00 	sts	0x00EC, r24
     7ce:	8e 01       	movw	r16, r28
     7d0:	0a 5f       	subi	r16, 0xFA	; 250
     7d2:	1f 4f       	sbci	r17, 0xFF	; 255
     7d4:	7e 01       	movw	r14, r28
     7d6:	08 94       	sec
     7d8:	e1 1c       	adc	r14, r1
     7da:	f1 1c       	adc	r15, r1
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseBytes[4];

	/* Send the Fuse or Lock byte read commands as given by the host to the device, store response */
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
     7dc:	9a e0       	ldi	r25, 0x0A	; 10
     7de:	c9 2e       	mov	r12, r25
     7e0:	d1 2c       	mov	r13, r1
     7e2:	cc 0e       	add	r12, r28
     7e4:	dd 1e       	adc	r13, r29
	  ResponseBytes[RByte] = ISPTarget_TransferByte(Read_FuseLockSigOSCCAL_Params.ReadCommandBytes[RByte]);
     7e6:	f8 01       	movw	r30, r16
     7e8:	90 81       	ld	r25, Z
		 *
		 *  \return Received byte of data from the attached target
		 */
		static inline uint8_t ISPTarget_TransferByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     7ea:	80 91 29 01 	lds	r24, 0x0129
     7ee:	88 23       	and	r24, r24
     7f0:	31 f0       	breq	.+12     	; 0x7fe <ISPProtocol_ReadFuseLockSigOSCCAL+0x7e>
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7f2:	9e bd       	out	0x2e, r25	; 46
				while (!(SPSR & (1 << SPIF)));
     7f4:	0d b4       	in	r0, 0x2d	; 45
     7f6:	07 fe       	sbrs	r0, 7
     7f8:	fd cf       	rjmp	.-6      	; 0x7f4 <ISPProtocol_ReadFuseLockSigOSCCAL+0x74>
				return SPDR;
     7fa:	8e b5       	in	r24, 0x2e	; 46
     7fc:	02 c0       	rjmp	.+4      	; 0x802 <ISPProtocol_ReadFuseLockSigOSCCAL+0x82>
			  return SPI_TransferByte(Byte);
			else
			  return ISPTarget_TransferSoftSPIByte(Byte);
     7fe:	89 2f       	mov	r24, r25
     800:	46 d4       	rcall	.+2188   	; 0x108e <ISPTarget_TransferSoftSPIByte>
     802:	f7 01       	movw	r30, r14
     804:	81 93       	st	Z+, r24
     806:	7f 01       	movw	r14, r30
     808:	0f 5f       	subi	r16, 0xFF	; 255
     80a:	1f 4f       	sbci	r17, 0xFF	; 255
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseBytes[4];

	/* Send the Fuse or Lock byte read commands as given by the host to the device, store response */
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
     80c:	0c 15       	cp	r16, r12
     80e:	1d 05       	cpc	r17, r13
     810:	51 f7       	brne	.-44     	; 0x7e6 <ISPProtocol_ReadFuseLockSigOSCCAL+0x66>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     812:	b0 92 f1 00 	sts	0x00F1, r11
     816:	10 92 f1 00 	sts	0x00F1, r1
	  ResponseBytes[RByte] = ISPTarget_TransferByte(Read_FuseLockSigOSCCAL_Params.ReadCommandBytes[RByte]);

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_Write_8(ResponseBytes[Read_FuseLockSigOSCCAL_Params.RetByte - 1]);
     81a:	8d 81       	ldd	r24, Y+5	; 0x05
     81c:	fe 01       	movw	r30, r28
     81e:	e8 0f       	add	r30, r24
     820:	f1 1d       	adc	r31, r1
     822:	80 81       	ld	r24, Z
     824:	80 93 f1 00 	sts	0x00F1, r24
     828:	10 92 f1 00 	sts	0x00F1, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     82c:	80 91 e8 00 	lds	r24, 0x00E8
     830:	8e 77       	andi	r24, 0x7E	; 126
     832:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_ClearIN();
}
     836:	29 96       	adiw	r28, 0x09	; 9
     838:	0f b6       	in	r0, 0x3f	; 63
     83a:	f8 94       	cli
     83c:	de bf       	out	0x3e, r29	; 62
     83e:	0f be       	out	0x3f, r0	; 63
     840:	cd bf       	out	0x3d, r28	; 61
     842:	cf 91       	pop	r28
     844:	df 91       	pop	r29
     846:	1f 91       	pop	r17
     848:	0f 91       	pop	r16
     84a:	ff 90       	pop	r15
     84c:	ef 90       	pop	r14
     84e:	df 90       	pop	r13
     850:	cf 90       	pop	r12
     852:	bf 90       	pop	r11
     854:	08 95       	ret

00000856 <ISPProtocol_SPIMulti>:
	Endpoint_ClearIN();
}

/** Handler for the CMD_SPI_MULTI command, writing and reading arbitrary SPI data to and from the attached device. */
void ISPProtocol_SPIMulti(void)
{
     856:	ef 92       	push	r14
     858:	ff 92       	push	r15
     85a:	0f 93       	push	r16
     85c:	1f 93       	push	r17
     85e:	df 93       	push	r29
     860:	cf 93       	push	r28
     862:	cd b7       	in	r28, 0x3d	; 61
     864:	de b7       	in	r29, 0x3e	; 62
     866:	c2 50       	subi	r28, 0x02	; 2
     868:	d1 40       	sbci	r29, 0x01	; 1
     86a:	0f b6       	in	r0, 0x3f	; 63
     86c:	f8 94       	cli
     86e:	de bf       	out	0x3e, r29	; 62
     870:	0f be       	out	0x3f, r0	; 63
     872:	cd bf       	out	0x3d, r28	; 61
		uint8_t RxBytes;
		uint8_t RxStartAddr;
		uint8_t TxData[255];
	} SPI_Multi_Params;

	Endpoint_Read_Stream_LE(&SPI_Multi_Params, (sizeof(SPI_Multi_Params) - sizeof(SPI_Multi_Params.TxData)), NULL);
     874:	ce 01       	movw	r24, r28
     876:	01 96       	adiw	r24, 0x01	; 1
     878:	63 e0       	ldi	r22, 0x03	; 3
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	40 e0       	ldi	r20, 0x00	; 0
     87e:	50 e0       	ldi	r21, 0x00	; 0
     880:	0e 94 71 11 	call	0x22e2	; 0x22e2 <Endpoint_Read_Stream_LE>
	Endpoint_Read_Stream_LE(&SPI_Multi_Params.TxData, SPI_Multi_Params.TxBytes, NULL);
     884:	34 e0       	ldi	r19, 0x04	; 4
     886:	e3 2e       	mov	r14, r19
     888:	f1 2c       	mov	r15, r1
     88a:	ec 0e       	add	r14, r28
     88c:	fd 1e       	adc	r15, r29
     88e:	69 81       	ldd	r22, Y+1	; 0x01
     890:	70 e0       	ldi	r23, 0x00	; 0
     892:	c7 01       	movw	r24, r14
     894:	40 e0       	ldi	r20, 0x00	; 0
     896:	50 e0       	ldi	r21, 0x00	; 0
     898:	0e 94 71 11 	call	0x22e2	; 0x22e2 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     89c:	80 91 e8 00 	lds	r24, 0x00E8
     8a0:	8b 77       	andi	r24, 0x7B	; 123
     8a2:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     8a6:	82 e0       	ldi	r24, 0x02	; 2
     8a8:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     8ac:	80 91 ec 00 	lds	r24, 0x00EC
     8b0:	80 68       	ori	r24, 0x80	; 128
     8b2:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     8b6:	8d e1       	ldi	r24, 0x1D	; 29
     8b8:	80 93 f1 00 	sts	0x00F1, r24
     8bc:	10 92 f1 00 	sts	0x00F1, r1
     8c0:	00 e0       	ldi	r16, 0x00	; 0
     8c2:	0b c0       	rjmp	.+22     	; 0x8da <ISPProtocol_SPIMulti+0x84>
	uint8_t CurrRxPos = 0;

	/* Write out bytes to transmit until the start of the bytes to receive is met */
	while (CurrTxPos < SPI_Multi_Params.RxStartAddr)
	{
		if (CurrTxPos < SPI_Multi_Params.TxBytes)
     8c4:	89 81       	ldd	r24, Y+1	; 0x01
     8c6:	08 17       	cp	r16, r24
     8c8:	28 f4       	brcc	.+10     	; 0x8d4 <ISPProtocol_SPIMulti+0x7e>
		  ISPTarget_SendByte(SPI_Multi_Params.TxData[CurrTxPos]);
     8ca:	f7 01       	movw	r30, r14
     8cc:	e0 0f       	add	r30, r16
     8ce:	f1 1d       	adc	r31, r1
     8d0:	80 81       	ld	r24, Z
     8d2:	01 c0       	rjmp	.+2      	; 0x8d6 <ISPProtocol_SPIMulti+0x80>
		else
		  ISPTarget_SendByte(0);
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	02 df       	rcall	.-508    	; 0x6dc <ISPTarget_SendByte>

		CurrTxPos++;
     8d8:	0f 5f       	subi	r16, 0xFF	; 255

	uint8_t CurrTxPos = 0;
	uint8_t CurrRxPos = 0;

	/* Write out bytes to transmit until the start of the bytes to receive is met */
	while (CurrTxPos < SPI_Multi_Params.RxStartAddr)
     8da:	8b 81       	ldd	r24, Y+3	; 0x03
     8dc:	08 17       	cp	r16, r24
     8de:	90 f3       	brcs	.-28     	; 0x8c4 <ISPProtocol_SPIMulti+0x6e>
     8e0:	10 e0       	ldi	r17, 0x00	; 0

	/* Transmit remaining bytes with padding as needed, read in response bytes */
	while (CurrRxPos < SPI_Multi_Params.RxBytes)
	{
		if (CurrTxPos < SPI_Multi_Params.TxBytes)
		  Endpoint_Write_8(ISPTarget_TransferByte(SPI_Multi_Params.TxData[CurrTxPos++]));
     8e2:	24 e0       	ldi	r18, 0x04	; 4
     8e4:	e2 2e       	mov	r14, r18
     8e6:	f1 2c       	mov	r15, r1
     8e8:	ec 0e       	add	r14, r28
     8ea:	fd 1e       	adc	r15, r29
     8ec:	2c c0       	rjmp	.+88     	; 0x946 <ISPProtocol_SPIMulti+0xf0>
	}

	/* Transmit remaining bytes with padding as needed, read in response bytes */
	while (CurrRxPos < SPI_Multi_Params.RxBytes)
	{
		if (CurrTxPos < SPI_Multi_Params.TxBytes)
     8ee:	89 81       	ldd	r24, Y+1	; 0x01
     8f0:	90 91 29 01 	lds	r25, 0x0129
     8f4:	08 17       	cp	r16, r24
     8f6:	78 f4       	brcc	.+30     	; 0x916 <ISPProtocol_SPIMulti+0xc0>
		  Endpoint_Write_8(ISPTarget_TransferByte(SPI_Multi_Params.TxData[CurrTxPos++]));
     8f8:	f7 01       	movw	r30, r14
     8fa:	e0 0f       	add	r30, r16
     8fc:	f1 1d       	adc	r31, r1
     8fe:	80 81       	ld	r24, Z
		 *
		 *  \return Received byte of data from the attached target
		 */
		static inline uint8_t ISPTarget_TransferByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     900:	99 23       	and	r25, r25
     902:	31 f0       	breq	.+12     	; 0x910 <ISPProtocol_SPIMulti+0xba>
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
     904:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     906:	0d b4       	in	r0, 0x2d	; 45
     908:	07 fe       	sbrs	r0, 7
     90a:	fd cf       	rjmp	.-6      	; 0x906 <ISPProtocol_SPIMulti+0xb0>
				return SPDR;
     90c:	8e b5       	in	r24, 0x2e	; 46
     90e:	01 c0       	rjmp	.+2      	; 0x912 <ISPProtocol_SPIMulti+0xbc>
			  return SPI_TransferByte(Byte);
			else
			  return ISPTarget_TransferSoftSPIByte(Byte);
     910:	be d3       	rcall	.+1916   	; 0x108e <ISPTarget_TransferSoftSPIByte>
     912:	0f 5f       	subi	r16, 0xFF	; 255
     914:	0a c0       	rjmp	.+20     	; 0x92a <ISPProtocol_SPIMulti+0xd4>
		 *
		 *  \return Received byte of data from the attached target
		 */
		static inline uint8_t ISPTarget_ReceiveByte(void)
		{
			if (HardwareSPIMode)
     916:	99 23       	and	r25, r25
     918:	31 f0       	breq	.+12     	; 0x926 <ISPProtocol_SPIMulti+0xd0>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     91a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     91c:	0d b4       	in	r0, 0x2d	; 45
     91e:	07 fe       	sbrs	r0, 7
     920:	fd cf       	rjmp	.-6      	; 0x91c <ISPProtocol_SPIMulti+0xc6>
				return SPDR;
     922:	8e b5       	in	r24, 0x2e	; 46
     924:	02 c0       	rjmp	.+4      	; 0x92a <ISPProtocol_SPIMulti+0xd4>
			  return SPI_ReceiveByte();
			else
			  return ISPTarget_TransferSoftSPIByte(0x00);
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	b2 d3       	rcall	.+1892   	; 0x108e <ISPTarget_TransferSoftSPIByte>
     92a:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     92e:	80 91 e8 00 	lds	r24, 0x00E8
		else
		  Endpoint_Write_8(ISPTarget_ReceiveByte());

		/* Check to see if we have filled the endpoint bank and need to send the packet */
		if (!(Endpoint_IsReadWriteAllowed()))
     932:	85 fd       	sbrc	r24, 5
     934:	07 c0       	rjmp	.+14     	; 0x944 <ISPProtocol_SPIMulti+0xee>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     936:	80 91 e8 00 	lds	r24, 0x00E8
     93a:	8e 77       	andi	r24, 0x7E	; 126
     93c:	80 93 e8 00 	sts	0x00E8, r24
		{
			Endpoint_ClearIN();
			Endpoint_WaitUntilReady();
     940:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <Endpoint_WaitUntilReady>
		}

		CurrRxPos++;
     944:	1f 5f       	subi	r17, 0xFF	; 255

		CurrTxPos++;
	}

	/* Transmit remaining bytes with padding as needed, read in response bytes */
	while (CurrRxPos < SPI_Multi_Params.RxBytes)
     946:	8a 81       	ldd	r24, Y+2	; 0x02
     948:	18 17       	cp	r17, r24
     94a:	88 f2       	brcs	.-94     	; 0x8ee <ISPProtocol_SPIMulti+0x98>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     94c:	10 92 f1 00 	sts	0x00F1, r1
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     950:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     954:	80 91 e8 00 	lds	r24, 0x00E8
     958:	8e 77       	andi	r24, 0x7E	; 126
     95a:	80 93 e8 00 	sts	0x00E8, r24

	bool IsEndpointFull = !(Endpoint_IsReadWriteAllowed());
	Endpoint_ClearIN();

	/* Ensure last packet is a short packet to terminate the transfer */
	if (IsEndpointFull)
     95e:	95 fd       	sbrc	r25, 5
     960:	09 c0       	rjmp	.+18     	; 0x974 <ISPProtocol_SPIMulti+0x11e>
	{
		Endpoint_WaitUntilReady();
     962:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <Endpoint_WaitUntilReady>
     966:	80 91 e8 00 	lds	r24, 0x00E8
     96a:	8e 77       	andi	r24, 0x7E	; 126
     96c:	80 93 e8 00 	sts	0x00E8, r24
		Endpoint_ClearIN();
		Endpoint_WaitUntilReady();
     970:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <Endpoint_WaitUntilReady>
	}
}
     974:	ce 5f       	subi	r28, 0xFE	; 254
     976:	de 4f       	sbci	r29, 0xFE	; 254
     978:	0f b6       	in	r0, 0x3f	; 63
     97a:	f8 94       	cli
     97c:	de bf       	out	0x3e, r29	; 62
     97e:	0f be       	out	0x3f, r0	; 63
     980:	cd bf       	out	0x3d, r28	; 61
     982:	cf 91       	pop	r28
     984:	df 91       	pop	r29
     986:	1f 91       	pop	r17
     988:	0f 91       	pop	r16
     98a:	ff 90       	pop	r15
     98c:	ef 90       	pop	r14
     98e:	08 95       	ret

00000990 <ISPProtocol_ChipErase>:
	}
}

/** Handler for the CMD_CHI_ERASE_ISP command, clearing the target's FLASH memory. */
void ISPProtocol_ChipErase(void)
{
     990:	ef 92       	push	r14
     992:	ff 92       	push	r15
     994:	0f 93       	push	r16
     996:	1f 93       	push	r17
     998:	df 93       	push	r29
     99a:	cf 93       	push	r28
     99c:	00 d0       	rcall	.+0      	; 0x99e <ISPProtocol_ChipErase+0xe>
     99e:	00 d0       	rcall	.+0      	; 0x9a0 <ISPProtocol_ChipErase+0x10>
     9a0:	00 d0       	rcall	.+0      	; 0x9a2 <ISPProtocol_ChipErase+0x12>
     9a2:	cd b7       	in	r28, 0x3d	; 61
     9a4:	de b7       	in	r29, 0x3e	; 62
		uint8_t EraseDelayMS;
		uint8_t PollMethod;
		uint8_t EraseCommandBytes[4];
	} Erase_Chip_Params;

	Endpoint_Read_Stream_LE(&Erase_Chip_Params, sizeof(Erase_Chip_Params), NULL);
     9a6:	ce 01       	movw	r24, r28
     9a8:	01 96       	adiw	r24, 0x01	; 1
     9aa:	66 e0       	ldi	r22, 0x06	; 6
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	40 e0       	ldi	r20, 0x00	; 0
     9b0:	50 e0       	ldi	r21, 0x00	; 0
     9b2:	0e 94 71 11 	call	0x22e2	; 0x22e2 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     9b6:	80 91 e8 00 	lds	r24, 0x00E8
     9ba:	8b 77       	andi	r24, 0x7B	; 123
     9bc:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     9c0:	82 e0       	ldi	r24, 0x02	; 2
     9c2:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     9c6:	80 91 ec 00 	lds	r24, 0x00EC
     9ca:	80 68       	ori	r24, 0x80	; 128
     9cc:	80 93 ec 00 	sts	0x00EC, r24
     9d0:	8e 01       	movw	r16, r28
     9d2:	0d 5f       	subi	r16, 0xFD	; 253
     9d4:	1f 4f       	sbci	r17, 0xFF	; 255
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseStatus = STATUS_CMD_OK;

	/* Send the chip erase commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Erase_Chip_Params.EraseCommandBytes); SByte++)
     9d6:	47 e0       	ldi	r20, 0x07	; 7
     9d8:	e4 2e       	mov	r14, r20
     9da:	f1 2c       	mov	r15, r1
     9dc:	ec 0e       	add	r14, r28
     9de:	fd 1e       	adc	r15, r29
	  ISPTarget_SendByte(Erase_Chip_Params.EraseCommandBytes[SByte]);
     9e0:	f8 01       	movw	r30, r16
     9e2:	81 91       	ld	r24, Z+
     9e4:	8f 01       	movw	r16, r30
     9e6:	7a de       	rcall	.-780    	; 0x6dc <ISPTarget_SendByte>
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseStatus = STATUS_CMD_OK;

	/* Send the chip erase commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Erase_Chip_Params.EraseCommandBytes); SByte++)
     9e8:	0e 15       	cp	r16, r14
     9ea:	1f 05       	cpc	r17, r15
     9ec:	c9 f7       	brne	.-14     	; 0x9e0 <ISPProtocol_ChipErase+0x50>
	  ISPTarget_SendByte(Erase_Chip_Params.EraseCommandBytes[SByte]);

	/* Use appropriate command completion check as given by the host (delay or busy polling) */
	if (!(Erase_Chip_Params.PollMethod))
     9ee:	8a 81       	ldd	r24, Y+2	; 0x02
     9f0:	88 23       	and	r24, r24
     9f2:	21 f4       	brne	.+8      	; 0x9fc <ISPProtocol_ChipErase+0x6c>
	  ISPProtocol_DelayMS(Erase_Chip_Params.EraseDelayMS);
     9f4:	89 81       	ldd	r24, Y+1	; 0x01
     9f6:	64 de       	rcall	.-824    	; 0x6c0 <ISPProtocol_DelayMS>
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	02 c0       	rjmp	.+4      	; 0xa00 <ISPProtocol_ChipErase+0x70>
	else
	  ResponseStatus = ISPTarget_WaitWhileTargetBusy();
     9fc:	73 d3       	rcall	.+1766   	; 0x10e4 <ISPTarget_WaitWhileTargetBusy>
     9fe:	98 2f       	mov	r25, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     a00:	82 e1       	ldi	r24, 0x12	; 18
     a02:	80 93 f1 00 	sts	0x00F1, r24
     a06:	90 93 f1 00 	sts	0x00F1, r25
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a0a:	80 91 e8 00 	lds	r24, 0x00E8
     a0e:	8e 77       	andi	r24, 0x7E	; 126
     a10:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_Write_8(CMD_CHIP_ERASE_ISP);
	Endpoint_Write_8(ResponseStatus);
	Endpoint_ClearIN();
}
     a14:	26 96       	adiw	r28, 0x06	; 6
     a16:	0f b6       	in	r0, 0x3f	; 63
     a18:	f8 94       	cli
     a1a:	de bf       	out	0x3e, r29	; 62
     a1c:	0f be       	out	0x3f, r0	; 63
     a1e:	cd bf       	out	0x3d, r28	; 61
     a20:	cf 91       	pop	r28
     a22:	df 91       	pop	r29
     a24:	1f 91       	pop	r17
     a26:	0f 91       	pop	r16
     a28:	ff 90       	pop	r15
     a2a:	ef 90       	pop	r14
     a2c:	08 95       	ret

00000a2e <ISPProtocol_ReadMemory>:
 *  words or pages of data from the attached device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadMemory(uint8_t V2Command)
{
     a2e:	df 92       	push	r13
     a30:	ef 92       	push	r14
     a32:	ff 92       	push	r15
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
     a38:	df 93       	push	r29
     a3a:	cf 93       	push	r28
     a3c:	00 d0       	rcall	.+0      	; 0xa3e <ISPProtocol_ReadMemory+0x10>
     a3e:	0f 92       	push	r0
     a40:	cd b7       	in	r28, 0x3d	; 61
     a42:	de b7       	in	r29, 0x3e	; 62
     a44:	f8 2e       	mov	r15, r24
	{
		uint16_t BytesToRead;
		uint8_t  ReadMemoryCommand;
	} Read_Memory_Params;

	Endpoint_Read_Stream_LE(&Read_Memory_Params, sizeof(Read_Memory_Params), NULL);
     a46:	ce 01       	movw	r24, r28
     a48:	01 96       	adiw	r24, 0x01	; 1
     a4a:	63 e0       	ldi	r22, 0x03	; 3
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	40 e0       	ldi	r20, 0x00	; 0
     a50:	50 e0       	ldi	r21, 0x00	; 0
     a52:	0e 94 71 11 	call	0x22e2	; 0x22e2 <Endpoint_Read_Stream_LE>
				{
					uint16_t Word;
					uint8_t  Bytes[2];
				} Data;

				Data.Word = Word;
     a56:	89 81       	ldd	r24, Y+1	; 0x01
     a58:	9a 81       	ldd	r25, Y+2	; 0x02

				Temp = Data.Bytes[0];
     a5a:	28 2f       	mov	r18, r24
				Data.Bytes[0] = Data.Bytes[1];
     a5c:	89 2f       	mov	r24, r25
				Data.Bytes[1] = Temp;
     a5e:	92 2f       	mov	r25, r18
	Read_Memory_Params.BytesToRead = SwapEndian_16(Read_Memory_Params.BytesToRead);
     a60:	9a 83       	std	Y+2, r25	; 0x02
     a62:	89 83       	std	Y+1, r24	; 0x01
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     a64:	80 91 e8 00 	lds	r24, 0x00E8
     a68:	8b 77       	andi	r24, 0x7B	; 123
     a6a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     a6e:	82 e0       	ldi	r24, 0x02	; 2
     a70:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     a74:	80 91 ec 00 	lds	r24, 0x00EC
     a78:	80 68       	ori	r24, 0x80	; 128
     a7a:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     a7e:	f0 92 f1 00 	sts	0x00F1, r15
     a82:	10 92 f1 00 	sts	0x00F1, r1
     a86:	00 e0       	ldi	r16, 0x00	; 0
     a88:	10 e0       	ldi	r17, 0x00	; 0
		}

		/* AVR FLASH addressing requires us to modify the read command based on if we are reading a high
		 * or low byte at the current word address */
		if (V2Command == CMD_READ_FLASH_ISP)
		  Read_Memory_Params.ReadMemoryCommand ^= READ_WRITE_HIGH_BYTE_MASK;
     a8a:	68 e0       	ldi	r22, 0x08	; 8
     a8c:	d6 2e       	mov	r13, r22
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
		{
			CurrentAddress++;

			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
			  MustLoadExtendedAddress = true;
     a8e:	ee 24       	eor	r14, r14
     a90:	e3 94       	inc	r14
     a92:	59 c0       	rjmp	.+178    	; 0xb46 <ISPProtocol_ReadMemory+0x118>

	/* Read each byte from the device and write them to the packet for the host */
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
	{
		/* Check to see if we need to send a LOAD EXTENDED ADDRESS command to the target */
		if (MustLoadExtendedAddress)
     a94:	80 91 45 01 	lds	r24, 0x0145
     a98:	88 23       	and	r24, r24
     a9a:	19 f0       	breq	.+6      	; 0xaa2 <ISPProtocol_ReadMemory+0x74>
		{
			ISPTarget_LoadExtendedAddress();
     a9c:	3e d3       	rcall	.+1660   	; 0x111a <ISPTarget_LoadExtendedAddress>
			MustLoadExtendedAddress = false;
     a9e:	10 92 45 01 	sts	0x0145, r1
		}

		/* Read the next byte from the desired memory space in the device */
		ISPTarget_SendByte(Read_Memory_Params.ReadMemoryCommand);
     aa2:	8b 81       	ldd	r24, Y+3	; 0x03
     aa4:	1b de       	rcall	.-970    	; 0x6dc <ISPTarget_SendByte>
		ISPTarget_SendByte(CurrentAddress >> 8);
     aa6:	80 91 46 01 	lds	r24, 0x0146
     aaa:	90 91 47 01 	lds	r25, 0x0147
     aae:	a0 91 48 01 	lds	r26, 0x0148
     ab2:	b0 91 49 01 	lds	r27, 0x0149
     ab6:	89 2f       	mov	r24, r25
     ab8:	9a 2f       	mov	r25, r26
     aba:	ab 2f       	mov	r26, r27
     abc:	bb 27       	eor	r27, r27
     abe:	0e de       	rcall	.-996    	; 0x6dc <ISPTarget_SendByte>
		ISPTarget_SendByte(CurrentAddress & 0xFF);
     ac0:	80 91 46 01 	lds	r24, 0x0146
     ac4:	0b de       	rcall	.-1002   	; 0x6dc <ISPTarget_SendByte>
		 *
		 *  \return Received byte of data from the attached target
		 */
		static inline uint8_t ISPTarget_ReceiveByte(void)
		{
			if (HardwareSPIMode)
     ac6:	80 91 29 01 	lds	r24, 0x0129
     aca:	88 23       	and	r24, r24
     acc:	31 f0       	breq	.+12     	; 0xada <ISPProtocol_ReadMemory+0xac>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     ace:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     ad0:	0d b4       	in	r0, 0x2d	; 45
     ad2:	07 fe       	sbrs	r0, 7
     ad4:	fd cf       	rjmp	.-6      	; 0xad0 <ISPProtocol_ReadMemory+0xa2>
				return SPDR;
     ad6:	8e b5       	in	r24, 0x2e	; 46
     ad8:	02 c0       	rjmp	.+4      	; 0xade <ISPProtocol_ReadMemory+0xb0>
			  return SPI_ReceiveByte();
			else
			  return ISPTarget_TransferSoftSPIByte(0x00);
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	d8 d2       	rcall	.+1456   	; 0x108e <ISPTarget_TransferSoftSPIByte>
     ade:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     ae2:	80 91 e8 00 	lds	r24, 0x00E8
		Endpoint_Write_8(ISPTarget_ReceiveByte());

		/* Check if the endpoint bank is currently full, if so send the packet */
		if (!(Endpoint_IsReadWriteAllowed()))
     ae6:	85 fd       	sbrc	r24, 5
     ae8:	07 c0       	rjmp	.+14     	; 0xaf8 <ISPProtocol_ReadMemory+0xca>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     aea:	80 91 e8 00 	lds	r24, 0x00E8
     aee:	8e 77       	andi	r24, 0x7E	; 126
     af0:	80 93 e8 00 	sts	0x00E8, r24
		{
			Endpoint_ClearIN();
			Endpoint_WaitUntilReady();
     af4:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <Endpoint_WaitUntilReady>
		}

		/* AVR FLASH addressing requires us to modify the read command based on if we are reading a high
		 * or low byte at the current word address */
		if (V2Command == CMD_READ_FLASH_ISP)
     af8:	24 e1       	ldi	r18, 0x14	; 20
     afa:	f2 16       	cp	r15, r18
     afc:	19 f4       	brne	.+6      	; 0xb04 <ISPProtocol_ReadMemory+0xd6>
		  Read_Memory_Params.ReadMemoryCommand ^= READ_WRITE_HIGH_BYTE_MASK;
     afe:	8b 81       	ldd	r24, Y+3	; 0x03
     b00:	8d 25       	eor	r24, r13
     b02:	8b 83       	std	Y+3, r24	; 0x03

		/* EEPROM just increments the address each byte, flash needs to increment on each word and
		 * also check to ensure that a LOAD EXTENDED ADDRESS command is issued each time the extended
		 * address boundary has been crossed */
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
     b04:	00 fd       	sbrc	r16, 0
     b06:	03 c0       	rjmp	.+6      	; 0xb0e <ISPProtocol_ReadMemory+0xe0>
     b08:	86 e1       	ldi	r24, 0x16	; 22
     b0a:	f8 16       	cp	r15, r24
     b0c:	d1 f4       	brne	.+52     	; 0xb42 <ISPProtocol_ReadMemory+0x114>
		{
			CurrentAddress++;
     b0e:	80 91 46 01 	lds	r24, 0x0146
     b12:	90 91 47 01 	lds	r25, 0x0147
     b16:	a0 91 48 01 	lds	r26, 0x0148
     b1a:	b0 91 49 01 	lds	r27, 0x0149
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	a1 1d       	adc	r26, r1
     b22:	b1 1d       	adc	r27, r1
     b24:	80 93 46 01 	sts	0x0146, r24
     b28:	90 93 47 01 	sts	0x0147, r25
     b2c:	a0 93 48 01 	sts	0x0148, r26
     b30:	b0 93 49 01 	sts	0x0149, r27

			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
     b34:	26 e1       	ldi	r18, 0x16	; 22
     b36:	f2 16       	cp	r15, r18
     b38:	21 f0       	breq	.+8      	; 0xb42 <ISPProtocol_ReadMemory+0x114>
     b3a:	89 2b       	or	r24, r25
     b3c:	11 f4       	brne	.+4      	; 0xb42 <ISPProtocol_ReadMemory+0x114>
			  MustLoadExtendedAddress = true;
     b3e:	e0 92 45 01 	sts	0x0145, r14

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(STATUS_CMD_OK);

	/* Read each byte from the device and write them to the packet for the host */
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
     b42:	0f 5f       	subi	r16, 0xFF	; 255
     b44:	1f 4f       	sbci	r17, 0xFF	; 255
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	9a 81       	ldd	r25, Y+2	; 0x02
     b4a:	08 17       	cp	r16, r24
     b4c:	19 07       	cpc	r17, r25
     b4e:	08 f4       	brcc	.+2      	; 0xb52 <ISPProtocol_ReadMemory+0x124>
     b50:	a1 cf       	rjmp	.-190    	; 0xa94 <ISPProtocol_ReadMemory+0x66>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b52:	10 92 f1 00 	sts	0x00F1, r1
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     b56:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b5a:	80 91 e8 00 	lds	r24, 0x00E8
     b5e:	8e 77       	andi	r24, 0x7E	; 126
     b60:	80 93 e8 00 	sts	0x00E8, r24

	bool IsEndpointFull = !(Endpoint_IsReadWriteAllowed());
	Endpoint_ClearIN();

	/* Ensure last packet is a short packet to terminate the transfer */
	if (IsEndpointFull)
     b64:	95 fd       	sbrc	r25, 5
     b66:	09 c0       	rjmp	.+18     	; 0xb7a <ISPProtocol_ReadMemory+0x14c>
	{
		Endpoint_WaitUntilReady();
     b68:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <Endpoint_WaitUntilReady>
     b6c:	80 91 e8 00 	lds	r24, 0x00E8
     b70:	8e 77       	andi	r24, 0x7E	; 126
     b72:	80 93 e8 00 	sts	0x00E8, r24
		Endpoint_ClearIN();
		Endpoint_WaitUntilReady();
     b76:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <Endpoint_WaitUntilReady>
	}
}
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	cf 91       	pop	r28
     b82:	df 91       	pop	r29
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	df 90       	pop	r13
     b8e:	08 95       	ret

00000b90 <ISPProtocol_ProgramMemory>:
 *  words or pages of data to the attached device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ProgramMemory(uint8_t V2Command)
{
     b90:	2f 92       	push	r2
     b92:	3f 92       	push	r3
     b94:	4f 92       	push	r4
     b96:	5f 92       	push	r5
     b98:	6f 92       	push	r6
     b9a:	7f 92       	push	r7
     b9c:	8f 92       	push	r8
     b9e:	9f 92       	push	r9
     ba0:	af 92       	push	r10
     ba2:	bf 92       	push	r11
     ba4:	cf 92       	push	r12
     ba6:	df 92       	push	r13
     ba8:	ef 92       	push	r14
     baa:	ff 92       	push	r15
     bac:	0f 93       	push	r16
     bae:	1f 93       	push	r17
     bb0:	df 93       	push	r29
     bb2:	cf 93       	push	r28
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
     bb8:	c9 50       	subi	r28, 0x09	; 9
     bba:	d1 40       	sbci	r29, 0x01	; 1
     bbc:	0f b6       	in	r0, 0x3f	; 63
     bbe:	f8 94       	cli
     bc0:	de bf       	out	0x3e, r29	; 62
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	cd bf       	out	0x3d, r28	; 61
     bc6:	98 2e       	mov	r9, r24
		uint8_t  PollValue1;
		uint8_t  PollValue2;
		uint8_t  ProgData[256]; // Note, the Jungo driver has a very short ACK timeout period, need to buffer the
	} Write_Memory_Params;      // whole page and ACK the packet as fast as possible to prevent it from aborting

	Endpoint_Read_Stream_LE(&Write_Memory_Params, (sizeof(Write_Memory_Params) -
     bc8:	ce 01       	movw	r24, r28
     bca:	01 96       	adiw	r24, 0x01	; 1
     bcc:	69 e0       	ldi	r22, 0x09	; 9
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	40 e0       	ldi	r20, 0x00	; 0
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	0e 94 71 11 	call	0x22e2	; 0x22e2 <Endpoint_Read_Stream_LE>
				{
					uint16_t Word;
					uint8_t  Bytes[2];
				} Data;

				Data.Word = Word;
     bd8:	69 81       	ldd	r22, Y+1	; 0x01
     bda:	7a 81       	ldd	r23, Y+2	; 0x02

				Temp = Data.Bytes[0];
     bdc:	86 2f       	mov	r24, r22
				Data.Bytes[0] = Data.Bytes[1];
     bde:	67 2f       	mov	r22, r23
				Data.Bytes[1] = Temp;
     be0:	78 2f       	mov	r23, r24
	                                               sizeof(Write_Memory_Params.ProgData)), NULL);
	Write_Memory_Params.BytesToWrite = SwapEndian_16(Write_Memory_Params.BytesToWrite);
	
	if (Write_Memory_Params.BytesToWrite > sizeof(Write_Memory_Params.ProgData))
     be2:	21 e0       	ldi	r18, 0x01	; 1
     be4:	61 30       	cpi	r22, 0x01	; 1
     be6:	72 07       	cpc	r23, r18
     be8:	98 f0       	brcs	.+38     	; 0xc10 <ISPProtocol_ProgramMemory+0x80>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     bea:	80 91 e8 00 	lds	r24, 0x00E8
     bee:	8b 77       	andi	r24, 0x7B	; 123
     bf0:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     bf4:	82 e0       	ldi	r24, 0x02	; 2
     bf6:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     bfa:	80 91 ec 00 	lds	r24, 0x00EC
     bfe:	80 68       	ori	r24, 0x80	; 128
     c00:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c04:	90 92 f1 00 	sts	0x00F1, r9
     c08:	80 ec       	ldi	r24, 0xC0	; 192
     c0a:	80 93 f1 00 	sts	0x00F1, r24
     c0e:	e3 c0       	rjmp	.+454    	; 0xdd6 <ISPProtocol_ProgramMemory+0x246>
		uint8_t  ProgData[256]; // Note, the Jungo driver has a very short ACK timeout period, need to buffer the
	} Write_Memory_Params;      // whole page and ACK the packet as fast as possible to prevent it from aborting

	Endpoint_Read_Stream_LE(&Write_Memory_Params, (sizeof(Write_Memory_Params) -
	                                               sizeof(Write_Memory_Params.ProgData)), NULL);
	Write_Memory_Params.BytesToWrite = SwapEndian_16(Write_Memory_Params.BytesToWrite);
     c10:	7a 83       	std	Y+2, r23	; 0x02
     c12:	69 83       	std	Y+1, r22	; 0x01
		Endpoint_Write_8(STATUS_CMD_FAILED);
		Endpoint_ClearIN();
		return;
	}

	Endpoint_Read_Stream_LE(&Write_Memory_Params.ProgData, Write_Memory_Params.BytesToWrite, NULL);
     c14:	ce 01       	movw	r24, r28
     c16:	0a 96       	adiw	r24, 0x0a	; 10
     c18:	40 e0       	ldi	r20, 0x00	; 0
     c1a:	50 e0       	ldi	r21, 0x00	; 0
     c1c:	0e 94 71 11 	call	0x22e2	; 0x22e2 <Endpoint_Read_Stream_LE>

	// The driver will terminate transfers that are a round multiple of the endpoint bank in size with a ZLP, need
	// to catch this and discard it before continuing on with packet processing to prevent communication issues
	if (((sizeof(uint8_t) + sizeof(Write_Memory_Params) - sizeof(Write_Memory_Params.ProgData)) +
     c20:	89 81       	ldd	r24, Y+1	; 0x01
     c22:	9a 81       	ldd	r25, Y+2	; 0x02
     c24:	0a 96       	adiw	r24, 0x0a	; 10
     c26:	8f 73       	andi	r24, 0x3F	; 63
     c28:	90 70       	andi	r25, 0x00	; 0
     c2a:	89 2b       	or	r24, r25
     c2c:	39 f4       	brne	.+14     	; 0xc3c <ISPProtocol_ProgramMemory+0xac>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c2e:	80 91 e8 00 	lds	r24, 0x00E8
     c32:	8b 77       	andi	r24, 0x7B	; 123
     c34:	80 93 e8 00 	sts	0x00E8, r24
	    Write_Memory_Params.BytesToWrite) % AVRISP_DATA_EPSIZE == 0)
	{
		Endpoint_ClearOUT();
		Endpoint_WaitUntilReady();
     c38:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <Endpoint_WaitUntilReady>
     c3c:	80 91 e8 00 	lds	r24, 0x00E8
     c40:	8b 77       	andi	r24, 0x7B	; 123
     c42:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     c46:	82 e0       	ldi	r24, 0x02	; 2
     c48:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     c4c:	80 91 ec 00 	lds	r24, 0x00EC
     c50:	80 68       	ori	r24, 0x80	; 128
     c52:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t  ProgrammingStatus = STATUS_CMD_OK;
	uint8_t  PollValue         = (V2Command == CMD_PROGRAM_FLASH_ISP) ? Write_Memory_Params.PollValue1 :
	                                                                    Write_Memory_Params.PollValue2;
     c56:	83 e1       	ldi	r24, 0x13	; 19
     c58:	98 16       	cp	r9, r24
     c5a:	11 f4       	brne	.+4      	; 0xc60 <ISPProtocol_ProgramMemory+0xd0>
     c5c:	88 84       	ldd	r8, Y+8	; 0x08
     c5e:	01 c0       	rjmp	.+2      	; 0xc62 <ISPProtocol_ProgramMemory+0xd2>
     c60:	89 84       	ldd	r8, Y+9	; 0x09
	uint16_t PollAddress       = 0;
	uint8_t* NextWriteByte     = Write_Memory_Params.ProgData;
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);
     c62:	40 90 46 01 	lds	r4, 0x0146
     c66:	50 90 47 01 	lds	r5, 0x0147
     c6a:	60 90 48 01 	lds	r6, 0x0148
     c6e:	70 90 49 01 	lds	r7, 0x0149
     c72:	ee 24       	eor	r14, r14
     c74:	ff 24       	eor	r15, r15
     c76:	aa e0       	ldi	r26, 0x0A	; 10
     c78:	aa 2e       	mov	r10, r26
     c7a:	b1 2c       	mov	r11, r1
     c7c:	ac 0e       	add	r10, r28
     c7e:	bd 1e       	adc	r11, r29
     c80:	cc 24       	eor	r12, r12
     c82:	dd 24       	eor	r13, r13
		ISPTarget_SendByte(ByteToWrite);

		/* AVR FLASH addressing requires us to modify the write command based on if we are writing a high
		 * or low byte at the current word address */
		if (V2Command == CMD_PROGRAM_FLASH_ISP)
		  Write_Memory_Params.ProgrammingCommands[0] ^= READ_WRITE_HIGH_BYTE_MASK;
     c84:	f8 e0       	ldi	r31, 0x08	; 8
     c86:	2f 2e       	mov	r2, r31
		if ((CurrentByte & 0x01) || (V2Command == CMD_PROGRAM_EEPROM_ISP))
		{
			CurrentAddress++;

			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
			  MustLoadExtendedAddress = true;
     c88:	33 24       	eor	r3, r3
     c8a:	33 94       	inc	r3
     c8c:	71 c0       	rjmp	.+226    	; 0xd70 <ISPProtocol_ProgramMemory+0x1e0>
	uint8_t* NextWriteByte     = Write_Memory_Params.ProgData;
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);

	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
	{
		uint8_t ByteToWrite     = *(NextWriteByte++);
     c8e:	f5 01       	movw	r30, r10
     c90:	10 81       	ld	r17, Z
		uint8_t ProgrammingMode = Write_Memory_Params.ProgrammingMode;
     c92:	0b 81       	ldd	r16, Y+3	; 0x03

		/* Check to see if we need to send a LOAD EXTENDED ADDRESS command to the target */
		if (MustLoadExtendedAddress)
     c94:	80 91 45 01 	lds	r24, 0x0145
     c98:	88 23       	and	r24, r24
     c9a:	19 f0       	breq	.+6      	; 0xca2 <ISPProtocol_ProgramMemory+0x112>
		{
			ISPTarget_LoadExtendedAddress();
     c9c:	3e d2       	rcall	.+1148   	; 0x111a <ISPTarget_LoadExtendedAddress>
			MustLoadExtendedAddress = false;
     c9e:	10 92 45 01 	sts	0x0145, r1
		}

		ISPTarget_SendByte(Write_Memory_Params.ProgrammingCommands[0]);
     ca2:	8d 81       	ldd	r24, Y+5	; 0x05
     ca4:	1b dd       	rcall	.-1482   	; 0x6dc <ISPTarget_SendByte>
		ISPTarget_SendByte(CurrentAddress >> 8);
     ca6:	80 91 46 01 	lds	r24, 0x0146
     caa:	90 91 47 01 	lds	r25, 0x0147
     cae:	a0 91 48 01 	lds	r26, 0x0148
     cb2:	b0 91 49 01 	lds	r27, 0x0149
     cb6:	89 2f       	mov	r24, r25
     cb8:	9a 2f       	mov	r25, r26
     cba:	ab 2f       	mov	r26, r27
     cbc:	bb 27       	eor	r27, r27
     cbe:	0e dd       	rcall	.-1508   	; 0x6dc <ISPTarget_SendByte>
		ISPTarget_SendByte(CurrentAddress & 0xFF);
     cc0:	80 91 46 01 	lds	r24, 0x0146
     cc4:	0b dd       	rcall	.-1514   	; 0x6dc <ISPTarget_SendByte>
		ISPTarget_SendByte(ByteToWrite);
     cc6:	81 2f       	mov	r24, r17
     cc8:	09 dd       	rcall	.-1518   	; 0x6dc <ISPTarget_SendByte>

		/* AVR FLASH addressing requires us to modify the write command based on if we are writing a high
		 * or low byte at the current word address */
		if (V2Command == CMD_PROGRAM_FLASH_ISP)
     cca:	f3 e1       	ldi	r31, 0x13	; 19
     ccc:	9f 16       	cp	r9, r31
     cce:	19 f4       	brne	.+6      	; 0xcd6 <ISPProtocol_ProgramMemory+0x146>
		  Write_Memory_Params.ProgrammingCommands[0] ^= READ_WRITE_HIGH_BYTE_MASK;
     cd0:	8d 81       	ldd	r24, Y+5	; 0x05
     cd2:	82 25       	eor	r24, r2
     cd4:	8d 83       	std	Y+5, r24	; 0x05

		/* Check to see if we have a valid polling address */
		if (!(PollAddress) && (ByteToWrite != PollValue))
     cd6:	e1 14       	cp	r14, r1
     cd8:	f1 04       	cpc	r15, r1
     cda:	89 f4       	brne	.+34     	; 0xcfe <ISPProtocol_ProgramMemory+0x16e>
     cdc:	18 15       	cp	r17, r8
     cde:	79 f0       	breq	.+30     	; 0xcfe <ISPProtocol_ProgramMemory+0x16e>
		{
			if ((CurrentByte & 0x01) && (V2Command == CMD_PROGRAM_FLASH_ISP))
     ce0:	c0 fe       	sbrs	r12, 0
     ce2:	06 c0       	rjmp	.+12     	; 0xcf0 <ISPProtocol_ProgramMemory+0x160>
     ce4:	23 e1       	ldi	r18, 0x13	; 19
     ce6:	92 16       	cp	r9, r18
     ce8:	19 f4       	brne	.+6      	; 0xcf0 <ISPProtocol_ProgramMemory+0x160>
			  Write_Memory_Params.ProgrammingCommands[2] |=  READ_WRITE_HIGH_BYTE_MASK;
     cea:	8f 81       	ldd	r24, Y+7	; 0x07
     cec:	88 60       	ori	r24, 0x08	; 8
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <ISPProtocol_ProgramMemory+0x164>
			else
			  Write_Memory_Params.ProgrammingCommands[2] &= ~READ_WRITE_HIGH_BYTE_MASK;
     cf0:	8f 81       	ldd	r24, Y+7	; 0x07
     cf2:	87 7f       	andi	r24, 0xF7	; 247
     cf4:	8f 83       	std	Y+7, r24	; 0x07

			PollAddress = (CurrentAddress & 0xFFFF);
     cf6:	e0 90 46 01 	lds	r14, 0x0146
     cfa:	f0 90 47 01 	lds	r15, 0x0147
		}

		/* If in word programming mode, commit the byte to the target's memory */
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
     cfe:	00 fd       	sbrc	r16, 0
     d00:	12 c0       	rjmp	.+36     	; 0xd26 <ISPProtocol_ProgramMemory+0x196>
		{
			/* If the current polling address is invalid, switch to timed delay write completion mode */
			if (!(PollAddress) && !(ProgrammingMode & PROG_MODE_WORD_READYBUSY_MASK))
     d02:	e1 14       	cp	r14, r1
     d04:	f1 04       	cpc	r15, r1
     d06:	21 f4       	brne	.+8      	; 0xd10 <ISPProtocol_ProgramMemory+0x180>
     d08:	03 fd       	sbrc	r16, 3
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <ISPProtocol_ProgramMemory+0x180>
			  ProgrammingMode = (ProgrammingMode & ~PROG_MODE_WORD_VALUE_MASK) | PROG_MODE_WORD_TIMEDELAY_MASK;
     d0c:	09 7f       	andi	r16, 0xF9	; 249
     d0e:	02 60       	ori	r16, 0x02	; 2

			ProgrammingStatus = ISPTarget_WaitForProgComplete(ProgrammingMode, PollAddress, PollValue,
     d10:	80 2f       	mov	r24, r16
     d12:	b7 01       	movw	r22, r14
     d14:	48 2d       	mov	r20, r8
     d16:	2c 81       	ldd	r18, Y+4	; 0x04
     d18:	0f 81       	ldd	r16, Y+7	; 0x07
     d1a:	08 d2       	rcall	.+1040   	; 0x112c <ISPTarget_WaitForProgComplete>
     d1c:	28 2f       	mov	r18, r24
			                                                  Write_Memory_Params.DelayMS,
			                                                  Write_Memory_Params.ProgrammingCommands[2]);

			/* Abort the programming loop early if the byte/word programming failed */
			if (ProgrammingStatus != STATUS_CMD_OK)
     d1e:	88 23       	and	r24, r24
     d20:	71 f5       	brne	.+92     	; 0xd7e <ISPProtocol_ProgramMemory+0x1ee>
			  break;
     d22:	ee 24       	eor	r14, r14
     d24:	ff 24       	eor	r15, r15
		}
		
		/* EEPROM just increments the address each byte, flash needs to increment on each word and
		 * also check to ensure that a LOAD EXTENDED ADDRESS command is issued each time the extended
		 * address boundary has been crossed during FLASH memory programming */
		if ((CurrentByte & 0x01) || (V2Command == CMD_PROGRAM_EEPROM_ISP))
     d26:	c0 fc       	sbrc	r12, 0
     d28:	03 c0       	rjmp	.+6      	; 0xd30 <ISPProtocol_ProgramMemory+0x1a0>
     d2a:	85 e1       	ldi	r24, 0x15	; 21
     d2c:	98 16       	cp	r9, r24
     d2e:	d1 f4       	brne	.+52     	; 0xd64 <ISPProtocol_ProgramMemory+0x1d4>
		{
			CurrentAddress++;
     d30:	80 91 46 01 	lds	r24, 0x0146
     d34:	90 91 47 01 	lds	r25, 0x0147
     d38:	a0 91 48 01 	lds	r26, 0x0148
     d3c:	b0 91 49 01 	lds	r27, 0x0149
     d40:	01 96       	adiw	r24, 0x01	; 1
     d42:	a1 1d       	adc	r26, r1
     d44:	b1 1d       	adc	r27, r1
     d46:	80 93 46 01 	sts	0x0146, r24
     d4a:	90 93 47 01 	sts	0x0147, r25
     d4e:	a0 93 48 01 	sts	0x0148, r26
     d52:	b0 93 49 01 	sts	0x0149, r27

			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
     d56:	e3 e1       	ldi	r30, 0x13	; 19
     d58:	9e 16       	cp	r9, r30
     d5a:	21 f4       	brne	.+8      	; 0xd64 <ISPProtocol_ProgramMemory+0x1d4>
     d5c:	89 2b       	or	r24, r25
     d5e:	11 f4       	brne	.+4      	; 0xd64 <ISPProtocol_ProgramMemory+0x1d4>
			  MustLoadExtendedAddress = true;
     d60:	30 92 45 01 	sts	0x0145, r3
	uint8_t* NextWriteByte     = Write_Memory_Params.ProgData;
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);

	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
	{
		uint8_t ByteToWrite     = *(NextWriteByte++);
     d64:	08 94       	sec
     d66:	a1 1c       	adc	r10, r1
     d68:	b1 1c       	adc	r11, r1
	                                                                    Write_Memory_Params.PollValue2;
	uint16_t PollAddress       = 0;
	uint8_t* NextWriteByte     = Write_Memory_Params.ProgData;
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);

	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
     d6a:	08 94       	sec
     d6c:	c1 1c       	adc	r12, r1
     d6e:	d1 1c       	adc	r13, r1
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	9a 81       	ldd	r25, Y+2	; 0x02
     d74:	c8 16       	cp	r12, r24
     d76:	d9 06       	cpc	r13, r25
     d78:	08 f4       	brcc	.+2      	; 0xd7c <ISPProtocol_ProgramMemory+0x1ec>
     d7a:	89 cf       	rjmp	.-238    	; 0xc8e <ISPProtocol_ProgramMemory+0xfe>
     d7c:	20 e0       	ldi	r18, 0x00	; 0
			  MustLoadExtendedAddress = true;
		}
	}
	
	/* If the current page must be committed, send the PROGRAM PAGE command to the target */
	if (Write_Memory_Params.ProgrammingMode & PROG_MODE_COMMIT_PAGE_MASK)
     d7e:	8b 81       	ldd	r24, Y+3	; 0x03
     d80:	87 ff       	sbrs	r24, 7
     d82:	25 c0       	rjmp	.+74     	; 0xdce <ISPProtocol_ProgramMemory+0x23e>
	{
		ISPTarget_SendByte(Write_Memory_Params.ProgrammingCommands[1]);
     d84:	8e 81       	ldd	r24, Y+6	; 0x06
     d86:	aa dc       	rcall	.-1708   	; 0x6dc <ISPTarget_SendByte>
		ISPTarget_SendByte(PageStartAddress >> 8);
     d88:	85 2d       	mov	r24, r5
     d8a:	99 27       	eor	r25, r25
     d8c:	a7 dc       	rcall	.-1714   	; 0x6dc <ISPTarget_SendByte>
		ISPTarget_SendByte(PageStartAddress & 0xFF);
     d8e:	84 2d       	mov	r24, r4
     d90:	a5 dc       	rcall	.-1718   	; 0x6dc <ISPTarget_SendByte>
		ISPTarget_SendByte(0x00);
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	a3 dc       	rcall	.-1722   	; 0x6dc <ISPTarget_SendByte>

		/* Check if polling is enabled and possible, if not switch to timed delay mode */
		if ((Write_Memory_Params.ProgrammingMode & PROG_MODE_PAGED_VALUE_MASK) && !(PollAddress))
     d96:	8b 81       	ldd	r24, Y+3	; 0x03
     d98:	85 ff       	sbrs	r24, 5
     d9a:	06 c0       	rjmp	.+12     	; 0xda8 <ISPProtocol_ProgramMemory+0x218>
     d9c:	e1 14       	cp	r14, r1
     d9e:	f1 04       	cpc	r15, r1
     da0:	19 f4       	brne	.+6      	; 0xda8 <ISPProtocol_ProgramMemory+0x218>
		{
			Write_Memory_Params.ProgrammingMode = (Write_Memory_Params.ProgrammingMode & ~PROG_MODE_PAGED_VALUE_MASK) |
     da2:	8f 7c       	andi	r24, 0xCF	; 207
     da4:	80 61       	ori	r24, 0x10	; 16
     da6:	8b 83       	std	Y+3, r24	; 0x03
												   PROG_MODE_PAGED_TIMEDELAY_MASK;
		}

		ProgrammingStatus = ISPTarget_WaitForProgComplete(Write_Memory_Params.ProgrammingMode, PollAddress, PollValue,
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	b7 01       	movw	r22, r14
     dac:	48 2d       	mov	r20, r8
     dae:	2c 81       	ldd	r18, Y+4	; 0x04
     db0:	0f 81       	ldd	r16, Y+7	; 0x07
     db2:	bc d1       	rcall	.+888    	; 0x112c <ISPTarget_WaitForProgComplete>
     db4:	28 2f       	mov	r18, r24
		                                                  Write_Memory_Params.DelayMS,
		                                                  Write_Memory_Params.ProgrammingCommands[2]);

		/* Check to see if the FLASH address has crossed the extended address boundary */
		if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
     db6:	f3 e1       	ldi	r31, 0x13	; 19
     db8:	9f 16       	cp	r9, r31
     dba:	49 f4       	brne	.+18     	; 0xdce <ISPProtocol_ProgramMemory+0x23e>
     dbc:	80 91 46 01 	lds	r24, 0x0146
     dc0:	90 91 47 01 	lds	r25, 0x0147
     dc4:	89 2b       	or	r24, r25
     dc6:	19 f4       	brne	.+6      	; 0xdce <ISPProtocol_ProgramMemory+0x23e>
		  MustLoadExtendedAddress = true;
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	80 93 45 01 	sts	0x0145, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     dce:	90 92 f1 00 	sts	0x00F1, r9
     dd2:	20 93 f1 00 	sts	0x00F1, r18
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     dd6:	80 91 e8 00 	lds	r24, 0x00E8
     dda:	8e 77       	andi	r24, 0x7E	; 126
     ddc:	80 93 e8 00 	sts	0x00E8, r24
	}	

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(ProgrammingStatus);
	Endpoint_ClearIN();
}
     de0:	c7 5f       	subi	r28, 0xF7	; 247
     de2:	de 4f       	sbci	r29, 0xFE	; 254
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	f8 94       	cli
     de8:	de bf       	out	0x3e, r29	; 62
     dea:	0f be       	out	0x3f, r0	; 63
     dec:	cd bf       	out	0x3d, r28	; 61
     dee:	cf 91       	pop	r28
     df0:	df 91       	pop	r29
     df2:	1f 91       	pop	r17
     df4:	0f 91       	pop	r16
     df6:	ff 90       	pop	r15
     df8:	ef 90       	pop	r14
     dfa:	df 90       	pop	r13
     dfc:	cf 90       	pop	r12
     dfe:	bf 90       	pop	r11
     e00:	af 90       	pop	r10
     e02:	9f 90       	pop	r9
     e04:	8f 90       	pop	r8
     e06:	7f 90       	pop	r7
     e08:	6f 90       	pop	r6
     e0a:	5f 90       	pop	r5
     e0c:	4f 90       	pop	r4
     e0e:	3f 90       	pop	r3
     e10:	2f 90       	pop	r2
     e12:	08 95       	ret

00000e14 <ISPProtocol_LeaveISPMode>:
	Endpoint_ClearIN();
}

/** Handler for the CMD_LEAVE_ISP command, which releases the target from programming mode. */
void ISPProtocol_LeaveISPMode(void)
{
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	df 93       	push	r29
     e1a:	cf 93       	push	r28
     e1c:	00 d0       	rcall	.+0      	; 0xe1e <ISPProtocol_LeaveISPMode+0xa>
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
	{
		uint8_t PreDelayMS;
		uint8_t PostDelayMS;
	} Leave_ISP_Params;

	Endpoint_Read_Stream_LE(&Leave_ISP_Params, sizeof(Leave_ISP_Params), NULL);
     e22:	ce 01       	movw	r24, r28
     e24:	01 96       	adiw	r24, 0x01	; 1
     e26:	62 e0       	ldi	r22, 0x02	; 2
     e28:	70 e0       	ldi	r23, 0x00	; 0
     e2a:	40 e0       	ldi	r20, 0x00	; 0
     e2c:	50 e0       	ldi	r21, 0x00	; 0
     e2e:	0e 94 71 11 	call	0x22e2	; 0x22e2 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e32:	08 ee       	ldi	r16, 0xE8	; 232
     e34:	10 e0       	ldi	r17, 0x00	; 0
     e36:	f8 01       	movw	r30, r16
     e38:	80 81       	ld	r24, Z
     e3a:	8b 77       	andi	r24, 0x7B	; 123
     e3c:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     e3e:	82 e0       	ldi	r24, 0x02	; 2
     e40:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     e44:	ec ee       	ldi	r30, 0xEC	; 236
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	80 68       	ori	r24, 0x80	; 128
     e4c:	80 83       	st	Z, r24
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	/* Perform pre-exit delay, release the target /RESET, disable the SPI bus and perform the post-exit delay */
	ISPProtocol_DelayMS(Leave_ISP_Params.PreDelayMS);
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	37 dc       	rcall	.-1938   	; 0x6c0 <ISPProtocol_DelayMS>
	ISPTarget_ChangeTargetResetLine(false);
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	b3 d1       	rcall	.+870    	; 0x11bc <ISPTarget_ChangeTargetResetLine>
	ISPTarget_DisableTargetISP();
     e56:	ef d0       	rcall	.+478    	; 0x1036 <ISPTarget_DisableTargetISP>
	ISPProtocol_DelayMS(Leave_ISP_Params.PostDelayMS);
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	32 dc       	rcall	.-1948   	; 0x6c0 <ISPProtocol_DelayMS>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e5c:	e1 ef       	ldi	r30, 0xF1	; 241
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	81 e1       	ldi	r24, 0x11	; 17
     e62:	80 83       	st	Z, r24
     e64:	10 82       	st	Z, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e66:	f8 01       	movw	r30, r16
     e68:	80 81       	ld	r24, Z
     e6a:	8e 77       	andi	r24, 0x7E	; 126
     e6c:	80 83       	st	Z, r24

	Endpoint_Write_8(CMD_LEAVE_PROGMODE_ISP);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_ClearIN();
}
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	cf 91       	pop	r28
     e74:	df 91       	pop	r29
     e76:	1f 91       	pop	r17
     e78:	0f 91       	pop	r16
     e7a:	08 95       	ret

00000e7c <ISPProtocol_EnterISPMode>:

/** Handler for the CMD_ENTER_PROGMODE_ISP command, which attempts to enter programming mode on
 *  the attached device, returning success or failure back to the host.
 */
void ISPProtocol_EnterISPMode(void)
{
     e7c:	6f 92       	push	r6
     e7e:	7f 92       	push	r7
     e80:	8f 92       	push	r8
     e82:	9f 92       	push	r9
     e84:	af 92       	push	r10
     e86:	bf 92       	push	r11
     e88:	df 92       	push	r13
     e8a:	ef 92       	push	r14
     e8c:	ff 92       	push	r15
     e8e:	0f 93       	push	r16
     e90:	1f 93       	push	r17
     e92:	df 93       	push	r29
     e94:	cf 93       	push	r28
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	2f 97       	sbiw	r28, 0x0f	; 15
     e9c:	0f b6       	in	r0, 0x3f	; 63
     e9e:	f8 94       	cli
     ea0:	de bf       	out	0x3e, r29	; 62
     ea2:	0f be       	out	0x3f, r0	; 63
     ea4:	cd bf       	out	0x3d, r28	; 61
		uint8_t PollValue;
		uint8_t PollIndex;
		uint8_t EnterProgBytes[4];
	} Enter_ISP_Params;

	Endpoint_Read_Stream_LE(&Enter_ISP_Params, sizeof(Enter_ISP_Params), NULL);
     ea6:	ce 01       	movw	r24, r28
     ea8:	05 96       	adiw	r24, 0x05	; 5
     eaa:	6b e0       	ldi	r22, 0x0B	; 11
     eac:	70 e0       	ldi	r23, 0x00	; 0
     eae:	40 e0       	ldi	r20, 0x00	; 0
     eb0:	50 e0       	ldi	r21, 0x00	; 0
     eb2:	0e 94 71 11 	call	0x22e2	; 0x22e2 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     eb6:	80 91 e8 00 	lds	r24, 0x00E8
     eba:	8b 77       	andi	r24, 0x7B	; 123
     ebc:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     ec0:	82 e0       	ldi	r24, 0x02	; 2
     ec2:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     ec6:	80 91 ec 00 	lds	r24, 0x00EC
     eca:	80 68       	ori	r24, 0x80	; 128
     ecc:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseStatus = STATUS_CMD_FAILED;

	CurrentAddress = 0;
     ed0:	10 92 46 01 	sts	0x0146, r1
     ed4:	10 92 47 01 	sts	0x0147, r1
     ed8:	10 92 48 01 	sts	0x0148, r1
     edc:	10 92 49 01 	sts	0x0149, r1

	/* Perform execution delay, initialize SPI bus */
	ISPProtocol_DelayMS(Enter_ISP_Params.ExecutionDelayMS);
     ee0:	8f 81       	ldd	r24, Y+7	; 0x07
     ee2:	ee db       	rcall	.-2084   	; 0x6c0 <ISPProtocol_DelayMS>
	ISPTarget_EnableTargetISP();
     ee4:	77 d1       	rcall	.+750    	; 0x11d4 <ISPTarget_EnableTargetISP>

	ISPTarget_ChangeTargetResetLine(true);
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	69 d1       	rcall	.+722    	; 0x11bc <ISPTarget_ChangeTargetResetLine>
     eea:	00 ec       	ldi	r16, 0xC0	; 192
     eec:	d0 2e       	mov	r13, r16

	/* Continuously attempt to synchronize with the target until either the number of attempts specified
	 * by the host has exceeded, or the the device sends back the expected response values */
	while (Enter_ISP_Params.SynchLoops-- && (ResponseStatus != STATUS_CMD_OK) && !(TimeoutExpired))
     eee:	1c e0       	ldi	r17, 0x0C	; 12
     ef0:	61 2e       	mov	r6, r17
     ef2:	71 2c       	mov	r7, r1
     ef4:	6c 0e       	add	r6, r28
     ef6:	7d 1e       	adc	r7, r29
     ef8:	4e 01       	movw	r8, r28
     efa:	08 94       	sec
     efc:	81 1c       	adc	r8, r1
     efe:	91 1c       	adc	r9, r1
	{
		uint8_t ResponseBytes[4];

		for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
     f00:	b0 e1       	ldi	r27, 0x10	; 16
     f02:	ab 2e       	mov	r10, r27
     f04:	b1 2c       	mov	r11, r1
     f06:	ac 0e       	add	r10, r28
     f08:	bd 1e       	adc	r11, r29
     f0a:	2a c0       	rjmp	.+84     	; 0xf60 <ISPProtocol_EnterISPMode+0xe4>
		{
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
     f0c:	89 85       	ldd	r24, Y+9	; 0x09
     f0e:	d8 db       	rcall	.-2128   	; 0x6c0 <ISPProtocol_DelayMS>
			ResponseBytes[RByte] = ISPTarget_TransferByte(Enter_ISP_Params.EnterProgBytes[RByte]);
     f10:	f8 01       	movw	r30, r16
     f12:	90 81       	ld	r25, Z
		 *
		 *  \return Received byte of data from the attached target
		 */
		static inline uint8_t ISPTarget_TransferByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     f14:	80 91 29 01 	lds	r24, 0x0129
     f18:	88 23       	and	r24, r24
     f1a:	31 f0       	breq	.+12     	; 0xf28 <ISPProtocol_EnterISPMode+0xac>
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f1c:	9e bd       	out	0x2e, r25	; 46
				while (!(SPSR & (1 << SPIF)));
     f1e:	0d b4       	in	r0, 0x2d	; 45
     f20:	07 fe       	sbrs	r0, 7
     f22:	fd cf       	rjmp	.-6      	; 0xf1e <ISPProtocol_EnterISPMode+0xa2>
				return SPDR;
     f24:	8e b5       	in	r24, 0x2e	; 46
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <ISPProtocol_EnterISPMode+0xb0>
			  return SPI_TransferByte(Byte);
			else
			  return ISPTarget_TransferSoftSPIByte(Byte);
     f28:	89 2f       	mov	r24, r25
     f2a:	b1 d0       	rcall	.+354    	; 0x108e <ISPTarget_TransferSoftSPIByte>
     f2c:	f7 01       	movw	r30, r14
     f2e:	81 93       	st	Z+, r24
     f30:	7f 01       	movw	r14, r30
     f32:	0f 5f       	subi	r16, 0xFF	; 255
     f34:	1f 4f       	sbci	r17, 0xFF	; 255
	 * by the host has exceeded, or the the device sends back the expected response values */
	while (Enter_ISP_Params.SynchLoops-- && (ResponseStatus != STATUS_CMD_OK) && !(TimeoutExpired))
	{
		uint8_t ResponseBytes[4];

		for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
     f36:	0a 15       	cp	r16, r10
     f38:	1b 05       	cpc	r17, r11
     f3a:	41 f7       	brne	.-48     	; 0xf0c <ISPProtocol_EnterISPMode+0x90>
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
			ResponseBytes[RByte] = ISPTarget_TransferByte(Enter_ISP_Params.EnterProgBytes[RByte]);
		}

		/* Check if polling disabled, or if the polled value matches the expected value */
		if (!(Enter_ISP_Params.PollIndex) || (ResponseBytes[Enter_ISP_Params.PollIndex - 1] == Enter_ISP_Params.PollValue))
     f3c:	8b 85       	ldd	r24, Y+11	; 0x0b
     f3e:	88 23       	and	r24, r24
     f40:	71 f0       	breq	.+28     	; 0xf5e <ISPProtocol_EnterISPMode+0xe2>
     f42:	fe 01       	movw	r30, r28
     f44:	e8 0f       	add	r30, r24
     f46:	f1 1d       	adc	r31, r1
     f48:	90 81       	ld	r25, Z
     f4a:	8a 85       	ldd	r24, Y+10	; 0x0a
     f4c:	98 17       	cp	r25, r24
     f4e:	39 f0       	breq	.+14     	; 0xf5e <ISPProtocol_EnterISPMode+0xe2>
		{
			ResponseStatus = STATUS_CMD_OK;
		}
		else
		{
			ISPTarget_ChangeTargetResetLine(false);
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	34 d1       	rcall	.+616    	; 0x11bc <ISPTarget_ChangeTargetResetLine>
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
     f54:	8e 81       	ldd	r24, Y+6	; 0x06
     f56:	b4 db       	rcall	.-2200   	; 0x6c0 <ISPProtocol_DelayMS>
			ISPTarget_ChangeTargetResetLine(true);
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	30 d1       	rcall	.+608    	; 0x11bc <ISPTarget_ChangeTargetResetLine>
     f5c:	01 c0       	rjmp	.+2      	; 0xf60 <ISPProtocol_EnterISPMode+0xe4>
     f5e:	dd 24       	eor	r13, r13

	ISPTarget_ChangeTargetResetLine(true);

	/* Continuously attempt to synchronize with the target until either the number of attempts specified
	 * by the host has exceeded, or the the device sends back the expected response values */
	while (Enter_ISP_Params.SynchLoops-- && (ResponseStatus != STATUS_CMD_OK) && !(TimeoutExpired))
     f60:	98 85       	ldd	r25, Y+8	; 0x08
     f62:	99 23       	and	r25, r25
     f64:	51 f0       	breq	.+20     	; 0xf7a <ISPProtocol_EnterISPMode+0xfe>
     f66:	dd 20       	and	r13, r13
     f68:	41 f0       	breq	.+16     	; 0xf7a <ISPProtocol_EnterISPMode+0xfe>
     f6a:	8a b5       	in	r24, 0x2a	; 42
     f6c:	88 23       	and	r24, r24
     f6e:	29 f4       	brne	.+10     	; 0xf7a <ISPProtocol_EnterISPMode+0xfe>
     f70:	91 50       	subi	r25, 0x01	; 1
     f72:	98 87       	std	Y+8, r25	; 0x08
     f74:	83 01       	movw	r16, r6
     f76:	74 01       	movw	r14, r8
     f78:	c9 cf       	rjmp	.-110    	; 0xf0c <ISPProtocol_EnterISPMode+0x90>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f7a:	80 e1       	ldi	r24, 0x10	; 16
     f7c:	80 93 f1 00 	sts	0x00F1, r24
     f80:	d0 92 f1 00 	sts	0x00F1, r13
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f84:	80 91 e8 00 	lds	r24, 0x00E8
     f88:	8e 77       	andi	r24, 0x7E	; 126
     f8a:	80 93 e8 00 	sts	0x00E8, r24
	}

	Endpoint_Write_8(CMD_ENTER_PROGMODE_ISP);
	Endpoint_Write_8(ResponseStatus);
	Endpoint_ClearIN();
}
     f8e:	2f 96       	adiw	r28, 0x0f	; 15
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	cd bf       	out	0x3d, r28	; 61
     f9a:	cf 91       	pop	r28
     f9c:	df 91       	pop	r29
     f9e:	1f 91       	pop	r17
     fa0:	0f 91       	pop	r16
     fa2:	ff 90       	pop	r15
     fa4:	ef 90       	pop	r14
     fa6:	df 90       	pop	r13
     fa8:	bf 90       	pop	r11
     faa:	af 90       	pop	r10
     fac:	9f 90       	pop	r9
     fae:	8f 90       	pop	r8
     fb0:	7f 90       	pop	r7
     fb2:	6f 90       	pop	r6
     fb4:	08 95       	ret

00000fb6 <__vector_15>:
static volatile uint8_t SoftSPI_BitsRemaining;


/** ISR to handle software SPI transmission and reception */
ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
     fb6:	1f 92       	push	r1
     fb8:	0f 92       	push	r0
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	0f 92       	push	r0
     fbe:	11 24       	eor	r1, r1
     fc0:	8f 93       	push	r24
	/* Check if rising edge (output next bit) or falling edge (read in next bit) */
	if (!(PINB & (1 << 1)))
     fc2:	19 99       	sbic	0x03, 1	; 3
     fc4:	08 c0       	rjmp	.+16     	; 0xfd6 <__vector_15+0x20>
	{
		if (SoftSPI_Data & (1 << 7))
     fc6:	80 91 42 01 	lds	r24, 0x0142
     fca:	87 ff       	sbrs	r24, 7
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <__vector_15+0x1c>
		  PORTB |=  (1 << 2);
     fce:	2a 9a       	sbi	0x05, 2	; 5
     fd0:	17 c0       	rjmp	.+46     	; 0x1000 <__vector_15+0x4a>
		else
		  PORTB &= ~(1 << 2);
     fd2:	2a 98       	cbi	0x05, 2	; 5
     fd4:	15 c0       	rjmp	.+42     	; 0x1000 <__vector_15+0x4a>
	}
	else
	{
		SoftSPI_Data <<= 1;
     fd6:	80 91 42 01 	lds	r24, 0x0142
     fda:	88 0f       	add	r24, r24
     fdc:	80 93 42 01 	sts	0x0142, r24

		if (!(SoftSPI_BitsRemaining--))
     fe0:	80 91 43 01 	lds	r24, 0x0143
     fe4:	81 50       	subi	r24, 0x01	; 1
     fe6:	80 93 43 01 	sts	0x0143, r24
     fea:	8f 5f       	subi	r24, 0xFF	; 255
     fec:	11 f4       	brne	.+4      	; 0xff2 <__vector_15+0x3c>
		  TCCR1B = 0;
     fee:	10 92 81 00 	sts	0x0081, r1

		if (PINB & (1 << 3))
     ff2:	1b 9b       	sbis	0x03, 3	; 3
     ff4:	05 c0       	rjmp	.+10     	; 0x1000 <__vector_15+0x4a>
		  SoftSPI_Data |= (1 << 0);
     ff6:	80 91 42 01 	lds	r24, 0x0142
     ffa:	81 60       	ori	r24, 0x01	; 1
     ffc:	80 93 42 01 	sts	0x0142, r24
	}

	/* Fast toggle of PORTB.1 via the PIN register (see datasheet) */
	PINB |= (1 << 1);
    1000:	19 9a       	sbi	0x03, 1	; 3
}
    1002:	8f 91       	pop	r24
    1004:	0f 90       	pop	r0
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	0f 90       	pop	r0
    100a:	1f 90       	pop	r1
    100c:	18 95       	reti

0000100e <ISPTarget_ConfigureRescueClock>:
		UCSR1B = (1 << TXEN1);
		UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPOL1);
	#else
		/* Configure OCR1A as an output for the specified AVR model */
		#if defined(USB_SERIES_2_AVR)
		DDRC |= (1 << 6);
    100e:	3e 9a       	sbi	0x07, 6	; 7
		#else
		DDRB |= (1 << 5);
		#endif

		/* Start Timer 1 to generate a 4MHz clock on the OCR1A pin */
		TIMSK1 = 0;
    1010:	10 92 6f 00 	sts	0x006F, r1
		TCNT1  = 0;
    1014:	10 92 85 00 	sts	0x0085, r1
    1018:	10 92 84 00 	sts	0x0084, r1
		OCR1A  = ((F_CPU / 2 / ISP_RESCUE_CLOCK_SPEED) - 1);
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	90 93 89 00 	sts	0x0089, r25
    1024:	80 93 88 00 	sts	0x0088, r24
		TCCR1A = (1 << COM1A0);
    1028:	80 e4       	ldi	r24, 0x40	; 64
    102a:	80 93 80 00 	sts	0x0080, r24
		TCCR1B = ((1 << WGM12) | (1 << CS10));
    102e:	89 e0       	ldi	r24, 0x09	; 9
    1030:	80 93 81 00 	sts	0x0081, r24
	#endif
}
    1034:	08 95       	ret

00001036 <ISPTarget_DisableTargetISP>:
/** Shuts down the current selected SPI driver (hardware or software, depending on the selected ISP speed) so that no
 *  further communications can occur until the driver is re-initialized.
 */
void ISPTarget_DisableTargetISP(void)
{
	if (HardwareSPIMode)
    1036:	80 91 29 01 	lds	r24, 0x0129
    103a:	88 23       	and	r24, r24
    103c:	49 f0       	breq	.+18     	; 0x1050 <ISPTarget_DisableTargetISP+0x1a>
			}

			/** Turns off the SPI driver, disabling and returning used hardware to their default configuration. */
			static inline void SPI_Disable(void)
			{
				DDRB  &= ~((1 << 1) | (1 << 2));
    103e:	84 b1       	in	r24, 0x04	; 4
    1040:	89 7f       	andi	r24, 0xF9	; 249
    1042:	84 b9       	out	0x04, r24	; 4
				PORTB &= ~((1 << 0) | (1 << 3));
    1044:	85 b1       	in	r24, 0x05	; 5
    1046:	86 7f       	andi	r24, 0xF6	; 246
    1048:	85 b9       	out	0x05, r24	; 5

				SPCR   = 0;
    104a:	1c bc       	out	0x2c, r1	; 44
				SPSR   = 0;
    104c:	1d bc       	out	0x2d, r1	; 45
    104e:	08 95       	ret
	{
		SPI_Disable();
	}
	else
	{
		DDRB  &= ~((1 << 1) | (1 << 2));
    1050:	84 b1       	in	r24, 0x04	; 4
    1052:	89 7f       	andi	r24, 0xF9	; 249
    1054:	84 b9       	out	0x04, r24	; 4
		PORTB &= ~((1 << 0) | (1 << 3));
    1056:	85 b1       	in	r24, 0x05	; 5
    1058:	86 7f       	andi	r24, 0xF6	; 246
    105a:	85 b9       	out	0x05, r24	; 5
		
		/* Must re-enable rescue clock once software ISP has exited, as the timer for the rescue clock is
		 * re-purposed for software SPI */
		ISPTarget_ConfigureRescueClock();
    105c:	d8 cf       	rjmp	.-80     	; 0x100e <ISPTarget_ConfigureRescueClock>

0000105e <ISPTarget_ConfigureSoftwareSPI>:
 *  \param[in] SCKDuration  Duration of the desired software ISP SCK clock
 */
void ISPTarget_ConfigureSoftwareSPI(const uint8_t SCKDuration)
{
	/* Configure Timer 1 for software SPI using the specified SCK duration */
	TIMSK1 = (1 << OCIE1A);
    105e:	92 e0       	ldi	r25, 0x02	; 2
    1060:	90 93 6f 00 	sts	0x006F, r25
	TCNT1  = 0;
    1064:	10 92 85 00 	sts	0x0085, r1
    1068:	10 92 84 00 	sts	0x0084, r1
	OCR1A  = pgm_read_word(&TimerCompareFromSCKDuration[SCKDuration - sizeof(SPIMaskFromSCKDuration)]);
    106c:	e8 2f       	mov	r30, r24
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	ee 0f       	add	r30, r30
    1072:	ff 1f       	adc	r31, r31
    1074:	ec 5f       	subi	r30, 0xFC	; 252
    1076:	fe 4f       	sbci	r31, 0xFE	; 254
    1078:	85 91       	lpm	r24, Z+
    107a:	94 91       	lpm	r25, Z+
    107c:	90 93 89 00 	sts	0x0089, r25
    1080:	80 93 88 00 	sts	0x0088, r24
	TCCR1A = 0;
    1084:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;
    1088:	10 92 81 00 	sts	0x0081, r1
}
    108c:	08 95       	ret

0000108e <ISPTarget_TransferSoftSPIByte>:
 *
 *  \return Received byte of data from the attached target
 */
uint8_t ISPTarget_TransferSoftSPIByte(const uint8_t Byte)
{
	SoftSPI_Data          = Byte;
    108e:	80 93 42 01 	sts	0x0142, r24
	SoftSPI_BitsRemaining = 8;
    1092:	88 e0       	ldi	r24, 0x08	; 8
    1094:	80 93 43 01 	sts	0x0143, r24

	if (SoftSPI_Data & 0x01)
    1098:	80 91 42 01 	lds	r24, 0x0142
    109c:	80 ff       	sbrs	r24, 0
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <ISPTarget_TransferSoftSPIByte+0x16>
	  PORTB |=  (1 << 2);
    10a0:	2a 9a       	sbi	0x05, 2	; 5
    10a2:	01 c0       	rjmp	.+2      	; 0x10a6 <ISPTarget_TransferSoftSPIByte+0x18>
	else
	  PORTB &= ~(1 << 2);
    10a4:	2a 98       	cbi	0x05, 2	; 5

	TCNT1  = 0;
    10a6:	10 92 85 00 	sts	0x0085, r1
    10aa:	10 92 84 00 	sts	0x0084, r1
	TCCR1B = ((1 << WGM12) | (1 << CS11));
    10ae:	8a e0       	ldi	r24, 0x0A	; 10
    10b0:	80 93 81 00 	sts	0x0081, r24
	while (SoftSPI_BitsRemaining && !(TimeoutExpired));
    10b4:	80 91 43 01 	lds	r24, 0x0143
    10b8:	88 23       	and	r24, r24
    10ba:	19 f0       	breq	.+6      	; 0x10c2 <ISPTarget_TransferSoftSPIByte+0x34>
    10bc:	8a b5       	in	r24, 0x2a	; 42
    10be:	88 23       	and	r24, r24
    10c0:	c9 f3       	breq	.-14     	; 0x10b4 <ISPTarget_TransferSoftSPIByte+0x26>
	TCCR1B = 0;
    10c2:	10 92 81 00 	sts	0x0081, r1

	return SoftSPI_Data;
    10c6:	80 91 42 01 	lds	r24, 0x0142
}
    10ca:	08 95       	ret

000010cc <ISPTarget_SendByte>:
		 *  software routines depending on the selected ISP speed.
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
    10cc:	98 2f       	mov	r25, r24
			if (HardwareSPIMode)
    10ce:	80 91 29 01 	lds	r24, 0x0129
    10d2:	88 23       	and	r24, r24
    10d4:	29 f0       	breq	.+10     	; 0x10e0 <ISPTarget_SendByte+0x14>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    10d6:	9e bd       	out	0x2e, r25	; 46
				while (!(SPSR & (1 << SPIF)));
    10d8:	0d b4       	in	r0, 0x2d	; 45
    10da:	07 fe       	sbrs	r0, 7
    10dc:	fd cf       	rjmp	.-6      	; 0x10d8 <ISPTarget_SendByte+0xc>
    10de:	08 95       	ret
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
    10e0:	89 2f       	mov	r24, r25
    10e2:	d5 cf       	rjmp	.-86     	; 0x108e <ISPTarget_TransferSoftSPIByte>

000010e4 <ISPTarget_WaitWhileTargetBusy>:
 */
uint8_t ISPTarget_WaitWhileTargetBusy(void)
{
	do
	{
		ISPTarget_SendByte(0xF0);
    10e4:	80 ef       	ldi	r24, 0xF0	; 240
    10e6:	f2 df       	rcall	.-28     	; 0x10cc <ISPTarget_SendByte>
		ISPTarget_SendByte(0x00);
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	f0 df       	rcall	.-32     	; 0x10cc <ISPTarget_SendByte>
		ISPTarget_SendByte(0x00);
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	ee df       	rcall	.-36     	; 0x10cc <ISPTarget_SendByte>
		 *
		 *  \return Received byte of data from the attached target
		 */
		static inline uint8_t ISPTarget_ReceiveByte(void)
		{
			if (HardwareSPIMode)
    10f0:	80 91 29 01 	lds	r24, 0x0129
    10f4:	88 23       	and	r24, r24
    10f6:	31 f0       	breq	.+12     	; 0x1104 <ISPTarget_WaitWhileTargetBusy+0x20>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
    10f8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    10fa:	0d b4       	in	r0, 0x2d	; 45
    10fc:	07 fe       	sbrs	r0, 7
    10fe:	fd cf       	rjmp	.-6      	; 0x10fa <ISPTarget_WaitWhileTargetBusy+0x16>
				return SPDR;
    1100:	8e b5       	in	r24, 0x2e	; 46
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <ISPTarget_WaitWhileTargetBusy+0x24>
			  return SPI_ReceiveByte();
			else
			  return ISPTarget_TransferSoftSPIByte(0x00);
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	c3 df       	rcall	.-122    	; 0x108e <ISPTarget_TransferSoftSPIByte>
	}
	while ((ISPTarget_ReceiveByte() & 0x01) && !(TimeoutExpired));
    1108:	80 ff       	sbrs	r24, 0
    110a:	03 c0       	rjmp	.+6      	; 0x1112 <ISPTarget_WaitWhileTargetBusy+0x2e>
    110c:	8a b5       	in	r24, 0x2a	; 42
    110e:	88 23       	and	r24, r24
    1110:	49 f3       	breq	.-46     	; 0x10e4 <ISPTarget_WaitWhileTargetBusy>

	return (TimeoutExpired) ? STATUS_RDY_BSY_TOUT : STATUS_CMD_OK;
    1112:	8a b5       	in	r24, 0x2a	; 42
    1114:	81 11       	cpse	r24, r1
    1116:	81 e8       	ldi	r24, 0x81	; 129
}
    1118:	08 95       	ret

0000111a <ISPTarget_LoadExtendedAddress>:
 *  64KB boundary. This sends the command with the correct address as indicated by the current address
 *  pointer variable set by the host when a SET ADDRESS command is issued.
 */
void ISPTarget_LoadExtendedAddress(void)
{
	ISPTarget_SendByte(LOAD_EXTENDED_ADDRESS_CMD);
    111a:	8d e4       	ldi	r24, 0x4D	; 77
    111c:	d7 df       	rcall	.-82     	; 0x10cc <ISPTarget_SendByte>
	ISPTarget_SendByte(0x00);
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	d5 df       	rcall	.-86     	; 0x10cc <ISPTarget_SendByte>
	ISPTarget_SendByte((CurrentAddress & 0x00FF0000) >> 16);
    1122:	80 91 48 01 	lds	r24, 0x0148
    1126:	d2 df       	rcall	.-92     	; 0x10cc <ISPTarget_SendByte>
	ISPTarget_SendByte(0x00);
    1128:	80 e0       	ldi	r24, 0x00	; 0
}
    112a:	d0 cf       	rjmp	.-96     	; 0x10cc <ISPTarget_SendByte>

0000112c <ISPTarget_WaitForProgComplete>:
uint8_t ISPTarget_WaitForProgComplete(const uint8_t ProgrammingMode,
                                      const uint16_t PollAddress,
                                      const uint8_t PollValue,
                                      const uint8_t DelayMS,
                                      const uint8_t ReadMemCommand)
{
    112c:	ff 92       	push	r15
    112e:	0f 93       	push	r16
    1130:	1f 93       	push	r17
    1132:	cf 93       	push	r28
    1134:	df 93       	push	r29
    1136:	eb 01       	movw	r28, r22
    1138:	f4 2e       	mov	r15, r20
	uint8_t ProgrammingStatus = STATUS_CMD_OK;

	/* Determine method of Programming Complete check */
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	8e 77       	andi	r24, 0x7E	; 126
    113e:	88 30       	cpi	r24, 0x08	; 8
    1140:	91 05       	cpc	r25, r1
    1142:	99 f1       	breq	.+102    	; 0x11aa <ISPTarget_WaitForProgComplete+0x7e>
    1144:	89 30       	cpi	r24, 0x09	; 9
    1146:	91 05       	cpc	r25, r1
    1148:	34 f4       	brge	.+12     	; 0x1156 <ISPTarget_WaitForProgComplete+0x2a>
    114a:	82 30       	cpi	r24, 0x02	; 2
    114c:	91 05       	cpc	r25, r1
    114e:	59 f0       	breq	.+22     	; 0x1166 <ISPTarget_WaitForProgComplete+0x3a>
    1150:	04 97       	sbiw	r24, 0x04	; 4
    1152:	69 f5       	brne	.+90     	; 0x11ae <ISPTarget_WaitForProgComplete+0x82>
    1154:	0b c0       	rjmp	.+22     	; 0x116c <ISPTarget_WaitForProgComplete+0x40>
    1156:	80 32       	cpi	r24, 0x20	; 32
    1158:	91 05       	cpc	r25, r1
    115a:	41 f0       	breq	.+16     	; 0x116c <ISPTarget_WaitForProgComplete+0x40>
    115c:	80 34       	cpi	r24, 0x40	; 64
    115e:	91 05       	cpc	r25, r1
    1160:	21 f1       	breq	.+72     	; 0x11aa <ISPTarget_WaitForProgComplete+0x7e>
    1162:	40 97       	sbiw	r24, 0x10	; 16
    1164:	21 f5       	brne	.+72     	; 0x11ae <ISPTarget_WaitForProgComplete+0x82>
	{
		case PROG_MODE_WORD_TIMEDELAY_MASK:
		case PROG_MODE_PAGED_TIMEDELAY_MASK:
			ISPProtocol_DelayMS(DelayMS);
    1166:	82 2f       	mov	r24, r18
    1168:	ab da       	rcall	.-2730   	; 0x6c0 <ISPProtocol_DelayMS>
    116a:	21 c0       	rjmp	.+66     	; 0x11ae <ISPTarget_WaitForProgComplete+0x82>
		case PROG_MODE_WORD_VALUE_MASK:
		case PROG_MODE_PAGED_VALUE_MASK:
			do
			{
				ISPTarget_SendByte(ReadMemCommand);
				ISPTarget_SendByte(PollAddress >> 8);
    116c:	8d 2f       	mov	r24, r29
    116e:	99 27       	eor	r25, r25
    1170:	18 2f       	mov	r17, r24
			break;
		case PROG_MODE_WORD_VALUE_MASK:
		case PROG_MODE_PAGED_VALUE_MASK:
			do
			{
				ISPTarget_SendByte(ReadMemCommand);
    1172:	80 2f       	mov	r24, r16
    1174:	ab df       	rcall	.-170    	; 0x10cc <ISPTarget_SendByte>
				ISPTarget_SendByte(PollAddress >> 8);
    1176:	81 2f       	mov	r24, r17
    1178:	a9 df       	rcall	.-174    	; 0x10cc <ISPTarget_SendByte>
				ISPTarget_SendByte(PollAddress & 0xFF);
    117a:	8c 2f       	mov	r24, r28
    117c:	a7 df       	rcall	.-178    	; 0x10cc <ISPTarget_SendByte>
		 *
		 *  \return Received byte of data from the attached target
		 */
		static inline uint8_t ISPTarget_TransferByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
    117e:	80 91 29 01 	lds	r24, 0x0129
    1182:	88 23       	and	r24, r24
    1184:	31 f0       	breq	.+12     	; 0x1192 <ISPTarget_WaitForProgComplete+0x66>
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1186:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    1188:	0d b4       	in	r0, 0x2d	; 45
    118a:	07 fe       	sbrs	r0, 7
    118c:	fd cf       	rjmp	.-6      	; 0x1188 <ISPTarget_WaitForProgComplete+0x5c>
				return SPDR;
    118e:	8e b5       	in	r24, 0x2e	; 46
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <ISPTarget_WaitForProgComplete+0x6a>
			  return SPI_TransferByte(Byte);
			else
			  return ISPTarget_TransferSoftSPIByte(Byte);
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	7c df       	rcall	.-264    	; 0x108e <ISPTarget_TransferSoftSPIByte>
			}
			while ((ISPTarget_TransferByte(0x00) == PollValue) && !(TimeoutExpired));
    1196:	8f 15       	cp	r24, r15
    1198:	19 f4       	brne	.+6      	; 0x11a0 <ISPTarget_WaitForProgComplete+0x74>
    119a:	8a b5       	in	r24, 0x2a	; 42
    119c:	88 23       	and	r24, r24
    119e:	49 f3       	breq	.-46     	; 0x1172 <ISPTarget_WaitForProgComplete+0x46>

			if (TimeoutExpired)
    11a0:	8a b5       	in	r24, 0x2a	; 42
    11a2:	88 23       	and	r24, r24
    11a4:	21 f0       	breq	.+8      	; 0x11ae <ISPTarget_WaitForProgComplete+0x82>
    11a6:	80 e8       	ldi	r24, 0x80	; 128
    11a8:	03 c0       	rjmp	.+6      	; 0x11b0 <ISPTarget_WaitForProgComplete+0x84>
			 ProgrammingStatus = STATUS_CMD_TOUT;

			break;
		case PROG_MODE_WORD_READYBUSY_MASK:
		case PROG_MODE_PAGED_READYBUSY_MASK:
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
    11aa:	9c df       	rcall	.-200    	; 0x10e4 <ISPTarget_WaitWhileTargetBusy>
    11ac:	01 c0       	rjmp	.+2      	; 0x11b0 <ISPTarget_WaitForProgComplete+0x84>
    11ae:	80 e0       	ldi	r24, 0x00	; 0
			break;
	}

	return ProgrammingStatus;
}
    11b0:	df 91       	pop	r29
    11b2:	cf 91       	pop	r28
    11b4:	1f 91       	pop	r17
    11b6:	0f 91       	pop	r16
    11b8:	ff 90       	pop	r15
    11ba:	08 95       	ret

000011bc <ISPTarget_ChangeTargetResetLine>:
 *
 *  \param[in] ResetTarget  Boolean true when the target should be held in reset, false otherwise
 */
void ISPTarget_ChangeTargetResetLine(const bool ResetTarget)
{
	if (ResetTarget)
    11bc:	88 23       	and	r24, r24
    11be:	39 f0       	breq	.+14     	; 0x11ce <ISPTarget_ChangeTargetResetLine+0x12>
	{
		AUX_LINE_DDR |= AUX_LINE_MASK;
    11c0:	24 9a       	sbi	0x04, 4	; 4

		if (!(V2Params_GetParameterValue(PARAM_RESET_POLARITY)))
    11c2:	8e e9       	ldi	r24, 0x9E	; 158
    11c4:	4c da       	rcall	.-2920   	; 0x65e <V2Params_GetParameterValue>
    11c6:	88 23       	and	r24, r24
    11c8:	19 f4       	brne	.+6      	; 0x11d0 <ISPTarget_ChangeTargetResetLine+0x14>
		  AUX_LINE_PORT |=  AUX_LINE_MASK;
    11ca:	2c 9a       	sbi	0x05, 4	; 5
    11cc:	08 95       	ret
		else
		  AUX_LINE_PORT &= ~AUX_LINE_MASK;
	}
	else
	{
		AUX_LINE_DDR  &= ~AUX_LINE_MASK;
    11ce:	24 98       	cbi	0x04, 4	; 4
		AUX_LINE_PORT &= ~AUX_LINE_MASK;
    11d0:	2c 98       	cbi	0x05, 4	; 5
    11d2:	08 95       	ret

000011d4 <ISPTarget_EnableTargetISP>:
/** Initializes the appropriate SPI driver (hardware or software, depending on the selected ISP speed) ready for
 *  communication with the attached target.
 */
void ISPTarget_EnableTargetISP(void)
{
	uint8_t SCKDuration = V2Params_GetParameterValue(PARAM_SCK_DURATION);
    11d4:	88 e9       	ldi	r24, 0x98	; 152
    11d6:	43 da       	rcall	.-2938   	; 0x65e <V2Params_GetParameterValue>
    11d8:	e8 2f       	mov	r30, r24

	if (SCKDuration < sizeof(SPIMaskFromSCKDuration))
    11da:	87 30       	cpi	r24, 0x07	; 7
    11dc:	d8 f4       	brcc	.+54     	; 0x1214 <ISPTarget_EnableTargetISP+0x40>
	{
		HardwareSPIMode = true;
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	80 93 29 01 	sts	0x0129, r24

		SPI_Init(pgm_read_byte(&SPIMaskFromSCKDuration[SCKDuration]) | SPI_ORDER_MSB_FIRST |
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	e4 5b       	subi	r30, 0xB4	; 180
    11e8:	fd 4f       	sbci	r31, 0xFD	; 253
    11ea:	e4 91       	lpm	r30, Z+
    11ec:	e0 61       	ori	r30, 0x10	; 16
			 *                         \c SPI_SCK_*, \c SPI_SAMPLE_*, \c SPI_ORDER_* and \c SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
    11ee:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
    11f0:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
    11f2:	84 b1       	in	r24, 0x04	; 4
    11f4:	86 60       	ori	r24, 0x06	; 6
    11f6:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
    11f8:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
    11fa:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
    11fc:	e6 ff       	sbrs	r30, 6
    11fe:	03 c0       	rjmp	.+6      	; 0x1206 <ISPTarget_EnableTargetISP+0x32>
				  SPSR |= (1 << SPI2X);
    1200:	8d b5       	in	r24, 0x2d	; 45
    1202:	81 60       	ori	r24, 0x01	; 1
    1204:	02 c0       	rjmp	.+4      	; 0x120a <ISPTarget_EnableTargetISP+0x36>
				else
				  SPSR &= ~(1 << SPI2X);
    1206:	8d b5       	in	r24, 0x2d	; 45
    1208:	8e 7f       	andi	r24, 0xFE	; 254
    120a:	8d bd       	out	0x2d, r24	; 45

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
    120c:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
    120e:	e0 64       	ori	r30, 0x40	; 64
    1210:	ec bd       	out	0x2c, r30	; 44
    1212:	08 95       	ret
		                       SPI_SCK_LEAD_RISING | SPI_SAMPLE_LEADING | SPI_MODE_MASTER);
	}
	else
	{
		HardwareSPIMode = false;
    1214:	10 92 29 01 	sts	0x0129, r1

		DDRB  |= ((1 << 1) | (1 << 2));
    1218:	84 b1       	in	r24, 0x04	; 4
    121a:	86 60       	ori	r24, 0x06	; 6
    121c:	84 b9       	out	0x04, r24	; 4
		PORTB |= ((1 << 0) | (1 << 3));
    121e:	85 b1       	in	r24, 0x05	; 5
    1220:	89 60       	ori	r24, 0x09	; 9
    1222:	85 b9       	out	0x05, r24	; 5

		ISPTarget_ConfigureSoftwareSPI(SCKDuration);
    1224:	8e 2f       	mov	r24, r30
    1226:	1b cf       	rjmp	.-458    	; 0x105e <ISPTarget_ConfigureSoftwareSPI>

00001228 <XPROGProtocol_SetMode>:

/** Handler for the CMD_XPROG_SETMODE command, which sets the programmer-to-target protocol used for PDI/TPI
 *  programming.
 */
void XPROGProtocol_SetMode(void)
{
    1228:	df 93       	push	r29
    122a:	cf 93       	push	r28
    122c:	0f 92       	push	r0
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
	struct
	{
		uint8_t Protocol;
	} SetMode_XPROG_Params;

	Endpoint_Read_Stream_LE(&SetMode_XPROG_Params, sizeof(SetMode_XPROG_Params), NULL);
    1232:	ce 01       	movw	r24, r28
    1234:	01 96       	adiw	r24, 0x01	; 1
    1236:	61 e0       	ldi	r22, 0x01	; 1
    1238:	70 e0       	ldi	r23, 0x00	; 0
    123a:	40 e0       	ldi	r20, 0x00	; 0
    123c:	50 e0       	ldi	r21, 0x00	; 0
    123e:	0e 94 71 11 	call	0x22e2	; 0x22e2 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1242:	80 91 e8 00 	lds	r24, 0x00E8
    1246:	8b 77       	andi	r24, 0x7B	; 123
    1248:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    124c:	82 e0       	ldi	r24, 0x02	; 2
    124e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
    1252:	80 91 ec 00 	lds	r24, 0x00EC
    1256:	80 68       	ori	r24, 0x80	; 128
    1258:	80 93 ec 00 	sts	0x00EC, r24

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	XPROG_SelectedProtocol = SetMode_XPROG_Params.Protocol;
    125c:	99 81       	ldd	r25, Y+1	; 0x01
    125e:	90 93 44 01 	sts	0x0144, r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1262:	81 e5       	ldi	r24, 0x51	; 81
    1264:	80 93 f1 00 	sts	0x00F1, r24

	Endpoint_Write_8(CMD_XPROG_SETMODE);
	Endpoint_Write_8((SetMode_XPROG_Params.Protocol != XPRG_PROTOCOL_JTAG) ? STATUS_CMD_OK : STATUS_CMD_FAILED);
    1268:	91 30       	cpi	r25, 0x01	; 1
    126a:	11 f4       	brne	.+4      	; 0x1270 <XPROGProtocol_SetMode+0x48>
    126c:	80 ec       	ldi	r24, 0xC0	; 192
    126e:	01 c0       	rjmp	.+2      	; 0x1272 <XPROGProtocol_SetMode+0x4a>
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1276:	80 91 e8 00 	lds	r24, 0x00E8
    127a:	8e 77       	andi	r24, 0x7E	; 126
    127c:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();
}
    1280:	0f 90       	pop	r0
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret

00001288 <XPROGProtocol_WriteMemory>:
	Endpoint_ClearIN();
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(void)
{
    1288:	af 92       	push	r10
    128a:	bf 92       	push	r11
    128c:	cf 92       	push	r12
    128e:	df 92       	push	r13
    1290:	ef 92       	push	r14
    1292:	ff 92       	push	r15
    1294:	0f 93       	push	r16
    1296:	1f 93       	push	r17
    1298:	df 93       	push	r29
    129a:	cf 93       	push	r28
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
    12a0:	c8 50       	subi	r28, 0x08	; 8
    12a2:	d1 40       	sbci	r29, 0x01	; 1
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	cd bf       	out	0x3d, r28	; 61
		uint32_t Address;
		uint16_t Length;
		uint8_t  ProgData[256];
	} WriteMemory_XPROG_Params;

	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params, (sizeof(WriteMemory_XPROG_Params) -
    12ae:	ce 01       	movw	r24, r28
    12b0:	01 96       	adiw	r24, 0x01	; 1
    12b2:	68 e0       	ldi	r22, 0x08	; 8
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	40 e0       	ldi	r20, 0x00	; 0
    12b8:	50 e0       	ldi	r21, 0x00	; 0
    12ba:	0e 94 71 11 	call	0x22e2	; 0x22e2 <Endpoint_Read_Stream_LE>
				{
					uint32_t DWord;
					uint8_t  Bytes[4];
				} Data;

				Data.DWord = DWord;
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	9c 81       	ldd	r25, Y+4	; 0x04
    12c2:	ad 81       	ldd	r26, Y+5	; 0x05
    12c4:	be 81       	ldd	r27, Y+6	; 0x06

				Temp = Data.Bytes[0];
    12c6:	28 2f       	mov	r18, r24
				Data.Bytes[0] = Data.Bytes[3];
    12c8:	8b 2f       	mov	r24, r27
				Data.Bytes[3] = Temp;
    12ca:	b2 2f       	mov	r27, r18

				Temp = Data.Bytes[1];
    12cc:	29 2f       	mov	r18, r25
				Data.Bytes[1] = Data.Bytes[2];
    12ce:	9a 2f       	mov	r25, r26
				Data.Bytes[2] = Temp;
    12d0:	a2 2f       	mov	r26, r18
	                                                    sizeof(WriteMemory_XPROG_Params).ProgData), NULL);
	WriteMemory_XPROG_Params.Address = SwapEndian_32(WriteMemory_XPROG_Params.Address);
    12d2:	8b 83       	std	Y+3, r24	; 0x03
    12d4:	9c 83       	std	Y+4, r25	; 0x04
    12d6:	ad 83       	std	Y+5, r26	; 0x05
    12d8:	be 83       	std	Y+6, r27	; 0x06
				{
					uint16_t Word;
					uint8_t  Bytes[2];
				} Data;

				Data.Word = Word;
    12da:	6f 81       	ldd	r22, Y+7	; 0x07
    12dc:	78 85       	ldd	r23, Y+8	; 0x08

				Temp = Data.Bytes[0];
    12de:	86 2f       	mov	r24, r22
				Data.Bytes[0] = Data.Bytes[1];
    12e0:	67 2f       	mov	r22, r23
				Data.Bytes[1] = Temp;
    12e2:	78 2f       	mov	r23, r24
	WriteMemory_XPROG_Params.Length  = SwapEndian_16(WriteMemory_XPROG_Params.Length);
    12e4:	78 87       	std	Y+8, r23	; 0x08
    12e6:	6f 83       	std	Y+7, r22	; 0x07
	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length, NULL);
    12e8:	ce 01       	movw	r24, r28
    12ea:	09 96       	adiw	r24, 0x09	; 9
    12ec:	40 e0       	ldi	r20, 0x00	; 0
    12ee:	50 e0       	ldi	r21, 0x00	; 0
    12f0:	f8 d7       	rcall	.+4080   	; 0x22e2 <Endpoint_Read_Stream_LE>

	// The driver will terminate transfers that are a round multiple of the endpoint bank in size with a ZLP, need
	// to catch this and discard it before continuing on with packet processing to prevent communication issues
	if (((sizeof(uint8_t) + sizeof(WriteMemory_XPROG_Params) - sizeof(WriteMemory_XPROG_Params.ProgData)) +
    12f2:	8f 81       	ldd	r24, Y+7	; 0x07
    12f4:	98 85       	ldd	r25, Y+8	; 0x08
    12f6:	09 96       	adiw	r24, 0x09	; 9
    12f8:	8f 73       	andi	r24, 0x3F	; 63
    12fa:	90 70       	andi	r25, 0x00	; 0
    12fc:	89 2b       	or	r24, r25
    12fe:	31 f4       	brne	.+12     	; 0x130c <XPROGProtocol_WriteMemory+0x84>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1300:	80 91 e8 00 	lds	r24, 0x00E8
    1304:	8b 77       	andi	r24, 0x7B	; 123
    1306:	80 93 e8 00 	sts	0x00E8, r24
	    WriteMemory_XPROG_Params.Length) % AVRISP_DATA_EPSIZE == 0)
	{
		Endpoint_ClearOUT();
		Endpoint_WaitUntilReady();
    130a:	25 d6       	rcall	.+3146   	; 0x1f56 <Endpoint_WaitUntilReady>
    130c:	80 91 e8 00 	lds	r24, 0x00E8
    1310:	8b 77       	andi	r24, 0x7B	; 123
    1312:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1316:	82 e0       	ldi	r24, 0x02	; 2
    1318:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
    131c:	80 91 ec 00 	lds	r24, 0x00EC
    1320:	80 68       	ori	r24, 0x80	; 128
    1322:	80 93 ec 00 	sts	0x00EC, r24
	
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
    1326:	80 91 44 01 	lds	r24, 0x0144
    132a:	88 23       	and	r24, r24
    132c:	79 f5       	brne	.+94     	; 0x138c <XPROGProtocol_WriteMemory+0x104>
		uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
		uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
		uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
		bool    PagedMemory      = true;

		switch (WriteMemory_XPROG_Params.MemoryType)
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	83 30       	cpi	r24, 0x03	; 3
    1332:	a9 f0       	breq	.+42     	; 0x135e <XPROGProtocol_WriteMemory+0xd6>
    1334:	84 30       	cpi	r24, 0x04	; 4
    1336:	28 f4       	brcc	.+10     	; 0x1342 <XPROGProtocol_WriteMemory+0xba>
    1338:	81 30       	cpi	r24, 0x01	; 1
    133a:	69 f0       	breq	.+26     	; 0x1356 <XPROGProtocol_WriteMemory+0xce>
    133c:	82 30       	cpi	r24, 0x02	; 2
    133e:	a9 f4       	brne	.+42     	; 0x136a <XPROGProtocol_WriteMemory+0xe2>
    1340:	0c c0       	rjmp	.+24     	; 0x135a <XPROGProtocol_WriteMemory+0xd2>
    1342:	85 30       	cpi	r24, 0x05	; 5
    1344:	31 f0       	breq	.+12     	; 0x1352 <XPROGProtocol_WriteMemory+0xca>
    1346:	85 30       	cpi	r24, 0x05	; 5
    1348:	08 f4       	brcc	.+2      	; 0x134c <XPROGProtocol_WriteMemory+0xc4>
    134a:	4c c0       	rjmp	.+152    	; 0x13e4 <XPROGProtocol_WriteMemory+0x15c>
    134c:	86 30       	cpi	r24, 0x06	; 6
    134e:	69 f4       	brne	.+26     	; 0x136a <XPROGProtocol_WriteMemory+0xe2>
    1350:	0a c0       	rjmp	.+20     	; 0x1366 <XPROGProtocol_WriteMemory+0xde>
    1352:	88 e0       	ldi	r24, 0x08	; 8
    1354:	48 c0       	rjmp	.+144    	; 0x13e6 <XPROGProtocol_WriteMemory+0x15e>
    1356:	44 e2       	ldi	r20, 0x24	; 36
    1358:	09 c0       	rjmp	.+18     	; 0x136c <XPROGProtocol_WriteMemory+0xe4>
    135a:	4c e2       	ldi	r20, 0x2C	; 44
    135c:	07 c0       	rjmp	.+14     	; 0x136c <XPROGProtocol_WriteMemory+0xe4>
			case XPRG_MEM_TYPE_APPL:
				WriteCommand     = XMEGA_NVM_CMD_WRITEAPPSECPAGE;
				break;
			case XPRG_MEM_TYPE_BOOT:
				WriteCommand     = XMEGA_NVM_CMD_WRITEBOOTSECPAGE;
				break;
    135e:	45 e3       	ldi	r20, 0x35	; 53
    1360:	83 e3       	ldi	r24, 0x33	; 51
    1362:	66 e3       	ldi	r22, 0x36	; 54
    1364:	05 c0       	rjmp	.+10     	; 0x1370 <XPROGProtocol_WriteMemory+0xe8>
			case XPRG_MEM_TYPE_EEPROM:
				WriteCommand     = XMEGA_NVM_CMD_ERASEWRITEEEPROMPAGE;
				WriteBuffCommand = XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF;
				EraseBuffCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF;
				break;
    1366:	4a e1       	ldi	r20, 0x1A	; 26
    1368:	01 c0       	rjmp	.+2      	; 0x136c <XPROGProtocol_WriteMemory+0xe4>
			case XPRG_MEM_TYPE_USERSIG:
				WriteCommand     = XMEGA_NVM_CMD_WRITEUSERSIG;
				break;
    136a:	4e e2       	ldi	r20, 0x2E	; 46
    136c:	83 e2       	ldi	r24, 0x23	; 35
    136e:	66 e2       	ldi	r22, 0x26	; 38
				PagedMemory      = false;
				break;
		}

		/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
		if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
    1370:	eb 80       	ldd	r14, Y+3	; 0x03
    1372:	fc 80       	ldd	r15, Y+4	; 0x04
    1374:	0d 81       	ldd	r16, Y+5	; 0x05
    1376:	1e 81       	ldd	r17, Y+6	; 0x06
    1378:	af 80       	ldd	r10, Y+7	; 0x07
    137a:	b8 84       	ldd	r11, Y+8	; 0x08
    137c:	2a 81       	ldd	r18, Y+2	; 0x02
    137e:	99 e0       	ldi	r25, 0x09	; 9
    1380:	c9 2e       	mov	r12, r25
    1382:	d1 2c       	mov	r13, r1
    1384:	cc 0e       	add	r12, r28
    1386:	dd 1e       	adc	r13, r29
    1388:	f5 d2       	rcall	.+1514   	; 0x1974 <XMEGANVM_WritePageMemory>
    138a:	08 c0       	rjmp	.+16     	; 0x139c <XPROGProtocol_WriteMemory+0x114>
		}
	}
	else
	{
		/* Send write command to the TPI device, indicate timeout if occurred */
		if (!(TINYNVM_WriteMemory(WriteMemory_XPROG_Params.Address, WriteMemory_XPROG_Params.ProgData,
    138c:	4f 81       	ldd	r20, Y+7	; 0x07
    138e:	58 85       	ldd	r21, Y+8	; 0x08
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	9c 81       	ldd	r25, Y+4	; 0x04
    1394:	be 01       	movw	r22, r28
    1396:	67 5f       	subi	r22, 0xF7	; 247
    1398:	7f 4f       	sbci	r23, 0xFF	; 255
    139a:	f7 d4       	rcall	.+2542   	; 0x1d8a <TINYNVM_WriteMemory>
    139c:	88 23       	and	r24, r24
    139e:	11 f0       	breq	.+4      	; 0x13a4 <XPROGProtocol_WriteMemory+0x11c>
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	01 c0       	rjmp	.+2      	; 0x13a6 <XPROGProtocol_WriteMemory+0x11e>
    13a4:	93 e0       	ldi	r25, 0x03	; 3
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    13a6:	80 e5       	ldi	r24, 0x50	; 80
    13a8:	80 93 f1 00 	sts	0x00F1, r24
    13ac:	84 e0       	ldi	r24, 0x04	; 4
    13ae:	80 93 f1 00 	sts	0x00F1, r24
    13b2:	90 93 f1 00 	sts	0x00F1, r25
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13b6:	80 91 e8 00 	lds	r24, 0x00E8
    13ba:	8e 77       	andi	r24, 0x7E	; 126
    13bc:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPRG_CMD_WRITE_MEM);
	Endpoint_Write_8(ReturnStatus);
	Endpoint_ClearIN();
}
    13c0:	c8 5f       	subi	r28, 0xF8	; 248
    13c2:	de 4f       	sbci	r29, 0xFE	; 254
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	f8 94       	cli
    13c8:	de bf       	out	0x3e, r29	; 62
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	cd bf       	out	0x3d, r28	; 61
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	1f 91       	pop	r17
    13d4:	0f 91       	pop	r16
    13d6:	ff 90       	pop	r15
    13d8:	ef 90       	pop	r14
    13da:	df 90       	pop	r13
    13dc:	cf 90       	pop	r12
    13de:	bf 90       	pop	r11
    13e0:	af 90       	pop	r10
    13e2:	08 95       	ret
    13e4:	8c e4       	ldi	r24, 0x4C	; 76
				PagedMemory      = false;
				break;
		}

		/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
		if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
    13e6:	4b 81       	ldd	r20, Y+3	; 0x03
    13e8:	5c 81       	ldd	r21, Y+4	; 0x04
    13ea:	6d 81       	ldd	r22, Y+5	; 0x05
    13ec:	7e 81       	ldd	r23, Y+6	; 0x06
    13ee:	29 85       	ldd	r18, Y+9	; 0x09
    13f0:	28 d3       	rcall	.+1616   	; 0x1a42 <XMEGANVM_WriteByteMemory>
    13f2:	d4 cf       	rjmp	.-88     	; 0x139c <XPROGProtocol_WriteMemory+0x114>

000013f4 <XPROGProtocol_ReadMemory>:

/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(void)
{
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	cd b7       	in	r28, 0x3d	; 61
    13fa:	de b7       	in	r29, 0x3e	; 62
    13fc:	c7 50       	subi	r28, 0x07	; 7
    13fe:	d1 40       	sbci	r29, 0x01	; 1
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	f8 94       	cli
    1404:	de bf       	out	0x3e, r29	; 62
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	cd bf       	out	0x3d, r28	; 61
		uint8_t  MemoryType;
		uint32_t Address;
		uint16_t Length;
	} ReadMemory_XPROG_Params;

	Endpoint_Read_Stream_LE(&ReadMemory_XPROG_Params, sizeof(ReadMemory_XPROG_Params), NULL);
    140a:	ce 01       	movw	r24, r28
    140c:	01 96       	adiw	r24, 0x01	; 1
    140e:	67 e0       	ldi	r22, 0x07	; 7
    1410:	70 e0       	ldi	r23, 0x00	; 0
    1412:	40 e0       	ldi	r20, 0x00	; 0
    1414:	50 e0       	ldi	r21, 0x00	; 0
    1416:	65 d7       	rcall	.+3786   	; 0x22e2 <Endpoint_Read_Stream_LE>
				{
					uint32_t DWord;
					uint8_t  Bytes[4];
				} Data;

				Data.DWord = DWord;
    1418:	2a 81       	ldd	r18, Y+2	; 0x02
    141a:	3b 81       	ldd	r19, Y+3	; 0x03
    141c:	4c 81       	ldd	r20, Y+4	; 0x04
    141e:	5d 81       	ldd	r21, Y+5	; 0x05

				Temp = Data.Bytes[0];
    1420:	82 2f       	mov	r24, r18
				Data.Bytes[0] = Data.Bytes[3];
    1422:	25 2f       	mov	r18, r21
				Data.Bytes[3] = Temp;
    1424:	58 2f       	mov	r21, r24

				Temp = Data.Bytes[1];
    1426:	83 2f       	mov	r24, r19
				Data.Bytes[1] = Data.Bytes[2];
    1428:	34 2f       	mov	r19, r20
				Data.Bytes[2] = Temp;
    142a:	48 2f       	mov	r20, r24
	ReadMemory_XPROG_Params.Address = SwapEndian_32(ReadMemory_XPROG_Params.Address);
    142c:	2a 83       	std	Y+2, r18	; 0x02
    142e:	3b 83       	std	Y+3, r19	; 0x03
    1430:	4c 83       	std	Y+4, r20	; 0x04
    1432:	5d 83       	std	Y+5, r21	; 0x05
				{
					uint16_t Word;
					uint8_t  Bytes[2];
				} Data;

				Data.Word = Word;
    1434:	ee 81       	ldd	r30, Y+6	; 0x06
    1436:	ff 81       	ldd	r31, Y+7	; 0x07

				Temp = Data.Bytes[0];
    1438:	8e 2f       	mov	r24, r30
				Data.Bytes[0] = Data.Bytes[1];
    143a:	ef 2f       	mov	r30, r31
				Data.Bytes[1] = Temp;
    143c:	f8 2f       	mov	r31, r24
	ReadMemory_XPROG_Params.Length  = SwapEndian_16(ReadMemory_XPROG_Params.Length);
    143e:	ff 83       	std	Y+7, r31	; 0x07
    1440:	ee 83       	std	Y+6, r30	; 0x06
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1442:	80 91 e8 00 	lds	r24, 0x00E8
    1446:	8b 77       	andi	r24, 0x7B	; 123
    1448:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    144c:	82 e0       	ldi	r24, 0x02	; 2
    144e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
    1452:	80 91 ec 00 	lds	r24, 0x00EC
    1456:	80 68       	ori	r24, 0x80	; 128
    1458:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ReadBuffer[256];

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
    145c:	80 91 44 01 	lds	r24, 0x0144
    1460:	de 01       	movw	r26, r28
    1462:	18 96       	adiw	r26, 0x08	; 8
    1464:	88 23       	and	r24, r24
    1466:	31 f4       	brne	.+12     	; 0x1474 <XPROGProtocol_ReadMemory+0x80>
	{
		/* Read the PDI target's memory, indicate timeout if occurred */
		if (!(XMEGANVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Length)))
    1468:	ca 01       	movw	r24, r20
    146a:	b9 01       	movw	r22, r18
    146c:	ad 01       	movw	r20, r26
    146e:	9f 01       	movw	r18, r30
    1470:	0a d3       	rcall	.+1556   	; 0x1a86 <XMEGANVM_ReadMemory>
    1472:	04 c0       	rjmp	.+8      	; 0x147c <XPROGProtocol_ReadMemory+0x88>
		  ReturnStatus = XPRG_ERR_TIMEOUT;
	}
	else
	{
		/* Read the TPI target's memory, indicate timeout if occurred */
		if (!(TINYNVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Length)))
    1474:	c9 01       	movw	r24, r18
    1476:	bd 01       	movw	r22, r26
    1478:	af 01       	movw	r20, r30
    147a:	bf d4       	rcall	.+2430   	; 0x1dfa <TINYNVM_ReadMemory>
    147c:	88 23       	and	r24, r24
    147e:	11 f4       	brne	.+4      	; 0x1484 <XPROGProtocol_ReadMemory+0x90>
    1480:	93 e0       	ldi	r25, 0x03	; 3
    1482:	01 c0       	rjmp	.+2      	; 0x1486 <XPROGProtocol_ReadMemory+0x92>
    1484:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1486:	80 e5       	ldi	r24, 0x50	; 80
    1488:	80 93 f1 00 	sts	0x00F1, r24
    148c:	85 e0       	ldi	r24, 0x05	; 5
    148e:	80 93 f1 00 	sts	0x00F1, r24
    1492:	90 93 f1 00 	sts	0x00F1, r25

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPRG_CMD_READ_MEM);
	Endpoint_Write_8(ReturnStatus);

	if (ReturnStatus == XPRG_ERR_OK)
    1496:	99 23       	and	r25, r25
    1498:	39 f4       	brne	.+14     	; 0x14a8 <XPROGProtocol_ReadMemory+0xb4>
	  Endpoint_Write_Stream_LE(ReadBuffer, ReadMemory_XPROG_Params.Length, NULL);
    149a:	6e 81       	ldd	r22, Y+6	; 0x06
    149c:	7f 81       	ldd	r23, Y+7	; 0x07
    149e:	ce 01       	movw	r24, r28
    14a0:	08 96       	adiw	r24, 0x08	; 8
    14a2:	40 e0       	ldi	r20, 0x00	; 0
    14a4:	50 e0       	ldi	r21, 0x00	; 0
    14a6:	6a d7       	rcall	.+3796   	; 0x237c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14a8:	80 91 e8 00 	lds	r24, 0x00E8
    14ac:	8e 77       	andi	r24, 0x7E	; 126
    14ae:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_ClearIN();
}
    14b2:	c9 5f       	subi	r28, 0xF9	; 249
    14b4:	de 4f       	sbci	r29, 0xFE	; 254
    14b6:	0f b6       	in	r0, 0x3f	; 63
    14b8:	f8 94       	cli
    14ba:	de bf       	out	0x3e, r29	; 62
    14bc:	0f be       	out	0x3f, r0	; 63
    14be:	cd bf       	out	0x3d, r28	; 61
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	08 95       	ret

000014c6 <XPROGProtocol_Command>:

/** Handler for the CMD_XPROG command, which wraps up XPROG commands in a V2 wrapper which need to be
 *  removed and processed so that the underlying XPROG command can be handled.
 */
void XPROGProtocol_Command(void)
{
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	29 97       	sbiw	r28, 0x09	; 9
    14d0:	0f b6       	in	r0, 0x3f	; 63
    14d2:	f8 94       	cli
    14d4:	de bf       	out	0x3e, r29	; 62
    14d6:	0f be       	out	0x3f, r0	; 63
    14d8:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    14da:	90 91 f1 00 	lds	r25, 0x00F1
	uint8_t XPROGCommand = Endpoint_Read_8();

	switch (XPROGCommand)
    14de:	94 30       	cpi	r25, 0x04	; 4
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <XPROGProtocol_Command+0x1e>
    14e2:	b1 c0       	rjmp	.+354    	; 0x1646 <XPROGProtocol_Command+0x180>
    14e4:	95 30       	cpi	r25, 0x05	; 5
    14e6:	48 f4       	brcc	.+18     	; 0x14fa <XPROGProtocol_Command+0x34>
    14e8:	92 30       	cpi	r25, 0x02	; 2
    14ea:	91 f1       	breq	.+100    	; 0x1550 <XPROGProtocol_Command+0x8a>
    14ec:	93 30       	cpi	r25, 0x03	; 3
    14ee:	08 f0       	brcs	.+2      	; 0x14f2 <XPROGProtocol_Command+0x2c>
    14f0:	4b c0       	rjmp	.+150    	; 0x1588 <XPROGProtocol_Command+0xc2>
    14f2:	91 30       	cpi	r25, 0x01	; 1
    14f4:	09 f0       	breq	.+2      	; 0x14f8 <XPROGProtocol_Command+0x32>
    14f6:	46 c1       	rjmp	.+652    	; 0x1784 <XPROGProtocol_Command+0x2be>
    14f8:	0a c0       	rjmp	.+20     	; 0x150e <XPROGProtocol_Command+0x48>
    14fa:	96 30       	cpi	r25, 0x06	; 6
    14fc:	09 f4       	brne	.+2      	; 0x1500 <XPROGProtocol_Command+0x3a>
    14fe:	a7 c0       	rjmp	.+334    	; 0x164e <XPROGProtocol_Command+0x188>
    1500:	96 30       	cpi	r25, 0x06	; 6
    1502:	08 f4       	brcc	.+2      	; 0x1506 <XPROGProtocol_Command+0x40>
    1504:	a2 c0       	rjmp	.+324    	; 0x164a <XPROGProtocol_Command+0x184>
    1506:	97 30       	cpi	r25, 0x07	; 7
    1508:	09 f0       	breq	.+2      	; 0x150c <XPROGProtocol_Command+0x46>
    150a:	3c c1       	rjmp	.+632    	; 0x1784 <XPROGProtocol_Command+0x2be>
    150c:	e8 c0       	rjmp	.+464    	; 0x16de <XPROGProtocol_Command+0x218>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    150e:	80 91 e8 00 	lds	r24, 0x00E8
    1512:	8b 77       	andi	r24, 0x7B	; 123
    1514:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1518:	82 e0       	ldi	r24, 0x02	; 2
    151a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
    151e:	80 91 ec 00 	lds	r24, 0x00EC
    1522:	80 68       	ori	r24, 0x80	; 128
    1524:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	bool NVMBusEnabled = false;

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
    1528:	80 91 44 01 	lds	r24, 0x0144
    152c:	88 23       	and	r24, r24
    152e:	11 f4       	brne	.+4      	; 0x1534 <XPROGProtocol_Command+0x6e>
	  NVMBusEnabled = XMEGANVM_EnablePDI();
    1530:	a2 d3       	rcall	.+1860   	; 0x1c76 <XMEGANVM_EnablePDI>
    1532:	05 c0       	rjmp	.+10     	; 0x153e <XPROGProtocol_Command+0x78>
	else if (XPROG_SelectedProtocol == XPRG_PROTOCOL_TPI)
    1534:	82 30       	cpi	r24, 0x02	; 2
    1536:	11 f0       	breq	.+4      	; 0x153c <XPROGProtocol_Command+0x76>
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <XPROGProtocol_Command+0x7a>
	  NVMBusEnabled = TINYNVM_EnableTPI();
    153c:	a0 d4       	rcall	.+2368   	; 0x1e7e <TINYNVM_EnableTPI>
    153e:	98 2f       	mov	r25, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1540:	80 e5       	ldi	r24, 0x50	; 80
    1542:	80 93 f1 00 	sts	0x00F1, r24
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	80 93 f1 00 	sts	0x00F1, r24
    154c:	89 27       	eor	r24, r25
    154e:	c4 c0       	rjmp	.+392    	; 0x16d8 <XPROGProtocol_Command+0x212>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1550:	80 91 e8 00 	lds	r24, 0x00E8
    1554:	8b 77       	andi	r24, 0x7B	; 123
    1556:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    155a:	90 93 e9 00 	sts	0x00E9, r25
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
    155e:	80 91 ec 00 	lds	r24, 0x00EC
    1562:	80 68       	ori	r24, 0x80	; 128
    1564:	80 93 ec 00 	sts	0x00EC, r24
{
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
    1568:	80 91 44 01 	lds	r24, 0x0144
    156c:	88 23       	and	r24, r24
    156e:	11 f4       	brne	.+4      	; 0x1574 <XPROGProtocol_Command+0xae>
	  XMEGANVM_DisablePDI();
    1570:	78 d3       	rcall	.+1776   	; 0x1c62 <XMEGANVM_DisablePDI>
    1572:	01 c0       	rjmp	.+2      	; 0x1576 <XPROGProtocol_Command+0xb0>
	else
	  TINYNVM_DisableTPI();
    1574:	7e d4       	rcall	.+2300   	; 0x1e72 <TINYNVM_DisableTPI>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1576:	80 e5       	ldi	r24, 0x50	; 80
    1578:	80 93 f1 00 	sts	0x00F1, r24
    157c:	82 e0       	ldi	r24, 0x02	; 2
    157e:	80 93 f1 00 	sts	0x00F1, r24
    1582:	10 92 f1 00 	sts	0x00F1, r1
    1586:	f9 c0       	rjmp	.+498    	; 0x177a <XPROGProtocol_Command+0x2b4>
	{
		uint8_t  MemoryType;
		uint32_t Address;
	} Erase_XPROG_Params;

	Endpoint_Read_Stream_LE(&Erase_XPROG_Params, sizeof(Erase_XPROG_Params), NULL);
    1588:	ce 01       	movw	r24, r28
    158a:	05 96       	adiw	r24, 0x05	; 5
    158c:	65 e0       	ldi	r22, 0x05	; 5
    158e:	70 e0       	ldi	r23, 0x00	; 0
    1590:	40 e0       	ldi	r20, 0x00	; 0
    1592:	50 e0       	ldi	r21, 0x00	; 0
    1594:	a6 d6       	rcall	.+3404   	; 0x22e2 <Endpoint_Read_Stream_LE>
				{
					uint32_t DWord;
					uint8_t  Bytes[4];
				} Data;

				Data.DWord = DWord;
    1596:	4e 81       	ldd	r20, Y+6	; 0x06
    1598:	5f 81       	ldd	r21, Y+7	; 0x07
    159a:	68 85       	ldd	r22, Y+8	; 0x08
    159c:	79 85       	ldd	r23, Y+9	; 0x09

				Temp = Data.Bytes[0];
    159e:	84 2f       	mov	r24, r20
				Data.Bytes[0] = Data.Bytes[3];
    15a0:	47 2f       	mov	r20, r23
				Data.Bytes[3] = Temp;
    15a2:	78 2f       	mov	r23, r24

				Temp = Data.Bytes[1];
    15a4:	85 2f       	mov	r24, r21
				Data.Bytes[1] = Data.Bytes[2];
    15a6:	56 2f       	mov	r21, r22
				Data.Bytes[2] = Temp;
    15a8:	68 2f       	mov	r22, r24
	Erase_XPROG_Params.Address = SwapEndian_32(Erase_XPROG_Params.Address);
    15aa:	4e 83       	std	Y+6, r20	; 0x06
    15ac:	5f 83       	std	Y+7, r21	; 0x07
    15ae:	68 87       	std	Y+8, r22	; 0x08
    15b0:	79 87       	std	Y+9, r23	; 0x09
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    15b2:	80 91 e8 00 	lds	r24, 0x00E8
    15b6:	8b 77       	andi	r24, 0x7B	; 123
    15b8:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    15bc:	82 e0       	ldi	r24, 0x02	; 2
    15be:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
    15c2:	80 91 ec 00 	lds	r24, 0x00EC
    15c6:	80 68       	ori	r24, 0x80	; 128
    15c8:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t EraseCommand;

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
    15cc:	80 91 44 01 	lds	r24, 0x0144
    15d0:	9d 81       	ldd	r25, Y+5	; 0x05
    15d2:	88 23       	and	r24, r24
    15d4:	39 f5       	brne	.+78     	; 0x1624 <XPROGProtocol_Command+0x15e>
	{
		/* Determine which NVM command to send to the device depending on the memory to erase */
		switch (Erase_XPROG_Params.MemoryType)
    15d6:	94 30       	cpi	r25, 0x04	; 4
    15d8:	c1 f0       	breq	.+48     	; 0x160a <XPROGProtocol_Command+0x144>
    15da:	95 30       	cpi	r25, 0x05	; 5
    15dc:	38 f4       	brcc	.+14     	; 0x15ec <XPROGProtocol_Command+0x126>
    15de:	92 30       	cpi	r25, 0x02	; 2
    15e0:	71 f0       	breq	.+28     	; 0x15fe <XPROGProtocol_Command+0x138>
    15e2:	93 30       	cpi	r25, 0x03	; 3
    15e4:	80 f4       	brcc	.+32     	; 0x1606 <XPROGProtocol_Command+0x140>
    15e6:	91 30       	cpi	r25, 0x01	; 1
    15e8:	d1 f4       	brne	.+52     	; 0x161e <XPROGProtocol_Command+0x158>
    15ea:	0b c0       	rjmp	.+22     	; 0x1602 <XPROGProtocol_Command+0x13c>
    15ec:	96 30       	cpi	r25, 0x06	; 6
    15ee:	89 f0       	breq	.+34     	; 0x1612 <XPROGProtocol_Command+0x14c>
    15f0:	96 30       	cpi	r25, 0x06	; 6
    15f2:	68 f0       	brcs	.+26     	; 0x160e <XPROGProtocol_Command+0x148>
    15f4:	97 30       	cpi	r25, 0x07	; 7
    15f6:	79 f0       	breq	.+30     	; 0x1616 <XPROGProtocol_Command+0x150>
    15f8:	98 30       	cpi	r25, 0x08	; 8
    15fa:	89 f4       	brne	.+34     	; 0x161e <XPROGProtocol_Command+0x158>
    15fc:	0e c0       	rjmp	.+28     	; 0x161a <XPROGProtocol_Command+0x154>
    15fe:	80 e2       	ldi	r24, 0x20	; 32
    1600:	0f c0       	rjmp	.+30     	; 0x1620 <XPROGProtocol_Command+0x15a>
    1602:	80 e4       	ldi	r24, 0x40	; 64
    1604:	0d c0       	rjmp	.+26     	; 0x1620 <XPROGProtocol_Command+0x15a>
    1606:	88 e6       	ldi	r24, 0x68	; 104
    1608:	0b c0       	rjmp	.+22     	; 0x1620 <XPROGProtocol_Command+0x15a>
    160a:	80 e3       	ldi	r24, 0x30	; 48
    160c:	09 c0       	rjmp	.+18     	; 0x1620 <XPROGProtocol_Command+0x15a>
    160e:	82 e2       	ldi	r24, 0x22	; 34
    1610:	07 c0       	rjmp	.+14     	; 0x1620 <XPROGProtocol_Command+0x15a>
    1612:	8a e2       	ldi	r24, 0x2A	; 42
    1614:	05 c0       	rjmp	.+10     	; 0x1620 <XPROGProtocol_Command+0x15a>
    1616:	82 e3       	ldi	r24, 0x32	; 50
    1618:	03 c0       	rjmp	.+6      	; 0x1620 <XPROGProtocol_Command+0x15a>
    161a:	88 e1       	ldi	r24, 0x18	; 24
    161c:	01 c0       	rjmp	.+2      	; 0x1620 <XPROGProtocol_Command+0x15a>
    161e:	80 e0       	ldi	r24, 0x00	; 0
				EraseCommand = XMEGA_NVM_CMD_NOOP;
				break;
		}

		/* Erase the target memory, indicate timeout if occurred */
		if (!(XMEGANVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
    1620:	7d d2       	rcall	.+1274   	; 0x1b1c <XMEGANVM_EraseMemory>
    1622:	07 c0       	rjmp	.+14     	; 0x1632 <XPROGProtocol_Command+0x16c>
		  ReturnStatus = XPRG_ERR_TIMEOUT;
	}
	else
	{
		if (Erase_XPROG_Params.MemoryType == XPRG_ERASE_CHIP)
    1624:	91 30       	cpi	r25, 0x01	; 1
    1626:	11 f0       	breq	.+4      	; 0x162c <XPROGProtocol_Command+0x166>
    1628:	84 e1       	ldi	r24, 0x14	; 20
    162a:	01 c0       	rjmp	.+2      	; 0x162e <XPROGProtocol_Command+0x168>
    162c:	80 e1       	ldi	r24, 0x10	; 16
		  EraseCommand = TINY_NVM_CMD_CHIPERASE;
		else
		  EraseCommand = TINY_NVM_CMD_SECTIONERASE;

		/* Erase the target memory, indicate timeout if occurred */
		if (!(TINYNVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
    162e:	ba 01       	movw	r22, r20
    1630:	91 d3       	rcall	.+1826   	; 0x1d54 <TINYNVM_EraseMemory>
    1632:	88 23       	and	r24, r24
    1634:	11 f0       	breq	.+4      	; 0x163a <XPROGProtocol_Command+0x174>
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	01 c0       	rjmp	.+2      	; 0x163c <XPROGProtocol_Command+0x176>
    163a:	93 e0       	ldi	r25, 0x03	; 3
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    163c:	80 e5       	ldi	r24, 0x50	; 80
    163e:	80 93 f1 00 	sts	0x00F1, r24
    1642:	83 e0       	ldi	r24, 0x03	; 3
    1644:	96 c0       	rjmp	.+300    	; 0x1772 <XPROGProtocol_Command+0x2ac>
			break;
		case XPRG_CMD_ERASE:
			XPROGProtocol_Erase();
			break;
		case XPRG_CMD_WRITE_MEM:
			XPROGProtocol_WriteMemory();
    1646:	20 de       	rcall	.-960    	; 0x1288 <XPROGProtocol_WriteMemory>
    1648:	9d c0       	rjmp	.+314    	; 0x1784 <XPROGProtocol_Command+0x2be>
			break;
		case XPRG_CMD_READ_MEM:
			XPROGProtocol_ReadMemory();
    164a:	d4 de       	rcall	.-600    	; 0x13f4 <XPROGProtocol_ReadMemory>
    164c:	9b c0       	rjmp	.+310    	; 0x1784 <XPROGProtocol_Command+0x2be>
	struct
	{
		uint8_t CRCType;
	} ReadCRC_XPROG_Params;

	Endpoint_Read_Stream_LE(&ReadCRC_XPROG_Params, sizeof(ReadCRC_XPROG_Params), NULL);
    164e:	ce 01       	movw	r24, r28
    1650:	05 96       	adiw	r24, 0x05	; 5
    1652:	61 e0       	ldi	r22, 0x01	; 1
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	40 e0       	ldi	r20, 0x00	; 0
    1658:	50 e0       	ldi	r21, 0x00	; 0
    165a:	43 d6       	rcall	.+3206   	; 0x22e2 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    165c:	80 91 e8 00 	lds	r24, 0x00E8
    1660:	8b 77       	andi	r24, 0x7B	; 123
    1662:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1666:	82 e0       	ldi	r24, 0x02	; 2
    1668:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
    166c:	80 91 ec 00 	lds	r24, 0x00EC
    1670:	80 68       	ori	r24, 0x80	; 128
    1672:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint32_t MemoryCRC;

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
    1676:	80 91 44 01 	lds	r24, 0x0144
    167a:	88 23       	and	r24, r24
    167c:	11 f0       	breq	.+4      	; 0x1682 <XPROGProtocol_Command+0x1bc>
    167e:	91 e0       	ldi	r25, 0x01	; 1
    1680:	13 c0       	rjmp	.+38     	; 0x16a8 <XPROGProtocol_Command+0x1e2>
	{
		uint8_t CRCCommand;

		/* Determine which NVM command to send to the device depending on the memory to CRC */
		switch (ReadCRC_XPROG_Params.CRCType)
    1682:	8d 81       	ldd	r24, Y+5	; 0x05
    1684:	81 30       	cpi	r24, 0x01	; 1
    1686:	21 f0       	breq	.+8      	; 0x1690 <XPROGProtocol_Command+0x1ca>
    1688:	82 30       	cpi	r24, 0x02	; 2
    168a:	21 f4       	brne	.+8      	; 0x1694 <XPROGProtocol_Command+0x1ce>
    168c:	89 e3       	ldi	r24, 0x39	; 57
    168e:	03 c0       	rjmp	.+6      	; 0x1696 <XPROGProtocol_Command+0x1d0>
    1690:	88 e3       	ldi	r24, 0x38	; 56
    1692:	01 c0       	rjmp	.+2      	; 0x1696 <XPROGProtocol_Command+0x1d0>
    1694:	88 e7       	ldi	r24, 0x78	; 120
				CRCCommand = XMEGA_NVM_CMD_FLASHCRC;
				break;
		}

		/* Perform and retrieve the memory CRC, indicate timeout if occurred */
		if (!(XMEGANVM_GetMemoryCRC(CRCCommand, &MemoryCRC)))
    1696:	be 01       	movw	r22, r28
    1698:	6f 5f       	subi	r22, 0xFF	; 255
    169a:	7f 4f       	sbci	r23, 0xFF	; 255
    169c:	ac d2       	rcall	.+1368   	; 0x1bf6 <XMEGANVM_GetMemoryCRC>
    169e:	88 23       	and	r24, r24
    16a0:	11 f4       	brne	.+4      	; 0x16a6 <XPROGProtocol_Command+0x1e0>
    16a2:	93 e0       	ldi	r25, 0x03	; 3
    16a4:	01 c0       	rjmp	.+2      	; 0x16a8 <XPROGProtocol_Command+0x1e2>
    16a6:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    16a8:	80 e5       	ldi	r24, 0x50	; 80
    16aa:	80 93 f1 00 	sts	0x00F1, r24
    16ae:	86 e0       	ldi	r24, 0x06	; 6
    16b0:	80 93 f1 00 	sts	0x00F1, r24
    16b4:	90 93 f1 00 	sts	0x00F1, r25

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPRG_CMD_CRC);
	Endpoint_Write_8(ReturnStatus);

	if (ReturnStatus == XPRG_ERR_OK)
    16b8:	99 23       	and	r25, r25
    16ba:	09 f0       	breq	.+2      	; 0x16be <XPROGProtocol_Command+0x1f8>
    16bc:	5e c0       	rjmp	.+188    	; 0x177a <XPROGProtocol_Command+0x2b4>
	{
		Endpoint_Write_8(MemoryCRC >> 16);
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	9a 81       	ldd	r25, Y+2	; 0x02
    16c2:	ab 81       	ldd	r26, Y+3	; 0x03
    16c4:	bc 81       	ldd	r27, Y+4	; 0x04
    16c6:	9d 01       	movw	r18, r26
    16c8:	44 27       	eor	r20, r20
    16ca:	55 27       	eor	r21, r21
    16cc:	20 93 f1 00 	sts	0x00F1, r18
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    16d0:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    16d4:	89 2f       	mov	r24, r25
    16d6:	99 27       	eor	r25, r25
    16d8:	80 93 f1 00 	sts	0x00F1, r24
    16dc:	4e c0       	rjmp	.+156    	; 0x177a <XPROGProtocol_Command+0x2b4>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    16de:	80 91 f1 00 	lds	r24, 0x00F1
	uint8_t ReturnStatus = XPRG_ERR_OK;

	uint8_t XPROGParam = Endpoint_Read_8();

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
    16e2:	82 30       	cpi	r24, 0x02	; 2
    16e4:	01 f1       	breq	.+64     	; 0x1726 <XPROGProtocol_Command+0x260>
    16e6:	83 30       	cpi	r24, 0x03	; 3
    16e8:	18 f4       	brcc	.+6      	; 0x16f0 <XPROGProtocol_Command+0x22a>
    16ea:	81 30       	cpi	r24, 0x01	; 1
    16ec:	29 f4       	brne	.+10     	; 0x16f8 <XPROGProtocol_Command+0x232>
    16ee:	06 c0       	rjmp	.+12     	; 0x16fc <XPROGProtocol_Command+0x236>
    16f0:	83 30       	cpi	r24, 0x03	; 3
    16f2:	21 f1       	breq	.+72     	; 0x173c <XPROGProtocol_Command+0x276>
    16f4:	84 30       	cpi	r24, 0x04	; 4
    16f6:	39 f1       	breq	.+78     	; 0x1746 <XPROGProtocol_Command+0x280>
    16f8:	91 e0       	ldi	r25, 0x01	; 1
    16fa:	2a c0       	rjmp	.+84     	; 0x1750 <XPROGProtocol_Command+0x28a>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[3] = UEDATX;
    16fc:	20 91 f1 00 	lds	r18, 0x00F1
    1700:	b2 2f       	mov	r27, r18
				Data.Bytes[2] = UEDATX;
    1702:	20 91 f1 00 	lds	r18, 0x00F1
    1706:	a2 2f       	mov	r26, r18
				Data.Bytes[1] = UEDATX;
    1708:	20 91 f1 00 	lds	r18, 0x00F1
    170c:	92 2f       	mov	r25, r18
				Data.Bytes[0] = UEDATX;
    170e:	20 91 f1 00 	lds	r18, 0x00F1
    1712:	82 2f       	mov	r24, r18
	{
		case XPRG_PARAM_NVMBASE:
			XPROG_Param_NVMBase = Endpoint_Read_32_BE();
    1714:	80 93 2a 01 	sts	0x012A, r24
    1718:	90 93 2b 01 	sts	0x012B, r25
    171c:	a0 93 2c 01 	sts	0x012C, r26
    1720:	b0 93 2d 01 	sts	0x012D, r27
    1724:	14 c0       	rjmp	.+40     	; 0x174e <XPROGProtocol_Command+0x288>
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[1] = UEDATX;
    1726:	80 91 f1 00 	lds	r24, 0x00F1
    172a:	38 2f       	mov	r19, r24
				Data.Bytes[0] = UEDATX;
    172c:	80 91 f1 00 	lds	r24, 0x00F1
    1730:	28 2f       	mov	r18, r24
			break;
		case XPRG_PARAM_EEPPAGESIZE:
			XPROG_Param_EEPageSize = Endpoint_Read_16_BE();
    1732:	30 93 2f 01 	sts	0x012F, r19
    1736:	20 93 2e 01 	sts	0x012E, r18
    173a:	09 c0       	rjmp	.+18     	; 0x174e <XPROGProtocol_Command+0x288>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    173c:	80 91 f1 00 	lds	r24, 0x00F1
			break;
		case XPRG_PARAM_NVMCMD_REG:
			XPROG_Param_NVMCMDRegAddr = Endpoint_Read_8();
    1740:	80 93 30 01 	sts	0x0130, r24
    1744:	04 c0       	rjmp	.+8      	; 0x174e <XPROGProtocol_Command+0x288>
    1746:	80 91 f1 00 	lds	r24, 0x00F1
			break;
		case XPRG_PARAM_NVMCSR_REG:
			XPROG_Param_NVMCSRRegAddr = Endpoint_Read_8();
    174a:	80 93 31 01 	sts	0x0131, r24
    174e:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1750:	80 91 e8 00 	lds	r24, 0x00E8
    1754:	8b 77       	andi	r24, 0x7B	; 123
    1756:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    175a:	82 e0       	ldi	r24, 0x02	; 2
    175c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
    1760:	80 91 ec 00 	lds	r24, 0x00EC
    1764:	80 68       	ori	r24, 0x80	; 128
    1766:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    176a:	80 e5       	ldi	r24, 0x50	; 80
    176c:	80 93 f1 00 	sts	0x00F1, r24
    1770:	87 e0       	ldi	r24, 0x07	; 7
    1772:	80 93 f1 00 	sts	0x00F1, r24
    1776:	90 93 f1 00 	sts	0x00F1, r25
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    177a:	80 91 e8 00 	lds	r24, 0x00E8
    177e:	8e 77       	andi	r24, 0x7E	; 126
    1780:	80 93 e8 00 	sts	0x00E8, r24
			break;
		case XPRG_CMD_SET_PARAM:
			XPROGProtocol_SetParam();
			break;
	}
}
    1784:	29 96       	adiw	r28, 0x09	; 9
    1786:	0f b6       	in	r0, 0x3f	; 63
    1788:	f8 94       	cli
    178a:	de bf       	out	0x3e, r29	; 62
    178c:	0f be       	out	0x3f, r0	; 63
    178e:	cd bf       	out	0x3d, r28	; 61
    1790:	cf 91       	pop	r28
    1792:	df 91       	pop	r29
    1794:	08 95       	ret

00001796 <XPROGTarget_SetTxMode>:
}

static void XPROGTarget_SetTxMode(void)
{
	/* Wait for a full cycle of the clock */
	while (PIND & (1 << 5));
    1796:	4d 99       	sbic	0x09, 5	; 9
    1798:	fe cf       	rjmp	.-4      	; 0x1796 <XPROGTarget_SetTxMode>
	while (!(PIND & (1 << 5)));
    179a:	4d 9b       	sbis	0x09, 5	; 9
    179c:	fe cf       	rjmp	.-4      	; 0x179a <XPROGTarget_SetTxMode+0x4>

	PORTD  |=  (1 << 3);
    179e:	5b 9a       	sbi	0x0b, 3	; 11
	DDRD   |=  (1 << 3);
    17a0:	53 9a       	sbi	0x0a, 3	; 10

	UCSR1B &= ~(1 << RXEN1);
    17a2:	80 91 c9 00 	lds	r24, 0x00C9
    17a6:	8f 7e       	andi	r24, 0xEF	; 239
    17a8:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1B |=  (1 << TXEN1);
    17ac:	80 91 c9 00 	lds	r24, 0x00C9
    17b0:	88 60       	ori	r24, 0x08	; 8
    17b2:	80 93 c9 00 	sts	0x00C9, r24

	IsSending = true;
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	80 93 4a 01 	sts	0x014A, r24
}
    17bc:	08 95       	ret

000017be <XPROGTarget_SendIdle>:

/** Sends an IDLE via the USART to the attached target, consisting of a full frame of idle bits. */
void XPROGTarget_SendIdle(void)
{
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
    17be:	80 91 4a 01 	lds	r24, 0x014A
    17c2:	88 23       	and	r24, r24
    17c4:	09 f4       	brne	.+2      	; 0x17c8 <XPROGTarget_SendIdle+0xa>
	  XPROGTarget_SetTxMode();
    17c6:	e7 df       	rcall	.-50     	; 0x1796 <XPROGTarget_SetTxMode>
    17c8:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Need to do nothing for a full frame to send an IDLE */
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
	{
		/* Wait for a full cycle of the clock */
		while (PIND & (1 << 5));
    17ca:	4d 99       	sbic	0x09, 5	; 9
    17cc:	fe cf       	rjmp	.-4      	; 0x17ca <XPROGTarget_SendIdle+0xc>
		while (!(PIND & (1 << 5)));
    17ce:	4d 9b       	sbis	0x09, 5	; 9
    17d0:	fe cf       	rjmp	.-4      	; 0x17ce <XPROGTarget_SendIdle+0x10>
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
	  XPROGTarget_SetTxMode();
	
	/* Need to do nothing for a full frame to send an IDLE */
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
    17d2:	8f 5f       	subi	r24, 0xFF	; 255
    17d4:	8c 30       	cpi	r24, 0x0C	; 12
    17d6:	c9 f7       	brne	.-14     	; 0x17ca <XPROGTarget_SendIdle+0xc>
	{
		/* Wait for a full cycle of the clock */
		while (PIND & (1 << 5));
		while (!(PIND & (1 << 5)));
	}
}
    17d8:	08 95       	ret

000017da <XPROGTarget_EnableTargetTPI>:
}

/** Enables the target's TPI interface, holding the target in reset until TPI mode is exited. */
void XPROGTarget_EnableTargetTPI(void)
{
	IsSending = false;
    17da:	10 92 4a 01 	sts	0x014A, r1

	/* Set /RESET line low for at least 400ns to enable TPI functionality */
	AUX_LINE_DDR  |=  AUX_LINE_MASK;
    17de:	24 9a       	sbi	0x04, 4	; 4
	AUX_LINE_PORT &= ~AUX_LINE_MASK;
    17e0:	2c 98       	cbi	0x05, 4	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17e2:	85 e0       	ldi	r24, 0x05	; 5
    17e4:	8a 95       	dec	r24
    17e6:	f1 f7       	brne	.-4      	; 0x17e4 <XPROGTarget_EnableTargetTPI+0xa>
	_delay_us(1);

	/* Set Tx and XCK as outputs, Rx as input */
	DDRD |=  (1 << 5) | (1 << 3);
    17e8:	8a b1       	in	r24, 0x0a	; 10
    17ea:	88 62       	ori	r24, 0x28	; 40
    17ec:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << 2);
    17ee:	52 98       	cbi	0x0a, 2	; 10

	/* Set up the synchronous USART for TINY communications - 8 data bits, even parity, 2 stop bits */
	UBRR1  = ((F_CPU / 2 / XPROG_HARDWARE_SPEED) - 1);
    17f0:	8f e1       	ldi	r24, 0x1F	; 31
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	90 93 cd 00 	sts	0x00CD, r25
    17f8:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1B = (1 << TXEN1);
    17fc:	88 e0       	ldi	r24, 0x08	; 8
    17fe:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPOL1);
    1802:	8f e6       	ldi	r24, 0x6F	; 111
    1804:	80 93 ca 00 	sts	0x00CA, r24

	/* Send two IDLEs of 12 bits each to enable TPI interface (need at least 16 idle bits) */
	XPROGTarget_SendIdle();
    1808:	da df       	rcall	.-76     	; 0x17be <XPROGTarget_SendIdle>
	XPROGTarget_SendIdle();
}
    180a:	d9 cf       	rjmp	.-78     	; 0x17be <XPROGTarget_SendIdle>

0000180c <XPROGTarget_EnableTargetPDI>:
bool IsSending;

/** Enables the target's PDI interface, holding the target in reset until PDI mode is exited. */
void XPROGTarget_EnableTargetPDI(void)
{
	IsSending = false;
    180c:	10 92 4a 01 	sts	0x014A, r1

	/* Set Tx and XCK as outputs, Rx as input */
	DDRD |=  (1 << 5) | (1 << 3);
    1810:	8a b1       	in	r24, 0x0a	; 10
    1812:	88 62       	ori	r24, 0x28	; 40
    1814:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << 2);
    1816:	52 98       	cbi	0x0a, 2	; 10

	/* Set DATA line high for at least 90ns to disable /RESET functionality */
	PORTD |= (1 << 3);
    1818:	5b 9a       	sbi	0x0b, 3	; 11
    181a:	85 e0       	ldi	r24, 0x05	; 5
    181c:	8a 95       	dec	r24
    181e:	f1 f7       	brne	.-4      	; 0x181c <XPROGTarget_EnableTargetPDI+0x10>
	_delay_us(1);

	/* Set up the synchronous USART for XMEGA communications - 8 data bits, even parity, 2 stop bits */
	UBRR1  = ((F_CPU / 2 / XPROG_HARDWARE_SPEED) - 1);
    1820:	8f e1       	ldi	r24, 0x1F	; 31
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	90 93 cd 00 	sts	0x00CD, r25
    1828:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1B = (1 << TXEN1);
    182c:	88 e0       	ldi	r24, 0x08	; 8
    182e:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPOL1);
    1832:	8f e6       	ldi	r24, 0x6F	; 111
    1834:	80 93 ca 00 	sts	0x00CA, r24

	/* Send two IDLEs of 12 bits each to enable PDI interface (need at least 16 idle bits) */
	XPROGTarget_SendIdle();
    1838:	c2 df       	rcall	.-124    	; 0x17be <XPROGTarget_SendIdle>
	XPROGTarget_SendIdle();
}
    183a:	c1 cf       	rjmp	.-126    	; 0x17be <XPROGTarget_SendIdle>

0000183c <XPROGTarget_SendByte>:
/** Sends a byte via the USART.
 *
 *  \param[in] Byte  Byte to send through the USART
 */
void XPROGTarget_SendByte(const uint8_t Byte)
{
    183c:	1f 93       	push	r17
    183e:	18 2f       	mov	r17, r24
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
    1840:	80 91 4a 01 	lds	r24, 0x014A
    1844:	88 23       	and	r24, r24
    1846:	09 f4       	brne	.+2      	; 0x184a <XPROGTarget_SendByte+0xe>
	  XPROGTarget_SetTxMode();
    1848:	a6 df       	rcall	.-180    	; 0x1796 <XPROGTarget_SetTxMode>

	/* Wait until there is space in the hardware Tx buffer before writing */
	while (!(UCSR1A & (1 << UDRE1)));
    184a:	80 91 c8 00 	lds	r24, 0x00C8
    184e:	85 ff       	sbrs	r24, 5
    1850:	fc cf       	rjmp	.-8      	; 0x184a <XPROGTarget_SendByte+0xe>
	UCSR1A |= (1 << TXC1);
    1852:	80 91 c8 00 	lds	r24, 0x00C8
    1856:	80 64       	ori	r24, 0x40	; 64
    1858:	80 93 c8 00 	sts	0x00C8, r24
	UDR1    = Byte;
    185c:	10 93 ce 00 	sts	0x00CE, r17
}
    1860:	1f 91       	pop	r17
    1862:	08 95       	ret

00001864 <XPROGTarget_SetRxMode>:
	IsSending = true;
}

static void XPROGTarget_SetRxMode(void)
{
	while (!(UCSR1A & (1 << TXC1)));
    1864:	80 91 c8 00 	lds	r24, 0x00C8
    1868:	86 ff       	sbrs	r24, 6
    186a:	fc cf       	rjmp	.-8      	; 0x1864 <XPROGTarget_SetRxMode>
	UCSR1A |=  (1 << TXC1);
    186c:	80 91 c8 00 	lds	r24, 0x00C8
    1870:	80 64       	ori	r24, 0x40	; 64
    1872:	80 93 c8 00 	sts	0x00C8, r24

	UCSR1B &= ~(1 << TXEN1);
    1876:	80 91 c9 00 	lds	r24, 0x00C9
    187a:	87 7f       	andi	r24, 0xF7	; 247
    187c:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1B |=  (1 << RXEN1);
    1880:	80 91 c9 00 	lds	r24, 0x00C9
    1884:	80 61       	ori	r24, 0x10	; 16
    1886:	80 93 c9 00 	sts	0x00C9, r24

	DDRD   &= ~(1 << 3);
    188a:	53 98       	cbi	0x0a, 3	; 10
	PORTD  &= ~(1 << 3);
    188c:	5b 98       	cbi	0x0b, 3	; 11

	IsSending = false;
    188e:	10 92 4a 01 	sts	0x014A, r1
}
    1892:	08 95       	ret

00001894 <XPROGTarget_ReceiveByte>:
 *  \return Received byte from the USART
 */
uint8_t XPROGTarget_ReceiveByte(void)
{
	/* Switch to Rx mode if currently in Tx mode */
	if (IsSending)
    1894:	80 91 4a 01 	lds	r24, 0x014A
    1898:	88 23       	and	r24, r24
    189a:	09 f0       	breq	.+2      	; 0x189e <XPROGTarget_ReceiveByte+0xa>
	  XPROGTarget_SetRxMode();
    189c:	e3 df       	rcall	.-58     	; 0x1864 <XPROGTarget_SetRxMode>

	/* Wait until a byte has been received before reading */
	while (!(UCSR1A & (1 << RXC1)) && !(TimeoutExpired));
    189e:	80 91 c8 00 	lds	r24, 0x00C8
    18a2:	87 fd       	sbrc	r24, 7
    18a4:	03 c0       	rjmp	.+6      	; 0x18ac <XPROGTarget_ReceiveByte+0x18>
    18a6:	8a b5       	in	r24, 0x2a	; 42
    18a8:	88 23       	and	r24, r24
    18aa:	c9 f3       	breq	.-14     	; 0x189e <XPROGTarget_ReceiveByte+0xa>

	return UDR1;
    18ac:	80 91 ce 00 	lds	r24, 0x00CE
}
    18b0:	08 95       	ret

000018b2 <XPROGTarget_DisableTargetTPI>:

/** Disables the target's TPI interface, exits programming mode and starts the target's application. */
void XPROGTarget_DisableTargetTPI(void)
{
	/* Switch to Rx mode to ensure that all pending transmissions are complete */
	XPROGTarget_SetRxMode();
    18b2:	d8 df       	rcall	.-80     	; 0x1864 <XPROGTarget_SetRxMode>

	/* Turn off receiver and transmitter of the USART, clear settings */
	UCSR1A |= (1 << TXC1) | (1 << RXC1);
    18b4:	e8 ec       	ldi	r30, 0xC8	; 200
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	80 6c       	ori	r24, 0xC0	; 192
    18bc:	80 83       	st	Z, r24
	UCSR1B  = 0;
    18be:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1C  = 0;
    18c2:	10 92 ca 00 	sts	0x00CA, r1

	/* Set all USART lines as inputs, tristate */
	DDRD  &= ~((1 << 5) | (1 << 3));
    18c6:	8a b1       	in	r24, 0x0a	; 10
    18c8:	87 7d       	andi	r24, 0xD7	; 215
    18ca:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1 << 5) | (1 << 3) | (1 << 2));
    18cc:	8b b1       	in	r24, 0x0b	; 11
    18ce:	83 7d       	andi	r24, 0xD3	; 211
    18d0:	8b b9       	out	0x0b, r24	; 11
	
	/* Tristate target /RESET line */
	AUX_LINE_DDR  &= ~AUX_LINE_MASK;
    18d2:	24 98       	cbi	0x04, 4	; 4
	AUX_LINE_PORT &= ~AUX_LINE_MASK;
    18d4:	2c 98       	cbi	0x05, 4	; 5
}
    18d6:	08 95       	ret

000018d8 <XPROGTarget_DisableTargetPDI>:

/** Disables the target's PDI interface, exits programming mode and starts the target's application. */
void XPROGTarget_DisableTargetPDI(void)
{
	/* Switch to Rx mode to ensure that all pending transmissions are complete */
	XPROGTarget_SetRxMode();
    18d8:	c5 df       	rcall	.-118    	; 0x1864 <XPROGTarget_SetRxMode>

	/* Turn off receiver and transmitter of the USART, clear settings */
	UCSR1A  = ((1 << TXC1) | (1 << RXC1));
    18da:	80 ec       	ldi	r24, 0xC0	; 192
    18dc:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B  = 0;
    18e0:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1C  = 0;
    18e4:	10 92 ca 00 	sts	0x00CA, r1

	/* Tristate all pins */
	DDRD  &= ~((1 << 5) | (1 << 3));
    18e8:	8a b1       	in	r24, 0x0a	; 10
    18ea:	87 7d       	andi	r24, 0xD7	; 215
    18ec:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1 << 5) | (1 << 3) | (1 << 2));
    18ee:	8b b1       	in	r24, 0x0b	; 11
    18f0:	83 7d       	andi	r24, 0xD3	; 211
    18f2:	8b b9       	out	0x0b, r24	; 11
}
    18f4:	08 95       	ret

000018f6 <XMEGANVM_SendAddress>:
/** Sends the given 32-bit absolute address to the target.
 *
 *  \param[in] AbsoluteAddress  Absolute address to send to the target
 */
static void XMEGANVM_SendAddress(const uint32_t AbsoluteAddress)
{
    18f6:	ef 92       	push	r14
    18f8:	ff 92       	push	r15
    18fa:	0f 93       	push	r16
    18fc:	1f 93       	push	r17
    18fe:	7b 01       	movw	r14, r22
    1900:	8c 01       	movw	r16, r24
	/* Send the given 32-bit address to the target, LSB first */
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
    1902:	86 2f       	mov	r24, r22
    1904:	9b df       	rcall	.-202    	; 0x183c <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
    1906:	bb 27       	eor	r27, r27
    1908:	a1 2f       	mov	r26, r17
    190a:	90 2f       	mov	r25, r16
    190c:	8f 2d       	mov	r24, r15
    190e:	96 df       	rcall	.-212    	; 0x183c <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
    1910:	c8 01       	movw	r24, r16
    1912:	aa 27       	eor	r26, r26
    1914:	bb 27       	eor	r27, r27
    1916:	92 df       	rcall	.-220    	; 0x183c <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
    1918:	e1 2e       	mov	r14, r17
    191a:	ff 24       	eor	r15, r15
    191c:	00 27       	eor	r16, r16
    191e:	11 27       	eor	r17, r17
    1920:	8e 2d       	mov	r24, r14
    1922:	8c df       	rcall	.-232    	; 0x183c <XPROGTarget_SendByte>
}
    1924:	1f 91       	pop	r17
    1926:	0f 91       	pop	r16
    1928:	ff 90       	pop	r15
    192a:	ef 90       	pop	r14
    192c:	08 95       	ret

0000192e <XMEGANVM_SendNVMRegAddress>:
{
	/* Determine the absolute register address from the NVM base memory address and the NVM register address */
	uint32_t Address = XPROG_Param_NVMBase | Register;

	/* Send the calculated 32-bit address to the target, LSB first */
	XMEGANVM_SendAddress(Address);
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	a0 e0       	ldi	r26, 0x00	; 0
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	20 91 2a 01 	lds	r18, 0x012A
    1938:	30 91 2b 01 	lds	r19, 0x012B
    193c:	40 91 2c 01 	lds	r20, 0x012C
    1940:	50 91 2d 01 	lds	r21, 0x012D
    1944:	82 2b       	or	r24, r18
    1946:	93 2b       	or	r25, r19
    1948:	a4 2b       	or	r26, r20
    194a:	b5 2b       	or	r27, r21
    194c:	bc 01       	movw	r22, r24
    194e:	cd 01       	movw	r24, r26
}
    1950:	d2 cf       	rjmp	.-92     	; 0x18f6 <XMEGANVM_SendAddress>

00001952 <XMEGANVM_WaitWhileNVMControllerBusy>:
 *  \return Boolean true if the NVM controller became ready within the timeout period, false otherwise
 */
bool XMEGANVM_WaitWhileNVMControllerBusy(void)
{
	/* Preload the pointer register with the NVM STATUS register address to check the BUSY flag */
	XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    1952:	8b e6       	ldi	r24, 0x6B	; 107
    1954:	73 df       	rcall	.-282    	; 0x183c <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_STATUS);
    1956:	8f e0       	ldi	r24, 0x0F	; 15
    1958:	ea df       	rcall	.-44     	; 0x192e <XMEGANVM_SendNVMRegAddress>

	/* Poll the NVM STATUS register while the NVM controller is busy */
	for (;;)
	{
		/* Fetch the current status value via the pointer register (without auto-increment afterwards) */
		XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT << 2) | PDI_DATSIZE_1BYTE);
    195a:	80 e2       	ldi	r24, 0x20	; 32
    195c:	6f df       	rcall	.-290    	; 0x183c <XPROGTarget_SendByte>

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    195e:	9a df       	rcall	.-204    	; 0x1894 <XPROGTarget_ReceiveByte>
    1960:	98 2f       	mov	r25, r24

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutExpired)
    1962:	8a b5       	in	r24, 0x2a	; 42
    1964:	88 23       	and	r24, r24
    1966:	11 f0       	breq	.+4      	; 0x196c <XMEGANVM_WaitWhileNVMControllerBusy+0x1a>
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	08 95       	ret
		  return false;

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
    196c:	97 fd       	sbrc	r25, 7
    196e:	f5 cf       	rjmp	.-22     	; 0x195a <XMEGANVM_WaitWhileNVMControllerBusy+0x8>
    1970:	81 e0       	ldi	r24, 0x01	; 1
		  return true;
	}
}
    1972:	08 95       	ret

00001974 <XMEGANVM_WritePageMemory>:
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_WritePageMemory(const uint8_t WriteBuffCommand, const uint8_t EraseBuffCommand,
                              const uint8_t WritePageCommand, const uint8_t PageMode, const uint32_t WriteAddress,
                              const uint8_t* WriteBuffer, uint16_t WriteSize)
{
    1974:	7f 92       	push	r7
    1976:	8f 92       	push	r8
    1978:	9f 92       	push	r9
    197a:	af 92       	push	r10
    197c:	bf 92       	push	r11
    197e:	cf 92       	push	r12
    1980:	df 92       	push	r13
    1982:	ef 92       	push	r14
    1984:	ff 92       	push	r15
    1986:	0f 93       	push	r16
    1988:	1f 93       	push	r17
    198a:	cf 93       	push	r28
    198c:	df 93       	push	r29
    198e:	88 2e       	mov	r8, r24
    1990:	96 2e       	mov	r9, r22
    1992:	74 2e       	mov	r7, r20
    1994:	e6 01       	movw	r28, r12
	if (PageMode & XPRG_PAGEMODE_ERASE)
    1996:	c2 2e       	mov	r12, r18
    1998:	20 ff       	sbrs	r18, 0
    199a:	10 c0       	rjmp	.+32     	; 0x19bc <XMEGANVM_WritePageMemory+0x48>
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    199c:	da df       	rcall	.-76     	; 0x1952 <XMEGANVM_WaitWhileNVMControllerBusy>
    199e:	88 23       	and	r24, r24
    19a0:	09 f4       	brne	.+2      	; 0x19a4 <XMEGANVM_WritePageMemory+0x30>
    19a2:	40 c0       	rjmp	.+128    	; 0x1a24 <XMEGANVM_WritePageMemory+0xb0>
		  return false;

		/* Send the memory buffer erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    19a4:	8c e4       	ldi	r24, 0x4C	; 76
    19a6:	4a df       	rcall	.-364    	; 0x183c <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    19a8:	8a e0       	ldi	r24, 0x0A	; 10
    19aa:	c1 df       	rcall	.-126    	; 0x192e <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(EraseBuffCommand);
    19ac:	89 2d       	mov	r24, r9
    19ae:	46 df       	rcall	.-372    	; 0x183c <XPROGTarget_SendByte>

		/* Set CMDEX bit in NVM CTRLA register to start the buffer erase */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    19b0:	8c e4       	ldi	r24, 0x4C	; 76
    19b2:	44 df       	rcall	.-376    	; 0x183c <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    19b4:	8b e0       	ldi	r24, 0x0B	; 11
    19b6:	bb df       	rcall	.-138    	; 0x192e <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(1 << 0);
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	40 df       	rcall	.-384    	; 0x183c <XPROGTarget_SendByte>
	}

	if (WriteSize)
    19bc:	a1 14       	cp	r10, r1
    19be:	b1 04       	cpc	r11, r1
    19c0:	e9 f0       	breq	.+58     	; 0x19fc <XMEGANVM_WritePageMemory+0x88>
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    19c2:	c7 df       	rcall	.-114    	; 0x1952 <XMEGANVM_WaitWhileNVMControllerBusy>
    19c4:	88 23       	and	r24, r24
    19c6:	71 f1       	breq	.+92     	; 0x1a24 <XMEGANVM_WritePageMemory+0xb0>
		  return false;

		/* Send the memory buffer write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    19c8:	8c e4       	ldi	r24, 0x4C	; 76
    19ca:	38 df       	rcall	.-400    	; 0x183c <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    19cc:	8a e0       	ldi	r24, 0x0A	; 10
    19ce:	af df       	rcall	.-162    	; 0x192e <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(WriteBuffCommand);
    19d0:	88 2d       	mov	r24, r8
    19d2:	34 df       	rcall	.-408    	; 0x183c <XPROGTarget_SendByte>

		/* Load the PDI pointer register with the start address we want to write to */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    19d4:	8b e6       	ldi	r24, 0x6B	; 107
    19d6:	32 df       	rcall	.-412    	; 0x183c <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(WriteAddress);
    19d8:	c8 01       	movw	r24, r16
    19da:	b7 01       	movw	r22, r14
    19dc:	8c df       	rcall	.-232    	; 0x18f6 <XMEGANVM_SendAddress>

		/* Send the REPEAT command with the specified number of bytes to write */
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    19de:	80 ea       	ldi	r24, 0xA0	; 160
    19e0:	2d df       	rcall	.-422    	; 0x183c <XPROGTarget_SendByte>
		XPROGTarget_SendByte(WriteSize - 1);
    19e2:	8a 2d       	mov	r24, r10
    19e4:	81 50       	subi	r24, 0x01	; 1
    19e6:	2a df       	rcall	.-428    	; 0x183c <XPROGTarget_SendByte>

		/* Send a ST command with indirect access and post-increment to write the bytes */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    19e8:	84 e6       	ldi	r24, 0x64	; 100
    19ea:	28 df       	rcall	.-432    	; 0x183c <XPROGTarget_SendByte>
		while (WriteSize--)
		  XPROGTarget_SendByte(*(WriteBuffer++));
    19ec:	89 91       	ld	r24, Y+
    19ee:	26 df       	rcall	.-436    	; 0x183c <XPROGTarget_SendByte>
    19f0:	08 94       	sec
    19f2:	a1 08       	sbc	r10, r1
    19f4:	b1 08       	sbc	r11, r1
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
		XPROGTarget_SendByte(WriteSize - 1);

		/* Send a ST command with indirect access and post-increment to write the bytes */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
		while (WriteSize--)
    19f6:	a1 14       	cp	r10, r1
    19f8:	b1 04       	cpc	r11, r1
    19fa:	c1 f7       	brne	.-16     	; 0x19ec <XMEGANVM_WritePageMemory+0x78>
		  XPROGTarget_SendByte(*(WriteBuffer++));
	}

	if (PageMode & XPRG_PAGEMODE_WRITE)
    19fc:	c1 fe       	sbrs	r12, 1
    19fe:	10 c0       	rjmp	.+32     	; 0x1a20 <XMEGANVM_WritePageMemory+0xac>
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1a00:	a8 df       	rcall	.-176    	; 0x1952 <XMEGANVM_WaitWhileNVMControllerBusy>
    1a02:	88 23       	and	r24, r24
    1a04:	79 f0       	breq	.+30     	; 0x1a24 <XMEGANVM_WritePageMemory+0xb0>
		  return false;

		/* Send the memory write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1a06:	8c e4       	ldi	r24, 0x4C	; 76
    1a08:	19 df       	rcall	.-462    	; 0x183c <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1a0a:	8a e0       	ldi	r24, 0x0A	; 10
    1a0c:	90 df       	rcall	.-224    	; 0x192e <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(WritePageCommand);
    1a0e:	87 2d       	mov	r24, r7
    1a10:	15 df       	rcall	.-470    	; 0x183c <XPROGTarget_SendByte>

		/* Send the address of the first page location to write the memory page */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1a12:	8c e4       	ldi	r24, 0x4C	; 76
    1a14:	13 df       	rcall	.-474    	; 0x183c <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(WriteAddress);
    1a16:	c8 01       	movw	r24, r16
    1a18:	b7 01       	movw	r22, r14
    1a1a:	6d df       	rcall	.-294    	; 0x18f6 <XMEGANVM_SendAddress>
		XPROGTarget_SendByte(0x00);
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	0e df       	rcall	.-484    	; 0x183c <XPROGTarget_SendByte>
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	01 c0       	rjmp	.+2      	; 0x1a26 <XMEGANVM_WritePageMemory+0xb2>
    1a24:	80 e0       	ldi	r24, 0x00	; 0
	}

	return true;
}
    1a26:	df 91       	pop	r29
    1a28:	cf 91       	pop	r28
    1a2a:	1f 91       	pop	r17
    1a2c:	0f 91       	pop	r16
    1a2e:	ff 90       	pop	r15
    1a30:	ef 90       	pop	r14
    1a32:	df 90       	pop	r13
    1a34:	cf 90       	pop	r12
    1a36:	bf 90       	pop	r11
    1a38:	af 90       	pop	r10
    1a3a:	9f 90       	pop	r9
    1a3c:	8f 90       	pop	r8
    1a3e:	7f 90       	pop	r7
    1a40:	08 95       	ret

00001a42 <XMEGANVM_WriteByteMemory>:
 *  \param[in]  Byte          Byte to write to the target
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_WriteByteMemory(const uint8_t WriteCommand, const uint32_t WriteAddress, const uint8_t Byte)
{
    1a42:	cf 92       	push	r12
    1a44:	df 92       	push	r13
    1a46:	ef 92       	push	r14
    1a48:	ff 92       	push	r15
    1a4a:	0f 93       	push	r16
    1a4c:	1f 93       	push	r17
    1a4e:	d8 2e       	mov	r13, r24
    1a50:	7a 01       	movw	r14, r20
    1a52:	8b 01       	movw	r16, r22
    1a54:	c2 2e       	mov	r12, r18
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1a56:	7d df       	rcall	.-262    	; 0x1952 <XMEGANVM_WaitWhileNVMControllerBusy>
    1a58:	88 23       	and	r24, r24
    1a5a:	71 f0       	breq	.+28     	; 0x1a78 <XMEGANVM_WriteByteMemory+0x36>
	  return false;

	/* Send the memory write command to the target */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1a5c:	8c e4       	ldi	r24, 0x4C	; 76
    1a5e:	ee de       	rcall	.-548    	; 0x183c <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1a60:	8a e0       	ldi	r24, 0x0A	; 10
    1a62:	65 df       	rcall	.-310    	; 0x192e <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(WriteCommand);
    1a64:	8d 2d       	mov	r24, r13
    1a66:	ea de       	rcall	.-556    	; 0x183c <XPROGTarget_SendByte>

	/* Send new memory byte to the memory of the target */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1a68:	8c e4       	ldi	r24, 0x4C	; 76
    1a6a:	e8 de       	rcall	.-560    	; 0x183c <XPROGTarget_SendByte>
	XMEGANVM_SendAddress(WriteAddress);
    1a6c:	c8 01       	movw	r24, r16
    1a6e:	b7 01       	movw	r22, r14
    1a70:	42 df       	rcall	.-380    	; 0x18f6 <XMEGANVM_SendAddress>
	XPROGTarget_SendByte(Byte);
    1a72:	8c 2d       	mov	r24, r12
    1a74:	e3 de       	rcall	.-570    	; 0x183c <XPROGTarget_SendByte>
    1a76:	81 e0       	ldi	r24, 0x01	; 1

	return true;
}
    1a78:	1f 91       	pop	r17
    1a7a:	0f 91       	pop	r16
    1a7c:	ff 90       	pop	r15
    1a7e:	ef 90       	pop	r14
    1a80:	df 90       	pop	r13
    1a82:	cf 90       	pop	r12
    1a84:	08 95       	ret

00001a86 <XMEGANVM_ReadMemory>:
 *  \param[in]  ReadSize     Number of bytes to read
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_ReadMemory(const uint32_t ReadAddress, uint8_t* ReadBuffer, uint16_t ReadSize)
{
    1a86:	cf 92       	push	r12
    1a88:	df 92       	push	r13
    1a8a:	ef 92       	push	r14
    1a8c:	ff 92       	push	r15
    1a8e:	0f 93       	push	r16
    1a90:	1f 93       	push	r17
    1a92:	cf 93       	push	r28
    1a94:	df 93       	push	r29
    1a96:	7b 01       	movw	r14, r22
    1a98:	8c 01       	movw	r16, r24
    1a9a:	6a 01       	movw	r12, r20
    1a9c:	e9 01       	movw	r28, r18
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1a9e:	59 df       	rcall	.-334    	; 0x1952 <XMEGANVM_WaitWhileNVMControllerBusy>
    1aa0:	88 23       	and	r24, r24
    1aa2:	11 f4       	brne	.+4      	; 0x1aa8 <XMEGANVM_ReadMemory+0x22>
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	23 c0       	rjmp	.+70     	; 0x1aee <XMEGANVM_ReadMemory+0x68>
	  return false;

	/* Send the READNVM command to the NVM controller for reading of an arbitrary location */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1aa8:	8c e4       	ldi	r24, 0x4C	; 76
    1aaa:	c8 de       	rcall	.-624    	; 0x183c <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1aac:	8a e0       	ldi	r24, 0x0A	; 10
    1aae:	3f df       	rcall	.-386    	; 0x192e <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(XMEGA_NVM_CMD_READNVM);
    1ab0:	83 e4       	ldi	r24, 0x43	; 67
    1ab2:	c4 de       	rcall	.-632    	; 0x183c <XPROGTarget_SendByte>

	/* Load the PDI pointer register with the start address we want to read from */
	XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    1ab4:	8b e6       	ldi	r24, 0x6B	; 107
    1ab6:	c2 de       	rcall	.-636    	; 0x183c <XPROGTarget_SendByte>
	XMEGANVM_SendAddress(ReadAddress);
    1ab8:	c8 01       	movw	r24, r16
    1aba:	b7 01       	movw	r22, r14
    1abc:	1c df       	rcall	.-456    	; 0x18f6 <XMEGANVM_SendAddress>

	/* Send the REPEAT command with the specified number of bytes to read */
	XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    1abe:	80 ea       	ldi	r24, 0xA0	; 160
    1ac0:	bd de       	rcall	.-646    	; 0x183c <XPROGTarget_SendByte>
	XPROGTarget_SendByte(ReadSize - 1);
    1ac2:	9e 01       	movw	r18, r28
    1ac4:	21 50       	subi	r18, 0x01	; 1
    1ac6:	82 2f       	mov	r24, r18
    1ac8:	b9 de       	rcall	.-654    	; 0x183c <XPROGTarget_SendByte>

	/* Send a LD command with indirect access and post-increment to read out the bytes */
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    1aca:	84 e2       	ldi	r24, 0x24	; 36
    1acc:	b7 de       	rcall	.-658    	; 0x183c <XPROGTarget_SendByte>
    1ace:	04 c0       	rjmp	.+8      	; 0x1ad8 <XMEGANVM_ReadMemory+0x52>
	while (ReadSize-- && !(TimeoutExpired))
	  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
    1ad0:	e1 de       	rcall	.-574    	; 0x1894 <XPROGTarget_ReceiveByte>
    1ad2:	f6 01       	movw	r30, r12
    1ad4:	81 93       	st	Z+, r24
    1ad6:	6f 01       	movw	r12, r30
	XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
	XPROGTarget_SendByte(ReadSize - 1);

	/* Send a LD command with indirect access and post-increment to read out the bytes */
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
	while (ReadSize-- && !(TimeoutExpired))
    1ad8:	20 97       	sbiw	r28, 0x00	; 0
    1ada:	21 f0       	breq	.+8      	; 0x1ae4 <XMEGANVM_ReadMemory+0x5e>
    1adc:	8a b5       	in	r24, 0x2a	; 42
    1ade:	21 97       	sbiw	r28, 0x01	; 1
    1ae0:	88 23       	and	r24, r24
    1ae2:	b1 f3       	breq	.-20     	; 0x1ad0 <XMEGANVM_ReadMemory+0x4a>
	  *(ReadBuffer++) = XPROGTarget_ReceiveByte();

	return (TimeoutExpired == false);
    1ae4:	8a b5       	in	r24, 0x2a	; 42
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	88 23       	and	r24, r24
    1aea:	09 f4       	brne	.+2      	; 0x1aee <XMEGANVM_ReadMemory+0x68>
    1aec:	91 e0       	ldi	r25, 0x01	; 1
}
    1aee:	89 2f       	mov	r24, r25
    1af0:	df 91       	pop	r29
    1af2:	cf 91       	pop	r28
    1af4:	1f 91       	pop	r17
    1af6:	0f 91       	pop	r16
    1af8:	ff 90       	pop	r15
    1afa:	ef 90       	pop	r14
    1afc:	df 90       	pop	r13
    1afe:	cf 90       	pop	r12
    1b00:	08 95       	ret

00001b02 <XMEGANVM_WaitWhileNVMBusBusy>:
{
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the LDCS command to read the PDI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(PDI_CMD_LDCS | PDI_STATUS_REG);
    1b02:	80 e8       	ldi	r24, 0x80	; 128
    1b04:	9b de       	rcall	.-714    	; 0x183c <XPROGTarget_SendByte>

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    1b06:	c6 de       	rcall	.-628    	; 0x1894 <XPROGTarget_ReceiveByte>
    1b08:	98 2f       	mov	r25, r24

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutExpired)
    1b0a:	8a b5       	in	r24, 0x2a	; 42
    1b0c:	88 23       	and	r24, r24
    1b0e:	11 f0       	breq	.+4      	; 0x1b14 <XMEGANVM_WaitWhileNVMBusBusy+0x12>
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	08 95       	ret
		  return false;

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM)
    1b14:	91 ff       	sbrs	r25, 1
    1b16:	f5 cf       	rjmp	.-22     	; 0x1b02 <XMEGANVM_WaitWhileNVMBusBusy>
    1b18:	81 e0       	ldi	r24, 0x01	; 1
		  return true;
	}
}
    1b1a:	08 95       	ret

00001b1c <XMEGANVM_EraseMemory>:
 *  \param[in] Address       Address inside the memory space to erase
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_EraseMemory(const uint8_t EraseCommand, const uint32_t Address)
{
    1b1c:	cf 92       	push	r12
    1b1e:	df 92       	push	r13
    1b20:	ef 92       	push	r14
    1b22:	ff 92       	push	r15
    1b24:	1f 93       	push	r17
    1b26:	18 2f       	mov	r17, r24
    1b28:	6a 01       	movw	r12, r20
    1b2a:	7b 01       	movw	r14, r22
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1b2c:	12 df       	rcall	.-476    	; 0x1952 <XMEGANVM_WaitWhileNVMControllerBusy>
    1b2e:	88 23       	and	r24, r24
    1b30:	09 f4       	brne	.+2      	; 0x1b34 <XMEGANVM_EraseMemory+0x18>
    1b32:	5a c0       	rjmp	.+180    	; 0x1be8 <XMEGANVM_EraseMemory+0xcc>
	  return false;

	/* EEPROM and Chip erasures are triggered differently to FLASH section erasures */
	if (EraseCommand == XMEGA_NVM_CMD_CHIPERASE)
    1b34:	10 34       	cpi	r17, 0x40	; 64
    1b36:	31 f4       	brne	.+12     	; 0x1b44 <XMEGANVM_EraseMemory+0x28>
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1b38:	8c e4       	ldi	r24, 0x4C	; 76
    1b3a:	80 de       	rcall	.-768    	; 0x183c <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1b3c:	8a e0       	ldi	r24, 0x0A	; 10
    1b3e:	f7 de       	rcall	.-530    	; 0x192e <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(EraseCommand);
    1b40:	80 e4       	ldi	r24, 0x40	; 64
    1b42:	39 c0       	rjmp	.+114    	; 0x1bb6 <XMEGANVM_EraseMemory+0x9a>
		/* Set CMDEX bit in NVM CTRLA register to start the erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(1 << 0);
	}
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
    1b44:	10 33       	cpi	r17, 0x30	; 48
    1b46:	09 f0       	breq	.+2      	; 0x1b4a <XMEGANVM_EraseMemory+0x2e>
    1b48:	3d c0       	rjmp	.+122    	; 0x1bc4 <XMEGANVM_EraseMemory+0xa8>
	{
		/* Send the EEPROM page buffer erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1b4a:	8c e4       	ldi	r24, 0x4C	; 76
    1b4c:	77 de       	rcall	.-786    	; 0x183c <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1b4e:	8a e0       	ldi	r24, 0x0A	; 10
    1b50:	ee de       	rcall	.-548    	; 0x192e <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF);
    1b52:	86 e3       	ldi	r24, 0x36	; 54
    1b54:	73 de       	rcall	.-794    	; 0x183c <XPROGTarget_SendByte>

		/* Set CMDEX bit in NVM CTRLA register to start the buffer erase */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1b56:	8c e4       	ldi	r24, 0x4C	; 76
    1b58:	71 de       	rcall	.-798    	; 0x183c <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1b5a:	8b e0       	ldi	r24, 0x0B	; 11
    1b5c:	e8 de       	rcall	.-560    	; 0x192e <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(1 << 0);
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	6d de       	rcall	.-806    	; 0x183c <XPROGTarget_SendByte>

		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1b62:	f7 de       	rcall	.-530    	; 0x1952 <XMEGANVM_WaitWhileNVMControllerBusy>
    1b64:	88 23       	and	r24, r24
    1b66:	09 f4       	brne	.+2      	; 0x1b6a <XMEGANVM_EraseMemory+0x4e>
    1b68:	3f c0       	rjmp	.+126    	; 0x1be8 <XMEGANVM_EraseMemory+0xcc>
		  return false;

		/* Send the EEPROM memory buffer write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1b6a:	8c e4       	ldi	r24, 0x4C	; 76
    1b6c:	67 de       	rcall	.-818    	; 0x183c <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1b6e:	8a e0       	ldi	r24, 0x0A	; 10
    1b70:	de de       	rcall	.-580    	; 0x192e <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF);
    1b72:	83 e3       	ldi	r24, 0x33	; 51
    1b74:	63 de       	rcall	.-826    	; 0x183c <XPROGTarget_SendByte>

		/* Load the PDI pointer register with the EEPROM page start address */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    1b76:	8b e6       	ldi	r24, 0x6B	; 107
    1b78:	61 de       	rcall	.-830    	; 0x183c <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(Address);
    1b7a:	c7 01       	movw	r24, r14
    1b7c:	b6 01       	movw	r22, r12
    1b7e:	bb de       	rcall	.-650    	; 0x18f6 <XMEGANVM_SendAddress>

		/* Send the REPEAT command with the specified number of bytes to write */
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    1b80:	80 ea       	ldi	r24, 0xA0	; 160
    1b82:	5c de       	rcall	.-840    	; 0x183c <XPROGTarget_SendByte>
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);
    1b84:	80 91 2e 01 	lds	r24, 0x012E
    1b88:	81 50       	subi	r24, 0x01	; 1
    1b8a:	58 de       	rcall	.-848    	; 0x183c <XPROGTarget_SendByte>

		/* Send a ST command with indirect access and post-increment to tag each byte in the EEPROM page buffer */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    1b8c:	84 e6       	ldi	r24, 0x64	; 100
    1b8e:	56 de       	rcall	.-852    	; 0x183c <XPROGTarget_SendByte>
    1b90:	10 e0       	ldi	r17, 0x00	; 0
    1b92:	03 c0       	rjmp	.+6      	; 0x1b9a <XMEGANVM_EraseMemory+0x7e>
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
		  XPROGTarget_SendByte(0x00);
    1b94:	80 e0       	ldi	r24, 0x00	; 0
    1b96:	52 de       	rcall	.-860    	; 0x183c <XPROGTarget_SendByte>
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);

		/* Send a ST command with indirect access and post-increment to tag each byte in the EEPROM page buffer */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
    1b98:	1f 5f       	subi	r17, 0xFF	; 255
    1b9a:	21 2f       	mov	r18, r17
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	80 91 2e 01 	lds	r24, 0x012E
    1ba2:	90 91 2f 01 	lds	r25, 0x012F
    1ba6:	28 17       	cp	r18, r24
    1ba8:	39 07       	cpc	r19, r25
    1baa:	a0 f3       	brcs	.-24     	; 0x1b94 <XMEGANVM_EraseMemory+0x78>
		  XPROGTarget_SendByte(0x00);

		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1bac:	8c e4       	ldi	r24, 0x4C	; 76
    1bae:	46 de       	rcall	.-884    	; 0x183c <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1bb0:	8a e0       	ldi	r24, 0x0A	; 10
    1bb2:	bd de       	rcall	.-646    	; 0x192e <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(EraseCommand);
    1bb4:	80 e3       	ldi	r24, 0x30	; 48
    1bb6:	42 de       	rcall	.-892    	; 0x183c <XPROGTarget_SendByte>

		/* Set CMDEX bit in NVM CTRLA register to start the EEPROM erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1bb8:	8c e4       	ldi	r24, 0x4C	; 76
    1bba:	40 de       	rcall	.-896    	; 0x183c <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1bbc:	8b e0       	ldi	r24, 0x0B	; 11
    1bbe:	b7 de       	rcall	.-658    	; 0x192e <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(1 << 0);
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	0c c0       	rjmp	.+24     	; 0x1bdc <XMEGANVM_EraseMemory+0xc0>
	}
	else
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1bc4:	8c e4       	ldi	r24, 0x4C	; 76
    1bc6:	3a de       	rcall	.-908    	; 0x183c <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1bc8:	8a e0       	ldi	r24, 0x0A	; 10
    1bca:	b1 de       	rcall	.-670    	; 0x192e <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(EraseCommand);
    1bcc:	81 2f       	mov	r24, r17
    1bce:	36 de       	rcall	.-916    	; 0x183c <XPROGTarget_SendByte>

		/* Other erase modes just need us to address a byte within the target memory space */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1bd0:	8c e4       	ldi	r24, 0x4C	; 76
    1bd2:	34 de       	rcall	.-920    	; 0x183c <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(Address);
    1bd4:	c7 01       	movw	r24, r14
    1bd6:	b6 01       	movw	r22, r12
    1bd8:	8e de       	rcall	.-740    	; 0x18f6 <XMEGANVM_SendAddress>
		XPROGTarget_SendByte(0x00);
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	2f de       	rcall	.-930    	; 0x183c <XPROGTarget_SendByte>
	}

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy()))
    1bde:	91 df       	rcall	.-222    	; 0x1b02 <XMEGANVM_WaitWhileNVMBusBusy>
    1be0:	88 23       	and	r24, r24
    1be2:	19 f0       	breq	.+6      	; 0x1bea <XMEGANVM_EraseMemory+0xce>
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	01 c0       	rjmp	.+2      	; 0x1bea <XMEGANVM_EraseMemory+0xce>
    1be8:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	return true;
}
    1bea:	1f 91       	pop	r17
    1bec:	ff 90       	pop	r15
    1bee:	ef 90       	pop	r14
    1bf0:	df 90       	pop	r13
    1bf2:	cf 90       	pop	r12
    1bf4:	08 95       	ret

00001bf6 <XMEGANVM_GetMemoryCRC>:
 *  \param[out] CRCDest     CRC Destination when read from the target
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_GetMemoryCRC(const uint8_t CRCCommand, uint32_t* const CRCDest)
{
    1bf6:	1f 93       	push	r17
    1bf8:	cf 93       	push	r28
    1bfa:	df 93       	push	r29
    1bfc:	18 2f       	mov	r17, r24
    1bfe:	eb 01       	movw	r28, r22
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1c00:	a8 de       	rcall	.-688    	; 0x1952 <XMEGANVM_WaitWhileNVMControllerBusy>
    1c02:	88 23       	and	r24, r24
    1c04:	41 f1       	breq	.+80     	; 0x1c56 <XMEGANVM_GetMemoryCRC+0x60>
	  return false;

	/* Set the NVM command to the correct CRC read command */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1c06:	8c e4       	ldi	r24, 0x4C	; 76
    1c08:	19 de       	rcall	.-974    	; 0x183c <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1c0a:	8a e0       	ldi	r24, 0x0A	; 10
    1c0c:	90 de       	rcall	.-736    	; 0x192e <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(CRCCommand);
    1c0e:	81 2f       	mov	r24, r17
    1c10:	15 de       	rcall	.-982    	; 0x183c <XPROGTarget_SendByte>

	/* Set CMDEX bit in NVM CTRLA register to start the CRC generation */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1c12:	8c e4       	ldi	r24, 0x4C	; 76
    1c14:	13 de       	rcall	.-986    	; 0x183c <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1c16:	8b e0       	ldi	r24, 0x0B	; 11
    1c18:	8a de       	rcall	.-748    	; 0x192e <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(1 << 0);
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	0f de       	rcall	.-994    	; 0x183c <XPROGTarget_SendByte>

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy()))
    1c1e:	71 df       	rcall	.-286    	; 0x1b02 <XMEGANVM_WaitWhileNVMBusBusy>
    1c20:	88 23       	and	r24, r24
    1c22:	c9 f0       	breq	.+50     	; 0x1c56 <XMEGANVM_GetMemoryCRC+0x60>
	  return false;

	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1c24:	96 de       	rcall	.-724    	; 0x1952 <XMEGANVM_WaitWhileNVMControllerBusy>
    1c26:	88 23       	and	r24, r24
    1c28:	b1 f0       	breq	.+44     	; 0x1c56 <XMEGANVM_GetMemoryCRC+0x60>
	  return false;

	/* Load the PDI pointer register with the DAT0 register start address */
	XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    1c2a:	8b e6       	ldi	r24, 0x6B	; 107
    1c2c:	07 de       	rcall	.-1010   	; 0x183c <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_DAT0);
    1c2e:	84 e0       	ldi	r24, 0x04	; 4
    1c30:	7e de       	rcall	.-772    	; 0x192e <XMEGANVM_SendNVMRegAddress>

	/* Send the REPEAT command to grab the CRC bytes */
	XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    1c32:	80 ea       	ldi	r24, 0xA0	; 160
    1c34:	03 de       	rcall	.-1018   	; 0x183c <XPROGTarget_SendByte>
	XPROGTarget_SendByte(XMEGA_CRC_LENGTH - 1);
    1c36:	82 e0       	ldi	r24, 0x02	; 2
    1c38:	01 de       	rcall	.-1022   	; 0x183c <XPROGTarget_SendByte>

	/* Read in the CRC bytes from the target */
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    1c3a:	84 e2       	ldi	r24, 0x24	; 36
    1c3c:	ff dd       	rcall	.-1026   	; 0x183c <XPROGTarget_SendByte>
	for (uint8_t i = 0; i < XMEGA_CRC_LENGTH; i++)
	  ((uint8_t*)CRCDest)[i] = XPROGTarget_ReceiveByte();
    1c3e:	2a de       	rcall	.-940    	; 0x1894 <XPROGTarget_ReceiveByte>
    1c40:	88 83       	st	Y, r24
    1c42:	28 de       	rcall	.-944    	; 0x1894 <XPROGTarget_ReceiveByte>
    1c44:	89 83       	std	Y+1, r24	; 0x01
    1c46:	26 de       	rcall	.-948    	; 0x1894 <XPROGTarget_ReceiveByte>
    1c48:	8a 83       	std	Y+2, r24	; 0x02

	return (TimeoutExpired == false);
    1c4a:	8a b5       	in	r24, 0x2a	; 42
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	88 23       	and	r24, r24
    1c50:	19 f4       	brne	.+6      	; 0x1c58 <XMEGANVM_GetMemoryCRC+0x62>
    1c52:	91 e0       	ldi	r25, 0x01	; 1
    1c54:	01 c0       	rjmp	.+2      	; 0x1c58 <XMEGANVM_GetMemoryCRC+0x62>
    1c56:	90 e0       	ldi	r25, 0x00	; 0
}
    1c58:	89 2f       	mov	r24, r25
    1c5a:	df 91       	pop	r29
    1c5c:	cf 91       	pop	r28
    1c5e:	1f 91       	pop	r17
    1c60:	08 95       	ret

00001c62 <XMEGANVM_DisablePDI>:
}

/** Removes access to the target's NVM controller and physically disables the target's physical PDI interface. */
void XMEGANVM_DisablePDI(void)
{
	XMEGANVM_WaitWhileNVMBusBusy();
    1c62:	4f df       	rcall	.-354    	; 0x1b02 <XMEGANVM_WaitWhileNVMBusBusy>

	/* Clear the RESET key in the RESET PDI register to allow the XMEGA to run */
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_RESET_REG);
    1c64:	81 ec       	ldi	r24, 0xC1	; 193
    1c66:	ea dd       	rcall	.-1068   	; 0x183c <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x00);
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	e8 dd       	rcall	.-1072   	; 0x183c <XPROGTarget_SendByte>

	/* Do it twice to make sure it takes effect (silicon bug?) */
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_RESET_REG);
    1c6c:	81 ec       	ldi	r24, 0xC1	; 193
    1c6e:	e6 dd       	rcall	.-1076   	; 0x183c <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x00);
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	e4 dd       	rcall	.-1080   	; 0x183c <XPROGTarget_SendByte>

	XPROGTarget_DisableTargetPDI();
}
    1c74:	31 ce       	rjmp	.-926    	; 0x18d8 <XPROGTarget_DisableTargetPDI>

00001c76 <XMEGANVM_EnablePDI>:
/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean true if the PDI interface was enabled successfully, false otherwise
 */
bool XMEGANVM_EnablePDI(void)
{
    1c76:	ef 92       	push	r14
    1c78:	ff 92       	push	r15
    1c7a:	0f 93       	push	r16
    1c7c:	1f 93       	push	r17
    1c7e:	df 93       	push	r29
    1c80:	cf 93       	push	r28
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    1c86:	28 97       	sbiw	r28, 0x08	; 8
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	f8 94       	cli
    1c8c:	de bf       	out	0x3e, r29	; 62
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	cd bf       	out	0x3d, r28	; 61
	/* Enable PDI programming mode with the attached target */
	XPROGTarget_EnableTargetPDI();
    1c92:	bc dd       	rcall	.-1160   	; 0x180c <XPROGTarget_EnableTargetPDI>

	/* Store the RESET key into the RESET PDI register to keep the XMEGA in reset */
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_RESET_REG);
    1c94:	81 ec       	ldi	r24, 0xC1	; 193
    1c96:	d2 dd       	rcall	.-1116   	; 0x183c <XPROGTarget_SendByte>
	XPROGTarget_SendByte(PDI_RESET_KEY);
    1c98:	89 e5       	ldi	r24, 0x59	; 89
    1c9a:	d0 dd       	rcall	.-1120   	; 0x183c <XPROGTarget_SendByte>

	/* Lower direction change guard time to 0 USART bits */
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_CTRL_REG);
    1c9c:	82 ec       	ldi	r24, 0xC2	; 194
    1c9e:	ce dd       	rcall	.-1124   	; 0x183c <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x07);
    1ca0:	87 e0       	ldi	r24, 0x07	; 7
    1ca2:	cc dd       	rcall	.-1128   	; 0x183c <XPROGTarget_SendByte>

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
    1ca4:	80 ee       	ldi	r24, 0xE0	; 224
    1ca6:	ca dd       	rcall	.-1132   	; 0x183c <XPROGTarget_SendByte>
    1ca8:	8e 01       	movw	r16, r28
    1caa:	08 5f       	subi	r16, 0xF8	; 248
    1cac:	1f 4f       	sbci	r17, 0xFF	; 255
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);
    1cae:	7e 01       	movw	r14, r28
    1cb0:	08 94       	sec
    1cb2:	e1 1c       	adc	r14, r1
    1cb4:	f1 1c       	adc	r15, r1
    1cb6:	d7 01       	movw	r26, r14
    1cb8:	e2 e3       	ldi	r30, 0x32	; 50
    1cba:	f1 e0       	ldi	r31, 0x01	; 1
    1cbc:	88 e0       	ldi	r24, 0x08	; 8
    1cbe:	01 90       	ld	r0, Z+
    1cc0:	0d 92       	st	X+, r0
    1cc2:	81 50       	subi	r24, 0x01	; 1
    1cc4:	e1 f7       	brne	.-8      	; 0x1cbe <XMEGANVM_EnablePDI+0x48>
    1cc6:	f8 01       	movw	r30, r16
    1cc8:	80 81       	ld	r24, Z
    1cca:	b8 dd       	rcall	.-1168   	; 0x183c <XPROGTarget_SendByte>
    1ccc:	01 50       	subi	r16, 0x01	; 1
    1cce:	10 40       	sbci	r17, 0x00	; 0
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_CTRL_REG);
	XPROGTarget_SendByte(0x07);

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
    1cd0:	0c 17       	cp	r16, r28
    1cd2:	1d 07       	cpc	r17, r29
    1cd4:	81 f7       	brne	.-32     	; 0x1cb6 <XMEGANVM_EnablePDI+0x40>
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
    1cd6:	15 df       	rcall	.-470    	; 0x1b02 <XMEGANVM_WaitWhileNVMBusBusy>
}
    1cd8:	28 96       	adiw	r28, 0x08	; 8
    1cda:	0f b6       	in	r0, 0x3f	; 63
    1cdc:	f8 94       	cli
    1cde:	de bf       	out	0x3e, r29	; 62
    1ce0:	0f be       	out	0x3f, r0	; 63
    1ce2:	cd bf       	out	0x3d, r28	; 61
    1ce4:	cf 91       	pop	r28
    1ce6:	df 91       	pop	r29
    1ce8:	1f 91       	pop	r17
    1cea:	0f 91       	pop	r16
    1cec:	ff 90       	pop	r15
    1cee:	ef 90       	pop	r14
    1cf0:	08 95       	ret

00001cf2 <TINYNVM_SendWriteNVMRegister>:
/** Sends a SOUT command to the target with the specified I/O address, ready for the data byte to be read.
 *
 *  \param[in] Address  6-bit I/O address to read from in the target's I/O memory space
 */
static void TINYNVM_SendWriteNVMRegister(const uint8_t Address)
{
    1cf2:	28 2f       	mov	r18, r24
	/* The TPI command for reading from the I/O space uses strange addressing, where the I/O address's upper
	 * two bits of the 6-bit address are shifted left once */
	XPROGTarget_SendByte(TPI_CMD_SOUT | ((Address & 0x30) << 1) | (Address & 0x0F));
    1cf4:	8f 70       	andi	r24, 0x0F	; 15
    1cf6:	80 69       	ori	r24, 0x90	; 144
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	20 73       	andi	r18, 0x30	; 48
    1cfc:	30 70       	andi	r19, 0x00	; 0
    1cfe:	22 0f       	add	r18, r18
    1d00:	33 1f       	adc	r19, r19
    1d02:	82 2b       	or	r24, r18
}
    1d04:	9b cd       	rjmp	.-1226   	; 0x183c <XPROGTarget_SendByte>

00001d06 <TINYNVM_SendPointerAddress>:

#if defined(ENABLE_XPROG_PROTOCOL) || defined(__DOXYGEN__)

/** Sends the given pointer address to the target's TPI pointer register */
static void TINYNVM_SendPointerAddress(const uint16_t AbsoluteAddress)
{
    1d06:	0f 93       	push	r16
    1d08:	1f 93       	push	r17
    1d0a:	8c 01       	movw	r16, r24
	/* Send the given 16-bit address to the target, LSB first */
	XPROGTarget_SendByte(TPI_CMD_SSTPR | 0);
    1d0c:	88 e6       	ldi	r24, 0x68	; 104
    1d0e:	96 dd       	rcall	.-1236   	; 0x183c <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress & 0xFF);
    1d10:	80 2f       	mov	r24, r16
    1d12:	94 dd       	rcall	.-1240   	; 0x183c <XPROGTarget_SendByte>
	XPROGTarget_SendByte(TPI_CMD_SSTPR | 1);
    1d14:	89 e6       	ldi	r24, 0x69	; 105
    1d16:	92 dd       	rcall	.-1244   	; 0x183c <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
    1d18:	01 2f       	mov	r16, r17
    1d1a:	11 27       	eor	r17, r17
    1d1c:	80 2f       	mov	r24, r16
    1d1e:	8e dd       	rcall	.-1252   	; 0x183c <XPROGTarget_SendByte>
}
    1d20:	1f 91       	pop	r17
    1d22:	0f 91       	pop	r16
    1d24:	08 95       	ret

00001d26 <TINYNVM_WaitWhileNVMControllerBusy>:
{
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the SIN command to read the TPI STATUS register to see the NVM bus is busy */
		TINYNVM_SendReadNVMRegister(XPROG_Param_NVMCSRRegAddr);
    1d26:	20 91 31 01 	lds	r18, 0x0131
 */
static void TINYNVM_SendReadNVMRegister(const uint8_t Address)
{
	/* The TPI command for reading from the I/O space uses strange addressing, where the I/O address's upper
	 * two bits of the 6-bit address are shifted left once */
	XPROGTarget_SendByte(TPI_CMD_SIN | ((Address & 0x30) << 1) | (Address & 0x0F));
    1d2a:	82 2f       	mov	r24, r18
    1d2c:	8f 70       	andi	r24, 0x0F	; 15
    1d2e:	80 61       	ori	r24, 0x10	; 16
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	20 73       	andi	r18, 0x30	; 48
    1d34:	30 70       	andi	r19, 0x00	; 0
    1d36:	22 0f       	add	r18, r18
    1d38:	33 1f       	adc	r19, r19
    1d3a:	82 2b       	or	r24, r18
    1d3c:	7f dd       	rcall	.-1282   	; 0x183c <XPROGTarget_SendByte>
	for (;;)
	{
		/* Send the SIN command to read the TPI STATUS register to see the NVM bus is busy */
		TINYNVM_SendReadNVMRegister(XPROG_Param_NVMCSRRegAddr);

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    1d3e:	aa dd       	rcall	.-1196   	; 0x1894 <XPROGTarget_ReceiveByte>
    1d40:	98 2f       	mov	r25, r24

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutExpired)
    1d42:	8a b5       	in	r24, 0x2a	; 42
    1d44:	88 23       	and	r24, r24
    1d46:	11 f0       	breq	.+4      	; 0x1d4c <TINYNVM_WaitWhileNVMControllerBusy+0x26>
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	08 95       	ret
		  return false;

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
    1d4c:	97 fd       	sbrc	r25, 7
    1d4e:	eb cf       	rjmp	.-42     	; 0x1d26 <TINYNVM_WaitWhileNVMControllerBusy>
    1d50:	81 e0       	ldi	r24, 0x01	; 1
		  return true;
	}
}
    1d52:	08 95       	ret

00001d54 <TINYNVM_EraseMemory>:
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_EraseMemory(const uint8_t EraseCommand,
                         const uint16_t Address)
{
    1d54:	1f 93       	push	r17
    1d56:	cf 93       	push	r28
    1d58:	df 93       	push	r29
    1d5a:	18 2f       	mov	r17, r24
    1d5c:	eb 01       	movw	r28, r22
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1d5e:	e3 df       	rcall	.-58     	; 0x1d26 <TINYNVM_WaitWhileNVMControllerBusy>
    1d60:	88 23       	and	r24, r24
    1d62:	79 f0       	breq	.+30     	; 0x1d82 <TINYNVM_EraseMemory+0x2e>
	  return false;

	/* Set the NVM control register to the target memory erase command */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    1d64:	80 91 30 01 	lds	r24, 0x0130
    1d68:	c4 df       	rcall	.-120    	; 0x1cf2 <TINYNVM_SendWriteNVMRegister>
	XPROGTarget_SendByte(EraseCommand);
    1d6a:	81 2f       	mov	r24, r17
    1d6c:	67 dd       	rcall	.-1330   	; 0x183c <XPROGTarget_SendByte>

	/* Write to a high byte location within the target address space to start the erase process */
	TINYNVM_SendPointerAddress(Address | 0x0001);
    1d6e:	ce 01       	movw	r24, r28
    1d70:	81 60       	ori	r24, 0x01	; 1
    1d72:	c9 df       	rcall	.-110    	; 0x1d06 <TINYNVM_SendPointerAddress>
	XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT);
    1d74:	80 e6       	ldi	r24, 0x60	; 96
    1d76:	62 dd       	rcall	.-1340   	; 0x183c <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x00);
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	60 dd       	rcall	.-1344   	; 0x183c <XPROGTarget_SendByte>

	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1d7c:	d4 df       	rcall	.-88     	; 0x1d26 <TINYNVM_WaitWhileNVMControllerBusy>
    1d7e:	81 11       	cpse	r24, r1
    1d80:	81 e0       	ldi	r24, 0x01	; 1
	  return false;

	return true;
}
    1d82:	df 91       	pop	r29
    1d84:	cf 91       	pop	r28
    1d86:	1f 91       	pop	r17
    1d88:	08 95       	ret

00001d8a <TINYNVM_WriteMemory>:
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_WriteMemory(const uint16_t WriteAddress,
                         uint8_t* WriteBuffer,
                         uint16_t WriteLength)
{
    1d8a:	ef 92       	push	r14
    1d8c:	ff 92       	push	r15
    1d8e:	0f 93       	push	r16
    1d90:	1f 93       	push	r17
    1d92:	cf 93       	push	r28
    1d94:	df 93       	push	r29
    1d96:	7c 01       	movw	r14, r24
    1d98:	8b 01       	movw	r16, r22
    1d9a:	ea 01       	movw	r28, r20
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1d9c:	c4 df       	rcall	.-120    	; 0x1d26 <TINYNVM_WaitWhileNVMControllerBusy>
    1d9e:	88 23       	and	r24, r24
    1da0:	21 f1       	breq	.+72     	; 0x1dea <TINYNVM_WriteMemory+0x60>
	  return false;

	/* Must have an integer number of words to write - if extra byte, word-align via a dummy high byte */
	if (WriteLength & 0x01)
    1da2:	c0 ff       	sbrs	r28, 0
    1da4:	06 c0       	rjmp	.+12     	; 0x1db2 <TINYNVM_WriteMemory+0x28>
	  WriteBuffer[WriteLength++] = 0xFF;
    1da6:	f8 01       	movw	r30, r16
    1da8:	ec 0f       	add	r30, r28
    1daa:	fd 1f       	adc	r31, r29
    1dac:	8f ef       	ldi	r24, 0xFF	; 255
    1dae:	80 83       	st	Z, r24
    1db0:	21 96       	adiw	r28, 0x01	; 1

	/* Set the NVM control register to the WORD WRITE command for memory writing */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    1db2:	80 91 30 01 	lds	r24, 0x0130
    1db6:	9d df       	rcall	.-198    	; 0x1cf2 <TINYNVM_SendWriteNVMRegister>
	XPROGTarget_SendByte(TINY_NVM_CMD_WORDWRITE);
    1db8:	8d e1       	ldi	r24, 0x1D	; 29
    1dba:	40 dd       	rcall	.-1408   	; 0x183c <XPROGTarget_SendByte>

	/* Send the address of the location to write to */
	TINYNVM_SendPointerAddress(WriteAddress);
    1dbc:	c7 01       	movw	r24, r14
    1dbe:	a3 df       	rcall	.-186    	; 0x1d06 <TINYNVM_SendPointerAddress>
    1dc0:	10 c0       	rjmp	.+32     	; 0x1de2 <TINYNVM_WriteMemory+0x58>

	while (WriteLength)
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1dc2:	b1 df       	rcall	.-158    	; 0x1d26 <TINYNVM_WaitWhileNVMControllerBusy>
    1dc4:	88 23       	and	r24, r24
    1dc6:	89 f0       	breq	.+34     	; 0x1dea <TINYNVM_WriteMemory+0x60>
		  return false;

		/* Write the low byte of data to the target */
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
    1dc8:	84 e6       	ldi	r24, 0x64	; 100
    1dca:	38 dd       	rcall	.-1424   	; 0x183c <XPROGTarget_SendByte>
		XPROGTarget_SendByte(*(WriteBuffer++));
    1dcc:	f8 01       	movw	r30, r16
    1dce:	80 81       	ld	r24, Z
    1dd0:	35 dd       	rcall	.-1430   	; 0x183c <XPROGTarget_SendByte>

		/* Write the high byte of data to the target */
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
    1dd2:	84 e6       	ldi	r24, 0x64	; 100
    1dd4:	33 dd       	rcall	.-1434   	; 0x183c <XPROGTarget_SendByte>
		XPROGTarget_SendByte(*(WriteBuffer++));
    1dd6:	f8 01       	movw	r30, r16
    1dd8:	81 81       	ldd	r24, Z+1	; 0x01
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_WriteMemory(const uint16_t WriteAddress,
                         uint8_t* WriteBuffer,
                         uint16_t WriteLength)
{
    1dda:	0e 5f       	subi	r16, 0xFE	; 254
    1ddc:	1f 4f       	sbci	r17, 0xFF	; 255
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
		XPROGTarget_SendByte(*(WriteBuffer++));

		/* Write the high byte of data to the target */
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
		XPROGTarget_SendByte(*(WriteBuffer++));
    1dde:	2e dd       	rcall	.-1444   	; 0x183c <XPROGTarget_SendByte>

		/* Need to decrement the write length twice, since we wrote a whole two-byte word */
		WriteLength -= 2;
    1de0:	22 97       	sbiw	r28, 0x02	; 2
	XPROGTarget_SendByte(TINY_NVM_CMD_WORDWRITE);

	/* Send the address of the location to write to */
	TINYNVM_SendPointerAddress(WriteAddress);

	while (WriteLength)
    1de2:	20 97       	sbiw	r28, 0x00	; 0
    1de4:	71 f7       	brne	.-36     	; 0x1dc2 <TINYNVM_WriteMemory+0x38>
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	01 c0       	rjmp	.+2      	; 0x1dec <TINYNVM_WriteMemory+0x62>
    1dea:	80 e0       	ldi	r24, 0x00	; 0
		/* Need to decrement the write length twice, since we wrote a whole two-byte word */
		WriteLength -= 2;
	}

	return true;
}
    1dec:	df 91       	pop	r29
    1dee:	cf 91       	pop	r28
    1df0:	1f 91       	pop	r17
    1df2:	0f 91       	pop	r16
    1df4:	ff 90       	pop	r15
    1df6:	ef 90       	pop	r14
    1df8:	08 95       	ret

00001dfa <TINYNVM_ReadMemory>:
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_ReadMemory(const uint16_t ReadAddress,
                        uint8_t* ReadBuffer,
                        uint16_t ReadSize)
{
    1dfa:	ef 92       	push	r14
    1dfc:	ff 92       	push	r15
    1dfe:	0f 93       	push	r16
    1e00:	1f 93       	push	r17
    1e02:	cf 93       	push	r28
    1e04:	df 93       	push	r29
    1e06:	8c 01       	movw	r16, r24
    1e08:	7b 01       	movw	r14, r22
    1e0a:	ea 01       	movw	r28, r20
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1e0c:	8c df       	rcall	.-232    	; 0x1d26 <TINYNVM_WaitWhileNVMControllerBusy>
    1e0e:	88 23       	and	r24, r24
    1e10:	11 f4       	brne	.+4      	; 0x1e16 <TINYNVM_ReadMemory+0x1c>
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	19 c0       	rjmp	.+50     	; 0x1e48 <TINYNVM_ReadMemory+0x4e>
	  return false;

	/* Set the NVM control register to the NO OP command for memory reading */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    1e16:	80 91 30 01 	lds	r24, 0x0130
    1e1a:	6b df       	rcall	.-298    	; 0x1cf2 <TINYNVM_SendWriteNVMRegister>
	XPROGTarget_SendByte(TINY_NVM_CMD_NOOP);
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	0e dd       	rcall	.-1508   	; 0x183c <XPROGTarget_SendByte>

	/* Send the address of the location to read from */
	TINYNVM_SendPointerAddress(ReadAddress);
    1e20:	c8 01       	movw	r24, r16
    1e22:	71 df       	rcall	.-286    	; 0x1d06 <TINYNVM_SendPointerAddress>
    1e24:	06 c0       	rjmp	.+12     	; 0x1e32 <TINYNVM_ReadMemory+0x38>

	while (ReadSize-- && !(TimeoutExpired))
	{
		/* Read the byte of data from the target */
		XPROGTarget_SendByte(TPI_CMD_SLD | TPI_POINTER_INDIRECT_PI);
    1e26:	84 e2       	ldi	r24, 0x24	; 36
    1e28:	09 dd       	rcall	.-1518   	; 0x183c <XPROGTarget_SendByte>
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
    1e2a:	34 dd       	rcall	.-1432   	; 0x1894 <XPROGTarget_ReceiveByte>
    1e2c:	f7 01       	movw	r30, r14
    1e2e:	81 93       	st	Z+, r24
    1e30:	7f 01       	movw	r14, r30
	XPROGTarget_SendByte(TINY_NVM_CMD_NOOP);

	/* Send the address of the location to read from */
	TINYNVM_SendPointerAddress(ReadAddress);

	while (ReadSize-- && !(TimeoutExpired))
    1e32:	20 97       	sbiw	r28, 0x00	; 0
    1e34:	21 f0       	breq	.+8      	; 0x1e3e <TINYNVM_ReadMemory+0x44>
    1e36:	8a b5       	in	r24, 0x2a	; 42
    1e38:	21 97       	sbiw	r28, 0x01	; 1
    1e3a:	88 23       	and	r24, r24
    1e3c:	a1 f3       	breq	.-24     	; 0x1e26 <TINYNVM_ReadMemory+0x2c>
		/* Read the byte of data from the target */
		XPROGTarget_SendByte(TPI_CMD_SLD | TPI_POINTER_INDIRECT_PI);
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
	}

	return (TimeoutExpired == false);
    1e3e:	8a b5       	in	r24, 0x2a	; 42
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	88 23       	and	r24, r24
    1e44:	09 f4       	brne	.+2      	; 0x1e48 <TINYNVM_ReadMemory+0x4e>
    1e46:	91 e0       	ldi	r25, 0x01	; 1
}
    1e48:	89 2f       	mov	r24, r25
    1e4a:	df 91       	pop	r29
    1e4c:	cf 91       	pop	r28
    1e4e:	1f 91       	pop	r17
    1e50:	0f 91       	pop	r16
    1e52:	ff 90       	pop	r15
    1e54:	ef 90       	pop	r14
    1e56:	08 95       	ret

00001e58 <TINYNVM_WaitWhileNVMBusBusy>:
{
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the SLDCS command to read the TPI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(TPI_CMD_SLDCS | TPI_STATUS_REG);
    1e58:	80 e8       	ldi	r24, 0x80	; 128
    1e5a:	f0 dc       	rcall	.-1568   	; 0x183c <XPROGTarget_SendByte>

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    1e5c:	1b dd       	rcall	.-1482   	; 0x1894 <XPROGTarget_ReceiveByte>
    1e5e:	98 2f       	mov	r25, r24

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutExpired)
    1e60:	8a b5       	in	r24, 0x2a	; 42
    1e62:	88 23       	and	r24, r24
    1e64:	11 f0       	breq	.+4      	; 0x1e6a <TINYNVM_WaitWhileNVMBusBusy+0x12>
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	08 95       	ret
		  return false;

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & TPI_STATUS_NVM)
    1e6a:	91 ff       	sbrs	r25, 1
    1e6c:	f5 cf       	rjmp	.-22     	; 0x1e58 <TINYNVM_WaitWhileNVMBusBusy>
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
		  return true;
	}
}
    1e70:	08 95       	ret

00001e72 <TINYNVM_DisableTPI>:
}

/** Removes access to the target's NVM controller and physically disables the target's physical TPI interface. */
void TINYNVM_DisableTPI(void)
{
	TINYNVM_WaitWhileNVMBusBusy();
    1e72:	f2 df       	rcall	.-28     	; 0x1e58 <TINYNVM_WaitWhileNVMBusBusy>

	/* Clear the NVMEN bit in the TPI STATUS register to disable TPI mode */
	XPROGTarget_SendByte(TPI_CMD_SSTCS | TPI_STATUS_REG);
    1e74:	80 ec       	ldi	r24, 0xC0	; 192
    1e76:	e2 dc       	rcall	.-1596   	; 0x183c <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x00);
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	e0 dc       	rcall	.-1600   	; 0x183c <XPROGTarget_SendByte>

	XPROGTarget_DisableTargetTPI();
}
    1e7c:	1a cd       	rjmp	.-1484   	; 0x18b2 <XPROGTarget_DisableTargetTPI>

00001e7e <TINYNVM_EnableTPI>:
/** Enables the physical TPI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean true if the TPI interface was enabled successfully, false otherwise
 */
bool TINYNVM_EnableTPI(void)
{
    1e7e:	ef 92       	push	r14
    1e80:	ff 92       	push	r15
    1e82:	0f 93       	push	r16
    1e84:	1f 93       	push	r17
    1e86:	df 93       	push	r29
    1e88:	cf 93       	push	r28
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
    1e8e:	28 97       	sbiw	r28, 0x08	; 8
    1e90:	0f b6       	in	r0, 0x3f	; 63
    1e92:	f8 94       	cli
    1e94:	de bf       	out	0x3e, r29	; 62
    1e96:	0f be       	out	0x3f, r0	; 63
    1e98:	cd bf       	out	0x3d, r28	; 61
	/* Enable TPI programming mode with the attached target */
	XPROGTarget_EnableTargetTPI();
    1e9a:	9f dc       	rcall	.-1730   	; 0x17da <XPROGTarget_EnableTargetTPI>

	/* Lower direction change guard time to 0 USART bits */
	XPROGTarget_SendByte(TPI_CMD_SSTCS | TPI_CTRL_REG);
    1e9c:	82 ec       	ldi	r24, 0xC2	; 194
    1e9e:	ce dc       	rcall	.-1636   	; 0x183c <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x07);
    1ea0:	87 e0       	ldi	r24, 0x07	; 7
    1ea2:	cc dc       	rcall	.-1640   	; 0x183c <XPROGTarget_SendByte>

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(TPI_CMD_SKEY);
    1ea4:	80 ee       	ldi	r24, 0xE0	; 224
    1ea6:	ca dc       	rcall	.-1644   	; 0x183c <XPROGTarget_SendByte>
    1ea8:	8e 01       	movw	r16, r28
    1eaa:	08 5f       	subi	r16, 0xF8	; 248
    1eac:	1f 4f       	sbci	r17, 0xFF	; 255
	for (uint8_t i = sizeof(TPI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(TPI_NVMENABLE_KEY[i - 1]);
    1eae:	7e 01       	movw	r14, r28
    1eb0:	08 94       	sec
    1eb2:	e1 1c       	adc	r14, r1
    1eb4:	f1 1c       	adc	r15, r1
    1eb6:	d7 01       	movw	r26, r14
    1eb8:	ea e3       	ldi	r30, 0x3A	; 58
    1eba:	f1 e0       	ldi	r31, 0x01	; 1
    1ebc:	88 e0       	ldi	r24, 0x08	; 8
    1ebe:	01 90       	ld	r0, Z+
    1ec0:	0d 92       	st	X+, r0
    1ec2:	81 50       	subi	r24, 0x01	; 1
    1ec4:	e1 f7       	brne	.-8      	; 0x1ebe <TINYNVM_EnableTPI+0x40>
    1ec6:	f8 01       	movw	r30, r16
    1ec8:	80 81       	ld	r24, Z
    1eca:	b8 dc       	rcall	.-1680   	; 0x183c <XPROGTarget_SendByte>
    1ecc:	01 50       	subi	r16, 0x01	; 1
    1ece:	10 40       	sbci	r17, 0x00	; 0
	XPROGTarget_SendByte(TPI_CMD_SSTCS | TPI_CTRL_REG);
	XPROGTarget_SendByte(0x07);

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(TPI_CMD_SKEY);
	for (uint8_t i = sizeof(TPI_NVMENABLE_KEY); i > 0; i--)
    1ed0:	0c 17       	cp	r16, r28
    1ed2:	1d 07       	cpc	r17, r29
    1ed4:	81 f7       	brne	.-32     	; 0x1eb6 <TINYNVM_EnableTPI+0x38>
	  XPROGTarget_SendByte(TPI_NVMENABLE_KEY[i - 1]);

	/* Wait until the NVM bus becomes active */
	return TINYNVM_WaitWhileNVMBusBusy();
    1ed6:	c0 df       	rcall	.-128    	; 0x1e58 <TINYNVM_WaitWhileNVMBusBusy>
}
    1ed8:	28 96       	adiw	r28, 0x08	; 8
    1eda:	0f b6       	in	r0, 0x3f	; 63
    1edc:	f8 94       	cli
    1ede:	de bf       	out	0x3e, r29	; 62
    1ee0:	0f be       	out	0x3f, r0	; 63
    1ee2:	cd bf       	out	0x3d, r28	; 61
    1ee4:	cf 91       	pop	r28
    1ee6:	df 91       	pop	r29
    1ee8:	1f 91       	pop	r17
    1eea:	0f 91       	pop	r16
    1eec:	ff 90       	pop	r15
    1eee:	ef 90       	pop	r14
    1ef0:	08 95       	ret

00001ef2 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1ef2:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1ef6:	80 91 eb 00 	lds	r24, 0x00EB
    1efa:	81 60       	ori	r24, 0x01	; 1
    1efc:	80 93 eb 00 	sts	0x00EB, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
    1f00:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
    1f04:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
    1f08:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1f0c:	80 91 ee 00 	lds	r24, 0x00EE
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1f10:	88 1f       	adc	r24, r24
    1f12:	88 27       	eor	r24, r24
    1f14:	88 1f       	adc	r24, r24
    1f16:	08 95       	ret

00001f18 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1f18:	80 91 4d 01 	lds	r24, 0x014D
    1f1c:	88 23       	and	r24, r24
    1f1e:	8c f4       	brge	.+34     	; 0x1f42 <Endpoint_ClearStatusStage+0x2a>
    1f20:	03 c0       	rjmp	.+6      	; 0x1f28 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1f22:	8e b3       	in	r24, 0x1e	; 30
    1f24:	88 23       	and	r24, r24
    1f26:	b1 f0       	breq	.+44     	; 0x1f54 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1f28:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1f2c:	82 ff       	sbrs	r24, 2
    1f2e:	f9 cf       	rjmp	.-14     	; 0x1f22 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1f30:	80 91 e8 00 	lds	r24, 0x00E8
    1f34:	8b 77       	andi	r24, 0x7B	; 123
    1f36:	80 93 e8 00 	sts	0x00E8, r24
    1f3a:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1f3c:	8e b3       	in	r24, 0x1e	; 30
    1f3e:	88 23       	and	r24, r24
    1f40:	49 f0       	breq	.+18     	; 0x1f54 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1f42:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1f46:	80 ff       	sbrs	r24, 0
    1f48:	f9 cf       	rjmp	.-14     	; 0x1f3c <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f4a:	80 91 e8 00 	lds	r24, 0x00E8
    1f4e:	8e 77       	andi	r24, 0x7E	; 126
    1f50:	80 93 e8 00 	sts	0x00E8, r24
    1f54:	08 95       	ret

00001f56 <Endpoint_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1f56:	40 91 e4 00 	lds	r20, 0x00E4
    1f5a:	50 91 e5 00 	lds	r21, 0x00E5
    1f5e:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
    1f60:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
    1f64:	80 78       	andi	r24, 0x80	; 128
    1f66:	80 38       	cpi	r24, 0x80	; 128
    1f68:	29 f4       	brne	.+10     	; 0x1f74 <Endpoint_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1f6a:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
    1f6e:	80 ff       	sbrs	r24, 0
    1f70:	05 c0       	rjmp	.+10     	; 0x1f7c <Endpoint_WaitUntilReady+0x26>
    1f72:	21 c0       	rjmp	.+66     	; 0x1fb6 <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1f74:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1f78:	82 fd       	sbrc	r24, 2
    1f7a:	1d c0       	rjmp	.+58     	; 0x1fb6 <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1f7c:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1f7e:	88 23       	and	r24, r24
    1f80:	11 f4       	brne	.+4      	; 0x1f86 <Endpoint_WaitUntilReady+0x30>
    1f82:	82 e0       	ldi	r24, 0x02	; 2
    1f84:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1f86:	85 30       	cpi	r24, 0x05	; 5
    1f88:	11 f4       	brne	.+4      	; 0x1f8e <Endpoint_WaitUntilReady+0x38>
    1f8a:	83 e0       	ldi	r24, 0x03	; 3
    1f8c:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1f8e:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1f92:	85 ff       	sbrs	r24, 5
    1f94:	02 c0       	rjmp	.+4      	; 0x1f9a <Endpoint_WaitUntilReady+0x44>
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	08 95       	ret
    1f9a:	80 91 e4 00 	lds	r24, 0x00E4
    1f9e:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1fa2:	84 17       	cp	r24, r20
    1fa4:	95 07       	cpc	r25, r21
    1fa6:	e1 f2       	breq	.-72     	; 0x1f60 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1fa8:	22 23       	and	r18, r18
    1faa:	11 f4       	brne	.+4      	; 0x1fb0 <Endpoint_WaitUntilReady+0x5a>
    1fac:	84 e0       	ldi	r24, 0x04	; 4
    1fae:	08 95       	ret
    1fb0:	21 50       	subi	r18, 0x01	; 1
    1fb2:	ac 01       	movw	r20, r24
    1fb4:	d5 cf       	rjmp	.-86     	; 0x1f60 <Endpoint_WaitUntilReady+0xa>
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1fb8:	08 95       	ret

00001fba <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1fba:	3c d0       	rcall	.+120    	; 0x2034 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1fbc:	3e d0       	rcall	.+124    	; 0x203a <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1fbe:	80 91 d8 00 	lds	r24, 0x00D8
    1fc2:	8f 77       	andi	r24, 0x7F	; 127
    1fc4:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
    1fc8:	80 91 d8 00 	lds	r24, 0x00D8
    1fcc:	80 68       	ori	r24, 0x80	; 128
    1fce:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    1fd2:	80 91 d8 00 	lds	r24, 0x00D8
    1fd6:	8f 7d       	andi	r24, 0xDF	; 223
    1fd8:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1fdc:	84 e0       	ldi	r24, 0x04	; 4
    1fde:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1fe0:	86 e0       	ldi	r24, 0x06	; 6
    1fe2:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1fe4:	09 b4       	in	r0, 0x29	; 41
    1fe6:	00 fe       	sbrs	r0, 0
    1fe8:	fd cf       	rjmp	.-6      	; 0x1fe4 <USB_ResetInterface+0x2a>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1fea:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
    1fec:	10 92 4b 01 	sts	0x014B, r1
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	60 e0       	ldi	r22, 0x00	; 0
    1ff4:	42 e1       	ldi	r20, 0x12	; 18
    1ff6:	7d df       	rcall	.-262    	; 0x1ef2 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1ff8:	80 91 e1 00 	lds	r24, 0x00E1
    1ffc:	8e 7f       	andi	r24, 0xFE	; 254
    1ffe:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    2002:	80 91 e2 00 	lds	r24, 0x00E2
    2006:	81 60       	ori	r24, 0x01	; 1
    2008:	80 93 e2 00 	sts	0x00E2, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    200c:	80 91 e2 00 	lds	r24, 0x00E2
    2010:	88 60       	ori	r24, 0x08	; 8
    2012:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    2016:	80 91 e0 00 	lds	r24, 0x00E0
    201a:	8e 7f       	andi	r24, 0xFE	; 254
    201c:	80 93 e0 00 	sts	0x00E0, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    2020:	08 95       	ret

00002022 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
			#else
				REGCR   &= ~(1 << REGDIS);
    2022:	e3 e6       	ldi	r30, 0x63	; 99
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	8e 7f       	andi	r24, 0xFE	; 254
    202a:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	80 93 4c 01 	sts	0x014C, r24

	USB_ResetInterface();
}
    2032:	c3 cf       	rjmp	.-122    	; 0x1fba <USB_ResetInterface>

00002034 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    2034:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    2038:	08 95       	ret

0000203a <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    203a:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    203e:	08 95       	ret

00002040 <__vector_11>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    2040:	1f 92       	push	r1
    2042:	0f 92       	push	r0
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	0f 92       	push	r0
    2048:	11 24       	eor	r1, r1
    204a:	2f 93       	push	r18
    204c:	3f 93       	push	r19
    204e:	4f 93       	push	r20
    2050:	5f 93       	push	r21
    2052:	6f 93       	push	r22
    2054:	7f 93       	push	r23
    2056:	8f 93       	push	r24
    2058:	9f 93       	push	r25
    205a:	af 93       	push	r26
    205c:	bf 93       	push	r27
    205e:	ef 93       	push	r30
    2060:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    2062:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    2066:	82 ff       	sbrs	r24, 2
    2068:	0a c0       	rjmp	.+20     	; 0x207e <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    206a:	80 91 e2 00 	lds	r24, 0x00E2
    206e:	82 ff       	sbrs	r24, 2
    2070:	06 c0       	rjmp	.+12     	; 0x207e <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    2072:	80 91 e1 00 	lds	r24, 0x00E1
    2076:	8b 7f       	andi	r24, 0xFB	; 251
    2078:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    207c:	f9 d2       	rcall	.+1522   	; 0x2670 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    207e:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    2082:	80 ff       	sbrs	r24, 0
    2084:	17 c0       	rjmp	.+46     	; 0x20b4 <__vector_11+0x74>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    2086:	80 91 e2 00 	lds	r24, 0x00E2
    208a:	80 ff       	sbrs	r24, 0
    208c:	13 c0       	rjmp	.+38     	; 0x20b4 <__vector_11+0x74>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    208e:	80 91 e2 00 	lds	r24, 0x00E2
    2092:	8e 7f       	andi	r24, 0xFE	; 254
    2094:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    2098:	80 91 e2 00 	lds	r24, 0x00E2
    209c:	80 61       	ori	r24, 0x10	; 16
    209e:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
    20a2:	80 91 d8 00 	lds	r24, 0x00D8
    20a6:	80 62       	ori	r24, 0x20	; 32
    20a8:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    20ac:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    20ae:	1e ba       	out	0x1e, r1	; 30
		EVENT_USB_Device_Disconnect();
    20b0:	0e 94 4c 01 	call	0x298	; 0x298 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    20b4:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    20b8:	84 ff       	sbrs	r24, 4
    20ba:	2d c0       	rjmp	.+90     	; 0x2116 <__vector_11+0xd6>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    20bc:	80 91 e2 00 	lds	r24, 0x00E2
    20c0:	84 ff       	sbrs	r24, 4
    20c2:	29 c0       	rjmp	.+82     	; 0x2116 <__vector_11+0xd6>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    20c4:	84 e0       	ldi	r24, 0x04	; 4
    20c6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    20c8:	86 e0       	ldi	r24, 0x06	; 6
    20ca:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    20cc:	09 b4       	in	r0, 0x29	; 41
    20ce:	00 fe       	sbrs	r0, 0
    20d0:	fd cf       	rjmp	.-6      	; 0x20cc <__vector_11+0x8c>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    20d2:	80 91 d8 00 	lds	r24, 0x00D8
    20d6:	8f 7d       	andi	r24, 0xDF	; 223
    20d8:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    20dc:	80 91 e1 00 	lds	r24, 0x00E1
    20e0:	8f 7e       	andi	r24, 0xEF	; 239
    20e2:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    20e6:	80 91 e2 00 	lds	r24, 0x00E2
    20ea:	8f 7e       	andi	r24, 0xEF	; 239
    20ec:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    20f0:	80 91 e2 00 	lds	r24, 0x00E2
    20f4:	81 60       	ori	r24, 0x01	; 1
    20f6:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    20fa:	80 91 4b 01 	lds	r24, 0x014B
    20fe:	88 23       	and	r24, r24
    2100:	31 f4       	brne	.+12     	; 0x210e <__vector_11+0xce>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2102:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2106:	87 fd       	sbrc	r24, 7
    2108:	02 c0       	rjmp	.+4      	; 0x210e <__vector_11+0xce>
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	01 c0       	rjmp	.+2      	; 0x2110 <__vector_11+0xd0>
    210e:	84 e0       	ldi	r24, 0x04	; 4
    2110:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    2112:	0e 94 47 01 	call	0x28e	; 0x28e <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    2116:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    211a:	83 ff       	sbrs	r24, 3
    211c:	21 c0       	rjmp	.+66     	; 0x2160 <__vector_11+0x120>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    211e:	80 91 e2 00 	lds	r24, 0x00E2
    2122:	83 ff       	sbrs	r24, 3
    2124:	1d c0       	rjmp	.+58     	; 0x2160 <__vector_11+0x120>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    2126:	80 91 e1 00 	lds	r24, 0x00E1
    212a:	87 7f       	andi	r24, 0xF7	; 247
    212c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    2130:	82 e0       	ldi	r24, 0x02	; 2
    2132:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
    2134:	10 92 4b 01 	sts	0x014B, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    2138:	80 91 e1 00 	lds	r24, 0x00E1
    213c:	8e 7f       	andi	r24, 0xFE	; 254
    213e:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2142:	80 91 e2 00 	lds	r24, 0x00E2
    2146:	8e 7f       	andi	r24, 0xFE	; 254
    2148:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    214c:	80 91 e2 00 	lds	r24, 0x00E2
    2150:	80 61       	ori	r24, 0x10	; 16
    2152:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	60 e0       	ldi	r22, 0x00	; 0
    215a:	42 e1       	ldi	r20, 0x12	; 18
    215c:	ca de       	rcall	.-620    	; 0x1ef2 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    215e:	88 d2       	rcall	.+1296   	; 0x2670 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    2160:	ff 91       	pop	r31
    2162:	ef 91       	pop	r30
    2164:	bf 91       	pop	r27
    2166:	af 91       	pop	r26
    2168:	9f 91       	pop	r25
    216a:	8f 91       	pop	r24
    216c:	7f 91       	pop	r23
    216e:	6f 91       	pop	r22
    2170:	5f 91       	pop	r21
    2172:	4f 91       	pop	r20
    2174:	3f 91       	pop	r19
    2176:	2f 91       	pop	r18
    2178:	0f 90       	pop	r0
    217a:	0f be       	out	0x3f, r0	; 63
    217c:	0f 90       	pop	r0
    217e:	1f 90       	pop	r1
    2180:	18 95       	reti

00002182 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    2182:	fc 01       	movw	r30, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    2184:	40 91 53 01 	lds	r20, 0x0153
    2188:	50 91 54 01 	lds	r21, 0x0154
    218c:	46 17       	cp	r20, r22
    218e:	57 07       	cpc	r21, r23
    2190:	10 f4       	brcc	.+4      	; 0x2196 <Endpoint_Write_Control_PStream_LE+0x14>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	3f c0       	rjmp	.+126    	; 0x2214 <Endpoint_Write_Control_PStream_LE+0x92>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    2196:	61 15       	cp	r22, r1
    2198:	71 05       	cpc	r23, r1
    219a:	11 f0       	breq	.+4      	; 0x21a0 <Endpoint_Write_Control_PStream_LE+0x1e>
    219c:	ab 01       	movw	r20, r22
    219e:	f9 cf       	rjmp	.-14     	; 0x2192 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    21a0:	80 91 e8 00 	lds	r24, 0x00E8
    21a4:	8e 77       	andi	r24, 0x7E	; 126
    21a6:	80 93 e8 00 	sts	0x00E8, r24
    21aa:	40 e0       	ldi	r20, 0x00	; 0
    21ac:	50 e0       	ldi	r21, 0x00	; 0
    21ae:	f1 cf       	rjmp	.-30     	; 0x2192 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    21b0:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    21b2:	88 23       	and	r24, r24
    21b4:	09 f4       	brne	.+2      	; 0x21b8 <Endpoint_Write_Control_PStream_LE+0x36>
    21b6:	3f c0       	rjmp	.+126    	; 0x2236 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    21b8:	85 30       	cpi	r24, 0x05	; 5
    21ba:	09 f4       	brne	.+2      	; 0x21be <Endpoint_Write_Control_PStream_LE+0x3c>
    21bc:	3e c0       	rjmp	.+124    	; 0x223a <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    21be:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    21c2:	83 ff       	sbrs	r24, 3
    21c4:	02 c0       	rjmp	.+4      	; 0x21ca <Endpoint_Write_Control_PStream_LE+0x48>
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    21ca:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    21ce:	82 fd       	sbrc	r24, 2
    21d0:	2c c0       	rjmp	.+88     	; 0x222a <Endpoint_Write_Control_PStream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    21d2:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    21d6:	80 ff       	sbrs	r24, 0
    21d8:	1d c0       	rjmp	.+58     	; 0x2214 <Endpoint_Write_Control_PStream_LE+0x92>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    21da:	80 91 f2 00 	lds	r24, 0x00F2
    21de:	28 2f       	mov	r18, r24
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	08 c0       	rjmp	.+16     	; 0x21f4 <Endpoint_Write_Control_PStream_LE+0x72>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    21e4:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    21e6:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    21ea:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    21ec:	41 50       	subi	r20, 0x01	; 1
    21ee:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    21f0:	2f 5f       	subi	r18, 0xFF	; 255
    21f2:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    21f4:	41 15       	cp	r20, r1
    21f6:	51 05       	cpc	r21, r1
    21f8:	19 f0       	breq	.+6      	; 0x2200 <Endpoint_Write_Control_PStream_LE+0x7e>
    21fa:	20 31       	cpi	r18, 0x10	; 16
    21fc:	31 05       	cpc	r19, r1
    21fe:	90 f3       	brcs	.-28     	; 0x21e4 <Endpoint_Write_Control_PStream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	20 31       	cpi	r18, 0x10	; 16
    2204:	31 05       	cpc	r19, r1
    2206:	09 f4       	brne	.+2      	; 0x220a <Endpoint_Write_Control_PStream_LE+0x88>
    2208:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    220a:	80 91 e8 00 	lds	r24, 0x00E8
    220e:	8e 77       	andi	r24, 0x7E	; 126
    2210:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2214:	41 15       	cp	r20, r1
    2216:	51 05       	cpc	r21, r1
    2218:	59 f6       	brne	.-106    	; 0x21b0 <Endpoint_Write_Control_PStream_LE+0x2e>
    221a:	99 23       	and	r25, r25
    221c:	49 f6       	brne	.-110    	; 0x21b0 <Endpoint_Write_Control_PStream_LE+0x2e>
    221e:	05 c0       	rjmp	.+10     	; 0x222a <Endpoint_Write_Control_PStream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2220:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2222:	88 23       	and	r24, r24
    2224:	41 f0       	breq	.+16     	; 0x2236 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2226:	85 30       	cpi	r24, 0x05	; 5
    2228:	41 f0       	breq	.+16     	; 0x223a <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    222a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    222e:	82 ff       	sbrs	r24, 2
    2230:	f7 cf       	rjmp	.-18     	; 0x2220 <Endpoint_Write_Control_PStream_LE+0x9e>
    2232:	80 e0       	ldi	r24, 0x00	; 0
    2234:	08 95       	ret
    2236:	82 e0       	ldi	r24, 0x02	; 2
    2238:	08 95       	ret
    223a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    223c:	08 95       	ret

0000223e <Endpoint_Read_Stream_BE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    223e:	bf 92       	push	r11
    2240:	cf 92       	push	r12
    2242:	df 92       	push	r13
    2244:	ef 92       	push	r14
    2246:	ff 92       	push	r15
    2248:	0f 93       	push	r16
    224a:	1f 93       	push	r17
    224c:	cf 93       	push	r28
    224e:	df 93       	push	r29
    2250:	8c 01       	movw	r16, r24
    2252:	eb 01       	movw	r28, r22
    2254:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    2256:	7f de       	rcall	.-770    	; 0x1f56 <Endpoint_WaitUntilReady>
    2258:	b8 2e       	mov	r11, r24
    225a:	88 23       	and	r24, r24
    225c:	b9 f5       	brne	.+110    	; 0x22cc <Endpoint_Read_Stream_BE+0x8e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    225e:	21 97       	sbiw	r28, 0x01	; 1
    2260:	0c 0f       	add	r16, r28
    2262:	1d 1f       	adc	r17, r29
    2264:	21 96       	adiw	r28, 0x01	; 1
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    2266:	c1 14       	cp	r12, r1
    2268:	d1 04       	cpc	r13, r1
    226a:	39 f0       	breq	.+14     	; 0x227a <Endpoint_Read_Stream_BE+0x3c>
	{
		Length -= *BytesProcessed;
    226c:	f6 01       	movw	r30, r12
    226e:	80 81       	ld	r24, Z
    2270:	91 81       	ldd	r25, Z+1	; 0x01
    2272:	c8 1b       	sub	r28, r24
    2274:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    2276:	08 1b       	sub	r16, r24
    2278:	19 0b       	sbc	r17, r25
    227a:	ee 24       	eor	r14, r14
    227c:	ff 24       	eor	r15, r15
    227e:	24 c0       	rjmp	.+72     	; 0x22c8 <Endpoint_Read_Stream_BE+0x8a>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2280:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    2284:	85 fd       	sbrc	r24, 5
    2286:	16 c0       	rjmp	.+44     	; 0x22b4 <Endpoint_Read_Stream_BE+0x76>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2288:	80 91 e8 00 	lds	r24, 0x00E8
    228c:	8b 77       	andi	r24, 0x7B	; 123
    228e:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    2292:	c1 14       	cp	r12, r1
    2294:	d1 04       	cpc	r13, r1
    2296:	49 f0       	breq	.+18     	; 0x22aa <Endpoint_Read_Stream_BE+0x6c>
			{
				*BytesProcessed += BytesInTransfer;
    2298:	f6 01       	movw	r30, r12
    229a:	80 81       	ld	r24, Z
    229c:	91 81       	ldd	r25, Z+1	; 0x01
    229e:	8e 0d       	add	r24, r14
    22a0:	9f 1d       	adc	r25, r15
    22a2:	91 83       	std	Z+1, r25	; 0x01
    22a4:	80 83       	st	Z, r24
    22a6:	85 e0       	ldi	r24, 0x05	; 5
    22a8:	12 c0       	rjmp	.+36     	; 0x22ce <Endpoint_Read_Stream_BE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    22aa:	e3 d1       	rcall	.+966    	; 0x2672 <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    22ac:	54 de       	rcall	.-856    	; 0x1f56 <Endpoint_WaitUntilReady>
    22ae:	88 23       	and	r24, r24
    22b0:	59 f0       	breq	.+22     	; 0x22c8 <Endpoint_Read_Stream_BE+0x8a>
    22b2:	0d c0       	rjmp	.+26     	; 0x22ce <Endpoint_Read_Stream_BE+0x90>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    22b4:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    22b8:	f8 01       	movw	r30, r16
    22ba:	80 83       	st	Z, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
    22bc:	01 50       	subi	r16, 0x01	; 1
    22be:	10 40       	sbci	r17, 0x00	; 0
			Length--;
    22c0:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    22c2:	08 94       	sec
    22c4:	e1 1c       	adc	r14, r1
    22c6:	f1 1c       	adc	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    22c8:	20 97       	sbiw	r28, 0x00	; 0
    22ca:	d1 f6       	brne	.-76     	; 0x2280 <Endpoint_Read_Stream_BE+0x42>
    22cc:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    22ce:	df 91       	pop	r29
    22d0:	cf 91       	pop	r28
    22d2:	1f 91       	pop	r17
    22d4:	0f 91       	pop	r16
    22d6:	ff 90       	pop	r15
    22d8:	ef 90       	pop	r14
    22da:	df 90       	pop	r13
    22dc:	cf 90       	pop	r12
    22de:	bf 90       	pop	r11
    22e0:	08 95       	ret

000022e2 <Endpoint_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    22e2:	bf 92       	push	r11
    22e4:	cf 92       	push	r12
    22e6:	df 92       	push	r13
    22e8:	ef 92       	push	r14
    22ea:	ff 92       	push	r15
    22ec:	0f 93       	push	r16
    22ee:	1f 93       	push	r17
    22f0:	cf 93       	push	r28
    22f2:	df 93       	push	r29
    22f4:	ec 01       	movw	r28, r24
    22f6:	8b 01       	movw	r16, r22
    22f8:	7a 01       	movw	r14, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    22fa:	2d de       	rcall	.-934    	; 0x1f56 <Endpoint_WaitUntilReady>
    22fc:	b8 2e       	mov	r11, r24
    22fe:	88 23       	and	r24, r24
    2300:	91 f5       	brne	.+100    	; 0x2366 <Endpoint_Read_Stream_LE+0x84>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    2302:	e1 14       	cp	r14, r1
    2304:	f1 04       	cpc	r15, r1
    2306:	39 f0       	breq	.+14     	; 0x2316 <Endpoint_Read_Stream_LE+0x34>
	{
		Length -= *BytesProcessed;
    2308:	f7 01       	movw	r30, r14
    230a:	80 81       	ld	r24, Z
    230c:	91 81       	ldd	r25, Z+1	; 0x01
    230e:	08 1b       	sub	r16, r24
    2310:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    2312:	c8 0f       	add	r28, r24
    2314:	d9 1f       	adc	r29, r25
    2316:	cc 24       	eor	r12, r12
    2318:	dd 24       	eor	r13, r13
    231a:	22 c0       	rjmp	.+68     	; 0x2360 <Endpoint_Read_Stream_LE+0x7e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    231c:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    2320:	85 fd       	sbrc	r24, 5
    2322:	16 c0       	rjmp	.+44     	; 0x2350 <Endpoint_Read_Stream_LE+0x6e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2324:	80 91 e8 00 	lds	r24, 0x00E8
    2328:	8b 77       	andi	r24, 0x7B	; 123
    232a:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    232e:	e1 14       	cp	r14, r1
    2330:	f1 04       	cpc	r15, r1
    2332:	49 f0       	breq	.+18     	; 0x2346 <Endpoint_Read_Stream_LE+0x64>
			{
				*BytesProcessed += BytesInTransfer;
    2334:	f7 01       	movw	r30, r14
    2336:	80 81       	ld	r24, Z
    2338:	91 81       	ldd	r25, Z+1	; 0x01
    233a:	8c 0d       	add	r24, r12
    233c:	9d 1d       	adc	r25, r13
    233e:	91 83       	std	Z+1, r25	; 0x01
    2340:	80 83       	st	Z, r24
    2342:	85 e0       	ldi	r24, 0x05	; 5
    2344:	11 c0       	rjmp	.+34     	; 0x2368 <Endpoint_Read_Stream_LE+0x86>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    2346:	95 d1       	rcall	.+810    	; 0x2672 <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    2348:	06 de       	rcall	.-1012   	; 0x1f56 <Endpoint_WaitUntilReady>
    234a:	88 23       	and	r24, r24
    234c:	49 f0       	breq	.+18     	; 0x2360 <Endpoint_Read_Stream_LE+0x7e>
    234e:	0c c0       	rjmp	.+24     	; 0x2368 <Endpoint_Read_Stream_LE+0x86>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2350:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    2354:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    2356:	01 50       	subi	r16, 0x01	; 1
    2358:	10 40       	sbci	r17, 0x00	; 0
			BytesInTransfer++;
    235a:	08 94       	sec
    235c:	c1 1c       	adc	r12, r1
    235e:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    2360:	01 15       	cp	r16, r1
    2362:	11 05       	cpc	r17, r1
    2364:	d9 f6       	brne	.-74     	; 0x231c <Endpoint_Read_Stream_LE+0x3a>
    2366:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    2368:	df 91       	pop	r29
    236a:	cf 91       	pop	r28
    236c:	1f 91       	pop	r17
    236e:	0f 91       	pop	r16
    2370:	ff 90       	pop	r15
    2372:	ef 90       	pop	r14
    2374:	df 90       	pop	r13
    2376:	cf 90       	pop	r12
    2378:	bf 90       	pop	r11
    237a:	08 95       	ret

0000237c <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    237c:	bf 92       	push	r11
    237e:	cf 92       	push	r12
    2380:	df 92       	push	r13
    2382:	ef 92       	push	r14
    2384:	ff 92       	push	r15
    2386:	0f 93       	push	r16
    2388:	1f 93       	push	r17
    238a:	cf 93       	push	r28
    238c:	df 93       	push	r29
    238e:	ec 01       	movw	r28, r24
    2390:	8b 01       	movw	r16, r22
    2392:	7a 01       	movw	r14, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    2394:	e0 dd       	rcall	.-1088   	; 0x1f56 <Endpoint_WaitUntilReady>
    2396:	b8 2e       	mov	r11, r24
    2398:	88 23       	and	r24, r24
    239a:	91 f5       	brne	.+100    	; 0x2400 <Endpoint_Write_Stream_LE+0x84>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    239c:	e1 14       	cp	r14, r1
    239e:	f1 04       	cpc	r15, r1
    23a0:	39 f0       	breq	.+14     	; 0x23b0 <Endpoint_Write_Stream_LE+0x34>
	{
		Length -= *BytesProcessed;
    23a2:	f7 01       	movw	r30, r14
    23a4:	80 81       	ld	r24, Z
    23a6:	91 81       	ldd	r25, Z+1	; 0x01
    23a8:	08 1b       	sub	r16, r24
    23aa:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    23ac:	c8 0f       	add	r28, r24
    23ae:	d9 1f       	adc	r29, r25
    23b0:	cc 24       	eor	r12, r12
    23b2:	dd 24       	eor	r13, r13
    23b4:	22 c0       	rjmp	.+68     	; 0x23fa <Endpoint_Write_Stream_LE+0x7e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    23b6:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    23ba:	85 fd       	sbrc	r24, 5
    23bc:	16 c0       	rjmp	.+44     	; 0x23ea <Endpoint_Write_Stream_LE+0x6e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    23be:	80 91 e8 00 	lds	r24, 0x00E8
    23c2:	8e 77       	andi	r24, 0x7E	; 126
    23c4:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    23c8:	e1 14       	cp	r14, r1
    23ca:	f1 04       	cpc	r15, r1
    23cc:	49 f0       	breq	.+18     	; 0x23e0 <Endpoint_Write_Stream_LE+0x64>
			{
				*BytesProcessed += BytesInTransfer;
    23ce:	f7 01       	movw	r30, r14
    23d0:	80 81       	ld	r24, Z
    23d2:	91 81       	ldd	r25, Z+1	; 0x01
    23d4:	8c 0d       	add	r24, r12
    23d6:	9d 1d       	adc	r25, r13
    23d8:	91 83       	std	Z+1, r25	; 0x01
    23da:	80 83       	st	Z, r24
    23dc:	85 e0       	ldi	r24, 0x05	; 5
    23de:	11 c0       	rjmp	.+34     	; 0x2402 <Endpoint_Write_Stream_LE+0x86>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    23e0:	48 d1       	rcall	.+656    	; 0x2672 <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    23e2:	b9 dd       	rcall	.-1166   	; 0x1f56 <Endpoint_WaitUntilReady>
    23e4:	88 23       	and	r24, r24
    23e6:	49 f0       	breq	.+18     	; 0x23fa <Endpoint_Write_Stream_LE+0x7e>
    23e8:	0c c0       	rjmp	.+24     	; 0x2402 <Endpoint_Write_Stream_LE+0x86>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    23ea:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    23ec:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    23f0:	01 50       	subi	r16, 0x01	; 1
    23f2:	10 40       	sbci	r17, 0x00	; 0
			BytesInTransfer++;
    23f4:	08 94       	sec
    23f6:	c1 1c       	adc	r12, r1
    23f8:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    23fa:	01 15       	cp	r16, r1
    23fc:	11 05       	cpc	r17, r1
    23fe:	d9 f6       	brne	.-74     	; 0x23b6 <Endpoint_Write_Stream_LE+0x3a>
    2400:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    2402:	df 91       	pop	r29
    2404:	cf 91       	pop	r28
    2406:	1f 91       	pop	r17
    2408:	0f 91       	pop	r16
    240a:	ff 90       	pop	r15
    240c:	ef 90       	pop	r14
    240e:	df 90       	pop	r13
    2410:	cf 90       	pop	r12
    2412:	bf 90       	pop	r11
    2414:	08 95       	ret

00002416 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    2416:	0f 93       	push	r16
    2418:	1f 93       	push	r17
    241a:	df 93       	push	r29
    241c:	cf 93       	push	r28
    241e:	00 d0       	rcall	.+0      	; 0x2420 <USB_Device_ProcessControlRequest+0xa>
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2424:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
    2428:	80 93 4d 01 	sts	0x014D, r24
    242c:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
    2430:	80 93 4e 01 	sts	0x014E, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    2434:	20 91 f1 00 	lds	r18, 0x00F1
    2438:	82 2f       	mov	r24, r18
				Data.Bytes[1] = UEDATX;
    243a:	20 91 f1 00 	lds	r18, 0x00F1
    243e:	92 2f       	mov	r25, r18
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
    2440:	90 93 50 01 	sts	0x0150, r25
    2444:	80 93 4f 01 	sts	0x014F, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    2448:	20 91 f1 00 	lds	r18, 0x00F1
    244c:	82 2f       	mov	r24, r18
				Data.Bytes[1] = UEDATX;
    244e:	20 91 f1 00 	lds	r18, 0x00F1
    2452:	92 2f       	mov	r25, r18
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
    2454:	90 93 52 01 	sts	0x0152, r25
    2458:	80 93 51 01 	sts	0x0151, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    245c:	20 91 f1 00 	lds	r18, 0x00F1
    2460:	82 2f       	mov	r24, r18
				Data.Bytes[1] = UEDATX;
    2462:	20 91 f1 00 	lds	r18, 0x00F1
    2466:	92 2f       	mov	r25, r18
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
    2468:	90 93 54 01 	sts	0x0154, r25
    246c:	80 93 53 01 	sts	0x0153, r24

	EVENT_USB_Device_ControlRequest();
    2470:	ff d0       	rcall	.+510    	; 0x2670 <USB_Event_Stub>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2472:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    2476:	83 ff       	sbrs	r24, 3
    2478:	e6 c0       	rjmp	.+460    	; 0x2646 <USB_Device_ProcessControlRequest+0x230>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    247a:	80 91 4d 01 	lds	r24, 0x014D

		switch (USB_ControlRequest.bRequest)
    247e:	90 91 4e 01 	lds	r25, 0x014E
    2482:	95 30       	cpi	r25, 0x05	; 5
    2484:	09 f4       	brne	.+2      	; 0x2488 <USB_Device_ProcessControlRequest+0x72>
    2486:	6d c0       	rjmp	.+218    	; 0x2562 <USB_Device_ProcessControlRequest+0x14c>
    2488:	96 30       	cpi	r25, 0x06	; 6
    248a:	40 f4       	brcc	.+16     	; 0x249c <USB_Device_ProcessControlRequest+0x86>
    248c:	91 30       	cpi	r25, 0x01	; 1
    248e:	81 f1       	breq	.+96     	; 0x24f0 <USB_Device_ProcessControlRequest+0xda>
    2490:	91 30       	cpi	r25, 0x01	; 1
    2492:	70 f0       	brcs	.+28     	; 0x24b0 <USB_Device_ProcessControlRequest+0x9a>
    2494:	93 30       	cpi	r25, 0x03	; 3
    2496:	09 f0       	breq	.+2      	; 0x249a <USB_Device_ProcessControlRequest+0x84>
    2498:	d6 c0       	rjmp	.+428    	; 0x2646 <USB_Device_ProcessControlRequest+0x230>
    249a:	2a c0       	rjmp	.+84     	; 0x24f0 <USB_Device_ProcessControlRequest+0xda>
    249c:	98 30       	cpi	r25, 0x08	; 8
    249e:	09 f4       	brne	.+2      	; 0x24a2 <USB_Device_ProcessControlRequest+0x8c>
    24a0:	a4 c0       	rjmp	.+328    	; 0x25ea <USB_Device_ProcessControlRequest+0x1d4>
    24a2:	99 30       	cpi	r25, 0x09	; 9
    24a4:	09 f4       	brne	.+2      	; 0x24a8 <USB_Device_ProcessControlRequest+0x92>
    24a6:	b3 c0       	rjmp	.+358    	; 0x260e <USB_Device_ProcessControlRequest+0x1f8>
    24a8:	96 30       	cpi	r25, 0x06	; 6
    24aa:	09 f0       	breq	.+2      	; 0x24ae <USB_Device_ProcessControlRequest+0x98>
    24ac:	cc c0       	rjmp	.+408    	; 0x2646 <USB_Device_ProcessControlRequest+0x230>
    24ae:	7c c0       	rjmp	.+248    	; 0x25a8 <USB_Device_ProcessControlRequest+0x192>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    24b0:	80 38       	cpi	r24, 0x80	; 128
    24b2:	09 f4       	brne	.+2      	; 0x24b6 <USB_Device_ProcessControlRequest+0xa0>
    24b4:	c8 c0       	rjmp	.+400    	; 0x2646 <USB_Device_ProcessControlRequest+0x230>
    24b6:	82 38       	cpi	r24, 0x82	; 130
    24b8:	09 f0       	breq	.+2      	; 0x24bc <USB_Device_ProcessControlRequest+0xa6>
    24ba:	c5 c0       	rjmp	.+394    	; 0x2646 <USB_Device_ProcessControlRequest+0x230>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    24bc:	80 91 51 01 	lds	r24, 0x0151
    24c0:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    24c2:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    24c6:	80 91 eb 00 	lds	r24, 0x00EB
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    24ca:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    24ce:	20 91 e8 00 	lds	r18, 0x00E8
    24d2:	27 7f       	andi	r18, 0xF7	; 247
    24d4:	20 93 e8 00 	sts	0x00E8, r18
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	25 e0       	ldi	r18, 0x05	; 5
    24dc:	96 95       	lsr	r25
    24de:	87 95       	ror	r24
    24e0:	2a 95       	dec	r18
    24e2:	e1 f7       	brne	.-8      	; 0x24dc <USB_Device_ProcessControlRequest+0xc6>
    24e4:	81 70       	andi	r24, 0x01	; 1
    24e6:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    24ea:	10 92 f1 00 	sts	0x00F1, r1
    24ee:	88 c0       	rjmp	.+272    	; 0x2600 <USB_Device_ProcessControlRequest+0x1ea>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    24f0:	88 23       	and	r24, r24
    24f2:	19 f0       	breq	.+6      	; 0x24fa <USB_Device_ProcessControlRequest+0xe4>
    24f4:	82 30       	cpi	r24, 0x02	; 2
    24f6:	09 f0       	breq	.+2      	; 0x24fa <USB_Device_ProcessControlRequest+0xe4>
    24f8:	a6 c0       	rjmp	.+332    	; 0x2646 <USB_Device_ProcessControlRequest+0x230>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    24fa:	8f 71       	andi	r24, 0x1F	; 31
    24fc:	82 30       	cpi	r24, 0x02	; 2
    24fe:	09 f0       	breq	.+2      	; 0x2502 <USB_Device_ProcessControlRequest+0xec>
    2500:	a2 c0       	rjmp	.+324    	; 0x2646 <USB_Device_ProcessControlRequest+0x230>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    2502:	80 91 4f 01 	lds	r24, 0x014F
    2506:	88 23       	and	r24, r24
    2508:	31 f5       	brne	.+76     	; 0x2556 <USB_Device_ProcessControlRequest+0x140>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    250a:	20 91 51 01 	lds	r18, 0x0151
    250e:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    2510:	09 f4       	brne	.+2      	; 0x2514 <USB_Device_ProcessControlRequest+0xfe>
    2512:	99 c0       	rjmp	.+306    	; 0x2646 <USB_Device_ProcessControlRequest+0x230>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    2514:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    2518:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    251c:	80 ff       	sbrs	r24, 0
    251e:	1b c0       	rjmp	.+54     	; 0x2556 <USB_Device_ProcessControlRequest+0x140>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    2520:	93 30       	cpi	r25, 0x03	; 3
    2522:	21 f4       	brne	.+8      	; 0x252c <USB_Device_ProcessControlRequest+0x116>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2524:	80 91 eb 00 	lds	r24, 0x00EB
    2528:	80 62       	ori	r24, 0x20	; 32
    252a:	13 c0       	rjmp	.+38     	; 0x2552 <USB_Device_ProcessControlRequest+0x13c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    252c:	80 91 eb 00 	lds	r24, 0x00EB
    2530:	80 61       	ori	r24, 0x10	; 16
    2532:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	02 c0       	rjmp	.+4      	; 0x2540 <USB_Device_ProcessControlRequest+0x12a>
    253c:	88 0f       	add	r24, r24
    253e:	99 1f       	adc	r25, r25
    2540:	2a 95       	dec	r18
    2542:	e2 f7       	brpl	.-8      	; 0x253c <USB_Device_ProcessControlRequest+0x126>
    2544:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    2548:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    254c:	80 91 eb 00 	lds	r24, 0x00EB
    2550:	88 60       	ori	r24, 0x08	; 8
    2552:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    2556:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    255a:	80 91 e8 00 	lds	r24, 0x00E8
    255e:	87 7f       	andi	r24, 0xF7	; 247
    2560:	52 c0       	rjmp	.+164    	; 0x2606 <USB_Device_ProcessControlRequest+0x1f0>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2562:	88 23       	and	r24, r24
    2564:	09 f0       	breq	.+2      	; 0x2568 <USB_Device_ProcessControlRequest+0x152>
    2566:	6f c0       	rjmp	.+222    	; 0x2646 <USB_Device_ProcessControlRequest+0x230>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    2568:	10 91 4f 01 	lds	r17, 0x014F
    256c:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    256e:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    2570:	f8 94       	cli
    2572:	80 91 e8 00 	lds	r24, 0x00E8
    2576:	87 7f       	andi	r24, 0xF7	; 247
    2578:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    257c:	cd dc       	rcall	.-1638   	; 0x1f18 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    257e:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    2582:	80 ff       	sbrs	r24, 0
    2584:	fc cf       	rjmp	.-8      	; 0x257e <USB_Device_ProcessControlRequest+0x168>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    2586:	80 91 e3 00 	lds	r24, 0x00E3
    258a:	80 78       	andi	r24, 0x80	; 128
    258c:	81 2b       	or	r24, r17

				UDADDR = Temp;
    258e:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    2592:	80 68       	ori	r24, 0x80	; 128
    2594:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    2598:	11 23       	and	r17, r17
    259a:	11 f4       	brne	.+4      	; 0x25a0 <USB_Device_ProcessControlRequest+0x18a>
    259c:	82 e0       	ldi	r24, 0x02	; 2
    259e:	01 c0       	rjmp	.+2      	; 0x25a2 <USB_Device_ProcessControlRequest+0x18c>
    25a0:	83 e0       	ldi	r24, 0x03	; 3
    25a2:	8e bb       	out	0x1e, r24	; 30
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    25a4:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
    25a6:	4f c0       	rjmp	.+158    	; 0x2646 <USB_Device_ProcessControlRequest+0x230>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    25a8:	80 58       	subi	r24, 0x80	; 128
    25aa:	82 30       	cpi	r24, 0x02	; 2
    25ac:	08 f0       	brcs	.+2      	; 0x25b0 <USB_Device_ProcessControlRequest+0x19a>
    25ae:	4b c0       	rjmp	.+150    	; 0x2646 <USB_Device_ProcessControlRequest+0x230>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    25b0:	80 91 4f 01 	lds	r24, 0x014F
    25b4:	90 91 50 01 	lds	r25, 0x0150
    25b8:	60 91 51 01 	lds	r22, 0x0151
    25bc:	ae 01       	movw	r20, r28
    25be:	4f 5f       	subi	r20, 0xFF	; 255
    25c0:	5f 4f       	sbci	r21, 0xFF	; 255
    25c2:	0e 94 a5 01 	call	0x34a	; 0x34a <CALLBACK_USB_GetDescriptor>
    25c6:	bc 01       	movw	r22, r24
    25c8:	00 97       	sbiw	r24, 0x00	; 0
    25ca:	09 f4       	brne	.+2      	; 0x25ce <USB_Device_ProcessControlRequest+0x1b8>
    25cc:	3c c0       	rjmp	.+120    	; 0x2646 <USB_Device_ProcessControlRequest+0x230>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    25ce:	80 91 e8 00 	lds	r24, 0x00E8
    25d2:	87 7f       	andi	r24, 0xF7	; 247
    25d4:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	9a 81       	ldd	r25, Y+2	; 0x02
    25dc:	d2 dd       	rcall	.-1116   	; 0x2182 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    25de:	80 91 e8 00 	lds	r24, 0x00E8
    25e2:	8b 77       	andi	r24, 0x7B	; 123
    25e4:	80 93 e8 00 	sts	0x00E8, r24
    25e8:	2e c0       	rjmp	.+92     	; 0x2646 <USB_Device_ProcessControlRequest+0x230>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    25ea:	80 38       	cpi	r24, 0x80	; 128
    25ec:	61 f5       	brne	.+88     	; 0x2646 <USB_Device_ProcessControlRequest+0x230>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    25ee:	80 91 e8 00 	lds	r24, 0x00E8
    25f2:	87 7f       	andi	r24, 0xF7	; 247
    25f4:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    25f8:	80 91 4b 01 	lds	r24, 0x014B
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    25fc:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2600:	80 91 e8 00 	lds	r24, 0x00E8
    2604:	8e 77       	andi	r24, 0x7E	; 126
    2606:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    260a:	86 dc       	rcall	.-1780   	; 0x1f18 <Endpoint_ClearStatusStage>
    260c:	1c c0       	rjmp	.+56     	; 0x2646 <USB_Device_ProcessControlRequest+0x230>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    260e:	88 23       	and	r24, r24
    2610:	d1 f4       	brne	.+52     	; 0x2646 <USB_Device_ProcessControlRequest+0x230>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    2612:	90 91 4f 01 	lds	r25, 0x014F
    2616:	92 30       	cpi	r25, 0x02	; 2
    2618:	b0 f4       	brcc	.+44     	; 0x2646 <USB_Device_ProcessControlRequest+0x230>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    261a:	80 91 e8 00 	lds	r24, 0x00E8
    261e:	87 7f       	andi	r24, 0xF7	; 247
    2620:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    2624:	90 93 4b 01 	sts	0x014B, r25

	Endpoint_ClearStatusStage();
    2628:	77 dc       	rcall	.-1810   	; 0x1f18 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    262a:	80 91 4b 01 	lds	r24, 0x014B
    262e:	88 23       	and	r24, r24
    2630:	31 f4       	brne	.+12     	; 0x263e <USB_Device_ProcessControlRequest+0x228>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2632:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2636:	87 fd       	sbrc	r24, 7
    2638:	02 c0       	rjmp	.+4      	; 0x263e <USB_Device_ProcessControlRequest+0x228>
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	01 c0       	rjmp	.+2      	; 0x2640 <USB_Device_ProcessControlRequest+0x22a>
    263e:	84 e0       	ldi	r24, 0x04	; 4
    2640:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
    2642:	0e 94 66 01 	call	0x2cc	; 0x2cc <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2646:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    264a:	83 ff       	sbrs	r24, 3
    264c:	0a c0       	rjmp	.+20     	; 0x2662 <USB_Device_ProcessControlRequest+0x24c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    264e:	80 91 eb 00 	lds	r24, 0x00EB
    2652:	80 62       	ori	r24, 0x20	; 32
    2654:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2658:	80 91 e8 00 	lds	r24, 0x00E8
    265c:	87 7f       	andi	r24, 0xF7	; 247
    265e:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	cf 91       	pop	r28
    2668:	df 91       	pop	r29
    266a:	1f 91       	pop	r17
    266c:	0f 91       	pop	r16
    266e:	08 95       	ret

00002670 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    2670:	08 95       	ret

00002672 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    2672:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    2674:	8e b3       	in	r24, 0x1e	; 30
    2676:	88 23       	and	r24, r24
    2678:	61 f0       	breq	.+24     	; 0x2692 <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    267a:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    267e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2682:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    2686:	83 ff       	sbrs	r24, 3
    2688:	01 c0       	rjmp	.+2      	; 0x268c <USB_USBTask+0x1a>
		  USB_Device_ProcessControlRequest();
    268a:	c5 de       	rcall	.-630    	; 0x2416 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    268c:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    268e:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    2692:	1f 91       	pop	r17
    2694:	08 95       	ret

00002696 <__eerd_byte_usb162>:
    2696:	f9 99       	sbic	0x1f, 1	; 31
    2698:	fe cf       	rjmp	.-4      	; 0x2696 <__eerd_byte_usb162>
    269a:	92 bd       	out	0x22, r25	; 34
    269c:	81 bd       	out	0x21, r24	; 33
    269e:	f8 9a       	sbi	0x1f, 0	; 31
    26a0:	99 27       	eor	r25, r25
    26a2:	80 b5       	in	r24, 0x20	; 32
    26a4:	08 95       	ret

000026a6 <__eeupd_byte_usb162>:
    26a6:	26 2f       	mov	r18, r22

000026a8 <__eeupd_r18_usb162>:
    26a8:	f9 99       	sbic	0x1f, 1	; 31
    26aa:	fe cf       	rjmp	.-4      	; 0x26a8 <__eeupd_r18_usb162>
    26ac:	92 bd       	out	0x22, r25	; 34
    26ae:	81 bd       	out	0x21, r24	; 33
    26b0:	f8 9a       	sbi	0x1f, 0	; 31
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	00 b4       	in	r0, 0x20	; 32
    26b6:	02 16       	cp	r0, r18
    26b8:	39 f0       	breq	.+14     	; 0x26c8 <__eeupd_r18_usb162+0x20>
    26ba:	1f ba       	out	0x1f, r1	; 31
    26bc:	20 bd       	out	0x20, r18	; 32
    26be:	0f b6       	in	r0, 0x3f	; 63
    26c0:	f8 94       	cli
    26c2:	fa 9a       	sbi	0x1f, 2	; 31
    26c4:	f9 9a       	sbi	0x1f, 1	; 31
    26c6:	0f be       	out	0x3f, r0	; 63
    26c8:	08 95       	ret

000026ca <_exit>:
    26ca:	f8 94       	cli

000026cc <__stop_program>:
    26cc:	ff cf       	rjmp	.-2      	; 0x26cc <__stop_program>
