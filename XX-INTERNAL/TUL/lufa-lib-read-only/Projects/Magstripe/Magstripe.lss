
Magstripe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  0000128c  00001320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000128c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000c2d  00800116  00800116  00001336  2**0
                  ALLOC
  3 .stab         00000b1c  00000000  00000000  00001338  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00001e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000004a8  00000000  00000000  00001fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000cf2  00000000  00000000  0000246b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007f64  00000000  00000000  0000315d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000206a  00000000  00000000  0000b0c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006083  00000000  00000000  0000d12b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006f0  00000000  00000000  000131b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003334  00000000  00000000  000138a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000035ba  00000000  00000000  00016bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005c0  00000000  00000000  0001a18e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       0:	bf c0       	rjmp	.+382    	; 0x180 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       4:	db c0       	rjmp	.+438    	; 0x1bc <__bad_interrupt>
       6:	00 00       	nop
       8:	d9 c0       	rjmp	.+434    	; 0x1bc <__bad_interrupt>
       a:	00 00       	nop
       c:	d7 c0       	rjmp	.+430    	; 0x1bc <__bad_interrupt>
       e:	00 00       	nop
      10:	d5 c0       	rjmp	.+426    	; 0x1bc <__bad_interrupt>
      12:	00 00       	nop
      14:	d3 c0       	rjmp	.+422    	; 0x1bc <__bad_interrupt>
      16:	00 00       	nop
      18:	d1 c0       	rjmp	.+418    	; 0x1bc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	cf c0       	rjmp	.+414    	; 0x1bc <__bad_interrupt>
      1e:	00 00       	nop
      20:	cd c0       	rjmp	.+410    	; 0x1bc <__bad_interrupt>
      22:	00 00       	nop
      24:	cb c0       	rjmp	.+406    	; 0x1bc <__bad_interrupt>
      26:	00 00       	nop
      28:	45 c3       	rjmp	.+1674   	; 0x6b4 <__vector_10>
      2a:	00 00       	nop
      2c:	c7 c0       	rjmp	.+398    	; 0x1bc <__bad_interrupt>
      2e:	00 00       	nop
      30:	c5 c0       	rjmp	.+394    	; 0x1bc <__bad_interrupt>
      32:	00 00       	nop
      34:	c3 c0       	rjmp	.+390    	; 0x1bc <__bad_interrupt>
      36:	00 00       	nop
      38:	c1 c0       	rjmp	.+386    	; 0x1bc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	bf c0       	rjmp	.+382    	; 0x1bc <__bad_interrupt>
      3e:	00 00       	nop
      40:	bd c0       	rjmp	.+378    	; 0x1bc <__bad_interrupt>
      42:	00 00       	nop
      44:	bb c0       	rjmp	.+374    	; 0x1bc <__bad_interrupt>
      46:	00 00       	nop
      48:	b9 c0       	rjmp	.+370    	; 0x1bc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b7 c0       	rjmp	.+366    	; 0x1bc <__bad_interrupt>
      4e:	00 00       	nop
      50:	b5 c0       	rjmp	.+362    	; 0x1bc <__bad_interrupt>
      52:	00 00       	nop
      54:	b3 c0       	rjmp	.+358    	; 0x1bc <__bad_interrupt>
      56:	00 00       	nop
      58:	b1 c0       	rjmp	.+354    	; 0x1bc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	af c0       	rjmp	.+350    	; 0x1bc <__bad_interrupt>
      5e:	00 00       	nop
      60:	ad c0       	rjmp	.+346    	; 0x1bc <__bad_interrupt>
      62:	00 00       	nop
      64:	ab c0       	rjmp	.+342    	; 0x1bc <__bad_interrupt>
      66:	00 00       	nop
      68:	a9 c0       	rjmp	.+338    	; 0x1bc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a7 c0       	rjmp	.+334    	; 0x1bc <__bad_interrupt>
      6e:	00 00       	nop
      70:	a5 c0       	rjmp	.+330    	; 0x1bc <__bad_interrupt>
      72:	00 00       	nop
      74:	a3 c0       	rjmp	.+326    	; 0x1bc <__bad_interrupt>
      76:	00 00       	nop
      78:	a1 c0       	rjmp	.+322    	; 0x1bc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	9f c0       	rjmp	.+318    	; 0x1bc <__bad_interrupt>
      7e:	00 00       	nop
      80:	9d c0       	rjmp	.+314    	; 0x1bc <__bad_interrupt>
      82:	00 00       	nop
      84:	9b c0       	rjmp	.+310    	; 0x1bc <__bad_interrupt>
      86:	00 00       	nop
      88:	99 c0       	rjmp	.+306    	; 0x1bc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	97 c0       	rjmp	.+302    	; 0x1bc <__bad_interrupt>
      8e:	00 00       	nop
      90:	95 c0       	rjmp	.+298    	; 0x1bc <__bad_interrupt>
      92:	00 00       	nop
      94:	93 c0       	rjmp	.+294    	; 0x1bc <__bad_interrupt>
      96:	00 00       	nop

00000098 <KeyboardReport>:
      98:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
      a8:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
      b8:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
      c8:	25 65 05 07 19 00 29 65 95 06 75 08 81 00 c0        %e....)e..u....

000000d7 <DeviceDescriptor>:
      d7:	12 01 10 01 00 00 00 08 eb 03 42 20 01 00 01 02     ..........B ....
      e7:	dc 01                                               ..

000000e9 <ConfigurationDescriptor>:
      e9:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
      f9:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
     109:	00 01                                               ..

0000010b <LanguageString>:
     10b:	04 03 09 04                                         ....

0000010f <ManufacturerString>:
     10f:	42 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     B.D.e.a.n. .C.a.
     11f:	6d 00 65 00 72 00 61 00 20 00 61 00 6e 00 64 00     m.e.r.a. .a.n.d.
     12f:	20 00 44 00 65 00 6e 00 76 00 65 00 72 00 20 00      .D.e.n.v.e.r. .
     13f:	47 00 69 00 6e 00 67 00 65 00 72 00 69 00 63 00     G.i.n.g.e.r.i.c.
     14f:	68 00 00 00                                         h...

00000153 <ProductString>:
     153:	2a 03 4d 00 61 00 67 00 6e 00 65 00 74 00 69 00     *.M.a.g.n.e.t.i.
     163:	63 00 20 00 43 00 61 00 72 00 64 00 20 00 52 00     c. .C.a.r.d. .R.
     173:	65 00 61 00 64 00 65 00 72 00 00 00 00              e.a.d.e.r....

00000180 <__ctors_end>:
     180:	11 24       	eor	r1, r1
     182:	1f be       	out	0x3f, r1	; 63
     184:	cf ef       	ldi	r28, 0xFF	; 255
     186:	d0 e2       	ldi	r29, 0x20	; 32
     188:	de bf       	out	0x3e, r29	; 62
     18a:	cd bf       	out	0x3d, r28	; 61

0000018c <__do_copy_data>:
     18c:	11 e0       	ldi	r17, 0x01	; 1
     18e:	a0 e0       	ldi	r26, 0x00	; 0
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	ec e8       	ldi	r30, 0x8C	; 140
     194:	f2 e1       	ldi	r31, 0x12	; 18
     196:	00 e0       	ldi	r16, 0x00	; 0
     198:	0b bf       	out	0x3b, r16	; 59
     19a:	02 c0       	rjmp	.+4      	; 0x1a0 <__do_copy_data+0x14>
     19c:	07 90       	elpm	r0, Z+
     19e:	0d 92       	st	X+, r0
     1a0:	a6 31       	cpi	r26, 0x16	; 22
     1a2:	b1 07       	cpc	r27, r17
     1a4:	d9 f7       	brne	.-10     	; 0x19c <__do_copy_data+0x10>

000001a6 <__do_clear_bss>:
     1a6:	1d e0       	ldi	r17, 0x0D	; 13
     1a8:	a6 e1       	ldi	r26, 0x16	; 22
     1aa:	b1 e0       	ldi	r27, 0x01	; 1
     1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <.do_clear_bss_start>

000001ae <.do_clear_bss_loop>:
     1ae:	1d 92       	st	X+, r1

000001b0 <.do_clear_bss_start>:
     1b0:	a3 34       	cpi	r26, 0x43	; 67
     1b2:	b1 07       	cpc	r27, r17
     1b4:	e1 f7       	brne	.-8      	; 0x1ae <.do_clear_bss_loop>
     1b6:	d8 d0       	rcall	.+432    	; 0x368 <main>
     1b8:	0c 94 44 09 	jmp	0x1288	; 0x1288 <_exit>

000001bc <__bad_interrupt>:
     1bc:	21 cf       	rjmp	.-446    	; 0x0 <__vectors>

000001be <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     1be:	80 91 0b 01 	lds	r24, 0x010B
     1c2:	90 91 0c 01 	lds	r25, 0x010C
     1c6:	00 97       	sbiw	r24, 0x00	; 0
     1c8:	29 f0       	breq	.+10     	; 0x1d4 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     1ca:	01 97       	sbiw	r24, 0x01	; 1
     1cc:	90 93 0c 01 	sts	0x010C, r25
     1d0:	80 93 0b 01 	sts	0x010B, r24
     1d4:	08 95       	ret

000001d6 <CALLBACK_HID_Device_ProcessHIDReport>:
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
	// Ignore keyboard LED reports from the host, but still need to declare the callback routine
}
     1d6:	08 95       	ret

000001d8 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     1d8:	0f 93       	push	r16
     1da:	1f 93       	push	r17
     1dc:	cf 93       	push	r28
     1de:	df 93       	push	r29
	USB_KeyboardReport_Data_t* KeyboardReport = (USB_KeyboardReport_Data_t*)ReportData;
     1e0:	e9 01       	movw	r28, r18

	static bool IsKeyReleaseReport;

	/* Key reports must be interleaved with key release reports, or repeated keys will be ignored */
	IsKeyReleaseReport = !IsKeyReleaseReport;
     1e2:	80 91 16 01 	lds	r24, 0x0116
     1e6:	91 e0       	ldi	r25, 0x01	; 1
     1e8:	89 27       	eor	r24, r25
     1ea:	80 93 16 01 	sts	0x0116, r24

	if ((IsKeyReleaseReport) || (CurrentTrackBuffer == &TrackDataBuffers[TOTAL_TRACKS]))
     1ee:	88 23       	and	r24, r24
     1f0:	41 f4       	brne	.+16     	; 0x202 <CALLBACK_HID_Device_CreateHIDReport+0x2a>
     1f2:	e0 91 0d 01 	lds	r30, 0x010D
     1f6:	f0 91 0e 01 	lds	r31, 0x010E
     1fa:	8d e0       	ldi	r24, 0x0D	; 13
     1fc:	ef 32       	cpi	r30, 0x2F	; 47
     1fe:	f8 07       	cpc	r31, r24
     200:	11 f4       	brne	.+4      	; 0x206 <CALLBACK_HID_Device_CreateHIDReport+0x2e>
	{
		/* No more data to send, or key release report between key presses */
		KeyboardReport->KeyCode[0] = KEY_NONE;
     202:	1a 82       	std	Y+2, r1	; 0x02
     204:	19 c0       	rjmp	.+50     	; 0x238 <CALLBACK_HID_Device_CreateHIDReport+0x60>
	}
	else if (!(CurrentTrackBuffer->Elements))
     206:	e0 50       	subi	r30, 0x00	; 0
     208:	fc 4f       	sbci	r31, 0xFC	; 252
     20a:	80 81       	ld	r24, Z
     20c:	91 81       	ldd	r25, Z+1	; 0x01
     20e:	e0 50       	subi	r30, 0x00	; 0
     210:	f4 40       	sbci	r31, 0x04	; 4
     212:	89 2b       	or	r24, r25
     214:	49 f4       	brne	.+18     	; 0x228 <CALLBACK_HID_Device_CreateHIDReport+0x50>
	{
		/* End of current track, send an enter press and change to the next track's buffer */
		KeyboardReport->KeyCode[0] = KEY_ENTER;
     216:	88 e2       	ldi	r24, 0x28	; 40
     218:	8a 83       	std	Y+2, r24	; 0x02
		CurrentTrackBuffer++;
     21a:	e8 5f       	subi	r30, 0xF8	; 248
     21c:	fb 4f       	sbci	r31, 0xFB	; 251
     21e:	f0 93 0e 01 	sts	0x010E, r31
     222:	e0 93 0d 01 	sts	0x010D, r30
     226:	08 c0       	rjmp	.+16     	; 0x238 <CALLBACK_HID_Device_CreateHIDReport+0x60>
	}
	else
	{
		/* Still data in the current track; convert next bit to a 1 or 0 keypress */
		KeyboardReport->KeyCode[0] = BitBuffer_GetNextBit(CurrentTrackBuffer) ? KEY_1 : KEY_0;
     228:	cf 01       	movw	r24, r30
     22a:	46 d1       	rcall	.+652    	; 0x4b8 <BitBuffer_GetNextBit>
     22c:	88 23       	and	r24, r24
     22e:	11 f4       	brne	.+4      	; 0x234 <CALLBACK_HID_Device_CreateHIDReport+0x5c>
     230:	87 e2       	ldi	r24, 0x27	; 39
     232:	01 c0       	rjmp	.+2      	; 0x236 <CALLBACK_HID_Device_CreateHIDReport+0x5e>
     234:	8e e1       	ldi	r24, 0x1E	; 30
     236:	8a 83       	std	Y+2, r24	; 0x02
	}

	*ReportSize = sizeof(USB_KeyboardReport_Data_t);
     238:	88 e0       	ldi	r24, 0x08	; 8
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	f8 01       	movw	r30, r16
     23e:	91 83       	std	Z+1, r25	; 0x01
     240:	80 83       	st	Z, r24
	return false;
}
     242:	80 e0       	ldi	r24, 0x00	; 0
     244:	df 91       	pop	r29
     246:	cf 91       	pop	r28
     248:	1f 91       	pop	r17
     24a:	0f 91       	pop	r16
     24c:	08 95       	ret

0000024e <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	91 e0       	ldi	r25, 0x01	; 1
}
     252:	c3 c6       	rjmp	.+3462   	; 0xfda <HID_Device_ProcessControlRequest>

00000254 <EVENT_USB_Device_ConfigurationChanged>:
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	91 e0       	ldi	r25, 0x01	; 1
     258:	88 d6       	rcall	.+3344   	; 0xf6a <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     25a:	e2 ee       	ldi	r30, 0xE2	; 226
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 81       	ld	r24, Z
     260:	84 60       	ori	r24, 0x04	; 4
     262:	80 83       	st	Z, r24

	USB_Device_EnableSOFEvents();
}
     264:	08 95       	ret

00000266 <ReadMagstripeData>:

/** Determines if a card has been inserted, and if so reads in each track's contents into the bit buffers
 *  until they are read out to the host as a series of keyboard presses.
 */
void ReadMagstripeData(void)
{
     266:	8f 92       	push	r8
     268:	9f 92       	push	r9
     26a:	af 92       	push	r10
     26c:	bf 92       	push	r11
     26e:	cf 92       	push	r12
     270:	df 92       	push	r13
     272:	ef 92       	push	r14
     274:	ff 92       	push	r15
     276:	0f 93       	push	r16
     278:	1f 93       	push	r17
     27a:	df 93       	push	r29
     27c:	cf 93       	push	r28
     27e:	00 d0       	rcall	.+0      	; 0x280 <ReadMagstripeData+0x1a>
     280:	00 d0       	rcall	.+0      	; 0x282 <ReadMagstripeData+0x1c>
     282:	00 d0       	rcall	.+0      	; 0x284 <ReadMagstripeData+0x1e>
     284:	cd b7       	in	r28, 0x3d	; 61
     286:	de b7       	in	r29, 0x3e	; 62
	{
		uint8_t ClockMask;
		uint8_t DataMask;
	} TrackInfo[] = {{MAG_T1_CLOCK, MAG_T1_DATA},
	                 {MAG_T2_CLOCK, MAG_T2_DATA},
	                 {MAG_T3_CLOCK, MAG_T3_DATA}};
     288:	de 01       	movw	r26, r28
     28a:	11 96       	adiw	r26, 0x01	; 1
     28c:	ef e0       	ldi	r30, 0x0F	; 15
     28e:	f1 e0       	ldi	r31, 0x01	; 1
     290:	86 e0       	ldi	r24, 0x06	; 6
     292:	01 90       	ld	r0, Z+
     294:	0d 92       	st	X+, r0
     296:	81 50       	subi	r24, 0x01	; 1
     298:	e1 f7       	brne	.-8      	; 0x292 <ReadMagstripeData+0x2c>
			 */
			static inline uint8_t Magstripe_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Magstripe_GetStatus(void)
			{
				/* Mag-stripe IOs are active low and must be inverted when read */
				return ((uint8_t)~MAG_PIN & MAG_MASK);
     29a:	f3 b0       	in	r15, 0x03	; 3
     29c:	f0 94       	com	r15
     29e:	8f e7       	ldi	r24, 0x7F	; 127
     2a0:	f8 22       	and	r15, r24
     2a2:	20 e0       	ldi	r18, 0x00	; 0

	uint8_t Magstripe_Prev = 0;
	uint8_t Magstripe_LCL  = Magstripe_GetStatus();

	while (Magstripe_LCL & MAG_CARDPRESENT)
     2a4:	4e 01       	movw	r8, r28
     2a6:	08 94       	sec
     2a8:	81 1c       	adc	r8, r1
     2aa:	91 1c       	adc	r9, r1
	{
		for (uint8_t Track = 0; Track < TOTAL_TRACKS; Track++)
     2ac:	37 e0       	ldi	r19, 0x07	; 7
     2ae:	a3 2e       	mov	r10, r19
     2b0:	b1 2c       	mov	r11, r1
     2b2:	ac 0e       	add	r10, r28
     2b4:	bd 1e       	adc	r11, r29
     2b6:	1d c0       	rjmp	.+58     	; 0x2f2 <ReadMagstripeData+0x8c>
		{
			bool DataPinLevel      = ((Magstripe_LCL & TrackInfo[Track].DataMask) != 0);
     2b8:	f8 01       	movw	r30, r16
     2ba:	21 81       	ldd	r18, Z+1	; 0x01
			bool ClockPinLevel     = ((Magstripe_LCL & TrackInfo[Track].ClockMask) != 0);
     2bc:	90 81       	ld	r25, Z
			bool ClockLevelChanged = (((Magstripe_LCL ^ Magstripe_Prev) & TrackInfo[Track].ClockMask) != 0);

			/* Sample data on rising clock edges from the card reader */
			if (ClockPinLevel && ClockLevelChanged)
     2be:	8f 2d       	mov	r24, r15
     2c0:	89 23       	and	r24, r25
     2c2:	41 f0       	breq	.+16     	; 0x2d4 <ReadMagstripeData+0x6e>
     2c4:	9e 21       	and	r25, r14
     2c6:	31 f0       	breq	.+12     	; 0x2d4 <ReadMagstripeData+0x6e>
			  BitBuffer_StoreNextBit(&TrackDataBuffers[Track], DataPinLevel);
     2c8:	60 e0       	ldi	r22, 0x00	; 0
     2ca:	2f 21       	and	r18, r15
     2cc:	09 f0       	breq	.+2      	; 0x2d0 <ReadMagstripeData+0x6a>
     2ce:	61 e0       	ldi	r22, 0x01	; 1
     2d0:	c6 01       	movw	r24, r12
     2d2:	bd d0       	rcall	.+378    	; 0x44e <BitBuffer_StoreNextBit>
     2d4:	0e 5f       	subi	r16, 0xFE	; 254
     2d6:	1f 4f       	sbci	r17, 0xFF	; 255
     2d8:	88 e0       	ldi	r24, 0x08	; 8
     2da:	94 e0       	ldi	r25, 0x04	; 4
     2dc:	c8 0e       	add	r12, r24
     2de:	d9 1e       	adc	r13, r25
	uint8_t Magstripe_Prev = 0;
	uint8_t Magstripe_LCL  = Magstripe_GetStatus();

	while (Magstripe_LCL & MAG_CARDPRESENT)
	{
		for (uint8_t Track = 0; Track < TOTAL_TRACKS; Track++)
     2e0:	0a 15       	cp	r16, r10
     2e2:	1b 05       	cpc	r17, r11
     2e4:	49 f7       	brne	.-46     	; 0x2b8 <ReadMagstripeData+0x52>
     2e6:	83 b1       	in	r24, 0x03	; 3
     2e8:	80 95       	com	r24
     2ea:	2f 2d       	mov	r18, r15
     2ec:	9f e7       	ldi	r25, 0x7F	; 127
     2ee:	f9 2e       	mov	r15, r25
     2f0:	f8 22       	and	r15, r24
     2f2:	87 e1       	ldi	r24, 0x17	; 23
     2f4:	91 e0       	ldi	r25, 0x01	; 1
	                 {MAG_T3_CLOCK, MAG_T3_DATA}};

	uint8_t Magstripe_Prev = 0;
	uint8_t Magstripe_LCL  = Magstripe_GetStatus();

	while (Magstripe_LCL & MAG_CARDPRESENT)
     2f6:	f6 fe       	sbrs	r15, 6
     2f8:	05 c0       	rjmp	.+10     	; 0x304 <ReadMagstripeData+0x9e>
     2fa:	84 01       	movw	r16, r8
     2fc:	6c 01       	movw	r12, r24
			bool DataPinLevel      = ((Magstripe_LCL & TrackInfo[Track].DataMask) != 0);
			bool ClockPinLevel     = ((Magstripe_LCL & TrackInfo[Track].ClockMask) != 0);
			bool ClockLevelChanged = (((Magstripe_LCL ^ Magstripe_Prev) & TrackInfo[Track].ClockMask) != 0);

			/* Sample data on rising clock edges from the card reader */
			if (ClockPinLevel && ClockLevelChanged)
     2fe:	e2 2e       	mov	r14, r18
     300:	ef 24       	eor	r14, r15
     302:	da cf       	rjmp	.-76     	; 0x2b8 <ReadMagstripeData+0x52>

		Magstripe_Prev = Magstripe_LCL;
		Magstripe_LCL  = Magstripe_GetStatus();
	}

	CurrentTrackBuffer = &TrackDataBuffers[0];
     304:	90 93 0e 01 	sts	0x010E, r25
     308:	80 93 0d 01 	sts	0x010D, r24
}
     30c:	26 96       	adiw	r28, 0x06	; 6
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	f8 94       	cli
     312:	de bf       	out	0x3e, r29	; 62
     314:	0f be       	out	0x3f, r0	; 63
     316:	cd bf       	out	0x3d, r28	; 61
     318:	cf 91       	pop	r28
     31a:	df 91       	pop	r29
     31c:	1f 91       	pop	r17
     31e:	0f 91       	pop	r16
     320:	ff 90       	pop	r15
     322:	ef 90       	pop	r14
     324:	df 90       	pop	r13
     326:	cf 90       	pop	r12
     328:	bf 90       	pop	r11
     32a:	af 90       	pop	r10
     32c:	9f 90       	pop	r9
     32e:	8f 90       	pop	r8
     330:	08 95       	ret

00000332 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     332:	84 b7       	in	r24, 0x34	; 52
     334:	87 7f       	andi	r24, 0xF7	; 247
     336:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     338:	88 e1       	ldi	r24, 0x18	; 24
     33a:	0f b6       	in	r0, 0x3f	; 63
     33c:	f8 94       	cli
     33e:	80 93 60 00 	sts	0x0060, r24
     342:	10 92 60 00 	sts	0x0060, r1
     346:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	80 e8       	ldi	r24, 0x80	; 128
     34c:	0f b6       	in	r0, 0x3f	; 63
     34e:	f8 94       	cli
     350:	80 93 61 00 	sts	0x0061, r24
     354:	90 93 61 00 	sts	0x0061, r25
     358:	0f be       	out	0x3f, r0	; 63
			 *  device can be controlled and read by the card reader driver. This must be called before
			 *  trying to read any of the card reader's status lines.
			 */
			static inline void Magstripe_Init(void)
			{
				MAG_DDR  &= ~MAG_MASK;
     35a:	84 b1       	in	r24, 0x04	; 4
     35c:	80 78       	andi	r24, 0x80	; 128
     35e:	84 b9       	out	0x04, r24	; 4
				MAG_PORT |=  MAG_MASK;
     360:	85 b1       	in	r24, 0x05	; 5
     362:	8f 67       	ori	r24, 0x7F	; 127
     364:	85 b9       	out	0x05, r24	; 5
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Magstripe_Init();
	USB_Init();
}
     366:	90 c1       	rjmp	.+800    	; 0x688 <USB_Init>

00000368 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     368:	e4 df       	rcall	.-56     	; 0x332 <SetupHardware>

	for (uint8_t Buffer = 0; Buffer < TOTAL_TRACKS; Buffer++)
	  BitBuffer_Init(&TrackDataBuffers[Buffer]);
     36a:	87 e1       	ldi	r24, 0x17	; 23
     36c:	91 e0       	ldi	r25, 0x01	; 1
     36e:	52 d0       	rcall	.+164    	; 0x414 <BitBuffer_Init>
     370:	8f e1       	ldi	r24, 0x1F	; 31
     372:	95 e0       	ldi	r25, 0x05	; 5
     374:	4f d0       	rcall	.+158    	; 0x414 <BitBuffer_Init>
     376:	87 e2       	ldi	r24, 0x27	; 39
     378:	99 e0       	ldi	r25, 0x09	; 9
     37a:	4c d0       	rcall	.+152    	; 0x414 <BitBuffer_Init>

	sei();
     37c:	78 94       	sei
			 */
			static inline uint8_t Magstripe_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Magstripe_GetStatus(void)
			{
				/* Mag-stripe IOs are active low and must be inverted when read */
				return ((uint8_t)~MAG_PIN & MAG_MASK);
     37e:	83 b1       	in	r24, 0x03	; 3

	for (;;)
	{
		if (Magstripe_GetStatus() & MAG_CARDPRESENT)
     380:	80 95       	com	r24
     382:	8f 77       	andi	r24, 0x7F	; 127
     384:	86 ff       	sbrs	r24, 6
     386:	01 c0       	rjmp	.+2      	; 0x38a <main+0x22>
		  ReadMagstripeData();
     388:	6e df       	rcall	.-292    	; 0x266 <ReadMagstripeData>

		HID_Device_USBTask(&Keyboard_HID_Interface);
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	91 e0       	ldi	r25, 0x01	; 1
     38e:	34 d5       	rcall	.+2664   	; 0xdf8 <HID_Device_USBTask>
		USB_USBTask();
     390:	21 d5       	rcall	.+2626   	; 0xdd4 <USB_USBTask>
     392:	f5 cf       	rjmp	.-22     	; 0x37e <main+0x16>

00000394 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     394:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     396:	93 30       	cpi	r25, 0x03	; 3
     398:	b1 f0       	breq	.+44     	; 0x3c6 <CALLBACK_USB_GetDescriptor+0x32>
     39a:	94 30       	cpi	r25, 0x04	; 4
     39c:	28 f4       	brcc	.+10     	; 0x3a8 <CALLBACK_USB_GetDescriptor+0x14>
     39e:	91 30       	cpi	r25, 0x01	; 1
     3a0:	41 f0       	breq	.+16     	; 0x3b2 <CALLBACK_USB_GetDescriptor+0x1e>
     3a2:	92 30       	cpi	r25, 0x02	; 2
     3a4:	79 f5       	brne	.+94     	; 0x404 <CALLBACK_USB_GetDescriptor+0x70>
     3a6:	0a c0       	rjmp	.+20     	; 0x3bc <CALLBACK_USB_GetDescriptor+0x28>
     3a8:	91 32       	cpi	r25, 0x21	; 33
     3aa:	11 f1       	breq	.+68     	; 0x3f0 <CALLBACK_USB_GetDescriptor+0x5c>
     3ac:	92 32       	cpi	r25, 0x22	; 34
     3ae:	51 f5       	brne	.+84     	; 0x404 <CALLBACK_USB_GetDescriptor+0x70>
     3b0:	24 c0       	rjmp	.+72     	; 0x3fa <CALLBACK_USB_GetDescriptor+0x66>
     3b2:	e7 ed       	ldi	r30, 0xD7	; 215
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	22 e1       	ldi	r18, 0x12	; 18
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	28 c0       	rjmp	.+80     	; 0x40c <CALLBACK_USB_GetDescriptor+0x78>
     3bc:	e9 ee       	ldi	r30, 0xE9	; 233
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	22 e2       	ldi	r18, 0x22	; 34
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	23 c0       	rjmp	.+70     	; 0x40c <CALLBACK_USB_GetDescriptor+0x78>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     3c6:	81 30       	cpi	r24, 0x01	; 1
     3c8:	49 f0       	breq	.+18     	; 0x3dc <CALLBACK_USB_GetDescriptor+0x48>
     3ca:	81 30       	cpi	r24, 0x01	; 1
     3cc:	18 f0       	brcs	.+6      	; 0x3d4 <CALLBACK_USB_GetDescriptor+0x40>
     3ce:	82 30       	cpi	r24, 0x02	; 2
     3d0:	c9 f4       	brne	.+50     	; 0x404 <CALLBACK_USB_GetDescriptor+0x70>
     3d2:	0a c0       	rjmp	.+20     	; 0x3e8 <CALLBACK_USB_GetDescriptor+0x54>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     3d4:	eb e0       	ldi	r30, 0x0B	; 11
     3d6:	f1 e0       	ldi	r31, 0x01	; 1
     3d8:	84 91       	lpm	r24, Z+
     3da:	03 c0       	rjmp	.+6      	; 0x3e2 <CALLBACK_USB_GetDescriptor+0x4e>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     3dc:	ef e0       	ldi	r30, 0x0F	; 15
     3de:	f1 e0       	ldi	r31, 0x01	; 1
     3e0:	84 91       	lpm	r24, Z+
     3e2:	28 2f       	mov	r18, r24
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	12 c0       	rjmp	.+36     	; 0x40c <CALLBACK_USB_GetDescriptor+0x78>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     3e8:	e3 e5       	ldi	r30, 0x53	; 83
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	84 91       	lpm	r24, Z+
     3ee:	f9 cf       	rjmp	.-14     	; 0x3e2 <CALLBACK_USB_GetDescriptor+0x4e>
     3f0:	eb ef       	ldi	r30, 0xFB	; 251
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	29 e0       	ldi	r18, 0x09	; 9
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	09 c0       	rjmp	.+18     	; 0x40c <CALLBACK_USB_GetDescriptor+0x78>

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     3fa:	e8 e9       	ldi	r30, 0x98	; 152
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	2f e3       	ldi	r18, 0x3F	; 63
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	04 c0       	rjmp	.+8      	; 0x40c <CALLBACK_USB_GetDescriptor+0x78>
     404:	e0 e0       	ldi	r30, 0x00	; 0
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	20 e0       	ldi	r18, 0x00	; 0
     40a:	30 e0       	ldi	r19, 0x00	; 0
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
			break;
	}

	*DescriptorAddress = Address;
     40c:	ed 93       	st	X+, r30
     40e:	fc 93       	st	X, r31
	return Size;
}
     410:	c9 01       	movw	r24, r18
     412:	08 95       	ret

00000414 <BitBuffer_Init>:

#include "CircularBitBuffer.h"

/** Function to initialize or reset a bit buffer, ready for data to be stored into it. */
void BitBuffer_Init(BitBuffer_t* const Buffer)
{
     414:	fc 01       	movw	r30, r24
	/* Reset the number of stored bits in the buffer */
	Buffer->Elements        = 0;
     416:	e0 50       	subi	r30, 0x00	; 0
     418:	fc 4f       	sbci	r31, 0xFC	; 252
     41a:	11 82       	std	Z+1, r1	; 0x01
     41c:	10 82       	st	Z, r1
     41e:	e0 50       	subi	r30, 0x00	; 0
     420:	f4 40       	sbci	r31, 0x04	; 4

	/* Reset the data in and out pointer structures in the buffer to the first buffer bit */
	Buffer->In.CurrentByte  = Buffer->Data;
     422:	df 01       	movw	r26, r30
     424:	ae 5f       	subi	r26, 0xFE	; 254
     426:	bb 4f       	sbci	r27, 0xFB	; 251
     428:	ec 93       	st	X, r30
     42a:	11 96       	adiw	r26, 0x01	; 1
     42c:	fc 93       	st	X, r31
	Buffer->In.ByteMask     = (1 << 0);
     42e:	ec 5f       	subi	r30, 0xFC	; 252
     430:	fb 4f       	sbci	r31, 0xFB	; 251
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	80 83       	st	Z, r24
     436:	e4 50       	subi	r30, 0x04	; 4
     438:	f4 40       	sbci	r31, 0x04	; 4
	Buffer->Out.CurrentByte = Buffer->Data;
     43a:	df 01       	movw	r26, r30
     43c:	ab 5f       	subi	r26, 0xFB	; 251
     43e:	bb 4f       	sbci	r27, 0xFB	; 251
     440:	ec 93       	st	X, r30
     442:	11 96       	adiw	r26, 0x01	; 1
     444:	fc 93       	st	X, r31
	Buffer->Out.ByteMask    = (1 << 0);
     446:	e9 5f       	subi	r30, 0xF9	; 249
     448:	fb 4f       	sbci	r31, 0xFB	; 251
     44a:	80 83       	st	Z, r24
}
     44c:	08 95       	ret

0000044e <BitBuffer_StoreNextBit>:

/** Function to store the given bit into the given bit buffer. */
void BitBuffer_StoreNextBit(BitBuffer_t* const Buffer,
                            const bool Bit)
{
     44e:	dc 01       	movw	r26, r24
	/* If the bit to store is true, set the next bit in the buffer */
	if (Bit)
     450:	66 23       	and	r22, r22
     452:	51 f0       	breq	.+20     	; 0x468 <BitBuffer_StoreNextBit+0x1a>
	  *Buffer->In.CurrentByte |= Buffer->In.ByteMask;
     454:	ae 5f       	subi	r26, 0xFE	; 254
     456:	bb 4f       	sbci	r27, 0xFB	; 251
     458:	ed 91       	ld	r30, X+
     45a:	fd 91       	ld	r31, X+
     45c:	80 81       	ld	r24, Z
     45e:	9c 91       	ld	r25, X
     460:	a4 50       	subi	r26, 0x04	; 4
     462:	b4 40       	sbci	r27, 0x04	; 4
     464:	89 2b       	or	r24, r25
     466:	80 83       	st	Z, r24

	/* Increment the number of stored bits in the buffer counter */
	Buffer->Elements++;
     468:	fd 01       	movw	r30, r26
     46a:	e0 50       	subi	r30, 0x00	; 0
     46c:	fc 4f       	sbci	r31, 0xFC	; 252
     46e:	80 81       	ld	r24, Z
     470:	91 81       	ldd	r25, Z+1	; 0x01
     472:	01 96       	adiw	r24, 0x01	; 1
     474:	91 83       	std	Z+1, r25	; 0x01
     476:	80 83       	st	Z, r24

	/* Check if the current buffer byte is full of stored bits */
	if (Buffer->In.ByteMask == (1 << 7))
     478:	fd 01       	movw	r30, r26
     47a:	ec 5f       	subi	r30, 0xFC	; 252
     47c:	fb 4f       	sbci	r31, 0xFB	; 251
     47e:	80 81       	ld	r24, Z
     480:	80 38       	cpi	r24, 0x80	; 128
     482:	b9 f4       	brne	.+46     	; 0x4b2 <BitBuffer_StoreNextBit+0x64>
	{
		/* Check if the end of the buffer has been reached, if so reset to start of buffer, otherwise advance to next bit */
		if (Buffer->In.CurrentByte != &Buffer->Data[sizeof(Buffer->Data) - 1])
     484:	fd 01       	movw	r30, r26
     486:	ee 5f       	subi	r30, 0xFE	; 254
     488:	fb 4f       	sbci	r31, 0xFB	; 251
     48a:	20 81       	ld	r18, Z
     48c:	31 81       	ldd	r19, Z+1	; 0x01
     48e:	cd 01       	movw	r24, r26
     490:	81 50       	subi	r24, 0x01	; 1
     492:	9c 4f       	sbci	r25, 0xFC	; 252
     494:	28 17       	cp	r18, r24
     496:	39 07       	cpc	r19, r25
     498:	29 f0       	breq	.+10     	; 0x4a4 <BitBuffer_StoreNextBit+0x56>
		  Buffer->In.CurrentByte++;
     49a:	2f 5f       	subi	r18, 0xFF	; 255
     49c:	3f 4f       	sbci	r19, 0xFF	; 255
     49e:	31 83       	std	Z+1, r19	; 0x01
     4a0:	20 83       	st	Z, r18
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <BitBuffer_StoreNextBit+0x5a>
		else
		  Buffer->In.CurrentByte = Buffer->Data;
     4a4:	b1 83       	std	Z+1, r27	; 0x01
     4a6:	a0 83       	st	Z, r26

		/* Reset the storage bit mask in the current buffer byte to the first bit */
		Buffer->In.ByteMask = (1 << 0);
     4a8:	ac 5f       	subi	r26, 0xFC	; 252
     4aa:	bb 4f       	sbci	r27, 0xFB	; 251
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	8c 93       	st	X, r24
     4b0:	08 95       	ret
	}
	else
	{
		/* Shift the current storage bit mask to the next bit in the current byte */
		Buffer->In.ByteMask <<= 1;
     4b2:	88 0f       	add	r24, r24
     4b4:	80 83       	st	Z, r24
     4b6:	08 95       	ret

000004b8 <BitBuffer_GetNextBit>:
	}
}

/** Function to retrieve the next bit stored in the given bit buffer. */
bool BitBuffer_GetNextBit(BitBuffer_t* const Buffer)
{
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	dc 01       	movw	r26, r24
	/* Retrieve the value of the next bit stored in the buffer */
	bool Bit = ((*Buffer->Out.CurrentByte & Buffer->Out.ByteMask) != 0);
     4be:	ac 01       	movw	r20, r24
     4c0:	4b 5f       	subi	r20, 0xFB	; 251
     4c2:	5b 4f       	sbci	r21, 0xFB	; 251
     4c4:	ea 01       	movw	r28, r20
     4c6:	e8 81       	ld	r30, Y
     4c8:	f9 81       	ldd	r31, Y+1	; 0x01
     4ca:	70 81       	ld	r23, Z
     4cc:	ec 01       	movw	r28, r24
     4ce:	c9 5f       	subi	r28, 0xF9	; 249
     4d0:	db 4f       	sbci	r29, 0xFB	; 251
     4d2:	68 81       	ld	r22, Y

	/* Clear the buffer bit */
	*Buffer->Out.CurrentByte &= ~Buffer->Out.ByteMask;
     4d4:	86 2f       	mov	r24, r22
     4d6:	80 95       	com	r24
     4d8:	87 23       	and	r24, r23
     4da:	80 83       	st	Z, r24

	/* Decrement the number of stored bits in the buffer counter */
	Buffer->Elements--;
     4dc:	fd 01       	movw	r30, r26
     4de:	e0 50       	subi	r30, 0x00	; 0
     4e0:	fc 4f       	sbci	r31, 0xFC	; 252
     4e2:	80 81       	ld	r24, Z
     4e4:	91 81       	ldd	r25, Z+1	; 0x01
     4e6:	01 97       	sbiw	r24, 0x01	; 1
     4e8:	91 83       	std	Z+1, r25	; 0x01
     4ea:	80 83       	st	Z, r24

	/* Check if the current buffer byte is empty of stored bits */
	if (Buffer->Out.ByteMask == (1 << 7))
     4ec:	88 81       	ld	r24, Y
     4ee:	80 38       	cpi	r24, 0x80	; 128
     4f0:	b1 f4       	brne	.+44     	; 0x51e <BitBuffer_GetNextBit+0x66>
	{
		/* Check if the end of the buffer has been reached, if so reset to start of buffer, otherwise advance to next bit */
		if (Buffer->Out.CurrentByte != &Buffer->Data[sizeof(Buffer->Data) - 1])
     4f2:	fa 01       	movw	r30, r20
     4f4:	20 81       	ld	r18, Z
     4f6:	31 81       	ldd	r19, Z+1	; 0x01
     4f8:	cd 01       	movw	r24, r26
     4fa:	81 50       	subi	r24, 0x01	; 1
     4fc:	9c 4f       	sbci	r25, 0xFC	; 252
     4fe:	28 17       	cp	r18, r24
     500:	39 07       	cpc	r19, r25
     502:	29 f0       	breq	.+10     	; 0x50e <BitBuffer_GetNextBit+0x56>
		  Buffer->Out.CurrentByte++;
     504:	2f 5f       	subi	r18, 0xFF	; 255
     506:	3f 4f       	sbci	r19, 0xFF	; 255
     508:	31 83       	std	Z+1, r19	; 0x01
     50a:	20 83       	st	Z, r18
     50c:	03 c0       	rjmp	.+6      	; 0x514 <BitBuffer_GetNextBit+0x5c>
		else
		  Buffer->Out.CurrentByte = Buffer->Data;
     50e:	ea 01       	movw	r28, r20
     510:	b9 83       	std	Y+1, r27	; 0x01
     512:	a8 83       	st	Y, r26

		/* Reset the retrieval bit mask in the current buffer byte to the first bit */
		Buffer->Out.ByteMask = (1 << 0);
     514:	a9 5f       	subi	r26, 0xF9	; 249
     516:	bb 4f       	sbci	r27, 0xFB	; 251
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	8c 93       	st	X, r24
     51c:	02 c0       	rjmp	.+4      	; 0x522 <BitBuffer_GetNextBit+0x6a>
	}
	else
	{
		/* Shift the current retrieval bit mask to the next bit in the current byte */
		Buffer->Out.ByteMask <<= 1;
     51e:	88 0f       	add	r24, r24
     520:	88 83       	st	Y, r24
     522:	87 2f       	mov	r24, r23
     524:	86 23       	and	r24, r22
     526:	09 f0       	breq	.+2      	; 0x52a <BitBuffer_GetNextBit+0x72>
     528:	81 e0       	ldi	r24, 0x01	; 1
	}

	/* Return the retrieved bit from the buffer */
	return Bit;
}
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	08 95       	ret

00000530 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     530:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     534:	80 91 eb 00 	lds	r24, 0x00EB
     538:	81 60       	ori	r24, 0x01	; 1
     53a:	80 93 eb 00 	sts	0x00EB, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
     53e:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
     542:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
     546:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     54a:	80 91 ee 00 	lds	r24, 0x00EE
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     54e:	88 1f       	adc	r24, r24
     550:	88 27       	eor	r24, r24
     552:	88 1f       	adc	r24, r24
     554:	08 95       	ret

00000556 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     556:	80 91 3b 0d 	lds	r24, 0x0D3B
     55a:	88 23       	and	r24, r24
     55c:	8c f4       	brge	.+34     	; 0x580 <Endpoint_ClearStatusStage+0x2a>
     55e:	03 c0       	rjmp	.+6      	; 0x566 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     560:	8e b3       	in	r24, 0x1e	; 30
     562:	88 23       	and	r24, r24
     564:	b1 f0       	breq	.+44     	; 0x592 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     566:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     56a:	82 ff       	sbrs	r24, 2
     56c:	f9 cf       	rjmp	.-14     	; 0x560 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     56e:	80 91 e8 00 	lds	r24, 0x00E8
     572:	8b 77       	andi	r24, 0x7B	; 123
     574:	80 93 e8 00 	sts	0x00E8, r24
     578:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     57a:	8e b3       	in	r24, 0x1e	; 30
     57c:	88 23       	and	r24, r24
     57e:	49 f0       	breq	.+18     	; 0x592 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     580:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     584:	80 ff       	sbrs	r24, 0
     586:	f9 cf       	rjmp	.-14     	; 0x57a <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     588:	80 91 e8 00 	lds	r24, 0x00E8
     58c:	8e 77       	andi	r24, 0x7E	; 126
     58e:	80 93 e8 00 	sts	0x00E8, r24
     592:	08 95       	ret

00000594 <Endpoint_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     594:	40 91 e4 00 	lds	r20, 0x00E4
     598:	50 91 e5 00 	lds	r21, 0x00E5
     59c:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
     59e:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
     5a2:	80 78       	andi	r24, 0x80	; 128
     5a4:	80 38       	cpi	r24, 0x80	; 128
     5a6:	29 f4       	brne	.+10     	; 0x5b2 <Endpoint_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     5a8:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
     5ac:	80 ff       	sbrs	r24, 0
     5ae:	05 c0       	rjmp	.+10     	; 0x5ba <Endpoint_WaitUntilReady+0x26>
     5b0:	21 c0       	rjmp	.+66     	; 0x5f4 <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     5b2:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     5b6:	82 fd       	sbrc	r24, 2
     5b8:	1d c0       	rjmp	.+58     	; 0x5f4 <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     5ba:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     5bc:	88 23       	and	r24, r24
     5be:	11 f4       	brne	.+4      	; 0x5c4 <Endpoint_WaitUntilReady+0x30>
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     5c4:	85 30       	cpi	r24, 0x05	; 5
     5c6:	11 f4       	brne	.+4      	; 0x5cc <Endpoint_WaitUntilReady+0x38>
     5c8:	83 e0       	ldi	r24, 0x03	; 3
     5ca:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     5cc:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     5d0:	85 ff       	sbrs	r24, 5
     5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <Endpoint_WaitUntilReady+0x44>
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	08 95       	ret
     5d8:	80 91 e4 00 	lds	r24, 0x00E4
     5dc:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     5e0:	84 17       	cp	r24, r20
     5e2:	95 07       	cpc	r25, r21
     5e4:	e1 f2       	breq	.-72     	; 0x59e <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     5e6:	22 23       	and	r18, r18
     5e8:	11 f4       	brne	.+4      	; 0x5ee <Endpoint_WaitUntilReady+0x5a>
     5ea:	84 e0       	ldi	r24, 0x04	; 4
     5ec:	08 95       	ret
     5ee:	21 50       	subi	r18, 0x01	; 1
     5f0:	ac 01       	movw	r20, r24
     5f2:	d5 cf       	rjmp	.-86     	; 0x59e <Endpoint_WaitUntilReady+0xa>
     5f4:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     5f6:	08 95       	ret

000005f8 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     5f8:	ef 92       	push	r14
     5fa:	ff 92       	push	r15
     5fc:	0f 93       	push	r16
     5fe:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     600:	4c d0       	rcall	.+152    	; 0x69a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     602:	53 d0       	rcall	.+166    	; 0x6aa <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     604:	08 ed       	ldi	r16, 0xD8	; 216
     606:	10 e0       	ldi	r17, 0x00	; 0
     608:	f8 01       	movw	r30, r16
     60a:	80 81       	ld	r24, Z
     60c:	8f 77       	andi	r24, 0x7F	; 127
     60e:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
     610:	80 81       	ld	r24, Z
     612:	80 68       	ori	r24, 0x80	; 128
     614:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     616:	80 81       	ld	r24, Z
     618:	8f 7d       	andi	r24, 0xDF	; 223
     61a:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     61c:	e7 ed       	ldi	r30, 0xD7	; 215
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	80 81       	ld	r24, Z
     622:	80 68       	ori	r24, 0x80	; 128
     624:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     626:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     628:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
     62a:	10 92 37 0d 	sts	0x0D37, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     62e:	10 92 39 0d 	sts	0x0D39, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     632:	10 92 38 0d 	sts	0x0D38, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     636:	80 ee       	ldi	r24, 0xE0	; 224
     638:	e8 2e       	mov	r14, r24
     63a:	f1 2c       	mov	r15, r1
     63c:	f7 01       	movw	r30, r14
     63e:	80 81       	ld	r24, Z
     640:	8b 7f       	andi	r24, 0xFB	; 251
     642:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     644:	f8 01       	movw	r30, r16
     646:	80 81       	ld	r24, Z
     648:	81 60       	ori	r24, 0x01	; 1
     64a:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	60 e0       	ldi	r22, 0x00	; 0
     650:	42 e0       	ldi	r20, 0x02	; 2
     652:	6e df       	rcall	.-292    	; 0x530 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     654:	e1 ee       	ldi	r30, 0xE1	; 225
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	80 81       	ld	r24, Z
     65a:	8e 7f       	andi	r24, 0xFE	; 254
     65c:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     65e:	e2 ee       	ldi	r30, 0xE2	; 226
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	80 81       	ld	r24, Z
     664:	81 60       	ori	r24, 0x01	; 1
     666:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     668:	80 81       	ld	r24, Z
     66a:	88 60       	ori	r24, 0x08	; 8
     66c:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     66e:	f7 01       	movw	r30, r14
     670:	80 81       	ld	r24, Z
     672:	8e 7f       	andi	r24, 0xFE	; 254
     674:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     676:	f8 01       	movw	r30, r16
     678:	80 81       	ld	r24, Z
     67a:	80 61       	ori	r24, 0x10	; 16
     67c:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     67e:	1f 91       	pop	r17
     680:	0f 91       	pop	r16
     682:	ff 90       	pop	r15
     684:	ef 90       	pop	r14
     686:	08 95       	ret

00000688 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     688:	e7 ed       	ldi	r30, 0xD7	; 215
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	80 81       	ld	r24, Z
     68e:	81 60       	ori	r24, 0x01	; 1
     690:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	80 93 3a 0d 	sts	0x0D3A, r24

	USB_ResetInterface();
}
     698:	af cf       	rjmp	.-162    	; 0x5f8 <USB_ResetInterface>

0000069a <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     69a:	e8 ed       	ldi	r30, 0xD8	; 216
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	80 81       	ld	r24, Z
     6a0:	8c 7f       	andi	r24, 0xFC	; 252
     6a2:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     6a4:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     6a8:	08 95       	ret

000006aa <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     6aa:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     6ae:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     6b2:	08 95       	ret

000006b4 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     6b4:	1f 92       	push	r1
     6b6:	0f 92       	push	r0
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	0f 92       	push	r0
     6bc:	0b b6       	in	r0, 0x3b	; 59
     6be:	0f 92       	push	r0
     6c0:	11 24       	eor	r1, r1
     6c2:	2f 93       	push	r18
     6c4:	3f 93       	push	r19
     6c6:	4f 93       	push	r20
     6c8:	5f 93       	push	r21
     6ca:	6f 93       	push	r22
     6cc:	7f 93       	push	r23
     6ce:	8f 93       	push	r24
     6d0:	9f 93       	push	r25
     6d2:	af 93       	push	r26
     6d4:	bf 93       	push	r27
     6d6:	ef 93       	push	r30
     6d8:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     6da:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     6de:	82 ff       	sbrs	r24, 2
     6e0:	0a c0       	rjmp	.+20     	; 0x6f6 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     6e2:	80 91 e2 00 	lds	r24, 0x00E2
     6e6:	82 ff       	sbrs	r24, 2
     6e8:	06 c0       	rjmp	.+12     	; 0x6f6 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     6ea:	80 91 e1 00 	lds	r24, 0x00E1
     6ee:	8b 7f       	andi	r24, 0xFB	; 251
     6f0:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     6f4:	64 dd       	rcall	.-1336   	; 0x1be <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     6f6:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     6fa:	80 ff       	sbrs	r24, 0
     6fc:	1b c0       	rjmp	.+54     	; 0x734 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     6fe:	80 91 d8 00 	lds	r24, 0x00D8
     702:	80 ff       	sbrs	r24, 0
     704:	17 c0       	rjmp	.+46     	; 0x734 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     706:	80 91 da 00 	lds	r24, 0x00DA
     70a:	8e 7f       	andi	r24, 0xFE	; 254
     70c:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     710:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     714:	80 ff       	sbrs	r24, 0
     716:	0b c0       	rjmp	.+22     	; 0x72e <__vector_10+0x7a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     718:	84 e1       	ldi	r24, 0x14	; 20
     71a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     71c:	86 e1       	ldi	r24, 0x16	; 22
     71e:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     720:	09 b4       	in	r0, 0x29	; 41
     722:	00 fe       	sbrs	r0, 0
     724:	fd cf       	rjmp	.-6      	; 0x720 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
     72a:	53 d3       	rcall	.+1702   	; 0xdd2 <USB_Event_Stub>
     72c:	03 c0       	rjmp	.+6      	; 0x734 <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     72e:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     730:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
     732:	4f d3       	rcall	.+1694   	; 0xdd2 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     734:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     738:	80 ff       	sbrs	r24, 0
     73a:	17 c0       	rjmp	.+46     	; 0x76a <__vector_10+0xb6>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     73c:	80 91 e2 00 	lds	r24, 0x00E2
     740:	80 ff       	sbrs	r24, 0
     742:	13 c0       	rjmp	.+38     	; 0x76a <__vector_10+0xb6>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     744:	80 91 e2 00 	lds	r24, 0x00E2
     748:	8e 7f       	andi	r24, 0xFE	; 254
     74a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     74e:	80 91 e2 00 	lds	r24, 0x00E2
     752:	80 61       	ori	r24, 0x10	; 16
     754:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     758:	80 91 d8 00 	lds	r24, 0x00D8
     75c:	80 62       	ori	r24, 0x20	; 32
     75e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     762:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     764:	85 e0       	ldi	r24, 0x05	; 5
     766:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
     768:	34 d3       	rcall	.+1640   	; 0xdd2 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     76a:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     76e:	84 ff       	sbrs	r24, 4
     770:	2c c0       	rjmp	.+88     	; 0x7ca <__vector_10+0x116>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     772:	80 91 e2 00 	lds	r24, 0x00E2
     776:	84 ff       	sbrs	r24, 4
     778:	28 c0       	rjmp	.+80     	; 0x7ca <__vector_10+0x116>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     77a:	84 e1       	ldi	r24, 0x14	; 20
     77c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     77e:	86 e1       	ldi	r24, 0x16	; 22
     780:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     782:	09 b4       	in	r0, 0x29	; 41
     784:	00 fe       	sbrs	r0, 0
     786:	fd cf       	rjmp	.-6      	; 0x782 <__vector_10+0xce>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     788:	80 91 d8 00 	lds	r24, 0x00D8
     78c:	8f 7d       	andi	r24, 0xDF	; 223
     78e:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     792:	80 91 e1 00 	lds	r24, 0x00E1
     796:	8f 7e       	andi	r24, 0xEF	; 239
     798:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     79c:	80 91 e2 00 	lds	r24, 0x00E2
     7a0:	8f 7e       	andi	r24, 0xEF	; 239
     7a2:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     7a6:	80 91 e2 00 	lds	r24, 0x00E2
     7aa:	81 60       	ori	r24, 0x01	; 1
     7ac:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     7b0:	80 91 37 0d 	lds	r24, 0x0D37
     7b4:	88 23       	and	r24, r24
     7b6:	31 f4       	brne	.+12     	; 0x7c4 <__vector_10+0x110>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     7b8:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     7bc:	87 fd       	sbrc	r24, 7
     7be:	02 c0       	rjmp	.+4      	; 0x7c4 <__vector_10+0x110>
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <__vector_10+0x112>
     7c4:	84 e0       	ldi	r24, 0x04	; 4
     7c6:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     7c8:	04 d3       	rcall	.+1544   	; 0xdd2 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     7ca:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     7ce:	83 ff       	sbrs	r24, 3
     7d0:	21 c0       	rjmp	.+66     	; 0x814 <__vector_10+0x160>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     7d2:	80 91 e2 00 	lds	r24, 0x00E2
     7d6:	83 ff       	sbrs	r24, 3
     7d8:	1d c0       	rjmp	.+58     	; 0x814 <__vector_10+0x160>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     7da:	80 91 e1 00 	lds	r24, 0x00E1
     7de:	87 7f       	andi	r24, 0xF7	; 247
     7e0:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     7e4:	82 e0       	ldi	r24, 0x02	; 2
     7e6:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
     7e8:	10 92 37 0d 	sts	0x0D37, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     7ec:	80 91 e1 00 	lds	r24, 0x00E1
     7f0:	8e 7f       	andi	r24, 0xFE	; 254
     7f2:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     7f6:	80 91 e2 00 	lds	r24, 0x00E2
     7fa:	8e 7f       	andi	r24, 0xFE	; 254
     7fc:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     800:	80 91 e2 00 	lds	r24, 0x00E2
     804:	80 61       	ori	r24, 0x10	; 16
     806:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	60 e0       	ldi	r22, 0x00	; 0
     80e:	42 e0       	ldi	r20, 0x02	; 2
     810:	8f de       	rcall	.-738    	; 0x530 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     812:	df d2       	rcall	.+1470   	; 0xdd2 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     814:	ff 91       	pop	r31
     816:	ef 91       	pop	r30
     818:	bf 91       	pop	r27
     81a:	af 91       	pop	r26
     81c:	9f 91       	pop	r25
     81e:	8f 91       	pop	r24
     820:	7f 91       	pop	r23
     822:	6f 91       	pop	r22
     824:	5f 91       	pop	r21
     826:	4f 91       	pop	r20
     828:	3f 91       	pop	r19
     82a:	2f 91       	pop	r18
     82c:	0f 90       	pop	r0
     82e:	0b be       	out	0x3b, r0	; 59
     830:	0f 90       	pop	r0
     832:	0f be       	out	0x3f, r0	; 63
     834:	0f 90       	pop	r0
     836:	1f 90       	pop	r1
     838:	18 95       	reti

0000083a <Endpoint_Write_Control_Stream_LE>:
     83a:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     83c:	40 91 41 0d 	lds	r20, 0x0D41
     840:	50 91 42 0d 	lds	r21, 0x0D42
     844:	46 17       	cp	r20, r22
     846:	57 07       	cpc	r21, r23
     848:	18 f4       	brcc	.+6      	; 0x850 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     84a:	f9 01       	movw	r30, r18
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	3c c0       	rjmp	.+120    	; 0x8c8 <Endpoint_Write_Control_Stream_LE+0x8e>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     850:	61 15       	cp	r22, r1
     852:	71 05       	cpc	r23, r1
     854:	11 f0       	breq	.+4      	; 0x85a <Endpoint_Write_Control_Stream_LE+0x20>
     856:	ab 01       	movw	r20, r22
     858:	f8 cf       	rjmp	.-16     	; 0x84a <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     85a:	80 91 e8 00 	lds	r24, 0x00E8
     85e:	8e 77       	andi	r24, 0x7E	; 126
     860:	80 93 e8 00 	sts	0x00E8, r24
     864:	40 e0       	ldi	r20, 0x00	; 0
     866:	50 e0       	ldi	r21, 0x00	; 0
     868:	f0 cf       	rjmp	.-32     	; 0x84a <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     86a:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     86c:	88 23       	and	r24, r24
     86e:	e9 f1       	breq	.+122    	; 0x8ea <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     870:	85 30       	cpi	r24, 0x05	; 5
     872:	e9 f1       	breq	.+122    	; 0x8ee <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     874:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     878:	83 ff       	sbrs	r24, 3
     87a:	02 c0       	rjmp	.+4      	; 0x880 <Endpoint_Write_Control_Stream_LE+0x46>
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     880:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     884:	82 fd       	sbrc	r24, 2
     886:	2b c0       	rjmp	.+86     	; 0x8de <Endpoint_Write_Control_Stream_LE+0xa4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     888:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     88c:	80 ff       	sbrs	r24, 0
     88e:	1c c0       	rjmp	.+56     	; 0x8c8 <Endpoint_Write_Control_Stream_LE+0x8e>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     890:	20 91 f2 00 	lds	r18, 0x00F2
     894:	30 91 f3 00 	lds	r19, 0x00F3
     898:	07 c0       	rjmp	.+14     	; 0x8a8 <Endpoint_Write_Control_Stream_LE+0x6e>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     89a:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     89c:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     8a0:	41 50       	subi	r20, 0x01	; 1
     8a2:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     8a4:	2f 5f       	subi	r18, 0xFF	; 255
     8a6:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     8a8:	41 15       	cp	r20, r1
     8aa:	51 05       	cpc	r21, r1
     8ac:	19 f0       	breq	.+6      	; 0x8b4 <Endpoint_Write_Control_Stream_LE+0x7a>
     8ae:	28 30       	cpi	r18, 0x08	; 8
     8b0:	31 05       	cpc	r19, r1
     8b2:	98 f3       	brcs	.-26     	; 0x89a <Endpoint_Write_Control_Stream_LE+0x60>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	28 30       	cpi	r18, 0x08	; 8
     8b8:	31 05       	cpc	r19, r1
     8ba:	09 f4       	brne	.+2      	; 0x8be <Endpoint_Write_Control_Stream_LE+0x84>
     8bc:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     8be:	80 91 e8 00 	lds	r24, 0x00E8
     8c2:	8e 77       	andi	r24, 0x7E	; 126
     8c4:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     8c8:	41 15       	cp	r20, r1
     8ca:	51 05       	cpc	r21, r1
     8cc:	71 f6       	brne	.-100    	; 0x86a <Endpoint_Write_Control_Stream_LE+0x30>
     8ce:	99 23       	and	r25, r25
     8d0:	61 f6       	brne	.-104    	; 0x86a <Endpoint_Write_Control_Stream_LE+0x30>
     8d2:	05 c0       	rjmp	.+10     	; 0x8de <Endpoint_Write_Control_Stream_LE+0xa4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     8d4:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     8d6:	88 23       	and	r24, r24
     8d8:	41 f0       	breq	.+16     	; 0x8ea <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     8da:	85 30       	cpi	r24, 0x05	; 5
     8dc:	41 f0       	breq	.+16     	; 0x8ee <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     8de:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     8e2:	82 ff       	sbrs	r24, 2
     8e4:	f7 cf       	rjmp	.-18     	; 0x8d4 <Endpoint_Write_Control_Stream_LE+0x9a>
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	08 95       	ret
     8ea:	82 e0       	ldi	r24, 0x02	; 2
     8ec:	08 95       	ret
     8ee:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     8f0:	08 95       	ret

000008f2 <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
     8f2:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     8f4:	61 15       	cp	r22, r1
     8f6:	71 05       	cpc	r23, r1
     8f8:	29 f4       	brne	.+10     	; 0x904 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     8fa:	80 91 e8 00 	lds	r24, 0x00E8
     8fe:	8b 77       	andi	r24, 0x7B	; 123
     900:	80 93 e8 00 	sts	0x00E8, r24
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     904:	f9 01       	movw	r30, r18
     906:	21 c0       	rjmp	.+66     	; 0x94a <Endpoint_Read_Control_Stream_LE+0x58>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     908:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     90a:	88 23       	and	r24, r24
     90c:	69 f1       	breq	.+90     	; 0x968 <Endpoint_Read_Control_Stream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     90e:	85 30       	cpi	r24, 0x05	; 5
     910:	69 f1       	breq	.+90     	; 0x96c <Endpoint_Read_Control_Stream_LE+0x7a>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     912:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     916:	83 ff       	sbrs	r24, 3
     918:	02 c0       	rjmp	.+4      	; 0x91e <Endpoint_Read_Control_Stream_LE+0x2c>
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     91e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     922:	82 ff       	sbrs	r24, 2
     924:	f1 cf       	rjmp	.-30     	; 0x908 <Endpoint_Read_Control_Stream_LE+0x16>
     926:	06 c0       	rjmp	.+12     	; 0x934 <Endpoint_Read_Control_Stream_LE+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     928:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     92c:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     92e:	61 50       	subi	r22, 0x01	; 1
     930:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     932:	31 f0       	breq	.+12     	; 0x940 <Endpoint_Read_Control_Stream_LE+0x4e>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     934:	80 91 f2 00 	lds	r24, 0x00F2
     938:	90 91 f3 00 	lds	r25, 0x00F3
     93c:	89 2b       	or	r24, r25
     93e:	a1 f7       	brne	.-24     	; 0x928 <Endpoint_Read_Control_Stream_LE+0x36>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     940:	80 91 e8 00 	lds	r24, 0x00E8
     944:	8b 77       	andi	r24, 0x7B	; 123
     946:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
     94a:	61 15       	cp	r22, r1
     94c:	71 05       	cpc	r23, r1
     94e:	e1 f6       	brne	.-72     	; 0x908 <Endpoint_Read_Control_Stream_LE+0x16>
     950:	05 c0       	rjmp	.+10     	; 0x95c <Endpoint_Read_Control_Stream_LE+0x6a>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     952:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     954:	88 23       	and	r24, r24
     956:	41 f0       	breq	.+16     	; 0x968 <Endpoint_Read_Control_Stream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     958:	85 30       	cpi	r24, 0x05	; 5
     95a:	41 f0       	breq	.+16     	; 0x96c <Endpoint_Read_Control_Stream_LE+0x7a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     95c:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     960:	80 ff       	sbrs	r24, 0
     962:	f7 cf       	rjmp	.-18     	; 0x952 <Endpoint_Read_Control_Stream_LE+0x60>
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	08 95       	ret
     968:	82 e0       	ldi	r24, 0x02	; 2
     96a:	08 95       	ret
     96c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     96e:	08 95       	ret

00000970 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     970:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     972:	40 91 41 0d 	lds	r20, 0x0D41
     976:	50 91 42 0d 	lds	r21, 0x0D42
     97a:	46 17       	cp	r20, r22
     97c:	57 07       	cpc	r21, r23
     97e:	18 f4       	brcc	.+6      	; 0x986 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     980:	f9 01       	movw	r30, r18
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	3f c0       	rjmp	.+126    	; 0xa04 <Endpoint_Write_Control_PStream_LE+0x94>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     986:	61 15       	cp	r22, r1
     988:	71 05       	cpc	r23, r1
     98a:	11 f0       	breq	.+4      	; 0x990 <Endpoint_Write_Control_PStream_LE+0x20>
     98c:	ab 01       	movw	r20, r22
     98e:	f8 cf       	rjmp	.-16     	; 0x980 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     990:	80 91 e8 00 	lds	r24, 0x00E8
     994:	8e 77       	andi	r24, 0x7E	; 126
     996:	80 93 e8 00 	sts	0x00E8, r24
     99a:	40 e0       	ldi	r20, 0x00	; 0
     99c:	50 e0       	ldi	r21, 0x00	; 0
     99e:	f0 cf       	rjmp	.-32     	; 0x980 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     9a0:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     9a2:	88 23       	and	r24, r24
     9a4:	09 f4       	brne	.+2      	; 0x9a8 <Endpoint_Write_Control_PStream_LE+0x38>
     9a6:	3f c0       	rjmp	.+126    	; 0xa26 <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     9a8:	85 30       	cpi	r24, 0x05	; 5
     9aa:	09 f4       	brne	.+2      	; 0x9ae <Endpoint_Write_Control_PStream_LE+0x3e>
     9ac:	3e c0       	rjmp	.+124    	; 0xa2a <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     9ae:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     9b2:	83 ff       	sbrs	r24, 3
     9b4:	02 c0       	rjmp	.+4      	; 0x9ba <Endpoint_Write_Control_PStream_LE+0x4a>
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9ba:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     9be:	82 fd       	sbrc	r24, 2
     9c0:	2c c0       	rjmp	.+88     	; 0xa1a <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     9c2:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     9c6:	80 ff       	sbrs	r24, 0
     9c8:	1d c0       	rjmp	.+58     	; 0xa04 <Endpoint_Write_Control_PStream_LE+0x94>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     9ca:	20 91 f2 00 	lds	r18, 0x00F2
     9ce:	30 91 f3 00 	lds	r19, 0x00F3
     9d2:	08 c0       	rjmp	.+16     	; 0x9e4 <Endpoint_Write_Control_PStream_LE+0x74>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     9d4:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     9d6:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     9da:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     9dc:	41 50       	subi	r20, 0x01	; 1
     9de:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     9e0:	2f 5f       	subi	r18, 0xFF	; 255
     9e2:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     9e4:	41 15       	cp	r20, r1
     9e6:	51 05       	cpc	r21, r1
     9e8:	19 f0       	breq	.+6      	; 0x9f0 <Endpoint_Write_Control_PStream_LE+0x80>
     9ea:	28 30       	cpi	r18, 0x08	; 8
     9ec:	31 05       	cpc	r19, r1
     9ee:	90 f3       	brcs	.-28     	; 0x9d4 <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	28 30       	cpi	r18, 0x08	; 8
     9f4:	31 05       	cpc	r19, r1
     9f6:	09 f4       	brne	.+2      	; 0x9fa <Endpoint_Write_Control_PStream_LE+0x8a>
     9f8:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9fa:	80 91 e8 00 	lds	r24, 0x00E8
     9fe:	8e 77       	andi	r24, 0x7E	; 126
     a00:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     a04:	41 15       	cp	r20, r1
     a06:	51 05       	cpc	r21, r1
     a08:	59 f6       	brne	.-106    	; 0x9a0 <Endpoint_Write_Control_PStream_LE+0x30>
     a0a:	99 23       	and	r25, r25
     a0c:	49 f6       	brne	.-110    	; 0x9a0 <Endpoint_Write_Control_PStream_LE+0x30>
     a0e:	05 c0       	rjmp	.+10     	; 0xa1a <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     a10:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     a12:	88 23       	and	r24, r24
     a14:	41 f0       	breq	.+16     	; 0xa26 <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     a16:	85 30       	cpi	r24, 0x05	; 5
     a18:	41 f0       	breq	.+16     	; 0xa2a <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a1a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     a1e:	82 ff       	sbrs	r24, 2
     a20:	f7 cf       	rjmp	.-18     	; 0xa10 <Endpoint_Write_Control_PStream_LE+0xa0>
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	08 95       	ret
     a26:	82 e0       	ldi	r24, 0x02	; 2
     a28:	08 95       	ret
     a2a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     a2c:	08 95       	ret

00000a2e <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     a2e:	bf 92       	push	r11
     a30:	cf 92       	push	r12
     a32:	df 92       	push	r13
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	cf 93       	push	r28
     a3e:	df 93       	push	r29
     a40:	18 2f       	mov	r17, r24
     a42:	09 2f       	mov	r16, r25
     a44:	7b 01       	movw	r14, r22
     a46:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     a48:	a5 dd       	rcall	.-1206   	; 0x594 <Endpoint_WaitUntilReady>
     a4a:	b8 2e       	mov	r11, r24
     a4c:	88 23       	and	r24, r24
     a4e:	b1 f5       	brne	.+108    	; 0xabc <Endpoint_Write_Stream_LE+0x8e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     a50:	81 2f       	mov	r24, r17
     a52:	90 2f       	mov	r25, r16
     a54:	9c 01       	movw	r18, r24
     a56:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     a58:	c1 14       	cp	r12, r1
     a5a:	d1 04       	cpc	r13, r1
     a5c:	39 f0       	breq	.+14     	; 0xa6c <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
     a5e:	f6 01       	movw	r30, r12
     a60:	80 81       	ld	r24, Z
     a62:	91 81       	ldd	r25, Z+1	; 0x01
     a64:	e8 1a       	sub	r14, r24
     a66:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     a68:	c8 0f       	add	r28, r24
     a6a:	d9 1f       	adc	r29, r25
     a6c:	00 e0       	ldi	r16, 0x00	; 0
     a6e:	10 e0       	ldi	r17, 0x00	; 0
     a70:	22 c0       	rjmp	.+68     	; 0xab6 <Endpoint_Write_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     a72:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     a76:	85 fd       	sbrc	r24, 5
     a78:	16 c0       	rjmp	.+44     	; 0xaa6 <Endpoint_Write_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a7a:	80 91 e8 00 	lds	r24, 0x00E8
     a7e:	8e 77       	andi	r24, 0x7E	; 126
     a80:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
     a84:	c1 14       	cp	r12, r1
     a86:	d1 04       	cpc	r13, r1
     a88:	49 f0       	breq	.+18     	; 0xa9c <Endpoint_Write_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
     a8a:	f6 01       	movw	r30, r12
     a8c:	80 81       	ld	r24, Z
     a8e:	91 81       	ldd	r25, Z+1	; 0x01
     a90:	80 0f       	add	r24, r16
     a92:	91 1f       	adc	r25, r17
     a94:	91 83       	std	Z+1, r25	; 0x01
     a96:	80 83       	st	Z, r24
     a98:	85 e0       	ldi	r24, 0x05	; 5
     a9a:	11 c0       	rjmp	.+34     	; 0xabe <Endpoint_Write_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
     a9c:	9b d1       	rcall	.+822    	; 0xdd4 <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     a9e:	7a dd       	rcall	.-1292   	; 0x594 <Endpoint_WaitUntilReady>
     aa0:	88 23       	and	r24, r24
     aa2:	49 f0       	breq	.+18     	; 0xab6 <Endpoint_Write_Stream_LE+0x88>
     aa4:	0c c0       	rjmp	.+24     	; 0xabe <Endpoint_Write_Stream_LE+0x90>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     aa6:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     aa8:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     aac:	08 94       	sec
     aae:	e1 08       	sbc	r14, r1
     ab0:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
     ab2:	0f 5f       	subi	r16, 0xFF	; 255
     ab4:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     ab6:	e1 14       	cp	r14, r1
     ab8:	f1 04       	cpc	r15, r1
     aba:	d9 f6       	brne	.-74     	; 0xa72 <Endpoint_Write_Stream_LE+0x44>
     abc:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	1f 91       	pop	r17
     ac4:	0f 91       	pop	r16
     ac6:	ff 90       	pop	r15
     ac8:	ef 90       	pop	r14
     aca:	df 90       	pop	r13
     acc:	cf 90       	pop	r12
     ace:	bf 90       	pop	r11
     ad0:	08 95       	ret

00000ad2 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     ad2:	0f 93       	push	r16
     ad4:	1f 93       	push	r17
     ad6:	df 93       	push	r29
     ad8:	cf 93       	push	r28
     ada:	cd b7       	in	r28, 0x3d	; 61
     adc:	de b7       	in	r29, 0x3e	; 62
     ade:	ac 97       	sbiw	r28, 0x2c	; 44
     ae0:	0f b6       	in	r0, 0x3f	; 63
     ae2:	f8 94       	cli
     ae4:	de bf       	out	0x3e, r29	; 62
     ae6:	0f be       	out	0x3f, r0	; 63
     ae8:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     aea:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
     aee:	80 93 3b 0d 	sts	0x0D3B, r24
     af2:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
     af6:	80 93 3c 0d 	sts	0x0D3C, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     afa:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
     afe:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
     b02:	ed e3       	ldi	r30, 0x3D	; 61
     b04:	fd e0       	ldi	r31, 0x0D	; 13
     b06:	80 93 3d 0d 	sts	0x0D3D, r24
     b0a:	90 93 3e 0d 	sts	0x0D3E, r25
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     b0e:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
     b12:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
     b16:	80 93 3f 0d 	sts	0x0D3F, r24
     b1a:	93 83       	std	Z+3, r25	; 0x03
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     b1c:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
     b20:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
     b24:	80 93 41 0d 	sts	0x0D41, r24
     b28:	95 83       	std	Z+5, r25	; 0x05

	EVENT_USB_Device_ControlRequest();
     b2a:	91 db       	rcall	.-2270   	; 0x24e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     b2c:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     b30:	83 ff       	sbrs	r24, 3
     b32:	36 c1       	rjmp	.+620    	; 0xda0 <USB_Device_ProcessControlRequest+0x2ce>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     b34:	80 91 3b 0d 	lds	r24, 0x0D3B

		switch (USB_ControlRequest.bRequest)
     b38:	30 91 3c 0d 	lds	r19, 0x0D3C
     b3c:	35 30       	cpi	r19, 0x05	; 5
     b3e:	09 f4       	brne	.+2      	; 0xb42 <USB_Device_ProcessControlRequest+0x70>
     b40:	87 c0       	rjmp	.+270    	; 0xc50 <USB_Device_ProcessControlRequest+0x17e>
     b42:	36 30       	cpi	r19, 0x06	; 6
     b44:	40 f4       	brcc	.+16     	; 0xb56 <USB_Device_ProcessControlRequest+0x84>
     b46:	31 30       	cpi	r19, 0x01	; 1
     b48:	c9 f1       	breq	.+114    	; 0xbbc <USB_Device_ProcessControlRequest+0xea>
     b4a:	31 30       	cpi	r19, 0x01	; 1
     b4c:	70 f0       	brcs	.+28     	; 0xb6a <USB_Device_ProcessControlRequest+0x98>
     b4e:	33 30       	cpi	r19, 0x03	; 3
     b50:	09 f0       	breq	.+2      	; 0xb54 <USB_Device_ProcessControlRequest+0x82>
     b52:	26 c1       	rjmp	.+588    	; 0xda0 <USB_Device_ProcessControlRequest+0x2ce>
     b54:	33 c0       	rjmp	.+102    	; 0xbbc <USB_Device_ProcessControlRequest+0xea>
     b56:	38 30       	cpi	r19, 0x08	; 8
     b58:	09 f4       	brne	.+2      	; 0xb5c <USB_Device_ProcessControlRequest+0x8a>
     b5a:	f5 c0       	rjmp	.+490    	; 0xd46 <USB_Device_ProcessControlRequest+0x274>
     b5c:	39 30       	cpi	r19, 0x09	; 9
     b5e:	09 f4       	brne	.+2      	; 0xb62 <USB_Device_ProcessControlRequest+0x90>
     b60:	04 c1       	rjmp	.+520    	; 0xd6a <USB_Device_ProcessControlRequest+0x298>
     b62:	36 30       	cpi	r19, 0x06	; 6
     b64:	09 f0       	breq	.+2      	; 0xb68 <USB_Device_ProcessControlRequest+0x96>
     b66:	1c c1       	rjmp	.+568    	; 0xda0 <USB_Device_ProcessControlRequest+0x2ce>
     b68:	96 c0       	rjmp	.+300    	; 0xc96 <USB_Device_ProcessControlRequest+0x1c4>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b6a:	80 38       	cpi	r24, 0x80	; 128
     b6c:	21 f0       	breq	.+8      	; 0xb76 <USB_Device_ProcessControlRequest+0xa4>
     b6e:	82 38       	cpi	r24, 0x82	; 130
     b70:	09 f0       	breq	.+2      	; 0xb74 <USB_Device_ProcessControlRequest+0xa2>
     b72:	16 c1       	rjmp	.+556    	; 0xda0 <USB_Device_ProcessControlRequest+0x2ce>
     b74:	08 c0       	rjmp	.+16     	; 0xb86 <USB_Device_ProcessControlRequest+0xb4>
     b76:	90 91 38 0d 	lds	r25, 0x0D38
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     b7a:	80 91 39 0d 	lds	r24, 0x0D39
     b7e:	88 23       	and	r24, r24
     b80:	99 f0       	breq	.+38     	; 0xba8 <USB_Device_ProcessControlRequest+0xd6>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     b82:	92 60       	ori	r25, 0x02	; 2
     b84:	11 c0       	rjmp	.+34     	; 0xba8 <USB_Device_ProcessControlRequest+0xd6>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     b86:	80 91 3f 0d 	lds	r24, 0x0D3F
     b8a:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     b8c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     b90:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	25 e0       	ldi	r18, 0x05	; 5
     b98:	96 95       	lsr	r25
     b9a:	87 95       	ror	r24
     b9c:	2a 95       	dec	r18
     b9e:	e1 f7       	brne	.-8      	; 0xb98 <USB_Device_ProcessControlRequest+0xc6>
     ba0:	98 2f       	mov	r25, r24
     ba2:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     ba4:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ba8:	80 91 e8 00 	lds	r24, 0x00E8
     bac:	87 7f       	andi	r24, 0xF7	; 247
     bae:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     bb2:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
     bb6:	10 92 f1 00 	sts	0x00F1, r1
     bba:	d0 c0       	rjmp	.+416    	; 0xd5c <USB_Device_ProcessControlRequest+0x28a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     bbc:	88 23       	and	r24, r24
     bbe:	19 f0       	breq	.+6      	; 0xbc6 <USB_Device_ProcessControlRequest+0xf4>
     bc0:	82 30       	cpi	r24, 0x02	; 2
     bc2:	09 f0       	breq	.+2      	; 0xbc6 <USB_Device_ProcessControlRequest+0xf4>
     bc4:	ed c0       	rjmp	.+474    	; 0xda0 <USB_Device_ProcessControlRequest+0x2ce>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	8f 71       	andi	r24, 0x1F	; 31
     bca:	90 70       	andi	r25, 0x00	; 0
     bcc:	00 97       	sbiw	r24, 0x00	; 0
     bce:	21 f0       	breq	.+8      	; 0xbd8 <USB_Device_ProcessControlRequest+0x106>
     bd0:	02 97       	sbiw	r24, 0x02	; 2
     bd2:	09 f0       	breq	.+2      	; 0xbd6 <USB_Device_ProcessControlRequest+0x104>
     bd4:	e5 c0       	rjmp	.+458    	; 0xda0 <USB_Device_ProcessControlRequest+0x2ce>
     bd6:	0c c0       	rjmp	.+24     	; 0xbf0 <USB_Device_ProcessControlRequest+0x11e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     bd8:	80 91 3d 0d 	lds	r24, 0x0D3D
     bdc:	81 30       	cpi	r24, 0x01	; 1
     bde:	09 f0       	breq	.+2      	; 0xbe2 <USB_Device_ProcessControlRequest+0x110>
     be0:	df c0       	rjmp	.+446    	; 0xda0 <USB_Device_ProcessControlRequest+0x2ce>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     be2:	10 92 39 0d 	sts	0x0D39, r1
     be6:	33 30       	cpi	r19, 0x03	; 3
     be8:	69 f5       	brne	.+90     	; 0xc44 <USB_Device_ProcessControlRequest+0x172>
     bea:	80 93 39 0d 	sts	0x0D39, r24
     bee:	2a c0       	rjmp	.+84     	; 0xc44 <USB_Device_ProcessControlRequest+0x172>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     bf0:	80 91 3d 0d 	lds	r24, 0x0D3D
     bf4:	88 23       	and	r24, r24
     bf6:	31 f5       	brne	.+76     	; 0xc44 <USB_Device_ProcessControlRequest+0x172>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     bf8:	20 91 3f 0d 	lds	r18, 0x0D3F
     bfc:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     bfe:	09 f4       	brne	.+2      	; 0xc02 <USB_Device_ProcessControlRequest+0x130>
     c00:	cf c0       	rjmp	.+414    	; 0xda0 <USB_Device_ProcessControlRequest+0x2ce>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     c02:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     c06:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     c0a:	80 ff       	sbrs	r24, 0
     c0c:	1b c0       	rjmp	.+54     	; 0xc44 <USB_Device_ProcessControlRequest+0x172>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     c0e:	33 30       	cpi	r19, 0x03	; 3
     c10:	21 f4       	brne	.+8      	; 0xc1a <USB_Device_ProcessControlRequest+0x148>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     c12:	80 91 eb 00 	lds	r24, 0x00EB
     c16:	80 62       	ori	r24, 0x20	; 32
     c18:	13 c0       	rjmp	.+38     	; 0xc40 <USB_Device_ProcessControlRequest+0x16e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     c1a:	80 91 eb 00 	lds	r24, 0x00EB
     c1e:	80 61       	ori	r24, 0x10	; 16
     c20:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	02 c0       	rjmp	.+4      	; 0xc2e <USB_Device_ProcessControlRequest+0x15c>
     c2a:	88 0f       	add	r24, r24
     c2c:	99 1f       	adc	r25, r25
     c2e:	2a 95       	dec	r18
     c30:	e2 f7       	brpl	.-8      	; 0xc2a <USB_Device_ProcessControlRequest+0x158>
     c32:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     c36:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     c3a:	80 91 eb 00 	lds	r24, 0x00EB
     c3e:	88 60       	ori	r24, 0x08	; 8
     c40:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     c44:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c48:	80 91 e8 00 	lds	r24, 0x00E8
     c4c:	87 7f       	andi	r24, 0xF7	; 247
     c4e:	89 c0       	rjmp	.+274    	; 0xd62 <USB_Device_ProcessControlRequest+0x290>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     c50:	88 23       	and	r24, r24
     c52:	09 f0       	breq	.+2      	; 0xc56 <USB_Device_ProcessControlRequest+0x184>
     c54:	a5 c0       	rjmp	.+330    	; 0xda0 <USB_Device_ProcessControlRequest+0x2ce>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
     c56:	10 91 3d 0d 	lds	r17, 0x0D3D
     c5a:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     c5c:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     c5e:	f8 94       	cli
     c60:	80 91 e8 00 	lds	r24, 0x00E8
     c64:	87 7f       	andi	r24, 0xF7	; 247
     c66:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     c6a:	75 dc       	rcall	.-1814   	; 0x556 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c6c:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     c70:	80 ff       	sbrs	r24, 0
     c72:	fc cf       	rjmp	.-8      	; 0xc6c <USB_Device_ProcessControlRequest+0x19a>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     c74:	80 91 e3 00 	lds	r24, 0x00E3
     c78:	80 78       	andi	r24, 0x80	; 128
     c7a:	81 2b       	or	r24, r17

				UDADDR = Temp;
     c7c:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
     c80:	80 68       	ori	r24, 0x80	; 128
     c82:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     c86:	11 23       	and	r17, r17
     c88:	11 f4       	brne	.+4      	; 0xc8e <USB_Device_ProcessControlRequest+0x1bc>
     c8a:	82 e0       	ldi	r24, 0x02	; 2
     c8c:	01 c0       	rjmp	.+2      	; 0xc90 <USB_Device_ProcessControlRequest+0x1be>
     c8e:	83 e0       	ldi	r24, 0x03	; 3
     c90:	8e bb       	out	0x1e, r24	; 30
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     c92:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
     c94:	85 c0       	rjmp	.+266    	; 0xda0 <USB_Device_ProcessControlRequest+0x2ce>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     c96:	80 58       	subi	r24, 0x80	; 128
     c98:	82 30       	cpi	r24, 0x02	; 2
     c9a:	08 f0       	brcs	.+2      	; 0xc9e <USB_Device_ProcessControlRequest+0x1cc>
     c9c:	81 c0       	rjmp	.+258    	; 0xda0 <USB_Device_ProcessControlRequest+0x2ce>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     c9e:	80 91 3d 0d 	lds	r24, 0x0D3D
     ca2:	90 91 3e 0d 	lds	r25, 0x0D3E
     ca6:	23 e0       	ldi	r18, 0x03	; 3
     ca8:	8c 3d       	cpi	r24, 0xDC	; 220
     caa:	92 07       	cpc	r25, r18
     cac:	09 f0       	breq	.+2      	; 0xcb0 <USB_Device_ProcessControlRequest+0x1de>
     cae:	33 c0       	rjmp	.+102    	; 0xd16 <USB_Device_ProcessControlRequest+0x244>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     cb0:	83 e0       	ldi	r24, 0x03	; 3
     cb2:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     cb4:	8a e2       	ldi	r24, 0x2A	; 42
     cb6:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     cb8:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     cba:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     cbc:	de 01       	movw	r26, r28
     cbe:	15 96       	adiw	r26, 0x05	; 5
     cc0:	6e e0       	ldi	r22, 0x0E	; 14
     cc2:	40 e0       	ldi	r20, 0x00	; 0
     cc4:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     cc6:	11 e2       	ldi	r17, 0x21	; 33
     cc8:	e6 2f       	mov	r30, r22
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	10 93 57 00 	sts	0x0057, r17
     cd0:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
     cd2:	40 ff       	sbrs	r20, 0
     cd4:	03 c0       	rjmp	.+6      	; 0xcdc <USB_Device_ProcessControlRequest+0x20a>
					{
						SerialByte >>= 4;
     cd6:	82 95       	swap	r24
     cd8:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
     cda:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     cdc:	8f 70       	andi	r24, 0x0F	; 15
     cde:	28 2f       	mov	r18, r24
     ce0:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     ce2:	8a 30       	cpi	r24, 0x0A	; 10
     ce4:	18 f0       	brcs	.+6      	; 0xcec <USB_Device_ProcessControlRequest+0x21a>
     ce6:	c9 01       	movw	r24, r18
     ce8:	c7 96       	adiw	r24, 0x37	; 55
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <USB_Device_ProcessControlRequest+0x21e>
     cec:	c9 01       	movw	r24, r18
     cee:	c0 96       	adiw	r24, 0x30	; 48
     cf0:	8d 93       	st	X+, r24
     cf2:	9d 93       	st	X+, r25
     cf4:	4f 5f       	subi	r20, 0xFF	; 255
     cf6:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     cf8:	44 31       	cpi	r20, 0x14	; 20
     cfa:	51 05       	cpc	r21, r1
     cfc:	29 f7       	brne	.-54     	; 0xcc8 <USB_Device_ProcessControlRequest+0x1f6>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     cfe:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d00:	80 91 e8 00 	lds	r24, 0x00E8
     d04:	87 7f       	andi	r24, 0xF7	; 247
     d06:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     d0a:	ce 01       	movw	r24, r28
     d0c:	03 96       	adiw	r24, 0x03	; 3
     d0e:	6a e2       	ldi	r22, 0x2A	; 42
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	93 dd       	rcall	.-1242   	; 0x83a <Endpoint_Write_Control_Stream_LE>
     d14:	12 c0       	rjmp	.+36     	; 0xd3a <USB_Device_ProcessControlRequest+0x268>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     d16:	60 91 3f 0d 	lds	r22, 0x0D3F
     d1a:	ae 01       	movw	r20, r28
     d1c:	4f 5f       	subi	r20, 0xFF	; 255
     d1e:	5f 4f       	sbci	r21, 0xFF	; 255
     d20:	39 db       	rcall	.-2446   	; 0x394 <CALLBACK_USB_GetDescriptor>
     d22:	bc 01       	movw	r22, r24
     d24:	00 97       	sbiw	r24, 0x00	; 0
     d26:	09 f4       	brne	.+2      	; 0xd2a <USB_Device_ProcessControlRequest+0x258>
     d28:	3b c0       	rjmp	.+118    	; 0xda0 <USB_Device_ProcessControlRequest+0x2ce>
     d2a:	80 91 e8 00 	lds	r24, 0x00E8
     d2e:	87 7f       	andi	r24, 0xF7	; 247
     d30:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	9a 81       	ldd	r25, Y+2	; 0x02
     d38:	1b de       	rcall	.-970    	; 0x970 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d3a:	80 91 e8 00 	lds	r24, 0x00E8
     d3e:	8b 77       	andi	r24, 0x7B	; 123
     d40:	80 93 e8 00 	sts	0x00E8, r24
     d44:	2d c0       	rjmp	.+90     	; 0xda0 <USB_Device_ProcessControlRequest+0x2ce>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     d46:	80 38       	cpi	r24, 0x80	; 128
     d48:	59 f5       	brne	.+86     	; 0xda0 <USB_Device_ProcessControlRequest+0x2ce>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d4a:	80 91 e8 00 	lds	r24, 0x00E8
     d4e:	87 7f       	andi	r24, 0xF7	; 247
     d50:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     d54:	80 91 37 0d 	lds	r24, 0x0D37
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d58:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d5c:	80 91 e8 00 	lds	r24, 0x00E8
     d60:	8e 77       	andi	r24, 0x7E	; 126
     d62:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     d66:	f7 db       	rcall	.-2066   	; 0x556 <Endpoint_ClearStatusStage>
     d68:	1b c0       	rjmp	.+54     	; 0xda0 <USB_Device_ProcessControlRequest+0x2ce>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     d6a:	88 23       	and	r24, r24
     d6c:	c9 f4       	brne	.+50     	; 0xda0 <USB_Device_ProcessControlRequest+0x2ce>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     d6e:	90 91 3d 0d 	lds	r25, 0x0D3D
     d72:	92 30       	cpi	r25, 0x02	; 2
     d74:	a8 f4       	brcc	.+42     	; 0xda0 <USB_Device_ProcessControlRequest+0x2ce>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d76:	80 91 e8 00 	lds	r24, 0x00E8
     d7a:	87 7f       	andi	r24, 0xF7	; 247
     d7c:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     d80:	90 93 37 0d 	sts	0x0D37, r25

	Endpoint_ClearStatusStage();
     d84:	e8 db       	rcall	.-2096   	; 0x556 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     d86:	80 91 37 0d 	lds	r24, 0x0D37
     d8a:	88 23       	and	r24, r24
     d8c:	31 f4       	brne	.+12     	; 0xd9a <USB_Device_ProcessControlRequest+0x2c8>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     d8e:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     d92:	87 fd       	sbrc	r24, 7
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <USB_Device_ProcessControlRequest+0x2c8>
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	01 c0       	rjmp	.+2      	; 0xd9c <USB_Device_ProcessControlRequest+0x2ca>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
     d9e:	5a da       	rcall	.-2892   	; 0x254 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     da0:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     da4:	83 ff       	sbrs	r24, 3
     da6:	0a c0       	rjmp	.+20     	; 0xdbc <USB_Device_ProcessControlRequest+0x2ea>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     da8:	80 91 eb 00 	lds	r24, 0x00EB
     dac:	80 62       	ori	r24, 0x20	; 32
     dae:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     db2:	80 91 e8 00 	lds	r24, 0x00E8
     db6:	87 7f       	andi	r24, 0xF7	; 247
     db8:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
     dbc:	ac 96       	adiw	r28, 0x2c	; 44
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	f8 94       	cli
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	cd bf       	out	0x3d, r28	; 61
     dc8:	cf 91       	pop	r28
     dca:	df 91       	pop	r29
     dcc:	1f 91       	pop	r17
     dce:	0f 91       	pop	r16
     dd0:	08 95       	ret

00000dd2 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     dd2:	08 95       	ret

00000dd4 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     dd4:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
     dd6:	8e b3       	in	r24, 0x1e	; 30
     dd8:	88 23       	and	r24, r24
     dda:	61 f0       	breq	.+24     	; 0xdf4 <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     ddc:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     de0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     de4:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
     de8:	83 ff       	sbrs	r24, 3
     dea:	01 c0       	rjmp	.+2      	; 0xdee <USB_USBTask+0x1a>
		  USB_Device_ProcessControlRequest();
     dec:	72 de       	rcall	.-796    	; 0xad2 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     dee:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     df0:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     df8:	4f 92       	push	r4
     dfa:	5f 92       	push	r5
     dfc:	6f 92       	push	r6
     dfe:	7f 92       	push	r7
     e00:	8f 92       	push	r8
     e02:	9f 92       	push	r9
     e04:	af 92       	push	r10
     e06:	bf 92       	push	r11
     e08:	cf 92       	push	r12
     e0a:	df 92       	push	r13
     e0c:	ef 92       	push	r14
     e0e:	ff 92       	push	r15
     e10:	0f 93       	push	r16
     e12:	1f 93       	push	r17
     e14:	df 93       	push	r29
     e16:	cf 93       	push	r28
     e18:	00 d0       	rcall	.+0      	; 0xe1a <HID_Device_USBTask+0x22>
     e1a:	0f 92       	push	r0
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	7c 01       	movw	r14, r24
			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);

			Endpoint_ClearIN();
		}
	}
}
     e22:	6d b6       	in	r6, 0x3d	; 61
     e24:	7e b6       	in	r7, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
     e26:	8e b3       	in	r24, 0x1e	; 30
     e28:	84 30       	cpi	r24, 0x04	; 4
     e2a:	09 f0       	breq	.+2      	; 0xe2e <HID_Device_USBTask+0x36>
     e2c:	85 c0       	rjmp	.+266    	; 0xf38 <HID_Device_USBTask+0x140>
	  return;

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
     e2e:	f7 01       	movw	r30, r14
     e30:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     e32:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     e36:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsReadWriteAllowed())
     e3a:	85 ff       	sbrs	r24, 5
     e3c:	7d c0       	rjmp	.+250    	; 0xf38 <HID_Device_USBTask+0x140>
     e3e:	5d b6       	in	r5, 0x3d	; 61
     e40:	4e b6       	in	r4, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     e42:	47 81       	ldd	r20, Z+7	; 0x07
     e44:	8d b7       	in	r24, 0x3d	; 61
     e46:	9e b7       	in	r25, 0x3e	; 62
     e48:	84 1b       	sub	r24, r20
     e4a:	91 09       	sbc	r25, r1
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	f8 94       	cli
     e50:	9e bf       	out	0x3e, r25	; 62
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	8d bf       	out	0x3d, r24	; 61
     e56:	0d b7       	in	r16, 0x3d	; 61
     e58:	1e b7       	in	r17, 0x3e	; 62
     e5a:	0f 5f       	subi	r16, 0xFF	; 255
     e5c:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t  ReportID     = 0;
     e5e:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
     e60:	1b 82       	std	Y+3, r1	; 0x03
     e62:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
     e64:	c0 2e       	mov	r12, r16
     e66:	91 2e       	mov	r9, r17
     e68:	c8 01       	movw	r24, r16
     e6a:	60 e0       	ldi	r22, 0x00	; 0
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	50 e0       	ldi	r21, 0x00	; 0
     e70:	04 d2       	rcall	.+1032   	; 0x127a <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
     e72:	c7 01       	movw	r24, r14
     e74:	be 01       	movw	r22, r28
     e76:	6f 5f       	subi	r22, 0xFF	; 255
     e78:	7f 4f       	sbci	r23, 0xFF	; 255
     e7a:	40 e0       	ldi	r20, 0x00	; 0
     e7c:	98 01       	movw	r18, r16
     e7e:	8e 01       	movw	r16, r28
     e80:	0e 5f       	subi	r16, 0xFE	; 254
     e82:	1f 4f       	sbci	r17, 0xFF	; 255
     e84:	a9 d9       	rcall	.-3246   	; 0x1d8 <CALLBACK_HID_Device_CreateHIDReport>
     e86:	88 2e       	mov	r8, r24
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
     e88:	f7 01       	movw	r30, r14
     e8a:	81 85       	ldd	r24, Z+9	; 0x09
     e8c:	92 85       	ldd	r25, Z+10	; 0x0a
     e8e:	89 2b       	or	r24, r25
     e90:	19 f4       	brne	.+6      	; 0xe98 <HID_Device_USBTask+0xa0>
     e92:	aa 24       	eor	r10, r10
     e94:	bb 24       	eor	r11, r11
     e96:	0b c0       	rjmp	.+22     	; 0xeae <HID_Device_USBTask+0xb6>
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	f7 01       	movw	r30, r14
     e9c:	83 85       	ldd	r24, Z+11	; 0x0b
     e9e:	94 85       	ldd	r25, Z+12	; 0x0c
     ea0:	89 2b       	or	r24, r25
     ea2:	09 f0       	breq	.+2      	; 0xea6 <HID_Device_USBTask+0xae>
     ea4:	21 e0       	ldi	r18, 0x01	; 1
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	28 27       	eor	r18, r24
     eaa:	a2 2e       	mov	r10, r18
     eac:	bb 24       	eor	r11, r11

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     eae:	f7 01       	movw	r30, r14
     eb0:	05 81       	ldd	r16, Z+5	; 0x05
     eb2:	16 81       	ldd	r17, Z+6	; 0x06
     eb4:	01 15       	cp	r16, r1
     eb6:	11 05       	cpc	r17, r1
     eb8:	11 f4       	brne	.+4      	; 0xebe <HID_Device_USBTask+0xc6>
     eba:	dd 24       	eor	r13, r13
     ebc:	12 c0       	rjmp	.+36     	; 0xee2 <HID_Device_USBTask+0xea>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
     ebe:	4a 81       	ldd	r20, Y+2	; 0x02
     ec0:	5b 81       	ldd	r21, Y+3	; 0x03
     ec2:	8c 2d       	mov	r24, r12
     ec4:	99 2d       	mov	r25, r9
     ec6:	b8 01       	movw	r22, r16
     ec8:	c2 d1       	rcall	.+900    	; 0x124e <memcmp>
     eca:	dd 24       	eor	r13, r13
     ecc:	00 97       	sbiw	r24, 0x00	; 0
     ece:	11 f0       	breq	.+4      	; 0xed4 <HID_Device_USBTask+0xdc>
     ed0:	dd 24       	eor	r13, r13
     ed2:	d3 94       	inc	r13
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
     ed4:	f7 01       	movw	r30, r14
     ed6:	47 81       	ldd	r20, Z+7	; 0x07
     ed8:	c8 01       	movw	r24, r16
     eda:	6c 2d       	mov	r22, r12
     edc:	79 2d       	mov	r23, r9
     ede:	50 e0       	ldi	r21, 0x00	; 0
     ee0:	c3 d1       	rcall	.+902    	; 0x1268 <memcpy>
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	9b 81       	ldd	r25, Y+3	; 0x03
     ee6:	89 2b       	or	r24, r25
     ee8:	f9 f0       	breq	.+62     	; 0xf28 <HID_Device_USBTask+0x130>
     eea:	88 20       	and	r8, r8
     eec:	21 f4       	brne	.+8      	; 0xef6 <HID_Device_USBTask+0xfe>
     eee:	dd 20       	and	r13, r13
     ef0:	11 f4       	brne	.+4      	; 0xef6 <HID_Device_USBTask+0xfe>
     ef2:	ab 28       	or	r10, r11
     ef4:	c9 f0       	breq	.+50     	; 0xf28 <HID_Device_USBTask+0x130>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
     ef6:	f7 01       	movw	r30, r14
     ef8:	81 85       	ldd	r24, Z+9	; 0x09
     efa:	92 85       	ldd	r25, Z+10	; 0x0a
     efc:	94 87       	std	Z+12, r25	; 0x0c
     efe:	83 87       	std	Z+11, r24	; 0x0b

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
     f00:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     f02:	80 93 e9 00 	sts	0x00E9, r24

			if (ReportID)
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	88 23       	and	r24, r24
     f0a:	11 f0       	breq	.+4      	; 0xf10 <HID_Device_USBTask+0x118>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f0c:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
     f10:	6a 81       	ldd	r22, Y+2	; 0x02
     f12:	7b 81       	ldd	r23, Y+3	; 0x03
     f14:	8c 2d       	mov	r24, r12
     f16:	99 2d       	mov	r25, r9
     f18:	40 e0       	ldi	r20, 0x00	; 0
     f1a:	50 e0       	ldi	r21, 0x00	; 0
     f1c:	88 dd       	rcall	.-1264   	; 0xa2e <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f1e:	80 91 e8 00 	lds	r24, 0x00E8
     f22:	8e 77       	andi	r24, 0x7E	; 126
     f24:	80 93 e8 00 	sts	0x00E8, r24
     f28:	85 2d       	mov	r24, r5
     f2a:	94 2d       	mov	r25, r4
     f2c:	9c 01       	movw	r18, r24
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	3e bf       	out	0x3e, r19	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	2d bf       	out	0x3d, r18	; 61

			Endpoint_ClearIN();
		}
	}
}
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	7e be       	out	0x3e, r7	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	6d be       	out	0x3d, r6	; 61
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	1f 91       	pop	r17
     f4e:	0f 91       	pop	r16
     f50:	ff 90       	pop	r15
     f52:	ef 90       	pop	r14
     f54:	df 90       	pop	r13
     f56:	cf 90       	pop	r12
     f58:	bf 90       	pop	r11
     f5a:	af 90       	pop	r10
     f5c:	9f 90       	pop	r9
     f5e:	8f 90       	pop	r8
     f60:	7f 90       	pop	r7
     f62:	6f 90       	pop	r6
     f64:	5f 90       	pop	r5
     f66:	4f 90       	pop	r4
     f68:	08 95       	ret

00000f6a <HID_Device_ConfigureEndpoints>:
			break;
	}
}

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
     f6e:	dc 01       	movw	r26, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
     f70:	08 96       	adiw	r24, 0x08	; 8
     f72:	fc 01       	movw	r30, r24
     f74:	85 e0       	ldi	r24, 0x05	; 5
     f76:	ef 01       	movw	r28, r30
     f78:	19 92       	st	Y+, r1
     f7a:	8a 95       	dec	r24
     f7c:	e9 f7       	brne	.-6      	; 0xf78 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	18 96       	adiw	r26, 0x08	; 8
     f82:	8c 93       	st	X, r24
     f84:	18 97       	sbiw	r26, 0x08	; 8
	HIDInterfaceInfo->State.IdleCount           = 500;
     f86:	84 ef       	ldi	r24, 0xF4	; 244
     f88:	91 e0       	ldi	r25, 0x01	; 1
     f8a:	1a 96       	adiw	r26, 0x0a	; 10
     f8c:	9c 93       	st	X, r25
     f8e:	8e 93       	st	-X, r24
     f90:	19 97       	sbiw	r26, 0x09	; 9

	if (!(Endpoint_ConfigureEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber, EP_TYPE_INTERRUPT,
     f92:	11 96       	adiw	r26, 0x01	; 1
     f94:	3c 91       	ld	r19, X
     f96:	11 97       	sbiw	r26, 0x01	; 1
     f98:	12 96       	adiw	r26, 0x02	; 2
     f9a:	6d 91       	ld	r22, X+
     f9c:	7c 91       	ld	r23, X
     f9e:	13 97       	sbiw	r26, 0x03	; 3
     fa0:	14 96       	adiw	r26, 0x04	; 4
     fa2:	8c 91       	ld	r24, X
     fa4:	88 23       	and	r24, r24
     fa6:	11 f4       	brne	.+4      	; 0xfac <HID_Device_ConfigureEndpoints+0x42>
     fa8:	40 e0       	ldi	r20, 0x00	; 0
     faa:	01 c0       	rjmp	.+2      	; 0xfae <HID_Device_ConfigureEndpoints+0x44>
     fac:	44 e0       	ldi	r20, 0x04	; 4
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	88 e0       	ldi	r24, 0x08	; 8
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	03 c0       	rjmp	.+6      	; 0xfbc <HID_Device_ConfigureEndpoints+0x52>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     fb6:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     fbc:	86 17       	cp	r24, r22
     fbe:	97 07       	cpc	r25, r23
     fc0:	d0 f3       	brcs	.-12     	; 0xfb6 <HID_Device_ConfigureEndpoints+0x4c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     fc2:	42 60       	ori	r20, 0x02	; 2
     fc4:	22 95       	swap	r18
     fc6:	20 7f       	andi	r18, 0xF0	; 240
     fc8:	42 2b       	or	r20, r18
     fca:	83 2f       	mov	r24, r19
     fcc:	61 ec       	ldi	r22, 0xC1	; 193
     fce:	b0 da       	rcall	.-2720   	; 0x530 <Endpoint_ConfigureEndpoint_Prv>
     fd0:	81 11       	cpse	r24, r1
     fd2:	81 e0       	ldi	r24, 0x01	; 1
	{
		return false;
	}

	return true;
}
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	08 95       	ret

00000fda <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     fda:	6f 92       	push	r6
     fdc:	7f 92       	push	r7
     fde:	8f 92       	push	r8
     fe0:	9f 92       	push	r9
     fe2:	af 92       	push	r10
     fe4:	bf 92       	push	r11
     fe6:	cf 92       	push	r12
     fe8:	df 92       	push	r13
     fea:	ef 92       	push	r14
     fec:	ff 92       	push	r15
     fee:	0f 93       	push	r16
     ff0:	1f 93       	push	r17
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	00 d0       	rcall	.+0      	; 0xff8 <HID_Device_ProcessControlRequest+0x1e>
     ff8:	0f 92       	push	r0
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
     ffe:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    1000:	6d b6       	in	r6, 0x3d	; 61
    1002:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1004:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    1008:	83 ff       	sbrs	r24, 3
    100a:	0a c1       	rjmp	.+532    	; 0x1220 <HID_Device_ProcessControlRequest+0x246>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    100c:	f6 01       	movw	r30, r12
    100e:	80 81       	ld	r24, Z
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	20 91 3f 0d 	lds	r18, 0x0D3F
    1016:	30 91 40 0d 	lds	r19, 0x0D40
    101a:	28 17       	cp	r18, r24
    101c:	39 07       	cpc	r19, r25
    101e:	09 f0       	breq	.+2      	; 0x1022 <HID_Device_ProcessControlRequest+0x48>
    1020:	ff c0       	rjmp	.+510    	; 0x1220 <HID_Device_ProcessControlRequest+0x246>
	  return;

	switch (USB_ControlRequest.bRequest)
    1022:	80 91 3c 0d 	lds	r24, 0x0D3C
    1026:	83 30       	cpi	r24, 0x03	; 3
    1028:	09 f4       	brne	.+2      	; 0x102c <HID_Device_ProcessControlRequest+0x52>
    102a:	aa c0       	rjmp	.+340    	; 0x1180 <HID_Device_ProcessControlRequest+0x1a6>
    102c:	84 30       	cpi	r24, 0x04	; 4
    102e:	30 f4       	brcc	.+12     	; 0x103c <HID_Device_ProcessControlRequest+0x62>
    1030:	81 30       	cpi	r24, 0x01	; 1
    1032:	71 f0       	breq	.+28     	; 0x1050 <HID_Device_ProcessControlRequest+0x76>
    1034:	82 30       	cpi	r24, 0x02	; 2
    1036:	09 f0       	breq	.+2      	; 0x103a <HID_Device_ProcessControlRequest+0x60>
    1038:	f3 c0       	rjmp	.+486    	; 0x1220 <HID_Device_ProcessControlRequest+0x246>
    103a:	da c0       	rjmp	.+436    	; 0x11f0 <HID_Device_ProcessControlRequest+0x216>
    103c:	8a 30       	cpi	r24, 0x0A	; 10
    103e:	09 f4       	brne	.+2      	; 0x1042 <HID_Device_ProcessControlRequest+0x68>
    1040:	bf c0       	rjmp	.+382    	; 0x11c0 <HID_Device_ProcessControlRequest+0x1e6>
    1042:	8b 30       	cpi	r24, 0x0B	; 11
    1044:	09 f4       	brne	.+2      	; 0x1048 <HID_Device_ProcessControlRequest+0x6e>
    1046:	a9 c0       	rjmp	.+338    	; 0x119a <HID_Device_ProcessControlRequest+0x1c0>
    1048:	89 30       	cpi	r24, 0x09	; 9
    104a:	09 f0       	breq	.+2      	; 0x104e <HID_Device_ProcessControlRequest+0x74>
    104c:	e9 c0       	rjmp	.+466    	; 0x1220 <HID_Device_ProcessControlRequest+0x246>
    104e:	55 c0       	rjmp	.+170    	; 0x10fa <HID_Device_ProcessControlRequest+0x120>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1050:	80 91 3b 0d 	lds	r24, 0x0D3B
    1054:	81 3a       	cpi	r24, 0xA1	; 161
    1056:	09 f0       	breq	.+2      	; 0x105a <HID_Device_ProcessControlRequest+0x80>
    1058:	e3 c0       	rjmp	.+454    	; 0x1220 <HID_Device_ProcessControlRequest+0x246>
    105a:	9d b6       	in	r9, 0x3d	; 61
    105c:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    105e:	1b 82       	std	Y+3, r1	; 0x03
    1060:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1062:	80 91 3d 0d 	lds	r24, 0x0D3D
    1066:	10 91 3e 0d 	lds	r17, 0x0D3E
    106a:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    106c:	f6 01       	movw	r30, r12
    106e:	47 81       	ldd	r20, Z+7	; 0x07
    1070:	8d b7       	in	r24, 0x3d	; 61
    1072:	9e b7       	in	r25, 0x3e	; 62
    1074:	84 1b       	sub	r24, r20
    1076:	91 09       	sbc	r25, r1
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	f8 94       	cli
    107c:	9e bf       	out	0x3e, r25	; 62
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	8d bf       	out	0x3d, r24	; 61
    1082:	ed b6       	in	r14, 0x3d	; 61
    1084:	fe b6       	in	r15, 0x3e	; 62
    1086:	08 94       	sec
    1088:	e1 1c       	adc	r14, r1
    108a:	f1 1c       	adc	r15, r1

				memset(ReportData, 0, sizeof(ReportData));
    108c:	be 2c       	mov	r11, r14
    108e:	af 2c       	mov	r10, r15
    1090:	c7 01       	movw	r24, r14
    1092:	60 e0       	ldi	r22, 0x00	; 0
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	50 e0       	ldi	r21, 0x00	; 0
    1098:	f0 d0       	rcall	.+480    	; 0x127a <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    109a:	11 50       	subi	r17, 0x01	; 1
    109c:	c6 01       	movw	r24, r12
    109e:	be 01       	movw	r22, r28
    10a0:	6f 5f       	subi	r22, 0xFF	; 255
    10a2:	7f 4f       	sbci	r23, 0xFF	; 255
    10a4:	41 2f       	mov	r20, r17
    10a6:	97 01       	movw	r18, r14
    10a8:	8e 01       	movw	r16, r28
    10aa:	0e 5f       	subi	r16, 0xFE	; 254
    10ac:	1f 4f       	sbci	r17, 0xFF	; 255
    10ae:	94 d8       	rcall	.-3800   	; 0x1d8 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    10b0:	f6 01       	movw	r30, r12
    10b2:	25 81       	ldd	r18, Z+5	; 0x05
    10b4:	36 81       	ldd	r19, Z+6	; 0x06
    10b6:	21 15       	cp	r18, r1
    10b8:	31 05       	cpc	r19, r1
    10ba:	29 f0       	breq	.+10     	; 0x10c6 <HID_Device_ProcessControlRequest+0xec>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    10bc:	47 81       	ldd	r20, Z+7	; 0x07
    10be:	c9 01       	movw	r24, r18
    10c0:	b7 01       	movw	r22, r14
    10c2:	50 e0       	ldi	r21, 0x00	; 0
    10c4:	d1 d0       	rcall	.+418    	; 0x1268 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    10c6:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10ca:	80 91 e8 00 	lds	r24, 0x00E8
    10ce:	87 7f       	andi	r24, 0xF7	; 247
    10d0:	80 93 e8 00 	sts	0x00E8, r24
				}
				
				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    10d4:	6a 81       	ldd	r22, Y+2	; 0x02
    10d6:	7b 81       	ldd	r23, Y+3	; 0x03
    10d8:	8b 2d       	mov	r24, r11
    10da:	9a 2d       	mov	r25, r10
    10dc:	ae db       	rcall	.-2212   	; 0x83a <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    10de:	80 91 e8 00 	lds	r24, 0x00E8
    10e2:	8b 77       	andi	r24, 0x7B	; 123
    10e4:	80 93 e8 00 	sts	0x00E8, r24
    10e8:	29 2d       	mov	r18, r9
    10ea:	38 2d       	mov	r19, r8
    10ec:	c9 01       	movw	r24, r18
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	9e bf       	out	0x3e, r25	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	8d bf       	out	0x3d, r24	; 61
    10f8:	93 c0       	rjmp	.+294    	; 0x1220 <HID_Device_ProcessControlRequest+0x246>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    10fa:	80 91 3b 0d 	lds	r24, 0x0D3B
    10fe:	81 32       	cpi	r24, 0x21	; 33
    1100:	09 f0       	breq	.+2      	; 0x1104 <HID_Device_ProcessControlRequest+0x12a>
    1102:	8e c0       	rjmp	.+284    	; 0x1220 <HID_Device_ProcessControlRequest+0x246>
    1104:	9d b6       	in	r9, 0x3d	; 61
    1106:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    1108:	00 91 41 0d 	lds	r16, 0x0D41
    110c:	10 91 42 0d 	lds	r17, 0x0D42
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1110:	a0 90 3d 0d 	lds	r10, 0x0D3D
    1114:	b0 90 3e 0d 	lds	r11, 0x0D3E
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    1118:	8d b7       	in	r24, 0x3d	; 61
    111a:	9e b7       	in	r25, 0x3e	; 62
    111c:	80 1b       	sub	r24, r16
    111e:	91 0b       	sbc	r25, r17
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	f8 94       	cli
    1124:	9e bf       	out	0x3e, r25	; 62
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	8d bf       	out	0x3d, r24	; 61
    112a:	ed b6       	in	r14, 0x3d	; 61
    112c:	fe b6       	in	r15, 0x3e	; 62
    112e:	08 94       	sec
    1130:	e1 1c       	adc	r14, r1
    1132:	f1 1c       	adc	r15, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1134:	80 91 e8 00 	lds	r24, 0x00E8
    1138:	87 7f       	andi	r24, 0xF7	; 247
    113a:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    113e:	c7 01       	movw	r24, r14
    1140:	b8 01       	movw	r22, r16
    1142:	d7 db       	rcall	.-2130   	; 0x8f2 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1144:	80 91 e8 00 	lds	r24, 0x00E8
    1148:	8e 77       	andi	r24, 0x7E	; 126
    114a:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	aa 20       	and	r10, r10
    1154:	11 f0       	breq	.+4      	; 0x115a <HID_Device_ProcessControlRequest+0x180>
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	ba 94       	dec	r11
    115c:	e8 0e       	add	r14, r24
    115e:	f9 1e       	adc	r15, r25
    1160:	08 1b       	sub	r16, r24
    1162:	19 0b       	sbc	r17, r25
    1164:	c6 01       	movw	r24, r12
    1166:	6a 2d       	mov	r22, r10
    1168:	4b 2d       	mov	r20, r11
    116a:	97 01       	movw	r18, r14
    116c:	34 d8       	rcall	.-3992   	; 0x1d6 <CALLBACK_HID_Device_ProcessHIDReport>
    116e:	89 2d       	mov	r24, r9
    1170:	98 2d       	mov	r25, r8
    1172:	9c 01       	movw	r18, r24
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	f8 94       	cli
    1178:	3e bf       	out	0x3e, r19	; 62
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	2d bf       	out	0x3d, r18	; 61
    117e:	50 c0       	rjmp	.+160    	; 0x1220 <HID_Device_ProcessControlRequest+0x246>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1180:	80 91 3b 0d 	lds	r24, 0x0D3B
    1184:	81 3a       	cpi	r24, 0xA1	; 161
    1186:	09 f0       	breq	.+2      	; 0x118a <HID_Device_ProcessControlRequest+0x1b0>
    1188:	4b c0       	rjmp	.+150    	; 0x1220 <HID_Device_ProcessControlRequest+0x246>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    118a:	80 91 e8 00 	lds	r24, 0x00E8
    118e:	87 7f       	andi	r24, 0xF7	; 247
    1190:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    1194:	f6 01       	movw	r30, r12
    1196:	80 85       	ldd	r24, Z+8	; 0x08
    1198:	3b c0       	rjmp	.+118    	; 0x1210 <HID_Device_ProcessControlRequest+0x236>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    119a:	80 91 3b 0d 	lds	r24, 0x0D3B
    119e:	81 32       	cpi	r24, 0x21	; 33
    11a0:	09 f0       	breq	.+2      	; 0x11a4 <HID_Device_ProcessControlRequest+0x1ca>
    11a2:	3e c0       	rjmp	.+124    	; 0x1220 <HID_Device_ProcessControlRequest+0x246>
    11a4:	80 91 e8 00 	lds	r24, 0x00E8
    11a8:	87 7f       	andi	r24, 0xF7	; 247
    11aa:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    11ae:	d3 d9       	rcall	.-3162   	; 0x556 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	80 91 3d 0d 	lds	r24, 0x0D3D
    11b6:	81 11       	cpse	r24, r1
    11b8:	91 e0       	ldi	r25, 0x01	; 1
    11ba:	f6 01       	movw	r30, r12
    11bc:	90 87       	std	Z+8, r25	; 0x08
    11be:	30 c0       	rjmp	.+96     	; 0x1220 <HID_Device_ProcessControlRequest+0x246>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    11c0:	80 91 3b 0d 	lds	r24, 0x0D3B
    11c4:	81 32       	cpi	r24, 0x21	; 33
    11c6:	61 f5       	brne	.+88     	; 0x1220 <HID_Device_ProcessControlRequest+0x246>
    11c8:	80 91 e8 00 	lds	r24, 0x00E8
    11cc:	87 7f       	andi	r24, 0xF7	; 247
    11ce:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    11d2:	c1 d9       	rcall	.-3198   	; 0x556 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    11d4:	80 91 3d 0d 	lds	r24, 0x0D3D
    11d8:	90 91 3e 0d 	lds	r25, 0x0D3E
    11dc:	80 70       	andi	r24, 0x00	; 0
    11de:	76 e0       	ldi	r23, 0x06	; 6
    11e0:	96 95       	lsr	r25
    11e2:	87 95       	ror	r24
    11e4:	7a 95       	dec	r23
    11e6:	e1 f7       	brne	.-8      	; 0x11e0 <HID_Device_ProcessControlRequest+0x206>
    11e8:	f6 01       	movw	r30, r12
    11ea:	92 87       	std	Z+10, r25	; 0x0a
    11ec:	81 87       	std	Z+9, r24	; 0x09
    11ee:	18 c0       	rjmp	.+48     	; 0x1220 <HID_Device_ProcessControlRequest+0x246>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    11f0:	80 91 3b 0d 	lds	r24, 0x0D3B
    11f4:	81 3a       	cpi	r24, 0xA1	; 161
    11f6:	a1 f4       	brne	.+40     	; 0x1220 <HID_Device_ProcessControlRequest+0x246>
    11f8:	80 91 e8 00 	lds	r24, 0x00E8
    11fc:	87 7f       	andi	r24, 0xF7	; 247
    11fe:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    1202:	f6 01       	movw	r30, r12
    1204:	81 85       	ldd	r24, Z+9	; 0x09
    1206:	92 85       	ldd	r25, Z+10	; 0x0a
    1208:	96 95       	lsr	r25
    120a:	87 95       	ror	r24
    120c:	96 95       	lsr	r25
    120e:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1210:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1214:	80 91 e8 00 	lds	r24, 0x00E8
    1218:	8e 77       	andi	r24, 0x7E	; 126
    121a:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    121e:	9b d9       	rcall	.-3274   	; 0x556 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    1220:	0f b6       	in	r0, 0x3f	; 63
    1222:	f8 94       	cli
    1224:	7e be       	out	0x3e, r7	; 62
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	6d be       	out	0x3d, r6	; 61
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	cf 91       	pop	r28
    1232:	df 91       	pop	r29
    1234:	1f 91       	pop	r17
    1236:	0f 91       	pop	r16
    1238:	ff 90       	pop	r15
    123a:	ef 90       	pop	r14
    123c:	df 90       	pop	r13
    123e:	cf 90       	pop	r12
    1240:	bf 90       	pop	r11
    1242:	af 90       	pop	r10
    1244:	9f 90       	pop	r9
    1246:	8f 90       	pop	r8
    1248:	7f 90       	pop	r7
    124a:	6f 90       	pop	r6
    124c:	08 95       	ret

0000124e <memcmp>:
    124e:	fb 01       	movw	r30, r22
    1250:	dc 01       	movw	r26, r24
    1252:	04 c0       	rjmp	.+8      	; 0x125c <memcmp+0xe>
    1254:	8d 91       	ld	r24, X+
    1256:	01 90       	ld	r0, Z+
    1258:	80 19       	sub	r24, r0
    125a:	21 f4       	brne	.+8      	; 0x1264 <memcmp+0x16>
    125c:	41 50       	subi	r20, 0x01	; 1
    125e:	50 40       	sbci	r21, 0x00	; 0
    1260:	c8 f7       	brcc	.-14     	; 0x1254 <memcmp+0x6>
    1262:	88 1b       	sub	r24, r24
    1264:	99 0b       	sbc	r25, r25
    1266:	08 95       	ret

00001268 <memcpy>:
    1268:	fb 01       	movw	r30, r22
    126a:	dc 01       	movw	r26, r24
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <memcpy+0xa>
    126e:	01 90       	ld	r0, Z+
    1270:	0d 92       	st	X+, r0
    1272:	41 50       	subi	r20, 0x01	; 1
    1274:	50 40       	sbci	r21, 0x00	; 0
    1276:	d8 f7       	brcc	.-10     	; 0x126e <memcpy+0x6>
    1278:	08 95       	ret

0000127a <memset>:
    127a:	dc 01       	movw	r26, r24
    127c:	01 c0       	rjmp	.+2      	; 0x1280 <memset+0x6>
    127e:	6d 93       	st	X+, r22
    1280:	41 50       	subi	r20, 0x01	; 1
    1282:	50 40       	sbci	r21, 0x00	; 0
    1284:	e0 f7       	brcc	.-8      	; 0x127e <memset+0x4>
    1286:	08 95       	ret

00001288 <_exit>:
    1288:	f8 94       	cli

0000128a <__stop_program>:
    128a:	ff cf       	rjmp	.-2      	; 0x128a <__stop_program>
