
MediaController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00001138  000011cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001138  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080010e  0080010e  000011da  2**0
                  ALLOC
  3 .stab         00000b1c  00000000  00000000  000011dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00001cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000480  00000000  00000000  00001e67  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000cdc  00000000  00000000  000022e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007ef0  00000000  00000000  00002fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001fb1  00000000  00000000  0000aeb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005feb  00000000  00000000  0000ce64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006c0  00000000  00000000  00012e50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003338  00000000  00000000  00013510  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000034e1  00000000  00000000  00016848  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000570  00000000  00000000  00019d29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       0:	a1 c0       	rjmp	.+322    	; 0x144 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       4:	bc c0       	rjmp	.+376    	; 0x17e <__bad_interrupt>
       6:	00 00       	nop
       8:	ba c0       	rjmp	.+372    	; 0x17e <__bad_interrupt>
       a:	00 00       	nop
       c:	b8 c0       	rjmp	.+368    	; 0x17e <__bad_interrupt>
       e:	00 00       	nop
      10:	b6 c0       	rjmp	.+364    	; 0x17e <__bad_interrupt>
      12:	00 00       	nop
      14:	b4 c0       	rjmp	.+360    	; 0x17e <__bad_interrupt>
      16:	00 00       	nop
      18:	b2 c0       	rjmp	.+356    	; 0x17e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b0 c0       	rjmp	.+352    	; 0x17e <__bad_interrupt>
      1e:	00 00       	nop
      20:	ae c0       	rjmp	.+348    	; 0x17e <__bad_interrupt>
      22:	00 00       	nop
      24:	ac c0       	rjmp	.+344    	; 0x17e <__bad_interrupt>
      26:	00 00       	nop
      28:	8c c2       	rjmp	.+1304   	; 0x542 <__vector_10>
      2a:	00 00       	nop
      2c:	a8 c0       	rjmp	.+336    	; 0x17e <__bad_interrupt>
      2e:	00 00       	nop
      30:	a6 c0       	rjmp	.+332    	; 0x17e <__bad_interrupt>
      32:	00 00       	nop
      34:	a4 c0       	rjmp	.+328    	; 0x17e <__bad_interrupt>
      36:	00 00       	nop
      38:	a2 c0       	rjmp	.+324    	; 0x17e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a0 c0       	rjmp	.+320    	; 0x17e <__bad_interrupt>
      3e:	00 00       	nop
      40:	9e c0       	rjmp	.+316    	; 0x17e <__bad_interrupt>
      42:	00 00       	nop
      44:	9c c0       	rjmp	.+312    	; 0x17e <__bad_interrupt>
      46:	00 00       	nop
      48:	9a c0       	rjmp	.+308    	; 0x17e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	98 c0       	rjmp	.+304    	; 0x17e <__bad_interrupt>
      4e:	00 00       	nop
      50:	96 c0       	rjmp	.+300    	; 0x17e <__bad_interrupt>
      52:	00 00       	nop
      54:	94 c0       	rjmp	.+296    	; 0x17e <__bad_interrupt>
      56:	00 00       	nop
      58:	92 c0       	rjmp	.+292    	; 0x17e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	90 c0       	rjmp	.+288    	; 0x17e <__bad_interrupt>
      5e:	00 00       	nop
      60:	8e c0       	rjmp	.+284    	; 0x17e <__bad_interrupt>
      62:	00 00       	nop
      64:	8c c0       	rjmp	.+280    	; 0x17e <__bad_interrupt>
      66:	00 00       	nop
      68:	8a c0       	rjmp	.+276    	; 0x17e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	88 c0       	rjmp	.+272    	; 0x17e <__bad_interrupt>
      6e:	00 00       	nop
      70:	86 c0       	rjmp	.+268    	; 0x17e <__bad_interrupt>
      72:	00 00       	nop
      74:	84 c0       	rjmp	.+264    	; 0x17e <__bad_interrupt>
      76:	00 00       	nop
      78:	82 c0       	rjmp	.+260    	; 0x17e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	80 c0       	rjmp	.+256    	; 0x17e <__bad_interrupt>
      7e:	00 00       	nop
      80:	7e c0       	rjmp	.+252    	; 0x17e <__bad_interrupt>
      82:	00 00       	nop
      84:	7c c0       	rjmp	.+248    	; 0x17e <__bad_interrupt>
      86:	00 00       	nop
      88:	7a c0       	rjmp	.+244    	; 0x17e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	78 c0       	rjmp	.+240    	; 0x17e <__bad_interrupt>
      8e:	00 00       	nop
      90:	76 c0       	rjmp	.+236    	; 0x17e <__bad_interrupt>
      92:	00 00       	nop
      94:	74 c0       	rjmp	.+232    	; 0x17e <__bad_interrupt>
      96:	00 00       	nop

00000098 <MediaControlReport>:
      98:	05 0c 09 01 a1 01 09 b0 09 b1 09 b3 09 b4 09 b5     ................
      a8:	09 b6 09 b7 09 cd 09 e2 09 e9 09 ea 75 01 95 0b     ............u...
      b8:	15 00 25 01 81 06 95 05 81 01 c0                    ..%........

000000c3 <DeviceDescriptor>:
      c3:	12 01 10 01 00 00 00 08 eb 03 6a 20 01 00 01 02     ..........j ....
      d3:	00 01                                               ..

000000d5 <ConfigurationDescriptor>:
      d5:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
      e5:	00 00 09 21 11 01 00 01 22 2b 00 07 05 81 03 08     ...!...."+......
      f5:	00 01                                               ..

000000f7 <LanguageString>:
      f7:	04 03 09 04                                         ....

000000fb <ManufacturerString>:
      fb:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     10b:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000115 <ProductString>:
     115:	2c 03 4c 00 55 00 46 00 41 00 20 00 4d 00 65 00     ,.L.U.F.A. .M.e.
     125:	64 00 69 00 61 00 20 00 43 00 6f 00 6e 00 74 00     d.i.a. .C.o.n.t.
     135:	72 00 6f 00 6c 00 6c 00 65 00 72 00 00 00 00        r.o.l.l.e.r....

00000144 <__ctors_end>:
     144:	11 24       	eor	r1, r1
     146:	1f be       	out	0x3f, r1	; 63
     148:	cf ef       	ldi	r28, 0xFF	; 255
     14a:	d0 e2       	ldi	r29, 0x20	; 32
     14c:	de bf       	out	0x3e, r29	; 62
     14e:	cd bf       	out	0x3d, r28	; 61

00000150 <__do_copy_data>:
     150:	11 e0       	ldi	r17, 0x01	; 1
     152:	a0 e0       	ldi	r26, 0x00	; 0
     154:	b1 e0       	ldi	r27, 0x01	; 1
     156:	e8 e3       	ldi	r30, 0x38	; 56
     158:	f1 e1       	ldi	r31, 0x11	; 17
     15a:	00 e0       	ldi	r16, 0x00	; 0
     15c:	0b bf       	out	0x3b, r16	; 59
     15e:	02 c0       	rjmp	.+4      	; 0x164 <__do_copy_data+0x14>
     160:	07 90       	elpm	r0, Z+
     162:	0d 92       	st	X+, r0
     164:	ae 30       	cpi	r26, 0x0E	; 14
     166:	b1 07       	cpc	r27, r17
     168:	d9 f7       	brne	.-10     	; 0x160 <__do_copy_data+0x10>

0000016a <__do_clear_bss>:
     16a:	11 e0       	ldi	r17, 0x01	; 1
     16c:	ae e0       	ldi	r26, 0x0E	; 14
     16e:	b1 e0       	ldi	r27, 0x01	; 1
     170:	01 c0       	rjmp	.+2      	; 0x174 <.do_clear_bss_start>

00000172 <.do_clear_bss_loop>:
     172:	1d 92       	st	X+, r1

00000174 <.do_clear_bss_start>:
     174:	ad 31       	cpi	r26, 0x1D	; 29
     176:	b1 07       	cpc	r27, r17
     178:	e1 f7       	brne	.-8      	; 0x172 <.do_clear_bss_loop>
     17a:	b0 d0       	rcall	.+352    	; 0x2dc <main>
     17c:	db c7       	rjmp	.+4022   	; 0x1134 <_exit>

0000017e <__bad_interrupt>:
     17e:	40 cf       	rjmp	.-384    	; 0x0 <__vectors>

00000180 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     180:	8b b1       	in	r24, 0x0b	; 11
     182:	8f 70       	andi	r24, 0x0F	; 15
     184:	80 6a       	ori	r24, 0xA0	; 160
     186:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     188:	08 95       	ret

0000018a <EVENT_USB_Device_Disconnect>:
     18a:	8b b1       	in	r24, 0x0b	; 11
     18c:	8f 70       	andi	r24, 0x0F	; 15
     18e:	80 61       	ori	r24, 0x10	; 16
     190:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     192:	08 95       	ret

00000194 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     194:	80 91 0b 01 	lds	r24, 0x010B
     198:	90 91 0c 01 	lds	r25, 0x010C
     19c:	00 97       	sbiw	r24, 0x00	; 0
     19e:	29 f0       	breq	.+10     	; 0x1aa <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     1a0:	01 97       	sbiw	r24, 0x01	; 1
     1a2:	90 93 0c 01 	sts	0x010C, r25
     1a6:	80 93 0b 01 	sts	0x010B, r24
     1aa:	08 95       	ret

000001ac <CALLBACK_HID_Device_CreateHIDReport>:
 *
 *  \return Boolean true to force the sending of the report, false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo, uint8_t* const ReportID,
                                         const uint8_t ReportType, void* ReportData, uint16_t* const ReportSize)
{
     1ac:	0f 93       	push	r16
     1ae:	1f 93       	push	r17
	USB_MediaReport_Data_t* MediaReport = (USB_MediaReport_Data_t*)ReportData;
     1b0:	f9 01       	movw	r30, r18
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     1b2:	63 b1       	in	r22, 0x03	; 3
     1b4:	8c b1       	in	r24, 0x0c	; 12
     1b6:	80 95       	com	r24
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	80 73       	andi	r24, 0x30	; 48
     1bc:	90 70       	andi	r25, 0x00	; 0
     1be:	95 95       	asr	r25
     1c0:	87 95       	ror	r24
     1c2:	60 95       	com	r22
     1c4:	60 7e       	andi	r22, 0xE0	; 224
     1c6:	68 2b       	or	r22, r24
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     1c8:	8c b1       	in	r24, 0x0c	; 12

	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	/* Update the Media Control report with the user button presses */
	MediaReport->Mute          = ((ButtonStatus_LCL & BUTTONS_BUTTON1) ? true : false);
     1ca:	80 95       	com	r24
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	84 70       	andi	r24, 0x04	; 4
     1d0:	90 70       	andi	r25, 0x00	; 0
     1d2:	96 95       	lsr	r25
     1d4:	87 95       	ror	r24
     1d6:	96 95       	lsr	r25
     1d8:	87 95       	ror	r24
     1da:	81 70       	andi	r24, 0x01	; 1
     1dc:	41 81       	ldd	r20, Z+1	; 0x01
     1de:	4c 7f       	andi	r20, 0xFC	; 252
	MediaReport->PlayPause     = ((JoyStatus_LCL & JOY_PRESS) ? true : false);
     1e0:	26 2f       	mov	r18, r22
     1e2:	30 e0       	ldi	r19, 0x00	; 0
     1e4:	d9 01       	movw	r26, r18
     1e6:	75 e0       	ldi	r23, 0x05	; 5
     1e8:	b6 95       	lsr	r27
     1ea:	a7 95       	ror	r26
     1ec:	7a 95       	dec	r23
     1ee:	e1 f7       	brne	.-8      	; 0x1e8 <CALLBACK_HID_Device_CreateHIDReport+0x3c>
     1f0:	a7 95       	ror	r26
     1f2:	aa 27       	eor	r26, r26
     1f4:	a7 95       	ror	r26
     1f6:	50 81       	ld	r21, Z
     1f8:	5f 75       	andi	r21, 0x5F	; 95
	MediaReport->VolumeUp      = ((JoyStatus_LCL & JOY_UP)    ? true : false);
     1fa:	66 1f       	adc	r22, r22
     1fc:	66 27       	eor	r22, r22
     1fe:	66 1f       	adc	r22, r22
     200:	66 0f       	add	r22, r22
     202:	48 2b       	or	r20, r24
     204:	46 2b       	or	r20, r22
	MediaReport->VolumeDown    = ((JoyStatus_LCL & JOY_DOWN)  ? true : false);
     206:	c9 01       	movw	r24, r18
     208:	64 e0       	ldi	r22, 0x04	; 4
     20a:	96 95       	lsr	r25
     20c:	87 95       	ror	r24
     20e:	6a 95       	dec	r22
     210:	e1 f7       	brne	.-8      	; 0x20a <CALLBACK_HID_Device_CreateHIDReport+0x5e>
     212:	81 70       	andi	r24, 0x01	; 1
     214:	88 0f       	add	r24, r24
     216:	88 0f       	add	r24, r24
     218:	4b 7f       	andi	r20, 0xFB	; 251
     21a:	48 2b       	or	r20, r24
     21c:	41 83       	std	Z+1, r20	; 0x01
	MediaReport->PreviousTrack = ((JoyStatus_LCL & JOY_LEFT)  ? true : false);
     21e:	c9 01       	movw	r24, r18
     220:	46 e0       	ldi	r20, 0x06	; 6
     222:	96 95       	lsr	r25
     224:	87 95       	ror	r24
     226:	4a 95       	dec	r20
     228:	e1 f7       	brne	.-8      	; 0x222 <CALLBACK_HID_Device_CreateHIDReport+0x76>
     22a:	81 70       	andi	r24, 0x01	; 1
     22c:	82 95       	swap	r24
     22e:	88 0f       	add	r24, r24
     230:	80 7e       	andi	r24, 0xE0	; 224
     232:	5a 2b       	or	r21, r26
     234:	58 2b       	or	r21, r24
	MediaReport->NextTrack     = ((JoyStatus_LCL & JOY_RIGHT) ? true : false);
     236:	83 e0       	ldi	r24, 0x03	; 3
     238:	36 95       	lsr	r19
     23a:	27 95       	ror	r18
     23c:	8a 95       	dec	r24
     23e:	e1 f7       	brne	.-8      	; 0x238 <CALLBACK_HID_Device_CreateHIDReport+0x8c>
     240:	21 70       	andi	r18, 0x01	; 1
     242:	22 95       	swap	r18
     244:	20 7f       	andi	r18, 0xF0	; 240
     246:	5f 7e       	andi	r21, 0xEF	; 239
     248:	52 2b       	or	r21, r18
     24a:	50 83       	st	Z, r21

	*ReportSize = sizeof(USB_MediaReport_Data_t);
     24c:	82 e0       	ldi	r24, 0x02	; 2
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	f8 01       	movw	r30, r16
     252:	91 83       	std	Z+1, r25	; 0x01
     254:	80 83       	st	Z, r24
	return false;
}
     256:	80 e0       	ldi	r24, 0x00	; 0
     258:	1f 91       	pop	r17
     25a:	0f 91       	pop	r16
     25c:	08 95       	ret

0000025e <CALLBACK_HID_Device_ProcessHIDReport>:
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
	// Unused (but mandatory for the HID class driver) in this demo, since there are no Host->Device reports
}
     25e:	08 95       	ret

00000260 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&MediaControl_HID_Interface);
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	91 e0       	ldi	r25, 0x01	; 1
}
     264:	10 c6       	rjmp	.+3104   	; 0xe86 <HID_Device_ProcessControlRequest>

00000266 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&MediaControl_HID_Interface);
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	91 e0       	ldi	r25, 0x01	; 1
     26a:	d5 d5       	rcall	.+2986   	; 0xe16 <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     26c:	90 91 e2 00 	lds	r25, 0x00E2
     270:	94 60       	ori	r25, 0x04	; 4
     272:	90 93 e2 00 	sts	0x00E2, r25

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     276:	80 fd       	sbrc	r24, 0
     278:	02 c0       	rjmp	.+4      	; 0x27e <EVENT_USB_Device_ConfigurationChanged+0x18>
     27a:	90 e9       	ldi	r25, 0x90	; 144
     27c:	01 c0       	rjmp	.+2      	; 0x280 <EVENT_USB_Device_ConfigurationChanged+0x1a>
     27e:	90 e6       	ldi	r25, 0x60	; 96
     280:	8b b1       	in	r24, 0x0b	; 11
     282:	8f 70       	andi	r24, 0x0F	; 15
     284:	98 2b       	or	r25, r24
     286:	9b b9       	out	0x0b, r25	; 11
}
     288:	08 95       	ret

0000028a <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware()
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     28a:	84 b7       	in	r24, 0x34	; 52
     28c:	87 7f       	andi	r24, 0xF7	; 247
     28e:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     290:	88 e1       	ldi	r24, 0x18	; 24
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	f8 94       	cli
     296:	80 93 60 00 	sts	0x0060, r24
     29a:	10 92 60 00 	sts	0x0060, r1
     29e:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	80 e8       	ldi	r24, 0x80	; 128
     2a4:	0f b6       	in	r0, 0x3f	; 63
     2a6:	f8 94       	cli
     2a8:	80 93 61 00 	sts	0x0061, r24
     2ac:	90 93 61 00 	sts	0x0061, r25
     2b0:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
     2b2:	84 b1       	in	r24, 0x04	; 4
     2b4:	8f 71       	andi	r24, 0x1F	; 31
     2b6:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
     2b8:	8d b1       	in	r24, 0x0d	; 13
     2ba:	8f 7c       	andi	r24, 0xCF	; 207
     2bc:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
     2be:	85 b1       	in	r24, 0x05	; 5
     2c0:	80 6e       	ori	r24, 0xE0	; 224
     2c2:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
     2c4:	8e b1       	in	r24, 0x0e	; 14
     2c6:	80 63       	ori	r24, 0x30	; 48
     2c8:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     2ca:	8a b1       	in	r24, 0x0a	; 10
     2cc:	80 6f       	ori	r24, 0xF0	; 240
     2ce:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     2d0:	8b b1       	in	r24, 0x0b	; 11
     2d2:	8f 70       	andi	r24, 0x0F	; 15
     2d4:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     2d6:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     2d8:	72 9a       	sbi	0x0e, 2	; 14
	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	Buttons_Init();
	USB_Init();
}
     2da:	1d c1       	rjmp	.+570    	; 0x516 <USB_Init>

000002dc <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     2dc:	d6 df       	rcall	.-84     	; 0x28a <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     2de:	8b b1       	in	r24, 0x0b	; 11
     2e0:	8f 70       	andi	r24, 0x0F	; 15
     2e2:	80 61       	ori	r24, 0x10	; 16
     2e4:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     2e6:	78 94       	sei

	for (;;)
	{
		HID_Device_USBTask(&MediaControl_HID_Interface);
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	da d4       	rcall	.+2484   	; 0xca2 <HID_Device_USBTask>
		USB_USBTask();
     2ee:	c6 d4       	rcall	.+2444   	; 0xc7c <USB_USBTask>
     2f0:	fb cf       	rjmp	.-10     	; 0x2e8 <main+0xc>

000002f2 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     2f2:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     2f4:	93 30       	cpi	r25, 0x03	; 3
     2f6:	b1 f0       	breq	.+44     	; 0x324 <CALLBACK_USB_GetDescriptor+0x32>
     2f8:	94 30       	cpi	r25, 0x04	; 4
     2fa:	28 f4       	brcc	.+10     	; 0x306 <CALLBACK_USB_GetDescriptor+0x14>
     2fc:	91 30       	cpi	r25, 0x01	; 1
     2fe:	41 f0       	breq	.+16     	; 0x310 <CALLBACK_USB_GetDescriptor+0x1e>
     300:	92 30       	cpi	r25, 0x02	; 2
     302:	79 f5       	brne	.+94     	; 0x362 <CALLBACK_USB_GetDescriptor+0x70>
     304:	0a c0       	rjmp	.+20     	; 0x31a <CALLBACK_USB_GetDescriptor+0x28>
     306:	91 32       	cpi	r25, 0x21	; 33
     308:	11 f1       	breq	.+68     	; 0x34e <CALLBACK_USB_GetDescriptor+0x5c>
     30a:	92 32       	cpi	r25, 0x22	; 34
     30c:	51 f5       	brne	.+84     	; 0x362 <CALLBACK_USB_GetDescriptor+0x70>
     30e:	24 c0       	rjmp	.+72     	; 0x358 <CALLBACK_USB_GetDescriptor+0x66>
     310:	22 e1       	ldi	r18, 0x12	; 18
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	e3 ec       	ldi	r30, 0xC3	; 195
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	28 c0       	rjmp	.+80     	; 0x36a <CALLBACK_USB_GetDescriptor+0x78>
     31a:	22 e2       	ldi	r18, 0x22	; 34
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	e5 ed       	ldi	r30, 0xD5	; 213
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	23 c0       	rjmp	.+70     	; 0x36a <CALLBACK_USB_GetDescriptor+0x78>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     324:	81 30       	cpi	r24, 0x01	; 1
     326:	49 f0       	breq	.+18     	; 0x33a <CALLBACK_USB_GetDescriptor+0x48>
     328:	81 30       	cpi	r24, 0x01	; 1
     32a:	18 f0       	brcs	.+6      	; 0x332 <CALLBACK_USB_GetDescriptor+0x40>
     32c:	82 30       	cpi	r24, 0x02	; 2
     32e:	c9 f4       	brne	.+50     	; 0x362 <CALLBACK_USB_GetDescriptor+0x70>
     330:	0a c0       	rjmp	.+20     	; 0x346 <CALLBACK_USB_GetDescriptor+0x54>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     332:	e7 ef       	ldi	r30, 0xF7	; 247
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	84 91       	lpm	r24, Z+
     338:	03 c0       	rjmp	.+6      	; 0x340 <CALLBACK_USB_GetDescriptor+0x4e>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     33a:	eb ef       	ldi	r30, 0xFB	; 251
     33c:	f0 e0       	ldi	r31, 0x00	; 0
     33e:	84 91       	lpm	r24, Z+
     340:	28 2f       	mov	r18, r24
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	12 c0       	rjmp	.+36     	; 0x36a <CALLBACK_USB_GetDescriptor+0x78>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     346:	e5 e1       	ldi	r30, 0x15	; 21
     348:	f1 e0       	ldi	r31, 0x01	; 1
     34a:	84 91       	lpm	r24, Z+
     34c:	f9 cf       	rjmp	.-14     	; 0x340 <CALLBACK_USB_GetDescriptor+0x4e>
     34e:	29 e0       	ldi	r18, 0x09	; 9
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	e7 ee       	ldi	r30, 0xE7	; 231
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	09 c0       	rjmp	.+18     	; 0x36a <CALLBACK_USB_GetDescriptor+0x78>

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MediaControlHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     358:	2b e2       	ldi	r18, 0x2B	; 43
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	e8 e9       	ldi	r30, 0x98	; 152
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	04 c0       	rjmp	.+8      	; 0x36a <CALLBACK_USB_GetDescriptor+0x78>
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	e0 e0       	ldi	r30, 0x00	; 0
     368:	f0 e0       	ldi	r31, 0x00	; 0
			Address = &MediaControlReport;
			Size    = sizeof(MediaControlReport);
			break;
	}

	*DescriptorAddress = Address;
     36a:	ed 93       	st	X+, r30
     36c:	fc 93       	st	X, r31
	return Size;
}
     36e:	c9 01       	movw	r24, r18
     370:	08 95       	ret

00000372 <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
     372:	38 2f       	mov	r19, r24
     374:	28 2f       	mov	r18, r24
     376:	2c c0       	rjmp	.+88     	; 0x3d0 <Endpoint_ConfigureEndpoint_Prv+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     378:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);
		
		if (EPNum == Number)
     37c:	23 17       	cp	r18, r19
     37e:	21 f4       	brne	.+8      	; 0x388 <Endpoint_ConfigureEndpoint_Prv+0x16>
     380:	76 2f       	mov	r23, r22
     382:	94 2f       	mov	r25, r20
     384:	50 e0       	ldi	r21, 0x00	; 0
     386:	06 c0       	rjmp	.+12     	; 0x394 <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     388:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     38c:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
     390:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     394:	91 ff       	sbrs	r25, 1
     396:	1b c0       	rjmp	.+54     	; 0x3ce <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     398:	80 91 eb 00 	lds	r24, 0x00EB
     39c:	8e 7f       	andi	r24, 0xFE	; 254
     39e:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     3a2:	80 91 ed 00 	lds	r24, 0x00ED
     3a6:	8d 7f       	andi	r24, 0xFD	; 253
     3a8:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     3ac:	80 91 eb 00 	lds	r24, 0x00EB
     3b0:	81 60       	ori	r24, 0x01	; 1
     3b2:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     3b6:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     3ba:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
     3be:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     3c2:	80 91 ee 00 	lds	r24, 0x00EE
			
		if (!(Endpoint_IsConfigured()))
     3c6:	87 fd       	sbrc	r24, 7
     3c8:	02 c0       	rjmp	.+4      	; 0x3ce <Endpoint_ConfigureEndpoint_Prv+0x5c>
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else	
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     3ce:	2f 5f       	subi	r18, 0xFF	; 255
     3d0:	27 30       	cpi	r18, 0x07	; 7
     3d2:	90 f2       	brcs	.-92     	; 0x378 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     3d4:	30 93 e9 00 	sts	0x00E9, r19
     3d8:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     3da:	08 95       	ret

000003dc <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     3dc:	80 91 15 01 	lds	r24, 0x0115
     3e0:	88 23       	and	r24, r24
     3e2:	9c f4       	brge	.+38     	; 0x40a <Endpoint_ClearStatusStage+0x2e>
     3e4:	04 c0       	rjmp	.+8      	; 0x3ee <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     3e6:	80 91 14 01 	lds	r24, 0x0114
     3ea:	88 23       	and	r24, r24
     3ec:	b9 f0       	breq	.+46     	; 0x41c <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     3ee:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     3f2:	82 ff       	sbrs	r24, 2
     3f4:	f8 cf       	rjmp	.-16     	; 0x3e6 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     3f6:	80 91 e8 00 	lds	r24, 0x00E8
     3fa:	8b 77       	andi	r24, 0x7B	; 123
     3fc:	80 93 e8 00 	sts	0x00E8, r24
     400:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     402:	80 91 14 01 	lds	r24, 0x0114
     406:	88 23       	and	r24, r24
     408:	49 f0       	breq	.+18     	; 0x41c <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     40a:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     40e:	80 ff       	sbrs	r24, 0
     410:	f8 cf       	rjmp	.-16     	; 0x402 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     412:	80 91 e8 00 	lds	r24, 0x00E8
     416:	8e 77       	andi	r24, 0x7E	; 126
     418:	80 93 e8 00 	sts	0x00E8, r24
     41c:	08 95       	ret

0000041e <Endpoint_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     41e:	40 91 e4 00 	lds	r20, 0x00E4
     422:	50 91 e5 00 	lds	r21, 0x00E5
     426:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
     428:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
     42c:	80 78       	andi	r24, 0x80	; 128
     42e:	80 38       	cpi	r24, 0x80	; 128
     430:	29 f4       	brne	.+10     	; 0x43c <Endpoint_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     432:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
     436:	80 ff       	sbrs	r24, 0
     438:	05 c0       	rjmp	.+10     	; 0x444 <Endpoint_WaitUntilReady+0x26>
     43a:	22 c0       	rjmp	.+68     	; 0x480 <Endpoint_WaitUntilReady+0x62>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     43c:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     440:	82 fd       	sbrc	r24, 2
     442:	1e c0       	rjmp	.+60     	; 0x480 <Endpoint_WaitUntilReady+0x62>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     444:	80 91 14 01 	lds	r24, 0x0114

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     448:	88 23       	and	r24, r24
     44a:	11 f4       	brne	.+4      	; 0x450 <Endpoint_WaitUntilReady+0x32>
     44c:	82 e0       	ldi	r24, 0x02	; 2
     44e:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     450:	85 30       	cpi	r24, 0x05	; 5
     452:	11 f4       	brne	.+4      	; 0x458 <Endpoint_WaitUntilReady+0x3a>
     454:	83 e0       	ldi	r24, 0x03	; 3
     456:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     458:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     45c:	85 ff       	sbrs	r24, 5
     45e:	02 c0       	rjmp	.+4      	; 0x464 <Endpoint_WaitUntilReady+0x46>
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	08 95       	ret
     464:	80 91 e4 00 	lds	r24, 0x00E4
     468:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     46c:	84 17       	cp	r24, r20
     46e:	95 07       	cpc	r25, r21
     470:	d9 f2       	breq	.-74     	; 0x428 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     472:	22 23       	and	r18, r18
     474:	11 f4       	brne	.+4      	; 0x47a <Endpoint_WaitUntilReady+0x5c>
     476:	84 e0       	ldi	r24, 0x04	; 4
     478:	08 95       	ret
     47a:	21 50       	subi	r18, 0x01	; 1
     47c:	ac 01       	movw	r20, r24
     47e:	d4 cf       	rjmp	.-88     	; 0x428 <Endpoint_WaitUntilReady+0xa>
     480:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     482:	08 95       	ret

00000484 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     484:	ef 92       	push	r14
     486:	ff 92       	push	r15
     488:	0f 93       	push	r16
     48a:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     48c:	4d d0       	rcall	.+154    	; 0x528 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     48e:	54 d0       	rcall	.+168    	; 0x538 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     490:	08 ed       	ldi	r16, 0xD8	; 216
     492:	10 e0       	ldi	r17, 0x00	; 0
     494:	f8 01       	movw	r30, r16
     496:	80 81       	ld	r24, Z
     498:	8f 77       	andi	r24, 0x7F	; 127
     49a:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
     49c:	80 81       	ld	r24, Z
     49e:	80 68       	ori	r24, 0x80	; 128
     4a0:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     4a2:	80 81       	ld	r24, Z
     4a4:	8f 7d       	andi	r24, 0xDF	; 223
     4a6:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     4a8:	e7 ed       	ldi	r30, 0xD7	; 215
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	80 81       	ld	r24, Z
     4ae:	80 68       	ori	r24, 0x80	; 128
     4b0:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     4b2:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     4b4:	10 92 14 01 	sts	0x0114, r1
	USB_Device_ConfigurationNumber  = 0;
     4b8:	10 92 10 01 	sts	0x0110, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     4bc:	10 92 12 01 	sts	0x0112, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     4c0:	10 92 11 01 	sts	0x0111, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     4c4:	80 ee       	ldi	r24, 0xE0	; 224
     4c6:	e8 2e       	mov	r14, r24
     4c8:	f1 2c       	mov	r15, r1
     4ca:	f7 01       	movw	r30, r14
     4cc:	80 81       	ld	r24, Z
     4ce:	8b 7f       	andi	r24, 0xFB	; 251
     4d0:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     4d2:	f8 01       	movw	r30, r16
     4d4:	80 81       	ld	r24, Z
     4d6:	81 60       	ori	r24, 0x01	; 1
     4d8:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	42 e0       	ldi	r20, 0x02	; 2
     4e0:	48 df       	rcall	.-368    	; 0x372 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     4e2:	e1 ee       	ldi	r30, 0xE1	; 225
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	80 81       	ld	r24, Z
     4e8:	8e 7f       	andi	r24, 0xFE	; 254
     4ea:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     4ec:	e2 ee       	ldi	r30, 0xE2	; 226
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	80 81       	ld	r24, Z
     4f2:	81 60       	ori	r24, 0x01	; 1
     4f4:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     4f6:	80 81       	ld	r24, Z
     4f8:	88 60       	ori	r24, 0x08	; 8
     4fa:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     4fc:	f7 01       	movw	r30, r14
     4fe:	80 81       	ld	r24, Z
     500:	8e 7f       	andi	r24, 0xFE	; 254
     502:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     504:	f8 01       	movw	r30, r16
     506:	80 81       	ld	r24, Z
     508:	80 61       	ori	r24, 0x10	; 16
     50a:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     50c:	1f 91       	pop	r17
     50e:	0f 91       	pop	r16
     510:	ff 90       	pop	r15
     512:	ef 90       	pop	r14
     514:	08 95       	ret

00000516 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     516:	e7 ed       	ldi	r30, 0xD7	; 215
     518:	f0 e0       	ldi	r31, 0x00	; 0
     51a:	80 81       	ld	r24, Z
     51c:	81 60       	ori	r24, 0x01	; 1
     51e:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	80 93 13 01 	sts	0x0113, r24

	USB_ResetInterface();
}
     526:	ae cf       	rjmp	.-164    	; 0x484 <USB_ResetInterface>

00000528 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     528:	e8 ed       	ldi	r30, 0xD8	; 216
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	80 81       	ld	r24, Z
     52e:	8c 7f       	andi	r24, 0xFC	; 252
     530:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     532:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     536:	08 95       	ret

00000538 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     538:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     53c:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     540:	08 95       	ret

00000542 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     542:	1f 92       	push	r1
     544:	0f 92       	push	r0
     546:	0f b6       	in	r0, 0x3f	; 63
     548:	0f 92       	push	r0
     54a:	0b b6       	in	r0, 0x3b	; 59
     54c:	0f 92       	push	r0
     54e:	11 24       	eor	r1, r1
     550:	2f 93       	push	r18
     552:	3f 93       	push	r19
     554:	4f 93       	push	r20
     556:	5f 93       	push	r21
     558:	6f 93       	push	r22
     55a:	7f 93       	push	r23
     55c:	8f 93       	push	r24
     55e:	9f 93       	push	r25
     560:	af 93       	push	r26
     562:	bf 93       	push	r27
     564:	ef 93       	push	r30
     566:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     568:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     56c:	82 ff       	sbrs	r24, 2
     56e:	0a c0       	rjmp	.+20     	; 0x584 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     570:	80 91 e2 00 	lds	r24, 0x00E2
     574:	82 ff       	sbrs	r24, 2
     576:	06 c0       	rjmp	.+12     	; 0x584 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     578:	80 91 e1 00 	lds	r24, 0x00E1
     57c:	8b 7f       	andi	r24, 0xFB	; 251
     57e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     582:	08 de       	rcall	.-1008   	; 0x194 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     584:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     588:	80 ff       	sbrs	r24, 0
     58a:	1d c0       	rjmp	.+58     	; 0x5c6 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     58c:	80 91 d8 00 	lds	r24, 0x00D8
     590:	80 ff       	sbrs	r24, 0
     592:	19 c0       	rjmp	.+50     	; 0x5c6 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     594:	80 91 da 00 	lds	r24, 0x00DA
     598:	8e 7f       	andi	r24, 0xFE	; 254
     59a:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     59e:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     5a2:	80 ff       	sbrs	r24, 0
     5a4:	0c c0       	rjmp	.+24     	; 0x5be <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     5a6:	8c e0       	ldi	r24, 0x0C	; 12
     5a8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     5aa:	8e e0       	ldi	r24, 0x0E	; 14
     5ac:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     5ae:	09 b4       	in	r0, 0x29	; 41
     5b0:	00 fe       	sbrs	r0, 0
     5b2:	fd cf       	rjmp	.-6      	; 0x5ae <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	80 93 14 01 	sts	0x0114, r24
			EVENT_USB_Device_Connect();
     5ba:	e2 dd       	rcall	.-1084   	; 0x180 <EVENT_USB_Device_Connect>
     5bc:	04 c0       	rjmp	.+8      	; 0x5c6 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     5be:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     5c0:	10 92 14 01 	sts	0x0114, r1
			EVENT_USB_Device_Disconnect();
     5c4:	e2 dd       	rcall	.-1084   	; 0x18a <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     5c6:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     5ca:	80 ff       	sbrs	r24, 0
     5cc:	18 c0       	rjmp	.+48     	; 0x5fe <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     5ce:	80 91 e2 00 	lds	r24, 0x00E2
     5d2:	80 ff       	sbrs	r24, 0
     5d4:	14 c0       	rjmp	.+40     	; 0x5fe <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     5d6:	80 91 e2 00 	lds	r24, 0x00E2
     5da:	8e 7f       	andi	r24, 0xFE	; 254
     5dc:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     5e0:	80 91 e2 00 	lds	r24, 0x00E2
     5e4:	80 61       	ori	r24, 0x10	; 16
     5e6:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     5ea:	80 91 d8 00 	lds	r24, 0x00D8
     5ee:	80 62       	ori	r24, 0x20	; 32
     5f0:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     5f4:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     5f6:	85 e0       	ldi	r24, 0x05	; 5
     5f8:	80 93 14 01 	sts	0x0114, r24
		EVENT_USB_Device_Suspend();
     5fc:	3e d3       	rcall	.+1660   	; 0xc7a <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     5fe:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     602:	84 ff       	sbrs	r24, 4
     604:	2d c0       	rjmp	.+90     	; 0x660 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     606:	80 91 e2 00 	lds	r24, 0x00E2
     60a:	84 ff       	sbrs	r24, 4
     60c:	29 c0       	rjmp	.+82     	; 0x660 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     60e:	8c e0       	ldi	r24, 0x0C	; 12
     610:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     612:	8e e0       	ldi	r24, 0x0E	; 14
     614:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     616:	09 b4       	in	r0, 0x29	; 41
     618:	00 fe       	sbrs	r0, 0
     61a:	fd cf       	rjmp	.-6      	; 0x616 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     61c:	80 91 d8 00 	lds	r24, 0x00D8
     620:	8f 7d       	andi	r24, 0xDF	; 223
     622:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     626:	80 91 e1 00 	lds	r24, 0x00E1
     62a:	8f 7e       	andi	r24, 0xEF	; 239
     62c:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     630:	80 91 e2 00 	lds	r24, 0x00E2
     634:	8f 7e       	andi	r24, 0xEF	; 239
     636:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     63a:	80 91 e2 00 	lds	r24, 0x00E2
     63e:	81 60       	ori	r24, 0x01	; 1
     640:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     644:	80 91 10 01 	lds	r24, 0x0110
     648:	88 23       	and	r24, r24
     64a:	31 f4       	brne	.+12     	; 0x658 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     64c:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     650:	87 fd       	sbrc	r24, 7
     652:	02 c0       	rjmp	.+4      	; 0x658 <__vector_10+0x116>
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	01 c0       	rjmp	.+2      	; 0x65a <__vector_10+0x118>
     658:	84 e0       	ldi	r24, 0x04	; 4
     65a:	80 93 14 01 	sts	0x0114, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     65e:	0d d3       	rcall	.+1562   	; 0xc7a <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     660:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     664:	83 ff       	sbrs	r24, 3
     666:	22 c0       	rjmp	.+68     	; 0x6ac <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     668:	80 91 e2 00 	lds	r24, 0x00E2
     66c:	83 ff       	sbrs	r24, 3
     66e:	1e c0       	rjmp	.+60     	; 0x6ac <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     670:	80 91 e1 00 	lds	r24, 0x00E1
     674:	87 7f       	andi	r24, 0xF7	; 247
     676:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     67a:	82 e0       	ldi	r24, 0x02	; 2
     67c:	80 93 14 01 	sts	0x0114, r24
		USB_Device_ConfigurationNumber = 0;
     680:	10 92 10 01 	sts	0x0110, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     684:	80 91 e1 00 	lds	r24, 0x00E1
     688:	8e 7f       	andi	r24, 0xFE	; 254
     68a:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     68e:	80 91 e2 00 	lds	r24, 0x00E2
     692:	8e 7f       	andi	r24, 0xFE	; 254
     694:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     698:	80 91 e2 00 	lds	r24, 0x00E2
     69c:	80 61       	ori	r24, 0x10	; 16
     69e:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	42 e0       	ldi	r20, 0x02	; 2
     6a8:	64 de       	rcall	.-824    	; 0x372 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     6aa:	e7 d2       	rcall	.+1486   	; 0xc7a <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     6ac:	ff 91       	pop	r31
     6ae:	ef 91       	pop	r30
     6b0:	bf 91       	pop	r27
     6b2:	af 91       	pop	r26
     6b4:	9f 91       	pop	r25
     6b6:	8f 91       	pop	r24
     6b8:	7f 91       	pop	r23
     6ba:	6f 91       	pop	r22
     6bc:	5f 91       	pop	r21
     6be:	4f 91       	pop	r20
     6c0:	3f 91       	pop	r19
     6c2:	2f 91       	pop	r18
     6c4:	0f 90       	pop	r0
     6c6:	0b be       	out	0x3b, r0	; 59
     6c8:	0f 90       	pop	r0
     6ca:	0f be       	out	0x3f, r0	; 63
     6cc:	0f 90       	pop	r0
     6ce:	1f 90       	pop	r1
     6d0:	18 95       	reti

000006d2 <Endpoint_Write_Control_Stream_LE>:
     6d2:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     6d4:	40 91 1b 01 	lds	r20, 0x011B
     6d8:	50 91 1c 01 	lds	r21, 0x011C
     6dc:	46 17       	cp	r20, r22
     6de:	57 07       	cpc	r21, r23
     6e0:	18 f4       	brcc	.+6      	; 0x6e8 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     6e2:	f9 01       	movw	r30, r18
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	3d c0       	rjmp	.+122    	; 0x762 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     6e8:	61 15       	cp	r22, r1
     6ea:	71 05       	cpc	r23, r1
     6ec:	11 f0       	breq	.+4      	; 0x6f2 <Endpoint_Write_Control_Stream_LE+0x20>
     6ee:	ab 01       	movw	r20, r22
     6f0:	f8 cf       	rjmp	.-16     	; 0x6e2 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     6f2:	80 91 e8 00 	lds	r24, 0x00E8
     6f6:	8e 77       	andi	r24, 0x7E	; 126
     6f8:	80 93 e8 00 	sts	0x00E8, r24
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	f0 cf       	rjmp	.-32     	; 0x6e2 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     702:	80 91 14 01 	lds	r24, 0x0114

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     706:	88 23       	and	r24, r24
     708:	f1 f1       	breq	.+124    	; 0x786 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     70a:	85 30       	cpi	r24, 0x05	; 5
     70c:	f1 f1       	breq	.+124    	; 0x78a <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     70e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     712:	83 ff       	sbrs	r24, 3
     714:	02 c0       	rjmp	.+4      	; 0x71a <Endpoint_Write_Control_Stream_LE+0x48>
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     71a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     71e:	82 fd       	sbrc	r24, 2
     720:	2c c0       	rjmp	.+88     	; 0x77a <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     722:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     726:	80 ff       	sbrs	r24, 0
     728:	1c c0       	rjmp	.+56     	; 0x762 <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     72a:	20 91 f2 00 	lds	r18, 0x00F2
     72e:	30 91 f3 00 	lds	r19, 0x00F3
     732:	07 c0       	rjmp	.+14     	; 0x742 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     734:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     736:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     73a:	41 50       	subi	r20, 0x01	; 1
     73c:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     73e:	2f 5f       	subi	r18, 0xFF	; 255
     740:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     742:	41 15       	cp	r20, r1
     744:	51 05       	cpc	r21, r1
     746:	19 f0       	breq	.+6      	; 0x74e <Endpoint_Write_Control_Stream_LE+0x7c>
     748:	28 30       	cpi	r18, 0x08	; 8
     74a:	31 05       	cpc	r19, r1
     74c:	98 f3       	brcs	.-26     	; 0x734 <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	28 30       	cpi	r18, 0x08	; 8
     752:	31 05       	cpc	r19, r1
     754:	09 f4       	brne	.+2      	; 0x758 <Endpoint_Write_Control_Stream_LE+0x86>
     756:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     758:	80 91 e8 00 	lds	r24, 0x00E8
     75c:	8e 77       	andi	r24, 0x7E	; 126
     75e:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     762:	41 15       	cp	r20, r1
     764:	51 05       	cpc	r21, r1
     766:	69 f6       	brne	.-102    	; 0x702 <Endpoint_Write_Control_Stream_LE+0x30>
     768:	99 23       	and	r25, r25
     76a:	59 f6       	brne	.-106    	; 0x702 <Endpoint_Write_Control_Stream_LE+0x30>
     76c:	06 c0       	rjmp	.+12     	; 0x77a <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     76e:	80 91 14 01 	lds	r24, 0x0114

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     772:	88 23       	and	r24, r24
     774:	41 f0       	breq	.+16     	; 0x786 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     776:	85 30       	cpi	r24, 0x05	; 5
     778:	41 f0       	breq	.+16     	; 0x78a <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     77a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     77e:	82 ff       	sbrs	r24, 2
     780:	f6 cf       	rjmp	.-20     	; 0x76e <Endpoint_Write_Control_Stream_LE+0x9c>
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	08 95       	ret
     786:	82 e0       	ldi	r24, 0x02	; 2
     788:	08 95       	ret
     78a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     78c:	08 95       	ret

0000078e <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
     78e:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     790:	61 15       	cp	r22, r1
     792:	71 05       	cpc	r23, r1
     794:	29 f4       	brne	.+10     	; 0x7a0 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     796:	80 91 e8 00 	lds	r24, 0x00E8
     79a:	8b 77       	andi	r24, 0x7B	; 123
     79c:	80 93 e8 00 	sts	0x00E8, r24
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     7a0:	f9 01       	movw	r30, r18
     7a2:	22 c0       	rjmp	.+68     	; 0x7e8 <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     7a4:	80 91 14 01 	lds	r24, 0x0114

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     7a8:	88 23       	and	r24, r24
     7aa:	71 f1       	breq	.+92     	; 0x808 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     7ac:	85 30       	cpi	r24, 0x05	; 5
     7ae:	71 f1       	breq	.+92     	; 0x80c <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     7b0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     7b4:	83 ff       	sbrs	r24, 3
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <Endpoint_Read_Control_Stream_LE+0x2e>
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7bc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     7c0:	82 ff       	sbrs	r24, 2
     7c2:	f0 cf       	rjmp	.-32     	; 0x7a4 <Endpoint_Read_Control_Stream_LE+0x16>
     7c4:	06 c0       	rjmp	.+12     	; 0x7d2 <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     7c6:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     7ca:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     7cc:	61 50       	subi	r22, 0x01	; 1
     7ce:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     7d0:	31 f0       	breq	.+12     	; 0x7de <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     7d2:	80 91 f2 00 	lds	r24, 0x00F2
     7d6:	90 91 f3 00 	lds	r25, 0x00F3
     7da:	89 2b       	or	r24, r25
     7dc:	a1 f7       	brne	.-24     	; 0x7c6 <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     7de:	80 91 e8 00 	lds	r24, 0x00E8
     7e2:	8b 77       	andi	r24, 0x7B	; 123
     7e4:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
     7e8:	61 15       	cp	r22, r1
     7ea:	71 05       	cpc	r23, r1
     7ec:	d9 f6       	brne	.-74     	; 0x7a4 <Endpoint_Read_Control_Stream_LE+0x16>
     7ee:	06 c0       	rjmp	.+12     	; 0x7fc <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     7f0:	80 91 14 01 	lds	r24, 0x0114

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     7f4:	88 23       	and	r24, r24
     7f6:	41 f0       	breq	.+16     	; 0x808 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     7f8:	85 30       	cpi	r24, 0x05	; 5
     7fa:	41 f0       	breq	.+16     	; 0x80c <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7fc:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     800:	80 ff       	sbrs	r24, 0
     802:	f6 cf       	rjmp	.-20     	; 0x7f0 <Endpoint_Read_Control_Stream_LE+0x62>
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	08 95       	ret
     808:	82 e0       	ldi	r24, 0x02	; 2
     80a:	08 95       	ret
     80c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     80e:	08 95       	ret

00000810 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     810:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     812:	40 91 1b 01 	lds	r20, 0x011B
     816:	50 91 1c 01 	lds	r21, 0x011C
     81a:	46 17       	cp	r20, r22
     81c:	57 07       	cpc	r21, r23
     81e:	18 f4       	brcc	.+6      	; 0x826 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     820:	f9 01       	movw	r30, r18
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	40 c0       	rjmp	.+128    	; 0x8a6 <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     826:	61 15       	cp	r22, r1
     828:	71 05       	cpc	r23, r1
     82a:	11 f0       	breq	.+4      	; 0x830 <Endpoint_Write_Control_PStream_LE+0x20>
     82c:	ab 01       	movw	r20, r22
     82e:	f8 cf       	rjmp	.-16     	; 0x820 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     830:	80 91 e8 00 	lds	r24, 0x00E8
     834:	8e 77       	andi	r24, 0x7E	; 126
     836:	80 93 e8 00 	sts	0x00E8, r24
     83a:	40 e0       	ldi	r20, 0x00	; 0
     83c:	50 e0       	ldi	r21, 0x00	; 0
     83e:	f0 cf       	rjmp	.-32     	; 0x820 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     840:	80 91 14 01 	lds	r24, 0x0114

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     844:	88 23       	and	r24, r24
     846:	09 f4       	brne	.+2      	; 0x84a <Endpoint_Write_Control_PStream_LE+0x3a>
     848:	40 c0       	rjmp	.+128    	; 0x8ca <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     84a:	85 30       	cpi	r24, 0x05	; 5
     84c:	09 f4       	brne	.+2      	; 0x850 <Endpoint_Write_Control_PStream_LE+0x40>
     84e:	3f c0       	rjmp	.+126    	; 0x8ce <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     850:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     854:	83 ff       	sbrs	r24, 3
     856:	02 c0       	rjmp	.+4      	; 0x85c <Endpoint_Write_Control_PStream_LE+0x4c>
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     85c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     860:	82 fd       	sbrc	r24, 2
     862:	2d c0       	rjmp	.+90     	; 0x8be <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     864:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     868:	80 ff       	sbrs	r24, 0
     86a:	1d c0       	rjmp	.+58     	; 0x8a6 <Endpoint_Write_Control_PStream_LE+0x96>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     86c:	20 91 f2 00 	lds	r18, 0x00F2
     870:	30 91 f3 00 	lds	r19, 0x00F3
     874:	08 c0       	rjmp	.+16     	; 0x886 <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     876:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     878:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     87c:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     87e:	41 50       	subi	r20, 0x01	; 1
     880:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     882:	2f 5f       	subi	r18, 0xFF	; 255
     884:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     886:	41 15       	cp	r20, r1
     888:	51 05       	cpc	r21, r1
     88a:	19 f0       	breq	.+6      	; 0x892 <Endpoint_Write_Control_PStream_LE+0x82>
     88c:	28 30       	cpi	r18, 0x08	; 8
     88e:	31 05       	cpc	r19, r1
     890:	90 f3       	brcs	.-28     	; 0x876 <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	28 30       	cpi	r18, 0x08	; 8
     896:	31 05       	cpc	r19, r1
     898:	09 f4       	brne	.+2      	; 0x89c <Endpoint_Write_Control_PStream_LE+0x8c>
     89a:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     89c:	80 91 e8 00 	lds	r24, 0x00E8
     8a0:	8e 77       	andi	r24, 0x7E	; 126
     8a2:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     8a6:	41 15       	cp	r20, r1
     8a8:	51 05       	cpc	r21, r1
     8aa:	51 f6       	brne	.-108    	; 0x840 <Endpoint_Write_Control_PStream_LE+0x30>
     8ac:	99 23       	and	r25, r25
     8ae:	41 f6       	brne	.-112    	; 0x840 <Endpoint_Write_Control_PStream_LE+0x30>
     8b0:	06 c0       	rjmp	.+12     	; 0x8be <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     8b2:	80 91 14 01 	lds	r24, 0x0114

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     8b6:	88 23       	and	r24, r24
     8b8:	41 f0       	breq	.+16     	; 0x8ca <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     8ba:	85 30       	cpi	r24, 0x05	; 5
     8bc:	41 f0       	breq	.+16     	; 0x8ce <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     8be:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     8c2:	82 ff       	sbrs	r24, 2
     8c4:	f6 cf       	rjmp	.-20     	; 0x8b2 <Endpoint_Write_Control_PStream_LE+0xa2>
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	08 95       	ret
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	08 95       	ret
     8ce:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     8d0:	08 95       	ret

000008d2 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     8d2:	bf 92       	push	r11
     8d4:	cf 92       	push	r12
     8d6:	df 92       	push	r13
     8d8:	ef 92       	push	r14
     8da:	ff 92       	push	r15
     8dc:	0f 93       	push	r16
     8de:	1f 93       	push	r17
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	18 2f       	mov	r17, r24
     8e6:	09 2f       	mov	r16, r25
     8e8:	7b 01       	movw	r14, r22
     8ea:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     8ec:	98 dd       	rcall	.-1232   	; 0x41e <Endpoint_WaitUntilReady>
     8ee:	b8 2e       	mov	r11, r24
     8f0:	88 23       	and	r24, r24
     8f2:	b1 f5       	brne	.+108    	; 0x960 <Endpoint_Write_Stream_LE+0x8e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     8f4:	81 2f       	mov	r24, r17
     8f6:	90 2f       	mov	r25, r16
     8f8:	9c 01       	movw	r18, r24
     8fa:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     8fc:	c1 14       	cp	r12, r1
     8fe:	d1 04       	cpc	r13, r1
     900:	39 f0       	breq	.+14     	; 0x910 <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
     902:	f6 01       	movw	r30, r12
     904:	80 81       	ld	r24, Z
     906:	91 81       	ldd	r25, Z+1	; 0x01
     908:	e8 1a       	sub	r14, r24
     90a:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     90c:	c8 0f       	add	r28, r24
     90e:	d9 1f       	adc	r29, r25
     910:	00 e0       	ldi	r16, 0x00	; 0
     912:	10 e0       	ldi	r17, 0x00	; 0
     914:	22 c0       	rjmp	.+68     	; 0x95a <Endpoint_Write_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     916:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     91a:	85 fd       	sbrc	r24, 5
     91c:	16 c0       	rjmp	.+44     	; 0x94a <Endpoint_Write_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     91e:	80 91 e8 00 	lds	r24, 0x00E8
     922:	8e 77       	andi	r24, 0x7E	; 126
     924:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
     928:	c1 14       	cp	r12, r1
     92a:	d1 04       	cpc	r13, r1
     92c:	49 f0       	breq	.+18     	; 0x940 <Endpoint_Write_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
     92e:	f6 01       	movw	r30, r12
     930:	80 81       	ld	r24, Z
     932:	91 81       	ldd	r25, Z+1	; 0x01
     934:	80 0f       	add	r24, r16
     936:	91 1f       	adc	r25, r17
     938:	91 83       	std	Z+1, r25	; 0x01
     93a:	80 83       	st	Z, r24
     93c:	85 e0       	ldi	r24, 0x05	; 5
     93e:	11 c0       	rjmp	.+34     	; 0x962 <Endpoint_Write_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
     940:	9d d1       	rcall	.+826    	; 0xc7c <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     942:	6d dd       	rcall	.-1318   	; 0x41e <Endpoint_WaitUntilReady>
     944:	88 23       	and	r24, r24
     946:	49 f0       	breq	.+18     	; 0x95a <Endpoint_Write_Stream_LE+0x88>
     948:	0c c0       	rjmp	.+24     	; 0x962 <Endpoint_Write_Stream_LE+0x90>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     94a:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     94c:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     950:	08 94       	sec
     952:	e1 08       	sbc	r14, r1
     954:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
     956:	0f 5f       	subi	r16, 0xFF	; 255
     958:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     95a:	e1 14       	cp	r14, r1
     95c:	f1 04       	cpc	r15, r1
     95e:	d9 f6       	brne	.-74     	; 0x916 <Endpoint_Write_Stream_LE+0x44>
     960:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	1f 91       	pop	r17
     968:	0f 91       	pop	r16
     96a:	ff 90       	pop	r15
     96c:	ef 90       	pop	r14
     96e:	df 90       	pop	r13
     970:	cf 90       	pop	r12
     972:	bf 90       	pop	r11
     974:	08 95       	ret

00000976 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     976:	0f 93       	push	r16
     978:	1f 93       	push	r17
     97a:	df 93       	push	r29
     97c:	cf 93       	push	r28
     97e:	cd b7       	in	r28, 0x3d	; 61
     980:	de b7       	in	r29, 0x3e	; 62
     982:	ac 97       	sbiw	r28, 0x2c	; 44
     984:	0f b6       	in	r0, 0x3f	; 63
     986:	f8 94       	cli
     988:	de bf       	out	0x3e, r29	; 62
     98a:	0f be       	out	0x3f, r0	; 63
     98c:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     98e:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
     992:	80 93 15 01 	sts	0x0115, r24
     996:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
     99a:	80 93 16 01 	sts	0x0116, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     99e:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
     9a2:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
     9a6:	e7 e1       	ldi	r30, 0x17	; 23
     9a8:	f1 e0       	ldi	r31, 0x01	; 1
     9aa:	80 93 17 01 	sts	0x0117, r24
     9ae:	90 93 18 01 	sts	0x0118, r25
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     9b2:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
     9b6:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
     9ba:	80 93 19 01 	sts	0x0119, r24
     9be:	93 83       	std	Z+3, r25	; 0x03
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     9c0:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
     9c4:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
     9c8:	80 93 1b 01 	sts	0x011B, r24
     9cc:	95 83       	std	Z+5, r25	; 0x05

	EVENT_USB_Device_ControlRequest();
     9ce:	48 dc       	rcall	.-1904   	; 0x260 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     9d0:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     9d4:	83 ff       	sbrs	r24, 3
     9d6:	38 c1       	rjmp	.+624    	; 0xc48 <USB_Device_ProcessControlRequest+0x2d2>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     9d8:	80 91 15 01 	lds	r24, 0x0115

		switch (USB_ControlRequest.bRequest)
     9dc:	30 91 16 01 	lds	r19, 0x0116
     9e0:	35 30       	cpi	r19, 0x05	; 5
     9e2:	09 f4       	brne	.+2      	; 0x9e6 <USB_Device_ProcessControlRequest+0x70>
     9e4:	87 c0       	rjmp	.+270    	; 0xaf4 <USB_Device_ProcessControlRequest+0x17e>
     9e6:	36 30       	cpi	r19, 0x06	; 6
     9e8:	40 f4       	brcc	.+16     	; 0x9fa <USB_Device_ProcessControlRequest+0x84>
     9ea:	31 30       	cpi	r19, 0x01	; 1
     9ec:	c9 f1       	breq	.+114    	; 0xa60 <USB_Device_ProcessControlRequest+0xea>
     9ee:	31 30       	cpi	r19, 0x01	; 1
     9f0:	70 f0       	brcs	.+28     	; 0xa0e <USB_Device_ProcessControlRequest+0x98>
     9f2:	33 30       	cpi	r19, 0x03	; 3
     9f4:	09 f0       	breq	.+2      	; 0x9f8 <USB_Device_ProcessControlRequest+0x82>
     9f6:	28 c1       	rjmp	.+592    	; 0xc48 <USB_Device_ProcessControlRequest+0x2d2>
     9f8:	33 c0       	rjmp	.+102    	; 0xa60 <USB_Device_ProcessControlRequest+0xea>
     9fa:	38 30       	cpi	r19, 0x08	; 8
     9fc:	09 f4       	brne	.+2      	; 0xa00 <USB_Device_ProcessControlRequest+0x8a>
     9fe:	f6 c0       	rjmp	.+492    	; 0xbec <USB_Device_ProcessControlRequest+0x276>
     a00:	39 30       	cpi	r19, 0x09	; 9
     a02:	09 f4       	brne	.+2      	; 0xa06 <USB_Device_ProcessControlRequest+0x90>
     a04:	05 c1       	rjmp	.+522    	; 0xc10 <USB_Device_ProcessControlRequest+0x29a>
     a06:	36 30       	cpi	r19, 0x06	; 6
     a08:	09 f0       	breq	.+2      	; 0xa0c <USB_Device_ProcessControlRequest+0x96>
     a0a:	1e c1       	rjmp	.+572    	; 0xc48 <USB_Device_ProcessControlRequest+0x2d2>
     a0c:	97 c0       	rjmp	.+302    	; 0xb3c <USB_Device_ProcessControlRequest+0x1c6>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a0e:	80 38       	cpi	r24, 0x80	; 128
     a10:	21 f0       	breq	.+8      	; 0xa1a <USB_Device_ProcessControlRequest+0xa4>
     a12:	82 38       	cpi	r24, 0x82	; 130
     a14:	09 f0       	breq	.+2      	; 0xa18 <USB_Device_ProcessControlRequest+0xa2>
     a16:	18 c1       	rjmp	.+560    	; 0xc48 <USB_Device_ProcessControlRequest+0x2d2>
     a18:	08 c0       	rjmp	.+16     	; 0xa2a <USB_Device_ProcessControlRequest+0xb4>
     a1a:	90 91 11 01 	lds	r25, 0x0111
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     a1e:	80 91 12 01 	lds	r24, 0x0112
     a22:	88 23       	and	r24, r24
     a24:	99 f0       	breq	.+38     	; 0xa4c <USB_Device_ProcessControlRequest+0xd6>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     a26:	92 60       	ori	r25, 0x02	; 2
     a28:	11 c0       	rjmp	.+34     	; 0xa4c <USB_Device_ProcessControlRequest+0xd6>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     a2a:	80 91 19 01 	lds	r24, 0x0119
     a2e:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     a30:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     a34:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	25 e0       	ldi	r18, 0x05	; 5
     a3c:	96 95       	lsr	r25
     a3e:	87 95       	ror	r24
     a40:	2a 95       	dec	r18
     a42:	e1 f7       	brne	.-8      	; 0xa3c <USB_Device_ProcessControlRequest+0xc6>
     a44:	98 2f       	mov	r25, r24
     a46:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     a48:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a4c:	80 91 e8 00 	lds	r24, 0x00E8
     a50:	87 7f       	andi	r24, 0xF7	; 247
     a52:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     a56:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
     a5a:	10 92 f1 00 	sts	0x00F1, r1
     a5e:	d1 c0       	rjmp	.+418    	; 0xc02 <USB_Device_ProcessControlRequest+0x28c>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a60:	88 23       	and	r24, r24
     a62:	19 f0       	breq	.+6      	; 0xa6a <USB_Device_ProcessControlRequest+0xf4>
     a64:	82 30       	cpi	r24, 0x02	; 2
     a66:	09 f0       	breq	.+2      	; 0xa6a <USB_Device_ProcessControlRequest+0xf4>
     a68:	ef c0       	rjmp	.+478    	; 0xc48 <USB_Device_ProcessControlRequest+0x2d2>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	8f 71       	andi	r24, 0x1F	; 31
     a6e:	90 70       	andi	r25, 0x00	; 0
     a70:	00 97       	sbiw	r24, 0x00	; 0
     a72:	21 f0       	breq	.+8      	; 0xa7c <USB_Device_ProcessControlRequest+0x106>
     a74:	02 97       	sbiw	r24, 0x02	; 2
     a76:	09 f0       	breq	.+2      	; 0xa7a <USB_Device_ProcessControlRequest+0x104>
     a78:	e7 c0       	rjmp	.+462    	; 0xc48 <USB_Device_ProcessControlRequest+0x2d2>
     a7a:	0c c0       	rjmp	.+24     	; 0xa94 <USB_Device_ProcessControlRequest+0x11e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     a7c:	80 91 17 01 	lds	r24, 0x0117
     a80:	81 30       	cpi	r24, 0x01	; 1
     a82:	09 f0       	breq	.+2      	; 0xa86 <USB_Device_ProcessControlRequest+0x110>
     a84:	e1 c0       	rjmp	.+450    	; 0xc48 <USB_Device_ProcessControlRequest+0x2d2>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     a86:	10 92 12 01 	sts	0x0112, r1
     a8a:	33 30       	cpi	r19, 0x03	; 3
     a8c:	69 f5       	brne	.+90     	; 0xae8 <USB_Device_ProcessControlRequest+0x172>
     a8e:	80 93 12 01 	sts	0x0112, r24
     a92:	2a c0       	rjmp	.+84     	; 0xae8 <USB_Device_ProcessControlRequest+0x172>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     a94:	80 91 17 01 	lds	r24, 0x0117
     a98:	88 23       	and	r24, r24
     a9a:	31 f5       	brne	.+76     	; 0xae8 <USB_Device_ProcessControlRequest+0x172>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     a9c:	20 91 19 01 	lds	r18, 0x0119
     aa0:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     aa2:	09 f4       	brne	.+2      	; 0xaa6 <USB_Device_ProcessControlRequest+0x130>
     aa4:	d1 c0       	rjmp	.+418    	; 0xc48 <USB_Device_ProcessControlRequest+0x2d2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     aa6:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     aaa:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     aae:	80 ff       	sbrs	r24, 0
     ab0:	1b c0       	rjmp	.+54     	; 0xae8 <USB_Device_ProcessControlRequest+0x172>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     ab2:	33 30       	cpi	r19, 0x03	; 3
     ab4:	21 f4       	brne	.+8      	; 0xabe <USB_Device_ProcessControlRequest+0x148>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     ab6:	80 91 eb 00 	lds	r24, 0x00EB
     aba:	80 62       	ori	r24, 0x20	; 32
     abc:	13 c0       	rjmp	.+38     	; 0xae4 <USB_Device_ProcessControlRequest+0x16e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     abe:	80 91 eb 00 	lds	r24, 0x00EB
     ac2:	80 61       	ori	r24, 0x10	; 16
     ac4:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	02 c0       	rjmp	.+4      	; 0xad2 <USB_Device_ProcessControlRequest+0x15c>
     ace:	88 0f       	add	r24, r24
     ad0:	99 1f       	adc	r25, r25
     ad2:	2a 95       	dec	r18
     ad4:	e2 f7       	brpl	.-8      	; 0xace <USB_Device_ProcessControlRequest+0x158>
     ad6:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     ada:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     ade:	80 91 eb 00 	lds	r24, 0x00EB
     ae2:	88 60       	ori	r24, 0x08	; 8
     ae4:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     ae8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     aec:	80 91 e8 00 	lds	r24, 0x00E8
     af0:	87 7f       	andi	r24, 0xF7	; 247
     af2:	8a c0       	rjmp	.+276    	; 0xc08 <USB_Device_ProcessControlRequest+0x292>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     af4:	88 23       	and	r24, r24
     af6:	09 f0       	breq	.+2      	; 0xafa <USB_Device_ProcessControlRequest+0x184>
     af8:	a7 c0       	rjmp	.+334    	; 0xc48 <USB_Device_ProcessControlRequest+0x2d2>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
     afa:	10 91 17 01 	lds	r17, 0x0117
     afe:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     b00:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     b02:	f8 94       	cli
     b04:	80 91 e8 00 	lds	r24, 0x00E8
     b08:	87 7f       	andi	r24, 0xF7	; 247
     b0a:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     b0e:	66 dc       	rcall	.-1844   	; 0x3dc <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b10:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     b14:	80 ff       	sbrs	r24, 0
     b16:	fc cf       	rjmp	.-8      	; 0xb10 <USB_Device_ProcessControlRequest+0x19a>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     b18:	80 91 e3 00 	lds	r24, 0x00E3
     b1c:	80 78       	andi	r24, 0x80	; 128
     b1e:	81 2b       	or	r24, r17

				UDADDR = Temp;
     b20:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
     b24:	80 68       	ori	r24, 0x80	; 128
     b26:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     b2a:	11 23       	and	r17, r17
     b2c:	11 f4       	brne	.+4      	; 0xb32 <USB_Device_ProcessControlRequest+0x1bc>
     b2e:	82 e0       	ldi	r24, 0x02	; 2
     b30:	01 c0       	rjmp	.+2      	; 0xb34 <USB_Device_ProcessControlRequest+0x1be>
     b32:	83 e0       	ldi	r24, 0x03	; 3
     b34:	80 93 14 01 	sts	0x0114, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     b38:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
     b3a:	86 c0       	rjmp	.+268    	; 0xc48 <USB_Device_ProcessControlRequest+0x2d2>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b3c:	80 58       	subi	r24, 0x80	; 128
     b3e:	82 30       	cpi	r24, 0x02	; 2
     b40:	08 f0       	brcs	.+2      	; 0xb44 <USB_Device_ProcessControlRequest+0x1ce>
     b42:	82 c0       	rjmp	.+260    	; 0xc48 <USB_Device_ProcessControlRequest+0x2d2>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     b44:	80 91 17 01 	lds	r24, 0x0117
     b48:	90 91 18 01 	lds	r25, 0x0118
     b4c:	23 e0       	ldi	r18, 0x03	; 3
     b4e:	8c 3d       	cpi	r24, 0xDC	; 220
     b50:	92 07       	cpc	r25, r18
     b52:	09 f0       	breq	.+2      	; 0xb56 <USB_Device_ProcessControlRequest+0x1e0>
     b54:	33 c0       	rjmp	.+102    	; 0xbbc <USB_Device_ProcessControlRequest+0x246>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     b56:	83 e0       	ldi	r24, 0x03	; 3
     b58:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     b5a:	8a e2       	ldi	r24, 0x2A	; 42
     b5c:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     b5e:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     b60:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     b62:	de 01       	movw	r26, r28
     b64:	15 96       	adiw	r26, 0x05	; 5
     b66:	6e e0       	ldi	r22, 0x0E	; 14
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     b6c:	11 e2       	ldi	r17, 0x21	; 33
     b6e:	e6 2f       	mov	r30, r22
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	10 93 57 00 	sts	0x0057, r17
     b76:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
     b78:	40 ff       	sbrs	r20, 0
     b7a:	03 c0       	rjmp	.+6      	; 0xb82 <USB_Device_ProcessControlRequest+0x20c>
					{
						SerialByte >>= 4;
     b7c:	82 95       	swap	r24
     b7e:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
     b80:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     b82:	8f 70       	andi	r24, 0x0F	; 15
     b84:	28 2f       	mov	r18, r24
     b86:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     b88:	8a 30       	cpi	r24, 0x0A	; 10
     b8a:	18 f0       	brcs	.+6      	; 0xb92 <USB_Device_ProcessControlRequest+0x21c>
     b8c:	c9 01       	movw	r24, r18
     b8e:	c7 96       	adiw	r24, 0x37	; 55
     b90:	02 c0       	rjmp	.+4      	; 0xb96 <USB_Device_ProcessControlRequest+0x220>
     b92:	c9 01       	movw	r24, r18
     b94:	c0 96       	adiw	r24, 0x30	; 48
     b96:	8d 93       	st	X+, r24
     b98:	9d 93       	st	X+, r25
     b9a:	4f 5f       	subi	r20, 0xFF	; 255
     b9c:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     b9e:	44 31       	cpi	r20, 0x14	; 20
     ba0:	51 05       	cpc	r21, r1
     ba2:	29 f7       	brne	.-54     	; 0xb6e <USB_Device_ProcessControlRequest+0x1f8>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     ba4:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ba6:	80 91 e8 00 	lds	r24, 0x00E8
     baa:	87 7f       	andi	r24, 0xF7	; 247
     bac:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     bb0:	ce 01       	movw	r24, r28
     bb2:	03 96       	adiw	r24, 0x03	; 3
     bb4:	6a e2       	ldi	r22, 0x2A	; 42
     bb6:	70 e0       	ldi	r23, 0x00	; 0
     bb8:	8c dd       	rcall	.-1256   	; 0x6d2 <Endpoint_Write_Control_Stream_LE>
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <USB_Device_ProcessControlRequest+0x26a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     bbc:	60 91 19 01 	lds	r22, 0x0119
     bc0:	ae 01       	movw	r20, r28
     bc2:	4f 5f       	subi	r20, 0xFF	; 255
     bc4:	5f 4f       	sbci	r21, 0xFF	; 255
     bc6:	95 db       	rcall	.-2262   	; 0x2f2 <CALLBACK_USB_GetDescriptor>
     bc8:	bc 01       	movw	r22, r24
     bca:	00 97       	sbiw	r24, 0x00	; 0
     bcc:	09 f4       	brne	.+2      	; 0xbd0 <USB_Device_ProcessControlRequest+0x25a>
     bce:	3c c0       	rjmp	.+120    	; 0xc48 <USB_Device_ProcessControlRequest+0x2d2>
     bd0:	80 91 e8 00 	lds	r24, 0x00E8
     bd4:	87 7f       	andi	r24, 0xF7	; 247
     bd6:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	9a 81       	ldd	r25, Y+2	; 0x02
     bde:	18 de       	rcall	.-976    	; 0x810 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     be0:	80 91 e8 00 	lds	r24, 0x00E8
     be4:	8b 77       	andi	r24, 0x7B	; 123
     be6:	80 93 e8 00 	sts	0x00E8, r24
     bea:	2e c0       	rjmp	.+92     	; 0xc48 <USB_Device_ProcessControlRequest+0x2d2>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     bec:	80 38       	cpi	r24, 0x80	; 128
     bee:	61 f5       	brne	.+88     	; 0xc48 <USB_Device_ProcessControlRequest+0x2d2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bf0:	80 91 e8 00 	lds	r24, 0x00E8
     bf4:	87 7f       	andi	r24, 0xF7	; 247
     bf6:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     bfa:	80 91 10 01 	lds	r24, 0x0110
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     bfe:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c02:	80 91 e8 00 	lds	r24, 0x00E8
     c06:	8e 77       	andi	r24, 0x7E	; 126
     c08:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     c0c:	e7 db       	rcall	.-2098   	; 0x3dc <Endpoint_ClearStatusStage>
     c0e:	1c c0       	rjmp	.+56     	; 0xc48 <USB_Device_ProcessControlRequest+0x2d2>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     c10:	88 23       	and	r24, r24
     c12:	d1 f4       	brne	.+52     	; 0xc48 <USB_Device_ProcessControlRequest+0x2d2>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     c14:	90 91 17 01 	lds	r25, 0x0117
     c18:	92 30       	cpi	r25, 0x02	; 2
     c1a:	b0 f4       	brcc	.+44     	; 0xc48 <USB_Device_ProcessControlRequest+0x2d2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c1c:	80 91 e8 00 	lds	r24, 0x00E8
     c20:	87 7f       	andi	r24, 0xF7	; 247
     c22:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     c26:	90 93 10 01 	sts	0x0110, r25

	Endpoint_ClearStatusStage();
     c2a:	d8 db       	rcall	.-2128   	; 0x3dc <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     c2c:	80 91 10 01 	lds	r24, 0x0110
     c30:	88 23       	and	r24, r24
     c32:	31 f4       	brne	.+12     	; 0xc40 <USB_Device_ProcessControlRequest+0x2ca>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     c34:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     c38:	87 fd       	sbrc	r24, 7
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <USB_Device_ProcessControlRequest+0x2ca>
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	01 c0       	rjmp	.+2      	; 0xc42 <USB_Device_ProcessControlRequest+0x2cc>
     c40:	84 e0       	ldi	r24, 0x04	; 4
     c42:	80 93 14 01 	sts	0x0114, r24

	EVENT_USB_Device_ConfigurationChanged();
     c46:	0f db       	rcall	.-2530   	; 0x266 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c48:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     c4c:	83 ff       	sbrs	r24, 3
     c4e:	0a c0       	rjmp	.+20     	; 0xc64 <USB_Device_ProcessControlRequest+0x2ee>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     c50:	80 91 eb 00 	lds	r24, 0x00EB
     c54:	80 62       	ori	r24, 0x20	; 32
     c56:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c5a:	80 91 e8 00 	lds	r24, 0x00E8
     c5e:	87 7f       	andi	r24, 0xF7	; 247
     c60:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
     c64:	ac 96       	adiw	r28, 0x2c	; 44
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	f8 94       	cli
     c6a:	de bf       	out	0x3e, r29	; 62
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	cd bf       	out	0x3d, r28	; 61
     c70:	cf 91       	pop	r28
     c72:	df 91       	pop	r29
     c74:	1f 91       	pop	r17
     c76:	0f 91       	pop	r16
     c78:	08 95       	ret

00000c7a <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     c7a:	08 95       	ret

00000c7c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     c7c:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
     c7e:	80 91 14 01 	lds	r24, 0x0114
     c82:	88 23       	and	r24, r24
     c84:	61 f0       	breq	.+24     	; 0xc9e <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     c86:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     c8a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c8e:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
     c92:	83 ff       	sbrs	r24, 3
     c94:	01 c0       	rjmp	.+2      	; 0xc98 <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
     c96:	6f de       	rcall	.-802    	; 0x976 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     c98:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     c9a:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
     c9e:	1f 91       	pop	r17
     ca0:	08 95       	ret

00000ca2 <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     ca2:	4f 92       	push	r4
     ca4:	5f 92       	push	r5
     ca6:	6f 92       	push	r6
     ca8:	7f 92       	push	r7
     caa:	8f 92       	push	r8
     cac:	9f 92       	push	r9
     cae:	af 92       	push	r10
     cb0:	bf 92       	push	r11
     cb2:	cf 92       	push	r12
     cb4:	df 92       	push	r13
     cb6:	ef 92       	push	r14
     cb8:	ff 92       	push	r15
     cba:	0f 93       	push	r16
     cbc:	1f 93       	push	r17
     cbe:	df 93       	push	r29
     cc0:	cf 93       	push	r28
     cc2:	00 d0       	rcall	.+0      	; 0xcc4 <HID_Device_USBTask+0x22>
     cc4:	0f 92       	push	r0
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
     cca:	7c 01       	movw	r14, r24
			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);

			Endpoint_ClearIN();
		}
	}
}
     ccc:	6d b6       	in	r6, 0x3d	; 61
     cce:	7e b6       	in	r7, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
     cd0:	80 91 14 01 	lds	r24, 0x0114
     cd4:	84 30       	cpi	r24, 0x04	; 4
     cd6:	09 f0       	breq	.+2      	; 0xcda <HID_Device_USBTask+0x38>
     cd8:	85 c0       	rjmp	.+266    	; 0xde4 <HID_Device_USBTask+0x142>
	  return;

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
     cda:	f7 01       	movw	r30, r14
     cdc:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     cde:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     ce2:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsReadWriteAllowed())
     ce6:	85 ff       	sbrs	r24, 5
     ce8:	7d c0       	rjmp	.+250    	; 0xde4 <HID_Device_USBTask+0x142>
     cea:	5d b6       	in	r5, 0x3d	; 61
     cec:	4e b6       	in	r4, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     cee:	47 81       	ldd	r20, Z+7	; 0x07
     cf0:	8d b7       	in	r24, 0x3d	; 61
     cf2:	9e b7       	in	r25, 0x3e	; 62
     cf4:	84 1b       	sub	r24, r20
     cf6:	91 09       	sbc	r25, r1
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	9e bf       	out	0x3e, r25	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	8d bf       	out	0x3d, r24	; 61
     d02:	0d b7       	in	r16, 0x3d	; 61
     d04:	1e b7       	in	r17, 0x3e	; 62
     d06:	0f 5f       	subi	r16, 0xFF	; 255
     d08:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t  ReportID     = 0;
     d0a:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
     d0c:	1b 82       	std	Y+3, r1	; 0x03
     d0e:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
     d10:	c0 2e       	mov	r12, r16
     d12:	91 2e       	mov	r9, r17
     d14:	c8 01       	movw	r24, r16
     d16:	60 e0       	ldi	r22, 0x00	; 0
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	50 e0       	ldi	r21, 0x00	; 0
     d1c:	04 d2       	rcall	.+1032   	; 0x1126 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
     d1e:	c7 01       	movw	r24, r14
     d20:	be 01       	movw	r22, r28
     d22:	6f 5f       	subi	r22, 0xFF	; 255
     d24:	7f 4f       	sbci	r23, 0xFF	; 255
     d26:	40 e0       	ldi	r20, 0x00	; 0
     d28:	98 01       	movw	r18, r16
     d2a:	8e 01       	movw	r16, r28
     d2c:	0e 5f       	subi	r16, 0xFE	; 254
     d2e:	1f 4f       	sbci	r17, 0xFF	; 255
     d30:	3d da       	rcall	.-2950   	; 0x1ac <CALLBACK_HID_Device_CreateHIDReport>
     d32:	88 2e       	mov	r8, r24
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
     d34:	f7 01       	movw	r30, r14
     d36:	81 85       	ldd	r24, Z+9	; 0x09
     d38:	92 85       	ldd	r25, Z+10	; 0x0a
     d3a:	89 2b       	or	r24, r25
     d3c:	19 f4       	brne	.+6      	; 0xd44 <HID_Device_USBTask+0xa2>
     d3e:	aa 24       	eor	r10, r10
     d40:	bb 24       	eor	r11, r11
     d42:	0b c0       	rjmp	.+22     	; 0xd5a <HID_Device_USBTask+0xb8>
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	f7 01       	movw	r30, r14
     d48:	83 85       	ldd	r24, Z+11	; 0x0b
     d4a:	94 85       	ldd	r25, Z+12	; 0x0c
     d4c:	89 2b       	or	r24, r25
     d4e:	09 f0       	breq	.+2      	; 0xd52 <HID_Device_USBTask+0xb0>
     d50:	21 e0       	ldi	r18, 0x01	; 1
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	28 27       	eor	r18, r24
     d56:	a2 2e       	mov	r10, r18
     d58:	bb 24       	eor	r11, r11

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     d5a:	f7 01       	movw	r30, r14
     d5c:	05 81       	ldd	r16, Z+5	; 0x05
     d5e:	16 81       	ldd	r17, Z+6	; 0x06
     d60:	01 15       	cp	r16, r1
     d62:	11 05       	cpc	r17, r1
     d64:	11 f4       	brne	.+4      	; 0xd6a <HID_Device_USBTask+0xc8>
     d66:	dd 24       	eor	r13, r13
     d68:	12 c0       	rjmp	.+36     	; 0xd8e <HID_Device_USBTask+0xec>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
     d6a:	4a 81       	ldd	r20, Y+2	; 0x02
     d6c:	5b 81       	ldd	r21, Y+3	; 0x03
     d6e:	8c 2d       	mov	r24, r12
     d70:	99 2d       	mov	r25, r9
     d72:	b8 01       	movw	r22, r16
     d74:	c2 d1       	rcall	.+900    	; 0x10fa <memcmp>
     d76:	dd 24       	eor	r13, r13
     d78:	00 97       	sbiw	r24, 0x00	; 0
     d7a:	11 f0       	breq	.+4      	; 0xd80 <HID_Device_USBTask+0xde>
     d7c:	dd 24       	eor	r13, r13
     d7e:	d3 94       	inc	r13
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
     d80:	f7 01       	movw	r30, r14
     d82:	47 81       	ldd	r20, Z+7	; 0x07
     d84:	c8 01       	movw	r24, r16
     d86:	6c 2d       	mov	r22, r12
     d88:	79 2d       	mov	r23, r9
     d8a:	50 e0       	ldi	r21, 0x00	; 0
     d8c:	c3 d1       	rcall	.+902    	; 0x1114 <memcpy>
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
     d8e:	8a 81       	ldd	r24, Y+2	; 0x02
     d90:	9b 81       	ldd	r25, Y+3	; 0x03
     d92:	89 2b       	or	r24, r25
     d94:	f9 f0       	breq	.+62     	; 0xdd4 <HID_Device_USBTask+0x132>
     d96:	88 20       	and	r8, r8
     d98:	21 f4       	brne	.+8      	; 0xda2 <HID_Device_USBTask+0x100>
     d9a:	dd 20       	and	r13, r13
     d9c:	11 f4       	brne	.+4      	; 0xda2 <HID_Device_USBTask+0x100>
     d9e:	ab 28       	or	r10, r11
     da0:	c9 f0       	breq	.+50     	; 0xdd4 <HID_Device_USBTask+0x132>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
     da2:	f7 01       	movw	r30, r14
     da4:	81 85       	ldd	r24, Z+9	; 0x09
     da6:	92 85       	ldd	r25, Z+10	; 0x0a
     da8:	94 87       	std	Z+12, r25	; 0x0c
     daa:	83 87       	std	Z+11, r24	; 0x0b

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
     dac:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     dae:	80 93 e9 00 	sts	0x00E9, r24

			if (ReportID)
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	88 23       	and	r24, r24
     db6:	11 f0       	breq	.+4      	; 0xdbc <HID_Device_USBTask+0x11a>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     db8:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
     dbc:	6a 81       	ldd	r22, Y+2	; 0x02
     dbe:	7b 81       	ldd	r23, Y+3	; 0x03
     dc0:	8c 2d       	mov	r24, r12
     dc2:	99 2d       	mov	r25, r9
     dc4:	40 e0       	ldi	r20, 0x00	; 0
     dc6:	50 e0       	ldi	r21, 0x00	; 0
     dc8:	84 dd       	rcall	.-1272   	; 0x8d2 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     dca:	80 91 e8 00 	lds	r24, 0x00E8
     dce:	8e 77       	andi	r24, 0x7E	; 126
     dd0:	80 93 e8 00 	sts	0x00E8, r24
     dd4:	85 2d       	mov	r24, r5
     dd6:	94 2d       	mov	r25, r4
     dd8:	9c 01       	movw	r18, r24
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	3e bf       	out	0x3e, r19	; 62
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	2d bf       	out	0x3d, r18	; 61

			Endpoint_ClearIN();
		}
	}
}
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	f8 94       	cli
     de8:	7e be       	out	0x3e, r7	; 62
     dea:	0f be       	out	0x3f, r0	; 63
     dec:	6d be       	out	0x3d, r6	; 61
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	0f 90       	pop	r0
     df4:	cf 91       	pop	r28
     df6:	df 91       	pop	r29
     df8:	1f 91       	pop	r17
     dfa:	0f 91       	pop	r16
     dfc:	ff 90       	pop	r15
     dfe:	ef 90       	pop	r14
     e00:	df 90       	pop	r13
     e02:	cf 90       	pop	r12
     e04:	bf 90       	pop	r11
     e06:	af 90       	pop	r10
     e08:	9f 90       	pop	r9
     e0a:	8f 90       	pop	r8
     e0c:	7f 90       	pop	r7
     e0e:	6f 90       	pop	r6
     e10:	5f 90       	pop	r5
     e12:	4f 90       	pop	r4
     e14:	08 95       	ret

00000e16 <HID_Device_ConfigureEndpoints>:
			break;
	}
}

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	dc 01       	movw	r26, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
     e1c:	08 96       	adiw	r24, 0x08	; 8
     e1e:	fc 01       	movw	r30, r24
     e20:	85 e0       	ldi	r24, 0x05	; 5
     e22:	ef 01       	movw	r28, r30
     e24:	19 92       	st	Y+, r1
     e26:	8a 95       	dec	r24
     e28:	e9 f7       	brne	.-6      	; 0xe24 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	18 96       	adiw	r26, 0x08	; 8
     e2e:	8c 93       	st	X, r24
     e30:	18 97       	sbiw	r26, 0x08	; 8
	HIDInterfaceInfo->State.IdleCount           = 500;
     e32:	84 ef       	ldi	r24, 0xF4	; 244
     e34:	91 e0       	ldi	r25, 0x01	; 1
     e36:	1a 96       	adiw	r26, 0x0a	; 10
     e38:	9c 93       	st	X, r25
     e3a:	8e 93       	st	-X, r24
     e3c:	19 97       	sbiw	r26, 0x09	; 9

	if (!(Endpoint_ConfigureEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber, EP_TYPE_INTERRUPT,
     e3e:	11 96       	adiw	r26, 0x01	; 1
     e40:	3c 91       	ld	r19, X
     e42:	11 97       	sbiw	r26, 0x01	; 1
     e44:	12 96       	adiw	r26, 0x02	; 2
     e46:	6d 91       	ld	r22, X+
     e48:	7c 91       	ld	r23, X
     e4a:	13 97       	sbiw	r26, 0x03	; 3
     e4c:	14 96       	adiw	r26, 0x04	; 4
     e4e:	8c 91       	ld	r24, X
     e50:	88 23       	and	r24, r24
     e52:	11 f4       	brne	.+4      	; 0xe58 <HID_Device_ConfigureEndpoints+0x42>
     e54:	40 e0       	ldi	r20, 0x00	; 0
     e56:	01 c0       	rjmp	.+2      	; 0xe5a <HID_Device_ConfigureEndpoints+0x44>
     e58:	44 e0       	ldi	r20, 0x04	; 4
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	88 e0       	ldi	r24, 0x08	; 8
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	03 c0       	rjmp	.+6      	; 0xe68 <HID_Device_ConfigureEndpoints+0x52>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     e62:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     e68:	86 17       	cp	r24, r22
     e6a:	97 07       	cpc	r25, r23
     e6c:	d0 f3       	brcs	.-12     	; 0xe62 <HID_Device_ConfigureEndpoints+0x4c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     e6e:	42 60       	ori	r20, 0x02	; 2
     e70:	22 95       	swap	r18
     e72:	20 7f       	andi	r18, 0xF0	; 240
     e74:	42 2b       	or	r20, r18
     e76:	83 2f       	mov	r24, r19
     e78:	61 ec       	ldi	r22, 0xC1	; 193
     e7a:	7b da       	rcall	.-2826   	; 0x372 <Endpoint_ConfigureEndpoint_Prv>
     e7c:	81 11       	cpse	r24, r1
     e7e:	81 e0       	ldi	r24, 0x01	; 1
	{
		return false;
	}

	return true;
}
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	08 95       	ret

00000e86 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     e86:	6f 92       	push	r6
     e88:	7f 92       	push	r7
     e8a:	8f 92       	push	r8
     e8c:	9f 92       	push	r9
     e8e:	af 92       	push	r10
     e90:	bf 92       	push	r11
     e92:	cf 92       	push	r12
     e94:	df 92       	push	r13
     e96:	ef 92       	push	r14
     e98:	ff 92       	push	r15
     e9a:	0f 93       	push	r16
     e9c:	1f 93       	push	r17
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	00 d0       	rcall	.+0      	; 0xea4 <HID_Device_ProcessControlRequest+0x1e>
     ea4:	0f 92       	push	r0
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     eac:	6d b6       	in	r6, 0x3d	; 61
     eae:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     eb0:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     eb4:	83 ff       	sbrs	r24, 3
     eb6:	0a c1       	rjmp	.+532    	; 0x10cc <HID_Device_ProcessControlRequest+0x246>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     eb8:	f6 01       	movw	r30, r12
     eba:	80 81       	ld	r24, Z
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	20 91 19 01 	lds	r18, 0x0119
     ec2:	30 91 1a 01 	lds	r19, 0x011A
     ec6:	28 17       	cp	r18, r24
     ec8:	39 07       	cpc	r19, r25
     eca:	09 f0       	breq	.+2      	; 0xece <HID_Device_ProcessControlRequest+0x48>
     ecc:	ff c0       	rjmp	.+510    	; 0x10cc <HID_Device_ProcessControlRequest+0x246>
	  return;

	switch (USB_ControlRequest.bRequest)
     ece:	80 91 16 01 	lds	r24, 0x0116
     ed2:	83 30       	cpi	r24, 0x03	; 3
     ed4:	09 f4       	brne	.+2      	; 0xed8 <HID_Device_ProcessControlRequest+0x52>
     ed6:	aa c0       	rjmp	.+340    	; 0x102c <HID_Device_ProcessControlRequest+0x1a6>
     ed8:	84 30       	cpi	r24, 0x04	; 4
     eda:	30 f4       	brcc	.+12     	; 0xee8 <HID_Device_ProcessControlRequest+0x62>
     edc:	81 30       	cpi	r24, 0x01	; 1
     ede:	71 f0       	breq	.+28     	; 0xefc <HID_Device_ProcessControlRequest+0x76>
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	09 f0       	breq	.+2      	; 0xee6 <HID_Device_ProcessControlRequest+0x60>
     ee4:	f3 c0       	rjmp	.+486    	; 0x10cc <HID_Device_ProcessControlRequest+0x246>
     ee6:	da c0       	rjmp	.+436    	; 0x109c <HID_Device_ProcessControlRequest+0x216>
     ee8:	8a 30       	cpi	r24, 0x0A	; 10
     eea:	09 f4       	brne	.+2      	; 0xeee <HID_Device_ProcessControlRequest+0x68>
     eec:	bf c0       	rjmp	.+382    	; 0x106c <HID_Device_ProcessControlRequest+0x1e6>
     eee:	8b 30       	cpi	r24, 0x0B	; 11
     ef0:	09 f4       	brne	.+2      	; 0xef4 <HID_Device_ProcessControlRequest+0x6e>
     ef2:	a9 c0       	rjmp	.+338    	; 0x1046 <HID_Device_ProcessControlRequest+0x1c0>
     ef4:	89 30       	cpi	r24, 0x09	; 9
     ef6:	09 f0       	breq	.+2      	; 0xefa <HID_Device_ProcessControlRequest+0x74>
     ef8:	e9 c0       	rjmp	.+466    	; 0x10cc <HID_Device_ProcessControlRequest+0x246>
     efa:	55 c0       	rjmp	.+170    	; 0xfa6 <HID_Device_ProcessControlRequest+0x120>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     efc:	80 91 15 01 	lds	r24, 0x0115
     f00:	81 3a       	cpi	r24, 0xA1	; 161
     f02:	09 f0       	breq	.+2      	; 0xf06 <HID_Device_ProcessControlRequest+0x80>
     f04:	e3 c0       	rjmp	.+454    	; 0x10cc <HID_Device_ProcessControlRequest+0x246>
     f06:	9d b6       	in	r9, 0x3d	; 61
     f08:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
     f0a:	1b 82       	std	Y+3, r1	; 0x03
     f0c:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     f0e:	80 91 17 01 	lds	r24, 0x0117
     f12:	10 91 18 01 	lds	r17, 0x0118
     f16:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     f18:	f6 01       	movw	r30, r12
     f1a:	47 81       	ldd	r20, Z+7	; 0x07
     f1c:	8d b7       	in	r24, 0x3d	; 61
     f1e:	9e b7       	in	r25, 0x3e	; 62
     f20:	84 1b       	sub	r24, r20
     f22:	91 09       	sbc	r25, r1
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	f8 94       	cli
     f28:	9e bf       	out	0x3e, r25	; 62
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	8d bf       	out	0x3d, r24	; 61
     f2e:	ed b6       	in	r14, 0x3d	; 61
     f30:	fe b6       	in	r15, 0x3e	; 62
     f32:	08 94       	sec
     f34:	e1 1c       	adc	r14, r1
     f36:	f1 1c       	adc	r15, r1

				memset(ReportData, 0, sizeof(ReportData));
     f38:	be 2c       	mov	r11, r14
     f3a:	af 2c       	mov	r10, r15
     f3c:	c7 01       	movw	r24, r14
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	50 e0       	ldi	r21, 0x00	; 0
     f44:	f0 d0       	rcall	.+480    	; 0x1126 <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     f46:	11 50       	subi	r17, 0x01	; 1
     f48:	c6 01       	movw	r24, r12
     f4a:	be 01       	movw	r22, r28
     f4c:	6f 5f       	subi	r22, 0xFF	; 255
     f4e:	7f 4f       	sbci	r23, 0xFF	; 255
     f50:	41 2f       	mov	r20, r17
     f52:	97 01       	movw	r18, r14
     f54:	8e 01       	movw	r16, r28
     f56:	0e 5f       	subi	r16, 0xFE	; 254
     f58:	1f 4f       	sbci	r17, 0xFF	; 255
     f5a:	28 d9       	rcall	.-3504   	; 0x1ac <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     f5c:	f6 01       	movw	r30, r12
     f5e:	25 81       	ldd	r18, Z+5	; 0x05
     f60:	36 81       	ldd	r19, Z+6	; 0x06
     f62:	21 15       	cp	r18, r1
     f64:	31 05       	cpc	r19, r1
     f66:	29 f0       	breq	.+10     	; 0xf72 <HID_Device_ProcessControlRequest+0xec>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     f68:	47 81       	ldd	r20, Z+7	; 0x07
     f6a:	c9 01       	movw	r24, r18
     f6c:	b7 01       	movw	r22, r14
     f6e:	50 e0       	ldi	r21, 0x00	; 0
     f70:	d1 d0       	rcall	.+418    	; 0x1114 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     f72:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f76:	80 91 e8 00 	lds	r24, 0x00E8
     f7a:	87 7f       	andi	r24, 0xF7	; 247
     f7c:	80 93 e8 00 	sts	0x00E8, r24
				}
				
				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     f80:	6a 81       	ldd	r22, Y+2	; 0x02
     f82:	7b 81       	ldd	r23, Y+3	; 0x03
     f84:	8b 2d       	mov	r24, r11
     f86:	9a 2d       	mov	r25, r10
     f88:	a4 db       	rcall	.-2232   	; 0x6d2 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f8a:	80 91 e8 00 	lds	r24, 0x00E8
     f8e:	8b 77       	andi	r24, 0x7B	; 123
     f90:	80 93 e8 00 	sts	0x00E8, r24
     f94:	29 2d       	mov	r18, r9
     f96:	38 2d       	mov	r19, r8
     f98:	c9 01       	movw	r24, r18
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	f8 94       	cli
     f9e:	9e bf       	out	0x3e, r25	; 62
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	8d bf       	out	0x3d, r24	; 61
     fa4:	93 c0       	rjmp	.+294    	; 0x10cc <HID_Device_ProcessControlRequest+0x246>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     fa6:	80 91 15 01 	lds	r24, 0x0115
     faa:	81 32       	cpi	r24, 0x21	; 33
     fac:	09 f0       	breq	.+2      	; 0xfb0 <HID_Device_ProcessControlRequest+0x12a>
     fae:	8e c0       	rjmp	.+284    	; 0x10cc <HID_Device_ProcessControlRequest+0x246>
     fb0:	9d b6       	in	r9, 0x3d	; 61
     fb2:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
     fb4:	00 91 1b 01 	lds	r16, 0x011B
     fb8:	10 91 1c 01 	lds	r17, 0x011C
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     fbc:	a0 90 17 01 	lds	r10, 0x0117
     fc0:	b0 90 18 01 	lds	r11, 0x0118
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     fc4:	8d b7       	in	r24, 0x3d	; 61
     fc6:	9e b7       	in	r25, 0x3e	; 62
     fc8:	80 1b       	sub	r24, r16
     fca:	91 0b       	sbc	r25, r17
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	f8 94       	cli
     fd0:	9e bf       	out	0x3e, r25	; 62
     fd2:	0f be       	out	0x3f, r0	; 63
     fd4:	8d bf       	out	0x3d, r24	; 61
     fd6:	ed b6       	in	r14, 0x3d	; 61
     fd8:	fe b6       	in	r15, 0x3e	; 62
     fda:	08 94       	sec
     fdc:	e1 1c       	adc	r14, r1
     fde:	f1 1c       	adc	r15, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fe0:	80 91 e8 00 	lds	r24, 0x00E8
     fe4:	87 7f       	andi	r24, 0xF7	; 247
     fe6:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     fea:	c7 01       	movw	r24, r14
     fec:	b8 01       	movw	r22, r16
     fee:	cf db       	rcall	.-2146   	; 0x78e <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ff0:	80 91 e8 00 	lds	r24, 0x00E8
     ff4:	8e 77       	andi	r24, 0x7E	; 126
     ff6:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	aa 20       	and	r10, r10
    1000:	11 f0       	breq	.+4      	; 0x1006 <HID_Device_ProcessControlRequest+0x180>
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	ba 94       	dec	r11
    1008:	e8 0e       	add	r14, r24
    100a:	f9 1e       	adc	r15, r25
    100c:	08 1b       	sub	r16, r24
    100e:	19 0b       	sbc	r17, r25
    1010:	c6 01       	movw	r24, r12
    1012:	6a 2d       	mov	r22, r10
    1014:	4b 2d       	mov	r20, r11
    1016:	97 01       	movw	r18, r14
    1018:	22 d9       	rcall	.-3516   	; 0x25e <CALLBACK_HID_Device_ProcessHIDReport>
    101a:	89 2d       	mov	r24, r9
    101c:	98 2d       	mov	r25, r8
    101e:	9c 01       	movw	r18, r24
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	3e bf       	out	0x3e, r19	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	2d bf       	out	0x3d, r18	; 61
    102a:	50 c0       	rjmp	.+160    	; 0x10cc <HID_Device_ProcessControlRequest+0x246>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    102c:	80 91 15 01 	lds	r24, 0x0115
    1030:	81 3a       	cpi	r24, 0xA1	; 161
    1032:	09 f0       	breq	.+2      	; 0x1036 <HID_Device_ProcessControlRequest+0x1b0>
    1034:	4b c0       	rjmp	.+150    	; 0x10cc <HID_Device_ProcessControlRequest+0x246>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1036:	80 91 e8 00 	lds	r24, 0x00E8
    103a:	87 7f       	andi	r24, 0xF7	; 247
    103c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    1040:	f6 01       	movw	r30, r12
    1042:	80 85       	ldd	r24, Z+8	; 0x08
    1044:	3b c0       	rjmp	.+118    	; 0x10bc <HID_Device_ProcessControlRequest+0x236>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1046:	80 91 15 01 	lds	r24, 0x0115
    104a:	81 32       	cpi	r24, 0x21	; 33
    104c:	09 f0       	breq	.+2      	; 0x1050 <HID_Device_ProcessControlRequest+0x1ca>
    104e:	3e c0       	rjmp	.+124    	; 0x10cc <HID_Device_ProcessControlRequest+0x246>
    1050:	80 91 e8 00 	lds	r24, 0x00E8
    1054:	87 7f       	andi	r24, 0xF7	; 247
    1056:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    105a:	c0 d9       	rcall	.-3200   	; 0x3dc <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	80 91 17 01 	lds	r24, 0x0117
    1062:	81 11       	cpse	r24, r1
    1064:	91 e0       	ldi	r25, 0x01	; 1
    1066:	f6 01       	movw	r30, r12
    1068:	90 87       	std	Z+8, r25	; 0x08
    106a:	30 c0       	rjmp	.+96     	; 0x10cc <HID_Device_ProcessControlRequest+0x246>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    106c:	80 91 15 01 	lds	r24, 0x0115
    1070:	81 32       	cpi	r24, 0x21	; 33
    1072:	61 f5       	brne	.+88     	; 0x10cc <HID_Device_ProcessControlRequest+0x246>
    1074:	80 91 e8 00 	lds	r24, 0x00E8
    1078:	87 7f       	andi	r24, 0xF7	; 247
    107a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    107e:	ae d9       	rcall	.-3236   	; 0x3dc <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    1080:	80 91 17 01 	lds	r24, 0x0117
    1084:	90 91 18 01 	lds	r25, 0x0118
    1088:	80 70       	andi	r24, 0x00	; 0
    108a:	76 e0       	ldi	r23, 0x06	; 6
    108c:	96 95       	lsr	r25
    108e:	87 95       	ror	r24
    1090:	7a 95       	dec	r23
    1092:	e1 f7       	brne	.-8      	; 0x108c <HID_Device_ProcessControlRequest+0x206>
    1094:	f6 01       	movw	r30, r12
    1096:	92 87       	std	Z+10, r25	; 0x0a
    1098:	81 87       	std	Z+9, r24	; 0x09
    109a:	18 c0       	rjmp	.+48     	; 0x10cc <HID_Device_ProcessControlRequest+0x246>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    109c:	80 91 15 01 	lds	r24, 0x0115
    10a0:	81 3a       	cpi	r24, 0xA1	; 161
    10a2:	a1 f4       	brne	.+40     	; 0x10cc <HID_Device_ProcessControlRequest+0x246>
    10a4:	80 91 e8 00 	lds	r24, 0x00E8
    10a8:	87 7f       	andi	r24, 0xF7	; 247
    10aa:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    10ae:	f6 01       	movw	r30, r12
    10b0:	81 85       	ldd	r24, Z+9	; 0x09
    10b2:	92 85       	ldd	r25, Z+10	; 0x0a
    10b4:	96 95       	lsr	r25
    10b6:	87 95       	ror	r24
    10b8:	96 95       	lsr	r25
    10ba:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    10bc:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10c0:	80 91 e8 00 	lds	r24, 0x00E8
    10c4:	8e 77       	andi	r24, 0x7E	; 126
    10c6:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    10ca:	88 d9       	rcall	.-3312   	; 0x3dc <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	7e be       	out	0x3e, r7	; 62
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	6d be       	out	0x3d, r6	; 61
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	1f 91       	pop	r17
    10e2:	0f 91       	pop	r16
    10e4:	ff 90       	pop	r15
    10e6:	ef 90       	pop	r14
    10e8:	df 90       	pop	r13
    10ea:	cf 90       	pop	r12
    10ec:	bf 90       	pop	r11
    10ee:	af 90       	pop	r10
    10f0:	9f 90       	pop	r9
    10f2:	8f 90       	pop	r8
    10f4:	7f 90       	pop	r7
    10f6:	6f 90       	pop	r6
    10f8:	08 95       	ret

000010fa <memcmp>:
    10fa:	fb 01       	movw	r30, r22
    10fc:	dc 01       	movw	r26, r24
    10fe:	04 c0       	rjmp	.+8      	; 0x1108 <memcmp+0xe>
    1100:	8d 91       	ld	r24, X+
    1102:	01 90       	ld	r0, Z+
    1104:	80 19       	sub	r24, r0
    1106:	21 f4       	brne	.+8      	; 0x1110 <memcmp+0x16>
    1108:	41 50       	subi	r20, 0x01	; 1
    110a:	50 40       	sbci	r21, 0x00	; 0
    110c:	c8 f7       	brcc	.-14     	; 0x1100 <memcmp+0x6>
    110e:	88 1b       	sub	r24, r24
    1110:	99 0b       	sbc	r25, r25
    1112:	08 95       	ret

00001114 <memcpy>:
    1114:	fb 01       	movw	r30, r22
    1116:	dc 01       	movw	r26, r24
    1118:	02 c0       	rjmp	.+4      	; 0x111e <memcpy+0xa>
    111a:	01 90       	ld	r0, Z+
    111c:	0d 92       	st	X+, r0
    111e:	41 50       	subi	r20, 0x01	; 1
    1120:	50 40       	sbci	r21, 0x00	; 0
    1122:	d8 f7       	brcc	.-10     	; 0x111a <memcpy+0x6>
    1124:	08 95       	ret

00001126 <memset>:
    1126:	dc 01       	movw	r26, r24
    1128:	01 c0       	rjmp	.+2      	; 0x112c <memset+0x6>
    112a:	6d 93       	st	X+, r22
    112c:	41 50       	subi	r20, 0x01	; 1
    112e:	50 40       	sbci	r21, 0x00	; 0
    1130:	e0 f7       	brcc	.-8      	; 0x112a <memset+0x4>
    1132:	08 95       	ret

00001134 <_exit>:
    1134:	f8 94       	cli

00001136 <__stop_program>:
    1136:	ff cf       	rjmp	.-2      	; 0x1136 <__stop_program>
