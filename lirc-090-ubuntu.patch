--- drivers/lirc_dev/lirc_dev.c	2017-08-25 11:50:22.062131639 +0200
+++ drivers/lirc_dev/lirc_dev.c.org	2017-08-25 11:47:19.058563230 +0200
@@ -620,7 +620,7 @@
 
 unsigned int lirc_dev_fop_poll(struct file *file, poll_table *wait)
 {
-	struct irctl *ir = irctls[iminor(file->f_path.dentry->d_inode)];
+	struct irctl *ir = irctls[iminor(file->f_dentry->d_inode)];
 	unsigned int ret;
 
 	if (!ir) {
@@ -666,7 +666,7 @@
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 35)
 	struct irctl *ir = irctls[iminor(inode)];
 #else
-	struct irctl *ir = irctls[iminor(file->f_path.dentry->d_inode)];
+	struct irctl *ir = irctls[iminor(file->f_dentry->d_inode)];
 #endif
 	if (!ir) {
 		printk(KERN_ERR "lirc_dev: %s: no irctl found!\n", __func__);
@@ -751,7 +751,7 @@
 			  size_t length,
 			  loff_t *ppos)
 {
-	struct irctl *ir = irctls[iminor(file->f_path.dentry->d_inode)];
+	struct irctl *ir = irctls[iminor(file->f_dentry->d_inode)];
 	unsigned char *buf;
 	int ret = 0, written = 0;
 	DECLARE_WAITQUEUE(wait, current);
@@ -852,10 +852,10 @@
 {
 	void *data = NULL;
 
-	if (file && file->f_path.dentry && file->f_path.dentry->d_inode &&
-	    file->f_path.dentry->d_inode->i_rdev) {
+	if (file && file->f_dentry && file->f_dentry->d_inode &&
+	    file->f_dentry->d_inode->i_rdev) {
 		struct irctl *ir;
-		ir = irctls[iminor(file->f_path.dentry->d_inode)];
+		ir = irctls[iminor(file->f_dentry->d_inode)];
 		data = ir->d.data;
 	}
 
@@ -867,7 +867,7 @@
 ssize_t lirc_dev_fop_write(struct file *file, const char *buffer,
 			   size_t length, loff_t *ppos)
 {
-	struct irctl *ir = irctls[iminor(file->f_path.dentry->d_inode)];
+	struct irctl *ir = irctls[iminor(file->f_dentry->d_inode)];
 
 	if (!ir) {
 		printk(KERN_ERR "%s: called with invalid irctl\n", __func__);
--- drivers/lirc_atiusb/lirc_atiusb.c	2017-08-25 11:55:19.459902443 +0200
+++ drivers/lirc_atiusb/lirc_atiusb.c.org	2017-08-25 11:54:38.691111771 +0200
@@ -48,7 +48,7 @@
 #include <linux/slab.h>
 #include <linux/module.h>
 #include <linux/kmod.h>
-// #include <linux/smp_lock.h>
+#include <linux/smp_lock.h>
 #include <linux/completion.h>
 #include <linux/uaccess.h>
 #include <linux/usb.h>
