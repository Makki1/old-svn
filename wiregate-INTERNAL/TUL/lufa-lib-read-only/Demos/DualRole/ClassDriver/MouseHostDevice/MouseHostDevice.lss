
MouseHostDevice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000dc  00800100  00002b6e  00002c02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  008001dc  008001dc  00002cde  2**0
                  ALLOC
  3 .stab         00002580  00000000  00000000  00002ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ebd  00000000  00000000  00005260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000a48  00000000  00000000  0000611d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001a50  00000000  00000000  00006b65  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0001312c  00000000  00000000  000085b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000042fd  00000000  00000000  0001b6e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000d2b5  00000000  00000000  0001f9de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001070  00000000  00000000  0002cc94  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000626a  00000000  00000000  0002dd04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008449  00000000  00000000  00033f6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000bc0  00000000  00000000  0003c3b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       0:	34 c1       	rjmp	.+616    	; 0x26a <__ctors_end>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       2:	00 00       	nop
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       4:	50 c1       	rjmp	.+672    	; 0x2a6 <__bad_interrupt>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       6:	00 00       	nop
	return USB_Host_SendControlRequest(NULL);
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
       8:	4e c1       	rjmp	.+668    	; 0x2a6 <__bad_interrupt>
		  ReportData[CurrentBit / 8] |= BitMask;

		CurrentBit++;
		BitMask <<= 1;
	}
}
       a:	00 00       	nop
	return HOST_SENDCONTROL_Successful;
}

uint8_t HID_Host_SetIdlePeriod(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               const uint16_t MS)
{
       c:	4c c1       	rjmp	.+664    	; 0x2a6 <__bad_interrupt>

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       e:	00 00       	nop
      10:	4a c1       	rjmp	.+660    	; 0x2a6 <__bad_interrupt>
      12:	00 00       	nop
      14:	48 c1       	rjmp	.+656    	; 0x2a6 <__bad_interrupt>
      16:	00 00       	nop
      18:	46 c1       	rjmp	.+652    	; 0x2a6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	44 c1       	rjmp	.+648    	; 0x2a6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	42 c1       	rjmp	.+644    	; 0x2a6 <__bad_interrupt>
      22:	00 00       	nop
      24:	40 c1       	rjmp	.+640    	; 0x2a6 <__bad_interrupt>
      26:	00 00       	nop
      28:	82 c7       	rjmp	.+3844   	; 0xf2e <__vector_10>
      2a:	00 00       	nop
      2c:	3c c1       	rjmp	.+632    	; 0x2a6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	3a c1       	rjmp	.+628    	; 0x2a6 <__bad_interrupt>
      32:	00 00       	nop
      34:	38 c1       	rjmp	.+624    	; 0x2a6 <__bad_interrupt>
      36:	00 00       	nop
      38:	36 c1       	rjmp	.+620    	; 0x2a6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	34 c1       	rjmp	.+616    	; 0x2a6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	32 c1       	rjmp	.+612    	; 0x2a6 <__bad_interrupt>
      42:	00 00       	nop
      44:	30 c1       	rjmp	.+608    	; 0x2a6 <__bad_interrupt>
      46:	00 00       	nop
      48:	2e c1       	rjmp	.+604    	; 0x2a6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2c c1       	rjmp	.+600    	; 0x2a6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	2a c1       	rjmp	.+596    	; 0x2a6 <__bad_interrupt>
      52:	00 00       	nop
      54:	28 c1       	rjmp	.+592    	; 0x2a6 <__bad_interrupt>
      56:	00 00       	nop
      58:	26 c1       	rjmp	.+588    	; 0x2a6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	24 c1       	rjmp	.+584    	; 0x2a6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	22 c1       	rjmp	.+580    	; 0x2a6 <__bad_interrupt>
      62:	00 00       	nop
      64:	20 c1       	rjmp	.+576    	; 0x2a6 <__bad_interrupt>
      66:	00 00       	nop
      68:	1e c1       	rjmp	.+572    	; 0x2a6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	1c c1       	rjmp	.+568    	; 0x2a6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	1a c1       	rjmp	.+564    	; 0x2a6 <__bad_interrupt>
      72:	00 00       	nop
      74:	18 c1       	rjmp	.+560    	; 0x2a6 <__bad_interrupt>
      76:	00 00       	nop
      78:	16 c1       	rjmp	.+556    	; 0x2a6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	14 c1       	rjmp	.+552    	; 0x2a6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	12 c1       	rjmp	.+548    	; 0x2a6 <__bad_interrupt>
      82:	00 00       	nop
      84:	10 c1       	rjmp	.+544    	; 0x2a6 <__bad_interrupt>
      86:	00 00       	nop
      88:	0e c1       	rjmp	.+540    	; 0x2a6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0c c1       	rjmp	.+536    	; 0x2a6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0a c1       	rjmp	.+532    	; 0x2a6 <__bad_interrupt>
      92:	00 00       	nop
      94:	08 c1       	rjmp	.+528    	; 0x2a6 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.5655>:
      98:	48 6f 73 74 00                                      Host.

0000009d <__c.5653>:
      9d:	44 65 76 69 63 65 00                                Device.

000000a4 <__c.5651>:
      a4:	1b 5b 33 33 6d 55 49 44 20 43 68 61 6e 67 65 20     .[33mUID Change 
      b4:	74 6f 20 25 53 20 6d 6f 64 65 0d 0a 1b 5b 33 37     to %S mode...[37
      c4:	6d 00                                               m.

000000c6 <__c.5637>:
      c6:	1b 5b 33 36 6d 4d 6f 75 73 65 20 48 6f 73 74 2f     .[36mMouse Host/
      d6:	44 65 76 69 63 65 20 44 65 6d 6f 20 72 75 6e 6e     Device Demo runn
      e6:	69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00                 ing....[37m.

000000f2 <MouseReport>:
      f2:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
     102:	15 00 25 01 95 03 75 01 81 02 95 01 75 05 81 01     ..%...u.....u...
     112:	05 01 09 30 09 31 16 ff ff 26 01 00 36 ff ff 46     ...0.1...&..6..F
     122:	01 00 95 02 75 08 81 06 c0 c0                       ....u.....

0000012c <DeviceDescriptor>:
     12c:	12 01 10 01 00 00 00 08 eb 03 41 20 00 00 01 02     ..........A ....
     13c:	00 01                                               ..

0000013e <ConfigurationDescriptor>:
     13e:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
     14e:	02 00 09 21 11 01 00 01 22 3a 00 07 05 81 03 08     ...!....":......
     15e:	00 01                                               ..

00000160 <LanguageString>:
     160:	04 03 09 04                                         ....

00000164 <ManufacturerString>:
     164:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     174:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0000017e <ProductString>:
     17e:	20 03 4c 00 55 00 46 00 41 00 20 00 4d 00 6f 00      .L.U.F.A. .M.o.
     18e:	75 00 73 00 65 00 20 00 44 00 65 00 6d 00 6f 00     u.s.e. .D.e.m.o.
     19e:	00 00                                               ..

000001a0 <__c.5677>:
     1a0:	64 58 3a 25 32 64 20 64 59 3a 25 32 64 20 42 75     dX:%2d dY:%2d Bu
     1b0:	74 74 6f 6e 3a 25 64 0d 0a 00                       tton:%d...

000001ba <__c.5666>:
     1ba:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     1ca:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     1da:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     1ea:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     1fa:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     20a:	1b 5b 33 37 6d 00                                   .[37m.

00000210 <__c.5658>:
     210:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     220:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     230:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000023f <__c.5643>:
     23f:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     24f:	68 65 64 2e 0d 0a 00                                hed....

00000256 <__c.5638>:
     256:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     266:	0d 0a 00 00                                         ....

0000026a <__ctors_end>:
     26a:	11 24       	eor	r1, r1
     26c:	1f be       	out	0x3f, r1	; 63
     26e:	cf ef       	ldi	r28, 0xFF	; 255
     270:	d0 e2       	ldi	r29, 0x20	; 32
     272:	de bf       	out	0x3e, r29	; 62
     274:	cd bf       	out	0x3d, r28	; 61

00000276 <__do_copy_data>:
     276:	11 e0       	ldi	r17, 0x01	; 1
     278:	a0 e0       	ldi	r26, 0x00	; 0
     27a:	b1 e0       	ldi	r27, 0x01	; 1
     27c:	ee e6       	ldi	r30, 0x6E	; 110
     27e:	fb e2       	ldi	r31, 0x2B	; 43
     280:	00 e0       	ldi	r16, 0x00	; 0
     282:	0b bf       	out	0x3b, r16	; 59
     284:	02 c0       	rjmp	.+4      	; 0x28a <__do_copy_data+0x14>
     286:	07 90       	elpm	r0, Z+
     288:	0d 92       	st	X+, r0
     28a:	ac 3d       	cpi	r26, 0xDC	; 220
     28c:	b1 07       	cpc	r27, r17
     28e:	d9 f7       	brne	.-10     	; 0x286 <__do_copy_data+0x10>

00000290 <__do_clear_bss>:
     290:	12 e0       	ldi	r17, 0x02	; 2
     292:	ac ed       	ldi	r26, 0xDC	; 220
     294:	b1 e0       	ldi	r27, 0x01	; 1
     296:	01 c0       	rjmp	.+2      	; 0x29a <.do_clear_bss_start>

00000298 <.do_clear_bss_loop>:
     298:	1d 92       	st	X+, r1

0000029a <.do_clear_bss_start>:
     29a:	a6 30       	cpi	r26, 0x06	; 6
     29c:	b1 07       	cpc	r27, r17
     29e:	e1 f7       	brne	.-8      	; 0x298 <.do_clear_bss_loop>
     2a0:	79 d0       	rcall	.+242    	; 0x394 <main>
     2a2:	0c 94 b5 15 	jmp	0x2b6a	; 0x2b6a <_exit>

000002a6 <__bad_interrupt>:
     2a6:	ac ce       	rjmp	.-680    	; 0x0 <__vectors>

000002a8 <EVENT_USB_UIDChange>:
}

/** Event handler for the library USB mode change event. */
void EVENT_USB_UIDChange(void)
{
	printf_P(PSTR(ESC_FG_YELLOW "UID Change to %S mode\r\n" ESC_FG_WHITE),
     2a8:	80 91 e2 01 	lds	r24, 0x01E2
     2ac:	81 30       	cpi	r24, 0x01	; 1
     2ae:	19 f0       	breq	.+6      	; 0x2b6 <EVENT_USB_UIDChange+0xe>
	         (USB_CurrentMode == USB_MODE_Device) ? PSTR("Device") : PSTR("Host"));
     2b0:	28 e9       	ldi	r18, 0x98	; 152
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	02 c0       	rjmp	.+4      	; 0x2ba <EVENT_USB_UIDChange+0x12>
     2b6:	2d e9       	ldi	r18, 0x9D	; 157
     2b8:	30 e0       	ldi	r19, 0x00	; 0
}

/** Event handler for the library USB mode change event. */
void EVENT_USB_UIDChange(void)
{
	printf_P(PSTR(ESC_FG_YELLOW "UID Change to %S mode\r\n" ESC_FG_WHITE),
     2ba:	00 d0       	rcall	.+0      	; 0x2bc <EVENT_USB_UIDChange+0x14>
     2bc:	00 d0       	rcall	.+0      	; 0x2be <EVENT_USB_UIDChange+0x16>
     2be:	84 ea       	ldi	r24, 0xA4	; 164
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	ed b7       	in	r30, 0x3d	; 61
     2c4:	fe b7       	in	r31, 0x3e	; 62
     2c6:	92 83       	std	Z+2, r25	; 0x02
     2c8:	81 83       	std	Z+1, r24	; 0x01
     2ca:	34 83       	std	Z+4, r19	; 0x04
     2cc:	23 83       	std	Z+3, r18	; 0x03
     2ce:	0e 94 90 12 	call	0x2520	; 0x2520 <printf_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     2d2:	8b b1       	in	r24, 0x0b	; 11
     2d4:	8f 70       	andi	r24, 0x0F	; 15
     2d6:	80 61       	ori	r24, 0x10	; 16
     2d8:	8b b9       	out	0x0b, r24	; 11
     2da:	0f 90       	pop	r0
     2dc:	0f 90       	pop	r0
     2de:	0f 90       	pop	r0
     2e0:	0f 90       	pop	r0
	         (USB_CurrentMode == USB_MODE_Device) ? PSTR("Device") : PSTR("Host"));

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     2e2:	08 95       	ret

000002e4 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     2e4:	84 b7       	in	r24, 0x34	; 52
     2e6:	87 7f       	andi	r24, 0xF7	; 247
     2e8:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     2ea:	28 e1       	ldi	r18, 0x18	; 24
     2ec:	0f b6       	in	r0, 0x3f	; 63
     2ee:	f8 94       	cli
     2f0:	20 93 60 00 	sts	0x0060, r18
     2f4:	10 92 60 00 	sts	0x0060, r1
     2f8:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	80 e8       	ldi	r24, 0x80	; 128
     2fe:	0f b6       	in	r0, 0x3f	; 63
     300:	f8 94       	cli
     302:	80 93 61 00 	sts	0x0061, r24
     306:	90 93 61 00 	sts	0x0061, r25
     30a:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     30c:	83 e3       	ldi	r24, 0x33	; 51
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	90 93 cd 00 	sts	0x00CD, r25
     314:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     318:	86 e0       	ldi	r24, 0x06	; 6
     31a:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     31e:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     322:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     326:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     328:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     32a:	8a b1       	in	r24, 0x0a	; 10
     32c:	80 6f       	ori	r24, 0xF0	; 240
     32e:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     330:	8b b1       	in	r24, 0x0b	; 11
     332:	8f 70       	andi	r24, 0x0F	; 15
     334:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
     336:	84 b1       	in	r24, 0x04	; 4
     338:	8f 71       	andi	r24, 0x1F	; 31
     33a:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
     33c:	8d b1       	in	r24, 0x0d	; 13
     33e:	8f 7c       	andi	r24, 0xCF	; 207
     340:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
     342:	85 b1       	in	r24, 0x05	; 5
     344:	80 6e       	ori	r24, 0xE0	; 224
     346:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
     348:	8e b1       	in	r24, 0x0e	; 14
     34a:	80 63       	ori	r24, 0x30	; 48
     34c:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     34e:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     350:	72 9a       	sbi	0x0e, 2	; 14
	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	Joystick_Init();
	Buttons_Init();
	USB_Init(USB_MODE_UID);
     352:	83 e0       	ldi	r24, 0x03	; 3
     354:	b0 d5       	rcall	.+2912   	; 0xeb6 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     356:	e2 ef       	ldi	r30, 0xF2	; 242
     358:	f1 e0       	ldi	r31, 0x01	; 1
     35a:	f0 93 01 02 	sts	0x0201, r31
     35e:	e0 93 00 02 	sts	0x0200, r30
					stdout = Stream;
     362:	f0 93 03 02 	sts	0x0203, r31
     366:	e0 93 02 02 	sts	0x0202, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     36a:	8e e0       	ldi	r24, 0x0E	; 14
     36c:	df 01       	movw	r26, r30
     36e:	1d 92       	st	X+, r1
     370:	8a 95       	dec	r24
     372:	e9 f7       	brne	.-6      	; 0x36e <SetupHardware+0x8a>
     374:	83 e0       	ldi	r24, 0x03	; 3
     376:	80 93 f5 01 	sts	0x01F5, r24
     37a:	85 e5       	ldi	r24, 0x55	; 85
     37c:	92 e1       	ldi	r25, 0x12	; 18
     37e:	90 93 fb 01 	sts	0x01FB, r25
     382:	80 93 fa 01 	sts	0x01FA, r24
     386:	8f e5       	ldi	r24, 0x5F	; 95
     388:	92 e1       	ldi	r25, 0x12	; 18
     38a:	90 93 fd 01 	sts	0x01FD, r25
     38e:	80 93 fc 01 	sts	0x01FC, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     392:	08 95       	ret

00000394 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     394:	a7 df       	rcall	.-178    	; 0x2e4 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Mouse Host/Device Demo running.\r\n" ESC_FG_WHITE));
     396:	86 ec       	ldi	r24, 0xC6	; 198
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	0e 94 e7 12 	call	0x25ce	; 0x25ce <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     39e:	8b b1       	in	r24, 0x0b	; 11
     3a0:	8f 70       	andi	r24, 0x0F	; 15
     3a2:	80 61       	ori	r24, 0x10	; 16
     3a4:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     3a6:	78 94       	sei

	for (;;)
	{
		/* Determine which USB mode we are currently in */
		if (USB_CurrentMode == USB_MODE_Host)
     3a8:	80 91 e2 01 	lds	r24, 0x01E2
     3ac:	82 30       	cpi	r24, 0x02	; 2
     3ae:	11 f4       	brne	.+4      	; 0x3b4 <main+0x20>
		{
			MouseHost_Task();
     3b0:	aa d0       	rcall	.+340    	; 0x506 <MouseHost_Task>
     3b2:	04 c0       	rjmp	.+8      	; 0x3bc <main+0x28>
			HID_Host_USBTask(&Mouse_HID_Host_Interface);
		}
		else
		{
			HID_Device_USBTask(&Mouse_HID_Device_Interface);
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	91 e0       	ldi	r25, 0x01	; 1
     3b8:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <HID_Device_USBTask>
		}

		USB_USBTask();
     3bc:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <USB_USBTask>
     3c0:	f3 cf       	rjmp	.-26     	; 0x3a8 <main+0x14>

000003c2 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     3c2:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     3c4:	93 30       	cpi	r25, 0x03	; 3
     3c6:	b1 f0       	breq	.+44     	; 0x3f4 <CALLBACK_USB_GetDescriptor+0x32>
     3c8:	94 30       	cpi	r25, 0x04	; 4
     3ca:	28 f4       	brcc	.+10     	; 0x3d6 <CALLBACK_USB_GetDescriptor+0x14>
     3cc:	91 30       	cpi	r25, 0x01	; 1
     3ce:	41 f0       	breq	.+16     	; 0x3e0 <CALLBACK_USB_GetDescriptor+0x1e>
     3d0:	92 30       	cpi	r25, 0x02	; 2
     3d2:	79 f5       	brne	.+94     	; 0x432 <CALLBACK_USB_GetDescriptor+0x70>
     3d4:	0a c0       	rjmp	.+20     	; 0x3ea <CALLBACK_USB_GetDescriptor+0x28>
     3d6:	91 32       	cpi	r25, 0x21	; 33
     3d8:	11 f1       	breq	.+68     	; 0x41e <CALLBACK_USB_GetDescriptor+0x5c>
     3da:	92 32       	cpi	r25, 0x22	; 34
     3dc:	51 f5       	brne	.+84     	; 0x432 <CALLBACK_USB_GetDescriptor+0x70>
     3de:	24 c0       	rjmp	.+72     	; 0x428 <CALLBACK_USB_GetDescriptor+0x66>
     3e0:	ec e2       	ldi	r30, 0x2C	; 44
     3e2:	f1 e0       	ldi	r31, 0x01	; 1
     3e4:	22 e1       	ldi	r18, 0x12	; 18
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	28 c0       	rjmp	.+80     	; 0x43a <CALLBACK_USB_GetDescriptor+0x78>
     3ea:	ee e3       	ldi	r30, 0x3E	; 62
     3ec:	f1 e0       	ldi	r31, 0x01	; 1
     3ee:	22 e2       	ldi	r18, 0x22	; 34
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	23 c0       	rjmp	.+70     	; 0x43a <CALLBACK_USB_GetDescriptor+0x78>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     3f4:	81 30       	cpi	r24, 0x01	; 1
     3f6:	49 f0       	breq	.+18     	; 0x40a <CALLBACK_USB_GetDescriptor+0x48>
     3f8:	81 30       	cpi	r24, 0x01	; 1
     3fa:	18 f0       	brcs	.+6      	; 0x402 <CALLBACK_USB_GetDescriptor+0x40>
     3fc:	82 30       	cpi	r24, 0x02	; 2
     3fe:	c9 f4       	brne	.+50     	; 0x432 <CALLBACK_USB_GetDescriptor+0x70>
     400:	0a c0       	rjmp	.+20     	; 0x416 <CALLBACK_USB_GetDescriptor+0x54>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     402:	e0 e6       	ldi	r30, 0x60	; 96
     404:	f1 e0       	ldi	r31, 0x01	; 1
     406:	84 91       	lpm	r24, Z+
     408:	03 c0       	rjmp	.+6      	; 0x410 <CALLBACK_USB_GetDescriptor+0x4e>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     40a:	e4 e6       	ldi	r30, 0x64	; 100
     40c:	f1 e0       	ldi	r31, 0x01	; 1
     40e:	84 91       	lpm	r24, Z+
     410:	28 2f       	mov	r18, r24
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	12 c0       	rjmp	.+36     	; 0x43a <CALLBACK_USB_GetDescriptor+0x78>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     416:	ee e7       	ldi	r30, 0x7E	; 126
     418:	f1 e0       	ldi	r31, 0x01	; 1
     41a:	84 91       	lpm	r24, Z+
     41c:	f9 cf       	rjmp	.-14     	; 0x410 <CALLBACK_USB_GetDescriptor+0x4e>
     41e:	e0 e5       	ldi	r30, 0x50	; 80
     420:	f1 e0       	ldi	r31, 0x01	; 1
     422:	29 e0       	ldi	r18, 0x09	; 9
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	09 c0       	rjmp	.+18     	; 0x43a <CALLBACK_USB_GetDescriptor+0x78>

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     428:	e2 ef       	ldi	r30, 0xF2	; 242
     42a:	f0 e0       	ldi	r31, 0x00	; 0
     42c:	2a e3       	ldi	r18, 0x3A	; 58
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	04 c0       	rjmp	.+8      	; 0x43a <CALLBACK_USB_GetDescriptor+0x78>
     432:	e0 e0       	ldi	r30, 0x00	; 0
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	20 e0       	ldi	r18, 0x00	; 0
     438:	30 e0       	ldi	r19, 0x00	; 0
			Address = &MouseReport;
			Size    = sizeof(MouseReport);
			break;
	}

	*DescriptorAddress = Address;
     43a:	ed 93       	st	X+, r30
     43c:	fc 93       	st	X, r31
	return Size;
}
     43e:	c9 01       	movw	r24, r18
     440:	08 95       	ret

00000442 <EVENT_USB_Device_Connect>:
     442:	8b b1       	in	r24, 0x0b	; 11
     444:	8f 70       	andi	r24, 0x0F	; 15
     446:	80 6a       	ori	r24, 0xA0	; 160
     448:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB WakeUp event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     44a:	08 95       	ret

0000044c <EVENT_USB_Device_Disconnect>:
     44c:	8b b1       	in	r24, 0x0b	; 11
     44e:	8f 70       	andi	r24, 0x0F	; 15
     450:	80 61       	ori	r24, 0x10	; 16
     452:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Suspend event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     454:	08 95       	ret

00000456 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     456:	80 91 0b 01 	lds	r24, 0x010B
     45a:	90 91 0c 01 	lds	r25, 0x010C
     45e:	00 97       	sbiw	r24, 0x00	; 0
     460:	29 f0       	breq	.+10     	; 0x46c <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     462:	01 97       	sbiw	r24, 0x01	; 1
     464:	90 93 0c 01 	sts	0x010C, r25
     468:	80 93 0b 01 	sts	0x010B, r24
     46c:	08 95       	ret

0000046e <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     46e:	0f 93       	push	r16
     470:	1f 93       	push	r17
     472:	d8 01       	movw	r26, r16
	USB_MouseReport_Data_t* MouseReport = (USB_MouseReport_Data_t*)ReportData;
     474:	f9 01       	movw	r30, r18
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     476:	23 b1       	in	r18, 0x03	; 3
     478:	8c b1       	in	r24, 0x0c	; 12
     47a:	80 95       	com	r24
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	80 73       	andi	r24, 0x30	; 48
     480:	90 70       	andi	r25, 0x00	; 0
     482:	95 95       	asr	r25
     484:	87 95       	ror	r24
     486:	20 95       	com	r18
     488:	20 7e       	andi	r18, 0xE0	; 224
     48a:	28 2b       	or	r18, r24
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     48c:	3c b1       	in	r19, 0x0c	; 12

	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	if (JoyStatus_LCL & JOY_UP)
     48e:	27 ff       	sbrs	r18, 7
     490:	02 c0       	rjmp	.+4      	; 0x496 <CALLBACK_HID_Device_CreateHIDReport+0x28>
	  MouseReport->Y = -1;
     492:	8f ef       	ldi	r24, 0xFF	; 255
     494:	03 c0       	rjmp	.+6      	; 0x49c <CALLBACK_HID_Device_CreateHIDReport+0x2e>
	else if (JoyStatus_LCL & JOY_DOWN)
     496:	24 ff       	sbrs	r18, 4
     498:	02 c0       	rjmp	.+4      	; 0x49e <CALLBACK_HID_Device_CreateHIDReport+0x30>
	  MouseReport->Y =  1;
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	82 83       	std	Z+2, r24	; 0x02

	if (JoyStatus_LCL & JOY_RIGHT)
     49e:	92 2f       	mov	r25, r18
     4a0:	23 ff       	sbrs	r18, 3
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <CALLBACK_HID_Device_CreateHIDReport+0x3a>
	  MouseReport->X =  1;
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	03 c0       	rjmp	.+6      	; 0x4ae <CALLBACK_HID_Device_CreateHIDReport+0x40>
	else if (JoyStatus_LCL & JOY_LEFT)
     4a8:	26 ff       	sbrs	r18, 6
     4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <CALLBACK_HID_Device_CreateHIDReport+0x42>
	  MouseReport->X = -1;
     4ac:	8f ef       	ldi	r24, 0xFF	; 255
     4ae:	81 83       	std	Z+1, r24	; 0x01

	if (JoyStatus_LCL & JOY_PRESS)
     4b0:	95 ff       	sbrs	r25, 5
     4b2:	03 c0       	rjmp	.+6      	; 0x4ba <CALLBACK_HID_Device_CreateHIDReport+0x4c>
	  MouseReport->Button |= (1 << 0);
     4b4:	80 81       	ld	r24, Z
     4b6:	81 60       	ori	r24, 0x01	; 1
     4b8:	80 83       	st	Z, r24

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
     4ba:	32 fd       	sbrc	r19, 2
     4bc:	03 c0       	rjmp	.+6      	; 0x4c4 <CALLBACK_HID_Device_CreateHIDReport+0x56>
	  MouseReport->Button |= (1 << 1);
     4be:	80 81       	ld	r24, Z
     4c0:	82 60       	ori	r24, 0x02	; 2
     4c2:	80 83       	st	Z, r24

	*ReportSize = sizeof(USB_MouseReport_Data_t);
     4c4:	83 e0       	ldi	r24, 0x03	; 3
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	8d 93       	st	X+, r24
     4ca:	9c 93       	st	X, r25
	return true;
}
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	1f 91       	pop	r17
     4d0:	0f 91       	pop	r16
     4d2:	08 95       	ret

000004d4 <CALLBACK_HID_Device_ProcessHIDReport>:
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
	// Unused (but mandatory for the HID class driver) in this demo, since there are no Host->Device reports
}
     4d4:	08 95       	ret

000004d6 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Mouse_HID_Device_Interface);
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	91 e0       	ldi	r25, 0x01	; 1
     4da:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <HID_Device_ProcessControlRequest>

000004de <EVENT_USB_Device_ConfigurationChanged>:
     4de:	8b b1       	in	r24, 0x0b	; 11
     4e0:	8f 70       	andi	r24, 0x0F	; 15
     4e2:	80 66       	ori	r24, 0x60	; 96
     4e4:	8b b9       	out	0x0b, r24	; 11
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_READY);

	if (!(HID_Device_ConfigureEndpoints(&Mouse_HID_Device_Interface)))
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <HID_Device_ConfigureEndpoints>
     4ee:	88 23       	and	r24, r24
     4f0:	21 f4       	brne	.+8      	; 0x4fa <EVENT_USB_Device_ConfigurationChanged+0x1c>
     4f2:	8b b1       	in	r24, 0x0b	; 11
     4f4:	8f 70       	andi	r24, 0x0F	; 15
     4f6:	80 69       	ori	r24, 0x90	; 144
     4f8:	8b b9       	out	0x0b, r24	; 11
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     4fa:	80 91 e2 00 	lds	r24, 0x00E2
     4fe:	84 60       	ori	r24, 0x04	; 4
     500:	80 93 e2 00 	sts	0x00E2, r24
	  LEDs_SetAllLEDs(LEDMASK_USB_ERROR);

	USB_Device_EnableSOFEvents();
}
     504:	08 95       	ret

00000506 <MouseHost_Task>:

/** Host USB management task. This task handles the control of USB Mice while in USB Host mode,
 *  setting up the appropriate data pipes and processing reports from the attached device.
 */
void MouseHost_Task(void)
{
     506:	df 93       	push	r29
     508:	cf 93       	push	r28
     50a:	00 d0       	rcall	.+0      	; 0x50c <MouseHost_Task+0x6>
     50c:	0f 92       	push	r0
     50e:	cd b7       	in	r28, 0x3d	; 61
     510:	de b7       	in	r29, 0x3e	; 62
	if (USB_HostState != HOST_STATE_Configured)
     512:	80 91 f1 01 	lds	r24, 0x01F1
     516:	8b 30       	cpi	r24, 0x0B	; 11
     518:	09 f0       	breq	.+2      	; 0x51c <MouseHost_Task+0x16>
     51a:	54 c0       	rjmp	.+168    	; 0x5c4 <MouseHost_Task+0xbe>
	  return;

	if (HID_Host_IsReportReceived(&Mouse_HID_Host_Interface))
     51c:	88 eb       	ldi	r24, 0xB8	; 184
     51e:	91 e0       	ldi	r25, 0x01	; 1
     520:	0e 94 c7 10 	call	0x218e	; 0x218e <HID_Host_IsReportReceived>
     524:	88 23       	and	r24, r24
     526:	09 f4       	brne	.+2      	; 0x52a <MouseHost_Task+0x24>
     528:	4d c0       	rjmp	.+154    	; 0x5c4 <MouseHost_Task+0xbe>
	{
		uint8_t LEDMask  = LEDS_NO_LEDS;

		USB_MouseReport_Data_t MouseReport;
		HID_Host_ReceiveReport(&Mouse_HID_Host_Interface, &MouseReport);
     52a:	88 eb       	ldi	r24, 0xB8	; 184
     52c:	91 e0       	ldi	r25, 0x01	; 1
     52e:	be 01       	movw	r22, r28
     530:	6f 5f       	subi	r22, 0xFF	; 255
     532:	7f 4f       	sbci	r23, 0xFF	; 255
     534:	0e 94 0e 11 	call	0x221c	; 0x221c <HID_Host_ReceiveReport>

		printf_P(PSTR("dX:%2d dY:%2d Button:%d\r\n"), MouseReport.X,
     538:	2d b7       	in	r18, 0x3d	; 61
     53a:	3e b7       	in	r19, 0x3e	; 62
     53c:	28 50       	subi	r18, 0x08	; 8
     53e:	30 40       	sbci	r19, 0x00	; 0
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	f8 94       	cli
     544:	3e bf       	out	0x3e, r19	; 62
     546:	0f be       	out	0x3f, r0	; 63
     548:	2d bf       	out	0x3d, r18	; 61
     54a:	ed b7       	in	r30, 0x3d	; 61
     54c:	fe b7       	in	r31, 0x3e	; 62
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	80 ea       	ldi	r24, 0xA0	; 160
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	ad b7       	in	r26, 0x3d	; 61
     556:	be b7       	in	r27, 0x3e	; 62
     558:	12 96       	adiw	r26, 0x02	; 2
     55a:	9c 93       	st	X, r25
     55c:	8e 93       	st	-X, r24
     55e:	11 97       	sbiw	r26, 0x01	; 1
     560:	8a 81       	ldd	r24, Y+2	; 0x02
     562:	99 27       	eor	r25, r25
     564:	87 fd       	sbrc	r24, 7
     566:	90 95       	com	r25
     568:	93 83       	std	Z+3, r25	; 0x03
     56a:	82 83       	std	Z+2, r24	; 0x02
     56c:	8b 81       	ldd	r24, Y+3	; 0x03
     56e:	99 27       	eor	r25, r25
     570:	87 fd       	sbrc	r24, 7
     572:	90 95       	com	r25
     574:	95 83       	std	Z+5, r25	; 0x05
     576:	84 83       	std	Z+4, r24	; 0x04
     578:	89 81       	ldd	r24, Y+1	; 0x01
     57a:	86 83       	std	Z+6, r24	; 0x06
     57c:	17 82       	std	Z+7, r1	; 0x07
     57e:	0e 94 90 12 	call	0x2520	; 0x2520 <printf_P>
		                                              MouseReport.Y,
		                                              MouseReport.Button);
		if (MouseReport.X > 0)
     582:	8a 81       	ldd	r24, Y+2	; 0x02
     584:	2d b7       	in	r18, 0x3d	; 61
     586:	3e b7       	in	r19, 0x3e	; 62
     588:	28 5f       	subi	r18, 0xF8	; 248
     58a:	3f 4f       	sbci	r19, 0xFF	; 255
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	f8 94       	cli
     590:	3e bf       	out	0x3e, r19	; 62
     592:	0f be       	out	0x3f, r0	; 63
     594:	2d bf       	out	0x3d, r18	; 61
     596:	18 16       	cp	r1, r24
     598:	14 f4       	brge	.+4      	; 0x59e <MouseHost_Task+0x98>
     59a:	90 e1       	ldi	r25, 0x10	; 16
     59c:	05 c0       	rjmp	.+10     	; 0x5a8 <MouseHost_Task+0xa2>
		  LEDMask |= LEDS_LED1;
		else if (MouseReport.X < 0)
     59e:	88 23       	and	r24, r24
     5a0:	11 f0       	breq	.+4      	; 0x5a6 <MouseHost_Task+0xa0>
     5a2:	90 e2       	ldi	r25, 0x20	; 32
     5a4:	01 c0       	rjmp	.+2      	; 0x5a8 <MouseHost_Task+0xa2>
     5a6:	90 e0       	ldi	r25, 0x00	; 0
		  LEDMask |= LEDS_LED2;

		if (MouseReport.Y > 0)
     5a8:	8b 81       	ldd	r24, Y+3	; 0x03
     5aa:	18 16       	cp	r1, r24
     5ac:	14 f4       	brge	.+4      	; 0x5b2 <MouseHost_Task+0xac>
		  LEDMask |= LEDS_LED3;
     5ae:	90 68       	ori	r25, 0x80	; 128
     5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <MouseHost_Task+0xb0>
		else if (MouseReport.Y < 0)
     5b2:	81 11       	cpse	r24, r1
		  LEDMask |= LEDS_LED4;
     5b4:	90 64       	ori	r25, 0x40	; 64

		if (MouseReport.Button)
     5b6:	89 81       	ldd	r24, Y+1	; 0x01
     5b8:	81 11       	cpse	r24, r1
     5ba:	90 ef       	ldi	r25, 0xF0	; 240
     5bc:	8b b1       	in	r24, 0x0b	; 11
     5be:	8f 70       	andi	r24, 0x0F	; 15
     5c0:	98 2b       	or	r25, r24
     5c2:	9b b9       	out	0x0b, r25	; 11
		  LEDMask  = LEDS_ALL_LEDS;

		LEDs_SetAllLEDs(LEDMask);
	}
}
     5c4:	0f 90       	pop	r0
     5c6:	0f 90       	pop	r0
     5c8:	0f 90       	pop	r0
     5ca:	cf 91       	pop	r28
     5cc:	df 91       	pop	r29
     5ce:	08 95       	ret

000005d0 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     5d0:	90 91 f1 01 	lds	r25, 0x01F1
     5d4:	2d b7       	in	r18, 0x3d	; 61
     5d6:	3e b7       	in	r19, 0x3e	; 62
     5d8:	28 50       	subi	r18, 0x08	; 8
     5da:	30 40       	sbci	r19, 0x00	; 0
     5dc:	0f b6       	in	r0, 0x3f	; 63
     5de:	f8 94       	cli
     5e0:	3e bf       	out	0x3e, r19	; 62
     5e2:	0f be       	out	0x3f, r0	; 63
     5e4:	2d bf       	out	0x3d, r18	; 61
     5e6:	ed b7       	in	r30, 0x3d	; 61
     5e8:	fe b7       	in	r31, 0x3e	; 62
     5ea:	31 96       	adiw	r30, 0x01	; 1
     5ec:	2a eb       	ldi	r18, 0xBA	; 186
     5ee:	31 e0       	ldi	r19, 0x01	; 1
     5f0:	ad b7       	in	r26, 0x3d	; 61
     5f2:	be b7       	in	r27, 0x3e	; 62
     5f4:	12 96       	adiw	r26, 0x02	; 2
     5f6:	3c 93       	st	X, r19
     5f8:	2e 93       	st	-X, r18
     5fa:	11 97       	sbiw	r26, 0x01	; 1
     5fc:	82 83       	std	Z+2, r24	; 0x02
     5fe:	13 82       	std	Z+3, r1	; 0x03
     600:	64 83       	std	Z+4, r22	; 0x04
     602:	15 82       	std	Z+5, r1	; 0x05
     604:	96 83       	std	Z+6, r25	; 0x06
     606:	17 82       	std	Z+7, r1	; 0x07
     608:	0e 94 90 12 	call	0x2520	; 0x2520 <printf_P>
     60c:	8b b1       	in	r24, 0x0b	; 11
     60e:	8f 70       	andi	r24, 0x0F	; 15
     610:	80 69       	ori	r24, 0x90	; 144
     612:	8b b9       	out	0x0b, r24	; 11
     614:	2d b7       	in	r18, 0x3d	; 61
     616:	3e b7       	in	r19, 0x3e	; 62
     618:	28 5f       	subi	r18, 0xF8	; 248
     61a:	3f 4f       	sbci	r19, 0xFF	; 255
     61c:	0f b6       	in	r0, 0x3f	; 63
     61e:	f8 94       	cli
     620:	3e bf       	out	0x3e, r19	; 62
     622:	0f be       	out	0x3f, r0	; 63
     624:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     626:	08 95       	ret

00000628 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     628:	1f 93       	push	r17
     62a:	18 2f       	mov	r17, r24
	USB_Disable();
     62c:	9b d3       	rcall	.+1846   	; 0xd64 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     62e:	00 d0       	rcall	.+0      	; 0x630 <EVENT_USB_Host_HostError+0x8>
     630:	00 d0       	rcall	.+0      	; 0x632 <EVENT_USB_Host_HostError+0xa>
     632:	ed b7       	in	r30, 0x3d	; 61
     634:	fe b7       	in	r31, 0x3e	; 62
     636:	31 96       	adiw	r30, 0x01	; 1
     638:	80 e1       	ldi	r24, 0x10	; 16
     63a:	92 e0       	ldi	r25, 0x02	; 2
     63c:	ad b7       	in	r26, 0x3d	; 61
     63e:	be b7       	in	r27, 0x3e	; 62
     640:	12 96       	adiw	r26, 0x02	; 2
     642:	9c 93       	st	X, r25
     644:	8e 93       	st	-X, r24
     646:	11 97       	sbiw	r26, 0x01	; 1
     648:	12 83       	std	Z+2, r17	; 0x02
     64a:	13 82       	std	Z+3, r1	; 0x03
     64c:	0e 94 90 12 	call	0x2520	; 0x2520 <printf_P>
     650:	8b b1       	in	r24, 0x0b	; 11
     652:	8f 70       	andi	r24, 0x0F	; 15
     654:	80 69       	ori	r24, 0x90	; 144
     656:	8b b9       	out	0x0b, r24	; 11
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
     65c:	0f 90       	pop	r0
     65e:	0f 90       	pop	r0
     660:	ff cf       	rjmp	.-2      	; 0x660 <EVENT_USB_Host_HostError+0x38>

00000662 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{	
     662:	0f 93       	push	r16
     664:	1f 93       	push	r17
     666:	df 93       	push	r29
     668:	cf 93       	push	r28
     66a:	cd b7       	in	r28, 0x3d	; 61
     66c:	de b7       	in	r29, 0x3e	; 62
     66e:	c2 50       	subi	r28, 0x02	; 2
     670:	d2 40       	sbci	r29, 0x02	; 2
     672:	0f b6       	in	r0, 0x3f	; 63
     674:	f8 94       	cli
     676:	de bf       	out	0x3e, r29	; 62
     678:	0f be       	out	0x3f, r0	; 63
     67a:	cd bf       	out	0x3d, r28	; 61
     67c:	8b b1       	in	r24, 0x0b	; 11
     67e:	8f 70       	andi	r24, 0x0F	; 15
     680:	80 6a       	ori	r24, 0xA0	; 160
     682:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     684:	8e 01       	movw	r16, r28
     686:	0d 5f       	subi	r16, 0xFD	; 253
     688:	1f 4f       	sbci	r17, 0xFF	; 255
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	be 01       	movw	r22, r28
     68e:	6f 5f       	subi	r22, 0xFF	; 255
     690:	7f 4f       	sbci	r23, 0xFF	; 255
     692:	a8 01       	movw	r20, r16
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	32 e0       	ldi	r19, 0x02	; 2
     698:	8e d7       	rcall	.+3868   	; 0x15b6 <USB_Host_GetDeviceConfigDescriptor>
     69a:	88 23       	and	r24, r24
     69c:	19 f0       	breq	.+6      	; 0x6a4 <EVENT_USB_Host_DeviceEnumerationComplete+0x42>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		printf("Error Retrieving Configuration Descriptor.\r\n");
     69e:	8d e0       	ldi	r24, 0x0D	; 13
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	1c c0       	rjmp	.+56     	; 0x6dc <EVENT_USB_Host_DeviceEnumerationComplete+0x7a>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_ConfigurePipes(&Mouse_HID_Host_Interface,
     6a4:	69 81       	ldd	r22, Y+1	; 0x01
     6a6:	7a 81       	ldd	r23, Y+2	; 0x02
     6a8:	88 eb       	ldi	r24, 0xB8	; 184
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	a8 01       	movw	r20, r16
     6ae:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <HID_Host_ConfigurePipes>
     6b2:	88 23       	and	r24, r24
     6b4:	19 f0       	breq	.+6      	; 0x6bc <EVENT_USB_Host_DeviceEnumerationComplete+0x5a>
	                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
	{
		printf("Attached Device Not a Valid Mouse.\r\n");
     6b6:	89 e3       	ldi	r24, 0x39	; 57
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	10 c0       	rjmp	.+32     	; 0x6dc <EVENT_USB_Host_DeviceEnumerationComplete+0x7a>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <USB_Host_SetDeviceConfiguration>
     6c2:	88 23       	and	r24, r24
     6c4:	19 f0       	breq	.+6      	; 0x6cc <EVENT_USB_Host_DeviceEnumerationComplete+0x6a>
	{
		printf("Error Setting Device Configuration.\r\n");
     6c6:	8d e5       	ldi	r24, 0x5D	; 93
     6c8:	91 e0       	ldi	r25, 0x01	; 1
     6ca:	08 c0       	rjmp	.+16     	; 0x6dc <EVENT_USB_Host_DeviceEnumerationComplete+0x7a>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_SetBootProtocol(&Mouse_HID_Host_Interface) != HOST_SENDCONTROL_Successful)
     6cc:	88 eb       	ldi	r24, 0xB8	; 184
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <HID_Host_SetBootProtocol>
     6d4:	88 23       	and	r24, r24
     6d6:	41 f0       	breq	.+16     	; 0x6e8 <EVENT_USB_Host_DeviceEnumerationComplete+0x86>
	{
		printf("Could not Set Boot Protocol Mode.\r\n");
     6d8:	82 e8       	ldi	r24, 0x82	; 130
     6da:	91 e0       	ldi	r25, 0x01	; 1
     6dc:	0e 94 b2 12 	call	0x2564	; 0x2564 <puts>
     6e0:	8b b1       	in	r24, 0x0b	; 11
     6e2:	8f 70       	andi	r24, 0x0F	; 15
     6e4:	80 69       	ori	r24, 0x90	; 144
     6e6:	07 c0       	rjmp	.+14     	; 0x6f6 <EVENT_USB_Host_DeviceEnumerationComplete+0x94>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	printf("Mouse Enumerated.\r\n");
     6e8:	85 ea       	ldi	r24, 0xA5	; 165
     6ea:	91 e0       	ldi	r25, 0x01	; 1
     6ec:	0e 94 b2 12 	call	0x2564	; 0x2564 <puts>
     6f0:	8b b1       	in	r24, 0x0b	; 11
     6f2:	8f 70       	andi	r24, 0x0F	; 15
     6f4:	80 66       	ori	r24, 0x60	; 96
     6f6:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     6f8:	ce 5f       	subi	r28, 0xFE	; 254
     6fa:	dd 4f       	sbci	r29, 0xFD	; 253
     6fc:	0f b6       	in	r0, 0x3f	; 63
     6fe:	f8 94       	cli
     700:	de bf       	out	0x3e, r29	; 62
     702:	0f be       	out	0x3f, r0	; 63
     704:	cd bf       	out	0x3d, r28	; 61
     706:	cf 91       	pop	r28
     708:	df 91       	pop	r29
     70a:	1f 91       	pop	r17
     70c:	0f 91       	pop	r16
     70e:	08 95       	ret

00000710 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     710:	8f e3       	ldi	r24, 0x3F	; 63
     712:	92 e0       	ldi	r25, 0x02	; 2
     714:	0e 94 e7 12 	call	0x25ce	; 0x25ce <puts_P>
     718:	8b b1       	in	r24, 0x0b	; 11
     71a:	8f 70       	andi	r24, 0x0F	; 15
     71c:	80 61       	ori	r24, 0x10	; 16
     71e:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     720:	08 95       	ret

00000722 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     722:	86 e5       	ldi	r24, 0x56	; 86
     724:	92 e0       	ldi	r25, 0x02	; 2
     726:	0e 94 e7 12 	call	0x25ce	; 0x25ce <puts_P>
     72a:	8b b1       	in	r24, 0x0b	; 11
     72c:	8f 70       	andi	r24, 0x0F	; 15
     72e:	80 6a       	ori	r24, 0xA0	; 160
     730:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     732:	08 95       	ret

00000734 <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
     734:	38 2f       	mov	r19, r24
     736:	28 2f       	mov	r18, r24
     738:	2c c0       	rjmp	.+88     	; 0x792 <Endpoint_ConfigureEndpoint_Prv+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     73a:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);
		
		if (EPNum == Number)
     73e:	23 17       	cp	r18, r19
     740:	21 f4       	brne	.+8      	; 0x74a <Endpoint_ConfigureEndpoint_Prv+0x16>
     742:	76 2f       	mov	r23, r22
     744:	94 2f       	mov	r25, r20
     746:	50 e0       	ldi	r21, 0x00	; 0
     748:	06 c0       	rjmp	.+12     	; 0x756 <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     74a:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     74e:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
     752:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     756:	91 ff       	sbrs	r25, 1
     758:	1b c0       	rjmp	.+54     	; 0x790 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     75a:	80 91 eb 00 	lds	r24, 0x00EB
     75e:	8e 7f       	andi	r24, 0xFE	; 254
     760:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     764:	80 91 ed 00 	lds	r24, 0x00ED
     768:	8d 7f       	andi	r24, 0xFD	; 253
     76a:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     76e:	80 91 eb 00 	lds	r24, 0x00EB
     772:	81 60       	ori	r24, 0x01	; 1
     774:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     778:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     77c:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
     780:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     784:	80 91 ee 00 	lds	r24, 0x00EE
			
		if (!(Endpoint_IsConfigured()))
     788:	87 fd       	sbrc	r24, 7
     78a:	02 c0       	rjmp	.+4      	; 0x790 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else	
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     790:	2f 5f       	subi	r18, 0xFF	; 255
     792:	27 30       	cpi	r18, 0x07	; 7
     794:	90 f2       	brcs	.-92     	; 0x73a <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     796:	30 93 e9 00 	sts	0x00E9, r19
     79a:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     79c:	08 95       	ret

0000079e <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     79e:	80 91 e9 01 	lds	r24, 0x01E9
     7a2:	88 23       	and	r24, r24
     7a4:	9c f4       	brge	.+38     	; 0x7cc <Endpoint_ClearStatusStage+0x2e>
     7a6:	04 c0       	rjmp	.+8      	; 0x7b0 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     7a8:	80 91 e8 01 	lds	r24, 0x01E8
     7ac:	88 23       	and	r24, r24
     7ae:	b9 f0       	breq	.+46     	; 0x7de <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7b0:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     7b4:	82 ff       	sbrs	r24, 2
     7b6:	f8 cf       	rjmp	.-16     	; 0x7a8 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     7b8:	80 91 e8 00 	lds	r24, 0x00E8
     7bc:	8b 77       	andi	r24, 0x7B	; 123
     7be:	80 93 e8 00 	sts	0x00E8, r24
     7c2:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     7c4:	80 91 e8 01 	lds	r24, 0x01E8
     7c8:	88 23       	and	r24, r24
     7ca:	49 f0       	breq	.+18     	; 0x7de <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7cc:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     7d0:	80 ff       	sbrs	r24, 0
     7d2:	f8 cf       	rjmp	.-16     	; 0x7c4 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7d4:	80 91 e8 00 	lds	r24, 0x00E8
     7d8:	8e 77       	andi	r24, 0x7E	; 126
     7da:	80 93 e8 00 	sts	0x00E8, r24
     7de:	08 95       	ret

000007e0 <Endpoint_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     7e0:	40 91 e4 00 	lds	r20, 0x00E4
     7e4:	50 91 e5 00 	lds	r21, 0x00E5
     7e8:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
     7ea:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
     7ee:	80 78       	andi	r24, 0x80	; 128
     7f0:	80 38       	cpi	r24, 0x80	; 128
     7f2:	29 f4       	brne	.+10     	; 0x7fe <Endpoint_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7f4:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
     7f8:	80 ff       	sbrs	r24, 0
     7fa:	05 c0       	rjmp	.+10     	; 0x806 <Endpoint_WaitUntilReady+0x26>
     7fc:	22 c0       	rjmp	.+68     	; 0x842 <Endpoint_WaitUntilReady+0x62>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7fe:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     802:	82 fd       	sbrc	r24, 2
     804:	1e c0       	rjmp	.+60     	; 0x842 <Endpoint_WaitUntilReady+0x62>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     806:	80 91 e8 01 	lds	r24, 0x01E8

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     80a:	88 23       	and	r24, r24
     80c:	11 f4       	brne	.+4      	; 0x812 <Endpoint_WaitUntilReady+0x32>
     80e:	82 e0       	ldi	r24, 0x02	; 2
     810:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     812:	85 30       	cpi	r24, 0x05	; 5
     814:	11 f4       	brne	.+4      	; 0x81a <Endpoint_WaitUntilReady+0x3a>
     816:	83 e0       	ldi	r24, 0x03	; 3
     818:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     81a:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     81e:	85 ff       	sbrs	r24, 5
     820:	02 c0       	rjmp	.+4      	; 0x826 <Endpoint_WaitUntilReady+0x46>
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	08 95       	ret
     826:	80 91 e4 00 	lds	r24, 0x00E4
     82a:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     82e:	84 17       	cp	r24, r20
     830:	95 07       	cpc	r25, r21
     832:	d9 f2       	breq	.-74     	; 0x7ea <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     834:	22 23       	and	r18, r18
     836:	11 f4       	brne	.+4      	; 0x83c <Endpoint_WaitUntilReady+0x5c>
     838:	84 e0       	ldi	r24, 0x04	; 4
     83a:	08 95       	ret
     83c:	21 50       	subi	r18, 0x01	; 1
     83e:	ac 01       	movw	r20, r24
     840:	d4 cf       	rjmp	.-88     	; 0x7ea <Endpoint_WaitUntilReady+0xa>
     842:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     844:	08 95       	ret

00000846 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     846:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     848:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     84c:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     850:	80 91 a0 00 	lds	r24, 0x00A0
     854:	8f 7d       	andi	r24, 0xDF	; 223
     856:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     85a:	80 91 9f 00 	lds	r24, 0x009F
     85e:	8f 7d       	andi	r24, 0xDF	; 223
     860:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     864:	80 91 9e 00 	lds	r24, 0x009E
     868:	81 60       	ori	r24, 0x01	; 1
     86a:	80 93 9e 00 	sts	0x009E, r24
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <USB_Host_WaitMS+0x7e>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     870:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     874:	85 ff       	sbrs	r24, 5
     876:	06 c0       	rjmp	.+12     	; 0x884 <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     878:	80 91 9f 00 	lds	r24, 0x009F
     87c:	8f 7d       	andi	r24, 0xDF	; 223
     87e:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     882:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     884:	80 91 f1 01 	lds	r24, 0x01F1
     888:	81 30       	cpi	r24, 0x01	; 1
     88a:	f9 f0       	breq	.+62     	; 0x8ca <USB_Host_WaitMS+0x84>
     88c:	80 91 e2 01 	lds	r24, 0x01E2
     890:	82 30       	cpi	r24, 0x02	; 2
     892:	d9 f4       	brne	.+54     	; 0x8ca <USB_Host_WaitMS+0x84>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     894:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     898:	84 ff       	sbrs	r24, 4
     89a:	09 c0       	rjmp	.+18     	; 0x8ae <USB_Host_WaitMS+0x68>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     89c:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     8a0:	80 91 a6 00 	lds	r24, 0x00A6
     8a4:	8f 7e       	andi	r24, 0xEF	; 239
     8a6:	80 93 a6 00 	sts	0x00A6, r24
     8aa:	92 e0       	ldi	r25, 0x02	; 2
     8ac:	0f c0       	rjmp	.+30     	; 0x8cc <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     8ae:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     8b2:	81 ff       	sbrs	r24, 1
     8b4:	07 c0       	rjmp	.+14     	; 0x8c4 <USB_Host_WaitMS+0x7e>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     8b6:	80 91 a6 00 	lds	r24, 0x00A6
     8ba:	8d 7f       	andi	r24, 0xFD	; 253
     8bc:	80 93 a6 00 	sts	0x00A6, r24
     8c0:	93 e0       	ldi	r25, 0x03	; 3
     8c2:	04 c0       	rjmp	.+8      	; 0x8cc <USB_Host_WaitMS+0x86>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     8c4:	99 23       	and	r25, r25
     8c6:	a1 f6       	brne	.-88     	; 0x870 <USB_Host_WaitMS+0x2a>
     8c8:	01 c0       	rjmp	.+2      	; 0x8cc <USB_Host_WaitMS+0x86>
     8ca:	91 e0       	ldi	r25, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     8cc:	20 fd       	sbrc	r18, 0
     8ce:	05 c0       	rjmp	.+10     	; 0x8da <USB_Host_WaitMS+0x94>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     8d0:	80 91 9e 00 	lds	r24, 0x009E
     8d4:	8e 7f       	andi	r24, 0xFE	; 254
     8d6:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     8da:	35 ff       	sbrs	r19, 5
     8dc:	05 c0       	rjmp	.+10     	; 0x8e8 <USB_Host_WaitMS+0xa2>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     8de:	80 91 a0 00 	lds	r24, 0x00A0
     8e2:	80 62       	ori	r24, 0x20	; 32
     8e4:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     8e8:	89 2f       	mov	r24, r25
     8ea:	08 95       	ret

000008ec <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     8ec:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     8f0:	80 91 a0 00 	lds	r24, 0x00A0
     8f4:	8d 7f       	andi	r24, 0xFD	; 253
     8f6:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     8fa:	80 91 9e 00 	lds	r24, 0x009E
     8fe:	82 60       	ori	r24, 0x02	; 2
     900:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     904:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     908:	81 fd       	sbrc	r24, 1
     90a:	fc cf       	rjmp	.-8      	; 0x904 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     90c:	80 91 9e 00 	lds	r24, 0x009E
     910:	81 60       	ori	r24, 0x01	; 1
     912:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     916:	10 92 e6 01 	sts	0x01E6, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     91a:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     91e:	80 91 a0 00 	lds	r24, 0x00A0
     922:	8f 7d       	andi	r24, 0xDF	; 223
     924:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     928:	80 91 9f 00 	lds	r24, 0x009F
     92c:	8f 7d       	andi	r24, 0xDF	; 223
     92e:	80 93 9f 00 	sts	0x009F, r24
     932:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     934:	40 ed       	ldi	r20, 0xD0	; 208
     936:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     938:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     93c:	85 ff       	sbrs	r24, 5
     93e:	0b c0       	rjmp	.+22     	; 0x956 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     940:	80 91 9f 00 	lds	r24, 0x009F
     944:	8f 7d       	andi	r24, 0xDF	; 223
     946:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     94a:	80 91 9f 00 	lds	r24, 0x009F
     94e:	8d 7f       	andi	r24, 0xFD	; 253
     950:	80 93 9f 00 	sts	0x009F, r24
     954:	05 c0       	rjmp	.+10     	; 0x960 <USB_Host_ResetDevice+0x74>
     956:	ca 01       	movw	r24, r20
     958:	01 97       	sbiw	r24, 0x01	; 1
     95a:	f1 f7       	brne	.-4      	; 0x958 <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     95c:	21 50       	subi	r18, 0x01	; 1
     95e:	61 f7       	brne	.-40     	; 0x938 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     960:	35 ff       	sbrs	r19, 5
     962:	05 c0       	rjmp	.+10     	; 0x96e <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     964:	80 91 a0 00 	lds	r24, 0x00A0
     968:	80 62       	ori	r24, 0x20	; 32
     96a:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     96e:	60 fd       	sbrc	r22, 0
     970:	05 c0       	rjmp	.+10     	; 0x97c <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     972:	80 91 9e 00 	lds	r24, 0x009E
     976:	8e 7f       	andi	r24, 0xFE	; 254
     978:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     97c:	80 91 a0 00 	lds	r24, 0x00A0
     980:	82 60       	ori	r24, 0x02	; 2
     982:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     986:	08 95       	ret

00000988 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     988:	ef 92       	push	r14
     98a:	0f 93       	push	r16
     98c:	1f 93       	push	r17
     98e:	df 93       	push	r29
     990:	cf 93       	push	r28
     992:	cd b7       	in	r28, 0x3d	; 61
     994:	de b7       	in	r29, 0x3e	; 62
     996:	28 97       	sbiw	r28, 0x08	; 8
     998:	0f b6       	in	r0, 0x3f	; 63
     99a:	f8 94       	cli
     99c:	de bf       	out	0x3e, r29	; 62
     99e:	0f be       	out	0x3f, r0	; 63
     9a0:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     9a2:	80 91 f1 01 	lds	r24, 0x01F1
     9a6:	85 30       	cpi	r24, 0x05	; 5
     9a8:	09 f4       	brne	.+2      	; 0x9ac <USB_Host_ProcessNextHostState+0x24>
     9aa:	94 c0       	rjmp	.+296    	; 0xad4 <USB_Host_ProcessNextHostState+0x14c>
     9ac:	86 30       	cpi	r24, 0x06	; 6
     9ae:	68 f4       	brcc	.+26     	; 0x9ca <USB_Host_ProcessNextHostState+0x42>
     9b0:	82 30       	cpi	r24, 0x02	; 2
     9b2:	b9 f1       	breq	.+110    	; 0xa22 <USB_Host_ProcessNextHostState+0x9a>
     9b4:	83 30       	cpi	r24, 0x03	; 3
     9b6:	18 f4       	brcc	.+6      	; 0x9be <USB_Host_ProcessNextHostState+0x36>
     9b8:	88 23       	and	r24, r24
     9ba:	a1 f0       	breq	.+40     	; 0x9e4 <USB_Host_ProcessNextHostState+0x5c>
     9bc:	04 c1       	rjmp	.+520    	; 0xbc6 <USB_Host_ProcessNextHostState+0x23e>
     9be:	83 30       	cpi	r24, 0x03	; 3
     9c0:	d1 f1       	breq	.+116    	; 0xa36 <USB_Host_ProcessNextHostState+0xae>
     9c2:	84 30       	cpi	r24, 0x04	; 4
     9c4:	09 f0       	breq	.+2      	; 0x9c8 <USB_Host_ProcessNextHostState+0x40>
     9c6:	ff c0       	rjmp	.+510    	; 0xbc6 <USB_Host_ProcessNextHostState+0x23e>
     9c8:	5d c0       	rjmp	.+186    	; 0xa84 <USB_Host_ProcessNextHostState+0xfc>
     9ca:	87 30       	cpi	r24, 0x07	; 7
     9cc:	09 f4       	brne	.+2      	; 0x9d0 <USB_Host_ProcessNextHostState+0x48>
     9ce:	9b c0       	rjmp	.+310    	; 0xb06 <USB_Host_ProcessNextHostState+0x17e>
     9d0:	87 30       	cpi	r24, 0x07	; 7
     9d2:	08 f4       	brcc	.+2      	; 0x9d6 <USB_Host_ProcessNextHostState+0x4e>
     9d4:	8a c0       	rjmp	.+276    	; 0xaea <USB_Host_ProcessNextHostState+0x162>
     9d6:	88 30       	cpi	r24, 0x08	; 8
     9d8:	09 f4       	brne	.+2      	; 0x9dc <USB_Host_ProcessNextHostState+0x54>
     9da:	b3 c0       	rjmp	.+358    	; 0xb42 <USB_Host_ProcessNextHostState+0x1ba>
     9dc:	89 30       	cpi	r24, 0x09	; 9
     9de:	09 f0       	breq	.+2      	; 0x9e2 <USB_Host_ProcessNextHostState+0x5a>
     9e0:	f2 c0       	rjmp	.+484    	; 0xbc6 <USB_Host_ProcessNextHostState+0x23e>
     9e2:	d7 c0       	rjmp	.+430    	; 0xb92 <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     9e4:	00 91 e0 01 	lds	r16, 0x01E0
     9e8:	10 91 e1 01 	lds	r17, 0x01E1
     9ec:	01 15       	cp	r16, r1
     9ee:	11 05       	cpc	r17, r1
     9f0:	09 f4       	brne	.+2      	; 0x9f4 <USB_Host_ProcessNextHostState+0x6c>
     9f2:	e9 c0       	rjmp	.+466    	; 0xbc6 <USB_Host_ProcessNextHostState+0x23e>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	27 df       	rcall	.-434    	; 0x846 <USB_Host_WaitMS>
     9f8:	68 2f       	mov	r22, r24
     9fa:	88 23       	and	r24, r24
     9fc:	31 f0       	breq	.+12     	; 0xa0a <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
     9fe:	80 91 df 01 	lds	r24, 0x01DF
     a02:	80 93 f1 01 	sts	0x01F1, r24
     a06:	91 e0       	ldi	r25, 0x01	; 1
     a08:	da c0       	rjmp	.+436    	; 0xbbe <USB_Host_ProcessNextHostState+0x236>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     a0a:	c8 01       	movw	r24, r16
     a0c:	01 97       	sbiw	r24, 0x01	; 1
     a0e:	90 93 e1 01 	sts	0x01E1, r25
     a12:	80 93 e0 01 	sts	0x01E0, r24
     a16:	89 2b       	or	r24, r25
     a18:	09 f0       	breq	.+2      	; 0xa1c <USB_Host_ProcessNextHostState+0x94>
     a1a:	d5 c0       	rjmp	.+426    	; 0xbc6 <USB_Host_ProcessNextHostState+0x23e>
				  USB_HostState = PostWaitState;
     a1c:	80 91 df 01 	lds	r24, 0x01DF
     a20:	07 c0       	rjmp	.+14     	; 0xa30 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     a22:	88 ee       	ldi	r24, 0xE8	; 232
     a24:	93 e0       	ldi	r25, 0x03	; 3
     a26:	90 93 e1 01 	sts	0x01E1, r25
     a2a:	80 93 e0 01 	sts	0x01E0, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	80 93 f1 01 	sts	0x01F1, r24
     a34:	c8 c0       	rjmp	.+400    	; 0xbc6 <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     a36:	80 91 e0 01 	lds	r24, 0x01E0
     a3a:	90 91 e1 01 	lds	r25, 0x01E1
     a3e:	01 97       	sbiw	r24, 0x01	; 1
     a40:	90 93 e1 01 	sts	0x01E1, r25
     a44:	80 93 e0 01 	sts	0x01E0, r24
     a48:	01 96       	adiw	r24, 0x01	; 1
     a4a:	29 f0       	breq	.+10     	; 0xa56 <USB_Host_ProcessNextHostState+0xce>
     a4c:	80 ed       	ldi	r24, 0xD0	; 208
     a4e:	97 e0       	ldi	r25, 0x07	; 7
     a50:	01 97       	sbiw	r24, 0x01	; 1
     a52:	f1 f7       	brne	.-4      	; 0xa50 <USB_Host_ProcessNextHostState+0xc8>
     a54:	b8 c0       	rjmp	.+368    	; 0xbc6 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     a56:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     a58:	80 91 d8 00 	lds	r24, 0x00D8
     a5c:	80 61       	ori	r24, 0x10	; 16
     a5e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     a62:	80 91 dd 00 	lds	r24, 0x00DD
     a66:	8b 7f       	andi	r24, 0xFB	; 251
     a68:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     a6c:	80 91 d7 00 	lds	r24, 0x00D7
     a70:	80 61       	ori	r24, 0x10	; 16
     a72:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     a76:	80 91 dd 00 	lds	r24, 0x00DD
     a7a:	82 60       	ori	r24, 0x02	; 2
     a7c:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     a80:	84 e0       	ldi	r24, 0x04	; 4
     a82:	d6 cf       	rjmp	.-84     	; 0xa30 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     a84:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     a88:	80 ff       	sbrs	r24, 0
     a8a:	9d c0       	rjmp	.+314    	; 0xbc6 <USB_Host_ProcessNextHostState+0x23e>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     a8c:	80 91 9f 00 	lds	r24, 0x009F
     a90:	8e 7f       	andi	r24, 0xFE	; 254
     a92:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     a96:	80 91 9f 00 	lds	r24, 0x009F
     a9a:	8d 7f       	andi	r24, 0xFD	; 253
     a9c:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     aa0:	80 91 df 00 	lds	r24, 0x00DF
     aa4:	8d 7f       	andi	r24, 0xFD	; 253
     aa6:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     aaa:	80 91 de 00 	lds	r24, 0x00DE
     aae:	82 60       	ori	r24, 0x02	; 2
     ab0:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     ab4:	80 91 9e 00 	lds	r24, 0x009E
     ab8:	81 60       	ori	r24, 0x01	; 1
     aba:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     abe:	ed d0       	rcall	.+474    	; 0xc9a <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     ac0:	10 92 f1 01 	sts	0x01F1, r1
     ac4:	84 e6       	ldi	r24, 0x64	; 100
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	90 93 e1 01 	sts	0x01E1, r25
     acc:	80 93 e0 01 	sts	0x01E0, r24
     ad0:	85 e0       	ldi	r24, 0x05	; 5
     ad2:	5c c0       	rjmp	.+184    	; 0xb8c <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     ad4:	0b df       	rcall	.-490    	; 0x8ec <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     ad6:	10 92 f1 01 	sts	0x01F1, r1
     ada:	88 ec       	ldi	r24, 0xC8	; 200
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	90 93 e1 01 	sts	0x01E1, r25
     ae2:	80 93 e0 01 	sts	0x01E0, r24
     ae6:	86 e0       	ldi	r24, 0x06	; 6
     ae8:	51 c0       	rjmp	.+162    	; 0xb8c <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	60 e0       	ldi	r22, 0x00	; 0
     aee:	40 e0       	ldi	r20, 0x00	; 0
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	00 e4       	ldi	r16, 0x40	; 64
     af4:	10 e0       	ldi	r17, 0x00	; 0
     af6:	ee 24       	eor	r14, r14
     af8:	72 d0       	rcall	.+228    	; 0xbde <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     afa:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     afe:	87 ff       	sbrs	r24, 7
     b00:	5c c0       	rjmp	.+184    	; 0xbba <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     b02:	87 e0       	ldi	r24, 0x07	; 7
     b04:	95 cf       	rjmp	.-214    	; 0xa30 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     b06:	a9 ee       	ldi	r26, 0xE9	; 233
     b08:	b1 e0       	ldi	r27, 0x01	; 1
     b0a:	e3 ed       	ldi	r30, 0xD3	; 211
     b0c:	f1 e0       	ldi	r31, 0x01	; 1
     b0e:	88 e0       	ldi	r24, 0x08	; 8
     b10:	01 90       	ld	r0, Z+
     b12:	0d 92       	st	X+, r0
     b14:	81 50       	subi	r24, 0x01	; 1
     b16:	e1 f7       	brne	.-8      	; 0xb10 <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     b18:	ce 01       	movw	r24, r28
     b1a:	01 96       	adiw	r24, 0x01	; 1
     b1c:	59 d7       	rcall	.+3762   	; 0x19d0 <USB_Host_SendControlRequest>
     b1e:	68 2f       	mov	r22, r24
     b20:	88 23       	and	r24, r24
     b22:	09 f0       	breq	.+2      	; 0xb26 <USB_Host_ProcessNextHostState+0x19e>
     b24:	48 c0       	rjmp	.+144    	; 0xbb6 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     b26:	88 85       	ldd	r24, Y+8	; 0x08
     b28:	80 93 db 01 	sts	0x01DB, r24

			USB_Host_ResetDevice();
     b2c:	df de       	rcall	.-578    	; 0x8ec <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     b2e:	10 92 f1 01 	sts	0x01F1, r1
     b32:	88 ec       	ldi	r24, 0xC8	; 200
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	90 93 e1 01 	sts	0x01E1, r25
     b3a:	80 93 e0 01 	sts	0x01E0, r24
     b3e:	88 e0       	ldi	r24, 0x08	; 8
     b40:	25 c0       	rjmp	.+74     	; 0xb8c <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     b42:	00 91 db 01 	lds	r16, 0x01DB
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	60 e0       	ldi	r22, 0x00	; 0
     b4a:	40 e0       	ldi	r20, 0x00	; 0
     b4c:	20 e0       	ldi	r18, 0x00	; 0
     b4e:	10 e0       	ldi	r17, 0x00	; 0
     b50:	ee 24       	eor	r14, r14
     b52:	45 d0       	rcall	.+138    	; 0xbde <Pipe_ConfigurePipe>
     b54:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     b58:	87 ff       	sbrs	r24, 7
     b5a:	2f c0       	rjmp	.+94     	; 0xbba <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     b5c:	a9 ee       	ldi	r26, 0xE9	; 233
     b5e:	b1 e0       	ldi	r27, 0x01	; 1
     b60:	eb ec       	ldi	r30, 0xCB	; 203
     b62:	f1 e0       	ldi	r31, 0x01	; 1
     b64:	88 e0       	ldi	r24, 0x08	; 8
     b66:	01 90       	ld	r0, Z+
     b68:	0d 92       	st	X+, r0
     b6a:	81 50       	subi	r24, 0x01	; 1
     b6c:	e1 f7       	brne	.-8      	; 0xb66 <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	2e d7       	rcall	.+3676   	; 0x19d0 <USB_Host_SendControlRequest>
     b74:	68 2f       	mov	r22, r24
     b76:	88 23       	and	r24, r24
     b78:	f1 f4       	brne	.+60     	; 0xbb6 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     b7a:	10 92 f1 01 	sts	0x01F1, r1
     b7e:	84 e6       	ldi	r24, 0x64	; 100
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	90 93 e1 01 	sts	0x01E1, r25
     b86:	80 93 e0 01 	sts	0x01E0, r24
     b8a:	89 e0       	ldi	r24, 0x09	; 9
     b8c:	80 93 df 01 	sts	0x01DF, r24
     b90:	1a c0       	rjmp	.+52     	; 0xbc6 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     b98:	8a e0       	ldi	r24, 0x0A	; 10
     b9a:	80 93 f1 01 	sts	0x01F1, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     b9e:	61 dd       	rcall	.-1342   	; 0x662 <EVENT_USB_Host_DeviceEnumerationComplete>
     ba0:	12 c0       	rjmp	.+36     	; 0xbc6 <USB_Host_ProcessNextHostState+0x23e>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     ba2:	89 2f       	mov	r24, r25
     ba4:	15 dd       	rcall	.-1494   	; 0x5d0 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     ba6:	80 91 dd 00 	lds	r24, 0x00DD
     baa:	81 60       	ori	r24, 0x01	; 1
     bac:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     bb0:	af dd       	rcall	.-1186   	; 0x710 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     bb2:	f2 d0       	rcall	.+484    	; 0xd98 <USB_ResetInterface>
     bb4:	08 c0       	rjmp	.+16     	; 0xbc6 <USB_Host_ProcessNextHostState+0x23e>
	}
}
     bb6:	93 e0       	ldi	r25, 0x03	; 3
     bb8:	02 c0       	rjmp	.+4      	; 0xbbe <USB_Host_ProcessNextHostState+0x236>
     bba:	94 e0       	ldi	r25, 0x04	; 4
     bbc:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     bbe:	80 91 f1 01 	lds	r24, 0x01F1
     bc2:	81 30       	cpi	r24, 0x01	; 1
     bc4:	71 f7       	brne	.-36     	; 0xba2 <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     bc6:	28 96       	adiw	r28, 0x08	; 8
     bc8:	0f b6       	in	r0, 0x3f	; 63
     bca:	f8 94       	cli
     bcc:	de bf       	out	0x3e, r29	; 62
     bce:	0f be       	out	0x3f, r0	; 63
     bd0:	cd bf       	out	0x3d, r28	; 61
     bd2:	cf 91       	pop	r28
     bd4:	df 91       	pop	r29
     bd6:	1f 91       	pop	r17
     bd8:	0f 91       	pop	r16
     bda:	ef 90       	pop	r14
     bdc:	08 95       	ret

00000bde <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     bde:	ef 92       	push	r14
     be0:	0f 93       	push	r16
     be2:	1f 93       	push	r17
     be4:	e8 2f       	mov	r30, r24
     be6:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     be8:	62 95       	swap	r22
     bea:	66 0f       	add	r22, r22
     bec:	66 0f       	add	r22, r22
     bee:	60 7c       	andi	r22, 0xC0	; 192
     bf0:	64 2b       	or	r22, r20
     bf2:	2f 70       	andi	r18, 0x0F	; 15
     bf4:	62 2b       	or	r22, r18
     bf6:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     bf8:	72 60       	ori	r23, 0x02	; 2
     bfa:	45 c0       	rjmp	.+138    	; 0xc86 <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     bfc:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     c00:	3e 17       	cp	r19, r30
     c02:	a1 f4       	brne	.+40     	; 0xc2c <Pipe_ConfigurePipe+0x4e>
     c04:	88 e0       	ldi	r24, 0x08	; 8
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	03 c0       	rjmp	.+6      	; 0xc12 <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     c0c:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     c0e:	88 0f       	add	r24, r24
     c10:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     c12:	80 17       	cp	r24, r16
     c14:	91 07       	cpc	r25, r17
     c16:	10 f4       	brcc	.+4      	; 0xc1c <Pipe_ConfigurePipe+0x3e>
     c18:	25 30       	cpi	r18, 0x05	; 5
     c1a:	c1 f7       	brne	.-16     	; 0xc0c <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     c1c:	92 2f       	mov	r25, r18
     c1e:	92 95       	swap	r25
     c20:	90 7f       	andi	r25, 0xF0	; 240
     c22:	97 2b       	or	r25, r23
     c24:	56 2f       	mov	r21, r22
     c26:	40 e0       	ldi	r20, 0x00	; 0
     c28:	20 e0       	ldi	r18, 0x00	; 0
     c2a:	08 c0       	rjmp	.+16     	; 0xc3c <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     c2c:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     c30:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     c34:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
     c38:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     c3c:	91 ff       	sbrs	r25, 1
     c3e:	22 c0       	rjmp	.+68     	; 0xc84 <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     c40:	80 91 a9 00 	lds	r24, 0x00A9
     c44:	8e 7f       	andi	r24, 0xFE	; 254
     c46:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     c4a:	80 91 ab 00 	lds	r24, 0x00AB
     c4e:	8d 7f       	andi	r24, 0xFD	; 253
     c50:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     c54:	80 91 a9 00 	lds	r24, 0x00A9
     c58:	81 60       	ori	r24, 0x01	; 1
     c5a:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     c5e:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
     c62:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
     c66:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
     c6a:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     c6e:	80 91 a9 00 	lds	r24, 0x00A9
     c72:	80 62       	ori	r24, 0x20	; 32
     c74:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     c78:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     c7c:	87 fd       	sbrc	r24, 7
     c7e:	02 c0       	rjmp	.+4      	; 0xc84 <Pipe_ConfigurePipe+0xa6>
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	07 c0       	rjmp	.+14     	; 0xc92 <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     c84:	3f 5f       	subi	r19, 0xFF	; 255
     c86:	37 30       	cpi	r19, 0x07	; 7
     c88:	08 f4       	brcc	.+2      	; 0xc8c <Pipe_ConfigurePipe+0xae>
     c8a:	b8 cf       	rjmp	.-144    	; 0xbfc <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     c8c:	e0 93 a7 00 	sts	0x00A7, r30
     c90:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
     c92:	1f 91       	pop	r17
     c94:	0f 91       	pop	r16
     c96:	ef 90       	pop	r14
     c98:	08 95       	ret

00000c9a <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     c9a:	10 92 f8 00 	sts	0x00F8, r1
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     ca4:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     ca8:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     cac:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     cb0:	80 91 a9 00 	lds	r24, 0x00A9
     cb4:	8e 7f       	andi	r24, 0xFE	; 254
     cb6:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     cba:	9f 5f       	subi	r25, 0xFF	; 255
     cbc:	97 30       	cpi	r25, 0x07	; 7
     cbe:	81 f7       	brne	.-32     	; 0xca0 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     cc0:	08 95       	ret

00000cc2 <Pipe_IsEndpointBound>:

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
     cc2:	48 2f       	mov	r20, r24
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     cc4:	30 91 a7 00 	lds	r19, 0x00A7
     cc8:	20 e0       	ldi	r18, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     cca:	20 93 a7 00 	sts	0x00A7, r18
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     cce:	80 91 ac 00 	lds	r24, 0x00AC

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     cd2:	87 ff       	sbrs	r24, 7
     cd4:	10 c0       	rjmp	.+32     	; 0xcf6 <Pipe_IsEndpointBound+0x34>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     cd6:	90 91 aa 00 	lds	r25, 0x00AA
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     cda:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     cde:	80 73       	andi	r24, 0x30	; 48
     ce0:	80 31       	cpi	r24, 0x10	; 16
     ce2:	11 f0       	breq	.+4      	; 0xce8 <Pipe_IsEndpointBound+0x26>
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	01 c0       	rjmp	.+2      	; 0xcea <Pipe_IsEndpointBound+0x28>
     ce8:	80 e8       	ldi	r24, 0x80	; 128
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     cea:	9f 70       	andi	r25, 0x0F	; 15
     cec:	89 2b       	or	r24, r25
     cee:	84 17       	cp	r24, r20
     cf0:	11 f4       	brne	.+4      	; 0xcf6 <Pipe_IsEndpointBound+0x34>
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	08 95       	ret

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     cf6:	2f 5f       	subi	r18, 0xFF	; 255
     cf8:	27 30       	cpi	r18, 0x07	; 7
     cfa:	39 f7       	brne	.-50     	; 0xcca <Pipe_IsEndpointBound+0x8>
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     cfc:	37 70       	andi	r19, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     cfe:	30 93 a7 00 	sts	0x00A7, r19
     d02:	80 e0       	ldi	r24, 0x00	; 0
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     d04:	08 95       	ret

00000d06 <Pipe_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     d06:	40 91 a2 00 	lds	r20, 0x00A2
     d0a:	50 91 a3 00 	lds	r21, 0x00A3
     d0e:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     d10:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     d14:	80 73       	andi	r24, 0x30	; 48
     d16:	80 31       	cpi	r24, 0x10	; 16
     d18:	29 f4       	brne	.+10     	; 0xd24 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     d1a:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     d1e:	80 ff       	sbrs	r24, 0
     d20:	05 c0       	rjmp	.+10     	; 0xd2c <Pipe_WaitUntilReady+0x26>
     d22:	1e c0       	rjmp	.+60     	; 0xd60 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     d24:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     d28:	82 fd       	sbrc	r24, 2
     d2a:	1a c0       	rjmp	.+52     	; 0xd60 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     d2c:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     d30:	81 ff       	sbrs	r24, 1
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <Pipe_WaitUntilReady+0x32>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     d38:	80 91 f1 01 	lds	r24, 0x01F1
     d3c:	81 30       	cpi	r24, 0x01	; 1
     d3e:	11 f4       	brne	.+4      	; 0xd44 <Pipe_WaitUntilReady+0x3e>
     d40:	82 e0       	ldi	r24, 0x02	; 2
     d42:	08 95       	ret
     d44:	80 91 a2 00 	lds	r24, 0x00A2
     d48:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     d4c:	84 17       	cp	r24, r20
     d4e:	95 07       	cpc	r25, r21
     d50:	f9 f2       	breq	.-66     	; 0xd10 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     d52:	22 23       	and	r18, r18
     d54:	11 f4       	brne	.+4      	; 0xd5a <Pipe_WaitUntilReady+0x54>
     d56:	83 e0       	ldi	r24, 0x03	; 3
     d58:	08 95       	ret
     d5a:	21 50       	subi	r18, 0x01	; 1
     d5c:	ac 01       	movw	r20, r24
     d5e:	d8 cf       	rjmp	.-80     	; 0xd10 <Pipe_WaitUntilReady+0xa>
     d60:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     d62:	08 95       	ret

00000d64 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     d64:	cf d0       	rcall	.+414    	; 0xf04 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     d66:	da d0       	rcall	.+436    	; 0xf1c <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     d68:	e0 ee       	ldi	r30, 0xE0	; 224
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	81 60       	ori	r24, 0x01	; 1
     d70:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     d72:	a8 ed       	ldi	r26, 0xD8	; 216
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	8c 91       	ld	r24, X
     d78:	8f 77       	andi	r24, 0x7F	; 127
     d7a:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     d7c:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     d7e:	e7 ed       	ldi	r30, 0xD7	; 215
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	8e 7f       	andi	r24, 0xFE	; 254
     d86:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     d88:	8c 91       	ld	r24, X
     d8a:	8f 7e       	andi	r24, 0xEF	; 239
     d8c:	8c 93       	st	X, r24
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USB_OTGPAD_Off();
	#endif

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
     d8e:	10 92 e2 01 	sts	0x01E2, r1
	#endif

	USB_IsInitialized = false;
     d92:	10 92 e7 01 	sts	0x01E7, r1
}
     d96:	08 95       	ret

00000d98 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     d98:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
     d9a:	10 91 d7 00 	lds	r17, 0x00D7
	#endif

	USB_INT_DisableAllInterrupts();
     d9e:	b2 d0       	rcall	.+356    	; 0xf04 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     da0:	bd d0       	rcall	.+378    	; 0xf1c <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     da2:	80 91 d8 00 	lds	r24, 0x00D8
     da6:	8f 77       	andi	r24, 0x7F	; 127
     da8:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     dac:	80 91 d8 00 	lds	r24, 0x00D8
     db0:	80 68       	ori	r24, 0x80	; 128
     db2:	80 93 d8 00 	sts	0x00D8, r24

	USB_Controller_Reset();

	#if defined(USB_CAN_BE_BOTH)
	if (UIDModeSelectEnabled)
     db6:	16 ff       	sbrs	r17, 6
     db8:	05 c0       	rjmp	.+10     	; 0xdc4 <USB_ResetInterface+0x2c>
						USBCON |= (1 << VBUSTE);
						break;
					#endif
					#if defined(USB_CAN_BE_BOTH)
					case USB_INT_IDTI:
						USBCON |= (1 << IDTE);
     dba:	80 91 d8 00 	lds	r24, 0x00D8
     dbe:	82 60       	ori	r24, 0x02	; 2
     dc0:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     dc4:	80 91 d8 00 	lds	r24, 0x00D8
     dc8:	8f 7d       	andi	r24, 0xDF	; 223
     dca:	80 93 d8 00 	sts	0x00D8, r24
	  USB_INT_Enable(USB_INT_IDTI);
	#endif

	USB_CLK_Unfreeze();

	if (USB_CurrentMode == USB_MODE_Device)
     dce:	80 91 e2 01 	lds	r24, 0x01E2
     dd2:	81 30       	cpi	r24, 0x01	; 1
     dd4:	61 f5       	brne	.+88     	; 0xe2e <USB_ResetInterface+0x96>
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     dd6:	80 91 d7 00 	lds	r24, 0x00D7
     dda:	80 68       	ori	r24, 0x80	; 128
     ddc:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     de0:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     de2:	10 92 e8 01 	sts	0x01E8, r1
	USB_Device_ConfigurationNumber  = 0;
     de6:	10 92 e3 01 	sts	0x01E3, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     dea:	10 92 e5 01 	sts	0x01E5, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     dee:	10 92 e4 01 	sts	0x01E4, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     df2:	80 91 e0 00 	lds	r24, 0x00E0
     df6:	8b 7f       	andi	r24, 0xFB	; 251
     df8:	80 93 e0 00 	sts	0x00E0, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     dfc:	80 91 d8 00 	lds	r24, 0x00D8
     e00:	81 60       	ori	r24, 0x01	; 1
     e02:	80 93 d8 00 	sts	0x00D8, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	42 e0       	ldi	r20, 0x02	; 2
     e0c:	93 dc       	rcall	.-1754   	; 0x734 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     e0e:	80 91 e1 00 	lds	r24, 0x00E1
     e12:	8e 7f       	andi	r24, 0xFE	; 254
     e14:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     e18:	80 91 e2 00 	lds	r24, 0x00E2
     e1c:	81 60       	ori	r24, 0x01	; 1
     e1e:	80 93 e2 00 	sts	0x00E2, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     e22:	80 91 e2 00 	lds	r24, 0x00E2
     e26:	88 60       	ori	r24, 0x08	; 8
     e28:	80 93 e2 00 	sts	0x00E2, r24
     e2c:	38 c0       	rjmp	.+112    	; 0xe9e <USB_ResetInterface+0x106>
		}

		USB_Init_Device();
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
     e2e:	80 91 e2 01 	lds	r24, 0x01E2
     e32:	82 30       	cpi	r24, 0x02	; 2
     e34:	c9 f5       	brne	.+114    	; 0xea8 <USB_ResetInterface+0x110>
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     e36:	80 91 d7 00 	lds	r24, 0x00D7
     e3a:	8f 77       	andi	r24, 0x7F	; 127
     e3c:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     e40:	8c e0       	ldi	r24, 0x0C	; 12
     e42:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     e44:	8e e0       	ldi	r24, 0x0E	; 14
     e46:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     e48:	09 b4       	in	r0, 0x29	; 41
     e4a:	00 fe       	sbrs	r0, 0
     e4c:	fd cf       	rjmp	.-6      	; 0xe48 <USB_ResetInterface+0xb0>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	80 93 f1 01 	sts	0x01F1, r24
	USB_Host_ConfigurationNumber = 0;
     e54:	10 92 e6 01 	sts	0x01E6, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     e58:	80 e4       	ldi	r24, 0x40	; 64
     e5a:	80 93 db 01 	sts	0x01DB, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     e5e:	80 91 d8 00 	lds	r24, 0x00D8
     e62:	80 64       	ori	r24, 0x40	; 64
     e64:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     e68:	80 91 dd 00 	lds	r24, 0x00DD
     e6c:	81 60       	ori	r24, 0x01	; 1
     e6e:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     e72:	80 91 dd 00 	lds	r24, 0x00DD
     e76:	84 60       	ori	r24, 0x04	; 4
     e78:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     e7c:	80 91 d7 00 	lds	r24, 0x00D7
     e80:	8f 7e       	andi	r24, 0xEF	; 239
     e82:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     e86:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     e88:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     e8a:	80 91 de 00 	lds	r24, 0x00DE
     e8e:	81 60       	ori	r24, 0x01	; 1
     e90:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     e94:	80 91 de 00 	lds	r24, 0x00DE
     e98:	84 60       	ori	r24, 0x04	; 4
     e9a:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     e9e:	80 91 e0 00 	lds	r24, 0x00E0
     ea2:	8e 7f       	andi	r24, 0xFE	; 254
     ea4:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     ea8:	80 91 d8 00 	lds	r24, 0x00D8
     eac:	80 61       	ori	r24, 0x10	; 16
     eae:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     eb2:	1f 91       	pop	r17
     eb4:	08 95       	ret

00000eb6 <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
     eb6:	98 2f       	mov	r25, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     eb8:	80 91 d7 00 	lds	r24, 0x00D7
     ebc:	81 60       	ori	r24, 0x01	; 1
     ebe:	80 93 d7 00 	sts	0x00D7, r24
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif
	}

	#if defined(USB_CAN_BE_BOTH)
	if (Mode == USB_MODE_UID)
     ec2:	93 30       	cpi	r25, 0x03	; 3
     ec4:	a1 f4       	brne	.+40     	; 0xeee <USB_Init+0x38>
	{
		UHWCON |=  (1 << UIDE);
     ec6:	80 91 d7 00 	lds	r24, 0x00D7
     eca:	80 64       	ori	r24, 0x40	; 64
     ecc:	80 93 d7 00 	sts	0x00D7, r24
						USBCON |= (1 << VBUSTE);
						break;
					#endif
					#if defined(USB_CAN_BE_BOTH)
					case USB_INT_IDTI:
						USBCON |= (1 << IDTE);
     ed0:	80 91 d8 00 	lds	r24, 0x00D8
     ed4:	82 60       	ori	r24, 0x02	; 2
     ed6:	80 93 d8 00 	sts	0x00D8, r24

			#if defined(USB_CAN_BE_BOTH)
			static inline uint8_t USB_GetUSBModeFromUID(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t USB_GetUSBModeFromUID(void)
			{
				if (USBSTA & (1 << ID))
     eda:	80 91 d9 00 	lds	r24, 0x00D9
     ede:	81 fd       	sbrc	r24, 1
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <USB_Init+0x30>
     ee2:	82 e0       	ldi	r24, 0x02	; 2
     ee4:	01 c0       	rjmp	.+2      	; 0xee8 <USB_Init+0x32>
     ee6:	81 e0       	ldi	r24, 0x01	; 1
		USB_INT_Enable(USB_INT_IDTI);
		USB_CurrentMode = USB_GetUSBModeFromUID();
     ee8:	80 93 e2 01 	sts	0x01E2, r24
     eec:	07 c0       	rjmp	.+14     	; 0xefc <USB_Init+0x46>
	}
	else
	{
		UHWCON &= ~(1 << UIDE);
     eee:	80 91 d7 00 	lds	r24, 0x00D7
     ef2:	8f 7b       	andi	r24, 0xBF	; 191
     ef4:	80 93 d7 00 	sts	0x00D7, r24
		USB_CurrentMode = Mode;
     ef8:	90 93 e2 01 	sts	0x01E2, r25
	}
	#endif

	USB_IsInitialized = true;
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	80 93 e7 01 	sts	0x01E7, r24

	USB_ResetInterface();
}
     f02:	4a cf       	rjmp	.-364    	; 0xd98 <USB_ResetInterface>

00000f04 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     f04:	e8 ed       	ldi	r30, 0xD8	; 216
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	8c 7f       	andi	r24, 0xFC	; 252
     f0c:	80 83       	st	Z, r24
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
	#endif

	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
     f0e:	10 92 de 00 	sts	0x00DE, r1
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     f12:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     f16:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     f1a:	08 95       	ret

00000f1c <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     f1c:	10 92 da 00 	sts	0x00DA, r1
	#endif

	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
     f20:	10 92 df 00 	sts	0x00DF, r1
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     f24:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     f28:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     f2c:	08 95       	ret

00000f2e <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     f2e:	1f 92       	push	r1
     f30:	0f 92       	push	r0
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	0f 92       	push	r0
     f36:	0b b6       	in	r0, 0x3b	; 59
     f38:	0f 92       	push	r0
     f3a:	11 24       	eor	r1, r1
     f3c:	2f 93       	push	r18
     f3e:	3f 93       	push	r19
     f40:	4f 93       	push	r20
     f42:	5f 93       	push	r21
     f44:	6f 93       	push	r22
     f46:	7f 93       	push	r23
     f48:	8f 93       	push	r24
     f4a:	9f 93       	push	r25
     f4c:	af 93       	push	r26
     f4e:	bf 93       	push	r27
     f50:	ef 93       	push	r30
     f52:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     f54:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     f58:	82 ff       	sbrs	r24, 2
     f5a:	0a c0       	rjmp	.+20     	; 0xf70 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     f5c:	80 91 e2 00 	lds	r24, 0x00E2
     f60:	82 ff       	sbrs	r24, 2
     f62:	06 c0       	rjmp	.+12     	; 0xf70 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     f64:	80 91 e1 00 	lds	r24, 0x00E1
     f68:	8b 7f       	andi	r24, 0xFB	; 251
     f6a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     f6e:	73 da       	rcall	.-2842   	; 0x456 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     f70:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     f74:	80 ff       	sbrs	r24, 0
     f76:	1d c0       	rjmp	.+58     	; 0xfb2 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     f78:	80 91 d8 00 	lds	r24, 0x00D8
     f7c:	80 ff       	sbrs	r24, 0
     f7e:	19 c0       	rjmp	.+50     	; 0xfb2 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     f80:	80 91 da 00 	lds	r24, 0x00DA
     f84:	8e 7f       	andi	r24, 0xFE	; 254
     f86:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     f8a:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     f8e:	80 ff       	sbrs	r24, 0
     f90:	0c c0       	rjmp	.+24     	; 0xfaa <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     f92:	8c e0       	ldi	r24, 0x0C	; 12
     f94:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     f96:	8e e0       	ldi	r24, 0x0E	; 14
     f98:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     f9a:	09 b4       	in	r0, 0x29	; 41
     f9c:	00 fe       	sbrs	r0, 0
     f9e:	fd cf       	rjmp	.-6      	; 0xf9a <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	80 93 e8 01 	sts	0x01E8, r24
			EVENT_USB_Device_Connect();
     fa6:	4d da       	rcall	.-2918   	; 0x442 <EVENT_USB_Device_Connect>
     fa8:	04 c0       	rjmp	.+8      	; 0xfb2 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     faa:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     fac:	10 92 e8 01 	sts	0x01E8, r1
			EVENT_USB_Device_Disconnect();
     fb0:	4d da       	rcall	.-2918   	; 0x44c <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     fb2:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     fb6:	80 ff       	sbrs	r24, 0
     fb8:	18 c0       	rjmp	.+48     	; 0xfea <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     fba:	80 91 e2 00 	lds	r24, 0x00E2
     fbe:	80 ff       	sbrs	r24, 0
     fc0:	14 c0       	rjmp	.+40     	; 0xfea <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     fc2:	80 91 e2 00 	lds	r24, 0x00E2
     fc6:	8e 7f       	andi	r24, 0xFE	; 254
     fc8:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     fcc:	80 91 e2 00 	lds	r24, 0x00E2
     fd0:	80 61       	ori	r24, 0x10	; 16
     fd2:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     fd6:	80 91 d8 00 	lds	r24, 0x00D8
     fda:	80 62       	ori	r24, 0x20	; 32
     fdc:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     fe0:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     fe2:	85 e0       	ldi	r24, 0x05	; 5
     fe4:	80 93 e8 01 	sts	0x01E8, r24
		EVENT_USB_Device_Suspend();
     fe8:	c8 d4       	rcall	.+2448   	; 0x197a <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     fea:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     fee:	84 ff       	sbrs	r24, 4
     ff0:	2d c0       	rjmp	.+90     	; 0x104c <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     ff2:	80 91 e2 00 	lds	r24, 0x00E2
     ff6:	84 ff       	sbrs	r24, 4
     ff8:	29 c0       	rjmp	.+82     	; 0x104c <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     ffa:	8c e0       	ldi	r24, 0x0C	; 12
     ffc:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     ffe:	8e e0       	ldi	r24, 0x0E	; 14
    1000:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1002:	09 b4       	in	r0, 0x29	; 41
    1004:	00 fe       	sbrs	r0, 0
    1006:	fd cf       	rjmp	.-6      	; 0x1002 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    1008:	80 91 d8 00 	lds	r24, 0x00D8
    100c:	8f 7d       	andi	r24, 0xDF	; 223
    100e:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1012:	80 91 e1 00 	lds	r24, 0x00E1
    1016:	8f 7e       	andi	r24, 0xEF	; 239
    1018:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    101c:	80 91 e2 00 	lds	r24, 0x00E2
    1020:	8f 7e       	andi	r24, 0xEF	; 239
    1022:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1026:	80 91 e2 00 	lds	r24, 0x00E2
    102a:	81 60       	ori	r24, 0x01	; 1
    102c:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1030:	80 91 e3 01 	lds	r24, 0x01E3
    1034:	88 23       	and	r24, r24
    1036:	31 f4       	brne	.+12     	; 0x1044 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1038:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    103c:	87 fd       	sbrc	r24, 7
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <__vector_10+0x116>
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	01 c0       	rjmp	.+2      	; 0x1046 <__vector_10+0x118>
    1044:	84 e0       	ldi	r24, 0x04	; 4
    1046:	80 93 e8 01 	sts	0x01E8, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    104a:	97 d4       	rcall	.+2350   	; 0x197a <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    104c:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1050:	83 ff       	sbrs	r24, 3
    1052:	22 c0       	rjmp	.+68     	; 0x1098 <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1054:	80 91 e2 00 	lds	r24, 0x00E2
    1058:	83 ff       	sbrs	r24, 3
    105a:	1e c0       	rjmp	.+60     	; 0x1098 <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    105c:	80 91 e1 00 	lds	r24, 0x00E1
    1060:	87 7f       	andi	r24, 0xF7	; 247
    1062:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1066:	82 e0       	ldi	r24, 0x02	; 2
    1068:	80 93 e8 01 	sts	0x01E8, r24
		USB_Device_ConfigurationNumber = 0;
    106c:	10 92 e3 01 	sts	0x01E3, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1070:	80 91 e1 00 	lds	r24, 0x00E1
    1074:	8e 7f       	andi	r24, 0xFE	; 254
    1076:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    107a:	80 91 e2 00 	lds	r24, 0x00E2
    107e:	8e 7f       	andi	r24, 0xFE	; 254
    1080:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1084:	80 91 e2 00 	lds	r24, 0x00E2
    1088:	80 61       	ori	r24, 0x10	; 16
    108a:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	42 e0       	ldi	r20, 0x02	; 2
    1094:	4f db       	rcall	.-2402   	; 0x734 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1096:	71 d4       	rcall	.+2274   	; 0x197a <USB_Event_Stub>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    1098:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    109c:	85 ff       	sbrs	r24, 5
    109e:	0a c0       	rjmp	.+20     	; 0x10b4 <__vector_10+0x186>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    10a0:	80 91 a0 00 	lds	r24, 0x00A0
    10a4:	85 ff       	sbrs	r24, 5
    10a6:	06 c0       	rjmp	.+12     	; 0x10b4 <__vector_10+0x186>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    10a8:	80 91 9f 00 	lds	r24, 0x009F
    10ac:	8f 7d       	andi	r24, 0xDF	; 223
    10ae:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    10b2:	63 d4       	rcall	.+2246   	; 0x197a <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    10b4:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    10b8:	81 ff       	sbrs	r24, 1
    10ba:	15 c0       	rjmp	.+42     	; 0x10e6 <__vector_10+0x1b8>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    10bc:	80 91 a0 00 	lds	r24, 0x00A0
    10c0:	81 ff       	sbrs	r24, 1
    10c2:	11 c0       	rjmp	.+34     	; 0x10e6 <__vector_10+0x1b8>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    10c4:	80 91 9f 00 	lds	r24, 0x009F
    10c8:	8d 7f       	andi	r24, 0xFD	; 253
    10ca:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    10ce:	80 91 9f 00 	lds	r24, 0x009F
    10d2:	8e 7f       	andi	r24, 0xFE	; 254
    10d4:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    10d8:	80 91 a0 00 	lds	r24, 0x00A0
    10dc:	8d 7f       	andi	r24, 0xFD	; 253
    10de:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    10e2:	16 db       	rcall	.-2516   	; 0x710 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    10e4:	59 de       	rcall	.-846    	; 0xd98 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    10e6:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    10ea:	81 ff       	sbrs	r24, 1
    10ec:	15 c0       	rjmp	.+42     	; 0x1118 <__vector_10+0x1ea>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    10ee:	80 91 de 00 	lds	r24, 0x00DE
    10f2:	81 ff       	sbrs	r24, 1
    10f4:	11 c0       	rjmp	.+34     	; 0x1118 <__vector_10+0x1ea>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    10f6:	80 91 df 00 	lds	r24, 0x00DF
    10fa:	8d 7f       	andi	r24, 0xFD	; 253
    10fc:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
    1100:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1102:	80 91 dd 00 	lds	r24, 0x00DD
    1106:	81 60       	ori	r24, 0x01	; 1
    1108:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	8c da       	rcall	.-2792   	; 0x628 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    1110:	ff da       	rcall	.-2562   	; 0x710 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	80 93 f1 01 	sts	0x01F1, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    1118:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    111c:	80 ff       	sbrs	r24, 0
    111e:	17 c0       	rjmp	.+46     	; 0x114e <__vector_10+0x220>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    1120:	80 91 de 00 	lds	r24, 0x00DE
    1124:	80 ff       	sbrs	r24, 0
    1126:	13 c0       	rjmp	.+38     	; 0x114e <__vector_10+0x220>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    1128:	80 91 df 00 	lds	r24, 0x00DF
    112c:	8e 7f       	andi	r24, 0xFE	; 254
    112e:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
    1132:	80 91 de 00 	lds	r24, 0x00DE
    1136:	8e 7f       	andi	r24, 0xFE	; 254
    1138:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    113c:	f2 da       	rcall	.-2588   	; 0x722 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    113e:	80 91 a0 00 	lds	r24, 0x00A0
    1142:	82 60       	ori	r24, 0x02	; 2
    1144:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    1148:	82 e0       	ldi	r24, 0x02	; 2
    114a:	80 93 f1 01 	sts	0x01F1, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    114e:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    1152:	82 ff       	sbrs	r24, 2
    1154:	0e c0       	rjmp	.+28     	; 0x1172 <__vector_10+0x244>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    1156:	80 91 de 00 	lds	r24, 0x00DE
    115a:	82 ff       	sbrs	r24, 2
    115c:	0a c0       	rjmp	.+20     	; 0x1172 <__vector_10+0x244>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    115e:	80 91 df 00 	lds	r24, 0x00DF
    1162:	8b 7f       	andi	r24, 0xFB	; 251
    1164:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    1168:	82 e0       	ldi	r24, 0x02	; 2
    116a:	60 e0       	ldi	r22, 0x00	; 0
    116c:	31 da       	rcall	.-2974   	; 0x5d0 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    116e:	d0 da       	rcall	.-2656   	; 0x710 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1170:	13 de       	rcall	.-986    	; 0xd98 <USB_ResetInterface>
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
					#endif
					#if defined(USB_CAN_BE_BOTH)
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
    1172:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_CAN_BE_BOTH)
	if (USB_INT_HasOccurred(USB_INT_IDTI) && USB_INT_IsEnabled(USB_INT_IDTI))
    1176:	81 ff       	sbrs	r24, 1
    1178:	1e c0       	rjmp	.+60     	; 0x11b6 <__vector_10+0x288>
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
					#endif
					#if defined(USB_CAN_BE_BOTH)
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
    117a:	80 91 d8 00 	lds	r24, 0x00D8
    117e:	81 ff       	sbrs	r24, 1
    1180:	1a c0       	rjmp	.+52     	; 0x11b6 <__vector_10+0x288>
						USBINT &= ~(1 << VBUSTI);
						break;
					#endif
					#if defined(USB_CAN_BE_BOTH)
					case USB_INT_IDTI:
						USBINT &= ~(1 << IDTI);
    1182:	80 91 da 00 	lds	r24, 0x00DA
    1186:	8d 7f       	andi	r24, 0xFD	; 253
    1188:	80 93 da 00 	sts	0x00DA, r24
	{
		USB_INT_Clear(USB_INT_IDTI);

		if (USB_DeviceState != DEVICE_STATE_Unattached)
    118c:	80 91 e8 01 	lds	r24, 0x01E8
    1190:	88 23       	and	r24, r24
    1192:	09 f0       	breq	.+2      	; 0x1196 <__vector_10+0x268>
		  EVENT_USB_Device_Disconnect();
    1194:	5b d9       	rcall	.-3402   	; 0x44c <EVENT_USB_Device_Disconnect>

		if (USB_HostState != HOST_STATE_Unattached)
    1196:	80 91 f1 01 	lds	r24, 0x01F1
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	09 f0       	breq	.+2      	; 0x11a0 <__vector_10+0x272>
		  EVENT_USB_Host_DeviceUnattached();
    119e:	b8 da       	rcall	.-2704   	; 0x710 <EVENT_USB_Host_DeviceUnattached>

			#if defined(USB_CAN_BE_BOTH)
			static inline uint8_t USB_GetUSBModeFromUID(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t USB_GetUSBModeFromUID(void)
			{
				if (USBSTA & (1 << ID))
    11a0:	80 91 d9 00 	lds	r24, 0x00D9
    11a4:	81 fd       	sbrc	r24, 1
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <__vector_10+0x27e>
    11a8:	82 e0       	ldi	r24, 0x02	; 2
    11aa:	01 c0       	rjmp	.+2      	; 0x11ae <__vector_10+0x280>
    11ac:	81 e0       	ldi	r24, 0x01	; 1

		USB_CurrentMode = USB_GetUSBModeFromUID();
    11ae:	80 93 e2 01 	sts	0x01E2, r24
		USB_ResetInterface();
    11b2:	f2 dd       	rcall	.-1052   	; 0xd98 <USB_ResetInterface>

		EVENT_USB_UIDChange();
    11b4:	79 d8       	rcall	.-3854   	; 0x2a8 <EVENT_USB_UIDChange>
	}
	#endif
}
    11b6:	ff 91       	pop	r31
    11b8:	ef 91       	pop	r30
    11ba:	bf 91       	pop	r27
    11bc:	af 91       	pop	r26
    11be:	9f 91       	pop	r25
    11c0:	8f 91       	pop	r24
    11c2:	7f 91       	pop	r23
    11c4:	6f 91       	pop	r22
    11c6:	5f 91       	pop	r21
    11c8:	4f 91       	pop	r20
    11ca:	3f 91       	pop	r19
    11cc:	2f 91       	pop	r18
    11ce:	0f 90       	pop	r0
    11d0:	0b be       	out	0x3b, r0	; 59
    11d2:	0f 90       	pop	r0
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	0f 90       	pop	r0
    11d8:	1f 90       	pop	r1
    11da:	18 95       	reti

000011dc <Endpoint_Write_Control_Stream_LE>:
    11dc:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    11de:	40 91 ef 01 	lds	r20, 0x01EF
    11e2:	50 91 f0 01 	lds	r21, 0x01F0
    11e6:	46 17       	cp	r20, r22
    11e8:	57 07       	cpc	r21, r23
    11ea:	18 f4       	brcc	.+6      	; 0x11f2 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    11ec:	f9 01       	movw	r30, r18
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	3d c0       	rjmp	.+122    	; 0x126c <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    11f2:	61 15       	cp	r22, r1
    11f4:	71 05       	cpc	r23, r1
    11f6:	11 f0       	breq	.+4      	; 0x11fc <Endpoint_Write_Control_Stream_LE+0x20>
    11f8:	ab 01       	movw	r20, r22
    11fa:	f8 cf       	rjmp	.-16     	; 0x11ec <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11fc:	80 91 e8 00 	lds	r24, 0x00E8
    1200:	8e 77       	andi	r24, 0x7E	; 126
    1202:	80 93 e8 00 	sts	0x00E8, r24
    1206:	40 e0       	ldi	r20, 0x00	; 0
    1208:	50 e0       	ldi	r21, 0x00	; 0
    120a:	f0 cf       	rjmp	.-32     	; 0x11ec <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    120c:	80 91 e8 01 	lds	r24, 0x01E8

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1210:	88 23       	and	r24, r24
    1212:	f1 f1       	breq	.+124    	; 0x1290 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1214:	85 30       	cpi	r24, 0x05	; 5
    1216:	f1 f1       	breq	.+124    	; 0x1294 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1218:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    121c:	83 ff       	sbrs	r24, 3
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <Endpoint_Write_Control_Stream_LE+0x48>
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1224:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1228:	82 fd       	sbrc	r24, 2
    122a:	2c c0       	rjmp	.+88     	; 0x1284 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    122c:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1230:	80 ff       	sbrs	r24, 0
    1232:	1c c0       	rjmp	.+56     	; 0x126c <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    1234:	20 91 f2 00 	lds	r18, 0x00F2
    1238:	30 91 f3 00 	lds	r19, 0x00F3
    123c:	07 c0       	rjmp	.+14     	; 0x124c <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    123e:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1240:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1244:	41 50       	subi	r20, 0x01	; 1
    1246:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    1248:	2f 5f       	subi	r18, 0xFF	; 255
    124a:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    124c:	41 15       	cp	r20, r1
    124e:	51 05       	cpc	r21, r1
    1250:	19 f0       	breq	.+6      	; 0x1258 <Endpoint_Write_Control_Stream_LE+0x7c>
    1252:	28 30       	cpi	r18, 0x08	; 8
    1254:	31 05       	cpc	r19, r1
    1256:	98 f3       	brcs	.-26     	; 0x123e <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	28 30       	cpi	r18, 0x08	; 8
    125c:	31 05       	cpc	r19, r1
    125e:	09 f4       	brne	.+2      	; 0x1262 <Endpoint_Write_Control_Stream_LE+0x86>
    1260:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1262:	80 91 e8 00 	lds	r24, 0x00E8
    1266:	8e 77       	andi	r24, 0x7E	; 126
    1268:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    126c:	41 15       	cp	r20, r1
    126e:	51 05       	cpc	r21, r1
    1270:	69 f6       	brne	.-102    	; 0x120c <Endpoint_Write_Control_Stream_LE+0x30>
    1272:	99 23       	and	r25, r25
    1274:	59 f6       	brne	.-106    	; 0x120c <Endpoint_Write_Control_Stream_LE+0x30>
    1276:	06 c0       	rjmp	.+12     	; 0x1284 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1278:	80 91 e8 01 	lds	r24, 0x01E8

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    127c:	88 23       	and	r24, r24
    127e:	41 f0       	breq	.+16     	; 0x1290 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1280:	85 30       	cpi	r24, 0x05	; 5
    1282:	41 f0       	breq	.+16     	; 0x1294 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1284:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1288:	82 ff       	sbrs	r24, 2
    128a:	f6 cf       	rjmp	.-20     	; 0x1278 <Endpoint_Write_Control_Stream_LE+0x9c>
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	08 95       	ret
    1290:	82 e0       	ldi	r24, 0x02	; 2
    1292:	08 95       	ret
    1294:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1296:	08 95       	ret

00001298 <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    1298:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    129a:	61 15       	cp	r22, r1
    129c:	71 05       	cpc	r23, r1
    129e:	29 f4       	brne	.+10     	; 0x12aa <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    12a0:	80 91 e8 00 	lds	r24, 0x00E8
    12a4:	8b 77       	andi	r24, 0x7B	; 123
    12a6:	80 93 e8 00 	sts	0x00E8, r24
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    12aa:	f9 01       	movw	r30, r18
    12ac:	22 c0       	rjmp	.+68     	; 0x12f2 <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    12ae:	80 91 e8 01 	lds	r24, 0x01E8

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    12b2:	88 23       	and	r24, r24
    12b4:	71 f1       	breq	.+92     	; 0x1312 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    12b6:	85 30       	cpi	r24, 0x05	; 5
    12b8:	71 f1       	breq	.+92     	; 0x1316 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    12ba:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    12be:	83 ff       	sbrs	r24, 3
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <Endpoint_Read_Control_Stream_LE+0x2e>
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    12c6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    12ca:	82 ff       	sbrs	r24, 2
    12cc:	f0 cf       	rjmp	.-32     	; 0x12ae <Endpoint_Read_Control_Stream_LE+0x16>
    12ce:	06 c0       	rjmp	.+12     	; 0x12dc <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    12d0:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    12d4:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    12d6:	61 50       	subi	r22, 0x01	; 1
    12d8:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    12da:	31 f0       	breq	.+12     	; 0x12e8 <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    12dc:	80 91 f2 00 	lds	r24, 0x00F2
    12e0:	90 91 f3 00 	lds	r25, 0x00F3
    12e4:	89 2b       	or	r24, r25
    12e6:	a1 f7       	brne	.-24     	; 0x12d0 <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    12e8:	80 91 e8 00 	lds	r24, 0x00E8
    12ec:	8b 77       	andi	r24, 0x7B	; 123
    12ee:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    12f2:	61 15       	cp	r22, r1
    12f4:	71 05       	cpc	r23, r1
    12f6:	d9 f6       	brne	.-74     	; 0x12ae <Endpoint_Read_Control_Stream_LE+0x16>
    12f8:	06 c0       	rjmp	.+12     	; 0x1306 <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    12fa:	80 91 e8 01 	lds	r24, 0x01E8

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    12fe:	88 23       	and	r24, r24
    1300:	41 f0       	breq	.+16     	; 0x1312 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1302:	85 30       	cpi	r24, 0x05	; 5
    1304:	41 f0       	breq	.+16     	; 0x1316 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1306:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    130a:	80 ff       	sbrs	r24, 0
    130c:	f6 cf       	rjmp	.-20     	; 0x12fa <Endpoint_Read_Control_Stream_LE+0x62>
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	08 95       	ret
    1312:	82 e0       	ldi	r24, 0x02	; 2
    1314:	08 95       	ret
    1316:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1318:	08 95       	ret

0000131a <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    131a:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    131c:	40 91 ef 01 	lds	r20, 0x01EF
    1320:	50 91 f0 01 	lds	r21, 0x01F0
    1324:	46 17       	cp	r20, r22
    1326:	57 07       	cpc	r21, r23
    1328:	18 f4       	brcc	.+6      	; 0x1330 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    132a:	f9 01       	movw	r30, r18
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	40 c0       	rjmp	.+128    	; 0x13b0 <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1330:	61 15       	cp	r22, r1
    1332:	71 05       	cpc	r23, r1
    1334:	11 f0       	breq	.+4      	; 0x133a <Endpoint_Write_Control_PStream_LE+0x20>
    1336:	ab 01       	movw	r20, r22
    1338:	f8 cf       	rjmp	.-16     	; 0x132a <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    133a:	80 91 e8 00 	lds	r24, 0x00E8
    133e:	8e 77       	andi	r24, 0x7E	; 126
    1340:	80 93 e8 00 	sts	0x00E8, r24
    1344:	40 e0       	ldi	r20, 0x00	; 0
    1346:	50 e0       	ldi	r21, 0x00	; 0
    1348:	f0 cf       	rjmp	.-32     	; 0x132a <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    134a:	80 91 e8 01 	lds	r24, 0x01E8

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    134e:	88 23       	and	r24, r24
    1350:	09 f4       	brne	.+2      	; 0x1354 <Endpoint_Write_Control_PStream_LE+0x3a>
    1352:	40 c0       	rjmp	.+128    	; 0x13d4 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1354:	85 30       	cpi	r24, 0x05	; 5
    1356:	09 f4       	brne	.+2      	; 0x135a <Endpoint_Write_Control_PStream_LE+0x40>
    1358:	3f c0       	rjmp	.+126    	; 0x13d8 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    135a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    135e:	83 ff       	sbrs	r24, 3
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <Endpoint_Write_Control_PStream_LE+0x4c>
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1366:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    136a:	82 fd       	sbrc	r24, 2
    136c:	2d c0       	rjmp	.+90     	; 0x13c8 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    136e:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1372:	80 ff       	sbrs	r24, 0
    1374:	1d c0       	rjmp	.+58     	; 0x13b0 <Endpoint_Write_Control_PStream_LE+0x96>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    1376:	20 91 f2 00 	lds	r18, 0x00F2
    137a:	30 91 f3 00 	lds	r19, 0x00F3
    137e:	08 c0       	rjmp	.+16     	; 0x1390 <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1380:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1382:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1386:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1388:	41 50       	subi	r20, 0x01	; 1
    138a:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    138c:	2f 5f       	subi	r18, 0xFF	; 255
    138e:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1390:	41 15       	cp	r20, r1
    1392:	51 05       	cpc	r21, r1
    1394:	19 f0       	breq	.+6      	; 0x139c <Endpoint_Write_Control_PStream_LE+0x82>
    1396:	28 30       	cpi	r18, 0x08	; 8
    1398:	31 05       	cpc	r19, r1
    139a:	90 f3       	brcs	.-28     	; 0x1380 <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	28 30       	cpi	r18, 0x08	; 8
    13a0:	31 05       	cpc	r19, r1
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <Endpoint_Write_Control_PStream_LE+0x8c>
    13a4:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13a6:	80 91 e8 00 	lds	r24, 0x00E8
    13aa:	8e 77       	andi	r24, 0x7E	; 126
    13ac:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    13b0:	41 15       	cp	r20, r1
    13b2:	51 05       	cpc	r21, r1
    13b4:	51 f6       	brne	.-108    	; 0x134a <Endpoint_Write_Control_PStream_LE+0x30>
    13b6:	99 23       	and	r25, r25
    13b8:	41 f6       	brne	.-112    	; 0x134a <Endpoint_Write_Control_PStream_LE+0x30>
    13ba:	06 c0       	rjmp	.+12     	; 0x13c8 <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    13bc:	80 91 e8 01 	lds	r24, 0x01E8

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    13c0:	88 23       	and	r24, r24
    13c2:	41 f0       	breq	.+16     	; 0x13d4 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    13c4:	85 30       	cpi	r24, 0x05	; 5
    13c6:	41 f0       	breq	.+16     	; 0x13d8 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    13c8:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    13cc:	82 ff       	sbrs	r24, 2
    13ce:	f6 cf       	rjmp	.-20     	; 0x13bc <Endpoint_Write_Control_PStream_LE+0xa2>
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	08 95       	ret
    13d4:	82 e0       	ldi	r24, 0x02	; 2
    13d6:	08 95       	ret
    13d8:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    13da:	08 95       	ret

000013dc <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    13dc:	bf 92       	push	r11
    13de:	cf 92       	push	r12
    13e0:	df 92       	push	r13
    13e2:	ef 92       	push	r14
    13e4:	ff 92       	push	r15
    13e6:	0f 93       	push	r16
    13e8:	1f 93       	push	r17
    13ea:	cf 93       	push	r28
    13ec:	df 93       	push	r29
    13ee:	18 2f       	mov	r17, r24
    13f0:	09 2f       	mov	r16, r25
    13f2:	7b 01       	movw	r14, r22
    13f4:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    13f6:	f4 d9       	rcall	.-3096   	; 0x7e0 <Endpoint_WaitUntilReady>
    13f8:	b8 2e       	mov	r11, r24
    13fa:	88 23       	and	r24, r24
    13fc:	b1 f5       	brne	.+108    	; 0x146a <Endpoint_Write_Stream_LE+0x8e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    13fe:	81 2f       	mov	r24, r17
    1400:	90 2f       	mov	r25, r16
    1402:	9c 01       	movw	r18, r24
    1404:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1406:	c1 14       	cp	r12, r1
    1408:	d1 04       	cpc	r13, r1
    140a:	39 f0       	breq	.+14     	; 0x141a <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    140c:	f6 01       	movw	r30, r12
    140e:	80 81       	ld	r24, Z
    1410:	91 81       	ldd	r25, Z+1	; 0x01
    1412:	e8 1a       	sub	r14, r24
    1414:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1416:	c8 0f       	add	r28, r24
    1418:	d9 1f       	adc	r29, r25
    141a:	00 e0       	ldi	r16, 0x00	; 0
    141c:	10 e0       	ldi	r17, 0x00	; 0
    141e:	22 c0       	rjmp	.+68     	; 0x1464 <Endpoint_Write_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1420:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1424:	85 fd       	sbrc	r24, 5
    1426:	16 c0       	rjmp	.+44     	; 0x1454 <Endpoint_Write_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1428:	80 91 e8 00 	lds	r24, 0x00E8
    142c:	8e 77       	andi	r24, 0x7E	; 126
    142e:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    1432:	c1 14       	cp	r12, r1
    1434:	d1 04       	cpc	r13, r1
    1436:	49 f0       	breq	.+18     	; 0x144a <Endpoint_Write_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
    1438:	f6 01       	movw	r30, r12
    143a:	80 81       	ld	r24, Z
    143c:	91 81       	ldd	r25, Z+1	; 0x01
    143e:	80 0f       	add	r24, r16
    1440:	91 1f       	adc	r25, r17
    1442:	91 83       	std	Z+1, r25	; 0x01
    1444:	80 83       	st	Z, r24
    1446:	85 e0       	ldi	r24, 0x05	; 5
    1448:	11 c0       	rjmp	.+34     	; 0x146c <Endpoint_Write_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    144a:	07 d4       	rcall	.+2062   	; 0x1c5a <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    144c:	c9 d9       	rcall	.-3182   	; 0x7e0 <Endpoint_WaitUntilReady>
    144e:	88 23       	and	r24, r24
    1450:	49 f0       	breq	.+18     	; 0x1464 <Endpoint_Write_Stream_LE+0x88>
    1452:	0c c0       	rjmp	.+24     	; 0x146c <Endpoint_Write_Stream_LE+0x90>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1454:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1456:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    145a:	08 94       	sec
    145c:	e1 08       	sbc	r14, r1
    145e:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    1460:	0f 5f       	subi	r16, 0xFF	; 255
    1462:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1464:	e1 14       	cp	r14, r1
    1466:	f1 04       	cpc	r15, r1
    1468:	d9 f6       	brne	.-74     	; 0x1420 <Endpoint_Write_Stream_LE+0x44>
    146a:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    146c:	df 91       	pop	r29
    146e:	cf 91       	pop	r28
    1470:	1f 91       	pop	r17
    1472:	0f 91       	pop	r16
    1474:	ff 90       	pop	r15
    1476:	ef 90       	pop	r14
    1478:	df 90       	pop	r13
    147a:	cf 90       	pop	r12
    147c:	bf 90       	pop	r11
    147e:	08 95       	ret

00001480 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1480:	bf 92       	push	r11
    1482:	cf 92       	push	r12
    1484:	df 92       	push	r13
    1486:	ef 92       	push	r14
    1488:	ff 92       	push	r15
    148a:	0f 93       	push	r16
    148c:	1f 93       	push	r17
    148e:	cf 93       	push	r28
    1490:	df 93       	push	r29
    1492:	18 2f       	mov	r17, r24
    1494:	09 2f       	mov	r16, r25
    1496:	7b 01       	movw	r14, r22
    1498:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    149a:	80 91 aa 00 	lds	r24, 0x00AA
    149e:	8f 7c       	andi	r24, 0xCF	; 207
    14a0:	80 61       	ori	r24, 0x10	; 16
    14a2:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    14a6:	2f dc       	rcall	.-1954   	; 0xd06 <Pipe_WaitUntilReady>
    14a8:	b8 2e       	mov	r11, r24
    14aa:	88 23       	and	r24, r24
    14ac:	a9 f5       	brne	.+106    	; 0x1518 <Pipe_Read_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    14ae:	81 2f       	mov	r24, r17
    14b0:	90 2f       	mov	r25, r16
    14b2:	9c 01       	movw	r18, r24
    14b4:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    14b6:	c1 14       	cp	r12, r1
    14b8:	d1 04       	cpc	r13, r1
    14ba:	39 f0       	breq	.+14     	; 0x14ca <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
    14bc:	f6 01       	movw	r30, r12
    14be:	80 81       	ld	r24, Z
    14c0:	91 81       	ldd	r25, Z+1	; 0x01
    14c2:	e8 1a       	sub	r14, r24
    14c4:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    14c6:	c8 0f       	add	r28, r24
    14c8:	d9 1f       	adc	r29, r25
    14ca:	00 e0       	ldi	r16, 0x00	; 0
    14cc:	10 e0       	ldi	r17, 0x00	; 0
    14ce:	21 c0       	rjmp	.+66     	; 0x1512 <Pipe_Read_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    14d0:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    14d4:	85 fd       	sbrc	r24, 5
    14d6:	15 c0       	rjmp	.+42     	; 0x1502 <Pipe_Read_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    14d8:	80 91 a6 00 	lds	r24, 0x00A6
    14dc:	8e 77       	andi	r24, 0x7E	; 126
    14de:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    14e2:	c1 14       	cp	r12, r1
    14e4:	d1 04       	cpc	r13, r1
    14e6:	49 f0       	breq	.+18     	; 0x14fa <Pipe_Read_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
    14e8:	f6 01       	movw	r30, r12
    14ea:	80 81       	ld	r24, Z
    14ec:	91 81       	ldd	r25, Z+1	; 0x01
    14ee:	80 0f       	add	r24, r16
    14f0:	91 1f       	adc	r25, r17
    14f2:	91 83       	std	Z+1, r25	; 0x01
    14f4:	80 83       	st	Z, r24
    14f6:	84 e0       	ldi	r24, 0x04	; 4
    14f8:	10 c0       	rjmp	.+32     	; 0x151a <Pipe_Read_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    14fa:	05 dc       	rcall	.-2038   	; 0xd06 <Pipe_WaitUntilReady>
    14fc:	88 23       	and	r24, r24
    14fe:	49 f0       	breq	.+18     	; 0x1512 <Pipe_Read_Stream_LE+0x92>
    1500:	0c c0       	rjmp	.+24     	; 0x151a <Pipe_Read_Stream_LE+0x9a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1502:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1506:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1508:	08 94       	sec
    150a:	e1 08       	sbc	r14, r1
    150c:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    150e:	0f 5f       	subi	r16, 0xFF	; 255
    1510:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
    1512:	e1 14       	cp	r14, r1
    1514:	f1 04       	cpc	r15, r1
    1516:	e1 f6       	brne	.-72     	; 0x14d0 <Pipe_Read_Stream_LE+0x50>
    1518:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    151a:	df 91       	pop	r29
    151c:	cf 91       	pop	r28
    151e:	1f 91       	pop	r17
    1520:	0f 91       	pop	r16
    1522:	ff 90       	pop	r15
    1524:	ef 90       	pop	r14
    1526:	df 90       	pop	r13
    1528:	cf 90       	pop	r12
    152a:	bf 90       	pop	r11
    152c:	08 95       	ret

0000152e <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    152e:	af 92       	push	r10
    1530:	bf 92       	push	r11
    1532:	cf 92       	push	r12
    1534:	df 92       	push	r13
    1536:	ef 92       	push	r14
    1538:	ff 92       	push	r15
    153a:	0f 93       	push	r16
    153c:	1f 93       	push	r17
    153e:	cf 93       	push	r28
    1540:	df 93       	push	r29
    1542:	7c 01       	movw	r14, r24
    1544:	eb 01       	movw	r28, r22
    1546:	6a 01       	movw	r12, r20
    1548:	24 c0       	rjmp	.+72     	; 0x1592 <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    154a:	e8 81       	ld	r30, Y
    154c:	f9 81       	ldd	r31, Y+1	; 0x01
    154e:	be 2e       	mov	r11, r30
    1550:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1552:	80 81       	ld	r24, Z
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	98 01       	movw	r18, r16
    1558:	80 17       	cp	r24, r16
    155a:	91 07       	cpc	r25, r17
    155c:	08 f4       	brcc	.+2      	; 0x1560 <USB_GetNextDescriptorComp+0x32>
    155e:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1560:	e2 0f       	add	r30, r18
    1562:	f3 1f       	adc	r31, r19
    1564:	f9 83       	std	Y+1, r31	; 0x01
    1566:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
    1568:	f7 01       	movw	r30, r14
    156a:	80 81       	ld	r24, Z
    156c:	91 81       	ldd	r25, Z+1	; 0x01
    156e:	82 1b       	sub	r24, r18
    1570:	93 0b       	sbc	r25, r19
    1572:	91 83       	std	Z+1, r25	; 0x01
    1574:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1576:	88 81       	ld	r24, Y
    1578:	99 81       	ldd	r25, Y+1	; 0x01
    157a:	f6 01       	movw	r30, r12
    157c:	09 95       	icall
    157e:	82 30       	cpi	r24, 0x02	; 2
    1580:	41 f0       	breq	.+16     	; 0x1592 <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1582:	81 30       	cpi	r24, 0x01	; 1
    1584:	69 f4       	brne	.+26     	; 0x15a0 <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
    1586:	b8 82       	st	Y, r11
    1588:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
    158a:	f7 01       	movw	r30, r14
    158c:	11 83       	std	Z+1, r17	; 0x01
    158e:	00 83       	st	Z, r16
    1590:	07 c0       	rjmp	.+14     	; 0x15a0 <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    1592:	f7 01       	movw	r30, r14
    1594:	00 81       	ld	r16, Z
    1596:	11 81       	ldd	r17, Z+1	; 0x01
    1598:	01 15       	cp	r16, r1
    159a:	11 05       	cpc	r17, r1
    159c:	b1 f6       	brne	.-84     	; 0x154a <USB_GetNextDescriptorComp+0x1c>
    159e:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
    15a0:	df 91       	pop	r29
    15a2:	cf 91       	pop	r28
    15a4:	1f 91       	pop	r17
    15a6:	0f 91       	pop	r16
    15a8:	ff 90       	pop	r15
    15aa:	ef 90       	pop	r14
    15ac:	df 90       	pop	r13
    15ae:	cf 90       	pop	r12
    15b0:	bf 90       	pop	r11
    15b2:	af 90       	pop	r10
    15b4:	08 95       	ret

000015b6 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    15b6:	cf 92       	push	r12
    15b8:	df 92       	push	r13
    15ba:	ef 92       	push	r14
    15bc:	ff 92       	push	r15
    15be:	0f 93       	push	r16
    15c0:	1f 93       	push	r17
    15c2:	df 93       	push	r29
    15c4:	cf 93       	push	r28
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	29 97       	sbiw	r28, 0x09	; 9
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	de bf       	out	0x3e, r29	; 62
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	cd bf       	out	0x3d, r28	; 61
    15d6:	6b 01       	movw	r12, r22
    15d8:	8a 01       	movw	r16, r20
    15da:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    15dc:	90 e8       	ldi	r25, 0x80	; 128
    15de:	90 93 e9 01 	sts	0x01E9, r25
    15e2:	96 e0       	ldi	r25, 0x06	; 6
    15e4:	90 93 ea 01 	sts	0x01EA, r25
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	92 60       	ori	r25, 0x02	; 2
    15ee:	90 93 ec 01 	sts	0x01EC, r25
    15f2:	80 93 eb 01 	sts	0x01EB, r24
    15f6:	10 92 ee 01 	sts	0x01EE, r1
    15fa:	10 92 ed 01 	sts	0x01ED, r1
    15fe:	89 e0       	ldi	r24, 0x09	; 9
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	90 93 f0 01 	sts	0x01F0, r25
    1606:	80 93 ef 01 	sts	0x01EF, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    160a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    160e:	ce 01       	movw	r24, r28
    1610:	01 96       	adiw	r24, 0x01	; 1
    1612:	de d1       	rcall	.+956    	; 0x19d0 <USB_Host_SendControlRequest>
    1614:	28 2f       	mov	r18, r24
    1616:	88 23       	and	r24, r24
    1618:	c1 f4       	brne	.+48     	; 0x164a <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	9c 81       	ldd	r25, Y+4	; 0x04
    161e:	f6 01       	movw	r30, r12
    1620:	91 83       	std	Z+1, r25	; 0x01
    1622:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    1624:	e8 16       	cp	r14, r24
    1626:	f9 06       	cpc	r15, r25
    1628:	10 f4       	brcc	.+4      	; 0x162e <USB_Host_GetDeviceConfigDescriptor+0x78>
    162a:	25 e0       	ldi	r18, 0x05	; 5
    162c:	0e c0       	rjmp	.+28     	; 0x164a <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    162e:	90 93 f0 01 	sts	0x01F0, r25
    1632:	80 93 ef 01 	sts	0x01EF, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1636:	c8 01       	movw	r24, r16
    1638:	cb d1       	rcall	.+918    	; 0x19d0 <USB_Host_SendControlRequest>
    163a:	28 2f       	mov	r18, r24
    163c:	88 23       	and	r24, r24
    163e:	29 f4       	brne	.+10     	; 0x164a <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1640:	f8 01       	movw	r30, r16
    1642:	81 81       	ldd	r24, Z+1	; 0x01
    1644:	82 30       	cpi	r24, 0x02	; 2
    1646:	09 f0       	breq	.+2      	; 0x164a <USB_Host_GetDeviceConfigDescriptor+0x94>
    1648:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    164a:	82 2f       	mov	r24, r18
    164c:	29 96       	adiw	r28, 0x09	; 9
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	de bf       	out	0x3e, r29	; 62
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	cd bf       	out	0x3d, r28	; 61
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	1f 91       	pop	r17
    165e:	0f 91       	pop	r16
    1660:	ff 90       	pop	r15
    1662:	ef 90       	pop	r14
    1664:	df 90       	pop	r13
    1666:	cf 90       	pop	r12
    1668:	08 95       	ret

0000166a <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    166a:	0f 93       	push	r16
    166c:	1f 93       	push	r17
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	ac 97       	sbiw	r28, 0x2c	; 44
    1678:	0f b6       	in	r0, 0x3f	; 63
    167a:	f8 94       	cli
    167c:	de bf       	out	0x3e, r29	; 62
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1682:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
    1686:	80 93 e9 01 	sts	0x01E9, r24
    168a:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
    168e:	80 93 ea 01 	sts	0x01EA, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    1692:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    1696:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
    169a:	eb ee       	ldi	r30, 0xEB	; 235
    169c:	f1 e0       	ldi	r31, 0x01	; 1
    169e:	80 93 eb 01 	sts	0x01EB, r24
    16a2:	90 93 ec 01 	sts	0x01EC, r25
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    16a6:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    16aa:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
    16ae:	80 93 ed 01 	sts	0x01ED, r24
    16b2:	93 83       	std	Z+3, r25	; 0x03
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    16b4:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    16b8:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
    16bc:	80 93 ef 01 	sts	0x01EF, r24
    16c0:	95 83       	std	Z+5, r25	; 0x05

	EVENT_USB_Device_ControlRequest();
    16c2:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    16c6:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    16ca:	83 ff       	sbrs	r24, 3
    16cc:	3d c1       	rjmp	.+634    	; 0x1948 <USB_Device_ProcessControlRequest+0x2de>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    16ce:	80 91 e9 01 	lds	r24, 0x01E9

		switch (USB_ControlRequest.bRequest)
    16d2:	30 91 ea 01 	lds	r19, 0x01EA
    16d6:	35 30       	cpi	r19, 0x05	; 5
    16d8:	09 f4       	brne	.+2      	; 0x16dc <USB_Device_ProcessControlRequest+0x72>
    16da:	87 c0       	rjmp	.+270    	; 0x17ea <USB_Device_ProcessControlRequest+0x180>
    16dc:	36 30       	cpi	r19, 0x06	; 6
    16de:	40 f4       	brcc	.+16     	; 0x16f0 <USB_Device_ProcessControlRequest+0x86>
    16e0:	31 30       	cpi	r19, 0x01	; 1
    16e2:	c9 f1       	breq	.+114    	; 0x1756 <USB_Device_ProcessControlRequest+0xec>
    16e4:	31 30       	cpi	r19, 0x01	; 1
    16e6:	70 f0       	brcs	.+28     	; 0x1704 <USB_Device_ProcessControlRequest+0x9a>
    16e8:	33 30       	cpi	r19, 0x03	; 3
    16ea:	09 f0       	breq	.+2      	; 0x16ee <USB_Device_ProcessControlRequest+0x84>
    16ec:	2d c1       	rjmp	.+602    	; 0x1948 <USB_Device_ProcessControlRequest+0x2de>
    16ee:	33 c0       	rjmp	.+102    	; 0x1756 <USB_Device_ProcessControlRequest+0xec>
    16f0:	38 30       	cpi	r19, 0x08	; 8
    16f2:	09 f4       	brne	.+2      	; 0x16f6 <USB_Device_ProcessControlRequest+0x8c>
    16f4:	f8 c0       	rjmp	.+496    	; 0x18e6 <USB_Device_ProcessControlRequest+0x27c>
    16f6:	39 30       	cpi	r19, 0x09	; 9
    16f8:	09 f4       	brne	.+2      	; 0x16fc <USB_Device_ProcessControlRequest+0x92>
    16fa:	08 c1       	rjmp	.+528    	; 0x190c <USB_Device_ProcessControlRequest+0x2a2>
    16fc:	36 30       	cpi	r19, 0x06	; 6
    16fe:	09 f0       	breq	.+2      	; 0x1702 <USB_Device_ProcessControlRequest+0x98>
    1700:	23 c1       	rjmp	.+582    	; 0x1948 <USB_Device_ProcessControlRequest+0x2de>
    1702:	98 c0       	rjmp	.+304    	; 0x1834 <USB_Device_ProcessControlRequest+0x1ca>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1704:	80 38       	cpi	r24, 0x80	; 128
    1706:	21 f0       	breq	.+8      	; 0x1710 <USB_Device_ProcessControlRequest+0xa6>
    1708:	82 38       	cpi	r24, 0x82	; 130
    170a:	09 f0       	breq	.+2      	; 0x170e <USB_Device_ProcessControlRequest+0xa4>
    170c:	1d c1       	rjmp	.+570    	; 0x1948 <USB_Device_ProcessControlRequest+0x2de>
    170e:	08 c0       	rjmp	.+16     	; 0x1720 <USB_Device_ProcessControlRequest+0xb6>
    1710:	90 91 e4 01 	lds	r25, 0x01E4
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1714:	80 91 e5 01 	lds	r24, 0x01E5
    1718:	88 23       	and	r24, r24
    171a:	99 f0       	breq	.+38     	; 0x1742 <USB_Device_ProcessControlRequest+0xd8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    171c:	92 60       	ori	r25, 0x02	; 2
    171e:	11 c0       	rjmp	.+34     	; 0x1742 <USB_Device_ProcessControlRequest+0xd8>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1720:	80 91 ed 01 	lds	r24, 0x01ED
    1724:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1726:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    172a:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	25 e0       	ldi	r18, 0x05	; 5
    1732:	96 95       	lsr	r25
    1734:	87 95       	ror	r24
    1736:	2a 95       	dec	r18
    1738:	e1 f7       	brne	.-8      	; 0x1732 <USB_Device_ProcessControlRequest+0xc8>
    173a:	98 2f       	mov	r25, r24
    173c:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    173e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1742:	80 91 e8 00 	lds	r24, 0x00E8
    1746:	87 7f       	andi	r24, 0xF7	; 247
    1748:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    174c:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
    1750:	10 92 f1 00 	sts	0x00F1, r1
    1754:	d3 c0       	rjmp	.+422    	; 0x18fc <USB_Device_ProcessControlRequest+0x292>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1756:	88 23       	and	r24, r24
    1758:	19 f0       	breq	.+6      	; 0x1760 <USB_Device_ProcessControlRequest+0xf6>
    175a:	82 30       	cpi	r24, 0x02	; 2
    175c:	09 f0       	breq	.+2      	; 0x1760 <USB_Device_ProcessControlRequest+0xf6>
    175e:	f4 c0       	rjmp	.+488    	; 0x1948 <USB_Device_ProcessControlRequest+0x2de>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	8f 71       	andi	r24, 0x1F	; 31
    1764:	90 70       	andi	r25, 0x00	; 0
    1766:	00 97       	sbiw	r24, 0x00	; 0
    1768:	21 f0       	breq	.+8      	; 0x1772 <USB_Device_ProcessControlRequest+0x108>
    176a:	02 97       	sbiw	r24, 0x02	; 2
    176c:	09 f0       	breq	.+2      	; 0x1770 <USB_Device_ProcessControlRequest+0x106>
    176e:	ec c0       	rjmp	.+472    	; 0x1948 <USB_Device_ProcessControlRequest+0x2de>
    1770:	0c c0       	rjmp	.+24     	; 0x178a <USB_Device_ProcessControlRequest+0x120>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1772:	80 91 eb 01 	lds	r24, 0x01EB
    1776:	81 30       	cpi	r24, 0x01	; 1
    1778:	09 f0       	breq	.+2      	; 0x177c <USB_Device_ProcessControlRequest+0x112>
    177a:	e6 c0       	rjmp	.+460    	; 0x1948 <USB_Device_ProcessControlRequest+0x2de>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    177c:	10 92 e5 01 	sts	0x01E5, r1
    1780:	33 30       	cpi	r19, 0x03	; 3
    1782:	69 f5       	brne	.+90     	; 0x17de <USB_Device_ProcessControlRequest+0x174>
    1784:	80 93 e5 01 	sts	0x01E5, r24
    1788:	2a c0       	rjmp	.+84     	; 0x17de <USB_Device_ProcessControlRequest+0x174>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    178a:	80 91 eb 01 	lds	r24, 0x01EB
    178e:	88 23       	and	r24, r24
    1790:	31 f5       	brne	.+76     	; 0x17de <USB_Device_ProcessControlRequest+0x174>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1792:	20 91 ed 01 	lds	r18, 0x01ED
    1796:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1798:	09 f4       	brne	.+2      	; 0x179c <USB_Device_ProcessControlRequest+0x132>
    179a:	d6 c0       	rjmp	.+428    	; 0x1948 <USB_Device_ProcessControlRequest+0x2de>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    179c:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    17a0:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    17a4:	80 ff       	sbrs	r24, 0
    17a6:	1b c0       	rjmp	.+54     	; 0x17de <USB_Device_ProcessControlRequest+0x174>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    17a8:	33 30       	cpi	r19, 0x03	; 3
    17aa:	21 f4       	brne	.+8      	; 0x17b4 <USB_Device_ProcessControlRequest+0x14a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    17ac:	80 91 eb 00 	lds	r24, 0x00EB
    17b0:	80 62       	ori	r24, 0x20	; 32
    17b2:	13 c0       	rjmp	.+38     	; 0x17da <USB_Device_ProcessControlRequest+0x170>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    17b4:	80 91 eb 00 	lds	r24, 0x00EB
    17b8:	80 61       	ori	r24, 0x10	; 16
    17ba:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <USB_Device_ProcessControlRequest+0x15e>
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	2a 95       	dec	r18
    17ca:	e2 f7       	brpl	.-8      	; 0x17c4 <USB_Device_ProcessControlRequest+0x15a>
    17cc:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    17d0:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    17d4:	80 91 eb 00 	lds	r24, 0x00EB
    17d8:	88 60       	ori	r24, 0x08	; 8
    17da:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    17de:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    17e2:	80 91 e8 00 	lds	r24, 0x00E8
    17e6:	87 7f       	andi	r24, 0xF7	; 247
    17e8:	8c c0       	rjmp	.+280    	; 0x1902 <USB_Device_ProcessControlRequest+0x298>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    17ea:	88 23       	and	r24, r24
    17ec:	09 f0       	breq	.+2      	; 0x17f0 <USB_Device_ProcessControlRequest+0x186>
    17ee:	ac c0       	rjmp	.+344    	; 0x1948 <USB_Device_ProcessControlRequest+0x2de>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    17f0:	10 91 eb 01 	lds	r17, 0x01EB
    17f4:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    17f6:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    17f8:	f8 94       	cli
    17fa:	80 91 e8 00 	lds	r24, 0x00E8
    17fe:	87 7f       	andi	r24, 0xF7	; 247
    1800:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1804:	0e 94 cf 03 	call	0x79e	; 0x79e <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1808:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    180c:	80 ff       	sbrs	r24, 0
    180e:	fc cf       	rjmp	.-8      	; 0x1808 <USB_Device_ProcessControlRequest+0x19e>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1810:	80 91 e3 00 	lds	r24, 0x00E3
    1814:	80 78       	andi	r24, 0x80	; 128
    1816:	81 2b       	or	r24, r17

				UDADDR = Temp;
    1818:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    181c:	80 68       	ori	r24, 0x80	; 128
    181e:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1822:	11 23       	and	r17, r17
    1824:	11 f4       	brne	.+4      	; 0x182a <USB_Device_ProcessControlRequest+0x1c0>
    1826:	82 e0       	ldi	r24, 0x02	; 2
    1828:	01 c0       	rjmp	.+2      	; 0x182c <USB_Device_ProcessControlRequest+0x1c2>
    182a:	83 e0       	ldi	r24, 0x03	; 3
    182c:	80 93 e8 01 	sts	0x01E8, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1830:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
    1832:	8a c0       	rjmp	.+276    	; 0x1948 <USB_Device_ProcessControlRequest+0x2de>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1834:	80 58       	subi	r24, 0x80	; 128
    1836:	82 30       	cpi	r24, 0x02	; 2
    1838:	08 f0       	brcs	.+2      	; 0x183c <USB_Device_ProcessControlRequest+0x1d2>
    183a:	86 c0       	rjmp	.+268    	; 0x1948 <USB_Device_ProcessControlRequest+0x2de>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    183c:	80 91 eb 01 	lds	r24, 0x01EB
    1840:	90 91 ec 01 	lds	r25, 0x01EC
    1844:	23 e0       	ldi	r18, 0x03	; 3
    1846:	8c 3d       	cpi	r24, 0xDC	; 220
    1848:	92 07       	cpc	r25, r18
    184a:	09 f0       	breq	.+2      	; 0x184e <USB_Device_ProcessControlRequest+0x1e4>
    184c:	33 c0       	rjmp	.+102    	; 0x18b4 <USB_Device_ProcessControlRequest+0x24a>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    184e:	83 e0       	ldi	r24, 0x03	; 3
    1850:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1852:	8a e2       	ldi	r24, 0x2A	; 42
    1854:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1856:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1858:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    185a:	de 01       	movw	r26, r28
    185c:	15 96       	adiw	r26, 0x05	; 5
    185e:	6e e0       	ldi	r22, 0x0E	; 14
    1860:	40 e0       	ldi	r20, 0x00	; 0
    1862:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1864:	11 e2       	ldi	r17, 0x21	; 33
    1866:	e6 2f       	mov	r30, r22
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	10 93 57 00 	sts	0x0057, r17
    186e:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
    1870:	40 ff       	sbrs	r20, 0
    1872:	03 c0       	rjmp	.+6      	; 0x187a <USB_Device_ProcessControlRequest+0x210>
					{
						SerialByte >>= 4;
    1874:	82 95       	swap	r24
    1876:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    1878:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    187a:	8f 70       	andi	r24, 0x0F	; 15
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1880:	8a 30       	cpi	r24, 0x0A	; 10
    1882:	18 f0       	brcs	.+6      	; 0x188a <USB_Device_ProcessControlRequest+0x220>
    1884:	c9 01       	movw	r24, r18
    1886:	c7 96       	adiw	r24, 0x37	; 55
    1888:	02 c0       	rjmp	.+4      	; 0x188e <USB_Device_ProcessControlRequest+0x224>
    188a:	c9 01       	movw	r24, r18
    188c:	c0 96       	adiw	r24, 0x30	; 48
    188e:	8d 93       	st	X+, r24
    1890:	9d 93       	st	X+, r25
    1892:	4f 5f       	subi	r20, 0xFF	; 255
    1894:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1896:	44 31       	cpi	r20, 0x14	; 20
    1898:	51 05       	cpc	r21, r1
    189a:	29 f7       	brne	.-54     	; 0x1866 <USB_Device_ProcessControlRequest+0x1fc>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    189c:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    189e:	80 91 e8 00 	lds	r24, 0x00E8
    18a2:	87 7f       	andi	r24, 0xF7	; 247
    18a4:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    18a8:	ce 01       	movw	r24, r28
    18aa:	03 96       	adiw	r24, 0x03	; 3
    18ac:	6a e2       	ldi	r22, 0x2A	; 42
    18ae:	70 e0       	ldi	r23, 0x00	; 0
    18b0:	95 dc       	rcall	.-1750   	; 0x11dc <Endpoint_Write_Control_Stream_LE>
    18b2:	13 c0       	rjmp	.+38     	; 0x18da <USB_Device_ProcessControlRequest+0x270>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    18b4:	60 91 ed 01 	lds	r22, 0x01ED
    18b8:	ae 01       	movw	r20, r28
    18ba:	4f 5f       	subi	r20, 0xFF	; 255
    18bc:	5f 4f       	sbci	r21, 0xFF	; 255
    18be:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <CALLBACK_USB_GetDescriptor>
    18c2:	bc 01       	movw	r22, r24
    18c4:	00 97       	sbiw	r24, 0x00	; 0
    18c6:	09 f4       	brne	.+2      	; 0x18ca <USB_Device_ProcessControlRequest+0x260>
    18c8:	3f c0       	rjmp	.+126    	; 0x1948 <USB_Device_ProcessControlRequest+0x2de>
    18ca:	80 91 e8 00 	lds	r24, 0x00E8
    18ce:	87 7f       	andi	r24, 0xF7	; 247
    18d0:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	9a 81       	ldd	r25, Y+2	; 0x02
    18d8:	20 dd       	rcall	.-1472   	; 0x131a <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    18da:	80 91 e8 00 	lds	r24, 0x00E8
    18de:	8b 77       	andi	r24, 0x7B	; 123
    18e0:	80 93 e8 00 	sts	0x00E8, r24
    18e4:	31 c0       	rjmp	.+98     	; 0x1948 <USB_Device_ProcessControlRequest+0x2de>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    18e6:	80 38       	cpi	r24, 0x80	; 128
    18e8:	79 f5       	brne	.+94     	; 0x1948 <USB_Device_ProcessControlRequest+0x2de>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    18ea:	80 91 e8 00 	lds	r24, 0x00E8
    18ee:	87 7f       	andi	r24, 0xF7	; 247
    18f0:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    18f4:	80 91 e3 01 	lds	r24, 0x01E3
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    18f8:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18fc:	80 91 e8 00 	lds	r24, 0x00E8
    1900:	8e 77       	andi	r24, 0x7E	; 126
    1902:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1906:	0e 94 cf 03 	call	0x79e	; 0x79e <Endpoint_ClearStatusStage>
    190a:	1e c0       	rjmp	.+60     	; 0x1948 <USB_Device_ProcessControlRequest+0x2de>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    190c:	88 23       	and	r24, r24
    190e:	e1 f4       	brne	.+56     	; 0x1948 <USB_Device_ProcessControlRequest+0x2de>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1910:	90 91 eb 01 	lds	r25, 0x01EB
    1914:	92 30       	cpi	r25, 0x02	; 2
    1916:	c0 f4       	brcc	.+48     	; 0x1948 <USB_Device_ProcessControlRequest+0x2de>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1918:	80 91 e8 00 	lds	r24, 0x00E8
    191c:	87 7f       	andi	r24, 0xF7	; 247
    191e:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1922:	90 93 e3 01 	sts	0x01E3, r25

	Endpoint_ClearStatusStage();
    1926:	0e 94 cf 03 	call	0x79e	; 0x79e <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    192a:	80 91 e3 01 	lds	r24, 0x01E3
    192e:	88 23       	and	r24, r24
    1930:	31 f4       	brne	.+12     	; 0x193e <USB_Device_ProcessControlRequest+0x2d4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1932:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1936:	87 fd       	sbrc	r24, 7
    1938:	02 c0       	rjmp	.+4      	; 0x193e <USB_Device_ProcessControlRequest+0x2d4>
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	01 c0       	rjmp	.+2      	; 0x1940 <USB_Device_ProcessControlRequest+0x2d6>
    193e:	84 e0       	ldi	r24, 0x04	; 4
    1940:	80 93 e8 01 	sts	0x01E8, r24

	EVENT_USB_Device_ConfigurationChanged();
    1944:	0e 94 6f 02 	call	0x4de	; 0x4de <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1948:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    194c:	83 ff       	sbrs	r24, 3
    194e:	0a c0       	rjmp	.+20     	; 0x1964 <USB_Device_ProcessControlRequest+0x2fa>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1950:	80 91 eb 00 	lds	r24, 0x00EB
    1954:	80 62       	ori	r24, 0x20	; 32
    1956:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    195a:	80 91 e8 00 	lds	r24, 0x00E8
    195e:	87 7f       	andi	r24, 0xF7	; 247
    1960:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    1964:	ac 96       	adiw	r28, 0x2c	; 44
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	f8 94       	cli
    196a:	de bf       	out	0x3e, r29	; 62
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	cd bf       	out	0x3d, r28	; 61
    1970:	cf 91       	pop	r28
    1972:	df 91       	pop	r29
    1974:	1f 91       	pop	r17
    1976:	0f 91       	pop	r16
    1978:	08 95       	ret

0000197a <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    197a:	08 95       	ret

0000197c <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    197c:	1f 93       	push	r17
    197e:	cf 93       	push	r28
    1980:	df 93       	push	r29
    1982:	18 2f       	mov	r17, r24
    1984:	c8 ee       	ldi	r28, 0xE8	; 232
    1986:	d3 e0       	ldi	r29, 0x03	; 3
    1988:	0a c0       	rjmp	.+20     	; 0x199e <USB_Host_WaitForIOS+0x22>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	0e 94 23 04 	call	0x846	; 0x846 <USB_Host_WaitMS>
    1990:	88 23       	and	r24, r24
    1992:	d1 f4       	brne	.+52     	; 0x19c8 <USB_Host_WaitForIOS+0x4c>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1994:	20 97       	sbiw	r28, 0x00	; 0
    1996:	11 f4       	brne	.+4      	; 0x199c <USB_Host_WaitForIOS+0x20>
    1998:	84 e0       	ldi	r24, 0x04	; 4
    199a:	16 c0       	rjmp	.+44     	; 0x19c8 <USB_Host_WaitForIOS+0x4c>
    199c:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    199e:	11 23       	and	r17, r17
    19a0:	29 f4       	brne	.+10     	; 0x19ac <USB_Host_WaitForIOS+0x30>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    19a2:	80 91 a6 00 	lds	r24, 0x00A6
    19a6:	83 ff       	sbrs	r24, 3
    19a8:	f0 cf       	rjmp	.-32     	; 0x198a <USB_Host_WaitForIOS+0xe>
    19aa:	0d c0       	rjmp	.+26     	; 0x19c6 <USB_Host_WaitForIOS+0x4a>
    19ac:	11 30       	cpi	r17, 0x01	; 1
    19ae:	29 f4       	brne	.+10     	; 0x19ba <USB_Host_WaitForIOS+0x3e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    19b0:	80 91 a6 00 	lds	r24, 0x00A6
    19b4:	80 ff       	sbrs	r24, 0
    19b6:	e9 cf       	rjmp	.-46     	; 0x198a <USB_Host_WaitForIOS+0xe>
    19b8:	06 c0       	rjmp	.+12     	; 0x19c6 <USB_Host_WaitForIOS+0x4a>
    19ba:	12 30       	cpi	r17, 0x02	; 2
    19bc:	31 f7       	brne	.-52     	; 0x198a <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    19be:	80 91 a6 00 	lds	r24, 0x00A6
    19c2:	82 ff       	sbrs	r24, 2
    19c4:	e2 cf       	rjmp	.-60     	; 0x198a <USB_Host_WaitForIOS+0xe>
    19c6:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
    19c8:	df 91       	pop	r29
    19ca:	cf 91       	pop	r28
    19cc:	1f 91       	pop	r17
    19ce:	08 95       	ret

000019d0 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    19d0:	ff 92       	push	r15
    19d2:	0f 93       	push	r16
    19d4:	1f 93       	push	r17
    19d6:	cf 93       	push	r28
    19d8:	df 93       	push	r29
    19da:	18 2f       	mov	r17, r24
    19dc:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    19de:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    19e2:	c0 91 ef 01 	lds	r28, 0x01EF
    19e6:	d0 91 f0 01 	lds	r29, 0x01F0
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    19ea:	80 91 9e 00 	lds	r24, 0x009E
    19ee:	81 60       	ori	r24, 0x01	; 1
    19f0:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	0e 94 23 04 	call	0x846	; 0x846 <USB_Host_WaitMS>
    19fa:	98 2f       	mov	r25, r24
    19fc:	88 23       	and	r24, r24
    19fe:	09 f0       	breq	.+2      	; 0x1a02 <USB_Host_SendControlRequest+0x32>
    1a00:	ef c0       	rjmp	.+478    	; 0x1be0 <USB_Host_SendControlRequest+0x210>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1a02:	80 91 aa 00 	lds	r24, 0x00AA
    1a06:	8f 7c       	andi	r24, 0xCF	; 207
    1a08:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1a0c:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1a10:	80 91 a6 00 	lds	r24, 0x00A6
    1a14:	8f 7e       	andi	r24, 0xEF	; 239
    1a16:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1a1a:	80 91 a9 00 	lds	r24, 0x00A9
    1a1e:	8f 7b       	andi	r24, 0xBF	; 191
    1a20:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearError();

	Pipe_Unfreeze();

	Pipe_Write_8(USB_ControlRequest.bmRequestType);
    1a24:	80 91 e9 01 	lds	r24, 0x01E9
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1a28:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
    1a2c:	80 91 ea 01 	lds	r24, 0x01EA
    1a30:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
    1a34:	80 91 eb 01 	lds	r24, 0x01EB
    1a38:	90 91 ec 01 	lds	r25, 0x01EC
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    1a3c:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    1a40:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
    1a44:	80 91 ed 01 	lds	r24, 0x01ED
    1a48:	90 91 ee 01 	lds	r25, 0x01EE
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    1a4c:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    1a50:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
    1a54:	80 91 ef 01 	lds	r24, 0x01EF
    1a58:	90 91 f0 01 	lds	r25, 0x01F0
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    1a5c:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    1a60:	90 93 af 00 	sts	0x00AF, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1a64:	80 91 a6 00 	lds	r24, 0x00A6
    1a68:	87 77       	andi	r24, 0x77	; 119
    1a6a:	80 93 a6 00 	sts	0x00A6, r24

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	85 df       	rcall	.-246    	; 0x197c <USB_Host_WaitForIOS>
    1a72:	98 2f       	mov	r25, r24
    1a74:	88 23       	and	r24, r24
    1a76:	09 f0       	breq	.+2      	; 0x1a7a <USB_Host_SendControlRequest+0xaa>
    1a78:	b3 c0       	rjmp	.+358    	; 0x1be0 <USB_Host_SendControlRequest+0x210>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1a7a:	80 91 a9 00 	lds	r24, 0x00A9
    1a7e:	80 64       	ori	r24, 0x40	; 64
    1a80:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	0e 94 23 04 	call	0x846	; 0x846 <USB_Host_WaitMS>
    1a8a:	98 2f       	mov	r25, r24
    1a8c:	88 23       	and	r24, r24
    1a8e:	09 f0       	breq	.+2      	; 0x1a92 <USB_Host_SendControlRequest+0xc2>
    1a90:	a7 c0       	rjmp	.+334    	; 0x1be0 <USB_Host_SendControlRequest+0x210>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
    1a92:	21 2f       	mov	r18, r17
    1a94:	30 2f       	mov	r19, r16
    1a96:	c9 01       	movw	r24, r18
    1a98:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1a9a:	80 91 e9 01 	lds	r24, 0x01E9
    1a9e:	87 ff       	sbrs	r24, 7
    1aa0:	52 c0       	rjmp	.+164    	; 0x1b46 <USB_Host_SendControlRequest+0x176>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1aa2:	80 91 aa 00 	lds	r24, 0x00AA
    1aa6:	8f 7c       	andi	r24, 0xCF	; 207
    1aa8:	80 61       	ori	r24, 0x10	; 16
    1aaa:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1aae:	01 15       	cp	r16, r1
    1ab0:	11 05       	cpc	r17, r1
    1ab2:	69 f5       	brne	.+90     	; 0x1b0e <USB_Host_SendControlRequest+0x13e>
    1ab4:	2e c0       	rjmp	.+92     	; 0x1b12 <USB_Host_SendControlRequest+0x142>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1ab6:	80 91 a9 00 	lds	r24, 0x00A9
    1aba:	8f 7b       	andi	r24, 0xBF	; 191
    1abc:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	5c df       	rcall	.-328    	; 0x197c <USB_Host_WaitForIOS>
    1ac4:	98 2f       	mov	r25, r24
    1ac6:	88 23       	and	r24, r24
    1ac8:	09 f0       	breq	.+2      	; 0x1acc <USB_Host_SendControlRequest+0xfc>
    1aca:	8a c0       	rjmp	.+276    	; 0x1be0 <USB_Host_SendControlRequest+0x210>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1acc:	80 91 f6 00 	lds	r24, 0x00F6
    1ad0:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    1ad4:	89 2b       	or	r24, r25
    1ad6:	49 f4       	brne	.+18     	; 0x1aea <USB_Host_SendControlRequest+0x11a>
    1ad8:	c0 e0       	ldi	r28, 0x00	; 0
    1ada:	d0 e0       	ldi	r29, 0x00	; 0
    1adc:	06 c0       	rjmp	.+12     	; 0x1aea <USB_Host_SendControlRequest+0x11a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1ade:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    1ae2:	f8 01       	movw	r30, r16
    1ae4:	81 93       	st	Z+, r24
    1ae6:	8f 01       	movw	r16, r30
					DataLen--;
    1ae8:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1aea:	80 91 f6 00 	lds	r24, 0x00F6
    1aee:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1af2:	89 2b       	or	r24, r25
    1af4:	11 f0       	breq	.+4      	; 0x1afa <USB_Host_SendControlRequest+0x12a>
    1af6:	20 97       	sbiw	r28, 0x00	; 0
    1af8:	91 f7       	brne	.-28     	; 0x1ade <USB_Host_SendControlRequest+0x10e>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1afa:	80 91 a9 00 	lds	r24, 0x00A9
    1afe:	80 64       	ori	r24, 0x40	; 64
    1b00:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1b04:	80 91 a6 00 	lds	r24, 0x00A6
    1b08:	8e 77       	andi	r24, 0x7E	; 126
    1b0a:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1b0e:	20 97       	sbiw	r28, 0x00	; 0
    1b10:	91 f6       	brne	.-92     	; 0x1ab6 <USB_Host_SendControlRequest+0xe6>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1b12:	80 91 aa 00 	lds	r24, 0x00AA
    1b16:	8f 7c       	andi	r24, 0xCF	; 207
    1b18:	80 62       	ori	r24, 0x20	; 32
    1b1a:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1b1e:	80 91 a9 00 	lds	r24, 0x00A9
    1b22:	8f 7b       	andi	r24, 0xBF	; 191
    1b24:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1b28:	82 e0       	ldi	r24, 0x02	; 2
    1b2a:	28 df       	rcall	.-432    	; 0x197c <USB_Host_WaitForIOS>
    1b2c:	98 2f       	mov	r25, r24
    1b2e:	88 23       	and	r24, r24
    1b30:	09 f0       	breq	.+2      	; 0x1b34 <USB_Host_SendControlRequest+0x164>
    1b32:	56 c0       	rjmp	.+172    	; 0x1be0 <USB_Host_SendControlRequest+0x210>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1b34:	80 91 a6 00 	lds	r24, 0x00A6
    1b38:	8b 77       	andi	r24, 0x7B	; 123
    1b3a:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1b3e:	82 e0       	ldi	r24, 0x02	; 2
    1b40:	1d df       	rcall	.-454    	; 0x197c <USB_Host_WaitForIOS>
    1b42:	98 2f       	mov	r25, r24
    1b44:	4d c0       	rjmp	.+154    	; 0x1be0 <USB_Host_SendControlRequest+0x210>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    1b46:	01 15       	cp	r16, r1
    1b48:	11 05       	cpc	r17, r1
    1b4a:	a9 f1       	breq	.+106    	; 0x1bb6 <USB_Host_SendControlRequest+0x1e6>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1b4c:	80 91 aa 00 	lds	r24, 0x00AA
    1b50:	8f 7c       	andi	r24, 0xCF	; 207
    1b52:	80 62       	ori	r24, 0x20	; 32
    1b54:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1b58:	80 91 a9 00 	lds	r24, 0x00A9
    1b5c:	8f 7b       	andi	r24, 0xBF	; 191
    1b5e:	80 93 a9 00 	sts	0x00A9, r24
    1b62:	1d c0       	rjmp	.+58     	; 0x1b9e <USB_Host_SendControlRequest+0x1ce>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1b64:	82 e0       	ldi	r24, 0x02	; 2
    1b66:	0a df       	rcall	.-492    	; 0x197c <USB_Host_WaitForIOS>
    1b68:	98 2f       	mov	r25, r24
    1b6a:	88 23       	and	r24, r24
    1b6c:	c9 f5       	brne	.+114    	; 0x1be0 <USB_Host_SendControlRequest+0x210>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1b6e:	80 91 db 01 	lds	r24, 0x01DB
    1b72:	28 2f       	mov	r18, r24
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	07 c0       	rjmp	.+14     	; 0x1b86 <USB_Host_SendControlRequest+0x1b6>
				{
					Pipe_Write_8(*(DataStream++));
    1b78:	f8 01       	movw	r30, r16
    1b7a:	81 91       	ld	r24, Z+
    1b7c:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1b7e:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1b82:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1b84:	39 f0       	breq	.+14     	; 0x1b94 <USB_Host_SendControlRequest+0x1c4>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1b86:	80 91 f6 00 	lds	r24, 0x00F6
    1b8a:	90 91 f7 00 	lds	r25, 0x00F7
    1b8e:	82 17       	cp	r24, r18
    1b90:	93 07       	cpc	r25, r19
    1b92:	90 f3       	brcs	.-28     	; 0x1b78 <USB_Host_SendControlRequest+0x1a8>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1b94:	80 91 a6 00 	lds	r24, 0x00A6
    1b98:	8b 77       	andi	r24, 0x7B	; 123
    1b9a:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1b9e:	20 97       	sbiw	r28, 0x00	; 0
    1ba0:	09 f7       	brne	.-62     	; 0x1b64 <USB_Host_SendControlRequest+0x194>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1ba2:	82 e0       	ldi	r24, 0x02	; 2
    1ba4:	eb de       	rcall	.-554    	; 0x197c <USB_Host_WaitForIOS>
    1ba6:	98 2f       	mov	r25, r24
    1ba8:	88 23       	and	r24, r24
    1baa:	d1 f4       	brne	.+52     	; 0x1be0 <USB_Host_SendControlRequest+0x210>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1bac:	80 91 a9 00 	lds	r24, 0x00A9
    1bb0:	80 64       	ori	r24, 0x40	; 64
    1bb2:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1bb6:	80 91 aa 00 	lds	r24, 0x00AA
    1bba:	8f 7c       	andi	r24, 0xCF	; 207
    1bbc:	80 61       	ori	r24, 0x10	; 16
    1bbe:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1bc2:	80 91 a9 00 	lds	r24, 0x00A9
    1bc6:	8f 7b       	andi	r24, 0xBF	; 191
    1bc8:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	d6 de       	rcall	.-596    	; 0x197c <USB_Host_WaitForIOS>
    1bd0:	98 2f       	mov	r25, r24
    1bd2:	88 23       	and	r24, r24
    1bd4:	29 f4       	brne	.+10     	; 0x1be0 <USB_Host_SendControlRequest+0x210>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1bd6:	80 91 a6 00 	lds	r24, 0x00A6
    1bda:	8e 77       	andi	r24, 0x7E	; 126
    1bdc:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1be0:	80 91 a9 00 	lds	r24, 0x00A9
    1be4:	80 64       	ori	r24, 0x40	; 64
    1be6:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    1bea:	f0 fc       	sbrc	r15, 0
    1bec:	05 c0       	rjmp	.+10     	; 0x1bf8 <USB_Host_SendControlRequest+0x228>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1bee:	80 91 9e 00 	lds	r24, 0x009E
    1bf2:	8e 7f       	andi	r24, 0xFE	; 254
    1bf4:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    1bfe:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1c02:	89 2f       	mov	r24, r25
    1c04:	df 91       	pop	r29
    1c06:	cf 91       	pop	r28
    1c08:	1f 91       	pop	r17
    1c0a:	0f 91       	pop	r16
    1c0c:	ff 90       	pop	r15
    1c0e:	08 95       	ret

00001c10 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1c10:	1f 93       	push	r17
    1c12:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1c14:	10 92 e9 01 	sts	0x01E9, r1
    1c18:	89 e0       	ldi	r24, 0x09	; 9
    1c1a:	80 93 ea 01 	sts	0x01EA, r24
    1c1e:	10 93 eb 01 	sts	0x01EB, r17
    1c22:	10 92 ec 01 	sts	0x01EC, r1
    1c26:	10 92 ee 01 	sts	0x01EE, r1
    1c2a:	10 92 ed 01 	sts	0x01ED, r1
    1c2e:	10 92 f0 01 	sts	0x01F0, r1
    1c32:	10 92 ef 01 	sts	0x01EF, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1c36:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	c8 de       	rcall	.-624    	; 0x19d0 <USB_Host_SendControlRequest>
    1c40:	88 23       	and	r24, r24
    1c42:	49 f4       	brne	.+18     	; 0x1c56 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1c44:	10 93 e6 01 	sts	0x01E6, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1c48:	11 23       	and	r17, r17
    1c4a:	11 f4       	brne	.+4      	; 0x1c50 <USB_Host_SetDeviceConfiguration+0x40>
    1c4c:	9a e0       	ldi	r25, 0x0A	; 10
    1c4e:	01 c0       	rjmp	.+2      	; 0x1c52 <USB_Host_SetDeviceConfiguration+0x42>
    1c50:	9b e0       	ldi	r25, 0x0B	; 11
    1c52:	90 93 f1 01 	sts	0x01F1, r25
	}

	return ErrorCode;
}
    1c56:	1f 91       	pop	r17
    1c58:	08 95       	ret

00001c5a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1c5a:	1f 93       	push	r17
	#if defined(USB_HOST_ONLY)
		USB_HostTask();
	#elif defined(USB_DEVICE_ONLY)
		USB_DeviceTask();
	#else
		if (USB_CurrentMode == USB_MODE_Device)
    1c5c:	80 91 e2 01 	lds	r24, 0x01E2
    1c60:	81 30       	cpi	r24, 0x01	; 1
    1c62:	89 f4       	brne	.+34     	; 0x1c86 <USB_USBTask+0x2c>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    1c64:	80 91 e8 01 	lds	r24, 0x01E8
    1c68:	88 23       	and	r24, r24
    1c6a:	d1 f0       	breq	.+52     	; 0x1ca0 <USB_USBTask+0x46>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    1c6c:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1c70:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1c74:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    1c78:	83 ff       	sbrs	r24, 3
    1c7a:	01 c0       	rjmp	.+2      	; 0x1c7e <USB_USBTask+0x24>
		  USB_Device_ProcessControlRequest();
    1c7c:	f6 dc       	rcall	.-1556   	; 0x166a <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    1c7e:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1c80:	10 93 e9 00 	sts	0x00E9, r17
    1c84:	0d c0       	rjmp	.+26     	; 0x1ca0 <USB_USBTask+0x46>
	#elif defined(USB_DEVICE_ONLY)
		USB_DeviceTask();
	#else
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
    1c86:	80 91 e2 01 	lds	r24, 0x01E2
    1c8a:	82 30       	cpi	r24, 0x02	; 2
    1c8c:	49 f4       	brne	.+18     	; 0x1ca0 <USB_USBTask+0x46>
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1c8e:	10 91 a7 00 	lds	r17, 0x00A7
    1c92:	17 70       	andi	r17, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1c94:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1c98:	0e 94 c4 04 	call	0x988	; 0x988 <USB_Host_ProcessNextHostState>
    1c9c:	10 93 a7 00 	sts	0x00A7, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1ca0:	1f 91       	pop	r17
    1ca2:	08 95       	ret

00001ca4 <USB_GetHIDReportSize>:

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
    1ca4:	e4 2f       	mov	r30, r20
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	ee 0f       	add	r30, r30
    1caa:	ff 1f       	adc	r31, r31
    1cac:	ef 56       	subi	r30, 0x6F	; 111
    1cae:	fc 4f       	sbci	r31, 0xFC	; 252
    1cb0:	e8 0f       	add	r30, r24
    1cb2:	f9 1f       	adc	r31, r25
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	a0 57       	subi	r26, 0x70	; 112
    1cb8:	bc 4f       	sbci	r27, 0xFC	; 252
    1cba:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
    1cbc:	20 81       	ld	r18, Z
    1cbe:	31 81       	ldd	r19, Z+1	; 0x01

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
    1cc0:	8c 91       	ld	r24, X
    1cc2:	86 17       	cp	r24, r22
    1cc4:	89 f4       	brne	.+34     	; 0x1ce8 <USB_GetHIDReportSize+0x44>
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
    1cc6:	40 e0       	ldi	r20, 0x00	; 0
    1cc8:	50 e0       	ldi	r21, 0x00	; 0
    1cca:	c9 01       	movw	r24, r18
    1ccc:	87 70       	andi	r24, 0x07	; 7
    1cce:	90 70       	andi	r25, 0x00	; 0
    1cd0:	89 2b       	or	r24, r25
    1cd2:	11 f0       	breq	.+4      	; 0x1cd8 <USB_GetHIDReportSize+0x34>
    1cd4:	41 e0       	ldi	r20, 0x01	; 1
    1cd6:	50 e0       	ldi	r21, 0x00	; 0
    1cd8:	63 e0       	ldi	r22, 0x03	; 3
    1cda:	36 95       	lsr	r19
    1cdc:	27 95       	ror	r18
    1cde:	6a 95       	dec	r22
    1ce0:	e1 f7       	brne	.-8      	; 0x1cda <USB_GetHIDReportSize+0x36>
    1ce2:	24 0f       	add	r18, r20
    1ce4:	35 1f       	adc	r19, r21
    1ce6:	07 c0       	rjmp	.+14     	; 0x1cf6 <USB_GetHIDReportSize+0x52>

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
    1ce8:	9f 5f       	subi	r25, 0xFF	; 255
    1cea:	37 96       	adiw	r30, 0x07	; 7
    1cec:	17 96       	adiw	r26, 0x07	; 7
    1cee:	9a 30       	cpi	r25, 0x0A	; 10
    1cf0:	29 f7       	brne	.-54     	; 0x1cbc <USB_GetHIDReportSize+0x18>
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
}
    1cf6:	c9 01       	movw	r24, r18
    1cf8:	08 95       	ret

00001cfa <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1cfa:	4f 92       	push	r4
    1cfc:	5f 92       	push	r5
    1cfe:	6f 92       	push	r6
    1d00:	7f 92       	push	r7
    1d02:	8f 92       	push	r8
    1d04:	9f 92       	push	r9
    1d06:	af 92       	push	r10
    1d08:	bf 92       	push	r11
    1d0a:	cf 92       	push	r12
    1d0c:	df 92       	push	r13
    1d0e:	ef 92       	push	r14
    1d10:	ff 92       	push	r15
    1d12:	0f 93       	push	r16
    1d14:	1f 93       	push	r17
    1d16:	df 93       	push	r29
    1d18:	cf 93       	push	r28
    1d1a:	00 d0       	rcall	.+0      	; 0x1d1c <HID_Device_USBTask+0x22>
    1d1c:	0f 92       	push	r0
    1d1e:	cd b7       	in	r28, 0x3d	; 61
    1d20:	de b7       	in	r29, 0x3e	; 62
    1d22:	7c 01       	movw	r14, r24
			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);

			Endpoint_ClearIN();
		}
	}
}
    1d24:	6d b6       	in	r6, 0x3d	; 61
    1d26:	7e b6       	in	r7, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1d28:	80 91 e8 01 	lds	r24, 0x01E8
    1d2c:	84 30       	cpi	r24, 0x04	; 4
    1d2e:	09 f0       	breq	.+2      	; 0x1d32 <HID_Device_USBTask+0x38>
    1d30:	86 c0       	rjmp	.+268    	; 0x1e3e <HID_Device_USBTask+0x144>
	  return;

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
    1d32:	f7 01       	movw	r30, r14
    1d34:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1d36:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1d3a:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsReadWriteAllowed())
    1d3e:	85 ff       	sbrs	r24, 5
    1d40:	7e c0       	rjmp	.+252    	; 0x1e3e <HID_Device_USBTask+0x144>
    1d42:	5d b6       	in	r5, 0x3d	; 61
    1d44:	4e b6       	in	r4, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1d46:	47 81       	ldd	r20, Z+7	; 0x07
    1d48:	8d b7       	in	r24, 0x3d	; 61
    1d4a:	9e b7       	in	r25, 0x3e	; 62
    1d4c:	84 1b       	sub	r24, r20
    1d4e:	91 09       	sbc	r25, r1
    1d50:	0f b6       	in	r0, 0x3f	; 63
    1d52:	f8 94       	cli
    1d54:	9e bf       	out	0x3e, r25	; 62
    1d56:	0f be       	out	0x3f, r0	; 63
    1d58:	8d bf       	out	0x3d, r24	; 61
    1d5a:	0d b7       	in	r16, 0x3d	; 61
    1d5c:	1e b7       	in	r17, 0x3e	; 62
    1d5e:	0f 5f       	subi	r16, 0xFF	; 255
    1d60:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t  ReportID     = 0;
    1d62:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
    1d64:	1b 82       	std	Y+3, r1	; 0x03
    1d66:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
    1d68:	c0 2e       	mov	r12, r16
    1d6a:	91 2e       	mov	r9, r17
    1d6c:	c8 01       	movw	r24, r16
    1d6e:	60 e0       	ldi	r22, 0x00	; 0
    1d70:	70 e0       	ldi	r23, 0x00	; 0
    1d72:	50 e0       	ldi	r21, 0x00	; 0
    1d74:	ce d3       	rcall	.+1948   	; 0x2512 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
    1d76:	c7 01       	movw	r24, r14
    1d78:	be 01       	movw	r22, r28
    1d7a:	6f 5f       	subi	r22, 0xFF	; 255
    1d7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d7e:	40 e0       	ldi	r20, 0x00	; 0
    1d80:	98 01       	movw	r18, r16
    1d82:	8e 01       	movw	r16, r28
    1d84:	0e 5f       	subi	r16, 0xFE	; 254
    1d86:	1f 4f       	sbci	r17, 0xFF	; 255
    1d88:	0e 94 37 02 	call	0x46e	; 0x46e <CALLBACK_HID_Device_CreateHIDReport>
    1d8c:	88 2e       	mov	r8, r24
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1d8e:	f7 01       	movw	r30, r14
    1d90:	81 85       	ldd	r24, Z+9	; 0x09
    1d92:	92 85       	ldd	r25, Z+10	; 0x0a
    1d94:	89 2b       	or	r24, r25
    1d96:	19 f4       	brne	.+6      	; 0x1d9e <HID_Device_USBTask+0xa4>
    1d98:	aa 24       	eor	r10, r10
    1d9a:	bb 24       	eor	r11, r11
    1d9c:	0b c0       	rjmp	.+22     	; 0x1db4 <HID_Device_USBTask+0xba>
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	f7 01       	movw	r30, r14
    1da2:	83 85       	ldd	r24, Z+11	; 0x0b
    1da4:	94 85       	ldd	r25, Z+12	; 0x0c
    1da6:	89 2b       	or	r24, r25
    1da8:	09 f0       	breq	.+2      	; 0x1dac <HID_Device_USBTask+0xb2>
    1daa:	21 e0       	ldi	r18, 0x01	; 1
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	28 27       	eor	r18, r24
    1db0:	a2 2e       	mov	r10, r18
    1db2:	bb 24       	eor	r11, r11

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1db4:	f7 01       	movw	r30, r14
    1db6:	05 81       	ldd	r16, Z+5	; 0x05
    1db8:	16 81       	ldd	r17, Z+6	; 0x06
    1dba:	01 15       	cp	r16, r1
    1dbc:	11 05       	cpc	r17, r1
    1dbe:	11 f4       	brne	.+4      	; 0x1dc4 <HID_Device_USBTask+0xca>
    1dc0:	dd 24       	eor	r13, r13
    1dc2:	12 c0       	rjmp	.+36     	; 0x1de8 <HID_Device_USBTask+0xee>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    1dc4:	4a 81       	ldd	r20, Y+2	; 0x02
    1dc6:	5b 81       	ldd	r21, Y+3	; 0x03
    1dc8:	8c 2d       	mov	r24, r12
    1dca:	99 2d       	mov	r25, r9
    1dcc:	b8 01       	movw	r22, r16
    1dce:	8b d3       	rcall	.+1814   	; 0x24e6 <memcmp>
    1dd0:	dd 24       	eor	r13, r13
    1dd2:	00 97       	sbiw	r24, 0x00	; 0
    1dd4:	11 f0       	breq	.+4      	; 0x1dda <HID_Device_USBTask+0xe0>
    1dd6:	dd 24       	eor	r13, r13
    1dd8:	d3 94       	inc	r13
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    1dda:	f7 01       	movw	r30, r14
    1ddc:	47 81       	ldd	r20, Z+7	; 0x07
    1dde:	c8 01       	movw	r24, r16
    1de0:	6c 2d       	mov	r22, r12
    1de2:	79 2d       	mov	r23, r9
    1de4:	50 e0       	ldi	r21, 0x00	; 0
    1de6:	8c d3       	rcall	.+1816   	; 0x2500 <memcpy>
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    1de8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dea:	9b 81       	ldd	r25, Y+3	; 0x03
    1dec:	89 2b       	or	r24, r25
    1dee:	f9 f0       	breq	.+62     	; 0x1e2e <HID_Device_USBTask+0x134>
    1df0:	88 20       	and	r8, r8
    1df2:	21 f4       	brne	.+8      	; 0x1dfc <HID_Device_USBTask+0x102>
    1df4:	dd 20       	and	r13, r13
    1df6:	11 f4       	brne	.+4      	; 0x1dfc <HID_Device_USBTask+0x102>
    1df8:	ab 28       	or	r10, r11
    1dfa:	c9 f0       	breq	.+50     	; 0x1e2e <HID_Device_USBTask+0x134>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    1dfc:	f7 01       	movw	r30, r14
    1dfe:	81 85       	ldd	r24, Z+9	; 0x09
    1e00:	92 85       	ldd	r25, Z+10	; 0x0a
    1e02:	94 87       	std	Z+12, r25	; 0x0c
    1e04:	83 87       	std	Z+11, r24	; 0x0b

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
    1e06:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1e08:	80 93 e9 00 	sts	0x00E9, r24

			if (ReportID)
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	88 23       	and	r24, r24
    1e10:	11 f0       	breq	.+4      	; 0x1e16 <HID_Device_USBTask+0x11c>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1e12:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    1e16:	6a 81       	ldd	r22, Y+2	; 0x02
    1e18:	7b 81       	ldd	r23, Y+3	; 0x03
    1e1a:	8c 2d       	mov	r24, r12
    1e1c:	99 2d       	mov	r25, r9
    1e1e:	40 e0       	ldi	r20, 0x00	; 0
    1e20:	50 e0       	ldi	r21, 0x00	; 0
    1e22:	dc da       	rcall	.-2632   	; 0x13dc <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1e24:	80 91 e8 00 	lds	r24, 0x00E8
    1e28:	8e 77       	andi	r24, 0x7E	; 126
    1e2a:	80 93 e8 00 	sts	0x00E8, r24
    1e2e:	85 2d       	mov	r24, r5
    1e30:	94 2d       	mov	r25, r4
    1e32:	9c 01       	movw	r18, r24
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	f8 94       	cli
    1e38:	3e bf       	out	0x3e, r19	; 62
    1e3a:	0f be       	out	0x3f, r0	; 63
    1e3c:	2d bf       	out	0x3d, r18	; 61

			Endpoint_ClearIN();
		}
	}
}
    1e3e:	0f b6       	in	r0, 0x3f	; 63
    1e40:	f8 94       	cli
    1e42:	7e be       	out	0x3e, r7	; 62
    1e44:	0f be       	out	0x3f, r0	; 63
    1e46:	6d be       	out	0x3d, r6	; 61
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	cf 91       	pop	r28
    1e50:	df 91       	pop	r29
    1e52:	1f 91       	pop	r17
    1e54:	0f 91       	pop	r16
    1e56:	ff 90       	pop	r15
    1e58:	ef 90       	pop	r14
    1e5a:	df 90       	pop	r13
    1e5c:	cf 90       	pop	r12
    1e5e:	bf 90       	pop	r11
    1e60:	af 90       	pop	r10
    1e62:	9f 90       	pop	r9
    1e64:	8f 90       	pop	r8
    1e66:	7f 90       	pop	r7
    1e68:	6f 90       	pop	r6
    1e6a:	5f 90       	pop	r5
    1e6c:	4f 90       	pop	r4
    1e6e:	08 95       	ret

00001e70 <HID_Device_ConfigureEndpoints>:
			break;
	}
}

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1e70:	cf 93       	push	r28
    1e72:	df 93       	push	r29
    1e74:	dc 01       	movw	r26, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1e76:	08 96       	adiw	r24, 0x08	; 8
    1e78:	fc 01       	movw	r30, r24
    1e7a:	85 e0       	ldi	r24, 0x05	; 5
    1e7c:	ef 01       	movw	r28, r30
    1e7e:	19 92       	st	Y+, r1
    1e80:	8a 95       	dec	r24
    1e82:	e9 f7       	brne	.-6      	; 0x1e7e <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	18 96       	adiw	r26, 0x08	; 8
    1e88:	8c 93       	st	X, r24
    1e8a:	18 97       	sbiw	r26, 0x08	; 8
	HIDInterfaceInfo->State.IdleCount           = 500;
    1e8c:	84 ef       	ldi	r24, 0xF4	; 244
    1e8e:	91 e0       	ldi	r25, 0x01	; 1
    1e90:	1a 96       	adiw	r26, 0x0a	; 10
    1e92:	9c 93       	st	X, r25
    1e94:	8e 93       	st	-X, r24
    1e96:	19 97       	sbiw	r26, 0x09	; 9

	if (!(Endpoint_ConfigureEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber, EP_TYPE_INTERRUPT,
    1e98:	11 96       	adiw	r26, 0x01	; 1
    1e9a:	3c 91       	ld	r19, X
    1e9c:	11 97       	sbiw	r26, 0x01	; 1
    1e9e:	12 96       	adiw	r26, 0x02	; 2
    1ea0:	6d 91       	ld	r22, X+
    1ea2:	7c 91       	ld	r23, X
    1ea4:	13 97       	sbiw	r26, 0x03	; 3
    1ea6:	14 96       	adiw	r26, 0x04	; 4
    1ea8:	8c 91       	ld	r24, X
    1eaa:	88 23       	and	r24, r24
    1eac:	11 f4       	brne	.+4      	; 0x1eb2 <HID_Device_ConfigureEndpoints+0x42>
    1eae:	40 e0       	ldi	r20, 0x00	; 0
    1eb0:	01 c0       	rjmp	.+2      	; 0x1eb4 <HID_Device_ConfigureEndpoints+0x44>
    1eb2:	44 e0       	ldi	r20, 0x04	; 4
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	88 e0       	ldi	r24, 0x08	; 8
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	03 c0       	rjmp	.+6      	; 0x1ec2 <HID_Device_ConfigureEndpoints+0x52>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    1ebc:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    1ebe:	88 0f       	add	r24, r24
    1ec0:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1ec2:	86 17       	cp	r24, r22
    1ec4:	97 07       	cpc	r25, r23
    1ec6:	d0 f3       	brcs	.-12     	; 0x1ebc <HID_Device_ConfigureEndpoints+0x4c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    1ec8:	42 60       	ori	r20, 0x02	; 2
    1eca:	22 95       	swap	r18
    1ecc:	20 7f       	andi	r18, 0xF0	; 240
    1ece:	42 2b       	or	r20, r18
    1ed0:	83 2f       	mov	r24, r19
    1ed2:	61 ec       	ldi	r22, 0xC1	; 193
    1ed4:	0e 94 9a 03 	call	0x734	; 0x734 <Endpoint_ConfigureEndpoint_Prv>
    1ed8:	81 11       	cpse	r24, r1
    1eda:	81 e0       	ldi	r24, 0x01	; 1
	{
		return false;
	}

	return true;
}
    1edc:	df 91       	pop	r29
    1ede:	cf 91       	pop	r28
    1ee0:	08 95       	ret

00001ee2 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1ee2:	6f 92       	push	r6
    1ee4:	7f 92       	push	r7
    1ee6:	8f 92       	push	r8
    1ee8:	9f 92       	push	r9
    1eea:	af 92       	push	r10
    1eec:	bf 92       	push	r11
    1eee:	cf 92       	push	r12
    1ef0:	df 92       	push	r13
    1ef2:	ef 92       	push	r14
    1ef4:	ff 92       	push	r15
    1ef6:	0f 93       	push	r16
    1ef8:	1f 93       	push	r17
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	00 d0       	rcall	.+0      	; 0x1f00 <HID_Device_ProcessControlRequest+0x1e>
    1f00:	0f 92       	push	r0
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
    1f06:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    1f08:	6d b6       	in	r6, 0x3d	; 61
    1f0a:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1f0c:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    1f10:	83 ff       	sbrs	r24, 3
    1f12:	0f c1       	rjmp	.+542    	; 0x2132 <__stack+0x33>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    1f14:	f6 01       	movw	r30, r12
    1f16:	80 81       	ld	r24, Z
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	20 91 ed 01 	lds	r18, 0x01ED
    1f1e:	30 91 ee 01 	lds	r19, 0x01EE
    1f22:	28 17       	cp	r18, r24
    1f24:	39 07       	cpc	r19, r25
    1f26:	09 f0       	breq	.+2      	; 0x1f2a <HID_Device_ProcessControlRequest+0x48>
    1f28:	04 c1       	rjmp	.+520    	; 0x2132 <__stack+0x33>
	  return;

	switch (USB_ControlRequest.bRequest)
    1f2a:	80 91 ea 01 	lds	r24, 0x01EA
    1f2e:	83 30       	cpi	r24, 0x03	; 3
    1f30:	09 f4       	brne	.+2      	; 0x1f34 <HID_Device_ProcessControlRequest+0x52>
    1f32:	ac c0       	rjmp	.+344    	; 0x208c <HID_Device_ProcessControlRequest+0x1aa>
    1f34:	84 30       	cpi	r24, 0x04	; 4
    1f36:	30 f4       	brcc	.+12     	; 0x1f44 <HID_Device_ProcessControlRequest+0x62>
    1f38:	81 30       	cpi	r24, 0x01	; 1
    1f3a:	71 f0       	breq	.+28     	; 0x1f58 <HID_Device_ProcessControlRequest+0x76>
    1f3c:	82 30       	cpi	r24, 0x02	; 2
    1f3e:	09 f0       	breq	.+2      	; 0x1f42 <HID_Device_ProcessControlRequest+0x60>
    1f40:	f8 c0       	rjmp	.+496    	; 0x2132 <__stack+0x33>
    1f42:	de c0       	rjmp	.+444    	; 0x2100 <__stack+0x1>
    1f44:	8a 30       	cpi	r24, 0x0A	; 10
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <HID_Device_ProcessControlRequest+0x68>
    1f48:	c2 c0       	rjmp	.+388    	; 0x20ce <HID_Device_ProcessControlRequest+0x1ec>
    1f4a:	8b 30       	cpi	r24, 0x0B	; 11
    1f4c:	09 f4       	brne	.+2      	; 0x1f50 <HID_Device_ProcessControlRequest+0x6e>
    1f4e:	ab c0       	rjmp	.+342    	; 0x20a6 <HID_Device_ProcessControlRequest+0x1c4>
    1f50:	89 30       	cpi	r24, 0x09	; 9
    1f52:	09 f0       	breq	.+2      	; 0x1f56 <HID_Device_ProcessControlRequest+0x74>
    1f54:	ee c0       	rjmp	.+476    	; 0x2132 <__stack+0x33>
    1f56:	56 c0       	rjmp	.+172    	; 0x2004 <HID_Device_ProcessControlRequest+0x122>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1f58:	80 91 e9 01 	lds	r24, 0x01E9
    1f5c:	81 3a       	cpi	r24, 0xA1	; 161
    1f5e:	09 f0       	breq	.+2      	; 0x1f62 <HID_Device_ProcessControlRequest+0x80>
    1f60:	e8 c0       	rjmp	.+464    	; 0x2132 <__stack+0x33>
    1f62:	9d b6       	in	r9, 0x3d	; 61
    1f64:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    1f66:	1b 82       	std	Y+3, r1	; 0x03
    1f68:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1f6a:	80 91 eb 01 	lds	r24, 0x01EB
    1f6e:	10 91 ec 01 	lds	r17, 0x01EC
    1f72:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1f74:	f6 01       	movw	r30, r12
    1f76:	47 81       	ldd	r20, Z+7	; 0x07
    1f78:	8d b7       	in	r24, 0x3d	; 61
    1f7a:	9e b7       	in	r25, 0x3e	; 62
    1f7c:	84 1b       	sub	r24, r20
    1f7e:	91 09       	sbc	r25, r1
    1f80:	0f b6       	in	r0, 0x3f	; 63
    1f82:	f8 94       	cli
    1f84:	9e bf       	out	0x3e, r25	; 62
    1f86:	0f be       	out	0x3f, r0	; 63
    1f88:	8d bf       	out	0x3d, r24	; 61
    1f8a:	ed b6       	in	r14, 0x3d	; 61
    1f8c:	fe b6       	in	r15, 0x3e	; 62
    1f8e:	08 94       	sec
    1f90:	e1 1c       	adc	r14, r1
    1f92:	f1 1c       	adc	r15, r1

				memset(ReportData, 0, sizeof(ReportData));
    1f94:	be 2c       	mov	r11, r14
    1f96:	af 2c       	mov	r10, r15
    1f98:	c7 01       	movw	r24, r14
    1f9a:	60 e0       	ldi	r22, 0x00	; 0
    1f9c:	70 e0       	ldi	r23, 0x00	; 0
    1f9e:	50 e0       	ldi	r21, 0x00	; 0
    1fa0:	b8 d2       	rcall	.+1392   	; 0x2512 <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    1fa2:	11 50       	subi	r17, 0x01	; 1
    1fa4:	c6 01       	movw	r24, r12
    1fa6:	be 01       	movw	r22, r28
    1fa8:	6f 5f       	subi	r22, 0xFF	; 255
    1faa:	7f 4f       	sbci	r23, 0xFF	; 255
    1fac:	41 2f       	mov	r20, r17
    1fae:	97 01       	movw	r18, r14
    1fb0:	8e 01       	movw	r16, r28
    1fb2:	0e 5f       	subi	r16, 0xFE	; 254
    1fb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb6:	0e 94 37 02 	call	0x46e	; 0x46e <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1fba:	f6 01       	movw	r30, r12
    1fbc:	25 81       	ldd	r18, Z+5	; 0x05
    1fbe:	36 81       	ldd	r19, Z+6	; 0x06
    1fc0:	21 15       	cp	r18, r1
    1fc2:	31 05       	cpc	r19, r1
    1fc4:	29 f0       	breq	.+10     	; 0x1fd0 <HID_Device_ProcessControlRequest+0xee>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    1fc6:	47 81       	ldd	r20, Z+7	; 0x07
    1fc8:	c9 01       	movw	r24, r18
    1fca:	b7 01       	movw	r22, r14
    1fcc:	50 e0       	ldi	r21, 0x00	; 0
    1fce:	98 d2       	rcall	.+1328   	; 0x2500 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1fd0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1fd4:	80 91 e8 00 	lds	r24, 0x00E8
    1fd8:	87 7f       	andi	r24, 0xF7	; 247
    1fda:	80 93 e8 00 	sts	0x00E8, r24
				}
				
				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1fde:	6a 81       	ldd	r22, Y+2	; 0x02
    1fe0:	7b 81       	ldd	r23, Y+3	; 0x03
    1fe2:	8b 2d       	mov	r24, r11
    1fe4:	9a 2d       	mov	r25, r10
    1fe6:	fa d8       	rcall	.-3596   	; 0x11dc <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1fe8:	80 91 e8 00 	lds	r24, 0x00E8
    1fec:	8b 77       	andi	r24, 0x7B	; 123
    1fee:	80 93 e8 00 	sts	0x00E8, r24
    1ff2:	29 2d       	mov	r18, r9
    1ff4:	38 2d       	mov	r19, r8
    1ff6:	c9 01       	movw	r24, r18
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	f8 94       	cli
    1ffc:	9e bf       	out	0x3e, r25	; 62
    1ffe:	0f be       	out	0x3f, r0	; 63
    2000:	8d bf       	out	0x3d, r24	; 61
    2002:	97 c0       	rjmp	.+302    	; 0x2132 <__stack+0x33>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2004:	80 91 e9 01 	lds	r24, 0x01E9
    2008:	81 32       	cpi	r24, 0x21	; 33
    200a:	09 f0       	breq	.+2      	; 0x200e <HID_Device_ProcessControlRequest+0x12c>
    200c:	92 c0       	rjmp	.+292    	; 0x2132 <__stack+0x33>
    200e:	9d b6       	in	r9, 0x3d	; 61
    2010:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    2012:	00 91 ef 01 	lds	r16, 0x01EF
    2016:	10 91 f0 01 	lds	r17, 0x01F0
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    201a:	a0 90 eb 01 	lds	r10, 0x01EB
    201e:	b0 90 ec 01 	lds	r11, 0x01EC
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    2022:	8d b7       	in	r24, 0x3d	; 61
    2024:	9e b7       	in	r25, 0x3e	; 62
    2026:	80 1b       	sub	r24, r16
    2028:	91 0b       	sbc	r25, r17
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	f8 94       	cli
    202e:	9e bf       	out	0x3e, r25	; 62
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	8d bf       	out	0x3d, r24	; 61
    2034:	ed b6       	in	r14, 0x3d	; 61
    2036:	fe b6       	in	r15, 0x3e	; 62
    2038:	08 94       	sec
    203a:	e1 1c       	adc	r14, r1
    203c:	f1 1c       	adc	r15, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    203e:	80 91 e8 00 	lds	r24, 0x00E8
    2042:	87 7f       	andi	r24, 0xF7	; 247
    2044:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    2048:	c7 01       	movw	r24, r14
    204a:	b8 01       	movw	r22, r16
    204c:	25 d9       	rcall	.-3510   	; 0x1298 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    204e:	80 91 e8 00 	lds	r24, 0x00E8
    2052:	8e 77       	andi	r24, 0x7E	; 126
    2054:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	aa 20       	and	r10, r10
    205e:	11 f0       	breq	.+4      	; 0x2064 <HID_Device_ProcessControlRequest+0x182>
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	ba 94       	dec	r11
    2066:	e8 0e       	add	r14, r24
    2068:	f9 1e       	adc	r15, r25
    206a:	08 1b       	sub	r16, r24
    206c:	19 0b       	sbc	r17, r25
    206e:	c6 01       	movw	r24, r12
    2070:	6a 2d       	mov	r22, r10
    2072:	4b 2d       	mov	r20, r11
    2074:	97 01       	movw	r18, r14
    2076:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <CALLBACK_HID_Device_ProcessHIDReport>
    207a:	89 2d       	mov	r24, r9
    207c:	98 2d       	mov	r25, r8
    207e:	9c 01       	movw	r18, r24
    2080:	0f b6       	in	r0, 0x3f	; 63
    2082:	f8 94       	cli
    2084:	3e bf       	out	0x3e, r19	; 62
    2086:	0f be       	out	0x3f, r0	; 63
    2088:	2d bf       	out	0x3d, r18	; 61
    208a:	53 c0       	rjmp	.+166    	; 0x2132 <__stack+0x33>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    208c:	80 91 e9 01 	lds	r24, 0x01E9
    2090:	81 3a       	cpi	r24, 0xA1	; 161
    2092:	09 f0       	breq	.+2      	; 0x2096 <HID_Device_ProcessControlRequest+0x1b4>
    2094:	4e c0       	rjmp	.+156    	; 0x2132 <__stack+0x33>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2096:	80 91 e8 00 	lds	r24, 0x00E8
    209a:	87 7f       	andi	r24, 0xF7	; 247
    209c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    20a0:	f6 01       	movw	r30, r12
    20a2:	80 85       	ldd	r24, Z+8	; 0x08
    20a4:	3d c0       	rjmp	.+122    	; 0x2120 <__stack+0x21>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    20a6:	80 91 e9 01 	lds	r24, 0x01E9
    20aa:	81 32       	cpi	r24, 0x21	; 33
    20ac:	09 f0       	breq	.+2      	; 0x20b0 <HID_Device_ProcessControlRequest+0x1ce>
    20ae:	41 c0       	rjmp	.+130    	; 0x2132 <__stack+0x33>
    20b0:	80 91 e8 00 	lds	r24, 0x00E8
    20b4:	87 7f       	andi	r24, 0xF7	; 247
    20b6:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    20ba:	0e 94 cf 03 	call	0x79e	; 0x79e <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	80 91 eb 01 	lds	r24, 0x01EB
    20c4:	81 11       	cpse	r24, r1
    20c6:	91 e0       	ldi	r25, 0x01	; 1
    20c8:	f6 01       	movw	r30, r12
    20ca:	90 87       	std	Z+8, r25	; 0x08
    20cc:	32 c0       	rjmp	.+100    	; 0x2132 <__stack+0x33>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    20ce:	80 91 e9 01 	lds	r24, 0x01E9
    20d2:	81 32       	cpi	r24, 0x21	; 33
    20d4:	71 f5       	brne	.+92     	; 0x2132 <__stack+0x33>
    20d6:	80 91 e8 00 	lds	r24, 0x00E8
    20da:	87 7f       	andi	r24, 0xF7	; 247
    20dc:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    20e0:	0e 94 cf 03 	call	0x79e	; 0x79e <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    20e4:	80 91 eb 01 	lds	r24, 0x01EB
    20e8:	90 91 ec 01 	lds	r25, 0x01EC
    20ec:	80 70       	andi	r24, 0x00	; 0
    20ee:	76 e0       	ldi	r23, 0x06	; 6
    20f0:	96 95       	lsr	r25
    20f2:	87 95       	ror	r24
    20f4:	7a 95       	dec	r23
    20f6:	e1 f7       	brne	.-8      	; 0x20f0 <HID_Device_ProcessControlRequest+0x20e>
    20f8:	f6 01       	movw	r30, r12
    20fa:	92 87       	std	Z+10, r25	; 0x0a
    20fc:	81 87       	std	Z+9, r24	; 0x09
    20fe:	19 c0       	rjmp	.+50     	; 0x2132 <__stack+0x33>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    2100:	80 91 e9 01 	lds	r24, 0x01E9
    2104:	81 3a       	cpi	r24, 0xA1	; 161
    2106:	a9 f4       	brne	.+42     	; 0x2132 <__stack+0x33>
    2108:	80 91 e8 00 	lds	r24, 0x00E8
    210c:	87 7f       	andi	r24, 0xF7	; 247
    210e:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    2112:	f6 01       	movw	r30, r12
    2114:	81 85       	ldd	r24, Z+9	; 0x09
    2116:	92 85       	ldd	r25, Z+10	; 0x0a
    2118:	96 95       	lsr	r25
    211a:	87 95       	ror	r24
    211c:	96 95       	lsr	r25
    211e:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2120:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2124:	80 91 e8 00 	lds	r24, 0x00E8
    2128:	8e 77       	andi	r24, 0x7E	; 126
    212a:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    212e:	0e 94 cf 03 	call	0x79e	; 0x79e <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    2132:	0f b6       	in	r0, 0x3f	; 63
    2134:	f8 94       	cli
    2136:	7e be       	out	0x3e, r7	; 62
    2138:	0f be       	out	0x3f, r0	; 63
    213a:	6d be       	out	0x3d, r6	; 61
    213c:	0f 90       	pop	r0
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	cf 91       	pop	r28
    2144:	df 91       	pop	r29
    2146:	1f 91       	pop	r17
    2148:	0f 91       	pop	r16
    214a:	ff 90       	pop	r15
    214c:	ef 90       	pop	r14
    214e:	df 90       	pop	r13
    2150:	cf 90       	pop	r12
    2152:	bf 90       	pop	r11
    2154:	af 90       	pop	r10
    2156:	9f 90       	pop	r9
    2158:	8f 90       	pop	r8
    215a:	7f 90       	pop	r7
    215c:	6f 90       	pop	r6
    215e:	08 95       	ret

00002160 <DCOMP_HID_Host_NextHIDInterface>:

	return HID_ENUMERROR_NoError;
}

static uint8_t DCOMP_HID_Host_NextHIDInterface(void* const CurrentDescriptor)
{
    2160:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    2162:	81 81       	ldd	r24, Z+1	; 0x01
    2164:	84 30       	cpi	r24, 0x04	; 4
    2166:	29 f4       	brne	.+10     	; 0x2172 <DCOMP_HID_Host_NextHIDInterface+0x12>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
    2168:	85 81       	ldd	r24, Z+5	; 0x05
    216a:	83 30       	cpi	r24, 0x03	; 3
    216c:	11 f4       	brne	.+4      	; 0x2172 <DCOMP_HID_Host_NextHIDInterface+0x12>
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	08 95       	ret
    2172:	82 e0       	ldi	r24, 0x02	; 2
		  return DESCRIPTOR_SEARCH_Found;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    2174:	08 95       	ret

00002176 <DCOMP_HID_Host_NextHIDDescriptor>:

static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
    2176:	fc 01       	movw	r30, r24
    2178:	81 81       	ldd	r24, Z+1	; 0x01
    217a:	81 32       	cpi	r24, 0x21	; 33
    217c:	11 f4       	brne	.+4      	; 0x2182 <DCOMP_HID_Host_NextHIDDescriptor+0xc>
    217e:	80 e0       	ldi	r24, 0x00	; 0
    2180:	08 95       	ret
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
    2182:	84 30       	cpi	r24, 0x04	; 4
    2184:	11 f0       	breq	.+4      	; 0x218a <DCOMP_HID_Host_NextHIDDescriptor+0x14>
    2186:	82 e0       	ldi	r24, 0x02	; 2
    2188:	08 95       	ret
    218a:	81 e0       	ldi	r24, 0x01	; 1
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}
    218c:	08 95       	ret

0000218e <HID_Host_IsReportReceived>:
		return USB_Host_SendControlRequest(Buffer);
	}
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    218e:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    2190:	80 91 f1 01 	lds	r24, 0x01F1
    2194:	8b 30       	cpi	r24, 0x0B	; 11
    2196:	a1 f4       	brne	.+40     	; 0x21c0 <HID_Host_IsReportReceived+0x32>
    2198:	87 81       	ldd	r24, Z+7	; 0x07
    219a:	88 23       	and	r24, r24
    219c:	89 f0       	breq	.+34     	; 0x21c0 <HID_Host_IsReportReceived+0x32>
	  return false;

	bool ReportReceived;

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipeNumber);
    219e:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    21a0:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    21a4:	80 91 a9 00 	lds	r24, 0x00A9
    21a8:	8f 7b       	andi	r24, 0xBF	; 191
    21aa:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    21ae:	90 91 a6 00 	lds	r25, 0x00A6
    21b2:	91 70       	andi	r25, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    21b4:	80 91 a9 00 	lds	r24, 0x00A9
    21b8:	80 64       	ori	r24, 0x40	; 64
    21ba:	80 93 a9 00 	sts	0x00A9, r24
    21be:	01 c0       	rjmp	.+2      	; 0x21c2 <HID_Host_IsReportReceived+0x34>

	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
    21c0:	90 e0       	ldi	r25, 0x00	; 0
}
    21c2:	89 2f       	mov	r24, r25
    21c4:	08 95       	ret

000021c6 <HID_Host_SetBootProtocol>:

uint8_t HID_Host_SetBootProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    21c6:	cf 93       	push	r28
    21c8:	df 93       	push	r29
    21ca:	ec 01       	movw	r28, r24
	uint8_t ErrorCode;

	if (!(HIDInterfaceInfo->State.SupportsBootProtocol))
    21cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ce:	88 23       	and	r24, r24
    21d0:	11 f4       	brne	.+4      	; 0x21d6 <HID_Host_SetBootProtocol+0x10>
    21d2:	90 e8       	ldi	r25, 0x80	; 128
    21d4:	1f c0       	rjmp	.+62     	; 0x2214 <HID_Host_SetBootProtocol+0x4e>
	  return HID_ERROR_LOGICAL;

	USB_ControlRequest = (USB_Request_Header_t)
    21d6:	88 85       	ldd	r24, Y+8	; 0x08
    21d8:	91 e2       	ldi	r25, 0x21	; 33
    21da:	90 93 e9 01 	sts	0x01E9, r25
    21de:	9b e0       	ldi	r25, 0x0B	; 11
    21e0:	90 93 ea 01 	sts	0x01EA, r25
    21e4:	10 92 ec 01 	sts	0x01EC, r1
    21e8:	10 92 eb 01 	sts	0x01EB, r1
    21ec:	80 93 ed 01 	sts	0x01ED, r24
    21f0:	10 92 ee 01 	sts	0x01EE, r1
    21f4:	10 92 f0 01 	sts	0x01F0, r1
    21f8:	10 92 ef 01 	sts	0x01EF, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    21fc:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	e5 db       	rcall	.-2102   	; 0x19d0 <USB_Host_SendControlRequest>
    2206:	98 2f       	mov	r25, r24
    2208:	88 23       	and	r24, r24
    220a:	21 f4       	brne	.+8      	; 0x2214 <HID_Host_SetBootProtocol+0x4e>
	  return ErrorCode;

	HIDInterfaceInfo->State.LargestReportSize = 8;
    220c:	88 e0       	ldi	r24, 0x08	; 8
    220e:	8a 8b       	std	Y+18, r24	; 0x12
	HIDInterfaceInfo->State.UsingBootProtocol = true;
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	8f 87       	std	Y+15, r24	; 0x0f

	return HOST_SENDCONTROL_Successful;
}
    2214:	89 2f       	mov	r24, r25
    2216:	df 91       	pop	r29
    2218:	cf 91       	pop	r28
    221a:	08 95       	ret

0000221c <HID_Host_ReceiveReport>:
}
#endif

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
    221c:	cf 93       	push	r28
    221e:	df 93       	push	r29
    2220:	dc 01       	movw	r26, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    2222:	80 91 f1 01 	lds	r24, 0x01F1
    2226:	8b 30       	cpi	r24, 0x0B	; 11
    2228:	09 f0       	breq	.+2      	; 0x222c <HID_Host_ReceiveReport+0x10>
    222a:	3f c0       	rjmp	.+126    	; 0x22aa <HID_Host_ReceiveReport+0x8e>
    222c:	17 96       	adiw	r26, 0x07	; 7
    222e:	8c 91       	ld	r24, X
    2230:	17 97       	sbiw	r26, 0x07	; 7
    2232:	88 23       	and	r24, r24
    2234:	d1 f1       	breq	.+116    	; 0x22aa <HID_Host_ReceiveReport+0x8e>
	  return PIPE_READYWAIT_DeviceDisconnected;

	uint8_t ErrorCode;

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipeNumber);
    2236:	8c 91       	ld	r24, X
    2238:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    223c:	80 91 a9 00 	lds	r24, 0x00A9
    2240:	8f 7b       	andi	r24, 0xBF	; 191
    2242:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Unfreeze();

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;
    2246:	eb 01       	movw	r28, r22

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
    2248:	1f 96       	adiw	r26, 0x0f	; 15
    224a:	8c 91       	ld	r24, X
    224c:	1f 97       	sbiw	r26, 0x0f	; 15
    224e:	88 23       	and	r24, r24
    2250:	b1 f4       	brne	.+44     	; 0x227e <HID_Host_ReceiveReport+0x62>
	{
		uint8_t ReportID = 0;

		if (HIDInterfaceInfo->Config.HIDParserData->UsingReportIDs)
    2252:	15 96       	adiw	r26, 0x05	; 5
    2254:	ed 91       	ld	r30, X+
    2256:	fc 91       	ld	r31, X
    2258:	16 97       	sbiw	r26, 0x06	; 6
    225a:	e8 52       	subi	r30, 0x28	; 40
    225c:	fc 4f       	sbci	r31, 0xFC	; 252
    225e:	80 81       	ld	r24, Z
    2260:	88 23       	and	r24, r24
    2262:	11 f4       	brne	.+4      	; 0x2268 <HID_Host_ReceiveReport+0x4c>
    2264:	60 e0       	ldi	r22, 0x00	; 0
    2266:	03 c0       	rjmp	.+6      	; 0x226e <HID_Host_ReceiveReport+0x52>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    2268:	60 91 af 00 	lds	r22, 0x00AF
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
    226c:	69 93       	st	Y+, r22
		}

		ReportSize = USB_GetHIDReportSize(HIDInterfaceInfo->Config.HIDParserData, ReportID, HID_REPORT_ITEM_In);
    226e:	15 96       	adiw	r26, 0x05	; 5
    2270:	8d 91       	ld	r24, X+
    2272:	9c 91       	ld	r25, X
    2274:	16 97       	sbiw	r26, 0x06	; 6
    2276:	40 e0       	ldi	r20, 0x00	; 0
    2278:	15 dd       	rcall	.-1494   	; 0x1ca4 <USB_GetHIDReportSize>
    227a:	bc 01       	movw	r22, r24
    227c:	04 c0       	rjmp	.+8      	; 0x2286 <HID_Host_ReceiveReport+0x6a>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    227e:	60 91 f6 00 	lds	r22, 0x00F6
    2282:	70 91 f7 00 	lds	r23, 0x00F7
#endif
	{
		ReportSize = Pipe_BytesInPipe();
	}

	if ((ErrorCode = Pipe_Read_Stream_LE(BufferPos, ReportSize, NULL)) != PIPE_RWSTREAM_NoError)
    2286:	ce 01       	movw	r24, r28
    2288:	40 e0       	ldi	r20, 0x00	; 0
    228a:	50 e0       	ldi	r21, 0x00	; 0
    228c:	f9 d8       	rcall	.-3598   	; 0x1480 <Pipe_Read_Stream_LE>
    228e:	98 2f       	mov	r25, r24
    2290:	88 23       	and	r24, r24
    2292:	61 f4       	brne	.+24     	; 0x22ac <HID_Host_ReceiveReport+0x90>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    2294:	80 91 a6 00 	lds	r24, 0x00A6
    2298:	8e 77       	andi	r24, 0x7E	; 126
    229a:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    229e:	80 91 a9 00 	lds	r24, 0x00A9
    22a2:	80 64       	ori	r24, 0x40	; 64
    22a4:	80 93 a9 00 	sts	0x00A9, r24
    22a8:	01 c0       	rjmp	.+2      	; 0x22ac <HID_Host_ReceiveReport+0x90>
	  return ErrorCode;

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    22aa:	92 e0       	ldi	r25, 0x02	; 2
}
    22ac:	89 2f       	mov	r24, r25
    22ae:	df 91       	pop	r29
    22b0:	cf 91       	pop	r28
    22b2:	08 95       	ret

000022b4 <HID_Host_ConfigurePipes>:
#include "HID.h"

uint8_t HID_Host_ConfigurePipes(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    22b4:	2f 92       	push	r2
    22b6:	3f 92       	push	r3
    22b8:	4f 92       	push	r4
    22ba:	5f 92       	push	r5
    22bc:	6f 92       	push	r6
    22be:	7f 92       	push	r7
    22c0:	8f 92       	push	r8
    22c2:	9f 92       	push	r9
    22c4:	af 92       	push	r10
    22c6:	bf 92       	push	r11
    22c8:	cf 92       	push	r12
    22ca:	df 92       	push	r13
    22cc:	ef 92       	push	r14
    22ce:	ff 92       	push	r15
    22d0:	0f 93       	push	r16
    22d2:	1f 93       	push	r17
    22d4:	df 93       	push	r29
    22d6:	cf 93       	push	r28
    22d8:	00 d0       	rcall	.+0      	; 0x22da <HID_Host_ConfigurePipes+0x26>
    22da:	00 d0       	rcall	.+0      	; 0x22dc <HID_Host_ConfigurePipes+0x28>
    22dc:	cd b7       	in	r28, 0x3d	; 61
    22de:	de b7       	in	r29, 0x3e	; 62
    22e0:	6c 01       	movw	r12, r24
    22e2:	7a 83       	std	Y+2, r23	; 0x02
    22e4:	69 83       	std	Y+1, r22	; 0x01
    22e6:	5c 83       	std	Y+4, r21	; 0x04
    22e8:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    22ea:	07 96       	adiw	r24, 0x07	; 7
    22ec:	fc 01       	movw	r30, r24
    22ee:	8c e0       	ldi	r24, 0x0C	; 12
    22f0:	df 01       	movw	r26, r30
    22f2:	1d 92       	st	X+, r1
    22f4:	8a 95       	dec	r24
    22f6:	e9 f7       	brne	.-6      	; 0x22f2 <HID_Host_ConfigurePipes+0x3e>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    22f8:	eb 81       	ldd	r30, Y+3	; 0x03
    22fa:	fc 81       	ldd	r31, Y+4	; 0x04
    22fc:	81 81       	ldd	r24, Z+1	; 0x01
    22fe:	82 30       	cpi	r24, 0x02	; 2
    2300:	11 f0       	breq	.+4      	; 0x2306 <HID_Host_ConfigurePipes+0x52>
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	ab c0       	rjmp	.+342    	; 0x245c <HID_Host_ConfigurePipes+0x1a8>
    2306:	66 24       	eor	r6, r6
    2308:	77 24       	eor	r7, r7
    230a:	aa 24       	eor	r10, r10
    230c:	bb 24       	eor	r11, r11
    230e:	44 24       	eor	r4, r4
    2310:	55 24       	eor	r5, r5
    2312:	22 24       	eor	r2, r2
    2314:	33 24       	eor	r3, r3
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    2316:	23 e0       	ldi	r18, 0x03	; 3
    2318:	e2 2e       	mov	r14, r18
    231a:	f1 2c       	mov	r15, r1
    231c:	ec 0e       	add	r14, r28
    231e:	fd 1e       	adc	r15, r29
    2320:	8e 01       	movw	r16, r28
    2322:	0f 5f       	subi	r16, 0xFF	; 255
    2324:	1f 4f       	sbci	r17, 0xFF	; 255
    2326:	41 14       	cp	r4, r1
    2328:	51 04       	cpc	r5, r1
    232a:	39 f0       	breq	.+14     	; 0x233a <HID_Host_ConfigurePipes+0x86>
    232c:	c8 01       	movw	r24, r16
    232e:	b7 01       	movw	r22, r14
    2330:	45 e4       	ldi	r20, 0x45	; 69
    2332:	52 e1       	ldi	r21, 0x12	; 18
    2334:	fc d8       	rcall	.-3592   	; 0x152e <USB_GetNextDescriptorComp>
    2336:	88 23       	and	r24, r24
    2338:	21 f1       	breq	.+72     	; 0x2382 <HID_Host_ConfigurePipes+0xce>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_HID_Host_NextHIDInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (DataINEndpoint || DataOUTEndpoint)
    233a:	61 14       	cp	r6, r1
    233c:	71 04       	cpc	r7, r1
    233e:	79 f5       	brne	.+94     	; 0x239e <HID_Host_ConfigurePipes+0xea>
    2340:	a1 14       	cp	r10, r1
    2342:	b1 04       	cpc	r11, r1
    2344:	61 f5       	brne	.+88     	; 0x239e <HID_Host_ConfigurePipes+0xea>
			  break;

			do
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    2346:	c8 01       	movw	r24, r16
    2348:	b7 01       	movw	r22, r14
    234a:	40 eb       	ldi	r20, 0xB0	; 176
    234c:	50 e1       	ldi	r21, 0x10	; 16
    234e:	ef d8       	rcall	.-3618   	; 0x152e <USB_GetNextDescriptorComp>
    2350:	88 23       	and	r24, r24
    2352:	09 f0       	breq	.+2      	; 0x2356 <HID_Host_ConfigurePipes+0xa2>
    2354:	82 c0       	rjmp	.+260    	; 0x245a <HID_Host_ConfigurePipes+0x1a6>
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    2356:	4b 80       	ldd	r4, Y+3	; 0x03
    2358:	5c 80       	ldd	r5, Y+4	; 0x04
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));
    235a:	f6 01       	movw	r30, r12
    235c:	94 81       	ldd	r25, Z+4	; 0x04
    235e:	99 23       	and	r25, r25
    2360:	29 f0       	breq	.+10     	; 0x236c <HID_Host_ConfigurePipes+0xb8>
    2362:	d2 01       	movw	r26, r4
    2364:	17 96       	adiw	r26, 0x07	; 7
    2366:	8c 91       	ld	r24, X
    2368:	89 17       	cp	r24, r25
    236a:	69 f7       	brne	.-38     	; 0x2346 <HID_Host_ConfigurePipes+0x92>

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    236c:	c8 01       	movw	r24, r16
    236e:	b7 01       	movw	r22, r14
    2370:	4b eb       	ldi	r20, 0xBB	; 187
    2372:	50 e1       	ldi	r21, 0x10	; 16
    2374:	dc d8       	rcall	.-3656   	; 0x152e <USB_GetNextDescriptorComp>
    2376:	88 23       	and	r24, r24
    2378:	09 f0       	breq	.+2      	; 0x237c <HID_Host_ConfigurePipes+0xc8>
    237a:	6f c0       	rjmp	.+222    	; 0x245a <HID_Host_ConfigurePipes+0x1a6>
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
			}

			HIDDescriptor = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_HID_Descriptor_HID_t);
    237c:	2b 80       	ldd	r2, Y+3	; 0x03
    237e:	3c 80       	ldd	r3, Y+4	; 0x04
    2380:	d2 cf       	rjmp	.-92     	; 0x2326 <HID_Host_ConfigurePipes+0x72>
			DataOUTEndpoint = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    2382:	eb 81       	ldd	r30, Y+3	; 0x03
    2384:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    2386:	82 81       	ldd	r24, Z+2	; 0x02
    2388:	87 fd       	sbrc	r24, 7
    238a:	02 c0       	rjmp	.+4      	; 0x2390 <HID_Host_ConfigurePipes+0xdc>
    238c:	5f 01       	movw	r10, r30
    238e:	01 c0       	rjmp	.+2      	; 0x2392 <HID_Host_ConfigurePipes+0xde>
    2390:	3f 01       	movw	r6, r30
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    2392:	61 14       	cp	r6, r1
    2394:	71 04       	cpc	r7, r1
    2396:	39 f2       	breq	.-114    	; 0x2326 <HID_Host_ConfigurePipes+0x72>
    2398:	a1 14       	cp	r10, r1
    239a:	b1 04       	cpc	r11, r1
    239c:	21 f2       	breq	.-120    	; 0x2326 <HID_Host_ConfigurePipes+0x72>
    239e:	99 24       	eor	r9, r9
    23a0:	93 94       	inc	r9
			Type            = EP_TYPE_INTERRUPT;
			DoubleBanked    = HIDInterfaceInfo->Config.DataOUTPipeDoubleBank;
			InterruptPeriod = DataOUTEndpoint->PollingIntervalMS;

			HIDInterfaceInfo->State.DataOUTPipeSize   = DataOUTEndpoint->EndpointSize;
			HIDInterfaceInfo->State.DeviceUsesOUTPipe = true;
    23a2:	88 24       	eor	r8, r8
    23a4:	83 94       	inc	r8
		uint8_t  Token;
		uint8_t  EndpointAddress;
		uint8_t  InterruptPeriod;
		bool     DoubleBanked;

		if (PipeNum == HIDInterfaceInfo->Config.DataINPipeNumber)
    23a6:	f6 01       	movw	r30, r12
    23a8:	80 81       	ld	r24, Z
    23aa:	98 16       	cp	r9, r24
    23ac:	79 f4       	brne	.+30     	; 0x23cc <HID_Host_ConfigurePipes+0x118>
		{
			Size            = le16_to_cpu(DataINEndpoint->EndpointSize);
    23ae:	d3 01       	movw	r26, r6
    23b0:	14 96       	adiw	r26, 0x04	; 4
    23b2:	0d 91       	ld	r16, X+
    23b4:	1c 91       	ld	r17, X
    23b6:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataINEndpoint->EndpointAddress;
    23b8:	12 96       	adiw	r26, 0x02	; 2
    23ba:	2c 91       	ld	r18, X
    23bc:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_INTERRUPT;
			DoubleBanked    = HIDInterfaceInfo->Config.DataINPipeDoubleBank;
    23be:	81 81       	ldd	r24, Z+1	; 0x01
			InterruptPeriod = DataINEndpoint->PollingIntervalMS;
    23c0:	16 96       	adiw	r26, 0x06	; 6
    23c2:	fc 90       	ld	r15, X

			HIDInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    23c4:	12 87       	std	Z+10, r17	; 0x0a
    23c6:	01 87       	std	Z+9, r16	; 0x09
    23c8:	40 e1       	ldi	r20, 0x10	; 16
    23ca:	16 c0       	rjmp	.+44     	; 0x23f8 <HID_Host_ConfigurePipes+0x144>
		}
		else if (PipeNum == HIDInterfaceInfo->Config.DataOUTPipeNumber)
    23cc:	f6 01       	movw	r30, r12
    23ce:	82 81       	ldd	r24, Z+2	; 0x02
    23d0:	98 16       	cp	r9, r24
    23d2:	21 f5       	brne	.+72     	; 0x241c <HID_Host_ConfigurePipes+0x168>
		{
			if (DataOUTEndpoint == NULL)
    23d4:	a1 14       	cp	r10, r1
    23d6:	b1 04       	cpc	r11, r1
    23d8:	09 f1       	breq	.+66     	; 0x241c <HID_Host_ConfigurePipes+0x168>
			  continue;
		
			Size            = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    23da:	d5 01       	movw	r26, r10
    23dc:	14 96       	adiw	r26, 0x04	; 4
    23de:	0d 91       	ld	r16, X+
    23e0:	1c 91       	ld	r17, X
    23e2:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
    23e4:	12 96       	adiw	r26, 0x02	; 2
    23e6:	2c 91       	ld	r18, X
    23e8:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_INTERRUPT;
			DoubleBanked    = HIDInterfaceInfo->Config.DataOUTPipeDoubleBank;
    23ea:	83 81       	ldd	r24, Z+3	; 0x03
			InterruptPeriod = DataOUTEndpoint->PollingIntervalMS;
    23ec:	16 96       	adiw	r26, 0x06	; 6
    23ee:	fc 90       	ld	r15, X

			HIDInterfaceInfo->State.DataOUTPipeSize   = DataOUTEndpoint->EndpointSize;
    23f0:	14 87       	std	Z+12, r17	; 0x0c
    23f2:	03 87       	std	Z+11, r16	; 0x0b
			HIDInterfaceInfo->State.DeviceUsesOUTPipe = true;
    23f4:	86 86       	std	Z+14, r8	; 0x0e
    23f6:	40 e2       	ldi	r20, 0x20	; 32
		else
		{
			continue;
		}

		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    23f8:	88 23       	and	r24, r24
    23fa:	11 f4       	brne	.+4      	; 0x2400 <HID_Host_ConfigurePipes+0x14c>
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	01 c0       	rjmp	.+2      	; 0x2402 <HID_Host_ConfigurePipes+0x14e>
    2400:	94 e0       	ldi	r25, 0x04	; 4
    2402:	89 2d       	mov	r24, r9
    2404:	63 e0       	ldi	r22, 0x03	; 3
    2406:	e9 2e       	mov	r14, r25
    2408:	0e 94 ef 05 	call	0xbde	; 0xbde <Pipe_ConfigurePipe>
    240c:	88 23       	and	r24, r24
    240e:	11 f4       	brne	.+4      	; 0x2414 <HID_Host_ConfigurePipes+0x160>
    2410:	83 e0       	ldi	r24, 0x03	; 3
    2412:	24 c0       	rjmp	.+72     	; 0x245c <HID_Host_ConfigurePipes+0x1a8>
		                         DoubleBanked ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE)))
		{
			return HID_ENUMERROR_PipeConfigurationFailed;
		}
		
		if (InterruptPeriod)
    2414:	ff 20       	and	r15, r15
    2416:	11 f0       	breq	.+4      	; 0x241c <HID_Host_ConfigurePipes+0x168>
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
    2418:	f0 92 ad 00 	sts	0x00AD, r15
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    241c:	93 94       	inc	r9
    241e:	b7 e0       	ldi	r27, 0x07	; 7
    2420:	9b 16       	cp	r9, r27
    2422:	09 f6       	brne	.-126    	; 0x23a6 <HID_Host_ConfigurePipes+0xf2>
		
		if (InterruptPeriod)
		  Pipe_SetInterruptPeriod(InterruptPeriod);
	}

	HIDInterfaceInfo->State.InterfaceNumber      = HIDInterface->InterfaceNumber;
    2424:	f2 01       	movw	r30, r4
    2426:	82 81       	ldd	r24, Z+2	; 0x02
    2428:	d6 01       	movw	r26, r12
    242a:	18 96       	adiw	r26, 0x08	; 8
    242c:	8c 93       	st	X, r24
    242e:	18 97       	sbiw	r26, 0x08	; 8
	HIDInterfaceInfo->State.HIDReportSize        = LE16_TO_CPU(HIDDescriptor->HIDReportLength);
    2430:	f1 01       	movw	r30, r2
    2432:	87 81       	ldd	r24, Z+7	; 0x07
    2434:	90 85       	ldd	r25, Z+8	; 0x08
    2436:	51 96       	adiw	r26, 0x11	; 17
    2438:	9c 93       	st	X, r25
    243a:	8e 93       	st	-X, r24
    243c:	50 97       	sbiw	r26, 0x10	; 16
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	d2 01       	movw	r26, r4
    2442:	16 96       	adiw	r26, 0x06	; 6
    2444:	8c 91       	ld	r24, X
    2446:	81 11       	cpse	r24, r1
    2448:	91 e0       	ldi	r25, 0x01	; 1
    244a:	f6 01       	movw	r30, r12
    244c:	95 87       	std	Z+13, r25	; 0x0d
	HIDInterfaceInfo->State.LargestReportSize    = 8;
    244e:	88 e0       	ldi	r24, 0x08	; 8
    2450:	82 8b       	std	Z+18, r24	; 0x12
	HIDInterfaceInfo->State.IsActive             = true;
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	87 83       	std	Z+7, r24	; 0x07
    2456:	80 e0       	ldi	r24, 0x00	; 0
    2458:	01 c0       	rjmp	.+2      	; 0x245c <HID_Host_ConfigurePipes+0x1a8>

	return HID_ENUMERROR_NoError;
    245a:	82 e0       	ldi	r24, 0x02	; 2
}
    245c:	0f 90       	pop	r0
    245e:	0f 90       	pop	r0
    2460:	0f 90       	pop	r0
    2462:	0f 90       	pop	r0
    2464:	cf 91       	pop	r28
    2466:	df 91       	pop	r29
    2468:	1f 91       	pop	r17
    246a:	0f 91       	pop	r16
    246c:	ff 90       	pop	r15
    246e:	ef 90       	pop	r14
    2470:	df 90       	pop	r13
    2472:	cf 90       	pop	r12
    2474:	bf 90       	pop	r11
    2476:	af 90       	pop	r10
    2478:	9f 90       	pop	r9
    247a:	8f 90       	pop	r8
    247c:	7f 90       	pop	r7
    247e:	6f 90       	pop	r6
    2480:	5f 90       	pop	r5
    2482:	4f 90       	pop	r4
    2484:	3f 90       	pop	r3
    2486:	2f 90       	pop	r2
    2488:	08 95       	ret

0000248a <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}

static uint8_t DCOMP_HID_Host_NextHIDInterfaceEndpoint(void* const CurrentDescriptor)
{
    248a:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    248c:	81 81       	ldd	r24, Z+1	; 0x01
    248e:	85 30       	cpi	r24, 0x05	; 5
    2490:	31 f4       	brne	.+12     	; 0x249e <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    2492:	82 81       	ldd	r24, Z+2	; 0x02
    2494:	0e 94 61 06 	call	0xcc2	; 0xcc2 <Pipe_IsEndpointBound>
    2498:	88 23       	and	r24, r24
    249a:	29 f4       	brne	.+10     	; 0x24a6 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1c>
    249c:	08 95       	ret
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    249e:	84 30       	cpi	r24, 0x04	; 4
    24a0:	11 f4       	brne	.+4      	; 0x24a6 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1c>
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	08 95       	ret
    24a6:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    24a8:	08 95       	ret

000024aa <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    24aa:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    24ac:	80 91 c8 00 	lds	r24, 0x00C8
    24b0:	85 ff       	sbrs	r24, 5
    24b2:	fc cf       	rjmp	.-8      	; 0x24ac <Serial_putchar+0x2>
				UDR1 = DataByte;
    24b4:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    24b8:	80 e0       	ldi	r24, 0x00	; 0
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	08 95       	ret

000024be <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    24be:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    24c2:	87 fd       	sbrc	r24, 7
    24c4:	03 c0       	rjmp	.+6      	; 0x24cc <Serial_getchar+0xe>
    24c6:	2e ef       	ldi	r18, 0xFE	; 254
    24c8:	3f ef       	ldi	r19, 0xFF	; 255
    24ca:	0b c0       	rjmp	.+22     	; 0x24e2 <Serial_getchar+0x24>
    24cc:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    24d0:	87 fd       	sbrc	r24, 7
    24d2:	03 c0       	rjmp	.+6      	; 0x24da <Serial_getchar+0x1c>
    24d4:	2f ef       	ldi	r18, 0xFF	; 255
    24d6:	3f ef       	ldi	r19, 0xFF	; 255
    24d8:	04 c0       	rjmp	.+8      	; 0x24e2 <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    24da:	80 91 ce 00 	lds	r24, 0x00CE
    24de:	28 2f       	mov	r18, r24
    24e0:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    24e2:	c9 01       	movw	r24, r18
    24e4:	08 95       	ret

000024e6 <memcmp>:
    24e6:	fb 01       	movw	r30, r22
    24e8:	dc 01       	movw	r26, r24
    24ea:	04 c0       	rjmp	.+8      	; 0x24f4 <memcmp+0xe>
    24ec:	8d 91       	ld	r24, X+
    24ee:	01 90       	ld	r0, Z+
    24f0:	80 19       	sub	r24, r0
    24f2:	21 f4       	brne	.+8      	; 0x24fc <memcmp+0x16>
    24f4:	41 50       	subi	r20, 0x01	; 1
    24f6:	50 40       	sbci	r21, 0x00	; 0
    24f8:	c8 f7       	brcc	.-14     	; 0x24ec <memcmp+0x6>
    24fa:	88 1b       	sub	r24, r24
    24fc:	99 0b       	sbc	r25, r25
    24fe:	08 95       	ret

00002500 <memcpy>:
    2500:	fb 01       	movw	r30, r22
    2502:	dc 01       	movw	r26, r24
    2504:	02 c0       	rjmp	.+4      	; 0x250a <memcpy+0xa>
    2506:	01 90       	ld	r0, Z+
    2508:	0d 92       	st	X+, r0
    250a:	41 50       	subi	r20, 0x01	; 1
    250c:	50 40       	sbci	r21, 0x00	; 0
    250e:	d8 f7       	brcc	.-10     	; 0x2506 <memcpy+0x6>
    2510:	08 95       	ret

00002512 <memset>:
    2512:	dc 01       	movw	r26, r24
    2514:	01 c0       	rjmp	.+2      	; 0x2518 <memset+0x6>
    2516:	6d 93       	st	X+, r22
    2518:	41 50       	subi	r20, 0x01	; 1
    251a:	50 40       	sbci	r21, 0x00	; 0
    251c:	e0 f7       	brcc	.-8      	; 0x2516 <memset+0x4>
    251e:	08 95       	ret

00002520 <printf_P>:
    2520:	df 93       	push	r29
    2522:	cf 93       	push	r28
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
    2528:	fe 01       	movw	r30, r28
    252a:	35 96       	adiw	r30, 0x05	; 5
    252c:	61 91       	ld	r22, Z+
    252e:	71 91       	ld	r23, Z+
    2530:	a0 91 02 02 	lds	r26, 0x0202
    2534:	b0 91 03 02 	lds	r27, 0x0203
    2538:	13 96       	adiw	r26, 0x03	; 3
    253a:	8c 91       	ld	r24, X
    253c:	13 97       	sbiw	r26, 0x03	; 3
    253e:	88 60       	ori	r24, 0x08	; 8
    2540:	13 96       	adiw	r26, 0x03	; 3
    2542:	8c 93       	st	X, r24
    2544:	80 91 02 02 	lds	r24, 0x0202
    2548:	90 91 03 02 	lds	r25, 0x0203
    254c:	af 01       	movw	r20, r30
    254e:	74 d0       	rcall	.+232    	; 0x2638 <vfprintf>
    2550:	e0 91 02 02 	lds	r30, 0x0202
    2554:	f0 91 03 02 	lds	r31, 0x0203
    2558:	23 81       	ldd	r18, Z+3	; 0x03
    255a:	27 7f       	andi	r18, 0xF7	; 247
    255c:	23 83       	std	Z+3, r18	; 0x03
    255e:	cf 91       	pop	r28
    2560:	df 91       	pop	r29
    2562:	08 95       	ret

00002564 <puts>:
    2564:	0f 93       	push	r16
    2566:	1f 93       	push	r17
    2568:	cf 93       	push	r28
    256a:	df 93       	push	r29
    256c:	8c 01       	movw	r16, r24
    256e:	e0 91 02 02 	lds	r30, 0x0202
    2572:	f0 91 03 02 	lds	r31, 0x0203
    2576:	83 81       	ldd	r24, Z+3	; 0x03
    2578:	81 ff       	sbrs	r24, 1
    257a:	21 c0       	rjmp	.+66     	; 0x25be <puts+0x5a>
    257c:	c0 e0       	ldi	r28, 0x00	; 0
    257e:	d0 e0       	ldi	r29, 0x00	; 0
    2580:	0d c0       	rjmp	.+26     	; 0x259c <puts+0x38>
    2582:	e0 91 02 02 	lds	r30, 0x0202
    2586:	f0 91 03 02 	lds	r31, 0x0203
    258a:	20 85       	ldd	r18, Z+8	; 0x08
    258c:	31 85       	ldd	r19, Z+9	; 0x09
    258e:	bf 01       	movw	r22, r30
    2590:	f9 01       	movw	r30, r18
    2592:	09 95       	icall
    2594:	89 2b       	or	r24, r25
    2596:	11 f0       	breq	.+4      	; 0x259c <puts+0x38>
    2598:	cf ef       	ldi	r28, 0xFF	; 255
    259a:	df ef       	ldi	r29, 0xFF	; 255
    259c:	f8 01       	movw	r30, r16
    259e:	81 91       	ld	r24, Z+
    25a0:	8f 01       	movw	r16, r30
    25a2:	88 23       	and	r24, r24
    25a4:	71 f7       	brne	.-36     	; 0x2582 <puts+0x1e>
    25a6:	e0 91 02 02 	lds	r30, 0x0202
    25aa:	f0 91 03 02 	lds	r31, 0x0203
    25ae:	20 85       	ldd	r18, Z+8	; 0x08
    25b0:	31 85       	ldd	r19, Z+9	; 0x09
    25b2:	8a e0       	ldi	r24, 0x0A	; 10
    25b4:	bf 01       	movw	r22, r30
    25b6:	f9 01       	movw	r30, r18
    25b8:	09 95       	icall
    25ba:	89 2b       	or	r24, r25
    25bc:	11 f0       	breq	.+4      	; 0x25c2 <puts+0x5e>
    25be:	cf ef       	ldi	r28, 0xFF	; 255
    25c0:	df ef       	ldi	r29, 0xFF	; 255
    25c2:	ce 01       	movw	r24, r28
    25c4:	df 91       	pop	r29
    25c6:	cf 91       	pop	r28
    25c8:	1f 91       	pop	r17
    25ca:	0f 91       	pop	r16
    25cc:	08 95       	ret

000025ce <puts_P>:
    25ce:	0f 93       	push	r16
    25d0:	1f 93       	push	r17
    25d2:	cf 93       	push	r28
    25d4:	df 93       	push	r29
    25d6:	ec 01       	movw	r28, r24
    25d8:	e0 91 02 02 	lds	r30, 0x0202
    25dc:	f0 91 03 02 	lds	r31, 0x0203
    25e0:	83 81       	ldd	r24, Z+3	; 0x03
    25e2:	81 ff       	sbrs	r24, 1
    25e4:	21 c0       	rjmp	.+66     	; 0x2628 <puts_P+0x5a>
    25e6:	00 e0       	ldi	r16, 0x00	; 0
    25e8:	10 e0       	ldi	r17, 0x00	; 0
    25ea:	0e c0       	rjmp	.+28     	; 0x2608 <puts_P+0x3a>
    25ec:	e0 91 02 02 	lds	r30, 0x0202
    25f0:	f0 91 03 02 	lds	r31, 0x0203
    25f4:	20 85       	ldd	r18, Z+8	; 0x08
    25f6:	31 85       	ldd	r19, Z+9	; 0x09
    25f8:	bf 01       	movw	r22, r30
    25fa:	f9 01       	movw	r30, r18
    25fc:	09 95       	icall
    25fe:	89 2b       	or	r24, r25
    2600:	11 f0       	breq	.+4      	; 0x2606 <puts_P+0x38>
    2602:	0f ef       	ldi	r16, 0xFF	; 255
    2604:	1f ef       	ldi	r17, 0xFF	; 255
    2606:	21 96       	adiw	r28, 0x01	; 1
    2608:	fe 01       	movw	r30, r28
    260a:	84 91       	lpm	r24, Z+
    260c:	88 23       	and	r24, r24
    260e:	71 f7       	brne	.-36     	; 0x25ec <puts_P+0x1e>
    2610:	e0 91 02 02 	lds	r30, 0x0202
    2614:	f0 91 03 02 	lds	r31, 0x0203
    2618:	20 85       	ldd	r18, Z+8	; 0x08
    261a:	31 85       	ldd	r19, Z+9	; 0x09
    261c:	8a e0       	ldi	r24, 0x0A	; 10
    261e:	bf 01       	movw	r22, r30
    2620:	f9 01       	movw	r30, r18
    2622:	09 95       	icall
    2624:	89 2b       	or	r24, r25
    2626:	11 f0       	breq	.+4      	; 0x262c <puts_P+0x5e>
    2628:	0f ef       	ldi	r16, 0xFF	; 255
    262a:	1f ef       	ldi	r17, 0xFF	; 255
    262c:	c8 01       	movw	r24, r16
    262e:	df 91       	pop	r29
    2630:	cf 91       	pop	r28
    2632:	1f 91       	pop	r17
    2634:	0f 91       	pop	r16
    2636:	08 95       	ret

00002638 <vfprintf>:
    2638:	2f 92       	push	r2
    263a:	3f 92       	push	r3
    263c:	4f 92       	push	r4
    263e:	5f 92       	push	r5
    2640:	6f 92       	push	r6
    2642:	7f 92       	push	r7
    2644:	8f 92       	push	r8
    2646:	9f 92       	push	r9
    2648:	af 92       	push	r10
    264a:	bf 92       	push	r11
    264c:	cf 92       	push	r12
    264e:	df 92       	push	r13
    2650:	ef 92       	push	r14
    2652:	ff 92       	push	r15
    2654:	0f 93       	push	r16
    2656:	1f 93       	push	r17
    2658:	df 93       	push	r29
    265a:	cf 93       	push	r28
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62
    2660:	2b 97       	sbiw	r28, 0x0b	; 11
    2662:	0f b6       	in	r0, 0x3f	; 63
    2664:	f8 94       	cli
    2666:	de bf       	out	0x3e, r29	; 62
    2668:	0f be       	out	0x3f, r0	; 63
    266a:	cd bf       	out	0x3d, r28	; 61
    266c:	3c 01       	movw	r6, r24
    266e:	2b 01       	movw	r4, r22
    2670:	5a 01       	movw	r10, r20
    2672:	fc 01       	movw	r30, r24
    2674:	17 82       	std	Z+7, r1	; 0x07
    2676:	16 82       	std	Z+6, r1	; 0x06
    2678:	83 81       	ldd	r24, Z+3	; 0x03
    267a:	81 fd       	sbrc	r24, 1
    267c:	03 c0       	rjmp	.+6      	; 0x2684 <vfprintf+0x4c>
    267e:	6f ef       	ldi	r22, 0xFF	; 255
    2680:	7f ef       	ldi	r23, 0xFF	; 255
    2682:	b9 c1       	rjmp	.+882    	; 0x29f6 <vfprintf+0x3be>
    2684:	9a e0       	ldi	r25, 0x0A	; 10
    2686:	89 2e       	mov	r8, r25
    2688:	1e 01       	movw	r2, r28
    268a:	08 94       	sec
    268c:	21 1c       	adc	r2, r1
    268e:	31 1c       	adc	r3, r1
    2690:	f3 01       	movw	r30, r6
    2692:	23 81       	ldd	r18, Z+3	; 0x03
    2694:	f2 01       	movw	r30, r4
    2696:	23 fd       	sbrc	r18, 3
    2698:	85 91       	lpm	r24, Z+
    269a:	23 ff       	sbrs	r18, 3
    269c:	81 91       	ld	r24, Z+
    269e:	2f 01       	movw	r4, r30
    26a0:	88 23       	and	r24, r24
    26a2:	09 f4       	brne	.+2      	; 0x26a6 <vfprintf+0x6e>
    26a4:	a5 c1       	rjmp	.+842    	; 0x29f0 <vfprintf+0x3b8>
    26a6:	85 32       	cpi	r24, 0x25	; 37
    26a8:	39 f4       	brne	.+14     	; 0x26b8 <vfprintf+0x80>
    26aa:	23 fd       	sbrc	r18, 3
    26ac:	85 91       	lpm	r24, Z+
    26ae:	23 ff       	sbrs	r18, 3
    26b0:	81 91       	ld	r24, Z+
    26b2:	2f 01       	movw	r4, r30
    26b4:	85 32       	cpi	r24, 0x25	; 37
    26b6:	21 f4       	brne	.+8      	; 0x26c0 <vfprintf+0x88>
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	b3 01       	movw	r22, r6
    26bc:	cc d1       	rcall	.+920    	; 0x2a56 <fputc>
    26be:	e8 cf       	rjmp	.-48     	; 0x2690 <vfprintf+0x58>
    26c0:	98 2f       	mov	r25, r24
    26c2:	ff 24       	eor	r15, r15
    26c4:	ee 24       	eor	r14, r14
    26c6:	99 24       	eor	r9, r9
    26c8:	ff e1       	ldi	r31, 0x1F	; 31
    26ca:	ff 15       	cp	r31, r15
    26cc:	d0 f0       	brcs	.+52     	; 0x2702 <vfprintf+0xca>
    26ce:	9b 32       	cpi	r25, 0x2B	; 43
    26d0:	69 f0       	breq	.+26     	; 0x26ec <vfprintf+0xb4>
    26d2:	9c 32       	cpi	r25, 0x2C	; 44
    26d4:	28 f4       	brcc	.+10     	; 0x26e0 <vfprintf+0xa8>
    26d6:	90 32       	cpi	r25, 0x20	; 32
    26d8:	59 f0       	breq	.+22     	; 0x26f0 <vfprintf+0xb8>
    26da:	93 32       	cpi	r25, 0x23	; 35
    26dc:	91 f4       	brne	.+36     	; 0x2702 <vfprintf+0xca>
    26de:	0e c0       	rjmp	.+28     	; 0x26fc <vfprintf+0xc4>
    26e0:	9d 32       	cpi	r25, 0x2D	; 45
    26e2:	49 f0       	breq	.+18     	; 0x26f6 <vfprintf+0xbe>
    26e4:	90 33       	cpi	r25, 0x30	; 48
    26e6:	69 f4       	brne	.+26     	; 0x2702 <vfprintf+0xca>
    26e8:	41 e0       	ldi	r20, 0x01	; 1
    26ea:	24 c0       	rjmp	.+72     	; 0x2734 <vfprintf+0xfc>
    26ec:	52 e0       	ldi	r21, 0x02	; 2
    26ee:	f5 2a       	or	r15, r21
    26f0:	84 e0       	ldi	r24, 0x04	; 4
    26f2:	f8 2a       	or	r15, r24
    26f4:	28 c0       	rjmp	.+80     	; 0x2746 <vfprintf+0x10e>
    26f6:	98 e0       	ldi	r25, 0x08	; 8
    26f8:	f9 2a       	or	r15, r25
    26fa:	25 c0       	rjmp	.+74     	; 0x2746 <vfprintf+0x10e>
    26fc:	e0 e1       	ldi	r30, 0x10	; 16
    26fe:	fe 2a       	or	r15, r30
    2700:	22 c0       	rjmp	.+68     	; 0x2746 <vfprintf+0x10e>
    2702:	f7 fc       	sbrc	r15, 7
    2704:	29 c0       	rjmp	.+82     	; 0x2758 <vfprintf+0x120>
    2706:	89 2f       	mov	r24, r25
    2708:	80 53       	subi	r24, 0x30	; 48
    270a:	8a 30       	cpi	r24, 0x0A	; 10
    270c:	70 f4       	brcc	.+28     	; 0x272a <vfprintf+0xf2>
    270e:	f6 fe       	sbrs	r15, 6
    2710:	05 c0       	rjmp	.+10     	; 0x271c <vfprintf+0xe4>
    2712:	98 9c       	mul	r9, r8
    2714:	90 2c       	mov	r9, r0
    2716:	11 24       	eor	r1, r1
    2718:	98 0e       	add	r9, r24
    271a:	15 c0       	rjmp	.+42     	; 0x2746 <vfprintf+0x10e>
    271c:	e8 9c       	mul	r14, r8
    271e:	e0 2c       	mov	r14, r0
    2720:	11 24       	eor	r1, r1
    2722:	e8 0e       	add	r14, r24
    2724:	f0 e2       	ldi	r31, 0x20	; 32
    2726:	ff 2a       	or	r15, r31
    2728:	0e c0       	rjmp	.+28     	; 0x2746 <vfprintf+0x10e>
    272a:	9e 32       	cpi	r25, 0x2E	; 46
    272c:	29 f4       	brne	.+10     	; 0x2738 <vfprintf+0x100>
    272e:	f6 fc       	sbrc	r15, 6
    2730:	5f c1       	rjmp	.+702    	; 0x29f0 <vfprintf+0x3b8>
    2732:	40 e4       	ldi	r20, 0x40	; 64
    2734:	f4 2a       	or	r15, r20
    2736:	07 c0       	rjmp	.+14     	; 0x2746 <vfprintf+0x10e>
    2738:	9c 36       	cpi	r25, 0x6C	; 108
    273a:	19 f4       	brne	.+6      	; 0x2742 <vfprintf+0x10a>
    273c:	50 e8       	ldi	r21, 0x80	; 128
    273e:	f5 2a       	or	r15, r21
    2740:	02 c0       	rjmp	.+4      	; 0x2746 <vfprintf+0x10e>
    2742:	98 36       	cpi	r25, 0x68	; 104
    2744:	49 f4       	brne	.+18     	; 0x2758 <vfprintf+0x120>
    2746:	f2 01       	movw	r30, r4
    2748:	23 fd       	sbrc	r18, 3
    274a:	95 91       	lpm	r25, Z+
    274c:	23 ff       	sbrs	r18, 3
    274e:	91 91       	ld	r25, Z+
    2750:	2f 01       	movw	r4, r30
    2752:	99 23       	and	r25, r25
    2754:	09 f0       	breq	.+2      	; 0x2758 <vfprintf+0x120>
    2756:	b8 cf       	rjmp	.-144    	; 0x26c8 <vfprintf+0x90>
    2758:	89 2f       	mov	r24, r25
    275a:	85 54       	subi	r24, 0x45	; 69
    275c:	83 30       	cpi	r24, 0x03	; 3
    275e:	18 f0       	brcs	.+6      	; 0x2766 <vfprintf+0x12e>
    2760:	80 52       	subi	r24, 0x20	; 32
    2762:	83 30       	cpi	r24, 0x03	; 3
    2764:	38 f4       	brcc	.+14     	; 0x2774 <vfprintf+0x13c>
    2766:	44 e0       	ldi	r20, 0x04	; 4
    2768:	50 e0       	ldi	r21, 0x00	; 0
    276a:	a4 0e       	add	r10, r20
    276c:	b5 1e       	adc	r11, r21
    276e:	5f e3       	ldi	r21, 0x3F	; 63
    2770:	59 83       	std	Y+1, r21	; 0x01
    2772:	0f c0       	rjmp	.+30     	; 0x2792 <vfprintf+0x15a>
    2774:	93 36       	cpi	r25, 0x63	; 99
    2776:	31 f0       	breq	.+12     	; 0x2784 <vfprintf+0x14c>
    2778:	93 37       	cpi	r25, 0x73	; 115
    277a:	79 f0       	breq	.+30     	; 0x279a <vfprintf+0x162>
    277c:	93 35       	cpi	r25, 0x53	; 83
    277e:	09 f0       	breq	.+2      	; 0x2782 <vfprintf+0x14a>
    2780:	52 c0       	rjmp	.+164    	; 0x2826 <vfprintf+0x1ee>
    2782:	1f c0       	rjmp	.+62     	; 0x27c2 <vfprintf+0x18a>
    2784:	f5 01       	movw	r30, r10
    2786:	80 81       	ld	r24, Z
    2788:	89 83       	std	Y+1, r24	; 0x01
    278a:	42 e0       	ldi	r20, 0x02	; 2
    278c:	50 e0       	ldi	r21, 0x00	; 0
    278e:	a4 0e       	add	r10, r20
    2790:	b5 1e       	adc	r11, r21
    2792:	61 01       	movw	r12, r2
    2794:	01 e0       	ldi	r16, 0x01	; 1
    2796:	10 e0       	ldi	r17, 0x00	; 0
    2798:	11 c0       	rjmp	.+34     	; 0x27bc <vfprintf+0x184>
    279a:	f5 01       	movw	r30, r10
    279c:	c0 80       	ld	r12, Z
    279e:	d1 80       	ldd	r13, Z+1	; 0x01
    27a0:	f6 fc       	sbrc	r15, 6
    27a2:	03 c0       	rjmp	.+6      	; 0x27aa <vfprintf+0x172>
    27a4:	6f ef       	ldi	r22, 0xFF	; 255
    27a6:	7f ef       	ldi	r23, 0xFF	; 255
    27a8:	02 c0       	rjmp	.+4      	; 0x27ae <vfprintf+0x176>
    27aa:	69 2d       	mov	r22, r9
    27ac:	70 e0       	ldi	r23, 0x00	; 0
    27ae:	42 e0       	ldi	r20, 0x02	; 2
    27b0:	50 e0       	ldi	r21, 0x00	; 0
    27b2:	a4 0e       	add	r10, r20
    27b4:	b5 1e       	adc	r11, r21
    27b6:	c6 01       	movw	r24, r12
    27b8:	43 d1       	rcall	.+646    	; 0x2a40 <strnlen>
    27ba:	8c 01       	movw	r16, r24
    27bc:	5f e7       	ldi	r21, 0x7F	; 127
    27be:	f5 22       	and	r15, r21
    27c0:	13 c0       	rjmp	.+38     	; 0x27e8 <vfprintf+0x1b0>
    27c2:	f5 01       	movw	r30, r10
    27c4:	c0 80       	ld	r12, Z
    27c6:	d1 80       	ldd	r13, Z+1	; 0x01
    27c8:	f6 fc       	sbrc	r15, 6
    27ca:	03 c0       	rjmp	.+6      	; 0x27d2 <vfprintf+0x19a>
    27cc:	6f ef       	ldi	r22, 0xFF	; 255
    27ce:	7f ef       	ldi	r23, 0xFF	; 255
    27d0:	02 c0       	rjmp	.+4      	; 0x27d6 <vfprintf+0x19e>
    27d2:	69 2d       	mov	r22, r9
    27d4:	70 e0       	ldi	r23, 0x00	; 0
    27d6:	42 e0       	ldi	r20, 0x02	; 2
    27d8:	50 e0       	ldi	r21, 0x00	; 0
    27da:	a4 0e       	add	r10, r20
    27dc:	b5 1e       	adc	r11, r21
    27de:	c6 01       	movw	r24, r12
    27e0:	24 d1       	rcall	.+584    	; 0x2a2a <strnlen_P>
    27e2:	8c 01       	movw	r16, r24
    27e4:	50 e8       	ldi	r21, 0x80	; 128
    27e6:	f5 2a       	or	r15, r21
    27e8:	f3 fe       	sbrs	r15, 3
    27ea:	06 c0       	rjmp	.+12     	; 0x27f8 <vfprintf+0x1c0>
    27ec:	18 c0       	rjmp	.+48     	; 0x281e <vfprintf+0x1e6>
    27ee:	80 e2       	ldi	r24, 0x20	; 32
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	b3 01       	movw	r22, r6
    27f4:	30 d1       	rcall	.+608    	; 0x2a56 <fputc>
    27f6:	ea 94       	dec	r14
    27f8:	8e 2d       	mov	r24, r14
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	08 17       	cp	r16, r24
    27fe:	19 07       	cpc	r17, r25
    2800:	b0 f3       	brcs	.-20     	; 0x27ee <vfprintf+0x1b6>
    2802:	0d c0       	rjmp	.+26     	; 0x281e <vfprintf+0x1e6>
    2804:	f6 01       	movw	r30, r12
    2806:	f7 fc       	sbrc	r15, 7
    2808:	85 91       	lpm	r24, Z+
    280a:	f7 fe       	sbrs	r15, 7
    280c:	81 91       	ld	r24, Z+
    280e:	6f 01       	movw	r12, r30
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	b3 01       	movw	r22, r6
    2814:	20 d1       	rcall	.+576    	; 0x2a56 <fputc>
    2816:	e1 10       	cpse	r14, r1
    2818:	ea 94       	dec	r14
    281a:	01 50       	subi	r16, 0x01	; 1
    281c:	10 40       	sbci	r17, 0x00	; 0
    281e:	01 15       	cp	r16, r1
    2820:	11 05       	cpc	r17, r1
    2822:	81 f7       	brne	.-32     	; 0x2804 <vfprintf+0x1cc>
    2824:	e2 c0       	rjmp	.+452    	; 0x29ea <vfprintf+0x3b2>
    2826:	94 36       	cpi	r25, 0x64	; 100
    2828:	11 f0       	breq	.+4      	; 0x282e <vfprintf+0x1f6>
    282a:	99 36       	cpi	r25, 0x69	; 105
    282c:	61 f5       	brne	.+88     	; 0x2886 <vfprintf+0x24e>
    282e:	f7 fe       	sbrs	r15, 7
    2830:	08 c0       	rjmp	.+16     	; 0x2842 <vfprintf+0x20a>
    2832:	f5 01       	movw	r30, r10
    2834:	20 81       	ld	r18, Z
    2836:	31 81       	ldd	r19, Z+1	; 0x01
    2838:	42 81       	ldd	r20, Z+2	; 0x02
    283a:	53 81       	ldd	r21, Z+3	; 0x03
    283c:	84 e0       	ldi	r24, 0x04	; 4
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	0a c0       	rjmp	.+20     	; 0x2856 <vfprintf+0x21e>
    2842:	f5 01       	movw	r30, r10
    2844:	80 81       	ld	r24, Z
    2846:	91 81       	ldd	r25, Z+1	; 0x01
    2848:	9c 01       	movw	r18, r24
    284a:	44 27       	eor	r20, r20
    284c:	37 fd       	sbrc	r19, 7
    284e:	40 95       	com	r20
    2850:	54 2f       	mov	r21, r20
    2852:	82 e0       	ldi	r24, 0x02	; 2
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	a8 0e       	add	r10, r24
    2858:	b9 1e       	adc	r11, r25
    285a:	9f e6       	ldi	r25, 0x6F	; 111
    285c:	f9 22       	and	r15, r25
    285e:	57 ff       	sbrs	r21, 7
    2860:	09 c0       	rjmp	.+18     	; 0x2874 <vfprintf+0x23c>
    2862:	50 95       	com	r21
    2864:	40 95       	com	r20
    2866:	30 95       	com	r19
    2868:	21 95       	neg	r18
    286a:	3f 4f       	sbci	r19, 0xFF	; 255
    286c:	4f 4f       	sbci	r20, 0xFF	; 255
    286e:	5f 4f       	sbci	r21, 0xFF	; 255
    2870:	e0 e8       	ldi	r30, 0x80	; 128
    2872:	fe 2a       	or	r15, r30
    2874:	ca 01       	movw	r24, r20
    2876:	b9 01       	movw	r22, r18
    2878:	a1 01       	movw	r20, r2
    287a:	2a e0       	ldi	r18, 0x0A	; 10
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	17 d1       	rcall	.+558    	; 0x2aae <__ultoa_invert>
    2880:	d8 2e       	mov	r13, r24
    2882:	d2 18       	sub	r13, r2
    2884:	3f c0       	rjmp	.+126    	; 0x2904 <vfprintf+0x2cc>
    2886:	95 37       	cpi	r25, 0x75	; 117
    2888:	29 f4       	brne	.+10     	; 0x2894 <vfprintf+0x25c>
    288a:	1f 2d       	mov	r17, r15
    288c:	1f 7e       	andi	r17, 0xEF	; 239
    288e:	2a e0       	ldi	r18, 0x0A	; 10
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	1d c0       	rjmp	.+58     	; 0x28ce <vfprintf+0x296>
    2894:	1f 2d       	mov	r17, r15
    2896:	19 7f       	andi	r17, 0xF9	; 249
    2898:	9f 36       	cpi	r25, 0x6F	; 111
    289a:	61 f0       	breq	.+24     	; 0x28b4 <vfprintf+0x27c>
    289c:	90 37       	cpi	r25, 0x70	; 112
    289e:	20 f4       	brcc	.+8      	; 0x28a8 <vfprintf+0x270>
    28a0:	98 35       	cpi	r25, 0x58	; 88
    28a2:	09 f0       	breq	.+2      	; 0x28a6 <vfprintf+0x26e>
    28a4:	a5 c0       	rjmp	.+330    	; 0x29f0 <vfprintf+0x3b8>
    28a6:	0f c0       	rjmp	.+30     	; 0x28c6 <vfprintf+0x28e>
    28a8:	90 37       	cpi	r25, 0x70	; 112
    28aa:	39 f0       	breq	.+14     	; 0x28ba <vfprintf+0x282>
    28ac:	98 37       	cpi	r25, 0x78	; 120
    28ae:	09 f0       	breq	.+2      	; 0x28b2 <vfprintf+0x27a>
    28b0:	9f c0       	rjmp	.+318    	; 0x29f0 <vfprintf+0x3b8>
    28b2:	04 c0       	rjmp	.+8      	; 0x28bc <vfprintf+0x284>
    28b4:	28 e0       	ldi	r18, 0x08	; 8
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	0a c0       	rjmp	.+20     	; 0x28ce <vfprintf+0x296>
    28ba:	10 61       	ori	r17, 0x10	; 16
    28bc:	14 fd       	sbrc	r17, 4
    28be:	14 60       	ori	r17, 0x04	; 4
    28c0:	20 e1       	ldi	r18, 0x10	; 16
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	04 c0       	rjmp	.+8      	; 0x28ce <vfprintf+0x296>
    28c6:	14 fd       	sbrc	r17, 4
    28c8:	16 60       	ori	r17, 0x06	; 6
    28ca:	20 e1       	ldi	r18, 0x10	; 16
    28cc:	32 e0       	ldi	r19, 0x02	; 2
    28ce:	17 ff       	sbrs	r17, 7
    28d0:	08 c0       	rjmp	.+16     	; 0x28e2 <vfprintf+0x2aa>
    28d2:	f5 01       	movw	r30, r10
    28d4:	60 81       	ld	r22, Z
    28d6:	71 81       	ldd	r23, Z+1	; 0x01
    28d8:	82 81       	ldd	r24, Z+2	; 0x02
    28da:	93 81       	ldd	r25, Z+3	; 0x03
    28dc:	44 e0       	ldi	r20, 0x04	; 4
    28de:	50 e0       	ldi	r21, 0x00	; 0
    28e0:	08 c0       	rjmp	.+16     	; 0x28f2 <vfprintf+0x2ba>
    28e2:	f5 01       	movw	r30, r10
    28e4:	80 81       	ld	r24, Z
    28e6:	91 81       	ldd	r25, Z+1	; 0x01
    28e8:	bc 01       	movw	r22, r24
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	42 e0       	ldi	r20, 0x02	; 2
    28f0:	50 e0       	ldi	r21, 0x00	; 0
    28f2:	a4 0e       	add	r10, r20
    28f4:	b5 1e       	adc	r11, r21
    28f6:	a1 01       	movw	r20, r2
    28f8:	da d0       	rcall	.+436    	; 0x2aae <__ultoa_invert>
    28fa:	d8 2e       	mov	r13, r24
    28fc:	d2 18       	sub	r13, r2
    28fe:	8f e7       	ldi	r24, 0x7F	; 127
    2900:	f8 2e       	mov	r15, r24
    2902:	f1 22       	and	r15, r17
    2904:	f6 fe       	sbrs	r15, 6
    2906:	0b c0       	rjmp	.+22     	; 0x291e <vfprintf+0x2e6>
    2908:	5e ef       	ldi	r21, 0xFE	; 254
    290a:	f5 22       	and	r15, r21
    290c:	d9 14       	cp	r13, r9
    290e:	38 f4       	brcc	.+14     	; 0x291e <vfprintf+0x2e6>
    2910:	f4 fe       	sbrs	r15, 4
    2912:	07 c0       	rjmp	.+14     	; 0x2922 <vfprintf+0x2ea>
    2914:	f2 fc       	sbrc	r15, 2
    2916:	05 c0       	rjmp	.+10     	; 0x2922 <vfprintf+0x2ea>
    2918:	8f ee       	ldi	r24, 0xEF	; 239
    291a:	f8 22       	and	r15, r24
    291c:	02 c0       	rjmp	.+4      	; 0x2922 <vfprintf+0x2ea>
    291e:	1d 2d       	mov	r17, r13
    2920:	01 c0       	rjmp	.+2      	; 0x2924 <vfprintf+0x2ec>
    2922:	19 2d       	mov	r17, r9
    2924:	f4 fe       	sbrs	r15, 4
    2926:	0d c0       	rjmp	.+26     	; 0x2942 <vfprintf+0x30a>
    2928:	fe 01       	movw	r30, r28
    292a:	ed 0d       	add	r30, r13
    292c:	f1 1d       	adc	r31, r1
    292e:	80 81       	ld	r24, Z
    2930:	80 33       	cpi	r24, 0x30	; 48
    2932:	19 f4       	brne	.+6      	; 0x293a <vfprintf+0x302>
    2934:	99 ee       	ldi	r25, 0xE9	; 233
    2936:	f9 22       	and	r15, r25
    2938:	08 c0       	rjmp	.+16     	; 0x294a <vfprintf+0x312>
    293a:	1f 5f       	subi	r17, 0xFF	; 255
    293c:	f2 fe       	sbrs	r15, 2
    293e:	05 c0       	rjmp	.+10     	; 0x294a <vfprintf+0x312>
    2940:	03 c0       	rjmp	.+6      	; 0x2948 <vfprintf+0x310>
    2942:	8f 2d       	mov	r24, r15
    2944:	86 78       	andi	r24, 0x86	; 134
    2946:	09 f0       	breq	.+2      	; 0x294a <vfprintf+0x312>
    2948:	1f 5f       	subi	r17, 0xFF	; 255
    294a:	0f 2d       	mov	r16, r15
    294c:	f3 fc       	sbrc	r15, 3
    294e:	13 c0       	rjmp	.+38     	; 0x2976 <vfprintf+0x33e>
    2950:	f0 fe       	sbrs	r15, 0
    2952:	0e c0       	rjmp	.+28     	; 0x2970 <vfprintf+0x338>
    2954:	1e 15       	cp	r17, r14
    2956:	10 f0       	brcs	.+4      	; 0x295c <vfprintf+0x324>
    2958:	9d 2c       	mov	r9, r13
    295a:	0a c0       	rjmp	.+20     	; 0x2970 <vfprintf+0x338>
    295c:	9d 2c       	mov	r9, r13
    295e:	9e 0c       	add	r9, r14
    2960:	91 1a       	sub	r9, r17
    2962:	1e 2d       	mov	r17, r14
    2964:	05 c0       	rjmp	.+10     	; 0x2970 <vfprintf+0x338>
    2966:	80 e2       	ldi	r24, 0x20	; 32
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	b3 01       	movw	r22, r6
    296c:	74 d0       	rcall	.+232    	; 0x2a56 <fputc>
    296e:	1f 5f       	subi	r17, 0xFF	; 255
    2970:	1e 15       	cp	r17, r14
    2972:	c8 f3       	brcs	.-14     	; 0x2966 <vfprintf+0x32e>
    2974:	04 c0       	rjmp	.+8      	; 0x297e <vfprintf+0x346>
    2976:	1e 15       	cp	r17, r14
    2978:	10 f4       	brcc	.+4      	; 0x297e <vfprintf+0x346>
    297a:	e1 1a       	sub	r14, r17
    297c:	01 c0       	rjmp	.+2      	; 0x2980 <vfprintf+0x348>
    297e:	ee 24       	eor	r14, r14
    2980:	04 ff       	sbrs	r16, 4
    2982:	0e c0       	rjmp	.+28     	; 0x29a0 <vfprintf+0x368>
    2984:	80 e3       	ldi	r24, 0x30	; 48
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	b3 01       	movw	r22, r6
    298a:	65 d0       	rcall	.+202    	; 0x2a56 <fputc>
    298c:	02 ff       	sbrs	r16, 2
    298e:	1b c0       	rjmp	.+54     	; 0x29c6 <vfprintf+0x38e>
    2990:	01 fd       	sbrc	r16, 1
    2992:	03 c0       	rjmp	.+6      	; 0x299a <vfprintf+0x362>
    2994:	88 e7       	ldi	r24, 0x78	; 120
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	0e c0       	rjmp	.+28     	; 0x29b6 <vfprintf+0x37e>
    299a:	88 e5       	ldi	r24, 0x58	; 88
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	0b c0       	rjmp	.+22     	; 0x29b6 <vfprintf+0x37e>
    29a0:	80 2f       	mov	r24, r16
    29a2:	86 78       	andi	r24, 0x86	; 134
    29a4:	81 f0       	breq	.+32     	; 0x29c6 <vfprintf+0x38e>
    29a6:	01 ff       	sbrs	r16, 1
    29a8:	02 c0       	rjmp	.+4      	; 0x29ae <vfprintf+0x376>
    29aa:	8b e2       	ldi	r24, 0x2B	; 43
    29ac:	01 c0       	rjmp	.+2      	; 0x29b0 <vfprintf+0x378>
    29ae:	80 e2       	ldi	r24, 0x20	; 32
    29b0:	f7 fc       	sbrc	r15, 7
    29b2:	8d e2       	ldi	r24, 0x2D	; 45
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	b3 01       	movw	r22, r6
    29b8:	4e d0       	rcall	.+156    	; 0x2a56 <fputc>
    29ba:	05 c0       	rjmp	.+10     	; 0x29c6 <vfprintf+0x38e>
    29bc:	80 e3       	ldi	r24, 0x30	; 48
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	b3 01       	movw	r22, r6
    29c2:	49 d0       	rcall	.+146    	; 0x2a56 <fputc>
    29c4:	9a 94       	dec	r9
    29c6:	d9 14       	cp	r13, r9
    29c8:	c8 f3       	brcs	.-14     	; 0x29bc <vfprintf+0x384>
    29ca:	da 94       	dec	r13
    29cc:	f1 01       	movw	r30, r2
    29ce:	ed 0d       	add	r30, r13
    29d0:	f1 1d       	adc	r31, r1
    29d2:	80 81       	ld	r24, Z
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	b3 01       	movw	r22, r6
    29d8:	3e d0       	rcall	.+124    	; 0x2a56 <fputc>
    29da:	dd 20       	and	r13, r13
    29dc:	b1 f7       	brne	.-20     	; 0x29ca <vfprintf+0x392>
    29de:	05 c0       	rjmp	.+10     	; 0x29ea <vfprintf+0x3b2>
    29e0:	80 e2       	ldi	r24, 0x20	; 32
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	b3 01       	movw	r22, r6
    29e6:	37 d0       	rcall	.+110    	; 0x2a56 <fputc>
    29e8:	ea 94       	dec	r14
    29ea:	ee 20       	and	r14, r14
    29ec:	c9 f7       	brne	.-14     	; 0x29e0 <vfprintf+0x3a8>
    29ee:	50 ce       	rjmp	.-864    	; 0x2690 <vfprintf+0x58>
    29f0:	f3 01       	movw	r30, r6
    29f2:	66 81       	ldd	r22, Z+6	; 0x06
    29f4:	77 81       	ldd	r23, Z+7	; 0x07
    29f6:	cb 01       	movw	r24, r22
    29f8:	2b 96       	adiw	r28, 0x0b	; 11
    29fa:	0f b6       	in	r0, 0x3f	; 63
    29fc:	f8 94       	cli
    29fe:	de bf       	out	0x3e, r29	; 62
    2a00:	0f be       	out	0x3f, r0	; 63
    2a02:	cd bf       	out	0x3d, r28	; 61
    2a04:	cf 91       	pop	r28
    2a06:	df 91       	pop	r29
    2a08:	1f 91       	pop	r17
    2a0a:	0f 91       	pop	r16
    2a0c:	ff 90       	pop	r15
    2a0e:	ef 90       	pop	r14
    2a10:	df 90       	pop	r13
    2a12:	cf 90       	pop	r12
    2a14:	bf 90       	pop	r11
    2a16:	af 90       	pop	r10
    2a18:	9f 90       	pop	r9
    2a1a:	8f 90       	pop	r8
    2a1c:	7f 90       	pop	r7
    2a1e:	6f 90       	pop	r6
    2a20:	5f 90       	pop	r5
    2a22:	4f 90       	pop	r4
    2a24:	3f 90       	pop	r3
    2a26:	2f 90       	pop	r2
    2a28:	08 95       	ret

00002a2a <strnlen_P>:
    2a2a:	fc 01       	movw	r30, r24
    2a2c:	05 90       	lpm	r0, Z+
    2a2e:	61 50       	subi	r22, 0x01	; 1
    2a30:	70 40       	sbci	r23, 0x00	; 0
    2a32:	01 10       	cpse	r0, r1
    2a34:	d8 f7       	brcc	.-10     	; 0x2a2c <strnlen_P+0x2>
    2a36:	80 95       	com	r24
    2a38:	90 95       	com	r25
    2a3a:	8e 0f       	add	r24, r30
    2a3c:	9f 1f       	adc	r25, r31
    2a3e:	08 95       	ret

00002a40 <strnlen>:
    2a40:	fc 01       	movw	r30, r24
    2a42:	61 50       	subi	r22, 0x01	; 1
    2a44:	70 40       	sbci	r23, 0x00	; 0
    2a46:	01 90       	ld	r0, Z+
    2a48:	01 10       	cpse	r0, r1
    2a4a:	d8 f7       	brcc	.-10     	; 0x2a42 <strnlen+0x2>
    2a4c:	80 95       	com	r24
    2a4e:	90 95       	com	r25
    2a50:	8e 0f       	add	r24, r30
    2a52:	9f 1f       	adc	r25, r31
    2a54:	08 95       	ret

00002a56 <fputc>:
    2a56:	0f 93       	push	r16
    2a58:	1f 93       	push	r17
    2a5a:	cf 93       	push	r28
    2a5c:	df 93       	push	r29
    2a5e:	8c 01       	movw	r16, r24
    2a60:	eb 01       	movw	r28, r22
    2a62:	8b 81       	ldd	r24, Y+3	; 0x03
    2a64:	81 ff       	sbrs	r24, 1
    2a66:	1b c0       	rjmp	.+54     	; 0x2a9e <fputc+0x48>
    2a68:	82 ff       	sbrs	r24, 2
    2a6a:	0d c0       	rjmp	.+26     	; 0x2a86 <fputc+0x30>
    2a6c:	2e 81       	ldd	r18, Y+6	; 0x06
    2a6e:	3f 81       	ldd	r19, Y+7	; 0x07
    2a70:	8c 81       	ldd	r24, Y+4	; 0x04
    2a72:	9d 81       	ldd	r25, Y+5	; 0x05
    2a74:	28 17       	cp	r18, r24
    2a76:	39 07       	cpc	r19, r25
    2a78:	64 f4       	brge	.+24     	; 0x2a92 <fputc+0x3c>
    2a7a:	e8 81       	ld	r30, Y
    2a7c:	f9 81       	ldd	r31, Y+1	; 0x01
    2a7e:	01 93       	st	Z+, r16
    2a80:	f9 83       	std	Y+1, r31	; 0x01
    2a82:	e8 83       	st	Y, r30
    2a84:	06 c0       	rjmp	.+12     	; 0x2a92 <fputc+0x3c>
    2a86:	e8 85       	ldd	r30, Y+8	; 0x08
    2a88:	f9 85       	ldd	r31, Y+9	; 0x09
    2a8a:	80 2f       	mov	r24, r16
    2a8c:	09 95       	icall
    2a8e:	89 2b       	or	r24, r25
    2a90:	31 f4       	brne	.+12     	; 0x2a9e <fputc+0x48>
    2a92:	8e 81       	ldd	r24, Y+6	; 0x06
    2a94:	9f 81       	ldd	r25, Y+7	; 0x07
    2a96:	01 96       	adiw	r24, 0x01	; 1
    2a98:	9f 83       	std	Y+7, r25	; 0x07
    2a9a:	8e 83       	std	Y+6, r24	; 0x06
    2a9c:	02 c0       	rjmp	.+4      	; 0x2aa2 <fputc+0x4c>
    2a9e:	0f ef       	ldi	r16, 0xFF	; 255
    2aa0:	1f ef       	ldi	r17, 0xFF	; 255
    2aa2:	c8 01       	movw	r24, r16
    2aa4:	df 91       	pop	r29
    2aa6:	cf 91       	pop	r28
    2aa8:	1f 91       	pop	r17
    2aaa:	0f 91       	pop	r16
    2aac:	08 95       	ret

00002aae <__ultoa_invert>:
    2aae:	fa 01       	movw	r30, r20
    2ab0:	aa 27       	eor	r26, r26
    2ab2:	28 30       	cpi	r18, 0x08	; 8
    2ab4:	51 f1       	breq	.+84     	; 0x2b0a <__ultoa_invert+0x5c>
    2ab6:	20 31       	cpi	r18, 0x10	; 16
    2ab8:	81 f1       	breq	.+96     	; 0x2b1a <__ultoa_invert+0x6c>
    2aba:	e8 94       	clt
    2abc:	6f 93       	push	r22
    2abe:	6e 7f       	andi	r22, 0xFE	; 254
    2ac0:	6e 5f       	subi	r22, 0xFE	; 254
    2ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ac4:	8f 4f       	sbci	r24, 0xFF	; 255
    2ac6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ac8:	af 4f       	sbci	r26, 0xFF	; 255
    2aca:	b1 e0       	ldi	r27, 0x01	; 1
    2acc:	3e d0       	rcall	.+124    	; 0x2b4a <__ultoa_invert+0x9c>
    2ace:	b4 e0       	ldi	r27, 0x04	; 4
    2ad0:	3c d0       	rcall	.+120    	; 0x2b4a <__ultoa_invert+0x9c>
    2ad2:	67 0f       	add	r22, r23
    2ad4:	78 1f       	adc	r23, r24
    2ad6:	89 1f       	adc	r24, r25
    2ad8:	9a 1f       	adc	r25, r26
    2ada:	a1 1d       	adc	r26, r1
    2adc:	68 0f       	add	r22, r24
    2ade:	79 1f       	adc	r23, r25
    2ae0:	8a 1f       	adc	r24, r26
    2ae2:	91 1d       	adc	r25, r1
    2ae4:	a1 1d       	adc	r26, r1
    2ae6:	6a 0f       	add	r22, r26
    2ae8:	71 1d       	adc	r23, r1
    2aea:	81 1d       	adc	r24, r1
    2aec:	91 1d       	adc	r25, r1
    2aee:	a1 1d       	adc	r26, r1
    2af0:	20 d0       	rcall	.+64     	; 0x2b32 <__ultoa_invert+0x84>
    2af2:	09 f4       	brne	.+2      	; 0x2af6 <__ultoa_invert+0x48>
    2af4:	68 94       	set
    2af6:	3f 91       	pop	r19
    2af8:	2a e0       	ldi	r18, 0x0A	; 10
    2afa:	26 9f       	mul	r18, r22
    2afc:	11 24       	eor	r1, r1
    2afe:	30 19       	sub	r19, r0
    2b00:	30 5d       	subi	r19, 0xD0	; 208
    2b02:	31 93       	st	Z+, r19
    2b04:	de f6       	brtc	.-74     	; 0x2abc <__ultoa_invert+0xe>
    2b06:	cf 01       	movw	r24, r30
    2b08:	08 95       	ret
    2b0a:	46 2f       	mov	r20, r22
    2b0c:	47 70       	andi	r20, 0x07	; 7
    2b0e:	40 5d       	subi	r20, 0xD0	; 208
    2b10:	41 93       	st	Z+, r20
    2b12:	b3 e0       	ldi	r27, 0x03	; 3
    2b14:	0f d0       	rcall	.+30     	; 0x2b34 <__ultoa_invert+0x86>
    2b16:	c9 f7       	brne	.-14     	; 0x2b0a <__ultoa_invert+0x5c>
    2b18:	f6 cf       	rjmp	.-20     	; 0x2b06 <__ultoa_invert+0x58>
    2b1a:	46 2f       	mov	r20, r22
    2b1c:	4f 70       	andi	r20, 0x0F	; 15
    2b1e:	40 5d       	subi	r20, 0xD0	; 208
    2b20:	4a 33       	cpi	r20, 0x3A	; 58
    2b22:	18 f0       	brcs	.+6      	; 0x2b2a <__ultoa_invert+0x7c>
    2b24:	49 5d       	subi	r20, 0xD9	; 217
    2b26:	31 fd       	sbrc	r19, 1
    2b28:	40 52       	subi	r20, 0x20	; 32
    2b2a:	41 93       	st	Z+, r20
    2b2c:	02 d0       	rcall	.+4      	; 0x2b32 <__ultoa_invert+0x84>
    2b2e:	a9 f7       	brne	.-22     	; 0x2b1a <__ultoa_invert+0x6c>
    2b30:	ea cf       	rjmp	.-44     	; 0x2b06 <__ultoa_invert+0x58>
    2b32:	b4 e0       	ldi	r27, 0x04	; 4
    2b34:	a6 95       	lsr	r26
    2b36:	97 95       	ror	r25
    2b38:	87 95       	ror	r24
    2b3a:	77 95       	ror	r23
    2b3c:	67 95       	ror	r22
    2b3e:	ba 95       	dec	r27
    2b40:	c9 f7       	brne	.-14     	; 0x2b34 <__ultoa_invert+0x86>
    2b42:	00 97       	sbiw	r24, 0x00	; 0
    2b44:	61 05       	cpc	r22, r1
    2b46:	71 05       	cpc	r23, r1
    2b48:	08 95       	ret
    2b4a:	9b 01       	movw	r18, r22
    2b4c:	ac 01       	movw	r20, r24
    2b4e:	0a 2e       	mov	r0, r26
    2b50:	06 94       	lsr	r0
    2b52:	57 95       	ror	r21
    2b54:	47 95       	ror	r20
    2b56:	37 95       	ror	r19
    2b58:	27 95       	ror	r18
    2b5a:	ba 95       	dec	r27
    2b5c:	c9 f7       	brne	.-14     	; 0x2b50 <__ultoa_invert+0xa2>
    2b5e:	62 0f       	add	r22, r18
    2b60:	73 1f       	adc	r23, r19
    2b62:	84 1f       	adc	r24, r20
    2b64:	95 1f       	adc	r25, r21
    2b66:	a0 1d       	adc	r26, r0
    2b68:	08 95       	ret

00002b6a <_exit>:
    2b6a:	f8 94       	cli

00002b6c <__stop_program>:
    2b6c:	ff cf       	rjmp	.-2      	; 0x2b6c <__stop_program>
