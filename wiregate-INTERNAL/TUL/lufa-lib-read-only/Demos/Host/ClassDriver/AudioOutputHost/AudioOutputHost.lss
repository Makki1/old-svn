
AudioOutputHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00001a4c  00001ae0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  0080011e  0080011e  00001afe  2**0
                  ALLOC
  3 .stab         00002208  00000000  00000000  00001b00  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dff  00000000  00000000  00003d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000006c8  00000000  00000000  00004b07  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000f89  00000000  00000000  000051cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000b968  00000000  00000000  00006158  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000028ae  00000000  00000000  00011ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007ea8  00000000  00000000  0001436e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b10  00000000  00000000  0001c218  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004797  00000000  00000000  0001cd28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000056b2  00000000  00000000  000214bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007b0  00000000  00000000  00026b71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		Pipe_DisablePipe();
	}
}

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
       0:	2e c1       	rjmp	.+604    	; 0x25e <__ctors_end>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       2:	00 00       	nop

	return USB_Host_SendControlRequest(FeatureStatus);
}

uint8_t USB_Host_ClearPipeStall(const uint8_t EndpointAddress)
{
       4:	4a c1       	rjmp	.+660    	; 0x29a <__bad_interrupt>

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       6:	00 00       	nop
       8:	48 c1       	rjmp	.+656    	; 0x29a <__bad_interrupt>
       a:	00 00       	nop
       c:	46 c1       	rjmp	.+652    	; 0x29a <__bad_interrupt>
       e:	00 00       	nop
      10:	44 c1       	rjmp	.+648    	; 0x29a <__bad_interrupt>
      12:	00 00       	nop
      14:	42 c1       	rjmp	.+644    	; 0x29a <__bad_interrupt>
      16:	00 00       	nop
      18:	40 c1       	rjmp	.+640    	; 0x29a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3e c1       	rjmp	.+636    	; 0x29a <__bad_interrupt>
      1e:	00 00       	nop
      20:	3c c1       	rjmp	.+632    	; 0x29a <__bad_interrupt>
      22:	00 00       	nop
      24:	3a c1       	rjmp	.+628    	; 0x29a <__bad_interrupt>
      26:	00 00       	nop
      28:	ed c5       	rjmp	.+3034   	; 0xc04 <__vector_10>
      2a:	00 00       	nop
      2c:	36 c1       	rjmp	.+620    	; 0x29a <__bad_interrupt>
      2e:	00 00       	nop
      30:	34 c1       	rjmp	.+616    	; 0x29a <__bad_interrupt>
      32:	00 00       	nop
      34:	32 c1       	rjmp	.+612    	; 0x29a <__bad_interrupt>
      36:	00 00       	nop
      38:	30 c1       	rjmp	.+608    	; 0x29a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2e c1       	rjmp	.+604    	; 0x29a <__bad_interrupt>
      3e:	00 00       	nop
      40:	2c c1       	rjmp	.+600    	; 0x29a <__bad_interrupt>
      42:	00 00       	nop
      44:	2a c1       	rjmp	.+596    	; 0x29a <__bad_interrupt>
      46:	00 00       	nop
      48:	28 c1       	rjmp	.+592    	; 0x29a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	26 c1       	rjmp	.+588    	; 0x29a <__bad_interrupt>
      4e:	00 00       	nop
      50:	24 c1       	rjmp	.+584    	; 0x29a <__bad_interrupt>
      52:	00 00       	nop
      54:	56 c2       	rjmp	.+1196   	; 0x502 <__vector_21>
      56:	00 00       	nop
      58:	20 c1       	rjmp	.+576    	; 0x29a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	1e c1       	rjmp	.+572    	; 0x29a <__bad_interrupt>
      5e:	00 00       	nop
      60:	1c c1       	rjmp	.+568    	; 0x29a <__bad_interrupt>
      62:	00 00       	nop
      64:	1a c1       	rjmp	.+564    	; 0x29a <__bad_interrupt>
      66:	00 00       	nop
      68:	18 c1       	rjmp	.+560    	; 0x29a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	16 c1       	rjmp	.+556    	; 0x29a <__bad_interrupt>
      6e:	00 00       	nop
      70:	14 c1       	rjmp	.+552    	; 0x29a <__bad_interrupt>
      72:	00 00       	nop
      74:	12 c1       	rjmp	.+548    	; 0x29a <__bad_interrupt>
      76:	00 00       	nop
      78:	10 c1       	rjmp	.+544    	; 0x29a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0e c1       	rjmp	.+540    	; 0x29a <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c c1       	rjmp	.+536    	; 0x29a <__bad_interrupt>
      82:	00 00       	nop
      84:	0a c1       	rjmp	.+532    	; 0x29a <__bad_interrupt>
      86:	00 00       	nop
      88:	08 c1       	rjmp	.+528    	; 0x29a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	06 c1       	rjmp	.+524    	; 0x29a <__bad_interrupt>
      8e:	00 00       	nop
      90:	04 c1       	rjmp	.+520    	; 0x29a <__bad_interrupt>
      92:	00 00       	nop
      94:	02 c1       	rjmp	.+516    	; 0x29a <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4705>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4697>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4680>:
     11d:	41 75 64 69 6f 20 44 65 76 69 63 65 20 45 6e 75     Audio Device Enu
     12d:	6d 65 72 61 74 65 64 2e 0d 0a 00                    merated....

00000138 <__c.4678>:
     138:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 41 75     Error Setting Au
     148:	64 69 6f 20 53 61 6d 70 6c 69 6e 67 20 46 72 65     dio Sampling Fre
     158:	71 75 65 6e 63 79 2e 0d 0a 00                       quency....

00000162 <__c.4675>:
     162:	45 72 72 6f 72 20 45 6e 61 62 6c 69 6e 67 20 41     Error Enabling A
     172:	75 64 69 6f 20 53 74 72 65 61 6d 2e 0d 0a 00        udio Stream....

00000181 <__c.4673>:
     181:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     191:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     1a1:	6f 6e 2e 0d 0a 00                                   on....

000001a7 <__c.4671>:
     1a7:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     1b7:	4e 6f 74 20 61 20 56 61 6c 69 64 20 41 75 64 69     Not a Valid Audi
     1c7:	6f 20 4f 75 74 70 75 74 20 44 65 76 69 63 65 2e     o Output Device.
     1d7:	0d 0a 00                                            ...

000001da <__c.4669>:
     1da:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1ea:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1fa:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

00000207 <__c.4662>:
     207:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     217:	68 65 64 2e 0d 0a 00                                hed....

0000021e <__c.4657>:
     21e:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     22e:	0d 0a 00                                            ...

00000231 <__c.4622>:
     231:	1b 5b 33 36 6d 41 75 64 69 6f 20 4f 75 74 70 75     .[36mAudio Outpu
     241:	74 20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e     t Host Demo runn
     251:	69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00 00              ing....[37m..

0000025e <__ctors_end>:
     25e:	11 24       	eor	r1, r1
     260:	1f be       	out	0x3f, r1	; 63
     262:	cf ef       	ldi	r28, 0xFF	; 255
     264:	d0 e2       	ldi	r29, 0x20	; 32
     266:	de bf       	out	0x3e, r29	; 62
     268:	cd bf       	out	0x3d, r28	; 61

0000026a <__do_copy_data>:
     26a:	11 e0       	ldi	r17, 0x01	; 1
     26c:	a0 e0       	ldi	r26, 0x00	; 0
     26e:	b1 e0       	ldi	r27, 0x01	; 1
     270:	ec e4       	ldi	r30, 0x4C	; 76
     272:	fa e1       	ldi	r31, 0x1A	; 26
     274:	00 e0       	ldi	r16, 0x00	; 0
     276:	0b bf       	out	0x3b, r16	; 59
     278:	02 c0       	rjmp	.+4      	; 0x27e <__do_copy_data+0x14>
     27a:	07 90       	elpm	r0, Z+
     27c:	0d 92       	st	X+, r0
     27e:	ae 31       	cpi	r26, 0x1E	; 30
     280:	b1 07       	cpc	r27, r17
     282:	d9 f7       	brne	.-10     	; 0x27a <__do_copy_data+0x10>

00000284 <__do_clear_bss>:
     284:	11 e0       	ldi	r17, 0x01	; 1
     286:	ae e1       	ldi	r26, 0x1E	; 30
     288:	b1 e0       	ldi	r27, 0x01	; 1
     28a:	01 c0       	rjmp	.+2      	; 0x28e <.do_clear_bss_start>

0000028c <.do_clear_bss_loop>:
     28c:	1d 92       	st	X+, r1

0000028e <.do_clear_bss_start>:
     28e:	a3 34       	cpi	r26, 0x43	; 67
     290:	b1 07       	cpc	r27, r17
     292:	e1 f7       	brne	.-8      	; 0x28c <.do_clear_bss_loop>
     294:	c5 d1       	rcall	.+906    	; 0x620 <main>
     296:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <_exit>

0000029a <__bad_interrupt>:
     29a:	b2 ce       	rjmp	.-668    	; 0x0 <__vectors>

0000029c <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     29c:	90 91 2e 01 	lds	r25, 0x012E
     2a0:	2d b7       	in	r18, 0x3d	; 61
     2a2:	3e b7       	in	r19, 0x3e	; 62
     2a4:	28 50       	subi	r18, 0x08	; 8
     2a6:	30 40       	sbci	r19, 0x00	; 0
     2a8:	0f b6       	in	r0, 0x3f	; 63
     2aa:	f8 94       	cli
     2ac:	3e bf       	out	0x3e, r19	; 62
     2ae:	0f be       	out	0x3f, r0	; 63
     2b0:	2d bf       	out	0x3d, r18	; 61
     2b2:	ed b7       	in	r30, 0x3d	; 61
     2b4:	fe b7       	in	r31, 0x3e	; 62
     2b6:	31 96       	adiw	r30, 0x01	; 1
     2b8:	28 e9       	ldi	r18, 0x98	; 152
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	ad b7       	in	r26, 0x3d	; 61
     2be:	be b7       	in	r27, 0x3e	; 62
     2c0:	12 96       	adiw	r26, 0x02	; 2
     2c2:	3c 93       	st	X, r19
     2c4:	2e 93       	st	-X, r18
     2c6:	11 97       	sbiw	r26, 0x01	; 1
     2c8:	82 83       	std	Z+2, r24	; 0x02
     2ca:	13 82       	std	Z+3, r1	; 0x03
     2cc:	64 83       	std	Z+4, r22	; 0x04
     2ce:	15 82       	std	Z+5, r1	; 0x05
     2d0:	96 83       	std	Z+6, r25	; 0x06
     2d2:	17 82       	std	Z+7, r1	; 0x07
     2d4:	0e 94 34 0a 	call	0x1468	; 0x1468 <printf_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     2d8:	8b b1       	in	r24, 0x0b	; 11
     2da:	8f 70       	andi	r24, 0x0F	; 15
     2dc:	80 69       	ori	r24, 0x90	; 144
     2de:	8b b9       	out	0x0b, r24	; 11
     2e0:	2d b7       	in	r18, 0x3d	; 61
     2e2:	3e b7       	in	r19, 0x3e	; 62
     2e4:	28 5f       	subi	r18, 0xF8	; 248
     2e6:	3f 4f       	sbci	r19, 0xFF	; 255
     2e8:	0f b6       	in	r0, 0x3f	; 63
     2ea:	f8 94       	cli
     2ec:	3e bf       	out	0x3e, r19	; 62
     2ee:	0f be       	out	0x3f, r0	; 63
     2f0:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     2f2:	08 95       	ret

000002f4 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     2f4:	1f 93       	push	r17
     2f6:	18 2f       	mov	r17, r24
	USB_Disable();
     2f8:	60 d4       	rcall	.+2240   	; 0xbba <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     2fa:	00 d0       	rcall	.+0      	; 0x2fc <EVENT_USB_Host_HostError+0x8>
     2fc:	00 d0       	rcall	.+0      	; 0x2fe <EVENT_USB_Host_HostError+0xa>
     2fe:	ed b7       	in	r30, 0x3d	; 61
     300:	fe b7       	in	r31, 0x3e	; 62
     302:	31 96       	adiw	r30, 0x01	; 1
     304:	8e ee       	ldi	r24, 0xEE	; 238
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	ad b7       	in	r26, 0x3d	; 61
     30a:	be b7       	in	r27, 0x3e	; 62
     30c:	12 96       	adiw	r26, 0x02	; 2
     30e:	9c 93       	st	X, r25
     310:	8e 93       	st	-X, r24
     312:	11 97       	sbiw	r26, 0x01	; 1
     314:	12 83       	std	Z+2, r17	; 0x02
     316:	13 82       	std	Z+3, r1	; 0x03
     318:	0e 94 34 0a 	call	0x1468	; 0x1468 <printf_P>
     31c:	8b b1       	in	r24, 0x0b	; 11
     31e:	8f 70       	andi	r24, 0x0F	; 15
     320:	80 69       	ori	r24, 0x90	; 144
     322:	8b b9       	out	0x0b, r24	; 11
     324:	0f 90       	pop	r0
     326:	0f 90       	pop	r0
     328:	0f 90       	pop	r0
     32a:	0f 90       	pop	r0
     32c:	ff cf       	rjmp	.-2      	; 0x32c <EVENT_USB_Host_HostError+0x38>

0000032e <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     32e:	87 e0       	ldi	r24, 0x07	; 7
     330:	92 e0       	ldi	r25, 0x02	; 2
     332:	0e 94 56 0a 	call	0x14ac	; 0x14ac <puts_P>
     336:	8b b1       	in	r24, 0x0b	; 11
     338:	8f 70       	andi	r24, 0x0F	; 15
     33a:	80 61       	ori	r24, 0x10	; 16
     33c:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     33e:	08 95       	ret

00000340 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     340:	8e e1       	ldi	r24, 0x1E	; 30
     342:	92 e0       	ldi	r25, 0x02	; 2
     344:	0e 94 56 0a 	call	0x14ac	; 0x14ac <puts_P>
     348:	8b b1       	in	r24, 0x0b	; 11
     34a:	8f 70       	andi	r24, 0x0F	; 15
     34c:	80 6a       	ori	r24, 0xA0	; 160
     34e:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     350:	08 95       	ret

00000352 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     352:	ef 92       	push	r14
     354:	ff 92       	push	r15
     356:	0f 93       	push	r16
     358:	1f 93       	push	r17
     35a:	df 93       	push	r29
     35c:	cf 93       	push	r28
     35e:	cd b7       	in	r28, 0x3d	; 61
     360:	de b7       	in	r29, 0x3e	; 62
     362:	c5 50       	subi	r28, 0x05	; 5
     364:	d2 40       	sbci	r29, 0x02	; 2
     366:	0f b6       	in	r0, 0x3f	; 63
     368:	f8 94       	cli
     36a:	de bf       	out	0x3e, r29	; 62
     36c:	0f be       	out	0x3f, r0	; 63
     36e:	cd bf       	out	0x3d, r28	; 61
     370:	8b b1       	in	r24, 0x0b	; 11
     372:	8f 70       	andi	r24, 0x0F	; 15
     374:	80 6a       	ori	r24, 0xA0	; 160
     376:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     378:	8e 01       	movw	r16, r28
     37a:	0a 5f       	subi	r16, 0xFA	; 250
     37c:	1f 4f       	sbci	r17, 0xFF	; 255
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	be 01       	movw	r22, r28
     382:	6f 5f       	subi	r22, 0xFF	; 255
     384:	7f 4f       	sbci	r23, 0xFF	; 255
     386:	a8 01       	movw	r20, r16
     388:	20 e0       	ldi	r18, 0x00	; 0
     38a:	32 e0       	ldi	r19, 0x02	; 2
     38c:	12 d5       	rcall	.+2596   	; 0xdb2 <USB_Host_GetDeviceConfigDescriptor>
     38e:	88 23       	and	r24, r24
     390:	19 f0       	breq	.+6      	; 0x398 <EVENT_USB_Host_DeviceEnumerationComplete+0x46>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     392:	8a ed       	ldi	r24, 0xDA	; 218
     394:	91 e0       	ldi	r25, 0x01	; 1
     396:	11 c0       	rjmp	.+34     	; 0x3ba <EVENT_USB_Host_DeviceEnumerationComplete+0x68>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (Audio_Host_ConfigurePipes(&Speaker_Audio_Interface,
     398:	69 81       	ldd	r22, Y+1	; 0x01
     39a:	7a 81       	ldd	r23, Y+2	; 0x02
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	a8 01       	movw	r20, r16
     3a2:	63 d7       	rcall	.+3782   	; 0x126a <Audio_Host_ConfigurePipes>
     3a4:	88 23       	and	r24, r24
     3a6:	19 f0       	breq	.+6      	; 0x3ae <EVENT_USB_Host_DeviceEnumerationComplete+0x5c>
	                              ConfigDescriptorSize, ConfigDescriptorData) != AUDIO_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Audio Output Device.\r\n"));
     3a8:	87 ea       	ldi	r24, 0xA7	; 167
     3aa:	91 e0       	ldi	r25, 0x01	; 1
     3ac:	06 c0       	rjmp	.+12     	; 0x3ba <EVENT_USB_Host_DeviceEnumerationComplete+0x68>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	b9 d6       	rcall	.+3442   	; 0x1124 <USB_Host_SetDeviceConfiguration>
     3b2:	88 23       	and	r24, r24
     3b4:	41 f0       	breq	.+16     	; 0x3c6 <EVENT_USB_Host_DeviceEnumerationComplete+0x74>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     3b6:	81 e8       	ldi	r24, 0x81	; 129
     3b8:	91 e0       	ldi	r25, 0x01	; 1
     3ba:	0e 94 56 0a 	call	0x14ac	; 0x14ac <puts_P>
     3be:	8b b1       	in	r24, 0x0b	; 11
     3c0:	8f 70       	andi	r24, 0x0F	; 15
     3c2:	80 69       	ori	r24, 0x90	; 144
     3c4:	3b c0       	rjmp	.+118    	; 0x43c <EVENT_USB_Host_DeviceEnumerationComplete+0xea>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (Audio_Host_StartStopStreaming(&Speaker_Audio_Interface, true) != HOST_SENDCONTROL_Successful)
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	91 e0       	ldi	r25, 0x01	; 1
     3ca:	61 e0       	ldi	r22, 0x01	; 1
     3cc:	44 d7       	rcall	.+3720   	; 0x1256 <Audio_Host_StartStopStreaming>
     3ce:	88 23       	and	r24, r24
     3d0:	19 f0       	breq	.+6      	; 0x3d8 <EVENT_USB_Host_DeviceEnumerationComplete+0x86>
	{
		puts_P(PSTR("Error Enabling Audio Stream.\r\n"));
     3d2:	82 e6       	ldi	r24, 0x62	; 98
     3d4:	91 e0       	ldi	r25, 0x01	; 1
     3d6:	1b c0       	rjmp	.+54     	; 0x40e <EVENT_USB_Host_DeviceEnumerationComplete+0xbc>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}
	
	USB_Audio_SampleFreq_t SampleRate = AUDIO_SAMPLE_FREQ(48000);
     3d8:	de 01       	movw	r26, r28
     3da:	13 96       	adiw	r26, 0x03	; 3
     3dc:	ea e0       	ldi	r30, 0x0A	; 10
     3de:	f1 e0       	ldi	r31, 0x01	; 1
     3e0:	83 e0       	ldi	r24, 0x03	; 3
     3e2:	01 90       	ld	r0, Z+
     3e4:	0d 92       	st	X+, r0
     3e6:	81 50       	subi	r24, 0x01	; 1
     3e8:	e1 f7       	brne	.-8      	; 0x3e2 <EVENT_USB_Host_DeviceEnumerationComplete+0x90>
	if (Audio_Host_GetSetEndpointProperty(&Speaker_Audio_Interface, Speaker_Audio_Interface.Config.DataOUTPipeNumber,
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	60 91 01 01 	lds	r22, 0x0101
     3f2:	41 e0       	ldi	r20, 0x01	; 1
     3f4:	21 e0       	ldi	r18, 0x01	; 1
     3f6:	03 e0       	ldi	r16, 0x03	; 3
     3f8:	10 e0       	ldi	r17, 0x00	; 0
     3fa:	33 e0       	ldi	r19, 0x03	; 3
     3fc:	e3 2e       	mov	r14, r19
     3fe:	f1 2c       	mov	r15, r1
     400:	ec 0e       	add	r14, r28
     402:	fd 1e       	adc	r15, r29
     404:	f2 d6       	rcall	.+3556   	; 0x11ea <Audio_Host_GetSetEndpointProperty>
     406:	88 23       	and	r24, r24
     408:	59 f0       	breq	.+22     	; 0x420 <EVENT_USB_Host_DeviceEnumerationComplete+0xce>
	                                      AUDIO_REQ_SetCurrent, AUDIO_EPCONTROL_SamplingFreq,
	                                      sizeof(SampleRate), &SampleRate) != HOST_SENDCONTROL_Successful)
	{
		puts_P(PSTR("Error Setting Audio Sampling Frequency.\r\n"));
     40a:	88 e3       	ldi	r24, 0x38	; 56
     40c:	91 e0       	ldi	r25, 0x01	; 1
     40e:	0e 94 56 0a 	call	0x14ac	; 0x14ac <puts_P>
     412:	8b b1       	in	r24, 0x0b	; 11
     414:	8f 70       	andi	r24, 0x0F	; 15
     416:	80 69       	ori	r24, 0x90	; 144
     418:	8b b9       	out	0x0b, r24	; 11
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	83 d6       	rcall	.+3334   	; 0x1124 <USB_Host_SetDeviceConfiguration>
     41e:	0f c0       	rjmp	.+30     	; 0x43e <EVENT_USB_Host_DeviceEnumerationComplete+0xec>
		return;
	}

	/* Sample reload timer initialization */
	TIMSK0  = (1 << OCIE0A);
     420:	92 e0       	ldi	r25, 0x02	; 2
     422:	90 93 6e 00 	sts	0x006E, r25
	OCR0A   = ((F_CPU / 8 / 48000) - 1);
     426:	83 e1       	ldi	r24, 0x13	; 19
     428:	87 bd       	out	0x27, r24	; 39
	TCCR0A  = (1 << WGM01);  // CTC mode
     42a:	94 bd       	out	0x24, r25	; 36
	TCCR0B  = (1 << CS01);   // Fcpu/8 speed
     42c:	95 bd       	out	0x25, r25	; 37

	puts_P(PSTR("Audio Device Enumerated.\r\n"));
     42e:	8d e1       	ldi	r24, 0x1D	; 29
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	0e 94 56 0a 	call	0x14ac	; 0x14ac <puts_P>
     436:	8b b1       	in	r24, 0x0b	; 11
     438:	8f 70       	andi	r24, 0x0F	; 15
     43a:	80 66       	ori	r24, 0x60	; 96
     43c:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     43e:	cb 5f       	subi	r28, 0xFB	; 251
     440:	dd 4f       	sbci	r29, 0xFD	; 253
     442:	0f b6       	in	r0, 0x3f	; 63
     444:	f8 94       	cli
     446:	de bf       	out	0x3e, r29	; 62
     448:	0f be       	out	0x3f, r0	; 63
     44a:	cd bf       	out	0x3d, r28	; 61
     44c:	cf 91       	pop	r28
     44e:	df 91       	pop	r29
     450:	1f 91       	pop	r17
     452:	0f 91       	pop	r16
     454:	ff 90       	pop	r15
     456:	ef 90       	pop	r14
     458:	08 95       	ret

0000045a <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     45a:	84 b7       	in	r24, 0x34	; 52
     45c:	87 7f       	andi	r24, 0xF7	; 247
     45e:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     460:	28 e1       	ldi	r18, 0x18	; 24
     462:	0f b6       	in	r0, 0x3f	; 63
     464:	f8 94       	cli
     466:	20 93 60 00 	sts	0x0060, r18
     46a:	10 92 60 00 	sts	0x0060, r1
     46e:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	80 e8       	ldi	r24, 0x80	; 128
     474:	0f b6       	in	r0, 0x3f	; 63
     476:	f8 94       	cli
     478:	80 93 61 00 	sts	0x0061, r24
     47c:	90 93 61 00 	sts	0x0061, r25
     480:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     482:	83 e3       	ldi	r24, 0x33	; 51
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	90 93 cd 00 	sts	0x00CD, r25
     48a:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     48e:	86 e0       	ldi	r24, 0x06	; 6
     490:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     494:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     498:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     49c:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     49e:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     4a0:	8a b1       	in	r24, 0x0a	; 10
     4a2:	80 6f       	ori	r24, 0xF0	; 240
     4a4:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     4a6:	8b b1       	in	r24, 0x0b	; 11
     4a8:	8f 70       	andi	r24, 0x0F	; 15
     4aa:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     4ac:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     4ae:	72 9a       	sbi	0x0e, 2	; 14
			 *  \param[in] Mode  Mask of ADC prescale and mode settings.
			 */
			static inline void ADC_Init(uint8_t Mode) ATTR_ALWAYS_INLINE;
			static inline void ADC_Init(uint8_t Mode)
			{
				ADCSRA = ((1 << ADEN) | Mode);
     4b0:	85 ea       	ldi	r24, 0xA5	; 165
     4b2:	80 93 7a 00 	sts	0x007A, r24
			static inline void ADC_SetupChannel(const uint8_t ChannelIndex)
			{
				#if (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) || \
					 defined(__AVR_AT90USB1287__) || defined(__AVR_AT90USB647__) || \
					 defined(__AVR_ATmega32U6__))
				DDRF  &= ~(1 << ChannelIndex);
     4b6:	82 98       	cbi	0x10, 2	; 16
				DIDR0 |=  (1 << ChannelIndex);
     4b8:	ee e7       	ldi	r30, 0x7E	; 126
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
     4bc:	80 81       	ld	r24, Z
     4be:	84 60       	ori	r24, 0x04	; 4
     4c0:	80 83       	st	Z, r24
	Serial_Init(9600, false);
	LEDs_Init();
	Buttons_Init();
	ADC_Init(ADC_FREE_RUNNING | ADC_PRESCALE_32);
	ADC_SetupChannel(MIC_IN_ADC_CHANNEL);
	USB_Init();
     4c2:	72 d3       	rcall	.+1764   	; 0xba8 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     4c4:	ef e2       	ldi	r30, 0x2F	; 47
     4c6:	f1 e0       	ldi	r31, 0x01	; 1
     4c8:	f0 93 3e 01 	sts	0x013E, r31
     4cc:	e0 93 3d 01 	sts	0x013D, r30
					stdout = Stream;
     4d0:	f0 93 40 01 	sts	0x0140, r31
     4d4:	e0 93 3f 01 	sts	0x013F, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     4d8:	8e e0       	ldi	r24, 0x0E	; 14
     4da:	df 01       	movw	r26, r30
     4dc:	1d 92       	st	X+, r1
     4de:	8a 95       	dec	r24
     4e0:	e9 f7       	brne	.-6      	; 0x4dc <SetupHardware+0x82>
     4e2:	83 e0       	ldi	r24, 0x03	; 3
     4e4:	80 93 32 01 	sts	0x0132, r24
     4e8:	86 e1       	ldi	r24, 0x16	; 22
     4ea:	9a e0       	ldi	r25, 0x0A	; 10
     4ec:	90 93 38 01 	sts	0x0138, r25
     4f0:	80 93 37 01 	sts	0x0137, r24
     4f4:	80 e2       	ldi	r24, 0x20	; 32
     4f6:	9a e0       	ldi	r25, 0x0A	; 10
     4f8:	90 93 3a 01 	sts	0x013A, r25
     4fc:	80 93 39 01 	sts	0x0139, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     500:	08 95       	ret

00000502 <__vector_21>:
	}
}

/** ISR to handle the reloading of the PWM timer with the next sample. */
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
     502:	1f 92       	push	r1
     504:	0f 92       	push	r0
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	0f 92       	push	r0
     50a:	0b b6       	in	r0, 0x3b	; 59
     50c:	0f 92       	push	r0
     50e:	11 24       	eor	r1, r1
     510:	ff 92       	push	r15
     512:	0f 93       	push	r16
     514:	1f 93       	push	r17
     516:	2f 93       	push	r18
     518:	3f 93       	push	r19
     51a:	4f 93       	push	r20
     51c:	5f 93       	push	r21
     51e:	6f 93       	push	r22
     520:	7f 93       	push	r23
     522:	8f 93       	push	r24
     524:	9f 93       	push	r25
     526:	af 93       	push	r26
     528:	bf 93       	push	r27
     52a:	ef 93       	push	r30
     52c:	ff 93       	push	r31
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     52e:	10 91 a7 00 	lds	r17, 0x00A7
			 */
			static inline bool Audio_Host_IsReadyForNextSample(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo)
			                                                   ATTR_NON_NULL_PTR_ARG(1) ATTR_ALWAYS_INLINE;
			static inline bool Audio_Host_IsReadyForNextSample(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo)
			{
				if ((USB_HostState != HOST_STATE_Configured) || !(AudioInterfaceInfo->State.IsActive))
     532:	80 91 2e 01 	lds	r24, 0x012E
     536:	8b 30       	cpi	r24, 0x0B	; 11
     538:	09 f0       	breq	.+2      	; 0x53c <__vector_21+0x3a>
     53a:	59 c0       	rjmp	.+178    	; 0x5ee <__vector_21+0xec>
     53c:	80 91 02 01 	lds	r24, 0x0102
     540:	88 23       	and	r24, r24
     542:	09 f4       	brne	.+2      	; 0x546 <__vector_21+0x44>
     544:	54 c0       	rjmp	.+168    	; 0x5ee <__vector_21+0xec>
				  return false;

				Pipe_SelectPipe(AudioInterfaceInfo->Config.DataOUTPipeNumber);
     546:	80 91 01 01 	lds	r24, 0x0101
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     54a:	80 93 a7 00 	sts	0x00A7, r24
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     54e:	80 91 a6 00 	lds	r24, 0x00A6
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	/* Check that the USB bus is ready for the next sample to write */
	if (Audio_Host_IsReadyForNextSample(&Speaker_Audio_Interface))
     552:	82 ff       	sbrs	r24, 2
     554:	4c c0       	rjmp	.+152    	; 0x5ee <__vector_21+0xec>
		#if defined(USE_TEST_TONE)
			static uint8_t SquareWaveSampleCount;
			static int16_t CurrentWaveValue;
			
			/* In test tone mode, generate a square wave at 1/256 of the sample rate */
			if (SquareWaveSampleCount++ == 0xFF)
     556:	80 91 20 01 	lds	r24, 0x0120
     55a:	8f 5f       	subi	r24, 0xFF	; 255
     55c:	80 93 20 01 	sts	0x0120, r24
     560:	81 50       	subi	r24, 0x01	; 1
     562:	50 f4       	brcc	.+20     	; 0x578 <__vector_21+0x76>
			  CurrentWaveValue ^= 0x8000;
     564:	80 91 1e 01 	lds	r24, 0x011E
     568:	90 91 1f 01 	lds	r25, 0x011F
     56c:	80 50       	subi	r24, 0x00	; 0
     56e:	90 48       	sbci	r25, 0x80	; 128
     570:	90 93 1f 01 	sts	0x011F, r25
     574:	80 93 1e 01 	sts	0x011E, r24
			
			/* Only generate audio if the board button is being pressed */
			AudioSample = (Buttons_GetStatus() & BUTTONS_BUTTON1) ? CurrentWaveValue : 0;
     578:	62 9b       	sbis	0x0c, 2	; 12
     57a:	03 c0       	rjmp	.+6      	; 0x582 <__vector_21+0x80>
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	04 c0       	rjmp	.+8      	; 0x58a <__vector_21+0x88>
     582:	80 91 1e 01 	lds	r24, 0x011E
     586:	90 91 1f 01 	lds	r25, 0x011F
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
     58a:	f8 2e       	mov	r15, r24
     58c:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
     590:	09 2f       	mov	r16, r25
     592:	90 93 af 00 	sts	0x00AF, r25
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     596:	80 91 a6 00 	lds	r24, 0x00A6
			static inline void Audio_Host_WriteSample16(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo,
			                                            const int16_t Sample)
			{
				Pipe_Write_16_LE(Sample);

				if (!(Pipe_IsReadWriteAllowed()))
     59a:	85 fd       	sbrc	r24, 5
     59c:	10 c0       	rjmp	.+32     	; 0x5be <__vector_21+0xbc>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     59e:	80 91 a9 00 	lds	r24, 0x00A9
     5a2:	8f 7b       	andi	r24, 0xBF	; 191
     5a4:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     5a8:	80 91 a6 00 	lds	r24, 0x00A6
     5ac:	8b 77       	andi	r24, 0x7B	; 123
     5ae:	80 93 a6 00 	sts	0x00A6, r24
				{
					Pipe_Unfreeze();
					Pipe_ClearOUT();
					Pipe_WaitUntilReady();
     5b2:	7b d2       	rcall	.+1270   	; 0xaaa <Pipe_WaitUntilReady>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     5b4:	80 91 a9 00 	lds	r24, 0x00A9
     5b8:	80 64       	ori	r24, 0x40	; 64
     5ba:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
     5be:	f0 92 af 00 	sts	0x00AF, r15
				UPDATX = (Data >> 8);
     5c2:	00 93 af 00 	sts	0x00AF, r16
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     5c6:	80 91 a6 00 	lds	r24, 0x00A6
			static inline void Audio_Host_WriteSample16(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo,
			                                            const int16_t Sample)
			{
				Pipe_Write_16_LE(Sample);

				if (!(Pipe_IsReadWriteAllowed()))
     5ca:	85 fd       	sbrc	r24, 5
     5cc:	10 c0       	rjmp	.+32     	; 0x5ee <__vector_21+0xec>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     5ce:	80 91 a9 00 	lds	r24, 0x00A9
     5d2:	8f 7b       	andi	r24, 0xBF	; 191
     5d4:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     5d8:	80 91 a6 00 	lds	r24, 0x00A6
     5dc:	8b 77       	andi	r24, 0x7B	; 123
     5de:	80 93 a6 00 	sts	0x00A6, r24
				{
					Pipe_Unfreeze();
					Pipe_ClearOUT();
					Pipe_WaitUntilReady();
     5e2:	63 d2       	rcall	.+1222   	; 0xaaa <Pipe_WaitUntilReady>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     5e4:	80 91 a9 00 	lds	r24, 0x00A9
     5e8:	80 64       	ori	r24, 0x40	; 64
     5ea:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     5ee:	17 70       	andi	r17, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     5f0:	10 93 a7 00 	sts	0x00A7, r17
		Audio_Host_WriteSample16(&Speaker_Audio_Interface, AudioSample);	
		Audio_Host_WriteSample16(&Speaker_Audio_Interface, AudioSample);
	}
	
	Pipe_SelectPipe(PrevPipe);
}
     5f4:	ff 91       	pop	r31
     5f6:	ef 91       	pop	r30
     5f8:	bf 91       	pop	r27
     5fa:	af 91       	pop	r26
     5fc:	9f 91       	pop	r25
     5fe:	8f 91       	pop	r24
     600:	7f 91       	pop	r23
     602:	6f 91       	pop	r22
     604:	5f 91       	pop	r21
     606:	4f 91       	pop	r20
     608:	3f 91       	pop	r19
     60a:	2f 91       	pop	r18
     60c:	1f 91       	pop	r17
     60e:	0f 91       	pop	r16
     610:	ff 90       	pop	r15
     612:	0f 90       	pop	r0
     614:	0b be       	out	0x3b, r0	; 59
     616:	0f 90       	pop	r0
     618:	0f be       	out	0x3f, r0	; 63
     61a:	0f 90       	pop	r0
     61c:	1f 90       	pop	r1
     61e:	18 95       	reti

00000620 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     620:	1c df       	rcall	.-456    	; 0x45a <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Audio Output Host Demo running.\r\n" ESC_FG_WHITE));
     622:	81 e3       	ldi	r24, 0x31	; 49
     624:	92 e0       	ldi	r25, 0x02	; 2
     626:	42 d7       	rcall	.+3716   	; 0x14ac <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     628:	8b b1       	in	r24, 0x0b	; 11
     62a:	8f 70       	andi	r24, 0x0F	; 15
     62c:	80 61       	ori	r24, 0x10	; 16
     62e:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     630:	78 94       	sei

	for (;;)
	{
		Audio_Host_USBTask(&Speaker_Audio_Interface);
		USB_USBTask();
     632:	9d d5       	rcall	.+2874   	; 0x116e <USB_USBTask>
     634:	fe cf       	rjmp	.-4      	; 0x632 <main+0x12>

00000636 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     636:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     638:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     63c:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     640:	80 91 a0 00 	lds	r24, 0x00A0
     644:	8f 7d       	andi	r24, 0xDF	; 223
     646:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     64a:	80 91 9f 00 	lds	r24, 0x009F
     64e:	8f 7d       	andi	r24, 0xDF	; 223
     650:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     654:	80 91 9e 00 	lds	r24, 0x009E
     658:	81 60       	ori	r24, 0x01	; 1
     65a:	80 93 9e 00 	sts	0x009E, r24
     65e:	28 c0       	rjmp	.+80     	; 0x6b0 <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     660:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     664:	85 ff       	sbrs	r24, 5
     666:	06 c0       	rjmp	.+12     	; 0x674 <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     668:	80 91 9f 00 	lds	r24, 0x009F
     66c:	8f 7d       	andi	r24, 0xDF	; 223
     66e:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     672:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     674:	80 91 2e 01 	lds	r24, 0x012E
     678:	81 30       	cpi	r24, 0x01	; 1
     67a:	11 f4       	brne	.+4      	; 0x680 <USB_Host_WaitMS+0x4a>
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	1a c0       	rjmp	.+52     	; 0x6b4 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     680:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     684:	84 ff       	sbrs	r24, 4
     686:	09 c0       	rjmp	.+18     	; 0x69a <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     688:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     68c:	80 91 a6 00 	lds	r24, 0x00A6
     690:	8f 7e       	andi	r24, 0xEF	; 239
     692:	80 93 a6 00 	sts	0x00A6, r24
     696:	92 e0       	ldi	r25, 0x02	; 2
     698:	0d c0       	rjmp	.+26     	; 0x6b4 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     69a:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     69e:	81 ff       	sbrs	r24, 1
     6a0:	07 c0       	rjmp	.+14     	; 0x6b0 <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     6a2:	80 91 a6 00 	lds	r24, 0x00A6
     6a6:	8d 7f       	andi	r24, 0xFD	; 253
     6a8:	80 93 a6 00 	sts	0x00A6, r24
     6ac:	93 e0       	ldi	r25, 0x03	; 3
     6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     6b0:	99 23       	and	r25, r25
     6b2:	b1 f6       	brne	.-84     	; 0x660 <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     6b4:	20 fd       	sbrc	r18, 0
     6b6:	05 c0       	rjmp	.+10     	; 0x6c2 <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     6b8:	80 91 9e 00 	lds	r24, 0x009E
     6bc:	8e 7f       	andi	r24, 0xFE	; 254
     6be:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     6c2:	35 ff       	sbrs	r19, 5
     6c4:	05 c0       	rjmp	.+10     	; 0x6d0 <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     6c6:	80 91 a0 00 	lds	r24, 0x00A0
     6ca:	80 62       	ori	r24, 0x20	; 32
     6cc:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     6d0:	89 2f       	mov	r24, r25
     6d2:	08 95       	ret

000006d4 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     6d4:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     6d8:	80 91 a0 00 	lds	r24, 0x00A0
     6dc:	8d 7f       	andi	r24, 0xFD	; 253
     6de:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     6e2:	80 91 9e 00 	lds	r24, 0x009E
     6e6:	82 60       	ori	r24, 0x02	; 2
     6e8:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     6ec:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     6f0:	81 fd       	sbrc	r24, 1
     6f2:	fc cf       	rjmp	.-8      	; 0x6ec <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6f4:	80 91 9e 00 	lds	r24, 0x009E
     6f8:	81 60       	ori	r24, 0x01	; 1
     6fa:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     6fe:	10 92 24 01 	sts	0x0124, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     702:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     706:	80 91 a0 00 	lds	r24, 0x00A0
     70a:	8f 7d       	andi	r24, 0xDF	; 223
     70c:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     710:	80 91 9f 00 	lds	r24, 0x009F
     714:	8f 7d       	andi	r24, 0xDF	; 223
     716:	80 93 9f 00 	sts	0x009F, r24
     71a:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     71c:	40 ed       	ldi	r20, 0xD0	; 208
     71e:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     720:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     724:	85 ff       	sbrs	r24, 5
     726:	0b c0       	rjmp	.+22     	; 0x73e <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     728:	80 91 9f 00 	lds	r24, 0x009F
     72c:	8f 7d       	andi	r24, 0xDF	; 223
     72e:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     732:	80 91 9f 00 	lds	r24, 0x009F
     736:	8d 7f       	andi	r24, 0xFD	; 253
     738:	80 93 9f 00 	sts	0x009F, r24
     73c:	05 c0       	rjmp	.+10     	; 0x748 <USB_Host_ResetDevice+0x74>
     73e:	ca 01       	movw	r24, r20
     740:	01 97       	sbiw	r24, 0x01	; 1
     742:	f1 f7       	brne	.-4      	; 0x740 <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     744:	21 50       	subi	r18, 0x01	; 1
     746:	61 f7       	brne	.-40     	; 0x720 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     748:	35 ff       	sbrs	r19, 5
     74a:	05 c0       	rjmp	.+10     	; 0x756 <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     74c:	80 91 a0 00 	lds	r24, 0x00A0
     750:	80 62       	ori	r24, 0x20	; 32
     752:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     756:	60 fd       	sbrc	r22, 0
     758:	05 c0       	rjmp	.+10     	; 0x764 <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     75a:	80 91 9e 00 	lds	r24, 0x009E
     75e:	8e 7f       	andi	r24, 0xFE	; 254
     760:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     764:	80 91 a0 00 	lds	r24, 0x00A0
     768:	82 60       	ori	r24, 0x02	; 2
     76a:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     76e:	08 95       	ret

00000770 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     770:	ef 92       	push	r14
     772:	0f 93       	push	r16
     774:	1f 93       	push	r17
     776:	df 93       	push	r29
     778:	cf 93       	push	r28
     77a:	cd b7       	in	r28, 0x3d	; 61
     77c:	de b7       	in	r29, 0x3e	; 62
     77e:	28 97       	sbiw	r28, 0x08	; 8
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	f8 94       	cli
     784:	de bf       	out	0x3e, r29	; 62
     786:	0f be       	out	0x3f, r0	; 63
     788:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     78a:	80 91 2e 01 	lds	r24, 0x012E
     78e:	85 30       	cpi	r24, 0x05	; 5
     790:	09 f4       	brne	.+2      	; 0x794 <USB_Host_ProcessNextHostState+0x24>
     792:	94 c0       	rjmp	.+296    	; 0x8bc <USB_Host_ProcessNextHostState+0x14c>
     794:	86 30       	cpi	r24, 0x06	; 6
     796:	68 f4       	brcc	.+26     	; 0x7b2 <USB_Host_ProcessNextHostState+0x42>
     798:	82 30       	cpi	r24, 0x02	; 2
     79a:	b9 f1       	breq	.+110    	; 0x80a <USB_Host_ProcessNextHostState+0x9a>
     79c:	83 30       	cpi	r24, 0x03	; 3
     79e:	18 f4       	brcc	.+6      	; 0x7a6 <USB_Host_ProcessNextHostState+0x36>
     7a0:	88 23       	and	r24, r24
     7a2:	a1 f0       	breq	.+40     	; 0x7cc <USB_Host_ProcessNextHostState+0x5c>
     7a4:	04 c1       	rjmp	.+520    	; 0x9ae <USB_Host_ProcessNextHostState+0x23e>
     7a6:	83 30       	cpi	r24, 0x03	; 3
     7a8:	d1 f1       	breq	.+116    	; 0x81e <USB_Host_ProcessNextHostState+0xae>
     7aa:	84 30       	cpi	r24, 0x04	; 4
     7ac:	09 f0       	breq	.+2      	; 0x7b0 <USB_Host_ProcessNextHostState+0x40>
     7ae:	ff c0       	rjmp	.+510    	; 0x9ae <USB_Host_ProcessNextHostState+0x23e>
     7b0:	5d c0       	rjmp	.+186    	; 0x86c <USB_Host_ProcessNextHostState+0xfc>
     7b2:	87 30       	cpi	r24, 0x07	; 7
     7b4:	09 f4       	brne	.+2      	; 0x7b8 <USB_Host_ProcessNextHostState+0x48>
     7b6:	9b c0       	rjmp	.+310    	; 0x8ee <USB_Host_ProcessNextHostState+0x17e>
     7b8:	87 30       	cpi	r24, 0x07	; 7
     7ba:	08 f4       	brcc	.+2      	; 0x7be <USB_Host_ProcessNextHostState+0x4e>
     7bc:	8a c0       	rjmp	.+276    	; 0x8d2 <USB_Host_ProcessNextHostState+0x162>
     7be:	88 30       	cpi	r24, 0x08	; 8
     7c0:	09 f4       	brne	.+2      	; 0x7c4 <USB_Host_ProcessNextHostState+0x54>
     7c2:	b3 c0       	rjmp	.+358    	; 0x92a <USB_Host_ProcessNextHostState+0x1ba>
     7c4:	89 30       	cpi	r24, 0x09	; 9
     7c6:	09 f0       	breq	.+2      	; 0x7ca <USB_Host_ProcessNextHostState+0x5a>
     7c8:	f2 c0       	rjmp	.+484    	; 0x9ae <USB_Host_ProcessNextHostState+0x23e>
     7ca:	d7 c0       	rjmp	.+430    	; 0x97a <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     7cc:	00 91 22 01 	lds	r16, 0x0122
     7d0:	10 91 23 01 	lds	r17, 0x0123
     7d4:	01 15       	cp	r16, r1
     7d6:	11 05       	cpc	r17, r1
     7d8:	09 f4       	brne	.+2      	; 0x7dc <USB_Host_ProcessNextHostState+0x6c>
     7da:	e9 c0       	rjmp	.+466    	; 0x9ae <USB_Host_ProcessNextHostState+0x23e>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	2b df       	rcall	.-426    	; 0x636 <USB_Host_WaitMS>
     7e0:	68 2f       	mov	r22, r24
     7e2:	88 23       	and	r24, r24
     7e4:	31 f0       	breq	.+12     	; 0x7f2 <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
     7e6:	80 91 21 01 	lds	r24, 0x0121
     7ea:	80 93 2e 01 	sts	0x012E, r24
     7ee:	91 e0       	ldi	r25, 0x01	; 1
     7f0:	da c0       	rjmp	.+436    	; 0x9a6 <USB_Host_ProcessNextHostState+0x236>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     7f2:	c8 01       	movw	r24, r16
     7f4:	01 97       	sbiw	r24, 0x01	; 1
     7f6:	90 93 23 01 	sts	0x0123, r25
     7fa:	80 93 22 01 	sts	0x0122, r24
     7fe:	89 2b       	or	r24, r25
     800:	09 f0       	breq	.+2      	; 0x804 <USB_Host_ProcessNextHostState+0x94>
     802:	d5 c0       	rjmp	.+426    	; 0x9ae <USB_Host_ProcessNextHostState+0x23e>
				  USB_HostState = PostWaitState;
     804:	80 91 21 01 	lds	r24, 0x0121
     808:	07 c0       	rjmp	.+14     	; 0x818 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     80a:	88 ee       	ldi	r24, 0xE8	; 232
     80c:	93 e0       	ldi	r25, 0x03	; 3
     80e:	90 93 23 01 	sts	0x0123, r25
     812:	80 93 22 01 	sts	0x0122, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     816:	83 e0       	ldi	r24, 0x03	; 3
     818:	80 93 2e 01 	sts	0x012E, r24
     81c:	c8 c0       	rjmp	.+400    	; 0x9ae <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     81e:	80 91 22 01 	lds	r24, 0x0122
     822:	90 91 23 01 	lds	r25, 0x0123
     826:	01 97       	sbiw	r24, 0x01	; 1
     828:	90 93 23 01 	sts	0x0123, r25
     82c:	80 93 22 01 	sts	0x0122, r24
     830:	01 96       	adiw	r24, 0x01	; 1
     832:	29 f0       	breq	.+10     	; 0x83e <USB_Host_ProcessNextHostState+0xce>
     834:	80 ed       	ldi	r24, 0xD0	; 208
     836:	97 e0       	ldi	r25, 0x07	; 7
     838:	01 97       	sbiw	r24, 0x01	; 1
     83a:	f1 f7       	brne	.-4      	; 0x838 <USB_Host_ProcessNextHostState+0xc8>
     83c:	b8 c0       	rjmp	.+368    	; 0x9ae <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     83e:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     840:	80 91 d8 00 	lds	r24, 0x00D8
     844:	80 61       	ori	r24, 0x10	; 16
     846:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     84a:	80 91 dd 00 	lds	r24, 0x00DD
     84e:	8b 7f       	andi	r24, 0xFB	; 251
     850:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     854:	80 91 d7 00 	lds	r24, 0x00D7
     858:	80 61       	ori	r24, 0x10	; 16
     85a:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     85e:	80 91 dd 00 	lds	r24, 0x00DD
     862:	82 60       	ori	r24, 0x02	; 2
     864:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     868:	84 e0       	ldi	r24, 0x04	; 4
     86a:	d6 cf       	rjmp	.-84     	; 0x818 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     86c:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     870:	80 ff       	sbrs	r24, 0
     872:	9d c0       	rjmp	.+314    	; 0x9ae <USB_Host_ProcessNextHostState+0x23e>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     874:	80 91 9f 00 	lds	r24, 0x009F
     878:	8e 7f       	andi	r24, 0xFE	; 254
     87a:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     87e:	80 91 9f 00 	lds	r24, 0x009F
     882:	8d 7f       	andi	r24, 0xFD	; 253
     884:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     888:	80 91 df 00 	lds	r24, 0x00DF
     88c:	8d 7f       	andi	r24, 0xFD	; 253
     88e:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     892:	80 91 de 00 	lds	r24, 0x00DE
     896:	82 60       	ori	r24, 0x02	; 2
     898:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     89c:	80 91 9e 00 	lds	r24, 0x009E
     8a0:	81 60       	ori	r24, 0x01	; 1
     8a2:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     8a6:	ed d0       	rcall	.+474    	; 0xa82 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     8a8:	10 92 2e 01 	sts	0x012E, r1
     8ac:	84 e6       	ldi	r24, 0x64	; 100
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	90 93 23 01 	sts	0x0123, r25
     8b4:	80 93 22 01 	sts	0x0122, r24
     8b8:	85 e0       	ldi	r24, 0x05	; 5
     8ba:	5c c0       	rjmp	.+184    	; 0x974 <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     8bc:	0b df       	rcall	.-490    	; 0x6d4 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     8be:	10 92 2e 01 	sts	0x012E, r1
     8c2:	88 ec       	ldi	r24, 0xC8	; 200
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	90 93 23 01 	sts	0x0123, r25
     8ca:	80 93 22 01 	sts	0x0122, r24
     8ce:	86 e0       	ldi	r24, 0x06	; 6
     8d0:	51 c0       	rjmp	.+162    	; 0x974 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	60 e0       	ldi	r22, 0x00	; 0
     8d6:	40 e0       	ldi	r20, 0x00	; 0
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	00 e4       	ldi	r16, 0x40	; 64
     8dc:	10 e0       	ldi	r17, 0x00	; 0
     8de:	ee 24       	eor	r14, r14
     8e0:	72 d0       	rcall	.+228    	; 0x9c6 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     8e2:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     8e6:	87 ff       	sbrs	r24, 7
     8e8:	5c c0       	rjmp	.+184    	; 0x9a2 <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     8ea:	87 e0       	ldi	r24, 0x07	; 7
     8ec:	95 cf       	rjmp	.-214    	; 0x818 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     8ee:	a6 e2       	ldi	r26, 0x26	; 38
     8f0:	b1 e0       	ldi	r27, 0x01	; 1
     8f2:	e5 e1       	ldi	r30, 0x15	; 21
     8f4:	f1 e0       	ldi	r31, 0x01	; 1
     8f6:	88 e0       	ldi	r24, 0x08	; 8
     8f8:	01 90       	ld	r0, Z+
     8fa:	0d 92       	st	X+, r0
     8fc:	81 50       	subi	r24, 0x01	; 1
     8fe:	e1 f7       	brne	.-8      	; 0x8f8 <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     900:	ce 01       	movw	r24, r28
     902:	01 96       	adiw	r24, 0x01	; 1
     904:	da d2       	rcall	.+1460   	; 0xeba <USB_Host_SendControlRequest>
     906:	68 2f       	mov	r22, r24
     908:	88 23       	and	r24, r24
     90a:	09 f0       	breq	.+2      	; 0x90e <USB_Host_ProcessNextHostState+0x19e>
     90c:	48 c0       	rjmp	.+144    	; 0x99e <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     90e:	88 85       	ldd	r24, Y+8	; 0x08
     910:	80 93 1d 01 	sts	0x011D, r24

			USB_Host_ResetDevice();
     914:	df de       	rcall	.-578    	; 0x6d4 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     916:	10 92 2e 01 	sts	0x012E, r1
     91a:	88 ec       	ldi	r24, 0xC8	; 200
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	90 93 23 01 	sts	0x0123, r25
     922:	80 93 22 01 	sts	0x0122, r24
     926:	88 e0       	ldi	r24, 0x08	; 8
     928:	25 c0       	rjmp	.+74     	; 0x974 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     92a:	00 91 1d 01 	lds	r16, 0x011D
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	20 e0       	ldi	r18, 0x00	; 0
     936:	10 e0       	ldi	r17, 0x00	; 0
     938:	ee 24       	eor	r14, r14
     93a:	45 d0       	rcall	.+138    	; 0x9c6 <Pipe_ConfigurePipe>
     93c:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     940:	87 ff       	sbrs	r24, 7
     942:	2f c0       	rjmp	.+94     	; 0x9a2 <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     944:	a6 e2       	ldi	r26, 0x26	; 38
     946:	b1 e0       	ldi	r27, 0x01	; 1
     948:	ed e0       	ldi	r30, 0x0D	; 13
     94a:	f1 e0       	ldi	r31, 0x01	; 1
     94c:	88 e0       	ldi	r24, 0x08	; 8
     94e:	01 90       	ld	r0, Z+
     950:	0d 92       	st	X+, r0
     952:	81 50       	subi	r24, 0x01	; 1
     954:	e1 f7       	brne	.-8      	; 0x94e <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	af d2       	rcall	.+1374   	; 0xeba <USB_Host_SendControlRequest>
     95c:	68 2f       	mov	r22, r24
     95e:	88 23       	and	r24, r24
     960:	f1 f4       	brne	.+60     	; 0x99e <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     962:	10 92 2e 01 	sts	0x012E, r1
     966:	84 e6       	ldi	r24, 0x64	; 100
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	90 93 23 01 	sts	0x0123, r25
     96e:	80 93 22 01 	sts	0x0122, r24
     972:	89 e0       	ldi	r24, 0x09	; 9
     974:	80 93 21 01 	sts	0x0121, r24
     978:	1a c0       	rjmp	.+52     	; 0x9ae <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     980:	8a e0       	ldi	r24, 0x0A	; 10
     982:	80 93 2e 01 	sts	0x012E, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     986:	e5 dc       	rcall	.-1590   	; 0x352 <EVENT_USB_Host_DeviceEnumerationComplete>
     988:	12 c0       	rjmp	.+36     	; 0x9ae <USB_Host_ProcessNextHostState+0x23e>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     98a:	89 2f       	mov	r24, r25
     98c:	87 dc       	rcall	.-1778   	; 0x29c <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     98e:	80 91 dd 00 	lds	r24, 0x00DD
     992:	81 60       	ori	r24, 0x01	; 1
     994:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     998:	ca dc       	rcall	.-1644   	; 0x32e <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     99a:	b6 d0       	rcall	.+364    	; 0xb08 <USB_ResetInterface>
     99c:	08 c0       	rjmp	.+16     	; 0x9ae <USB_Host_ProcessNextHostState+0x23e>
	}
}
     99e:	93 e0       	ldi	r25, 0x03	; 3
     9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <USB_Host_ProcessNextHostState+0x236>
     9a2:	94 e0       	ldi	r25, 0x04	; 4
     9a4:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     9a6:	80 91 2e 01 	lds	r24, 0x012E
     9aa:	81 30       	cpi	r24, 0x01	; 1
     9ac:	71 f7       	brne	.-36     	; 0x98a <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     9ae:	28 96       	adiw	r28, 0x08	; 8
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	f8 94       	cli
     9b4:	de bf       	out	0x3e, r29	; 62
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	cd bf       	out	0x3d, r28	; 61
     9ba:	cf 91       	pop	r28
     9bc:	df 91       	pop	r29
     9be:	1f 91       	pop	r17
     9c0:	0f 91       	pop	r16
     9c2:	ef 90       	pop	r14
     9c4:	08 95       	ret

000009c6 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     9c6:	ef 92       	push	r14
     9c8:	0f 93       	push	r16
     9ca:	1f 93       	push	r17
     9cc:	e8 2f       	mov	r30, r24
     9ce:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     9d0:	62 95       	swap	r22
     9d2:	66 0f       	add	r22, r22
     9d4:	66 0f       	add	r22, r22
     9d6:	60 7c       	andi	r22, 0xC0	; 192
     9d8:	64 2b       	or	r22, r20
     9da:	2f 70       	andi	r18, 0x0F	; 15
     9dc:	62 2b       	or	r22, r18
     9de:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     9e0:	72 60       	ori	r23, 0x02	; 2
     9e2:	45 c0       	rjmp	.+138    	; 0xa6e <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     9e4:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     9e8:	3e 17       	cp	r19, r30
     9ea:	a1 f4       	brne	.+40     	; 0xa14 <Pipe_ConfigurePipe+0x4e>
     9ec:	88 e0       	ldi	r24, 0x08	; 8
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	03 c0       	rjmp	.+6      	; 0x9fa <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     9f4:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     9f6:	88 0f       	add	r24, r24
     9f8:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     9fa:	80 17       	cp	r24, r16
     9fc:	91 07       	cpc	r25, r17
     9fe:	10 f4       	brcc	.+4      	; 0xa04 <Pipe_ConfigurePipe+0x3e>
     a00:	25 30       	cpi	r18, 0x05	; 5
     a02:	c1 f7       	brne	.-16     	; 0x9f4 <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     a04:	92 2f       	mov	r25, r18
     a06:	92 95       	swap	r25
     a08:	90 7f       	andi	r25, 0xF0	; 240
     a0a:	97 2b       	or	r25, r23
     a0c:	56 2f       	mov	r21, r22
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	20 e0       	ldi	r18, 0x00	; 0
     a12:	08 c0       	rjmp	.+16     	; 0xa24 <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     a14:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     a18:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     a1c:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
     a20:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     a24:	91 ff       	sbrs	r25, 1
     a26:	22 c0       	rjmp	.+68     	; 0xa6c <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a28:	80 91 a9 00 	lds	r24, 0x00A9
     a2c:	8e 7f       	andi	r24, 0xFE	; 254
     a2e:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     a32:	80 91 ab 00 	lds	r24, 0x00AB
     a36:	8d 7f       	andi	r24, 0xFD	; 253
     a38:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     a3c:	80 91 a9 00 	lds	r24, 0x00A9
     a40:	81 60       	ori	r24, 0x01	; 1
     a42:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     a46:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
     a4a:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
     a4e:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
     a52:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     a56:	80 91 a9 00 	lds	r24, 0x00A9
     a5a:	80 62       	ori	r24, 0x20	; 32
     a5c:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a60:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     a64:	87 fd       	sbrc	r24, 7
     a66:	02 c0       	rjmp	.+4      	; 0xa6c <Pipe_ConfigurePipe+0xa6>
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	07 c0       	rjmp	.+14     	; 0xa7a <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     a6c:	3f 5f       	subi	r19, 0xFF	; 255
     a6e:	37 30       	cpi	r19, 0x07	; 7
     a70:	08 f4       	brcc	.+2      	; 0xa74 <Pipe_ConfigurePipe+0xae>
     a72:	b8 cf       	rjmp	.-144    	; 0x9e4 <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a74:	e0 93 a7 00 	sts	0x00A7, r30
     a78:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	ef 90       	pop	r14
     a80:	08 95       	ret

00000a82 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     a82:	10 92 f8 00 	sts	0x00F8, r1
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     a8c:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     a90:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     a94:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a98:	80 91 a9 00 	lds	r24, 0x00A9
     a9c:	8e 7f       	andi	r24, 0xFE	; 254
     a9e:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     aa2:	9f 5f       	subi	r25, 0xFF	; 255
     aa4:	97 30       	cpi	r25, 0x07	; 7
     aa6:	81 f7       	brne	.-32     	; 0xa88 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     aa8:	08 95       	ret

00000aaa <Pipe_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     aaa:	40 91 a2 00 	lds	r20, 0x00A2
     aae:	50 91 a3 00 	lds	r21, 0x00A3
     ab2:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     ab4:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     ab8:	80 73       	andi	r24, 0x30	; 48
     aba:	80 31       	cpi	r24, 0x10	; 16
     abc:	29 f4       	brne	.+10     	; 0xac8 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     abe:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     ac2:	80 ff       	sbrs	r24, 0
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <Pipe_WaitUntilReady+0x26>
     ac6:	1e c0       	rjmp	.+60     	; 0xb04 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     ac8:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     acc:	82 fd       	sbrc	r24, 2
     ace:	1a c0       	rjmp	.+52     	; 0xb04 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     ad0:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     ad4:	81 ff       	sbrs	r24, 1
     ad6:	02 c0       	rjmp	.+4      	; 0xadc <Pipe_WaitUntilReady+0x32>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     adc:	80 91 2e 01 	lds	r24, 0x012E
     ae0:	81 30       	cpi	r24, 0x01	; 1
     ae2:	11 f4       	brne	.+4      	; 0xae8 <Pipe_WaitUntilReady+0x3e>
     ae4:	82 e0       	ldi	r24, 0x02	; 2
     ae6:	08 95       	ret
     ae8:	80 91 a2 00 	lds	r24, 0x00A2
     aec:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     af0:	84 17       	cp	r24, r20
     af2:	95 07       	cpc	r25, r21
     af4:	f9 f2       	breq	.-66     	; 0xab4 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     af6:	22 23       	and	r18, r18
     af8:	11 f4       	brne	.+4      	; 0xafe <Pipe_WaitUntilReady+0x54>
     afa:	83 e0       	ldi	r24, 0x03	; 3
     afc:	08 95       	ret
     afe:	21 50       	subi	r18, 0x01	; 1
     b00:	ac 01       	movw	r20, r24
     b02:	d8 cf       	rjmp	.-80     	; 0xab4 <Pipe_WaitUntilReady+0xa>
     b04:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     b06:	08 95       	ret

00000b08 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     b08:	70 d0       	rcall	.+224    	; 0xbea <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b0a:	77 d0       	rcall	.+238    	; 0xbfa <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     b0c:	80 91 d8 00 	lds	r24, 0x00D8
     b10:	8f 77       	andi	r24, 0x7F	; 127
     b12:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     b16:	80 91 d8 00 	lds	r24, 0x00D8
     b1a:	80 68       	ori	r24, 0x80	; 128
     b1c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     b20:	80 91 d8 00 	lds	r24, 0x00D8
     b24:	8f 7d       	andi	r24, 0xDF	; 223
     b26:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     b2a:	80 91 d7 00 	lds	r24, 0x00D7
     b2e:	8f 77       	andi	r24, 0x7F	; 127
     b30:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     b34:	8c e0       	ldi	r24, 0x0C	; 12
     b36:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     b38:	8e e0       	ldi	r24, 0x0E	; 14
     b3a:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     b3c:	09 b4       	in	r0, 0x29	; 41
     b3e:	00 fe       	sbrs	r0, 0
     b40:	fd cf       	rjmp	.-6      	; 0xb3c <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	80 93 2e 01 	sts	0x012E, r24
	USB_Host_ConfigurationNumber = 0;
     b48:	10 92 24 01 	sts	0x0124, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     b4c:	80 e4       	ldi	r24, 0x40	; 64
     b4e:	80 93 1d 01 	sts	0x011D, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     b52:	80 91 d8 00 	lds	r24, 0x00D8
     b56:	80 64       	ori	r24, 0x40	; 64
     b58:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b5c:	80 91 dd 00 	lds	r24, 0x00DD
     b60:	81 60       	ori	r24, 0x01	; 1
     b62:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     b66:	80 91 dd 00 	lds	r24, 0x00DD
     b6a:	84 60       	ori	r24, 0x04	; 4
     b6c:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     b70:	80 91 d7 00 	lds	r24, 0x00D7
     b74:	8f 7e       	andi	r24, 0xEF	; 239
     b76:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     b7a:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     b7c:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     b7e:	80 91 de 00 	lds	r24, 0x00DE
     b82:	81 60       	ori	r24, 0x01	; 1
     b84:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     b88:	80 91 de 00 	lds	r24, 0x00DE
     b8c:	84 60       	ori	r24, 0x04	; 4
     b8e:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     b92:	80 91 e0 00 	lds	r24, 0x00E0
     b96:	8e 7f       	andi	r24, 0xFE	; 254
     b98:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     b9c:	80 91 d8 00 	lds	r24, 0x00D8
     ba0:	80 61       	ori	r24, 0x10	; 16
     ba2:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     ba6:	08 95       	ret

00000ba8 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     ba8:	e7 ed       	ldi	r30, 0xD7	; 215
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	81 60       	ori	r24, 0x01	; 1
     bb0:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	80 93 25 01 	sts	0x0125, r24

	USB_ResetInterface();
}
     bb8:	a7 cf       	rjmp	.-178    	; 0xb08 <USB_ResetInterface>

00000bba <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     bba:	17 d0       	rcall	.+46     	; 0xbea <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     bbc:	1e d0       	rcall	.+60     	; 0xbfa <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     bbe:	e0 ee       	ldi	r30, 0xE0	; 224
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	81 60       	ori	r24, 0x01	; 1
     bc6:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     bc8:	a8 ed       	ldi	r26, 0xD8	; 216
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	8c 91       	ld	r24, X
     bce:	8f 77       	andi	r24, 0x7F	; 127
     bd0:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     bd2:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     bd4:	e7 ed       	ldi	r30, 0xD7	; 215
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	8e 7f       	andi	r24, 0xFE	; 254
     bdc:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     bde:	8c 91       	ld	r24, X
     be0:	8f 7e       	andi	r24, 0xEF	; 239
     be2:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     be4:	10 92 25 01 	sts	0x0125, r1
}
     be8:	08 95       	ret

00000bea <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     bea:	e8 ed       	ldi	r30, 0xD8	; 216
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	8c 7f       	andi	r24, 0xFC	; 252
     bf2:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     bf4:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     bf8:	08 95       	ret

00000bfa <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     bfa:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     bfe:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     c02:	08 95       	ret

00000c04 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     c04:	1f 92       	push	r1
     c06:	0f 92       	push	r0
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	0f 92       	push	r0
     c0c:	0b b6       	in	r0, 0x3b	; 59
     c0e:	0f 92       	push	r0
     c10:	11 24       	eor	r1, r1
     c12:	2f 93       	push	r18
     c14:	3f 93       	push	r19
     c16:	4f 93       	push	r20
     c18:	5f 93       	push	r21
     c1a:	6f 93       	push	r22
     c1c:	7f 93       	push	r23
     c1e:	8f 93       	push	r24
     c20:	9f 93       	push	r25
     c22:	af 93       	push	r26
     c24:	bf 93       	push	r27
     c26:	ef 93       	push	r30
     c28:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     c2a:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     c2e:	85 ff       	sbrs	r24, 5
     c30:	0a c0       	rjmp	.+20     	; 0xc46 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     c32:	80 91 a0 00 	lds	r24, 0x00A0
     c36:	85 ff       	sbrs	r24, 5
     c38:	06 c0       	rjmp	.+12     	; 0xc46 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     c3a:	80 91 9f 00 	lds	r24, 0x009F
     c3e:	8f 7d       	andi	r24, 0xDF	; 223
     c40:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     c44:	10 d1       	rcall	.+544    	; 0xe66 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     c46:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     c4a:	81 ff       	sbrs	r24, 1
     c4c:	15 c0       	rjmp	.+42     	; 0xc78 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     c4e:	80 91 a0 00 	lds	r24, 0x00A0
     c52:	81 ff       	sbrs	r24, 1
     c54:	11 c0       	rjmp	.+34     	; 0xc78 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     c56:	80 91 9f 00 	lds	r24, 0x009F
     c5a:	8d 7f       	andi	r24, 0xFD	; 253
     c5c:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     c60:	80 91 9f 00 	lds	r24, 0x009F
     c64:	8e 7f       	andi	r24, 0xFE	; 254
     c66:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     c6a:	80 91 a0 00 	lds	r24, 0x00A0
     c6e:	8d 7f       	andi	r24, 0xFD	; 253
     c70:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     c74:	5c db       	rcall	.-2376   	; 0x32e <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     c76:	48 df       	rcall	.-368    	; 0xb08 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     c78:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     c7c:	81 ff       	sbrs	r24, 1
     c7e:	15 c0       	rjmp	.+42     	; 0xcaa <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     c80:	80 91 de 00 	lds	r24, 0x00DE
     c84:	81 ff       	sbrs	r24, 1
     c86:	11 c0       	rjmp	.+34     	; 0xcaa <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     c88:	80 91 df 00 	lds	r24, 0x00DF
     c8c:	8d 7f       	andi	r24, 0xFD	; 253
     c8e:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     c92:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c94:	80 91 dd 00 	lds	r24, 0x00DD
     c98:	81 60       	ori	r24, 0x01	; 1
     c9a:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	29 db       	rcall	.-2478   	; 0x2f4 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     ca2:	45 db       	rcall	.-2422   	; 0x32e <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	80 93 2e 01 	sts	0x012E, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     caa:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     cae:	80 ff       	sbrs	r24, 0
     cb0:	17 c0       	rjmp	.+46     	; 0xce0 <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     cb2:	80 91 de 00 	lds	r24, 0x00DE
     cb6:	80 ff       	sbrs	r24, 0
     cb8:	13 c0       	rjmp	.+38     	; 0xce0 <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     cba:	80 91 df 00 	lds	r24, 0x00DF
     cbe:	8e 7f       	andi	r24, 0xFE	; 254
     cc0:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     cc4:	80 91 de 00 	lds	r24, 0x00DE
     cc8:	8e 7f       	andi	r24, 0xFE	; 254
     cca:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     cce:	38 db       	rcall	.-2448   	; 0x340 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     cd0:	80 91 a0 00 	lds	r24, 0x00A0
     cd4:	82 60       	ori	r24, 0x02	; 2
     cd6:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     cda:	82 e0       	ldi	r24, 0x02	; 2
     cdc:	80 93 2e 01 	sts	0x012E, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     ce0:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     ce4:	82 ff       	sbrs	r24, 2
     ce6:	0e c0       	rjmp	.+28     	; 0xd04 <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     ce8:	80 91 de 00 	lds	r24, 0x00DE
     cec:	82 ff       	sbrs	r24, 2
     cee:	0a c0       	rjmp	.+20     	; 0xd04 <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     cf0:	80 91 df 00 	lds	r24, 0x00DF
     cf4:	8b 7f       	andi	r24, 0xFB	; 251
     cf6:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     cfa:	82 e0       	ldi	r24, 0x02	; 2
     cfc:	60 e0       	ldi	r22, 0x00	; 0
     cfe:	ce da       	rcall	.-2660   	; 0x29c <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     d00:	16 db       	rcall	.-2516   	; 0x32e <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     d02:	02 df       	rcall	.-508    	; 0xb08 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     d04:	ff 91       	pop	r31
     d06:	ef 91       	pop	r30
     d08:	bf 91       	pop	r27
     d0a:	af 91       	pop	r26
     d0c:	9f 91       	pop	r25
     d0e:	8f 91       	pop	r24
     d10:	7f 91       	pop	r23
     d12:	6f 91       	pop	r22
     d14:	5f 91       	pop	r21
     d16:	4f 91       	pop	r20
     d18:	3f 91       	pop	r19
     d1a:	2f 91       	pop	r18
     d1c:	0f 90       	pop	r0
     d1e:	0b be       	out	0x3b, r0	; 59
     d20:	0f 90       	pop	r0
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	0f 90       	pop	r0
     d26:	1f 90       	pop	r1
     d28:	18 95       	reti

00000d2a <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     d2a:	af 92       	push	r10
     d2c:	bf 92       	push	r11
     d2e:	cf 92       	push	r12
     d30:	df 92       	push	r13
     d32:	ef 92       	push	r14
     d34:	ff 92       	push	r15
     d36:	0f 93       	push	r16
     d38:	1f 93       	push	r17
     d3a:	cf 93       	push	r28
     d3c:	df 93       	push	r29
     d3e:	7c 01       	movw	r14, r24
     d40:	eb 01       	movw	r28, r22
     d42:	6a 01       	movw	r12, r20
     d44:	24 c0       	rjmp	.+72     	; 0xd8e <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     d46:	e8 81       	ld	r30, Y
     d48:	f9 81       	ldd	r31, Y+1	; 0x01
     d4a:	be 2e       	mov	r11, r30
     d4c:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     d4e:	80 81       	ld	r24, Z
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	98 01       	movw	r18, r16
     d54:	80 17       	cp	r24, r16
     d56:	91 07       	cpc	r25, r17
     d58:	08 f4       	brcc	.+2      	; 0xd5c <USB_GetNextDescriptorComp+0x32>
     d5a:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     d5c:	e2 0f       	add	r30, r18
     d5e:	f3 1f       	adc	r31, r19
     d60:	f9 83       	std	Y+1, r31	; 0x01
     d62:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     d64:	f7 01       	movw	r30, r14
     d66:	80 81       	ld	r24, Z
     d68:	91 81       	ldd	r25, Z+1	; 0x01
     d6a:	82 1b       	sub	r24, r18
     d6c:	93 0b       	sbc	r25, r19
     d6e:	91 83       	std	Z+1, r25	; 0x01
     d70:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     d72:	88 81       	ld	r24, Y
     d74:	99 81       	ldd	r25, Y+1	; 0x01
     d76:	f6 01       	movw	r30, r12
     d78:	09 95       	icall
     d7a:	82 30       	cpi	r24, 0x02	; 2
     d7c:	41 f0       	breq	.+16     	; 0xd8e <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     d7e:	81 30       	cpi	r24, 0x01	; 1
     d80:	69 f4       	brne	.+26     	; 0xd9c <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
     d82:	b8 82       	st	Y, r11
     d84:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
     d86:	f7 01       	movw	r30, r14
     d88:	11 83       	std	Z+1, r17	; 0x01
     d8a:	00 83       	st	Z, r16
     d8c:	07 c0       	rjmp	.+14     	; 0xd9c <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     d8e:	f7 01       	movw	r30, r14
     d90:	00 81       	ld	r16, Z
     d92:	11 81       	ldd	r17, Z+1	; 0x01
     d94:	01 15       	cp	r16, r1
     d96:	11 05       	cpc	r17, r1
     d98:	b1 f6       	brne	.-84     	; 0xd46 <USB_GetNextDescriptorComp+0x1c>
     d9a:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     d9c:	df 91       	pop	r29
     d9e:	cf 91       	pop	r28
     da0:	1f 91       	pop	r17
     da2:	0f 91       	pop	r16
     da4:	ff 90       	pop	r15
     da6:	ef 90       	pop	r14
     da8:	df 90       	pop	r13
     daa:	cf 90       	pop	r12
     dac:	bf 90       	pop	r11
     dae:	af 90       	pop	r10
     db0:	08 95       	ret

00000db2 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     db2:	cf 92       	push	r12
     db4:	df 92       	push	r13
     db6:	ef 92       	push	r14
     db8:	ff 92       	push	r15
     dba:	0f 93       	push	r16
     dbc:	1f 93       	push	r17
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	29 97       	sbiw	r28, 0x09	; 9
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	6b 01       	movw	r12, r22
     dd4:	8a 01       	movw	r16, r20
     dd6:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     dd8:	90 e8       	ldi	r25, 0x80	; 128
     dda:	90 93 26 01 	sts	0x0126, r25
     dde:	96 e0       	ldi	r25, 0x06	; 6
     de0:	90 93 27 01 	sts	0x0127, r25
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	92 60       	ori	r25, 0x02	; 2
     dea:	90 93 29 01 	sts	0x0129, r25
     dee:	80 93 28 01 	sts	0x0128, r24
     df2:	10 92 2b 01 	sts	0x012B, r1
     df6:	10 92 2a 01 	sts	0x012A, r1
     dfa:	89 e0       	ldi	r24, 0x09	; 9
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	90 93 2d 01 	sts	0x012D, r25
     e02:	80 93 2c 01 	sts	0x012C, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     e06:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     e0a:	ce 01       	movw	r24, r28
     e0c:	01 96       	adiw	r24, 0x01	; 1
     e0e:	55 d0       	rcall	.+170    	; 0xeba <USB_Host_SendControlRequest>
     e10:	28 2f       	mov	r18, r24
     e12:	88 23       	and	r24, r24
     e14:	c1 f4       	brne	.+48     	; 0xe46 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     e16:	8b 81       	ldd	r24, Y+3	; 0x03
     e18:	9c 81       	ldd	r25, Y+4	; 0x04
     e1a:	f6 01       	movw	r30, r12
     e1c:	91 83       	std	Z+1, r25	; 0x01
     e1e:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     e20:	e8 16       	cp	r14, r24
     e22:	f9 06       	cpc	r15, r25
     e24:	10 f4       	brcc	.+4      	; 0xe2a <USB_Host_GetDeviceConfigDescriptor+0x78>
     e26:	25 e0       	ldi	r18, 0x05	; 5
     e28:	0e c0       	rjmp	.+28     	; 0xe46 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     e2a:	90 93 2d 01 	sts	0x012D, r25
     e2e:	80 93 2c 01 	sts	0x012C, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     e32:	c8 01       	movw	r24, r16
     e34:	42 d0       	rcall	.+132    	; 0xeba <USB_Host_SendControlRequest>
     e36:	28 2f       	mov	r18, r24
     e38:	88 23       	and	r24, r24
     e3a:	29 f4       	brne	.+10     	; 0xe46 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     e3c:	f8 01       	movw	r30, r16
     e3e:	81 81       	ldd	r24, Z+1	; 0x01
     e40:	82 30       	cpi	r24, 0x02	; 2
     e42:	09 f0       	breq	.+2      	; 0xe46 <USB_Host_GetDeviceConfigDescriptor+0x94>
     e44:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     e46:	82 2f       	mov	r24, r18
     e48:	29 96       	adiw	r28, 0x09	; 9
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	f8 94       	cli
     e4e:	de bf       	out	0x3e, r29	; 62
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	cd bf       	out	0x3d, r28	; 61
     e54:	cf 91       	pop	r28
     e56:	df 91       	pop	r29
     e58:	1f 91       	pop	r17
     e5a:	0f 91       	pop	r16
     e5c:	ff 90       	pop	r15
     e5e:	ef 90       	pop	r14
     e60:	df 90       	pop	r13
     e62:	cf 90       	pop	r12
     e64:	08 95       	ret

00000e66 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     e66:	08 95       	ret

00000e68 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     e68:	1f 93       	push	r17
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	18 2f       	mov	r17, r24
     e70:	c8 ee       	ldi	r28, 0xE8	; 232
     e72:	d3 e0       	ldi	r29, 0x03	; 3
     e74:	09 c0       	rjmp	.+18     	; 0xe88 <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	de db       	rcall	.-2116   	; 0x636 <USB_Host_WaitMS>
     e7a:	88 23       	and	r24, r24
     e7c:	d1 f4       	brne	.+52     	; 0xeb2 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     e7e:	20 97       	sbiw	r28, 0x00	; 0
     e80:	11 f4       	brne	.+4      	; 0xe86 <USB_Host_WaitForIOS+0x1e>
     e82:	84 e0       	ldi	r24, 0x04	; 4
     e84:	16 c0       	rjmp	.+44     	; 0xeb2 <USB_Host_WaitForIOS+0x4a>
     e86:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     e88:	11 23       	and	r17, r17
     e8a:	29 f4       	brne	.+10     	; 0xe96 <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     e8c:	80 91 a6 00 	lds	r24, 0x00A6
     e90:	83 ff       	sbrs	r24, 3
     e92:	f1 cf       	rjmp	.-30     	; 0xe76 <USB_Host_WaitForIOS+0xe>
     e94:	0d c0       	rjmp	.+26     	; 0xeb0 <USB_Host_WaitForIOS+0x48>
     e96:	11 30       	cpi	r17, 0x01	; 1
     e98:	29 f4       	brne	.+10     	; 0xea4 <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     e9a:	80 91 a6 00 	lds	r24, 0x00A6
     e9e:	80 ff       	sbrs	r24, 0
     ea0:	ea cf       	rjmp	.-44     	; 0xe76 <USB_Host_WaitForIOS+0xe>
     ea2:	06 c0       	rjmp	.+12     	; 0xeb0 <USB_Host_WaitForIOS+0x48>
     ea4:	12 30       	cpi	r17, 0x02	; 2
     ea6:	39 f7       	brne	.-50     	; 0xe76 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     ea8:	80 91 a6 00 	lds	r24, 0x00A6
     eac:	82 ff       	sbrs	r24, 2
     eae:	e3 cf       	rjmp	.-58     	; 0xe76 <USB_Host_WaitForIOS+0xe>
     eb0:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
     eb2:	df 91       	pop	r29
     eb4:	cf 91       	pop	r28
     eb6:	1f 91       	pop	r17
     eb8:	08 95       	ret

00000eba <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     eba:	ff 92       	push	r15
     ebc:	0f 93       	push	r16
     ebe:	1f 93       	push	r17
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
     ec4:	18 2f       	mov	r17, r24
     ec6:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     ec8:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     ecc:	c0 91 2c 01 	lds	r28, 0x012C
     ed0:	d0 91 2d 01 	lds	r29, 0x012D
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     ed4:	80 91 9e 00 	lds	r24, 0x009E
     ed8:	81 60       	ori	r24, 0x01	; 1
     eda:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	aa db       	rcall	.-2220   	; 0x636 <USB_Host_WaitMS>
     ee2:	98 2f       	mov	r25, r24
     ee4:	88 23       	and	r24, r24
     ee6:	09 f0       	breq	.+2      	; 0xeea <USB_Host_SendControlRequest+0x30>
     ee8:	ee c0       	rjmp	.+476    	; 0x10c6 <USB_Host_SendControlRequest+0x20c>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     eea:	80 91 aa 00 	lds	r24, 0x00AA
     eee:	8f 7c       	andi	r24, 0xCF	; 207
     ef0:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     ef4:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     ef8:	80 91 a6 00 	lds	r24, 0x00A6
     efc:	8f 7e       	andi	r24, 0xEF	; 239
     efe:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f02:	80 91 a9 00 	lds	r24, 0x00A9
     f06:	8f 7b       	andi	r24, 0xBF	; 191
     f08:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearError();

	Pipe_Unfreeze();

	Pipe_Write_8(USB_ControlRequest.bmRequestType);
     f0c:	80 91 26 01 	lds	r24, 0x0126
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     f10:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
     f14:	80 91 27 01 	lds	r24, 0x0127
     f18:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
     f1c:	80 91 28 01 	lds	r24, 0x0128
     f20:	90 91 29 01 	lds	r25, 0x0129
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
     f24:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
     f28:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
     f2c:	80 91 2a 01 	lds	r24, 0x012A
     f30:	90 91 2b 01 	lds	r25, 0x012B
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
     f34:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
     f38:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
     f3c:	80 91 2c 01 	lds	r24, 0x012C
     f40:	90 91 2d 01 	lds	r25, 0x012D
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
     f44:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
     f48:	90 93 af 00 	sts	0x00AF, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     f4c:	80 91 a6 00 	lds	r24, 0x00A6
     f50:	87 77       	andi	r24, 0x77	; 119
     f52:	80 93 a6 00 	sts	0x00A6, r24

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	87 df       	rcall	.-242    	; 0xe68 <USB_Host_WaitForIOS>
     f5a:	98 2f       	mov	r25, r24
     f5c:	88 23       	and	r24, r24
     f5e:	09 f0       	breq	.+2      	; 0xf62 <USB_Host_SendControlRequest+0xa8>
     f60:	b2 c0       	rjmp	.+356    	; 0x10c6 <USB_Host_SendControlRequest+0x20c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f62:	80 91 a9 00 	lds	r24, 0x00A9
     f66:	80 64       	ori	r24, 0x40	; 64
     f68:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	63 db       	rcall	.-2362   	; 0x636 <USB_Host_WaitMS>
     f70:	98 2f       	mov	r25, r24
     f72:	88 23       	and	r24, r24
     f74:	09 f0       	breq	.+2      	; 0xf78 <USB_Host_SendControlRequest+0xbe>
     f76:	a7 c0       	rjmp	.+334    	; 0x10c6 <USB_Host_SendControlRequest+0x20c>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
     f78:	21 2f       	mov	r18, r17
     f7a:	30 2f       	mov	r19, r16
     f7c:	c9 01       	movw	r24, r18
     f7e:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     f80:	80 91 26 01 	lds	r24, 0x0126
     f84:	87 ff       	sbrs	r24, 7
     f86:	52 c0       	rjmp	.+164    	; 0x102c <USB_Host_SendControlRequest+0x172>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f88:	80 91 aa 00 	lds	r24, 0x00AA
     f8c:	8f 7c       	andi	r24, 0xCF	; 207
     f8e:	80 61       	ori	r24, 0x10	; 16
     f90:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     f94:	01 15       	cp	r16, r1
     f96:	11 05       	cpc	r17, r1
     f98:	69 f5       	brne	.+90     	; 0xff4 <USB_Host_SendControlRequest+0x13a>
     f9a:	2e c0       	rjmp	.+92     	; 0xff8 <USB_Host_SendControlRequest+0x13e>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f9c:	80 91 a9 00 	lds	r24, 0x00A9
     fa0:	8f 7b       	andi	r24, 0xBF	; 191
     fa2:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	5f df       	rcall	.-322    	; 0xe68 <USB_Host_WaitForIOS>
     faa:	98 2f       	mov	r25, r24
     fac:	88 23       	and	r24, r24
     fae:	09 f0       	breq	.+2      	; 0xfb2 <USB_Host_SendControlRequest+0xf8>
     fb0:	8a c0       	rjmp	.+276    	; 0x10c6 <USB_Host_SendControlRequest+0x20c>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     fb2:	80 91 f6 00 	lds	r24, 0x00F6
     fb6:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
     fba:	89 2b       	or	r24, r25
     fbc:	49 f4       	brne	.+18     	; 0xfd0 <USB_Host_SendControlRequest+0x116>
     fbe:	c0 e0       	ldi	r28, 0x00	; 0
     fc0:	d0 e0       	ldi	r29, 0x00	; 0
     fc2:	06 c0       	rjmp	.+12     	; 0xfd0 <USB_Host_SendControlRequest+0x116>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     fc4:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
     fc8:	f8 01       	movw	r30, r16
     fca:	81 93       	st	Z+, r24
     fcc:	8f 01       	movw	r16, r30
					DataLen--;
     fce:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     fd0:	80 91 f6 00 	lds	r24, 0x00F6
     fd4:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
     fd8:	89 2b       	or	r24, r25
     fda:	11 f0       	breq	.+4      	; 0xfe0 <USB_Host_SendControlRequest+0x126>
     fdc:	20 97       	sbiw	r28, 0x00	; 0
     fde:	91 f7       	brne	.-28     	; 0xfc4 <USB_Host_SendControlRequest+0x10a>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     fe0:	80 91 a9 00 	lds	r24, 0x00A9
     fe4:	80 64       	ori	r24, 0x40	; 64
     fe6:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     fea:	80 91 a6 00 	lds	r24, 0x00A6
     fee:	8e 77       	andi	r24, 0x7E	; 126
     ff0:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
     ff4:	20 97       	sbiw	r28, 0x00	; 0
     ff6:	91 f6       	brne	.-92     	; 0xf9c <USB_Host_SendControlRequest+0xe2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     ff8:	80 91 aa 00 	lds	r24, 0x00AA
     ffc:	8f 7c       	andi	r24, 0xCF	; 207
     ffe:	80 62       	ori	r24, 0x20	; 32
    1000:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1004:	80 91 a9 00 	lds	r24, 0x00A9
    1008:	8f 7b       	andi	r24, 0xBF	; 191
    100a:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    100e:	82 e0       	ldi	r24, 0x02	; 2
    1010:	2b df       	rcall	.-426    	; 0xe68 <USB_Host_WaitForIOS>
    1012:	98 2f       	mov	r25, r24
    1014:	88 23       	and	r24, r24
    1016:	09 f0       	breq	.+2      	; 0x101a <USB_Host_SendControlRequest+0x160>
    1018:	56 c0       	rjmp	.+172    	; 0x10c6 <USB_Host_SendControlRequest+0x20c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    101a:	80 91 a6 00 	lds	r24, 0x00A6
    101e:	8b 77       	andi	r24, 0x7B	; 123
    1020:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1024:	82 e0       	ldi	r24, 0x02	; 2
    1026:	20 df       	rcall	.-448    	; 0xe68 <USB_Host_WaitForIOS>
    1028:	98 2f       	mov	r25, r24
    102a:	4d c0       	rjmp	.+154    	; 0x10c6 <USB_Host_SendControlRequest+0x20c>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    102c:	01 15       	cp	r16, r1
    102e:	11 05       	cpc	r17, r1
    1030:	a9 f1       	breq	.+106    	; 0x109c <USB_Host_SendControlRequest+0x1e2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1032:	80 91 aa 00 	lds	r24, 0x00AA
    1036:	8f 7c       	andi	r24, 0xCF	; 207
    1038:	80 62       	ori	r24, 0x20	; 32
    103a:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    103e:	80 91 a9 00 	lds	r24, 0x00A9
    1042:	8f 7b       	andi	r24, 0xBF	; 191
    1044:	80 93 a9 00 	sts	0x00A9, r24
    1048:	1d c0       	rjmp	.+58     	; 0x1084 <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    104a:	82 e0       	ldi	r24, 0x02	; 2
    104c:	0d df       	rcall	.-486    	; 0xe68 <USB_Host_WaitForIOS>
    104e:	98 2f       	mov	r25, r24
    1050:	88 23       	and	r24, r24
    1052:	c9 f5       	brne	.+114    	; 0x10c6 <USB_Host_SendControlRequest+0x20c>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1054:	80 91 1d 01 	lds	r24, 0x011D
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	07 c0       	rjmp	.+14     	; 0x106c <USB_Host_SendControlRequest+0x1b2>
				{
					Pipe_Write_8(*(DataStream++));
    105e:	f8 01       	movw	r30, r16
    1060:	81 91       	ld	r24, Z+
    1062:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1064:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1068:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    106a:	39 f0       	breq	.+14     	; 0x107a <USB_Host_SendControlRequest+0x1c0>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    106c:	80 91 f6 00 	lds	r24, 0x00F6
    1070:	90 91 f7 00 	lds	r25, 0x00F7
    1074:	82 17       	cp	r24, r18
    1076:	93 07       	cpc	r25, r19
    1078:	90 f3       	brcs	.-28     	; 0x105e <USB_Host_SendControlRequest+0x1a4>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    107a:	80 91 a6 00 	lds	r24, 0x00A6
    107e:	8b 77       	andi	r24, 0x7B	; 123
    1080:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1084:	20 97       	sbiw	r28, 0x00	; 0
    1086:	09 f7       	brne	.-62     	; 0x104a <USB_Host_SendControlRequest+0x190>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1088:	82 e0       	ldi	r24, 0x02	; 2
    108a:	ee de       	rcall	.-548    	; 0xe68 <USB_Host_WaitForIOS>
    108c:	98 2f       	mov	r25, r24
    108e:	88 23       	and	r24, r24
    1090:	d1 f4       	brne	.+52     	; 0x10c6 <USB_Host_SendControlRequest+0x20c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1092:	80 91 a9 00 	lds	r24, 0x00A9
    1096:	80 64       	ori	r24, 0x40	; 64
    1098:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    109c:	80 91 aa 00 	lds	r24, 0x00AA
    10a0:	8f 7c       	andi	r24, 0xCF	; 207
    10a2:	80 61       	ori	r24, 0x10	; 16
    10a4:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10a8:	80 91 a9 00 	lds	r24, 0x00A9
    10ac:	8f 7b       	andi	r24, 0xBF	; 191
    10ae:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	d9 de       	rcall	.-590    	; 0xe68 <USB_Host_WaitForIOS>
    10b6:	98 2f       	mov	r25, r24
    10b8:	88 23       	and	r24, r24
    10ba:	29 f4       	brne	.+10     	; 0x10c6 <USB_Host_SendControlRequest+0x20c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    10bc:	80 91 a6 00 	lds	r24, 0x00A6
    10c0:	8e 77       	andi	r24, 0x7E	; 126
    10c2:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10c6:	80 91 a9 00 	lds	r24, 0x00A9
    10ca:	80 64       	ori	r24, 0x40	; 64
    10cc:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    10d0:	f0 fc       	sbrc	r15, 0
    10d2:	05 c0       	rjmp	.+10     	; 0x10de <USB_Host_SendControlRequest+0x224>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    10d4:	80 91 9e 00 	lds	r24, 0x009E
    10d8:	8e 7f       	andi	r24, 0xFE	; 254
    10da:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    10e4:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    10e8:	89 2f       	mov	r24, r25
    10ea:	df 91       	pop	r29
    10ec:	cf 91       	pop	r28
    10ee:	1f 91       	pop	r17
    10f0:	0f 91       	pop	r16
    10f2:	ff 90       	pop	r15
    10f4:	08 95       	ret

000010f6 <USB_Host_SetInterfaceAltSetting>:
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
	USB_ControlRequest = (USB_Request_Header_t)
    10f6:	e6 e2       	ldi	r30, 0x26	; 38
    10f8:	f1 e0       	ldi	r31, 0x01	; 1
    10fa:	91 e0       	ldi	r25, 0x01	; 1
    10fc:	90 93 26 01 	sts	0x0126, r25
    1100:	9b e0       	ldi	r25, 0x0B	; 11
    1102:	90 93 27 01 	sts	0x0127, r25
    1106:	60 93 28 01 	sts	0x0128, r22
    110a:	13 82       	std	Z+3, r1	; 0x03
    110c:	80 93 2a 01 	sts	0x012A, r24
    1110:	15 82       	std	Z+5, r1	; 0x05
    1112:	10 92 2d 01 	sts	0x012D, r1
    1116:	10 92 2c 01 	sts	0x012C, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    111a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	90 e0       	ldi	r25, 0x00	; 0
}
    1122:	cb ce       	rjmp	.-618    	; 0xeba <USB_Host_SendControlRequest>

00001124 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1124:	1f 93       	push	r17
    1126:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1128:	10 92 26 01 	sts	0x0126, r1
    112c:	89 e0       	ldi	r24, 0x09	; 9
    112e:	80 93 27 01 	sts	0x0127, r24
    1132:	10 93 28 01 	sts	0x0128, r17
    1136:	10 92 29 01 	sts	0x0129, r1
    113a:	10 92 2b 01 	sts	0x012B, r1
    113e:	10 92 2a 01 	sts	0x012A, r1
    1142:	10 92 2d 01 	sts	0x012D, r1
    1146:	10 92 2c 01 	sts	0x012C, r1
    114a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	b3 de       	rcall	.-666    	; 0xeba <USB_Host_SendControlRequest>
    1154:	88 23       	and	r24, r24
    1156:	49 f4       	brne	.+18     	; 0x116a <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1158:	10 93 24 01 	sts	0x0124, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    115c:	11 23       	and	r17, r17
    115e:	11 f4       	brne	.+4      	; 0x1164 <USB_Host_SetDeviceConfiguration+0x40>
    1160:	9a e0       	ldi	r25, 0x0A	; 10
    1162:	01 c0       	rjmp	.+2      	; 0x1166 <USB_Host_SetDeviceConfiguration+0x42>
    1164:	9b e0       	ldi	r25, 0x0B	; 11
    1166:	90 93 2e 01 	sts	0x012E, r25
	}

	return ErrorCode;
}
    116a:	1f 91       	pop	r17
    116c:	08 95       	ret

0000116e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    116e:	ff 92       	push	r15
    1170:	0f 93       	push	r16
    1172:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1174:	07 ea       	ldi	r16, 0xA7	; 167
    1176:	10 e0       	ldi	r17, 0x00	; 0
    1178:	f8 01       	movw	r30, r16
    117a:	f0 80       	ld	r15, Z
    117c:	f7 e0       	ldi	r31, 0x07	; 7
    117e:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1180:	f8 01       	movw	r30, r16
    1182:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1184:	f5 da       	rcall	.-2582   	; 0x770 <USB_Host_ProcessNextHostState>
    1186:	f8 01       	movw	r30, r16
    1188:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    118a:	1f 91       	pop	r17
    118c:	0f 91       	pop	r16
    118e:	ff 90       	pop	r15
    1190:	08 95       	ret

00001192 <DCOMP_Audio_Host_NextAudioControlInterface>:
	
	return AUDIO_ENUMERROR_NoError;
}

static uint8_t DCOMP_Audio_Host_NextAudioControlInterface(void* CurrentDescriptor)
{
    1192:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1194:	81 81       	ldd	r24, Z+1	; 0x01
    1196:	84 30       	cpi	r24, 0x04	; 4
    1198:	41 f4       	brne	.+16     	; 0x11aa <DCOMP_Audio_Host_NextAudioControlInterface+0x18>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
    119a:	85 81       	ldd	r24, Z+5	; 0x05
    119c:	81 30       	cpi	r24, 0x01	; 1
    119e:	29 f4       	brne	.+10     	; 0x11aa <DCOMP_Audio_Host_NextAudioControlInterface+0x18>
    11a0:	86 81       	ldd	r24, Z+6	; 0x06
    11a2:	81 30       	cpi	r24, 0x01	; 1
    11a4:	11 f4       	brne	.+4      	; 0x11aa <DCOMP_Audio_Host_NextAudioControlInterface+0x18>
    11a6:	87 81       	ldd	r24, Z+7	; 0x07
    11a8:	81 11       	cpse	r24, r1
    11aa:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    11ac:	08 95       	ret

000011ae <DCOMP_Audio_Host_NextAudioStreamInterface>:

static uint8_t DCOMP_Audio_Host_NextAudioStreamInterface(void* CurrentDescriptor)
{
    11ae:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    11b0:	81 81       	ldd	r24, Z+1	; 0x01
    11b2:	84 30       	cpi	r24, 0x04	; 4
    11b4:	41 f4       	brne	.+16     	; 0x11c6 <DCOMP_Audio_Host_NextAudioStreamInterface+0x18>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
    11b6:	85 81       	ldd	r24, Z+5	; 0x05
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	29 f4       	brne	.+10     	; 0x11c6 <DCOMP_Audio_Host_NextAudioStreamInterface+0x18>
    11bc:	86 81       	ldd	r24, Z+6	; 0x06
    11be:	82 30       	cpi	r24, 0x02	; 2
    11c0:	11 f4       	brne	.+4      	; 0x11c6 <DCOMP_Audio_Host_NextAudioStreamInterface+0x18>
    11c2:	87 81       	ldd	r24, Z+7	; 0x07
    11c4:	81 11       	cpse	r24, r1
    11c6:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    11c8:	08 95       	ret

000011ca <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint>:

static uint8_t DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint(void* CurrentDescriptor)
{
    11ca:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    11cc:	81 81       	ldd	r24, Z+1	; 0x01
    11ce:	85 30       	cpi	r24, 0x05	; 5
    11d0:	31 f4       	brne	.+12     	; 0x11de <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_ISOCHRONOUS)
    11d2:	83 81       	ldd	r24, Z+3	; 0x03
    11d4:	83 70       	andi	r24, 0x03	; 3
    11d6:	81 30       	cpi	r24, 0x01	; 1
    11d8:	31 f4       	brne	.+12     	; 0x11e6 <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint+0x1c>
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	08 95       	ret
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    11de:	84 30       	cpi	r24, 0x04	; 4
    11e0:	11 f4       	brne	.+4      	; 0x11e6 <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint+0x1c>
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	08 95       	ret
    11e6:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    11e8:	08 95       	ret

000011ea <Audio_Host_GetSetEndpointProperty>:
			                              const uint8_t DataPipeIndex,
			                              const uint8_t EndpointProperty,
			                              const uint8_t EndpointControl,
			                              const uint16_t DataLength,
			                              void* const Data)
{
    11ea:	ef 92       	push	r14
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
	if (!(AudioInterfaceInfo->State.IsActive))
    11f2:	fc 01       	movw	r30, r24
    11f4:	82 81       	ldd	r24, Z+2	; 0x02
    11f6:	88 23       	and	r24, r24
    11f8:	11 f4       	brne	.+4      	; 0x11fe <Audio_Host_GetSetEndpointProperty+0x14>
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	27 c0       	rjmp	.+78     	; 0x124c <Audio_Host_GetSetEndpointProperty+0x62>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	uint8_t RequestType;
	uint8_t EndpointAddress;

	if (EndpointProperty & 0x80)
    11fe:	47 fd       	sbrc	r20, 7
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <Audio_Host_GetSetEndpointProperty+0x1c>
    1202:	32 e2       	ldi	r19, 0x22	; 34
    1204:	01 c0       	rjmp	.+2      	; 0x1208 <Audio_Host_GetSetEndpointProperty+0x1e>
    1206:	32 ea       	ldi	r19, 0xA2	; 162
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1208:	60 93 a7 00 	sts	0x00A7, r22
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    120c:	90 91 aa 00 	lds	r25, 0x00AA
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    1210:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    1214:	80 73       	andi	r24, 0x30	; 48
    1216:	80 31       	cpi	r24, 0x10	; 16
    1218:	11 f0       	breq	.+4      	; 0x121e <Audio_Host_GetSetEndpointProperty+0x34>
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	01 c0       	rjmp	.+2      	; 0x1220 <Audio_Host_GetSetEndpointProperty+0x36>
    121e:	80 e8       	ldi	r24, 0x80	; 128
	  RequestType = (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT);
	  
	Pipe_SelectPipe(DataPipeIndex);
	EndpointAddress = Pipe_GetBoundEndpointAddress();

	USB_ControlRequest = (USB_Request_Header_t)
    1220:	30 93 26 01 	sts	0x0126, r19
    1224:	40 93 27 01 	sts	0x0127, r20
    1228:	10 92 28 01 	sts	0x0128, r1
    122c:	20 93 29 01 	sts	0x0129, r18
    1230:	9f 70       	andi	r25, 0x0F	; 15
    1232:	89 2b       	or	r24, r25
    1234:	80 93 2a 01 	sts	0x012A, r24
    1238:	10 92 2b 01 	sts	0x012B, r1
    123c:	10 93 2d 01 	sts	0x012D, r17
    1240:	00 93 2c 01 	sts	0x012C, r16
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1244:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = DataLength,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Data);
    1248:	c7 01       	movw	r24, r14
    124a:	37 de       	rcall	.-914    	; 0xeba <USB_Host_SendControlRequest>
}
    124c:	1f 91       	pop	r17
    124e:	0f 91       	pop	r16
    1250:	ff 90       	pop	r15
    1252:	ef 90       	pop	r14
    1254:	08 95       	ret

00001256 <Audio_Host_StartStopStreaming>:
	return DESCRIPTOR_SEARCH_NotFound;
}

uint8_t Audio_Host_StartStopStreaming(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo,
			                          const bool EnableStreaming)
{
    1256:	fc 01       	movw	r30, r24
	if (!(AudioInterfaceInfo->State.IsActive))
    1258:	82 81       	ldd	r24, Z+2	; 0x02
    125a:	88 23       	and	r24, r24
    125c:	11 f4       	brne	.+4      	; 0x1262 <Audio_Host_StartStopStreaming+0xc>
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	08 95       	ret
	  return HOST_SENDCONTROL_DeviceDisconnected;

	return USB_Host_SetInterfaceAltSetting(AudioInterfaceInfo->State.StreamingInterfaceNumber,
    1262:	84 81       	ldd	r24, Z+4	; 0x04
    1264:	61 11       	cpse	r22, r1
    1266:	65 81       	ldd	r22, Z+5	; 0x05
	                                       EnableStreaming ? AudioInterfaceInfo->State.EnabledStreamingAltIndex : 0);
}
    1268:	46 cf       	rjmp	.-372    	; 0x10f6 <USB_Host_SetInterfaceAltSetting>

0000126a <Audio_Host_ConfigurePipes>:
#include "Audio.h"

uint8_t Audio_Host_ConfigurePipes(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo,
                                  uint16_t ConfigDescriptorSize,
                                  void* ConfigDescriptorData)
{
    126a:	2f 92       	push	r2
    126c:	3f 92       	push	r3
    126e:	4f 92       	push	r4
    1270:	5f 92       	push	r5
    1272:	6f 92       	push	r6
    1274:	7f 92       	push	r7
    1276:	8f 92       	push	r8
    1278:	9f 92       	push	r9
    127a:	af 92       	push	r10
    127c:	bf 92       	push	r11
    127e:	cf 92       	push	r12
    1280:	df 92       	push	r13
    1282:	ef 92       	push	r14
    1284:	ff 92       	push	r15
    1286:	0f 93       	push	r16
    1288:	1f 93       	push	r17
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	00 d0       	rcall	.+0      	; 0x1290 <Audio_Host_ConfigurePipes+0x26>
    1290:	00 d0       	rcall	.+0      	; 0x1292 <Audio_Host_ConfigurePipes+0x28>
    1292:	0f 92       	push	r0
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	6c 01       	movw	r12, r24
    129a:	7a 83       	std	Y+2, r23	; 0x02
    129c:	69 83       	std	Y+1, r22	; 0x01
    129e:	5c 83       	std	Y+4, r21	; 0x04
    12a0:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint          = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint         = NULL;
	USB_Descriptor_Interface_t* AudioControlInterface   = NULL;
	USB_Descriptor_Interface_t* AudioStreamingInterface = NULL;

	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));
    12a2:	02 96       	adiw	r24, 0x02	; 2
    12a4:	fc 01       	movw	r30, r24
    12a6:	88 e0       	ldi	r24, 0x08	; 8
    12a8:	df 01       	movw	r26, r30
    12aa:	1d 92       	st	X+, r1
    12ac:	8a 95       	dec	r24
    12ae:	e9 f7       	brne	.-6      	; 0x12aa <Audio_Host_ConfigurePipes+0x40>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    12b0:	eb 81       	ldd	r30, Y+3	; 0x03
    12b2:	fc 81       	ldd	r31, Y+4	; 0x04
    12b4:	81 81       	ldd	r24, Z+1	; 0x01
    12b6:	82 30       	cpi	r24, 0x02	; 2
    12b8:	11 f0       	breq	.+4      	; 0x12be <Audio_Host_ConfigurePipes+0x54>
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	96 c0       	rjmp	.+300    	; 0x13ea <Audio_Host_ConfigurePipes+0x180>
    12be:	88 24       	eor	r8, r8
    12c0:	99 24       	eor	r9, r9
    12c2:	aa 24       	eor	r10, r10
    12c4:	bb 24       	eor	r11, r11
    12c6:	44 24       	eor	r4, r4
    12c8:	55 24       	eor	r5, r5
    12ca:	66 24       	eor	r6, r6
    12cc:	77 24       	eor	r7, r7
		{
			if (!(AudioControlInterface) ||
			    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_Audio_Host_NextAudioStreamInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    12ce:	43 e0       	ldi	r20, 0x03	; 3
    12d0:	24 2e       	mov	r2, r20
    12d2:	31 2c       	mov	r3, r1
    12d4:	2c 0e       	add	r2, r28
    12d6:	3d 1e       	adc	r3, r29
    12d8:	7e 01       	movw	r14, r28
    12da:	08 94       	sec
    12dc:	e1 1c       	adc	r14, r1
    12de:	f1 1c       	adc	r15, r1
    12e0:	31 c0       	rjmp	.+98     	; 0x1344 <Audio_Host_ConfigurePipes+0xda>
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;

	while ((AudioInterfaceInfo->Config.DataINPipeNumber  && !(DataINEndpoint)) ||
	       (AudioInterfaceInfo->Config.DataOUTPipeNumber && !(DataOUTEndpoint)))
	{
		if (!(AudioControlInterface) ||
    12e2:	41 14       	cp	r4, r1
    12e4:	51 04       	cpc	r5, r1
    12e6:	49 f0       	breq	.+18     	; 0x12fa <Audio_Host_ConfigurePipes+0x90>
    12e8:	c7 01       	movw	r24, r14
    12ea:	b1 01       	movw	r22, r2
    12ec:	45 ee       	ldi	r20, 0xE5	; 229
    12ee:	58 e0       	ldi	r21, 0x08	; 8
    12f0:	1c dd       	rcall	.-1480   	; 0xd2a <USB_GetNextDescriptorComp>
    12f2:	88 23       	and	r24, r24
    12f4:	09 f0       	breq	.+2      	; 0x12f8 <Audio_Host_ConfigurePipes+0x8e>
    12f6:	91 c0       	rjmp	.+290    	; 0x141a <Audio_Host_ConfigurePipes+0x1b0>
    12f8:	1d c0       	rjmp	.+58     	; 0x1334 <Audio_Host_ConfigurePipes+0xca>
		{
			if (!(AudioControlInterface) ||
			    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_Audio_Host_NextAudioStreamInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    12fa:	c7 01       	movw	r24, r14
    12fc:	b1 01       	movw	r22, r2
    12fe:	49 ec       	ldi	r20, 0xC9	; 201
    1300:	58 e0       	ldi	r21, 0x08	; 8
    1302:	13 dd       	rcall	.-1498   	; 0xd2a <USB_GetNextDescriptorComp>
    1304:	88 23       	and	r24, r24
    1306:	09 f0       	breq	.+2      	; 0x130a <Audio_Host_ConfigurePipes+0xa0>
    1308:	6f c0       	rjmp	.+222    	; 0x13e8 <Audio_Host_ConfigurePipes+0x17e>
				                              DCOMP_Audio_Host_NextAudioControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return AUDIO_ENUMERROR_NoCompatibleInterfaceFound;
				}

				AudioControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);			
    130a:	1b 81       	ldd	r17, Y+3	; 0x03
    130c:	0c 81       	ldd	r16, Y+4	; 0x04

				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    130e:	c7 01       	movw	r24, r14
    1310:	b1 01       	movw	r22, r2
    1312:	47 ed       	ldi	r20, 0xD7	; 215
    1314:	58 e0       	ldi	r21, 0x08	; 8
    1316:	09 dd       	rcall	.-1518   	; 0xd2a <USB_GetNextDescriptorComp>
    1318:	88 23       	and	r24, r24
    131a:	09 f0       	breq	.+2      	; 0x131e <Audio_Host_ConfigurePipes+0xb4>
    131c:	65 c0       	rjmp	.+202    	; 0x13e8 <Audio_Host_ConfigurePipes+0x17e>
				                              DCOMP_Audio_Host_NextAudioControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return AUDIO_ENUMERROR_NoCompatibleInterfaceFound;
				}

				AudioControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);			
    131e:	81 2f       	mov	r24, r17
    1320:	90 2f       	mov	r25, r16
    1322:	9c 01       	movw	r18, r24
    1324:	29 01       	movw	r4, r18
				{
					return AUDIO_ENUMERROR_NoCompatibleInterfaceFound;
				}
			}

			AudioStreamingInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1326:	6b 80       	ldd	r6, Y+3	; 0x03
    1328:	7c 80       	ldd	r7, Y+4	; 0x04
    132a:	88 24       	eor	r8, r8
    132c:	99 24       	eor	r9, r9
    132e:	aa 24       	eor	r10, r10
    1330:	bb 24       	eor	r11, r11
    1332:	08 c0       	rjmp	.+16     	; 0x1344 <Audio_Host_ConfigurePipes+0xda>
			DataOUTEndpoint = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1334:	eb 81       	ldd	r30, Y+3	; 0x03
    1336:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1338:	82 81       	ldd	r24, Z+2	; 0x02
    133a:	87 fd       	sbrc	r24, 7
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <Audio_Host_ConfigurePipes+0xd8>
    133e:	5f 01       	movw	r10, r30
    1340:	01 c0       	rjmp	.+2      	; 0x1344 <Audio_Host_ConfigurePipes+0xda>
    1342:	4f 01       	movw	r8, r30
	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;

	while ((AudioInterfaceInfo->Config.DataINPipeNumber  && !(DataINEndpoint)) ||
    1344:	f6 01       	movw	r30, r12
    1346:	80 81       	ld	r24, Z
    1348:	88 23       	and	r24, r24
    134a:	19 f0       	breq	.+6      	; 0x1352 <Audio_Host_ConfigurePipes+0xe8>
    134c:	81 14       	cp	r8, r1
    134e:	91 04       	cpc	r9, r1
    1350:	41 f2       	breq	.-112    	; 0x12e2 <Audio_Host_ConfigurePipes+0x78>
    1352:	d6 01       	movw	r26, r12
    1354:	11 96       	adiw	r26, 0x01	; 1
    1356:	8c 91       	ld	r24, X
    1358:	88 23       	and	r24, r24
    135a:	11 f4       	brne	.+4      	; 0x1360 <Audio_Host_ConfigurePipes+0xf6>
    135c:	91 e0       	ldi	r25, 0x01	; 1
    135e:	05 c0       	rjmp	.+10     	; 0x136a <Audio_Host_ConfigurePipes+0x100>
    1360:	a1 14       	cp	r10, r1
    1362:	b1 04       	cpc	r11, r1
    1364:	09 f4       	brne	.+2      	; 0x1368 <Audio_Host_ConfigurePipes+0xfe>
    1366:	bd cf       	rjmp	.-134    	; 0x12e2 <Audio_Host_ConfigurePipes+0x78>
    1368:	f9 cf       	rjmp	.-14     	; 0x135c <Audio_Host_ConfigurePipes+0xf2>
		uint8_t  Type;
		uint8_t  Token;
		uint8_t  EndpointAddress;
		bool     DoubleBanked;

		if (PipeNum == AudioInterfaceInfo->Config.DataINPipeNumber)
    136a:	f6 01       	movw	r30, r12
    136c:	80 81       	ld	r24, Z
    136e:	98 17       	cp	r25, r24
    1370:	59 f4       	brne	.+22     	; 0x1388 <Audio_Host_ConfigurePipes+0x11e>
		{
			Size            = le16_to_cpu(DataINEndpoint->EndpointSize);
    1372:	d4 01       	movw	r26, r8
    1374:	14 96       	adiw	r26, 0x04	; 4
    1376:	0d 91       	ld	r16, X+
    1378:	1c 91       	ld	r17, X
    137a:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataINEndpoint->EndpointAddress;
    137c:	12 96       	adiw	r26, 0x02	; 2
    137e:	2c 91       	ld	r18, X
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_ISOCHRONOUS;
			DoubleBanked    = true;

			AudioInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    1380:	17 83       	std	Z+7, r17	; 0x07
    1382:	06 83       	std	Z+6, r16	; 0x06
    1384:	40 e1       	ldi	r20, 0x10	; 16
    1386:	0e c0       	rjmp	.+28     	; 0x13a4 <Audio_Host_ConfigurePipes+0x13a>
		}
		else if (PipeNum == AudioInterfaceInfo->Config.DataOUTPipeNumber)
    1388:	f6 01       	movw	r30, r12
    138a:	81 81       	ldd	r24, Z+1	; 0x01
    138c:	98 17       	cp	r25, r24
    138e:	a9 f4       	brne	.+42     	; 0x13ba <Audio_Host_ConfigurePipes+0x150>
		{
			Size            = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1390:	d5 01       	movw	r26, r10
    1392:	14 96       	adiw	r26, 0x04	; 4
    1394:	0d 91       	ld	r16, X+
    1396:	1c 91       	ld	r17, X
    1398:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
    139a:	12 96       	adiw	r26, 0x02	; 2
    139c:	2c 91       	ld	r18, X
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_ISOCHRONOUS;
			DoubleBanked    = true;

			AudioInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    139e:	11 87       	std	Z+9, r17	; 0x09
    13a0:	00 87       	std	Z+8, r16	; 0x08
    13a2:	40 e2       	ldi	r20, 0x20	; 32
		else
		{
			continue;
		}
		
		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    13a4:	89 2f       	mov	r24, r25
    13a6:	61 e0       	ldi	r22, 0x01	; 1
    13a8:	34 e0       	ldi	r19, 0x04	; 4
    13aa:	e3 2e       	mov	r14, r19
    13ac:	9d 83       	std	Y+5, r25	; 0x05
    13ae:	0b db       	rcall	.-2538   	; 0x9c6 <Pipe_ConfigurePipe>
    13b0:	9d 81       	ldd	r25, Y+5	; 0x05
    13b2:	88 23       	and	r24, r24
    13b4:	11 f4       	brne	.+4      	; 0x13ba <Audio_Host_ConfigurePipes+0x150>
    13b6:	83 e0       	ldi	r24, 0x03	; 3
    13b8:	18 c0       	rjmp	.+48     	; 0x13ea <Audio_Host_ConfigurePipes+0x180>
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    13ba:	9f 5f       	subi	r25, 0xFF	; 255
    13bc:	97 30       	cpi	r25, 0x07	; 7
    13be:	a9 f6       	brne	.-86     	; 0x136a <Audio_Host_ConfigurePipes+0x100>
		{
			return AUDIO_ENUMERROR_PipeConfigurationFailed;
		}
	}

	AudioInterfaceInfo->State.ControlInterfaceNumber    = AudioControlInterface->InterfaceNumber;
    13c0:	f2 01       	movw	r30, r4
    13c2:	82 81       	ldd	r24, Z+2	; 0x02
    13c4:	d6 01       	movw	r26, r12
    13c6:	13 96       	adiw	r26, 0x03	; 3
    13c8:	8c 93       	st	X, r24
    13ca:	13 97       	sbiw	r26, 0x03	; 3
	AudioInterfaceInfo->State.StreamingInterfaceNumber  = AudioStreamingInterface->InterfaceNumber;
    13cc:	f3 01       	movw	r30, r6
    13ce:	82 81       	ldd	r24, Z+2	; 0x02
    13d0:	14 96       	adiw	r26, 0x04	; 4
    13d2:	8c 93       	st	X, r24
    13d4:	14 97       	sbiw	r26, 0x04	; 4
	AudioInterfaceInfo->State.EnabledStreamingAltIndex  = AudioStreamingInterface->AlternateSetting;
    13d6:	83 81       	ldd	r24, Z+3	; 0x03
    13d8:	15 96       	adiw	r26, 0x05	; 5
    13da:	8c 93       	st	X, r24
    13dc:	15 97       	sbiw	r26, 0x05	; 5
	AudioInterfaceInfo->State.IsActive = true;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	12 96       	adiw	r26, 0x02	; 2
    13e2:	8c 93       	st	X, r24
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	01 c0       	rjmp	.+2      	; 0x13ea <Audio_Host_ConfigurePipes+0x180>
	
	return AUDIO_ENUMERROR_NoError;
    13e8:	82 e0       	ldi	r24, 0x02	; 2
}
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	1f 91       	pop	r17
    13fa:	0f 91       	pop	r16
    13fc:	ff 90       	pop	r15
    13fe:	ef 90       	pop	r14
    1400:	df 90       	pop	r13
    1402:	cf 90       	pop	r12
    1404:	bf 90       	pop	r11
    1406:	af 90       	pop	r10
    1408:	9f 90       	pop	r9
    140a:	8f 90       	pop	r8
    140c:	7f 90       	pop	r7
    140e:	6f 90       	pop	r6
    1410:	5f 90       	pop	r5
    1412:	4f 90       	pop	r4
    1414:	3f 90       	pop	r3
    1416:	2f 90       	pop	r2
    1418:	08 95       	ret
	{
		if (!(AudioControlInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (!(AudioControlInterface) ||
    141a:	c7 01       	movw	r24, r14
    141c:	b1 01       	movw	r22, r2
    141e:	47 ed       	ldi	r20, 0xD7	; 215
    1420:	58 e0       	ldi	r21, 0x08	; 8
    1422:	83 dc       	rcall	.-1786   	; 0xd2a <USB_GetNextDescriptorComp>
    1424:	88 23       	and	r24, r24
    1426:	09 f0       	breq	.+2      	; 0x142a <Audio_Host_ConfigurePipes+0x1c0>
    1428:	68 cf       	rjmp	.-304    	; 0x12fa <Audio_Host_ConfigurePipes+0x90>
    142a:	7d cf       	rjmp	.-262    	; 0x1326 <Audio_Host_ConfigurePipes+0xbc>

0000142c <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    142c:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    142e:	80 91 c8 00 	lds	r24, 0x00C8
    1432:	85 ff       	sbrs	r24, 5
    1434:	fc cf       	rjmp	.-8      	; 0x142e <Serial_putchar+0x2>
				UDR1 = DataByte;
    1436:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	08 95       	ret

00001440 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1440:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1444:	87 fd       	sbrc	r24, 7
    1446:	03 c0       	rjmp	.+6      	; 0x144e <Serial_getchar+0xe>
    1448:	2e ef       	ldi	r18, 0xFE	; 254
    144a:	3f ef       	ldi	r19, 0xFF	; 255
    144c:	0b c0       	rjmp	.+22     	; 0x1464 <Serial_getchar+0x24>
    144e:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1452:	87 fd       	sbrc	r24, 7
    1454:	03 c0       	rjmp	.+6      	; 0x145c <Serial_getchar+0x1c>
    1456:	2f ef       	ldi	r18, 0xFF	; 255
    1458:	3f ef       	ldi	r19, 0xFF	; 255
    145a:	04 c0       	rjmp	.+8      	; 0x1464 <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    145c:	80 91 ce 00 	lds	r24, 0x00CE
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    1464:	c9 01       	movw	r24, r18
    1466:	08 95       	ret

00001468 <printf_P>:
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
    1470:	fe 01       	movw	r30, r28
    1472:	35 96       	adiw	r30, 0x05	; 5
    1474:	61 91       	ld	r22, Z+
    1476:	71 91       	ld	r23, Z+
    1478:	a0 91 3f 01 	lds	r26, 0x013F
    147c:	b0 91 40 01 	lds	r27, 0x0140
    1480:	13 96       	adiw	r26, 0x03	; 3
    1482:	8c 91       	ld	r24, X
    1484:	13 97       	sbiw	r26, 0x03	; 3
    1486:	88 60       	ori	r24, 0x08	; 8
    1488:	13 96       	adiw	r26, 0x03	; 3
    148a:	8c 93       	st	X, r24
    148c:	80 91 3f 01 	lds	r24, 0x013F
    1490:	90 91 40 01 	lds	r25, 0x0140
    1494:	af 01       	movw	r20, r30
    1496:	3f d0       	rcall	.+126    	; 0x1516 <vfprintf>
    1498:	e0 91 3f 01 	lds	r30, 0x013F
    149c:	f0 91 40 01 	lds	r31, 0x0140
    14a0:	23 81       	ldd	r18, Z+3	; 0x03
    14a2:	27 7f       	andi	r18, 0xF7	; 247
    14a4:	23 83       	std	Z+3, r18	; 0x03
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	08 95       	ret

000014ac <puts_P>:
    14ac:	0f 93       	push	r16
    14ae:	1f 93       	push	r17
    14b0:	cf 93       	push	r28
    14b2:	df 93       	push	r29
    14b4:	ec 01       	movw	r28, r24
    14b6:	e0 91 3f 01 	lds	r30, 0x013F
    14ba:	f0 91 40 01 	lds	r31, 0x0140
    14be:	83 81       	ldd	r24, Z+3	; 0x03
    14c0:	81 ff       	sbrs	r24, 1
    14c2:	21 c0       	rjmp	.+66     	; 0x1506 <puts_P+0x5a>
    14c4:	00 e0       	ldi	r16, 0x00	; 0
    14c6:	10 e0       	ldi	r17, 0x00	; 0
    14c8:	0e c0       	rjmp	.+28     	; 0x14e6 <puts_P+0x3a>
    14ca:	e0 91 3f 01 	lds	r30, 0x013F
    14ce:	f0 91 40 01 	lds	r31, 0x0140
    14d2:	20 85       	ldd	r18, Z+8	; 0x08
    14d4:	31 85       	ldd	r19, Z+9	; 0x09
    14d6:	bf 01       	movw	r22, r30
    14d8:	f9 01       	movw	r30, r18
    14da:	09 95       	icall
    14dc:	89 2b       	or	r24, r25
    14de:	11 f0       	breq	.+4      	; 0x14e4 <puts_P+0x38>
    14e0:	0f ef       	ldi	r16, 0xFF	; 255
    14e2:	1f ef       	ldi	r17, 0xFF	; 255
    14e4:	21 96       	adiw	r28, 0x01	; 1
    14e6:	fe 01       	movw	r30, r28
    14e8:	84 91       	lpm	r24, Z+
    14ea:	88 23       	and	r24, r24
    14ec:	71 f7       	brne	.-36     	; 0x14ca <puts_P+0x1e>
    14ee:	e0 91 3f 01 	lds	r30, 0x013F
    14f2:	f0 91 40 01 	lds	r31, 0x0140
    14f6:	20 85       	ldd	r18, Z+8	; 0x08
    14f8:	31 85       	ldd	r19, Z+9	; 0x09
    14fa:	8a e0       	ldi	r24, 0x0A	; 10
    14fc:	bf 01       	movw	r22, r30
    14fe:	f9 01       	movw	r30, r18
    1500:	09 95       	icall
    1502:	89 2b       	or	r24, r25
    1504:	11 f0       	breq	.+4      	; 0x150a <puts_P+0x5e>
    1506:	0f ef       	ldi	r16, 0xFF	; 255
    1508:	1f ef       	ldi	r17, 0xFF	; 255
    150a:	c8 01       	movw	r24, r16
    150c:	df 91       	pop	r29
    150e:	cf 91       	pop	r28
    1510:	1f 91       	pop	r17
    1512:	0f 91       	pop	r16
    1514:	08 95       	ret

00001516 <vfprintf>:
    1516:	2f 92       	push	r2
    1518:	3f 92       	push	r3
    151a:	4f 92       	push	r4
    151c:	5f 92       	push	r5
    151e:	6f 92       	push	r6
    1520:	7f 92       	push	r7
    1522:	8f 92       	push	r8
    1524:	9f 92       	push	r9
    1526:	af 92       	push	r10
    1528:	bf 92       	push	r11
    152a:	cf 92       	push	r12
    152c:	df 92       	push	r13
    152e:	ef 92       	push	r14
    1530:	ff 92       	push	r15
    1532:	0f 93       	push	r16
    1534:	1f 93       	push	r17
    1536:	df 93       	push	r29
    1538:	cf 93       	push	r28
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62
    153e:	2b 97       	sbiw	r28, 0x0b	; 11
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	de bf       	out	0x3e, r29	; 62
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	cd bf       	out	0x3d, r28	; 61
    154a:	3c 01       	movw	r6, r24
    154c:	2b 01       	movw	r4, r22
    154e:	5a 01       	movw	r10, r20
    1550:	fc 01       	movw	r30, r24
    1552:	17 82       	std	Z+7, r1	; 0x07
    1554:	16 82       	std	Z+6, r1	; 0x06
    1556:	83 81       	ldd	r24, Z+3	; 0x03
    1558:	81 fd       	sbrc	r24, 1
    155a:	03 c0       	rjmp	.+6      	; 0x1562 <vfprintf+0x4c>
    155c:	6f ef       	ldi	r22, 0xFF	; 255
    155e:	7f ef       	ldi	r23, 0xFF	; 255
    1560:	b9 c1       	rjmp	.+882    	; 0x18d4 <vfprintf+0x3be>
    1562:	9a e0       	ldi	r25, 0x0A	; 10
    1564:	89 2e       	mov	r8, r25
    1566:	1e 01       	movw	r2, r28
    1568:	08 94       	sec
    156a:	21 1c       	adc	r2, r1
    156c:	31 1c       	adc	r3, r1
    156e:	f3 01       	movw	r30, r6
    1570:	23 81       	ldd	r18, Z+3	; 0x03
    1572:	f2 01       	movw	r30, r4
    1574:	23 fd       	sbrc	r18, 3
    1576:	85 91       	lpm	r24, Z+
    1578:	23 ff       	sbrs	r18, 3
    157a:	81 91       	ld	r24, Z+
    157c:	2f 01       	movw	r4, r30
    157e:	88 23       	and	r24, r24
    1580:	09 f4       	brne	.+2      	; 0x1584 <vfprintf+0x6e>
    1582:	a5 c1       	rjmp	.+842    	; 0x18ce <vfprintf+0x3b8>
    1584:	85 32       	cpi	r24, 0x25	; 37
    1586:	39 f4       	brne	.+14     	; 0x1596 <vfprintf+0x80>
    1588:	23 fd       	sbrc	r18, 3
    158a:	85 91       	lpm	r24, Z+
    158c:	23 ff       	sbrs	r18, 3
    158e:	81 91       	ld	r24, Z+
    1590:	2f 01       	movw	r4, r30
    1592:	85 32       	cpi	r24, 0x25	; 37
    1594:	21 f4       	brne	.+8      	; 0x159e <vfprintf+0x88>
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	b3 01       	movw	r22, r6
    159a:	cc d1       	rcall	.+920    	; 0x1934 <fputc>
    159c:	e8 cf       	rjmp	.-48     	; 0x156e <vfprintf+0x58>
    159e:	98 2f       	mov	r25, r24
    15a0:	ff 24       	eor	r15, r15
    15a2:	ee 24       	eor	r14, r14
    15a4:	99 24       	eor	r9, r9
    15a6:	ff e1       	ldi	r31, 0x1F	; 31
    15a8:	ff 15       	cp	r31, r15
    15aa:	d0 f0       	brcs	.+52     	; 0x15e0 <vfprintf+0xca>
    15ac:	9b 32       	cpi	r25, 0x2B	; 43
    15ae:	69 f0       	breq	.+26     	; 0x15ca <vfprintf+0xb4>
    15b0:	9c 32       	cpi	r25, 0x2C	; 44
    15b2:	28 f4       	brcc	.+10     	; 0x15be <vfprintf+0xa8>
    15b4:	90 32       	cpi	r25, 0x20	; 32
    15b6:	59 f0       	breq	.+22     	; 0x15ce <vfprintf+0xb8>
    15b8:	93 32       	cpi	r25, 0x23	; 35
    15ba:	91 f4       	brne	.+36     	; 0x15e0 <vfprintf+0xca>
    15bc:	0e c0       	rjmp	.+28     	; 0x15da <vfprintf+0xc4>
    15be:	9d 32       	cpi	r25, 0x2D	; 45
    15c0:	49 f0       	breq	.+18     	; 0x15d4 <vfprintf+0xbe>
    15c2:	90 33       	cpi	r25, 0x30	; 48
    15c4:	69 f4       	brne	.+26     	; 0x15e0 <vfprintf+0xca>
    15c6:	41 e0       	ldi	r20, 0x01	; 1
    15c8:	24 c0       	rjmp	.+72     	; 0x1612 <vfprintf+0xfc>
    15ca:	52 e0       	ldi	r21, 0x02	; 2
    15cc:	f5 2a       	or	r15, r21
    15ce:	84 e0       	ldi	r24, 0x04	; 4
    15d0:	f8 2a       	or	r15, r24
    15d2:	28 c0       	rjmp	.+80     	; 0x1624 <vfprintf+0x10e>
    15d4:	98 e0       	ldi	r25, 0x08	; 8
    15d6:	f9 2a       	or	r15, r25
    15d8:	25 c0       	rjmp	.+74     	; 0x1624 <vfprintf+0x10e>
    15da:	e0 e1       	ldi	r30, 0x10	; 16
    15dc:	fe 2a       	or	r15, r30
    15de:	22 c0       	rjmp	.+68     	; 0x1624 <vfprintf+0x10e>
    15e0:	f7 fc       	sbrc	r15, 7
    15e2:	29 c0       	rjmp	.+82     	; 0x1636 <vfprintf+0x120>
    15e4:	89 2f       	mov	r24, r25
    15e6:	80 53       	subi	r24, 0x30	; 48
    15e8:	8a 30       	cpi	r24, 0x0A	; 10
    15ea:	70 f4       	brcc	.+28     	; 0x1608 <vfprintf+0xf2>
    15ec:	f6 fe       	sbrs	r15, 6
    15ee:	05 c0       	rjmp	.+10     	; 0x15fa <vfprintf+0xe4>
    15f0:	98 9c       	mul	r9, r8
    15f2:	90 2c       	mov	r9, r0
    15f4:	11 24       	eor	r1, r1
    15f6:	98 0e       	add	r9, r24
    15f8:	15 c0       	rjmp	.+42     	; 0x1624 <vfprintf+0x10e>
    15fa:	e8 9c       	mul	r14, r8
    15fc:	e0 2c       	mov	r14, r0
    15fe:	11 24       	eor	r1, r1
    1600:	e8 0e       	add	r14, r24
    1602:	f0 e2       	ldi	r31, 0x20	; 32
    1604:	ff 2a       	or	r15, r31
    1606:	0e c0       	rjmp	.+28     	; 0x1624 <vfprintf+0x10e>
    1608:	9e 32       	cpi	r25, 0x2E	; 46
    160a:	29 f4       	brne	.+10     	; 0x1616 <vfprintf+0x100>
    160c:	f6 fc       	sbrc	r15, 6
    160e:	5f c1       	rjmp	.+702    	; 0x18ce <vfprintf+0x3b8>
    1610:	40 e4       	ldi	r20, 0x40	; 64
    1612:	f4 2a       	or	r15, r20
    1614:	07 c0       	rjmp	.+14     	; 0x1624 <vfprintf+0x10e>
    1616:	9c 36       	cpi	r25, 0x6C	; 108
    1618:	19 f4       	brne	.+6      	; 0x1620 <vfprintf+0x10a>
    161a:	50 e8       	ldi	r21, 0x80	; 128
    161c:	f5 2a       	or	r15, r21
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <vfprintf+0x10e>
    1620:	98 36       	cpi	r25, 0x68	; 104
    1622:	49 f4       	brne	.+18     	; 0x1636 <vfprintf+0x120>
    1624:	f2 01       	movw	r30, r4
    1626:	23 fd       	sbrc	r18, 3
    1628:	95 91       	lpm	r25, Z+
    162a:	23 ff       	sbrs	r18, 3
    162c:	91 91       	ld	r25, Z+
    162e:	2f 01       	movw	r4, r30
    1630:	99 23       	and	r25, r25
    1632:	09 f0       	breq	.+2      	; 0x1636 <vfprintf+0x120>
    1634:	b8 cf       	rjmp	.-144    	; 0x15a6 <vfprintf+0x90>
    1636:	89 2f       	mov	r24, r25
    1638:	85 54       	subi	r24, 0x45	; 69
    163a:	83 30       	cpi	r24, 0x03	; 3
    163c:	18 f0       	brcs	.+6      	; 0x1644 <vfprintf+0x12e>
    163e:	80 52       	subi	r24, 0x20	; 32
    1640:	83 30       	cpi	r24, 0x03	; 3
    1642:	38 f4       	brcc	.+14     	; 0x1652 <vfprintf+0x13c>
    1644:	44 e0       	ldi	r20, 0x04	; 4
    1646:	50 e0       	ldi	r21, 0x00	; 0
    1648:	a4 0e       	add	r10, r20
    164a:	b5 1e       	adc	r11, r21
    164c:	5f e3       	ldi	r21, 0x3F	; 63
    164e:	59 83       	std	Y+1, r21	; 0x01
    1650:	0f c0       	rjmp	.+30     	; 0x1670 <vfprintf+0x15a>
    1652:	93 36       	cpi	r25, 0x63	; 99
    1654:	31 f0       	breq	.+12     	; 0x1662 <vfprintf+0x14c>
    1656:	93 37       	cpi	r25, 0x73	; 115
    1658:	79 f0       	breq	.+30     	; 0x1678 <vfprintf+0x162>
    165a:	93 35       	cpi	r25, 0x53	; 83
    165c:	09 f0       	breq	.+2      	; 0x1660 <vfprintf+0x14a>
    165e:	52 c0       	rjmp	.+164    	; 0x1704 <vfprintf+0x1ee>
    1660:	1f c0       	rjmp	.+62     	; 0x16a0 <vfprintf+0x18a>
    1662:	f5 01       	movw	r30, r10
    1664:	80 81       	ld	r24, Z
    1666:	89 83       	std	Y+1, r24	; 0x01
    1668:	42 e0       	ldi	r20, 0x02	; 2
    166a:	50 e0       	ldi	r21, 0x00	; 0
    166c:	a4 0e       	add	r10, r20
    166e:	b5 1e       	adc	r11, r21
    1670:	61 01       	movw	r12, r2
    1672:	01 e0       	ldi	r16, 0x01	; 1
    1674:	10 e0       	ldi	r17, 0x00	; 0
    1676:	11 c0       	rjmp	.+34     	; 0x169a <vfprintf+0x184>
    1678:	f5 01       	movw	r30, r10
    167a:	c0 80       	ld	r12, Z
    167c:	d1 80       	ldd	r13, Z+1	; 0x01
    167e:	f6 fc       	sbrc	r15, 6
    1680:	03 c0       	rjmp	.+6      	; 0x1688 <vfprintf+0x172>
    1682:	6f ef       	ldi	r22, 0xFF	; 255
    1684:	7f ef       	ldi	r23, 0xFF	; 255
    1686:	02 c0       	rjmp	.+4      	; 0x168c <vfprintf+0x176>
    1688:	69 2d       	mov	r22, r9
    168a:	70 e0       	ldi	r23, 0x00	; 0
    168c:	42 e0       	ldi	r20, 0x02	; 2
    168e:	50 e0       	ldi	r21, 0x00	; 0
    1690:	a4 0e       	add	r10, r20
    1692:	b5 1e       	adc	r11, r21
    1694:	c6 01       	movw	r24, r12
    1696:	43 d1       	rcall	.+646    	; 0x191e <strnlen>
    1698:	8c 01       	movw	r16, r24
    169a:	5f e7       	ldi	r21, 0x7F	; 127
    169c:	f5 22       	and	r15, r21
    169e:	13 c0       	rjmp	.+38     	; 0x16c6 <vfprintf+0x1b0>
    16a0:	f5 01       	movw	r30, r10
    16a2:	c0 80       	ld	r12, Z
    16a4:	d1 80       	ldd	r13, Z+1	; 0x01
    16a6:	f6 fc       	sbrc	r15, 6
    16a8:	03 c0       	rjmp	.+6      	; 0x16b0 <vfprintf+0x19a>
    16aa:	6f ef       	ldi	r22, 0xFF	; 255
    16ac:	7f ef       	ldi	r23, 0xFF	; 255
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <vfprintf+0x19e>
    16b0:	69 2d       	mov	r22, r9
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	42 e0       	ldi	r20, 0x02	; 2
    16b6:	50 e0       	ldi	r21, 0x00	; 0
    16b8:	a4 0e       	add	r10, r20
    16ba:	b5 1e       	adc	r11, r21
    16bc:	c6 01       	movw	r24, r12
    16be:	24 d1       	rcall	.+584    	; 0x1908 <strnlen_P>
    16c0:	8c 01       	movw	r16, r24
    16c2:	50 e8       	ldi	r21, 0x80	; 128
    16c4:	f5 2a       	or	r15, r21
    16c6:	f3 fe       	sbrs	r15, 3
    16c8:	06 c0       	rjmp	.+12     	; 0x16d6 <vfprintf+0x1c0>
    16ca:	18 c0       	rjmp	.+48     	; 0x16fc <vfprintf+0x1e6>
    16cc:	80 e2       	ldi	r24, 0x20	; 32
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	b3 01       	movw	r22, r6
    16d2:	30 d1       	rcall	.+608    	; 0x1934 <fputc>
    16d4:	ea 94       	dec	r14
    16d6:	8e 2d       	mov	r24, r14
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	08 17       	cp	r16, r24
    16dc:	19 07       	cpc	r17, r25
    16de:	b0 f3       	brcs	.-20     	; 0x16cc <vfprintf+0x1b6>
    16e0:	0d c0       	rjmp	.+26     	; 0x16fc <vfprintf+0x1e6>
    16e2:	f6 01       	movw	r30, r12
    16e4:	f7 fc       	sbrc	r15, 7
    16e6:	85 91       	lpm	r24, Z+
    16e8:	f7 fe       	sbrs	r15, 7
    16ea:	81 91       	ld	r24, Z+
    16ec:	6f 01       	movw	r12, r30
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	b3 01       	movw	r22, r6
    16f2:	20 d1       	rcall	.+576    	; 0x1934 <fputc>
    16f4:	e1 10       	cpse	r14, r1
    16f6:	ea 94       	dec	r14
    16f8:	01 50       	subi	r16, 0x01	; 1
    16fa:	10 40       	sbci	r17, 0x00	; 0
    16fc:	01 15       	cp	r16, r1
    16fe:	11 05       	cpc	r17, r1
    1700:	81 f7       	brne	.-32     	; 0x16e2 <vfprintf+0x1cc>
    1702:	e2 c0       	rjmp	.+452    	; 0x18c8 <vfprintf+0x3b2>
    1704:	94 36       	cpi	r25, 0x64	; 100
    1706:	11 f0       	breq	.+4      	; 0x170c <vfprintf+0x1f6>
    1708:	99 36       	cpi	r25, 0x69	; 105
    170a:	61 f5       	brne	.+88     	; 0x1764 <vfprintf+0x24e>
    170c:	f7 fe       	sbrs	r15, 7
    170e:	08 c0       	rjmp	.+16     	; 0x1720 <vfprintf+0x20a>
    1710:	f5 01       	movw	r30, r10
    1712:	20 81       	ld	r18, Z
    1714:	31 81       	ldd	r19, Z+1	; 0x01
    1716:	42 81       	ldd	r20, Z+2	; 0x02
    1718:	53 81       	ldd	r21, Z+3	; 0x03
    171a:	84 e0       	ldi	r24, 0x04	; 4
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	0a c0       	rjmp	.+20     	; 0x1734 <vfprintf+0x21e>
    1720:	f5 01       	movw	r30, r10
    1722:	80 81       	ld	r24, Z
    1724:	91 81       	ldd	r25, Z+1	; 0x01
    1726:	9c 01       	movw	r18, r24
    1728:	44 27       	eor	r20, r20
    172a:	37 fd       	sbrc	r19, 7
    172c:	40 95       	com	r20
    172e:	54 2f       	mov	r21, r20
    1730:	82 e0       	ldi	r24, 0x02	; 2
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	a8 0e       	add	r10, r24
    1736:	b9 1e       	adc	r11, r25
    1738:	9f e6       	ldi	r25, 0x6F	; 111
    173a:	f9 22       	and	r15, r25
    173c:	57 ff       	sbrs	r21, 7
    173e:	09 c0       	rjmp	.+18     	; 0x1752 <vfprintf+0x23c>
    1740:	50 95       	com	r21
    1742:	40 95       	com	r20
    1744:	30 95       	com	r19
    1746:	21 95       	neg	r18
    1748:	3f 4f       	sbci	r19, 0xFF	; 255
    174a:	4f 4f       	sbci	r20, 0xFF	; 255
    174c:	5f 4f       	sbci	r21, 0xFF	; 255
    174e:	e0 e8       	ldi	r30, 0x80	; 128
    1750:	fe 2a       	or	r15, r30
    1752:	ca 01       	movw	r24, r20
    1754:	b9 01       	movw	r22, r18
    1756:	a1 01       	movw	r20, r2
    1758:	2a e0       	ldi	r18, 0x0A	; 10
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	17 d1       	rcall	.+558    	; 0x198c <__ultoa_invert>
    175e:	d8 2e       	mov	r13, r24
    1760:	d2 18       	sub	r13, r2
    1762:	3f c0       	rjmp	.+126    	; 0x17e2 <vfprintf+0x2cc>
    1764:	95 37       	cpi	r25, 0x75	; 117
    1766:	29 f4       	brne	.+10     	; 0x1772 <vfprintf+0x25c>
    1768:	1f 2d       	mov	r17, r15
    176a:	1f 7e       	andi	r17, 0xEF	; 239
    176c:	2a e0       	ldi	r18, 0x0A	; 10
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	1d c0       	rjmp	.+58     	; 0x17ac <vfprintf+0x296>
    1772:	1f 2d       	mov	r17, r15
    1774:	19 7f       	andi	r17, 0xF9	; 249
    1776:	9f 36       	cpi	r25, 0x6F	; 111
    1778:	61 f0       	breq	.+24     	; 0x1792 <vfprintf+0x27c>
    177a:	90 37       	cpi	r25, 0x70	; 112
    177c:	20 f4       	brcc	.+8      	; 0x1786 <vfprintf+0x270>
    177e:	98 35       	cpi	r25, 0x58	; 88
    1780:	09 f0       	breq	.+2      	; 0x1784 <vfprintf+0x26e>
    1782:	a5 c0       	rjmp	.+330    	; 0x18ce <vfprintf+0x3b8>
    1784:	0f c0       	rjmp	.+30     	; 0x17a4 <vfprintf+0x28e>
    1786:	90 37       	cpi	r25, 0x70	; 112
    1788:	39 f0       	breq	.+14     	; 0x1798 <vfprintf+0x282>
    178a:	98 37       	cpi	r25, 0x78	; 120
    178c:	09 f0       	breq	.+2      	; 0x1790 <vfprintf+0x27a>
    178e:	9f c0       	rjmp	.+318    	; 0x18ce <vfprintf+0x3b8>
    1790:	04 c0       	rjmp	.+8      	; 0x179a <vfprintf+0x284>
    1792:	28 e0       	ldi	r18, 0x08	; 8
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	0a c0       	rjmp	.+20     	; 0x17ac <vfprintf+0x296>
    1798:	10 61       	ori	r17, 0x10	; 16
    179a:	14 fd       	sbrc	r17, 4
    179c:	14 60       	ori	r17, 0x04	; 4
    179e:	20 e1       	ldi	r18, 0x10	; 16
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	04 c0       	rjmp	.+8      	; 0x17ac <vfprintf+0x296>
    17a4:	14 fd       	sbrc	r17, 4
    17a6:	16 60       	ori	r17, 0x06	; 6
    17a8:	20 e1       	ldi	r18, 0x10	; 16
    17aa:	32 e0       	ldi	r19, 0x02	; 2
    17ac:	17 ff       	sbrs	r17, 7
    17ae:	08 c0       	rjmp	.+16     	; 0x17c0 <vfprintf+0x2aa>
    17b0:	f5 01       	movw	r30, r10
    17b2:	60 81       	ld	r22, Z
    17b4:	71 81       	ldd	r23, Z+1	; 0x01
    17b6:	82 81       	ldd	r24, Z+2	; 0x02
    17b8:	93 81       	ldd	r25, Z+3	; 0x03
    17ba:	44 e0       	ldi	r20, 0x04	; 4
    17bc:	50 e0       	ldi	r21, 0x00	; 0
    17be:	08 c0       	rjmp	.+16     	; 0x17d0 <vfprintf+0x2ba>
    17c0:	f5 01       	movw	r30, r10
    17c2:	80 81       	ld	r24, Z
    17c4:	91 81       	ldd	r25, Z+1	; 0x01
    17c6:	bc 01       	movw	r22, r24
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	42 e0       	ldi	r20, 0x02	; 2
    17ce:	50 e0       	ldi	r21, 0x00	; 0
    17d0:	a4 0e       	add	r10, r20
    17d2:	b5 1e       	adc	r11, r21
    17d4:	a1 01       	movw	r20, r2
    17d6:	da d0       	rcall	.+436    	; 0x198c <__ultoa_invert>
    17d8:	d8 2e       	mov	r13, r24
    17da:	d2 18       	sub	r13, r2
    17dc:	8f e7       	ldi	r24, 0x7F	; 127
    17de:	f8 2e       	mov	r15, r24
    17e0:	f1 22       	and	r15, r17
    17e2:	f6 fe       	sbrs	r15, 6
    17e4:	0b c0       	rjmp	.+22     	; 0x17fc <vfprintf+0x2e6>
    17e6:	5e ef       	ldi	r21, 0xFE	; 254
    17e8:	f5 22       	and	r15, r21
    17ea:	d9 14       	cp	r13, r9
    17ec:	38 f4       	brcc	.+14     	; 0x17fc <vfprintf+0x2e6>
    17ee:	f4 fe       	sbrs	r15, 4
    17f0:	07 c0       	rjmp	.+14     	; 0x1800 <vfprintf+0x2ea>
    17f2:	f2 fc       	sbrc	r15, 2
    17f4:	05 c0       	rjmp	.+10     	; 0x1800 <vfprintf+0x2ea>
    17f6:	8f ee       	ldi	r24, 0xEF	; 239
    17f8:	f8 22       	and	r15, r24
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <vfprintf+0x2ea>
    17fc:	1d 2d       	mov	r17, r13
    17fe:	01 c0       	rjmp	.+2      	; 0x1802 <vfprintf+0x2ec>
    1800:	19 2d       	mov	r17, r9
    1802:	f4 fe       	sbrs	r15, 4
    1804:	0d c0       	rjmp	.+26     	; 0x1820 <vfprintf+0x30a>
    1806:	fe 01       	movw	r30, r28
    1808:	ed 0d       	add	r30, r13
    180a:	f1 1d       	adc	r31, r1
    180c:	80 81       	ld	r24, Z
    180e:	80 33       	cpi	r24, 0x30	; 48
    1810:	19 f4       	brne	.+6      	; 0x1818 <vfprintf+0x302>
    1812:	99 ee       	ldi	r25, 0xE9	; 233
    1814:	f9 22       	and	r15, r25
    1816:	08 c0       	rjmp	.+16     	; 0x1828 <vfprintf+0x312>
    1818:	1f 5f       	subi	r17, 0xFF	; 255
    181a:	f2 fe       	sbrs	r15, 2
    181c:	05 c0       	rjmp	.+10     	; 0x1828 <vfprintf+0x312>
    181e:	03 c0       	rjmp	.+6      	; 0x1826 <vfprintf+0x310>
    1820:	8f 2d       	mov	r24, r15
    1822:	86 78       	andi	r24, 0x86	; 134
    1824:	09 f0       	breq	.+2      	; 0x1828 <vfprintf+0x312>
    1826:	1f 5f       	subi	r17, 0xFF	; 255
    1828:	0f 2d       	mov	r16, r15
    182a:	f3 fc       	sbrc	r15, 3
    182c:	13 c0       	rjmp	.+38     	; 0x1854 <vfprintf+0x33e>
    182e:	f0 fe       	sbrs	r15, 0
    1830:	0e c0       	rjmp	.+28     	; 0x184e <vfprintf+0x338>
    1832:	1e 15       	cp	r17, r14
    1834:	10 f0       	brcs	.+4      	; 0x183a <vfprintf+0x324>
    1836:	9d 2c       	mov	r9, r13
    1838:	0a c0       	rjmp	.+20     	; 0x184e <vfprintf+0x338>
    183a:	9d 2c       	mov	r9, r13
    183c:	9e 0c       	add	r9, r14
    183e:	91 1a       	sub	r9, r17
    1840:	1e 2d       	mov	r17, r14
    1842:	05 c0       	rjmp	.+10     	; 0x184e <vfprintf+0x338>
    1844:	80 e2       	ldi	r24, 0x20	; 32
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	b3 01       	movw	r22, r6
    184a:	74 d0       	rcall	.+232    	; 0x1934 <fputc>
    184c:	1f 5f       	subi	r17, 0xFF	; 255
    184e:	1e 15       	cp	r17, r14
    1850:	c8 f3       	brcs	.-14     	; 0x1844 <vfprintf+0x32e>
    1852:	04 c0       	rjmp	.+8      	; 0x185c <vfprintf+0x346>
    1854:	1e 15       	cp	r17, r14
    1856:	10 f4       	brcc	.+4      	; 0x185c <vfprintf+0x346>
    1858:	e1 1a       	sub	r14, r17
    185a:	01 c0       	rjmp	.+2      	; 0x185e <vfprintf+0x348>
    185c:	ee 24       	eor	r14, r14
    185e:	04 ff       	sbrs	r16, 4
    1860:	0e c0       	rjmp	.+28     	; 0x187e <vfprintf+0x368>
    1862:	80 e3       	ldi	r24, 0x30	; 48
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	b3 01       	movw	r22, r6
    1868:	65 d0       	rcall	.+202    	; 0x1934 <fputc>
    186a:	02 ff       	sbrs	r16, 2
    186c:	1b c0       	rjmp	.+54     	; 0x18a4 <vfprintf+0x38e>
    186e:	01 fd       	sbrc	r16, 1
    1870:	03 c0       	rjmp	.+6      	; 0x1878 <vfprintf+0x362>
    1872:	88 e7       	ldi	r24, 0x78	; 120
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	0e c0       	rjmp	.+28     	; 0x1894 <vfprintf+0x37e>
    1878:	88 e5       	ldi	r24, 0x58	; 88
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	0b c0       	rjmp	.+22     	; 0x1894 <vfprintf+0x37e>
    187e:	80 2f       	mov	r24, r16
    1880:	86 78       	andi	r24, 0x86	; 134
    1882:	81 f0       	breq	.+32     	; 0x18a4 <vfprintf+0x38e>
    1884:	01 ff       	sbrs	r16, 1
    1886:	02 c0       	rjmp	.+4      	; 0x188c <vfprintf+0x376>
    1888:	8b e2       	ldi	r24, 0x2B	; 43
    188a:	01 c0       	rjmp	.+2      	; 0x188e <vfprintf+0x378>
    188c:	80 e2       	ldi	r24, 0x20	; 32
    188e:	f7 fc       	sbrc	r15, 7
    1890:	8d e2       	ldi	r24, 0x2D	; 45
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	b3 01       	movw	r22, r6
    1896:	4e d0       	rcall	.+156    	; 0x1934 <fputc>
    1898:	05 c0       	rjmp	.+10     	; 0x18a4 <vfprintf+0x38e>
    189a:	80 e3       	ldi	r24, 0x30	; 48
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	b3 01       	movw	r22, r6
    18a0:	49 d0       	rcall	.+146    	; 0x1934 <fputc>
    18a2:	9a 94       	dec	r9
    18a4:	d9 14       	cp	r13, r9
    18a6:	c8 f3       	brcs	.-14     	; 0x189a <vfprintf+0x384>
    18a8:	da 94       	dec	r13
    18aa:	f1 01       	movw	r30, r2
    18ac:	ed 0d       	add	r30, r13
    18ae:	f1 1d       	adc	r31, r1
    18b0:	80 81       	ld	r24, Z
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	b3 01       	movw	r22, r6
    18b6:	3e d0       	rcall	.+124    	; 0x1934 <fputc>
    18b8:	dd 20       	and	r13, r13
    18ba:	b1 f7       	brne	.-20     	; 0x18a8 <vfprintf+0x392>
    18bc:	05 c0       	rjmp	.+10     	; 0x18c8 <vfprintf+0x3b2>
    18be:	80 e2       	ldi	r24, 0x20	; 32
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	b3 01       	movw	r22, r6
    18c4:	37 d0       	rcall	.+110    	; 0x1934 <fputc>
    18c6:	ea 94       	dec	r14
    18c8:	ee 20       	and	r14, r14
    18ca:	c9 f7       	brne	.-14     	; 0x18be <vfprintf+0x3a8>
    18cc:	50 ce       	rjmp	.-864    	; 0x156e <vfprintf+0x58>
    18ce:	f3 01       	movw	r30, r6
    18d0:	66 81       	ldd	r22, Z+6	; 0x06
    18d2:	77 81       	ldd	r23, Z+7	; 0x07
    18d4:	cb 01       	movw	r24, r22
    18d6:	2b 96       	adiw	r28, 0x0b	; 11
    18d8:	0f b6       	in	r0, 0x3f	; 63
    18da:	f8 94       	cli
    18dc:	de bf       	out	0x3e, r29	; 62
    18de:	0f be       	out	0x3f, r0	; 63
    18e0:	cd bf       	out	0x3d, r28	; 61
    18e2:	cf 91       	pop	r28
    18e4:	df 91       	pop	r29
    18e6:	1f 91       	pop	r17
    18e8:	0f 91       	pop	r16
    18ea:	ff 90       	pop	r15
    18ec:	ef 90       	pop	r14
    18ee:	df 90       	pop	r13
    18f0:	cf 90       	pop	r12
    18f2:	bf 90       	pop	r11
    18f4:	af 90       	pop	r10
    18f6:	9f 90       	pop	r9
    18f8:	8f 90       	pop	r8
    18fa:	7f 90       	pop	r7
    18fc:	6f 90       	pop	r6
    18fe:	5f 90       	pop	r5
    1900:	4f 90       	pop	r4
    1902:	3f 90       	pop	r3
    1904:	2f 90       	pop	r2
    1906:	08 95       	ret

00001908 <strnlen_P>:
    1908:	fc 01       	movw	r30, r24
    190a:	05 90       	lpm	r0, Z+
    190c:	61 50       	subi	r22, 0x01	; 1
    190e:	70 40       	sbci	r23, 0x00	; 0
    1910:	01 10       	cpse	r0, r1
    1912:	d8 f7       	brcc	.-10     	; 0x190a <strnlen_P+0x2>
    1914:	80 95       	com	r24
    1916:	90 95       	com	r25
    1918:	8e 0f       	add	r24, r30
    191a:	9f 1f       	adc	r25, r31
    191c:	08 95       	ret

0000191e <strnlen>:
    191e:	fc 01       	movw	r30, r24
    1920:	61 50       	subi	r22, 0x01	; 1
    1922:	70 40       	sbci	r23, 0x00	; 0
    1924:	01 90       	ld	r0, Z+
    1926:	01 10       	cpse	r0, r1
    1928:	d8 f7       	brcc	.-10     	; 0x1920 <strnlen+0x2>
    192a:	80 95       	com	r24
    192c:	90 95       	com	r25
    192e:	8e 0f       	add	r24, r30
    1930:	9f 1f       	adc	r25, r31
    1932:	08 95       	ret

00001934 <fputc>:
    1934:	0f 93       	push	r16
    1936:	1f 93       	push	r17
    1938:	cf 93       	push	r28
    193a:	df 93       	push	r29
    193c:	8c 01       	movw	r16, r24
    193e:	eb 01       	movw	r28, r22
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	81 ff       	sbrs	r24, 1
    1944:	1b c0       	rjmp	.+54     	; 0x197c <fputc+0x48>
    1946:	82 ff       	sbrs	r24, 2
    1948:	0d c0       	rjmp	.+26     	; 0x1964 <fputc+0x30>
    194a:	2e 81       	ldd	r18, Y+6	; 0x06
    194c:	3f 81       	ldd	r19, Y+7	; 0x07
    194e:	8c 81       	ldd	r24, Y+4	; 0x04
    1950:	9d 81       	ldd	r25, Y+5	; 0x05
    1952:	28 17       	cp	r18, r24
    1954:	39 07       	cpc	r19, r25
    1956:	64 f4       	brge	.+24     	; 0x1970 <fputc+0x3c>
    1958:	e8 81       	ld	r30, Y
    195a:	f9 81       	ldd	r31, Y+1	; 0x01
    195c:	01 93       	st	Z+, r16
    195e:	f9 83       	std	Y+1, r31	; 0x01
    1960:	e8 83       	st	Y, r30
    1962:	06 c0       	rjmp	.+12     	; 0x1970 <fputc+0x3c>
    1964:	e8 85       	ldd	r30, Y+8	; 0x08
    1966:	f9 85       	ldd	r31, Y+9	; 0x09
    1968:	80 2f       	mov	r24, r16
    196a:	09 95       	icall
    196c:	89 2b       	or	r24, r25
    196e:	31 f4       	brne	.+12     	; 0x197c <fputc+0x48>
    1970:	8e 81       	ldd	r24, Y+6	; 0x06
    1972:	9f 81       	ldd	r25, Y+7	; 0x07
    1974:	01 96       	adiw	r24, 0x01	; 1
    1976:	9f 83       	std	Y+7, r25	; 0x07
    1978:	8e 83       	std	Y+6, r24	; 0x06
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <fputc+0x4c>
    197c:	0f ef       	ldi	r16, 0xFF	; 255
    197e:	1f ef       	ldi	r17, 0xFF	; 255
    1980:	c8 01       	movw	r24, r16
    1982:	df 91       	pop	r29
    1984:	cf 91       	pop	r28
    1986:	1f 91       	pop	r17
    1988:	0f 91       	pop	r16
    198a:	08 95       	ret

0000198c <__ultoa_invert>:
    198c:	fa 01       	movw	r30, r20
    198e:	aa 27       	eor	r26, r26
    1990:	28 30       	cpi	r18, 0x08	; 8
    1992:	51 f1       	breq	.+84     	; 0x19e8 <__ultoa_invert+0x5c>
    1994:	20 31       	cpi	r18, 0x10	; 16
    1996:	81 f1       	breq	.+96     	; 0x19f8 <__ultoa_invert+0x6c>
    1998:	e8 94       	clt
    199a:	6f 93       	push	r22
    199c:	6e 7f       	andi	r22, 0xFE	; 254
    199e:	6e 5f       	subi	r22, 0xFE	; 254
    19a0:	7f 4f       	sbci	r23, 0xFF	; 255
    19a2:	8f 4f       	sbci	r24, 0xFF	; 255
    19a4:	9f 4f       	sbci	r25, 0xFF	; 255
    19a6:	af 4f       	sbci	r26, 0xFF	; 255
    19a8:	b1 e0       	ldi	r27, 0x01	; 1
    19aa:	3e d0       	rcall	.+124    	; 0x1a28 <__ultoa_invert+0x9c>
    19ac:	b4 e0       	ldi	r27, 0x04	; 4
    19ae:	3c d0       	rcall	.+120    	; 0x1a28 <__ultoa_invert+0x9c>
    19b0:	67 0f       	add	r22, r23
    19b2:	78 1f       	adc	r23, r24
    19b4:	89 1f       	adc	r24, r25
    19b6:	9a 1f       	adc	r25, r26
    19b8:	a1 1d       	adc	r26, r1
    19ba:	68 0f       	add	r22, r24
    19bc:	79 1f       	adc	r23, r25
    19be:	8a 1f       	adc	r24, r26
    19c0:	91 1d       	adc	r25, r1
    19c2:	a1 1d       	adc	r26, r1
    19c4:	6a 0f       	add	r22, r26
    19c6:	71 1d       	adc	r23, r1
    19c8:	81 1d       	adc	r24, r1
    19ca:	91 1d       	adc	r25, r1
    19cc:	a1 1d       	adc	r26, r1
    19ce:	20 d0       	rcall	.+64     	; 0x1a10 <__ultoa_invert+0x84>
    19d0:	09 f4       	brne	.+2      	; 0x19d4 <__ultoa_invert+0x48>
    19d2:	68 94       	set
    19d4:	3f 91       	pop	r19
    19d6:	2a e0       	ldi	r18, 0x0A	; 10
    19d8:	26 9f       	mul	r18, r22
    19da:	11 24       	eor	r1, r1
    19dc:	30 19       	sub	r19, r0
    19de:	30 5d       	subi	r19, 0xD0	; 208
    19e0:	31 93       	st	Z+, r19
    19e2:	de f6       	brtc	.-74     	; 0x199a <__ultoa_invert+0xe>
    19e4:	cf 01       	movw	r24, r30
    19e6:	08 95       	ret
    19e8:	46 2f       	mov	r20, r22
    19ea:	47 70       	andi	r20, 0x07	; 7
    19ec:	40 5d       	subi	r20, 0xD0	; 208
    19ee:	41 93       	st	Z+, r20
    19f0:	b3 e0       	ldi	r27, 0x03	; 3
    19f2:	0f d0       	rcall	.+30     	; 0x1a12 <__ultoa_invert+0x86>
    19f4:	c9 f7       	brne	.-14     	; 0x19e8 <__ultoa_invert+0x5c>
    19f6:	f6 cf       	rjmp	.-20     	; 0x19e4 <__ultoa_invert+0x58>
    19f8:	46 2f       	mov	r20, r22
    19fa:	4f 70       	andi	r20, 0x0F	; 15
    19fc:	40 5d       	subi	r20, 0xD0	; 208
    19fe:	4a 33       	cpi	r20, 0x3A	; 58
    1a00:	18 f0       	brcs	.+6      	; 0x1a08 <__ultoa_invert+0x7c>
    1a02:	49 5d       	subi	r20, 0xD9	; 217
    1a04:	31 fd       	sbrc	r19, 1
    1a06:	40 52       	subi	r20, 0x20	; 32
    1a08:	41 93       	st	Z+, r20
    1a0a:	02 d0       	rcall	.+4      	; 0x1a10 <__ultoa_invert+0x84>
    1a0c:	a9 f7       	brne	.-22     	; 0x19f8 <__ultoa_invert+0x6c>
    1a0e:	ea cf       	rjmp	.-44     	; 0x19e4 <__ultoa_invert+0x58>
    1a10:	b4 e0       	ldi	r27, 0x04	; 4
    1a12:	a6 95       	lsr	r26
    1a14:	97 95       	ror	r25
    1a16:	87 95       	ror	r24
    1a18:	77 95       	ror	r23
    1a1a:	67 95       	ror	r22
    1a1c:	ba 95       	dec	r27
    1a1e:	c9 f7       	brne	.-14     	; 0x1a12 <__ultoa_invert+0x86>
    1a20:	00 97       	sbiw	r24, 0x00	; 0
    1a22:	61 05       	cpc	r22, r1
    1a24:	71 05       	cpc	r23, r1
    1a26:	08 95       	ret
    1a28:	9b 01       	movw	r18, r22
    1a2a:	ac 01       	movw	r20, r24
    1a2c:	0a 2e       	mov	r0, r26
    1a2e:	06 94       	lsr	r0
    1a30:	57 95       	ror	r21
    1a32:	47 95       	ror	r20
    1a34:	37 95       	ror	r19
    1a36:	27 95       	ror	r18
    1a38:	ba 95       	dec	r27
    1a3a:	c9 f7       	brne	.-14     	; 0x1a2e <__ultoa_invert+0xa2>
    1a3c:	62 0f       	add	r22, r18
    1a3e:	73 1f       	adc	r23, r19
    1a40:	84 1f       	adc	r24, r20
    1a42:	95 1f       	adc	r25, r21
    1a44:	a0 1d       	adc	r26, r0
    1a46:	08 95       	ret

00001a48 <_exit>:
    1a48:	f8 94       	cli

00001a4a <__stop_program>:
    1a4a:	ff cf       	rjmp	.-2      	; 0x1a4a <__stop_program>
