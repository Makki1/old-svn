
KeyboardHostWithParser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  0000256e  00002602  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000256e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fb  00800124  00800124  00002626  2**0
                  ALLOC
  3 .stab         00002208  00000000  00000000  00002628  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dff  00000000  00000000  00004830  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000006d0  00000000  00000000  0000562f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000fb9  00000000  00000000  00005cff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000b990  00000000  00000000  00006cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000288c  00000000  00000000  00012648  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007db9  00000000  00000000  00014ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b20  00000000  00000000  0001cc90  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004606  00000000  00000000  0001d7b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005740  00000000  00000000  00021db6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007a0  00000000  00000000  000274f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       0:	1f c1       	rjmp	.+574    	; 0x240 <__ctors_end>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       2:	00 00       	nop
	return USB_Host_SendControlRequest(NULL);
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
       4:	3b c1       	rjmp	.+630    	; 0x27c <__bad_interrupt>
	return true;
}

void USB_SetHIDReportItemInfo(uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
       6:	00 00       	nop
	return HOST_SENDCONTROL_Successful;
}

uint8_t HID_Host_SetIdlePeriod(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               const uint16_t MS)
{
       8:	39 c1       	rjmp	.+626    	; 0x27c <__bad_interrupt>

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       a:	00 00       	nop
       c:	37 c1       	rjmp	.+622    	; 0x27c <__bad_interrupt>
       e:	00 00       	nop
      10:	35 c1       	rjmp	.+618    	; 0x27c <__bad_interrupt>
      12:	00 00       	nop
      14:	33 c1       	rjmp	.+614    	; 0x27c <__bad_interrupt>
      16:	00 00       	nop
      18:	31 c1       	rjmp	.+610    	; 0x27c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2f c1       	rjmp	.+606    	; 0x27c <__bad_interrupt>
      1e:	00 00       	nop
      20:	2d c1       	rjmp	.+602    	; 0x27c <__bad_interrupt>
      22:	00 00       	nop
      24:	2b c1       	rjmp	.+598    	; 0x27c <__bad_interrupt>
      26:	00 00       	nop
      28:	ec c5       	rjmp	.+3032   	; 0xc02 <__vector_10>
      2a:	00 00       	nop
      2c:	27 c1       	rjmp	.+590    	; 0x27c <__bad_interrupt>
      2e:	00 00       	nop
      30:	25 c1       	rjmp	.+586    	; 0x27c <__bad_interrupt>
      32:	00 00       	nop
      34:	23 c1       	rjmp	.+582    	; 0x27c <__bad_interrupt>
      36:	00 00       	nop
      38:	21 c1       	rjmp	.+578    	; 0x27c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1f c1       	rjmp	.+574    	; 0x27c <__bad_interrupt>
      3e:	00 00       	nop
      40:	1d c1       	rjmp	.+570    	; 0x27c <__bad_interrupt>
      42:	00 00       	nop
      44:	1b c1       	rjmp	.+566    	; 0x27c <__bad_interrupt>
      46:	00 00       	nop
      48:	19 c1       	rjmp	.+562    	; 0x27c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	17 c1       	rjmp	.+558    	; 0x27c <__bad_interrupt>
      4e:	00 00       	nop
      50:	15 c1       	rjmp	.+554    	; 0x27c <__bad_interrupt>
      52:	00 00       	nop
      54:	13 c1       	rjmp	.+550    	; 0x27c <__bad_interrupt>
      56:	00 00       	nop
      58:	11 c1       	rjmp	.+546    	; 0x27c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0f c1       	rjmp	.+542    	; 0x27c <__bad_interrupt>
      5e:	00 00       	nop
      60:	0d c1       	rjmp	.+538    	; 0x27c <__bad_interrupt>
      62:	00 00       	nop
      64:	0b c1       	rjmp	.+534    	; 0x27c <__bad_interrupt>
      66:	00 00       	nop
      68:	09 c1       	rjmp	.+530    	; 0x27c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	07 c1       	rjmp	.+526    	; 0x27c <__bad_interrupt>
      6e:	00 00       	nop
      70:	05 c1       	rjmp	.+522    	; 0x27c <__bad_interrupt>
      72:	00 00       	nop
      74:	03 c1       	rjmp	.+518    	; 0x27c <__bad_interrupt>
      76:	00 00       	nop
      78:	01 c1       	rjmp	.+514    	; 0x27c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ff c0       	rjmp	.+510    	; 0x27c <__bad_interrupt>
      7e:	00 00       	nop
      80:	fd c0       	rjmp	.+506    	; 0x27c <__bad_interrupt>
      82:	00 00       	nop
      84:	fb c0       	rjmp	.+502    	; 0x27c <__bad_interrupt>
      86:	00 00       	nop
      88:	f9 c0       	rjmp	.+498    	; 0x27c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f7 c0       	rjmp	.+494    	; 0x27c <__bad_interrupt>
      8e:	00 00       	nop
      90:	f5 c0       	rjmp	.+490    	; 0x27c <__bad_interrupt>
      92:	00 00       	nop
      94:	f3 c0       	rjmp	.+486    	; 0x27c <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4603>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4595>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4585>:
     11d:	4b 65 79 62 6f 61 72 64 20 45 6e 75 6d 65 72 61     Keyboard Enumera
     12d:	74 65 64 2e 0d 0a 00                                ted....

00000134 <__c.4583>:
     134:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 52 65     Error Setting Re
     144:	70 6f 72 74 20 50 72 6f 74 6f 63 6f 6c 20 4d 6f     port Protocol Mo
     154:	64 65 20 6f 72 20 4e 6f 74 20 61 20 56 61 6c 69     de or Not a Vali
     164:	64 20 4b 65 79 62 6f 61 72 64 2e 0d 0a 00           d Keyboard....

00000172 <__c.4581>:
     172:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     182:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     192:	6f 6e 2e 0d 0a 00                                   on....

00000198 <__c.4579>:
     198:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     1a8:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4b 65 79 62     Not a Valid Keyb
     1b8:	6f 61 72 64 2e 0d 0a 00                             oard....

000001c0 <__c.4577>:
     1c0:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1d0:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1e0:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001ed <__c.4570>:
     1ed:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1fd:	68 65 64 2e 0d 0a 00                                hed....

00000204 <__c.4565>:
     204:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     214:	0d 0a 00                                            ...

00000217 <__c.4513>:
     217:	1b 5b 33 36 6d 4b 65 79 62 6f 61 72 64 20 48 6f     .[36mKeyboard Ho
     227:	73 74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e     st Demo running.
     237:	0d 0a 1b 5b 33 37 6d 00 00                          ...[37m..

00000240 <__ctors_end>:
     240:	11 24       	eor	r1, r1
     242:	1f be       	out	0x3f, r1	; 63
     244:	cf ef       	ldi	r28, 0xFF	; 255
     246:	d0 e2       	ldi	r29, 0x20	; 32
     248:	de bf       	out	0x3e, r29	; 62
     24a:	cd bf       	out	0x3d, r28	; 61

0000024c <__do_copy_data>:
     24c:	11 e0       	ldi	r17, 0x01	; 1
     24e:	a0 e0       	ldi	r26, 0x00	; 0
     250:	b1 e0       	ldi	r27, 0x01	; 1
     252:	ee e6       	ldi	r30, 0x6E	; 110
     254:	f5 e2       	ldi	r31, 0x25	; 37
     256:	00 e0       	ldi	r16, 0x00	; 0
     258:	0b bf       	out	0x3b, r16	; 59
     25a:	02 c0       	rjmp	.+4      	; 0x260 <__do_copy_data+0x14>
     25c:	07 90       	elpm	r0, Z+
     25e:	0d 92       	st	X+, r0
     260:	a4 32       	cpi	r26, 0x24	; 36
     262:	b1 07       	cpc	r27, r17
     264:	d9 f7       	brne	.-10     	; 0x25c <__do_copy_data+0x10>

00000266 <__do_clear_bss>:
     266:	15 e0       	ldi	r17, 0x05	; 5
     268:	a4 e2       	ldi	r26, 0x24	; 36
     26a:	b1 e0       	ldi	r27, 0x01	; 1
     26c:	01 c0       	rjmp	.+2      	; 0x270 <.do_clear_bss_start>

0000026e <.do_clear_bss_loop>:
     26e:	1d 92       	st	X+, r1

00000270 <.do_clear_bss_start>:
     270:	af 31       	cpi	r26, 0x1F	; 31
     272:	b1 07       	cpc	r27, r17
     274:	e1 f7       	brne	.-8      	; 0x26e <.do_clear_bss_loop>
     276:	af d1       	rcall	.+862    	; 0x5d6 <main>
     278:	0c 94 b5 12 	jmp	0x256a	; 0x256a <_exit>

0000027c <__bad_interrupt>:
     27c:	c1 ce       	rjmp	.-638    	; 0x0 <__vectors>

0000027e <CALLBACK_HIDParser_FilterHIDReportItem>:
 *  \param[in] CurrentItem  Pointer to the item the HID report parser is currently working with
 *
 *  \return Boolean true if the item should be stored into the HID report structure, false if it should be discarded
 */
bool CALLBACK_HIDParser_FilterHIDReportItem(HID_ReportItem_t* const CurrentItem)
{
     27e:	20 e0       	ldi	r18, 0x00	; 0
     280:	fc 01       	movw	r30, r24
     282:	81 85       	ldd	r24, Z+9	; 0x09
     284:	92 85       	ldd	r25, Z+10	; 0x0a
     286:	07 97       	sbiw	r24, 0x07	; 7
     288:	09 f4       	brne	.+2      	; 0x28c <CALLBACK_HIDParser_FilterHIDReportItem+0xe>
     28a:	21 e0       	ldi	r18, 0x01	; 1
	/* Check the attributes of the current item - see if we are interested in it or not;
	 * only store KEYBOARD usage page items into the Processed HID Report structure to
	 * save RAM and ignore the rest
	 */
	return (CurrentItem->Attributes.Usage.Page == USAGE_PAGE_KEYBOARD);
}
     28c:	82 2f       	mov	r24, r18
     28e:	08 95       	ret

00000290 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     290:	90 91 0a 05 	lds	r25, 0x050A
     294:	2d b7       	in	r18, 0x3d	; 61
     296:	3e b7       	in	r19, 0x3e	; 62
     298:	28 50       	subi	r18, 0x08	; 8
     29a:	30 40       	sbci	r19, 0x00	; 0
     29c:	0f b6       	in	r0, 0x3f	; 63
     29e:	f8 94       	cli
     2a0:	3e bf       	out	0x3e, r19	; 62
     2a2:	0f be       	out	0x3f, r0	; 63
     2a4:	2d bf       	out	0x3d, r18	; 61
     2a6:	ed b7       	in	r30, 0x3d	; 61
     2a8:	fe b7       	in	r31, 0x3e	; 62
     2aa:	31 96       	adiw	r30, 0x01	; 1
     2ac:	28 e9       	ldi	r18, 0x98	; 152
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	ad b7       	in	r26, 0x3d	; 61
     2b2:	be b7       	in	r27, 0x3e	; 62
     2b4:	12 96       	adiw	r26, 0x02	; 2
     2b6:	3c 93       	st	X, r19
     2b8:	2e 93       	st	-X, r18
     2ba:	11 97       	sbiw	r26, 0x01	; 1
     2bc:	82 83       	std	Z+2, r24	; 0x02
     2be:	13 82       	std	Z+3, r1	; 0x03
     2c0:	64 83       	std	Z+4, r22	; 0x04
     2c2:	15 82       	std	Z+5, r1	; 0x05
     2c4:	96 83       	std	Z+6, r25	; 0x06
     2c6:	17 82       	std	Z+7, r1	; 0x07
     2c8:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <printf_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     2cc:	8b b1       	in	r24, 0x0b	; 11
     2ce:	8f 70       	andi	r24, 0x0F	; 15
     2d0:	80 69       	ori	r24, 0x90	; 144
     2d2:	8b b9       	out	0x0b, r24	; 11
     2d4:	2d b7       	in	r18, 0x3d	; 61
     2d6:	3e b7       	in	r19, 0x3e	; 62
     2d8:	28 5f       	subi	r18, 0xF8	; 248
     2da:	3f 4f       	sbci	r19, 0xFF	; 255
     2dc:	0f b6       	in	r0, 0x3f	; 63
     2de:	f8 94       	cli
     2e0:	3e bf       	out	0x3e, r19	; 62
     2e2:	0f be       	out	0x3f, r0	; 63
     2e4:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     2e6:	08 95       	ret

000002e8 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     2e8:	1f 93       	push	r17
     2ea:	18 2f       	mov	r17, r24
	USB_Disable();
     2ec:	65 d4       	rcall	.+2250   	; 0xbb8 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     2ee:	00 d0       	rcall	.+0      	; 0x2f0 <EVENT_USB_Host_HostError+0x8>
     2f0:	00 d0       	rcall	.+0      	; 0x2f2 <EVENT_USB_Host_HostError+0xa>
     2f2:	ed b7       	in	r30, 0x3d	; 61
     2f4:	fe b7       	in	r31, 0x3e	; 62
     2f6:	31 96       	adiw	r30, 0x01	; 1
     2f8:	8e ee       	ldi	r24, 0xEE	; 238
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	ad b7       	in	r26, 0x3d	; 61
     2fe:	be b7       	in	r27, 0x3e	; 62
     300:	12 96       	adiw	r26, 0x02	; 2
     302:	9c 93       	st	X, r25
     304:	8e 93       	st	-X, r24
     306:	11 97       	sbiw	r26, 0x01	; 1
     308:	12 83       	std	Z+2, r17	; 0x02
     30a:	13 82       	std	Z+3, r1	; 0x03
     30c:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <printf_P>
     310:	8b b1       	in	r24, 0x0b	; 11
     312:	8f 70       	andi	r24, 0x0F	; 15
     314:	80 69       	ori	r24, 0x90	; 144
     316:	8b b9       	out	0x0b, r24	; 11
     318:	0f 90       	pop	r0
     31a:	0f 90       	pop	r0
     31c:	0f 90       	pop	r0
     31e:	0f 90       	pop	r0
     320:	ff cf       	rjmp	.-2      	; 0x320 <EVENT_USB_Host_HostError+0x38>

00000322 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     322:	8d ee       	ldi	r24, 0xED	; 237
     324:	91 e0       	ldi	r25, 0x01	; 1
     326:	0e 94 13 10 	call	0x2026	; 0x2026 <puts_P>
     32a:	8b b1       	in	r24, 0x0b	; 11
     32c:	8f 70       	andi	r24, 0x0F	; 15
     32e:	80 61       	ori	r24, 0x10	; 16
     330:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     332:	08 95       	ret

00000334 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     334:	84 e0       	ldi	r24, 0x04	; 4
     336:	92 e0       	ldi	r25, 0x02	; 2
     338:	0e 94 13 10 	call	0x2026	; 0x2026 <puts_P>
     33c:	8b b1       	in	r24, 0x0b	; 11
     33e:	8f 70       	andi	r24, 0x0F	; 15
     340:	80 6a       	ori	r24, 0xA0	; 160
     342:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     344:	08 95       	ret

00000346 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     346:	0f 93       	push	r16
     348:	1f 93       	push	r17
     34a:	df 93       	push	r29
     34c:	cf 93       	push	r28
     34e:	cd b7       	in	r28, 0x3d	; 61
     350:	de b7       	in	r29, 0x3e	; 62
     352:	c2 50       	subi	r28, 0x02	; 2
     354:	d2 40       	sbci	r29, 0x02	; 2
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	f8 94       	cli
     35a:	de bf       	out	0x3e, r29	; 62
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	cd bf       	out	0x3d, r28	; 61
     360:	8b b1       	in	r24, 0x0b	; 11
     362:	8f 70       	andi	r24, 0x0F	; 15
     364:	80 6a       	ori	r24, 0xA0	; 160
     366:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     368:	8e 01       	movw	r16, r28
     36a:	0d 5f       	subi	r16, 0xFD	; 253
     36c:	1f 4f       	sbci	r17, 0xFF	; 255
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	be 01       	movw	r22, r28
     372:	6f 5f       	subi	r22, 0xFF	; 255
     374:	7f 4f       	sbci	r23, 0xFF	; 255
     376:	a8 01       	movw	r20, r16
     378:	20 e0       	ldi	r18, 0x00	; 0
     37a:	32 e0       	ldi	r19, 0x02	; 2
     37c:	70 d5       	rcall	.+2784   	; 0xe5e <USB_Host_GetDeviceConfigDescriptor>
     37e:	88 23       	and	r24, r24
     380:	19 f0       	breq	.+6      	; 0x388 <EVENT_USB_Host_DeviceEnumerationComplete+0x42>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     382:	80 ec       	ldi	r24, 0xC0	; 192
     384:	91 e0       	ldi	r25, 0x01	; 1
     386:	12 c0       	rjmp	.+36     	; 0x3ac <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_ConfigurePipes(&Keyboard_HID_Interface,
     388:	69 81       	ldd	r22, Y+1	; 0x01
     38a:	7a 81       	ldd	r23, Y+2	; 0x02
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	91 e0       	ldi	r25, 0x01	; 1
     390:	a8 01       	movw	r20, r16
     392:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <HID_Host_ConfigurePipes>
     396:	88 23       	and	r24, r24
     398:	19 f0       	breq	.+6      	; 0x3a0 <EVENT_USB_Host_DeviceEnumerationComplete+0x5a>
	                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Keyboard.\r\n"));
     39a:	88 e9       	ldi	r24, 0x98	; 152
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	06 c0       	rjmp	.+12     	; 0x3ac <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	ff d6       	rcall	.+3582   	; 0x11a2 <USB_Host_SetDeviceConfiguration>
     3a4:	88 23       	and	r24, r24
     3a6:	41 f0       	breq	.+16     	; 0x3b8 <EVENT_USB_Host_DeviceEnumerationComplete+0x72>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     3a8:	82 e7       	ldi	r24, 0x72	; 114
     3aa:	91 e0       	ldi	r25, 0x01	; 1
     3ac:	0e 94 13 10 	call	0x2026	; 0x2026 <puts_P>
     3b0:	8b b1       	in	r24, 0x0b	; 11
     3b2:	8f 70       	andi	r24, 0x0F	; 15
     3b4:	80 69       	ori	r24, 0x90	; 144
     3b6:	18 c0       	rjmp	.+48     	; 0x3e8 <EVENT_USB_Host_DeviceEnumerationComplete+0xa2>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_SetReportProtocol(&Keyboard_HID_Interface) != 0)
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	91 e0       	ldi	r25, 0x01	; 1
     3bc:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <HID_Host_SetReportProtocol>
     3c0:	88 23       	and	r24, r24
     3c2:	59 f0       	breq	.+22     	; 0x3da <EVENT_USB_Host_DeviceEnumerationComplete+0x94>
	{
		puts_P(PSTR("Error Setting Report Protocol Mode or Not a Valid Keyboard.\r\n"));
     3c4:	84 e3       	ldi	r24, 0x34	; 52
     3c6:	91 e0       	ldi	r25, 0x01	; 1
     3c8:	0e 94 13 10 	call	0x2026	; 0x2026 <puts_P>
     3cc:	8b b1       	in	r24, 0x0b	; 11
     3ce:	8f 70       	andi	r24, 0x0F	; 15
     3d0:	80 69       	ori	r24, 0x90	; 144
     3d2:	8b b9       	out	0x0b, r24	; 11
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	e5 d6       	rcall	.+3530   	; 0x11a2 <USB_Host_SetDeviceConfiguration>
     3d8:	08 c0       	rjmp	.+16     	; 0x3ea <EVENT_USB_Host_DeviceEnumerationComplete+0xa4>
		return;
	}

	puts_P(PSTR("Keyboard Enumerated.\r\n"));
     3da:	8d e1       	ldi	r24, 0x1D	; 29
     3dc:	91 e0       	ldi	r25, 0x01	; 1
     3de:	0e 94 13 10 	call	0x2026	; 0x2026 <puts_P>
     3e2:	8b b1       	in	r24, 0x0b	; 11
     3e4:	8f 70       	andi	r24, 0x0F	; 15
     3e6:	80 66       	ori	r24, 0x60	; 96
     3e8:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     3ea:	ce 5f       	subi	r28, 0xFE	; 254
     3ec:	dd 4f       	sbci	r29, 0xFD	; 253
     3ee:	0f b6       	in	r0, 0x3f	; 63
     3f0:	f8 94       	cli
     3f2:	de bf       	out	0x3e, r29	; 62
     3f4:	0f be       	out	0x3f, r0	; 63
     3f6:	cd bf       	out	0x3d, r28	; 61
     3f8:	cf 91       	pop	r28
     3fa:	df 91       	pop	r29
     3fc:	1f 91       	pop	r17
     3fe:	0f 91       	pop	r16
     400:	08 95       	ret

00000402 <KeyboardHost_Task>:

/** Task to manage an enumerated USB keyboard once connected, to display key state
 *  data as it is received.
 */
void KeyboardHost_Task(void)
{
     402:	8f 92       	push	r8
     404:	9f 92       	push	r9
     406:	af 92       	push	r10
     408:	bf 92       	push	r11
     40a:	cf 92       	push	r12
     40c:	df 92       	push	r13
     40e:	ef 92       	push	r14
     410:	ff 92       	push	r15
     412:	0f 93       	push	r16
     414:	1f 93       	push	r17
     416:	df 93       	push	r29
     418:	cf 93       	push	r28
     41a:	cd b7       	in	r28, 0x3d	; 61
     41c:	de b7       	in	r29, 0x3e	; 62
				/* Once a scan-code is found, stop scanning through the report items */
				break;
			}
		}
	}
}
     41e:	ad b6       	in	r10, 0x3d	; 61
     420:	be b6       	in	r11, 0x3e	; 62
/** Task to manage an enumerated USB keyboard once connected, to display key state
 *  data as it is received.
 */
void KeyboardHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     422:	80 91 0a 05 	lds	r24, 0x050A
     426:	8b 30       	cpi	r24, 0x0B	; 11
     428:	09 f0       	breq	.+2      	; 0x42c <KeyboardHost_Task+0x2a>
     42a:	7a c0       	rjmp	.+244    	; 0x520 <KeyboardHost_Task+0x11e>
	  return;
	
	if (HID_Host_IsReportReceived(&Keyboard_HID_Interface))
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <HID_Host_IsReportReceived>
     434:	88 23       	and	r24, r24
     436:	09 f4       	brne	.+2      	; 0x43a <KeyboardHost_Task+0x38>
     438:	73 c0       	rjmp	.+230    	; 0x520 <KeyboardHost_Task+0x11e>
     43a:	9d b6       	in	r9, 0x3d	; 61
     43c:	8e b6       	in	r8, 0x3e	; 62
	{
		uint8_t KeyboardReport[Keyboard_HID_Interface.State.LargestReportSize];
     43e:	80 91 12 01 	lds	r24, 0x0112
     442:	2d b7       	in	r18, 0x3d	; 61
     444:	3e b7       	in	r19, 0x3e	; 62
     446:	28 1b       	sub	r18, r24
     448:	31 09       	sbc	r19, r1
     44a:	0f b6       	in	r0, 0x3f	; 63
     44c:	f8 94       	cli
     44e:	3e bf       	out	0x3e, r19	; 62
     450:	0f be       	out	0x3f, r0	; 63
     452:	2d bf       	out	0x3d, r18	; 61
     454:	0d b7       	in	r16, 0x3d	; 61
     456:	1e b7       	in	r17, 0x3e	; 62
     458:	0f 5f       	subi	r16, 0xFF	; 255
     45a:	1f 4f       	sbci	r17, 0xFF	; 255
		HID_Host_ReceiveReport(&Keyboard_HID_Interface, &KeyboardReport);
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	91 e0       	ldi	r25, 0x01	; 1
     460:	b8 01       	movw	r22, r16
     462:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <HID_Host_ReceiveReport>
		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
		{
			HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];

			/* Update the report item value if it is contained within the current report */
			if (!(USB_GetHIDReportItemInfo(KeyboardReport, ReportItem)))
     466:	d0 2e       	mov	r13, r16
     468:	e1 2e       	mov	r14, r17
     46a:	ff 24       	eor	r15, r15
		uint8_t KeyboardReport[Keyboard_HID_Interface.State.LargestReportSize];
		HID_Host_ReceiveReport(&Keyboard_HID_Interface, &KeyboardReport);

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
		{
			HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     46c:	8a e2       	ldi	r24, 0x2A	; 42
     46e:	c8 2e       	mov	r12, r24
     470:	47 c0       	rjmp	.+142    	; 0x500 <KeyboardHost_Task+0xfe>
     472:	fc 9c       	mul	r15, r12
     474:	80 01       	movw	r16, r0
     476:	11 24       	eor	r1, r1
     478:	0b 5d       	subi	r16, 0xDB	; 219
     47a:	1e 4f       	sbci	r17, 0xFE	; 254

			/* Update the report item value if it is contained within the current report */
			if (!(USB_GetHIDReportItemInfo(KeyboardReport, ReportItem)))
     47c:	8d 2d       	mov	r24, r13
     47e:	9e 2d       	mov	r25, r14
     480:	b8 01       	movw	r22, r16
     482:	c6 d6       	rcall	.+3468   	; 0x1210 <USB_GetHIDReportItemInfo>
     484:	88 23       	and	r24, r24
     486:	d9 f1       	breq	.+118    	; 0x4fe <KeyboardHost_Task+0xfc>
			  continue;

			/* Determine what report item is being tested, process updated value as needed */
			if ((ReportItem->Attributes.Usage.Page      == USAGE_PAGE_KEYBOARD) &&
     488:	f8 01       	movw	r30, r16
     48a:	81 85       	ldd	r24, Z+9	; 0x09
     48c:	92 85       	ldd	r25, Z+10	; 0x0a
     48e:	07 97       	sbiw	r24, 0x07	; 7
     490:	b1 f5       	brne	.+108    	; 0x4fe <KeyboardHost_Task+0xfc>
     492:	80 85       	ldd	r24, Z+8	; 0x08
     494:	88 30       	cpi	r24, 0x08	; 8
     496:	99 f5       	brne	.+102    	; 0x4fe <KeyboardHost_Task+0xfc>
     498:	86 89       	ldd	r24, Z+22	; 0x16
     49a:	97 89       	ldd	r25, Z+23	; 0x17
     49c:	a0 8d       	ldd	r26, Z+24	; 0x18
     49e:	b1 8d       	ldd	r27, Z+25	; 0x19
     4a0:	02 97       	sbiw	r24, 0x02	; 2
     4a2:	a1 05       	cpc	r26, r1
     4a4:	b1 05       	cpc	r27, r1
     4a6:	58 f1       	brcs	.+86     	; 0x4fe <KeyboardHost_Task+0xfc>
     4a8:	82 81       	ldd	r24, Z+2	; 0x02
     4aa:	88 23       	and	r24, r24
     4ac:	41 f5       	brne	.+80     	; 0x4fe <KeyboardHost_Task+0xfc>
				(ReportItem->Attributes.BitSize         == 8)                   &&
				(ReportItem->Attributes.Logical.Maximum > 1)                    &&
				(ReportItem->ItemType                   == HID_REPORT_ITEM_In))
			{
				/* Key code is an unsigned char in length, cast to the appropriate type */
				uint8_t KeyCode = (uint8_t)ReportItem->Value;
     4ae:	62 a1       	ldd	r22, Z+34	; 0x22

				/* If scan-code is non-zero, a key is being pressed */
				if (KeyCode)
     4b0:	66 23       	and	r22, r22
     4b2:	59 f1       	breq	.+86     	; 0x50a <KeyboardHost_Task+0x108>
				PORTD = ((PORTD & ~LEDMask) | ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PORTD ^= LEDMask;
     4b4:	8b b1       	in	r24, 0x0b	; 11
     4b6:	90 e2       	ldi	r25, 0x20	; 32
     4b8:	89 27       	eor	r24, r25
     4ba:	8b b9       	out	0x0b, r24	; 11
					LEDs_ToggleLEDs(LEDS_LED2);

					char PressedKey = 0;

					/* Convert scan-code to printable character if alphanumeric */
					if ((KeyCode >= HID_KEYBOARD_SC_A) && (KeyCode <= HID_KEYBOARD_SC_Z))
     4bc:	86 2f       	mov	r24, r22
     4be:	84 50       	subi	r24, 0x04	; 4
     4c0:	8a 31       	cpi	r24, 0x1A	; 26
     4c2:	10 f4       	brcc	.+4      	; 0x4c8 <KeyboardHost_Task+0xc6>
					{
						PressedKey = (KeyCode - HID_KEYBOARD_SC_A) + 'A';
     4c4:	8f 5b       	subi	r24, 0xBF	; 191
     4c6:	11 c0       	rjmp	.+34     	; 0x4ea <KeyboardHost_Task+0xe8>
					}
					else if ((KeyCode >= HID_KEYBOARD_SC_1_AND_EXCLAMATION) &
     4c8:	86 2f       	mov	r24, r22
     4ca:	8e 51       	subi	r24, 0x1E	; 30
     4cc:	89 30       	cpi	r24, 0x09	; 9
     4ce:	10 f4       	brcc	.+4      	; 0x4d4 <KeyboardHost_Task+0xd2>
							 (KeyCode  < HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS))
					{
						PressedKey = (KeyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + '1';
     4d0:	8f 5c       	subi	r24, 0xCF	; 207
     4d2:	0b c0       	rjmp	.+22     	; 0x4ea <KeyboardHost_Task+0xe8>
					}
					else if (KeyCode == HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS)
     4d4:	67 32       	cpi	r22, 0x27	; 39
     4d6:	11 f4       	brne	.+4      	; 0x4dc <KeyboardHost_Task+0xda>
     4d8:	80 e3       	ldi	r24, 0x30	; 48
     4da:	09 c0       	rjmp	.+18     	; 0x4ee <KeyboardHost_Task+0xec>
					{
						PressedKey = '0';
					}
					else if (KeyCode == HID_KEYBOARD_SC_SPACE)
     4dc:	6c 32       	cpi	r22, 0x2C	; 44
     4de:	11 f4       	brne	.+4      	; 0x4e4 <KeyboardHost_Task+0xe2>
     4e0:	80 e2       	ldi	r24, 0x20	; 32
     4e2:	05 c0       	rjmp	.+10     	; 0x4ee <KeyboardHost_Task+0xec>
					{
						PressedKey = ' ';
					}
					else if (KeyCode == HID_KEYBOARD_SC_ENTER)
     4e4:	68 32       	cpi	r22, 0x28	; 40
     4e6:	89 f4       	brne	.+34     	; 0x50a <KeyboardHost_Task+0x108>
     4e8:	19 c0       	rjmp	.+50     	; 0x51c <KeyboardHost_Task+0x11a>
					{
						PressedKey = '\n';
					}

					/* Print the pressed key character out through the serial port if valid */
					if (PressedKey)
     4ea:	88 23       	and	r24, r24
     4ec:	71 f0       	breq	.+28     	; 0x50a <KeyboardHost_Task+0x108>
					  putchar(PressedKey);
     4ee:	60 91 1b 05 	lds	r22, 0x051B
     4f2:	70 91 1c 05 	lds	r23, 0x051C
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <fputc>
     4fc:	06 c0       	rjmp	.+12     	; 0x50a <KeyboardHost_Task+0x108>
	if (HID_Host_IsReportReceived(&Keyboard_HID_Interface))
	{
		uint8_t KeyboardReport[Keyboard_HID_Interface.State.LargestReportSize];
		HID_Host_ReceiveReport(&Keyboard_HID_Interface, &KeyboardReport);

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     4fe:	f3 94       	inc	r15
     500:	80 91 24 01 	lds	r24, 0x0124
     504:	f8 16       	cp	r15, r24
     506:	08 f4       	brcc	.+2      	; 0x50a <KeyboardHost_Task+0x108>
     508:	b4 cf       	rjmp	.-152    	; 0x472 <KeyboardHost_Task+0x70>
     50a:	89 2d       	mov	r24, r9
     50c:	98 2d       	mov	r25, r8
     50e:	9c 01       	movw	r18, r24
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	f8 94       	cli
     514:	3e bf       	out	0x3e, r19	; 62
     516:	0f be       	out	0x3f, r0	; 63
     518:	2d bf       	out	0x3d, r18	; 61
     51a:	02 c0       	rjmp	.+4      	; 0x520 <KeyboardHost_Task+0x11e>
     51c:	8a e0       	ldi	r24, 0x0A	; 10
     51e:	e7 cf       	rjmp	.-50     	; 0x4ee <KeyboardHost_Task+0xec>
				/* Once a scan-code is found, stop scanning through the report items */
				break;
			}
		}
	}
}
     520:	0f b6       	in	r0, 0x3f	; 63
     522:	f8 94       	cli
     524:	be be       	out	0x3e, r11	; 62
     526:	0f be       	out	0x3f, r0	; 63
     528:	ad be       	out	0x3d, r10	; 61
     52a:	cf 91       	pop	r28
     52c:	df 91       	pop	r29
     52e:	1f 91       	pop	r17
     530:	0f 91       	pop	r16
     532:	ff 90       	pop	r15
     534:	ef 90       	pop	r14
     536:	df 90       	pop	r13
     538:	cf 90       	pop	r12
     53a:	bf 90       	pop	r11
     53c:	af 90       	pop	r10
     53e:	9f 90       	pop	r9
     540:	8f 90       	pop	r8
     542:	08 95       	ret

00000544 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     544:	84 b7       	in	r24, 0x34	; 52
     546:	87 7f       	andi	r24, 0xF7	; 247
     548:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     54a:	28 e1       	ldi	r18, 0x18	; 24
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	f8 94       	cli
     550:	20 93 60 00 	sts	0x0060, r18
     554:	10 92 60 00 	sts	0x0060, r1
     558:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	80 e8       	ldi	r24, 0x80	; 128
     55e:	0f b6       	in	r0, 0x3f	; 63
     560:	f8 94       	cli
     562:	80 93 61 00 	sts	0x0061, r24
     566:	90 93 61 00 	sts	0x0061, r25
     56a:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     56c:	83 e3       	ldi	r24, 0x33	; 51
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	90 93 cd 00 	sts	0x00CD, r25
     574:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     578:	86 e0       	ldi	r24, 0x06	; 6
     57a:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     57e:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     582:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     586:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     588:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     58a:	8a b1       	in	r24, 0x0a	; 10
     58c:	80 6f       	ori	r24, 0xF0	; 240
     58e:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     590:	8b b1       	in	r24, 0x0b	; 11
     592:	8f 70       	andi	r24, 0x0F	; 15
     594:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     596:	07 d3       	rcall	.+1550   	; 0xba6 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     598:	eb e0       	ldi	r30, 0x0B	; 11
     59a:	f5 e0       	ldi	r31, 0x05	; 5
     59c:	f0 93 1a 05 	sts	0x051A, r31
     5a0:	e0 93 19 05 	sts	0x0519, r30
					stdout = Stream;
     5a4:	f0 93 1c 05 	sts	0x051C, r31
     5a8:	e0 93 1b 05 	sts	0x051B, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     5ac:	8e e0       	ldi	r24, 0x0E	; 14
     5ae:	df 01       	movw	r26, r30
     5b0:	1d 92       	st	X+, r1
     5b2:	8a 95       	dec	r24
     5b4:	e9 f7       	brne	.-6      	; 0x5b0 <SetupHardware+0x6c>
     5b6:	83 e0       	ldi	r24, 0x03	; 3
     5b8:	80 93 0e 05 	sts	0x050E, r24
     5bc:	87 ea       	ldi	r24, 0xA7	; 167
     5be:	9f e0       	ldi	r25, 0x0F	; 15
     5c0:	90 93 14 05 	sts	0x0514, r25
     5c4:	80 93 13 05 	sts	0x0513, r24
     5c8:	81 eb       	ldi	r24, 0xB1	; 177
     5ca:	9f e0       	ldi	r25, 0x0F	; 15
     5cc:	90 93 16 05 	sts	0x0516, r25
     5d0:	80 93 15 05 	sts	0x0515, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     5d4:	08 95       	ret

000005d6 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     5d6:	b6 df       	rcall	.-148    	; 0x544 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Keyboard Host Demo running.\r\n" ESC_FG_WHITE));
     5d8:	87 e1       	ldi	r24, 0x17	; 23
     5da:	92 e0       	ldi	r25, 0x02	; 2
     5dc:	0e 94 13 10 	call	0x2026	; 0x2026 <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     5e0:	8b b1       	in	r24, 0x0b	; 11
     5e2:	8f 70       	andi	r24, 0x0F	; 15
     5e4:	80 61       	ori	r24, 0x10	; 16
     5e6:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     5e8:	78 94       	sei

	for (;;)
	{
		KeyboardHost_Task();
     5ea:	0b df       	rcall	.-490    	; 0x402 <KeyboardHost_Task>

		HID_Host_USBTask(&Keyboard_HID_Interface);
		USB_USBTask();
     5ec:	ff d5       	rcall	.+3070   	; 0x11ec <USB_USBTask>
     5ee:	fd cf       	rjmp	.-6      	; 0x5ea <main+0x14>

000005f0 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     5f0:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     5f2:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     5f6:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     5fa:	80 91 a0 00 	lds	r24, 0x00A0
     5fe:	8f 7d       	andi	r24, 0xDF	; 223
     600:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     604:	80 91 9f 00 	lds	r24, 0x009F
     608:	8f 7d       	andi	r24, 0xDF	; 223
     60a:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     60e:	80 91 9e 00 	lds	r24, 0x009E
     612:	81 60       	ori	r24, 0x01	; 1
     614:	80 93 9e 00 	sts	0x009E, r24
     618:	28 c0       	rjmp	.+80     	; 0x66a <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     61a:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     61e:	85 ff       	sbrs	r24, 5
     620:	06 c0       	rjmp	.+12     	; 0x62e <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     622:	80 91 9f 00 	lds	r24, 0x009F
     626:	8f 7d       	andi	r24, 0xDF	; 223
     628:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     62c:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     62e:	80 91 0a 05 	lds	r24, 0x050A
     632:	81 30       	cpi	r24, 0x01	; 1
     634:	11 f4       	brne	.+4      	; 0x63a <USB_Host_WaitMS+0x4a>
     636:	91 e0       	ldi	r25, 0x01	; 1
     638:	1a c0       	rjmp	.+52     	; 0x66e <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     63a:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     63e:	84 ff       	sbrs	r24, 4
     640:	09 c0       	rjmp	.+18     	; 0x654 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     642:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     646:	80 91 a6 00 	lds	r24, 0x00A6
     64a:	8f 7e       	andi	r24, 0xEF	; 239
     64c:	80 93 a6 00 	sts	0x00A6, r24
     650:	92 e0       	ldi	r25, 0x02	; 2
     652:	0d c0       	rjmp	.+26     	; 0x66e <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     654:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     658:	81 ff       	sbrs	r24, 1
     65a:	07 c0       	rjmp	.+14     	; 0x66a <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     65c:	80 91 a6 00 	lds	r24, 0x00A6
     660:	8d 7f       	andi	r24, 0xFD	; 253
     662:	80 93 a6 00 	sts	0x00A6, r24
     666:	93 e0       	ldi	r25, 0x03	; 3
     668:	02 c0       	rjmp	.+4      	; 0x66e <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     66a:	99 23       	and	r25, r25
     66c:	b1 f6       	brne	.-84     	; 0x61a <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     66e:	20 fd       	sbrc	r18, 0
     670:	05 c0       	rjmp	.+10     	; 0x67c <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     672:	80 91 9e 00 	lds	r24, 0x009E
     676:	8e 7f       	andi	r24, 0xFE	; 254
     678:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     67c:	35 ff       	sbrs	r19, 5
     67e:	05 c0       	rjmp	.+10     	; 0x68a <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     680:	80 91 a0 00 	lds	r24, 0x00A0
     684:	80 62       	ori	r24, 0x20	; 32
     686:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     68a:	89 2f       	mov	r24, r25
     68c:	08 95       	ret

0000068e <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     68e:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     692:	80 91 a0 00 	lds	r24, 0x00A0
     696:	8d 7f       	andi	r24, 0xFD	; 253
     698:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     69c:	80 91 9e 00 	lds	r24, 0x009E
     6a0:	82 60       	ori	r24, 0x02	; 2
     6a2:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     6a6:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     6aa:	81 fd       	sbrc	r24, 1
     6ac:	fc cf       	rjmp	.-8      	; 0x6a6 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6ae:	80 91 9e 00 	lds	r24, 0x009E
     6b2:	81 60       	ori	r24, 0x01	; 1
     6b4:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     6b8:	10 92 00 05 	sts	0x0500, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     6bc:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     6c0:	80 91 a0 00 	lds	r24, 0x00A0
     6c4:	8f 7d       	andi	r24, 0xDF	; 223
     6c6:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6ca:	80 91 9f 00 	lds	r24, 0x009F
     6ce:	8f 7d       	andi	r24, 0xDF	; 223
     6d0:	80 93 9f 00 	sts	0x009F, r24
     6d4:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6d6:	40 ed       	ldi	r20, 0xD0	; 208
     6d8:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     6da:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     6de:	85 ff       	sbrs	r24, 5
     6e0:	0b c0       	rjmp	.+22     	; 0x6f8 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6e2:	80 91 9f 00 	lds	r24, 0x009F
     6e6:	8f 7d       	andi	r24, 0xDF	; 223
     6e8:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     6ec:	80 91 9f 00 	lds	r24, 0x009F
     6f0:	8d 7f       	andi	r24, 0xFD	; 253
     6f2:	80 93 9f 00 	sts	0x009F, r24
     6f6:	05 c0       	rjmp	.+10     	; 0x702 <USB_Host_ResetDevice+0x74>
     6f8:	ca 01       	movw	r24, r20
     6fa:	01 97       	sbiw	r24, 0x01	; 1
     6fc:	f1 f7       	brne	.-4      	; 0x6fa <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     6fe:	21 50       	subi	r18, 0x01	; 1
     700:	61 f7       	brne	.-40     	; 0x6da <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     702:	35 ff       	sbrs	r19, 5
     704:	05 c0       	rjmp	.+10     	; 0x710 <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     706:	80 91 a0 00 	lds	r24, 0x00A0
     70a:	80 62       	ori	r24, 0x20	; 32
     70c:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     710:	60 fd       	sbrc	r22, 0
     712:	05 c0       	rjmp	.+10     	; 0x71e <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     714:	80 91 9e 00 	lds	r24, 0x009E
     718:	8e 7f       	andi	r24, 0xFE	; 254
     71a:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     71e:	80 91 a0 00 	lds	r24, 0x00A0
     722:	82 60       	ori	r24, 0x02	; 2
     724:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     728:	08 95       	ret

0000072a <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     72a:	ef 92       	push	r14
     72c:	0f 93       	push	r16
     72e:	1f 93       	push	r17
     730:	df 93       	push	r29
     732:	cf 93       	push	r28
     734:	cd b7       	in	r28, 0x3d	; 61
     736:	de b7       	in	r29, 0x3e	; 62
     738:	28 97       	sbiw	r28, 0x08	; 8
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	f8 94       	cli
     73e:	de bf       	out	0x3e, r29	; 62
     740:	0f be       	out	0x3f, r0	; 63
     742:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     744:	80 91 0a 05 	lds	r24, 0x050A
     748:	85 30       	cpi	r24, 0x05	; 5
     74a:	09 f4       	brne	.+2      	; 0x74e <USB_Host_ProcessNextHostState+0x24>
     74c:	94 c0       	rjmp	.+296    	; 0x876 <USB_Host_ProcessNextHostState+0x14c>
     74e:	86 30       	cpi	r24, 0x06	; 6
     750:	68 f4       	brcc	.+26     	; 0x76c <USB_Host_ProcessNextHostState+0x42>
     752:	82 30       	cpi	r24, 0x02	; 2
     754:	b9 f1       	breq	.+110    	; 0x7c4 <USB_Host_ProcessNextHostState+0x9a>
     756:	83 30       	cpi	r24, 0x03	; 3
     758:	18 f4       	brcc	.+6      	; 0x760 <USB_Host_ProcessNextHostState+0x36>
     75a:	88 23       	and	r24, r24
     75c:	a1 f0       	breq	.+40     	; 0x786 <USB_Host_ProcessNextHostState+0x5c>
     75e:	04 c1       	rjmp	.+520    	; 0x968 <USB_Host_ProcessNextHostState+0x23e>
     760:	83 30       	cpi	r24, 0x03	; 3
     762:	d1 f1       	breq	.+116    	; 0x7d8 <USB_Host_ProcessNextHostState+0xae>
     764:	84 30       	cpi	r24, 0x04	; 4
     766:	09 f0       	breq	.+2      	; 0x76a <USB_Host_ProcessNextHostState+0x40>
     768:	ff c0       	rjmp	.+510    	; 0x968 <USB_Host_ProcessNextHostState+0x23e>
     76a:	5d c0       	rjmp	.+186    	; 0x826 <USB_Host_ProcessNextHostState+0xfc>
     76c:	87 30       	cpi	r24, 0x07	; 7
     76e:	09 f4       	brne	.+2      	; 0x772 <USB_Host_ProcessNextHostState+0x48>
     770:	9b c0       	rjmp	.+310    	; 0x8a8 <USB_Host_ProcessNextHostState+0x17e>
     772:	87 30       	cpi	r24, 0x07	; 7
     774:	08 f4       	brcc	.+2      	; 0x778 <USB_Host_ProcessNextHostState+0x4e>
     776:	8a c0       	rjmp	.+276    	; 0x88c <USB_Host_ProcessNextHostState+0x162>
     778:	88 30       	cpi	r24, 0x08	; 8
     77a:	09 f4       	brne	.+2      	; 0x77e <USB_Host_ProcessNextHostState+0x54>
     77c:	b3 c0       	rjmp	.+358    	; 0x8e4 <USB_Host_ProcessNextHostState+0x1ba>
     77e:	89 30       	cpi	r24, 0x09	; 9
     780:	09 f0       	breq	.+2      	; 0x784 <USB_Host_ProcessNextHostState+0x5a>
     782:	f2 c0       	rjmp	.+484    	; 0x968 <USB_Host_ProcessNextHostState+0x23e>
     784:	d7 c0       	rjmp	.+430    	; 0x934 <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     786:	00 91 fe 04 	lds	r16, 0x04FE
     78a:	10 91 ff 04 	lds	r17, 0x04FF
     78e:	01 15       	cp	r16, r1
     790:	11 05       	cpc	r17, r1
     792:	09 f4       	brne	.+2      	; 0x796 <USB_Host_ProcessNextHostState+0x6c>
     794:	e9 c0       	rjmp	.+466    	; 0x968 <USB_Host_ProcessNextHostState+0x23e>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	2b df       	rcall	.-426    	; 0x5f0 <USB_Host_WaitMS>
     79a:	68 2f       	mov	r22, r24
     79c:	88 23       	and	r24, r24
     79e:	31 f0       	breq	.+12     	; 0x7ac <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
     7a0:	80 91 fd 04 	lds	r24, 0x04FD
     7a4:	80 93 0a 05 	sts	0x050A, r24
     7a8:	91 e0       	ldi	r25, 0x01	; 1
     7aa:	da c0       	rjmp	.+436    	; 0x960 <USB_Host_ProcessNextHostState+0x236>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     7ac:	c8 01       	movw	r24, r16
     7ae:	01 97       	sbiw	r24, 0x01	; 1
     7b0:	90 93 ff 04 	sts	0x04FF, r25
     7b4:	80 93 fe 04 	sts	0x04FE, r24
     7b8:	89 2b       	or	r24, r25
     7ba:	09 f0       	breq	.+2      	; 0x7be <USB_Host_ProcessNextHostState+0x94>
     7bc:	d5 c0       	rjmp	.+426    	; 0x968 <USB_Host_ProcessNextHostState+0x23e>
				  USB_HostState = PostWaitState;
     7be:	80 91 fd 04 	lds	r24, 0x04FD
     7c2:	07 c0       	rjmp	.+14     	; 0x7d2 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     7c4:	88 ee       	ldi	r24, 0xE8	; 232
     7c6:	93 e0       	ldi	r25, 0x03	; 3
     7c8:	90 93 ff 04 	sts	0x04FF, r25
     7cc:	80 93 fe 04 	sts	0x04FE, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     7d0:	83 e0       	ldi	r24, 0x03	; 3
     7d2:	80 93 0a 05 	sts	0x050A, r24
     7d6:	c8 c0       	rjmp	.+400    	; 0x968 <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     7d8:	80 91 fe 04 	lds	r24, 0x04FE
     7dc:	90 91 ff 04 	lds	r25, 0x04FF
     7e0:	01 97       	sbiw	r24, 0x01	; 1
     7e2:	90 93 ff 04 	sts	0x04FF, r25
     7e6:	80 93 fe 04 	sts	0x04FE, r24
     7ea:	01 96       	adiw	r24, 0x01	; 1
     7ec:	29 f0       	breq	.+10     	; 0x7f8 <USB_Host_ProcessNextHostState+0xce>
     7ee:	80 ed       	ldi	r24, 0xD0	; 208
     7f0:	97 e0       	ldi	r25, 0x07	; 7
     7f2:	01 97       	sbiw	r24, 0x01	; 1
     7f4:	f1 f7       	brne	.-4      	; 0x7f2 <USB_Host_ProcessNextHostState+0xc8>
     7f6:	b8 c0       	rjmp	.+368    	; 0x968 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     7f8:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     7fa:	80 91 d8 00 	lds	r24, 0x00D8
     7fe:	80 61       	ori	r24, 0x10	; 16
     800:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     804:	80 91 dd 00 	lds	r24, 0x00DD
     808:	8b 7f       	andi	r24, 0xFB	; 251
     80a:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     80e:	80 91 d7 00 	lds	r24, 0x00D7
     812:	80 61       	ori	r24, 0x10	; 16
     814:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     818:	80 91 dd 00 	lds	r24, 0x00DD
     81c:	82 60       	ori	r24, 0x02	; 2
     81e:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     822:	84 e0       	ldi	r24, 0x04	; 4
     824:	d6 cf       	rjmp	.-84     	; 0x7d2 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     826:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     82a:	80 ff       	sbrs	r24, 0
     82c:	9d c0       	rjmp	.+314    	; 0x968 <USB_Host_ProcessNextHostState+0x23e>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     82e:	80 91 9f 00 	lds	r24, 0x009F
     832:	8e 7f       	andi	r24, 0xFE	; 254
     834:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     838:	80 91 9f 00 	lds	r24, 0x009F
     83c:	8d 7f       	andi	r24, 0xFD	; 253
     83e:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     842:	80 91 df 00 	lds	r24, 0x00DF
     846:	8d 7f       	andi	r24, 0xFD	; 253
     848:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     84c:	80 91 de 00 	lds	r24, 0x00DE
     850:	82 60       	ori	r24, 0x02	; 2
     852:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     856:	80 91 9e 00 	lds	r24, 0x009E
     85a:	81 60       	ori	r24, 0x01	; 1
     85c:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     860:	ed d0       	rcall	.+474    	; 0xa3c <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     862:	10 92 0a 05 	sts	0x050A, r1
     866:	84 e6       	ldi	r24, 0x64	; 100
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	90 93 ff 04 	sts	0x04FF, r25
     86e:	80 93 fe 04 	sts	0x04FE, r24
     872:	85 e0       	ldi	r24, 0x05	; 5
     874:	5c c0       	rjmp	.+184    	; 0x92e <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     876:	0b df       	rcall	.-490    	; 0x68e <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     878:	10 92 0a 05 	sts	0x050A, r1
     87c:	88 ec       	ldi	r24, 0xC8	; 200
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	90 93 ff 04 	sts	0x04FF, r25
     884:	80 93 fe 04 	sts	0x04FE, r24
     888:	86 e0       	ldi	r24, 0x06	; 6
     88a:	51 c0       	rjmp	.+162    	; 0x92e <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	60 e0       	ldi	r22, 0x00	; 0
     890:	40 e0       	ldi	r20, 0x00	; 0
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	00 e4       	ldi	r16, 0x40	; 64
     896:	10 e0       	ldi	r17, 0x00	; 0
     898:	ee 24       	eor	r14, r14
     89a:	72 d0       	rcall	.+228    	; 0x980 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     89c:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     8a0:	87 ff       	sbrs	r24, 7
     8a2:	5c c0       	rjmp	.+184    	; 0x95c <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     8a4:	87 e0       	ldi	r24, 0x07	; 7
     8a6:	95 cf       	rjmp	.-214    	; 0x7d2 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     8a8:	a2 e0       	ldi	r26, 0x02	; 2
     8aa:	b5 e0       	ldi	r27, 0x05	; 5
     8ac:	eb e1       	ldi	r30, 0x1B	; 27
     8ae:	f1 e0       	ldi	r31, 0x01	; 1
     8b0:	88 e0       	ldi	r24, 0x08	; 8
     8b2:	01 90       	ld	r0, Z+
     8b4:	0d 92       	st	X+, r0
     8b6:	81 50       	subi	r24, 0x01	; 1
     8b8:	e1 f7       	brne	.-8      	; 0x8b2 <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     8ba:	ce 01       	movw	r24, r28
     8bc:	01 96       	adiw	r24, 0x01	; 1
     8be:	53 d3       	rcall	.+1702   	; 0xf66 <USB_Host_SendControlRequest>
     8c0:	68 2f       	mov	r22, r24
     8c2:	88 23       	and	r24, r24
     8c4:	09 f0       	breq	.+2      	; 0x8c8 <USB_Host_ProcessNextHostState+0x19e>
     8c6:	48 c0       	rjmp	.+144    	; 0x958 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     8c8:	88 85       	ldd	r24, Y+8	; 0x08
     8ca:	80 93 23 01 	sts	0x0123, r24

			USB_Host_ResetDevice();
     8ce:	df de       	rcall	.-578    	; 0x68e <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     8d0:	10 92 0a 05 	sts	0x050A, r1
     8d4:	88 ec       	ldi	r24, 0xC8	; 200
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	90 93 ff 04 	sts	0x04FF, r25
     8dc:	80 93 fe 04 	sts	0x04FE, r24
     8e0:	88 e0       	ldi	r24, 0x08	; 8
     8e2:	25 c0       	rjmp	.+74     	; 0x92e <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     8e4:	00 91 23 01 	lds	r16, 0x0123
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	40 e0       	ldi	r20, 0x00	; 0
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	10 e0       	ldi	r17, 0x00	; 0
     8f2:	ee 24       	eor	r14, r14
     8f4:	45 d0       	rcall	.+138    	; 0x980 <Pipe_ConfigurePipe>
     8f6:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     8fa:	87 ff       	sbrs	r24, 7
     8fc:	2f c0       	rjmp	.+94     	; 0x95c <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     8fe:	a2 e0       	ldi	r26, 0x02	; 2
     900:	b5 e0       	ldi	r27, 0x05	; 5
     902:	e3 e1       	ldi	r30, 0x13	; 19
     904:	f1 e0       	ldi	r31, 0x01	; 1
     906:	88 e0       	ldi	r24, 0x08	; 8
     908:	01 90       	ld	r0, Z+
     90a:	0d 92       	st	X+, r0
     90c:	81 50       	subi	r24, 0x01	; 1
     90e:	e1 f7       	brne	.-8      	; 0x908 <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	28 d3       	rcall	.+1616   	; 0xf66 <USB_Host_SendControlRequest>
     916:	68 2f       	mov	r22, r24
     918:	88 23       	and	r24, r24
     91a:	f1 f4       	brne	.+60     	; 0x958 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     91c:	10 92 0a 05 	sts	0x050A, r1
     920:	84 e6       	ldi	r24, 0x64	; 100
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	90 93 ff 04 	sts	0x04FF, r25
     928:	80 93 fe 04 	sts	0x04FE, r24
     92c:	89 e0       	ldi	r24, 0x09	; 9
     92e:	80 93 fd 04 	sts	0x04FD, r24
     932:	1a c0       	rjmp	.+52     	; 0x968 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     93a:	8a e0       	ldi	r24, 0x0A	; 10
     93c:	80 93 0a 05 	sts	0x050A, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     940:	02 dd       	rcall	.-1532   	; 0x346 <EVENT_USB_Host_DeviceEnumerationComplete>
     942:	12 c0       	rjmp	.+36     	; 0x968 <USB_Host_ProcessNextHostState+0x23e>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     944:	89 2f       	mov	r24, r25
     946:	a4 dc       	rcall	.-1720   	; 0x290 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     948:	80 91 dd 00 	lds	r24, 0x00DD
     94c:	81 60       	ori	r24, 0x01	; 1
     94e:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     952:	e7 dc       	rcall	.-1586   	; 0x322 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     954:	d8 d0       	rcall	.+432    	; 0xb06 <USB_ResetInterface>
     956:	08 c0       	rjmp	.+16     	; 0x968 <USB_Host_ProcessNextHostState+0x23e>
	}
}
     958:	93 e0       	ldi	r25, 0x03	; 3
     95a:	02 c0       	rjmp	.+4      	; 0x960 <USB_Host_ProcessNextHostState+0x236>
     95c:	94 e0       	ldi	r25, 0x04	; 4
     95e:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     960:	80 91 0a 05 	lds	r24, 0x050A
     964:	81 30       	cpi	r24, 0x01	; 1
     966:	71 f7       	brne	.-36     	; 0x944 <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     968:	28 96       	adiw	r28, 0x08	; 8
     96a:	0f b6       	in	r0, 0x3f	; 63
     96c:	f8 94       	cli
     96e:	de bf       	out	0x3e, r29	; 62
     970:	0f be       	out	0x3f, r0	; 63
     972:	cd bf       	out	0x3d, r28	; 61
     974:	cf 91       	pop	r28
     976:	df 91       	pop	r29
     978:	1f 91       	pop	r17
     97a:	0f 91       	pop	r16
     97c:	ef 90       	pop	r14
     97e:	08 95       	ret

00000980 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     980:	ef 92       	push	r14
     982:	0f 93       	push	r16
     984:	1f 93       	push	r17
     986:	e8 2f       	mov	r30, r24
     988:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     98a:	62 95       	swap	r22
     98c:	66 0f       	add	r22, r22
     98e:	66 0f       	add	r22, r22
     990:	60 7c       	andi	r22, 0xC0	; 192
     992:	64 2b       	or	r22, r20
     994:	2f 70       	andi	r18, 0x0F	; 15
     996:	62 2b       	or	r22, r18
     998:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     99a:	72 60       	ori	r23, 0x02	; 2
     99c:	45 c0       	rjmp	.+138    	; 0xa28 <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     99e:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     9a2:	3e 17       	cp	r19, r30
     9a4:	a1 f4       	brne	.+40     	; 0x9ce <Pipe_ConfigurePipe+0x4e>
     9a6:	88 e0       	ldi	r24, 0x08	; 8
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	20 e0       	ldi	r18, 0x00	; 0
     9ac:	03 c0       	rjmp	.+6      	; 0x9b4 <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     9ae:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     9b0:	88 0f       	add	r24, r24
     9b2:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     9b4:	80 17       	cp	r24, r16
     9b6:	91 07       	cpc	r25, r17
     9b8:	10 f4       	brcc	.+4      	; 0x9be <Pipe_ConfigurePipe+0x3e>
     9ba:	25 30       	cpi	r18, 0x05	; 5
     9bc:	c1 f7       	brne	.-16     	; 0x9ae <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     9be:	92 2f       	mov	r25, r18
     9c0:	92 95       	swap	r25
     9c2:	90 7f       	andi	r25, 0xF0	; 240
     9c4:	97 2b       	or	r25, r23
     9c6:	56 2f       	mov	r21, r22
     9c8:	40 e0       	ldi	r20, 0x00	; 0
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	08 c0       	rjmp	.+16     	; 0x9de <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     9ce:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     9d2:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     9d6:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
     9da:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     9de:	91 ff       	sbrs	r25, 1
     9e0:	22 c0       	rjmp	.+68     	; 0xa26 <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     9e2:	80 91 a9 00 	lds	r24, 0x00A9
     9e6:	8e 7f       	andi	r24, 0xFE	; 254
     9e8:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     9ec:	80 91 ab 00 	lds	r24, 0x00AB
     9f0:	8d 7f       	andi	r24, 0xFD	; 253
     9f2:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     9f6:	80 91 a9 00 	lds	r24, 0x00A9
     9fa:	81 60       	ori	r24, 0x01	; 1
     9fc:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     a00:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
     a04:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
     a08:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
     a0c:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     a10:	80 91 a9 00 	lds	r24, 0x00A9
     a14:	80 62       	ori	r24, 0x20	; 32
     a16:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a1a:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     a1e:	87 fd       	sbrc	r24, 7
     a20:	02 c0       	rjmp	.+4      	; 0xa26 <Pipe_ConfigurePipe+0xa6>
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	07 c0       	rjmp	.+14     	; 0xa34 <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     a26:	3f 5f       	subi	r19, 0xFF	; 255
     a28:	37 30       	cpi	r19, 0x07	; 7
     a2a:	08 f4       	brcc	.+2      	; 0xa2e <Pipe_ConfigurePipe+0xae>
     a2c:	b8 cf       	rjmp	.-144    	; 0x99e <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a2e:	e0 93 a7 00 	sts	0x00A7, r30
     a32:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
     a34:	1f 91       	pop	r17
     a36:	0f 91       	pop	r16
     a38:	ef 90       	pop	r14
     a3a:	08 95       	ret

00000a3c <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     a3c:	10 92 f8 00 	sts	0x00F8, r1
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     a46:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     a4a:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     a4e:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a52:	80 91 a9 00 	lds	r24, 0x00A9
     a56:	8e 7f       	andi	r24, 0xFE	; 254
     a58:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a5c:	9f 5f       	subi	r25, 0xFF	; 255
     a5e:	97 30       	cpi	r25, 0x07	; 7
     a60:	81 f7       	brne	.-32     	; 0xa42 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     a62:	08 95       	ret

00000a64 <Pipe_IsEndpointBound>:

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
     a64:	48 2f       	mov	r20, r24
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     a66:	30 91 a7 00 	lds	r19, 0x00A7
     a6a:	20 e0       	ldi	r18, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a6c:	20 93 a7 00 	sts	0x00A7, r18
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a70:	80 91 ac 00 	lds	r24, 0x00AC

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     a74:	87 ff       	sbrs	r24, 7
     a76:	10 c0       	rjmp	.+32     	; 0xa98 <Pipe_IsEndpointBound+0x34>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     a78:	90 91 aa 00 	lds	r25, 0x00AA
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     a7c:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     a80:	80 73       	andi	r24, 0x30	; 48
     a82:	80 31       	cpi	r24, 0x10	; 16
     a84:	11 f0       	breq	.+4      	; 0xa8a <Pipe_IsEndpointBound+0x26>
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	01 c0       	rjmp	.+2      	; 0xa8c <Pipe_IsEndpointBound+0x28>
     a8a:	80 e8       	ldi	r24, 0x80	; 128
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     a8c:	9f 70       	andi	r25, 0x0F	; 15
     a8e:	89 2b       	or	r24, r25
     a90:	84 17       	cp	r24, r20
     a92:	11 f4       	brne	.+4      	; 0xa98 <Pipe_IsEndpointBound+0x34>
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	08 95       	ret

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a98:	2f 5f       	subi	r18, 0xFF	; 255
     a9a:	27 30       	cpi	r18, 0x07	; 7
     a9c:	39 f7       	brne	.-50     	; 0xa6c <Pipe_IsEndpointBound+0x8>
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     a9e:	37 70       	andi	r19, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     aa0:	30 93 a7 00 	sts	0x00A7, r19
     aa4:	80 e0       	ldi	r24, 0x00	; 0
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     aa6:	08 95       	ret

00000aa8 <Pipe_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     aa8:	40 91 a2 00 	lds	r20, 0x00A2
     aac:	50 91 a3 00 	lds	r21, 0x00A3
     ab0:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     ab2:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     ab6:	80 73       	andi	r24, 0x30	; 48
     ab8:	80 31       	cpi	r24, 0x10	; 16
     aba:	29 f4       	brne	.+10     	; 0xac6 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     abc:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     ac0:	80 ff       	sbrs	r24, 0
     ac2:	05 c0       	rjmp	.+10     	; 0xace <Pipe_WaitUntilReady+0x26>
     ac4:	1e c0       	rjmp	.+60     	; 0xb02 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     ac6:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     aca:	82 fd       	sbrc	r24, 2
     acc:	1a c0       	rjmp	.+52     	; 0xb02 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     ace:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     ad2:	81 ff       	sbrs	r24, 1
     ad4:	02 c0       	rjmp	.+4      	; 0xada <Pipe_WaitUntilReady+0x32>
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     ada:	80 91 0a 05 	lds	r24, 0x050A
     ade:	81 30       	cpi	r24, 0x01	; 1
     ae0:	11 f4       	brne	.+4      	; 0xae6 <Pipe_WaitUntilReady+0x3e>
     ae2:	82 e0       	ldi	r24, 0x02	; 2
     ae4:	08 95       	ret
     ae6:	80 91 a2 00 	lds	r24, 0x00A2
     aea:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     aee:	84 17       	cp	r24, r20
     af0:	95 07       	cpc	r25, r21
     af2:	f9 f2       	breq	.-66     	; 0xab2 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     af4:	22 23       	and	r18, r18
     af6:	11 f4       	brne	.+4      	; 0xafc <Pipe_WaitUntilReady+0x54>
     af8:	83 e0       	ldi	r24, 0x03	; 3
     afa:	08 95       	ret
     afc:	21 50       	subi	r18, 0x01	; 1
     afe:	ac 01       	movw	r20, r24
     b00:	d8 cf       	rjmp	.-80     	; 0xab2 <Pipe_WaitUntilReady+0xa>
     b02:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     b04:	08 95       	ret

00000b06 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     b06:	70 d0       	rcall	.+224    	; 0xbe8 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b08:	77 d0       	rcall	.+238    	; 0xbf8 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     b0a:	80 91 d8 00 	lds	r24, 0x00D8
     b0e:	8f 77       	andi	r24, 0x7F	; 127
     b10:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     b14:	80 91 d8 00 	lds	r24, 0x00D8
     b18:	80 68       	ori	r24, 0x80	; 128
     b1a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     b1e:	80 91 d8 00 	lds	r24, 0x00D8
     b22:	8f 7d       	andi	r24, 0xDF	; 223
     b24:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     b28:	80 91 d7 00 	lds	r24, 0x00D7
     b2c:	8f 77       	andi	r24, 0x7F	; 127
     b2e:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     b32:	8c e0       	ldi	r24, 0x0C	; 12
     b34:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     b36:	8e e0       	ldi	r24, 0x0E	; 14
     b38:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     b3a:	09 b4       	in	r0, 0x29	; 41
     b3c:	00 fe       	sbrs	r0, 0
     b3e:	fd cf       	rjmp	.-6      	; 0xb3a <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	80 93 0a 05 	sts	0x050A, r24
	USB_Host_ConfigurationNumber = 0;
     b46:	10 92 00 05 	sts	0x0500, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     b4a:	80 e4       	ldi	r24, 0x40	; 64
     b4c:	80 93 23 01 	sts	0x0123, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     b50:	80 91 d8 00 	lds	r24, 0x00D8
     b54:	80 64       	ori	r24, 0x40	; 64
     b56:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b5a:	80 91 dd 00 	lds	r24, 0x00DD
     b5e:	81 60       	ori	r24, 0x01	; 1
     b60:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     b64:	80 91 dd 00 	lds	r24, 0x00DD
     b68:	84 60       	ori	r24, 0x04	; 4
     b6a:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     b6e:	80 91 d7 00 	lds	r24, 0x00D7
     b72:	8f 7e       	andi	r24, 0xEF	; 239
     b74:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     b78:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     b7a:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     b7c:	80 91 de 00 	lds	r24, 0x00DE
     b80:	81 60       	ori	r24, 0x01	; 1
     b82:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     b86:	80 91 de 00 	lds	r24, 0x00DE
     b8a:	84 60       	ori	r24, 0x04	; 4
     b8c:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     b90:	80 91 e0 00 	lds	r24, 0x00E0
     b94:	8e 7f       	andi	r24, 0xFE	; 254
     b96:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     b9a:	80 91 d8 00 	lds	r24, 0x00D8
     b9e:	80 61       	ori	r24, 0x10	; 16
     ba0:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     ba4:	08 95       	ret

00000ba6 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     ba6:	e7 ed       	ldi	r30, 0xD7	; 215
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	81 60       	ori	r24, 0x01	; 1
     bae:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	80 93 01 05 	sts	0x0501, r24

	USB_ResetInterface();
}
     bb6:	a7 cf       	rjmp	.-178    	; 0xb06 <USB_ResetInterface>

00000bb8 <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     bb8:	17 d0       	rcall	.+46     	; 0xbe8 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     bba:	1e d0       	rcall	.+60     	; 0xbf8 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     bbc:	e0 ee       	ldi	r30, 0xE0	; 224
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	80 81       	ld	r24, Z
     bc2:	81 60       	ori	r24, 0x01	; 1
     bc4:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     bc6:	a8 ed       	ldi	r26, 0xD8	; 216
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	8c 91       	ld	r24, X
     bcc:	8f 77       	andi	r24, 0x7F	; 127
     bce:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     bd0:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     bd2:	e7 ed       	ldi	r30, 0xD7	; 215
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	8e 7f       	andi	r24, 0xFE	; 254
     bda:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     bdc:	8c 91       	ld	r24, X
     bde:	8f 7e       	andi	r24, 0xEF	; 239
     be0:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     be2:	10 92 01 05 	sts	0x0501, r1
}
     be6:	08 95       	ret

00000be8 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     be8:	e8 ed       	ldi	r30, 0xD8	; 216
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	8c 7f       	andi	r24, 0xFC	; 252
     bf0:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     bf2:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     bf6:	08 95       	ret

00000bf8 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     bf8:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     bfc:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     c00:	08 95       	ret

00000c02 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     c02:	1f 92       	push	r1
     c04:	0f 92       	push	r0
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	0f 92       	push	r0
     c0a:	0b b6       	in	r0, 0x3b	; 59
     c0c:	0f 92       	push	r0
     c0e:	11 24       	eor	r1, r1
     c10:	2f 93       	push	r18
     c12:	3f 93       	push	r19
     c14:	4f 93       	push	r20
     c16:	5f 93       	push	r21
     c18:	6f 93       	push	r22
     c1a:	7f 93       	push	r23
     c1c:	8f 93       	push	r24
     c1e:	9f 93       	push	r25
     c20:	af 93       	push	r26
     c22:	bf 93       	push	r27
     c24:	ef 93       	push	r30
     c26:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     c28:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     c2c:	85 ff       	sbrs	r24, 5
     c2e:	0a c0       	rjmp	.+20     	; 0xc44 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     c30:	80 91 a0 00 	lds	r24, 0x00A0
     c34:	85 ff       	sbrs	r24, 5
     c36:	06 c0       	rjmp	.+12     	; 0xc44 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     c38:	80 91 9f 00 	lds	r24, 0x009F
     c3c:	8f 7d       	andi	r24, 0xDF	; 223
     c3e:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     c42:	67 d1       	rcall	.+718    	; 0xf12 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     c44:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     c48:	81 ff       	sbrs	r24, 1
     c4a:	15 c0       	rjmp	.+42     	; 0xc76 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     c4c:	80 91 a0 00 	lds	r24, 0x00A0
     c50:	81 ff       	sbrs	r24, 1
     c52:	11 c0       	rjmp	.+34     	; 0xc76 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     c54:	80 91 9f 00 	lds	r24, 0x009F
     c58:	8d 7f       	andi	r24, 0xFD	; 253
     c5a:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     c5e:	80 91 9f 00 	lds	r24, 0x009F
     c62:	8e 7f       	andi	r24, 0xFE	; 254
     c64:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     c68:	80 91 a0 00 	lds	r24, 0x00A0
     c6c:	8d 7f       	andi	r24, 0xFD	; 253
     c6e:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     c72:	57 db       	rcall	.-2386   	; 0x322 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     c74:	48 df       	rcall	.-368    	; 0xb06 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     c76:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     c7a:	81 ff       	sbrs	r24, 1
     c7c:	15 c0       	rjmp	.+42     	; 0xca8 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     c7e:	80 91 de 00 	lds	r24, 0x00DE
     c82:	81 ff       	sbrs	r24, 1
     c84:	11 c0       	rjmp	.+34     	; 0xca8 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     c86:	80 91 df 00 	lds	r24, 0x00DF
     c8a:	8d 7f       	andi	r24, 0xFD	; 253
     c8c:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     c90:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c92:	80 91 dd 00 	lds	r24, 0x00DD
     c96:	81 60       	ori	r24, 0x01	; 1
     c98:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	24 db       	rcall	.-2488   	; 0x2e8 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     ca0:	40 db       	rcall	.-2432   	; 0x322 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	80 93 0a 05 	sts	0x050A, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     ca8:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     cac:	80 ff       	sbrs	r24, 0
     cae:	17 c0       	rjmp	.+46     	; 0xcde <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     cb0:	80 91 de 00 	lds	r24, 0x00DE
     cb4:	80 ff       	sbrs	r24, 0
     cb6:	13 c0       	rjmp	.+38     	; 0xcde <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     cb8:	80 91 df 00 	lds	r24, 0x00DF
     cbc:	8e 7f       	andi	r24, 0xFE	; 254
     cbe:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     cc2:	80 91 de 00 	lds	r24, 0x00DE
     cc6:	8e 7f       	andi	r24, 0xFE	; 254
     cc8:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     ccc:	33 db       	rcall	.-2458   	; 0x334 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     cce:	80 91 a0 00 	lds	r24, 0x00A0
     cd2:	82 60       	ori	r24, 0x02	; 2
     cd4:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     cd8:	82 e0       	ldi	r24, 0x02	; 2
     cda:	80 93 0a 05 	sts	0x050A, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     cde:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     ce2:	82 ff       	sbrs	r24, 2
     ce4:	0e c0       	rjmp	.+28     	; 0xd02 <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     ce6:	80 91 de 00 	lds	r24, 0x00DE
     cea:	82 ff       	sbrs	r24, 2
     cec:	0a c0       	rjmp	.+20     	; 0xd02 <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     cee:	80 91 df 00 	lds	r24, 0x00DF
     cf2:	8b 7f       	andi	r24, 0xFB	; 251
     cf4:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     cf8:	82 e0       	ldi	r24, 0x02	; 2
     cfa:	60 e0       	ldi	r22, 0x00	; 0
     cfc:	c9 da       	rcall	.-2670   	; 0x290 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     cfe:	11 db       	rcall	.-2526   	; 0x322 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     d00:	02 df       	rcall	.-508    	; 0xb06 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     d02:	ff 91       	pop	r31
     d04:	ef 91       	pop	r30
     d06:	bf 91       	pop	r27
     d08:	af 91       	pop	r26
     d0a:	9f 91       	pop	r25
     d0c:	8f 91       	pop	r24
     d0e:	7f 91       	pop	r23
     d10:	6f 91       	pop	r22
     d12:	5f 91       	pop	r21
     d14:	4f 91       	pop	r20
     d16:	3f 91       	pop	r19
     d18:	2f 91       	pop	r18
     d1a:	0f 90       	pop	r0
     d1c:	0b be       	out	0x3b, r0	; 59
     d1e:	0f 90       	pop	r0
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	0f 90       	pop	r0
     d24:	1f 90       	pop	r1
     d26:	18 95       	reti

00000d28 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     d28:	bf 92       	push	r11
     d2a:	cf 92       	push	r12
     d2c:	df 92       	push	r13
     d2e:	ef 92       	push	r14
     d30:	ff 92       	push	r15
     d32:	0f 93       	push	r16
     d34:	1f 93       	push	r17
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	18 2f       	mov	r17, r24
     d3c:	09 2f       	mov	r16, r25
     d3e:	7b 01       	movw	r14, r22
     d40:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     d42:	80 91 aa 00 	lds	r24, 0x00AA
     d46:	8f 7c       	andi	r24, 0xCF	; 207
     d48:	80 61       	ori	r24, 0x10	; 16
     d4a:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     d4e:	ac de       	rcall	.-680    	; 0xaa8 <Pipe_WaitUntilReady>
     d50:	b8 2e       	mov	r11, r24
     d52:	88 23       	and	r24, r24
     d54:	a9 f5       	brne	.+106    	; 0xdc0 <Pipe_Read_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     d56:	81 2f       	mov	r24, r17
     d58:	90 2f       	mov	r25, r16
     d5a:	9c 01       	movw	r18, r24
     d5c:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     d5e:	c1 14       	cp	r12, r1
     d60:	d1 04       	cpc	r13, r1
     d62:	39 f0       	breq	.+14     	; 0xd72 <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
     d64:	f6 01       	movw	r30, r12
     d66:	80 81       	ld	r24, Z
     d68:	91 81       	ldd	r25, Z+1	; 0x01
     d6a:	e8 1a       	sub	r14, r24
     d6c:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     d6e:	c8 0f       	add	r28, r24
     d70:	d9 1f       	adc	r29, r25
     d72:	00 e0       	ldi	r16, 0x00	; 0
     d74:	10 e0       	ldi	r17, 0x00	; 0
     d76:	21 c0       	rjmp	.+66     	; 0xdba <Pipe_Read_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     d78:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     d7c:	85 fd       	sbrc	r24, 5
     d7e:	15 c0       	rjmp	.+42     	; 0xdaa <Pipe_Read_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     d80:	80 91 a6 00 	lds	r24, 0x00A6
     d84:	8e 77       	andi	r24, 0x7E	; 126
     d86:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     d8a:	c1 14       	cp	r12, r1
     d8c:	d1 04       	cpc	r13, r1
     d8e:	49 f0       	breq	.+18     	; 0xda2 <Pipe_Read_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
     d90:	f6 01       	movw	r30, r12
     d92:	80 81       	ld	r24, Z
     d94:	91 81       	ldd	r25, Z+1	; 0x01
     d96:	80 0f       	add	r24, r16
     d98:	91 1f       	adc	r25, r17
     d9a:	91 83       	std	Z+1, r25	; 0x01
     d9c:	80 83       	st	Z, r24
     d9e:	84 e0       	ldi	r24, 0x04	; 4
     da0:	10 c0       	rjmp	.+32     	; 0xdc2 <Pipe_Read_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     da2:	82 de       	rcall	.-764    	; 0xaa8 <Pipe_WaitUntilReady>
     da4:	88 23       	and	r24, r24
     da6:	49 f0       	breq	.+18     	; 0xdba <Pipe_Read_Stream_LE+0x92>
     da8:	0c c0       	rjmp	.+24     	; 0xdc2 <Pipe_Read_Stream_LE+0x9a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     daa:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     dae:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     db0:	08 94       	sec
     db2:	e1 08       	sbc	r14, r1
     db4:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
     db6:	0f 5f       	subi	r16, 0xFF	; 255
     db8:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     dba:	e1 14       	cp	r14, r1
     dbc:	f1 04       	cpc	r15, r1
     dbe:	e1 f6       	brne	.-72     	; 0xd78 <Pipe_Read_Stream_LE+0x50>
     dc0:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     dc2:	df 91       	pop	r29
     dc4:	cf 91       	pop	r28
     dc6:	1f 91       	pop	r17
     dc8:	0f 91       	pop	r16
     dca:	ff 90       	pop	r15
     dcc:	ef 90       	pop	r14
     dce:	df 90       	pop	r13
     dd0:	cf 90       	pop	r12
     dd2:	bf 90       	pop	r11
     dd4:	08 95       	ret

00000dd6 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     dd6:	af 92       	push	r10
     dd8:	bf 92       	push	r11
     dda:	cf 92       	push	r12
     ddc:	df 92       	push	r13
     dde:	ef 92       	push	r14
     de0:	ff 92       	push	r15
     de2:	0f 93       	push	r16
     de4:	1f 93       	push	r17
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
     dea:	7c 01       	movw	r14, r24
     dec:	eb 01       	movw	r28, r22
     dee:	6a 01       	movw	r12, r20
     df0:	24 c0       	rjmp	.+72     	; 0xe3a <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     df2:	e8 81       	ld	r30, Y
     df4:	f9 81       	ldd	r31, Y+1	; 0x01
     df6:	be 2e       	mov	r11, r30
     df8:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     dfa:	80 81       	ld	r24, Z
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	98 01       	movw	r18, r16
     e00:	80 17       	cp	r24, r16
     e02:	91 07       	cpc	r25, r17
     e04:	08 f4       	brcc	.+2      	; 0xe08 <USB_GetNextDescriptorComp+0x32>
     e06:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     e08:	e2 0f       	add	r30, r18
     e0a:	f3 1f       	adc	r31, r19
     e0c:	f9 83       	std	Y+1, r31	; 0x01
     e0e:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     e10:	f7 01       	movw	r30, r14
     e12:	80 81       	ld	r24, Z
     e14:	91 81       	ldd	r25, Z+1	; 0x01
     e16:	82 1b       	sub	r24, r18
     e18:	93 0b       	sbc	r25, r19
     e1a:	91 83       	std	Z+1, r25	; 0x01
     e1c:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     e1e:	88 81       	ld	r24, Y
     e20:	99 81       	ldd	r25, Y+1	; 0x01
     e22:	f6 01       	movw	r30, r12
     e24:	09 95       	icall
     e26:	82 30       	cpi	r24, 0x02	; 2
     e28:	41 f0       	breq	.+16     	; 0xe3a <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     e2a:	81 30       	cpi	r24, 0x01	; 1
     e2c:	69 f4       	brne	.+26     	; 0xe48 <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
     e2e:	b8 82       	st	Y, r11
     e30:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
     e32:	f7 01       	movw	r30, r14
     e34:	11 83       	std	Z+1, r17	; 0x01
     e36:	00 83       	st	Z, r16
     e38:	07 c0       	rjmp	.+14     	; 0xe48 <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     e3a:	f7 01       	movw	r30, r14
     e3c:	00 81       	ld	r16, Z
     e3e:	11 81       	ldd	r17, Z+1	; 0x01
     e40:	01 15       	cp	r16, r1
     e42:	11 05       	cpc	r17, r1
     e44:	b1 f6       	brne	.-84     	; 0xdf2 <USB_GetNextDescriptorComp+0x1c>
     e46:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	1f 91       	pop	r17
     e4e:	0f 91       	pop	r16
     e50:	ff 90       	pop	r15
     e52:	ef 90       	pop	r14
     e54:	df 90       	pop	r13
     e56:	cf 90       	pop	r12
     e58:	bf 90       	pop	r11
     e5a:	af 90       	pop	r10
     e5c:	08 95       	ret

00000e5e <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     e5e:	cf 92       	push	r12
     e60:	df 92       	push	r13
     e62:	ef 92       	push	r14
     e64:	ff 92       	push	r15
     e66:	0f 93       	push	r16
     e68:	1f 93       	push	r17
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	29 97       	sbiw	r28, 0x09	; 9
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	f8 94       	cli
     e78:	de bf       	out	0x3e, r29	; 62
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	cd bf       	out	0x3d, r28	; 61
     e7e:	6b 01       	movw	r12, r22
     e80:	8a 01       	movw	r16, r20
     e82:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     e84:	90 e8       	ldi	r25, 0x80	; 128
     e86:	90 93 02 05 	sts	0x0502, r25
     e8a:	96 e0       	ldi	r25, 0x06	; 6
     e8c:	90 93 03 05 	sts	0x0503, r25
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	01 97       	sbiw	r24, 0x01	; 1
     e94:	92 60       	ori	r25, 0x02	; 2
     e96:	90 93 05 05 	sts	0x0505, r25
     e9a:	80 93 04 05 	sts	0x0504, r24
     e9e:	10 92 07 05 	sts	0x0507, r1
     ea2:	10 92 06 05 	sts	0x0506, r1
     ea6:	89 e0       	ldi	r24, 0x09	; 9
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	90 93 09 05 	sts	0x0509, r25
     eae:	80 93 08 05 	sts	0x0508, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     eb2:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     eb6:	ce 01       	movw	r24, r28
     eb8:	01 96       	adiw	r24, 0x01	; 1
     eba:	55 d0       	rcall	.+170    	; 0xf66 <USB_Host_SendControlRequest>
     ebc:	28 2f       	mov	r18, r24
     ebe:	88 23       	and	r24, r24
     ec0:	c1 f4       	brne	.+48     	; 0xef2 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	9c 81       	ldd	r25, Y+4	; 0x04
     ec6:	f6 01       	movw	r30, r12
     ec8:	91 83       	std	Z+1, r25	; 0x01
     eca:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     ecc:	e8 16       	cp	r14, r24
     ece:	f9 06       	cpc	r15, r25
     ed0:	10 f4       	brcc	.+4      	; 0xed6 <USB_Host_GetDeviceConfigDescriptor+0x78>
     ed2:	25 e0       	ldi	r18, 0x05	; 5
     ed4:	0e c0       	rjmp	.+28     	; 0xef2 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     ed6:	90 93 09 05 	sts	0x0509, r25
     eda:	80 93 08 05 	sts	0x0508, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     ede:	c8 01       	movw	r24, r16
     ee0:	42 d0       	rcall	.+132    	; 0xf66 <USB_Host_SendControlRequest>
     ee2:	28 2f       	mov	r18, r24
     ee4:	88 23       	and	r24, r24
     ee6:	29 f4       	brne	.+10     	; 0xef2 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     ee8:	f8 01       	movw	r30, r16
     eea:	81 81       	ldd	r24, Z+1	; 0x01
     eec:	82 30       	cpi	r24, 0x02	; 2
     eee:	09 f0       	breq	.+2      	; 0xef2 <USB_Host_GetDeviceConfigDescriptor+0x94>
     ef0:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     ef2:	82 2f       	mov	r24, r18
     ef4:	29 96       	adiw	r28, 0x09	; 9
     ef6:	0f b6       	in	r0, 0x3f	; 63
     ef8:	f8 94       	cli
     efa:	de bf       	out	0x3e, r29	; 62
     efc:	0f be       	out	0x3f, r0	; 63
     efe:	cd bf       	out	0x3d, r28	; 61
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	ff 90       	pop	r15
     f0a:	ef 90       	pop	r14
     f0c:	df 90       	pop	r13
     f0e:	cf 90       	pop	r12
     f10:	08 95       	ret

00000f12 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     f12:	08 95       	ret

00000f14 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     f14:	1f 93       	push	r17
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
     f1a:	18 2f       	mov	r17, r24
     f1c:	c8 ee       	ldi	r28, 0xE8	; 232
     f1e:	d3 e0       	ldi	r29, 0x03	; 3
     f20:	09 c0       	rjmp	.+18     	; 0xf34 <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	65 db       	rcall	.-2358   	; 0x5f0 <USB_Host_WaitMS>
     f26:	88 23       	and	r24, r24
     f28:	d1 f4       	brne	.+52     	; 0xf5e <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     f2a:	20 97       	sbiw	r28, 0x00	; 0
     f2c:	11 f4       	brne	.+4      	; 0xf32 <USB_Host_WaitForIOS+0x1e>
     f2e:	84 e0       	ldi	r24, 0x04	; 4
     f30:	16 c0       	rjmp	.+44     	; 0xf5e <USB_Host_WaitForIOS+0x4a>
     f32:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f34:	11 23       	and	r17, r17
     f36:	29 f4       	brne	.+10     	; 0xf42 <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     f38:	80 91 a6 00 	lds	r24, 0x00A6
     f3c:	83 ff       	sbrs	r24, 3
     f3e:	f1 cf       	rjmp	.-30     	; 0xf22 <USB_Host_WaitForIOS+0xe>
     f40:	0d c0       	rjmp	.+26     	; 0xf5c <USB_Host_WaitForIOS+0x48>
     f42:	11 30       	cpi	r17, 0x01	; 1
     f44:	29 f4       	brne	.+10     	; 0xf50 <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     f46:	80 91 a6 00 	lds	r24, 0x00A6
     f4a:	80 ff       	sbrs	r24, 0
     f4c:	ea cf       	rjmp	.-44     	; 0xf22 <USB_Host_WaitForIOS+0xe>
     f4e:	06 c0       	rjmp	.+12     	; 0xf5c <USB_Host_WaitForIOS+0x48>
     f50:	12 30       	cpi	r17, 0x02	; 2
     f52:	39 f7       	brne	.-50     	; 0xf22 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     f54:	80 91 a6 00 	lds	r24, 0x00A6
     f58:	82 ff       	sbrs	r24, 2
     f5a:	e3 cf       	rjmp	.-58     	; 0xf22 <USB_Host_WaitForIOS+0xe>
     f5c:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	1f 91       	pop	r17
     f64:	08 95       	ret

00000f66 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     f66:	ff 92       	push	r15
     f68:	0f 93       	push	r16
     f6a:	1f 93       	push	r17
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
     f70:	18 2f       	mov	r17, r24
     f72:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     f74:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     f78:	c0 91 08 05 	lds	r28, 0x0508
     f7c:	d0 91 09 05 	lds	r29, 0x0509
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     f80:	80 91 9e 00 	lds	r24, 0x009E
     f84:	81 60       	ori	r24, 0x01	; 1
     f86:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	31 db       	rcall	.-2462   	; 0x5f0 <USB_Host_WaitMS>
     f8e:	98 2f       	mov	r25, r24
     f90:	88 23       	and	r24, r24
     f92:	09 f0       	breq	.+2      	; 0xf96 <USB_Host_SendControlRequest+0x30>
     f94:	ee c0       	rjmp	.+476    	; 0x1172 <USB_Host_SendControlRequest+0x20c>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f96:	80 91 aa 00 	lds	r24, 0x00AA
     f9a:	8f 7c       	andi	r24, 0xCF	; 207
     f9c:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     fa0:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     fa4:	80 91 a6 00 	lds	r24, 0x00A6
     fa8:	8f 7e       	andi	r24, 0xEF	; 239
     faa:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fae:	80 91 a9 00 	lds	r24, 0x00A9
     fb2:	8f 7b       	andi	r24, 0xBF	; 191
     fb4:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearError();

	Pipe_Unfreeze();

	Pipe_Write_8(USB_ControlRequest.bmRequestType);
     fb8:	80 91 02 05 	lds	r24, 0x0502
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     fbc:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
     fc0:	80 91 03 05 	lds	r24, 0x0503
     fc4:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
     fc8:	80 91 04 05 	lds	r24, 0x0504
     fcc:	90 91 05 05 	lds	r25, 0x0505
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
     fd0:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
     fd4:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
     fd8:	80 91 06 05 	lds	r24, 0x0506
     fdc:	90 91 07 05 	lds	r25, 0x0507
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
     fe0:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
     fe4:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
     fe8:	80 91 08 05 	lds	r24, 0x0508
     fec:	90 91 09 05 	lds	r25, 0x0509
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
     ff0:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
     ff4:	90 93 af 00 	sts	0x00AF, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     ff8:	80 91 a6 00 	lds	r24, 0x00A6
     ffc:	87 77       	andi	r24, 0x77	; 119
     ffe:	80 93 a6 00 	sts	0x00A6, r24

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	87 df       	rcall	.-242    	; 0xf14 <USB_Host_WaitForIOS>
    1006:	98 2f       	mov	r25, r24
    1008:	88 23       	and	r24, r24
    100a:	09 f0       	breq	.+2      	; 0x100e <USB_Host_SendControlRequest+0xa8>
    100c:	b2 c0       	rjmp	.+356    	; 0x1172 <USB_Host_SendControlRequest+0x20c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    100e:	80 91 a9 00 	lds	r24, 0x00A9
    1012:	80 64       	ori	r24, 0x40	; 64
    1014:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	ea da       	rcall	.-2604   	; 0x5f0 <USB_Host_WaitMS>
    101c:	98 2f       	mov	r25, r24
    101e:	88 23       	and	r24, r24
    1020:	09 f0       	breq	.+2      	; 0x1024 <USB_Host_SendControlRequest+0xbe>
    1022:	a7 c0       	rjmp	.+334    	; 0x1172 <USB_Host_SendControlRequest+0x20c>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
    1024:	21 2f       	mov	r18, r17
    1026:	30 2f       	mov	r19, r16
    1028:	c9 01       	movw	r24, r18
    102a:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    102c:	80 91 02 05 	lds	r24, 0x0502
    1030:	87 ff       	sbrs	r24, 7
    1032:	52 c0       	rjmp	.+164    	; 0x10d8 <USB_Host_SendControlRequest+0x172>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1034:	80 91 aa 00 	lds	r24, 0x00AA
    1038:	8f 7c       	andi	r24, 0xCF	; 207
    103a:	80 61       	ori	r24, 0x10	; 16
    103c:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1040:	01 15       	cp	r16, r1
    1042:	11 05       	cpc	r17, r1
    1044:	69 f5       	brne	.+90     	; 0x10a0 <USB_Host_SendControlRequest+0x13a>
    1046:	2e c0       	rjmp	.+92     	; 0x10a4 <USB_Host_SendControlRequest+0x13e>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1048:	80 91 a9 00 	lds	r24, 0x00A9
    104c:	8f 7b       	andi	r24, 0xBF	; 191
    104e:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	5f df       	rcall	.-322    	; 0xf14 <USB_Host_WaitForIOS>
    1056:	98 2f       	mov	r25, r24
    1058:	88 23       	and	r24, r24
    105a:	09 f0       	breq	.+2      	; 0x105e <USB_Host_SendControlRequest+0xf8>
    105c:	8a c0       	rjmp	.+276    	; 0x1172 <USB_Host_SendControlRequest+0x20c>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    105e:	80 91 f6 00 	lds	r24, 0x00F6
    1062:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    1066:	89 2b       	or	r24, r25
    1068:	49 f4       	brne	.+18     	; 0x107c <USB_Host_SendControlRequest+0x116>
    106a:	c0 e0       	ldi	r28, 0x00	; 0
    106c:	d0 e0       	ldi	r29, 0x00	; 0
    106e:	06 c0       	rjmp	.+12     	; 0x107c <USB_Host_SendControlRequest+0x116>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1070:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    1074:	f8 01       	movw	r30, r16
    1076:	81 93       	st	Z+, r24
    1078:	8f 01       	movw	r16, r30
					DataLen--;
    107a:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    107c:	80 91 f6 00 	lds	r24, 0x00F6
    1080:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1084:	89 2b       	or	r24, r25
    1086:	11 f0       	breq	.+4      	; 0x108c <USB_Host_SendControlRequest+0x126>
    1088:	20 97       	sbiw	r28, 0x00	; 0
    108a:	91 f7       	brne	.-28     	; 0x1070 <USB_Host_SendControlRequest+0x10a>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    108c:	80 91 a9 00 	lds	r24, 0x00A9
    1090:	80 64       	ori	r24, 0x40	; 64
    1092:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1096:	80 91 a6 00 	lds	r24, 0x00A6
    109a:	8e 77       	andi	r24, 0x7E	; 126
    109c:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    10a0:	20 97       	sbiw	r28, 0x00	; 0
    10a2:	91 f6       	brne	.-92     	; 0x1048 <USB_Host_SendControlRequest+0xe2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10a4:	80 91 aa 00 	lds	r24, 0x00AA
    10a8:	8f 7c       	andi	r24, 0xCF	; 207
    10aa:	80 62       	ori	r24, 0x20	; 32
    10ac:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10b0:	80 91 a9 00 	lds	r24, 0x00A9
    10b4:	8f 7b       	andi	r24, 0xBF	; 191
    10b6:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10ba:	82 e0       	ldi	r24, 0x02	; 2
    10bc:	2b df       	rcall	.-426    	; 0xf14 <USB_Host_WaitForIOS>
    10be:	98 2f       	mov	r25, r24
    10c0:	88 23       	and	r24, r24
    10c2:	09 f0       	breq	.+2      	; 0x10c6 <USB_Host_SendControlRequest+0x160>
    10c4:	56 c0       	rjmp	.+172    	; 0x1172 <USB_Host_SendControlRequest+0x20c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    10c6:	80 91 a6 00 	lds	r24, 0x00A6
    10ca:	8b 77       	andi	r24, 0x7B	; 123
    10cc:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10d0:	82 e0       	ldi	r24, 0x02	; 2
    10d2:	20 df       	rcall	.-448    	; 0xf14 <USB_Host_WaitForIOS>
    10d4:	98 2f       	mov	r25, r24
    10d6:	4d c0       	rjmp	.+154    	; 0x1172 <USB_Host_SendControlRequest+0x20c>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    10d8:	01 15       	cp	r16, r1
    10da:	11 05       	cpc	r17, r1
    10dc:	a9 f1       	breq	.+106    	; 0x1148 <USB_Host_SendControlRequest+0x1e2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10de:	80 91 aa 00 	lds	r24, 0x00AA
    10e2:	8f 7c       	andi	r24, 0xCF	; 207
    10e4:	80 62       	ori	r24, 0x20	; 32
    10e6:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10ea:	80 91 a9 00 	lds	r24, 0x00A9
    10ee:	8f 7b       	andi	r24, 0xBF	; 191
    10f0:	80 93 a9 00 	sts	0x00A9, r24
    10f4:	1d c0       	rjmp	.+58     	; 0x1130 <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10f6:	82 e0       	ldi	r24, 0x02	; 2
    10f8:	0d df       	rcall	.-486    	; 0xf14 <USB_Host_WaitForIOS>
    10fa:	98 2f       	mov	r25, r24
    10fc:	88 23       	and	r24, r24
    10fe:	c9 f5       	brne	.+114    	; 0x1172 <USB_Host_SendControlRequest+0x20c>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1100:	80 91 23 01 	lds	r24, 0x0123
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	07 c0       	rjmp	.+14     	; 0x1118 <USB_Host_SendControlRequest+0x1b2>
				{
					Pipe_Write_8(*(DataStream++));
    110a:	f8 01       	movw	r30, r16
    110c:	81 91       	ld	r24, Z+
    110e:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1110:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1114:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1116:	39 f0       	breq	.+14     	; 0x1126 <USB_Host_SendControlRequest+0x1c0>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1118:	80 91 f6 00 	lds	r24, 0x00F6
    111c:	90 91 f7 00 	lds	r25, 0x00F7
    1120:	82 17       	cp	r24, r18
    1122:	93 07       	cpc	r25, r19
    1124:	90 f3       	brcs	.-28     	; 0x110a <USB_Host_SendControlRequest+0x1a4>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1126:	80 91 a6 00 	lds	r24, 0x00A6
    112a:	8b 77       	andi	r24, 0x7B	; 123
    112c:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1130:	20 97       	sbiw	r28, 0x00	; 0
    1132:	09 f7       	brne	.-62     	; 0x10f6 <USB_Host_SendControlRequest+0x190>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1134:	82 e0       	ldi	r24, 0x02	; 2
    1136:	ee de       	rcall	.-548    	; 0xf14 <USB_Host_WaitForIOS>
    1138:	98 2f       	mov	r25, r24
    113a:	88 23       	and	r24, r24
    113c:	d1 f4       	brne	.+52     	; 0x1172 <USB_Host_SendControlRequest+0x20c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    113e:	80 91 a9 00 	lds	r24, 0x00A9
    1142:	80 64       	ori	r24, 0x40	; 64
    1144:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1148:	80 91 aa 00 	lds	r24, 0x00AA
    114c:	8f 7c       	andi	r24, 0xCF	; 207
    114e:	80 61       	ori	r24, 0x10	; 16
    1150:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1154:	80 91 a9 00 	lds	r24, 0x00A9
    1158:	8f 7b       	andi	r24, 0xBF	; 191
    115a:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	d9 de       	rcall	.-590    	; 0xf14 <USB_Host_WaitForIOS>
    1162:	98 2f       	mov	r25, r24
    1164:	88 23       	and	r24, r24
    1166:	29 f4       	brne	.+10     	; 0x1172 <USB_Host_SendControlRequest+0x20c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1168:	80 91 a6 00 	lds	r24, 0x00A6
    116c:	8e 77       	andi	r24, 0x7E	; 126
    116e:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1172:	80 91 a9 00 	lds	r24, 0x00A9
    1176:	80 64       	ori	r24, 0x40	; 64
    1178:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    117c:	f0 fc       	sbrc	r15, 0
    117e:	05 c0       	rjmp	.+10     	; 0x118a <USB_Host_SendControlRequest+0x224>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1180:	80 91 9e 00 	lds	r24, 0x009E
    1184:	8e 7f       	andi	r24, 0xFE	; 254
    1186:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    1190:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1194:	89 2f       	mov	r24, r25
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
    119a:	1f 91       	pop	r17
    119c:	0f 91       	pop	r16
    119e:	ff 90       	pop	r15
    11a0:	08 95       	ret

000011a2 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    11a2:	1f 93       	push	r17
    11a4:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    11a6:	10 92 02 05 	sts	0x0502, r1
    11aa:	89 e0       	ldi	r24, 0x09	; 9
    11ac:	80 93 03 05 	sts	0x0503, r24
    11b0:	10 93 04 05 	sts	0x0504, r17
    11b4:	10 92 05 05 	sts	0x0505, r1
    11b8:	10 92 07 05 	sts	0x0507, r1
    11bc:	10 92 06 05 	sts	0x0506, r1
    11c0:	10 92 09 05 	sts	0x0509, r1
    11c4:	10 92 08 05 	sts	0x0508, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    11c8:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	ca de       	rcall	.-620    	; 0xf66 <USB_Host_SendControlRequest>
    11d2:	88 23       	and	r24, r24
    11d4:	49 f4       	brne	.+18     	; 0x11e8 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    11d6:	10 93 00 05 	sts	0x0500, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    11da:	11 23       	and	r17, r17
    11dc:	11 f4       	brne	.+4      	; 0x11e2 <USB_Host_SetDeviceConfiguration+0x40>
    11de:	9a e0       	ldi	r25, 0x0A	; 10
    11e0:	01 c0       	rjmp	.+2      	; 0x11e4 <USB_Host_SetDeviceConfiguration+0x42>
    11e2:	9b e0       	ldi	r25, 0x0B	; 11
    11e4:	90 93 0a 05 	sts	0x050A, r25
	}

	return ErrorCode;
}
    11e8:	1f 91       	pop	r17
    11ea:	08 95       	ret

000011ec <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    11f2:	07 ea       	ldi	r16, 0xA7	; 167
    11f4:	10 e0       	ldi	r17, 0x00	; 0
    11f6:	f8 01       	movw	r30, r16
    11f8:	f0 80       	ld	r15, Z
    11fa:	f7 e0       	ldi	r31, 0x07	; 7
    11fc:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    11fe:	f8 01       	movw	r30, r16
    1200:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1202:	93 da       	rcall	.-2778   	; 0x72a <USB_Host_ProcessNextHostState>
    1204:	f8 01       	movw	r30, r16
    1206:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1208:	1f 91       	pop	r17
    120a:	0f 91       	pop	r16
    120c:	ff 90       	pop	r15
    120e:	08 95       	ret

00001210 <USB_GetHIDReportItemInfo>:
	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
    1210:	cf 92       	push	r12
    1212:	df 92       	push	r13
    1214:	ef 92       	push	r14
    1216:	ff 92       	push	r15
    1218:	0f 93       	push	r16
    121a:	1f 93       	push	r17
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
    1220:	6c 01       	movw	r12, r24
    1222:	eb 01       	movw	r28, r22
	if (ReportItem == NULL)
		return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
    1224:	28 85       	ldd	r18, Y+8	; 0x08
	uint16_t CurrentBit   = ReportItem->BitOffset;
    1226:	e8 80       	ld	r14, Y
    1228:	f9 80       	ldd	r15, Y+1	; 0x01
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
    122a:	9d 81       	ldd	r25, Y+5	; 0x05
    122c:	99 23       	and	r25, r25
    122e:	49 f0       	breq	.+18     	; 0x1242 <USB_GetHIDReportItemInfo+0x32>
	{
		if (ReportItem->ReportID != ReportData[0])
    1230:	f6 01       	movw	r30, r12
    1232:	80 81       	ld	r24, Z
    1234:	98 17       	cp	r25, r24
    1236:	11 f0       	breq	.+4      	; 0x123c <USB_GetHIDReportItemInfo+0x2c>
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	43 c0       	rjmp	.+134    	; 0x12c2 <USB_GetHIDReportItemInfo+0xb2>
		  return false;

		ReportData++;
    123c:	08 94       	sec
    123e:	c1 1c       	adc	r12, r1
    1240:	d1 1c       	adc	r13, r1
                              HID_ReportItem_t* const ReportItem)
{
	if (ReportItem == NULL)
		return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
    1242:	02 2f       	mov	r16, r18
    1244:	10 e0       	ldi	r17, 0x00	; 0
		  return false;

		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
    1246:	8a a1       	ldd	r24, Y+34	; 0x22
    1248:	9b a1       	ldd	r25, Y+35	; 0x23
    124a:	ac a1       	ldd	r26, Y+36	; 0x24
    124c:	bd a1       	ldd	r27, Y+37	; 0x25
    124e:	8e a3       	std	Y+38, r24	; 0x26
    1250:	9f a3       	std	Y+39, r25	; 0x27
    1252:	a8 a7       	std	Y+40, r26	; 0x28
    1254:	b9 a7       	std	Y+41, r27	; 0x29
	ReportItem->Value = 0;
    1256:	1a a2       	std	Y+34, r1	; 0x22
    1258:	1b a2       	std	Y+35, r1	; 0x23
    125a:	1c a2       	std	Y+36, r1	; 0x24
    125c:	1d a2       	std	Y+37, r1	; 0x25
    125e:	41 e0       	ldi	r20, 0x01	; 1
    1260:	50 e0       	ldi	r21, 0x00	; 0
    1262:	60 e0       	ldi	r22, 0x00	; 0
    1264:	70 e0       	ldi	r23, 0x00	; 0
    1266:	29 c0       	rjmp	.+82     	; 0x12ba <USB_GetHIDReportItemInfo+0xaa>

	while (DataBitsRem--)
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
    1268:	f7 01       	movw	r30, r14
    126a:	93 e0       	ldi	r25, 0x03	; 3
    126c:	f6 95       	lsr	r31
    126e:	e7 95       	ror	r30
    1270:	9a 95       	dec	r25
    1272:	e1 f7       	brne	.-8      	; 0x126c <USB_GetHIDReportItemInfo+0x5c>
    1274:	ec 0d       	add	r30, r12
    1276:	fd 1d       	adc	r31, r13
    1278:	80 81       	ld	r24, Z
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	97 01       	movw	r18, r14
    127e:	27 70       	andi	r18, 0x07	; 7
    1280:	30 70       	andi	r19, 0x00	; 0
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <USB_GetHIDReportItemInfo+0x78>
    1284:	95 95       	asr	r25
    1286:	87 95       	ror	r24
    1288:	2a 95       	dec	r18
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <USB_GetHIDReportItemInfo+0x74>
    128c:	80 ff       	sbrs	r24, 0
    128e:	0c c0       	rjmp	.+24     	; 0x12a8 <USB_GetHIDReportItemInfo+0x98>
		  ReportItem->Value |= BitMask;
    1290:	8a a1       	ldd	r24, Y+34	; 0x22
    1292:	9b a1       	ldd	r25, Y+35	; 0x23
    1294:	ac a1       	ldd	r26, Y+36	; 0x24
    1296:	bd a1       	ldd	r27, Y+37	; 0x25
    1298:	84 2b       	or	r24, r20
    129a:	95 2b       	or	r25, r21
    129c:	a6 2b       	or	r26, r22
    129e:	b7 2b       	or	r27, r23
    12a0:	8a a3       	std	Y+34, r24	; 0x22
    12a2:	9b a3       	std	Y+35, r25	; 0x23
    12a4:	ac a3       	std	Y+36, r26	; 0x24
    12a6:	bd a3       	std	Y+37, r27	; 0x25

		CurrentBit++;
    12a8:	08 94       	sec
    12aa:	e1 1c       	adc	r14, r1
    12ac:	f1 1c       	adc	r15, r1
		BitMask <<= 1;
    12ae:	44 0f       	add	r20, r20
    12b0:	55 1f       	adc	r21, r21
    12b2:	66 1f       	adc	r22, r22
    12b4:	77 1f       	adc	r23, r23
    12b6:	01 50       	subi	r16, 0x01	; 1
    12b8:	10 40       	sbci	r17, 0x00	; 0
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
    12ba:	01 15       	cp	r16, r1
    12bc:	11 05       	cpc	r17, r1
    12be:	a1 f6       	brne	.-88     	; 0x1268 <USB_GetHIDReportItemInfo+0x58>
    12c0:	81 e0       	ldi	r24, 0x01	; 1
		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
}
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
    12c6:	1f 91       	pop	r17
    12c8:	0f 91       	pop	r16
    12ca:	ff 90       	pop	r15
    12cc:	ef 90       	pop	r14
    12ce:	df 90       	pop	r13
    12d0:	cf 90       	pop	r12
    12d2:	08 95       	ret

000012d4 <USB_GetHIDReportSize>:
}

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
    12d4:	e4 2f       	mov	r30, r20
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	ee 0f       	add	r30, r30
    12da:	ff 1f       	adc	r31, r31
    12dc:	ef 56       	subi	r30, 0x6F	; 111
    12de:	fc 4f       	sbci	r31, 0xFC	; 252
    12e0:	e8 0f       	add	r30, r24
    12e2:	f9 1f       	adc	r31, r25
    12e4:	dc 01       	movw	r26, r24
    12e6:	a0 57       	subi	r26, 0x70	; 112
    12e8:	bc 4f       	sbci	r27, 0xFC	; 252
    12ea:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
    12ec:	20 81       	ld	r18, Z
    12ee:	31 81       	ldd	r19, Z+1	; 0x01

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
    12f0:	8c 91       	ld	r24, X
    12f2:	86 17       	cp	r24, r22
    12f4:	89 f4       	brne	.+34     	; 0x1318 <USB_GetHIDReportSize+0x44>
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
    12f6:	40 e0       	ldi	r20, 0x00	; 0
    12f8:	50 e0       	ldi	r21, 0x00	; 0
    12fa:	c9 01       	movw	r24, r18
    12fc:	87 70       	andi	r24, 0x07	; 7
    12fe:	90 70       	andi	r25, 0x00	; 0
    1300:	89 2b       	or	r24, r25
    1302:	11 f0       	breq	.+4      	; 0x1308 <USB_GetHIDReportSize+0x34>
    1304:	41 e0       	ldi	r20, 0x01	; 1
    1306:	50 e0       	ldi	r21, 0x00	; 0
    1308:	63 e0       	ldi	r22, 0x03	; 3
    130a:	36 95       	lsr	r19
    130c:	27 95       	ror	r18
    130e:	6a 95       	dec	r22
    1310:	e1 f7       	brne	.-8      	; 0x130a <USB_GetHIDReportSize+0x36>
    1312:	24 0f       	add	r18, r20
    1314:	35 1f       	adc	r19, r21
    1316:	07 c0       	rjmp	.+14     	; 0x1326 <USB_GetHIDReportSize+0x52>

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
    1318:	9f 5f       	subi	r25, 0xFF	; 255
    131a:	37 96       	adiw	r30, 0x07	; 7
    131c:	17 96       	adiw	r26, 0x07	; 7
    131e:	9a 30       	cpi	r25, 0x0A	; 10
    1320:	29 f7       	brne	.-54     	; 0x12ec <USB_GetHIDReportSize+0x18>
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
}
    1326:	c9 01       	movw	r24, r18
    1328:	08 95       	ret

0000132a <USB_ProcessHIDReport>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
    132a:	2f 92       	push	r2
    132c:	3f 92       	push	r3
    132e:	4f 92       	push	r4
    1330:	5f 92       	push	r5
    1332:	6f 92       	push	r6
    1334:	7f 92       	push	r7
    1336:	8f 92       	push	r8
    1338:	9f 92       	push	r9
    133a:	af 92       	push	r10
    133c:	bf 92       	push	r11
    133e:	cf 92       	push	r12
    1340:	df 92       	push	r13
    1342:	ef 92       	push	r14
    1344:	ff 92       	push	r15
    1346:	0f 93       	push	r16
    1348:	1f 93       	push	r17
    134a:	df 93       	push	r29
    134c:	cf 93       	push	r28
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	c5 59       	subi	r28, 0x95	; 149
    1354:	d0 40       	sbci	r29, 0x00	; 0
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	f8 94       	cli
    135a:	de bf       	out	0x3e, r29	; 62
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	cd bf       	out	0x3d, r28	; 61
    1360:	cf 57       	subi	r28, 0x7F	; 127
    1362:	df 4f       	sbci	r29, 0xFF	; 255
    1364:	99 83       	std	Y+1, r25	; 0x01
    1366:	88 83       	st	Y, r24
    1368:	c1 58       	subi	r28, 0x81	; 129
    136a:	d0 40       	sbci	r29, 0x00	; 0
    136c:	cd 57       	subi	r28, 0x7D	; 125
    136e:	df 4f       	sbci	r29, 0xFF	; 255
    1370:	79 83       	std	Y+1, r23	; 0x01
    1372:	68 83       	st	Y, r22
    1374:	c3 58       	subi	r28, 0x83	; 131
    1376:	d0 40       	sbci	r29, 0x00	; 0
    1378:	1a 01       	movw	r2, r20
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
    137a:	90 e9       	ldi	r25, 0x90	; 144
    137c:	49 2e       	mov	r4, r25
    137e:	93 e0       	ldi	r25, 0x03	; 3
    1380:	59 2e       	mov	r5, r25
    1382:	44 0e       	add	r4, r20
    1384:	55 1e       	adc	r5, r21
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
    1386:	89 ed       	ldi	r24, 0xD9	; 217
    1388:	93 e0       	ldi	r25, 0x03	; 3
    138a:	da 01       	movw	r26, r20
    138c:	fc 01       	movw	r30, r24
    138e:	1d 92       	st	X+, r1
    1390:	31 97       	sbiw	r30, 0x01	; 1
    1392:	e9 f7       	brne	.-6      	; 0x138e <USB_ProcessHIDReport+0x64>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
    1394:	fe 01       	movw	r30, r28
    1396:	fb 96       	adiw	r30, 0x3b	; 59
    1398:	8c e1       	ldi	r24, 0x1C	; 28
    139a:	df 01       	movw	r26, r30
    139c:	1d 92       	st	X+, r1
    139e:	8a 95       	dec	r24
    13a0:	e9 f7       	brne	.-6      	; 0x139c <USB_ProcessHIDReport+0x72>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
    13a2:	87 e0       	ldi	r24, 0x07	; 7
    13a4:	d2 01       	movw	r26, r4
    13a6:	1d 92       	st	X+, r1
    13a8:	8a 95       	dec	r24
    13aa:	e9 f7       	brne	.-6      	; 0x13a6 <USB_ProcessHIDReport+0x7c>

	ParserData->TotalDeviceReports = 1;
    13ac:	da 01       	movw	r26, r20
    13ae:	a1 57       	subi	r26, 0x71	; 113
    13b0:	bc 4f       	sbci	r27, 0xFC	; 252
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	8c 93       	st	X, r24
				UsageMinMax.Maximum = ReportItemData;
				break;
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
    13b6:	9a 01       	movw	r18, r20
    13b8:	27 5b       	subi	r18, 0xB7	; 183
    13ba:	3c 4f       	sbci	r19, 0xFC	; 252
    13bc:	e7 96       	adiw	r28, 0x37	; 55
    13be:	3f af       	std	Y+63, r19	; 0x3f
    13c0:	2e af       	std	Y+62, r18	; 0x3e
    13c2:	e7 97       	sbiw	r28, 0x37	; 55
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
    13c4:	40 5b       	subi	r20, 0xB0	; 176
    13c6:	5c 4f       	sbci	r21, 0xFC	; 252
    13c8:	e5 96       	adiw	r28, 0x35	; 53
    13ca:	5f af       	std	Y+63, r21	; 0x3f
    13cc:	4e af       	std	Y+62, r20	; 0x3e
    13ce:	e5 97       	sbiw	r28, 0x35	; 53

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
    13d0:	c1 01       	movw	r24, r2
    13d2:	88 57       	subi	r24, 0x78	; 120
    13d4:	9c 4f       	sbci	r25, 0xFC	; 252
    13d6:	ef 96       	adiw	r28, 0x3f	; 63
    13d8:	9f af       	std	Y+63, r25	; 0x3f
    13da:	8e af       	std	Y+62, r24	; 0x3e
    13dc:	ef 97       	sbiw	r28, 0x3f	; 63
    13de:	6f 01       	movw	r12, r30
    13e0:	aa 24       	eor	r10, r10
    13e2:	bb 24       	eor	r11, r11
    13e4:	ed 96       	adiw	r28, 0x3d	; 61
    13e6:	1f ae       	std	Y+63, r1	; 0x3f
    13e8:	ed 97       	sbiw	r28, 0x3d	; 61
    13ea:	eb 96       	adiw	r28, 0x3b	; 59
    13ec:	1c ae       	std	Y+60, r1	; 0x3c
    13ee:	1d ae       	std	Y+61, r1	; 0x3d
    13f0:	1e ae       	std	Y+62, r1	; 0x3e
    13f2:	1f ae       	std	Y+63, r1	; 0x3f
    13f4:	eb 97       	sbiw	r28, 0x3b	; 59
    13f6:	66 24       	eor	r6, r6
    13f8:	77 24       	eor	r7, r7
    13fa:	43 01       	movw	r8, r6

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					if (ParserData->LargestReportSizeBits < NewReportItem.BitOffset)
    13fc:	f1 01       	movw	r30, r2
    13fe:	ea 52       	subi	r30, 0x2A	; 42
    1400:	fc 4f       	sbci	r31, 0xFC	; 252
    1402:	c6 57       	subi	r28, 0x76	; 118
    1404:	df 4f       	sbci	r29, 0xFF	; 255
    1406:	f9 83       	std	Y+1, r31	; 0x01
    1408:	e8 83       	st	Y, r30
    140a:	ca 58       	subi	r28, 0x8A	; 138
    140c:	d0 40       	sbci	r29, 0x00	; 0
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
    140e:	cc 56       	subi	r28, 0x6C	; 108
    1410:	df 4f       	sbci	r29, 0xFF	; 255
    1412:	d9 82       	std	Y+1, r13	; 0x01
    1414:	c8 82       	st	Y, r12
    1416:	c4 59       	subi	r28, 0x94	; 148
    1418:	d0 40       	sbci	r29, 0x00	; 0
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
    141a:	96 01       	movw	r18, r12
    141c:	24 5e       	subi	r18, 0xE4	; 228
    141e:	3f 4f       	sbci	r19, 0xFF	; 255
    1420:	c4 57       	subi	r28, 0x74	; 116
    1422:	df 4f       	sbci	r29, 0xFF	; 255
    1424:	39 83       	std	Y+1, r19	; 0x01
    1426:	28 83       	st	Y, r18
    1428:	cc 58       	subi	r28, 0x8C	; 140
    142a:	d0 40       	sbci	r29, 0x00	; 0
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
    142c:	a1 01       	movw	r20, r2
    142e:	48 52       	subi	r20, 0x28	; 40
    1430:	5c 4f       	sbci	r21, 0xFC	; 252
    1432:	c2 57       	subi	r28, 0x72	; 114
    1434:	df 4f       	sbci	r29, 0xFF	; 255
    1436:	59 83       	std	Y+1, r21	; 0x01
    1438:	48 83       	st	Y, r20
    143a:	ce 58       	subi	r28, 0x8E	; 142
    143c:	d0 40       	sbci	r29, 0x00	; 0
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    143e:	c0 57       	subi	r28, 0x70	; 112
    1440:	df 4f       	sbci	r29, 0xFF	; 255
    1442:	b9 83       	std	Y+1, r27	; 0x01
    1444:	a8 83       	st	Y, r26
    1446:	c0 59       	subi	r28, 0x90	; 144
    1448:	d0 40       	sbci	r29, 0x00	; 0
    144a:	c2 01       	movw	r24, r4
    144c:	ce 56       	subi	r28, 0x6E	; 110
    144e:	df 4f       	sbci	r29, 0xFF	; 255
    1450:	48 82       	st	Y, r4
    1452:	c2 59       	subi	r28, 0x92	; 146
    1454:	d0 40       	sbci	r29, 0x00	; 0
    1456:	cd 56       	subi	r28, 0x6D	; 109
    1458:	df 4f       	sbci	r29, 0xFF	; 255
    145a:	98 83       	st	Y, r25
    145c:	c3 59       	subi	r28, 0x93	; 147
    145e:	d0 40       	sbci	r29, 0x00	; 0
    1460:	32 c3       	rjmp	.+1636   	; 0x1ac6 <USB_ProcessHIDReport+0x79c>

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
    1462:	cf 57       	subi	r28, 0x7F	; 127
    1464:	df 4f       	sbci	r29, 0xFF	; 255
    1466:	a8 81       	ld	r26, Y
    1468:	b9 81       	ldd	r27, Y+1	; 0x01
    146a:	c1 58       	subi	r28, 0x81	; 129
    146c:	d0 40       	sbci	r29, 0x00	; 0
    146e:	4d 91       	ld	r20, X+
    1470:	cf 57       	subi	r28, 0x7F	; 127
    1472:	df 4f       	sbci	r29, 0xFF	; 255
    1474:	b9 83       	std	Y+1, r27	; 0x01
    1476:	a8 83       	st	Y, r26
    1478:	c1 58       	subi	r28, 0x81	; 129
    147a:	d0 40       	sbci	r29, 0x00	; 0
		uint32_t ReportItemData = 0;

		ReportData++;
		ReportSize--;
    147c:	cd 57       	subi	r28, 0x7D	; 125
    147e:	df 4f       	sbci	r29, 0xFF	; 255
    1480:	e8 81       	ld	r30, Y
    1482:	f9 81       	ldd	r31, Y+1	; 0x01
    1484:	c3 58       	subi	r28, 0x83	; 131
    1486:	d0 40       	sbci	r29, 0x00	; 0
    1488:	31 97       	sbiw	r30, 0x01	; 1
    148a:	cd 57       	subi	r28, 0x7D	; 125
    148c:	df 4f       	sbci	r29, 0xFF	; 255
    148e:	f9 83       	std	Y+1, r31	; 0x01
    1490:	e8 83       	st	Y, r30
    1492:	c3 58       	subi	r28, 0x83	; 131
    1494:	d0 40       	sbci	r29, 0x00	; 0

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
    1496:	24 2f       	mov	r18, r20
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	c1 58       	subi	r28, 0x81	; 129
    149c:	df 4f       	sbci	r29, 0xFF	; 255
    149e:	39 83       	std	Y+1, r19	; 0x01
    14a0:	28 83       	st	Y, r18
    14a2:	cf 57       	subi	r28, 0x7F	; 127
    14a4:	d0 40       	sbci	r29, 0x00	; 0
    14a6:	23 70       	andi	r18, 0x03	; 3
    14a8:	30 70       	andi	r19, 0x00	; 0
    14aa:	22 30       	cpi	r18, 0x02	; 2
    14ac:	31 05       	cpc	r19, r1
    14ae:	11 f1       	breq	.+68     	; 0x14f4 <USB_ProcessHIDReport+0x1ca>
    14b0:	23 30       	cpi	r18, 0x03	; 3
    14b2:	31 05       	cpc	r19, r1
    14b4:	39 f0       	breq	.+14     	; 0x14c4 <USB_ProcessHIDReport+0x19a>
    14b6:	21 30       	cpi	r18, 0x01	; 1
    14b8:	31 05       	cpc	r19, r1
    14ba:	a9 f1       	breq	.+106    	; 0x1526 <USB_ProcessHIDReport+0x1fc>
    14bc:	ee 24       	eor	r14, r14
    14be:	ff 24       	eor	r15, r15
    14c0:	87 01       	movw	r16, r14
    14c2:	4f c0       	rjmp	.+158    	; 0x1562 <USB_ProcessHIDReport+0x238>
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = le32_to_cpu(*((uint32_t*)ReportData));
    14c4:	cf 57       	subi	r28, 0x7F	; 127
    14c6:	df 4f       	sbci	r29, 0xFF	; 255
    14c8:	a8 81       	ld	r26, Y
    14ca:	b9 81       	ldd	r27, Y+1	; 0x01
    14cc:	c1 58       	subi	r28, 0x81	; 129
    14ce:	d0 40       	sbci	r29, 0x00	; 0
    14d0:	ed 90       	ld	r14, X+
    14d2:	fd 90       	ld	r15, X+
    14d4:	0d 91       	ld	r16, X+
    14d6:	1d 91       	ld	r17, X+
    14d8:	cf 57       	subi	r28, 0x7F	; 127
    14da:	df 4f       	sbci	r29, 0xFF	; 255
    14dc:	b9 83       	std	Y+1, r27	; 0x01
    14de:	a8 83       	st	Y, r26
    14e0:	c1 58       	subi	r28, 0x81	; 129
    14e2:	d0 40       	sbci	r29, 0x00	; 0
				ReportSize     -= 4;
    14e4:	cd 57       	subi	r28, 0x7D	; 125
    14e6:	df 4f       	sbci	r29, 0xFF	; 255
    14e8:	e8 81       	ld	r30, Y
    14ea:	f9 81       	ldd	r31, Y+1	; 0x01
    14ec:	c3 58       	subi	r28, 0x83	; 131
    14ee:	d0 40       	sbci	r29, 0x00	; 0
    14f0:	34 97       	sbiw	r30, 0x04	; 4
    14f2:	31 c0       	rjmp	.+98     	; 0x1556 <USB_ProcessHIDReport+0x22c>
				ReportData     += 4;
				break;
			case HID_RI_DATA_BITS_16:
				ReportItemData  = le16_to_cpu(*((uint16_t*)ReportData));
    14f4:	cf 57       	subi	r28, 0x7F	; 127
    14f6:	df 4f       	sbci	r29, 0xFF	; 255
    14f8:	a8 81       	ld	r26, Y
    14fa:	b9 81       	ldd	r27, Y+1	; 0x01
    14fc:	c1 58       	subi	r28, 0x81	; 129
    14fe:	d0 40       	sbci	r29, 0x00	; 0
    1500:	8d 91       	ld	r24, X+
    1502:	9d 91       	ld	r25, X+
    1504:	cf 57       	subi	r28, 0x7F	; 127
    1506:	df 4f       	sbci	r29, 0xFF	; 255
    1508:	b9 83       	std	Y+1, r27	; 0x01
    150a:	a8 83       	st	Y, r26
    150c:	c1 58       	subi	r28, 0x81	; 129
    150e:	d0 40       	sbci	r29, 0x00	; 0
    1510:	7c 01       	movw	r14, r24
    1512:	00 e0       	ldi	r16, 0x00	; 0
    1514:	10 e0       	ldi	r17, 0x00	; 0
				ReportSize     -= 2;
    1516:	cd 57       	subi	r28, 0x7D	; 125
    1518:	df 4f       	sbci	r29, 0xFF	; 255
    151a:	e8 81       	ld	r30, Y
    151c:	f9 81       	ldd	r31, Y+1	; 0x01
    151e:	c3 58       	subi	r28, 0x83	; 131
    1520:	d0 40       	sbci	r29, 0x00	; 0
    1522:	32 97       	sbiw	r30, 0x02	; 2
    1524:	18 c0       	rjmp	.+48     	; 0x1556 <USB_ProcessHIDReport+0x22c>
				ReportData     += 2;
				break;
			case HID_RI_DATA_BITS_8:
				ReportItemData  = *((uint8_t*)ReportData);
    1526:	cf 57       	subi	r28, 0x7F	; 127
    1528:	df 4f       	sbci	r29, 0xFF	; 255
    152a:	a8 81       	ld	r26, Y
    152c:	b9 81       	ldd	r27, Y+1	; 0x01
    152e:	c1 58       	subi	r28, 0x81	; 129
    1530:	d0 40       	sbci	r29, 0x00	; 0
    1532:	8d 91       	ld	r24, X+
    1534:	cf 57       	subi	r28, 0x7F	; 127
    1536:	df 4f       	sbci	r29, 0xFF	; 255
    1538:	b9 83       	std	Y+1, r27	; 0x01
    153a:	a8 83       	st	Y, r26
    153c:	c1 58       	subi	r28, 0x81	; 129
    153e:	d0 40       	sbci	r29, 0x00	; 0
    1540:	e8 2e       	mov	r14, r24
    1542:	ff 24       	eor	r15, r15
    1544:	00 e0       	ldi	r16, 0x00	; 0
    1546:	10 e0       	ldi	r17, 0x00	; 0
				ReportSize     -= 1;
    1548:	cd 57       	subi	r28, 0x7D	; 125
    154a:	df 4f       	sbci	r29, 0xFF	; 255
    154c:	e8 81       	ld	r30, Y
    154e:	f9 81       	ldd	r31, Y+1	; 0x01
    1550:	c3 58       	subi	r28, 0x83	; 131
    1552:	d0 40       	sbci	r29, 0x00	; 0
    1554:	31 97       	sbiw	r30, 0x01	; 1
    1556:	cd 57       	subi	r28, 0x7D	; 125
    1558:	df 4f       	sbci	r29, 0xFF	; 255
    155a:	f9 83       	std	Y+1, r31	; 0x01
    155c:	e8 83       	st	Y, r30
    155e:	c3 58       	subi	r28, 0x83	; 131
    1560:	d0 40       	sbci	r29, 0x00	; 0
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
    1562:	c1 58       	subi	r28, 0x81	; 129
    1564:	df 4f       	sbci	r29, 0xFF	; 255
    1566:	88 81       	ld	r24, Y
    1568:	99 81       	ldd	r25, Y+1	; 0x01
    156a:	cf 57       	subi	r28, 0x7F	; 127
    156c:	d0 40       	sbci	r29, 0x00	; 0
    156e:	8c 7f       	andi	r24, 0xFC	; 252
    1570:	90 70       	andi	r25, 0x00	; 0
    1572:	84 36       	cpi	r24, 0x64	; 100
    1574:	91 05       	cpc	r25, r1
    1576:	09 f4       	brne	.+2      	; 0x157a <USB_ProcessHIDReport+0x250>
    1578:	db c0       	rjmp	.+438    	; 0x1730 <USB_ProcessHIDReport+0x406>
    157a:	85 36       	cpi	r24, 0x65	; 101
    157c:	91 05       	cpc	r25, r1
    157e:	74 f5       	brge	.+92     	; 0x15dc <USB_ProcessHIDReport+0x2b2>
    1580:	84 32       	cpi	r24, 0x24	; 36
    1582:	91 05       	cpc	r25, r1
    1584:	09 f4       	brne	.+2      	; 0x1588 <USB_ProcessHIDReport+0x25e>
    1586:	bb c0       	rjmp	.+374    	; 0x16fe <USB_ProcessHIDReport+0x3d4>
    1588:	85 32       	cpi	r24, 0x25	; 37
    158a:	91 05       	cpc	r25, r1
    158c:	9c f4       	brge	.+38     	; 0x15b4 <USB_ProcessHIDReport+0x28a>
    158e:	88 30       	cpi	r24, 0x08	; 8
    1590:	91 05       	cpc	r25, r1
    1592:	09 f4       	brne	.+2      	; 0x1596 <USB_ProcessHIDReport+0x26c>
    1594:	37 c1       	rjmp	.+622    	; 0x1804 <USB_ProcessHIDReport+0x4da>
    1596:	89 30       	cpi	r24, 0x09	; 9
    1598:	91 05       	cpc	r25, r1
    159a:	24 f4       	brge	.+8      	; 0x15a4 <USB_ProcessHIDReport+0x27a>
    159c:	04 97       	sbiw	r24, 0x04	; 4
    159e:	09 f0       	breq	.+2      	; 0x15a2 <USB_ProcessHIDReport+0x278>
    15a0:	7a c2       	rjmp	.+1268   	; 0x1a96 <USB_ProcessHIDReport+0x76c>
    15a2:	98 c0       	rjmp	.+304    	; 0x16d4 <USB_ProcessHIDReport+0x3aa>
    15a4:	84 31       	cpi	r24, 0x14	; 20
    15a6:	91 05       	cpc	r25, r1
    15a8:	09 f4       	brne	.+2      	; 0x15ac <USB_ProcessHIDReport+0x282>
    15aa:	a3 c0       	rjmp	.+326    	; 0x16f2 <USB_ProcessHIDReport+0x3c8>
    15ac:	48 97       	sbiw	r24, 0x18	; 24
    15ae:	09 f0       	breq	.+2      	; 0x15b2 <USB_ProcessHIDReport+0x288>
    15b0:	72 c2       	rjmp	.+1252   	; 0x1a96 <USB_ProcessHIDReport+0x76c>
    15b2:	47 c0       	rjmp	.+142    	; 0x1642 <USB_ProcessHIDReport+0x318>
    15b4:	84 33       	cpi	r24, 0x34	; 52
    15b6:	91 05       	cpc	r25, r1
    15b8:	09 f4       	brne	.+2      	; 0x15bc <USB_ProcessHIDReport+0x292>
    15ba:	a9 c0       	rjmp	.+338    	; 0x170e <USB_ProcessHIDReport+0x3e4>
    15bc:	85 33       	cpi	r24, 0x35	; 53
    15be:	91 05       	cpc	r25, r1
    15c0:	24 f4       	brge	.+8      	; 0x15ca <USB_ProcessHIDReport+0x2a0>
    15c2:	88 97       	sbiw	r24, 0x28	; 40
    15c4:	09 f0       	breq	.+2      	; 0x15c8 <USB_ProcessHIDReport+0x29e>
    15c6:	67 c2       	rjmp	.+1230   	; 0x1a96 <USB_ProcessHIDReport+0x76c>
    15c8:	38 c1       	rjmp	.+624    	; 0x183a <USB_ProcessHIDReport+0x510>
    15ca:	84 34       	cpi	r24, 0x44	; 68
    15cc:	91 05       	cpc	r25, r1
    15ce:	09 f4       	brne	.+2      	; 0x15d2 <USB_ProcessHIDReport+0x2a8>
    15d0:	a4 c0       	rjmp	.+328    	; 0x171a <USB_ProcessHIDReport+0x3f0>
    15d2:	84 35       	cpi	r24, 0x54	; 84
    15d4:	91 05       	cpc	r25, r1
    15d6:	09 f0       	breq	.+2      	; 0x15da <USB_ProcessHIDReport+0x2b0>
    15d8:	5e c2       	rjmp	.+1212   	; 0x1a96 <USB_ProcessHIDReport+0x76c>
    15da:	a7 c0       	rjmp	.+334    	; 0x172a <USB_ProcessHIDReport+0x400>
    15dc:	84 39       	cpi	r24, 0x94	; 148
    15de:	91 05       	cpc	r25, r1
    15e0:	09 f4       	brne	.+2      	; 0x15e4 <USB_ProcessHIDReport+0x2ba>
    15e2:	b1 c0       	rjmp	.+354    	; 0x1746 <USB_ProcessHIDReport+0x41c>
    15e4:	85 39       	cpi	r24, 0x95	; 149
    15e6:	91 05       	cpc	r25, r1
    15e8:	a4 f4       	brge	.+40     	; 0x1612 <USB_ProcessHIDReport+0x2e8>
    15ea:	80 38       	cpi	r24, 0x80	; 128
    15ec:	91 05       	cpc	r25, r1
    15ee:	69 f1       	breq	.+90     	; 0x164a <USB_ProcessHIDReport+0x320>
    15f0:	81 38       	cpi	r24, 0x81	; 129
    15f2:	91 05       	cpc	r25, r1
    15f4:	2c f4       	brge	.+10     	; 0x1600 <USB_ProcessHIDReport+0x2d6>
    15f6:	84 37       	cpi	r24, 0x74	; 116
    15f8:	91 05       	cpc	r25, r1
    15fa:	09 f0       	breq	.+2      	; 0x15fe <USB_ProcessHIDReport+0x2d4>
    15fc:	4c c2       	rjmp	.+1176   	; 0x1a96 <USB_ProcessHIDReport+0x76c>
    15fe:	a0 c0       	rjmp	.+320    	; 0x1740 <USB_ProcessHIDReport+0x416>
    1600:	84 38       	cpi	r24, 0x84	; 132
    1602:	91 05       	cpc	r25, r1
    1604:	09 f4       	brne	.+2      	; 0x1608 <USB_ProcessHIDReport+0x2de>
    1606:	a3 c0       	rjmp	.+326    	; 0x174e <USB_ProcessHIDReport+0x424>
    1608:	80 39       	cpi	r24, 0x90	; 144
    160a:	91 05       	cpc	r25, r1
    160c:	09 f0       	breq	.+2      	; 0x1610 <USB_ProcessHIDReport+0x2e6>
    160e:	43 c2       	rjmp	.+1158   	; 0x1a96 <USB_ProcessHIDReport+0x76c>
    1610:	1c c0       	rjmp	.+56     	; 0x164a <USB_ProcessHIDReport+0x320>
    1612:	80 3b       	cpi	r24, 0xB0	; 176
    1614:	91 05       	cpc	r25, r1
    1616:	c9 f0       	breq	.+50     	; 0x164a <USB_ProcessHIDReport+0x320>
    1618:	81 3b       	cpi	r24, 0xB1	; 177
    161a:	91 05       	cpc	r25, r1
    161c:	4c f4       	brge	.+18     	; 0x1630 <USB_ProcessHIDReport+0x306>
    161e:	80 3a       	cpi	r24, 0xA0	; 160
    1620:	91 05       	cpc	r25, r1
    1622:	09 f4       	brne	.+2      	; 0x1626 <USB_ProcessHIDReport+0x2fc>
    1624:	12 c1       	rjmp	.+548    	; 0x184a <USB_ProcessHIDReport+0x520>
    1626:	84 3a       	cpi	r24, 0xA4	; 164
    1628:	91 05       	cpc	r25, r1
    162a:	09 f0       	breq	.+2      	; 0x162e <USB_ProcessHIDReport+0x304>
    162c:	34 c2       	rjmp	.+1128   	; 0x1a96 <USB_ProcessHIDReport+0x76c>
    162e:	2a c0       	rjmp	.+84     	; 0x1684 <USB_ProcessHIDReport+0x35a>
    1630:	84 3b       	cpi	r24, 0xB4	; 180
    1632:	91 05       	cpc	r25, r1
    1634:	09 f4       	brne	.+2      	; 0x1638 <USB_ProcessHIDReport+0x30e>
    1636:	3e c0       	rjmp	.+124    	; 0x16b4 <USB_ProcessHIDReport+0x38a>
    1638:	80 3c       	cpi	r24, 0xC0	; 192
    163a:	91 05       	cpc	r25, r1
    163c:	09 f0       	breq	.+2      	; 0x1640 <USB_ProcessHIDReport+0x316>
    163e:	2b c2       	rjmp	.+1110   	; 0x1a96 <USB_ProcessHIDReport+0x76c>
    1640:	63 c1       	rjmp	.+710    	; 0x1908 <USB_ProcessHIDReport+0x5de>
    1642:	f5 01       	movw	r30, r10
    1644:	37 01       	movw	r6, r14
    1646:	48 01       	movw	r8, r16
    1648:	27 c2       	rjmp	.+1102   	; 0x1a98 <USB_ProcessHIDReport+0x76e>
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
    164a:	cb 57       	subi	r28, 0x7B	; 123
    164c:	df 4f       	sbci	r29, 0xFF	; 255
    164e:	c8 82       	st	Y, r12
    1650:	c5 58       	subi	r28, 0x85	; 133
    1652:	d0 40       	sbci	r29, 0x00	; 0
    1654:	ca 57       	subi	r28, 0x7A	; 122
    1656:	df 4f       	sbci	r29, 0xFF	; 255
    1658:	d8 82       	st	Y, r13
    165a:	c6 58       	subi	r28, 0x86	; 134
    165c:	d0 40       	sbci	r29, 0x00	; 0
    165e:	ec 96       	adiw	r28, 0x3c	; 60
    1660:	1f ae       	std	Y+63, r1	; 0x3f
    1662:	ec 97       	sbiw	r28, 0x3c	; 60
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));
    1664:	4c 7f       	andi	r20, 0xFC	; 252
    1666:	c9 57       	subi	r28, 0x79	; 121
    1668:	df 4f       	sbci	r29, 0xFF	; 255
    166a:	48 83       	st	Y, r20
    166c:	c7 58       	subi	r28, 0x87	; 135
    166e:	d0 40       	sbci	r29, 0x00	; 0
					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					if (ParserData->LargestReportSizeBits < NewReportItem.BitOffset)
					  ParserData->LargestReportSizeBits = NewReportItem.BitOffset;

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    1670:	97 01       	movw	r18, r14
    1672:	21 70       	andi	r18, 0x01	; 1
    1674:	30 70       	andi	r19, 0x00	; 0
    1676:	c8 57       	subi	r28, 0x78	; 120
    1678:	df 4f       	sbci	r29, 0xFF	; 255
    167a:	39 83       	std	Y+1, r19	; 0x01
    167c:	28 83       	st	Y, r18
    167e:	c8 58       	subi	r28, 0x88	; 136
    1680:	d0 40       	sbci	r29, 0x00	; 0
    1682:	00 c2       	rjmp	.+1024   	; 0x1a84 <USB_ProcessHIDReport+0x75a>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
    1684:	c4 57       	subi	r28, 0x74	; 116
    1686:	df 4f       	sbci	r29, 0xFF	; 255
    1688:	48 81       	ld	r20, Y
    168a:	59 81       	ldd	r21, Y+1	; 0x01
    168c:	cc 58       	subi	r28, 0x8C	; 140
    168e:	d0 40       	sbci	r29, 0x00	; 0
    1690:	c4 16       	cp	r12, r20
    1692:	d5 06       	cpc	r13, r21
    1694:	11 f4       	brne	.+4      	; 0x169a <USB_ProcessHIDReport+0x370>
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	26 c2       	rjmp	.+1100   	; 0x1ae6 <USB_ProcessHIDReport+0x7bc>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
    169a:	d6 01       	movw	r26, r12
    169c:	5c 96       	adiw	r26, 0x1c	; 28
    169e:	f6 01       	movw	r30, r12
    16a0:	8a e2       	ldi	r24, 0x2A	; 42
    16a2:	01 90       	ld	r0, Z+
    16a4:	0d 92       	st	X+, r0
    16a6:	81 50       	subi	r24, 0x01	; 1
    16a8:	e1 f7       	brne	.-8      	; 0x16a2 <USB_ProcessHIDReport+0x378>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
    16aa:	8c e1       	ldi	r24, 0x1C	; 28
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	c8 0e       	add	r12, r24
    16b0:	d9 1e       	adc	r13, r25
    16b2:	f1 c1       	rjmp	.+994    	; 0x1a96 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
    16b4:	cc 56       	subi	r28, 0x6C	; 108
    16b6:	df 4f       	sbci	r29, 0xFF	; 255
    16b8:	a8 81       	ld	r26, Y
    16ba:	b9 81       	ldd	r27, Y+1	; 0x01
    16bc:	c4 59       	subi	r28, 0x94	; 148
    16be:	d0 40       	sbci	r29, 0x00	; 0
    16c0:	ca 16       	cp	r12, r26
    16c2:	db 06       	cpc	r13, r27
    16c4:	11 f4       	brne	.+4      	; 0x16ca <USB_ProcessHIDReport+0x3a0>
    16c6:	82 e0       	ldi	r24, 0x02	; 2
    16c8:	0e c2       	rjmp	.+1052   	; 0x1ae6 <USB_ProcessHIDReport+0x7bc>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
    16ca:	e4 ee       	ldi	r30, 0xE4	; 228
    16cc:	ff ef       	ldi	r31, 0xFF	; 255
    16ce:	ce 0e       	add	r12, r30
    16d0:	df 1e       	adc	r13, r31
    16d2:	e1 c1       	rjmp	.+962    	; 0x1a96 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
    16d4:	23 30       	cpi	r18, 0x03	; 3
    16d6:	31 05       	cpc	r19, r1
    16d8:	31 f4       	brne	.+12     	; 0x16e6 <USB_ProcessHIDReport+0x3bc>
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);
    16da:	c8 01       	movw	r24, r16
    16dc:	aa 27       	eor	r26, r26
    16de:	bb 27       	eor	r27, r27
    16e0:	f6 01       	movw	r30, r12
    16e2:	92 83       	std	Z+2, r25	; 0x02
    16e4:	81 83       	std	Z+1, r24	; 0x01
				
				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
    16e6:	d6 01       	movw	r26, r12
    16e8:	12 96       	adiw	r26, 0x02	; 2
    16ea:	fc 92       	st	X, r15
    16ec:	ee 92       	st	-X, r14
    16ee:	11 97       	sbiw	r26, 0x01	; 1
    16f0:	d2 c1       	rjmp	.+932    	; 0x1a96 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
    16f2:	f6 01       	movw	r30, r12
    16f4:	e2 86       	std	Z+10, r14	; 0x0a
    16f6:	f3 86       	std	Z+11, r15	; 0x0b
    16f8:	04 87       	std	Z+12, r16	; 0x0c
    16fa:	15 87       	std	Z+13, r17	; 0x0d
    16fc:	cc c1       	rjmp	.+920    	; 0x1a96 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
    16fe:	d6 01       	movw	r26, r12
    1700:	1e 96       	adiw	r26, 0x0e	; 14
    1702:	ed 92       	st	X+, r14
    1704:	fd 92       	st	X+, r15
    1706:	0d 93       	st	X+, r16
    1708:	1c 93       	st	X, r17
    170a:	51 97       	sbiw	r26, 0x11	; 17
    170c:	c4 c1       	rjmp	.+904    	; 0x1a96 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
    170e:	f6 01       	movw	r30, r12
    1710:	e2 8a       	std	Z+18, r14	; 0x12
    1712:	f3 8a       	std	Z+19, r15	; 0x13
    1714:	04 8b       	std	Z+20, r16	; 0x14
    1716:	15 8b       	std	Z+21, r17	; 0x15
    1718:	be c1       	rjmp	.+892    	; 0x1a96 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
    171a:	d6 01       	movw	r26, r12
    171c:	56 96       	adiw	r26, 0x16	; 22
    171e:	ed 92       	st	X+, r14
    1720:	fd 92       	st	X+, r15
    1722:	0d 93       	st	X+, r16
    1724:	1c 93       	st	X, r17
    1726:	59 97       	sbiw	r26, 0x19	; 25
    1728:	b6 c1       	rjmp	.+876    	; 0x1a96 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
    172a:	f6 01       	movw	r30, r12
    172c:	e1 86       	std	Z+9, r14	; 0x09
    172e:	b3 c1       	rjmp	.+870    	; 0x1a96 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
    1730:	d6 01       	movw	r26, r12
    1732:	15 96       	adiw	r26, 0x05	; 5
    1734:	ed 92       	st	X+, r14
    1736:	fd 92       	st	X+, r15
    1738:	0d 93       	st	X+, r16
    173a:	1c 93       	st	X, r17
    173c:	18 97       	sbiw	r26, 0x08	; 8
    173e:	ab c1       	rjmp	.+854    	; 0x1a96 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
    1740:	f6 01       	movw	r30, r12
    1742:	e0 82       	st	Z, r14
    1744:	a8 c1       	rjmp	.+848    	; 0x1a96 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
    1746:	d6 01       	movw	r26, r12
    1748:	5a 96       	adiw	r26, 0x1a	; 26
    174a:	ec 92       	st	X, r14
    174c:	a4 c1       	rjmp	.+840    	; 0x1a96 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
    174e:	3e 2d       	mov	r19, r14
    1750:	f6 01       	movw	r30, r12
    1752:	e3 8e       	std	Z+27, r14	; 0x1b

				if (ParserData->UsingReportIDs)
    1754:	c2 57       	subi	r28, 0x72	; 114
    1756:	df 4f       	sbci	r29, 0xFF	; 255
    1758:	a8 81       	ld	r26, Y
    175a:	b9 81       	ldd	r27, Y+1	; 0x01
    175c:	ce 58       	subi	r28, 0x8E	; 142
    175e:	d0 40       	sbci	r29, 0x00	; 0
    1760:	8c 91       	ld	r24, X
    1762:	88 23       	and	r24, r24
    1764:	09 f4       	brne	.+2      	; 0x1768 <USB_ProcessHIDReport+0x43e>
    1766:	40 c0       	rjmp	.+128    	; 0x17e8 <USB_ProcessHIDReport+0x4be>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    1768:	c0 57       	subi	r28, 0x70	; 112
    176a:	df 4f       	sbci	r29, 0xFF	; 255
    176c:	e8 81       	ld	r30, Y
    176e:	f9 81       	ldd	r31, Y+1	; 0x01
    1770:	c0 59       	subi	r28, 0x90	; 144
    1772:	d0 40       	sbci	r29, 0x00	; 0
    1774:	20 81       	ld	r18, Z
    1776:	ce 56       	subi	r28, 0x6E	; 110
    1778:	df 4f       	sbci	r29, 0xFF	; 255
    177a:	88 81       	ld	r24, Y
    177c:	c2 59       	subi	r28, 0x92	; 146
    177e:	d0 40       	sbci	r29, 0x00	; 0
    1780:	cd 56       	subi	r28, 0x6D	; 109
    1782:	df 4f       	sbci	r29, 0xFF	; 255
    1784:	98 81       	ld	r25, Y
    1786:	c3 59       	subi	r28, 0x93	; 147
    1788:	d0 40       	sbci	r29, 0x00	; 0
    178a:	dc 01       	movw	r26, r24
    178c:	e0 e0       	ldi	r30, 0x00	; 0
    178e:	10 c0       	rjmp	.+32     	; 0x17b0 <USB_ProcessHIDReport+0x486>
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
    1790:	8c 91       	ld	r24, X
    1792:	17 96       	adiw	r26, 0x07	; 7
    1794:	83 17       	cp	r24, r19
    1796:	59 f4       	brne	.+22     	; 0x17ae <USB_ProcessHIDReport+0x484>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
    1798:	87 e0       	ldi	r24, 0x07	; 7
    179a:	e8 9f       	mul	r30, r24
    179c:	20 01       	movw	r4, r0
    179e:	11 24       	eor	r1, r1
    17a0:	20 e9       	ldi	r18, 0x90	; 144
    17a2:	33 e0       	ldi	r19, 0x03	; 3
    17a4:	42 0e       	add	r4, r18
    17a6:	53 1e       	adc	r5, r19
    17a8:	42 0c       	add	r4, r2
    17aa:	53 1c       	adc	r5, r3
    17ac:	1d c0       	rjmp	.+58     	; 0x17e8 <USB_ProcessHIDReport+0x4be>

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    17ae:	ef 5f       	subi	r30, 0xFF	; 255
    17b0:	e2 17       	cp	r30, r18
    17b2:	70 f3       	brcs	.-36     	; 0x1790 <USB_ProcessHIDReport+0x466>
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
    17b4:	2a 30       	cpi	r18, 0x0A	; 10
    17b6:	11 f4       	brne	.+4      	; 0x17bc <USB_ProcessHIDReport+0x492>
    17b8:	87 e0       	ldi	r24, 0x07	; 7
    17ba:	95 c1       	rjmp	.+810    	; 0x1ae6 <USB_ProcessHIDReport+0x7bc>
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
    17bc:	87 e0       	ldi	r24, 0x07	; 7
    17be:	28 9f       	mul	r18, r24
    17c0:	20 01       	movw	r4, r0
    17c2:	11 24       	eor	r1, r1
    17c4:	40 e9       	ldi	r20, 0x90	; 144
    17c6:	53 e0       	ldi	r21, 0x03	; 3
    17c8:	44 0e       	add	r4, r20
    17ca:	55 1e       	adc	r5, r21
    17cc:	42 0c       	add	r4, r2
    17ce:	53 1c       	adc	r5, r3
    17d0:	2f 5f       	subi	r18, 0xFF	; 255
    17d2:	c0 57       	subi	r28, 0x70	; 112
    17d4:	df 4f       	sbci	r29, 0xFF	; 255
    17d6:	a8 81       	ld	r26, Y
    17d8:	b9 81       	ldd	r27, Y+1	; 0x01
    17da:	c0 59       	subi	r28, 0x90	; 144
    17dc:	d0 40       	sbci	r29, 0x00	; 0
    17de:	2c 93       	st	X, r18
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
    17e0:	f2 01       	movw	r30, r4
    17e2:	11 92       	st	Z+, r1
    17e4:	8a 95       	dec	r24
    17e6:	e9 f7       	brne	.-6      	; 0x17e2 <USB_ProcessHIDReport+0x4b8>
					}
				}

				ParserData->UsingReportIDs = true;
    17e8:	e1 e0       	ldi	r30, 0x01	; 1
    17ea:	c2 57       	subi	r28, 0x72	; 114
    17ec:	df 4f       	sbci	r29, 0xFF	; 255
    17ee:	a8 81       	ld	r26, Y
    17f0:	b9 81       	ldd	r27, Y+1	; 0x01
    17f2:	ce 58       	subi	r28, 0x8E	; 142
    17f4:	d0 40       	sbci	r29, 0x00	; 0
    17f6:	ec 93       	st	X, r30

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
    17f8:	d6 01       	movw	r26, r12
    17fa:	5b 96       	adiw	r26, 0x1b	; 27
    17fc:	8c 91       	ld	r24, X
    17fe:	f2 01       	movw	r30, r4
    1800:	80 83       	st	Z, r24
    1802:	49 c1       	rjmp	.+658    	; 0x1a96 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
    1804:	ed 96       	adiw	r28, 0x3d	; 61
    1806:	ff ad       	ldd	r31, Y+63	; 0x3f
    1808:	ed 97       	sbiw	r28, 0x3d	; 61
    180a:	f8 30       	cpi	r31, 0x08	; 8
    180c:	11 f4       	brne	.+4      	; 0x1812 <USB_ProcessHIDReport+0x4e8>
    180e:	86 e0       	ldi	r24, 0x06	; 6
    1810:	6a c1       	rjmp	.+724    	; 0x1ae6 <USB_ProcessHIDReport+0x7bc>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
    1812:	ed 96       	adiw	r28, 0x3d	; 61
    1814:	2f ad       	ldd	r18, Y+63	; 0x3f
    1816:	ed 97       	sbiw	r28, 0x3d	; 61
    1818:	e2 2f       	mov	r30, r18
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	ee 0f       	add	r30, r30
    181e:	ff 1f       	adc	r31, r31
    1820:	41 e0       	ldi	r20, 0x01	; 1
    1822:	50 e0       	ldi	r21, 0x00	; 0
    1824:	4c 0f       	add	r20, r28
    1826:	5d 1f       	adc	r21, r29
    1828:	e4 0f       	add	r30, r20
    182a:	f5 1f       	adc	r31, r21
    182c:	f1 82       	std	Z+1, r15	; 0x01
    182e:	e0 82       	st	Z, r14
    1830:	2f 5f       	subi	r18, 0xFF	; 255
    1832:	ed 96       	adiw	r28, 0x3d	; 61
    1834:	2f af       	std	Y+63, r18	; 0x3f
    1836:	ed 97       	sbiw	r28, 0x3d	; 61
    1838:	2e c1       	rjmp	.+604    	; 0x1a96 <USB_ProcessHIDReport+0x76c>
				break;
    183a:	f5 01       	movw	r30, r10
    183c:	eb 96       	adiw	r28, 0x3b	; 59
    183e:	ec ae       	std	Y+60, r14	; 0x3c
    1840:	fd ae       	std	Y+61, r15	; 0x3d
    1842:	0e af       	std	Y+62, r16	; 0x3e
    1844:	1f af       	std	Y+63, r17	; 0x3f
    1846:	eb 97       	sbiw	r28, 0x3b	; 59
    1848:	27 c1       	rjmp	.+590    	; 0x1a98 <USB_ProcessHIDReport+0x76e>
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
    184a:	a1 14       	cp	r10, r1
    184c:	b1 04       	cpc	r11, r1
    184e:	29 f4       	brne	.+10     	; 0x185a <USB_ProcessHIDReport+0x530>
    1850:	e7 96       	adiw	r28, 0x37	; 55
    1852:	ee ad       	ldd	r30, Y+62	; 0x3e
    1854:	ff ad       	ldd	r31, Y+63	; 0x3f
    1856:	e7 97       	sbiw	r28, 0x37	; 55
    1858:	15 c0       	rjmp	.+42     	; 0x1884 <USB_ProcessHIDReport+0x55a>
    185a:	e5 96       	adiw	r28, 0x35	; 53
    185c:	ee ad       	ldd	r30, Y+62	; 0x3e
    185e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1860:	e5 97       	sbiw	r28, 0x35	; 53
    1862:	0a c0       	rjmp	.+20     	; 0x1878 <USB_ProcessHIDReport+0x54e>

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
    1864:	ef 96       	adiw	r28, 0x3f	; 63
    1866:	8e ad       	ldd	r24, Y+62	; 0x3e
    1868:	9f ad       	ldd	r25, Y+63	; 0x3f
    186a:	ef 97       	sbiw	r28, 0x3f	; 63
    186c:	e8 17       	cp	r30, r24
    186e:	f9 07       	cpc	r31, r25
    1870:	11 f4       	brne	.+4      	; 0x1876 <USB_ProcessHIDReport+0x54c>
    1872:	85 e0       	ldi	r24, 0x05	; 5
    1874:	38 c1       	rjmp	.+624    	; 0x1ae6 <USB_ProcessHIDReport+0x7bc>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
    1876:	37 96       	adiw	r30, 0x07	; 7
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
    1878:	85 81       	ldd	r24, Z+5	; 0x05
    187a:	96 81       	ldd	r25, Z+6	; 0x06
    187c:	89 2b       	or	r24, r25
    187e:	91 f7       	brne	.-28     	; 0x1864 <USB_ProcessHIDReport+0x53a>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
    1880:	b6 82       	std	Z+6, r11	; 0x06
    1882:	a5 82       	std	Z+5, r10	; 0x05
				}

				CurrCollectionPath->Type       = ReportItemData;
    1884:	e0 82       	st	Z, r14
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
    1886:	d6 01       	movw	r26, r12
    1888:	11 96       	adiw	r26, 0x01	; 1
    188a:	8d 91       	ld	r24, X+
    188c:	9c 91       	ld	r25, X
    188e:	12 97       	sbiw	r26, 0x02	; 2
    1890:	92 83       	std	Z+2, r25	; 0x02
    1892:	81 83       	std	Z+1, r24	; 0x01

				if (UsageListSize)
    1894:	ed 96       	adiw	r28, 0x3d	; 61
    1896:	bf ad       	ldd	r27, Y+63	; 0x3f
    1898:	ed 97       	sbiw	r28, 0x3d	; 61
    189a:	bb 23       	and	r27, r27
    189c:	09 f1       	breq	.+66     	; 0x18e0 <USB_ProcessHIDReport+0x5b6>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	9a 81       	ldd	r25, Y+2	; 0x02
    18a2:	94 83       	std	Z+4, r25	; 0x04
    18a4:	83 83       	std	Z+3, r24	; 0x03
    18a6:	de 01       	movw	r26, r28
    18a8:	11 96       	adiw	r26, 0x01	; 1

					for (uint8_t i = 0; i < UsageListSize; i++)
    18aa:	ed 96       	adiw	r28, 0x3d	; 61
    18ac:	4f ad       	ldd	r20, Y+63	; 0x3f
    18ae:	ed 97       	sbiw	r28, 0x3d	; 61
    18b0:	24 2f       	mov	r18, r20
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	22 0f       	add	r18, r18
    18b6:	33 1f       	adc	r19, r19
    18b8:	2a 0f       	add	r18, r26
    18ba:	3b 1f       	adc	r19, r27
    18bc:	06 c0       	rjmp	.+12     	; 0x18ca <USB_ProcessHIDReport+0x5a0>
					  UsageList[i] = UsageList[i + 1];
    18be:	12 96       	adiw	r26, 0x02	; 2
    18c0:	8d 91       	ld	r24, X+
    18c2:	9c 91       	ld	r25, X
    18c4:	13 97       	sbiw	r26, 0x03	; 3
    18c6:	8d 93       	st	X+, r24
    18c8:	9d 93       	st	X+, r25

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
    18ca:	a2 17       	cp	r26, r18
    18cc:	b3 07       	cpc	r27, r19
    18ce:	b9 f7       	brne	.-18     	; 0x18be <USB_ProcessHIDReport+0x594>
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
    18d0:	ed 96       	adiw	r28, 0x3d	; 61
    18d2:	9f ad       	ldd	r25, Y+63	; 0x3f
    18d4:	ed 97       	sbiw	r28, 0x3d	; 61
    18d6:	91 50       	subi	r25, 0x01	; 1
    18d8:	ed 96       	adiw	r28, 0x3d	; 61
    18da:	9f af       	std	Y+63, r25	; 0x3f
    18dc:	ed 97       	sbiw	r28, 0x3d	; 61
    18de:	dc c0       	rjmp	.+440    	; 0x1a98 <USB_ProcessHIDReport+0x76e>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
    18e0:	eb 96       	adiw	r28, 0x3b	; 59
    18e2:	2c ad       	ldd	r18, Y+60	; 0x3c
    18e4:	3d ad       	ldd	r19, Y+61	; 0x3d
    18e6:	4e ad       	ldd	r20, Y+62	; 0x3e
    18e8:	5f ad       	ldd	r21, Y+63	; 0x3f
    18ea:	eb 97       	sbiw	r28, 0x3b	; 59
    18ec:	26 15       	cp	r18, r6
    18ee:	37 05       	cpc	r19, r7
    18f0:	48 05       	cpc	r20, r8
    18f2:	59 05       	cpc	r21, r9
    18f4:	08 f4       	brcc	.+2      	; 0x18f8 <USB_ProcessHIDReport+0x5ce>
    18f6:	d0 c0       	rjmp	.+416    	; 0x1a98 <USB_ProcessHIDReport+0x76e>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
    18f8:	74 82       	std	Z+4, r7	; 0x04
    18fa:	63 82       	std	Z+3, r6	; 0x03
    18fc:	08 94       	sec
    18fe:	61 1c       	adc	r6, r1
    1900:	71 1c       	adc	r7, r1
    1902:	81 1c       	adc	r8, r1
    1904:	91 1c       	adc	r9, r1
    1906:	c8 c0       	rjmp	.+400    	; 0x1a98 <USB_ProcessHIDReport+0x76e>
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
    1908:	a1 14       	cp	r10, r1
    190a:	b1 04       	cpc	r11, r1
    190c:	11 f4       	brne	.+4      	; 0x1912 <USB_ProcessHIDReport+0x5e8>
    190e:	84 e0       	ldi	r24, 0x04	; 4
    1910:	ea c0       	rjmp	.+468    	; 0x1ae6 <USB_ProcessHIDReport+0x7bc>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
    1912:	d5 01       	movw	r26, r10
    1914:	15 96       	adiw	r26, 0x05	; 5
    1916:	ed 91       	ld	r30, X+
    1918:	fc 91       	ld	r31, X
    191a:	16 97       	sbiw	r26, 0x06	; 6
    191c:	bd c0       	rjmp	.+378    	; 0x1a98 <USB_ProcessHIDReport+0x76e>
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
    191e:	de 01       	movw	r26, r28
    1920:	59 96       	adiw	r26, 0x19	; 25
    1922:	cb 57       	subi	r28, 0x7B	; 123
    1924:	df 4f       	sbci	r29, 0xFF	; 255
    1926:	88 81       	ld	r24, Y
    1928:	c5 58       	subi	r28, 0x85	; 133
    192a:	d0 40       	sbci	r29, 0x00	; 0
    192c:	ca 57       	subi	r28, 0x7A	; 122
    192e:	df 4f       	sbci	r29, 0xFF	; 255
    1930:	98 81       	ld	r25, Y
    1932:	c6 58       	subi	r28, 0x86	; 134
    1934:	d0 40       	sbci	r29, 0x00	; 0
    1936:	9c 01       	movw	r18, r24
    1938:	f9 01       	movw	r30, r18
    193a:	8a e1       	ldi	r24, 0x1A	; 26
    193c:	01 90       	ld	r0, Z+
    193e:	0d 92       	st	X+, r0
    1940:	81 50       	subi	r24, 0x01	; 1
    1942:	e1 f7       	brne	.-8      	; 0x193c <USB_ProcessHIDReport+0x612>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
    1944:	fd 8a       	std	Y+21, r15	; 0x15
    1946:	ec 8a       	std	Y+20, r14	; 0x14
					NewReportItem.CollectionPath = CurrCollectionPath;
    1948:	b8 8e       	std	Y+24, r11	; 0x18
    194a:	af 8a       	std	Y+23, r10	; 0x17
					NewReportItem.ReportID       = CurrStateTable->ReportID;
    194c:	f6 01       	movw	r30, r12
    194e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1950:	8e 8b       	std	Y+22, r24	; 0x16

					if (UsageListSize)
    1952:	ed 96       	adiw	r28, 0x3d	; 61
    1954:	ff ad       	ldd	r31, Y+63	; 0x3f
    1956:	ed 97       	sbiw	r28, 0x3d	; 61
    1958:	ff 23       	and	r31, r31
    195a:	f9 f0       	breq	.+62     	; 0x199a <USB_ProcessHIDReport+0x670>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
    195c:	49 81       	ldd	r20, Y+1	; 0x01
    195e:	5a 81       	ldd	r21, Y+2	; 0x02
    1960:	fe 01       	movw	r30, r28
    1962:	31 96       	adiw	r30, 0x01	; 1

						for (uint8_t i = 0; i < UsageListSize; i++)
    1964:	ed 96       	adiw	r28, 0x3d	; 61
    1966:	8f ad       	ldd	r24, Y+63	; 0x3f
    1968:	ed 97       	sbiw	r28, 0x3d	; 61
    196a:	28 2f       	mov	r18, r24
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	22 0f       	add	r18, r18
    1970:	33 1f       	adc	r19, r19
    1972:	2e 0f       	add	r18, r30
    1974:	3f 1f       	adc	r19, r31
    1976:	04 c0       	rjmp	.+8      	; 0x1980 <USB_ProcessHIDReport+0x656>
						  UsageList[i] = UsageList[i + 1];
    1978:	82 81       	ldd	r24, Z+2	; 0x02
    197a:	93 81       	ldd	r25, Z+3	; 0x03
    197c:	81 93       	st	Z+, r24
    197e:	91 93       	st	Z+, r25

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
    1980:	e2 17       	cp	r30, r18
    1982:	f3 07       	cpc	r31, r19
    1984:	c9 f7       	brne	.-14     	; 0x1978 <USB_ProcessHIDReport+0x64e>
					NewReportItem.CollectionPath = CurrCollectionPath;
					NewReportItem.ReportID       = CurrStateTable->ReportID;

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
    1986:	5d 8f       	std	Y+29, r21	; 0x1d
    1988:	4c 8f       	std	Y+28, r20	; 0x1c

						for (uint8_t i = 0; i < UsageListSize; i++)
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
    198a:	ed 96       	adiw	r28, 0x3d	; 61
    198c:	bf ad       	ldd	r27, Y+63	; 0x3f
    198e:	ed 97       	sbiw	r28, 0x3d	; 61
    1990:	b1 50       	subi	r27, 0x01	; 1
    1992:	ed 96       	adiw	r28, 0x3d	; 61
    1994:	bf af       	std	Y+63, r27	; 0x3f
    1996:	ed 97       	sbiw	r28, 0x3d	; 61
    1998:	12 c0       	rjmp	.+36     	; 0x19be <USB_ProcessHIDReport+0x694>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
    199a:	eb 96       	adiw	r28, 0x3b	; 59
    199c:	2c ad       	ldd	r18, Y+60	; 0x3c
    199e:	3d ad       	ldd	r19, Y+61	; 0x3d
    19a0:	4e ad       	ldd	r20, Y+62	; 0x3e
    19a2:	5f ad       	ldd	r21, Y+63	; 0x3f
    19a4:	eb 97       	sbiw	r28, 0x3b	; 59
    19a6:	26 15       	cp	r18, r6
    19a8:	37 05       	cpc	r19, r7
    19aa:	48 05       	cpc	r20, r8
    19ac:	59 05       	cpc	r21, r9
    19ae:	38 f0       	brcs	.+14     	; 0x19be <USB_ProcessHIDReport+0x694>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
    19b0:	7d 8e       	std	Y+29, r7	; 0x1d
    19b2:	6c 8e       	std	Y+28, r6	; 0x1c
    19b4:	08 94       	sec
    19b6:	61 1c       	adc	r6, r1
    19b8:	71 1c       	adc	r7, r1
    19ba:	81 1c       	adc	r8, r1
    19bc:	91 1c       	adc	r9, r1
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
    19be:	c9 57       	subi	r28, 0x79	; 121
    19c0:	df 4f       	sbci	r29, 0xFF	; 255
    19c2:	38 81       	ld	r19, Y
    19c4:	c7 58       	subi	r28, 0x87	; 135
    19c6:	d0 40       	sbci	r29, 0x00	; 0
    19c8:	30 38       	cpi	r19, 0x80	; 128
    19ca:	11 f4       	brne	.+4      	; 0x19d0 <USB_ProcessHIDReport+0x6a6>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
    19cc:	1b 8a       	std	Y+19, r1	; 0x13
    19ce:	0c c0       	rjmp	.+24     	; 0x19e8 <USB_ProcessHIDReport+0x6be>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
    19d0:	c9 57       	subi	r28, 0x79	; 121
    19d2:	df 4f       	sbci	r29, 0xFF	; 255
    19d4:	48 81       	ld	r20, Y
    19d6:	c7 58       	subi	r28, 0x87	; 135
    19d8:	d0 40       	sbci	r29, 0x00	; 0
    19da:	40 39       	cpi	r20, 0x90	; 144
    19dc:	19 f4       	brne	.+6      	; 0x19e4 <USB_ProcessHIDReport+0x6ba>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
    19de:	51 e0       	ldi	r21, 0x01	; 1
    19e0:	5b 8b       	std	Y+19, r21	; 0x13
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <USB_ProcessHIDReport+0x6be>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
    19e4:	82 e0       	ldi	r24, 0x02	; 2
    19e6:	8b 8b       	std	Y+19, r24	; 0x13

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
    19e8:	eb 89       	ldd	r30, Y+19	; 0x13
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	ee 0f       	add	r30, r30
    19ee:	ff 1f       	adc	r31, r31
    19f0:	e4 0d       	add	r30, r4
    19f2:	f5 1d       	adc	r31, r5
    19f4:	81 81       	ldd	r24, Z+1	; 0x01
    19f6:	92 81       	ldd	r25, Z+2	; 0x02
    19f8:	9a 8b       	std	Y+18, r25	; 0x12
    19fa:	89 8b       	std	Y+17, r24	; 0x11

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
    19fc:	d6 01       	movw	r26, r12
    19fe:	2c 91       	ld	r18, X
    1a00:	81 81       	ldd	r24, Z+1	; 0x01
    1a02:	92 81       	ldd	r25, Z+2	; 0x02
    1a04:	82 0f       	add	r24, r18
    1a06:	91 1d       	adc	r25, r1
    1a08:	92 83       	std	Z+2, r25	; 0x02
    1a0a:	81 83       	std	Z+1, r24	; 0x01

					if (ParserData->LargestReportSizeBits < NewReportItem.BitOffset)
    1a0c:	29 89       	ldd	r18, Y+17	; 0x11
    1a0e:	3a 89       	ldd	r19, Y+18	; 0x12
    1a10:	c6 57       	subi	r28, 0x76	; 118
    1a12:	df 4f       	sbci	r29, 0xFF	; 255
    1a14:	e8 81       	ld	r30, Y
    1a16:	f9 81       	ldd	r31, Y+1	; 0x01
    1a18:	ca 58       	subi	r28, 0x8A	; 138
    1a1a:	d0 40       	sbci	r29, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	91 81       	ldd	r25, Z+1	; 0x01
    1a20:	82 17       	cp	r24, r18
    1a22:	93 07       	cpc	r25, r19
    1a24:	10 f4       	brcc	.+4      	; 0x1a2a <USB_ProcessHIDReport+0x700>
					  ParserData->LargestReportSizeBits = NewReportItem.BitOffset;
    1a26:	31 83       	std	Z+1, r19	; 0x01
    1a28:	20 83       	st	Z, r18

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    1a2a:	c8 57       	subi	r28, 0x78	; 120
    1a2c:	df 4f       	sbci	r29, 0xFF	; 255
    1a2e:	28 81       	ld	r18, Y
    1a30:	39 81       	ldd	r19, Y+1	; 0x01
    1a32:	c8 58       	subi	r28, 0x88	; 136
    1a34:	d0 40       	sbci	r29, 0x00	; 0
    1a36:	23 2b       	or	r18, r19
    1a38:	f1 f4       	brne	.+60     	; 0x1a76 <USB_ProcessHIDReport+0x74c>
    1a3a:	ce 01       	movw	r24, r28
    1a3c:	41 96       	adiw	r24, 0x11	; 17
    1a3e:	0e 94 3f 01 	call	0x27e	; 0x27e <CALLBACK_HIDParser_FilterHIDReportItem>
    1a42:	88 23       	and	r24, r24
    1a44:	c1 f0       	breq	.+48     	; 0x1a76 <USB_ProcessHIDReport+0x74c>
					{
						if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
    1a46:	d1 01       	movw	r26, r2
    1a48:	8c 91       	ld	r24, X
    1a4a:	84 31       	cpi	r24, 0x14	; 20
    1a4c:	11 f4       	brne	.+4      	; 0x1a52 <USB_ProcessHIDReport+0x728>
    1a4e:	83 e0       	ldi	r24, 0x03	; 3
    1a50:	4a c0       	rjmp	.+148    	; 0x1ae6 <USB_ProcessHIDReport+0x7bc>
						  return HID_PARSE_InsufficientReportItems;

						memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
    1a52:	ba e2       	ldi	r27, 0x2A	; 42
    1a54:	8b 9f       	mul	r24, r27
    1a56:	f0 01       	movw	r30, r0
    1a58:	11 24       	eor	r1, r1
    1a5a:	31 96       	adiw	r30, 0x01	; 1
    1a5c:	e2 0d       	add	r30, r2
    1a5e:	f3 1d       	adc	r31, r3
    1a60:	de 01       	movw	r26, r28
    1a62:	51 96       	adiw	r26, 0x11	; 17
    1a64:	8a e2       	ldi	r24, 0x2A	; 42
    1a66:	0d 90       	ld	r0, X+
    1a68:	01 92       	st	Z+, r0
    1a6a:	81 50       	subi	r24, 0x01	; 1
    1a6c:	e1 f7       	brne	.-8      	; 0x1a66 <USB_ProcessHIDReport+0x73c>
						       &NewReportItem, sizeof(HID_ReportItem_t));

						ParserData->TotalReportItems++;
    1a6e:	f1 01       	movw	r30, r2
    1a70:	80 81       	ld	r24, Z
    1a72:	8f 5f       	subi	r24, 0xFF	; 255
    1a74:	80 83       	st	Z, r24
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
    1a76:	ec 96       	adiw	r28, 0x3c	; 60
    1a78:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a7a:	ec 97       	sbiw	r28, 0x3c	; 60
    1a7c:	ff 5f       	subi	r31, 0xFF	; 255
    1a7e:	ec 96       	adiw	r28, 0x3c	; 60
    1a80:	ff af       	std	Y+63, r31	; 0x3f
    1a82:	ec 97       	sbiw	r28, 0x3c	; 60
    1a84:	d6 01       	movw	r26, r12
    1a86:	5a 96       	adiw	r26, 0x1a	; 26
    1a88:	8c 91       	ld	r24, X
    1a8a:	ec 96       	adiw	r28, 0x3c	; 60
    1a8c:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a8e:	ec 97       	sbiw	r28, 0x3c	; 60
    1a90:	b8 17       	cp	r27, r24
    1a92:	08 f4       	brcc	.+2      	; 0x1a96 <USB_ProcessHIDReport+0x76c>
    1a94:	44 cf       	rjmp	.-376    	; 0x191e <USB_ProcessHIDReport+0x5f4>
    1a96:	f5 01       	movw	r30, r10
				}

				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
    1a98:	c1 58       	subi	r28, 0x81	; 129
    1a9a:	df 4f       	sbci	r29, 0xFF	; 255
    1a9c:	28 81       	ld	r18, Y
    1a9e:	39 81       	ldd	r19, Y+1	; 0x01
    1aa0:	cf 57       	subi	r28, 0x7F	; 127
    1aa2:	d0 40       	sbci	r29, 0x00	; 0
    1aa4:	2c 70       	andi	r18, 0x0C	; 12
    1aa6:	30 70       	andi	r19, 0x00	; 0
    1aa8:	23 2b       	or	r18, r19
    1aaa:	61 f4       	brne	.+24     	; 0x1ac4 <USB_ProcessHIDReport+0x79a>
    1aac:	ed 96       	adiw	r28, 0x3d	; 61
    1aae:	1f ae       	std	Y+63, r1	; 0x3f
    1ab0:	ed 97       	sbiw	r28, 0x3d	; 61
    1ab2:	eb 96       	adiw	r28, 0x3b	; 59
    1ab4:	1c ae       	std	Y+60, r1	; 0x3c
    1ab6:	1d ae       	std	Y+61, r1	; 0x3d
    1ab8:	1e ae       	std	Y+62, r1	; 0x3e
    1aba:	1f ae       	std	Y+63, r1	; 0x3f
    1abc:	eb 97       	sbiw	r28, 0x3b	; 59
    1abe:	66 24       	eor	r6, r6
    1ac0:	77 24       	eor	r7, r7
    1ac2:	43 01       	movw	r8, r6
    1ac4:	5f 01       	movw	r10, r30
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
    1ac6:	cd 57       	subi	r28, 0x7D	; 125
    1ac8:	df 4f       	sbci	r29, 0xFF	; 255
    1aca:	48 81       	ld	r20, Y
    1acc:	59 81       	ldd	r21, Y+1	; 0x01
    1ace:	c3 58       	subi	r28, 0x83	; 131
    1ad0:	d0 40       	sbci	r29, 0x00	; 0
    1ad2:	45 2b       	or	r20, r21
    1ad4:	09 f0       	breq	.+2      	; 0x1ad8 <USB_ProcessHIDReport+0x7ae>
    1ad6:	c5 cc       	rjmp	.-1654   	; 0x1462 <USB_ProcessHIDReport+0x138>
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
    1ad8:	d1 01       	movw	r26, r2
    1ada:	8c 91       	ld	r24, X
    1adc:	88 23       	and	r24, r24
    1ade:	11 f0       	breq	.+4      	; 0x1ae4 <USB_ProcessHIDReport+0x7ba>
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	01 c0       	rjmp	.+2      	; 0x1ae6 <USB_ProcessHIDReport+0x7bc>
    1ae4:	88 e0       	ldi	r24, 0x08	; 8
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
    1ae6:	cb 56       	subi	r28, 0x6B	; 107
    1ae8:	df 4f       	sbci	r29, 0xFF	; 255
    1aea:	0f b6       	in	r0, 0x3f	; 63
    1aec:	f8 94       	cli
    1aee:	de bf       	out	0x3e, r29	; 62
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	cd bf       	out	0x3d, r28	; 61
    1af4:	cf 91       	pop	r28
    1af6:	df 91       	pop	r29
    1af8:	1f 91       	pop	r17
    1afa:	0f 91       	pop	r16
    1afc:	ff 90       	pop	r15
    1afe:	ef 90       	pop	r14
    1b00:	df 90       	pop	r13
    1b02:	cf 90       	pop	r12
    1b04:	bf 90       	pop	r11
    1b06:	af 90       	pop	r10
    1b08:	9f 90       	pop	r9
    1b0a:	8f 90       	pop	r8
    1b0c:	7f 90       	pop	r7
    1b0e:	6f 90       	pop	r6
    1b10:	5f 90       	pop	r5
    1b12:	4f 90       	pop	r4
    1b14:	3f 90       	pop	r3
    1b16:	2f 90       	pop	r2
    1b18:	08 95       	ret

00001b1a <DCOMP_HID_Host_NextHIDInterface>:

	return HID_ENUMERROR_NoError;
}

static uint8_t DCOMP_HID_Host_NextHIDInterface(void* const CurrentDescriptor)
{
    1b1a:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1b1c:	81 81       	ldd	r24, Z+1	; 0x01
    1b1e:	84 30       	cpi	r24, 0x04	; 4
    1b20:	29 f4       	brne	.+10     	; 0x1b2c <DCOMP_HID_Host_NextHIDInterface+0x12>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
    1b22:	85 81       	ldd	r24, Z+5	; 0x05
    1b24:	83 30       	cpi	r24, 0x03	; 3
    1b26:	11 f4       	brne	.+4      	; 0x1b2c <DCOMP_HID_Host_NextHIDInterface+0x12>
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	08 95       	ret
    1b2c:	82 e0       	ldi	r24, 0x02	; 2
		  return DESCRIPTOR_SEARCH_Found;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1b2e:	08 95       	ret

00001b30 <DCOMP_HID_Host_NextHIDDescriptor>:

static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
    1b30:	fc 01       	movw	r30, r24
    1b32:	81 81       	ldd	r24, Z+1	; 0x01
    1b34:	81 32       	cpi	r24, 0x21	; 33
    1b36:	11 f4       	brne	.+4      	; 0x1b3c <DCOMP_HID_Host_NextHIDDescriptor+0xc>
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	08 95       	ret
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
    1b3c:	84 30       	cpi	r24, 0x04	; 4
    1b3e:	11 f0       	breq	.+4      	; 0x1b44 <DCOMP_HID_Host_NextHIDDescriptor+0x14>
    1b40:	82 e0       	ldi	r24, 0x02	; 2
    1b42:	08 95       	ret
    1b44:	81 e0       	ldi	r24, 0x01	; 1
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}
    1b46:	08 95       	ret

00001b48 <HID_Host_IsReportReceived>:
		return USB_Host_SendControlRequest(Buffer);
	}
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    1b48:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1b4a:	80 91 0a 05 	lds	r24, 0x050A
    1b4e:	8b 30       	cpi	r24, 0x0B	; 11
    1b50:	a1 f4       	brne	.+40     	; 0x1b7a <HID_Host_IsReportReceived+0x32>
    1b52:	87 81       	ldd	r24, Z+7	; 0x07
    1b54:	88 23       	and	r24, r24
    1b56:	89 f0       	breq	.+34     	; 0x1b7a <HID_Host_IsReportReceived+0x32>
	  return false;

	bool ReportReceived;

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipeNumber);
    1b58:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1b5a:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1b5e:	80 91 a9 00 	lds	r24, 0x00A9
    1b62:	8f 7b       	andi	r24, 0xBF	; 191
    1b64:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1b68:	90 91 a6 00 	lds	r25, 0x00A6
    1b6c:	91 70       	andi	r25, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1b6e:	80 91 a9 00 	lds	r24, 0x00A9
    1b72:	80 64       	ori	r24, 0x40	; 64
    1b74:	80 93 a9 00 	sts	0x00A9, r24
    1b78:	01 c0       	rjmp	.+2      	; 0x1b7c <HID_Host_IsReportReceived+0x34>

	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
}
    1b7c:	89 2f       	mov	r24, r25
    1b7e:	08 95       	ret

00001b80 <HID_Host_SetReportProtocol>:
	return USB_Host_SendControlRequest(NULL);
}

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    1b80:	cf 92       	push	r12
    1b82:	df 92       	push	r13
    1b84:	ef 92       	push	r14
    1b86:	ff 92       	push	r15
    1b88:	0f 93       	push	r16
    1b8a:	1f 93       	push	r17
    1b8c:	df 93       	push	r29
    1b8e:	cf 93       	push	r28
    1b90:	cd b7       	in	r28, 0x3d	; 61
    1b92:	de b7       	in	r29, 0x3e	; 62
    1b94:	8c 01       	movw	r16, r24

	uint8_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    1b96:	cd b6       	in	r12, 0x3d	; 61
    1b98:	de b6       	in	r13, 0x3e	; 62
#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	uint8_t ErrorCode;

	uint8_t HIDReportData[HIDInterfaceInfo->State.HIDReportSize];
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	50 96       	adiw	r26, 0x10	; 16
    1b9e:	4d 91       	ld	r20, X+
    1ba0:	5c 91       	ld	r21, X
    1ba2:	51 97       	sbiw	r26, 0x11	; 17
    1ba4:	ed b7       	in	r30, 0x3d	; 61
    1ba6:	fe b7       	in	r31, 0x3e	; 62
    1ba8:	e4 1b       	sub	r30, r20
    1baa:	f5 0b       	sbc	r31, r21
    1bac:	0f b6       	in	r0, 0x3f	; 63
    1bae:	f8 94       	cli
    1bb0:	fe bf       	out	0x3e, r31	; 62
    1bb2:	0f be       	out	0x3f, r0	; 63
    1bb4:	ed bf       	out	0x3d, r30	; 61
    1bb6:	2d b7       	in	r18, 0x3d	; 61
    1bb8:	3e b7       	in	r19, 0x3e	; 62
    1bba:	2f 5f       	subi	r18, 0xFF	; 255
    1bbc:	3f 4f       	sbci	r19, 0xFF	; 255

	USB_ControlRequest = (USB_Request_Header_t)
    1bbe:	18 96       	adiw	r26, 0x08	; 8
    1bc0:	6c 91       	ld	r22, X
    1bc2:	81 e8       	ldi	r24, 0x81	; 129
    1bc4:	80 93 02 05 	sts	0x0502, r24
    1bc8:	86 e0       	ldi	r24, 0x06	; 6
    1bca:	80 93 03 05 	sts	0x0503, r24
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	92 e2       	ldi	r25, 0x22	; 34
    1bd2:	90 93 05 05 	sts	0x0505, r25
    1bd6:	80 93 04 05 	sts	0x0504, r24
    1bda:	60 93 06 05 	sts	0x0506, r22
    1bde:	10 92 07 05 	sts	0x0507, r1
    1be2:	50 93 09 05 	sts	0x0509, r21
    1be6:	40 93 08 05 	sts	0x0508, r20
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1bea:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = HIDInterfaceInfo->State.HIDReportSize,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(HIDReportData)) != HOST_SENDCONTROL_Successful)
    1bee:	f2 2e       	mov	r15, r18
    1bf0:	e3 2e       	mov	r14, r19
    1bf2:	c9 01       	movw	r24, r18
    1bf4:	b8 d9       	rcall	.-3216   	; 0xf66 <USB_Host_SendControlRequest>
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	88 23       	and	r24, r24
    1bfa:	09 f0       	breq	.+2      	; 0x1bfe <HID_Host_SetReportProtocol+0x7e>
    1bfc:	4f c0       	rjmp	.+158    	; 0x1c9c <HID_Host_SetReportProtocol+0x11c>
	  return ErrorCode;

	if (HIDInterfaceInfo->State.UsingBootProtocol)
    1bfe:	d8 01       	movw	r26, r16
    1c00:	1f 96       	adiw	r26, 0x0f	; 15
    1c02:	8c 91       	ld	r24, X
    1c04:	1f 97       	sbiw	r26, 0x0f	; 15
    1c06:	88 23       	and	r24, r24
    1c08:	f1 f0       	breq	.+60     	; 0x1c46 <HID_Host_SetReportProtocol+0xc6>
	{
		USB_ControlRequest = (USB_Request_Header_t)
    1c0a:	18 96       	adiw	r26, 0x08	; 8
    1c0c:	2c 91       	ld	r18, X
    1c0e:	81 e2       	ldi	r24, 0x21	; 33
    1c10:	80 93 02 05 	sts	0x0502, r24
    1c14:	8b e0       	ldi	r24, 0x0B	; 11
    1c16:	80 93 03 05 	sts	0x0503, r24
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	90 93 05 05 	sts	0x0505, r25
    1c22:	80 93 04 05 	sts	0x0504, r24
    1c26:	20 93 06 05 	sts	0x0506, r18
    1c2a:	10 92 07 05 	sts	0x0507, r1
    1c2e:	10 92 09 05 	sts	0x0509, r1
    1c32:	10 92 08 05 	sts	0x0508, r1
				.wValue        = 1,
				.wIndex        = HIDInterfaceInfo->State.InterfaceNumber,
				.wLength       = 0,
			};

		if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	95 d9       	rcall	.-3286   	; 0xf66 <USB_Host_SendControlRequest>
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	88 23       	and	r24, r24
    1c40:	69 f5       	brne	.+90     	; 0x1c9c <HID_Host_SetReportProtocol+0x11c>
		  return ErrorCode;

		HIDInterfaceInfo->State.UsingBootProtocol = false;
    1c42:	f8 01       	movw	r30, r16
    1c44:	17 86       	std	Z+15, r1	; 0x0f
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
    1c46:	d8 01       	movw	r26, r16
    1c48:	15 96       	adiw	r26, 0x05	; 5
    1c4a:	4d 91       	ld	r20, X+
    1c4c:	5c 91       	ld	r21, X
    1c4e:	16 97       	sbiw	r26, 0x06	; 6
    1c50:	41 15       	cp	r20, r1
    1c52:	51 05       	cpc	r21, r1
    1c54:	11 f4       	brne	.+4      	; 0x1c5a <HID_Host_SetReportProtocol+0xda>
    1c56:	20 e8       	ldi	r18, 0x80	; 128
    1c58:	21 c0       	rjmp	.+66     	; 0x1c9c <HID_Host_SetReportProtocol+0x11c>
	  return HID_ERROR_LOGICAL;

	if ((ErrorCode = USB_ProcessHIDReport(HIDReportData, HIDInterfaceInfo->State.HIDReportSize,
    1c5a:	f8 01       	movw	r30, r16
    1c5c:	60 89       	ldd	r22, Z+16	; 0x10
    1c5e:	71 89       	ldd	r23, Z+17	; 0x11
    1c60:	8f 2d       	mov	r24, r15
    1c62:	9e 2d       	mov	r25, r14
    1c64:	62 db       	rcall	.-2364   	; 0x132a <USB_ProcessHIDReport>
    1c66:	28 2f       	mov	r18, r24
    1c68:	88 23       	and	r24, r24
    1c6a:	11 f0       	breq	.+4      	; 0x1c70 <HID_Host_SetReportProtocol+0xf0>
	                                      HIDInterfaceInfo->Config.HIDParserData)) != HID_PARSE_Successful)
	{
		return HID_ERROR_LOGICAL | ErrorCode;
    1c6c:	20 68       	ori	r18, 0x80	; 128
    1c6e:	16 c0       	rjmp	.+44     	; 0x1c9c <HID_Host_SetReportProtocol+0x11c>
	}

	uint8_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
    1c70:	d8 01       	movw	r26, r16
    1c72:	15 96       	adiw	r26, 0x05	; 5
    1c74:	ed 91       	ld	r30, X+
    1c76:	fc 91       	ld	r31, X
    1c78:	16 97       	sbiw	r26, 0x06	; 6
    1c7a:	ea 52       	subi	r30, 0x2A	; 42
    1c7c:	fc 4f       	sbci	r31, 0xFC	; 252
    1c7e:	e0 81       	ld	r30, Z
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	8e 2f       	mov	r24, r30
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	87 70       	andi	r24, 0x07	; 7
    1c88:	90 70       	andi	r25, 0x00	; 0
    1c8a:	89 2b       	or	r24, r25
    1c8c:	09 f0       	breq	.+2      	; 0x1c90 <HID_Host_SetReportProtocol+0x110>
    1c8e:	31 e0       	ldi	r19, 0x01	; 1
    1c90:	e6 95       	lsr	r30
    1c92:	e6 95       	lsr	r30
    1c94:	e6 95       	lsr	r30
    1c96:	3e 0f       	add	r19, r30
    1c98:	f8 01       	movw	r30, r16
    1c9a:	32 8b       	std	Z+18, r19	; 0x12

	return 0;
}
    1c9c:	82 2f       	mov	r24, r18
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	f8 94       	cli
    1ca2:	de be       	out	0x3e, r13	; 62
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	cd be       	out	0x3d, r12	; 61
    1ca8:	cf 91       	pop	r28
    1caa:	df 91       	pop	r29
    1cac:	1f 91       	pop	r17
    1cae:	0f 91       	pop	r16
    1cb0:	ff 90       	pop	r15
    1cb2:	ef 90       	pop	r14
    1cb4:	df 90       	pop	r13
    1cb6:	cf 90       	pop	r12
    1cb8:	08 95       	ret

00001cba <HID_Host_ReceiveReport>:
}
#endif

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
    1cbe:	dc 01       	movw	r26, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1cc0:	80 91 0a 05 	lds	r24, 0x050A
    1cc4:	8b 30       	cpi	r24, 0x0B	; 11
    1cc6:	09 f0       	breq	.+2      	; 0x1cca <HID_Host_ReceiveReport+0x10>
    1cc8:	40 c0       	rjmp	.+128    	; 0x1d4a <HID_Host_ReceiveReport+0x90>
    1cca:	17 96       	adiw	r26, 0x07	; 7
    1ccc:	8c 91       	ld	r24, X
    1cce:	17 97       	sbiw	r26, 0x07	; 7
    1cd0:	88 23       	and	r24, r24
    1cd2:	d9 f1       	breq	.+118    	; 0x1d4a <HID_Host_ReceiveReport+0x90>
	  return PIPE_READYWAIT_DeviceDisconnected;

	uint8_t ErrorCode;

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipeNumber);
    1cd4:	8c 91       	ld	r24, X
    1cd6:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1cda:	80 91 a9 00 	lds	r24, 0x00A9
    1cde:	8f 7b       	andi	r24, 0xBF	; 191
    1ce0:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Unfreeze();

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;
    1ce4:	eb 01       	movw	r28, r22

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
    1ce6:	1f 96       	adiw	r26, 0x0f	; 15
    1ce8:	8c 91       	ld	r24, X
    1cea:	1f 97       	sbiw	r26, 0x0f	; 15
    1cec:	88 23       	and	r24, r24
    1cee:	b1 f4       	brne	.+44     	; 0x1d1c <HID_Host_ReceiveReport+0x62>
	{
		uint8_t ReportID = 0;

		if (HIDInterfaceInfo->Config.HIDParserData->UsingReportIDs)
    1cf0:	15 96       	adiw	r26, 0x05	; 5
    1cf2:	ed 91       	ld	r30, X+
    1cf4:	fc 91       	ld	r31, X
    1cf6:	16 97       	sbiw	r26, 0x06	; 6
    1cf8:	e8 52       	subi	r30, 0x28	; 40
    1cfa:	fc 4f       	sbci	r31, 0xFC	; 252
    1cfc:	80 81       	ld	r24, Z
    1cfe:	88 23       	and	r24, r24
    1d00:	11 f4       	brne	.+4      	; 0x1d06 <HID_Host_ReceiveReport+0x4c>
    1d02:	60 e0       	ldi	r22, 0x00	; 0
    1d04:	03 c0       	rjmp	.+6      	; 0x1d0c <HID_Host_ReceiveReport+0x52>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1d06:	60 91 af 00 	lds	r22, 0x00AF
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
    1d0a:	69 93       	st	Y+, r22
		}

		ReportSize = USB_GetHIDReportSize(HIDInterfaceInfo->Config.HIDParserData, ReportID, HID_REPORT_ITEM_In);
    1d0c:	15 96       	adiw	r26, 0x05	; 5
    1d0e:	8d 91       	ld	r24, X+
    1d10:	9c 91       	ld	r25, X
    1d12:	16 97       	sbiw	r26, 0x06	; 6
    1d14:	40 e0       	ldi	r20, 0x00	; 0
    1d16:	de da       	rcall	.-2628   	; 0x12d4 <USB_GetHIDReportSize>
    1d18:	bc 01       	movw	r22, r24
    1d1a:	04 c0       	rjmp	.+8      	; 0x1d24 <HID_Host_ReceiveReport+0x6a>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1d1c:	60 91 f6 00 	lds	r22, 0x00F6
    1d20:	70 91 f7 00 	lds	r23, 0x00F7
#endif
	{
		ReportSize = Pipe_BytesInPipe();
	}

	if ((ErrorCode = Pipe_Read_Stream_LE(BufferPos, ReportSize, NULL)) != PIPE_RWSTREAM_NoError)
    1d24:	ce 01       	movw	r24, r28
    1d26:	40 e0       	ldi	r20, 0x00	; 0
    1d28:	50 e0       	ldi	r21, 0x00	; 0
    1d2a:	0e 94 94 06 	call	0xd28	; 0xd28 <Pipe_Read_Stream_LE>
    1d2e:	98 2f       	mov	r25, r24
    1d30:	88 23       	and	r24, r24
    1d32:	61 f4       	brne	.+24     	; 0x1d4c <HID_Host_ReceiveReport+0x92>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1d34:	80 91 a6 00 	lds	r24, 0x00A6
    1d38:	8e 77       	andi	r24, 0x7E	; 126
    1d3a:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1d3e:	80 91 a9 00 	lds	r24, 0x00A9
    1d42:	80 64       	ori	r24, 0x40	; 64
    1d44:	80 93 a9 00 	sts	0x00A9, r24
    1d48:	01 c0       	rjmp	.+2      	; 0x1d4c <HID_Host_ReceiveReport+0x92>
	  return ErrorCode;

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    1d4a:	92 e0       	ldi	r25, 0x02	; 2
}
    1d4c:	89 2f       	mov	r24, r25
    1d4e:	df 91       	pop	r29
    1d50:	cf 91       	pop	r28
    1d52:	08 95       	ret

00001d54 <HID_Host_ConfigurePipes>:
#include "HID.h"

uint8_t HID_Host_ConfigurePipes(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    1d54:	2f 92       	push	r2
    1d56:	3f 92       	push	r3
    1d58:	4f 92       	push	r4
    1d5a:	5f 92       	push	r5
    1d5c:	6f 92       	push	r6
    1d5e:	7f 92       	push	r7
    1d60:	8f 92       	push	r8
    1d62:	9f 92       	push	r9
    1d64:	af 92       	push	r10
    1d66:	bf 92       	push	r11
    1d68:	cf 92       	push	r12
    1d6a:	df 92       	push	r13
    1d6c:	ef 92       	push	r14
    1d6e:	ff 92       	push	r15
    1d70:	0f 93       	push	r16
    1d72:	1f 93       	push	r17
    1d74:	df 93       	push	r29
    1d76:	cf 93       	push	r28
    1d78:	00 d0       	rcall	.+0      	; 0x1d7a <HID_Host_ConfigurePipes+0x26>
    1d7a:	00 d0       	rcall	.+0      	; 0x1d7c <HID_Host_ConfigurePipes+0x28>
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	6c 01       	movw	r12, r24
    1d82:	7a 83       	std	Y+2, r23	; 0x02
    1d84:	69 83       	std	Y+1, r22	; 0x01
    1d86:	5c 83       	std	Y+4, r21	; 0x04
    1d88:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1d8a:	07 96       	adiw	r24, 0x07	; 7
    1d8c:	fc 01       	movw	r30, r24
    1d8e:	8c e0       	ldi	r24, 0x0C	; 12
    1d90:	df 01       	movw	r26, r30
    1d92:	1d 92       	st	X+, r1
    1d94:	8a 95       	dec	r24
    1d96:	e9 f7       	brne	.-6      	; 0x1d92 <HID_Host_ConfigurePipes+0x3e>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1d98:	eb 81       	ldd	r30, Y+3	; 0x03
    1d9a:	fc 81       	ldd	r31, Y+4	; 0x04
    1d9c:	81 81       	ldd	r24, Z+1	; 0x01
    1d9e:	82 30       	cpi	r24, 0x02	; 2
    1da0:	11 f0       	breq	.+4      	; 0x1da6 <HID_Host_ConfigurePipes+0x52>
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	ad c0       	rjmp	.+346    	; 0x1f00 <HID_Host_ConfigurePipes+0x1ac>
    1da6:	66 24       	eor	r6, r6
    1da8:	77 24       	eor	r7, r7
    1daa:	aa 24       	eor	r10, r10
    1dac:	bb 24       	eor	r11, r11
    1dae:	44 24       	eor	r4, r4
    1db0:	55 24       	eor	r5, r5
    1db2:	22 24       	eor	r2, r2
    1db4:	33 24       	eor	r3, r3
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    1db6:	23 e0       	ldi	r18, 0x03	; 3
    1db8:	e2 2e       	mov	r14, r18
    1dba:	f1 2c       	mov	r15, r1
    1dbc:	ec 0e       	add	r14, r28
    1dbe:	fd 1e       	adc	r15, r29
    1dc0:	8e 01       	movw	r16, r28
    1dc2:	0f 5f       	subi	r16, 0xFF	; 255
    1dc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc6:	41 14       	cp	r4, r1
    1dc8:	51 04       	cpc	r5, r1
    1dca:	39 f0       	breq	.+14     	; 0x1dda <HID_Host_ConfigurePipes+0x86>
    1dcc:	c8 01       	movw	r24, r16
    1dce:	b7 01       	movw	r22, r14
    1dd0:	47 e9       	ldi	r20, 0x97	; 151
    1dd2:	5f e0       	ldi	r21, 0x0F	; 15
    1dd4:	00 d8       	rcall	.-4096   	; 0xdd6 <USB_GetNextDescriptorComp>
    1dd6:	88 23       	and	r24, r24
    1dd8:	31 f1       	breq	.+76     	; 0x1e26 <HID_Host_ConfigurePipes+0xd2>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_HID_Host_NextHIDInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (DataINEndpoint || DataOUTEndpoint)
    1dda:	61 14       	cp	r6, r1
    1ddc:	71 04       	cpc	r7, r1
    1dde:	89 f5       	brne	.+98     	; 0x1e42 <HID_Host_ConfigurePipes+0xee>
    1de0:	a1 14       	cp	r10, r1
    1de2:	b1 04       	cpc	r11, r1
    1de4:	71 f5       	brne	.+92     	; 0x1e42 <HID_Host_ConfigurePipes+0xee>
			  break;

			do
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1de6:	c8 01       	movw	r24, r16
    1de8:	b7 01       	movw	r22, r14
    1dea:	4d e8       	ldi	r20, 0x8D	; 141
    1dec:	5d e0       	ldi	r21, 0x0D	; 13
    1dee:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <USB_GetNextDescriptorComp>
    1df2:	88 23       	and	r24, r24
    1df4:	09 f0       	breq	.+2      	; 0x1df8 <HID_Host_ConfigurePipes+0xa4>
    1df6:	83 c0       	rjmp	.+262    	; 0x1efe <HID_Host_ConfigurePipes+0x1aa>
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1df8:	4b 80       	ldd	r4, Y+3	; 0x03
    1dfa:	5c 80       	ldd	r5, Y+4	; 0x04
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));
    1dfc:	f6 01       	movw	r30, r12
    1dfe:	94 81       	ldd	r25, Z+4	; 0x04
    1e00:	99 23       	and	r25, r25
    1e02:	29 f0       	breq	.+10     	; 0x1e0e <HID_Host_ConfigurePipes+0xba>
    1e04:	d2 01       	movw	r26, r4
    1e06:	17 96       	adiw	r26, 0x07	; 7
    1e08:	8c 91       	ld	r24, X
    1e0a:	89 17       	cp	r24, r25
    1e0c:	61 f7       	brne	.-40     	; 0x1de6 <HID_Host_ConfigurePipes+0x92>

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1e0e:	c8 01       	movw	r24, r16
    1e10:	b7 01       	movw	r22, r14
    1e12:	48 e9       	ldi	r20, 0x98	; 152
    1e14:	5d e0       	ldi	r21, 0x0D	; 13
    1e16:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <USB_GetNextDescriptorComp>
    1e1a:	88 23       	and	r24, r24
    1e1c:	09 f0       	breq	.+2      	; 0x1e20 <HID_Host_ConfigurePipes+0xcc>
    1e1e:	6f c0       	rjmp	.+222    	; 0x1efe <HID_Host_ConfigurePipes+0x1aa>
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
			}

			HIDDescriptor = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_HID_Descriptor_HID_t);
    1e20:	2b 80       	ldd	r2, Y+3	; 0x03
    1e22:	3c 80       	ldd	r3, Y+4	; 0x04
    1e24:	d0 cf       	rjmp	.-96     	; 0x1dc6 <HID_Host_ConfigurePipes+0x72>
			DataOUTEndpoint = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1e26:	eb 81       	ldd	r30, Y+3	; 0x03
    1e28:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1e2a:	82 81       	ldd	r24, Z+2	; 0x02
    1e2c:	87 fd       	sbrc	r24, 7
    1e2e:	02 c0       	rjmp	.+4      	; 0x1e34 <HID_Host_ConfigurePipes+0xe0>
    1e30:	5f 01       	movw	r10, r30
    1e32:	01 c0       	rjmp	.+2      	; 0x1e36 <HID_Host_ConfigurePipes+0xe2>
    1e34:	3f 01       	movw	r6, r30
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    1e36:	61 14       	cp	r6, r1
    1e38:	71 04       	cpc	r7, r1
    1e3a:	29 f2       	breq	.-118    	; 0x1dc6 <HID_Host_ConfigurePipes+0x72>
    1e3c:	a1 14       	cp	r10, r1
    1e3e:	b1 04       	cpc	r11, r1
    1e40:	11 f2       	breq	.-124    	; 0x1dc6 <HID_Host_ConfigurePipes+0x72>
    1e42:	99 24       	eor	r9, r9
    1e44:	93 94       	inc	r9
			Type            = EP_TYPE_INTERRUPT;
			DoubleBanked    = HIDInterfaceInfo->Config.DataOUTPipeDoubleBank;
			InterruptPeriod = DataOUTEndpoint->PollingIntervalMS;

			HIDInterfaceInfo->State.DataOUTPipeSize   = DataOUTEndpoint->EndpointSize;
			HIDInterfaceInfo->State.DeviceUsesOUTPipe = true;
    1e46:	88 24       	eor	r8, r8
    1e48:	83 94       	inc	r8
		uint8_t  Token;
		uint8_t  EndpointAddress;
		uint8_t  InterruptPeriod;
		bool     DoubleBanked;

		if (PipeNum == HIDInterfaceInfo->Config.DataINPipeNumber)
    1e4a:	f6 01       	movw	r30, r12
    1e4c:	80 81       	ld	r24, Z
    1e4e:	98 16       	cp	r9, r24
    1e50:	79 f4       	brne	.+30     	; 0x1e70 <HID_Host_ConfigurePipes+0x11c>
		{
			Size            = le16_to_cpu(DataINEndpoint->EndpointSize);
    1e52:	d3 01       	movw	r26, r6
    1e54:	14 96       	adiw	r26, 0x04	; 4
    1e56:	0d 91       	ld	r16, X+
    1e58:	1c 91       	ld	r17, X
    1e5a:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataINEndpoint->EndpointAddress;
    1e5c:	12 96       	adiw	r26, 0x02	; 2
    1e5e:	2c 91       	ld	r18, X
    1e60:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_INTERRUPT;
			DoubleBanked    = HIDInterfaceInfo->Config.DataINPipeDoubleBank;
    1e62:	81 81       	ldd	r24, Z+1	; 0x01
			InterruptPeriod = DataINEndpoint->PollingIntervalMS;
    1e64:	16 96       	adiw	r26, 0x06	; 6
    1e66:	fc 90       	ld	r15, X

			HIDInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    1e68:	12 87       	std	Z+10, r17	; 0x0a
    1e6a:	01 87       	std	Z+9, r16	; 0x09
    1e6c:	40 e1       	ldi	r20, 0x10	; 16
    1e6e:	16 c0       	rjmp	.+44     	; 0x1e9c <HID_Host_ConfigurePipes+0x148>
		}
		else if (PipeNum == HIDInterfaceInfo->Config.DataOUTPipeNumber)
    1e70:	f6 01       	movw	r30, r12
    1e72:	82 81       	ldd	r24, Z+2	; 0x02
    1e74:	98 16       	cp	r9, r24
    1e76:	21 f5       	brne	.+72     	; 0x1ec0 <HID_Host_ConfigurePipes+0x16c>
		{
			if (DataOUTEndpoint == NULL)
    1e78:	a1 14       	cp	r10, r1
    1e7a:	b1 04       	cpc	r11, r1
    1e7c:	09 f1       	breq	.+66     	; 0x1ec0 <HID_Host_ConfigurePipes+0x16c>
			  continue;
		
			Size            = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1e7e:	d5 01       	movw	r26, r10
    1e80:	14 96       	adiw	r26, 0x04	; 4
    1e82:	0d 91       	ld	r16, X+
    1e84:	1c 91       	ld	r17, X
    1e86:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1e88:	12 96       	adiw	r26, 0x02	; 2
    1e8a:	2c 91       	ld	r18, X
    1e8c:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_INTERRUPT;
			DoubleBanked    = HIDInterfaceInfo->Config.DataOUTPipeDoubleBank;
    1e8e:	83 81       	ldd	r24, Z+3	; 0x03
			InterruptPeriod = DataOUTEndpoint->PollingIntervalMS;
    1e90:	16 96       	adiw	r26, 0x06	; 6
    1e92:	fc 90       	ld	r15, X

			HIDInterfaceInfo->State.DataOUTPipeSize   = DataOUTEndpoint->EndpointSize;
    1e94:	14 87       	std	Z+12, r17	; 0x0c
    1e96:	03 87       	std	Z+11, r16	; 0x0b
			HIDInterfaceInfo->State.DeviceUsesOUTPipe = true;
    1e98:	86 86       	std	Z+14, r8	; 0x0e
    1e9a:	40 e2       	ldi	r20, 0x20	; 32
		else
		{
			continue;
		}

		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    1e9c:	88 23       	and	r24, r24
    1e9e:	11 f4       	brne	.+4      	; 0x1ea4 <HID_Host_ConfigurePipes+0x150>
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	01 c0       	rjmp	.+2      	; 0x1ea6 <HID_Host_ConfigurePipes+0x152>
    1ea4:	94 e0       	ldi	r25, 0x04	; 4
    1ea6:	89 2d       	mov	r24, r9
    1ea8:	63 e0       	ldi	r22, 0x03	; 3
    1eaa:	e9 2e       	mov	r14, r25
    1eac:	0e 94 c0 04 	call	0x980	; 0x980 <Pipe_ConfigurePipe>
    1eb0:	88 23       	and	r24, r24
    1eb2:	11 f4       	brne	.+4      	; 0x1eb8 <HID_Host_ConfigurePipes+0x164>
    1eb4:	83 e0       	ldi	r24, 0x03	; 3
    1eb6:	24 c0       	rjmp	.+72     	; 0x1f00 <HID_Host_ConfigurePipes+0x1ac>
		                         DoubleBanked ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE)))
		{
			return HID_ENUMERROR_PipeConfigurationFailed;
		}
		
		if (InterruptPeriod)
    1eb8:	ff 20       	and	r15, r15
    1eba:	11 f0       	breq	.+4      	; 0x1ec0 <HID_Host_ConfigurePipes+0x16c>
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
    1ebc:	f0 92 ad 00 	sts	0x00AD, r15
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    1ec0:	93 94       	inc	r9
    1ec2:	b7 e0       	ldi	r27, 0x07	; 7
    1ec4:	9b 16       	cp	r9, r27
    1ec6:	09 f6       	brne	.-126    	; 0x1e4a <HID_Host_ConfigurePipes+0xf6>
		
		if (InterruptPeriod)
		  Pipe_SetInterruptPeriod(InterruptPeriod);
	}

	HIDInterfaceInfo->State.InterfaceNumber      = HIDInterface->InterfaceNumber;
    1ec8:	f2 01       	movw	r30, r4
    1eca:	82 81       	ldd	r24, Z+2	; 0x02
    1ecc:	d6 01       	movw	r26, r12
    1ece:	18 96       	adiw	r26, 0x08	; 8
    1ed0:	8c 93       	st	X, r24
    1ed2:	18 97       	sbiw	r26, 0x08	; 8
	HIDInterfaceInfo->State.HIDReportSize        = LE16_TO_CPU(HIDDescriptor->HIDReportLength);
    1ed4:	f1 01       	movw	r30, r2
    1ed6:	87 81       	ldd	r24, Z+7	; 0x07
    1ed8:	90 85       	ldd	r25, Z+8	; 0x08
    1eda:	51 96       	adiw	r26, 0x11	; 17
    1edc:	9c 93       	st	X, r25
    1ede:	8e 93       	st	-X, r24
    1ee0:	50 97       	sbiw	r26, 0x10	; 16
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	d2 01       	movw	r26, r4
    1ee6:	16 96       	adiw	r26, 0x06	; 6
    1ee8:	8c 91       	ld	r24, X
    1eea:	81 11       	cpse	r24, r1
    1eec:	91 e0       	ldi	r25, 0x01	; 1
    1eee:	f6 01       	movw	r30, r12
    1ef0:	95 87       	std	Z+13, r25	; 0x0d
	HIDInterfaceInfo->State.LargestReportSize    = 8;
    1ef2:	88 e0       	ldi	r24, 0x08	; 8
    1ef4:	82 8b       	std	Z+18, r24	; 0x12
	HIDInterfaceInfo->State.IsActive             = true;
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	87 83       	std	Z+7, r24	; 0x07
    1efa:	80 e0       	ldi	r24, 0x00	; 0
    1efc:	01 c0       	rjmp	.+2      	; 0x1f00 <HID_Host_ConfigurePipes+0x1ac>

	return HID_ENUMERROR_NoError;
    1efe:	82 e0       	ldi	r24, 0x02	; 2
}
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	cf 91       	pop	r28
    1f0a:	df 91       	pop	r29
    1f0c:	1f 91       	pop	r17
    1f0e:	0f 91       	pop	r16
    1f10:	ff 90       	pop	r15
    1f12:	ef 90       	pop	r14
    1f14:	df 90       	pop	r13
    1f16:	cf 90       	pop	r12
    1f18:	bf 90       	pop	r11
    1f1a:	af 90       	pop	r10
    1f1c:	9f 90       	pop	r9
    1f1e:	8f 90       	pop	r8
    1f20:	7f 90       	pop	r7
    1f22:	6f 90       	pop	r6
    1f24:	5f 90       	pop	r5
    1f26:	4f 90       	pop	r4
    1f28:	3f 90       	pop	r3
    1f2a:	2f 90       	pop	r2
    1f2c:	08 95       	ret

00001f2e <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}

static uint8_t DCOMP_HID_Host_NextHIDInterfaceEndpoint(void* const CurrentDescriptor)
{
    1f2e:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1f30:	81 81       	ldd	r24, Z+1	; 0x01
    1f32:	85 30       	cpi	r24, 0x05	; 5
    1f34:	31 f4       	brne	.+12     	; 0x1f42 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    1f36:	82 81       	ldd	r24, Z+2	; 0x02
    1f38:	0e 94 32 05 	call	0xa64	; 0xa64 <Pipe_IsEndpointBound>
    1f3c:	88 23       	and	r24, r24
    1f3e:	29 f4       	brne	.+10     	; 0x1f4a <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1c>
    1f40:	08 95       	ret
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    1f42:	84 30       	cpi	r24, 0x04	; 4
    1f44:	11 f4       	brne	.+4      	; 0x1f4a <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1c>
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	08 95       	ret
    1f4a:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1f4c:	08 95       	ret

00001f4e <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    1f4e:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1f50:	80 91 c8 00 	lds	r24, 0x00C8
    1f54:	85 ff       	sbrs	r24, 5
    1f56:	fc cf       	rjmp	.-8      	; 0x1f50 <Serial_putchar+0x2>
				UDR1 = DataByte;
    1f58:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	08 95       	ret

00001f62 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1f62:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1f66:	87 fd       	sbrc	r24, 7
    1f68:	03 c0       	rjmp	.+6      	; 0x1f70 <Serial_getchar+0xe>
    1f6a:	2e ef       	ldi	r18, 0xFE	; 254
    1f6c:	3f ef       	ldi	r19, 0xFF	; 255
    1f6e:	0b c0       	rjmp	.+22     	; 0x1f86 <Serial_getchar+0x24>
    1f70:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1f74:	87 fd       	sbrc	r24, 7
    1f76:	03 c0       	rjmp	.+6      	; 0x1f7e <Serial_getchar+0x1c>
    1f78:	2f ef       	ldi	r18, 0xFF	; 255
    1f7a:	3f ef       	ldi	r19, 0xFF	; 255
    1f7c:	04 c0       	rjmp	.+8      	; 0x1f86 <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    1f7e:	80 91 ce 00 	lds	r24, 0x00CE
    1f82:	28 2f       	mov	r18, r24
    1f84:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    1f86:	c9 01       	movw	r24, r18
    1f88:	08 95       	ret

00001f8a <fputc>:
    1f8a:	0f 93       	push	r16
    1f8c:	1f 93       	push	r17
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
    1f92:	8c 01       	movw	r16, r24
    1f94:	eb 01       	movw	r28, r22
    1f96:	8b 81       	ldd	r24, Y+3	; 0x03
    1f98:	81 ff       	sbrs	r24, 1
    1f9a:	1b c0       	rjmp	.+54     	; 0x1fd2 <fputc+0x48>
    1f9c:	82 ff       	sbrs	r24, 2
    1f9e:	0d c0       	rjmp	.+26     	; 0x1fba <fputc+0x30>
    1fa0:	2e 81       	ldd	r18, Y+6	; 0x06
    1fa2:	3f 81       	ldd	r19, Y+7	; 0x07
    1fa4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fa8:	28 17       	cp	r18, r24
    1faa:	39 07       	cpc	r19, r25
    1fac:	64 f4       	brge	.+24     	; 0x1fc6 <fputc+0x3c>
    1fae:	e8 81       	ld	r30, Y
    1fb0:	f9 81       	ldd	r31, Y+1	; 0x01
    1fb2:	01 93       	st	Z+, r16
    1fb4:	f9 83       	std	Y+1, r31	; 0x01
    1fb6:	e8 83       	st	Y, r30
    1fb8:	06 c0       	rjmp	.+12     	; 0x1fc6 <fputc+0x3c>
    1fba:	e8 85       	ldd	r30, Y+8	; 0x08
    1fbc:	f9 85       	ldd	r31, Y+9	; 0x09
    1fbe:	80 2f       	mov	r24, r16
    1fc0:	09 95       	icall
    1fc2:	89 2b       	or	r24, r25
    1fc4:	31 f4       	brne	.+12     	; 0x1fd2 <fputc+0x48>
    1fc6:	8e 81       	ldd	r24, Y+6	; 0x06
    1fc8:	9f 81       	ldd	r25, Y+7	; 0x07
    1fca:	01 96       	adiw	r24, 0x01	; 1
    1fcc:	9f 83       	std	Y+7, r25	; 0x07
    1fce:	8e 83       	std	Y+6, r24	; 0x06
    1fd0:	02 c0       	rjmp	.+4      	; 0x1fd6 <fputc+0x4c>
    1fd2:	0f ef       	ldi	r16, 0xFF	; 255
    1fd4:	1f ef       	ldi	r17, 0xFF	; 255
    1fd6:	c8 01       	movw	r24, r16
    1fd8:	df 91       	pop	r29
    1fda:	cf 91       	pop	r28
    1fdc:	1f 91       	pop	r17
    1fde:	0f 91       	pop	r16
    1fe0:	08 95       	ret

00001fe2 <printf_P>:
    1fe2:	df 93       	push	r29
    1fe4:	cf 93       	push	r28
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
    1fea:	fe 01       	movw	r30, r28
    1fec:	35 96       	adiw	r30, 0x05	; 5
    1fee:	61 91       	ld	r22, Z+
    1ff0:	71 91       	ld	r23, Z+
    1ff2:	a0 91 1b 05 	lds	r26, 0x051B
    1ff6:	b0 91 1c 05 	lds	r27, 0x051C
    1ffa:	13 96       	adiw	r26, 0x03	; 3
    1ffc:	8c 91       	ld	r24, X
    1ffe:	13 97       	sbiw	r26, 0x03	; 3
    2000:	88 60       	ori	r24, 0x08	; 8
    2002:	13 96       	adiw	r26, 0x03	; 3
    2004:	8c 93       	st	X, r24
    2006:	80 91 1b 05 	lds	r24, 0x051B
    200a:	90 91 1c 05 	lds	r25, 0x051C
    200e:	af 01       	movw	r20, r30
    2010:	3f d0       	rcall	.+126    	; 0x2090 <vfprintf>
    2012:	e0 91 1b 05 	lds	r30, 0x051B
    2016:	f0 91 1c 05 	lds	r31, 0x051C
    201a:	23 81       	ldd	r18, Z+3	; 0x03
    201c:	27 7f       	andi	r18, 0xF7	; 247
    201e:	23 83       	std	Z+3, r18	; 0x03
    2020:	cf 91       	pop	r28
    2022:	df 91       	pop	r29
    2024:	08 95       	ret

00002026 <puts_P>:
    2026:	0f 93       	push	r16
    2028:	1f 93       	push	r17
    202a:	cf 93       	push	r28
    202c:	df 93       	push	r29
    202e:	ec 01       	movw	r28, r24
    2030:	e0 91 1b 05 	lds	r30, 0x051B
    2034:	f0 91 1c 05 	lds	r31, 0x051C
    2038:	83 81       	ldd	r24, Z+3	; 0x03
    203a:	81 ff       	sbrs	r24, 1
    203c:	21 c0       	rjmp	.+66     	; 0x2080 <puts_P+0x5a>
    203e:	00 e0       	ldi	r16, 0x00	; 0
    2040:	10 e0       	ldi	r17, 0x00	; 0
    2042:	0e c0       	rjmp	.+28     	; 0x2060 <puts_P+0x3a>
    2044:	e0 91 1b 05 	lds	r30, 0x051B
    2048:	f0 91 1c 05 	lds	r31, 0x051C
    204c:	20 85       	ldd	r18, Z+8	; 0x08
    204e:	31 85       	ldd	r19, Z+9	; 0x09
    2050:	bf 01       	movw	r22, r30
    2052:	f9 01       	movw	r30, r18
    2054:	09 95       	icall
    2056:	89 2b       	or	r24, r25
    2058:	11 f0       	breq	.+4      	; 0x205e <puts_P+0x38>
    205a:	0f ef       	ldi	r16, 0xFF	; 255
    205c:	1f ef       	ldi	r17, 0xFF	; 255
    205e:	21 96       	adiw	r28, 0x01	; 1
    2060:	fe 01       	movw	r30, r28
    2062:	84 91       	lpm	r24, Z+
    2064:	88 23       	and	r24, r24
    2066:	71 f7       	brne	.-36     	; 0x2044 <puts_P+0x1e>
    2068:	e0 91 1b 05 	lds	r30, 0x051B
    206c:	f0 91 1c 05 	lds	r31, 0x051C
    2070:	20 85       	ldd	r18, Z+8	; 0x08
    2072:	31 85       	ldd	r19, Z+9	; 0x09
    2074:	8a e0       	ldi	r24, 0x0A	; 10
    2076:	bf 01       	movw	r22, r30
    2078:	f9 01       	movw	r30, r18
    207a:	09 95       	icall
    207c:	89 2b       	or	r24, r25
    207e:	11 f0       	breq	.+4      	; 0x2084 <puts_P+0x5e>
    2080:	0f ef       	ldi	r16, 0xFF	; 255
    2082:	1f ef       	ldi	r17, 0xFF	; 255
    2084:	c8 01       	movw	r24, r16
    2086:	df 91       	pop	r29
    2088:	cf 91       	pop	r28
    208a:	1f 91       	pop	r17
    208c:	0f 91       	pop	r16
    208e:	08 95       	ret

00002090 <vfprintf>:
    2090:	2f 92       	push	r2
    2092:	3f 92       	push	r3
    2094:	4f 92       	push	r4
    2096:	5f 92       	push	r5
    2098:	6f 92       	push	r6
    209a:	7f 92       	push	r7
    209c:	8f 92       	push	r8
    209e:	9f 92       	push	r9
    20a0:	af 92       	push	r10
    20a2:	bf 92       	push	r11
    20a4:	cf 92       	push	r12
    20a6:	df 92       	push	r13
    20a8:	ef 92       	push	r14
    20aa:	ff 92       	push	r15
    20ac:	0f 93       	push	r16
    20ae:	1f 93       	push	r17
    20b0:	df 93       	push	r29
    20b2:	cf 93       	push	r28
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
    20b8:	2b 97       	sbiw	r28, 0x0b	; 11
    20ba:	0f b6       	in	r0, 0x3f	; 63
    20bc:	f8 94       	cli
    20be:	de bf       	out	0x3e, r29	; 62
    20c0:	0f be       	out	0x3f, r0	; 63
    20c2:	cd bf       	out	0x3d, r28	; 61
    20c4:	3c 01       	movw	r6, r24
    20c6:	2b 01       	movw	r4, r22
    20c8:	5a 01       	movw	r10, r20
    20ca:	fc 01       	movw	r30, r24
    20cc:	17 82       	std	Z+7, r1	; 0x07
    20ce:	16 82       	std	Z+6, r1	; 0x06
    20d0:	83 81       	ldd	r24, Z+3	; 0x03
    20d2:	81 fd       	sbrc	r24, 1
    20d4:	03 c0       	rjmp	.+6      	; 0x20dc <vfprintf+0x4c>
    20d6:	6f ef       	ldi	r22, 0xFF	; 255
    20d8:	7f ef       	ldi	r23, 0xFF	; 255
    20da:	b9 c1       	rjmp	.+882    	; 0x244e <__stack+0x34f>
    20dc:	9a e0       	ldi	r25, 0x0A	; 10
    20de:	89 2e       	mov	r8, r25
    20e0:	1e 01       	movw	r2, r28
    20e2:	08 94       	sec
    20e4:	21 1c       	adc	r2, r1
    20e6:	31 1c       	adc	r3, r1
    20e8:	f3 01       	movw	r30, r6
    20ea:	23 81       	ldd	r18, Z+3	; 0x03
    20ec:	f2 01       	movw	r30, r4
    20ee:	23 fd       	sbrc	r18, 3
    20f0:	85 91       	lpm	r24, Z+
    20f2:	23 ff       	sbrs	r18, 3
    20f4:	81 91       	ld	r24, Z+
    20f6:	2f 01       	movw	r4, r30
    20f8:	88 23       	and	r24, r24
    20fa:	09 f4       	brne	.+2      	; 0x20fe <vfprintf+0x6e>
    20fc:	a5 c1       	rjmp	.+842    	; 0x2448 <__stack+0x349>
    20fe:	85 32       	cpi	r24, 0x25	; 37
    2100:	39 f4       	brne	.+14     	; 0x2110 <__stack+0x11>
    2102:	23 fd       	sbrc	r18, 3
    2104:	85 91       	lpm	r24, Z+
    2106:	23 ff       	sbrs	r18, 3
    2108:	81 91       	ld	r24, Z+
    210a:	2f 01       	movw	r4, r30
    210c:	85 32       	cpi	r24, 0x25	; 37
    210e:	21 f4       	brne	.+8      	; 0x2118 <__stack+0x19>
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	b3 01       	movw	r22, r6
    2114:	3a df       	rcall	.-396    	; 0x1f8a <fputc>
    2116:	e8 cf       	rjmp	.-48     	; 0x20e8 <vfprintf+0x58>
    2118:	98 2f       	mov	r25, r24
    211a:	ff 24       	eor	r15, r15
    211c:	ee 24       	eor	r14, r14
    211e:	99 24       	eor	r9, r9
    2120:	ff e1       	ldi	r31, 0x1F	; 31
    2122:	ff 15       	cp	r31, r15
    2124:	d0 f0       	brcs	.+52     	; 0x215a <__stack+0x5b>
    2126:	9b 32       	cpi	r25, 0x2B	; 43
    2128:	69 f0       	breq	.+26     	; 0x2144 <__stack+0x45>
    212a:	9c 32       	cpi	r25, 0x2C	; 44
    212c:	28 f4       	brcc	.+10     	; 0x2138 <__stack+0x39>
    212e:	90 32       	cpi	r25, 0x20	; 32
    2130:	59 f0       	breq	.+22     	; 0x2148 <__stack+0x49>
    2132:	93 32       	cpi	r25, 0x23	; 35
    2134:	91 f4       	brne	.+36     	; 0x215a <__stack+0x5b>
    2136:	0e c0       	rjmp	.+28     	; 0x2154 <__stack+0x55>
    2138:	9d 32       	cpi	r25, 0x2D	; 45
    213a:	49 f0       	breq	.+18     	; 0x214e <__stack+0x4f>
    213c:	90 33       	cpi	r25, 0x30	; 48
    213e:	69 f4       	brne	.+26     	; 0x215a <__stack+0x5b>
    2140:	41 e0       	ldi	r20, 0x01	; 1
    2142:	24 c0       	rjmp	.+72     	; 0x218c <__stack+0x8d>
    2144:	52 e0       	ldi	r21, 0x02	; 2
    2146:	f5 2a       	or	r15, r21
    2148:	84 e0       	ldi	r24, 0x04	; 4
    214a:	f8 2a       	or	r15, r24
    214c:	28 c0       	rjmp	.+80     	; 0x219e <__stack+0x9f>
    214e:	98 e0       	ldi	r25, 0x08	; 8
    2150:	f9 2a       	or	r15, r25
    2152:	25 c0       	rjmp	.+74     	; 0x219e <__stack+0x9f>
    2154:	e0 e1       	ldi	r30, 0x10	; 16
    2156:	fe 2a       	or	r15, r30
    2158:	22 c0       	rjmp	.+68     	; 0x219e <__stack+0x9f>
    215a:	f7 fc       	sbrc	r15, 7
    215c:	29 c0       	rjmp	.+82     	; 0x21b0 <__stack+0xb1>
    215e:	89 2f       	mov	r24, r25
    2160:	80 53       	subi	r24, 0x30	; 48
    2162:	8a 30       	cpi	r24, 0x0A	; 10
    2164:	70 f4       	brcc	.+28     	; 0x2182 <__stack+0x83>
    2166:	f6 fe       	sbrs	r15, 6
    2168:	05 c0       	rjmp	.+10     	; 0x2174 <__stack+0x75>
    216a:	98 9c       	mul	r9, r8
    216c:	90 2c       	mov	r9, r0
    216e:	11 24       	eor	r1, r1
    2170:	98 0e       	add	r9, r24
    2172:	15 c0       	rjmp	.+42     	; 0x219e <__stack+0x9f>
    2174:	e8 9c       	mul	r14, r8
    2176:	e0 2c       	mov	r14, r0
    2178:	11 24       	eor	r1, r1
    217a:	e8 0e       	add	r14, r24
    217c:	f0 e2       	ldi	r31, 0x20	; 32
    217e:	ff 2a       	or	r15, r31
    2180:	0e c0       	rjmp	.+28     	; 0x219e <__stack+0x9f>
    2182:	9e 32       	cpi	r25, 0x2E	; 46
    2184:	29 f4       	brne	.+10     	; 0x2190 <__stack+0x91>
    2186:	f6 fc       	sbrc	r15, 6
    2188:	5f c1       	rjmp	.+702    	; 0x2448 <__stack+0x349>
    218a:	40 e4       	ldi	r20, 0x40	; 64
    218c:	f4 2a       	or	r15, r20
    218e:	07 c0       	rjmp	.+14     	; 0x219e <__stack+0x9f>
    2190:	9c 36       	cpi	r25, 0x6C	; 108
    2192:	19 f4       	brne	.+6      	; 0x219a <__stack+0x9b>
    2194:	50 e8       	ldi	r21, 0x80	; 128
    2196:	f5 2a       	or	r15, r21
    2198:	02 c0       	rjmp	.+4      	; 0x219e <__stack+0x9f>
    219a:	98 36       	cpi	r25, 0x68	; 104
    219c:	49 f4       	brne	.+18     	; 0x21b0 <__stack+0xb1>
    219e:	f2 01       	movw	r30, r4
    21a0:	23 fd       	sbrc	r18, 3
    21a2:	95 91       	lpm	r25, Z+
    21a4:	23 ff       	sbrs	r18, 3
    21a6:	91 91       	ld	r25, Z+
    21a8:	2f 01       	movw	r4, r30
    21aa:	99 23       	and	r25, r25
    21ac:	09 f0       	breq	.+2      	; 0x21b0 <__stack+0xb1>
    21ae:	b8 cf       	rjmp	.-144    	; 0x2120 <__stack+0x21>
    21b0:	89 2f       	mov	r24, r25
    21b2:	85 54       	subi	r24, 0x45	; 69
    21b4:	83 30       	cpi	r24, 0x03	; 3
    21b6:	18 f0       	brcs	.+6      	; 0x21be <__stack+0xbf>
    21b8:	80 52       	subi	r24, 0x20	; 32
    21ba:	83 30       	cpi	r24, 0x03	; 3
    21bc:	38 f4       	brcc	.+14     	; 0x21cc <__stack+0xcd>
    21be:	44 e0       	ldi	r20, 0x04	; 4
    21c0:	50 e0       	ldi	r21, 0x00	; 0
    21c2:	a4 0e       	add	r10, r20
    21c4:	b5 1e       	adc	r11, r21
    21c6:	5f e3       	ldi	r21, 0x3F	; 63
    21c8:	59 83       	std	Y+1, r21	; 0x01
    21ca:	0f c0       	rjmp	.+30     	; 0x21ea <__stack+0xeb>
    21cc:	93 36       	cpi	r25, 0x63	; 99
    21ce:	31 f0       	breq	.+12     	; 0x21dc <__stack+0xdd>
    21d0:	93 37       	cpi	r25, 0x73	; 115
    21d2:	79 f0       	breq	.+30     	; 0x21f2 <__stack+0xf3>
    21d4:	93 35       	cpi	r25, 0x53	; 83
    21d6:	09 f0       	breq	.+2      	; 0x21da <__stack+0xdb>
    21d8:	52 c0       	rjmp	.+164    	; 0x227e <__stack+0x17f>
    21da:	1f c0       	rjmp	.+62     	; 0x221a <__stack+0x11b>
    21dc:	f5 01       	movw	r30, r10
    21de:	80 81       	ld	r24, Z
    21e0:	89 83       	std	Y+1, r24	; 0x01
    21e2:	42 e0       	ldi	r20, 0x02	; 2
    21e4:	50 e0       	ldi	r21, 0x00	; 0
    21e6:	a4 0e       	add	r10, r20
    21e8:	b5 1e       	adc	r11, r21
    21ea:	61 01       	movw	r12, r2
    21ec:	01 e0       	ldi	r16, 0x01	; 1
    21ee:	10 e0       	ldi	r17, 0x00	; 0
    21f0:	11 c0       	rjmp	.+34     	; 0x2214 <__stack+0x115>
    21f2:	f5 01       	movw	r30, r10
    21f4:	c0 80       	ld	r12, Z
    21f6:	d1 80       	ldd	r13, Z+1	; 0x01
    21f8:	f6 fc       	sbrc	r15, 6
    21fa:	03 c0       	rjmp	.+6      	; 0x2202 <__stack+0x103>
    21fc:	6f ef       	ldi	r22, 0xFF	; 255
    21fe:	7f ef       	ldi	r23, 0xFF	; 255
    2200:	02 c0       	rjmp	.+4      	; 0x2206 <__stack+0x107>
    2202:	69 2d       	mov	r22, r9
    2204:	70 e0       	ldi	r23, 0x00	; 0
    2206:	42 e0       	ldi	r20, 0x02	; 2
    2208:	50 e0       	ldi	r21, 0x00	; 0
    220a:	a4 0e       	add	r10, r20
    220c:	b5 1e       	adc	r11, r21
    220e:	c6 01       	movw	r24, r12
    2210:	43 d1       	rcall	.+646    	; 0x2498 <strnlen>
    2212:	8c 01       	movw	r16, r24
    2214:	5f e7       	ldi	r21, 0x7F	; 127
    2216:	f5 22       	and	r15, r21
    2218:	13 c0       	rjmp	.+38     	; 0x2240 <__stack+0x141>
    221a:	f5 01       	movw	r30, r10
    221c:	c0 80       	ld	r12, Z
    221e:	d1 80       	ldd	r13, Z+1	; 0x01
    2220:	f6 fc       	sbrc	r15, 6
    2222:	03 c0       	rjmp	.+6      	; 0x222a <__stack+0x12b>
    2224:	6f ef       	ldi	r22, 0xFF	; 255
    2226:	7f ef       	ldi	r23, 0xFF	; 255
    2228:	02 c0       	rjmp	.+4      	; 0x222e <__stack+0x12f>
    222a:	69 2d       	mov	r22, r9
    222c:	70 e0       	ldi	r23, 0x00	; 0
    222e:	42 e0       	ldi	r20, 0x02	; 2
    2230:	50 e0       	ldi	r21, 0x00	; 0
    2232:	a4 0e       	add	r10, r20
    2234:	b5 1e       	adc	r11, r21
    2236:	c6 01       	movw	r24, r12
    2238:	24 d1       	rcall	.+584    	; 0x2482 <strnlen_P>
    223a:	8c 01       	movw	r16, r24
    223c:	50 e8       	ldi	r21, 0x80	; 128
    223e:	f5 2a       	or	r15, r21
    2240:	f3 fe       	sbrs	r15, 3
    2242:	06 c0       	rjmp	.+12     	; 0x2250 <__stack+0x151>
    2244:	18 c0       	rjmp	.+48     	; 0x2276 <__stack+0x177>
    2246:	80 e2       	ldi	r24, 0x20	; 32
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	b3 01       	movw	r22, r6
    224c:	9e de       	rcall	.-708    	; 0x1f8a <fputc>
    224e:	ea 94       	dec	r14
    2250:	8e 2d       	mov	r24, r14
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	08 17       	cp	r16, r24
    2256:	19 07       	cpc	r17, r25
    2258:	b0 f3       	brcs	.-20     	; 0x2246 <__stack+0x147>
    225a:	0d c0       	rjmp	.+26     	; 0x2276 <__stack+0x177>
    225c:	f6 01       	movw	r30, r12
    225e:	f7 fc       	sbrc	r15, 7
    2260:	85 91       	lpm	r24, Z+
    2262:	f7 fe       	sbrs	r15, 7
    2264:	81 91       	ld	r24, Z+
    2266:	6f 01       	movw	r12, r30
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	b3 01       	movw	r22, r6
    226c:	8e de       	rcall	.-740    	; 0x1f8a <fputc>
    226e:	e1 10       	cpse	r14, r1
    2270:	ea 94       	dec	r14
    2272:	01 50       	subi	r16, 0x01	; 1
    2274:	10 40       	sbci	r17, 0x00	; 0
    2276:	01 15       	cp	r16, r1
    2278:	11 05       	cpc	r17, r1
    227a:	81 f7       	brne	.-32     	; 0x225c <__stack+0x15d>
    227c:	e2 c0       	rjmp	.+452    	; 0x2442 <__stack+0x343>
    227e:	94 36       	cpi	r25, 0x64	; 100
    2280:	11 f0       	breq	.+4      	; 0x2286 <__stack+0x187>
    2282:	99 36       	cpi	r25, 0x69	; 105
    2284:	61 f5       	brne	.+88     	; 0x22de <__stack+0x1df>
    2286:	f7 fe       	sbrs	r15, 7
    2288:	08 c0       	rjmp	.+16     	; 0x229a <__stack+0x19b>
    228a:	f5 01       	movw	r30, r10
    228c:	20 81       	ld	r18, Z
    228e:	31 81       	ldd	r19, Z+1	; 0x01
    2290:	42 81       	ldd	r20, Z+2	; 0x02
    2292:	53 81       	ldd	r21, Z+3	; 0x03
    2294:	84 e0       	ldi	r24, 0x04	; 4
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	0a c0       	rjmp	.+20     	; 0x22ae <__stack+0x1af>
    229a:	f5 01       	movw	r30, r10
    229c:	80 81       	ld	r24, Z
    229e:	91 81       	ldd	r25, Z+1	; 0x01
    22a0:	9c 01       	movw	r18, r24
    22a2:	44 27       	eor	r20, r20
    22a4:	37 fd       	sbrc	r19, 7
    22a6:	40 95       	com	r20
    22a8:	54 2f       	mov	r21, r20
    22aa:	82 e0       	ldi	r24, 0x02	; 2
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	a8 0e       	add	r10, r24
    22b0:	b9 1e       	adc	r11, r25
    22b2:	9f e6       	ldi	r25, 0x6F	; 111
    22b4:	f9 22       	and	r15, r25
    22b6:	57 ff       	sbrs	r21, 7
    22b8:	09 c0       	rjmp	.+18     	; 0x22cc <__stack+0x1cd>
    22ba:	50 95       	com	r21
    22bc:	40 95       	com	r20
    22be:	30 95       	com	r19
    22c0:	21 95       	neg	r18
    22c2:	3f 4f       	sbci	r19, 0xFF	; 255
    22c4:	4f 4f       	sbci	r20, 0xFF	; 255
    22c6:	5f 4f       	sbci	r21, 0xFF	; 255
    22c8:	e0 e8       	ldi	r30, 0x80	; 128
    22ca:	fe 2a       	or	r15, r30
    22cc:	ca 01       	movw	r24, r20
    22ce:	b9 01       	movw	r22, r18
    22d0:	a1 01       	movw	r20, r2
    22d2:	2a e0       	ldi	r18, 0x0A	; 10
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	eb d0       	rcall	.+470    	; 0x24ae <__ultoa_invert>
    22d8:	d8 2e       	mov	r13, r24
    22da:	d2 18       	sub	r13, r2
    22dc:	3f c0       	rjmp	.+126    	; 0x235c <__stack+0x25d>
    22de:	95 37       	cpi	r25, 0x75	; 117
    22e0:	29 f4       	brne	.+10     	; 0x22ec <__stack+0x1ed>
    22e2:	1f 2d       	mov	r17, r15
    22e4:	1f 7e       	andi	r17, 0xEF	; 239
    22e6:	2a e0       	ldi	r18, 0x0A	; 10
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	1d c0       	rjmp	.+58     	; 0x2326 <__stack+0x227>
    22ec:	1f 2d       	mov	r17, r15
    22ee:	19 7f       	andi	r17, 0xF9	; 249
    22f0:	9f 36       	cpi	r25, 0x6F	; 111
    22f2:	61 f0       	breq	.+24     	; 0x230c <__stack+0x20d>
    22f4:	90 37       	cpi	r25, 0x70	; 112
    22f6:	20 f4       	brcc	.+8      	; 0x2300 <__stack+0x201>
    22f8:	98 35       	cpi	r25, 0x58	; 88
    22fa:	09 f0       	breq	.+2      	; 0x22fe <__stack+0x1ff>
    22fc:	a5 c0       	rjmp	.+330    	; 0x2448 <__stack+0x349>
    22fe:	0f c0       	rjmp	.+30     	; 0x231e <__stack+0x21f>
    2300:	90 37       	cpi	r25, 0x70	; 112
    2302:	39 f0       	breq	.+14     	; 0x2312 <__stack+0x213>
    2304:	98 37       	cpi	r25, 0x78	; 120
    2306:	09 f0       	breq	.+2      	; 0x230a <__stack+0x20b>
    2308:	9f c0       	rjmp	.+318    	; 0x2448 <__stack+0x349>
    230a:	04 c0       	rjmp	.+8      	; 0x2314 <__stack+0x215>
    230c:	28 e0       	ldi	r18, 0x08	; 8
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	0a c0       	rjmp	.+20     	; 0x2326 <__stack+0x227>
    2312:	10 61       	ori	r17, 0x10	; 16
    2314:	14 fd       	sbrc	r17, 4
    2316:	14 60       	ori	r17, 0x04	; 4
    2318:	20 e1       	ldi	r18, 0x10	; 16
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	04 c0       	rjmp	.+8      	; 0x2326 <__stack+0x227>
    231e:	14 fd       	sbrc	r17, 4
    2320:	16 60       	ori	r17, 0x06	; 6
    2322:	20 e1       	ldi	r18, 0x10	; 16
    2324:	32 e0       	ldi	r19, 0x02	; 2
    2326:	17 ff       	sbrs	r17, 7
    2328:	08 c0       	rjmp	.+16     	; 0x233a <__stack+0x23b>
    232a:	f5 01       	movw	r30, r10
    232c:	60 81       	ld	r22, Z
    232e:	71 81       	ldd	r23, Z+1	; 0x01
    2330:	82 81       	ldd	r24, Z+2	; 0x02
    2332:	93 81       	ldd	r25, Z+3	; 0x03
    2334:	44 e0       	ldi	r20, 0x04	; 4
    2336:	50 e0       	ldi	r21, 0x00	; 0
    2338:	08 c0       	rjmp	.+16     	; 0x234a <__stack+0x24b>
    233a:	f5 01       	movw	r30, r10
    233c:	80 81       	ld	r24, Z
    233e:	91 81       	ldd	r25, Z+1	; 0x01
    2340:	bc 01       	movw	r22, r24
    2342:	80 e0       	ldi	r24, 0x00	; 0
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	42 e0       	ldi	r20, 0x02	; 2
    2348:	50 e0       	ldi	r21, 0x00	; 0
    234a:	a4 0e       	add	r10, r20
    234c:	b5 1e       	adc	r11, r21
    234e:	a1 01       	movw	r20, r2
    2350:	ae d0       	rcall	.+348    	; 0x24ae <__ultoa_invert>
    2352:	d8 2e       	mov	r13, r24
    2354:	d2 18       	sub	r13, r2
    2356:	8f e7       	ldi	r24, 0x7F	; 127
    2358:	f8 2e       	mov	r15, r24
    235a:	f1 22       	and	r15, r17
    235c:	f6 fe       	sbrs	r15, 6
    235e:	0b c0       	rjmp	.+22     	; 0x2376 <__stack+0x277>
    2360:	5e ef       	ldi	r21, 0xFE	; 254
    2362:	f5 22       	and	r15, r21
    2364:	d9 14       	cp	r13, r9
    2366:	38 f4       	brcc	.+14     	; 0x2376 <__stack+0x277>
    2368:	f4 fe       	sbrs	r15, 4
    236a:	07 c0       	rjmp	.+14     	; 0x237a <__stack+0x27b>
    236c:	f2 fc       	sbrc	r15, 2
    236e:	05 c0       	rjmp	.+10     	; 0x237a <__stack+0x27b>
    2370:	8f ee       	ldi	r24, 0xEF	; 239
    2372:	f8 22       	and	r15, r24
    2374:	02 c0       	rjmp	.+4      	; 0x237a <__stack+0x27b>
    2376:	1d 2d       	mov	r17, r13
    2378:	01 c0       	rjmp	.+2      	; 0x237c <__stack+0x27d>
    237a:	19 2d       	mov	r17, r9
    237c:	f4 fe       	sbrs	r15, 4
    237e:	0d c0       	rjmp	.+26     	; 0x239a <__stack+0x29b>
    2380:	fe 01       	movw	r30, r28
    2382:	ed 0d       	add	r30, r13
    2384:	f1 1d       	adc	r31, r1
    2386:	80 81       	ld	r24, Z
    2388:	80 33       	cpi	r24, 0x30	; 48
    238a:	19 f4       	brne	.+6      	; 0x2392 <__stack+0x293>
    238c:	99 ee       	ldi	r25, 0xE9	; 233
    238e:	f9 22       	and	r15, r25
    2390:	08 c0       	rjmp	.+16     	; 0x23a2 <__stack+0x2a3>
    2392:	1f 5f       	subi	r17, 0xFF	; 255
    2394:	f2 fe       	sbrs	r15, 2
    2396:	05 c0       	rjmp	.+10     	; 0x23a2 <__stack+0x2a3>
    2398:	03 c0       	rjmp	.+6      	; 0x23a0 <__stack+0x2a1>
    239a:	8f 2d       	mov	r24, r15
    239c:	86 78       	andi	r24, 0x86	; 134
    239e:	09 f0       	breq	.+2      	; 0x23a2 <__stack+0x2a3>
    23a0:	1f 5f       	subi	r17, 0xFF	; 255
    23a2:	0f 2d       	mov	r16, r15
    23a4:	f3 fc       	sbrc	r15, 3
    23a6:	13 c0       	rjmp	.+38     	; 0x23ce <__stack+0x2cf>
    23a8:	f0 fe       	sbrs	r15, 0
    23aa:	0e c0       	rjmp	.+28     	; 0x23c8 <__stack+0x2c9>
    23ac:	1e 15       	cp	r17, r14
    23ae:	10 f0       	brcs	.+4      	; 0x23b4 <__stack+0x2b5>
    23b0:	9d 2c       	mov	r9, r13
    23b2:	0a c0       	rjmp	.+20     	; 0x23c8 <__stack+0x2c9>
    23b4:	9d 2c       	mov	r9, r13
    23b6:	9e 0c       	add	r9, r14
    23b8:	91 1a       	sub	r9, r17
    23ba:	1e 2d       	mov	r17, r14
    23bc:	05 c0       	rjmp	.+10     	; 0x23c8 <__stack+0x2c9>
    23be:	80 e2       	ldi	r24, 0x20	; 32
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	b3 01       	movw	r22, r6
    23c4:	e2 dd       	rcall	.-1084   	; 0x1f8a <fputc>
    23c6:	1f 5f       	subi	r17, 0xFF	; 255
    23c8:	1e 15       	cp	r17, r14
    23ca:	c8 f3       	brcs	.-14     	; 0x23be <__stack+0x2bf>
    23cc:	04 c0       	rjmp	.+8      	; 0x23d6 <__stack+0x2d7>
    23ce:	1e 15       	cp	r17, r14
    23d0:	10 f4       	brcc	.+4      	; 0x23d6 <__stack+0x2d7>
    23d2:	e1 1a       	sub	r14, r17
    23d4:	01 c0       	rjmp	.+2      	; 0x23d8 <__stack+0x2d9>
    23d6:	ee 24       	eor	r14, r14
    23d8:	04 ff       	sbrs	r16, 4
    23da:	0e c0       	rjmp	.+28     	; 0x23f8 <__stack+0x2f9>
    23dc:	80 e3       	ldi	r24, 0x30	; 48
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	b3 01       	movw	r22, r6
    23e2:	d3 dd       	rcall	.-1114   	; 0x1f8a <fputc>
    23e4:	02 ff       	sbrs	r16, 2
    23e6:	1b c0       	rjmp	.+54     	; 0x241e <__stack+0x31f>
    23e8:	01 fd       	sbrc	r16, 1
    23ea:	03 c0       	rjmp	.+6      	; 0x23f2 <__stack+0x2f3>
    23ec:	88 e7       	ldi	r24, 0x78	; 120
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	0e c0       	rjmp	.+28     	; 0x240e <__stack+0x30f>
    23f2:	88 e5       	ldi	r24, 0x58	; 88
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	0b c0       	rjmp	.+22     	; 0x240e <__stack+0x30f>
    23f8:	80 2f       	mov	r24, r16
    23fa:	86 78       	andi	r24, 0x86	; 134
    23fc:	81 f0       	breq	.+32     	; 0x241e <__stack+0x31f>
    23fe:	01 ff       	sbrs	r16, 1
    2400:	02 c0       	rjmp	.+4      	; 0x2406 <__stack+0x307>
    2402:	8b e2       	ldi	r24, 0x2B	; 43
    2404:	01 c0       	rjmp	.+2      	; 0x2408 <__stack+0x309>
    2406:	80 e2       	ldi	r24, 0x20	; 32
    2408:	f7 fc       	sbrc	r15, 7
    240a:	8d e2       	ldi	r24, 0x2D	; 45
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	b3 01       	movw	r22, r6
    2410:	bc dd       	rcall	.-1160   	; 0x1f8a <fputc>
    2412:	05 c0       	rjmp	.+10     	; 0x241e <__stack+0x31f>
    2414:	80 e3       	ldi	r24, 0x30	; 48
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	b3 01       	movw	r22, r6
    241a:	b7 dd       	rcall	.-1170   	; 0x1f8a <fputc>
    241c:	9a 94       	dec	r9
    241e:	d9 14       	cp	r13, r9
    2420:	c8 f3       	brcs	.-14     	; 0x2414 <__stack+0x315>
    2422:	da 94       	dec	r13
    2424:	f1 01       	movw	r30, r2
    2426:	ed 0d       	add	r30, r13
    2428:	f1 1d       	adc	r31, r1
    242a:	80 81       	ld	r24, Z
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	b3 01       	movw	r22, r6
    2430:	ac dd       	rcall	.-1192   	; 0x1f8a <fputc>
    2432:	dd 20       	and	r13, r13
    2434:	b1 f7       	brne	.-20     	; 0x2422 <__stack+0x323>
    2436:	05 c0       	rjmp	.+10     	; 0x2442 <__stack+0x343>
    2438:	80 e2       	ldi	r24, 0x20	; 32
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	b3 01       	movw	r22, r6
    243e:	a5 dd       	rcall	.-1206   	; 0x1f8a <fputc>
    2440:	ea 94       	dec	r14
    2442:	ee 20       	and	r14, r14
    2444:	c9 f7       	brne	.-14     	; 0x2438 <__stack+0x339>
    2446:	50 ce       	rjmp	.-864    	; 0x20e8 <vfprintf+0x58>
    2448:	f3 01       	movw	r30, r6
    244a:	66 81       	ldd	r22, Z+6	; 0x06
    244c:	77 81       	ldd	r23, Z+7	; 0x07
    244e:	cb 01       	movw	r24, r22
    2450:	2b 96       	adiw	r28, 0x0b	; 11
    2452:	0f b6       	in	r0, 0x3f	; 63
    2454:	f8 94       	cli
    2456:	de bf       	out	0x3e, r29	; 62
    2458:	0f be       	out	0x3f, r0	; 63
    245a:	cd bf       	out	0x3d, r28	; 61
    245c:	cf 91       	pop	r28
    245e:	df 91       	pop	r29
    2460:	1f 91       	pop	r17
    2462:	0f 91       	pop	r16
    2464:	ff 90       	pop	r15
    2466:	ef 90       	pop	r14
    2468:	df 90       	pop	r13
    246a:	cf 90       	pop	r12
    246c:	bf 90       	pop	r11
    246e:	af 90       	pop	r10
    2470:	9f 90       	pop	r9
    2472:	8f 90       	pop	r8
    2474:	7f 90       	pop	r7
    2476:	6f 90       	pop	r6
    2478:	5f 90       	pop	r5
    247a:	4f 90       	pop	r4
    247c:	3f 90       	pop	r3
    247e:	2f 90       	pop	r2
    2480:	08 95       	ret

00002482 <strnlen_P>:
    2482:	fc 01       	movw	r30, r24
    2484:	05 90       	lpm	r0, Z+
    2486:	61 50       	subi	r22, 0x01	; 1
    2488:	70 40       	sbci	r23, 0x00	; 0
    248a:	01 10       	cpse	r0, r1
    248c:	d8 f7       	brcc	.-10     	; 0x2484 <strnlen_P+0x2>
    248e:	80 95       	com	r24
    2490:	90 95       	com	r25
    2492:	8e 0f       	add	r24, r30
    2494:	9f 1f       	adc	r25, r31
    2496:	08 95       	ret

00002498 <strnlen>:
    2498:	fc 01       	movw	r30, r24
    249a:	61 50       	subi	r22, 0x01	; 1
    249c:	70 40       	sbci	r23, 0x00	; 0
    249e:	01 90       	ld	r0, Z+
    24a0:	01 10       	cpse	r0, r1
    24a2:	d8 f7       	brcc	.-10     	; 0x249a <strnlen+0x2>
    24a4:	80 95       	com	r24
    24a6:	90 95       	com	r25
    24a8:	8e 0f       	add	r24, r30
    24aa:	9f 1f       	adc	r25, r31
    24ac:	08 95       	ret

000024ae <__ultoa_invert>:
    24ae:	fa 01       	movw	r30, r20
    24b0:	aa 27       	eor	r26, r26
    24b2:	28 30       	cpi	r18, 0x08	; 8
    24b4:	51 f1       	breq	.+84     	; 0x250a <__ultoa_invert+0x5c>
    24b6:	20 31       	cpi	r18, 0x10	; 16
    24b8:	81 f1       	breq	.+96     	; 0x251a <__ultoa_invert+0x6c>
    24ba:	e8 94       	clt
    24bc:	6f 93       	push	r22
    24be:	6e 7f       	andi	r22, 0xFE	; 254
    24c0:	6e 5f       	subi	r22, 0xFE	; 254
    24c2:	7f 4f       	sbci	r23, 0xFF	; 255
    24c4:	8f 4f       	sbci	r24, 0xFF	; 255
    24c6:	9f 4f       	sbci	r25, 0xFF	; 255
    24c8:	af 4f       	sbci	r26, 0xFF	; 255
    24ca:	b1 e0       	ldi	r27, 0x01	; 1
    24cc:	3e d0       	rcall	.+124    	; 0x254a <__ultoa_invert+0x9c>
    24ce:	b4 e0       	ldi	r27, 0x04	; 4
    24d0:	3c d0       	rcall	.+120    	; 0x254a <__ultoa_invert+0x9c>
    24d2:	67 0f       	add	r22, r23
    24d4:	78 1f       	adc	r23, r24
    24d6:	89 1f       	adc	r24, r25
    24d8:	9a 1f       	adc	r25, r26
    24da:	a1 1d       	adc	r26, r1
    24dc:	68 0f       	add	r22, r24
    24de:	79 1f       	adc	r23, r25
    24e0:	8a 1f       	adc	r24, r26
    24e2:	91 1d       	adc	r25, r1
    24e4:	a1 1d       	adc	r26, r1
    24e6:	6a 0f       	add	r22, r26
    24e8:	71 1d       	adc	r23, r1
    24ea:	81 1d       	adc	r24, r1
    24ec:	91 1d       	adc	r25, r1
    24ee:	a1 1d       	adc	r26, r1
    24f0:	20 d0       	rcall	.+64     	; 0x2532 <__ultoa_invert+0x84>
    24f2:	09 f4       	brne	.+2      	; 0x24f6 <__ultoa_invert+0x48>
    24f4:	68 94       	set
    24f6:	3f 91       	pop	r19
    24f8:	2a e0       	ldi	r18, 0x0A	; 10
    24fa:	26 9f       	mul	r18, r22
    24fc:	11 24       	eor	r1, r1
    24fe:	30 19       	sub	r19, r0
    2500:	30 5d       	subi	r19, 0xD0	; 208
    2502:	31 93       	st	Z+, r19
    2504:	de f6       	brtc	.-74     	; 0x24bc <__ultoa_invert+0xe>
    2506:	cf 01       	movw	r24, r30
    2508:	08 95       	ret
    250a:	46 2f       	mov	r20, r22
    250c:	47 70       	andi	r20, 0x07	; 7
    250e:	40 5d       	subi	r20, 0xD0	; 208
    2510:	41 93       	st	Z+, r20
    2512:	b3 e0       	ldi	r27, 0x03	; 3
    2514:	0f d0       	rcall	.+30     	; 0x2534 <__ultoa_invert+0x86>
    2516:	c9 f7       	brne	.-14     	; 0x250a <__ultoa_invert+0x5c>
    2518:	f6 cf       	rjmp	.-20     	; 0x2506 <__ultoa_invert+0x58>
    251a:	46 2f       	mov	r20, r22
    251c:	4f 70       	andi	r20, 0x0F	; 15
    251e:	40 5d       	subi	r20, 0xD0	; 208
    2520:	4a 33       	cpi	r20, 0x3A	; 58
    2522:	18 f0       	brcs	.+6      	; 0x252a <__ultoa_invert+0x7c>
    2524:	49 5d       	subi	r20, 0xD9	; 217
    2526:	31 fd       	sbrc	r19, 1
    2528:	40 52       	subi	r20, 0x20	; 32
    252a:	41 93       	st	Z+, r20
    252c:	02 d0       	rcall	.+4      	; 0x2532 <__ultoa_invert+0x84>
    252e:	a9 f7       	brne	.-22     	; 0x251a <__ultoa_invert+0x6c>
    2530:	ea cf       	rjmp	.-44     	; 0x2506 <__ultoa_invert+0x58>
    2532:	b4 e0       	ldi	r27, 0x04	; 4
    2534:	a6 95       	lsr	r26
    2536:	97 95       	ror	r25
    2538:	87 95       	ror	r24
    253a:	77 95       	ror	r23
    253c:	67 95       	ror	r22
    253e:	ba 95       	dec	r27
    2540:	c9 f7       	brne	.-14     	; 0x2534 <__ultoa_invert+0x86>
    2542:	00 97       	sbiw	r24, 0x00	; 0
    2544:	61 05       	cpc	r22, r1
    2546:	71 05       	cpc	r23, r1
    2548:	08 95       	ret
    254a:	9b 01       	movw	r18, r22
    254c:	ac 01       	movw	r20, r24
    254e:	0a 2e       	mov	r0, r26
    2550:	06 94       	lsr	r0
    2552:	57 95       	ror	r21
    2554:	47 95       	ror	r20
    2556:	37 95       	ror	r19
    2558:	27 95       	ror	r18
    255a:	ba 95       	dec	r27
    255c:	c9 f7       	brne	.-14     	; 0x2550 <__ultoa_invert+0xa2>
    255e:	62 0f       	add	r22, r18
    2560:	73 1f       	adc	r23, r19
    2562:	84 1f       	adc	r24, r20
    2564:	95 1f       	adc	r25, r21
    2566:	a0 1d       	adc	r26, r0
    2568:	08 95       	ret

0000256a <_exit>:
    256a:	f8 94       	cli

0000256c <__stop_program>:
    256c:	ff cf       	rjmp	.-2      	; 0x256c <__stop_program>
