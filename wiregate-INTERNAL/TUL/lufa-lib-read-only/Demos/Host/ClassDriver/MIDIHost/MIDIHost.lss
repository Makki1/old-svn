
MIDIHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00001b7e  00001c12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800122  00800122  00001c34  2**0
                  ALLOC
  3 .stab         00002208  00000000  00000000  00001c34  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dff  00000000  00000000  00003e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000006d0  00000000  00000000  00004c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000fa9  00000000  00000000  0000530b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000b6b7  00000000  00000000  000062b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000288a  00000000  00000000  0001196b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007dce  00000000  00000000  000141f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b20  00000000  00000000  0001bfc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000461c  00000000  00000000  0001cae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005791  00000000  00000000  00021100  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007b8  00000000  00000000  00026891  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       0:	1d c1       	rjmp	.+570    	; 0x23c <__ctors_end>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       2:	00 00       	nop
	return USB_Host_SendControlRequest(NULL);
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
       4:	39 c1       	rjmp	.+626    	; 0x278 <__bad_interrupt>

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       6:	00 00       	nop
       8:	37 c1       	rjmp	.+622    	; 0x278 <__bad_interrupt>
       a:	00 00       	nop
       c:	35 c1       	rjmp	.+618    	; 0x278 <__bad_interrupt>
       e:	00 00       	nop
      10:	33 c1       	rjmp	.+614    	; 0x278 <__bad_interrupt>
      12:	00 00       	nop
      14:	31 c1       	rjmp	.+610    	; 0x278 <__bad_interrupt>
      16:	00 00       	nop
      18:	2f c1       	rjmp	.+606    	; 0x278 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2d c1       	rjmp	.+602    	; 0x278 <__bad_interrupt>
      1e:	00 00       	nop
      20:	2b c1       	rjmp	.+598    	; 0x278 <__bad_interrupt>
      22:	00 00       	nop
      24:	29 c1       	rjmp	.+594    	; 0x278 <__bad_interrupt>
      26:	00 00       	nop
      28:	04 c6       	rjmp	.+3080   	; 0xc32 <__vector_10>
      2a:	00 00       	nop
      2c:	25 c1       	rjmp	.+586    	; 0x278 <__bad_interrupt>
      2e:	00 00       	nop
      30:	23 c1       	rjmp	.+582    	; 0x278 <__bad_interrupt>
      32:	00 00       	nop
      34:	21 c1       	rjmp	.+578    	; 0x278 <__bad_interrupt>
      36:	00 00       	nop
      38:	1f c1       	rjmp	.+574    	; 0x278 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1d c1       	rjmp	.+570    	; 0x278 <__bad_interrupt>
      3e:	00 00       	nop
      40:	1b c1       	rjmp	.+566    	; 0x278 <__bad_interrupt>
      42:	00 00       	nop
      44:	19 c1       	rjmp	.+562    	; 0x278 <__bad_interrupt>
      46:	00 00       	nop
      48:	17 c1       	rjmp	.+558    	; 0x278 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	15 c1       	rjmp	.+554    	; 0x278 <__bad_interrupt>
      4e:	00 00       	nop
      50:	13 c1       	rjmp	.+550    	; 0x278 <__bad_interrupt>
      52:	00 00       	nop
      54:	11 c1       	rjmp	.+546    	; 0x278 <__bad_interrupt>
      56:	00 00       	nop
      58:	0f c1       	rjmp	.+542    	; 0x278 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0d c1       	rjmp	.+538    	; 0x278 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0b c1       	rjmp	.+534    	; 0x278 <__bad_interrupt>
      62:	00 00       	nop
      64:	09 c1       	rjmp	.+530    	; 0x278 <__bad_interrupt>
      66:	00 00       	nop
      68:	07 c1       	rjmp	.+526    	; 0x278 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	05 c1       	rjmp	.+522    	; 0x278 <__bad_interrupt>
      6e:	00 00       	nop
      70:	03 c1       	rjmp	.+518    	; 0x278 <__bad_interrupt>
      72:	00 00       	nop
      74:	01 c1       	rjmp	.+514    	; 0x278 <__bad_interrupt>
      76:	00 00       	nop
      78:	ff c0       	rjmp	.+510    	; 0x278 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fd c0       	rjmp	.+506    	; 0x278 <__bad_interrupt>
      7e:	00 00       	nop
      80:	fb c0       	rjmp	.+502    	; 0x278 <__bad_interrupt>
      82:	00 00       	nop
      84:	f9 c0       	rjmp	.+498    	; 0x278 <__bad_interrupt>
      86:	00 00       	nop
      88:	f7 c0       	rjmp	.+494    	; 0x278 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f5 c0       	rjmp	.+490    	; 0x278 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f3 c0       	rjmp	.+486    	; 0x278 <__bad_interrupt>
      92:	00 00       	nop
      94:	f1 c0       	rjmp	.+482    	; 0x278 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4676>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4668>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4659>:
     11d:	4d 49 44 49 20 44 65 76 69 63 65 20 45 6e 75 6d     MIDI Device Enum
     12d:	65 72 61 74 65 64 2e 0d 0a 00                       erated....

00000137 <__c.4657>:
     137:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     147:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     157:	6f 6e 2e 0d 0a 00                                   on....

0000015d <__c.4655>:
     15d:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     16d:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4d 49 44 49     Not a Valid MIDI
     17d:	20 43 6c 61 73 73 20 44 65 76 69 63 65 2e 0d 0a      Class Device...
     18d:	00                                                  .

0000018e <__c.4653>:
     18e:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     19e:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1ae:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001bb <__c.4646>:
     1bb:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1cb:	68 65 64 2e 0d 0a 00                                hed....

000001d2 <__c.4641>:
     1d2:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     1e2:	0d 0a 00                                            ...

000001e5 <__c.4580>:
     1e5:	4d 49 44 49 20 4e 6f 74 65 20 25 73 20 2d 20 43     MIDI Note %s - C
     1f5:	68 61 6e 6e 65 6c 20 25 64 2c 20 50 69 74 63 68     hannel %d, Pitch
     205:	20 25 64 2c 20 56 65 6c 6f 63 69 74 79 20 25 64      %d, Velocity %d
     215:	0d 0a 00                                            ...

00000218 <__c.4564>:
     218:	1b 5b 33 36 6d 4d 49 44 49 20 48 6f 73 74 20 44     .[36mMIDI Host D
     228:	65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b     emo running....[
     238:	33 37 6d 00                                         37m.

0000023c <__ctors_end>:
     23c:	11 24       	eor	r1, r1
     23e:	1f be       	out	0x3f, r1	; 63
     240:	cf ef       	ldi	r28, 0xFF	; 255
     242:	d0 e2       	ldi	r29, 0x20	; 32
     244:	de bf       	out	0x3e, r29	; 62
     246:	cd bf       	out	0x3d, r28	; 61

00000248 <__do_copy_data>:
     248:	11 e0       	ldi	r17, 0x01	; 1
     24a:	a0 e0       	ldi	r26, 0x00	; 0
     24c:	b1 e0       	ldi	r27, 0x01	; 1
     24e:	ee e7       	ldi	r30, 0x7E	; 126
     250:	fb e1       	ldi	r31, 0x1B	; 27
     252:	00 e0       	ldi	r16, 0x00	; 0
     254:	0b bf       	out	0x3b, r16	; 59
     256:	02 c0       	rjmp	.+4      	; 0x25c <__do_copy_data+0x14>
     258:	07 90       	elpm	r0, Z+
     25a:	0d 92       	st	X+, r0
     25c:	a2 32       	cpi	r26, 0x22	; 34
     25e:	b1 07       	cpc	r27, r17
     260:	d9 f7       	brne	.-10     	; 0x258 <__do_copy_data+0x10>

00000262 <__do_clear_bss>:
     262:	11 e0       	ldi	r17, 0x01	; 1
     264:	a2 e2       	ldi	r26, 0x22	; 34
     266:	b1 e0       	ldi	r27, 0x01	; 1
     268:	01 c0       	rjmp	.+2      	; 0x26c <.do_clear_bss_start>

0000026a <.do_clear_bss_loop>:
     26a:	1d 92       	st	X+, r1

0000026c <.do_clear_bss_start>:
     26c:	a5 34       	cpi	r26, 0x45	; 69
     26e:	b1 07       	cpc	r27, r17
     270:	e1 f7       	brne	.-8      	; 0x26a <.do_clear_bss_loop>
     272:	c7 d1       	rcall	.+910    	; 0x602 <main>
     274:	0c 94 bd 0d 	jmp	0x1b7a	; 0x1b7a <_exit>

00000278 <__bad_interrupt>:
     278:	c3 ce       	rjmp	.-634    	; 0x0 <__vectors>

0000027a <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     27a:	90 91 30 01 	lds	r25, 0x0130
     27e:	2d b7       	in	r18, 0x3d	; 61
     280:	3e b7       	in	r19, 0x3e	; 62
     282:	28 50       	subi	r18, 0x08	; 8
     284:	30 40       	sbci	r19, 0x00	; 0
     286:	0f b6       	in	r0, 0x3f	; 63
     288:	f8 94       	cli
     28a:	3e bf       	out	0x3e, r19	; 62
     28c:	0f be       	out	0x3f, r0	; 63
     28e:	2d bf       	out	0x3d, r18	; 61
     290:	ed b7       	in	r30, 0x3d	; 61
     292:	fe b7       	in	r31, 0x3e	; 62
     294:	31 96       	adiw	r30, 0x01	; 1
     296:	28 e9       	ldi	r18, 0x98	; 152
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	ad b7       	in	r26, 0x3d	; 61
     29c:	be b7       	in	r27, 0x3e	; 62
     29e:	12 96       	adiw	r26, 0x02	; 2
     2a0:	3c 93       	st	X, r19
     2a2:	2e 93       	st	-X, r18
     2a4:	11 97       	sbiw	r26, 0x01	; 1
     2a6:	82 83       	std	Z+2, r24	; 0x02
     2a8:	13 82       	std	Z+3, r1	; 0x03
     2aa:	64 83       	std	Z+4, r22	; 0x04
     2ac:	15 82       	std	Z+5, r1	; 0x05
     2ae:	96 83       	std	Z+6, r25	; 0x06
     2b0:	17 82       	std	Z+7, r1	; 0x07
     2b2:	0e 94 cd 0a 	call	0x159a	; 0x159a <printf_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     2b6:	8b b1       	in	r24, 0x0b	; 11
     2b8:	8f 70       	andi	r24, 0x0F	; 15
     2ba:	80 69       	ori	r24, 0x90	; 144
     2bc:	8b b9       	out	0x0b, r24	; 11
     2be:	2d b7       	in	r18, 0x3d	; 61
     2c0:	3e b7       	in	r19, 0x3e	; 62
     2c2:	28 5f       	subi	r18, 0xF8	; 248
     2c4:	3f 4f       	sbci	r19, 0xFF	; 255
     2c6:	0f b6       	in	r0, 0x3f	; 63
     2c8:	f8 94       	cli
     2ca:	3e bf       	out	0x3e, r19	; 62
     2cc:	0f be       	out	0x3f, r0	; 63
     2ce:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     2d0:	08 95       	ret

000002d2 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     2d2:	1f 93       	push	r17
     2d4:	18 2f       	mov	r17, r24
	USB_Disable();
     2d6:	88 d4       	rcall	.+2320   	; 0xbe8 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     2d8:	00 d0       	rcall	.+0      	; 0x2da <EVENT_USB_Host_HostError+0x8>
     2da:	00 d0       	rcall	.+0      	; 0x2dc <EVENT_USB_Host_HostError+0xa>
     2dc:	ed b7       	in	r30, 0x3d	; 61
     2de:	fe b7       	in	r31, 0x3e	; 62
     2e0:	31 96       	adiw	r30, 0x01	; 1
     2e2:	8e ee       	ldi	r24, 0xEE	; 238
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	ad b7       	in	r26, 0x3d	; 61
     2e8:	be b7       	in	r27, 0x3e	; 62
     2ea:	12 96       	adiw	r26, 0x02	; 2
     2ec:	9c 93       	st	X, r25
     2ee:	8e 93       	st	-X, r24
     2f0:	11 97       	sbiw	r26, 0x01	; 1
     2f2:	12 83       	std	Z+2, r17	; 0x02
     2f4:	13 82       	std	Z+3, r1	; 0x03
     2f6:	0e 94 cd 0a 	call	0x159a	; 0x159a <printf_P>
     2fa:	8b b1       	in	r24, 0x0b	; 11
     2fc:	8f 70       	andi	r24, 0x0F	; 15
     2fe:	80 69       	ori	r24, 0x90	; 144
     300:	8b b9       	out	0x0b, r24	; 11
     302:	0f 90       	pop	r0
     304:	0f 90       	pop	r0
     306:	0f 90       	pop	r0
     308:	0f 90       	pop	r0
     30a:	ff cf       	rjmp	.-2      	; 0x30a <EVENT_USB_Host_HostError+0x38>

0000030c <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     30c:	8b eb       	ldi	r24, 0xBB	; 187
     30e:	91 e0       	ldi	r25, 0x01	; 1
     310:	0e 94 ef 0a 	call	0x15de	; 0x15de <puts_P>
     314:	8b b1       	in	r24, 0x0b	; 11
     316:	8f 70       	andi	r24, 0x0F	; 15
     318:	80 61       	ori	r24, 0x10	; 16
     31a:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     31c:	08 95       	ret

0000031e <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     31e:	82 ed       	ldi	r24, 0xD2	; 210
     320:	91 e0       	ldi	r25, 0x01	; 1
     322:	0e 94 ef 0a 	call	0x15de	; 0x15de <puts_P>
     326:	8b b1       	in	r24, 0x0b	; 11
     328:	8f 70       	andi	r24, 0x0F	; 15
     32a:	80 6a       	ori	r24, 0xA0	; 160
     32c:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     32e:	08 95       	ret

00000330 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     330:	0f 93       	push	r16
     332:	1f 93       	push	r17
     334:	df 93       	push	r29
     336:	cf 93       	push	r28
     338:	cd b7       	in	r28, 0x3d	; 61
     33a:	de b7       	in	r29, 0x3e	; 62
     33c:	c2 50       	subi	r28, 0x02	; 2
     33e:	d2 40       	sbci	r29, 0x02	; 2
     340:	0f b6       	in	r0, 0x3f	; 63
     342:	f8 94       	cli
     344:	de bf       	out	0x3e, r29	; 62
     346:	0f be       	out	0x3f, r0	; 63
     348:	cd bf       	out	0x3d, r28	; 61
     34a:	8b b1       	in	r24, 0x0b	; 11
     34c:	8f 70       	andi	r24, 0x0F	; 15
     34e:	80 6a       	ori	r24, 0xA0	; 160
     350:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     352:	8e 01       	movw	r16, r28
     354:	0d 5f       	subi	r16, 0xFD	; 253
     356:	1f 4f       	sbci	r17, 0xFF	; 255
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	be 01       	movw	r22, r28
     35c:	6f 5f       	subi	r22, 0xFF	; 255
     35e:	7f 4f       	sbci	r23, 0xFF	; 255
     360:	a8 01       	movw	r20, r16
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	32 e0       	ldi	r19, 0x02	; 2
     366:	ea d5       	rcall	.+3028   	; 0xf3c <USB_Host_GetDeviceConfigDescriptor>
     368:	88 23       	and	r24, r24
     36a:	19 f0       	breq	.+6      	; 0x372 <EVENT_USB_Host_DeviceEnumerationComplete+0x42>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     36c:	8e e8       	ldi	r24, 0x8E	; 142
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	12 c0       	rjmp	.+36     	; 0x396 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (MIDI_Host_ConfigurePipes(&Keyboard_MIDI_Interface,
     372:	69 81       	ldd	r22, Y+1	; 0x01
     374:	7a 81       	ldd	r23, Y+2	; 0x02
     376:	87 e0       	ldi	r24, 0x07	; 7
     378:	91 e0       	ldi	r25, 0x01	; 1
     37a:	a8 01       	movw	r20, r16
     37c:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <MIDI_Host_ConfigurePipes>
     380:	88 23       	and	r24, r24
     382:	19 f0       	breq	.+6      	; 0x38a <EVENT_USB_Host_DeviceEnumerationComplete+0x5a>
	                             ConfigDescriptorSize, ConfigDescriptorData) != MIDI_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid MIDI Class Device.\r\n"));
     384:	8d e5       	ldi	r24, 0x5D	; 93
     386:	91 e0       	ldi	r25, 0x01	; 1
     388:	06 c0       	rjmp	.+12     	; 0x396 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	79 d7       	rcall	.+3826   	; 0x1280 <USB_Host_SetDeviceConfiguration>
     38e:	88 23       	and	r24, r24
     390:	41 f0       	breq	.+16     	; 0x3a2 <EVENT_USB_Host_DeviceEnumerationComplete+0x72>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     392:	87 e3       	ldi	r24, 0x37	; 55
     394:	91 e0       	ldi	r25, 0x01	; 1
     396:	0e 94 ef 0a 	call	0x15de	; 0x15de <puts_P>
     39a:	8b b1       	in	r24, 0x0b	; 11
     39c:	8f 70       	andi	r24, 0x0F	; 15
     39e:	80 69       	ori	r24, 0x90	; 144
     3a0:	07 c0       	rjmp	.+14     	; 0x3b0 <EVENT_USB_Host_DeviceEnumerationComplete+0x80>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	puts_P(PSTR("MIDI Device Enumerated.\r\n"));
     3a2:	8d e1       	ldi	r24, 0x1D	; 29
     3a4:	91 e0       	ldi	r25, 0x01	; 1
     3a6:	0e 94 ef 0a 	call	0x15de	; 0x15de <puts_P>
     3aa:	8b b1       	in	r24, 0x0b	; 11
     3ac:	8f 70       	andi	r24, 0x0F	; 15
     3ae:	80 66       	ori	r24, 0x60	; 96
     3b0:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     3b2:	ce 5f       	subi	r28, 0xFE	; 254
     3b4:	dd 4f       	sbci	r29, 0xFD	; 253
     3b6:	0f b6       	in	r0, 0x3f	; 63
     3b8:	f8 94       	cli
     3ba:	de bf       	out	0x3e, r29	; 62
     3bc:	0f be       	out	0x3f, r0	; 63
     3be:	cd bf       	out	0x3d, r28	; 61
     3c0:	cf 91       	pop	r28
     3c2:	df 91       	pop	r29
     3c4:	1f 91       	pop	r17
     3c6:	0f 91       	pop	r16
     3c8:	08 95       	ret

000003ca <CheckJoystickMovement>:

/** Checks for movement of the board's joystick, and sends corresponding MIDI note on/off
 *  messages to the host.
 */
void CheckJoystickMovement(void)
{
     3ca:	1f 93       	push	r17
     3cc:	df 93       	push	r29
     3ce:	cf 93       	push	r28
     3d0:	00 d0       	rcall	.+0      	; 0x3d2 <CheckJoystickMovement+0x8>
     3d2:	00 d0       	rcall	.+0      	; 0x3d4 <CheckJoystickMovement+0xa>
     3d4:	cd b7       	in	r28, 0x3d	; 61
     3d6:	de b7       	in	r29, 0x3e	; 62
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     3d8:	13 b1       	in	r17, 0x03	; 3
     3da:	8c b1       	in	r24, 0x0c	; 12
     3dc:	80 95       	com	r24
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	80 73       	andi	r24, 0x30	; 48
     3e2:	90 70       	andi	r25, 0x00	; 0
     3e4:	95 95       	asr	r25
     3e6:	87 95       	ror	r24
     3e8:	10 95       	com	r17
     3ea:	10 7e       	andi	r17, 0xE0	; 224
     3ec:	18 2b       	or	r17, r24
	uint8_t MIDICommand = 0;
	uint8_t MIDIPitch;

	/* Get current joystick mask, XOR with previous to detect joystick changes */
	uint8_t JoystickStatus  = Joystick_GetStatus();
	uint8_t JoystickChanges = (JoystickStatus ^ PrevJoystickStatus);
     3ee:	90 91 22 01 	lds	r25, 0x0122
     3f2:	91 27       	eor	r25, r17

	/* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 1 */
	uint8_t Channel = ((Buttons_GetStatus() & BUTTONS_BUTTON1) ? MIDI_CHANNEL(10) : MIDI_CHANNEL(1));
     3f4:	62 9b       	sbis	0x0c, 2	; 12
     3f6:	02 c0       	rjmp	.+4      	; 0x3fc <CheckJoystickMovement+0x32>
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	01 c0       	rjmp	.+2      	; 0x3fe <CheckJoystickMovement+0x34>
     3fc:	39 e0       	ldi	r19, 0x09	; 9

	if (JoystickChanges & JOY_LEFT)
     3fe:	96 ff       	sbrs	r25, 6
     400:	07 c0       	rjmp	.+14     	; 0x410 <CheckJoystickMovement+0x46>
	{
		MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     402:	16 fd       	sbrc	r17, 6
     404:	02 c0       	rjmp	.+4      	; 0x40a <CheckJoystickMovement+0x40>
     406:	20 e8       	ldi	r18, 0x80	; 128
     408:	01 c0       	rjmp	.+2      	; 0x40c <CheckJoystickMovement+0x42>
     40a:	20 e9       	ldi	r18, 0x90	; 144
     40c:	9c e3       	ldi	r25, 0x3C	; 60
     40e:	23 c0       	rjmp	.+70     	; 0x456 <CheckJoystickMovement+0x8c>
		MIDIPitch   = 0x3C;
	}
	else if (JoystickChanges & JOY_UP)
     410:	97 ff       	sbrs	r25, 7
     412:	07 c0       	rjmp	.+14     	; 0x422 <CheckJoystickMovement+0x58>
	{
		MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     414:	17 fd       	sbrc	r17, 7
     416:	02 c0       	rjmp	.+4      	; 0x41c <CheckJoystickMovement+0x52>
     418:	20 e8       	ldi	r18, 0x80	; 128
     41a:	01 c0       	rjmp	.+2      	; 0x41e <CheckJoystickMovement+0x54>
     41c:	20 e9       	ldi	r18, 0x90	; 144
     41e:	9d e3       	ldi	r25, 0x3D	; 61
     420:	1a c0       	rjmp	.+52     	; 0x456 <CheckJoystickMovement+0x8c>
		MIDIPitch   = 0x3D;
	}
	else if (JoystickChanges & JOY_RIGHT)
     422:	93 ff       	sbrs	r25, 3
     424:	07 c0       	rjmp	.+14     	; 0x434 <CheckJoystickMovement+0x6a>
	{
		MIDICommand = ((JoystickStatus & JOY_RIGHT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     426:	13 fd       	sbrc	r17, 3
     428:	02 c0       	rjmp	.+4      	; 0x42e <CheckJoystickMovement+0x64>
     42a:	20 e8       	ldi	r18, 0x80	; 128
     42c:	01 c0       	rjmp	.+2      	; 0x430 <CheckJoystickMovement+0x66>
     42e:	20 e9       	ldi	r18, 0x90	; 144
     430:	9e e3       	ldi	r25, 0x3E	; 62
     432:	11 c0       	rjmp	.+34     	; 0x456 <CheckJoystickMovement+0x8c>
		MIDIPitch   = 0x3E;
	}
	else if (JoystickChanges & JOY_DOWN)
     434:	94 ff       	sbrs	r25, 4
     436:	07 c0       	rjmp	.+14     	; 0x446 <CheckJoystickMovement+0x7c>
	{
		MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     438:	14 fd       	sbrc	r17, 4
     43a:	02 c0       	rjmp	.+4      	; 0x440 <CheckJoystickMovement+0x76>
     43c:	20 e8       	ldi	r18, 0x80	; 128
     43e:	01 c0       	rjmp	.+2      	; 0x442 <CheckJoystickMovement+0x78>
     440:	20 e9       	ldi	r18, 0x90	; 144
     442:	9f e3       	ldi	r25, 0x3F	; 63
     444:	08 c0       	rjmp	.+16     	; 0x456 <CheckJoystickMovement+0x8c>
		MIDIPitch   = 0x3F;
	}
	else if (JoystickChanges & JOY_PRESS)
     446:	95 ff       	sbrs	r25, 5
     448:	18 c0       	rjmp	.+48     	; 0x47a <CheckJoystickMovement+0xb0>
	{
		MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     44a:	15 fd       	sbrc	r17, 5
     44c:	02 c0       	rjmp	.+4      	; 0x452 <CheckJoystickMovement+0x88>
     44e:	20 e8       	ldi	r18, 0x80	; 128
     450:	01 c0       	rjmp	.+2      	; 0x454 <CheckJoystickMovement+0x8a>
     452:	20 e9       	ldi	r18, 0x90	; 144
     454:	9b e3       	ldi	r25, 0x3B	; 59
				.Command     = (MIDICommand >> 4),

				.Data1       = MIDICommand | Channel,
				.Data2       = MIDIPitch,
				.Data3       = MIDI_STANDARD_VELOCITY,
			};
     456:	82 2f       	mov	r24, r18
     458:	82 95       	swap	r24
     45a:	8f 70       	andi	r24, 0x0F	; 15
     45c:	89 83       	std	Y+1, r24	; 0x01
     45e:	23 2b       	or	r18, r19
     460:	2a 83       	std	Y+2, r18	; 0x02
     462:	9b 83       	std	Y+3, r25	; 0x03
     464:	80 e4       	ldi	r24, 0x40	; 64
     466:	8c 83       	std	Y+4, r24	; 0x04

		MIDI_Host_SendEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent);
     468:	87 e0       	ldi	r24, 0x07	; 7
     46a:	91 e0       	ldi	r25, 0x01	; 1
     46c:	be 01       	movw	r22, r28
     46e:	6f 5f       	subi	r22, 0xFF	; 255
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	6f d7       	rcall	.+3806   	; 0x1352 <MIDI_Host_SendEventPacket>
		MIDI_Host_Flush(&Keyboard_MIDI_Interface);
     474:	87 e0       	ldi	r24, 0x07	; 7
     476:	91 e0       	ldi	r25, 0x01	; 1
     478:	8d d7       	rcall	.+3866   	; 0x1394 <MIDI_Host_Flush>
	}

	PrevJoystickStatus = JoystickStatus;
     47a:	10 93 22 01 	sts	0x0122, r17
}
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0
     482:	0f 90       	pop	r0
     484:	0f 90       	pop	r0
     486:	cf 91       	pop	r28
     488:	df 91       	pop	r29
     48a:	1f 91       	pop	r17
     48c:	08 95       	ret

0000048e <JoystickHost_Task>:

/** Task to manage an enumerated USB MIDI device once connected, to display received
 *  note events from the host and send note changes in response to tbe board's joystick.
 */
void JoystickHost_Task(void)
{
     48e:	ef 92       	push	r14
     490:	ff 92       	push	r15
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	df 93       	push	r29
     498:	cf 93       	push	r28
     49a:	00 d0       	rcall	.+0      	; 0x49c <JoystickHost_Task+0xe>
     49c:	00 d0       	rcall	.+0      	; 0x49e <JoystickHost_Task+0x10>
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
	if (USB_HostState != HOST_STATE_Configured)
     4a2:	80 91 30 01 	lds	r24, 0x0130
     4a6:	8b 30       	cpi	r24, 0x0B	; 11
     4a8:	09 f0       	breq	.+2      	; 0x4ac <JoystickHost_Task+0x1e>
     4aa:	49 c0       	rjmp	.+146    	; 0x53e <JoystickHost_Task+0xb0>
     4ac:	3a c0       	rjmp	.+116    	; 0x522 <JoystickHost_Task+0x94>
	  return;

	MIDI_EventPacket_t MIDIEvent;
	while (MIDI_Host_ReceiveEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent))
	{
		bool NoteOnEvent  = ((MIDIEvent.Command & 0x0F) == (MIDI_COMMAND_NOTE_ON  >> 4));
     4ae:	89 81       	ldd	r24, Y+1	; 0x01
     4b0:	8f 70       	andi	r24, 0x0F	; 15
     4b2:	90 e0       	ldi	r25, 0x00	; 0
		bool NoteOffEvent = ((MIDIEvent.Command & 0x0F) == (MIDI_COMMAND_NOTE_OFF >> 4));

		/* Display note events from the host */
		if (NoteOnEvent || NoteOffEvent)
     4b4:	89 30       	cpi	r24, 0x09	; 9
     4b6:	91 05       	cpc	r25, r1
     4b8:	19 f4       	brne	.+6      	; 0x4c0 <JoystickHost_Task+0x32>
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	04 c0       	rjmp	.+8      	; 0x4c8 <JoystickHost_Task+0x3a>
     4c0:	08 97       	sbiw	r24, 0x08	; 8
     4c2:	a9 f5       	brne	.+106    	; 0x52e <JoystickHost_Task+0xa0>
     4c4:	83 e0       	ldi	r24, 0x03	; 3
     4c6:	91 e0       	ldi	r25, 0x01	; 1
		{
			printf_P(PSTR("MIDI Note %s - Channel %d, Pitch %d, Velocity %d\r\n"), NoteOnEvent ? "On" : "Off",
     4c8:	2d b7       	in	r18, 0x3d	; 61
     4ca:	3e b7       	in	r19, 0x3e	; 62
     4cc:	2a 50       	subi	r18, 0x0A	; 10
     4ce:	30 40       	sbci	r19, 0x00	; 0
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	f8 94       	cli
     4d4:	3e bf       	out	0x3e, r19	; 62
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	2d bf       	out	0x3d, r18	; 61
     4da:	ed b7       	in	r30, 0x3d	; 61
     4dc:	fe b7       	in	r31, 0x3e	; 62
     4de:	31 96       	adiw	r30, 0x01	; 1
     4e0:	ad b7       	in	r26, 0x3d	; 61
     4e2:	be b7       	in	r27, 0x3e	; 62
     4e4:	12 96       	adiw	r26, 0x02	; 2
     4e6:	1c 93       	st	X, r17
     4e8:	0e 93       	st	-X, r16
     4ea:	11 97       	sbiw	r26, 0x01	; 1
     4ec:	93 83       	std	Z+3, r25	; 0x03
     4ee:	82 83       	std	Z+2, r24	; 0x02
     4f0:	8a 81       	ldd	r24, Y+2	; 0x02
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	8f 70       	andi	r24, 0x0F	; 15
     4f6:	90 70       	andi	r25, 0x00	; 0
     4f8:	01 96       	adiw	r24, 0x01	; 1
     4fa:	95 83       	std	Z+5, r25	; 0x05
     4fc:	84 83       	std	Z+4, r24	; 0x04
     4fe:	8b 81       	ldd	r24, Y+3	; 0x03
     500:	86 83       	std	Z+6, r24	; 0x06
     502:	17 82       	std	Z+7, r1	; 0x07
     504:	8c 81       	ldd	r24, Y+4	; 0x04
     506:	80 87       	std	Z+8, r24	; 0x08
     508:	11 86       	std	Z+9, r1	; 0x09
     50a:	0e 94 cd 0a 	call	0x159a	; 0x159a <printf_P>
     50e:	2d b7       	in	r18, 0x3d	; 61
     510:	3e b7       	in	r19, 0x3e	; 62
     512:	26 5f       	subi	r18, 0xF6	; 246
     514:	3f 4f       	sbci	r19, 0xFF	; 255
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	f8 94       	cli
     51a:	3e bf       	out	0x3e, r19	; 62
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	2d bf       	out	0x3d, r18	; 61
     520:	06 c0       	rjmp	.+12     	; 0x52e <JoystickHost_Task+0xa0>
{
	if (USB_HostState != HOST_STATE_Configured)
	  return;

	MIDI_EventPacket_t MIDIEvent;
	while (MIDI_Host_ReceiveEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent))
     522:	7e 01       	movw	r14, r28
     524:	08 94       	sec
     526:	e1 1c       	adc	r14, r1
     528:	f1 1c       	adc	r15, r1
		bool NoteOffEvent = ((MIDIEvent.Command & 0x0F) == (MIDI_COMMAND_NOTE_OFF >> 4));

		/* Display note events from the host */
		if (NoteOnEvent || NoteOffEvent)
		{
			printf_P(PSTR("MIDI Note %s - Channel %d, Pitch %d, Velocity %d\r\n"), NoteOnEvent ? "On" : "Off",
     52a:	05 ee       	ldi	r16, 0xE5	; 229
     52c:	11 e0       	ldi	r17, 0x01	; 1
{
	if (USB_HostState != HOST_STATE_Configured)
	  return;

	MIDI_EventPacket_t MIDIEvent;
	while (MIDI_Host_ReceiveEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent))
     52e:	87 e0       	ldi	r24, 0x07	; 7
     530:	91 e0       	ldi	r25, 0x01	; 1
     532:	b7 01       	movw	r22, r14
     534:	ea d6       	rcall	.+3540   	; 0x130a <MIDI_Host_ReceiveEventPacket>
     536:	88 23       	and	r24, r24
     538:	09 f0       	breq	.+2      	; 0x53c <JoystickHost_Task+0xae>
     53a:	b9 cf       	rjmp	.-142    	; 0x4ae <JoystickHost_Task+0x20>
																				   ((MIDIEvent.Data1 & 0x0F) + 1),
																				   MIDIEvent.Data2, MIDIEvent.Data3);
		}
	}

	CheckJoystickMovement();
     53c:	46 df       	rcall	.-372    	; 0x3ca <CheckJoystickMovement>
}
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
     542:	0f 90       	pop	r0
     544:	0f 90       	pop	r0
     546:	cf 91       	pop	r28
     548:	df 91       	pop	r29
     54a:	1f 91       	pop	r17
     54c:	0f 91       	pop	r16
     54e:	ff 90       	pop	r15
     550:	ef 90       	pop	r14
     552:	08 95       	ret

00000554 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     554:	84 b7       	in	r24, 0x34	; 52
     556:	87 7f       	andi	r24, 0xF7	; 247
     558:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     55a:	28 e1       	ldi	r18, 0x18	; 24
     55c:	0f b6       	in	r0, 0x3f	; 63
     55e:	f8 94       	cli
     560:	20 93 60 00 	sts	0x0060, r18
     564:	10 92 60 00 	sts	0x0060, r1
     568:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	80 e8       	ldi	r24, 0x80	; 128
     56e:	0f b6       	in	r0, 0x3f	; 63
     570:	f8 94       	cli
     572:	80 93 61 00 	sts	0x0061, r24
     576:	90 93 61 00 	sts	0x0061, r25
     57a:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     57c:	83 e3       	ldi	r24, 0x33	; 51
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	90 93 cd 00 	sts	0x00CD, r25
     584:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     588:	86 e0       	ldi	r24, 0x06	; 6
     58a:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     58e:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     592:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     596:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     598:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     59a:	8a b1       	in	r24, 0x0a	; 10
     59c:	80 6f       	ori	r24, 0xF0	; 240
     59e:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     5a0:	8b b1       	in	r24, 0x0b	; 11
     5a2:	8f 70       	andi	r24, 0x0F	; 15
     5a4:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     5a6:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     5a8:	72 9a       	sbi	0x0e, 2	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
     5aa:	84 b1       	in	r24, 0x04	; 4
     5ac:	8f 71       	andi	r24, 0x1F	; 31
     5ae:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
     5b0:	8d b1       	in	r24, 0x0d	; 13
     5b2:	8f 7c       	andi	r24, 0xCF	; 207
     5b4:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
     5b6:	85 b1       	in	r24, 0x05	; 5
     5b8:	80 6e       	ori	r24, 0xE0	; 224
     5ba:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
     5bc:	8e b1       	in	r24, 0x0e	; 14
     5be:	80 63       	ori	r24, 0x30	; 48
     5c0:	8e b9       	out	0x0e, r24	; 14
	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	Buttons_Init();
	Joystick_Init();
	USB_Init();
     5c2:	09 d3       	rcall	.+1554   	; 0xbd6 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     5c4:	e1 e3       	ldi	r30, 0x31	; 49
     5c6:	f1 e0       	ldi	r31, 0x01	; 1
     5c8:	f0 93 40 01 	sts	0x0140, r31
     5cc:	e0 93 3f 01 	sts	0x013F, r30
					stdout = Stream;
     5d0:	f0 93 42 01 	sts	0x0142, r31
     5d4:	e0 93 41 01 	sts	0x0141, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     5d8:	8e e0       	ldi	r24, 0x0E	; 14
     5da:	df 01       	movw	r26, r30
     5dc:	1d 92       	st	X+, r1
     5de:	8a 95       	dec	r24
     5e0:	e9 f7       	brne	.-6      	; 0x5dc <SetupHardware+0x88>
     5e2:	83 e0       	ldi	r24, 0x03	; 3
     5e4:	80 93 34 01 	sts	0x0134, r24
     5e8:	8f ea       	ldi	r24, 0xAF	; 175
     5ea:	9a e0       	ldi	r25, 0x0A	; 10
     5ec:	90 93 3a 01 	sts	0x013A, r25
     5f0:	80 93 39 01 	sts	0x0139, r24
     5f4:	89 eb       	ldi	r24, 0xB9	; 185
     5f6:	9a e0       	ldi	r25, 0x0A	; 10
     5f8:	90 93 3c 01 	sts	0x013C, r25
     5fc:	80 93 3b 01 	sts	0x013B, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     600:	08 95       	ret

00000602 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     602:	a8 df       	rcall	.-176    	; 0x554 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "MIDI Host Demo running.\r\n" ESC_FG_WHITE));
     604:	88 e1       	ldi	r24, 0x18	; 24
     606:	92 e0       	ldi	r25, 0x02	; 2
     608:	ea d7       	rcall	.+4052   	; 0x15de <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     60a:	8b b1       	in	r24, 0x0b	; 11
     60c:	8f 70       	andi	r24, 0x0F	; 15
     60e:	80 61       	ori	r24, 0x10	; 16
     610:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     612:	78 94       	sei

	for (;;)
	{
		JoystickHost_Task();
     614:	3c df       	rcall	.-392    	; 0x48e <JoystickHost_Task>

		MIDI_Host_USBTask(&Keyboard_MIDI_Interface);
     616:	87 e0       	ldi	r24, 0x07	; 7
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	d7 d6       	rcall	.+3502   	; 0x13ca <MIDI_Host_USBTask>
		USB_USBTask();
     61c:	56 d6       	rcall	.+3244   	; 0x12ca <USB_USBTask>
     61e:	fa cf       	rjmp	.-12     	; 0x614 <main+0x12>

00000620 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     620:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     622:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     626:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     62a:	80 91 a0 00 	lds	r24, 0x00A0
     62e:	8f 7d       	andi	r24, 0xDF	; 223
     630:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     634:	80 91 9f 00 	lds	r24, 0x009F
     638:	8f 7d       	andi	r24, 0xDF	; 223
     63a:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     63e:	80 91 9e 00 	lds	r24, 0x009E
     642:	81 60       	ori	r24, 0x01	; 1
     644:	80 93 9e 00 	sts	0x009E, r24
     648:	28 c0       	rjmp	.+80     	; 0x69a <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     64a:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     64e:	85 ff       	sbrs	r24, 5
     650:	06 c0       	rjmp	.+12     	; 0x65e <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     652:	80 91 9f 00 	lds	r24, 0x009F
     656:	8f 7d       	andi	r24, 0xDF	; 223
     658:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     65c:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     65e:	80 91 30 01 	lds	r24, 0x0130
     662:	81 30       	cpi	r24, 0x01	; 1
     664:	11 f4       	brne	.+4      	; 0x66a <USB_Host_WaitMS+0x4a>
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	1a c0       	rjmp	.+52     	; 0x69e <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     66a:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     66e:	84 ff       	sbrs	r24, 4
     670:	09 c0       	rjmp	.+18     	; 0x684 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     672:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     676:	80 91 a6 00 	lds	r24, 0x00A6
     67a:	8f 7e       	andi	r24, 0xEF	; 239
     67c:	80 93 a6 00 	sts	0x00A6, r24
     680:	92 e0       	ldi	r25, 0x02	; 2
     682:	0d c0       	rjmp	.+26     	; 0x69e <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     684:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     688:	81 ff       	sbrs	r24, 1
     68a:	07 c0       	rjmp	.+14     	; 0x69a <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     68c:	80 91 a6 00 	lds	r24, 0x00A6
     690:	8d 7f       	andi	r24, 0xFD	; 253
     692:	80 93 a6 00 	sts	0x00A6, r24
     696:	93 e0       	ldi	r25, 0x03	; 3
     698:	02 c0       	rjmp	.+4      	; 0x69e <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     69a:	99 23       	and	r25, r25
     69c:	b1 f6       	brne	.-84     	; 0x64a <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     69e:	20 fd       	sbrc	r18, 0
     6a0:	05 c0       	rjmp	.+10     	; 0x6ac <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     6a2:	80 91 9e 00 	lds	r24, 0x009E
     6a6:	8e 7f       	andi	r24, 0xFE	; 254
     6a8:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     6ac:	35 ff       	sbrs	r19, 5
     6ae:	05 c0       	rjmp	.+10     	; 0x6ba <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     6b0:	80 91 a0 00 	lds	r24, 0x00A0
     6b4:	80 62       	ori	r24, 0x20	; 32
     6b6:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     6ba:	89 2f       	mov	r24, r25
     6bc:	08 95       	ret

000006be <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     6be:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     6c2:	80 91 a0 00 	lds	r24, 0x00A0
     6c6:	8d 7f       	andi	r24, 0xFD	; 253
     6c8:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     6cc:	80 91 9e 00 	lds	r24, 0x009E
     6d0:	82 60       	ori	r24, 0x02	; 2
     6d2:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     6d6:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     6da:	81 fd       	sbrc	r24, 1
     6dc:	fc cf       	rjmp	.-8      	; 0x6d6 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6de:	80 91 9e 00 	lds	r24, 0x009E
     6e2:	81 60       	ori	r24, 0x01	; 1
     6e4:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     6e8:	10 92 26 01 	sts	0x0126, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     6ec:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     6f0:	80 91 a0 00 	lds	r24, 0x00A0
     6f4:	8f 7d       	andi	r24, 0xDF	; 223
     6f6:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6fa:	80 91 9f 00 	lds	r24, 0x009F
     6fe:	8f 7d       	andi	r24, 0xDF	; 223
     700:	80 93 9f 00 	sts	0x009F, r24
     704:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     706:	40 ed       	ldi	r20, 0xD0	; 208
     708:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     70a:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     70e:	85 ff       	sbrs	r24, 5
     710:	0b c0       	rjmp	.+22     	; 0x728 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     712:	80 91 9f 00 	lds	r24, 0x009F
     716:	8f 7d       	andi	r24, 0xDF	; 223
     718:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     71c:	80 91 9f 00 	lds	r24, 0x009F
     720:	8d 7f       	andi	r24, 0xFD	; 253
     722:	80 93 9f 00 	sts	0x009F, r24
     726:	05 c0       	rjmp	.+10     	; 0x732 <USB_Host_ResetDevice+0x74>
     728:	ca 01       	movw	r24, r20
     72a:	01 97       	sbiw	r24, 0x01	; 1
     72c:	f1 f7       	brne	.-4      	; 0x72a <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     72e:	21 50       	subi	r18, 0x01	; 1
     730:	61 f7       	brne	.-40     	; 0x70a <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     732:	35 ff       	sbrs	r19, 5
     734:	05 c0       	rjmp	.+10     	; 0x740 <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     736:	80 91 a0 00 	lds	r24, 0x00A0
     73a:	80 62       	ori	r24, 0x20	; 32
     73c:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     740:	60 fd       	sbrc	r22, 0
     742:	05 c0       	rjmp	.+10     	; 0x74e <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     744:	80 91 9e 00 	lds	r24, 0x009E
     748:	8e 7f       	andi	r24, 0xFE	; 254
     74a:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     74e:	80 91 a0 00 	lds	r24, 0x00A0
     752:	82 60       	ori	r24, 0x02	; 2
     754:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     758:	08 95       	ret

0000075a <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     75a:	ef 92       	push	r14
     75c:	0f 93       	push	r16
     75e:	1f 93       	push	r17
     760:	df 93       	push	r29
     762:	cf 93       	push	r28
     764:	cd b7       	in	r28, 0x3d	; 61
     766:	de b7       	in	r29, 0x3e	; 62
     768:	28 97       	sbiw	r28, 0x08	; 8
     76a:	0f b6       	in	r0, 0x3f	; 63
     76c:	f8 94       	cli
     76e:	de bf       	out	0x3e, r29	; 62
     770:	0f be       	out	0x3f, r0	; 63
     772:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     774:	80 91 30 01 	lds	r24, 0x0130
     778:	85 30       	cpi	r24, 0x05	; 5
     77a:	09 f4       	brne	.+2      	; 0x77e <USB_Host_ProcessNextHostState+0x24>
     77c:	94 c0       	rjmp	.+296    	; 0x8a6 <USB_Host_ProcessNextHostState+0x14c>
     77e:	86 30       	cpi	r24, 0x06	; 6
     780:	68 f4       	brcc	.+26     	; 0x79c <USB_Host_ProcessNextHostState+0x42>
     782:	82 30       	cpi	r24, 0x02	; 2
     784:	b9 f1       	breq	.+110    	; 0x7f4 <USB_Host_ProcessNextHostState+0x9a>
     786:	83 30       	cpi	r24, 0x03	; 3
     788:	18 f4       	brcc	.+6      	; 0x790 <USB_Host_ProcessNextHostState+0x36>
     78a:	88 23       	and	r24, r24
     78c:	a1 f0       	breq	.+40     	; 0x7b6 <USB_Host_ProcessNextHostState+0x5c>
     78e:	04 c1       	rjmp	.+520    	; 0x998 <USB_Host_ProcessNextHostState+0x23e>
     790:	83 30       	cpi	r24, 0x03	; 3
     792:	d1 f1       	breq	.+116    	; 0x808 <USB_Host_ProcessNextHostState+0xae>
     794:	84 30       	cpi	r24, 0x04	; 4
     796:	09 f0       	breq	.+2      	; 0x79a <USB_Host_ProcessNextHostState+0x40>
     798:	ff c0       	rjmp	.+510    	; 0x998 <USB_Host_ProcessNextHostState+0x23e>
     79a:	5d c0       	rjmp	.+186    	; 0x856 <USB_Host_ProcessNextHostState+0xfc>
     79c:	87 30       	cpi	r24, 0x07	; 7
     79e:	09 f4       	brne	.+2      	; 0x7a2 <USB_Host_ProcessNextHostState+0x48>
     7a0:	9b c0       	rjmp	.+310    	; 0x8d8 <USB_Host_ProcessNextHostState+0x17e>
     7a2:	87 30       	cpi	r24, 0x07	; 7
     7a4:	08 f4       	brcc	.+2      	; 0x7a8 <USB_Host_ProcessNextHostState+0x4e>
     7a6:	8a c0       	rjmp	.+276    	; 0x8bc <USB_Host_ProcessNextHostState+0x162>
     7a8:	88 30       	cpi	r24, 0x08	; 8
     7aa:	09 f4       	brne	.+2      	; 0x7ae <USB_Host_ProcessNextHostState+0x54>
     7ac:	b3 c0       	rjmp	.+358    	; 0x914 <USB_Host_ProcessNextHostState+0x1ba>
     7ae:	89 30       	cpi	r24, 0x09	; 9
     7b0:	09 f0       	breq	.+2      	; 0x7b4 <USB_Host_ProcessNextHostState+0x5a>
     7b2:	f2 c0       	rjmp	.+484    	; 0x998 <USB_Host_ProcessNextHostState+0x23e>
     7b4:	d7 c0       	rjmp	.+430    	; 0x964 <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     7b6:	00 91 24 01 	lds	r16, 0x0124
     7ba:	10 91 25 01 	lds	r17, 0x0125
     7be:	01 15       	cp	r16, r1
     7c0:	11 05       	cpc	r17, r1
     7c2:	09 f4       	brne	.+2      	; 0x7c6 <USB_Host_ProcessNextHostState+0x6c>
     7c4:	e9 c0       	rjmp	.+466    	; 0x998 <USB_Host_ProcessNextHostState+0x23e>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	2b df       	rcall	.-426    	; 0x620 <USB_Host_WaitMS>
     7ca:	68 2f       	mov	r22, r24
     7cc:	88 23       	and	r24, r24
     7ce:	31 f0       	breq	.+12     	; 0x7dc <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
     7d0:	80 91 23 01 	lds	r24, 0x0123
     7d4:	80 93 30 01 	sts	0x0130, r24
     7d8:	91 e0       	ldi	r25, 0x01	; 1
     7da:	da c0       	rjmp	.+436    	; 0x990 <USB_Host_ProcessNextHostState+0x236>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     7dc:	c8 01       	movw	r24, r16
     7de:	01 97       	sbiw	r24, 0x01	; 1
     7e0:	90 93 25 01 	sts	0x0125, r25
     7e4:	80 93 24 01 	sts	0x0124, r24
     7e8:	89 2b       	or	r24, r25
     7ea:	09 f0       	breq	.+2      	; 0x7ee <USB_Host_ProcessNextHostState+0x94>
     7ec:	d5 c0       	rjmp	.+426    	; 0x998 <USB_Host_ProcessNextHostState+0x23e>
				  USB_HostState = PostWaitState;
     7ee:	80 91 23 01 	lds	r24, 0x0123
     7f2:	07 c0       	rjmp	.+14     	; 0x802 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     7f4:	88 ee       	ldi	r24, 0xE8	; 232
     7f6:	93 e0       	ldi	r25, 0x03	; 3
     7f8:	90 93 25 01 	sts	0x0125, r25
     7fc:	80 93 24 01 	sts	0x0124, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     800:	83 e0       	ldi	r24, 0x03	; 3
     802:	80 93 30 01 	sts	0x0130, r24
     806:	c8 c0       	rjmp	.+400    	; 0x998 <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     808:	80 91 24 01 	lds	r24, 0x0124
     80c:	90 91 25 01 	lds	r25, 0x0125
     810:	01 97       	sbiw	r24, 0x01	; 1
     812:	90 93 25 01 	sts	0x0125, r25
     816:	80 93 24 01 	sts	0x0124, r24
     81a:	01 96       	adiw	r24, 0x01	; 1
     81c:	29 f0       	breq	.+10     	; 0x828 <USB_Host_ProcessNextHostState+0xce>
     81e:	80 ed       	ldi	r24, 0xD0	; 208
     820:	97 e0       	ldi	r25, 0x07	; 7
     822:	01 97       	sbiw	r24, 0x01	; 1
     824:	f1 f7       	brne	.-4      	; 0x822 <USB_Host_ProcessNextHostState+0xc8>
     826:	b8 c0       	rjmp	.+368    	; 0x998 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     828:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     82a:	80 91 d8 00 	lds	r24, 0x00D8
     82e:	80 61       	ori	r24, 0x10	; 16
     830:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     834:	80 91 dd 00 	lds	r24, 0x00DD
     838:	8b 7f       	andi	r24, 0xFB	; 251
     83a:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     83e:	80 91 d7 00 	lds	r24, 0x00D7
     842:	80 61       	ori	r24, 0x10	; 16
     844:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     848:	80 91 dd 00 	lds	r24, 0x00DD
     84c:	82 60       	ori	r24, 0x02	; 2
     84e:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     852:	84 e0       	ldi	r24, 0x04	; 4
     854:	d6 cf       	rjmp	.-84     	; 0x802 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     856:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     85a:	80 ff       	sbrs	r24, 0
     85c:	9d c0       	rjmp	.+314    	; 0x998 <USB_Host_ProcessNextHostState+0x23e>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     85e:	80 91 9f 00 	lds	r24, 0x009F
     862:	8e 7f       	andi	r24, 0xFE	; 254
     864:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     868:	80 91 9f 00 	lds	r24, 0x009F
     86c:	8d 7f       	andi	r24, 0xFD	; 253
     86e:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     872:	80 91 df 00 	lds	r24, 0x00DF
     876:	8d 7f       	andi	r24, 0xFD	; 253
     878:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     87c:	80 91 de 00 	lds	r24, 0x00DE
     880:	82 60       	ori	r24, 0x02	; 2
     882:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     886:	80 91 9e 00 	lds	r24, 0x009E
     88a:	81 60       	ori	r24, 0x01	; 1
     88c:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     890:	ed d0       	rcall	.+474    	; 0xa6c <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     892:	10 92 30 01 	sts	0x0130, r1
     896:	84 e6       	ldi	r24, 0x64	; 100
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	90 93 25 01 	sts	0x0125, r25
     89e:	80 93 24 01 	sts	0x0124, r24
     8a2:	85 e0       	ldi	r24, 0x05	; 5
     8a4:	5c c0       	rjmp	.+184    	; 0x95e <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     8a6:	0b df       	rcall	.-490    	; 0x6be <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     8a8:	10 92 30 01 	sts	0x0130, r1
     8ac:	88 ec       	ldi	r24, 0xC8	; 200
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	90 93 25 01 	sts	0x0125, r25
     8b4:	80 93 24 01 	sts	0x0124, r24
     8b8:	86 e0       	ldi	r24, 0x06	; 6
     8ba:	51 c0       	rjmp	.+162    	; 0x95e <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	40 e0       	ldi	r20, 0x00	; 0
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	00 e4       	ldi	r16, 0x40	; 64
     8c6:	10 e0       	ldi	r17, 0x00	; 0
     8c8:	ee 24       	eor	r14, r14
     8ca:	72 d0       	rcall	.+228    	; 0x9b0 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     8cc:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     8d0:	87 ff       	sbrs	r24, 7
     8d2:	5c c0       	rjmp	.+184    	; 0x98c <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     8d4:	87 e0       	ldi	r24, 0x07	; 7
     8d6:	95 cf       	rjmp	.-214    	; 0x802 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     8d8:	a8 e2       	ldi	r26, 0x28	; 40
     8da:	b1 e0       	ldi	r27, 0x01	; 1
     8dc:	e9 e1       	ldi	r30, 0x19	; 25
     8de:	f1 e0       	ldi	r31, 0x01	; 1
     8e0:	88 e0       	ldi	r24, 0x08	; 8
     8e2:	01 90       	ld	r0, Z+
     8e4:	0d 92       	st	X+, r0
     8e6:	81 50       	subi	r24, 0x01	; 1
     8e8:	e1 f7       	brne	.-8      	; 0x8e2 <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     8ea:	ce 01       	movw	r24, r28
     8ec:	01 96       	adiw	r24, 0x01	; 1
     8ee:	aa d3       	rcall	.+1876   	; 0x1044 <USB_Host_SendControlRequest>
     8f0:	68 2f       	mov	r22, r24
     8f2:	88 23       	and	r24, r24
     8f4:	09 f0       	breq	.+2      	; 0x8f8 <USB_Host_ProcessNextHostState+0x19e>
     8f6:	48 c0       	rjmp	.+144    	; 0x988 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     8f8:	88 85       	ldd	r24, Y+8	; 0x08
     8fa:	80 93 21 01 	sts	0x0121, r24

			USB_Host_ResetDevice();
     8fe:	df de       	rcall	.-578    	; 0x6be <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     900:	10 92 30 01 	sts	0x0130, r1
     904:	88 ec       	ldi	r24, 0xC8	; 200
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	90 93 25 01 	sts	0x0125, r25
     90c:	80 93 24 01 	sts	0x0124, r24
     910:	88 e0       	ldi	r24, 0x08	; 8
     912:	25 c0       	rjmp	.+74     	; 0x95e <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     914:	00 91 21 01 	lds	r16, 0x0121
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	40 e0       	ldi	r20, 0x00	; 0
     91e:	20 e0       	ldi	r18, 0x00	; 0
     920:	10 e0       	ldi	r17, 0x00	; 0
     922:	ee 24       	eor	r14, r14
     924:	45 d0       	rcall	.+138    	; 0x9b0 <Pipe_ConfigurePipe>
     926:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     92a:	87 ff       	sbrs	r24, 7
     92c:	2f c0       	rjmp	.+94     	; 0x98c <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     92e:	a8 e2       	ldi	r26, 0x28	; 40
     930:	b1 e0       	ldi	r27, 0x01	; 1
     932:	e1 e1       	ldi	r30, 0x11	; 17
     934:	f1 e0       	ldi	r31, 0x01	; 1
     936:	88 e0       	ldi	r24, 0x08	; 8
     938:	01 90       	ld	r0, Z+
     93a:	0d 92       	st	X+, r0
     93c:	81 50       	subi	r24, 0x01	; 1
     93e:	e1 f7       	brne	.-8      	; 0x938 <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	7f d3       	rcall	.+1790   	; 0x1044 <USB_Host_SendControlRequest>
     946:	68 2f       	mov	r22, r24
     948:	88 23       	and	r24, r24
     94a:	f1 f4       	brne	.+60     	; 0x988 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     94c:	10 92 30 01 	sts	0x0130, r1
     950:	84 e6       	ldi	r24, 0x64	; 100
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	90 93 25 01 	sts	0x0125, r25
     958:	80 93 24 01 	sts	0x0124, r24
     95c:	89 e0       	ldi	r24, 0x09	; 9
     95e:	80 93 23 01 	sts	0x0123, r24
     962:	1a c0       	rjmp	.+52     	; 0x998 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     96a:	8a e0       	ldi	r24, 0x0A	; 10
     96c:	80 93 30 01 	sts	0x0130, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     970:	df dc       	rcall	.-1602   	; 0x330 <EVENT_USB_Host_DeviceEnumerationComplete>
     972:	12 c0       	rjmp	.+36     	; 0x998 <USB_Host_ProcessNextHostState+0x23e>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     974:	89 2f       	mov	r24, r25
     976:	81 dc       	rcall	.-1790   	; 0x27a <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     978:	80 91 dd 00 	lds	r24, 0x00DD
     97c:	81 60       	ori	r24, 0x01	; 1
     97e:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     982:	c4 dc       	rcall	.-1656   	; 0x30c <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     984:	d8 d0       	rcall	.+432    	; 0xb36 <USB_ResetInterface>
     986:	08 c0       	rjmp	.+16     	; 0x998 <USB_Host_ProcessNextHostState+0x23e>
	}
}
     988:	93 e0       	ldi	r25, 0x03	; 3
     98a:	02 c0       	rjmp	.+4      	; 0x990 <USB_Host_ProcessNextHostState+0x236>
     98c:	94 e0       	ldi	r25, 0x04	; 4
     98e:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     990:	80 91 30 01 	lds	r24, 0x0130
     994:	81 30       	cpi	r24, 0x01	; 1
     996:	71 f7       	brne	.-36     	; 0x974 <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     998:	28 96       	adiw	r28, 0x08	; 8
     99a:	0f b6       	in	r0, 0x3f	; 63
     99c:	f8 94       	cli
     99e:	de bf       	out	0x3e, r29	; 62
     9a0:	0f be       	out	0x3f, r0	; 63
     9a2:	cd bf       	out	0x3d, r28	; 61
     9a4:	cf 91       	pop	r28
     9a6:	df 91       	pop	r29
     9a8:	1f 91       	pop	r17
     9aa:	0f 91       	pop	r16
     9ac:	ef 90       	pop	r14
     9ae:	08 95       	ret

000009b0 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     9b0:	ef 92       	push	r14
     9b2:	0f 93       	push	r16
     9b4:	1f 93       	push	r17
     9b6:	e8 2f       	mov	r30, r24
     9b8:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     9ba:	62 95       	swap	r22
     9bc:	66 0f       	add	r22, r22
     9be:	66 0f       	add	r22, r22
     9c0:	60 7c       	andi	r22, 0xC0	; 192
     9c2:	64 2b       	or	r22, r20
     9c4:	2f 70       	andi	r18, 0x0F	; 15
     9c6:	62 2b       	or	r22, r18
     9c8:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     9ca:	72 60       	ori	r23, 0x02	; 2
     9cc:	45 c0       	rjmp	.+138    	; 0xa58 <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     9ce:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     9d2:	3e 17       	cp	r19, r30
     9d4:	a1 f4       	brne	.+40     	; 0x9fe <Pipe_ConfigurePipe+0x4e>
     9d6:	88 e0       	ldi	r24, 0x08	; 8
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	03 c0       	rjmp	.+6      	; 0x9e4 <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     9de:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     9e0:	88 0f       	add	r24, r24
     9e2:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     9e4:	80 17       	cp	r24, r16
     9e6:	91 07       	cpc	r25, r17
     9e8:	10 f4       	brcc	.+4      	; 0x9ee <Pipe_ConfigurePipe+0x3e>
     9ea:	25 30       	cpi	r18, 0x05	; 5
     9ec:	c1 f7       	brne	.-16     	; 0x9de <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     9ee:	92 2f       	mov	r25, r18
     9f0:	92 95       	swap	r25
     9f2:	90 7f       	andi	r25, 0xF0	; 240
     9f4:	97 2b       	or	r25, r23
     9f6:	56 2f       	mov	r21, r22
     9f8:	40 e0       	ldi	r20, 0x00	; 0
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	08 c0       	rjmp	.+16     	; 0xa0e <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     9fe:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     a02:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     a06:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
     a0a:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     a0e:	91 ff       	sbrs	r25, 1
     a10:	22 c0       	rjmp	.+68     	; 0xa56 <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a12:	80 91 a9 00 	lds	r24, 0x00A9
     a16:	8e 7f       	andi	r24, 0xFE	; 254
     a18:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     a1c:	80 91 ab 00 	lds	r24, 0x00AB
     a20:	8d 7f       	andi	r24, 0xFD	; 253
     a22:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     a26:	80 91 a9 00 	lds	r24, 0x00A9
     a2a:	81 60       	ori	r24, 0x01	; 1
     a2c:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     a30:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
     a34:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
     a38:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
     a3c:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     a40:	80 91 a9 00 	lds	r24, 0x00A9
     a44:	80 62       	ori	r24, 0x20	; 32
     a46:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a4a:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     a4e:	87 fd       	sbrc	r24, 7
     a50:	02 c0       	rjmp	.+4      	; 0xa56 <Pipe_ConfigurePipe+0xa6>
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	07 c0       	rjmp	.+14     	; 0xa64 <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     a56:	3f 5f       	subi	r19, 0xFF	; 255
     a58:	37 30       	cpi	r19, 0x07	; 7
     a5a:	08 f4       	brcc	.+2      	; 0xa5e <Pipe_ConfigurePipe+0xae>
     a5c:	b8 cf       	rjmp	.-144    	; 0x9ce <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a5e:	e0 93 a7 00 	sts	0x00A7, r30
     a62:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	ef 90       	pop	r14
     a6a:	08 95       	ret

00000a6c <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     a6c:	10 92 f8 00 	sts	0x00F8, r1
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     a76:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     a7a:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     a7e:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a82:	80 91 a9 00 	lds	r24, 0x00A9
     a86:	8e 7f       	andi	r24, 0xFE	; 254
     a88:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a8c:	9f 5f       	subi	r25, 0xFF	; 255
     a8e:	97 30       	cpi	r25, 0x07	; 7
     a90:	81 f7       	brne	.-32     	; 0xa72 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     a92:	08 95       	ret

00000a94 <Pipe_IsEndpointBound>:

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
     a94:	48 2f       	mov	r20, r24
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     a96:	30 91 a7 00 	lds	r19, 0x00A7
     a9a:	20 e0       	ldi	r18, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a9c:	20 93 a7 00 	sts	0x00A7, r18
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     aa0:	80 91 ac 00 	lds	r24, 0x00AC

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     aa4:	87 ff       	sbrs	r24, 7
     aa6:	10 c0       	rjmp	.+32     	; 0xac8 <Pipe_IsEndpointBound+0x34>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     aa8:	90 91 aa 00 	lds	r25, 0x00AA
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     aac:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     ab0:	80 73       	andi	r24, 0x30	; 48
     ab2:	80 31       	cpi	r24, 0x10	; 16
     ab4:	11 f0       	breq	.+4      	; 0xaba <Pipe_IsEndpointBound+0x26>
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	01 c0       	rjmp	.+2      	; 0xabc <Pipe_IsEndpointBound+0x28>
     aba:	80 e8       	ldi	r24, 0x80	; 128
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     abc:	9f 70       	andi	r25, 0x0F	; 15
     abe:	89 2b       	or	r24, r25
     ac0:	84 17       	cp	r24, r20
     ac2:	11 f4       	brne	.+4      	; 0xac8 <Pipe_IsEndpointBound+0x34>
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	08 95       	ret

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     ac8:	2f 5f       	subi	r18, 0xFF	; 255
     aca:	27 30       	cpi	r18, 0x07	; 7
     acc:	39 f7       	brne	.-50     	; 0xa9c <Pipe_IsEndpointBound+0x8>
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     ace:	37 70       	andi	r19, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     ad0:	30 93 a7 00 	sts	0x00A7, r19
     ad4:	80 e0       	ldi	r24, 0x00	; 0
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     ad6:	08 95       	ret

00000ad8 <Pipe_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     ad8:	40 91 a2 00 	lds	r20, 0x00A2
     adc:	50 91 a3 00 	lds	r21, 0x00A3
     ae0:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     ae2:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     ae6:	80 73       	andi	r24, 0x30	; 48
     ae8:	80 31       	cpi	r24, 0x10	; 16
     aea:	29 f4       	brne	.+10     	; 0xaf6 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     aec:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     af0:	80 ff       	sbrs	r24, 0
     af2:	05 c0       	rjmp	.+10     	; 0xafe <Pipe_WaitUntilReady+0x26>
     af4:	1e c0       	rjmp	.+60     	; 0xb32 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     af6:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     afa:	82 fd       	sbrc	r24, 2
     afc:	1a c0       	rjmp	.+52     	; 0xb32 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     afe:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     b02:	81 ff       	sbrs	r24, 1
     b04:	02 c0       	rjmp	.+4      	; 0xb0a <Pipe_WaitUntilReady+0x32>
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     b0a:	80 91 30 01 	lds	r24, 0x0130
     b0e:	81 30       	cpi	r24, 0x01	; 1
     b10:	11 f4       	brne	.+4      	; 0xb16 <Pipe_WaitUntilReady+0x3e>
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	08 95       	ret
     b16:	80 91 a2 00 	lds	r24, 0x00A2
     b1a:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     b1e:	84 17       	cp	r24, r20
     b20:	95 07       	cpc	r25, r21
     b22:	f9 f2       	breq	.-66     	; 0xae2 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     b24:	22 23       	and	r18, r18
     b26:	11 f4       	brne	.+4      	; 0xb2c <Pipe_WaitUntilReady+0x54>
     b28:	83 e0       	ldi	r24, 0x03	; 3
     b2a:	08 95       	ret
     b2c:	21 50       	subi	r18, 0x01	; 1
     b2e:	ac 01       	movw	r20, r24
     b30:	d8 cf       	rjmp	.-80     	; 0xae2 <Pipe_WaitUntilReady+0xa>
     b32:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     b34:	08 95       	ret

00000b36 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     b36:	70 d0       	rcall	.+224    	; 0xc18 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b38:	77 d0       	rcall	.+238    	; 0xc28 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     b3a:	80 91 d8 00 	lds	r24, 0x00D8
     b3e:	8f 77       	andi	r24, 0x7F	; 127
     b40:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     b44:	80 91 d8 00 	lds	r24, 0x00D8
     b48:	80 68       	ori	r24, 0x80	; 128
     b4a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     b4e:	80 91 d8 00 	lds	r24, 0x00D8
     b52:	8f 7d       	andi	r24, 0xDF	; 223
     b54:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     b58:	80 91 d7 00 	lds	r24, 0x00D7
     b5c:	8f 77       	andi	r24, 0x7F	; 127
     b5e:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     b62:	8c e0       	ldi	r24, 0x0C	; 12
     b64:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     b66:	8e e0       	ldi	r24, 0x0E	; 14
     b68:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     b6a:	09 b4       	in	r0, 0x29	; 41
     b6c:	00 fe       	sbrs	r0, 0
     b6e:	fd cf       	rjmp	.-6      	; 0xb6a <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	80 93 30 01 	sts	0x0130, r24
	USB_Host_ConfigurationNumber = 0;
     b76:	10 92 26 01 	sts	0x0126, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     b7a:	80 e4       	ldi	r24, 0x40	; 64
     b7c:	80 93 21 01 	sts	0x0121, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     b80:	80 91 d8 00 	lds	r24, 0x00D8
     b84:	80 64       	ori	r24, 0x40	; 64
     b86:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b8a:	80 91 dd 00 	lds	r24, 0x00DD
     b8e:	81 60       	ori	r24, 0x01	; 1
     b90:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     b94:	80 91 dd 00 	lds	r24, 0x00DD
     b98:	84 60       	ori	r24, 0x04	; 4
     b9a:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     b9e:	80 91 d7 00 	lds	r24, 0x00D7
     ba2:	8f 7e       	andi	r24, 0xEF	; 239
     ba4:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     ba8:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     baa:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     bac:	80 91 de 00 	lds	r24, 0x00DE
     bb0:	81 60       	ori	r24, 0x01	; 1
     bb2:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     bb6:	80 91 de 00 	lds	r24, 0x00DE
     bba:	84 60       	ori	r24, 0x04	; 4
     bbc:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     bc0:	80 91 e0 00 	lds	r24, 0x00E0
     bc4:	8e 7f       	andi	r24, 0xFE	; 254
     bc6:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     bca:	80 91 d8 00 	lds	r24, 0x00D8
     bce:	80 61       	ori	r24, 0x10	; 16
     bd0:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     bd4:	08 95       	ret

00000bd6 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     bd6:	e7 ed       	ldi	r30, 0xD7	; 215
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	81 60       	ori	r24, 0x01	; 1
     bde:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	80 93 27 01 	sts	0x0127, r24

	USB_ResetInterface();
}
     be6:	a7 cf       	rjmp	.-178    	; 0xb36 <USB_ResetInterface>

00000be8 <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     be8:	17 d0       	rcall	.+46     	; 0xc18 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     bea:	1e d0       	rcall	.+60     	; 0xc28 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     bec:	e0 ee       	ldi	r30, 0xE0	; 224
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	81 60       	ori	r24, 0x01	; 1
     bf4:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     bf6:	a8 ed       	ldi	r26, 0xD8	; 216
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	8c 91       	ld	r24, X
     bfc:	8f 77       	andi	r24, 0x7F	; 127
     bfe:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     c00:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     c02:	e7 ed       	ldi	r30, 0xD7	; 215
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	8e 7f       	andi	r24, 0xFE	; 254
     c0a:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     c0c:	8c 91       	ld	r24, X
     c0e:	8f 7e       	andi	r24, 0xEF	; 239
     c10:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     c12:	10 92 27 01 	sts	0x0127, r1
}
     c16:	08 95       	ret

00000c18 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     c18:	e8 ed       	ldi	r30, 0xD8	; 216
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	8c 7f       	andi	r24, 0xFC	; 252
     c20:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     c22:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     c26:	08 95       	ret

00000c28 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     c28:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     c2c:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     c30:	08 95       	ret

00000c32 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     c32:	1f 92       	push	r1
     c34:	0f 92       	push	r0
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	0f 92       	push	r0
     c3a:	0b b6       	in	r0, 0x3b	; 59
     c3c:	0f 92       	push	r0
     c3e:	11 24       	eor	r1, r1
     c40:	2f 93       	push	r18
     c42:	3f 93       	push	r19
     c44:	4f 93       	push	r20
     c46:	5f 93       	push	r21
     c48:	6f 93       	push	r22
     c4a:	7f 93       	push	r23
     c4c:	8f 93       	push	r24
     c4e:	9f 93       	push	r25
     c50:	af 93       	push	r26
     c52:	bf 93       	push	r27
     c54:	ef 93       	push	r30
     c56:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     c58:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     c5c:	85 ff       	sbrs	r24, 5
     c5e:	0a c0       	rjmp	.+20     	; 0xc74 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     c60:	80 91 a0 00 	lds	r24, 0x00A0
     c64:	85 ff       	sbrs	r24, 5
     c66:	06 c0       	rjmp	.+12     	; 0xc74 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     c68:	80 91 9f 00 	lds	r24, 0x009F
     c6c:	8f 7d       	andi	r24, 0xDF	; 223
     c6e:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     c72:	be d1       	rcall	.+892    	; 0xff0 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     c74:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     c78:	81 ff       	sbrs	r24, 1
     c7a:	15 c0       	rjmp	.+42     	; 0xca6 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     c7c:	80 91 a0 00 	lds	r24, 0x00A0
     c80:	81 ff       	sbrs	r24, 1
     c82:	11 c0       	rjmp	.+34     	; 0xca6 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     c84:	80 91 9f 00 	lds	r24, 0x009F
     c88:	8d 7f       	andi	r24, 0xFD	; 253
     c8a:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     c8e:	80 91 9f 00 	lds	r24, 0x009F
     c92:	8e 7f       	andi	r24, 0xFE	; 254
     c94:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     c98:	80 91 a0 00 	lds	r24, 0x00A0
     c9c:	8d 7f       	andi	r24, 0xFD	; 253
     c9e:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     ca2:	34 db       	rcall	.-2456   	; 0x30c <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     ca4:	48 df       	rcall	.-368    	; 0xb36 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     ca6:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     caa:	81 ff       	sbrs	r24, 1
     cac:	15 c0       	rjmp	.+42     	; 0xcd8 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     cae:	80 91 de 00 	lds	r24, 0x00DE
     cb2:	81 ff       	sbrs	r24, 1
     cb4:	11 c0       	rjmp	.+34     	; 0xcd8 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     cb6:	80 91 df 00 	lds	r24, 0x00DF
     cba:	8d 7f       	andi	r24, 0xFD	; 253
     cbc:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     cc0:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     cc2:	80 91 dd 00 	lds	r24, 0x00DD
     cc6:	81 60       	ori	r24, 0x01	; 1
     cc8:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	01 db       	rcall	.-2558   	; 0x2d2 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     cd0:	1d db       	rcall	.-2502   	; 0x30c <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	80 93 30 01 	sts	0x0130, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     cd8:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     cdc:	80 ff       	sbrs	r24, 0
     cde:	17 c0       	rjmp	.+46     	; 0xd0e <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     ce0:	80 91 de 00 	lds	r24, 0x00DE
     ce4:	80 ff       	sbrs	r24, 0
     ce6:	13 c0       	rjmp	.+38     	; 0xd0e <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     ce8:	80 91 df 00 	lds	r24, 0x00DF
     cec:	8e 7f       	andi	r24, 0xFE	; 254
     cee:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     cf2:	80 91 de 00 	lds	r24, 0x00DE
     cf6:	8e 7f       	andi	r24, 0xFE	; 254
     cf8:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     cfc:	10 db       	rcall	.-2528   	; 0x31e <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     cfe:	80 91 a0 00 	lds	r24, 0x00A0
     d02:	82 60       	ori	r24, 0x02	; 2
     d04:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     d08:	82 e0       	ldi	r24, 0x02	; 2
     d0a:	80 93 30 01 	sts	0x0130, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     d0e:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     d12:	82 ff       	sbrs	r24, 2
     d14:	0e c0       	rjmp	.+28     	; 0xd32 <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     d16:	80 91 de 00 	lds	r24, 0x00DE
     d1a:	82 ff       	sbrs	r24, 2
     d1c:	0a c0       	rjmp	.+20     	; 0xd32 <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     d1e:	80 91 df 00 	lds	r24, 0x00DF
     d22:	8b 7f       	andi	r24, 0xFB	; 251
     d24:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     d28:	82 e0       	ldi	r24, 0x02	; 2
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	a6 da       	rcall	.-2740   	; 0x27a <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     d2e:	ee da       	rcall	.-2596   	; 0x30c <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     d30:	02 df       	rcall	.-508    	; 0xb36 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     d32:	ff 91       	pop	r31
     d34:	ef 91       	pop	r30
     d36:	bf 91       	pop	r27
     d38:	af 91       	pop	r26
     d3a:	9f 91       	pop	r25
     d3c:	8f 91       	pop	r24
     d3e:	7f 91       	pop	r23
     d40:	6f 91       	pop	r22
     d42:	5f 91       	pop	r21
     d44:	4f 91       	pop	r20
     d46:	3f 91       	pop	r19
     d48:	2f 91       	pop	r18
     d4a:	0f 90       	pop	r0
     d4c:	0b be       	out	0x3b, r0	; 59
     d4e:	0f 90       	pop	r0
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	0f 90       	pop	r0
     d54:	1f 90       	pop	r1
     d56:	18 95       	reti

00000d58 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     d58:	bf 92       	push	r11
     d5a:	cf 92       	push	r12
     d5c:	df 92       	push	r13
     d5e:	ef 92       	push	r14
     d60:	ff 92       	push	r15
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
     d6a:	18 2f       	mov	r17, r24
     d6c:	09 2f       	mov	r16, r25
     d6e:	7b 01       	movw	r14, r22
     d70:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     d72:	80 91 aa 00 	lds	r24, 0x00AA
     d76:	8f 7c       	andi	r24, 0xCF	; 207
     d78:	80 61       	ori	r24, 0x10	; 16
     d7a:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     d7e:	ac de       	rcall	.-680    	; 0xad8 <Pipe_WaitUntilReady>
     d80:	b8 2e       	mov	r11, r24
     d82:	88 23       	and	r24, r24
     d84:	a9 f5       	brne	.+106    	; 0xdf0 <Pipe_Read_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     d86:	81 2f       	mov	r24, r17
     d88:	90 2f       	mov	r25, r16
     d8a:	9c 01       	movw	r18, r24
     d8c:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     d8e:	c1 14       	cp	r12, r1
     d90:	d1 04       	cpc	r13, r1
     d92:	39 f0       	breq	.+14     	; 0xda2 <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
     d94:	f6 01       	movw	r30, r12
     d96:	80 81       	ld	r24, Z
     d98:	91 81       	ldd	r25, Z+1	; 0x01
     d9a:	e8 1a       	sub	r14, r24
     d9c:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     d9e:	c8 0f       	add	r28, r24
     da0:	d9 1f       	adc	r29, r25
     da2:	00 e0       	ldi	r16, 0x00	; 0
     da4:	10 e0       	ldi	r17, 0x00	; 0
     da6:	21 c0       	rjmp	.+66     	; 0xdea <Pipe_Read_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     da8:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     dac:	85 fd       	sbrc	r24, 5
     dae:	15 c0       	rjmp	.+42     	; 0xdda <Pipe_Read_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     db0:	80 91 a6 00 	lds	r24, 0x00A6
     db4:	8e 77       	andi	r24, 0x7E	; 126
     db6:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     dba:	c1 14       	cp	r12, r1
     dbc:	d1 04       	cpc	r13, r1
     dbe:	49 f0       	breq	.+18     	; 0xdd2 <Pipe_Read_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
     dc0:	f6 01       	movw	r30, r12
     dc2:	80 81       	ld	r24, Z
     dc4:	91 81       	ldd	r25, Z+1	; 0x01
     dc6:	80 0f       	add	r24, r16
     dc8:	91 1f       	adc	r25, r17
     dca:	91 83       	std	Z+1, r25	; 0x01
     dcc:	80 83       	st	Z, r24
     dce:	84 e0       	ldi	r24, 0x04	; 4
     dd0:	10 c0       	rjmp	.+32     	; 0xdf2 <Pipe_Read_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     dd2:	82 de       	rcall	.-764    	; 0xad8 <Pipe_WaitUntilReady>
     dd4:	88 23       	and	r24, r24
     dd6:	49 f0       	breq	.+18     	; 0xdea <Pipe_Read_Stream_LE+0x92>
     dd8:	0c c0       	rjmp	.+24     	; 0xdf2 <Pipe_Read_Stream_LE+0x9a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     dda:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     dde:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     de0:	08 94       	sec
     de2:	e1 08       	sbc	r14, r1
     de4:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
     de6:	0f 5f       	subi	r16, 0xFF	; 255
     de8:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     dea:	e1 14       	cp	r14, r1
     dec:	f1 04       	cpc	r15, r1
     dee:	e1 f6       	brne	.-72     	; 0xda8 <Pipe_Read_Stream_LE+0x50>
     df0:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	1f 91       	pop	r17
     df8:	0f 91       	pop	r16
     dfa:	ff 90       	pop	r15
     dfc:	ef 90       	pop	r14
     dfe:	df 90       	pop	r13
     e00:	cf 90       	pop	r12
     e02:	bf 90       	pop	r11
     e04:	08 95       	ret

00000e06 <Pipe_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     e06:	bf 92       	push	r11
     e08:	cf 92       	push	r12
     e0a:	df 92       	push	r13
     e0c:	ef 92       	push	r14
     e0e:	ff 92       	push	r15
     e10:	0f 93       	push	r16
     e12:	1f 93       	push	r17
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	18 2f       	mov	r17, r24
     e1a:	09 2f       	mov	r16, r25
     e1c:	7b 01       	movw	r14, r22
     e1e:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     e20:	80 91 aa 00 	lds	r24, 0x00AA
     e24:	8f 7c       	andi	r24, 0xCF	; 207
     e26:	80 62       	ori	r24, 0x20	; 32
     e28:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     e2c:	55 de       	rcall	.-854    	; 0xad8 <Pipe_WaitUntilReady>
     e2e:	b8 2e       	mov	r11, r24
     e30:	88 23       	and	r24, r24
     e32:	a9 f5       	brne	.+106    	; 0xe9e <Pipe_Write_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     e34:	81 2f       	mov	r24, r17
     e36:	90 2f       	mov	r25, r16
     e38:	9c 01       	movw	r18, r24
     e3a:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     e3c:	c1 14       	cp	r12, r1
     e3e:	d1 04       	cpc	r13, r1
     e40:	39 f0       	breq	.+14     	; 0xe50 <Pipe_Write_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
     e42:	f6 01       	movw	r30, r12
     e44:	80 81       	ld	r24, Z
     e46:	91 81       	ldd	r25, Z+1	; 0x01
     e48:	e8 1a       	sub	r14, r24
     e4a:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     e4c:	c8 0f       	add	r28, r24
     e4e:	d9 1f       	adc	r29, r25
     e50:	00 e0       	ldi	r16, 0x00	; 0
     e52:	10 e0       	ldi	r17, 0x00	; 0
     e54:	21 c0       	rjmp	.+66     	; 0xe98 <Pipe_Write_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     e56:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     e5a:	85 fd       	sbrc	r24, 5
     e5c:	15 c0       	rjmp	.+42     	; 0xe88 <Pipe_Write_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     e5e:	80 91 a6 00 	lds	r24, 0x00A6
     e62:	8b 77       	andi	r24, 0x7B	; 123
     e64:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     e68:	c1 14       	cp	r12, r1
     e6a:	d1 04       	cpc	r13, r1
     e6c:	49 f0       	breq	.+18     	; 0xe80 <Pipe_Write_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
     e6e:	f6 01       	movw	r30, r12
     e70:	80 81       	ld	r24, Z
     e72:	91 81       	ldd	r25, Z+1	; 0x01
     e74:	80 0f       	add	r24, r16
     e76:	91 1f       	adc	r25, r17
     e78:	91 83       	std	Z+1, r25	; 0x01
     e7a:	80 83       	st	Z, r24
     e7c:	84 e0       	ldi	r24, 0x04	; 4
     e7e:	10 c0       	rjmp	.+32     	; 0xea0 <Pipe_Write_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     e80:	2b de       	rcall	.-938    	; 0xad8 <Pipe_WaitUntilReady>
     e82:	88 23       	and	r24, r24
     e84:	49 f0       	breq	.+18     	; 0xe98 <Pipe_Write_Stream_LE+0x92>
     e86:	0c c0       	rjmp	.+24     	; 0xea0 <Pipe_Write_Stream_LE+0x9a>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     e88:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     e8a:	80 93 af 00 	sts	0x00AF, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     e8e:	08 94       	sec
     e90:	e1 08       	sbc	r14, r1
     e92:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
     e94:	0f 5f       	subi	r16, 0xFF	; 255
     e96:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     e98:	e1 14       	cp	r14, r1
     e9a:	f1 04       	cpc	r15, r1
     e9c:	e1 f6       	brne	.-72     	; 0xe56 <Pipe_Write_Stream_LE+0x50>
     e9e:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
     ea4:	1f 91       	pop	r17
     ea6:	0f 91       	pop	r16
     ea8:	ff 90       	pop	r15
     eaa:	ef 90       	pop	r14
     eac:	df 90       	pop	r13
     eae:	cf 90       	pop	r12
     eb0:	bf 90       	pop	r11
     eb2:	08 95       	ret

00000eb4 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     eb4:	af 92       	push	r10
     eb6:	bf 92       	push	r11
     eb8:	cf 92       	push	r12
     eba:	df 92       	push	r13
     ebc:	ef 92       	push	r14
     ebe:	ff 92       	push	r15
     ec0:	0f 93       	push	r16
     ec2:	1f 93       	push	r17
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	7c 01       	movw	r14, r24
     eca:	eb 01       	movw	r28, r22
     ecc:	6a 01       	movw	r12, r20
     ece:	24 c0       	rjmp	.+72     	; 0xf18 <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     ed0:	e8 81       	ld	r30, Y
     ed2:	f9 81       	ldd	r31, Y+1	; 0x01
     ed4:	be 2e       	mov	r11, r30
     ed6:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     ed8:	80 81       	ld	r24, Z
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	98 01       	movw	r18, r16
     ede:	80 17       	cp	r24, r16
     ee0:	91 07       	cpc	r25, r17
     ee2:	08 f4       	brcc	.+2      	; 0xee6 <USB_GetNextDescriptorComp+0x32>
     ee4:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     ee6:	e2 0f       	add	r30, r18
     ee8:	f3 1f       	adc	r31, r19
     eea:	f9 83       	std	Y+1, r31	; 0x01
     eec:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     eee:	f7 01       	movw	r30, r14
     ef0:	80 81       	ld	r24, Z
     ef2:	91 81       	ldd	r25, Z+1	; 0x01
     ef4:	82 1b       	sub	r24, r18
     ef6:	93 0b       	sbc	r25, r19
     ef8:	91 83       	std	Z+1, r25	; 0x01
     efa:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     efc:	88 81       	ld	r24, Y
     efe:	99 81       	ldd	r25, Y+1	; 0x01
     f00:	f6 01       	movw	r30, r12
     f02:	09 95       	icall
     f04:	82 30       	cpi	r24, 0x02	; 2
     f06:	41 f0       	breq	.+16     	; 0xf18 <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     f08:	81 30       	cpi	r24, 0x01	; 1
     f0a:	69 f4       	brne	.+26     	; 0xf26 <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
     f0c:	b8 82       	st	Y, r11
     f0e:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
     f10:	f7 01       	movw	r30, r14
     f12:	11 83       	std	Z+1, r17	; 0x01
     f14:	00 83       	st	Z, r16
     f16:	07 c0       	rjmp	.+14     	; 0xf26 <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     f18:	f7 01       	movw	r30, r14
     f1a:	00 81       	ld	r16, Z
     f1c:	11 81       	ldd	r17, Z+1	; 0x01
     f1e:	01 15       	cp	r16, r1
     f20:	11 05       	cpc	r17, r1
     f22:	b1 f6       	brne	.-84     	; 0xed0 <USB_GetNextDescriptorComp+0x1c>
     f24:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	1f 91       	pop	r17
     f2c:	0f 91       	pop	r16
     f2e:	ff 90       	pop	r15
     f30:	ef 90       	pop	r14
     f32:	df 90       	pop	r13
     f34:	cf 90       	pop	r12
     f36:	bf 90       	pop	r11
     f38:	af 90       	pop	r10
     f3a:	08 95       	ret

00000f3c <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     f3c:	cf 92       	push	r12
     f3e:	df 92       	push	r13
     f40:	ef 92       	push	r14
     f42:	ff 92       	push	r15
     f44:	0f 93       	push	r16
     f46:	1f 93       	push	r17
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	29 97       	sbiw	r28, 0x09	; 9
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	f8 94       	cli
     f56:	de bf       	out	0x3e, r29	; 62
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	cd bf       	out	0x3d, r28	; 61
     f5c:	6b 01       	movw	r12, r22
     f5e:	8a 01       	movw	r16, r20
     f60:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     f62:	90 e8       	ldi	r25, 0x80	; 128
     f64:	90 93 28 01 	sts	0x0128, r25
     f68:	96 e0       	ldi	r25, 0x06	; 6
     f6a:	90 93 29 01 	sts	0x0129, r25
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	01 97       	sbiw	r24, 0x01	; 1
     f72:	92 60       	ori	r25, 0x02	; 2
     f74:	90 93 2b 01 	sts	0x012B, r25
     f78:	80 93 2a 01 	sts	0x012A, r24
     f7c:	10 92 2d 01 	sts	0x012D, r1
     f80:	10 92 2c 01 	sts	0x012C, r1
     f84:	89 e0       	ldi	r24, 0x09	; 9
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	90 93 2f 01 	sts	0x012F, r25
     f8c:	80 93 2e 01 	sts	0x012E, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     f90:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     f94:	ce 01       	movw	r24, r28
     f96:	01 96       	adiw	r24, 0x01	; 1
     f98:	55 d0       	rcall	.+170    	; 0x1044 <USB_Host_SendControlRequest>
     f9a:	28 2f       	mov	r18, r24
     f9c:	88 23       	and	r24, r24
     f9e:	c1 f4       	brne	.+48     	; 0xfd0 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	9c 81       	ldd	r25, Y+4	; 0x04
     fa4:	f6 01       	movw	r30, r12
     fa6:	91 83       	std	Z+1, r25	; 0x01
     fa8:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     faa:	e8 16       	cp	r14, r24
     fac:	f9 06       	cpc	r15, r25
     fae:	10 f4       	brcc	.+4      	; 0xfb4 <USB_Host_GetDeviceConfigDescriptor+0x78>
     fb0:	25 e0       	ldi	r18, 0x05	; 5
     fb2:	0e c0       	rjmp	.+28     	; 0xfd0 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     fb4:	90 93 2f 01 	sts	0x012F, r25
     fb8:	80 93 2e 01 	sts	0x012E, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     fbc:	c8 01       	movw	r24, r16
     fbe:	42 d0       	rcall	.+132    	; 0x1044 <USB_Host_SendControlRequest>
     fc0:	28 2f       	mov	r18, r24
     fc2:	88 23       	and	r24, r24
     fc4:	29 f4       	brne	.+10     	; 0xfd0 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     fc6:	f8 01       	movw	r30, r16
     fc8:	81 81       	ldd	r24, Z+1	; 0x01
     fca:	82 30       	cpi	r24, 0x02	; 2
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <USB_Host_GetDeviceConfigDescriptor+0x94>
     fce:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     fd0:	82 2f       	mov	r24, r18
     fd2:	29 96       	adiw	r28, 0x09	; 9
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	f8 94       	cli
     fd8:	de bf       	out	0x3e, r29	; 62
     fda:	0f be       	out	0x3f, r0	; 63
     fdc:	cd bf       	out	0x3d, r28	; 61
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	1f 91       	pop	r17
     fe4:	0f 91       	pop	r16
     fe6:	ff 90       	pop	r15
     fe8:	ef 90       	pop	r14
     fea:	df 90       	pop	r13
     fec:	cf 90       	pop	r12
     fee:	08 95       	ret

00000ff0 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     ff0:	08 95       	ret

00000ff2 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     ff2:	1f 93       	push	r17
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	18 2f       	mov	r17, r24
     ffa:	c8 ee       	ldi	r28, 0xE8	; 232
     ffc:	d3 e0       	ldi	r29, 0x03	; 3
     ffe:	09 c0       	rjmp	.+18     	; 0x1012 <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	0e db       	rcall	.-2532   	; 0x620 <USB_Host_WaitMS>
    1004:	88 23       	and	r24, r24
    1006:	d1 f4       	brne	.+52     	; 0x103c <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1008:	20 97       	sbiw	r28, 0x00	; 0
    100a:	11 f4       	brne	.+4      	; 0x1010 <USB_Host_WaitForIOS+0x1e>
    100c:	84 e0       	ldi	r24, 0x04	; 4
    100e:	16 c0       	rjmp	.+44     	; 0x103c <USB_Host_WaitForIOS+0x4a>
    1010:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1012:	11 23       	and	r17, r17
    1014:	29 f4       	brne	.+10     	; 0x1020 <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1016:	80 91 a6 00 	lds	r24, 0x00A6
    101a:	83 ff       	sbrs	r24, 3
    101c:	f1 cf       	rjmp	.-30     	; 0x1000 <USB_Host_WaitForIOS+0xe>
    101e:	0d c0       	rjmp	.+26     	; 0x103a <USB_Host_WaitForIOS+0x48>
    1020:	11 30       	cpi	r17, 0x01	; 1
    1022:	29 f4       	brne	.+10     	; 0x102e <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1024:	80 91 a6 00 	lds	r24, 0x00A6
    1028:	80 ff       	sbrs	r24, 0
    102a:	ea cf       	rjmp	.-44     	; 0x1000 <USB_Host_WaitForIOS+0xe>
    102c:	06 c0       	rjmp	.+12     	; 0x103a <USB_Host_WaitForIOS+0x48>
    102e:	12 30       	cpi	r17, 0x02	; 2
    1030:	39 f7       	brne	.-50     	; 0x1000 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1032:	80 91 a6 00 	lds	r24, 0x00A6
    1036:	82 ff       	sbrs	r24, 2
    1038:	e3 cf       	rjmp	.-58     	; 0x1000 <USB_Host_WaitForIOS+0xe>
    103a:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	1f 91       	pop	r17
    1042:	08 95       	ret

00001044 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1044:	ff 92       	push	r15
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	18 2f       	mov	r17, r24
    1050:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1052:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1056:	c0 91 2e 01 	lds	r28, 0x012E
    105a:	d0 91 2f 01 	lds	r29, 0x012F
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    105e:	80 91 9e 00 	lds	r24, 0x009E
    1062:	81 60       	ori	r24, 0x01	; 1
    1064:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	da da       	rcall	.-2636   	; 0x620 <USB_Host_WaitMS>
    106c:	98 2f       	mov	r25, r24
    106e:	88 23       	and	r24, r24
    1070:	09 f0       	breq	.+2      	; 0x1074 <USB_Host_SendControlRequest+0x30>
    1072:	ee c0       	rjmp	.+476    	; 0x1250 <USB_Host_SendControlRequest+0x20c>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1074:	80 91 aa 00 	lds	r24, 0x00AA
    1078:	8f 7c       	andi	r24, 0xCF	; 207
    107a:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    107e:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1082:	80 91 a6 00 	lds	r24, 0x00A6
    1086:	8f 7e       	andi	r24, 0xEF	; 239
    1088:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    108c:	80 91 a9 00 	lds	r24, 0x00A9
    1090:	8f 7b       	andi	r24, 0xBF	; 191
    1092:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearError();

	Pipe_Unfreeze();

	Pipe_Write_8(USB_ControlRequest.bmRequestType);
    1096:	80 91 28 01 	lds	r24, 0x0128
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    109a:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
    109e:	80 91 29 01 	lds	r24, 0x0129
    10a2:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
    10a6:	80 91 2a 01 	lds	r24, 0x012A
    10aa:	90 91 2b 01 	lds	r25, 0x012B
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    10ae:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    10b2:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
    10b6:	80 91 2c 01 	lds	r24, 0x012C
    10ba:	90 91 2d 01 	lds	r25, 0x012D
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    10be:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    10c2:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
    10c6:	80 91 2e 01 	lds	r24, 0x012E
    10ca:	90 91 2f 01 	lds	r25, 0x012F
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    10ce:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    10d2:	90 93 af 00 	sts	0x00AF, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    10d6:	80 91 a6 00 	lds	r24, 0x00A6
    10da:	87 77       	andi	r24, 0x77	; 119
    10dc:	80 93 a6 00 	sts	0x00A6, r24

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	87 df       	rcall	.-242    	; 0xff2 <USB_Host_WaitForIOS>
    10e4:	98 2f       	mov	r25, r24
    10e6:	88 23       	and	r24, r24
    10e8:	09 f0       	breq	.+2      	; 0x10ec <USB_Host_SendControlRequest+0xa8>
    10ea:	b2 c0       	rjmp	.+356    	; 0x1250 <USB_Host_SendControlRequest+0x20c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10ec:	80 91 a9 00 	lds	r24, 0x00A9
    10f0:	80 64       	ori	r24, 0x40	; 64
    10f2:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	93 da       	rcall	.-2778   	; 0x620 <USB_Host_WaitMS>
    10fa:	98 2f       	mov	r25, r24
    10fc:	88 23       	and	r24, r24
    10fe:	09 f0       	breq	.+2      	; 0x1102 <USB_Host_SendControlRequest+0xbe>
    1100:	a7 c0       	rjmp	.+334    	; 0x1250 <USB_Host_SendControlRequest+0x20c>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
    1102:	21 2f       	mov	r18, r17
    1104:	30 2f       	mov	r19, r16
    1106:	c9 01       	movw	r24, r18
    1108:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    110a:	80 91 28 01 	lds	r24, 0x0128
    110e:	87 ff       	sbrs	r24, 7
    1110:	52 c0       	rjmp	.+164    	; 0x11b6 <USB_Host_SendControlRequest+0x172>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1112:	80 91 aa 00 	lds	r24, 0x00AA
    1116:	8f 7c       	andi	r24, 0xCF	; 207
    1118:	80 61       	ori	r24, 0x10	; 16
    111a:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    111e:	01 15       	cp	r16, r1
    1120:	11 05       	cpc	r17, r1
    1122:	69 f5       	brne	.+90     	; 0x117e <USB_Host_SendControlRequest+0x13a>
    1124:	2e c0       	rjmp	.+92     	; 0x1182 <USB_Host_SendControlRequest+0x13e>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1126:	80 91 a9 00 	lds	r24, 0x00A9
    112a:	8f 7b       	andi	r24, 0xBF	; 191
    112c:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	5f df       	rcall	.-322    	; 0xff2 <USB_Host_WaitForIOS>
    1134:	98 2f       	mov	r25, r24
    1136:	88 23       	and	r24, r24
    1138:	09 f0       	breq	.+2      	; 0x113c <USB_Host_SendControlRequest+0xf8>
    113a:	8a c0       	rjmp	.+276    	; 0x1250 <USB_Host_SendControlRequest+0x20c>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    113c:	80 91 f6 00 	lds	r24, 0x00F6
    1140:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    1144:	89 2b       	or	r24, r25
    1146:	49 f4       	brne	.+18     	; 0x115a <USB_Host_SendControlRequest+0x116>
    1148:	c0 e0       	ldi	r28, 0x00	; 0
    114a:	d0 e0       	ldi	r29, 0x00	; 0
    114c:	06 c0       	rjmp	.+12     	; 0x115a <USB_Host_SendControlRequest+0x116>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    114e:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    1152:	f8 01       	movw	r30, r16
    1154:	81 93       	st	Z+, r24
    1156:	8f 01       	movw	r16, r30
					DataLen--;
    1158:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    115a:	80 91 f6 00 	lds	r24, 0x00F6
    115e:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1162:	89 2b       	or	r24, r25
    1164:	11 f0       	breq	.+4      	; 0x116a <USB_Host_SendControlRequest+0x126>
    1166:	20 97       	sbiw	r28, 0x00	; 0
    1168:	91 f7       	brne	.-28     	; 0x114e <USB_Host_SendControlRequest+0x10a>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    116a:	80 91 a9 00 	lds	r24, 0x00A9
    116e:	80 64       	ori	r24, 0x40	; 64
    1170:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1174:	80 91 a6 00 	lds	r24, 0x00A6
    1178:	8e 77       	andi	r24, 0x7E	; 126
    117a:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    117e:	20 97       	sbiw	r28, 0x00	; 0
    1180:	91 f6       	brne	.-92     	; 0x1126 <USB_Host_SendControlRequest+0xe2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1182:	80 91 aa 00 	lds	r24, 0x00AA
    1186:	8f 7c       	andi	r24, 0xCF	; 207
    1188:	80 62       	ori	r24, 0x20	; 32
    118a:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    118e:	80 91 a9 00 	lds	r24, 0x00A9
    1192:	8f 7b       	andi	r24, 0xBF	; 191
    1194:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1198:	82 e0       	ldi	r24, 0x02	; 2
    119a:	2b df       	rcall	.-426    	; 0xff2 <USB_Host_WaitForIOS>
    119c:	98 2f       	mov	r25, r24
    119e:	88 23       	and	r24, r24
    11a0:	09 f0       	breq	.+2      	; 0x11a4 <USB_Host_SendControlRequest+0x160>
    11a2:	56 c0       	rjmp	.+172    	; 0x1250 <USB_Host_SendControlRequest+0x20c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    11a4:	80 91 a6 00 	lds	r24, 0x00A6
    11a8:	8b 77       	andi	r24, 0x7B	; 123
    11aa:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11ae:	82 e0       	ldi	r24, 0x02	; 2
    11b0:	20 df       	rcall	.-448    	; 0xff2 <USB_Host_WaitForIOS>
    11b2:	98 2f       	mov	r25, r24
    11b4:	4d c0       	rjmp	.+154    	; 0x1250 <USB_Host_SendControlRequest+0x20c>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    11b6:	01 15       	cp	r16, r1
    11b8:	11 05       	cpc	r17, r1
    11ba:	a9 f1       	breq	.+106    	; 0x1226 <USB_Host_SendControlRequest+0x1e2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11bc:	80 91 aa 00 	lds	r24, 0x00AA
    11c0:	8f 7c       	andi	r24, 0xCF	; 207
    11c2:	80 62       	ori	r24, 0x20	; 32
    11c4:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11c8:	80 91 a9 00 	lds	r24, 0x00A9
    11cc:	8f 7b       	andi	r24, 0xBF	; 191
    11ce:	80 93 a9 00 	sts	0x00A9, r24
    11d2:	1d c0       	rjmp	.+58     	; 0x120e <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11d4:	82 e0       	ldi	r24, 0x02	; 2
    11d6:	0d df       	rcall	.-486    	; 0xff2 <USB_Host_WaitForIOS>
    11d8:	98 2f       	mov	r25, r24
    11da:	88 23       	and	r24, r24
    11dc:	c9 f5       	brne	.+114    	; 0x1250 <USB_Host_SendControlRequest+0x20c>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    11de:	80 91 21 01 	lds	r24, 0x0121
    11e2:	28 2f       	mov	r18, r24
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	07 c0       	rjmp	.+14     	; 0x11f6 <USB_Host_SendControlRequest+0x1b2>
				{
					Pipe_Write_8(*(DataStream++));
    11e8:	f8 01       	movw	r30, r16
    11ea:	81 91       	ld	r24, Z+
    11ec:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    11ee:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    11f2:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    11f4:	39 f0       	breq	.+14     	; 0x1204 <USB_Host_SendControlRequest+0x1c0>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    11f6:	80 91 f6 00 	lds	r24, 0x00F6
    11fa:	90 91 f7 00 	lds	r25, 0x00F7
    11fe:	82 17       	cp	r24, r18
    1200:	93 07       	cpc	r25, r19
    1202:	90 f3       	brcs	.-28     	; 0x11e8 <USB_Host_SendControlRequest+0x1a4>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1204:	80 91 a6 00 	lds	r24, 0x00A6
    1208:	8b 77       	andi	r24, 0x7B	; 123
    120a:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    120e:	20 97       	sbiw	r28, 0x00	; 0
    1210:	09 f7       	brne	.-62     	; 0x11d4 <USB_Host_SendControlRequest+0x190>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1212:	82 e0       	ldi	r24, 0x02	; 2
    1214:	ee de       	rcall	.-548    	; 0xff2 <USB_Host_WaitForIOS>
    1216:	98 2f       	mov	r25, r24
    1218:	88 23       	and	r24, r24
    121a:	d1 f4       	brne	.+52     	; 0x1250 <USB_Host_SendControlRequest+0x20c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    121c:	80 91 a9 00 	lds	r24, 0x00A9
    1220:	80 64       	ori	r24, 0x40	; 64
    1222:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1226:	80 91 aa 00 	lds	r24, 0x00AA
    122a:	8f 7c       	andi	r24, 0xCF	; 207
    122c:	80 61       	ori	r24, 0x10	; 16
    122e:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1232:	80 91 a9 00 	lds	r24, 0x00A9
    1236:	8f 7b       	andi	r24, 0xBF	; 191
    1238:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	d9 de       	rcall	.-590    	; 0xff2 <USB_Host_WaitForIOS>
    1240:	98 2f       	mov	r25, r24
    1242:	88 23       	and	r24, r24
    1244:	29 f4       	brne	.+10     	; 0x1250 <USB_Host_SendControlRequest+0x20c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1246:	80 91 a6 00 	lds	r24, 0x00A6
    124a:	8e 77       	andi	r24, 0x7E	; 126
    124c:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1250:	80 91 a9 00 	lds	r24, 0x00A9
    1254:	80 64       	ori	r24, 0x40	; 64
    1256:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    125a:	f0 fc       	sbrc	r15, 0
    125c:	05 c0       	rjmp	.+10     	; 0x1268 <USB_Host_SendControlRequest+0x224>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    125e:	80 91 9e 00 	lds	r24, 0x009E
    1262:	8e 7f       	andi	r24, 0xFE	; 254
    1264:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    126e:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1272:	89 2f       	mov	r24, r25
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	1f 91       	pop	r17
    127a:	0f 91       	pop	r16
    127c:	ff 90       	pop	r15
    127e:	08 95       	ret

00001280 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1280:	1f 93       	push	r17
    1282:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1284:	10 92 28 01 	sts	0x0128, r1
    1288:	89 e0       	ldi	r24, 0x09	; 9
    128a:	80 93 29 01 	sts	0x0129, r24
    128e:	10 93 2a 01 	sts	0x012A, r17
    1292:	10 92 2b 01 	sts	0x012B, r1
    1296:	10 92 2d 01 	sts	0x012D, r1
    129a:	10 92 2c 01 	sts	0x012C, r1
    129e:	10 92 2f 01 	sts	0x012F, r1
    12a2:	10 92 2e 01 	sts	0x012E, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    12a6:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	ca de       	rcall	.-620    	; 0x1044 <USB_Host_SendControlRequest>
    12b0:	88 23       	and	r24, r24
    12b2:	49 f4       	brne	.+18     	; 0x12c6 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    12b4:	10 93 26 01 	sts	0x0126, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    12b8:	11 23       	and	r17, r17
    12ba:	11 f4       	brne	.+4      	; 0x12c0 <USB_Host_SetDeviceConfiguration+0x40>
    12bc:	9a e0       	ldi	r25, 0x0A	; 10
    12be:	01 c0       	rjmp	.+2      	; 0x12c2 <USB_Host_SetDeviceConfiguration+0x42>
    12c0:	9b e0       	ldi	r25, 0x0B	; 11
    12c2:	90 93 30 01 	sts	0x0130, r25
	}

	return ErrorCode;
}
    12c6:	1f 91       	pop	r17
    12c8:	08 95       	ret

000012ca <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    12ca:	ff 92       	push	r15
    12cc:	0f 93       	push	r16
    12ce:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    12d0:	07 ea       	ldi	r16, 0xA7	; 167
    12d2:	10 e0       	ldi	r17, 0x00	; 0
    12d4:	f8 01       	movw	r30, r16
    12d6:	f0 80       	ld	r15, Z
    12d8:	f7 e0       	ldi	r31, 0x07	; 7
    12da:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    12dc:	f8 01       	movw	r30, r16
    12de:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    12e0:	3c da       	rcall	.-2952   	; 0x75a <USB_Host_ProcessNextHostState>
    12e2:	f8 01       	movw	r30, r16
    12e4:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    12e6:	1f 91       	pop	r17
    12e8:	0f 91       	pop	r16
    12ea:	ff 90       	pop	r15
    12ec:	08 95       	ret

000012ee <DCOMP_MIDI_Host_NextMIDIStreamingInterface>:

	return MIDI_ENUMERROR_NoError;
}

static uint8_t DCOMP_MIDI_Host_NextMIDIStreamingInterface(void* const CurrentDescriptor)
{
    12ee:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    12f0:	81 81       	ldd	r24, Z+1	; 0x01
    12f2:	84 30       	cpi	r24, 0x04	; 4
    12f4:	41 f4       	brne	.+16     	; 0x1306 <DCOMP_MIDI_Host_NextMIDIStreamingInterface+0x18>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass)            &&
    12f6:	85 81       	ldd	r24, Z+5	; 0x05
    12f8:	81 30       	cpi	r24, 0x01	; 1
    12fa:	29 f4       	brne	.+10     	; 0x1306 <DCOMP_MIDI_Host_NextMIDIStreamingInterface+0x18>
    12fc:	86 81       	ldd	r24, Z+6	; 0x06
    12fe:	83 30       	cpi	r24, 0x03	; 3
    1300:	11 f4       	brne	.+4      	; 0x1306 <DCOMP_MIDI_Host_NextMIDIStreamingInterface+0x18>
    1302:	87 81       	ldd	r24, Z+7	; 0x07
    1304:	81 11       	cpse	r24, r1
    1306:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1308:	08 95       	ret

0000130a <MIDI_Host_ReceiveEventPacket>:
	return PIPE_RWSTREAM_NoError;
}

bool MIDI_Host_ReceiveEventPacket(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo,
                                  MIDI_EventPacket_t* const Event)
{
    130a:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
    130c:	80 91 30 01 	lds	r24, 0x0130
    1310:	8b 30       	cpi	r24, 0x0B	; 11
    1312:	e9 f4       	brne	.+58     	; 0x134e <MIDI_Host_ReceiveEventPacket+0x44>
    1314:	84 81       	ldd	r24, Z+4	; 0x04
    1316:	88 23       	and	r24, r24
    1318:	d1 f0       	breq	.+52     	; 0x134e <MIDI_Host_ReceiveEventPacket+0x44>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	Pipe_SelectPipe(MIDIInterfaceInfo->Config.DataINPipeNumber);
    131a:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    131c:	80 93 a7 00 	sts	0x00A7, r24
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1320:	80 91 a6 00 	lds	r24, 0x00A6

	if (!(Pipe_IsReadWriteAllowed()))
    1324:	85 fd       	sbrc	r24, 5
    1326:	02 c0       	rjmp	.+4      	; 0x132c <MIDI_Host_ReceiveEventPacket+0x22>
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	08 95       	ret
	  return false;

	Pipe_Read_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL);
    132c:	cb 01       	movw	r24, r22
    132e:	64 e0       	ldi	r22, 0x04	; 4
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	40 e0       	ldi	r20, 0x00	; 0
    1334:	50 e0       	ldi	r21, 0x00	; 0
    1336:	10 dd       	rcall	.-1504   	; 0xd58 <Pipe_Read_Stream_LE>
    1338:	80 91 a6 00 	lds	r24, 0x00A6

	if (!(Pipe_IsReadWriteAllowed()))
    133c:	85 fd       	sbrc	r24, 5
    133e:	07 c0       	rjmp	.+14     	; 0x134e <MIDI_Host_ReceiveEventPacket+0x44>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1340:	80 91 a6 00 	lds	r24, 0x00A6
    1344:	8e 77       	andi	r24, 0x7E	; 126
    1346:	80 93 a6 00 	sts	0x00A6, r24
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	08 95       	ret
    134e:	81 e0       	ldi	r24, 0x01	; 1
	  Pipe_ClearIN();

	return true;
}
    1350:	08 95       	ret

00001352 <MIDI_Host_SendEventPacket>:
	return PIPE_READYWAIT_NoError;
}

uint8_t MIDI_Host_SendEventPacket(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo,
                                  MIDI_EventPacket_t* const Event)
{
    1352:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
    1354:	80 91 30 01 	lds	r24, 0x0130
    1358:	8b 30       	cpi	r24, 0x0B	; 11
    135a:	c9 f4       	brne	.+50     	; 0x138e <MIDI_Host_SendEventPacket+0x3c>
    135c:	84 81       	ldd	r24, Z+4	; 0x04
    135e:	88 23       	and	r24, r24
    1360:	b1 f0       	breq	.+44     	; 0x138e <MIDI_Host_SendEventPacket+0x3c>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	uint8_t ErrorCode;

	Pipe_SelectPipe(MIDIInterfaceInfo->Config.DataOUTPipeNumber);
    1362:	82 81       	ldd	r24, Z+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1364:	80 93 a7 00 	sts	0x00A7, r24

	if ((ErrorCode = Pipe_Write_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL)) != PIPE_RWSTREAM_NoError)
    1368:	cb 01       	movw	r24, r22
    136a:	64 e0       	ldi	r22, 0x04	; 4
    136c:	70 e0       	ldi	r23, 0x00	; 0
    136e:	40 e0       	ldi	r20, 0x00	; 0
    1370:	50 e0       	ldi	r21, 0x00	; 0
    1372:	49 dd       	rcall	.-1390   	; 0xe06 <Pipe_Write_Stream_LE>
    1374:	98 2f       	mov	r25, r24
    1376:	88 23       	and	r24, r24
    1378:	59 f4       	brne	.+22     	; 0x1390 <MIDI_Host_SendEventPacket+0x3e>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    137a:	80 91 a6 00 	lds	r24, 0x00A6
	  return ErrorCode;

	if (!(Pipe_IsReadWriteAllowed()))
    137e:	85 fd       	sbrc	r24, 5
    1380:	07 c0       	rjmp	.+14     	; 0x1390 <MIDI_Host_SendEventPacket+0x3e>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1382:	80 91 a6 00 	lds	r24, 0x00A6
    1386:	8b 77       	andi	r24, 0x7B	; 123
    1388:	80 93 a6 00 	sts	0x00A6, r24
    138c:	01 c0       	rjmp	.+2      	; 0x1390 <MIDI_Host_SendEventPacket+0x3e>
    138e:	91 e0       	ldi	r25, 0x01	; 1
	  Pipe_ClearOUT();

	return PIPE_RWSTREAM_NoError;
}
    1390:	89 2f       	mov	r24, r25
    1392:	08 95       	ret

00001394 <MIDI_Host_Flush>:
	MIDI_Host_Flush(MIDIInterfaceInfo);
	#endif	
}

uint8_t MIDI_Host_Flush(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo)
{
    1394:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
    1396:	80 91 30 01 	lds	r24, 0x0130
    139a:	8b 30       	cpi	r24, 0x0B	; 11
    139c:	a1 f4       	brne	.+40     	; 0x13c6 <MIDI_Host_Flush+0x32>
    139e:	84 81       	ldd	r24, Z+4	; 0x04
    13a0:	88 23       	and	r24, r24
    13a2:	89 f0       	breq	.+34     	; 0x13c6 <MIDI_Host_Flush+0x32>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Pipe_SelectPipe(MIDIInterfaceInfo->Config.DataOUTPipeNumber);
    13a4:	82 81       	ldd	r24, Z+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    13a6:	80 93 a7 00 	sts	0x00A7, r24
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    13aa:	80 91 f6 00 	lds	r24, 0x00F6
    13ae:	90 91 f7 00 	lds	r25, 0x00F7

	if (Pipe_BytesInPipe())
    13b2:	89 2b       	or	r24, r25
    13b4:	11 f4       	brne	.+4      	; 0x13ba <MIDI_Host_Flush+0x26>
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	08 95       	ret
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    13ba:	80 91 a6 00 	lds	r24, 0x00A6
    13be:	8b 77       	andi	r24, 0x7B	; 123
    13c0:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_ClearOUT();

		if ((ErrorCode = Pipe_WaitUntilReady()) != PIPE_READYWAIT_NoError)
    13c4:	89 cb       	rjmp	.-2286   	; 0xad8 <Pipe_WaitUntilReady>
    13c6:	82 e0       	ldi	r24, 0x02	; 2
		  return ErrorCode;
	}

	return PIPE_READYWAIT_NoError;
}
    13c8:	08 95       	ret

000013ca <MIDI_Host_USBTask>:

	return DESCRIPTOR_SEARCH_NotFound;
}

void MIDI_Host_USBTask(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo)
{
    13ca:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
    13cc:	80 91 30 01 	lds	r24, 0x0130
    13d0:	8b 30       	cpi	r24, 0x0B	; 11
    13d2:	29 f4       	brne	.+10     	; 0x13de <MIDI_Host_USBTask+0x14>
    13d4:	84 81       	ldd	r24, Z+4	; 0x04
    13d6:	88 23       	and	r24, r24
    13d8:	11 f0       	breq	.+4      	; 0x13de <MIDI_Host_USBTask+0x14>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	MIDI_Host_Flush(MIDIInterfaceInfo);
    13da:	cf 01       	movw	r24, r30
    13dc:	db cf       	rjmp	.-74     	; 0x1394 <MIDI_Host_Flush>
    13de:	08 95       	ret

000013e0 <MIDI_Host_ConfigurePipes>:
#include "MIDI.h"

uint8_t MIDI_Host_ConfigurePipes(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo,
                                 uint16_t ConfigDescriptorSize,
                                 void* ConfigDescriptorData)
{
    13e0:	6f 92       	push	r6
    13e2:	7f 92       	push	r7
    13e4:	8f 92       	push	r8
    13e6:	9f 92       	push	r9
    13e8:	af 92       	push	r10
    13ea:	bf 92       	push	r11
    13ec:	cf 92       	push	r12
    13ee:	df 92       	push	r13
    13f0:	ef 92       	push	r14
    13f2:	ff 92       	push	r15
    13f4:	0f 93       	push	r16
    13f6:	1f 93       	push	r17
    13f8:	df 93       	push	r29
    13fa:	cf 93       	push	r28
    13fc:	00 d0       	rcall	.+0      	; 0x13fe <MIDI_Host_ConfigurePipes+0x1e>
    13fe:	00 d0       	rcall	.+0      	; 0x1400 <MIDI_Host_ConfigurePipes+0x20>
    1400:	0f 92       	push	r0
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
    1406:	6c 01       	movw	r12, r24
    1408:	7a 83       	std	Y+2, r23	; 0x02
    140a:	69 83       	std	Y+1, r22	; 0x01
    140c:	5c 83       	std	Y+4, r21	; 0x04
    140e:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* MIDIInterface   = NULL;

	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));
    1410:	04 96       	adiw	r24, 0x04	; 4
    1412:	fc 01       	movw	r30, r24
    1414:	86 e0       	ldi	r24, 0x06	; 6
    1416:	df 01       	movw	r26, r30
    1418:	1d 92       	st	X+, r1
    141a:	8a 95       	dec	r24
    141c:	e9 f7       	brne	.-6      	; 0x1418 <MIDI_Host_ConfigurePipes+0x38>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    141e:	eb 81       	ldd	r30, Y+3	; 0x03
    1420:	fc 81       	ldd	r31, Y+4	; 0x04
    1422:	81 81       	ldd	r24, Z+1	; 0x01
    1424:	82 30       	cpi	r24, 0x02	; 2
    1426:	11 f0       	breq	.+4      	; 0x142c <MIDI_Host_ConfigurePipes+0x4c>
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	72 c0       	rjmp	.+228    	; 0x1510 <MIDI_Host_ConfigurePipes+0x130>
    142c:	88 24       	eor	r8, r8
    142e:	99 24       	eor	r9, r9
    1430:	66 24       	eor	r6, r6
    1432:	77 24       	eor	r7, r7
    1434:	aa 24       	eor	r10, r10
    1436:	bb 24       	eor	r11, r11
	  return MIDI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(MIDIInterface) ||
    1438:	83 e0       	ldi	r24, 0x03	; 3
    143a:	e8 2e       	mov	r14, r24
    143c:	f1 2c       	mov	r15, r1
    143e:	ec 0e       	add	r14, r28
    1440:	fd 1e       	adc	r15, r29
    1442:	8e 01       	movw	r16, r28
    1444:	0f 5f       	subi	r16, 0xFF	; 255
    1446:	1f 4f       	sbci	r17, 0xFF	; 255
    1448:	61 14       	cp	r6, r1
    144a:	71 04       	cpc	r7, r1
    144c:	39 f0       	breq	.+14     	; 0x145c <MIDI_Host_ConfigurePipes+0x7c>
    144e:	c8 01       	movw	r24, r16
    1450:	b7 01       	movw	r22, r14
    1452:	4c e9       	ldi	r20, 0x9C	; 156
    1454:	5a e0       	ldi	r21, 0x0A	; 10
    1456:	2e dd       	rcall	.-1444   	; 0xeb4 <USB_GetNextDescriptorComp>
    1458:	88 23       	and	r24, r24
    145a:	81 f0       	breq	.+32     	; 0x147c <MIDI_Host_ConfigurePipes+0x9c>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    145c:	c8 01       	movw	r24, r16
    145e:	b7 01       	movw	r22, r14
    1460:	47 e7       	ldi	r20, 0x77	; 119
    1462:	59 e0       	ldi	r21, 0x09	; 9
    1464:	27 dd       	rcall	.-1458   	; 0xeb4 <USB_GetNextDescriptorComp>
    1466:	88 23       	and	r24, r24
    1468:	11 f0       	breq	.+4      	; 0x146e <MIDI_Host_ConfigurePipes+0x8e>
    146a:	82 e0       	ldi	r24, 0x02	; 2
    146c:	51 c0       	rjmp	.+162    	; 0x1510 <MIDI_Host_ConfigurePipes+0x130>
			                              DCOMP_MIDI_Host_NextMIDIStreamingInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return MIDI_ENUMERROR_NoCompatibleInterfaceFound;
			}

			MIDIInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    146e:	6b 80       	ldd	r6, Y+3	; 0x03
    1470:	7c 80       	ldd	r7, Y+4	; 0x04
    1472:	aa 24       	eor	r10, r10
    1474:	bb 24       	eor	r11, r11
    1476:	88 24       	eor	r8, r8
    1478:	99 24       	eor	r9, r9
    147a:	e6 cf       	rjmp	.-52     	; 0x1448 <MIDI_Host_ConfigurePipes+0x68>
			DataOUTEndpoint = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    147c:	eb 81       	ldd	r30, Y+3	; 0x03
    147e:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1480:	82 81       	ldd	r24, Z+2	; 0x02
    1482:	87 fd       	sbrc	r24, 7
    1484:	02 c0       	rjmp	.+4      	; 0x148a <MIDI_Host_ConfigurePipes+0xaa>
    1486:	4f 01       	movw	r8, r30
    1488:	01 c0       	rjmp	.+2      	; 0x148c <MIDI_Host_ConfigurePipes+0xac>
    148a:	5f 01       	movw	r10, r30
	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MIDI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    148c:	a1 14       	cp	r10, r1
    148e:	b1 04       	cpc	r11, r1
    1490:	d9 f2       	breq	.-74     	; 0x1448 <MIDI_Host_ConfigurePipes+0x68>
    1492:	81 14       	cp	r8, r1
    1494:	91 04       	cpc	r9, r1
    1496:	c1 f2       	breq	.-80     	; 0x1448 <MIDI_Host_ConfigurePipes+0x68>
    1498:	91 e0       	ldi	r25, 0x01	; 1
		uint8_t  Type;
		uint8_t  Token;
		uint8_t  EndpointAddress;
		bool     DoubleBanked;

		if (PipeNum == MIDIInterfaceInfo->Config.DataINPipeNumber)
    149a:	f6 01       	movw	r30, r12
    149c:	80 81       	ld	r24, Z
    149e:	98 17       	cp	r25, r24
    14a0:	61 f4       	brne	.+24     	; 0x14ba <MIDI_Host_ConfigurePipes+0xda>
		{
			Size            = le16_to_cpu(DataINEndpoint->EndpointSize);
    14a2:	d5 01       	movw	r26, r10
    14a4:	14 96       	adiw	r26, 0x04	; 4
    14a6:	0d 91       	ld	r16, X+
    14a8:	1c 91       	ld	r17, X
    14aa:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataINEndpoint->EndpointAddress;
    14ac:	12 96       	adiw	r26, 0x02	; 2
    14ae:	2c 91       	ld	r18, X
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = MIDIInterfaceInfo->Config.DataINPipeDoubleBank;
    14b0:	81 81       	ldd	r24, Z+1	; 0x01

			MIDIInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    14b2:	17 83       	std	Z+7, r17	; 0x07
    14b4:	06 83       	std	Z+6, r16	; 0x06
    14b6:	40 e1       	ldi	r20, 0x10	; 16
    14b8:	0f c0       	rjmp	.+30     	; 0x14d8 <MIDI_Host_ConfigurePipes+0xf8>
		}
		else if (PipeNum == MIDIInterfaceInfo->Config.DataOUTPipeNumber)
    14ba:	f6 01       	movw	r30, r12
    14bc:	82 81       	ldd	r24, Z+2	; 0x02
    14be:	98 17       	cp	r25, r24
    14c0:	d1 f4       	brne	.+52     	; 0x14f6 <MIDI_Host_ConfigurePipes+0x116>
		{
			Size            = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    14c2:	d4 01       	movw	r26, r8
    14c4:	14 96       	adiw	r26, 0x04	; 4
    14c6:	0d 91       	ld	r16, X+
    14c8:	1c 91       	ld	r17, X
    14ca:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
    14cc:	12 96       	adiw	r26, 0x02	; 2
    14ce:	2c 91       	ld	r18, X
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = MIDIInterfaceInfo->Config.DataOUTPipeDoubleBank;
    14d0:	83 81       	ldd	r24, Z+3	; 0x03

			MIDIInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    14d2:	11 87       	std	Z+9, r17	; 0x09
    14d4:	00 87       	std	Z+8, r16	; 0x08
    14d6:	40 e2       	ldi	r20, 0x20	; 32
		else
		{
			continue;
		}

		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    14d8:	88 23       	and	r24, r24
    14da:	11 f4       	brne	.+4      	; 0x14e0 <MIDI_Host_ConfigurePipes+0x100>
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	01 c0       	rjmp	.+2      	; 0x14e2 <MIDI_Host_ConfigurePipes+0x102>
    14e0:	34 e0       	ldi	r19, 0x04	; 4
    14e2:	89 2f       	mov	r24, r25
    14e4:	62 e0       	ldi	r22, 0x02	; 2
    14e6:	e3 2e       	mov	r14, r19
    14e8:	9d 83       	std	Y+5, r25	; 0x05
    14ea:	62 da       	rcall	.-2876   	; 0x9b0 <Pipe_ConfigurePipe>
    14ec:	9d 81       	ldd	r25, Y+5	; 0x05
    14ee:	88 23       	and	r24, r24
    14f0:	11 f4       	brne	.+4      	; 0x14f6 <MIDI_Host_ConfigurePipes+0x116>
    14f2:	83 e0       	ldi	r24, 0x03	; 3
    14f4:	0d c0       	rjmp	.+26     	; 0x1510 <MIDI_Host_ConfigurePipes+0x130>
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    14f6:	9f 5f       	subi	r25, 0xFF	; 255
    14f8:	97 30       	cpi	r25, 0x07	; 7
    14fa:	79 f6       	brne	.-98     	; 0x149a <MIDI_Host_ConfigurePipes+0xba>
		{
			return MIDI_ENUMERROR_PipeConfigurationFailed;
		}
	}

	MIDIInterfaceInfo->State.InterfaceNumber = MIDIInterface->InterfaceNumber;
    14fc:	f3 01       	movw	r30, r6
    14fe:	82 81       	ldd	r24, Z+2	; 0x02
    1500:	d6 01       	movw	r26, r12
    1502:	15 96       	adiw	r26, 0x05	; 5
    1504:	8c 93       	st	X, r24
    1506:	15 97       	sbiw	r26, 0x05	; 5
	MIDIInterfaceInfo->State.IsActive = true;
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	14 96       	adiw	r26, 0x04	; 4
    150c:	8c 93       	st	X, r24
    150e:	80 e0       	ldi	r24, 0x00	; 0

	return MIDI_ENUMERROR_NoError;
}
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	1f 91       	pop	r17
    1520:	0f 91       	pop	r16
    1522:	ff 90       	pop	r15
    1524:	ef 90       	pop	r14
    1526:	df 90       	pop	r13
    1528:	cf 90       	pop	r12
    152a:	bf 90       	pop	r11
    152c:	af 90       	pop	r10
    152e:	9f 90       	pop	r9
    1530:	8f 90       	pop	r8
    1532:	7f 90       	pop	r7
    1534:	6f 90       	pop	r6
    1536:	08 95       	ret

00001538 <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint>:

	return DESCRIPTOR_SEARCH_NotFound;
}

static uint8_t DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint(void* const CurrentDescriptor)
{
    1538:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    153a:	81 81       	ldd	r24, Z+1	; 0x01
    153c:	85 30       	cpi	r24, 0x05	; 5
    153e:	49 f4       	brne	.+18     	; 0x1552 <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint+0x1a>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if ((EndpointType == EP_TYPE_BULK) && !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    1540:	83 81       	ldd	r24, Z+3	; 0x03
    1542:	83 70       	andi	r24, 0x03	; 3
    1544:	82 30       	cpi	r24, 0x02	; 2
    1546:	49 f4       	brne	.+18     	; 0x155a <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint+0x22>
    1548:	82 81       	ldd	r24, Z+2	; 0x02
    154a:	a4 da       	rcall	.-2744   	; 0xa94 <Pipe_IsEndpointBound>
    154c:	88 23       	and	r24, r24
    154e:	29 f4       	brne	.+10     	; 0x155a <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint+0x22>
    1550:	08 95       	ret
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    1552:	84 30       	cpi	r24, 0x04	; 4
    1554:	11 f4       	brne	.+4      	; 0x155a <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint+0x22>
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	08 95       	ret
    155a:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    155c:	08 95       	ret

0000155e <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    155e:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1560:	80 91 c8 00 	lds	r24, 0x00C8
    1564:	85 ff       	sbrs	r24, 5
    1566:	fc cf       	rjmp	.-8      	; 0x1560 <Serial_putchar+0x2>
				UDR1 = DataByte;
    1568:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	08 95       	ret

00001572 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1572:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1576:	87 fd       	sbrc	r24, 7
    1578:	03 c0       	rjmp	.+6      	; 0x1580 <Serial_getchar+0xe>
    157a:	2e ef       	ldi	r18, 0xFE	; 254
    157c:	3f ef       	ldi	r19, 0xFF	; 255
    157e:	0b c0       	rjmp	.+22     	; 0x1596 <Serial_getchar+0x24>
    1580:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1584:	87 fd       	sbrc	r24, 7
    1586:	03 c0       	rjmp	.+6      	; 0x158e <Serial_getchar+0x1c>
    1588:	2f ef       	ldi	r18, 0xFF	; 255
    158a:	3f ef       	ldi	r19, 0xFF	; 255
    158c:	04 c0       	rjmp	.+8      	; 0x1596 <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    158e:	80 91 ce 00 	lds	r24, 0x00CE
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    1596:	c9 01       	movw	r24, r18
    1598:	08 95       	ret

0000159a <printf_P>:
    159a:	df 93       	push	r29
    159c:	cf 93       	push	r28
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
    15a2:	fe 01       	movw	r30, r28
    15a4:	35 96       	adiw	r30, 0x05	; 5
    15a6:	61 91       	ld	r22, Z+
    15a8:	71 91       	ld	r23, Z+
    15aa:	a0 91 41 01 	lds	r26, 0x0141
    15ae:	b0 91 42 01 	lds	r27, 0x0142
    15b2:	13 96       	adiw	r26, 0x03	; 3
    15b4:	8c 91       	ld	r24, X
    15b6:	13 97       	sbiw	r26, 0x03	; 3
    15b8:	88 60       	ori	r24, 0x08	; 8
    15ba:	13 96       	adiw	r26, 0x03	; 3
    15bc:	8c 93       	st	X, r24
    15be:	80 91 41 01 	lds	r24, 0x0141
    15c2:	90 91 42 01 	lds	r25, 0x0142
    15c6:	af 01       	movw	r20, r30
    15c8:	3f d0       	rcall	.+126    	; 0x1648 <vfprintf>
    15ca:	e0 91 41 01 	lds	r30, 0x0141
    15ce:	f0 91 42 01 	lds	r31, 0x0142
    15d2:	23 81       	ldd	r18, Z+3	; 0x03
    15d4:	27 7f       	andi	r18, 0xF7	; 247
    15d6:	23 83       	std	Z+3, r18	; 0x03
    15d8:	cf 91       	pop	r28
    15da:	df 91       	pop	r29
    15dc:	08 95       	ret

000015de <puts_P>:
    15de:	0f 93       	push	r16
    15e0:	1f 93       	push	r17
    15e2:	cf 93       	push	r28
    15e4:	df 93       	push	r29
    15e6:	ec 01       	movw	r28, r24
    15e8:	e0 91 41 01 	lds	r30, 0x0141
    15ec:	f0 91 42 01 	lds	r31, 0x0142
    15f0:	83 81       	ldd	r24, Z+3	; 0x03
    15f2:	81 ff       	sbrs	r24, 1
    15f4:	21 c0       	rjmp	.+66     	; 0x1638 <puts_P+0x5a>
    15f6:	00 e0       	ldi	r16, 0x00	; 0
    15f8:	10 e0       	ldi	r17, 0x00	; 0
    15fa:	0e c0       	rjmp	.+28     	; 0x1618 <puts_P+0x3a>
    15fc:	e0 91 41 01 	lds	r30, 0x0141
    1600:	f0 91 42 01 	lds	r31, 0x0142
    1604:	20 85       	ldd	r18, Z+8	; 0x08
    1606:	31 85       	ldd	r19, Z+9	; 0x09
    1608:	bf 01       	movw	r22, r30
    160a:	f9 01       	movw	r30, r18
    160c:	09 95       	icall
    160e:	89 2b       	or	r24, r25
    1610:	11 f0       	breq	.+4      	; 0x1616 <puts_P+0x38>
    1612:	0f ef       	ldi	r16, 0xFF	; 255
    1614:	1f ef       	ldi	r17, 0xFF	; 255
    1616:	21 96       	adiw	r28, 0x01	; 1
    1618:	fe 01       	movw	r30, r28
    161a:	84 91       	lpm	r24, Z+
    161c:	88 23       	and	r24, r24
    161e:	71 f7       	brne	.-36     	; 0x15fc <puts_P+0x1e>
    1620:	e0 91 41 01 	lds	r30, 0x0141
    1624:	f0 91 42 01 	lds	r31, 0x0142
    1628:	20 85       	ldd	r18, Z+8	; 0x08
    162a:	31 85       	ldd	r19, Z+9	; 0x09
    162c:	8a e0       	ldi	r24, 0x0A	; 10
    162e:	bf 01       	movw	r22, r30
    1630:	f9 01       	movw	r30, r18
    1632:	09 95       	icall
    1634:	89 2b       	or	r24, r25
    1636:	11 f0       	breq	.+4      	; 0x163c <puts_P+0x5e>
    1638:	0f ef       	ldi	r16, 0xFF	; 255
    163a:	1f ef       	ldi	r17, 0xFF	; 255
    163c:	c8 01       	movw	r24, r16
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	1f 91       	pop	r17
    1644:	0f 91       	pop	r16
    1646:	08 95       	ret

00001648 <vfprintf>:
    1648:	2f 92       	push	r2
    164a:	3f 92       	push	r3
    164c:	4f 92       	push	r4
    164e:	5f 92       	push	r5
    1650:	6f 92       	push	r6
    1652:	7f 92       	push	r7
    1654:	8f 92       	push	r8
    1656:	9f 92       	push	r9
    1658:	af 92       	push	r10
    165a:	bf 92       	push	r11
    165c:	cf 92       	push	r12
    165e:	df 92       	push	r13
    1660:	ef 92       	push	r14
    1662:	ff 92       	push	r15
    1664:	0f 93       	push	r16
    1666:	1f 93       	push	r17
    1668:	df 93       	push	r29
    166a:	cf 93       	push	r28
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	2b 97       	sbiw	r28, 0x0b	; 11
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	f8 94       	cli
    1676:	de bf       	out	0x3e, r29	; 62
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	cd bf       	out	0x3d, r28	; 61
    167c:	3c 01       	movw	r6, r24
    167e:	2b 01       	movw	r4, r22
    1680:	5a 01       	movw	r10, r20
    1682:	fc 01       	movw	r30, r24
    1684:	17 82       	std	Z+7, r1	; 0x07
    1686:	16 82       	std	Z+6, r1	; 0x06
    1688:	83 81       	ldd	r24, Z+3	; 0x03
    168a:	81 fd       	sbrc	r24, 1
    168c:	03 c0       	rjmp	.+6      	; 0x1694 <vfprintf+0x4c>
    168e:	6f ef       	ldi	r22, 0xFF	; 255
    1690:	7f ef       	ldi	r23, 0xFF	; 255
    1692:	b9 c1       	rjmp	.+882    	; 0x1a06 <vfprintf+0x3be>
    1694:	9a e0       	ldi	r25, 0x0A	; 10
    1696:	89 2e       	mov	r8, r25
    1698:	1e 01       	movw	r2, r28
    169a:	08 94       	sec
    169c:	21 1c       	adc	r2, r1
    169e:	31 1c       	adc	r3, r1
    16a0:	f3 01       	movw	r30, r6
    16a2:	23 81       	ldd	r18, Z+3	; 0x03
    16a4:	f2 01       	movw	r30, r4
    16a6:	23 fd       	sbrc	r18, 3
    16a8:	85 91       	lpm	r24, Z+
    16aa:	23 ff       	sbrs	r18, 3
    16ac:	81 91       	ld	r24, Z+
    16ae:	2f 01       	movw	r4, r30
    16b0:	88 23       	and	r24, r24
    16b2:	09 f4       	brne	.+2      	; 0x16b6 <vfprintf+0x6e>
    16b4:	a5 c1       	rjmp	.+842    	; 0x1a00 <vfprintf+0x3b8>
    16b6:	85 32       	cpi	r24, 0x25	; 37
    16b8:	39 f4       	brne	.+14     	; 0x16c8 <vfprintf+0x80>
    16ba:	23 fd       	sbrc	r18, 3
    16bc:	85 91       	lpm	r24, Z+
    16be:	23 ff       	sbrs	r18, 3
    16c0:	81 91       	ld	r24, Z+
    16c2:	2f 01       	movw	r4, r30
    16c4:	85 32       	cpi	r24, 0x25	; 37
    16c6:	21 f4       	brne	.+8      	; 0x16d0 <vfprintf+0x88>
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	b3 01       	movw	r22, r6
    16cc:	cc d1       	rcall	.+920    	; 0x1a66 <fputc>
    16ce:	e8 cf       	rjmp	.-48     	; 0x16a0 <vfprintf+0x58>
    16d0:	98 2f       	mov	r25, r24
    16d2:	ff 24       	eor	r15, r15
    16d4:	ee 24       	eor	r14, r14
    16d6:	99 24       	eor	r9, r9
    16d8:	ff e1       	ldi	r31, 0x1F	; 31
    16da:	ff 15       	cp	r31, r15
    16dc:	d0 f0       	brcs	.+52     	; 0x1712 <vfprintf+0xca>
    16de:	9b 32       	cpi	r25, 0x2B	; 43
    16e0:	69 f0       	breq	.+26     	; 0x16fc <vfprintf+0xb4>
    16e2:	9c 32       	cpi	r25, 0x2C	; 44
    16e4:	28 f4       	brcc	.+10     	; 0x16f0 <vfprintf+0xa8>
    16e6:	90 32       	cpi	r25, 0x20	; 32
    16e8:	59 f0       	breq	.+22     	; 0x1700 <vfprintf+0xb8>
    16ea:	93 32       	cpi	r25, 0x23	; 35
    16ec:	91 f4       	brne	.+36     	; 0x1712 <vfprintf+0xca>
    16ee:	0e c0       	rjmp	.+28     	; 0x170c <vfprintf+0xc4>
    16f0:	9d 32       	cpi	r25, 0x2D	; 45
    16f2:	49 f0       	breq	.+18     	; 0x1706 <vfprintf+0xbe>
    16f4:	90 33       	cpi	r25, 0x30	; 48
    16f6:	69 f4       	brne	.+26     	; 0x1712 <vfprintf+0xca>
    16f8:	41 e0       	ldi	r20, 0x01	; 1
    16fa:	24 c0       	rjmp	.+72     	; 0x1744 <vfprintf+0xfc>
    16fc:	52 e0       	ldi	r21, 0x02	; 2
    16fe:	f5 2a       	or	r15, r21
    1700:	84 e0       	ldi	r24, 0x04	; 4
    1702:	f8 2a       	or	r15, r24
    1704:	28 c0       	rjmp	.+80     	; 0x1756 <vfprintf+0x10e>
    1706:	98 e0       	ldi	r25, 0x08	; 8
    1708:	f9 2a       	or	r15, r25
    170a:	25 c0       	rjmp	.+74     	; 0x1756 <vfprintf+0x10e>
    170c:	e0 e1       	ldi	r30, 0x10	; 16
    170e:	fe 2a       	or	r15, r30
    1710:	22 c0       	rjmp	.+68     	; 0x1756 <vfprintf+0x10e>
    1712:	f7 fc       	sbrc	r15, 7
    1714:	29 c0       	rjmp	.+82     	; 0x1768 <vfprintf+0x120>
    1716:	89 2f       	mov	r24, r25
    1718:	80 53       	subi	r24, 0x30	; 48
    171a:	8a 30       	cpi	r24, 0x0A	; 10
    171c:	70 f4       	brcc	.+28     	; 0x173a <vfprintf+0xf2>
    171e:	f6 fe       	sbrs	r15, 6
    1720:	05 c0       	rjmp	.+10     	; 0x172c <vfprintf+0xe4>
    1722:	98 9c       	mul	r9, r8
    1724:	90 2c       	mov	r9, r0
    1726:	11 24       	eor	r1, r1
    1728:	98 0e       	add	r9, r24
    172a:	15 c0       	rjmp	.+42     	; 0x1756 <vfprintf+0x10e>
    172c:	e8 9c       	mul	r14, r8
    172e:	e0 2c       	mov	r14, r0
    1730:	11 24       	eor	r1, r1
    1732:	e8 0e       	add	r14, r24
    1734:	f0 e2       	ldi	r31, 0x20	; 32
    1736:	ff 2a       	or	r15, r31
    1738:	0e c0       	rjmp	.+28     	; 0x1756 <vfprintf+0x10e>
    173a:	9e 32       	cpi	r25, 0x2E	; 46
    173c:	29 f4       	brne	.+10     	; 0x1748 <vfprintf+0x100>
    173e:	f6 fc       	sbrc	r15, 6
    1740:	5f c1       	rjmp	.+702    	; 0x1a00 <vfprintf+0x3b8>
    1742:	40 e4       	ldi	r20, 0x40	; 64
    1744:	f4 2a       	or	r15, r20
    1746:	07 c0       	rjmp	.+14     	; 0x1756 <vfprintf+0x10e>
    1748:	9c 36       	cpi	r25, 0x6C	; 108
    174a:	19 f4       	brne	.+6      	; 0x1752 <vfprintf+0x10a>
    174c:	50 e8       	ldi	r21, 0x80	; 128
    174e:	f5 2a       	or	r15, r21
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <vfprintf+0x10e>
    1752:	98 36       	cpi	r25, 0x68	; 104
    1754:	49 f4       	brne	.+18     	; 0x1768 <vfprintf+0x120>
    1756:	f2 01       	movw	r30, r4
    1758:	23 fd       	sbrc	r18, 3
    175a:	95 91       	lpm	r25, Z+
    175c:	23 ff       	sbrs	r18, 3
    175e:	91 91       	ld	r25, Z+
    1760:	2f 01       	movw	r4, r30
    1762:	99 23       	and	r25, r25
    1764:	09 f0       	breq	.+2      	; 0x1768 <vfprintf+0x120>
    1766:	b8 cf       	rjmp	.-144    	; 0x16d8 <vfprintf+0x90>
    1768:	89 2f       	mov	r24, r25
    176a:	85 54       	subi	r24, 0x45	; 69
    176c:	83 30       	cpi	r24, 0x03	; 3
    176e:	18 f0       	brcs	.+6      	; 0x1776 <vfprintf+0x12e>
    1770:	80 52       	subi	r24, 0x20	; 32
    1772:	83 30       	cpi	r24, 0x03	; 3
    1774:	38 f4       	brcc	.+14     	; 0x1784 <vfprintf+0x13c>
    1776:	44 e0       	ldi	r20, 0x04	; 4
    1778:	50 e0       	ldi	r21, 0x00	; 0
    177a:	a4 0e       	add	r10, r20
    177c:	b5 1e       	adc	r11, r21
    177e:	5f e3       	ldi	r21, 0x3F	; 63
    1780:	59 83       	std	Y+1, r21	; 0x01
    1782:	0f c0       	rjmp	.+30     	; 0x17a2 <vfprintf+0x15a>
    1784:	93 36       	cpi	r25, 0x63	; 99
    1786:	31 f0       	breq	.+12     	; 0x1794 <vfprintf+0x14c>
    1788:	93 37       	cpi	r25, 0x73	; 115
    178a:	79 f0       	breq	.+30     	; 0x17aa <vfprintf+0x162>
    178c:	93 35       	cpi	r25, 0x53	; 83
    178e:	09 f0       	breq	.+2      	; 0x1792 <vfprintf+0x14a>
    1790:	52 c0       	rjmp	.+164    	; 0x1836 <vfprintf+0x1ee>
    1792:	1f c0       	rjmp	.+62     	; 0x17d2 <vfprintf+0x18a>
    1794:	f5 01       	movw	r30, r10
    1796:	80 81       	ld	r24, Z
    1798:	89 83       	std	Y+1, r24	; 0x01
    179a:	42 e0       	ldi	r20, 0x02	; 2
    179c:	50 e0       	ldi	r21, 0x00	; 0
    179e:	a4 0e       	add	r10, r20
    17a0:	b5 1e       	adc	r11, r21
    17a2:	61 01       	movw	r12, r2
    17a4:	01 e0       	ldi	r16, 0x01	; 1
    17a6:	10 e0       	ldi	r17, 0x00	; 0
    17a8:	11 c0       	rjmp	.+34     	; 0x17cc <vfprintf+0x184>
    17aa:	f5 01       	movw	r30, r10
    17ac:	c0 80       	ld	r12, Z
    17ae:	d1 80       	ldd	r13, Z+1	; 0x01
    17b0:	f6 fc       	sbrc	r15, 6
    17b2:	03 c0       	rjmp	.+6      	; 0x17ba <vfprintf+0x172>
    17b4:	6f ef       	ldi	r22, 0xFF	; 255
    17b6:	7f ef       	ldi	r23, 0xFF	; 255
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <vfprintf+0x176>
    17ba:	69 2d       	mov	r22, r9
    17bc:	70 e0       	ldi	r23, 0x00	; 0
    17be:	42 e0       	ldi	r20, 0x02	; 2
    17c0:	50 e0       	ldi	r21, 0x00	; 0
    17c2:	a4 0e       	add	r10, r20
    17c4:	b5 1e       	adc	r11, r21
    17c6:	c6 01       	movw	r24, r12
    17c8:	43 d1       	rcall	.+646    	; 0x1a50 <strnlen>
    17ca:	8c 01       	movw	r16, r24
    17cc:	5f e7       	ldi	r21, 0x7F	; 127
    17ce:	f5 22       	and	r15, r21
    17d0:	13 c0       	rjmp	.+38     	; 0x17f8 <vfprintf+0x1b0>
    17d2:	f5 01       	movw	r30, r10
    17d4:	c0 80       	ld	r12, Z
    17d6:	d1 80       	ldd	r13, Z+1	; 0x01
    17d8:	f6 fc       	sbrc	r15, 6
    17da:	03 c0       	rjmp	.+6      	; 0x17e2 <vfprintf+0x19a>
    17dc:	6f ef       	ldi	r22, 0xFF	; 255
    17de:	7f ef       	ldi	r23, 0xFF	; 255
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <vfprintf+0x19e>
    17e2:	69 2d       	mov	r22, r9
    17e4:	70 e0       	ldi	r23, 0x00	; 0
    17e6:	42 e0       	ldi	r20, 0x02	; 2
    17e8:	50 e0       	ldi	r21, 0x00	; 0
    17ea:	a4 0e       	add	r10, r20
    17ec:	b5 1e       	adc	r11, r21
    17ee:	c6 01       	movw	r24, r12
    17f0:	24 d1       	rcall	.+584    	; 0x1a3a <strnlen_P>
    17f2:	8c 01       	movw	r16, r24
    17f4:	50 e8       	ldi	r21, 0x80	; 128
    17f6:	f5 2a       	or	r15, r21
    17f8:	f3 fe       	sbrs	r15, 3
    17fa:	06 c0       	rjmp	.+12     	; 0x1808 <vfprintf+0x1c0>
    17fc:	18 c0       	rjmp	.+48     	; 0x182e <vfprintf+0x1e6>
    17fe:	80 e2       	ldi	r24, 0x20	; 32
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	b3 01       	movw	r22, r6
    1804:	30 d1       	rcall	.+608    	; 0x1a66 <fputc>
    1806:	ea 94       	dec	r14
    1808:	8e 2d       	mov	r24, r14
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	08 17       	cp	r16, r24
    180e:	19 07       	cpc	r17, r25
    1810:	b0 f3       	brcs	.-20     	; 0x17fe <vfprintf+0x1b6>
    1812:	0d c0       	rjmp	.+26     	; 0x182e <vfprintf+0x1e6>
    1814:	f6 01       	movw	r30, r12
    1816:	f7 fc       	sbrc	r15, 7
    1818:	85 91       	lpm	r24, Z+
    181a:	f7 fe       	sbrs	r15, 7
    181c:	81 91       	ld	r24, Z+
    181e:	6f 01       	movw	r12, r30
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	b3 01       	movw	r22, r6
    1824:	20 d1       	rcall	.+576    	; 0x1a66 <fputc>
    1826:	e1 10       	cpse	r14, r1
    1828:	ea 94       	dec	r14
    182a:	01 50       	subi	r16, 0x01	; 1
    182c:	10 40       	sbci	r17, 0x00	; 0
    182e:	01 15       	cp	r16, r1
    1830:	11 05       	cpc	r17, r1
    1832:	81 f7       	brne	.-32     	; 0x1814 <vfprintf+0x1cc>
    1834:	e2 c0       	rjmp	.+452    	; 0x19fa <vfprintf+0x3b2>
    1836:	94 36       	cpi	r25, 0x64	; 100
    1838:	11 f0       	breq	.+4      	; 0x183e <vfprintf+0x1f6>
    183a:	99 36       	cpi	r25, 0x69	; 105
    183c:	61 f5       	brne	.+88     	; 0x1896 <vfprintf+0x24e>
    183e:	f7 fe       	sbrs	r15, 7
    1840:	08 c0       	rjmp	.+16     	; 0x1852 <vfprintf+0x20a>
    1842:	f5 01       	movw	r30, r10
    1844:	20 81       	ld	r18, Z
    1846:	31 81       	ldd	r19, Z+1	; 0x01
    1848:	42 81       	ldd	r20, Z+2	; 0x02
    184a:	53 81       	ldd	r21, Z+3	; 0x03
    184c:	84 e0       	ldi	r24, 0x04	; 4
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	0a c0       	rjmp	.+20     	; 0x1866 <vfprintf+0x21e>
    1852:	f5 01       	movw	r30, r10
    1854:	80 81       	ld	r24, Z
    1856:	91 81       	ldd	r25, Z+1	; 0x01
    1858:	9c 01       	movw	r18, r24
    185a:	44 27       	eor	r20, r20
    185c:	37 fd       	sbrc	r19, 7
    185e:	40 95       	com	r20
    1860:	54 2f       	mov	r21, r20
    1862:	82 e0       	ldi	r24, 0x02	; 2
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	a8 0e       	add	r10, r24
    1868:	b9 1e       	adc	r11, r25
    186a:	9f e6       	ldi	r25, 0x6F	; 111
    186c:	f9 22       	and	r15, r25
    186e:	57 ff       	sbrs	r21, 7
    1870:	09 c0       	rjmp	.+18     	; 0x1884 <vfprintf+0x23c>
    1872:	50 95       	com	r21
    1874:	40 95       	com	r20
    1876:	30 95       	com	r19
    1878:	21 95       	neg	r18
    187a:	3f 4f       	sbci	r19, 0xFF	; 255
    187c:	4f 4f       	sbci	r20, 0xFF	; 255
    187e:	5f 4f       	sbci	r21, 0xFF	; 255
    1880:	e0 e8       	ldi	r30, 0x80	; 128
    1882:	fe 2a       	or	r15, r30
    1884:	ca 01       	movw	r24, r20
    1886:	b9 01       	movw	r22, r18
    1888:	a1 01       	movw	r20, r2
    188a:	2a e0       	ldi	r18, 0x0A	; 10
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	17 d1       	rcall	.+558    	; 0x1abe <__ultoa_invert>
    1890:	d8 2e       	mov	r13, r24
    1892:	d2 18       	sub	r13, r2
    1894:	3f c0       	rjmp	.+126    	; 0x1914 <vfprintf+0x2cc>
    1896:	95 37       	cpi	r25, 0x75	; 117
    1898:	29 f4       	brne	.+10     	; 0x18a4 <vfprintf+0x25c>
    189a:	1f 2d       	mov	r17, r15
    189c:	1f 7e       	andi	r17, 0xEF	; 239
    189e:	2a e0       	ldi	r18, 0x0A	; 10
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	1d c0       	rjmp	.+58     	; 0x18de <vfprintf+0x296>
    18a4:	1f 2d       	mov	r17, r15
    18a6:	19 7f       	andi	r17, 0xF9	; 249
    18a8:	9f 36       	cpi	r25, 0x6F	; 111
    18aa:	61 f0       	breq	.+24     	; 0x18c4 <vfprintf+0x27c>
    18ac:	90 37       	cpi	r25, 0x70	; 112
    18ae:	20 f4       	brcc	.+8      	; 0x18b8 <vfprintf+0x270>
    18b0:	98 35       	cpi	r25, 0x58	; 88
    18b2:	09 f0       	breq	.+2      	; 0x18b6 <vfprintf+0x26e>
    18b4:	a5 c0       	rjmp	.+330    	; 0x1a00 <vfprintf+0x3b8>
    18b6:	0f c0       	rjmp	.+30     	; 0x18d6 <vfprintf+0x28e>
    18b8:	90 37       	cpi	r25, 0x70	; 112
    18ba:	39 f0       	breq	.+14     	; 0x18ca <vfprintf+0x282>
    18bc:	98 37       	cpi	r25, 0x78	; 120
    18be:	09 f0       	breq	.+2      	; 0x18c2 <vfprintf+0x27a>
    18c0:	9f c0       	rjmp	.+318    	; 0x1a00 <vfprintf+0x3b8>
    18c2:	04 c0       	rjmp	.+8      	; 0x18cc <vfprintf+0x284>
    18c4:	28 e0       	ldi	r18, 0x08	; 8
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	0a c0       	rjmp	.+20     	; 0x18de <vfprintf+0x296>
    18ca:	10 61       	ori	r17, 0x10	; 16
    18cc:	14 fd       	sbrc	r17, 4
    18ce:	14 60       	ori	r17, 0x04	; 4
    18d0:	20 e1       	ldi	r18, 0x10	; 16
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	04 c0       	rjmp	.+8      	; 0x18de <vfprintf+0x296>
    18d6:	14 fd       	sbrc	r17, 4
    18d8:	16 60       	ori	r17, 0x06	; 6
    18da:	20 e1       	ldi	r18, 0x10	; 16
    18dc:	32 e0       	ldi	r19, 0x02	; 2
    18de:	17 ff       	sbrs	r17, 7
    18e0:	08 c0       	rjmp	.+16     	; 0x18f2 <vfprintf+0x2aa>
    18e2:	f5 01       	movw	r30, r10
    18e4:	60 81       	ld	r22, Z
    18e6:	71 81       	ldd	r23, Z+1	; 0x01
    18e8:	82 81       	ldd	r24, Z+2	; 0x02
    18ea:	93 81       	ldd	r25, Z+3	; 0x03
    18ec:	44 e0       	ldi	r20, 0x04	; 4
    18ee:	50 e0       	ldi	r21, 0x00	; 0
    18f0:	08 c0       	rjmp	.+16     	; 0x1902 <vfprintf+0x2ba>
    18f2:	f5 01       	movw	r30, r10
    18f4:	80 81       	ld	r24, Z
    18f6:	91 81       	ldd	r25, Z+1	; 0x01
    18f8:	bc 01       	movw	r22, r24
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	42 e0       	ldi	r20, 0x02	; 2
    1900:	50 e0       	ldi	r21, 0x00	; 0
    1902:	a4 0e       	add	r10, r20
    1904:	b5 1e       	adc	r11, r21
    1906:	a1 01       	movw	r20, r2
    1908:	da d0       	rcall	.+436    	; 0x1abe <__ultoa_invert>
    190a:	d8 2e       	mov	r13, r24
    190c:	d2 18       	sub	r13, r2
    190e:	8f e7       	ldi	r24, 0x7F	; 127
    1910:	f8 2e       	mov	r15, r24
    1912:	f1 22       	and	r15, r17
    1914:	f6 fe       	sbrs	r15, 6
    1916:	0b c0       	rjmp	.+22     	; 0x192e <vfprintf+0x2e6>
    1918:	5e ef       	ldi	r21, 0xFE	; 254
    191a:	f5 22       	and	r15, r21
    191c:	d9 14       	cp	r13, r9
    191e:	38 f4       	brcc	.+14     	; 0x192e <vfprintf+0x2e6>
    1920:	f4 fe       	sbrs	r15, 4
    1922:	07 c0       	rjmp	.+14     	; 0x1932 <vfprintf+0x2ea>
    1924:	f2 fc       	sbrc	r15, 2
    1926:	05 c0       	rjmp	.+10     	; 0x1932 <vfprintf+0x2ea>
    1928:	8f ee       	ldi	r24, 0xEF	; 239
    192a:	f8 22       	and	r15, r24
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <vfprintf+0x2ea>
    192e:	1d 2d       	mov	r17, r13
    1930:	01 c0       	rjmp	.+2      	; 0x1934 <vfprintf+0x2ec>
    1932:	19 2d       	mov	r17, r9
    1934:	f4 fe       	sbrs	r15, 4
    1936:	0d c0       	rjmp	.+26     	; 0x1952 <vfprintf+0x30a>
    1938:	fe 01       	movw	r30, r28
    193a:	ed 0d       	add	r30, r13
    193c:	f1 1d       	adc	r31, r1
    193e:	80 81       	ld	r24, Z
    1940:	80 33       	cpi	r24, 0x30	; 48
    1942:	19 f4       	brne	.+6      	; 0x194a <vfprintf+0x302>
    1944:	99 ee       	ldi	r25, 0xE9	; 233
    1946:	f9 22       	and	r15, r25
    1948:	08 c0       	rjmp	.+16     	; 0x195a <vfprintf+0x312>
    194a:	1f 5f       	subi	r17, 0xFF	; 255
    194c:	f2 fe       	sbrs	r15, 2
    194e:	05 c0       	rjmp	.+10     	; 0x195a <vfprintf+0x312>
    1950:	03 c0       	rjmp	.+6      	; 0x1958 <vfprintf+0x310>
    1952:	8f 2d       	mov	r24, r15
    1954:	86 78       	andi	r24, 0x86	; 134
    1956:	09 f0       	breq	.+2      	; 0x195a <vfprintf+0x312>
    1958:	1f 5f       	subi	r17, 0xFF	; 255
    195a:	0f 2d       	mov	r16, r15
    195c:	f3 fc       	sbrc	r15, 3
    195e:	13 c0       	rjmp	.+38     	; 0x1986 <vfprintf+0x33e>
    1960:	f0 fe       	sbrs	r15, 0
    1962:	0e c0       	rjmp	.+28     	; 0x1980 <vfprintf+0x338>
    1964:	1e 15       	cp	r17, r14
    1966:	10 f0       	brcs	.+4      	; 0x196c <vfprintf+0x324>
    1968:	9d 2c       	mov	r9, r13
    196a:	0a c0       	rjmp	.+20     	; 0x1980 <vfprintf+0x338>
    196c:	9d 2c       	mov	r9, r13
    196e:	9e 0c       	add	r9, r14
    1970:	91 1a       	sub	r9, r17
    1972:	1e 2d       	mov	r17, r14
    1974:	05 c0       	rjmp	.+10     	; 0x1980 <vfprintf+0x338>
    1976:	80 e2       	ldi	r24, 0x20	; 32
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	b3 01       	movw	r22, r6
    197c:	74 d0       	rcall	.+232    	; 0x1a66 <fputc>
    197e:	1f 5f       	subi	r17, 0xFF	; 255
    1980:	1e 15       	cp	r17, r14
    1982:	c8 f3       	brcs	.-14     	; 0x1976 <vfprintf+0x32e>
    1984:	04 c0       	rjmp	.+8      	; 0x198e <vfprintf+0x346>
    1986:	1e 15       	cp	r17, r14
    1988:	10 f4       	brcc	.+4      	; 0x198e <vfprintf+0x346>
    198a:	e1 1a       	sub	r14, r17
    198c:	01 c0       	rjmp	.+2      	; 0x1990 <vfprintf+0x348>
    198e:	ee 24       	eor	r14, r14
    1990:	04 ff       	sbrs	r16, 4
    1992:	0e c0       	rjmp	.+28     	; 0x19b0 <vfprintf+0x368>
    1994:	80 e3       	ldi	r24, 0x30	; 48
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	b3 01       	movw	r22, r6
    199a:	65 d0       	rcall	.+202    	; 0x1a66 <fputc>
    199c:	02 ff       	sbrs	r16, 2
    199e:	1b c0       	rjmp	.+54     	; 0x19d6 <vfprintf+0x38e>
    19a0:	01 fd       	sbrc	r16, 1
    19a2:	03 c0       	rjmp	.+6      	; 0x19aa <vfprintf+0x362>
    19a4:	88 e7       	ldi	r24, 0x78	; 120
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	0e c0       	rjmp	.+28     	; 0x19c6 <vfprintf+0x37e>
    19aa:	88 e5       	ldi	r24, 0x58	; 88
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	0b c0       	rjmp	.+22     	; 0x19c6 <vfprintf+0x37e>
    19b0:	80 2f       	mov	r24, r16
    19b2:	86 78       	andi	r24, 0x86	; 134
    19b4:	81 f0       	breq	.+32     	; 0x19d6 <vfprintf+0x38e>
    19b6:	01 ff       	sbrs	r16, 1
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <vfprintf+0x376>
    19ba:	8b e2       	ldi	r24, 0x2B	; 43
    19bc:	01 c0       	rjmp	.+2      	; 0x19c0 <vfprintf+0x378>
    19be:	80 e2       	ldi	r24, 0x20	; 32
    19c0:	f7 fc       	sbrc	r15, 7
    19c2:	8d e2       	ldi	r24, 0x2D	; 45
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	b3 01       	movw	r22, r6
    19c8:	4e d0       	rcall	.+156    	; 0x1a66 <fputc>
    19ca:	05 c0       	rjmp	.+10     	; 0x19d6 <vfprintf+0x38e>
    19cc:	80 e3       	ldi	r24, 0x30	; 48
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	b3 01       	movw	r22, r6
    19d2:	49 d0       	rcall	.+146    	; 0x1a66 <fputc>
    19d4:	9a 94       	dec	r9
    19d6:	d9 14       	cp	r13, r9
    19d8:	c8 f3       	brcs	.-14     	; 0x19cc <vfprintf+0x384>
    19da:	da 94       	dec	r13
    19dc:	f1 01       	movw	r30, r2
    19de:	ed 0d       	add	r30, r13
    19e0:	f1 1d       	adc	r31, r1
    19e2:	80 81       	ld	r24, Z
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	b3 01       	movw	r22, r6
    19e8:	3e d0       	rcall	.+124    	; 0x1a66 <fputc>
    19ea:	dd 20       	and	r13, r13
    19ec:	b1 f7       	brne	.-20     	; 0x19da <vfprintf+0x392>
    19ee:	05 c0       	rjmp	.+10     	; 0x19fa <vfprintf+0x3b2>
    19f0:	80 e2       	ldi	r24, 0x20	; 32
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	b3 01       	movw	r22, r6
    19f6:	37 d0       	rcall	.+110    	; 0x1a66 <fputc>
    19f8:	ea 94       	dec	r14
    19fa:	ee 20       	and	r14, r14
    19fc:	c9 f7       	brne	.-14     	; 0x19f0 <vfprintf+0x3a8>
    19fe:	50 ce       	rjmp	.-864    	; 0x16a0 <vfprintf+0x58>
    1a00:	f3 01       	movw	r30, r6
    1a02:	66 81       	ldd	r22, Z+6	; 0x06
    1a04:	77 81       	ldd	r23, Z+7	; 0x07
    1a06:	cb 01       	movw	r24, r22
    1a08:	2b 96       	adiw	r28, 0x0b	; 11
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	f8 94       	cli
    1a0e:	de bf       	out	0x3e, r29	; 62
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	cd bf       	out	0x3d, r28	; 61
    1a14:	cf 91       	pop	r28
    1a16:	df 91       	pop	r29
    1a18:	1f 91       	pop	r17
    1a1a:	0f 91       	pop	r16
    1a1c:	ff 90       	pop	r15
    1a1e:	ef 90       	pop	r14
    1a20:	df 90       	pop	r13
    1a22:	cf 90       	pop	r12
    1a24:	bf 90       	pop	r11
    1a26:	af 90       	pop	r10
    1a28:	9f 90       	pop	r9
    1a2a:	8f 90       	pop	r8
    1a2c:	7f 90       	pop	r7
    1a2e:	6f 90       	pop	r6
    1a30:	5f 90       	pop	r5
    1a32:	4f 90       	pop	r4
    1a34:	3f 90       	pop	r3
    1a36:	2f 90       	pop	r2
    1a38:	08 95       	ret

00001a3a <strnlen_P>:
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	05 90       	lpm	r0, Z+
    1a3e:	61 50       	subi	r22, 0x01	; 1
    1a40:	70 40       	sbci	r23, 0x00	; 0
    1a42:	01 10       	cpse	r0, r1
    1a44:	d8 f7       	brcc	.-10     	; 0x1a3c <strnlen_P+0x2>
    1a46:	80 95       	com	r24
    1a48:	90 95       	com	r25
    1a4a:	8e 0f       	add	r24, r30
    1a4c:	9f 1f       	adc	r25, r31
    1a4e:	08 95       	ret

00001a50 <strnlen>:
    1a50:	fc 01       	movw	r30, r24
    1a52:	61 50       	subi	r22, 0x01	; 1
    1a54:	70 40       	sbci	r23, 0x00	; 0
    1a56:	01 90       	ld	r0, Z+
    1a58:	01 10       	cpse	r0, r1
    1a5a:	d8 f7       	brcc	.-10     	; 0x1a52 <strnlen+0x2>
    1a5c:	80 95       	com	r24
    1a5e:	90 95       	com	r25
    1a60:	8e 0f       	add	r24, r30
    1a62:	9f 1f       	adc	r25, r31
    1a64:	08 95       	ret

00001a66 <fputc>:
    1a66:	0f 93       	push	r16
    1a68:	1f 93       	push	r17
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	8c 01       	movw	r16, r24
    1a70:	eb 01       	movw	r28, r22
    1a72:	8b 81       	ldd	r24, Y+3	; 0x03
    1a74:	81 ff       	sbrs	r24, 1
    1a76:	1b c0       	rjmp	.+54     	; 0x1aae <fputc+0x48>
    1a78:	82 ff       	sbrs	r24, 2
    1a7a:	0d c0       	rjmp	.+26     	; 0x1a96 <fputc+0x30>
    1a7c:	2e 81       	ldd	r18, Y+6	; 0x06
    1a7e:	3f 81       	ldd	r19, Y+7	; 0x07
    1a80:	8c 81       	ldd	r24, Y+4	; 0x04
    1a82:	9d 81       	ldd	r25, Y+5	; 0x05
    1a84:	28 17       	cp	r18, r24
    1a86:	39 07       	cpc	r19, r25
    1a88:	64 f4       	brge	.+24     	; 0x1aa2 <fputc+0x3c>
    1a8a:	e8 81       	ld	r30, Y
    1a8c:	f9 81       	ldd	r31, Y+1	; 0x01
    1a8e:	01 93       	st	Z+, r16
    1a90:	f9 83       	std	Y+1, r31	; 0x01
    1a92:	e8 83       	st	Y, r30
    1a94:	06 c0       	rjmp	.+12     	; 0x1aa2 <fputc+0x3c>
    1a96:	e8 85       	ldd	r30, Y+8	; 0x08
    1a98:	f9 85       	ldd	r31, Y+9	; 0x09
    1a9a:	80 2f       	mov	r24, r16
    1a9c:	09 95       	icall
    1a9e:	89 2b       	or	r24, r25
    1aa0:	31 f4       	brne	.+12     	; 0x1aae <fputc+0x48>
    1aa2:	8e 81       	ldd	r24, Y+6	; 0x06
    1aa4:	9f 81       	ldd	r25, Y+7	; 0x07
    1aa6:	01 96       	adiw	r24, 0x01	; 1
    1aa8:	9f 83       	std	Y+7, r25	; 0x07
    1aaa:	8e 83       	std	Y+6, r24	; 0x06
    1aac:	02 c0       	rjmp	.+4      	; 0x1ab2 <fputc+0x4c>
    1aae:	0f ef       	ldi	r16, 0xFF	; 255
    1ab0:	1f ef       	ldi	r17, 0xFF	; 255
    1ab2:	c8 01       	movw	r24, r16
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	1f 91       	pop	r17
    1aba:	0f 91       	pop	r16
    1abc:	08 95       	ret

00001abe <__ultoa_invert>:
    1abe:	fa 01       	movw	r30, r20
    1ac0:	aa 27       	eor	r26, r26
    1ac2:	28 30       	cpi	r18, 0x08	; 8
    1ac4:	51 f1       	breq	.+84     	; 0x1b1a <__ultoa_invert+0x5c>
    1ac6:	20 31       	cpi	r18, 0x10	; 16
    1ac8:	81 f1       	breq	.+96     	; 0x1b2a <__ultoa_invert+0x6c>
    1aca:	e8 94       	clt
    1acc:	6f 93       	push	r22
    1ace:	6e 7f       	andi	r22, 0xFE	; 254
    1ad0:	6e 5f       	subi	r22, 0xFE	; 254
    1ad2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad8:	af 4f       	sbci	r26, 0xFF	; 255
    1ada:	b1 e0       	ldi	r27, 0x01	; 1
    1adc:	3e d0       	rcall	.+124    	; 0x1b5a <__ultoa_invert+0x9c>
    1ade:	b4 e0       	ldi	r27, 0x04	; 4
    1ae0:	3c d0       	rcall	.+120    	; 0x1b5a <__ultoa_invert+0x9c>
    1ae2:	67 0f       	add	r22, r23
    1ae4:	78 1f       	adc	r23, r24
    1ae6:	89 1f       	adc	r24, r25
    1ae8:	9a 1f       	adc	r25, r26
    1aea:	a1 1d       	adc	r26, r1
    1aec:	68 0f       	add	r22, r24
    1aee:	79 1f       	adc	r23, r25
    1af0:	8a 1f       	adc	r24, r26
    1af2:	91 1d       	adc	r25, r1
    1af4:	a1 1d       	adc	r26, r1
    1af6:	6a 0f       	add	r22, r26
    1af8:	71 1d       	adc	r23, r1
    1afa:	81 1d       	adc	r24, r1
    1afc:	91 1d       	adc	r25, r1
    1afe:	a1 1d       	adc	r26, r1
    1b00:	20 d0       	rcall	.+64     	; 0x1b42 <__ultoa_invert+0x84>
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <__ultoa_invert+0x48>
    1b04:	68 94       	set
    1b06:	3f 91       	pop	r19
    1b08:	2a e0       	ldi	r18, 0x0A	; 10
    1b0a:	26 9f       	mul	r18, r22
    1b0c:	11 24       	eor	r1, r1
    1b0e:	30 19       	sub	r19, r0
    1b10:	30 5d       	subi	r19, 0xD0	; 208
    1b12:	31 93       	st	Z+, r19
    1b14:	de f6       	brtc	.-74     	; 0x1acc <__ultoa_invert+0xe>
    1b16:	cf 01       	movw	r24, r30
    1b18:	08 95       	ret
    1b1a:	46 2f       	mov	r20, r22
    1b1c:	47 70       	andi	r20, 0x07	; 7
    1b1e:	40 5d       	subi	r20, 0xD0	; 208
    1b20:	41 93       	st	Z+, r20
    1b22:	b3 e0       	ldi	r27, 0x03	; 3
    1b24:	0f d0       	rcall	.+30     	; 0x1b44 <__ultoa_invert+0x86>
    1b26:	c9 f7       	brne	.-14     	; 0x1b1a <__ultoa_invert+0x5c>
    1b28:	f6 cf       	rjmp	.-20     	; 0x1b16 <__ultoa_invert+0x58>
    1b2a:	46 2f       	mov	r20, r22
    1b2c:	4f 70       	andi	r20, 0x0F	; 15
    1b2e:	40 5d       	subi	r20, 0xD0	; 208
    1b30:	4a 33       	cpi	r20, 0x3A	; 58
    1b32:	18 f0       	brcs	.+6      	; 0x1b3a <__ultoa_invert+0x7c>
    1b34:	49 5d       	subi	r20, 0xD9	; 217
    1b36:	31 fd       	sbrc	r19, 1
    1b38:	40 52       	subi	r20, 0x20	; 32
    1b3a:	41 93       	st	Z+, r20
    1b3c:	02 d0       	rcall	.+4      	; 0x1b42 <__ultoa_invert+0x84>
    1b3e:	a9 f7       	brne	.-22     	; 0x1b2a <__ultoa_invert+0x6c>
    1b40:	ea cf       	rjmp	.-44     	; 0x1b16 <__ultoa_invert+0x58>
    1b42:	b4 e0       	ldi	r27, 0x04	; 4
    1b44:	a6 95       	lsr	r26
    1b46:	97 95       	ror	r25
    1b48:	87 95       	ror	r24
    1b4a:	77 95       	ror	r23
    1b4c:	67 95       	ror	r22
    1b4e:	ba 95       	dec	r27
    1b50:	c9 f7       	brne	.-14     	; 0x1b44 <__ultoa_invert+0x86>
    1b52:	00 97       	sbiw	r24, 0x00	; 0
    1b54:	61 05       	cpc	r22, r1
    1b56:	71 05       	cpc	r23, r1
    1b58:	08 95       	ret
    1b5a:	9b 01       	movw	r18, r22
    1b5c:	ac 01       	movw	r20, r24
    1b5e:	0a 2e       	mov	r0, r26
    1b60:	06 94       	lsr	r0
    1b62:	57 95       	ror	r21
    1b64:	47 95       	ror	r20
    1b66:	37 95       	ror	r19
    1b68:	27 95       	ror	r18
    1b6a:	ba 95       	dec	r27
    1b6c:	c9 f7       	brne	.-14     	; 0x1b60 <__ultoa_invert+0xa2>
    1b6e:	62 0f       	add	r22, r18
    1b70:	73 1f       	adc	r23, r19
    1b72:	84 1f       	adc	r24, r20
    1b74:	95 1f       	adc	r25, r21
    1b76:	a0 1d       	adc	r26, r0
    1b78:	08 95       	ret

00001b7a <_exit>:
    1b7a:	f8 94       	cli

00001b7c <__stop_program>:
    1b7c:	ff cf       	rjmp	.-2      	; 0x1b7c <__stop_program>
