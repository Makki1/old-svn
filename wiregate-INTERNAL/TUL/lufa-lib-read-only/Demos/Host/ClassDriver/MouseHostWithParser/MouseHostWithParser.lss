
MouseHostWithParser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  0000260a  0000269e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000260a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fb  00800124  00800124  000026c2  2**0
                  ALLOC
  3 .stab         00002208  00000000  00000000  000026c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dff  00000000  00000000  000048cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000006d0  00000000  00000000  000056cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000fb3  00000000  00000000  00005d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000b9c3  00000000  00000000  00006d4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002878  00000000  00000000  00012711  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007ddb  00000000  00000000  00014f89  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b20  00000000  00000000  0001cd64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000045fe  00000000  00000000  0001d884  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000056f0  00000000  00000000  00021e82  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007b8  00000000  00000000  00027572  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       0:	19 c1       	rjmp	.+562    	; 0x234 <__ctors_end>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       2:	00 00       	nop
	return USB_Host_SendControlRequest(NULL);
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
       4:	35 c1       	rjmp	.+618    	; 0x270 <__bad_interrupt>
	return true;
}

void USB_SetHIDReportItemInfo(uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
       6:	00 00       	nop
	return HOST_SENDCONTROL_Successful;
}

uint8_t HID_Host_SetIdlePeriod(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               const uint16_t MS)
{
       8:	33 c1       	rjmp	.+614    	; 0x270 <__bad_interrupt>

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       a:	00 00       	nop
       c:	31 c1       	rjmp	.+610    	; 0x270 <__bad_interrupt>
       e:	00 00       	nop
      10:	2f c1       	rjmp	.+606    	; 0x270 <__bad_interrupt>
      12:	00 00       	nop
      14:	2d c1       	rjmp	.+602    	; 0x270 <__bad_interrupt>
      16:	00 00       	nop
      18:	2b c1       	rjmp	.+598    	; 0x270 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	29 c1       	rjmp	.+594    	; 0x270 <__bad_interrupt>
      1e:	00 00       	nop
      20:	27 c1       	rjmp	.+590    	; 0x270 <__bad_interrupt>
      22:	00 00       	nop
      24:	25 c1       	rjmp	.+586    	; 0x270 <__bad_interrupt>
      26:	00 00       	nop
      28:	3a c6       	rjmp	.+3188   	; 0xc9e <__vector_10>
      2a:	00 00       	nop
      2c:	21 c1       	rjmp	.+578    	; 0x270 <__bad_interrupt>
      2e:	00 00       	nop
      30:	1f c1       	rjmp	.+574    	; 0x270 <__bad_interrupt>
      32:	00 00       	nop
      34:	1d c1       	rjmp	.+570    	; 0x270 <__bad_interrupt>
      36:	00 00       	nop
      38:	1b c1       	rjmp	.+566    	; 0x270 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	19 c1       	rjmp	.+562    	; 0x270 <__bad_interrupt>
      3e:	00 00       	nop
      40:	17 c1       	rjmp	.+558    	; 0x270 <__bad_interrupt>
      42:	00 00       	nop
      44:	15 c1       	rjmp	.+554    	; 0x270 <__bad_interrupt>
      46:	00 00       	nop
      48:	13 c1       	rjmp	.+550    	; 0x270 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	11 c1       	rjmp	.+546    	; 0x270 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0f c1       	rjmp	.+542    	; 0x270 <__bad_interrupt>
      52:	00 00       	nop
      54:	0d c1       	rjmp	.+538    	; 0x270 <__bad_interrupt>
      56:	00 00       	nop
      58:	0b c1       	rjmp	.+534    	; 0x270 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	09 c1       	rjmp	.+530    	; 0x270 <__bad_interrupt>
      5e:	00 00       	nop
      60:	07 c1       	rjmp	.+526    	; 0x270 <__bad_interrupt>
      62:	00 00       	nop
      64:	05 c1       	rjmp	.+522    	; 0x270 <__bad_interrupt>
      66:	00 00       	nop
      68:	03 c1       	rjmp	.+518    	; 0x270 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	01 c1       	rjmp	.+514    	; 0x270 <__bad_interrupt>
      6e:	00 00       	nop
      70:	ff c0       	rjmp	.+510    	; 0x270 <__bad_interrupt>
      72:	00 00       	nop
      74:	fd c0       	rjmp	.+506    	; 0x270 <__bad_interrupt>
      76:	00 00       	nop
      78:	fb c0       	rjmp	.+502    	; 0x270 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f9 c0       	rjmp	.+498    	; 0x270 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f7 c0       	rjmp	.+494    	; 0x270 <__bad_interrupt>
      82:	00 00       	nop
      84:	f5 c0       	rjmp	.+490    	; 0x270 <__bad_interrupt>
      86:	00 00       	nop
      88:	f3 c0       	rjmp	.+486    	; 0x270 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f1 c0       	rjmp	.+482    	; 0x270 <__bad_interrupt>
      8e:	00 00       	nop
      90:	ef c0       	rjmp	.+478    	; 0x270 <__bad_interrupt>
      92:	00 00       	nop
      94:	ed c0       	rjmp	.+474    	; 0x270 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4615>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4607>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4597>:
     11d:	4d 6f 75 73 65 20 45 6e 75 6d 65 72 61 74 65 64     Mouse Enumerated
     12d:	2e 0d 0a 00                                         ....

00000131 <__c.4595>:
     131:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 52 65     Error Setting Re
     141:	70 6f 72 74 20 50 72 6f 74 6f 63 6f 6c 20 4d 6f     port Protocol Mo
     151:	64 65 20 6f 72 20 4e 6f 74 20 61 20 56 61 6c 69     de or Not a Vali
     161:	64 20 4d 6f 75 73 65 2e 0d 0a 00                    d Mouse....

0000016c <__c.4593>:
     16c:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     17c:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     18c:	6f 6e 2e 0d 0a 00                                   on....

00000192 <__c.4591>:
     192:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     1a2:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4d 6f 75 73     Not a Valid Mous
     1b2:	65 2e 0d 0a 00                                      e....

000001b7 <__c.4589>:
     1b7:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1c7:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1d7:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001e4 <__c.4582>:
     1e4:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1f4:	68 65 64 2e 0d 0a 00                                hed....

000001fb <__c.4577>:
     1fb:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     20b:	0d 0a 00                                            ...

0000020e <__c.4513>:
     20e:	1b 5b 33 36 6d 4d 6f 75 73 65 20 48 6f 73 74 20     .[36mMouse Host 
     21e:	44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b     Demo running....
     22e:	5b 33 37 6d 00 00                                   [37m..

00000234 <__ctors_end>:
     234:	11 24       	eor	r1, r1
     236:	1f be       	out	0x3f, r1	; 63
     238:	cf ef       	ldi	r28, 0xFF	; 255
     23a:	d0 e2       	ldi	r29, 0x20	; 32
     23c:	de bf       	out	0x3e, r29	; 62
     23e:	cd bf       	out	0x3d, r28	; 61

00000240 <__do_copy_data>:
     240:	11 e0       	ldi	r17, 0x01	; 1
     242:	a0 e0       	ldi	r26, 0x00	; 0
     244:	b1 e0       	ldi	r27, 0x01	; 1
     246:	ea e0       	ldi	r30, 0x0A	; 10
     248:	f6 e2       	ldi	r31, 0x26	; 38
     24a:	00 e0       	ldi	r16, 0x00	; 0
     24c:	0b bf       	out	0x3b, r16	; 59
     24e:	02 c0       	rjmp	.+4      	; 0x254 <__do_copy_data+0x14>
     250:	07 90       	elpm	r0, Z+
     252:	0d 92       	st	X+, r0
     254:	a4 32       	cpi	r26, 0x24	; 36
     256:	b1 07       	cpc	r27, r17
     258:	d9 f7       	brne	.-10     	; 0x250 <__do_copy_data+0x10>

0000025a <__do_clear_bss>:
     25a:	15 e0       	ldi	r17, 0x05	; 5
     25c:	a4 e2       	ldi	r26, 0x24	; 36
     25e:	b1 e0       	ldi	r27, 0x01	; 1
     260:	01 c0       	rjmp	.+2      	; 0x264 <.do_clear_bss_start>

00000262 <.do_clear_bss_loop>:
     262:	1d 92       	st	X+, r1

00000264 <.do_clear_bss_start>:
     264:	af 31       	cpi	r26, 0x1F	; 31
     266:	b1 07       	cpc	r27, r17
     268:	e1 f7       	brne	.-8      	; 0x262 <.do_clear_bss_loop>
     26a:	03 d2       	rcall	.+1030   	; 0x672 <main>
     26c:	0c 94 03 13 	jmp	0x2606	; 0x2606 <_exit>

00000270 <__bad_interrupt>:
     270:	c7 ce       	rjmp	.-626    	; 0x0 <__vectors>

00000272 <CALLBACK_HIDParser_FilterHIDReportItem>:
 *  \param[in] CurrentItem  Pointer to the item the HID report parser is currently working with
 *
 *  \return Boolean true if the item should be stored into the HID report structure, false if it should be discarded
 */
bool CALLBACK_HIDParser_FilterHIDReportItem(HID_ReportItem_t* const CurrentItem)
{
     272:	dc 01       	movw	r26, r24

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Mouse Usage is found - this prevents Joysticks, which use identical descriptors except for the Joystick usage
	 * parent node, from being erroneously treated as a mouse by the demo
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     274:	16 96       	adiw	r26, 0x06	; 6
     276:	ed 91       	ld	r30, X+
     278:	fc 91       	ld	r31, X
     27a:	17 97       	sbiw	r26, 0x07	; 7
     27c:	0b c0       	rjmp	.+22     	; 0x294 <CALLBACK_HIDParser_FilterHIDReportItem+0x22>
	{
		if ((CurrPath->Usage.Page  == USAGE_PAGE_GENERIC_DCTRL) &&
     27e:	81 81       	ldd	r24, Z+1	; 0x01
     280:	92 81       	ldd	r25, Z+2	; 0x02
     282:	01 97       	sbiw	r24, 0x01	; 1
     284:	21 f4       	brne	.+8      	; 0x28e <CALLBACK_HIDParser_FilterHIDReportItem+0x1c>
     286:	83 81       	ldd	r24, Z+3	; 0x03
     288:	94 81       	ldd	r25, Z+4	; 0x04
     28a:	02 97       	sbiw	r24, 0x02	; 2
     28c:	39 f0       	breq	.+14     	; 0x29c <CALLBACK_HIDParser_FilterHIDReportItem+0x2a>

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Mouse Usage is found - this prevents Joysticks, which use identical descriptors except for the Joystick usage
	 * parent node, from being erroneously treated as a mouse by the demo
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     28e:	05 80       	ldd	r0, Z+5	; 0x05
     290:	f6 81       	ldd	r31, Z+6	; 0x06
     292:	e0 2d       	mov	r30, r0
     294:	30 97       	sbiw	r30, 0x00	; 0
     296:	99 f7       	brne	.-26     	; 0x27e <CALLBACK_HIDParser_FilterHIDReportItem+0xc>
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	08 95       	ret

	/* Check the attributes of the current item - see if we are interested in it or not;
	 * only store BUTTON and GENERIC_DESKTOP_CONTROL items into the Processed HID Report
	 * structure to save RAM and ignore the rest
	 */
	return ((CurrentItem->Attributes.Usage.Page == USAGE_PAGE_BUTTON) ||
     29c:	19 96       	adiw	r26, 0x09	; 9
     29e:	8d 91       	ld	r24, X+
     2a0:	9c 91       	ld	r25, X
     2a2:	1a 97       	sbiw	r26, 0x0a	; 10
     2a4:	89 30       	cpi	r24, 0x09	; 9
     2a6:	91 05       	cpc	r25, r1
     2a8:	21 f0       	breq	.+8      	; 0x2b2 <CALLBACK_HIDParser_FilterHIDReportItem+0x40>
     2aa:	20 e0       	ldi	r18, 0x00	; 0
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	01 97       	sbiw	r24, 0x01	; 1
     2b0:	11 f4       	brne	.+4      	; 0x2b6 <CALLBACK_HIDParser_FilterHIDReportItem+0x44>
     2b2:	21 e0       	ldi	r18, 0x01	; 1
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	82 2f       	mov	r24, r18
	        (CurrentItem->Attributes.Usage.Page == USAGE_PAGE_GENERIC_DCTRL));
}
     2b8:	08 95       	ret

000002ba <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     2ba:	90 91 0a 05 	lds	r25, 0x050A
     2be:	2d b7       	in	r18, 0x3d	; 61
     2c0:	3e b7       	in	r19, 0x3e	; 62
     2c2:	28 50       	subi	r18, 0x08	; 8
     2c4:	30 40       	sbci	r19, 0x00	; 0
     2c6:	0f b6       	in	r0, 0x3f	; 63
     2c8:	f8 94       	cli
     2ca:	3e bf       	out	0x3e, r19	; 62
     2cc:	0f be       	out	0x3f, r0	; 63
     2ce:	2d bf       	out	0x3d, r18	; 61
     2d0:	ed b7       	in	r30, 0x3d	; 61
     2d2:	fe b7       	in	r31, 0x3e	; 62
     2d4:	31 96       	adiw	r30, 0x01	; 1
     2d6:	28 e9       	ldi	r18, 0x98	; 152
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	ad b7       	in	r26, 0x3d	; 61
     2dc:	be b7       	in	r27, 0x3e	; 62
     2de:	12 96       	adiw	r26, 0x02	; 2
     2e0:	3c 93       	st	X, r19
     2e2:	2e 93       	st	-X, r18
     2e4:	11 97       	sbiw	r26, 0x01	; 1
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	13 82       	std	Z+3, r1	; 0x03
     2ea:	64 83       	std	Z+4, r22	; 0x04
     2ec:	15 82       	std	Z+5, r1	; 0x05
     2ee:	96 83       	std	Z+6, r25	; 0x06
     2f0:	17 82       	std	Z+7, r1	; 0x07
     2f2:	0e 94 13 10 	call	0x2026	; 0x2026 <printf_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     2f6:	8b b1       	in	r24, 0x0b	; 11
     2f8:	8f 70       	andi	r24, 0x0F	; 15
     2fa:	80 69       	ori	r24, 0x90	; 144
     2fc:	8b b9       	out	0x0b, r24	; 11
     2fe:	2d b7       	in	r18, 0x3d	; 61
     300:	3e b7       	in	r19, 0x3e	; 62
     302:	28 5f       	subi	r18, 0xF8	; 248
     304:	3f 4f       	sbci	r19, 0xFF	; 255
     306:	0f b6       	in	r0, 0x3f	; 63
     308:	f8 94       	cli
     30a:	3e bf       	out	0x3e, r19	; 62
     30c:	0f be       	out	0x3f, r0	; 63
     30e:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     310:	08 95       	ret

00000312 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     312:	1f 93       	push	r17
     314:	18 2f       	mov	r17, r24
	USB_Disable();
     316:	9e d4       	rcall	.+2364   	; 0xc54 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     318:	00 d0       	rcall	.+0      	; 0x31a <EVENT_USB_Host_HostError+0x8>
     31a:	00 d0       	rcall	.+0      	; 0x31c <EVENT_USB_Host_HostError+0xa>
     31c:	ed b7       	in	r30, 0x3d	; 61
     31e:	fe b7       	in	r31, 0x3e	; 62
     320:	31 96       	adiw	r30, 0x01	; 1
     322:	8e ee       	ldi	r24, 0xEE	; 238
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	ad b7       	in	r26, 0x3d	; 61
     328:	be b7       	in	r27, 0x3e	; 62
     32a:	12 96       	adiw	r26, 0x02	; 2
     32c:	9c 93       	st	X, r25
     32e:	8e 93       	st	-X, r24
     330:	11 97       	sbiw	r26, 0x01	; 1
     332:	12 83       	std	Z+2, r17	; 0x02
     334:	13 82       	std	Z+3, r1	; 0x03
     336:	0e 94 13 10 	call	0x2026	; 0x2026 <printf_P>
     33a:	8b b1       	in	r24, 0x0b	; 11
     33c:	8f 70       	andi	r24, 0x0F	; 15
     33e:	80 69       	ori	r24, 0x90	; 144
     340:	8b b9       	out	0x0b, r24	; 11
     342:	0f 90       	pop	r0
     344:	0f 90       	pop	r0
     346:	0f 90       	pop	r0
     348:	0f 90       	pop	r0
     34a:	ff cf       	rjmp	.-2      	; 0x34a <EVENT_USB_Host_HostError+0x38>

0000034c <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     34c:	84 ee       	ldi	r24, 0xE4	; 228
     34e:	91 e0       	ldi	r25, 0x01	; 1
     350:	0e 94 35 10 	call	0x206a	; 0x206a <puts_P>
     354:	8b b1       	in	r24, 0x0b	; 11
     356:	8f 70       	andi	r24, 0x0F	; 15
     358:	80 61       	ori	r24, 0x10	; 16
     35a:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     35c:	08 95       	ret

0000035e <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     35e:	8b ef       	ldi	r24, 0xFB	; 251
     360:	91 e0       	ldi	r25, 0x01	; 1
     362:	0e 94 35 10 	call	0x206a	; 0x206a <puts_P>
     366:	8b b1       	in	r24, 0x0b	; 11
     368:	8f 70       	andi	r24, 0x0F	; 15
     36a:	80 6a       	ori	r24, 0xA0	; 160
     36c:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     36e:	08 95       	ret

00000370 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     370:	0f 93       	push	r16
     372:	1f 93       	push	r17
     374:	df 93       	push	r29
     376:	cf 93       	push	r28
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	c2 50       	subi	r28, 0x02	; 2
     37e:	d2 40       	sbci	r29, 0x02	; 2
     380:	0f b6       	in	r0, 0x3f	; 63
     382:	f8 94       	cli
     384:	de bf       	out	0x3e, r29	; 62
     386:	0f be       	out	0x3f, r0	; 63
     388:	cd bf       	out	0x3d, r28	; 61
     38a:	8b b1       	in	r24, 0x0b	; 11
     38c:	8f 70       	andi	r24, 0x0F	; 15
     38e:	80 6a       	ori	r24, 0xA0	; 160
     390:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     392:	8e 01       	movw	r16, r28
     394:	0d 5f       	subi	r16, 0xFD	; 253
     396:	1f 4f       	sbci	r17, 0xFF	; 255
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	be 01       	movw	r22, r28
     39c:	6f 5f       	subi	r22, 0xFF	; 255
     39e:	7f 4f       	sbci	r23, 0xFF	; 255
     3a0:	a8 01       	movw	r20, r16
     3a2:	20 e0       	ldi	r18, 0x00	; 0
     3a4:	32 e0       	ldi	r19, 0x02	; 2
     3a6:	a9 d5       	rcall	.+2898   	; 0xefa <USB_Host_GetDeviceConfigDescriptor>
     3a8:	88 23       	and	r24, r24
     3aa:	19 f0       	breq	.+6      	; 0x3b2 <EVENT_USB_Host_DeviceEnumerationComplete+0x42>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     3ac:	87 eb       	ldi	r24, 0xB7	; 183
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	12 c0       	rjmp	.+36     	; 0x3d6 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_ConfigurePipes(&Mouse_HID_Interface,
     3b2:	69 81       	ldd	r22, Y+1	; 0x01
     3b4:	7a 81       	ldd	r23, Y+2	; 0x02
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	91 e0       	ldi	r25, 0x01	; 1
     3ba:	a8 01       	movw	r20, r16
     3bc:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <HID_Host_ConfigurePipes>
     3c0:	88 23       	and	r24, r24
     3c2:	19 f0       	breq	.+6      	; 0x3ca <EVENT_USB_Host_DeviceEnumerationComplete+0x5a>
	                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Mouse.\r\n"));
     3c4:	82 e9       	ldi	r24, 0x92	; 146
     3c6:	91 e0       	ldi	r25, 0x01	; 1
     3c8:	06 c0       	rjmp	.+12     	; 0x3d6 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	38 d7       	rcall	.+3696   	; 0x123e <USB_Host_SetDeviceConfiguration>
     3ce:	88 23       	and	r24, r24
     3d0:	41 f0       	breq	.+16     	; 0x3e2 <EVENT_USB_Host_DeviceEnumerationComplete+0x72>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     3d2:	8c e6       	ldi	r24, 0x6C	; 108
     3d4:	91 e0       	ldi	r25, 0x01	; 1
     3d6:	0e 94 35 10 	call	0x206a	; 0x206a <puts_P>
     3da:	8b b1       	in	r24, 0x0b	; 11
     3dc:	8f 70       	andi	r24, 0x0F	; 15
     3de:	80 69       	ori	r24, 0x90	; 144
     3e0:	18 c0       	rjmp	.+48     	; 0x412 <EVENT_USB_Host_DeviceEnumerationComplete+0xa2>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_SetReportProtocol(&Mouse_HID_Interface) != 0)
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <HID_Host_SetReportProtocol>
     3ea:	88 23       	and	r24, r24
     3ec:	59 f0       	breq	.+22     	; 0x404 <EVENT_USB_Host_DeviceEnumerationComplete+0x94>
	{
		puts_P(PSTR("Error Setting Report Protocol Mode or Not a Valid Mouse.\r\n"));
     3ee:	81 e3       	ldi	r24, 0x31	; 49
     3f0:	91 e0       	ldi	r25, 0x01	; 1
     3f2:	0e 94 35 10 	call	0x206a	; 0x206a <puts_P>
     3f6:	8b b1       	in	r24, 0x0b	; 11
     3f8:	8f 70       	andi	r24, 0x0F	; 15
     3fa:	80 69       	ori	r24, 0x90	; 144
     3fc:	8b b9       	out	0x0b, r24	; 11
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	1e d7       	rcall	.+3644   	; 0x123e <USB_Host_SetDeviceConfiguration>
     402:	08 c0       	rjmp	.+16     	; 0x414 <EVENT_USB_Host_DeviceEnumerationComplete+0xa4>
		return;
	}

	puts_P(PSTR("Mouse Enumerated.\r\n"));
     404:	8d e1       	ldi	r24, 0x1D	; 29
     406:	91 e0       	ldi	r25, 0x01	; 1
     408:	0e 94 35 10 	call	0x206a	; 0x206a <puts_P>
     40c:	8b b1       	in	r24, 0x0b	; 11
     40e:	8f 70       	andi	r24, 0x0F	; 15
     410:	80 66       	ori	r24, 0x60	; 96
     412:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     414:	ce 5f       	subi	r28, 0xFE	; 254
     416:	dd 4f       	sbci	r29, 0xFD	; 253
     418:	0f b6       	in	r0, 0x3f	; 63
     41a:	f8 94       	cli
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	0f be       	out	0x3f, r0	; 63
     420:	cd bf       	out	0x3d, r28	; 61
     422:	cf 91       	pop	r28
     424:	df 91       	pop	r29
     426:	1f 91       	pop	r17
     428:	0f 91       	pop	r16
     42a:	08 95       	ret

0000042c <MouseHost_Task>:

/** Task to manage an enumerated USB mouse once connected, to display movement
 *  data as it is received.
 */
void MouseHost_Task(void)
{
     42c:	5f 92       	push	r5
     42e:	6f 92       	push	r6
     430:	7f 92       	push	r7
     432:	8f 92       	push	r8
     434:	9f 92       	push	r9
     436:	af 92       	push	r10
     438:	bf 92       	push	r11
     43a:	cf 92       	push	r12
     43c:	df 92       	push	r13
     43e:	ef 92       	push	r14
     440:	ff 92       	push	r15
     442:	0f 93       	push	r16
     444:	1f 93       	push	r17
     446:	df 93       	push	r29
     448:	cf 93       	push	r28
     44a:	cd b7       	in	r28, 0x3d	; 61
     44c:	de b7       	in	r29, 0x3e	; 62
			}
		}

		LEDs_SetAllLEDs(LEDMask);
	}
}
     44e:	ad b6       	in	r10, 0x3d	; 61
     450:	be b6       	in	r11, 0x3e	; 62
/** Task to manage an enumerated USB mouse once connected, to display movement
 *  data as it is received.
 */
void MouseHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     452:	80 91 0a 05 	lds	r24, 0x050A
     456:	8b 30       	cpi	r24, 0x0B	; 11
     458:	09 f0       	breq	.+2      	; 0x45c <MouseHost_Task+0x30>
     45a:	ad c0       	rjmp	.+346    	; 0x5b6 <MouseHost_Task+0x18a>
	  return;
	
	if (HID_Host_IsReportReceived(&Mouse_HID_Interface))
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	91 e0       	ldi	r25, 0x01	; 1
     460:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <HID_Host_IsReportReceived>
     464:	88 23       	and	r24, r24
     466:	09 f4       	brne	.+2      	; 0x46a <MouseHost_Task+0x3e>
     468:	a6 c0       	rjmp	.+332    	; 0x5b6 <MouseHost_Task+0x18a>
     46a:	7d b6       	in	r7, 0x3d	; 61
     46c:	6e b6       	in	r6, 0x3e	; 62
	{
		uint8_t MouseReport[Mouse_HID_Interface.State.LargestReportSize];
     46e:	80 91 12 01 	lds	r24, 0x0112
     472:	2d b7       	in	r18, 0x3d	; 61
     474:	3e b7       	in	r19, 0x3e	; 62
     476:	28 1b       	sub	r18, r24
     478:	31 09       	sbc	r19, r1
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	f8 94       	cli
     47e:	3e bf       	out	0x3e, r19	; 62
     480:	0f be       	out	0x3f, r0	; 63
     482:	2d bf       	out	0x3d, r18	; 61
     484:	0d b7       	in	r16, 0x3d	; 61
     486:	1e b7       	in	r17, 0x3e	; 62
     488:	0f 5f       	subi	r16, 0xFF	; 255
     48a:	1f 4f       	sbci	r17, 0xFF	; 255
		HID_Host_ReceiveReport(&Mouse_HID_Interface, &MouseReport);
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	b8 01       	movw	r22, r16
     492:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <HID_Host_ReceiveReport>
		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
		{
			HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];

			/* Update the report item value if it is contained within the current report */
			if (!(USB_GetHIDReportItemInfo(MouseReport, ReportItem)))
     496:	48 01       	movw	r8, r16
     498:	ff 24       	eor	r15, r15
     49a:	ee 24       	eor	r14, r14

		uint8_t LEDMask = LEDS_NO_LEDS;

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
		{
			HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     49c:	4a e2       	ldi	r20, 0x2A	; 42
     49e:	54 2e       	mov	r5, r20
			else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
			         ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
			          (ReportItem->Attributes.Usage.Usage == USAGE_Y))                 &&
			         (ReportItem->ItemType                == HID_REPORT_ITEM_In))
			{
				int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     4a0:	30 e1       	ldi	r19, 0x10	; 16
     4a2:	c3 2e       	mov	r12, r19
     4a4:	d1 2c       	mov	r13, r1
     4a6:	76 c0       	rjmp	.+236    	; 0x594 <MouseHost_Task+0x168>

		uint8_t LEDMask = LEDS_NO_LEDS;

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
		{
			HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     4a8:	e5 9c       	mul	r14, r5
     4aa:	80 01       	movw	r16, r0
     4ac:	11 24       	eor	r1, r1
     4ae:	0b 5d       	subi	r16, 0xDB	; 219
     4b0:	1e 4f       	sbci	r17, 0xFE	; 254

			/* Update the report item value if it is contained within the current report */
			if (!(USB_GetHIDReportItemInfo(MouseReport, ReportItem)))
     4b2:	c4 01       	movw	r24, r8
     4b4:	b8 01       	movw	r22, r16
     4b6:	fa d6       	rcall	.+3572   	; 0x12ac <USB_GetHIDReportItemInfo>
     4b8:	88 23       	and	r24, r24
     4ba:	09 f4       	brne	.+2      	; 0x4be <MouseHost_Task+0x92>
     4bc:	6a c0       	rjmp	.+212    	; 0x592 <MouseHost_Task+0x166>
			  continue;

			/* Determine what report item is being tested, process updated value as needed */
			if ((ReportItem->Attributes.Usage.Page        == USAGE_PAGE_BUTTON) &&
     4be:	f8 01       	movw	r30, r16
     4c0:	81 85       	ldd	r24, Z+9	; 0x09
     4c2:	92 85       	ldd	r25, Z+10	; 0x0a
     4c4:	89 30       	cpi	r24, 0x09	; 9
     4c6:	91 05       	cpc	r25, r1
     4c8:	81 f4       	brne	.+32     	; 0x4ea <MouseHost_Task+0xbe>
     4ca:	82 81       	ldd	r24, Z+2	; 0x02
     4cc:	88 23       	and	r24, r24
     4ce:	09 f0       	breq	.+2      	; 0x4d2 <MouseHost_Task+0xa6>
     4d0:	60 c0       	rjmp	.+192    	; 0x592 <MouseHost_Task+0x166>
			    (ReportItem->ItemType                     == HID_REPORT_ITEM_In))
			{
				if (ReportItem->Value)
     4d2:	82 a1       	ldd	r24, Z+34	; 0x22
     4d4:	93 a1       	ldd	r25, Z+35	; 0x23
     4d6:	a4 a1       	ldd	r26, Z+36	; 0x24
     4d8:	b5 a1       	ldd	r27, Z+37	; 0x25
     4da:	00 97       	sbiw	r24, 0x00	; 0
     4dc:	a1 05       	cpc	r26, r1
     4de:	b1 05       	cpc	r27, r1
     4e0:	09 f4       	brne	.+2      	; 0x4e4 <MouseHost_Task+0xb8>
     4e2:	57 c0       	rjmp	.+174    	; 0x592 <MouseHost_Task+0x166>
     4e4:	20 ef       	ldi	r18, 0xF0	; 240
     4e6:	f2 2e       	mov	r15, r18
     4e8:	54 c0       	rjmp	.+168    	; 0x592 <MouseHost_Task+0x166>
				  LEDMask = LEDS_ALL_LEDS;
			}
			else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     4ea:	01 97       	sbiw	r24, 0x01	; 1
     4ec:	09 f0       	breq	.+2      	; 0x4f0 <MouseHost_Task+0xc4>
     4ee:	51 c0       	rjmp	.+162    	; 0x592 <MouseHost_Task+0x166>
     4f0:	f8 01       	movw	r30, r16
     4f2:	63 85       	ldd	r22, Z+11	; 0x0b
     4f4:	74 85       	ldd	r23, Z+12	; 0x0c
     4f6:	68 33       	cpi	r22, 0x38	; 56
     4f8:	71 05       	cpc	r23, r1
     4fa:	f9 f4       	brne	.+62     	; 0x53a <MouseHost_Task+0x10e>
     4fc:	82 81       	ldd	r24, Z+2	; 0x02
     4fe:	88 23       	and	r24, r24
     500:	e1 f4       	brne	.+56     	; 0x53a <MouseHost_Task+0x10e>
			         (ReportItem->Attributes.Usage.Usage  == USAGE_SCROLL_WHEEL)       &&
			         (ReportItem->ItemType                == HID_REPORT_ITEM_In))
			{
				int16_t WheelDelta = HID_ALIGN_DATA(ReportItem, int16_t);
     502:	80 85       	ldd	r24, Z+8	; 0x08
     504:	96 01       	movw	r18, r12
     506:	28 1b       	sub	r18, r24
     508:	31 09       	sbc	r19, r1
     50a:	c9 01       	movw	r24, r18
     50c:	22 a1       	ldd	r18, Z+34	; 0x22
     50e:	33 a1       	ldd	r19, Z+35	; 0x23
     510:	44 a1       	ldd	r20, Z+36	; 0x24
     512:	55 a1       	ldd	r21, Z+37	; 0x25
     514:	04 c0       	rjmp	.+8      	; 0x51e <MouseHost_Task+0xf2>
     516:	22 0f       	add	r18, r18
     518:	33 1f       	adc	r19, r19
     51a:	44 1f       	adc	r20, r20
     51c:	55 1f       	adc	r21, r21
     51e:	8a 95       	dec	r24
     520:	d2 f7       	brpl	.-12     	; 0x516 <MouseHost_Task+0xea>

				if (WheelDelta)
     522:	21 15       	cp	r18, r1
     524:	31 05       	cpc	r19, r1
     526:	a9 f1       	breq	.+106    	; 0x592 <MouseHost_Task+0x166>
				  LEDMask = (LEDS_LED1 | LEDS_LED2 | ((WheelDelta > 0) ? LEDS_LED3 : LEDS_LED4));
     528:	12 16       	cp	r1, r18
     52a:	13 06       	cpc	r1, r19
     52c:	1c f0       	brlt	.+6      	; 0x534 <MouseHost_Task+0x108>
     52e:	90 e7       	ldi	r25, 0x70	; 112
     530:	f9 2e       	mov	r15, r25
     532:	2f c0       	rjmp	.+94     	; 0x592 <MouseHost_Task+0x166>
     534:	80 eb       	ldi	r24, 0xB0	; 176
     536:	f8 2e       	mov	r15, r24
     538:	2c c0       	rjmp	.+88     	; 0x592 <MouseHost_Task+0x166>
			}
			else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     53a:	cb 01       	movw	r24, r22
     53c:	c0 97       	sbiw	r24, 0x30	; 48
     53e:	02 97       	sbiw	r24, 0x02	; 2
     540:	40 f5       	brcc	.+80     	; 0x592 <MouseHost_Task+0x166>
     542:	f8 01       	movw	r30, r16
     544:	82 81       	ldd	r24, Z+2	; 0x02
     546:	88 23       	and	r24, r24
     548:	21 f5       	brne	.+72     	; 0x592 <MouseHost_Task+0x166>
			         ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
			          (ReportItem->Attributes.Usage.Usage == USAGE_Y))                 &&
			         (ReportItem->ItemType                == HID_REPORT_ITEM_In))
			{
				int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     54a:	80 85       	ldd	r24, Z+8	; 0x08
     54c:	96 01       	movw	r18, r12
     54e:	28 1b       	sub	r18, r24
     550:	31 09       	sbc	r19, r1
     552:	c9 01       	movw	r24, r18
     554:	22 a1       	ldd	r18, Z+34	; 0x22
     556:	33 a1       	ldd	r19, Z+35	; 0x23
     558:	44 a1       	ldd	r20, Z+36	; 0x24
     55a:	55 a1       	ldd	r21, Z+37	; 0x25
     55c:	04 c0       	rjmp	.+8      	; 0x566 <MouseHost_Task+0x13a>
     55e:	22 0f       	add	r18, r18
     560:	33 1f       	adc	r19, r19
     562:	44 1f       	adc	r20, r20
     564:	55 1f       	adc	r21, r21
     566:	8a 95       	dec	r24
     568:	d2 f7       	brpl	.-12     	; 0x55e <MouseHost_Task+0x132>

				if (DeltaMovement)
     56a:	21 15       	cp	r18, r1
     56c:	31 05       	cpc	r19, r1
     56e:	89 f0       	breq	.+34     	; 0x592 <MouseHost_Task+0x166>
				{
					if (ReportItem->Attributes.Usage.Usage == USAGE_X)
     570:	60 33       	cpi	r22, 0x30	; 48
     572:	71 05       	cpc	r23, r1
     574:	39 f4       	brne	.+14     	; 0x584 <MouseHost_Task+0x158>
					  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED1 : LEDS_LED2);
     576:	12 16       	cp	r1, r18
     578:	13 06       	cpc	r1, r19
     57a:	14 f0       	brlt	.+4      	; 0x580 <MouseHost_Task+0x154>
     57c:	80 e2       	ldi	r24, 0x20	; 32
     57e:	08 c0       	rjmp	.+16     	; 0x590 <MouseHost_Task+0x164>
     580:	80 e1       	ldi	r24, 0x10	; 16
     582:	06 c0       	rjmp	.+12     	; 0x590 <MouseHost_Task+0x164>
					else
					  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED3 : LEDS_LED4);
     584:	12 16       	cp	r1, r18
     586:	13 06       	cpc	r1, r19
     588:	14 f0       	brlt	.+4      	; 0x58e <MouseHost_Task+0x162>
     58a:	80 e4       	ldi	r24, 0x40	; 64
     58c:	01 c0       	rjmp	.+2      	; 0x590 <MouseHost_Task+0x164>
     58e:	80 e8       	ldi	r24, 0x80	; 128
     590:	f8 2a       	or	r15, r24
		uint8_t MouseReport[Mouse_HID_Interface.State.LargestReportSize];
		HID_Host_ReceiveReport(&Mouse_HID_Interface, &MouseReport);

		uint8_t LEDMask = LEDS_NO_LEDS;

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     592:	e3 94       	inc	r14
     594:	80 91 24 01 	lds	r24, 0x0124
     598:	e8 16       	cp	r14, r24
     59a:	08 f4       	brcc	.+2      	; 0x59e <MouseHost_Task+0x172>
     59c:	85 cf       	rjmp	.-246    	; 0x4a8 <MouseHost_Task+0x7c>
     59e:	8b b1       	in	r24, 0x0b	; 11
     5a0:	8f 70       	andi	r24, 0x0F	; 15
     5a2:	f8 2a       	or	r15, r24
     5a4:	fb b8       	out	0x0b, r15	; 11
     5a6:	27 2d       	mov	r18, r7
     5a8:	36 2d       	mov	r19, r6
     5aa:	c9 01       	movw	r24, r18
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	f8 94       	cli
     5b0:	9e bf       	out	0x3e, r25	; 62
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	8d bf       	out	0x3d, r24	; 61
			}
		}

		LEDs_SetAllLEDs(LEDMask);
	}
}
     5b6:	0f b6       	in	r0, 0x3f	; 63
     5b8:	f8 94       	cli
     5ba:	be be       	out	0x3e, r11	; 62
     5bc:	0f be       	out	0x3f, r0	; 63
     5be:	ad be       	out	0x3d, r10	; 61
     5c0:	cf 91       	pop	r28
     5c2:	df 91       	pop	r29
     5c4:	1f 91       	pop	r17
     5c6:	0f 91       	pop	r16
     5c8:	ff 90       	pop	r15
     5ca:	ef 90       	pop	r14
     5cc:	df 90       	pop	r13
     5ce:	cf 90       	pop	r12
     5d0:	bf 90       	pop	r11
     5d2:	af 90       	pop	r10
     5d4:	9f 90       	pop	r9
     5d6:	8f 90       	pop	r8
     5d8:	7f 90       	pop	r7
     5da:	6f 90       	pop	r6
     5dc:	5f 90       	pop	r5
     5de:	08 95       	ret

000005e0 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     5e0:	84 b7       	in	r24, 0x34	; 52
     5e2:	87 7f       	andi	r24, 0xF7	; 247
     5e4:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     5e6:	28 e1       	ldi	r18, 0x18	; 24
     5e8:	0f b6       	in	r0, 0x3f	; 63
     5ea:	f8 94       	cli
     5ec:	20 93 60 00 	sts	0x0060, r18
     5f0:	10 92 60 00 	sts	0x0060, r1
     5f4:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	80 e8       	ldi	r24, 0x80	; 128
     5fa:	0f b6       	in	r0, 0x3f	; 63
     5fc:	f8 94       	cli
     5fe:	80 93 61 00 	sts	0x0061, r24
     602:	90 93 61 00 	sts	0x0061, r25
     606:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     608:	83 e3       	ldi	r24, 0x33	; 51
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	90 93 cd 00 	sts	0x00CD, r25
     610:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     614:	86 e0       	ldi	r24, 0x06	; 6
     616:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     61a:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     61e:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     622:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     624:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     626:	8a b1       	in	r24, 0x0a	; 10
     628:	80 6f       	ori	r24, 0xF0	; 240
     62a:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     62c:	8b b1       	in	r24, 0x0b	; 11
     62e:	8f 70       	andi	r24, 0x0F	; 15
     630:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     632:	07 d3       	rcall	.+1550   	; 0xc42 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     634:	eb e0       	ldi	r30, 0x0B	; 11
     636:	f5 e0       	ldi	r31, 0x05	; 5
     638:	f0 93 1a 05 	sts	0x051A, r31
     63c:	e0 93 19 05 	sts	0x0519, r30
					stdout = Stream;
     640:	f0 93 1c 05 	sts	0x051C, r31
     644:	e0 93 1b 05 	sts	0x051B, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     648:	8e e0       	ldi	r24, 0x0E	; 14
     64a:	df 01       	movw	r26, r30
     64c:	1d 92       	st	X+, r1
     64e:	8a 95       	dec	r24
     650:	e9 f7       	brne	.-6      	; 0x64c <SetupHardware+0x6c>
     652:	83 e0       	ldi	r24, 0x03	; 3
     654:	80 93 0e 05 	sts	0x050E, r24
     658:	85 ef       	ldi	r24, 0xF5	; 245
     65a:	9f e0       	ldi	r25, 0x0F	; 15
     65c:	90 93 14 05 	sts	0x0514, r25
     660:	80 93 13 05 	sts	0x0513, r24
     664:	8f ef       	ldi	r24, 0xFF	; 255
     666:	9f e0       	ldi	r25, 0x0F	; 15
     668:	90 93 16 05 	sts	0x0516, r25
     66c:	80 93 15 05 	sts	0x0515, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     670:	08 95       	ret

00000672 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     672:	b6 df       	rcall	.-148    	; 0x5e0 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Mouse Host Demo running.\r\n" ESC_FG_WHITE));
     674:	8e e0       	ldi	r24, 0x0E	; 14
     676:	92 e0       	ldi	r25, 0x02	; 2
     678:	0e 94 35 10 	call	0x206a	; 0x206a <puts_P>
	sei();
     67c:	78 94       	sei
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     67e:	8b b1       	in	r24, 0x0b	; 11
     680:	8f 70       	andi	r24, 0x0F	; 15
     682:	80 61       	ori	r24, 0x10	; 16
     684:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);

	for (;;)
	{
		MouseHost_Task();
     686:	d2 de       	rcall	.-604    	; 0x42c <MouseHost_Task>

		HID_Host_USBTask(&Mouse_HID_Interface);
		USB_USBTask();
     688:	ff d5       	rcall	.+3070   	; 0x1288 <USB_USBTask>
     68a:	fd cf       	rjmp	.-6      	; 0x686 <main+0x14>

0000068c <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     68c:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     68e:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     692:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     696:	80 91 a0 00 	lds	r24, 0x00A0
     69a:	8f 7d       	andi	r24, 0xDF	; 223
     69c:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6a0:	80 91 9f 00 	lds	r24, 0x009F
     6a4:	8f 7d       	andi	r24, 0xDF	; 223
     6a6:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6aa:	80 91 9e 00 	lds	r24, 0x009E
     6ae:	81 60       	ori	r24, 0x01	; 1
     6b0:	80 93 9e 00 	sts	0x009E, r24
     6b4:	28 c0       	rjmp	.+80     	; 0x706 <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     6b6:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     6ba:	85 ff       	sbrs	r24, 5
     6bc:	06 c0       	rjmp	.+12     	; 0x6ca <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6be:	80 91 9f 00 	lds	r24, 0x009F
     6c2:	8f 7d       	andi	r24, 0xDF	; 223
     6c4:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     6c8:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     6ca:	80 91 0a 05 	lds	r24, 0x050A
     6ce:	81 30       	cpi	r24, 0x01	; 1
     6d0:	11 f4       	brne	.+4      	; 0x6d6 <USB_Host_WaitMS+0x4a>
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	1a c0       	rjmp	.+52     	; 0x70a <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     6d6:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     6da:	84 ff       	sbrs	r24, 4
     6dc:	09 c0       	rjmp	.+18     	; 0x6f0 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     6de:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     6e2:	80 91 a6 00 	lds	r24, 0x00A6
     6e6:	8f 7e       	andi	r24, 0xEF	; 239
     6e8:	80 93 a6 00 	sts	0x00A6, r24
     6ec:	92 e0       	ldi	r25, 0x02	; 2
     6ee:	0d c0       	rjmp	.+26     	; 0x70a <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     6f0:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     6f4:	81 ff       	sbrs	r24, 1
     6f6:	07 c0       	rjmp	.+14     	; 0x706 <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     6f8:	80 91 a6 00 	lds	r24, 0x00A6
     6fc:	8d 7f       	andi	r24, 0xFD	; 253
     6fe:	80 93 a6 00 	sts	0x00A6, r24
     702:	93 e0       	ldi	r25, 0x03	; 3
     704:	02 c0       	rjmp	.+4      	; 0x70a <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     706:	99 23       	and	r25, r25
     708:	b1 f6       	brne	.-84     	; 0x6b6 <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     70a:	20 fd       	sbrc	r18, 0
     70c:	05 c0       	rjmp	.+10     	; 0x718 <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     70e:	80 91 9e 00 	lds	r24, 0x009E
     712:	8e 7f       	andi	r24, 0xFE	; 254
     714:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     718:	35 ff       	sbrs	r19, 5
     71a:	05 c0       	rjmp	.+10     	; 0x726 <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     71c:	80 91 a0 00 	lds	r24, 0x00A0
     720:	80 62       	ori	r24, 0x20	; 32
     722:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     726:	89 2f       	mov	r24, r25
     728:	08 95       	ret

0000072a <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     72a:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     72e:	80 91 a0 00 	lds	r24, 0x00A0
     732:	8d 7f       	andi	r24, 0xFD	; 253
     734:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     738:	80 91 9e 00 	lds	r24, 0x009E
     73c:	82 60       	ori	r24, 0x02	; 2
     73e:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     742:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     746:	81 fd       	sbrc	r24, 1
     748:	fc cf       	rjmp	.-8      	; 0x742 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     74a:	80 91 9e 00 	lds	r24, 0x009E
     74e:	81 60       	ori	r24, 0x01	; 1
     750:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     754:	10 92 00 05 	sts	0x0500, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     758:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     75c:	80 91 a0 00 	lds	r24, 0x00A0
     760:	8f 7d       	andi	r24, 0xDF	; 223
     762:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     766:	80 91 9f 00 	lds	r24, 0x009F
     76a:	8f 7d       	andi	r24, 0xDF	; 223
     76c:	80 93 9f 00 	sts	0x009F, r24
     770:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     772:	40 ed       	ldi	r20, 0xD0	; 208
     774:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     776:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     77a:	85 ff       	sbrs	r24, 5
     77c:	0b c0       	rjmp	.+22     	; 0x794 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     77e:	80 91 9f 00 	lds	r24, 0x009F
     782:	8f 7d       	andi	r24, 0xDF	; 223
     784:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     788:	80 91 9f 00 	lds	r24, 0x009F
     78c:	8d 7f       	andi	r24, 0xFD	; 253
     78e:	80 93 9f 00 	sts	0x009F, r24
     792:	05 c0       	rjmp	.+10     	; 0x79e <USB_Host_ResetDevice+0x74>
     794:	ca 01       	movw	r24, r20
     796:	01 97       	sbiw	r24, 0x01	; 1
     798:	f1 f7       	brne	.-4      	; 0x796 <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     79a:	21 50       	subi	r18, 0x01	; 1
     79c:	61 f7       	brne	.-40     	; 0x776 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     79e:	35 ff       	sbrs	r19, 5
     7a0:	05 c0       	rjmp	.+10     	; 0x7ac <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     7a2:	80 91 a0 00 	lds	r24, 0x00A0
     7a6:	80 62       	ori	r24, 0x20	; 32
     7a8:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     7ac:	60 fd       	sbrc	r22, 0
     7ae:	05 c0       	rjmp	.+10     	; 0x7ba <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     7b0:	80 91 9e 00 	lds	r24, 0x009E
     7b4:	8e 7f       	andi	r24, 0xFE	; 254
     7b6:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     7ba:	80 91 a0 00 	lds	r24, 0x00A0
     7be:	82 60       	ori	r24, 0x02	; 2
     7c0:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     7c4:	08 95       	ret

000007c6 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     7c6:	ef 92       	push	r14
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	df 93       	push	r29
     7ce:	cf 93       	push	r28
     7d0:	cd b7       	in	r28, 0x3d	; 61
     7d2:	de b7       	in	r29, 0x3e	; 62
     7d4:	28 97       	sbiw	r28, 0x08	; 8
     7d6:	0f b6       	in	r0, 0x3f	; 63
     7d8:	f8 94       	cli
     7da:	de bf       	out	0x3e, r29	; 62
     7dc:	0f be       	out	0x3f, r0	; 63
     7de:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     7e0:	80 91 0a 05 	lds	r24, 0x050A
     7e4:	85 30       	cpi	r24, 0x05	; 5
     7e6:	09 f4       	brne	.+2      	; 0x7ea <USB_Host_ProcessNextHostState+0x24>
     7e8:	94 c0       	rjmp	.+296    	; 0x912 <USB_Host_ProcessNextHostState+0x14c>
     7ea:	86 30       	cpi	r24, 0x06	; 6
     7ec:	68 f4       	brcc	.+26     	; 0x808 <USB_Host_ProcessNextHostState+0x42>
     7ee:	82 30       	cpi	r24, 0x02	; 2
     7f0:	b9 f1       	breq	.+110    	; 0x860 <USB_Host_ProcessNextHostState+0x9a>
     7f2:	83 30       	cpi	r24, 0x03	; 3
     7f4:	18 f4       	brcc	.+6      	; 0x7fc <USB_Host_ProcessNextHostState+0x36>
     7f6:	88 23       	and	r24, r24
     7f8:	a1 f0       	breq	.+40     	; 0x822 <USB_Host_ProcessNextHostState+0x5c>
     7fa:	04 c1       	rjmp	.+520    	; 0xa04 <USB_Host_ProcessNextHostState+0x23e>
     7fc:	83 30       	cpi	r24, 0x03	; 3
     7fe:	d1 f1       	breq	.+116    	; 0x874 <USB_Host_ProcessNextHostState+0xae>
     800:	84 30       	cpi	r24, 0x04	; 4
     802:	09 f0       	breq	.+2      	; 0x806 <USB_Host_ProcessNextHostState+0x40>
     804:	ff c0       	rjmp	.+510    	; 0xa04 <USB_Host_ProcessNextHostState+0x23e>
     806:	5d c0       	rjmp	.+186    	; 0x8c2 <USB_Host_ProcessNextHostState+0xfc>
     808:	87 30       	cpi	r24, 0x07	; 7
     80a:	09 f4       	brne	.+2      	; 0x80e <USB_Host_ProcessNextHostState+0x48>
     80c:	9b c0       	rjmp	.+310    	; 0x944 <USB_Host_ProcessNextHostState+0x17e>
     80e:	87 30       	cpi	r24, 0x07	; 7
     810:	08 f4       	brcc	.+2      	; 0x814 <USB_Host_ProcessNextHostState+0x4e>
     812:	8a c0       	rjmp	.+276    	; 0x928 <USB_Host_ProcessNextHostState+0x162>
     814:	88 30       	cpi	r24, 0x08	; 8
     816:	09 f4       	brne	.+2      	; 0x81a <USB_Host_ProcessNextHostState+0x54>
     818:	b3 c0       	rjmp	.+358    	; 0x980 <USB_Host_ProcessNextHostState+0x1ba>
     81a:	89 30       	cpi	r24, 0x09	; 9
     81c:	09 f0       	breq	.+2      	; 0x820 <USB_Host_ProcessNextHostState+0x5a>
     81e:	f2 c0       	rjmp	.+484    	; 0xa04 <USB_Host_ProcessNextHostState+0x23e>
     820:	d7 c0       	rjmp	.+430    	; 0x9d0 <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     822:	00 91 fe 04 	lds	r16, 0x04FE
     826:	10 91 ff 04 	lds	r17, 0x04FF
     82a:	01 15       	cp	r16, r1
     82c:	11 05       	cpc	r17, r1
     82e:	09 f4       	brne	.+2      	; 0x832 <USB_Host_ProcessNextHostState+0x6c>
     830:	e9 c0       	rjmp	.+466    	; 0xa04 <USB_Host_ProcessNextHostState+0x23e>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     832:	81 e0       	ldi	r24, 0x01	; 1
     834:	2b df       	rcall	.-426    	; 0x68c <USB_Host_WaitMS>
     836:	68 2f       	mov	r22, r24
     838:	88 23       	and	r24, r24
     83a:	31 f0       	breq	.+12     	; 0x848 <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
     83c:	80 91 fd 04 	lds	r24, 0x04FD
     840:	80 93 0a 05 	sts	0x050A, r24
     844:	91 e0       	ldi	r25, 0x01	; 1
     846:	da c0       	rjmp	.+436    	; 0x9fc <USB_Host_ProcessNextHostState+0x236>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     848:	c8 01       	movw	r24, r16
     84a:	01 97       	sbiw	r24, 0x01	; 1
     84c:	90 93 ff 04 	sts	0x04FF, r25
     850:	80 93 fe 04 	sts	0x04FE, r24
     854:	89 2b       	or	r24, r25
     856:	09 f0       	breq	.+2      	; 0x85a <USB_Host_ProcessNextHostState+0x94>
     858:	d5 c0       	rjmp	.+426    	; 0xa04 <USB_Host_ProcessNextHostState+0x23e>
				  USB_HostState = PostWaitState;
     85a:	80 91 fd 04 	lds	r24, 0x04FD
     85e:	07 c0       	rjmp	.+14     	; 0x86e <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     860:	88 ee       	ldi	r24, 0xE8	; 232
     862:	93 e0       	ldi	r25, 0x03	; 3
     864:	90 93 ff 04 	sts	0x04FF, r25
     868:	80 93 fe 04 	sts	0x04FE, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     86c:	83 e0       	ldi	r24, 0x03	; 3
     86e:	80 93 0a 05 	sts	0x050A, r24
     872:	c8 c0       	rjmp	.+400    	; 0xa04 <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     874:	80 91 fe 04 	lds	r24, 0x04FE
     878:	90 91 ff 04 	lds	r25, 0x04FF
     87c:	01 97       	sbiw	r24, 0x01	; 1
     87e:	90 93 ff 04 	sts	0x04FF, r25
     882:	80 93 fe 04 	sts	0x04FE, r24
     886:	01 96       	adiw	r24, 0x01	; 1
     888:	29 f0       	breq	.+10     	; 0x894 <USB_Host_ProcessNextHostState+0xce>
     88a:	80 ed       	ldi	r24, 0xD0	; 208
     88c:	97 e0       	ldi	r25, 0x07	; 7
     88e:	01 97       	sbiw	r24, 0x01	; 1
     890:	f1 f7       	brne	.-4      	; 0x88e <USB_Host_ProcessNextHostState+0xc8>
     892:	b8 c0       	rjmp	.+368    	; 0xa04 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     894:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     896:	80 91 d8 00 	lds	r24, 0x00D8
     89a:	80 61       	ori	r24, 0x10	; 16
     89c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     8a0:	80 91 dd 00 	lds	r24, 0x00DD
     8a4:	8b 7f       	andi	r24, 0xFB	; 251
     8a6:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     8aa:	80 91 d7 00 	lds	r24, 0x00D7
     8ae:	80 61       	ori	r24, 0x10	; 16
     8b0:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     8b4:	80 91 dd 00 	lds	r24, 0x00DD
     8b8:	82 60       	ori	r24, 0x02	; 2
     8ba:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     8be:	84 e0       	ldi	r24, 0x04	; 4
     8c0:	d6 cf       	rjmp	.-84     	; 0x86e <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     8c2:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     8c6:	80 ff       	sbrs	r24, 0
     8c8:	9d c0       	rjmp	.+314    	; 0xa04 <USB_Host_ProcessNextHostState+0x23e>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     8ca:	80 91 9f 00 	lds	r24, 0x009F
     8ce:	8e 7f       	andi	r24, 0xFE	; 254
     8d0:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     8d4:	80 91 9f 00 	lds	r24, 0x009F
     8d8:	8d 7f       	andi	r24, 0xFD	; 253
     8da:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     8de:	80 91 df 00 	lds	r24, 0x00DF
     8e2:	8d 7f       	andi	r24, 0xFD	; 253
     8e4:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     8e8:	80 91 de 00 	lds	r24, 0x00DE
     8ec:	82 60       	ori	r24, 0x02	; 2
     8ee:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     8f2:	80 91 9e 00 	lds	r24, 0x009E
     8f6:	81 60       	ori	r24, 0x01	; 1
     8f8:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     8fc:	ed d0       	rcall	.+474    	; 0xad8 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     8fe:	10 92 0a 05 	sts	0x050A, r1
     902:	84 e6       	ldi	r24, 0x64	; 100
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	90 93 ff 04 	sts	0x04FF, r25
     90a:	80 93 fe 04 	sts	0x04FE, r24
     90e:	85 e0       	ldi	r24, 0x05	; 5
     910:	5c c0       	rjmp	.+184    	; 0x9ca <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     912:	0b df       	rcall	.-490    	; 0x72a <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     914:	10 92 0a 05 	sts	0x050A, r1
     918:	88 ec       	ldi	r24, 0xC8	; 200
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	90 93 ff 04 	sts	0x04FF, r25
     920:	80 93 fe 04 	sts	0x04FE, r24
     924:	86 e0       	ldi	r24, 0x06	; 6
     926:	51 c0       	rjmp	.+162    	; 0x9ca <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	60 e0       	ldi	r22, 0x00	; 0
     92c:	40 e0       	ldi	r20, 0x00	; 0
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	00 e4       	ldi	r16, 0x40	; 64
     932:	10 e0       	ldi	r17, 0x00	; 0
     934:	ee 24       	eor	r14, r14
     936:	72 d0       	rcall	.+228    	; 0xa1c <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     938:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     93c:	87 ff       	sbrs	r24, 7
     93e:	5c c0       	rjmp	.+184    	; 0x9f8 <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     940:	87 e0       	ldi	r24, 0x07	; 7
     942:	95 cf       	rjmp	.-214    	; 0x86e <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     944:	a2 e0       	ldi	r26, 0x02	; 2
     946:	b5 e0       	ldi	r27, 0x05	; 5
     948:	eb e1       	ldi	r30, 0x1B	; 27
     94a:	f1 e0       	ldi	r31, 0x01	; 1
     94c:	88 e0       	ldi	r24, 0x08	; 8
     94e:	01 90       	ld	r0, Z+
     950:	0d 92       	st	X+, r0
     952:	81 50       	subi	r24, 0x01	; 1
     954:	e1 f7       	brne	.-8      	; 0x94e <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	53 d3       	rcall	.+1702   	; 0x1002 <USB_Host_SendControlRequest>
     95c:	68 2f       	mov	r22, r24
     95e:	88 23       	and	r24, r24
     960:	09 f0       	breq	.+2      	; 0x964 <USB_Host_ProcessNextHostState+0x19e>
     962:	48 c0       	rjmp	.+144    	; 0x9f4 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     964:	88 85       	ldd	r24, Y+8	; 0x08
     966:	80 93 23 01 	sts	0x0123, r24

			USB_Host_ResetDevice();
     96a:	df de       	rcall	.-578    	; 0x72a <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     96c:	10 92 0a 05 	sts	0x050A, r1
     970:	88 ec       	ldi	r24, 0xC8	; 200
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	90 93 ff 04 	sts	0x04FF, r25
     978:	80 93 fe 04 	sts	0x04FE, r24
     97c:	88 e0       	ldi	r24, 0x08	; 8
     97e:	25 c0       	rjmp	.+74     	; 0x9ca <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     980:	00 91 23 01 	lds	r16, 0x0123
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	60 e0       	ldi	r22, 0x00	; 0
     988:	40 e0       	ldi	r20, 0x00	; 0
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	10 e0       	ldi	r17, 0x00	; 0
     98e:	ee 24       	eor	r14, r14
     990:	45 d0       	rcall	.+138    	; 0xa1c <Pipe_ConfigurePipe>
     992:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     996:	87 ff       	sbrs	r24, 7
     998:	2f c0       	rjmp	.+94     	; 0x9f8 <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     99a:	a2 e0       	ldi	r26, 0x02	; 2
     99c:	b5 e0       	ldi	r27, 0x05	; 5
     99e:	e3 e1       	ldi	r30, 0x13	; 19
     9a0:	f1 e0       	ldi	r31, 0x01	; 1
     9a2:	88 e0       	ldi	r24, 0x08	; 8
     9a4:	01 90       	ld	r0, Z+
     9a6:	0d 92       	st	X+, r0
     9a8:	81 50       	subi	r24, 0x01	; 1
     9aa:	e1 f7       	brne	.-8      	; 0x9a4 <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	28 d3       	rcall	.+1616   	; 0x1002 <USB_Host_SendControlRequest>
     9b2:	68 2f       	mov	r22, r24
     9b4:	88 23       	and	r24, r24
     9b6:	f1 f4       	brne	.+60     	; 0x9f4 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     9b8:	10 92 0a 05 	sts	0x050A, r1
     9bc:	84 e6       	ldi	r24, 0x64	; 100
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	90 93 ff 04 	sts	0x04FF, r25
     9c4:	80 93 fe 04 	sts	0x04FE, r24
     9c8:	89 e0       	ldi	r24, 0x09	; 9
     9ca:	80 93 fd 04 	sts	0x04FD, r24
     9ce:	1a c0       	rjmp	.+52     	; 0xa04 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     9d6:	8a e0       	ldi	r24, 0x0A	; 10
     9d8:	80 93 0a 05 	sts	0x050A, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     9dc:	c9 dc       	rcall	.-1646   	; 0x370 <EVENT_USB_Host_DeviceEnumerationComplete>
     9de:	12 c0       	rjmp	.+36     	; 0xa04 <USB_Host_ProcessNextHostState+0x23e>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     9e0:	89 2f       	mov	r24, r25
     9e2:	6b dc       	rcall	.-1834   	; 0x2ba <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     9e4:	80 91 dd 00 	lds	r24, 0x00DD
     9e8:	81 60       	ori	r24, 0x01	; 1
     9ea:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     9ee:	ae dc       	rcall	.-1700   	; 0x34c <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     9f0:	d8 d0       	rcall	.+432    	; 0xba2 <USB_ResetInterface>
     9f2:	08 c0       	rjmp	.+16     	; 0xa04 <USB_Host_ProcessNextHostState+0x23e>
	}
}
     9f4:	93 e0       	ldi	r25, 0x03	; 3
     9f6:	02 c0       	rjmp	.+4      	; 0x9fc <USB_Host_ProcessNextHostState+0x236>
     9f8:	94 e0       	ldi	r25, 0x04	; 4
     9fa:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     9fc:	80 91 0a 05 	lds	r24, 0x050A
     a00:	81 30       	cpi	r24, 0x01	; 1
     a02:	71 f7       	brne	.-36     	; 0x9e0 <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     a04:	28 96       	adiw	r28, 0x08	; 8
     a06:	0f b6       	in	r0, 0x3f	; 63
     a08:	f8 94       	cli
     a0a:	de bf       	out	0x3e, r29	; 62
     a0c:	0f be       	out	0x3f, r0	; 63
     a0e:	cd bf       	out	0x3d, r28	; 61
     a10:	cf 91       	pop	r28
     a12:	df 91       	pop	r29
     a14:	1f 91       	pop	r17
     a16:	0f 91       	pop	r16
     a18:	ef 90       	pop	r14
     a1a:	08 95       	ret

00000a1c <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     a1c:	ef 92       	push	r14
     a1e:	0f 93       	push	r16
     a20:	1f 93       	push	r17
     a22:	e8 2f       	mov	r30, r24
     a24:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     a26:	62 95       	swap	r22
     a28:	66 0f       	add	r22, r22
     a2a:	66 0f       	add	r22, r22
     a2c:	60 7c       	andi	r22, 0xC0	; 192
     a2e:	64 2b       	or	r22, r20
     a30:	2f 70       	andi	r18, 0x0F	; 15
     a32:	62 2b       	or	r22, r18
     a34:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     a36:	72 60       	ori	r23, 0x02	; 2
     a38:	45 c0       	rjmp	.+138    	; 0xac4 <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a3a:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     a3e:	3e 17       	cp	r19, r30
     a40:	a1 f4       	brne	.+40     	; 0xa6a <Pipe_ConfigurePipe+0x4e>
     a42:	88 e0       	ldi	r24, 0x08	; 8
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	03 c0       	rjmp	.+6      	; 0xa50 <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     a4a:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     a4c:	88 0f       	add	r24, r24
     a4e:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     a50:	80 17       	cp	r24, r16
     a52:	91 07       	cpc	r25, r17
     a54:	10 f4       	brcc	.+4      	; 0xa5a <Pipe_ConfigurePipe+0x3e>
     a56:	25 30       	cpi	r18, 0x05	; 5
     a58:	c1 f7       	brne	.-16     	; 0xa4a <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     a5a:	92 2f       	mov	r25, r18
     a5c:	92 95       	swap	r25
     a5e:	90 7f       	andi	r25, 0xF0	; 240
     a60:	97 2b       	or	r25, r23
     a62:	56 2f       	mov	r21, r22
     a64:	40 e0       	ldi	r20, 0x00	; 0
     a66:	20 e0       	ldi	r18, 0x00	; 0
     a68:	08 c0       	rjmp	.+16     	; 0xa7a <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     a6a:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     a6e:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     a72:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
     a76:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     a7a:	91 ff       	sbrs	r25, 1
     a7c:	22 c0       	rjmp	.+68     	; 0xac2 <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a7e:	80 91 a9 00 	lds	r24, 0x00A9
     a82:	8e 7f       	andi	r24, 0xFE	; 254
     a84:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     a88:	80 91 ab 00 	lds	r24, 0x00AB
     a8c:	8d 7f       	andi	r24, 0xFD	; 253
     a8e:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     a92:	80 91 a9 00 	lds	r24, 0x00A9
     a96:	81 60       	ori	r24, 0x01	; 1
     a98:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     a9c:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
     aa0:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
     aa4:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
     aa8:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     aac:	80 91 a9 00 	lds	r24, 0x00A9
     ab0:	80 62       	ori	r24, 0x20	; 32
     ab2:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     ab6:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     aba:	87 fd       	sbrc	r24, 7
     abc:	02 c0       	rjmp	.+4      	; 0xac2 <Pipe_ConfigurePipe+0xa6>
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	07 c0       	rjmp	.+14     	; 0xad0 <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     ac2:	3f 5f       	subi	r19, 0xFF	; 255
     ac4:	37 30       	cpi	r19, 0x07	; 7
     ac6:	08 f4       	brcc	.+2      	; 0xaca <Pipe_ConfigurePipe+0xae>
     ac8:	b8 cf       	rjmp	.-144    	; 0xa3a <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     aca:	e0 93 a7 00 	sts	0x00A7, r30
     ace:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
     ad0:	1f 91       	pop	r17
     ad2:	0f 91       	pop	r16
     ad4:	ef 90       	pop	r14
     ad6:	08 95       	ret

00000ad8 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     ad8:	10 92 f8 00 	sts	0x00F8, r1
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     ae2:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     ae6:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     aea:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     aee:	80 91 a9 00 	lds	r24, 0x00A9
     af2:	8e 7f       	andi	r24, 0xFE	; 254
     af4:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     af8:	9f 5f       	subi	r25, 0xFF	; 255
     afa:	97 30       	cpi	r25, 0x07	; 7
     afc:	81 f7       	brne	.-32     	; 0xade <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     afe:	08 95       	ret

00000b00 <Pipe_IsEndpointBound>:

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
     b00:	48 2f       	mov	r20, r24
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     b02:	30 91 a7 00 	lds	r19, 0x00A7
     b06:	20 e0       	ldi	r18, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     b08:	20 93 a7 00 	sts	0x00A7, r18
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     b0c:	80 91 ac 00 	lds	r24, 0x00AC

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     b10:	87 ff       	sbrs	r24, 7
     b12:	10 c0       	rjmp	.+32     	; 0xb34 <Pipe_IsEndpointBound+0x34>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     b14:	90 91 aa 00 	lds	r25, 0x00AA
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     b18:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     b1c:	80 73       	andi	r24, 0x30	; 48
     b1e:	80 31       	cpi	r24, 0x10	; 16
     b20:	11 f0       	breq	.+4      	; 0xb26 <Pipe_IsEndpointBound+0x26>
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	01 c0       	rjmp	.+2      	; 0xb28 <Pipe_IsEndpointBound+0x28>
     b26:	80 e8       	ldi	r24, 0x80	; 128
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     b28:	9f 70       	andi	r25, 0x0F	; 15
     b2a:	89 2b       	or	r24, r25
     b2c:	84 17       	cp	r24, r20
     b2e:	11 f4       	brne	.+4      	; 0xb34 <Pipe_IsEndpointBound+0x34>
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	08 95       	ret

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b34:	2f 5f       	subi	r18, 0xFF	; 255
     b36:	27 30       	cpi	r18, 0x07	; 7
     b38:	39 f7       	brne	.-50     	; 0xb08 <Pipe_IsEndpointBound+0x8>
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     b3a:	37 70       	andi	r19, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     b3c:	30 93 a7 00 	sts	0x00A7, r19
     b40:	80 e0       	ldi	r24, 0x00	; 0
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     b42:	08 95       	ret

00000b44 <Pipe_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     b44:	40 91 a2 00 	lds	r20, 0x00A2
     b48:	50 91 a3 00 	lds	r21, 0x00A3
     b4c:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     b4e:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     b52:	80 73       	andi	r24, 0x30	; 48
     b54:	80 31       	cpi	r24, 0x10	; 16
     b56:	29 f4       	brne	.+10     	; 0xb62 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     b58:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     b5c:	80 ff       	sbrs	r24, 0
     b5e:	05 c0       	rjmp	.+10     	; 0xb6a <Pipe_WaitUntilReady+0x26>
     b60:	1e c0       	rjmp	.+60     	; 0xb9e <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     b62:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     b66:	82 fd       	sbrc	r24, 2
     b68:	1a c0       	rjmp	.+52     	; 0xb9e <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     b6a:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     b6e:	81 ff       	sbrs	r24, 1
     b70:	02 c0       	rjmp	.+4      	; 0xb76 <Pipe_WaitUntilReady+0x32>
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     b76:	80 91 0a 05 	lds	r24, 0x050A
     b7a:	81 30       	cpi	r24, 0x01	; 1
     b7c:	11 f4       	brne	.+4      	; 0xb82 <Pipe_WaitUntilReady+0x3e>
     b7e:	82 e0       	ldi	r24, 0x02	; 2
     b80:	08 95       	ret
     b82:	80 91 a2 00 	lds	r24, 0x00A2
     b86:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     b8a:	84 17       	cp	r24, r20
     b8c:	95 07       	cpc	r25, r21
     b8e:	f9 f2       	breq	.-66     	; 0xb4e <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     b90:	22 23       	and	r18, r18
     b92:	11 f4       	brne	.+4      	; 0xb98 <Pipe_WaitUntilReady+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	08 95       	ret
     b98:	21 50       	subi	r18, 0x01	; 1
     b9a:	ac 01       	movw	r20, r24
     b9c:	d8 cf       	rjmp	.-80     	; 0xb4e <Pipe_WaitUntilReady+0xa>
     b9e:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     ba0:	08 95       	ret

00000ba2 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     ba2:	70 d0       	rcall	.+224    	; 0xc84 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     ba4:	77 d0       	rcall	.+238    	; 0xc94 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     ba6:	80 91 d8 00 	lds	r24, 0x00D8
     baa:	8f 77       	andi	r24, 0x7F	; 127
     bac:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     bb0:	80 91 d8 00 	lds	r24, 0x00D8
     bb4:	80 68       	ori	r24, 0x80	; 128
     bb6:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     bba:	80 91 d8 00 	lds	r24, 0x00D8
     bbe:	8f 7d       	andi	r24, 0xDF	; 223
     bc0:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     bc4:	80 91 d7 00 	lds	r24, 0x00D7
     bc8:	8f 77       	andi	r24, 0x7F	; 127
     bca:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     bce:	8c e0       	ldi	r24, 0x0C	; 12
     bd0:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     bd2:	8e e0       	ldi	r24, 0x0E	; 14
     bd4:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     bd6:	09 b4       	in	r0, 0x29	; 41
     bd8:	00 fe       	sbrs	r0, 0
     bda:	fd cf       	rjmp	.-6      	; 0xbd6 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	80 93 0a 05 	sts	0x050A, r24
	USB_Host_ConfigurationNumber = 0;
     be2:	10 92 00 05 	sts	0x0500, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	80 93 23 01 	sts	0x0123, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     bec:	80 91 d8 00 	lds	r24, 0x00D8
     bf0:	80 64       	ori	r24, 0x40	; 64
     bf2:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     bf6:	80 91 dd 00 	lds	r24, 0x00DD
     bfa:	81 60       	ori	r24, 0x01	; 1
     bfc:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     c00:	80 91 dd 00 	lds	r24, 0x00DD
     c04:	84 60       	ori	r24, 0x04	; 4
     c06:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     c0a:	80 91 d7 00 	lds	r24, 0x00D7
     c0e:	8f 7e       	andi	r24, 0xEF	; 239
     c10:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     c14:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     c16:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     c18:	80 91 de 00 	lds	r24, 0x00DE
     c1c:	81 60       	ori	r24, 0x01	; 1
     c1e:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     c22:	80 91 de 00 	lds	r24, 0x00DE
     c26:	84 60       	ori	r24, 0x04	; 4
     c28:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     c2c:	80 91 e0 00 	lds	r24, 0x00E0
     c30:	8e 7f       	andi	r24, 0xFE	; 254
     c32:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     c36:	80 91 d8 00 	lds	r24, 0x00D8
     c3a:	80 61       	ori	r24, 0x10	; 16
     c3c:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     c40:	08 95       	ret

00000c42 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     c42:	e7 ed       	ldi	r30, 0xD7	; 215
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	80 81       	ld	r24, Z
     c48:	81 60       	ori	r24, 0x01	; 1
     c4a:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	80 93 01 05 	sts	0x0501, r24

	USB_ResetInterface();
}
     c52:	a7 cf       	rjmp	.-178    	; 0xba2 <USB_ResetInterface>

00000c54 <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     c54:	17 d0       	rcall	.+46     	; 0xc84 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     c56:	1e d0       	rcall	.+60     	; 0xc94 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     c58:	e0 ee       	ldi	r30, 0xE0	; 224
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	81 60       	ori	r24, 0x01	; 1
     c60:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     c62:	a8 ed       	ldi	r26, 0xD8	; 216
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	8c 91       	ld	r24, X
     c68:	8f 77       	andi	r24, 0x7F	; 127
     c6a:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     c6c:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     c6e:	e7 ed       	ldi	r30, 0xD7	; 215
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	8e 7f       	andi	r24, 0xFE	; 254
     c76:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     c78:	8c 91       	ld	r24, X
     c7a:	8f 7e       	andi	r24, 0xEF	; 239
     c7c:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     c7e:	10 92 01 05 	sts	0x0501, r1
}
     c82:	08 95       	ret

00000c84 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     c84:	e8 ed       	ldi	r30, 0xD8	; 216
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	8c 7f       	andi	r24, 0xFC	; 252
     c8c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     c8e:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     c92:	08 95       	ret

00000c94 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     c94:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     c98:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     c9c:	08 95       	ret

00000c9e <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     c9e:	1f 92       	push	r1
     ca0:	0f 92       	push	r0
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	0f 92       	push	r0
     ca6:	0b b6       	in	r0, 0x3b	; 59
     ca8:	0f 92       	push	r0
     caa:	11 24       	eor	r1, r1
     cac:	2f 93       	push	r18
     cae:	3f 93       	push	r19
     cb0:	4f 93       	push	r20
     cb2:	5f 93       	push	r21
     cb4:	6f 93       	push	r22
     cb6:	7f 93       	push	r23
     cb8:	8f 93       	push	r24
     cba:	9f 93       	push	r25
     cbc:	af 93       	push	r26
     cbe:	bf 93       	push	r27
     cc0:	ef 93       	push	r30
     cc2:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     cc4:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     cc8:	85 ff       	sbrs	r24, 5
     cca:	0a c0       	rjmp	.+20     	; 0xce0 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     ccc:	80 91 a0 00 	lds	r24, 0x00A0
     cd0:	85 ff       	sbrs	r24, 5
     cd2:	06 c0       	rjmp	.+12     	; 0xce0 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     cd4:	80 91 9f 00 	lds	r24, 0x009F
     cd8:	8f 7d       	andi	r24, 0xDF	; 223
     cda:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     cde:	67 d1       	rcall	.+718    	; 0xfae <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     ce0:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     ce4:	81 ff       	sbrs	r24, 1
     ce6:	15 c0       	rjmp	.+42     	; 0xd12 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     ce8:	80 91 a0 00 	lds	r24, 0x00A0
     cec:	81 ff       	sbrs	r24, 1
     cee:	11 c0       	rjmp	.+34     	; 0xd12 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     cf0:	80 91 9f 00 	lds	r24, 0x009F
     cf4:	8d 7f       	andi	r24, 0xFD	; 253
     cf6:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     cfa:	80 91 9f 00 	lds	r24, 0x009F
     cfe:	8e 7f       	andi	r24, 0xFE	; 254
     d00:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     d04:	80 91 a0 00 	lds	r24, 0x00A0
     d08:	8d 7f       	andi	r24, 0xFD	; 253
     d0a:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     d0e:	1e db       	rcall	.-2500   	; 0x34c <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     d10:	48 df       	rcall	.-368    	; 0xba2 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     d12:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     d16:	81 ff       	sbrs	r24, 1
     d18:	15 c0       	rjmp	.+42     	; 0xd44 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     d1a:	80 91 de 00 	lds	r24, 0x00DE
     d1e:	81 ff       	sbrs	r24, 1
     d20:	11 c0       	rjmp	.+34     	; 0xd44 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     d22:	80 91 df 00 	lds	r24, 0x00DF
     d26:	8d 7f       	andi	r24, 0xFD	; 253
     d28:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     d2c:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d2e:	80 91 dd 00 	lds	r24, 0x00DD
     d32:	81 60       	ori	r24, 0x01	; 1
     d34:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	eb da       	rcall	.-2602   	; 0x312 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     d3c:	07 db       	rcall	.-2546   	; 0x34c <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	80 93 0a 05 	sts	0x050A, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     d44:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     d48:	80 ff       	sbrs	r24, 0
     d4a:	17 c0       	rjmp	.+46     	; 0xd7a <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     d4c:	80 91 de 00 	lds	r24, 0x00DE
     d50:	80 ff       	sbrs	r24, 0
     d52:	13 c0       	rjmp	.+38     	; 0xd7a <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     d54:	80 91 df 00 	lds	r24, 0x00DF
     d58:	8e 7f       	andi	r24, 0xFE	; 254
     d5a:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     d5e:	80 91 de 00 	lds	r24, 0x00DE
     d62:	8e 7f       	andi	r24, 0xFE	; 254
     d64:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     d68:	fa da       	rcall	.-2572   	; 0x35e <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     d6a:	80 91 a0 00 	lds	r24, 0x00A0
     d6e:	82 60       	ori	r24, 0x02	; 2
     d70:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     d74:	82 e0       	ldi	r24, 0x02	; 2
     d76:	80 93 0a 05 	sts	0x050A, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     d7a:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     d7e:	82 ff       	sbrs	r24, 2
     d80:	0e c0       	rjmp	.+28     	; 0xd9e <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     d82:	80 91 de 00 	lds	r24, 0x00DE
     d86:	82 ff       	sbrs	r24, 2
     d88:	0a c0       	rjmp	.+20     	; 0xd9e <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     d8a:	80 91 df 00 	lds	r24, 0x00DF
     d8e:	8b 7f       	andi	r24, 0xFB	; 251
     d90:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     d94:	82 e0       	ldi	r24, 0x02	; 2
     d96:	60 e0       	ldi	r22, 0x00	; 0
     d98:	90 da       	rcall	.-2784   	; 0x2ba <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     d9a:	d8 da       	rcall	.-2640   	; 0x34c <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     d9c:	02 df       	rcall	.-508    	; 0xba2 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     d9e:	ff 91       	pop	r31
     da0:	ef 91       	pop	r30
     da2:	bf 91       	pop	r27
     da4:	af 91       	pop	r26
     da6:	9f 91       	pop	r25
     da8:	8f 91       	pop	r24
     daa:	7f 91       	pop	r23
     dac:	6f 91       	pop	r22
     dae:	5f 91       	pop	r21
     db0:	4f 91       	pop	r20
     db2:	3f 91       	pop	r19
     db4:	2f 91       	pop	r18
     db6:	0f 90       	pop	r0
     db8:	0b be       	out	0x3b, r0	; 59
     dba:	0f 90       	pop	r0
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	0f 90       	pop	r0
     dc0:	1f 90       	pop	r1
     dc2:	18 95       	reti

00000dc4 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     dc4:	bf 92       	push	r11
     dc6:	cf 92       	push	r12
     dc8:	df 92       	push	r13
     dca:	ef 92       	push	r14
     dcc:	ff 92       	push	r15
     dce:	0f 93       	push	r16
     dd0:	1f 93       	push	r17
     dd2:	cf 93       	push	r28
     dd4:	df 93       	push	r29
     dd6:	18 2f       	mov	r17, r24
     dd8:	09 2f       	mov	r16, r25
     dda:	7b 01       	movw	r14, r22
     ddc:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     dde:	80 91 aa 00 	lds	r24, 0x00AA
     de2:	8f 7c       	andi	r24, 0xCF	; 207
     de4:	80 61       	ori	r24, 0x10	; 16
     de6:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     dea:	ac de       	rcall	.-680    	; 0xb44 <Pipe_WaitUntilReady>
     dec:	b8 2e       	mov	r11, r24
     dee:	88 23       	and	r24, r24
     df0:	a9 f5       	brne	.+106    	; 0xe5c <Pipe_Read_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     df2:	81 2f       	mov	r24, r17
     df4:	90 2f       	mov	r25, r16
     df6:	9c 01       	movw	r18, r24
     df8:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     dfa:	c1 14       	cp	r12, r1
     dfc:	d1 04       	cpc	r13, r1
     dfe:	39 f0       	breq	.+14     	; 0xe0e <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
     e00:	f6 01       	movw	r30, r12
     e02:	80 81       	ld	r24, Z
     e04:	91 81       	ldd	r25, Z+1	; 0x01
     e06:	e8 1a       	sub	r14, r24
     e08:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     e0a:	c8 0f       	add	r28, r24
     e0c:	d9 1f       	adc	r29, r25
     e0e:	00 e0       	ldi	r16, 0x00	; 0
     e10:	10 e0       	ldi	r17, 0x00	; 0
     e12:	21 c0       	rjmp	.+66     	; 0xe56 <Pipe_Read_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     e14:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     e18:	85 fd       	sbrc	r24, 5
     e1a:	15 c0       	rjmp	.+42     	; 0xe46 <Pipe_Read_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     e1c:	80 91 a6 00 	lds	r24, 0x00A6
     e20:	8e 77       	andi	r24, 0x7E	; 126
     e22:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     e26:	c1 14       	cp	r12, r1
     e28:	d1 04       	cpc	r13, r1
     e2a:	49 f0       	breq	.+18     	; 0xe3e <Pipe_Read_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
     e2c:	f6 01       	movw	r30, r12
     e2e:	80 81       	ld	r24, Z
     e30:	91 81       	ldd	r25, Z+1	; 0x01
     e32:	80 0f       	add	r24, r16
     e34:	91 1f       	adc	r25, r17
     e36:	91 83       	std	Z+1, r25	; 0x01
     e38:	80 83       	st	Z, r24
     e3a:	84 e0       	ldi	r24, 0x04	; 4
     e3c:	10 c0       	rjmp	.+32     	; 0xe5e <Pipe_Read_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     e3e:	82 de       	rcall	.-764    	; 0xb44 <Pipe_WaitUntilReady>
     e40:	88 23       	and	r24, r24
     e42:	49 f0       	breq	.+18     	; 0xe56 <Pipe_Read_Stream_LE+0x92>
     e44:	0c c0       	rjmp	.+24     	; 0xe5e <Pipe_Read_Stream_LE+0x9a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     e46:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     e4a:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     e4c:	08 94       	sec
     e4e:	e1 08       	sbc	r14, r1
     e50:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
     e52:	0f 5f       	subi	r16, 0xFF	; 255
     e54:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     e56:	e1 14       	cp	r14, r1
     e58:	f1 04       	cpc	r15, r1
     e5a:	e1 f6       	brne	.-72     	; 0xe14 <Pipe_Read_Stream_LE+0x50>
     e5c:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	1f 91       	pop	r17
     e64:	0f 91       	pop	r16
     e66:	ff 90       	pop	r15
     e68:	ef 90       	pop	r14
     e6a:	df 90       	pop	r13
     e6c:	cf 90       	pop	r12
     e6e:	bf 90       	pop	r11
     e70:	08 95       	ret

00000e72 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     e72:	af 92       	push	r10
     e74:	bf 92       	push	r11
     e76:	cf 92       	push	r12
     e78:	df 92       	push	r13
     e7a:	ef 92       	push	r14
     e7c:	ff 92       	push	r15
     e7e:	0f 93       	push	r16
     e80:	1f 93       	push	r17
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	7c 01       	movw	r14, r24
     e88:	eb 01       	movw	r28, r22
     e8a:	6a 01       	movw	r12, r20
     e8c:	24 c0       	rjmp	.+72     	; 0xed6 <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     e8e:	e8 81       	ld	r30, Y
     e90:	f9 81       	ldd	r31, Y+1	; 0x01
     e92:	be 2e       	mov	r11, r30
     e94:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     e96:	80 81       	ld	r24, Z
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	98 01       	movw	r18, r16
     e9c:	80 17       	cp	r24, r16
     e9e:	91 07       	cpc	r25, r17
     ea0:	08 f4       	brcc	.+2      	; 0xea4 <USB_GetNextDescriptorComp+0x32>
     ea2:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     ea4:	e2 0f       	add	r30, r18
     ea6:	f3 1f       	adc	r31, r19
     ea8:	f9 83       	std	Y+1, r31	; 0x01
     eaa:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     eac:	f7 01       	movw	r30, r14
     eae:	80 81       	ld	r24, Z
     eb0:	91 81       	ldd	r25, Z+1	; 0x01
     eb2:	82 1b       	sub	r24, r18
     eb4:	93 0b       	sbc	r25, r19
     eb6:	91 83       	std	Z+1, r25	; 0x01
     eb8:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     eba:	88 81       	ld	r24, Y
     ebc:	99 81       	ldd	r25, Y+1	; 0x01
     ebe:	f6 01       	movw	r30, r12
     ec0:	09 95       	icall
     ec2:	82 30       	cpi	r24, 0x02	; 2
     ec4:	41 f0       	breq	.+16     	; 0xed6 <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     ec6:	81 30       	cpi	r24, 0x01	; 1
     ec8:	69 f4       	brne	.+26     	; 0xee4 <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
     eca:	b8 82       	st	Y, r11
     ecc:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
     ece:	f7 01       	movw	r30, r14
     ed0:	11 83       	std	Z+1, r17	; 0x01
     ed2:	00 83       	st	Z, r16
     ed4:	07 c0       	rjmp	.+14     	; 0xee4 <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     ed6:	f7 01       	movw	r30, r14
     ed8:	00 81       	ld	r16, Z
     eda:	11 81       	ldd	r17, Z+1	; 0x01
     edc:	01 15       	cp	r16, r1
     ede:	11 05       	cpc	r17, r1
     ee0:	b1 f6       	brne	.-84     	; 0xe8e <USB_GetNextDescriptorComp+0x1c>
     ee2:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	1f 91       	pop	r17
     eea:	0f 91       	pop	r16
     eec:	ff 90       	pop	r15
     eee:	ef 90       	pop	r14
     ef0:	df 90       	pop	r13
     ef2:	cf 90       	pop	r12
     ef4:	bf 90       	pop	r11
     ef6:	af 90       	pop	r10
     ef8:	08 95       	ret

00000efa <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     efa:	cf 92       	push	r12
     efc:	df 92       	push	r13
     efe:	ef 92       	push	r14
     f00:	ff 92       	push	r15
     f02:	0f 93       	push	r16
     f04:	1f 93       	push	r17
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
     f0e:	29 97       	sbiw	r28, 0x09	; 9
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	de bf       	out	0x3e, r29	; 62
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	cd bf       	out	0x3d, r28	; 61
     f1a:	6b 01       	movw	r12, r22
     f1c:	8a 01       	movw	r16, r20
     f1e:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     f20:	90 e8       	ldi	r25, 0x80	; 128
     f22:	90 93 02 05 	sts	0x0502, r25
     f26:	96 e0       	ldi	r25, 0x06	; 6
     f28:	90 93 03 05 	sts	0x0503, r25
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	92 60       	ori	r25, 0x02	; 2
     f32:	90 93 05 05 	sts	0x0505, r25
     f36:	80 93 04 05 	sts	0x0504, r24
     f3a:	10 92 07 05 	sts	0x0507, r1
     f3e:	10 92 06 05 	sts	0x0506, r1
     f42:	89 e0       	ldi	r24, 0x09	; 9
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	90 93 09 05 	sts	0x0509, r25
     f4a:	80 93 08 05 	sts	0x0508, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     f4e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     f52:	ce 01       	movw	r24, r28
     f54:	01 96       	adiw	r24, 0x01	; 1
     f56:	55 d0       	rcall	.+170    	; 0x1002 <USB_Host_SendControlRequest>
     f58:	28 2f       	mov	r18, r24
     f5a:	88 23       	and	r24, r24
     f5c:	c1 f4       	brne	.+48     	; 0xf8e <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	9c 81       	ldd	r25, Y+4	; 0x04
     f62:	f6 01       	movw	r30, r12
     f64:	91 83       	std	Z+1, r25	; 0x01
     f66:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     f68:	e8 16       	cp	r14, r24
     f6a:	f9 06       	cpc	r15, r25
     f6c:	10 f4       	brcc	.+4      	; 0xf72 <USB_Host_GetDeviceConfigDescriptor+0x78>
     f6e:	25 e0       	ldi	r18, 0x05	; 5
     f70:	0e c0       	rjmp	.+28     	; 0xf8e <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     f72:	90 93 09 05 	sts	0x0509, r25
     f76:	80 93 08 05 	sts	0x0508, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     f7a:	c8 01       	movw	r24, r16
     f7c:	42 d0       	rcall	.+132    	; 0x1002 <USB_Host_SendControlRequest>
     f7e:	28 2f       	mov	r18, r24
     f80:	88 23       	and	r24, r24
     f82:	29 f4       	brne	.+10     	; 0xf8e <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     f84:	f8 01       	movw	r30, r16
     f86:	81 81       	ldd	r24, Z+1	; 0x01
     f88:	82 30       	cpi	r24, 0x02	; 2
     f8a:	09 f0       	breq	.+2      	; 0xf8e <USB_Host_GetDeviceConfigDescriptor+0x94>
     f8c:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     f8e:	82 2f       	mov	r24, r18
     f90:	29 96       	adiw	r28, 0x09	; 9
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	f8 94       	cli
     f96:	de bf       	out	0x3e, r29	; 62
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	cd bf       	out	0x3d, r28	; 61
     f9c:	cf 91       	pop	r28
     f9e:	df 91       	pop	r29
     fa0:	1f 91       	pop	r17
     fa2:	0f 91       	pop	r16
     fa4:	ff 90       	pop	r15
     fa6:	ef 90       	pop	r14
     fa8:	df 90       	pop	r13
     faa:	cf 90       	pop	r12
     fac:	08 95       	ret

00000fae <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     fae:	08 95       	ret

00000fb0 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     fb0:	1f 93       	push	r17
     fb2:	cf 93       	push	r28
     fb4:	df 93       	push	r29
     fb6:	18 2f       	mov	r17, r24
     fb8:	c8 ee       	ldi	r28, 0xE8	; 232
     fba:	d3 e0       	ldi	r29, 0x03	; 3
     fbc:	09 c0       	rjmp	.+18     	; 0xfd0 <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	65 db       	rcall	.-2358   	; 0x68c <USB_Host_WaitMS>
     fc2:	88 23       	and	r24, r24
     fc4:	d1 f4       	brne	.+52     	; 0xffa <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     fc6:	20 97       	sbiw	r28, 0x00	; 0
     fc8:	11 f4       	brne	.+4      	; 0xfce <USB_Host_WaitForIOS+0x1e>
     fca:	84 e0       	ldi	r24, 0x04	; 4
     fcc:	16 c0       	rjmp	.+44     	; 0xffa <USB_Host_WaitForIOS+0x4a>
     fce:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     fd0:	11 23       	and	r17, r17
     fd2:	29 f4       	brne	.+10     	; 0xfde <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     fd4:	80 91 a6 00 	lds	r24, 0x00A6
     fd8:	83 ff       	sbrs	r24, 3
     fda:	f1 cf       	rjmp	.-30     	; 0xfbe <USB_Host_WaitForIOS+0xe>
     fdc:	0d c0       	rjmp	.+26     	; 0xff8 <USB_Host_WaitForIOS+0x48>
     fde:	11 30       	cpi	r17, 0x01	; 1
     fe0:	29 f4       	brne	.+10     	; 0xfec <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     fe2:	80 91 a6 00 	lds	r24, 0x00A6
     fe6:	80 ff       	sbrs	r24, 0
     fe8:	ea cf       	rjmp	.-44     	; 0xfbe <USB_Host_WaitForIOS+0xe>
     fea:	06 c0       	rjmp	.+12     	; 0xff8 <USB_Host_WaitForIOS+0x48>
     fec:	12 30       	cpi	r17, 0x02	; 2
     fee:	39 f7       	brne	.-50     	; 0xfbe <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     ff0:	80 91 a6 00 	lds	r24, 0x00A6
     ff4:	82 ff       	sbrs	r24, 2
     ff6:	e3 cf       	rjmp	.-58     	; 0xfbe <USB_Host_WaitForIOS+0xe>
     ff8:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
     ffa:	df 91       	pop	r29
     ffc:	cf 91       	pop	r28
     ffe:	1f 91       	pop	r17
    1000:	08 95       	ret

00001002 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1002:	ff 92       	push	r15
    1004:	0f 93       	push	r16
    1006:	1f 93       	push	r17
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	18 2f       	mov	r17, r24
    100e:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1010:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1014:	c0 91 08 05 	lds	r28, 0x0508
    1018:	d0 91 09 05 	lds	r29, 0x0509
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    101c:	80 91 9e 00 	lds	r24, 0x009E
    1020:	81 60       	ori	r24, 0x01	; 1
    1022:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	31 db       	rcall	.-2462   	; 0x68c <USB_Host_WaitMS>
    102a:	98 2f       	mov	r25, r24
    102c:	88 23       	and	r24, r24
    102e:	09 f0       	breq	.+2      	; 0x1032 <USB_Host_SendControlRequest+0x30>
    1030:	ee c0       	rjmp	.+476    	; 0x120e <USB_Host_SendControlRequest+0x20c>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1032:	80 91 aa 00 	lds	r24, 0x00AA
    1036:	8f 7c       	andi	r24, 0xCF	; 207
    1038:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    103c:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1040:	80 91 a6 00 	lds	r24, 0x00A6
    1044:	8f 7e       	andi	r24, 0xEF	; 239
    1046:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    104a:	80 91 a9 00 	lds	r24, 0x00A9
    104e:	8f 7b       	andi	r24, 0xBF	; 191
    1050:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearError();

	Pipe_Unfreeze();

	Pipe_Write_8(USB_ControlRequest.bmRequestType);
    1054:	80 91 02 05 	lds	r24, 0x0502
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1058:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
    105c:	80 91 03 05 	lds	r24, 0x0503
    1060:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
    1064:	80 91 04 05 	lds	r24, 0x0504
    1068:	90 91 05 05 	lds	r25, 0x0505
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    106c:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    1070:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
    1074:	80 91 06 05 	lds	r24, 0x0506
    1078:	90 91 07 05 	lds	r25, 0x0507
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    107c:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    1080:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
    1084:	80 91 08 05 	lds	r24, 0x0508
    1088:	90 91 09 05 	lds	r25, 0x0509
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    108c:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    1090:	90 93 af 00 	sts	0x00AF, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1094:	80 91 a6 00 	lds	r24, 0x00A6
    1098:	87 77       	andi	r24, 0x77	; 119
    109a:	80 93 a6 00 	sts	0x00A6, r24

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	87 df       	rcall	.-242    	; 0xfb0 <USB_Host_WaitForIOS>
    10a2:	98 2f       	mov	r25, r24
    10a4:	88 23       	and	r24, r24
    10a6:	09 f0       	breq	.+2      	; 0x10aa <USB_Host_SendControlRequest+0xa8>
    10a8:	b2 c0       	rjmp	.+356    	; 0x120e <USB_Host_SendControlRequest+0x20c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10aa:	80 91 a9 00 	lds	r24, 0x00A9
    10ae:	80 64       	ori	r24, 0x40	; 64
    10b0:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	ea da       	rcall	.-2604   	; 0x68c <USB_Host_WaitMS>
    10b8:	98 2f       	mov	r25, r24
    10ba:	88 23       	and	r24, r24
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <USB_Host_SendControlRequest+0xbe>
    10be:	a7 c0       	rjmp	.+334    	; 0x120e <USB_Host_SendControlRequest+0x20c>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
    10c0:	21 2f       	mov	r18, r17
    10c2:	30 2f       	mov	r19, r16
    10c4:	c9 01       	movw	r24, r18
    10c6:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    10c8:	80 91 02 05 	lds	r24, 0x0502
    10cc:	87 ff       	sbrs	r24, 7
    10ce:	52 c0       	rjmp	.+164    	; 0x1174 <USB_Host_SendControlRequest+0x172>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10d0:	80 91 aa 00 	lds	r24, 0x00AA
    10d4:	8f 7c       	andi	r24, 0xCF	; 207
    10d6:	80 61       	ori	r24, 0x10	; 16
    10d8:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    10dc:	01 15       	cp	r16, r1
    10de:	11 05       	cpc	r17, r1
    10e0:	69 f5       	brne	.+90     	; 0x113c <USB_Host_SendControlRequest+0x13a>
    10e2:	2e c0       	rjmp	.+92     	; 0x1140 <USB_Host_SendControlRequest+0x13e>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10e4:	80 91 a9 00 	lds	r24, 0x00A9
    10e8:	8f 7b       	andi	r24, 0xBF	; 191
    10ea:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	5f df       	rcall	.-322    	; 0xfb0 <USB_Host_WaitForIOS>
    10f2:	98 2f       	mov	r25, r24
    10f4:	88 23       	and	r24, r24
    10f6:	09 f0       	breq	.+2      	; 0x10fa <USB_Host_SendControlRequest+0xf8>
    10f8:	8a c0       	rjmp	.+276    	; 0x120e <USB_Host_SendControlRequest+0x20c>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    10fa:	80 91 f6 00 	lds	r24, 0x00F6
    10fe:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    1102:	89 2b       	or	r24, r25
    1104:	49 f4       	brne	.+18     	; 0x1118 <USB_Host_SendControlRequest+0x116>
    1106:	c0 e0       	ldi	r28, 0x00	; 0
    1108:	d0 e0       	ldi	r29, 0x00	; 0
    110a:	06 c0       	rjmp	.+12     	; 0x1118 <USB_Host_SendControlRequest+0x116>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    110c:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    1110:	f8 01       	movw	r30, r16
    1112:	81 93       	st	Z+, r24
    1114:	8f 01       	movw	r16, r30
					DataLen--;
    1116:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1118:	80 91 f6 00 	lds	r24, 0x00F6
    111c:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1120:	89 2b       	or	r24, r25
    1122:	11 f0       	breq	.+4      	; 0x1128 <USB_Host_SendControlRequest+0x126>
    1124:	20 97       	sbiw	r28, 0x00	; 0
    1126:	91 f7       	brne	.-28     	; 0x110c <USB_Host_SendControlRequest+0x10a>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1128:	80 91 a9 00 	lds	r24, 0x00A9
    112c:	80 64       	ori	r24, 0x40	; 64
    112e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1132:	80 91 a6 00 	lds	r24, 0x00A6
    1136:	8e 77       	andi	r24, 0x7E	; 126
    1138:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    113c:	20 97       	sbiw	r28, 0x00	; 0
    113e:	91 f6       	brne	.-92     	; 0x10e4 <USB_Host_SendControlRequest+0xe2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1140:	80 91 aa 00 	lds	r24, 0x00AA
    1144:	8f 7c       	andi	r24, 0xCF	; 207
    1146:	80 62       	ori	r24, 0x20	; 32
    1148:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    114c:	80 91 a9 00 	lds	r24, 0x00A9
    1150:	8f 7b       	andi	r24, 0xBF	; 191
    1152:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1156:	82 e0       	ldi	r24, 0x02	; 2
    1158:	2b df       	rcall	.-426    	; 0xfb0 <USB_Host_WaitForIOS>
    115a:	98 2f       	mov	r25, r24
    115c:	88 23       	and	r24, r24
    115e:	09 f0       	breq	.+2      	; 0x1162 <USB_Host_SendControlRequest+0x160>
    1160:	56 c0       	rjmp	.+172    	; 0x120e <USB_Host_SendControlRequest+0x20c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1162:	80 91 a6 00 	lds	r24, 0x00A6
    1166:	8b 77       	andi	r24, 0x7B	; 123
    1168:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    116c:	82 e0       	ldi	r24, 0x02	; 2
    116e:	20 df       	rcall	.-448    	; 0xfb0 <USB_Host_WaitForIOS>
    1170:	98 2f       	mov	r25, r24
    1172:	4d c0       	rjmp	.+154    	; 0x120e <USB_Host_SendControlRequest+0x20c>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    1174:	01 15       	cp	r16, r1
    1176:	11 05       	cpc	r17, r1
    1178:	a9 f1       	breq	.+106    	; 0x11e4 <USB_Host_SendControlRequest+0x1e2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    117a:	80 91 aa 00 	lds	r24, 0x00AA
    117e:	8f 7c       	andi	r24, 0xCF	; 207
    1180:	80 62       	ori	r24, 0x20	; 32
    1182:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1186:	80 91 a9 00 	lds	r24, 0x00A9
    118a:	8f 7b       	andi	r24, 0xBF	; 191
    118c:	80 93 a9 00 	sts	0x00A9, r24
    1190:	1d c0       	rjmp	.+58     	; 0x11cc <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1192:	82 e0       	ldi	r24, 0x02	; 2
    1194:	0d df       	rcall	.-486    	; 0xfb0 <USB_Host_WaitForIOS>
    1196:	98 2f       	mov	r25, r24
    1198:	88 23       	and	r24, r24
    119a:	c9 f5       	brne	.+114    	; 0x120e <USB_Host_SendControlRequest+0x20c>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    119c:	80 91 23 01 	lds	r24, 0x0123
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	07 c0       	rjmp	.+14     	; 0x11b4 <USB_Host_SendControlRequest+0x1b2>
				{
					Pipe_Write_8(*(DataStream++));
    11a6:	f8 01       	movw	r30, r16
    11a8:	81 91       	ld	r24, Z+
    11aa:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    11ac:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    11b0:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    11b2:	39 f0       	breq	.+14     	; 0x11c2 <USB_Host_SendControlRequest+0x1c0>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    11b4:	80 91 f6 00 	lds	r24, 0x00F6
    11b8:	90 91 f7 00 	lds	r25, 0x00F7
    11bc:	82 17       	cp	r24, r18
    11be:	93 07       	cpc	r25, r19
    11c0:	90 f3       	brcs	.-28     	; 0x11a6 <USB_Host_SendControlRequest+0x1a4>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    11c2:	80 91 a6 00 	lds	r24, 0x00A6
    11c6:	8b 77       	andi	r24, 0x7B	; 123
    11c8:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    11cc:	20 97       	sbiw	r28, 0x00	; 0
    11ce:	09 f7       	brne	.-62     	; 0x1192 <USB_Host_SendControlRequest+0x190>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11d0:	82 e0       	ldi	r24, 0x02	; 2
    11d2:	ee de       	rcall	.-548    	; 0xfb0 <USB_Host_WaitForIOS>
    11d4:	98 2f       	mov	r25, r24
    11d6:	88 23       	and	r24, r24
    11d8:	d1 f4       	brne	.+52     	; 0x120e <USB_Host_SendControlRequest+0x20c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11da:	80 91 a9 00 	lds	r24, 0x00A9
    11de:	80 64       	ori	r24, 0x40	; 64
    11e0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11e4:	80 91 aa 00 	lds	r24, 0x00AA
    11e8:	8f 7c       	andi	r24, 0xCF	; 207
    11ea:	80 61       	ori	r24, 0x10	; 16
    11ec:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11f0:	80 91 a9 00 	lds	r24, 0x00A9
    11f4:	8f 7b       	andi	r24, 0xBF	; 191
    11f6:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	d9 de       	rcall	.-590    	; 0xfb0 <USB_Host_WaitForIOS>
    11fe:	98 2f       	mov	r25, r24
    1200:	88 23       	and	r24, r24
    1202:	29 f4       	brne	.+10     	; 0x120e <USB_Host_SendControlRequest+0x20c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1204:	80 91 a6 00 	lds	r24, 0x00A6
    1208:	8e 77       	andi	r24, 0x7E	; 126
    120a:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    120e:	80 91 a9 00 	lds	r24, 0x00A9
    1212:	80 64       	ori	r24, 0x40	; 64
    1214:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    1218:	f0 fc       	sbrc	r15, 0
    121a:	05 c0       	rjmp	.+10     	; 0x1226 <USB_Host_SendControlRequest+0x224>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    121c:	80 91 9e 00 	lds	r24, 0x009E
    1220:	8e 7f       	andi	r24, 0xFE	; 254
    1222:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    122c:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1230:	89 2f       	mov	r24, r25
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	1f 91       	pop	r17
    1238:	0f 91       	pop	r16
    123a:	ff 90       	pop	r15
    123c:	08 95       	ret

0000123e <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    123e:	1f 93       	push	r17
    1240:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1242:	10 92 02 05 	sts	0x0502, r1
    1246:	89 e0       	ldi	r24, 0x09	; 9
    1248:	80 93 03 05 	sts	0x0503, r24
    124c:	10 93 04 05 	sts	0x0504, r17
    1250:	10 92 05 05 	sts	0x0505, r1
    1254:	10 92 07 05 	sts	0x0507, r1
    1258:	10 92 06 05 	sts	0x0506, r1
    125c:	10 92 09 05 	sts	0x0509, r1
    1260:	10 92 08 05 	sts	0x0508, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1264:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	ca de       	rcall	.-620    	; 0x1002 <USB_Host_SendControlRequest>
    126e:	88 23       	and	r24, r24
    1270:	49 f4       	brne	.+18     	; 0x1284 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1272:	10 93 00 05 	sts	0x0500, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1276:	11 23       	and	r17, r17
    1278:	11 f4       	brne	.+4      	; 0x127e <USB_Host_SetDeviceConfiguration+0x40>
    127a:	9a e0       	ldi	r25, 0x0A	; 10
    127c:	01 c0       	rjmp	.+2      	; 0x1280 <USB_Host_SetDeviceConfiguration+0x42>
    127e:	9b e0       	ldi	r25, 0x0B	; 11
    1280:	90 93 0a 05 	sts	0x050A, r25
	}

	return ErrorCode;
}
    1284:	1f 91       	pop	r17
    1286:	08 95       	ret

00001288 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1288:	ff 92       	push	r15
    128a:	0f 93       	push	r16
    128c:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    128e:	07 ea       	ldi	r16, 0xA7	; 167
    1290:	10 e0       	ldi	r17, 0x00	; 0
    1292:	f8 01       	movw	r30, r16
    1294:	f0 80       	ld	r15, Z
    1296:	f7 e0       	ldi	r31, 0x07	; 7
    1298:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    129a:	f8 01       	movw	r30, r16
    129c:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    129e:	93 da       	rcall	.-2778   	; 0x7c6 <USB_Host_ProcessNextHostState>
    12a0:	f8 01       	movw	r30, r16
    12a2:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    12a4:	1f 91       	pop	r17
    12a6:	0f 91       	pop	r16
    12a8:	ff 90       	pop	r15
    12aa:	08 95       	ret

000012ac <USB_GetHIDReportItemInfo>:
	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
    12ac:	cf 92       	push	r12
    12ae:	df 92       	push	r13
    12b0:	ef 92       	push	r14
    12b2:	ff 92       	push	r15
    12b4:	0f 93       	push	r16
    12b6:	1f 93       	push	r17
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	6c 01       	movw	r12, r24
    12be:	eb 01       	movw	r28, r22
	if (ReportItem == NULL)
		return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
    12c0:	28 85       	ldd	r18, Y+8	; 0x08
	uint16_t CurrentBit   = ReportItem->BitOffset;
    12c2:	e8 80       	ld	r14, Y
    12c4:	f9 80       	ldd	r15, Y+1	; 0x01
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
    12c6:	9d 81       	ldd	r25, Y+5	; 0x05
    12c8:	99 23       	and	r25, r25
    12ca:	49 f0       	breq	.+18     	; 0x12de <USB_GetHIDReportItemInfo+0x32>
	{
		if (ReportItem->ReportID != ReportData[0])
    12cc:	f6 01       	movw	r30, r12
    12ce:	80 81       	ld	r24, Z
    12d0:	98 17       	cp	r25, r24
    12d2:	11 f0       	breq	.+4      	; 0x12d8 <USB_GetHIDReportItemInfo+0x2c>
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	43 c0       	rjmp	.+134    	; 0x135e <USB_GetHIDReportItemInfo+0xb2>
		  return false;

		ReportData++;
    12d8:	08 94       	sec
    12da:	c1 1c       	adc	r12, r1
    12dc:	d1 1c       	adc	r13, r1
                              HID_ReportItem_t* const ReportItem)
{
	if (ReportItem == NULL)
		return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
    12de:	02 2f       	mov	r16, r18
    12e0:	10 e0       	ldi	r17, 0x00	; 0
		  return false;

		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
    12e2:	8a a1       	ldd	r24, Y+34	; 0x22
    12e4:	9b a1       	ldd	r25, Y+35	; 0x23
    12e6:	ac a1       	ldd	r26, Y+36	; 0x24
    12e8:	bd a1       	ldd	r27, Y+37	; 0x25
    12ea:	8e a3       	std	Y+38, r24	; 0x26
    12ec:	9f a3       	std	Y+39, r25	; 0x27
    12ee:	a8 a7       	std	Y+40, r26	; 0x28
    12f0:	b9 a7       	std	Y+41, r27	; 0x29
	ReportItem->Value = 0;
    12f2:	1a a2       	std	Y+34, r1	; 0x22
    12f4:	1b a2       	std	Y+35, r1	; 0x23
    12f6:	1c a2       	std	Y+36, r1	; 0x24
    12f8:	1d a2       	std	Y+37, r1	; 0x25
    12fa:	41 e0       	ldi	r20, 0x01	; 1
    12fc:	50 e0       	ldi	r21, 0x00	; 0
    12fe:	60 e0       	ldi	r22, 0x00	; 0
    1300:	70 e0       	ldi	r23, 0x00	; 0
    1302:	29 c0       	rjmp	.+82     	; 0x1356 <USB_GetHIDReportItemInfo+0xaa>

	while (DataBitsRem--)
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
    1304:	f7 01       	movw	r30, r14
    1306:	93 e0       	ldi	r25, 0x03	; 3
    1308:	f6 95       	lsr	r31
    130a:	e7 95       	ror	r30
    130c:	9a 95       	dec	r25
    130e:	e1 f7       	brne	.-8      	; 0x1308 <USB_GetHIDReportItemInfo+0x5c>
    1310:	ec 0d       	add	r30, r12
    1312:	fd 1d       	adc	r31, r13
    1314:	80 81       	ld	r24, Z
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	97 01       	movw	r18, r14
    131a:	27 70       	andi	r18, 0x07	; 7
    131c:	30 70       	andi	r19, 0x00	; 0
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <USB_GetHIDReportItemInfo+0x78>
    1320:	95 95       	asr	r25
    1322:	87 95       	ror	r24
    1324:	2a 95       	dec	r18
    1326:	e2 f7       	brpl	.-8      	; 0x1320 <USB_GetHIDReportItemInfo+0x74>
    1328:	80 ff       	sbrs	r24, 0
    132a:	0c c0       	rjmp	.+24     	; 0x1344 <USB_GetHIDReportItemInfo+0x98>
		  ReportItem->Value |= BitMask;
    132c:	8a a1       	ldd	r24, Y+34	; 0x22
    132e:	9b a1       	ldd	r25, Y+35	; 0x23
    1330:	ac a1       	ldd	r26, Y+36	; 0x24
    1332:	bd a1       	ldd	r27, Y+37	; 0x25
    1334:	84 2b       	or	r24, r20
    1336:	95 2b       	or	r25, r21
    1338:	a6 2b       	or	r26, r22
    133a:	b7 2b       	or	r27, r23
    133c:	8a a3       	std	Y+34, r24	; 0x22
    133e:	9b a3       	std	Y+35, r25	; 0x23
    1340:	ac a3       	std	Y+36, r26	; 0x24
    1342:	bd a3       	std	Y+37, r27	; 0x25

		CurrentBit++;
    1344:	08 94       	sec
    1346:	e1 1c       	adc	r14, r1
    1348:	f1 1c       	adc	r15, r1
		BitMask <<= 1;
    134a:	44 0f       	add	r20, r20
    134c:	55 1f       	adc	r21, r21
    134e:	66 1f       	adc	r22, r22
    1350:	77 1f       	adc	r23, r23
    1352:	01 50       	subi	r16, 0x01	; 1
    1354:	10 40       	sbci	r17, 0x00	; 0
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
    1356:	01 15       	cp	r16, r1
    1358:	11 05       	cpc	r17, r1
    135a:	a1 f6       	brne	.-88     	; 0x1304 <USB_GetHIDReportItemInfo+0x58>
    135c:	81 e0       	ldi	r24, 0x01	; 1
		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
}
    135e:	df 91       	pop	r29
    1360:	cf 91       	pop	r28
    1362:	1f 91       	pop	r17
    1364:	0f 91       	pop	r16
    1366:	ff 90       	pop	r15
    1368:	ef 90       	pop	r14
    136a:	df 90       	pop	r13
    136c:	cf 90       	pop	r12
    136e:	08 95       	ret

00001370 <USB_GetHIDReportSize>:
}

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
    1370:	e4 2f       	mov	r30, r20
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	ee 0f       	add	r30, r30
    1376:	ff 1f       	adc	r31, r31
    1378:	ef 56       	subi	r30, 0x6F	; 111
    137a:	fc 4f       	sbci	r31, 0xFC	; 252
    137c:	e8 0f       	add	r30, r24
    137e:	f9 1f       	adc	r31, r25
    1380:	dc 01       	movw	r26, r24
    1382:	a0 57       	subi	r26, 0x70	; 112
    1384:	bc 4f       	sbci	r27, 0xFC	; 252
    1386:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
    1388:	20 81       	ld	r18, Z
    138a:	31 81       	ldd	r19, Z+1	; 0x01

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
    138c:	8c 91       	ld	r24, X
    138e:	86 17       	cp	r24, r22
    1390:	89 f4       	brne	.+34     	; 0x13b4 <USB_GetHIDReportSize+0x44>
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
    1392:	40 e0       	ldi	r20, 0x00	; 0
    1394:	50 e0       	ldi	r21, 0x00	; 0
    1396:	c9 01       	movw	r24, r18
    1398:	87 70       	andi	r24, 0x07	; 7
    139a:	90 70       	andi	r25, 0x00	; 0
    139c:	89 2b       	or	r24, r25
    139e:	11 f0       	breq	.+4      	; 0x13a4 <USB_GetHIDReportSize+0x34>
    13a0:	41 e0       	ldi	r20, 0x01	; 1
    13a2:	50 e0       	ldi	r21, 0x00	; 0
    13a4:	63 e0       	ldi	r22, 0x03	; 3
    13a6:	36 95       	lsr	r19
    13a8:	27 95       	ror	r18
    13aa:	6a 95       	dec	r22
    13ac:	e1 f7       	brne	.-8      	; 0x13a6 <USB_GetHIDReportSize+0x36>
    13ae:	24 0f       	add	r18, r20
    13b0:	35 1f       	adc	r19, r21
    13b2:	07 c0       	rjmp	.+14     	; 0x13c2 <USB_GetHIDReportSize+0x52>

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
    13b4:	9f 5f       	subi	r25, 0xFF	; 255
    13b6:	37 96       	adiw	r30, 0x07	; 7
    13b8:	17 96       	adiw	r26, 0x07	; 7
    13ba:	9a 30       	cpi	r25, 0x0A	; 10
    13bc:	29 f7       	brne	.-54     	; 0x1388 <USB_GetHIDReportSize+0x18>
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
}
    13c2:	c9 01       	movw	r24, r18
    13c4:	08 95       	ret

000013c6 <USB_ProcessHIDReport>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
    13c6:	2f 92       	push	r2
    13c8:	3f 92       	push	r3
    13ca:	4f 92       	push	r4
    13cc:	5f 92       	push	r5
    13ce:	6f 92       	push	r6
    13d0:	7f 92       	push	r7
    13d2:	8f 92       	push	r8
    13d4:	9f 92       	push	r9
    13d6:	af 92       	push	r10
    13d8:	bf 92       	push	r11
    13da:	cf 92       	push	r12
    13dc:	df 92       	push	r13
    13de:	ef 92       	push	r14
    13e0:	ff 92       	push	r15
    13e2:	0f 93       	push	r16
    13e4:	1f 93       	push	r17
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    13ee:	c5 59       	subi	r28, 0x95	; 149
    13f0:	d0 40       	sbci	r29, 0x00	; 0
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	f8 94       	cli
    13f6:	de bf       	out	0x3e, r29	; 62
    13f8:	0f be       	out	0x3f, r0	; 63
    13fa:	cd bf       	out	0x3d, r28	; 61
    13fc:	cf 57       	subi	r28, 0x7F	; 127
    13fe:	df 4f       	sbci	r29, 0xFF	; 255
    1400:	99 83       	std	Y+1, r25	; 0x01
    1402:	88 83       	st	Y, r24
    1404:	c1 58       	subi	r28, 0x81	; 129
    1406:	d0 40       	sbci	r29, 0x00	; 0
    1408:	cd 57       	subi	r28, 0x7D	; 125
    140a:	df 4f       	sbci	r29, 0xFF	; 255
    140c:	79 83       	std	Y+1, r23	; 0x01
    140e:	68 83       	st	Y, r22
    1410:	c3 58       	subi	r28, 0x83	; 131
    1412:	d0 40       	sbci	r29, 0x00	; 0
    1414:	1a 01       	movw	r2, r20
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
    1416:	90 e9       	ldi	r25, 0x90	; 144
    1418:	49 2e       	mov	r4, r25
    141a:	93 e0       	ldi	r25, 0x03	; 3
    141c:	59 2e       	mov	r5, r25
    141e:	44 0e       	add	r4, r20
    1420:	55 1e       	adc	r5, r21
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
    1422:	89 ed       	ldi	r24, 0xD9	; 217
    1424:	93 e0       	ldi	r25, 0x03	; 3
    1426:	da 01       	movw	r26, r20
    1428:	fc 01       	movw	r30, r24
    142a:	1d 92       	st	X+, r1
    142c:	31 97       	sbiw	r30, 0x01	; 1
    142e:	e9 f7       	brne	.-6      	; 0x142a <USB_ProcessHIDReport+0x64>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
    1430:	fe 01       	movw	r30, r28
    1432:	fb 96       	adiw	r30, 0x3b	; 59
    1434:	8c e1       	ldi	r24, 0x1C	; 28
    1436:	df 01       	movw	r26, r30
    1438:	1d 92       	st	X+, r1
    143a:	8a 95       	dec	r24
    143c:	e9 f7       	brne	.-6      	; 0x1438 <USB_ProcessHIDReport+0x72>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
    143e:	87 e0       	ldi	r24, 0x07	; 7
    1440:	d2 01       	movw	r26, r4
    1442:	1d 92       	st	X+, r1
    1444:	8a 95       	dec	r24
    1446:	e9 f7       	brne	.-6      	; 0x1442 <USB_ProcessHIDReport+0x7c>

	ParserData->TotalDeviceReports = 1;
    1448:	da 01       	movw	r26, r20
    144a:	a1 57       	subi	r26, 0x71	; 113
    144c:	bc 4f       	sbci	r27, 0xFC	; 252
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	8c 93       	st	X, r24
				UsageMinMax.Maximum = ReportItemData;
				break;
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
    1452:	9a 01       	movw	r18, r20
    1454:	27 5b       	subi	r18, 0xB7	; 183
    1456:	3c 4f       	sbci	r19, 0xFC	; 252
    1458:	e7 96       	adiw	r28, 0x37	; 55
    145a:	3f af       	std	Y+63, r19	; 0x3f
    145c:	2e af       	std	Y+62, r18	; 0x3e
    145e:	e7 97       	sbiw	r28, 0x37	; 55
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
    1460:	40 5b       	subi	r20, 0xB0	; 176
    1462:	5c 4f       	sbci	r21, 0xFC	; 252
    1464:	e5 96       	adiw	r28, 0x35	; 53
    1466:	5f af       	std	Y+63, r21	; 0x3f
    1468:	4e af       	std	Y+62, r20	; 0x3e
    146a:	e5 97       	sbiw	r28, 0x35	; 53

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
    146c:	c1 01       	movw	r24, r2
    146e:	88 57       	subi	r24, 0x78	; 120
    1470:	9c 4f       	sbci	r25, 0xFC	; 252
    1472:	ef 96       	adiw	r28, 0x3f	; 63
    1474:	9f af       	std	Y+63, r25	; 0x3f
    1476:	8e af       	std	Y+62, r24	; 0x3e
    1478:	ef 97       	sbiw	r28, 0x3f	; 63
    147a:	6f 01       	movw	r12, r30
    147c:	aa 24       	eor	r10, r10
    147e:	bb 24       	eor	r11, r11
    1480:	ed 96       	adiw	r28, 0x3d	; 61
    1482:	1f ae       	std	Y+63, r1	; 0x3f
    1484:	ed 97       	sbiw	r28, 0x3d	; 61
    1486:	eb 96       	adiw	r28, 0x3b	; 59
    1488:	1c ae       	std	Y+60, r1	; 0x3c
    148a:	1d ae       	std	Y+61, r1	; 0x3d
    148c:	1e ae       	std	Y+62, r1	; 0x3e
    148e:	1f ae       	std	Y+63, r1	; 0x3f
    1490:	eb 97       	sbiw	r28, 0x3b	; 59
    1492:	66 24       	eor	r6, r6
    1494:	77 24       	eor	r7, r7
    1496:	43 01       	movw	r8, r6

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					if (ParserData->LargestReportSizeBits < NewReportItem.BitOffset)
    1498:	f1 01       	movw	r30, r2
    149a:	ea 52       	subi	r30, 0x2A	; 42
    149c:	fc 4f       	sbci	r31, 0xFC	; 252
    149e:	c6 57       	subi	r28, 0x76	; 118
    14a0:	df 4f       	sbci	r29, 0xFF	; 255
    14a2:	f9 83       	std	Y+1, r31	; 0x01
    14a4:	e8 83       	st	Y, r30
    14a6:	ca 58       	subi	r28, 0x8A	; 138
    14a8:	d0 40       	sbci	r29, 0x00	; 0
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
    14aa:	cc 56       	subi	r28, 0x6C	; 108
    14ac:	df 4f       	sbci	r29, 0xFF	; 255
    14ae:	d9 82       	std	Y+1, r13	; 0x01
    14b0:	c8 82       	st	Y, r12
    14b2:	c4 59       	subi	r28, 0x94	; 148
    14b4:	d0 40       	sbci	r29, 0x00	; 0
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
    14b6:	96 01       	movw	r18, r12
    14b8:	24 5e       	subi	r18, 0xE4	; 228
    14ba:	3f 4f       	sbci	r19, 0xFF	; 255
    14bc:	c4 57       	subi	r28, 0x74	; 116
    14be:	df 4f       	sbci	r29, 0xFF	; 255
    14c0:	39 83       	std	Y+1, r19	; 0x01
    14c2:	28 83       	st	Y, r18
    14c4:	cc 58       	subi	r28, 0x8C	; 140
    14c6:	d0 40       	sbci	r29, 0x00	; 0
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
    14c8:	a1 01       	movw	r20, r2
    14ca:	48 52       	subi	r20, 0x28	; 40
    14cc:	5c 4f       	sbci	r21, 0xFC	; 252
    14ce:	c2 57       	subi	r28, 0x72	; 114
    14d0:	df 4f       	sbci	r29, 0xFF	; 255
    14d2:	59 83       	std	Y+1, r21	; 0x01
    14d4:	48 83       	st	Y, r20
    14d6:	ce 58       	subi	r28, 0x8E	; 142
    14d8:	d0 40       	sbci	r29, 0x00	; 0
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    14da:	c0 57       	subi	r28, 0x70	; 112
    14dc:	df 4f       	sbci	r29, 0xFF	; 255
    14de:	b9 83       	std	Y+1, r27	; 0x01
    14e0:	a8 83       	st	Y, r26
    14e2:	c0 59       	subi	r28, 0x90	; 144
    14e4:	d0 40       	sbci	r29, 0x00	; 0
    14e6:	c2 01       	movw	r24, r4
    14e8:	ce 56       	subi	r28, 0x6E	; 110
    14ea:	df 4f       	sbci	r29, 0xFF	; 255
    14ec:	48 82       	st	Y, r4
    14ee:	c2 59       	subi	r28, 0x92	; 146
    14f0:	d0 40       	sbci	r29, 0x00	; 0
    14f2:	cd 56       	subi	r28, 0x6D	; 109
    14f4:	df 4f       	sbci	r29, 0xFF	; 255
    14f6:	98 83       	st	Y, r25
    14f8:	c3 59       	subi	r28, 0x93	; 147
    14fa:	d0 40       	sbci	r29, 0x00	; 0
    14fc:	32 c3       	rjmp	.+1636   	; 0x1b62 <USB_ProcessHIDReport+0x79c>

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
    14fe:	cf 57       	subi	r28, 0x7F	; 127
    1500:	df 4f       	sbci	r29, 0xFF	; 255
    1502:	a8 81       	ld	r26, Y
    1504:	b9 81       	ldd	r27, Y+1	; 0x01
    1506:	c1 58       	subi	r28, 0x81	; 129
    1508:	d0 40       	sbci	r29, 0x00	; 0
    150a:	4d 91       	ld	r20, X+
    150c:	cf 57       	subi	r28, 0x7F	; 127
    150e:	df 4f       	sbci	r29, 0xFF	; 255
    1510:	b9 83       	std	Y+1, r27	; 0x01
    1512:	a8 83       	st	Y, r26
    1514:	c1 58       	subi	r28, 0x81	; 129
    1516:	d0 40       	sbci	r29, 0x00	; 0
		uint32_t ReportItemData = 0;

		ReportData++;
		ReportSize--;
    1518:	cd 57       	subi	r28, 0x7D	; 125
    151a:	df 4f       	sbci	r29, 0xFF	; 255
    151c:	e8 81       	ld	r30, Y
    151e:	f9 81       	ldd	r31, Y+1	; 0x01
    1520:	c3 58       	subi	r28, 0x83	; 131
    1522:	d0 40       	sbci	r29, 0x00	; 0
    1524:	31 97       	sbiw	r30, 0x01	; 1
    1526:	cd 57       	subi	r28, 0x7D	; 125
    1528:	df 4f       	sbci	r29, 0xFF	; 255
    152a:	f9 83       	std	Y+1, r31	; 0x01
    152c:	e8 83       	st	Y, r30
    152e:	c3 58       	subi	r28, 0x83	; 131
    1530:	d0 40       	sbci	r29, 0x00	; 0

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
    1532:	24 2f       	mov	r18, r20
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	c1 58       	subi	r28, 0x81	; 129
    1538:	df 4f       	sbci	r29, 0xFF	; 255
    153a:	39 83       	std	Y+1, r19	; 0x01
    153c:	28 83       	st	Y, r18
    153e:	cf 57       	subi	r28, 0x7F	; 127
    1540:	d0 40       	sbci	r29, 0x00	; 0
    1542:	23 70       	andi	r18, 0x03	; 3
    1544:	30 70       	andi	r19, 0x00	; 0
    1546:	22 30       	cpi	r18, 0x02	; 2
    1548:	31 05       	cpc	r19, r1
    154a:	11 f1       	breq	.+68     	; 0x1590 <USB_ProcessHIDReport+0x1ca>
    154c:	23 30       	cpi	r18, 0x03	; 3
    154e:	31 05       	cpc	r19, r1
    1550:	39 f0       	breq	.+14     	; 0x1560 <USB_ProcessHIDReport+0x19a>
    1552:	21 30       	cpi	r18, 0x01	; 1
    1554:	31 05       	cpc	r19, r1
    1556:	a9 f1       	breq	.+106    	; 0x15c2 <USB_ProcessHIDReport+0x1fc>
    1558:	ee 24       	eor	r14, r14
    155a:	ff 24       	eor	r15, r15
    155c:	87 01       	movw	r16, r14
    155e:	4f c0       	rjmp	.+158    	; 0x15fe <USB_ProcessHIDReport+0x238>
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = le32_to_cpu(*((uint32_t*)ReportData));
    1560:	cf 57       	subi	r28, 0x7F	; 127
    1562:	df 4f       	sbci	r29, 0xFF	; 255
    1564:	a8 81       	ld	r26, Y
    1566:	b9 81       	ldd	r27, Y+1	; 0x01
    1568:	c1 58       	subi	r28, 0x81	; 129
    156a:	d0 40       	sbci	r29, 0x00	; 0
    156c:	ed 90       	ld	r14, X+
    156e:	fd 90       	ld	r15, X+
    1570:	0d 91       	ld	r16, X+
    1572:	1d 91       	ld	r17, X+
    1574:	cf 57       	subi	r28, 0x7F	; 127
    1576:	df 4f       	sbci	r29, 0xFF	; 255
    1578:	b9 83       	std	Y+1, r27	; 0x01
    157a:	a8 83       	st	Y, r26
    157c:	c1 58       	subi	r28, 0x81	; 129
    157e:	d0 40       	sbci	r29, 0x00	; 0
				ReportSize     -= 4;
    1580:	cd 57       	subi	r28, 0x7D	; 125
    1582:	df 4f       	sbci	r29, 0xFF	; 255
    1584:	e8 81       	ld	r30, Y
    1586:	f9 81       	ldd	r31, Y+1	; 0x01
    1588:	c3 58       	subi	r28, 0x83	; 131
    158a:	d0 40       	sbci	r29, 0x00	; 0
    158c:	34 97       	sbiw	r30, 0x04	; 4
    158e:	31 c0       	rjmp	.+98     	; 0x15f2 <USB_ProcessHIDReport+0x22c>
				ReportData     += 4;
				break;
			case HID_RI_DATA_BITS_16:
				ReportItemData  = le16_to_cpu(*((uint16_t*)ReportData));
    1590:	cf 57       	subi	r28, 0x7F	; 127
    1592:	df 4f       	sbci	r29, 0xFF	; 255
    1594:	a8 81       	ld	r26, Y
    1596:	b9 81       	ldd	r27, Y+1	; 0x01
    1598:	c1 58       	subi	r28, 0x81	; 129
    159a:	d0 40       	sbci	r29, 0x00	; 0
    159c:	8d 91       	ld	r24, X+
    159e:	9d 91       	ld	r25, X+
    15a0:	cf 57       	subi	r28, 0x7F	; 127
    15a2:	df 4f       	sbci	r29, 0xFF	; 255
    15a4:	b9 83       	std	Y+1, r27	; 0x01
    15a6:	a8 83       	st	Y, r26
    15a8:	c1 58       	subi	r28, 0x81	; 129
    15aa:	d0 40       	sbci	r29, 0x00	; 0
    15ac:	7c 01       	movw	r14, r24
    15ae:	00 e0       	ldi	r16, 0x00	; 0
    15b0:	10 e0       	ldi	r17, 0x00	; 0
				ReportSize     -= 2;
    15b2:	cd 57       	subi	r28, 0x7D	; 125
    15b4:	df 4f       	sbci	r29, 0xFF	; 255
    15b6:	e8 81       	ld	r30, Y
    15b8:	f9 81       	ldd	r31, Y+1	; 0x01
    15ba:	c3 58       	subi	r28, 0x83	; 131
    15bc:	d0 40       	sbci	r29, 0x00	; 0
    15be:	32 97       	sbiw	r30, 0x02	; 2
    15c0:	18 c0       	rjmp	.+48     	; 0x15f2 <USB_ProcessHIDReport+0x22c>
				ReportData     += 2;
				break;
			case HID_RI_DATA_BITS_8:
				ReportItemData  = *((uint8_t*)ReportData);
    15c2:	cf 57       	subi	r28, 0x7F	; 127
    15c4:	df 4f       	sbci	r29, 0xFF	; 255
    15c6:	a8 81       	ld	r26, Y
    15c8:	b9 81       	ldd	r27, Y+1	; 0x01
    15ca:	c1 58       	subi	r28, 0x81	; 129
    15cc:	d0 40       	sbci	r29, 0x00	; 0
    15ce:	8d 91       	ld	r24, X+
    15d0:	cf 57       	subi	r28, 0x7F	; 127
    15d2:	df 4f       	sbci	r29, 0xFF	; 255
    15d4:	b9 83       	std	Y+1, r27	; 0x01
    15d6:	a8 83       	st	Y, r26
    15d8:	c1 58       	subi	r28, 0x81	; 129
    15da:	d0 40       	sbci	r29, 0x00	; 0
    15dc:	e8 2e       	mov	r14, r24
    15de:	ff 24       	eor	r15, r15
    15e0:	00 e0       	ldi	r16, 0x00	; 0
    15e2:	10 e0       	ldi	r17, 0x00	; 0
				ReportSize     -= 1;
    15e4:	cd 57       	subi	r28, 0x7D	; 125
    15e6:	df 4f       	sbci	r29, 0xFF	; 255
    15e8:	e8 81       	ld	r30, Y
    15ea:	f9 81       	ldd	r31, Y+1	; 0x01
    15ec:	c3 58       	subi	r28, 0x83	; 131
    15ee:	d0 40       	sbci	r29, 0x00	; 0
    15f0:	31 97       	sbiw	r30, 0x01	; 1
    15f2:	cd 57       	subi	r28, 0x7D	; 125
    15f4:	df 4f       	sbci	r29, 0xFF	; 255
    15f6:	f9 83       	std	Y+1, r31	; 0x01
    15f8:	e8 83       	st	Y, r30
    15fa:	c3 58       	subi	r28, 0x83	; 131
    15fc:	d0 40       	sbci	r29, 0x00	; 0
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
    15fe:	c1 58       	subi	r28, 0x81	; 129
    1600:	df 4f       	sbci	r29, 0xFF	; 255
    1602:	88 81       	ld	r24, Y
    1604:	99 81       	ldd	r25, Y+1	; 0x01
    1606:	cf 57       	subi	r28, 0x7F	; 127
    1608:	d0 40       	sbci	r29, 0x00	; 0
    160a:	8c 7f       	andi	r24, 0xFC	; 252
    160c:	90 70       	andi	r25, 0x00	; 0
    160e:	84 36       	cpi	r24, 0x64	; 100
    1610:	91 05       	cpc	r25, r1
    1612:	09 f4       	brne	.+2      	; 0x1616 <USB_ProcessHIDReport+0x250>
    1614:	db c0       	rjmp	.+438    	; 0x17cc <USB_ProcessHIDReport+0x406>
    1616:	85 36       	cpi	r24, 0x65	; 101
    1618:	91 05       	cpc	r25, r1
    161a:	74 f5       	brge	.+92     	; 0x1678 <USB_ProcessHIDReport+0x2b2>
    161c:	84 32       	cpi	r24, 0x24	; 36
    161e:	91 05       	cpc	r25, r1
    1620:	09 f4       	brne	.+2      	; 0x1624 <USB_ProcessHIDReport+0x25e>
    1622:	bb c0       	rjmp	.+374    	; 0x179a <USB_ProcessHIDReport+0x3d4>
    1624:	85 32       	cpi	r24, 0x25	; 37
    1626:	91 05       	cpc	r25, r1
    1628:	9c f4       	brge	.+38     	; 0x1650 <USB_ProcessHIDReport+0x28a>
    162a:	88 30       	cpi	r24, 0x08	; 8
    162c:	91 05       	cpc	r25, r1
    162e:	09 f4       	brne	.+2      	; 0x1632 <USB_ProcessHIDReport+0x26c>
    1630:	37 c1       	rjmp	.+622    	; 0x18a0 <USB_ProcessHIDReport+0x4da>
    1632:	89 30       	cpi	r24, 0x09	; 9
    1634:	91 05       	cpc	r25, r1
    1636:	24 f4       	brge	.+8      	; 0x1640 <USB_ProcessHIDReport+0x27a>
    1638:	04 97       	sbiw	r24, 0x04	; 4
    163a:	09 f0       	breq	.+2      	; 0x163e <USB_ProcessHIDReport+0x278>
    163c:	7a c2       	rjmp	.+1268   	; 0x1b32 <USB_ProcessHIDReport+0x76c>
    163e:	98 c0       	rjmp	.+304    	; 0x1770 <USB_ProcessHIDReport+0x3aa>
    1640:	84 31       	cpi	r24, 0x14	; 20
    1642:	91 05       	cpc	r25, r1
    1644:	09 f4       	brne	.+2      	; 0x1648 <USB_ProcessHIDReport+0x282>
    1646:	a3 c0       	rjmp	.+326    	; 0x178e <USB_ProcessHIDReport+0x3c8>
    1648:	48 97       	sbiw	r24, 0x18	; 24
    164a:	09 f0       	breq	.+2      	; 0x164e <USB_ProcessHIDReport+0x288>
    164c:	72 c2       	rjmp	.+1252   	; 0x1b32 <USB_ProcessHIDReport+0x76c>
    164e:	47 c0       	rjmp	.+142    	; 0x16de <USB_ProcessHIDReport+0x318>
    1650:	84 33       	cpi	r24, 0x34	; 52
    1652:	91 05       	cpc	r25, r1
    1654:	09 f4       	brne	.+2      	; 0x1658 <USB_ProcessHIDReport+0x292>
    1656:	a9 c0       	rjmp	.+338    	; 0x17aa <USB_ProcessHIDReport+0x3e4>
    1658:	85 33       	cpi	r24, 0x35	; 53
    165a:	91 05       	cpc	r25, r1
    165c:	24 f4       	brge	.+8      	; 0x1666 <USB_ProcessHIDReport+0x2a0>
    165e:	88 97       	sbiw	r24, 0x28	; 40
    1660:	09 f0       	breq	.+2      	; 0x1664 <USB_ProcessHIDReport+0x29e>
    1662:	67 c2       	rjmp	.+1230   	; 0x1b32 <USB_ProcessHIDReport+0x76c>
    1664:	38 c1       	rjmp	.+624    	; 0x18d6 <USB_ProcessHIDReport+0x510>
    1666:	84 34       	cpi	r24, 0x44	; 68
    1668:	91 05       	cpc	r25, r1
    166a:	09 f4       	brne	.+2      	; 0x166e <USB_ProcessHIDReport+0x2a8>
    166c:	a4 c0       	rjmp	.+328    	; 0x17b6 <USB_ProcessHIDReport+0x3f0>
    166e:	84 35       	cpi	r24, 0x54	; 84
    1670:	91 05       	cpc	r25, r1
    1672:	09 f0       	breq	.+2      	; 0x1676 <USB_ProcessHIDReport+0x2b0>
    1674:	5e c2       	rjmp	.+1212   	; 0x1b32 <USB_ProcessHIDReport+0x76c>
    1676:	a7 c0       	rjmp	.+334    	; 0x17c6 <USB_ProcessHIDReport+0x400>
    1678:	84 39       	cpi	r24, 0x94	; 148
    167a:	91 05       	cpc	r25, r1
    167c:	09 f4       	brne	.+2      	; 0x1680 <USB_ProcessHIDReport+0x2ba>
    167e:	b1 c0       	rjmp	.+354    	; 0x17e2 <USB_ProcessHIDReport+0x41c>
    1680:	85 39       	cpi	r24, 0x95	; 149
    1682:	91 05       	cpc	r25, r1
    1684:	a4 f4       	brge	.+40     	; 0x16ae <USB_ProcessHIDReport+0x2e8>
    1686:	80 38       	cpi	r24, 0x80	; 128
    1688:	91 05       	cpc	r25, r1
    168a:	69 f1       	breq	.+90     	; 0x16e6 <USB_ProcessHIDReport+0x320>
    168c:	81 38       	cpi	r24, 0x81	; 129
    168e:	91 05       	cpc	r25, r1
    1690:	2c f4       	brge	.+10     	; 0x169c <USB_ProcessHIDReport+0x2d6>
    1692:	84 37       	cpi	r24, 0x74	; 116
    1694:	91 05       	cpc	r25, r1
    1696:	09 f0       	breq	.+2      	; 0x169a <USB_ProcessHIDReport+0x2d4>
    1698:	4c c2       	rjmp	.+1176   	; 0x1b32 <USB_ProcessHIDReport+0x76c>
    169a:	a0 c0       	rjmp	.+320    	; 0x17dc <USB_ProcessHIDReport+0x416>
    169c:	84 38       	cpi	r24, 0x84	; 132
    169e:	91 05       	cpc	r25, r1
    16a0:	09 f4       	brne	.+2      	; 0x16a4 <USB_ProcessHIDReport+0x2de>
    16a2:	a3 c0       	rjmp	.+326    	; 0x17ea <USB_ProcessHIDReport+0x424>
    16a4:	80 39       	cpi	r24, 0x90	; 144
    16a6:	91 05       	cpc	r25, r1
    16a8:	09 f0       	breq	.+2      	; 0x16ac <USB_ProcessHIDReport+0x2e6>
    16aa:	43 c2       	rjmp	.+1158   	; 0x1b32 <USB_ProcessHIDReport+0x76c>
    16ac:	1c c0       	rjmp	.+56     	; 0x16e6 <USB_ProcessHIDReport+0x320>
    16ae:	80 3b       	cpi	r24, 0xB0	; 176
    16b0:	91 05       	cpc	r25, r1
    16b2:	c9 f0       	breq	.+50     	; 0x16e6 <USB_ProcessHIDReport+0x320>
    16b4:	81 3b       	cpi	r24, 0xB1	; 177
    16b6:	91 05       	cpc	r25, r1
    16b8:	4c f4       	brge	.+18     	; 0x16cc <USB_ProcessHIDReport+0x306>
    16ba:	80 3a       	cpi	r24, 0xA0	; 160
    16bc:	91 05       	cpc	r25, r1
    16be:	09 f4       	brne	.+2      	; 0x16c2 <USB_ProcessHIDReport+0x2fc>
    16c0:	12 c1       	rjmp	.+548    	; 0x18e6 <USB_ProcessHIDReport+0x520>
    16c2:	84 3a       	cpi	r24, 0xA4	; 164
    16c4:	91 05       	cpc	r25, r1
    16c6:	09 f0       	breq	.+2      	; 0x16ca <USB_ProcessHIDReport+0x304>
    16c8:	34 c2       	rjmp	.+1128   	; 0x1b32 <USB_ProcessHIDReport+0x76c>
    16ca:	2a c0       	rjmp	.+84     	; 0x1720 <USB_ProcessHIDReport+0x35a>
    16cc:	84 3b       	cpi	r24, 0xB4	; 180
    16ce:	91 05       	cpc	r25, r1
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <USB_ProcessHIDReport+0x30e>
    16d2:	3e c0       	rjmp	.+124    	; 0x1750 <USB_ProcessHIDReport+0x38a>
    16d4:	80 3c       	cpi	r24, 0xC0	; 192
    16d6:	91 05       	cpc	r25, r1
    16d8:	09 f0       	breq	.+2      	; 0x16dc <USB_ProcessHIDReport+0x316>
    16da:	2b c2       	rjmp	.+1110   	; 0x1b32 <USB_ProcessHIDReport+0x76c>
    16dc:	63 c1       	rjmp	.+710    	; 0x19a4 <USB_ProcessHIDReport+0x5de>
    16de:	f5 01       	movw	r30, r10
    16e0:	37 01       	movw	r6, r14
    16e2:	48 01       	movw	r8, r16
    16e4:	27 c2       	rjmp	.+1102   	; 0x1b34 <USB_ProcessHIDReport+0x76e>
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
    16e6:	cb 57       	subi	r28, 0x7B	; 123
    16e8:	df 4f       	sbci	r29, 0xFF	; 255
    16ea:	c8 82       	st	Y, r12
    16ec:	c5 58       	subi	r28, 0x85	; 133
    16ee:	d0 40       	sbci	r29, 0x00	; 0
    16f0:	ca 57       	subi	r28, 0x7A	; 122
    16f2:	df 4f       	sbci	r29, 0xFF	; 255
    16f4:	d8 82       	st	Y, r13
    16f6:	c6 58       	subi	r28, 0x86	; 134
    16f8:	d0 40       	sbci	r29, 0x00	; 0
    16fa:	ec 96       	adiw	r28, 0x3c	; 60
    16fc:	1f ae       	std	Y+63, r1	; 0x3f
    16fe:	ec 97       	sbiw	r28, 0x3c	; 60
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));
    1700:	4c 7f       	andi	r20, 0xFC	; 252
    1702:	c9 57       	subi	r28, 0x79	; 121
    1704:	df 4f       	sbci	r29, 0xFF	; 255
    1706:	48 83       	st	Y, r20
    1708:	c7 58       	subi	r28, 0x87	; 135
    170a:	d0 40       	sbci	r29, 0x00	; 0
					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					if (ParserData->LargestReportSizeBits < NewReportItem.BitOffset)
					  ParserData->LargestReportSizeBits = NewReportItem.BitOffset;

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    170c:	97 01       	movw	r18, r14
    170e:	21 70       	andi	r18, 0x01	; 1
    1710:	30 70       	andi	r19, 0x00	; 0
    1712:	c8 57       	subi	r28, 0x78	; 120
    1714:	df 4f       	sbci	r29, 0xFF	; 255
    1716:	39 83       	std	Y+1, r19	; 0x01
    1718:	28 83       	st	Y, r18
    171a:	c8 58       	subi	r28, 0x88	; 136
    171c:	d0 40       	sbci	r29, 0x00	; 0
    171e:	00 c2       	rjmp	.+1024   	; 0x1b20 <USB_ProcessHIDReport+0x75a>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
    1720:	c4 57       	subi	r28, 0x74	; 116
    1722:	df 4f       	sbci	r29, 0xFF	; 255
    1724:	48 81       	ld	r20, Y
    1726:	59 81       	ldd	r21, Y+1	; 0x01
    1728:	cc 58       	subi	r28, 0x8C	; 140
    172a:	d0 40       	sbci	r29, 0x00	; 0
    172c:	c4 16       	cp	r12, r20
    172e:	d5 06       	cpc	r13, r21
    1730:	11 f4       	brne	.+4      	; 0x1736 <USB_ProcessHIDReport+0x370>
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	26 c2       	rjmp	.+1100   	; 0x1b82 <USB_ProcessHIDReport+0x7bc>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
    1736:	d6 01       	movw	r26, r12
    1738:	5c 96       	adiw	r26, 0x1c	; 28
    173a:	f6 01       	movw	r30, r12
    173c:	8a e2       	ldi	r24, 0x2A	; 42
    173e:	01 90       	ld	r0, Z+
    1740:	0d 92       	st	X+, r0
    1742:	81 50       	subi	r24, 0x01	; 1
    1744:	e1 f7       	brne	.-8      	; 0x173e <USB_ProcessHIDReport+0x378>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
    1746:	8c e1       	ldi	r24, 0x1C	; 28
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	c8 0e       	add	r12, r24
    174c:	d9 1e       	adc	r13, r25
    174e:	f1 c1       	rjmp	.+994    	; 0x1b32 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
    1750:	cc 56       	subi	r28, 0x6C	; 108
    1752:	df 4f       	sbci	r29, 0xFF	; 255
    1754:	a8 81       	ld	r26, Y
    1756:	b9 81       	ldd	r27, Y+1	; 0x01
    1758:	c4 59       	subi	r28, 0x94	; 148
    175a:	d0 40       	sbci	r29, 0x00	; 0
    175c:	ca 16       	cp	r12, r26
    175e:	db 06       	cpc	r13, r27
    1760:	11 f4       	brne	.+4      	; 0x1766 <USB_ProcessHIDReport+0x3a0>
    1762:	82 e0       	ldi	r24, 0x02	; 2
    1764:	0e c2       	rjmp	.+1052   	; 0x1b82 <USB_ProcessHIDReport+0x7bc>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
    1766:	e4 ee       	ldi	r30, 0xE4	; 228
    1768:	ff ef       	ldi	r31, 0xFF	; 255
    176a:	ce 0e       	add	r12, r30
    176c:	df 1e       	adc	r13, r31
    176e:	e1 c1       	rjmp	.+962    	; 0x1b32 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
    1770:	23 30       	cpi	r18, 0x03	; 3
    1772:	31 05       	cpc	r19, r1
    1774:	31 f4       	brne	.+12     	; 0x1782 <USB_ProcessHIDReport+0x3bc>
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);
    1776:	c8 01       	movw	r24, r16
    1778:	aa 27       	eor	r26, r26
    177a:	bb 27       	eor	r27, r27
    177c:	f6 01       	movw	r30, r12
    177e:	92 83       	std	Z+2, r25	; 0x02
    1780:	81 83       	std	Z+1, r24	; 0x01
				
				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
    1782:	d6 01       	movw	r26, r12
    1784:	12 96       	adiw	r26, 0x02	; 2
    1786:	fc 92       	st	X, r15
    1788:	ee 92       	st	-X, r14
    178a:	11 97       	sbiw	r26, 0x01	; 1
    178c:	d2 c1       	rjmp	.+932    	; 0x1b32 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
    178e:	f6 01       	movw	r30, r12
    1790:	e2 86       	std	Z+10, r14	; 0x0a
    1792:	f3 86       	std	Z+11, r15	; 0x0b
    1794:	04 87       	std	Z+12, r16	; 0x0c
    1796:	15 87       	std	Z+13, r17	; 0x0d
    1798:	cc c1       	rjmp	.+920    	; 0x1b32 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
    179a:	d6 01       	movw	r26, r12
    179c:	1e 96       	adiw	r26, 0x0e	; 14
    179e:	ed 92       	st	X+, r14
    17a0:	fd 92       	st	X+, r15
    17a2:	0d 93       	st	X+, r16
    17a4:	1c 93       	st	X, r17
    17a6:	51 97       	sbiw	r26, 0x11	; 17
    17a8:	c4 c1       	rjmp	.+904    	; 0x1b32 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
    17aa:	f6 01       	movw	r30, r12
    17ac:	e2 8a       	std	Z+18, r14	; 0x12
    17ae:	f3 8a       	std	Z+19, r15	; 0x13
    17b0:	04 8b       	std	Z+20, r16	; 0x14
    17b2:	15 8b       	std	Z+21, r17	; 0x15
    17b4:	be c1       	rjmp	.+892    	; 0x1b32 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
    17b6:	d6 01       	movw	r26, r12
    17b8:	56 96       	adiw	r26, 0x16	; 22
    17ba:	ed 92       	st	X+, r14
    17bc:	fd 92       	st	X+, r15
    17be:	0d 93       	st	X+, r16
    17c0:	1c 93       	st	X, r17
    17c2:	59 97       	sbiw	r26, 0x19	; 25
    17c4:	b6 c1       	rjmp	.+876    	; 0x1b32 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
    17c6:	f6 01       	movw	r30, r12
    17c8:	e1 86       	std	Z+9, r14	; 0x09
    17ca:	b3 c1       	rjmp	.+870    	; 0x1b32 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
    17cc:	d6 01       	movw	r26, r12
    17ce:	15 96       	adiw	r26, 0x05	; 5
    17d0:	ed 92       	st	X+, r14
    17d2:	fd 92       	st	X+, r15
    17d4:	0d 93       	st	X+, r16
    17d6:	1c 93       	st	X, r17
    17d8:	18 97       	sbiw	r26, 0x08	; 8
    17da:	ab c1       	rjmp	.+854    	; 0x1b32 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
    17dc:	f6 01       	movw	r30, r12
    17de:	e0 82       	st	Z, r14
    17e0:	a8 c1       	rjmp	.+848    	; 0x1b32 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
    17e2:	d6 01       	movw	r26, r12
    17e4:	5a 96       	adiw	r26, 0x1a	; 26
    17e6:	ec 92       	st	X, r14
    17e8:	a4 c1       	rjmp	.+840    	; 0x1b32 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
    17ea:	3e 2d       	mov	r19, r14
    17ec:	f6 01       	movw	r30, r12
    17ee:	e3 8e       	std	Z+27, r14	; 0x1b

				if (ParserData->UsingReportIDs)
    17f0:	c2 57       	subi	r28, 0x72	; 114
    17f2:	df 4f       	sbci	r29, 0xFF	; 255
    17f4:	a8 81       	ld	r26, Y
    17f6:	b9 81       	ldd	r27, Y+1	; 0x01
    17f8:	ce 58       	subi	r28, 0x8E	; 142
    17fa:	d0 40       	sbci	r29, 0x00	; 0
    17fc:	8c 91       	ld	r24, X
    17fe:	88 23       	and	r24, r24
    1800:	09 f4       	brne	.+2      	; 0x1804 <USB_ProcessHIDReport+0x43e>
    1802:	40 c0       	rjmp	.+128    	; 0x1884 <USB_ProcessHIDReport+0x4be>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    1804:	c0 57       	subi	r28, 0x70	; 112
    1806:	df 4f       	sbci	r29, 0xFF	; 255
    1808:	e8 81       	ld	r30, Y
    180a:	f9 81       	ldd	r31, Y+1	; 0x01
    180c:	c0 59       	subi	r28, 0x90	; 144
    180e:	d0 40       	sbci	r29, 0x00	; 0
    1810:	20 81       	ld	r18, Z
    1812:	ce 56       	subi	r28, 0x6E	; 110
    1814:	df 4f       	sbci	r29, 0xFF	; 255
    1816:	88 81       	ld	r24, Y
    1818:	c2 59       	subi	r28, 0x92	; 146
    181a:	d0 40       	sbci	r29, 0x00	; 0
    181c:	cd 56       	subi	r28, 0x6D	; 109
    181e:	df 4f       	sbci	r29, 0xFF	; 255
    1820:	98 81       	ld	r25, Y
    1822:	c3 59       	subi	r28, 0x93	; 147
    1824:	d0 40       	sbci	r29, 0x00	; 0
    1826:	dc 01       	movw	r26, r24
    1828:	e0 e0       	ldi	r30, 0x00	; 0
    182a:	10 c0       	rjmp	.+32     	; 0x184c <USB_ProcessHIDReport+0x486>
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
    182c:	8c 91       	ld	r24, X
    182e:	17 96       	adiw	r26, 0x07	; 7
    1830:	83 17       	cp	r24, r19
    1832:	59 f4       	brne	.+22     	; 0x184a <USB_ProcessHIDReport+0x484>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
    1834:	87 e0       	ldi	r24, 0x07	; 7
    1836:	e8 9f       	mul	r30, r24
    1838:	20 01       	movw	r4, r0
    183a:	11 24       	eor	r1, r1
    183c:	20 e9       	ldi	r18, 0x90	; 144
    183e:	33 e0       	ldi	r19, 0x03	; 3
    1840:	42 0e       	add	r4, r18
    1842:	53 1e       	adc	r5, r19
    1844:	42 0c       	add	r4, r2
    1846:	53 1c       	adc	r5, r3
    1848:	1d c0       	rjmp	.+58     	; 0x1884 <USB_ProcessHIDReport+0x4be>

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    184a:	ef 5f       	subi	r30, 0xFF	; 255
    184c:	e2 17       	cp	r30, r18
    184e:	70 f3       	brcs	.-36     	; 0x182c <USB_ProcessHIDReport+0x466>
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
    1850:	2a 30       	cpi	r18, 0x0A	; 10
    1852:	11 f4       	brne	.+4      	; 0x1858 <USB_ProcessHIDReport+0x492>
    1854:	87 e0       	ldi	r24, 0x07	; 7
    1856:	95 c1       	rjmp	.+810    	; 0x1b82 <USB_ProcessHIDReport+0x7bc>
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
    1858:	87 e0       	ldi	r24, 0x07	; 7
    185a:	28 9f       	mul	r18, r24
    185c:	20 01       	movw	r4, r0
    185e:	11 24       	eor	r1, r1
    1860:	40 e9       	ldi	r20, 0x90	; 144
    1862:	53 e0       	ldi	r21, 0x03	; 3
    1864:	44 0e       	add	r4, r20
    1866:	55 1e       	adc	r5, r21
    1868:	42 0c       	add	r4, r2
    186a:	53 1c       	adc	r5, r3
    186c:	2f 5f       	subi	r18, 0xFF	; 255
    186e:	c0 57       	subi	r28, 0x70	; 112
    1870:	df 4f       	sbci	r29, 0xFF	; 255
    1872:	a8 81       	ld	r26, Y
    1874:	b9 81       	ldd	r27, Y+1	; 0x01
    1876:	c0 59       	subi	r28, 0x90	; 144
    1878:	d0 40       	sbci	r29, 0x00	; 0
    187a:	2c 93       	st	X, r18
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
    187c:	f2 01       	movw	r30, r4
    187e:	11 92       	st	Z+, r1
    1880:	8a 95       	dec	r24
    1882:	e9 f7       	brne	.-6      	; 0x187e <USB_ProcessHIDReport+0x4b8>
					}
				}

				ParserData->UsingReportIDs = true;
    1884:	e1 e0       	ldi	r30, 0x01	; 1
    1886:	c2 57       	subi	r28, 0x72	; 114
    1888:	df 4f       	sbci	r29, 0xFF	; 255
    188a:	a8 81       	ld	r26, Y
    188c:	b9 81       	ldd	r27, Y+1	; 0x01
    188e:	ce 58       	subi	r28, 0x8E	; 142
    1890:	d0 40       	sbci	r29, 0x00	; 0
    1892:	ec 93       	st	X, r30

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
    1894:	d6 01       	movw	r26, r12
    1896:	5b 96       	adiw	r26, 0x1b	; 27
    1898:	8c 91       	ld	r24, X
    189a:	f2 01       	movw	r30, r4
    189c:	80 83       	st	Z, r24
    189e:	49 c1       	rjmp	.+658    	; 0x1b32 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
    18a0:	ed 96       	adiw	r28, 0x3d	; 61
    18a2:	ff ad       	ldd	r31, Y+63	; 0x3f
    18a4:	ed 97       	sbiw	r28, 0x3d	; 61
    18a6:	f8 30       	cpi	r31, 0x08	; 8
    18a8:	11 f4       	brne	.+4      	; 0x18ae <USB_ProcessHIDReport+0x4e8>
    18aa:	86 e0       	ldi	r24, 0x06	; 6
    18ac:	6a c1       	rjmp	.+724    	; 0x1b82 <USB_ProcessHIDReport+0x7bc>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
    18ae:	ed 96       	adiw	r28, 0x3d	; 61
    18b0:	2f ad       	ldd	r18, Y+63	; 0x3f
    18b2:	ed 97       	sbiw	r28, 0x3d	; 61
    18b4:	e2 2f       	mov	r30, r18
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	ee 0f       	add	r30, r30
    18ba:	ff 1f       	adc	r31, r31
    18bc:	41 e0       	ldi	r20, 0x01	; 1
    18be:	50 e0       	ldi	r21, 0x00	; 0
    18c0:	4c 0f       	add	r20, r28
    18c2:	5d 1f       	adc	r21, r29
    18c4:	e4 0f       	add	r30, r20
    18c6:	f5 1f       	adc	r31, r21
    18c8:	f1 82       	std	Z+1, r15	; 0x01
    18ca:	e0 82       	st	Z, r14
    18cc:	2f 5f       	subi	r18, 0xFF	; 255
    18ce:	ed 96       	adiw	r28, 0x3d	; 61
    18d0:	2f af       	std	Y+63, r18	; 0x3f
    18d2:	ed 97       	sbiw	r28, 0x3d	; 61
    18d4:	2e c1       	rjmp	.+604    	; 0x1b32 <USB_ProcessHIDReport+0x76c>
				break;
    18d6:	f5 01       	movw	r30, r10
    18d8:	eb 96       	adiw	r28, 0x3b	; 59
    18da:	ec ae       	std	Y+60, r14	; 0x3c
    18dc:	fd ae       	std	Y+61, r15	; 0x3d
    18de:	0e af       	std	Y+62, r16	; 0x3e
    18e0:	1f af       	std	Y+63, r17	; 0x3f
    18e2:	eb 97       	sbiw	r28, 0x3b	; 59
    18e4:	27 c1       	rjmp	.+590    	; 0x1b34 <USB_ProcessHIDReport+0x76e>
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
    18e6:	a1 14       	cp	r10, r1
    18e8:	b1 04       	cpc	r11, r1
    18ea:	29 f4       	brne	.+10     	; 0x18f6 <USB_ProcessHIDReport+0x530>
    18ec:	e7 96       	adiw	r28, 0x37	; 55
    18ee:	ee ad       	ldd	r30, Y+62	; 0x3e
    18f0:	ff ad       	ldd	r31, Y+63	; 0x3f
    18f2:	e7 97       	sbiw	r28, 0x37	; 55
    18f4:	15 c0       	rjmp	.+42     	; 0x1920 <USB_ProcessHIDReport+0x55a>
    18f6:	e5 96       	adiw	r28, 0x35	; 53
    18f8:	ee ad       	ldd	r30, Y+62	; 0x3e
    18fa:	ff ad       	ldd	r31, Y+63	; 0x3f
    18fc:	e5 97       	sbiw	r28, 0x35	; 53
    18fe:	0a c0       	rjmp	.+20     	; 0x1914 <USB_ProcessHIDReport+0x54e>

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
    1900:	ef 96       	adiw	r28, 0x3f	; 63
    1902:	8e ad       	ldd	r24, Y+62	; 0x3e
    1904:	9f ad       	ldd	r25, Y+63	; 0x3f
    1906:	ef 97       	sbiw	r28, 0x3f	; 63
    1908:	e8 17       	cp	r30, r24
    190a:	f9 07       	cpc	r31, r25
    190c:	11 f4       	brne	.+4      	; 0x1912 <USB_ProcessHIDReport+0x54c>
    190e:	85 e0       	ldi	r24, 0x05	; 5
    1910:	38 c1       	rjmp	.+624    	; 0x1b82 <USB_ProcessHIDReport+0x7bc>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
    1912:	37 96       	adiw	r30, 0x07	; 7
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
    1914:	85 81       	ldd	r24, Z+5	; 0x05
    1916:	96 81       	ldd	r25, Z+6	; 0x06
    1918:	89 2b       	or	r24, r25
    191a:	91 f7       	brne	.-28     	; 0x1900 <USB_ProcessHIDReport+0x53a>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
    191c:	b6 82       	std	Z+6, r11	; 0x06
    191e:	a5 82       	std	Z+5, r10	; 0x05
				}

				CurrCollectionPath->Type       = ReportItemData;
    1920:	e0 82       	st	Z, r14
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
    1922:	d6 01       	movw	r26, r12
    1924:	11 96       	adiw	r26, 0x01	; 1
    1926:	8d 91       	ld	r24, X+
    1928:	9c 91       	ld	r25, X
    192a:	12 97       	sbiw	r26, 0x02	; 2
    192c:	92 83       	std	Z+2, r25	; 0x02
    192e:	81 83       	std	Z+1, r24	; 0x01

				if (UsageListSize)
    1930:	ed 96       	adiw	r28, 0x3d	; 61
    1932:	bf ad       	ldd	r27, Y+63	; 0x3f
    1934:	ed 97       	sbiw	r28, 0x3d	; 61
    1936:	bb 23       	and	r27, r27
    1938:	09 f1       	breq	.+66     	; 0x197c <USB_ProcessHIDReport+0x5b6>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	9a 81       	ldd	r25, Y+2	; 0x02
    193e:	94 83       	std	Z+4, r25	; 0x04
    1940:	83 83       	std	Z+3, r24	; 0x03
    1942:	de 01       	movw	r26, r28
    1944:	11 96       	adiw	r26, 0x01	; 1

					for (uint8_t i = 0; i < UsageListSize; i++)
    1946:	ed 96       	adiw	r28, 0x3d	; 61
    1948:	4f ad       	ldd	r20, Y+63	; 0x3f
    194a:	ed 97       	sbiw	r28, 0x3d	; 61
    194c:	24 2f       	mov	r18, r20
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	22 0f       	add	r18, r18
    1952:	33 1f       	adc	r19, r19
    1954:	2a 0f       	add	r18, r26
    1956:	3b 1f       	adc	r19, r27
    1958:	06 c0       	rjmp	.+12     	; 0x1966 <USB_ProcessHIDReport+0x5a0>
					  UsageList[i] = UsageList[i + 1];
    195a:	12 96       	adiw	r26, 0x02	; 2
    195c:	8d 91       	ld	r24, X+
    195e:	9c 91       	ld	r25, X
    1960:	13 97       	sbiw	r26, 0x03	; 3
    1962:	8d 93       	st	X+, r24
    1964:	9d 93       	st	X+, r25

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
    1966:	a2 17       	cp	r26, r18
    1968:	b3 07       	cpc	r27, r19
    196a:	b9 f7       	brne	.-18     	; 0x195a <USB_ProcessHIDReport+0x594>
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
    196c:	ed 96       	adiw	r28, 0x3d	; 61
    196e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1970:	ed 97       	sbiw	r28, 0x3d	; 61
    1972:	91 50       	subi	r25, 0x01	; 1
    1974:	ed 96       	adiw	r28, 0x3d	; 61
    1976:	9f af       	std	Y+63, r25	; 0x3f
    1978:	ed 97       	sbiw	r28, 0x3d	; 61
    197a:	dc c0       	rjmp	.+440    	; 0x1b34 <USB_ProcessHIDReport+0x76e>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
    197c:	eb 96       	adiw	r28, 0x3b	; 59
    197e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1980:	3d ad       	ldd	r19, Y+61	; 0x3d
    1982:	4e ad       	ldd	r20, Y+62	; 0x3e
    1984:	5f ad       	ldd	r21, Y+63	; 0x3f
    1986:	eb 97       	sbiw	r28, 0x3b	; 59
    1988:	26 15       	cp	r18, r6
    198a:	37 05       	cpc	r19, r7
    198c:	48 05       	cpc	r20, r8
    198e:	59 05       	cpc	r21, r9
    1990:	08 f4       	brcc	.+2      	; 0x1994 <USB_ProcessHIDReport+0x5ce>
    1992:	d0 c0       	rjmp	.+416    	; 0x1b34 <USB_ProcessHIDReport+0x76e>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
    1994:	74 82       	std	Z+4, r7	; 0x04
    1996:	63 82       	std	Z+3, r6	; 0x03
    1998:	08 94       	sec
    199a:	61 1c       	adc	r6, r1
    199c:	71 1c       	adc	r7, r1
    199e:	81 1c       	adc	r8, r1
    19a0:	91 1c       	adc	r9, r1
    19a2:	c8 c0       	rjmp	.+400    	; 0x1b34 <USB_ProcessHIDReport+0x76e>
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
    19a4:	a1 14       	cp	r10, r1
    19a6:	b1 04       	cpc	r11, r1
    19a8:	11 f4       	brne	.+4      	; 0x19ae <USB_ProcessHIDReport+0x5e8>
    19aa:	84 e0       	ldi	r24, 0x04	; 4
    19ac:	ea c0       	rjmp	.+468    	; 0x1b82 <USB_ProcessHIDReport+0x7bc>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
    19ae:	d5 01       	movw	r26, r10
    19b0:	15 96       	adiw	r26, 0x05	; 5
    19b2:	ed 91       	ld	r30, X+
    19b4:	fc 91       	ld	r31, X
    19b6:	16 97       	sbiw	r26, 0x06	; 6
    19b8:	bd c0       	rjmp	.+378    	; 0x1b34 <USB_ProcessHIDReport+0x76e>
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
    19ba:	de 01       	movw	r26, r28
    19bc:	59 96       	adiw	r26, 0x19	; 25
    19be:	cb 57       	subi	r28, 0x7B	; 123
    19c0:	df 4f       	sbci	r29, 0xFF	; 255
    19c2:	88 81       	ld	r24, Y
    19c4:	c5 58       	subi	r28, 0x85	; 133
    19c6:	d0 40       	sbci	r29, 0x00	; 0
    19c8:	ca 57       	subi	r28, 0x7A	; 122
    19ca:	df 4f       	sbci	r29, 0xFF	; 255
    19cc:	98 81       	ld	r25, Y
    19ce:	c6 58       	subi	r28, 0x86	; 134
    19d0:	d0 40       	sbci	r29, 0x00	; 0
    19d2:	9c 01       	movw	r18, r24
    19d4:	f9 01       	movw	r30, r18
    19d6:	8a e1       	ldi	r24, 0x1A	; 26
    19d8:	01 90       	ld	r0, Z+
    19da:	0d 92       	st	X+, r0
    19dc:	81 50       	subi	r24, 0x01	; 1
    19de:	e1 f7       	brne	.-8      	; 0x19d8 <USB_ProcessHIDReport+0x612>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
    19e0:	fd 8a       	std	Y+21, r15	; 0x15
    19e2:	ec 8a       	std	Y+20, r14	; 0x14
					NewReportItem.CollectionPath = CurrCollectionPath;
    19e4:	b8 8e       	std	Y+24, r11	; 0x18
    19e6:	af 8a       	std	Y+23, r10	; 0x17
					NewReportItem.ReportID       = CurrStateTable->ReportID;
    19e8:	f6 01       	movw	r30, r12
    19ea:	83 8d       	ldd	r24, Z+27	; 0x1b
    19ec:	8e 8b       	std	Y+22, r24	; 0x16

					if (UsageListSize)
    19ee:	ed 96       	adiw	r28, 0x3d	; 61
    19f0:	ff ad       	ldd	r31, Y+63	; 0x3f
    19f2:	ed 97       	sbiw	r28, 0x3d	; 61
    19f4:	ff 23       	and	r31, r31
    19f6:	f9 f0       	breq	.+62     	; 0x1a36 <USB_ProcessHIDReport+0x670>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
    19f8:	49 81       	ldd	r20, Y+1	; 0x01
    19fa:	5a 81       	ldd	r21, Y+2	; 0x02
    19fc:	fe 01       	movw	r30, r28
    19fe:	31 96       	adiw	r30, 0x01	; 1

						for (uint8_t i = 0; i < UsageListSize; i++)
    1a00:	ed 96       	adiw	r28, 0x3d	; 61
    1a02:	8f ad       	ldd	r24, Y+63	; 0x3f
    1a04:	ed 97       	sbiw	r28, 0x3d	; 61
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	22 0f       	add	r18, r18
    1a0c:	33 1f       	adc	r19, r19
    1a0e:	2e 0f       	add	r18, r30
    1a10:	3f 1f       	adc	r19, r31
    1a12:	04 c0       	rjmp	.+8      	; 0x1a1c <USB_ProcessHIDReport+0x656>
						  UsageList[i] = UsageList[i + 1];
    1a14:	82 81       	ldd	r24, Z+2	; 0x02
    1a16:	93 81       	ldd	r25, Z+3	; 0x03
    1a18:	81 93       	st	Z+, r24
    1a1a:	91 93       	st	Z+, r25

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
    1a1c:	e2 17       	cp	r30, r18
    1a1e:	f3 07       	cpc	r31, r19
    1a20:	c9 f7       	brne	.-14     	; 0x1a14 <USB_ProcessHIDReport+0x64e>
					NewReportItem.CollectionPath = CurrCollectionPath;
					NewReportItem.ReportID       = CurrStateTable->ReportID;

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
    1a22:	5d 8f       	std	Y+29, r21	; 0x1d
    1a24:	4c 8f       	std	Y+28, r20	; 0x1c

						for (uint8_t i = 0; i < UsageListSize; i++)
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
    1a26:	ed 96       	adiw	r28, 0x3d	; 61
    1a28:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a2a:	ed 97       	sbiw	r28, 0x3d	; 61
    1a2c:	b1 50       	subi	r27, 0x01	; 1
    1a2e:	ed 96       	adiw	r28, 0x3d	; 61
    1a30:	bf af       	std	Y+63, r27	; 0x3f
    1a32:	ed 97       	sbiw	r28, 0x3d	; 61
    1a34:	12 c0       	rjmp	.+36     	; 0x1a5a <USB_ProcessHIDReport+0x694>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
    1a36:	eb 96       	adiw	r28, 0x3b	; 59
    1a38:	2c ad       	ldd	r18, Y+60	; 0x3c
    1a3a:	3d ad       	ldd	r19, Y+61	; 0x3d
    1a3c:	4e ad       	ldd	r20, Y+62	; 0x3e
    1a3e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1a40:	eb 97       	sbiw	r28, 0x3b	; 59
    1a42:	26 15       	cp	r18, r6
    1a44:	37 05       	cpc	r19, r7
    1a46:	48 05       	cpc	r20, r8
    1a48:	59 05       	cpc	r21, r9
    1a4a:	38 f0       	brcs	.+14     	; 0x1a5a <USB_ProcessHIDReport+0x694>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
    1a4c:	7d 8e       	std	Y+29, r7	; 0x1d
    1a4e:	6c 8e       	std	Y+28, r6	; 0x1c
    1a50:	08 94       	sec
    1a52:	61 1c       	adc	r6, r1
    1a54:	71 1c       	adc	r7, r1
    1a56:	81 1c       	adc	r8, r1
    1a58:	91 1c       	adc	r9, r1
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
    1a5a:	c9 57       	subi	r28, 0x79	; 121
    1a5c:	df 4f       	sbci	r29, 0xFF	; 255
    1a5e:	38 81       	ld	r19, Y
    1a60:	c7 58       	subi	r28, 0x87	; 135
    1a62:	d0 40       	sbci	r29, 0x00	; 0
    1a64:	30 38       	cpi	r19, 0x80	; 128
    1a66:	11 f4       	brne	.+4      	; 0x1a6c <USB_ProcessHIDReport+0x6a6>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
    1a68:	1b 8a       	std	Y+19, r1	; 0x13
    1a6a:	0c c0       	rjmp	.+24     	; 0x1a84 <USB_ProcessHIDReport+0x6be>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
    1a6c:	c9 57       	subi	r28, 0x79	; 121
    1a6e:	df 4f       	sbci	r29, 0xFF	; 255
    1a70:	48 81       	ld	r20, Y
    1a72:	c7 58       	subi	r28, 0x87	; 135
    1a74:	d0 40       	sbci	r29, 0x00	; 0
    1a76:	40 39       	cpi	r20, 0x90	; 144
    1a78:	19 f4       	brne	.+6      	; 0x1a80 <USB_ProcessHIDReport+0x6ba>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
    1a7a:	51 e0       	ldi	r21, 0x01	; 1
    1a7c:	5b 8b       	std	Y+19, r21	; 0x13
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <USB_ProcessHIDReport+0x6be>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
    1a80:	82 e0       	ldi	r24, 0x02	; 2
    1a82:	8b 8b       	std	Y+19, r24	; 0x13

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
    1a84:	eb 89       	ldd	r30, Y+19	; 0x13
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	ee 0f       	add	r30, r30
    1a8a:	ff 1f       	adc	r31, r31
    1a8c:	e4 0d       	add	r30, r4
    1a8e:	f5 1d       	adc	r31, r5
    1a90:	81 81       	ldd	r24, Z+1	; 0x01
    1a92:	92 81       	ldd	r25, Z+2	; 0x02
    1a94:	9a 8b       	std	Y+18, r25	; 0x12
    1a96:	89 8b       	std	Y+17, r24	; 0x11

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
    1a98:	d6 01       	movw	r26, r12
    1a9a:	2c 91       	ld	r18, X
    1a9c:	81 81       	ldd	r24, Z+1	; 0x01
    1a9e:	92 81       	ldd	r25, Z+2	; 0x02
    1aa0:	82 0f       	add	r24, r18
    1aa2:	91 1d       	adc	r25, r1
    1aa4:	92 83       	std	Z+2, r25	; 0x02
    1aa6:	81 83       	std	Z+1, r24	; 0x01

					if (ParserData->LargestReportSizeBits < NewReportItem.BitOffset)
    1aa8:	29 89       	ldd	r18, Y+17	; 0x11
    1aaa:	3a 89       	ldd	r19, Y+18	; 0x12
    1aac:	c6 57       	subi	r28, 0x76	; 118
    1aae:	df 4f       	sbci	r29, 0xFF	; 255
    1ab0:	e8 81       	ld	r30, Y
    1ab2:	f9 81       	ldd	r31, Y+1	; 0x01
    1ab4:	ca 58       	subi	r28, 0x8A	; 138
    1ab6:	d0 40       	sbci	r29, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	91 81       	ldd	r25, Z+1	; 0x01
    1abc:	82 17       	cp	r24, r18
    1abe:	93 07       	cpc	r25, r19
    1ac0:	10 f4       	brcc	.+4      	; 0x1ac6 <USB_ProcessHIDReport+0x700>
					  ParserData->LargestReportSizeBits = NewReportItem.BitOffset;
    1ac2:	31 83       	std	Z+1, r19	; 0x01
    1ac4:	20 83       	st	Z, r18

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    1ac6:	c8 57       	subi	r28, 0x78	; 120
    1ac8:	df 4f       	sbci	r29, 0xFF	; 255
    1aca:	28 81       	ld	r18, Y
    1acc:	39 81       	ldd	r19, Y+1	; 0x01
    1ace:	c8 58       	subi	r28, 0x88	; 136
    1ad0:	d0 40       	sbci	r29, 0x00	; 0
    1ad2:	23 2b       	or	r18, r19
    1ad4:	f1 f4       	brne	.+60     	; 0x1b12 <USB_ProcessHIDReport+0x74c>
    1ad6:	ce 01       	movw	r24, r28
    1ad8:	41 96       	adiw	r24, 0x11	; 17
    1ada:	0e 94 39 01 	call	0x272	; 0x272 <CALLBACK_HIDParser_FilterHIDReportItem>
    1ade:	88 23       	and	r24, r24
    1ae0:	c1 f0       	breq	.+48     	; 0x1b12 <USB_ProcessHIDReport+0x74c>
					{
						if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
    1ae2:	d1 01       	movw	r26, r2
    1ae4:	8c 91       	ld	r24, X
    1ae6:	84 31       	cpi	r24, 0x14	; 20
    1ae8:	11 f4       	brne	.+4      	; 0x1aee <USB_ProcessHIDReport+0x728>
    1aea:	83 e0       	ldi	r24, 0x03	; 3
    1aec:	4a c0       	rjmp	.+148    	; 0x1b82 <USB_ProcessHIDReport+0x7bc>
						  return HID_PARSE_InsufficientReportItems;

						memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
    1aee:	ba e2       	ldi	r27, 0x2A	; 42
    1af0:	8b 9f       	mul	r24, r27
    1af2:	f0 01       	movw	r30, r0
    1af4:	11 24       	eor	r1, r1
    1af6:	31 96       	adiw	r30, 0x01	; 1
    1af8:	e2 0d       	add	r30, r2
    1afa:	f3 1d       	adc	r31, r3
    1afc:	de 01       	movw	r26, r28
    1afe:	51 96       	adiw	r26, 0x11	; 17
    1b00:	8a e2       	ldi	r24, 0x2A	; 42
    1b02:	0d 90       	ld	r0, X+
    1b04:	01 92       	st	Z+, r0
    1b06:	81 50       	subi	r24, 0x01	; 1
    1b08:	e1 f7       	brne	.-8      	; 0x1b02 <USB_ProcessHIDReport+0x73c>
						       &NewReportItem, sizeof(HID_ReportItem_t));

						ParserData->TotalReportItems++;
    1b0a:	f1 01       	movw	r30, r2
    1b0c:	80 81       	ld	r24, Z
    1b0e:	8f 5f       	subi	r24, 0xFF	; 255
    1b10:	80 83       	st	Z, r24
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
    1b12:	ec 96       	adiw	r28, 0x3c	; 60
    1b14:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b16:	ec 97       	sbiw	r28, 0x3c	; 60
    1b18:	ff 5f       	subi	r31, 0xFF	; 255
    1b1a:	ec 96       	adiw	r28, 0x3c	; 60
    1b1c:	ff af       	std	Y+63, r31	; 0x3f
    1b1e:	ec 97       	sbiw	r28, 0x3c	; 60
    1b20:	d6 01       	movw	r26, r12
    1b22:	5a 96       	adiw	r26, 0x1a	; 26
    1b24:	8c 91       	ld	r24, X
    1b26:	ec 96       	adiw	r28, 0x3c	; 60
    1b28:	bf ad       	ldd	r27, Y+63	; 0x3f
    1b2a:	ec 97       	sbiw	r28, 0x3c	; 60
    1b2c:	b8 17       	cp	r27, r24
    1b2e:	08 f4       	brcc	.+2      	; 0x1b32 <USB_ProcessHIDReport+0x76c>
    1b30:	44 cf       	rjmp	.-376    	; 0x19ba <USB_ProcessHIDReport+0x5f4>
    1b32:	f5 01       	movw	r30, r10
				}

				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
    1b34:	c1 58       	subi	r28, 0x81	; 129
    1b36:	df 4f       	sbci	r29, 0xFF	; 255
    1b38:	28 81       	ld	r18, Y
    1b3a:	39 81       	ldd	r19, Y+1	; 0x01
    1b3c:	cf 57       	subi	r28, 0x7F	; 127
    1b3e:	d0 40       	sbci	r29, 0x00	; 0
    1b40:	2c 70       	andi	r18, 0x0C	; 12
    1b42:	30 70       	andi	r19, 0x00	; 0
    1b44:	23 2b       	or	r18, r19
    1b46:	61 f4       	brne	.+24     	; 0x1b60 <USB_ProcessHIDReport+0x79a>
    1b48:	ed 96       	adiw	r28, 0x3d	; 61
    1b4a:	1f ae       	std	Y+63, r1	; 0x3f
    1b4c:	ed 97       	sbiw	r28, 0x3d	; 61
    1b4e:	eb 96       	adiw	r28, 0x3b	; 59
    1b50:	1c ae       	std	Y+60, r1	; 0x3c
    1b52:	1d ae       	std	Y+61, r1	; 0x3d
    1b54:	1e ae       	std	Y+62, r1	; 0x3e
    1b56:	1f ae       	std	Y+63, r1	; 0x3f
    1b58:	eb 97       	sbiw	r28, 0x3b	; 59
    1b5a:	66 24       	eor	r6, r6
    1b5c:	77 24       	eor	r7, r7
    1b5e:	43 01       	movw	r8, r6
    1b60:	5f 01       	movw	r10, r30
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
    1b62:	cd 57       	subi	r28, 0x7D	; 125
    1b64:	df 4f       	sbci	r29, 0xFF	; 255
    1b66:	48 81       	ld	r20, Y
    1b68:	59 81       	ldd	r21, Y+1	; 0x01
    1b6a:	c3 58       	subi	r28, 0x83	; 131
    1b6c:	d0 40       	sbci	r29, 0x00	; 0
    1b6e:	45 2b       	or	r20, r21
    1b70:	09 f0       	breq	.+2      	; 0x1b74 <USB_ProcessHIDReport+0x7ae>
    1b72:	c5 cc       	rjmp	.-1654   	; 0x14fe <USB_ProcessHIDReport+0x138>
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
    1b74:	d1 01       	movw	r26, r2
    1b76:	8c 91       	ld	r24, X
    1b78:	88 23       	and	r24, r24
    1b7a:	11 f0       	breq	.+4      	; 0x1b80 <USB_ProcessHIDReport+0x7ba>
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	01 c0       	rjmp	.+2      	; 0x1b82 <USB_ProcessHIDReport+0x7bc>
    1b80:	88 e0       	ldi	r24, 0x08	; 8
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
    1b82:	cb 56       	subi	r28, 0x6B	; 107
    1b84:	df 4f       	sbci	r29, 0xFF	; 255
    1b86:	0f b6       	in	r0, 0x3f	; 63
    1b88:	f8 94       	cli
    1b8a:	de bf       	out	0x3e, r29	; 62
    1b8c:	0f be       	out	0x3f, r0	; 63
    1b8e:	cd bf       	out	0x3d, r28	; 61
    1b90:	cf 91       	pop	r28
    1b92:	df 91       	pop	r29
    1b94:	1f 91       	pop	r17
    1b96:	0f 91       	pop	r16
    1b98:	ff 90       	pop	r15
    1b9a:	ef 90       	pop	r14
    1b9c:	df 90       	pop	r13
    1b9e:	cf 90       	pop	r12
    1ba0:	bf 90       	pop	r11
    1ba2:	af 90       	pop	r10
    1ba4:	9f 90       	pop	r9
    1ba6:	8f 90       	pop	r8
    1ba8:	7f 90       	pop	r7
    1baa:	6f 90       	pop	r6
    1bac:	5f 90       	pop	r5
    1bae:	4f 90       	pop	r4
    1bb0:	3f 90       	pop	r3
    1bb2:	2f 90       	pop	r2
    1bb4:	08 95       	ret

00001bb6 <DCOMP_HID_Host_NextHIDInterface>:

	return HID_ENUMERROR_NoError;
}

static uint8_t DCOMP_HID_Host_NextHIDInterface(void* const CurrentDescriptor)
{
    1bb6:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1bb8:	81 81       	ldd	r24, Z+1	; 0x01
    1bba:	84 30       	cpi	r24, 0x04	; 4
    1bbc:	29 f4       	brne	.+10     	; 0x1bc8 <DCOMP_HID_Host_NextHIDInterface+0x12>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
    1bbe:	85 81       	ldd	r24, Z+5	; 0x05
    1bc0:	83 30       	cpi	r24, 0x03	; 3
    1bc2:	11 f4       	brne	.+4      	; 0x1bc8 <DCOMP_HID_Host_NextHIDInterface+0x12>
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	08 95       	ret
    1bc8:	82 e0       	ldi	r24, 0x02	; 2
		  return DESCRIPTOR_SEARCH_Found;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1bca:	08 95       	ret

00001bcc <DCOMP_HID_Host_NextHIDDescriptor>:

static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
    1bcc:	fc 01       	movw	r30, r24
    1bce:	81 81       	ldd	r24, Z+1	; 0x01
    1bd0:	81 32       	cpi	r24, 0x21	; 33
    1bd2:	11 f4       	brne	.+4      	; 0x1bd8 <DCOMP_HID_Host_NextHIDDescriptor+0xc>
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	08 95       	ret
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
    1bd8:	84 30       	cpi	r24, 0x04	; 4
    1bda:	11 f0       	breq	.+4      	; 0x1be0 <DCOMP_HID_Host_NextHIDDescriptor+0x14>
    1bdc:	82 e0       	ldi	r24, 0x02	; 2
    1bde:	08 95       	ret
    1be0:	81 e0       	ldi	r24, 0x01	; 1
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}
    1be2:	08 95       	ret

00001be4 <HID_Host_IsReportReceived>:
		return USB_Host_SendControlRequest(Buffer);
	}
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    1be4:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1be6:	80 91 0a 05 	lds	r24, 0x050A
    1bea:	8b 30       	cpi	r24, 0x0B	; 11
    1bec:	a1 f4       	brne	.+40     	; 0x1c16 <HID_Host_IsReportReceived+0x32>
    1bee:	87 81       	ldd	r24, Z+7	; 0x07
    1bf0:	88 23       	and	r24, r24
    1bf2:	89 f0       	breq	.+34     	; 0x1c16 <HID_Host_IsReportReceived+0x32>
	  return false;

	bool ReportReceived;

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipeNumber);
    1bf4:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1bf6:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1bfa:	80 91 a9 00 	lds	r24, 0x00A9
    1bfe:	8f 7b       	andi	r24, 0xBF	; 191
    1c00:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1c04:	90 91 a6 00 	lds	r25, 0x00A6
    1c08:	91 70       	andi	r25, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1c0a:	80 91 a9 00 	lds	r24, 0x00A9
    1c0e:	80 64       	ori	r24, 0x40	; 64
    1c10:	80 93 a9 00 	sts	0x00A9, r24
    1c14:	01 c0       	rjmp	.+2      	; 0x1c18 <HID_Host_IsReportReceived+0x34>

	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
    1c16:	90 e0       	ldi	r25, 0x00	; 0
}
    1c18:	89 2f       	mov	r24, r25
    1c1a:	08 95       	ret

00001c1c <HID_Host_SetReportProtocol>:
	return USB_Host_SendControlRequest(NULL);
}

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    1c1c:	cf 92       	push	r12
    1c1e:	df 92       	push	r13
    1c20:	ef 92       	push	r14
    1c22:	ff 92       	push	r15
    1c24:	0f 93       	push	r16
    1c26:	1f 93       	push	r17
    1c28:	df 93       	push	r29
    1c2a:	cf 93       	push	r28
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
    1c30:	8c 01       	movw	r16, r24

	uint8_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    1c32:	cd b6       	in	r12, 0x3d	; 61
    1c34:	de b6       	in	r13, 0x3e	; 62
#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	uint8_t ErrorCode;

	uint8_t HIDReportData[HIDInterfaceInfo->State.HIDReportSize];
    1c36:	dc 01       	movw	r26, r24
    1c38:	50 96       	adiw	r26, 0x10	; 16
    1c3a:	4d 91       	ld	r20, X+
    1c3c:	5c 91       	ld	r21, X
    1c3e:	51 97       	sbiw	r26, 0x11	; 17
    1c40:	ed b7       	in	r30, 0x3d	; 61
    1c42:	fe b7       	in	r31, 0x3e	; 62
    1c44:	e4 1b       	sub	r30, r20
    1c46:	f5 0b       	sbc	r31, r21
    1c48:	0f b6       	in	r0, 0x3f	; 63
    1c4a:	f8 94       	cli
    1c4c:	fe bf       	out	0x3e, r31	; 62
    1c4e:	0f be       	out	0x3f, r0	; 63
    1c50:	ed bf       	out	0x3d, r30	; 61
    1c52:	2d b7       	in	r18, 0x3d	; 61
    1c54:	3e b7       	in	r19, 0x3e	; 62
    1c56:	2f 5f       	subi	r18, 0xFF	; 255
    1c58:	3f 4f       	sbci	r19, 0xFF	; 255

	USB_ControlRequest = (USB_Request_Header_t)
    1c5a:	18 96       	adiw	r26, 0x08	; 8
    1c5c:	6c 91       	ld	r22, X
    1c5e:	81 e8       	ldi	r24, 0x81	; 129
    1c60:	80 93 02 05 	sts	0x0502, r24
    1c64:	86 e0       	ldi	r24, 0x06	; 6
    1c66:	80 93 03 05 	sts	0x0503, r24
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	92 e2       	ldi	r25, 0x22	; 34
    1c6e:	90 93 05 05 	sts	0x0505, r25
    1c72:	80 93 04 05 	sts	0x0504, r24
    1c76:	60 93 06 05 	sts	0x0506, r22
    1c7a:	10 92 07 05 	sts	0x0507, r1
    1c7e:	50 93 09 05 	sts	0x0509, r21
    1c82:	40 93 08 05 	sts	0x0508, r20
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1c86:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = HIDInterfaceInfo->State.HIDReportSize,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(HIDReportData)) != HOST_SENDCONTROL_Successful)
    1c8a:	f2 2e       	mov	r15, r18
    1c8c:	e3 2e       	mov	r14, r19
    1c8e:	c9 01       	movw	r24, r18
    1c90:	b8 d9       	rcall	.-3216   	; 0x1002 <USB_Host_SendControlRequest>
    1c92:	28 2f       	mov	r18, r24
    1c94:	88 23       	and	r24, r24
    1c96:	09 f0       	breq	.+2      	; 0x1c9a <HID_Host_SetReportProtocol+0x7e>
    1c98:	4f c0       	rjmp	.+158    	; 0x1d38 <HID_Host_SetReportProtocol+0x11c>
	  return ErrorCode;

	if (HIDInterfaceInfo->State.UsingBootProtocol)
    1c9a:	d8 01       	movw	r26, r16
    1c9c:	1f 96       	adiw	r26, 0x0f	; 15
    1c9e:	8c 91       	ld	r24, X
    1ca0:	1f 97       	sbiw	r26, 0x0f	; 15
    1ca2:	88 23       	and	r24, r24
    1ca4:	f1 f0       	breq	.+60     	; 0x1ce2 <HID_Host_SetReportProtocol+0xc6>
	{
		USB_ControlRequest = (USB_Request_Header_t)
    1ca6:	18 96       	adiw	r26, 0x08	; 8
    1ca8:	2c 91       	ld	r18, X
    1caa:	81 e2       	ldi	r24, 0x21	; 33
    1cac:	80 93 02 05 	sts	0x0502, r24
    1cb0:	8b e0       	ldi	r24, 0x0B	; 11
    1cb2:	80 93 03 05 	sts	0x0503, r24
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	90 93 05 05 	sts	0x0505, r25
    1cbe:	80 93 04 05 	sts	0x0504, r24
    1cc2:	20 93 06 05 	sts	0x0506, r18
    1cc6:	10 92 07 05 	sts	0x0507, r1
    1cca:	10 92 09 05 	sts	0x0509, r1
    1cce:	10 92 08 05 	sts	0x0508, r1
				.wValue        = 1,
				.wIndex        = HIDInterfaceInfo->State.InterfaceNumber,
				.wLength       = 0,
			};

		if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	95 d9       	rcall	.-3286   	; 0x1002 <USB_Host_SendControlRequest>
    1cd8:	28 2f       	mov	r18, r24
    1cda:	88 23       	and	r24, r24
    1cdc:	69 f5       	brne	.+90     	; 0x1d38 <HID_Host_SetReportProtocol+0x11c>
		  return ErrorCode;

		HIDInterfaceInfo->State.UsingBootProtocol = false;
    1cde:	f8 01       	movw	r30, r16
    1ce0:	17 86       	std	Z+15, r1	; 0x0f
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
    1ce2:	d8 01       	movw	r26, r16
    1ce4:	15 96       	adiw	r26, 0x05	; 5
    1ce6:	4d 91       	ld	r20, X+
    1ce8:	5c 91       	ld	r21, X
    1cea:	16 97       	sbiw	r26, 0x06	; 6
    1cec:	41 15       	cp	r20, r1
    1cee:	51 05       	cpc	r21, r1
    1cf0:	11 f4       	brne	.+4      	; 0x1cf6 <HID_Host_SetReportProtocol+0xda>
    1cf2:	20 e8       	ldi	r18, 0x80	; 128
    1cf4:	21 c0       	rjmp	.+66     	; 0x1d38 <HID_Host_SetReportProtocol+0x11c>
	  return HID_ERROR_LOGICAL;

	if ((ErrorCode = USB_ProcessHIDReport(HIDReportData, HIDInterfaceInfo->State.HIDReportSize,
    1cf6:	f8 01       	movw	r30, r16
    1cf8:	60 89       	ldd	r22, Z+16	; 0x10
    1cfa:	71 89       	ldd	r23, Z+17	; 0x11
    1cfc:	8f 2d       	mov	r24, r15
    1cfe:	9e 2d       	mov	r25, r14
    1d00:	62 db       	rcall	.-2364   	; 0x13c6 <USB_ProcessHIDReport>
    1d02:	28 2f       	mov	r18, r24
    1d04:	88 23       	and	r24, r24
    1d06:	11 f0       	breq	.+4      	; 0x1d0c <HID_Host_SetReportProtocol+0xf0>
	                                      HIDInterfaceInfo->Config.HIDParserData)) != HID_PARSE_Successful)
	{
		return HID_ERROR_LOGICAL | ErrorCode;
    1d08:	20 68       	ori	r18, 0x80	; 128
    1d0a:	16 c0       	rjmp	.+44     	; 0x1d38 <HID_Host_SetReportProtocol+0x11c>
	}

	uint8_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
    1d0c:	d8 01       	movw	r26, r16
    1d0e:	15 96       	adiw	r26, 0x05	; 5
    1d10:	ed 91       	ld	r30, X+
    1d12:	fc 91       	ld	r31, X
    1d14:	16 97       	sbiw	r26, 0x06	; 6
    1d16:	ea 52       	subi	r30, 0x2A	; 42
    1d18:	fc 4f       	sbci	r31, 0xFC	; 252
    1d1a:	e0 81       	ld	r30, Z
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	8e 2f       	mov	r24, r30
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	87 70       	andi	r24, 0x07	; 7
    1d24:	90 70       	andi	r25, 0x00	; 0
    1d26:	89 2b       	or	r24, r25
    1d28:	09 f0       	breq	.+2      	; 0x1d2c <HID_Host_SetReportProtocol+0x110>
    1d2a:	31 e0       	ldi	r19, 0x01	; 1
    1d2c:	e6 95       	lsr	r30
    1d2e:	e6 95       	lsr	r30
    1d30:	e6 95       	lsr	r30
    1d32:	3e 0f       	add	r19, r30
    1d34:	f8 01       	movw	r30, r16
    1d36:	32 8b       	std	Z+18, r19	; 0x12

	return 0;
}
    1d38:	82 2f       	mov	r24, r18
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	f8 94       	cli
    1d3e:	de be       	out	0x3e, r13	; 62
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	cd be       	out	0x3d, r12	; 61
    1d44:	cf 91       	pop	r28
    1d46:	df 91       	pop	r29
    1d48:	1f 91       	pop	r17
    1d4a:	0f 91       	pop	r16
    1d4c:	ff 90       	pop	r15
    1d4e:	ef 90       	pop	r14
    1d50:	df 90       	pop	r13
    1d52:	cf 90       	pop	r12
    1d54:	08 95       	ret

00001d56 <HID_Host_ReceiveReport>:
}
#endif

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
    1d56:	cf 93       	push	r28
    1d58:	df 93       	push	r29
    1d5a:	dc 01       	movw	r26, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1d5c:	80 91 0a 05 	lds	r24, 0x050A
    1d60:	8b 30       	cpi	r24, 0x0B	; 11
    1d62:	09 f0       	breq	.+2      	; 0x1d66 <HID_Host_ReceiveReport+0x10>
    1d64:	40 c0       	rjmp	.+128    	; 0x1de6 <HID_Host_ReceiveReport+0x90>
    1d66:	17 96       	adiw	r26, 0x07	; 7
    1d68:	8c 91       	ld	r24, X
    1d6a:	17 97       	sbiw	r26, 0x07	; 7
    1d6c:	88 23       	and	r24, r24
    1d6e:	d9 f1       	breq	.+118    	; 0x1de6 <HID_Host_ReceiveReport+0x90>
	  return PIPE_READYWAIT_DeviceDisconnected;

	uint8_t ErrorCode;

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipeNumber);
    1d70:	8c 91       	ld	r24, X
    1d72:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1d76:	80 91 a9 00 	lds	r24, 0x00A9
    1d7a:	8f 7b       	andi	r24, 0xBF	; 191
    1d7c:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Unfreeze();

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;
    1d80:	eb 01       	movw	r28, r22

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
    1d82:	1f 96       	adiw	r26, 0x0f	; 15
    1d84:	8c 91       	ld	r24, X
    1d86:	1f 97       	sbiw	r26, 0x0f	; 15
    1d88:	88 23       	and	r24, r24
    1d8a:	b1 f4       	brne	.+44     	; 0x1db8 <HID_Host_ReceiveReport+0x62>
	{
		uint8_t ReportID = 0;

		if (HIDInterfaceInfo->Config.HIDParserData->UsingReportIDs)
    1d8c:	15 96       	adiw	r26, 0x05	; 5
    1d8e:	ed 91       	ld	r30, X+
    1d90:	fc 91       	ld	r31, X
    1d92:	16 97       	sbiw	r26, 0x06	; 6
    1d94:	e8 52       	subi	r30, 0x28	; 40
    1d96:	fc 4f       	sbci	r31, 0xFC	; 252
    1d98:	80 81       	ld	r24, Z
    1d9a:	88 23       	and	r24, r24
    1d9c:	11 f4       	brne	.+4      	; 0x1da2 <HID_Host_ReceiveReport+0x4c>
    1d9e:	60 e0       	ldi	r22, 0x00	; 0
    1da0:	03 c0       	rjmp	.+6      	; 0x1da8 <HID_Host_ReceiveReport+0x52>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1da2:	60 91 af 00 	lds	r22, 0x00AF
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
    1da6:	69 93       	st	Y+, r22
		}

		ReportSize = USB_GetHIDReportSize(HIDInterfaceInfo->Config.HIDParserData, ReportID, HID_REPORT_ITEM_In);
    1da8:	15 96       	adiw	r26, 0x05	; 5
    1daa:	8d 91       	ld	r24, X+
    1dac:	9c 91       	ld	r25, X
    1dae:	16 97       	sbiw	r26, 0x06	; 6
    1db0:	40 e0       	ldi	r20, 0x00	; 0
    1db2:	de da       	rcall	.-2628   	; 0x1370 <USB_GetHIDReportSize>
    1db4:	bc 01       	movw	r22, r24
    1db6:	04 c0       	rjmp	.+8      	; 0x1dc0 <HID_Host_ReceiveReport+0x6a>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1db8:	60 91 f6 00 	lds	r22, 0x00F6
    1dbc:	70 91 f7 00 	lds	r23, 0x00F7
#endif
	{
		ReportSize = Pipe_BytesInPipe();
	}

	if ((ErrorCode = Pipe_Read_Stream_LE(BufferPos, ReportSize, NULL)) != PIPE_RWSTREAM_NoError)
    1dc0:	ce 01       	movw	r24, r28
    1dc2:	40 e0       	ldi	r20, 0x00	; 0
    1dc4:	50 e0       	ldi	r21, 0x00	; 0
    1dc6:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <Pipe_Read_Stream_LE>
    1dca:	98 2f       	mov	r25, r24
    1dcc:	88 23       	and	r24, r24
    1dce:	61 f4       	brne	.+24     	; 0x1de8 <HID_Host_ReceiveReport+0x92>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1dd0:	80 91 a6 00 	lds	r24, 0x00A6
    1dd4:	8e 77       	andi	r24, 0x7E	; 126
    1dd6:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1dda:	80 91 a9 00 	lds	r24, 0x00A9
    1dde:	80 64       	ori	r24, 0x40	; 64
    1de0:	80 93 a9 00 	sts	0x00A9, r24
    1de4:	01 c0       	rjmp	.+2      	; 0x1de8 <HID_Host_ReceiveReport+0x92>
	  return ErrorCode;

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    1de6:	92 e0       	ldi	r25, 0x02	; 2
}
    1de8:	89 2f       	mov	r24, r25
    1dea:	df 91       	pop	r29
    1dec:	cf 91       	pop	r28
    1dee:	08 95       	ret

00001df0 <HID_Host_ConfigurePipes>:
#include "HID.h"

uint8_t HID_Host_ConfigurePipes(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    1df0:	2f 92       	push	r2
    1df2:	3f 92       	push	r3
    1df4:	4f 92       	push	r4
    1df6:	5f 92       	push	r5
    1df8:	6f 92       	push	r6
    1dfa:	7f 92       	push	r7
    1dfc:	8f 92       	push	r8
    1dfe:	9f 92       	push	r9
    1e00:	af 92       	push	r10
    1e02:	bf 92       	push	r11
    1e04:	cf 92       	push	r12
    1e06:	df 92       	push	r13
    1e08:	ef 92       	push	r14
    1e0a:	ff 92       	push	r15
    1e0c:	0f 93       	push	r16
    1e0e:	1f 93       	push	r17
    1e10:	df 93       	push	r29
    1e12:	cf 93       	push	r28
    1e14:	00 d0       	rcall	.+0      	; 0x1e16 <HID_Host_ConfigurePipes+0x26>
    1e16:	00 d0       	rcall	.+0      	; 0x1e18 <HID_Host_ConfigurePipes+0x28>
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	6c 01       	movw	r12, r24
    1e1e:	7a 83       	std	Y+2, r23	; 0x02
    1e20:	69 83       	std	Y+1, r22	; 0x01
    1e22:	5c 83       	std	Y+4, r21	; 0x04
    1e24:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1e26:	07 96       	adiw	r24, 0x07	; 7
    1e28:	fc 01       	movw	r30, r24
    1e2a:	8c e0       	ldi	r24, 0x0C	; 12
    1e2c:	df 01       	movw	r26, r30
    1e2e:	1d 92       	st	X+, r1
    1e30:	8a 95       	dec	r24
    1e32:	e9 f7       	brne	.-6      	; 0x1e2e <HID_Host_ConfigurePipes+0x3e>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1e34:	eb 81       	ldd	r30, Y+3	; 0x03
    1e36:	fc 81       	ldd	r31, Y+4	; 0x04
    1e38:	81 81       	ldd	r24, Z+1	; 0x01
    1e3a:	82 30       	cpi	r24, 0x02	; 2
    1e3c:	11 f0       	breq	.+4      	; 0x1e42 <HID_Host_ConfigurePipes+0x52>
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	ad c0       	rjmp	.+346    	; 0x1f9c <HID_Host_ConfigurePipes+0x1ac>
    1e42:	66 24       	eor	r6, r6
    1e44:	77 24       	eor	r7, r7
    1e46:	aa 24       	eor	r10, r10
    1e48:	bb 24       	eor	r11, r11
    1e4a:	44 24       	eor	r4, r4
    1e4c:	55 24       	eor	r5, r5
    1e4e:	22 24       	eor	r2, r2
    1e50:	33 24       	eor	r3, r3
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    1e52:	23 e0       	ldi	r18, 0x03	; 3
    1e54:	e2 2e       	mov	r14, r18
    1e56:	f1 2c       	mov	r15, r1
    1e58:	ec 0e       	add	r14, r28
    1e5a:	fd 1e       	adc	r15, r29
    1e5c:	8e 01       	movw	r16, r28
    1e5e:	0f 5f       	subi	r16, 0xFF	; 255
    1e60:	1f 4f       	sbci	r17, 0xFF	; 255
    1e62:	41 14       	cp	r4, r1
    1e64:	51 04       	cpc	r5, r1
    1e66:	39 f0       	breq	.+14     	; 0x1e76 <HID_Host_ConfigurePipes+0x86>
    1e68:	c8 01       	movw	r24, r16
    1e6a:	b7 01       	movw	r22, r14
    1e6c:	45 ee       	ldi	r20, 0xE5	; 229
    1e6e:	5f e0       	ldi	r21, 0x0F	; 15
    1e70:	00 d8       	rcall	.-4096   	; 0xe72 <USB_GetNextDescriptorComp>
    1e72:	88 23       	and	r24, r24
    1e74:	31 f1       	breq	.+76     	; 0x1ec2 <HID_Host_ConfigurePipes+0xd2>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_HID_Host_NextHIDInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (DataINEndpoint || DataOUTEndpoint)
    1e76:	61 14       	cp	r6, r1
    1e78:	71 04       	cpc	r7, r1
    1e7a:	89 f5       	brne	.+98     	; 0x1ede <HID_Host_ConfigurePipes+0xee>
    1e7c:	a1 14       	cp	r10, r1
    1e7e:	b1 04       	cpc	r11, r1
    1e80:	71 f5       	brne	.+92     	; 0x1ede <HID_Host_ConfigurePipes+0xee>
			  break;

			do
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1e82:	c8 01       	movw	r24, r16
    1e84:	b7 01       	movw	r22, r14
    1e86:	4b ed       	ldi	r20, 0xDB	; 219
    1e88:	5d e0       	ldi	r21, 0x0D	; 13
    1e8a:	0e 94 39 07 	call	0xe72	; 0xe72 <USB_GetNextDescriptorComp>
    1e8e:	88 23       	and	r24, r24
    1e90:	09 f0       	breq	.+2      	; 0x1e94 <HID_Host_ConfigurePipes+0xa4>
    1e92:	83 c0       	rjmp	.+262    	; 0x1f9a <HID_Host_ConfigurePipes+0x1aa>
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1e94:	4b 80       	ldd	r4, Y+3	; 0x03
    1e96:	5c 80       	ldd	r5, Y+4	; 0x04
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));
    1e98:	f6 01       	movw	r30, r12
    1e9a:	94 81       	ldd	r25, Z+4	; 0x04
    1e9c:	99 23       	and	r25, r25
    1e9e:	29 f0       	breq	.+10     	; 0x1eaa <HID_Host_ConfigurePipes+0xba>
    1ea0:	d2 01       	movw	r26, r4
    1ea2:	17 96       	adiw	r26, 0x07	; 7
    1ea4:	8c 91       	ld	r24, X
    1ea6:	89 17       	cp	r24, r25
    1ea8:	61 f7       	brne	.-40     	; 0x1e82 <HID_Host_ConfigurePipes+0x92>

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1eaa:	c8 01       	movw	r24, r16
    1eac:	b7 01       	movw	r22, r14
    1eae:	46 ee       	ldi	r20, 0xE6	; 230
    1eb0:	5d e0       	ldi	r21, 0x0D	; 13
    1eb2:	0e 94 39 07 	call	0xe72	; 0xe72 <USB_GetNextDescriptorComp>
    1eb6:	88 23       	and	r24, r24
    1eb8:	09 f0       	breq	.+2      	; 0x1ebc <HID_Host_ConfigurePipes+0xcc>
    1eba:	6f c0       	rjmp	.+222    	; 0x1f9a <HID_Host_ConfigurePipes+0x1aa>
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
			}

			HIDDescriptor = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_HID_Descriptor_HID_t);
    1ebc:	2b 80       	ldd	r2, Y+3	; 0x03
    1ebe:	3c 80       	ldd	r3, Y+4	; 0x04
    1ec0:	d0 cf       	rjmp	.-96     	; 0x1e62 <HID_Host_ConfigurePipes+0x72>
			DataOUTEndpoint = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1ec2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ec4:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1ec6:	82 81       	ldd	r24, Z+2	; 0x02
    1ec8:	87 fd       	sbrc	r24, 7
    1eca:	02 c0       	rjmp	.+4      	; 0x1ed0 <HID_Host_ConfigurePipes+0xe0>
    1ecc:	5f 01       	movw	r10, r30
    1ece:	01 c0       	rjmp	.+2      	; 0x1ed2 <HID_Host_ConfigurePipes+0xe2>
    1ed0:	3f 01       	movw	r6, r30
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    1ed2:	61 14       	cp	r6, r1
    1ed4:	71 04       	cpc	r7, r1
    1ed6:	29 f2       	breq	.-118    	; 0x1e62 <HID_Host_ConfigurePipes+0x72>
    1ed8:	a1 14       	cp	r10, r1
    1eda:	b1 04       	cpc	r11, r1
    1edc:	11 f2       	breq	.-124    	; 0x1e62 <HID_Host_ConfigurePipes+0x72>
    1ede:	99 24       	eor	r9, r9
    1ee0:	93 94       	inc	r9
			Type            = EP_TYPE_INTERRUPT;
			DoubleBanked    = HIDInterfaceInfo->Config.DataOUTPipeDoubleBank;
			InterruptPeriod = DataOUTEndpoint->PollingIntervalMS;

			HIDInterfaceInfo->State.DataOUTPipeSize   = DataOUTEndpoint->EndpointSize;
			HIDInterfaceInfo->State.DeviceUsesOUTPipe = true;
    1ee2:	88 24       	eor	r8, r8
    1ee4:	83 94       	inc	r8
		uint8_t  Token;
		uint8_t  EndpointAddress;
		uint8_t  InterruptPeriod;
		bool     DoubleBanked;

		if (PipeNum == HIDInterfaceInfo->Config.DataINPipeNumber)
    1ee6:	f6 01       	movw	r30, r12
    1ee8:	80 81       	ld	r24, Z
    1eea:	98 16       	cp	r9, r24
    1eec:	79 f4       	brne	.+30     	; 0x1f0c <HID_Host_ConfigurePipes+0x11c>
		{
			Size            = le16_to_cpu(DataINEndpoint->EndpointSize);
    1eee:	d3 01       	movw	r26, r6
    1ef0:	14 96       	adiw	r26, 0x04	; 4
    1ef2:	0d 91       	ld	r16, X+
    1ef4:	1c 91       	ld	r17, X
    1ef6:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataINEndpoint->EndpointAddress;
    1ef8:	12 96       	adiw	r26, 0x02	; 2
    1efa:	2c 91       	ld	r18, X
    1efc:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_INTERRUPT;
			DoubleBanked    = HIDInterfaceInfo->Config.DataINPipeDoubleBank;
    1efe:	81 81       	ldd	r24, Z+1	; 0x01
			InterruptPeriod = DataINEndpoint->PollingIntervalMS;
    1f00:	16 96       	adiw	r26, 0x06	; 6
    1f02:	fc 90       	ld	r15, X

			HIDInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    1f04:	12 87       	std	Z+10, r17	; 0x0a
    1f06:	01 87       	std	Z+9, r16	; 0x09
    1f08:	40 e1       	ldi	r20, 0x10	; 16
    1f0a:	16 c0       	rjmp	.+44     	; 0x1f38 <HID_Host_ConfigurePipes+0x148>
		}
		else if (PipeNum == HIDInterfaceInfo->Config.DataOUTPipeNumber)
    1f0c:	f6 01       	movw	r30, r12
    1f0e:	82 81       	ldd	r24, Z+2	; 0x02
    1f10:	98 16       	cp	r9, r24
    1f12:	21 f5       	brne	.+72     	; 0x1f5c <HID_Host_ConfigurePipes+0x16c>
		{
			if (DataOUTEndpoint == NULL)
    1f14:	a1 14       	cp	r10, r1
    1f16:	b1 04       	cpc	r11, r1
    1f18:	09 f1       	breq	.+66     	; 0x1f5c <HID_Host_ConfigurePipes+0x16c>
			  continue;
		
			Size            = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1f1a:	d5 01       	movw	r26, r10
    1f1c:	14 96       	adiw	r26, 0x04	; 4
    1f1e:	0d 91       	ld	r16, X+
    1f20:	1c 91       	ld	r17, X
    1f22:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1f24:	12 96       	adiw	r26, 0x02	; 2
    1f26:	2c 91       	ld	r18, X
    1f28:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_INTERRUPT;
			DoubleBanked    = HIDInterfaceInfo->Config.DataOUTPipeDoubleBank;
    1f2a:	83 81       	ldd	r24, Z+3	; 0x03
			InterruptPeriod = DataOUTEndpoint->PollingIntervalMS;
    1f2c:	16 96       	adiw	r26, 0x06	; 6
    1f2e:	fc 90       	ld	r15, X

			HIDInterfaceInfo->State.DataOUTPipeSize   = DataOUTEndpoint->EndpointSize;
    1f30:	14 87       	std	Z+12, r17	; 0x0c
    1f32:	03 87       	std	Z+11, r16	; 0x0b
			HIDInterfaceInfo->State.DeviceUsesOUTPipe = true;
    1f34:	86 86       	std	Z+14, r8	; 0x0e
    1f36:	40 e2       	ldi	r20, 0x20	; 32
		else
		{
			continue;
		}

		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    1f38:	88 23       	and	r24, r24
    1f3a:	11 f4       	brne	.+4      	; 0x1f40 <HID_Host_ConfigurePipes+0x150>
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	01 c0       	rjmp	.+2      	; 0x1f42 <HID_Host_ConfigurePipes+0x152>
    1f40:	94 e0       	ldi	r25, 0x04	; 4
    1f42:	89 2d       	mov	r24, r9
    1f44:	63 e0       	ldi	r22, 0x03	; 3
    1f46:	e9 2e       	mov	r14, r25
    1f48:	0e 94 0e 05 	call	0xa1c	; 0xa1c <Pipe_ConfigurePipe>
    1f4c:	88 23       	and	r24, r24
    1f4e:	11 f4       	brne	.+4      	; 0x1f54 <HID_Host_ConfigurePipes+0x164>
    1f50:	83 e0       	ldi	r24, 0x03	; 3
    1f52:	24 c0       	rjmp	.+72     	; 0x1f9c <HID_Host_ConfigurePipes+0x1ac>
		                         DoubleBanked ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE)))
		{
			return HID_ENUMERROR_PipeConfigurationFailed;
		}
		
		if (InterruptPeriod)
    1f54:	ff 20       	and	r15, r15
    1f56:	11 f0       	breq	.+4      	; 0x1f5c <HID_Host_ConfigurePipes+0x16c>
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
    1f58:	f0 92 ad 00 	sts	0x00AD, r15
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    1f5c:	93 94       	inc	r9
    1f5e:	b7 e0       	ldi	r27, 0x07	; 7
    1f60:	9b 16       	cp	r9, r27
    1f62:	09 f6       	brne	.-126    	; 0x1ee6 <HID_Host_ConfigurePipes+0xf6>
		
		if (InterruptPeriod)
		  Pipe_SetInterruptPeriod(InterruptPeriod);
	}

	HIDInterfaceInfo->State.InterfaceNumber      = HIDInterface->InterfaceNumber;
    1f64:	f2 01       	movw	r30, r4
    1f66:	82 81       	ldd	r24, Z+2	; 0x02
    1f68:	d6 01       	movw	r26, r12
    1f6a:	18 96       	adiw	r26, 0x08	; 8
    1f6c:	8c 93       	st	X, r24
    1f6e:	18 97       	sbiw	r26, 0x08	; 8
	HIDInterfaceInfo->State.HIDReportSize        = LE16_TO_CPU(HIDDescriptor->HIDReportLength);
    1f70:	f1 01       	movw	r30, r2
    1f72:	87 81       	ldd	r24, Z+7	; 0x07
    1f74:	90 85       	ldd	r25, Z+8	; 0x08
    1f76:	51 96       	adiw	r26, 0x11	; 17
    1f78:	9c 93       	st	X, r25
    1f7a:	8e 93       	st	-X, r24
    1f7c:	50 97       	sbiw	r26, 0x10	; 16
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	d2 01       	movw	r26, r4
    1f82:	16 96       	adiw	r26, 0x06	; 6
    1f84:	8c 91       	ld	r24, X
    1f86:	81 11       	cpse	r24, r1
    1f88:	91 e0       	ldi	r25, 0x01	; 1
    1f8a:	f6 01       	movw	r30, r12
    1f8c:	95 87       	std	Z+13, r25	; 0x0d
	HIDInterfaceInfo->State.LargestReportSize    = 8;
    1f8e:	88 e0       	ldi	r24, 0x08	; 8
    1f90:	82 8b       	std	Z+18, r24	; 0x12
	HIDInterfaceInfo->State.IsActive             = true;
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	87 83       	std	Z+7, r24	; 0x07
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	01 c0       	rjmp	.+2      	; 0x1f9c <HID_Host_ConfigurePipes+0x1ac>

	return HID_ENUMERROR_NoError;
    1f9a:	82 e0       	ldi	r24, 0x02	; 2
}
    1f9c:	0f 90       	pop	r0
    1f9e:	0f 90       	pop	r0
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	cf 91       	pop	r28
    1fa6:	df 91       	pop	r29
    1fa8:	1f 91       	pop	r17
    1faa:	0f 91       	pop	r16
    1fac:	ff 90       	pop	r15
    1fae:	ef 90       	pop	r14
    1fb0:	df 90       	pop	r13
    1fb2:	cf 90       	pop	r12
    1fb4:	bf 90       	pop	r11
    1fb6:	af 90       	pop	r10
    1fb8:	9f 90       	pop	r9
    1fba:	8f 90       	pop	r8
    1fbc:	7f 90       	pop	r7
    1fbe:	6f 90       	pop	r6
    1fc0:	5f 90       	pop	r5
    1fc2:	4f 90       	pop	r4
    1fc4:	3f 90       	pop	r3
    1fc6:	2f 90       	pop	r2
    1fc8:	08 95       	ret

00001fca <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}

static uint8_t DCOMP_HID_Host_NextHIDInterfaceEndpoint(void* const CurrentDescriptor)
{
    1fca:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1fcc:	81 81       	ldd	r24, Z+1	; 0x01
    1fce:	85 30       	cpi	r24, 0x05	; 5
    1fd0:	31 f4       	brne	.+12     	; 0x1fde <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    1fd2:	82 81       	ldd	r24, Z+2	; 0x02
    1fd4:	0e 94 80 05 	call	0xb00	; 0xb00 <Pipe_IsEndpointBound>
    1fd8:	88 23       	and	r24, r24
    1fda:	29 f4       	brne	.+10     	; 0x1fe6 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1c>
    1fdc:	08 95       	ret
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    1fde:	84 30       	cpi	r24, 0x04	; 4
    1fe0:	11 f4       	brne	.+4      	; 0x1fe6 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1c>
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	08 95       	ret
    1fe6:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1fe8:	08 95       	ret

00001fea <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    1fea:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1fec:	80 91 c8 00 	lds	r24, 0x00C8
    1ff0:	85 ff       	sbrs	r24, 5
    1ff2:	fc cf       	rjmp	.-8      	; 0x1fec <Serial_putchar+0x2>
				UDR1 = DataByte;
    1ff4:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	08 95       	ret

00001ffe <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1ffe:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    2002:	87 fd       	sbrc	r24, 7
    2004:	03 c0       	rjmp	.+6      	; 0x200c <Serial_getchar+0xe>
    2006:	2e ef       	ldi	r18, 0xFE	; 254
    2008:	3f ef       	ldi	r19, 0xFF	; 255
    200a:	0b c0       	rjmp	.+22     	; 0x2022 <Serial_getchar+0x24>
    200c:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    2010:	87 fd       	sbrc	r24, 7
    2012:	03 c0       	rjmp	.+6      	; 0x201a <Serial_getchar+0x1c>
    2014:	2f ef       	ldi	r18, 0xFF	; 255
    2016:	3f ef       	ldi	r19, 0xFF	; 255
    2018:	04 c0       	rjmp	.+8      	; 0x2022 <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    201a:	80 91 ce 00 	lds	r24, 0x00CE
    201e:	28 2f       	mov	r18, r24
    2020:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    2022:	c9 01       	movw	r24, r18
    2024:	08 95       	ret

00002026 <printf_P>:
    2026:	df 93       	push	r29
    2028:	cf 93       	push	r28
    202a:	cd b7       	in	r28, 0x3d	; 61
    202c:	de b7       	in	r29, 0x3e	; 62
    202e:	fe 01       	movw	r30, r28
    2030:	35 96       	adiw	r30, 0x05	; 5
    2032:	61 91       	ld	r22, Z+
    2034:	71 91       	ld	r23, Z+
    2036:	a0 91 1b 05 	lds	r26, 0x051B
    203a:	b0 91 1c 05 	lds	r27, 0x051C
    203e:	13 96       	adiw	r26, 0x03	; 3
    2040:	8c 91       	ld	r24, X
    2042:	13 97       	sbiw	r26, 0x03	; 3
    2044:	88 60       	ori	r24, 0x08	; 8
    2046:	13 96       	adiw	r26, 0x03	; 3
    2048:	8c 93       	st	X, r24
    204a:	80 91 1b 05 	lds	r24, 0x051B
    204e:	90 91 1c 05 	lds	r25, 0x051C
    2052:	af 01       	movw	r20, r30
    2054:	3f d0       	rcall	.+126    	; 0x20d4 <vfprintf>
    2056:	e0 91 1b 05 	lds	r30, 0x051B
    205a:	f0 91 1c 05 	lds	r31, 0x051C
    205e:	23 81       	ldd	r18, Z+3	; 0x03
    2060:	27 7f       	andi	r18, 0xF7	; 247
    2062:	23 83       	std	Z+3, r18	; 0x03
    2064:	cf 91       	pop	r28
    2066:	df 91       	pop	r29
    2068:	08 95       	ret

0000206a <puts_P>:
    206a:	0f 93       	push	r16
    206c:	1f 93       	push	r17
    206e:	cf 93       	push	r28
    2070:	df 93       	push	r29
    2072:	ec 01       	movw	r28, r24
    2074:	e0 91 1b 05 	lds	r30, 0x051B
    2078:	f0 91 1c 05 	lds	r31, 0x051C
    207c:	83 81       	ldd	r24, Z+3	; 0x03
    207e:	81 ff       	sbrs	r24, 1
    2080:	21 c0       	rjmp	.+66     	; 0x20c4 <puts_P+0x5a>
    2082:	00 e0       	ldi	r16, 0x00	; 0
    2084:	10 e0       	ldi	r17, 0x00	; 0
    2086:	0e c0       	rjmp	.+28     	; 0x20a4 <puts_P+0x3a>
    2088:	e0 91 1b 05 	lds	r30, 0x051B
    208c:	f0 91 1c 05 	lds	r31, 0x051C
    2090:	20 85       	ldd	r18, Z+8	; 0x08
    2092:	31 85       	ldd	r19, Z+9	; 0x09
    2094:	bf 01       	movw	r22, r30
    2096:	f9 01       	movw	r30, r18
    2098:	09 95       	icall
    209a:	89 2b       	or	r24, r25
    209c:	11 f0       	breq	.+4      	; 0x20a2 <puts_P+0x38>
    209e:	0f ef       	ldi	r16, 0xFF	; 255
    20a0:	1f ef       	ldi	r17, 0xFF	; 255
    20a2:	21 96       	adiw	r28, 0x01	; 1
    20a4:	fe 01       	movw	r30, r28
    20a6:	84 91       	lpm	r24, Z+
    20a8:	88 23       	and	r24, r24
    20aa:	71 f7       	brne	.-36     	; 0x2088 <puts_P+0x1e>
    20ac:	e0 91 1b 05 	lds	r30, 0x051B
    20b0:	f0 91 1c 05 	lds	r31, 0x051C
    20b4:	20 85       	ldd	r18, Z+8	; 0x08
    20b6:	31 85       	ldd	r19, Z+9	; 0x09
    20b8:	8a e0       	ldi	r24, 0x0A	; 10
    20ba:	bf 01       	movw	r22, r30
    20bc:	f9 01       	movw	r30, r18
    20be:	09 95       	icall
    20c0:	89 2b       	or	r24, r25
    20c2:	11 f0       	breq	.+4      	; 0x20c8 <puts_P+0x5e>
    20c4:	0f ef       	ldi	r16, 0xFF	; 255
    20c6:	1f ef       	ldi	r17, 0xFF	; 255
    20c8:	c8 01       	movw	r24, r16
    20ca:	df 91       	pop	r29
    20cc:	cf 91       	pop	r28
    20ce:	1f 91       	pop	r17
    20d0:	0f 91       	pop	r16
    20d2:	08 95       	ret

000020d4 <vfprintf>:
    20d4:	2f 92       	push	r2
    20d6:	3f 92       	push	r3
    20d8:	4f 92       	push	r4
    20da:	5f 92       	push	r5
    20dc:	6f 92       	push	r6
    20de:	7f 92       	push	r7
    20e0:	8f 92       	push	r8
    20e2:	9f 92       	push	r9
    20e4:	af 92       	push	r10
    20e6:	bf 92       	push	r11
    20e8:	cf 92       	push	r12
    20ea:	df 92       	push	r13
    20ec:	ef 92       	push	r14
    20ee:	ff 92       	push	r15
    20f0:	0f 93       	push	r16
    20f2:	1f 93       	push	r17
    20f4:	df 93       	push	r29
    20f6:	cf 93       	push	r28
    20f8:	cd b7       	in	r28, 0x3d	; 61
    20fa:	de b7       	in	r29, 0x3e	; 62
    20fc:	2b 97       	sbiw	r28, 0x0b	; 11
    20fe:	0f b6       	in	r0, 0x3f	; 63
    2100:	f8 94       	cli
    2102:	de bf       	out	0x3e, r29	; 62
    2104:	0f be       	out	0x3f, r0	; 63
    2106:	cd bf       	out	0x3d, r28	; 61
    2108:	3c 01       	movw	r6, r24
    210a:	2b 01       	movw	r4, r22
    210c:	5a 01       	movw	r10, r20
    210e:	fc 01       	movw	r30, r24
    2110:	17 82       	std	Z+7, r1	; 0x07
    2112:	16 82       	std	Z+6, r1	; 0x06
    2114:	83 81       	ldd	r24, Z+3	; 0x03
    2116:	81 fd       	sbrc	r24, 1
    2118:	03 c0       	rjmp	.+6      	; 0x2120 <__stack+0x21>
    211a:	6f ef       	ldi	r22, 0xFF	; 255
    211c:	7f ef       	ldi	r23, 0xFF	; 255
    211e:	b9 c1       	rjmp	.+882    	; 0x2492 <__stack+0x393>
    2120:	9a e0       	ldi	r25, 0x0A	; 10
    2122:	89 2e       	mov	r8, r25
    2124:	1e 01       	movw	r2, r28
    2126:	08 94       	sec
    2128:	21 1c       	adc	r2, r1
    212a:	31 1c       	adc	r3, r1
    212c:	f3 01       	movw	r30, r6
    212e:	23 81       	ldd	r18, Z+3	; 0x03
    2130:	f2 01       	movw	r30, r4
    2132:	23 fd       	sbrc	r18, 3
    2134:	85 91       	lpm	r24, Z+
    2136:	23 ff       	sbrs	r18, 3
    2138:	81 91       	ld	r24, Z+
    213a:	2f 01       	movw	r4, r30
    213c:	88 23       	and	r24, r24
    213e:	09 f4       	brne	.+2      	; 0x2142 <__stack+0x43>
    2140:	a5 c1       	rjmp	.+842    	; 0x248c <__stack+0x38d>
    2142:	85 32       	cpi	r24, 0x25	; 37
    2144:	39 f4       	brne	.+14     	; 0x2154 <__stack+0x55>
    2146:	23 fd       	sbrc	r18, 3
    2148:	85 91       	lpm	r24, Z+
    214a:	23 ff       	sbrs	r18, 3
    214c:	81 91       	ld	r24, Z+
    214e:	2f 01       	movw	r4, r30
    2150:	85 32       	cpi	r24, 0x25	; 37
    2152:	21 f4       	brne	.+8      	; 0x215c <__stack+0x5d>
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	b3 01       	movw	r22, r6
    2158:	cc d1       	rcall	.+920    	; 0x24f2 <fputc>
    215a:	e8 cf       	rjmp	.-48     	; 0x212c <__stack+0x2d>
    215c:	98 2f       	mov	r25, r24
    215e:	ff 24       	eor	r15, r15
    2160:	ee 24       	eor	r14, r14
    2162:	99 24       	eor	r9, r9
    2164:	ff e1       	ldi	r31, 0x1F	; 31
    2166:	ff 15       	cp	r31, r15
    2168:	d0 f0       	brcs	.+52     	; 0x219e <__stack+0x9f>
    216a:	9b 32       	cpi	r25, 0x2B	; 43
    216c:	69 f0       	breq	.+26     	; 0x2188 <__stack+0x89>
    216e:	9c 32       	cpi	r25, 0x2C	; 44
    2170:	28 f4       	brcc	.+10     	; 0x217c <__stack+0x7d>
    2172:	90 32       	cpi	r25, 0x20	; 32
    2174:	59 f0       	breq	.+22     	; 0x218c <__stack+0x8d>
    2176:	93 32       	cpi	r25, 0x23	; 35
    2178:	91 f4       	brne	.+36     	; 0x219e <__stack+0x9f>
    217a:	0e c0       	rjmp	.+28     	; 0x2198 <__stack+0x99>
    217c:	9d 32       	cpi	r25, 0x2D	; 45
    217e:	49 f0       	breq	.+18     	; 0x2192 <__stack+0x93>
    2180:	90 33       	cpi	r25, 0x30	; 48
    2182:	69 f4       	brne	.+26     	; 0x219e <__stack+0x9f>
    2184:	41 e0       	ldi	r20, 0x01	; 1
    2186:	24 c0       	rjmp	.+72     	; 0x21d0 <__stack+0xd1>
    2188:	52 e0       	ldi	r21, 0x02	; 2
    218a:	f5 2a       	or	r15, r21
    218c:	84 e0       	ldi	r24, 0x04	; 4
    218e:	f8 2a       	or	r15, r24
    2190:	28 c0       	rjmp	.+80     	; 0x21e2 <__stack+0xe3>
    2192:	98 e0       	ldi	r25, 0x08	; 8
    2194:	f9 2a       	or	r15, r25
    2196:	25 c0       	rjmp	.+74     	; 0x21e2 <__stack+0xe3>
    2198:	e0 e1       	ldi	r30, 0x10	; 16
    219a:	fe 2a       	or	r15, r30
    219c:	22 c0       	rjmp	.+68     	; 0x21e2 <__stack+0xe3>
    219e:	f7 fc       	sbrc	r15, 7
    21a0:	29 c0       	rjmp	.+82     	; 0x21f4 <__stack+0xf5>
    21a2:	89 2f       	mov	r24, r25
    21a4:	80 53       	subi	r24, 0x30	; 48
    21a6:	8a 30       	cpi	r24, 0x0A	; 10
    21a8:	70 f4       	brcc	.+28     	; 0x21c6 <__stack+0xc7>
    21aa:	f6 fe       	sbrs	r15, 6
    21ac:	05 c0       	rjmp	.+10     	; 0x21b8 <__stack+0xb9>
    21ae:	98 9c       	mul	r9, r8
    21b0:	90 2c       	mov	r9, r0
    21b2:	11 24       	eor	r1, r1
    21b4:	98 0e       	add	r9, r24
    21b6:	15 c0       	rjmp	.+42     	; 0x21e2 <__stack+0xe3>
    21b8:	e8 9c       	mul	r14, r8
    21ba:	e0 2c       	mov	r14, r0
    21bc:	11 24       	eor	r1, r1
    21be:	e8 0e       	add	r14, r24
    21c0:	f0 e2       	ldi	r31, 0x20	; 32
    21c2:	ff 2a       	or	r15, r31
    21c4:	0e c0       	rjmp	.+28     	; 0x21e2 <__stack+0xe3>
    21c6:	9e 32       	cpi	r25, 0x2E	; 46
    21c8:	29 f4       	brne	.+10     	; 0x21d4 <__stack+0xd5>
    21ca:	f6 fc       	sbrc	r15, 6
    21cc:	5f c1       	rjmp	.+702    	; 0x248c <__stack+0x38d>
    21ce:	40 e4       	ldi	r20, 0x40	; 64
    21d0:	f4 2a       	or	r15, r20
    21d2:	07 c0       	rjmp	.+14     	; 0x21e2 <__stack+0xe3>
    21d4:	9c 36       	cpi	r25, 0x6C	; 108
    21d6:	19 f4       	brne	.+6      	; 0x21de <__stack+0xdf>
    21d8:	50 e8       	ldi	r21, 0x80	; 128
    21da:	f5 2a       	or	r15, r21
    21dc:	02 c0       	rjmp	.+4      	; 0x21e2 <__stack+0xe3>
    21de:	98 36       	cpi	r25, 0x68	; 104
    21e0:	49 f4       	brne	.+18     	; 0x21f4 <__stack+0xf5>
    21e2:	f2 01       	movw	r30, r4
    21e4:	23 fd       	sbrc	r18, 3
    21e6:	95 91       	lpm	r25, Z+
    21e8:	23 ff       	sbrs	r18, 3
    21ea:	91 91       	ld	r25, Z+
    21ec:	2f 01       	movw	r4, r30
    21ee:	99 23       	and	r25, r25
    21f0:	09 f0       	breq	.+2      	; 0x21f4 <__stack+0xf5>
    21f2:	b8 cf       	rjmp	.-144    	; 0x2164 <__stack+0x65>
    21f4:	89 2f       	mov	r24, r25
    21f6:	85 54       	subi	r24, 0x45	; 69
    21f8:	83 30       	cpi	r24, 0x03	; 3
    21fa:	18 f0       	brcs	.+6      	; 0x2202 <__stack+0x103>
    21fc:	80 52       	subi	r24, 0x20	; 32
    21fe:	83 30       	cpi	r24, 0x03	; 3
    2200:	38 f4       	brcc	.+14     	; 0x2210 <__stack+0x111>
    2202:	44 e0       	ldi	r20, 0x04	; 4
    2204:	50 e0       	ldi	r21, 0x00	; 0
    2206:	a4 0e       	add	r10, r20
    2208:	b5 1e       	adc	r11, r21
    220a:	5f e3       	ldi	r21, 0x3F	; 63
    220c:	59 83       	std	Y+1, r21	; 0x01
    220e:	0f c0       	rjmp	.+30     	; 0x222e <__stack+0x12f>
    2210:	93 36       	cpi	r25, 0x63	; 99
    2212:	31 f0       	breq	.+12     	; 0x2220 <__stack+0x121>
    2214:	93 37       	cpi	r25, 0x73	; 115
    2216:	79 f0       	breq	.+30     	; 0x2236 <__stack+0x137>
    2218:	93 35       	cpi	r25, 0x53	; 83
    221a:	09 f0       	breq	.+2      	; 0x221e <__stack+0x11f>
    221c:	52 c0       	rjmp	.+164    	; 0x22c2 <__stack+0x1c3>
    221e:	1f c0       	rjmp	.+62     	; 0x225e <__stack+0x15f>
    2220:	f5 01       	movw	r30, r10
    2222:	80 81       	ld	r24, Z
    2224:	89 83       	std	Y+1, r24	; 0x01
    2226:	42 e0       	ldi	r20, 0x02	; 2
    2228:	50 e0       	ldi	r21, 0x00	; 0
    222a:	a4 0e       	add	r10, r20
    222c:	b5 1e       	adc	r11, r21
    222e:	61 01       	movw	r12, r2
    2230:	01 e0       	ldi	r16, 0x01	; 1
    2232:	10 e0       	ldi	r17, 0x00	; 0
    2234:	11 c0       	rjmp	.+34     	; 0x2258 <__stack+0x159>
    2236:	f5 01       	movw	r30, r10
    2238:	c0 80       	ld	r12, Z
    223a:	d1 80       	ldd	r13, Z+1	; 0x01
    223c:	f6 fc       	sbrc	r15, 6
    223e:	03 c0       	rjmp	.+6      	; 0x2246 <__stack+0x147>
    2240:	6f ef       	ldi	r22, 0xFF	; 255
    2242:	7f ef       	ldi	r23, 0xFF	; 255
    2244:	02 c0       	rjmp	.+4      	; 0x224a <__stack+0x14b>
    2246:	69 2d       	mov	r22, r9
    2248:	70 e0       	ldi	r23, 0x00	; 0
    224a:	42 e0       	ldi	r20, 0x02	; 2
    224c:	50 e0       	ldi	r21, 0x00	; 0
    224e:	a4 0e       	add	r10, r20
    2250:	b5 1e       	adc	r11, r21
    2252:	c6 01       	movw	r24, r12
    2254:	43 d1       	rcall	.+646    	; 0x24dc <strnlen>
    2256:	8c 01       	movw	r16, r24
    2258:	5f e7       	ldi	r21, 0x7F	; 127
    225a:	f5 22       	and	r15, r21
    225c:	13 c0       	rjmp	.+38     	; 0x2284 <__stack+0x185>
    225e:	f5 01       	movw	r30, r10
    2260:	c0 80       	ld	r12, Z
    2262:	d1 80       	ldd	r13, Z+1	; 0x01
    2264:	f6 fc       	sbrc	r15, 6
    2266:	03 c0       	rjmp	.+6      	; 0x226e <__stack+0x16f>
    2268:	6f ef       	ldi	r22, 0xFF	; 255
    226a:	7f ef       	ldi	r23, 0xFF	; 255
    226c:	02 c0       	rjmp	.+4      	; 0x2272 <__stack+0x173>
    226e:	69 2d       	mov	r22, r9
    2270:	70 e0       	ldi	r23, 0x00	; 0
    2272:	42 e0       	ldi	r20, 0x02	; 2
    2274:	50 e0       	ldi	r21, 0x00	; 0
    2276:	a4 0e       	add	r10, r20
    2278:	b5 1e       	adc	r11, r21
    227a:	c6 01       	movw	r24, r12
    227c:	24 d1       	rcall	.+584    	; 0x24c6 <strnlen_P>
    227e:	8c 01       	movw	r16, r24
    2280:	50 e8       	ldi	r21, 0x80	; 128
    2282:	f5 2a       	or	r15, r21
    2284:	f3 fe       	sbrs	r15, 3
    2286:	06 c0       	rjmp	.+12     	; 0x2294 <__stack+0x195>
    2288:	18 c0       	rjmp	.+48     	; 0x22ba <__stack+0x1bb>
    228a:	80 e2       	ldi	r24, 0x20	; 32
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	b3 01       	movw	r22, r6
    2290:	30 d1       	rcall	.+608    	; 0x24f2 <fputc>
    2292:	ea 94       	dec	r14
    2294:	8e 2d       	mov	r24, r14
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	08 17       	cp	r16, r24
    229a:	19 07       	cpc	r17, r25
    229c:	b0 f3       	brcs	.-20     	; 0x228a <__stack+0x18b>
    229e:	0d c0       	rjmp	.+26     	; 0x22ba <__stack+0x1bb>
    22a0:	f6 01       	movw	r30, r12
    22a2:	f7 fc       	sbrc	r15, 7
    22a4:	85 91       	lpm	r24, Z+
    22a6:	f7 fe       	sbrs	r15, 7
    22a8:	81 91       	ld	r24, Z+
    22aa:	6f 01       	movw	r12, r30
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	b3 01       	movw	r22, r6
    22b0:	20 d1       	rcall	.+576    	; 0x24f2 <fputc>
    22b2:	e1 10       	cpse	r14, r1
    22b4:	ea 94       	dec	r14
    22b6:	01 50       	subi	r16, 0x01	; 1
    22b8:	10 40       	sbci	r17, 0x00	; 0
    22ba:	01 15       	cp	r16, r1
    22bc:	11 05       	cpc	r17, r1
    22be:	81 f7       	brne	.-32     	; 0x22a0 <__stack+0x1a1>
    22c0:	e2 c0       	rjmp	.+452    	; 0x2486 <__stack+0x387>
    22c2:	94 36       	cpi	r25, 0x64	; 100
    22c4:	11 f0       	breq	.+4      	; 0x22ca <__stack+0x1cb>
    22c6:	99 36       	cpi	r25, 0x69	; 105
    22c8:	61 f5       	brne	.+88     	; 0x2322 <__stack+0x223>
    22ca:	f7 fe       	sbrs	r15, 7
    22cc:	08 c0       	rjmp	.+16     	; 0x22de <__stack+0x1df>
    22ce:	f5 01       	movw	r30, r10
    22d0:	20 81       	ld	r18, Z
    22d2:	31 81       	ldd	r19, Z+1	; 0x01
    22d4:	42 81       	ldd	r20, Z+2	; 0x02
    22d6:	53 81       	ldd	r21, Z+3	; 0x03
    22d8:	84 e0       	ldi	r24, 0x04	; 4
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	0a c0       	rjmp	.+20     	; 0x22f2 <__stack+0x1f3>
    22de:	f5 01       	movw	r30, r10
    22e0:	80 81       	ld	r24, Z
    22e2:	91 81       	ldd	r25, Z+1	; 0x01
    22e4:	9c 01       	movw	r18, r24
    22e6:	44 27       	eor	r20, r20
    22e8:	37 fd       	sbrc	r19, 7
    22ea:	40 95       	com	r20
    22ec:	54 2f       	mov	r21, r20
    22ee:	82 e0       	ldi	r24, 0x02	; 2
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	a8 0e       	add	r10, r24
    22f4:	b9 1e       	adc	r11, r25
    22f6:	9f e6       	ldi	r25, 0x6F	; 111
    22f8:	f9 22       	and	r15, r25
    22fa:	57 ff       	sbrs	r21, 7
    22fc:	09 c0       	rjmp	.+18     	; 0x2310 <__stack+0x211>
    22fe:	50 95       	com	r21
    2300:	40 95       	com	r20
    2302:	30 95       	com	r19
    2304:	21 95       	neg	r18
    2306:	3f 4f       	sbci	r19, 0xFF	; 255
    2308:	4f 4f       	sbci	r20, 0xFF	; 255
    230a:	5f 4f       	sbci	r21, 0xFF	; 255
    230c:	e0 e8       	ldi	r30, 0x80	; 128
    230e:	fe 2a       	or	r15, r30
    2310:	ca 01       	movw	r24, r20
    2312:	b9 01       	movw	r22, r18
    2314:	a1 01       	movw	r20, r2
    2316:	2a e0       	ldi	r18, 0x0A	; 10
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	17 d1       	rcall	.+558    	; 0x254a <__ultoa_invert>
    231c:	d8 2e       	mov	r13, r24
    231e:	d2 18       	sub	r13, r2
    2320:	3f c0       	rjmp	.+126    	; 0x23a0 <__stack+0x2a1>
    2322:	95 37       	cpi	r25, 0x75	; 117
    2324:	29 f4       	brne	.+10     	; 0x2330 <__stack+0x231>
    2326:	1f 2d       	mov	r17, r15
    2328:	1f 7e       	andi	r17, 0xEF	; 239
    232a:	2a e0       	ldi	r18, 0x0A	; 10
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	1d c0       	rjmp	.+58     	; 0x236a <__stack+0x26b>
    2330:	1f 2d       	mov	r17, r15
    2332:	19 7f       	andi	r17, 0xF9	; 249
    2334:	9f 36       	cpi	r25, 0x6F	; 111
    2336:	61 f0       	breq	.+24     	; 0x2350 <__stack+0x251>
    2338:	90 37       	cpi	r25, 0x70	; 112
    233a:	20 f4       	brcc	.+8      	; 0x2344 <__stack+0x245>
    233c:	98 35       	cpi	r25, 0x58	; 88
    233e:	09 f0       	breq	.+2      	; 0x2342 <__stack+0x243>
    2340:	a5 c0       	rjmp	.+330    	; 0x248c <__stack+0x38d>
    2342:	0f c0       	rjmp	.+30     	; 0x2362 <__stack+0x263>
    2344:	90 37       	cpi	r25, 0x70	; 112
    2346:	39 f0       	breq	.+14     	; 0x2356 <__stack+0x257>
    2348:	98 37       	cpi	r25, 0x78	; 120
    234a:	09 f0       	breq	.+2      	; 0x234e <__stack+0x24f>
    234c:	9f c0       	rjmp	.+318    	; 0x248c <__stack+0x38d>
    234e:	04 c0       	rjmp	.+8      	; 0x2358 <__stack+0x259>
    2350:	28 e0       	ldi	r18, 0x08	; 8
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	0a c0       	rjmp	.+20     	; 0x236a <__stack+0x26b>
    2356:	10 61       	ori	r17, 0x10	; 16
    2358:	14 fd       	sbrc	r17, 4
    235a:	14 60       	ori	r17, 0x04	; 4
    235c:	20 e1       	ldi	r18, 0x10	; 16
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	04 c0       	rjmp	.+8      	; 0x236a <__stack+0x26b>
    2362:	14 fd       	sbrc	r17, 4
    2364:	16 60       	ori	r17, 0x06	; 6
    2366:	20 e1       	ldi	r18, 0x10	; 16
    2368:	32 e0       	ldi	r19, 0x02	; 2
    236a:	17 ff       	sbrs	r17, 7
    236c:	08 c0       	rjmp	.+16     	; 0x237e <__stack+0x27f>
    236e:	f5 01       	movw	r30, r10
    2370:	60 81       	ld	r22, Z
    2372:	71 81       	ldd	r23, Z+1	; 0x01
    2374:	82 81       	ldd	r24, Z+2	; 0x02
    2376:	93 81       	ldd	r25, Z+3	; 0x03
    2378:	44 e0       	ldi	r20, 0x04	; 4
    237a:	50 e0       	ldi	r21, 0x00	; 0
    237c:	08 c0       	rjmp	.+16     	; 0x238e <__stack+0x28f>
    237e:	f5 01       	movw	r30, r10
    2380:	80 81       	ld	r24, Z
    2382:	91 81       	ldd	r25, Z+1	; 0x01
    2384:	bc 01       	movw	r22, r24
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	42 e0       	ldi	r20, 0x02	; 2
    238c:	50 e0       	ldi	r21, 0x00	; 0
    238e:	a4 0e       	add	r10, r20
    2390:	b5 1e       	adc	r11, r21
    2392:	a1 01       	movw	r20, r2
    2394:	da d0       	rcall	.+436    	; 0x254a <__ultoa_invert>
    2396:	d8 2e       	mov	r13, r24
    2398:	d2 18       	sub	r13, r2
    239a:	8f e7       	ldi	r24, 0x7F	; 127
    239c:	f8 2e       	mov	r15, r24
    239e:	f1 22       	and	r15, r17
    23a0:	f6 fe       	sbrs	r15, 6
    23a2:	0b c0       	rjmp	.+22     	; 0x23ba <__stack+0x2bb>
    23a4:	5e ef       	ldi	r21, 0xFE	; 254
    23a6:	f5 22       	and	r15, r21
    23a8:	d9 14       	cp	r13, r9
    23aa:	38 f4       	brcc	.+14     	; 0x23ba <__stack+0x2bb>
    23ac:	f4 fe       	sbrs	r15, 4
    23ae:	07 c0       	rjmp	.+14     	; 0x23be <__stack+0x2bf>
    23b0:	f2 fc       	sbrc	r15, 2
    23b2:	05 c0       	rjmp	.+10     	; 0x23be <__stack+0x2bf>
    23b4:	8f ee       	ldi	r24, 0xEF	; 239
    23b6:	f8 22       	and	r15, r24
    23b8:	02 c0       	rjmp	.+4      	; 0x23be <__stack+0x2bf>
    23ba:	1d 2d       	mov	r17, r13
    23bc:	01 c0       	rjmp	.+2      	; 0x23c0 <__stack+0x2c1>
    23be:	19 2d       	mov	r17, r9
    23c0:	f4 fe       	sbrs	r15, 4
    23c2:	0d c0       	rjmp	.+26     	; 0x23de <__stack+0x2df>
    23c4:	fe 01       	movw	r30, r28
    23c6:	ed 0d       	add	r30, r13
    23c8:	f1 1d       	adc	r31, r1
    23ca:	80 81       	ld	r24, Z
    23cc:	80 33       	cpi	r24, 0x30	; 48
    23ce:	19 f4       	brne	.+6      	; 0x23d6 <__stack+0x2d7>
    23d0:	99 ee       	ldi	r25, 0xE9	; 233
    23d2:	f9 22       	and	r15, r25
    23d4:	08 c0       	rjmp	.+16     	; 0x23e6 <__stack+0x2e7>
    23d6:	1f 5f       	subi	r17, 0xFF	; 255
    23d8:	f2 fe       	sbrs	r15, 2
    23da:	05 c0       	rjmp	.+10     	; 0x23e6 <__stack+0x2e7>
    23dc:	03 c0       	rjmp	.+6      	; 0x23e4 <__stack+0x2e5>
    23de:	8f 2d       	mov	r24, r15
    23e0:	86 78       	andi	r24, 0x86	; 134
    23e2:	09 f0       	breq	.+2      	; 0x23e6 <__stack+0x2e7>
    23e4:	1f 5f       	subi	r17, 0xFF	; 255
    23e6:	0f 2d       	mov	r16, r15
    23e8:	f3 fc       	sbrc	r15, 3
    23ea:	13 c0       	rjmp	.+38     	; 0x2412 <__stack+0x313>
    23ec:	f0 fe       	sbrs	r15, 0
    23ee:	0e c0       	rjmp	.+28     	; 0x240c <__stack+0x30d>
    23f0:	1e 15       	cp	r17, r14
    23f2:	10 f0       	brcs	.+4      	; 0x23f8 <__stack+0x2f9>
    23f4:	9d 2c       	mov	r9, r13
    23f6:	0a c0       	rjmp	.+20     	; 0x240c <__stack+0x30d>
    23f8:	9d 2c       	mov	r9, r13
    23fa:	9e 0c       	add	r9, r14
    23fc:	91 1a       	sub	r9, r17
    23fe:	1e 2d       	mov	r17, r14
    2400:	05 c0       	rjmp	.+10     	; 0x240c <__stack+0x30d>
    2402:	80 e2       	ldi	r24, 0x20	; 32
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	b3 01       	movw	r22, r6
    2408:	74 d0       	rcall	.+232    	; 0x24f2 <fputc>
    240a:	1f 5f       	subi	r17, 0xFF	; 255
    240c:	1e 15       	cp	r17, r14
    240e:	c8 f3       	brcs	.-14     	; 0x2402 <__stack+0x303>
    2410:	04 c0       	rjmp	.+8      	; 0x241a <__stack+0x31b>
    2412:	1e 15       	cp	r17, r14
    2414:	10 f4       	brcc	.+4      	; 0x241a <__stack+0x31b>
    2416:	e1 1a       	sub	r14, r17
    2418:	01 c0       	rjmp	.+2      	; 0x241c <__stack+0x31d>
    241a:	ee 24       	eor	r14, r14
    241c:	04 ff       	sbrs	r16, 4
    241e:	0e c0       	rjmp	.+28     	; 0x243c <__stack+0x33d>
    2420:	80 e3       	ldi	r24, 0x30	; 48
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	b3 01       	movw	r22, r6
    2426:	65 d0       	rcall	.+202    	; 0x24f2 <fputc>
    2428:	02 ff       	sbrs	r16, 2
    242a:	1b c0       	rjmp	.+54     	; 0x2462 <__stack+0x363>
    242c:	01 fd       	sbrc	r16, 1
    242e:	03 c0       	rjmp	.+6      	; 0x2436 <__stack+0x337>
    2430:	88 e7       	ldi	r24, 0x78	; 120
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	0e c0       	rjmp	.+28     	; 0x2452 <__stack+0x353>
    2436:	88 e5       	ldi	r24, 0x58	; 88
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	0b c0       	rjmp	.+22     	; 0x2452 <__stack+0x353>
    243c:	80 2f       	mov	r24, r16
    243e:	86 78       	andi	r24, 0x86	; 134
    2440:	81 f0       	breq	.+32     	; 0x2462 <__stack+0x363>
    2442:	01 ff       	sbrs	r16, 1
    2444:	02 c0       	rjmp	.+4      	; 0x244a <__stack+0x34b>
    2446:	8b e2       	ldi	r24, 0x2B	; 43
    2448:	01 c0       	rjmp	.+2      	; 0x244c <__stack+0x34d>
    244a:	80 e2       	ldi	r24, 0x20	; 32
    244c:	f7 fc       	sbrc	r15, 7
    244e:	8d e2       	ldi	r24, 0x2D	; 45
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	b3 01       	movw	r22, r6
    2454:	4e d0       	rcall	.+156    	; 0x24f2 <fputc>
    2456:	05 c0       	rjmp	.+10     	; 0x2462 <__stack+0x363>
    2458:	80 e3       	ldi	r24, 0x30	; 48
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	b3 01       	movw	r22, r6
    245e:	49 d0       	rcall	.+146    	; 0x24f2 <fputc>
    2460:	9a 94       	dec	r9
    2462:	d9 14       	cp	r13, r9
    2464:	c8 f3       	brcs	.-14     	; 0x2458 <__stack+0x359>
    2466:	da 94       	dec	r13
    2468:	f1 01       	movw	r30, r2
    246a:	ed 0d       	add	r30, r13
    246c:	f1 1d       	adc	r31, r1
    246e:	80 81       	ld	r24, Z
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	b3 01       	movw	r22, r6
    2474:	3e d0       	rcall	.+124    	; 0x24f2 <fputc>
    2476:	dd 20       	and	r13, r13
    2478:	b1 f7       	brne	.-20     	; 0x2466 <__stack+0x367>
    247a:	05 c0       	rjmp	.+10     	; 0x2486 <__stack+0x387>
    247c:	80 e2       	ldi	r24, 0x20	; 32
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	b3 01       	movw	r22, r6
    2482:	37 d0       	rcall	.+110    	; 0x24f2 <fputc>
    2484:	ea 94       	dec	r14
    2486:	ee 20       	and	r14, r14
    2488:	c9 f7       	brne	.-14     	; 0x247c <__stack+0x37d>
    248a:	50 ce       	rjmp	.-864    	; 0x212c <__stack+0x2d>
    248c:	f3 01       	movw	r30, r6
    248e:	66 81       	ldd	r22, Z+6	; 0x06
    2490:	77 81       	ldd	r23, Z+7	; 0x07
    2492:	cb 01       	movw	r24, r22
    2494:	2b 96       	adiw	r28, 0x0b	; 11
    2496:	0f b6       	in	r0, 0x3f	; 63
    2498:	f8 94       	cli
    249a:	de bf       	out	0x3e, r29	; 62
    249c:	0f be       	out	0x3f, r0	; 63
    249e:	cd bf       	out	0x3d, r28	; 61
    24a0:	cf 91       	pop	r28
    24a2:	df 91       	pop	r29
    24a4:	1f 91       	pop	r17
    24a6:	0f 91       	pop	r16
    24a8:	ff 90       	pop	r15
    24aa:	ef 90       	pop	r14
    24ac:	df 90       	pop	r13
    24ae:	cf 90       	pop	r12
    24b0:	bf 90       	pop	r11
    24b2:	af 90       	pop	r10
    24b4:	9f 90       	pop	r9
    24b6:	8f 90       	pop	r8
    24b8:	7f 90       	pop	r7
    24ba:	6f 90       	pop	r6
    24bc:	5f 90       	pop	r5
    24be:	4f 90       	pop	r4
    24c0:	3f 90       	pop	r3
    24c2:	2f 90       	pop	r2
    24c4:	08 95       	ret

000024c6 <strnlen_P>:
    24c6:	fc 01       	movw	r30, r24
    24c8:	05 90       	lpm	r0, Z+
    24ca:	61 50       	subi	r22, 0x01	; 1
    24cc:	70 40       	sbci	r23, 0x00	; 0
    24ce:	01 10       	cpse	r0, r1
    24d0:	d8 f7       	brcc	.-10     	; 0x24c8 <strnlen_P+0x2>
    24d2:	80 95       	com	r24
    24d4:	90 95       	com	r25
    24d6:	8e 0f       	add	r24, r30
    24d8:	9f 1f       	adc	r25, r31
    24da:	08 95       	ret

000024dc <strnlen>:
    24dc:	fc 01       	movw	r30, r24
    24de:	61 50       	subi	r22, 0x01	; 1
    24e0:	70 40       	sbci	r23, 0x00	; 0
    24e2:	01 90       	ld	r0, Z+
    24e4:	01 10       	cpse	r0, r1
    24e6:	d8 f7       	brcc	.-10     	; 0x24de <strnlen+0x2>
    24e8:	80 95       	com	r24
    24ea:	90 95       	com	r25
    24ec:	8e 0f       	add	r24, r30
    24ee:	9f 1f       	adc	r25, r31
    24f0:	08 95       	ret

000024f2 <fputc>:
    24f2:	0f 93       	push	r16
    24f4:	1f 93       	push	r17
    24f6:	cf 93       	push	r28
    24f8:	df 93       	push	r29
    24fa:	8c 01       	movw	r16, r24
    24fc:	eb 01       	movw	r28, r22
    24fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2500:	81 ff       	sbrs	r24, 1
    2502:	1b c0       	rjmp	.+54     	; 0x253a <fputc+0x48>
    2504:	82 ff       	sbrs	r24, 2
    2506:	0d c0       	rjmp	.+26     	; 0x2522 <fputc+0x30>
    2508:	2e 81       	ldd	r18, Y+6	; 0x06
    250a:	3f 81       	ldd	r19, Y+7	; 0x07
    250c:	8c 81       	ldd	r24, Y+4	; 0x04
    250e:	9d 81       	ldd	r25, Y+5	; 0x05
    2510:	28 17       	cp	r18, r24
    2512:	39 07       	cpc	r19, r25
    2514:	64 f4       	brge	.+24     	; 0x252e <fputc+0x3c>
    2516:	e8 81       	ld	r30, Y
    2518:	f9 81       	ldd	r31, Y+1	; 0x01
    251a:	01 93       	st	Z+, r16
    251c:	f9 83       	std	Y+1, r31	; 0x01
    251e:	e8 83       	st	Y, r30
    2520:	06 c0       	rjmp	.+12     	; 0x252e <fputc+0x3c>
    2522:	e8 85       	ldd	r30, Y+8	; 0x08
    2524:	f9 85       	ldd	r31, Y+9	; 0x09
    2526:	80 2f       	mov	r24, r16
    2528:	09 95       	icall
    252a:	89 2b       	or	r24, r25
    252c:	31 f4       	brne	.+12     	; 0x253a <fputc+0x48>
    252e:	8e 81       	ldd	r24, Y+6	; 0x06
    2530:	9f 81       	ldd	r25, Y+7	; 0x07
    2532:	01 96       	adiw	r24, 0x01	; 1
    2534:	9f 83       	std	Y+7, r25	; 0x07
    2536:	8e 83       	std	Y+6, r24	; 0x06
    2538:	02 c0       	rjmp	.+4      	; 0x253e <fputc+0x4c>
    253a:	0f ef       	ldi	r16, 0xFF	; 255
    253c:	1f ef       	ldi	r17, 0xFF	; 255
    253e:	c8 01       	movw	r24, r16
    2540:	df 91       	pop	r29
    2542:	cf 91       	pop	r28
    2544:	1f 91       	pop	r17
    2546:	0f 91       	pop	r16
    2548:	08 95       	ret

0000254a <__ultoa_invert>:
    254a:	fa 01       	movw	r30, r20
    254c:	aa 27       	eor	r26, r26
    254e:	28 30       	cpi	r18, 0x08	; 8
    2550:	51 f1       	breq	.+84     	; 0x25a6 <__ultoa_invert+0x5c>
    2552:	20 31       	cpi	r18, 0x10	; 16
    2554:	81 f1       	breq	.+96     	; 0x25b6 <__ultoa_invert+0x6c>
    2556:	e8 94       	clt
    2558:	6f 93       	push	r22
    255a:	6e 7f       	andi	r22, 0xFE	; 254
    255c:	6e 5f       	subi	r22, 0xFE	; 254
    255e:	7f 4f       	sbci	r23, 0xFF	; 255
    2560:	8f 4f       	sbci	r24, 0xFF	; 255
    2562:	9f 4f       	sbci	r25, 0xFF	; 255
    2564:	af 4f       	sbci	r26, 0xFF	; 255
    2566:	b1 e0       	ldi	r27, 0x01	; 1
    2568:	3e d0       	rcall	.+124    	; 0x25e6 <__ultoa_invert+0x9c>
    256a:	b4 e0       	ldi	r27, 0x04	; 4
    256c:	3c d0       	rcall	.+120    	; 0x25e6 <__ultoa_invert+0x9c>
    256e:	67 0f       	add	r22, r23
    2570:	78 1f       	adc	r23, r24
    2572:	89 1f       	adc	r24, r25
    2574:	9a 1f       	adc	r25, r26
    2576:	a1 1d       	adc	r26, r1
    2578:	68 0f       	add	r22, r24
    257a:	79 1f       	adc	r23, r25
    257c:	8a 1f       	adc	r24, r26
    257e:	91 1d       	adc	r25, r1
    2580:	a1 1d       	adc	r26, r1
    2582:	6a 0f       	add	r22, r26
    2584:	71 1d       	adc	r23, r1
    2586:	81 1d       	adc	r24, r1
    2588:	91 1d       	adc	r25, r1
    258a:	a1 1d       	adc	r26, r1
    258c:	20 d0       	rcall	.+64     	; 0x25ce <__ultoa_invert+0x84>
    258e:	09 f4       	brne	.+2      	; 0x2592 <__ultoa_invert+0x48>
    2590:	68 94       	set
    2592:	3f 91       	pop	r19
    2594:	2a e0       	ldi	r18, 0x0A	; 10
    2596:	26 9f       	mul	r18, r22
    2598:	11 24       	eor	r1, r1
    259a:	30 19       	sub	r19, r0
    259c:	30 5d       	subi	r19, 0xD0	; 208
    259e:	31 93       	st	Z+, r19
    25a0:	de f6       	brtc	.-74     	; 0x2558 <__ultoa_invert+0xe>
    25a2:	cf 01       	movw	r24, r30
    25a4:	08 95       	ret
    25a6:	46 2f       	mov	r20, r22
    25a8:	47 70       	andi	r20, 0x07	; 7
    25aa:	40 5d       	subi	r20, 0xD0	; 208
    25ac:	41 93       	st	Z+, r20
    25ae:	b3 e0       	ldi	r27, 0x03	; 3
    25b0:	0f d0       	rcall	.+30     	; 0x25d0 <__ultoa_invert+0x86>
    25b2:	c9 f7       	brne	.-14     	; 0x25a6 <__ultoa_invert+0x5c>
    25b4:	f6 cf       	rjmp	.-20     	; 0x25a2 <__ultoa_invert+0x58>
    25b6:	46 2f       	mov	r20, r22
    25b8:	4f 70       	andi	r20, 0x0F	; 15
    25ba:	40 5d       	subi	r20, 0xD0	; 208
    25bc:	4a 33       	cpi	r20, 0x3A	; 58
    25be:	18 f0       	brcs	.+6      	; 0x25c6 <__ultoa_invert+0x7c>
    25c0:	49 5d       	subi	r20, 0xD9	; 217
    25c2:	31 fd       	sbrc	r19, 1
    25c4:	40 52       	subi	r20, 0x20	; 32
    25c6:	41 93       	st	Z+, r20
    25c8:	02 d0       	rcall	.+4      	; 0x25ce <__ultoa_invert+0x84>
    25ca:	a9 f7       	brne	.-22     	; 0x25b6 <__ultoa_invert+0x6c>
    25cc:	ea cf       	rjmp	.-44     	; 0x25a2 <__ultoa_invert+0x58>
    25ce:	b4 e0       	ldi	r27, 0x04	; 4
    25d0:	a6 95       	lsr	r26
    25d2:	97 95       	ror	r25
    25d4:	87 95       	ror	r24
    25d6:	77 95       	ror	r23
    25d8:	67 95       	ror	r22
    25da:	ba 95       	dec	r27
    25dc:	c9 f7       	brne	.-14     	; 0x25d0 <__ultoa_invert+0x86>
    25de:	00 97       	sbiw	r24, 0x00	; 0
    25e0:	61 05       	cpc	r22, r1
    25e2:	71 05       	cpc	r23, r1
    25e4:	08 95       	ret
    25e6:	9b 01       	movw	r18, r22
    25e8:	ac 01       	movw	r20, r24
    25ea:	0a 2e       	mov	r0, r26
    25ec:	06 94       	lsr	r0
    25ee:	57 95       	ror	r21
    25f0:	47 95       	ror	r20
    25f2:	37 95       	ror	r19
    25f4:	27 95       	ror	r18
    25f6:	ba 95       	dec	r27
    25f8:	c9 f7       	brne	.-14     	; 0x25ec <__ultoa_invert+0xa2>
    25fa:	62 0f       	add	r22, r18
    25fc:	73 1f       	adc	r23, r19
    25fe:	84 1f       	adc	r24, r20
    2600:	95 1f       	adc	r25, r21
    2602:	a0 1d       	adc	r26, r0
    2604:	08 95       	ret

00002606 <_exit>:
    2606:	f8 94       	cli

00002608 <__stop_program>:
    2608:	ff cf       	rjmp	.-2      	; 0x2608 <__stop_program>
