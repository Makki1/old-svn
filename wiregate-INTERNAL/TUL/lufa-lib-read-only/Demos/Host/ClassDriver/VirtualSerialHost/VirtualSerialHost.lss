
VirtualSerialHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00001aca  00001b5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001aca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800128  00800128  00001b86  2**0
                  ALLOC
  3 .stab         00002208  00000000  00000000  00001b88  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dff  00000000  00000000  00003d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000006c8  00000000  00000000  00004b8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000f8e  00000000  00000000  00005257  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000b5f2  00000000  00000000  000061e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000027fd  00000000  00000000  000117d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007cb1  00000000  00000000  00013fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b10  00000000  00000000  0001bc88  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004579  00000000  00000000  0001c798  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000056b2  00000000  00000000  00020d11  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000798  00000000  00000000  000263c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       0:	02 c1       	rjmp	.+516    	; 0x206 <__ctors_end>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       2:	00 00       	nop
	return USB_Host_SendControlRequest(NULL);
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
       4:	1e c1       	rjmp	.+572    	; 0x242 <__bad_interrupt>
}

#if defined(FDEV_SETUP_STREAM)
void CDC_Host_CreateStream(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo,
                           FILE* const Stream)
{
       6:	00 00       	nop

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       8:	1c c1       	rjmp	.+568    	; 0x242 <__bad_interrupt>
       a:	00 00       	nop
       c:	1a c1       	rjmp	.+564    	; 0x242 <__bad_interrupt>
       e:	00 00       	nop
      10:	18 c1       	rjmp	.+560    	; 0x242 <__bad_interrupt>
      12:	00 00       	nop
      14:	16 c1       	rjmp	.+556    	; 0x242 <__bad_interrupt>
      16:	00 00       	nop
      18:	14 c1       	rjmp	.+552    	; 0x242 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	12 c1       	rjmp	.+548    	; 0x242 <__bad_interrupt>
      1e:	00 00       	nop
      20:	10 c1       	rjmp	.+544    	; 0x242 <__bad_interrupt>
      22:	00 00       	nop
      24:	0e c1       	rjmp	.+540    	; 0x242 <__bad_interrupt>
      26:	00 00       	nop
      28:	2b c5       	rjmp	.+2646   	; 0xa80 <__vector_10>
      2a:	00 00       	nop
      2c:	0a c1       	rjmp	.+532    	; 0x242 <__bad_interrupt>
      2e:	00 00       	nop
      30:	08 c1       	rjmp	.+528    	; 0x242 <__bad_interrupt>
      32:	00 00       	nop
      34:	06 c1       	rjmp	.+524    	; 0x242 <__bad_interrupt>
      36:	00 00       	nop
      38:	04 c1       	rjmp	.+520    	; 0x242 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	02 c1       	rjmp	.+516    	; 0x242 <__bad_interrupt>
      3e:	00 00       	nop
      40:	00 c1       	rjmp	.+512    	; 0x242 <__bad_interrupt>
      42:	00 00       	nop
      44:	fe c0       	rjmp	.+508    	; 0x242 <__bad_interrupt>
      46:	00 00       	nop
      48:	fc c0       	rjmp	.+504    	; 0x242 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fa c0       	rjmp	.+500    	; 0x242 <__bad_interrupt>
      4e:	00 00       	nop
      50:	f8 c0       	rjmp	.+496    	; 0x242 <__bad_interrupt>
      52:	00 00       	nop
      54:	f6 c0       	rjmp	.+492    	; 0x242 <__bad_interrupt>
      56:	00 00       	nop
      58:	f4 c0       	rjmp	.+488    	; 0x242 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f2 c0       	rjmp	.+484    	; 0x242 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f0 c0       	rjmp	.+480    	; 0x242 <__bad_interrupt>
      62:	00 00       	nop
      64:	ee c0       	rjmp	.+476    	; 0x242 <__bad_interrupt>
      66:	00 00       	nop
      68:	ec c0       	rjmp	.+472    	; 0x242 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ea c0       	rjmp	.+468    	; 0x242 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e8 c0       	rjmp	.+464    	; 0x242 <__bad_interrupt>
      72:	00 00       	nop
      74:	e6 c0       	rjmp	.+460    	; 0x242 <__bad_interrupt>
      76:	00 00       	nop
      78:	e4 c0       	rjmp	.+456    	; 0x242 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e2 c0       	rjmp	.+452    	; 0x242 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e0 c0       	rjmp	.+448    	; 0x242 <__bad_interrupt>
      82:	00 00       	nop
      84:	de c0       	rjmp	.+444    	; 0x242 <__bad_interrupt>
      86:	00 00       	nop
      88:	dc c0       	rjmp	.+440    	; 0x242 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	da c0       	rjmp	.+436    	; 0x242 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d8 c0       	rjmp	.+432    	; 0x242 <__bad_interrupt>
      92:	00 00       	nop
      94:	d6 c0       	rjmp	.+428    	; 0x242 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4566>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4558>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4549>:
     11d:	43 44 43 20 44 65 76 69 63 65 20 45 6e 75 6d 65     CDC Device Enume
     12d:	72 61 74 65 64 2e 0d 0a 00                          rated....

00000136 <__c.4547>:
     136:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     146:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     156:	6f 6e 2e 0d 0a 00                                   on....

0000015c <__c.4545>:
     15c:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     16c:	4e 6f 74 20 61 20 56 61 6c 69 64 20 43 44 43 20     Not a Valid CDC 
     17c:	43 6c 61 73 73 20 44 65 76 69 63 65 2e 0d 0a 00     Class Device....

0000018c <__c.4543>:
     18c:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     19c:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1ac:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001b9 <__c.4536>:
     1b9:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1c9:	68 65 64 2e 0d 0a 00                                hed....

000001d0 <__c.4531>:
     1d0:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     1e0:	0d 0a 00                                            ...

000001e3 <__c.4510>:
     1e3:	1b 5b 33 36 6d 43 44 43 20 48 6f 73 74 20 44 65     .[36mCDC Host De
     1f3:	6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b 33     mo running....[3
     203:	37 6d 00                                            7m.

00000206 <__ctors_end>:
     206:	11 24       	eor	r1, r1
     208:	1f be       	out	0x3f, r1	; 63
     20a:	cf ef       	ldi	r28, 0xFF	; 255
     20c:	d0 e2       	ldi	r29, 0x20	; 32
     20e:	de bf       	out	0x3e, r29	; 62
     210:	cd bf       	out	0x3d, r28	; 61

00000212 <__do_copy_data>:
     212:	11 e0       	ldi	r17, 0x01	; 1
     214:	a0 e0       	ldi	r26, 0x00	; 0
     216:	b1 e0       	ldi	r27, 0x01	; 1
     218:	ea ec       	ldi	r30, 0xCA	; 202
     21a:	fa e1       	ldi	r31, 0x1A	; 26
     21c:	00 e0       	ldi	r16, 0x00	; 0
     21e:	0b bf       	out	0x3b, r16	; 59
     220:	02 c0       	rjmp	.+4      	; 0x226 <__do_copy_data+0x14>
     222:	07 90       	elpm	r0, Z+
     224:	0d 92       	st	X+, r0
     226:	a8 32       	cpi	r26, 0x28	; 40
     228:	b1 07       	cpc	r27, r17
     22a:	d9 f7       	brne	.-10     	; 0x222 <__do_copy_data+0x10>

0000022c <__do_clear_bss>:
     22c:	11 e0       	ldi	r17, 0x01	; 1
     22e:	a8 e2       	ldi	r26, 0x28	; 40
     230:	b1 e0       	ldi	r27, 0x01	; 1
     232:	01 c0       	rjmp	.+2      	; 0x236 <.do_clear_bss_start>

00000234 <.do_clear_bss_loop>:
     234:	1d 92       	st	X+, r1

00000236 <.do_clear_bss_start>:
     236:	aa 34       	cpi	r26, 0x4A	; 74
     238:	b1 07       	cpc	r27, r17
     23a:	e1 f7       	brne	.-8      	; 0x234 <.do_clear_bss_loop>
     23c:	08 d1       	rcall	.+528    	; 0x44e <main>
     23e:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <_exit>

00000242 <__bad_interrupt>:
     242:	de ce       	rjmp	.-580    	; 0x0 <__vectors>

00000244 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     244:	90 91 35 01 	lds	r25, 0x0135
     248:	2d b7       	in	r18, 0x3d	; 61
     24a:	3e b7       	in	r19, 0x3e	; 62
     24c:	28 50       	subi	r18, 0x08	; 8
     24e:	30 40       	sbci	r19, 0x00	; 0
     250:	0f b6       	in	r0, 0x3f	; 63
     252:	f8 94       	cli
     254:	3e bf       	out	0x3e, r19	; 62
     256:	0f be       	out	0x3f, r0	; 63
     258:	2d bf       	out	0x3d, r18	; 61
     25a:	ed b7       	in	r30, 0x3d	; 61
     25c:	fe b7       	in	r31, 0x3e	; 62
     25e:	31 96       	adiw	r30, 0x01	; 1
     260:	28 e9       	ldi	r18, 0x98	; 152
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	ad b7       	in	r26, 0x3d	; 61
     266:	be b7       	in	r27, 0x3e	; 62
     268:	12 96       	adiw	r26, 0x02	; 2
     26a:	3c 93       	st	X, r19
     26c:	2e 93       	st	-X, r18
     26e:	11 97       	sbiw	r26, 0x01	; 1
     270:	82 83       	std	Z+2, r24	; 0x02
     272:	13 82       	std	Z+3, r1	; 0x03
     274:	64 83       	std	Z+4, r22	; 0x04
     276:	15 82       	std	Z+5, r1	; 0x05
     278:	96 83       	std	Z+6, r25	; 0x06
     27a:	17 82       	std	Z+7, r1	; 0x07
     27c:	0e 94 9f 0a 	call	0x153e	; 0x153e <printf_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     280:	8b b1       	in	r24, 0x0b	; 11
     282:	8f 70       	andi	r24, 0x0F	; 15
     284:	80 69       	ori	r24, 0x90	; 144
     286:	8b b9       	out	0x0b, r24	; 11
     288:	2d b7       	in	r18, 0x3d	; 61
     28a:	3e b7       	in	r19, 0x3e	; 62
     28c:	28 5f       	subi	r18, 0xF8	; 248
     28e:	3f 4f       	sbci	r19, 0xFF	; 255
     290:	0f b6       	in	r0, 0x3f	; 63
     292:	f8 94       	cli
     294:	3e bf       	out	0x3e, r19	; 62
     296:	0f be       	out	0x3f, r0	; 63
     298:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     29a:	08 95       	ret

0000029c <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     29c:	1f 93       	push	r17
     29e:	18 2f       	mov	r17, r24
	USB_Disable();
     2a0:	ca d3       	rcall	.+1940   	; 0xa36 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     2a2:	00 d0       	rcall	.+0      	; 0x2a4 <EVENT_USB_Host_HostError+0x8>
     2a4:	00 d0       	rcall	.+0      	; 0x2a6 <EVENT_USB_Host_HostError+0xa>
     2a6:	ed b7       	in	r30, 0x3d	; 61
     2a8:	fe b7       	in	r31, 0x3e	; 62
     2aa:	31 96       	adiw	r30, 0x01	; 1
     2ac:	8e ee       	ldi	r24, 0xEE	; 238
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	ad b7       	in	r26, 0x3d	; 61
     2b2:	be b7       	in	r27, 0x3e	; 62
     2b4:	12 96       	adiw	r26, 0x02	; 2
     2b6:	9c 93       	st	X, r25
     2b8:	8e 93       	st	-X, r24
     2ba:	11 97       	sbiw	r26, 0x01	; 1
     2bc:	12 83       	std	Z+2, r17	; 0x02
     2be:	13 82       	std	Z+3, r1	; 0x03
     2c0:	0e 94 9f 0a 	call	0x153e	; 0x153e <printf_P>
     2c4:	8b b1       	in	r24, 0x0b	; 11
     2c6:	8f 70       	andi	r24, 0x0F	; 15
     2c8:	80 69       	ori	r24, 0x90	; 144
     2ca:	8b b9       	out	0x0b, r24	; 11
     2cc:	0f 90       	pop	r0
     2ce:	0f 90       	pop	r0
     2d0:	0f 90       	pop	r0
     2d2:	0f 90       	pop	r0
     2d4:	ff cf       	rjmp	.-2      	; 0x2d4 <EVENT_USB_Host_HostError+0x38>

000002d6 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     2d6:	89 eb       	ldi	r24, 0xB9	; 185
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	0e 94 c1 0a 	call	0x1582	; 0x1582 <puts_P>
     2de:	8b b1       	in	r24, 0x0b	; 11
     2e0:	8f 70       	andi	r24, 0x0F	; 15
     2e2:	80 61       	ori	r24, 0x10	; 16
     2e4:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     2e6:	08 95       	ret

000002e8 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     2e8:	80 ed       	ldi	r24, 0xD0	; 208
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	0e 94 c1 0a 	call	0x1582	; 0x1582 <puts_P>
     2f0:	8b b1       	in	r24, 0x0b	; 11
     2f2:	8f 70       	andi	r24, 0x0F	; 15
     2f4:	80 6a       	ori	r24, 0xA0	; 160
     2f6:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     2f8:	08 95       	ret

000002fa <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     2fa:	0f 93       	push	r16
     2fc:	1f 93       	push	r17
     2fe:	df 93       	push	r29
     300:	cf 93       	push	r28
     302:	cd b7       	in	r28, 0x3d	; 61
     304:	de b7       	in	r29, 0x3e	; 62
     306:	c2 50       	subi	r28, 0x02	; 2
     308:	d2 40       	sbci	r29, 0x02	; 2
     30a:	0f b6       	in	r0, 0x3f	; 63
     30c:	f8 94       	cli
     30e:	de bf       	out	0x3e, r29	; 62
     310:	0f be       	out	0x3f, r0	; 63
     312:	cd bf       	out	0x3d, r28	; 61
     314:	8b b1       	in	r24, 0x0b	; 11
     316:	8f 70       	andi	r24, 0x0F	; 15
     318:	80 6a       	ori	r24, 0xA0	; 160
     31a:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     31c:	8e 01       	movw	r16, r28
     31e:	0d 5f       	subi	r16, 0xFD	; 253
     320:	1f 4f       	sbci	r17, 0xFF	; 255
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	be 01       	movw	r22, r28
     326:	6f 5f       	subi	r22, 0xFF	; 255
     328:	7f 4f       	sbci	r23, 0xFF	; 255
     32a:	a8 01       	movw	r20, r16
     32c:	20 e0       	ldi	r18, 0x00	; 0
     32e:	32 e0       	ldi	r19, 0x02	; 2
     330:	d5 d4       	rcall	.+2474   	; 0xcdc <USB_Host_GetDeviceConfigDescriptor>
     332:	88 23       	and	r24, r24
     334:	19 f0       	breq	.+6      	; 0x33c <EVENT_USB_Host_DeviceEnumerationComplete+0x42>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     336:	8c e8       	ldi	r24, 0x8C	; 140
     338:	91 e0       	ldi	r25, 0x01	; 1
     33a:	11 c0       	rjmp	.+34     	; 0x35e <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (CDC_Host_ConfigurePipes(&VirtualSerial_CDC_Interface,
     33c:	69 81       	ldd	r22, Y+1	; 0x01
     33e:	7a 81       	ldd	r23, Y+2	; 0x02
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	91 e0       	ldi	r25, 0x01	; 1
     344:	a8 01       	movw	r20, r16
     346:	b3 d7       	rcall	.+3942   	; 0x12ae <CDC_Host_ConfigurePipes>
     348:	88 23       	and	r24, r24
     34a:	19 f0       	breq	.+6      	; 0x352 <EVENT_USB_Host_DeviceEnumerationComplete+0x58>
	                            ConfigDescriptorSize, ConfigDescriptorData) != CDC_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid CDC Class Device.\r\n"));
     34c:	8c e5       	ldi	r24, 0x5C	; 92
     34e:	91 e0       	ldi	r25, 0x01	; 1
     350:	06 c0       	rjmp	.+12     	; 0x35e <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	65 d6       	rcall	.+3274   	; 0x1020 <USB_Host_SetDeviceConfiguration>
     356:	88 23       	and	r24, r24
     358:	41 f0       	breq	.+16     	; 0x36a <EVENT_USB_Host_DeviceEnumerationComplete+0x70>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     35a:	86 e3       	ldi	r24, 0x36	; 54
     35c:	91 e0       	ldi	r25, 0x01	; 1
     35e:	0e 94 c1 0a 	call	0x1582	; 0x1582 <puts_P>
     362:	8b b1       	in	r24, 0x0b	; 11
     364:	8f 70       	andi	r24, 0x0F	; 15
     366:	80 69       	ori	r24, 0x90	; 144
     368:	07 c0       	rjmp	.+14     	; 0x378 <EVENT_USB_Host_DeviceEnumerationComplete+0x7e>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	puts_P(PSTR("CDC Device Enumerated.\r\n"));
     36a:	8d e1       	ldi	r24, 0x1D	; 29
     36c:	91 e0       	ldi	r25, 0x01	; 1
     36e:	0e 94 c1 0a 	call	0x1582	; 0x1582 <puts_P>
     372:	8b b1       	in	r24, 0x0b	; 11
     374:	8f 70       	andi	r24, 0x0F	; 15
     376:	80 66       	ori	r24, 0x60	; 96
     378:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     37a:	ce 5f       	subi	r28, 0xFE	; 254
     37c:	dd 4f       	sbci	r29, 0xFD	; 253
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	f8 94       	cli
     382:	de bf       	out	0x3e, r29	; 62
     384:	0f be       	out	0x3f, r0	; 63
     386:	cd bf       	out	0x3d, r28	; 61
     388:	cf 91       	pop	r28
     38a:	df 91       	pop	r29
     38c:	1f 91       	pop	r17
     38e:	0f 91       	pop	r16
     390:	08 95       	ret

00000392 <CDCHost_Task>:
/** Task to manage an enumerated USB CDC device once connected, to print received data
 *  from the device to the serial port.
 */
void CDCHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     392:	80 91 35 01 	lds	r24, 0x0135
     396:	8b 30       	cpi	r24, 0x0B	; 11
     398:	81 f4       	brne	.+32     	; 0x3ba <CDCHost_Task+0x28>
	  return;

	if (CDC_Host_BytesReceived(&VirtualSerial_CDC_Interface))
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	96 d6       	rcall	.+3372   	; 0x10cc <CDC_Host_BytesReceived>
     3a0:	89 2b       	or	r24, r25
     3a2:	59 f0       	breq	.+22     	; 0x3ba <CDCHost_Task+0x28>
	{
		/* Echo received bytes from the attached device through the USART */
		int16_t ReceivedByte = CDC_Host_ReceiveByte(&VirtualSerial_CDC_Interface);
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	91 e0       	ldi	r25, 0x01	; 1
     3a8:	c4 d6       	rcall	.+3464   	; 0x1132 <CDC_Host_ReceiveByte>
		if (!(ReceivedByte < 0))
     3aa:	97 fd       	sbrc	r25, 7
     3ac:	06 c0       	rjmp	.+12     	; 0x3ba <CDCHost_Task+0x28>
		  putchar(ReceivedByte);
     3ae:	60 91 46 01 	lds	r22, 0x0146
     3b2:	70 91 47 01 	lds	r23, 0x0147
     3b6:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <fputc>
     3ba:	08 95       	ret

000003bc <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     3bc:	84 b7       	in	r24, 0x34	; 52
     3be:	87 7f       	andi	r24, 0xF7	; 247
     3c0:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     3c2:	28 e1       	ldi	r18, 0x18	; 24
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	f8 94       	cli
     3c8:	20 93 60 00 	sts	0x0060, r18
     3cc:	10 92 60 00 	sts	0x0060, r1
     3d0:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	80 e8       	ldi	r24, 0x80	; 128
     3d6:	0f b6       	in	r0, 0x3f	; 63
     3d8:	f8 94       	cli
     3da:	80 93 61 00 	sts	0x0061, r24
     3de:	90 93 61 00 	sts	0x0061, r25
     3e2:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     3e4:	83 e3       	ldi	r24, 0x33	; 51
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	90 93 cd 00 	sts	0x00CD, r25
     3ec:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     3f0:	86 e0       	ldi	r24, 0x06	; 6
     3f2:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     3f6:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     3fa:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     3fe:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     400:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     402:	8a b1       	in	r24, 0x0a	; 10
     404:	80 6f       	ori	r24, 0xF0	; 240
     406:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     408:	8b b1       	in	r24, 0x0b	; 11
     40a:	8f 70       	andi	r24, 0x0F	; 15
     40c:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     40e:	0a d3       	rcall	.+1556   	; 0xa24 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     410:	e6 e3       	ldi	r30, 0x36	; 54
     412:	f1 e0       	ldi	r31, 0x01	; 1
     414:	f0 93 45 01 	sts	0x0145, r31
     418:	e0 93 44 01 	sts	0x0144, r30
					stdout = Stream;
     41c:	f0 93 47 01 	sts	0x0147, r31
     420:	e0 93 46 01 	sts	0x0146, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     424:	8e e0       	ldi	r24, 0x0E	; 14
     426:	df 01       	movw	r26, r30
     428:	1d 92       	st	X+, r1
     42a:	8a 95       	dec	r24
     42c:	e9 f7       	brne	.-6      	; 0x428 <SetupHardware+0x6c>
     42e:	83 e0       	ldi	r24, 0x03	; 3
     430:	80 93 39 01 	sts	0x0139, r24
     434:	85 e5       	ldi	r24, 0x55	; 85
     436:	9a e0       	ldi	r25, 0x0A	; 10
     438:	90 93 3f 01 	sts	0x013F, r25
     43c:	80 93 3e 01 	sts	0x013E, r24
     440:	8f e5       	ldi	r24, 0x5F	; 95
     442:	9a e0       	ldi	r25, 0x0A	; 10
     444:	90 93 41 01 	sts	0x0141, r25
     448:	80 93 40 01 	sts	0x0140, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     44c:	08 95       	ret

0000044e <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     44e:	b6 df       	rcall	.-148    	; 0x3bc <SetupHardware>
	
	puts_P(PSTR(ESC_FG_CYAN "CDC Host Demo running.\r\n" ESC_FG_WHITE));
     450:	83 ee       	ldi	r24, 0xE3	; 227
     452:	91 e0       	ldi	r25, 0x01	; 1
     454:	0e 94 c1 0a 	call	0x1582	; 0x1582 <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     458:	8b b1       	in	r24, 0x0b	; 11
     45a:	8f 70       	andi	r24, 0x0F	; 15
     45c:	80 61       	ori	r24, 0x10	; 16
     45e:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     460:	78 94       	sei

	for (;;)
	{
		CDCHost_Task();
     462:	97 df       	rcall	.-210    	; 0x392 <CDCHost_Task>

		CDC_Host_USBTask(&VirtualSerial_CDC_Interface);
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	91 e0       	ldi	r25, 0x01	; 1
     468:	ce d6       	rcall	.+3484   	; 0x1206 <CDC_Host_USBTask>
		USB_USBTask();
     46a:	ff d5       	rcall	.+3070   	; 0x106a <USB_USBTask>
     46c:	fa cf       	rjmp	.-12     	; 0x462 <main+0x14>

0000046e <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     46e:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     470:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     474:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     478:	80 91 a0 00 	lds	r24, 0x00A0
     47c:	8f 7d       	andi	r24, 0xDF	; 223
     47e:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     482:	80 91 9f 00 	lds	r24, 0x009F
     486:	8f 7d       	andi	r24, 0xDF	; 223
     488:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     48c:	80 91 9e 00 	lds	r24, 0x009E
     490:	81 60       	ori	r24, 0x01	; 1
     492:	80 93 9e 00 	sts	0x009E, r24
     496:	28 c0       	rjmp	.+80     	; 0x4e8 <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     498:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     49c:	85 ff       	sbrs	r24, 5
     49e:	06 c0       	rjmp	.+12     	; 0x4ac <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     4a0:	80 91 9f 00 	lds	r24, 0x009F
     4a4:	8f 7d       	andi	r24, 0xDF	; 223
     4a6:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     4aa:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     4ac:	80 91 35 01 	lds	r24, 0x0135
     4b0:	81 30       	cpi	r24, 0x01	; 1
     4b2:	11 f4       	brne	.+4      	; 0x4b8 <USB_Host_WaitMS+0x4a>
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	1a c0       	rjmp	.+52     	; 0x4ec <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     4b8:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     4bc:	84 ff       	sbrs	r24, 4
     4be:	09 c0       	rjmp	.+18     	; 0x4d2 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     4c0:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     4c4:	80 91 a6 00 	lds	r24, 0x00A6
     4c8:	8f 7e       	andi	r24, 0xEF	; 239
     4ca:	80 93 a6 00 	sts	0x00A6, r24
     4ce:	92 e0       	ldi	r25, 0x02	; 2
     4d0:	0d c0       	rjmp	.+26     	; 0x4ec <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     4d2:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     4d6:	81 ff       	sbrs	r24, 1
     4d8:	07 c0       	rjmp	.+14     	; 0x4e8 <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     4da:	80 91 a6 00 	lds	r24, 0x00A6
     4de:	8d 7f       	andi	r24, 0xFD	; 253
     4e0:	80 93 a6 00 	sts	0x00A6, r24
     4e4:	93 e0       	ldi	r25, 0x03	; 3
     4e6:	02 c0       	rjmp	.+4      	; 0x4ec <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     4e8:	99 23       	and	r25, r25
     4ea:	b1 f6       	brne	.-84     	; 0x498 <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     4ec:	20 fd       	sbrc	r18, 0
     4ee:	05 c0       	rjmp	.+10     	; 0x4fa <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     4f0:	80 91 9e 00 	lds	r24, 0x009E
     4f4:	8e 7f       	andi	r24, 0xFE	; 254
     4f6:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     4fa:	35 ff       	sbrs	r19, 5
     4fc:	05 c0       	rjmp	.+10     	; 0x508 <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     4fe:	80 91 a0 00 	lds	r24, 0x00A0
     502:	80 62       	ori	r24, 0x20	; 32
     504:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     508:	89 2f       	mov	r24, r25
     50a:	08 95       	ret

0000050c <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     50c:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     510:	80 91 a0 00 	lds	r24, 0x00A0
     514:	8d 7f       	andi	r24, 0xFD	; 253
     516:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     51a:	80 91 9e 00 	lds	r24, 0x009E
     51e:	82 60       	ori	r24, 0x02	; 2
     520:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     524:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     528:	81 fd       	sbrc	r24, 1
     52a:	fc cf       	rjmp	.-8      	; 0x524 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     52c:	80 91 9e 00 	lds	r24, 0x009E
     530:	81 60       	ori	r24, 0x01	; 1
     532:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     536:	10 92 2b 01 	sts	0x012B, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     53a:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     53e:	80 91 a0 00 	lds	r24, 0x00A0
     542:	8f 7d       	andi	r24, 0xDF	; 223
     544:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     548:	80 91 9f 00 	lds	r24, 0x009F
     54c:	8f 7d       	andi	r24, 0xDF	; 223
     54e:	80 93 9f 00 	sts	0x009F, r24
     552:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     554:	40 ed       	ldi	r20, 0xD0	; 208
     556:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     558:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     55c:	85 ff       	sbrs	r24, 5
     55e:	0b c0       	rjmp	.+22     	; 0x576 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     560:	80 91 9f 00 	lds	r24, 0x009F
     564:	8f 7d       	andi	r24, 0xDF	; 223
     566:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     56a:	80 91 9f 00 	lds	r24, 0x009F
     56e:	8d 7f       	andi	r24, 0xFD	; 253
     570:	80 93 9f 00 	sts	0x009F, r24
     574:	05 c0       	rjmp	.+10     	; 0x580 <USB_Host_ResetDevice+0x74>
     576:	ca 01       	movw	r24, r20
     578:	01 97       	sbiw	r24, 0x01	; 1
     57a:	f1 f7       	brne	.-4      	; 0x578 <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     57c:	21 50       	subi	r18, 0x01	; 1
     57e:	61 f7       	brne	.-40     	; 0x558 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     580:	35 ff       	sbrs	r19, 5
     582:	05 c0       	rjmp	.+10     	; 0x58e <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     584:	80 91 a0 00 	lds	r24, 0x00A0
     588:	80 62       	ori	r24, 0x20	; 32
     58a:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     58e:	60 fd       	sbrc	r22, 0
     590:	05 c0       	rjmp	.+10     	; 0x59c <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     592:	80 91 9e 00 	lds	r24, 0x009E
     596:	8e 7f       	andi	r24, 0xFE	; 254
     598:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     59c:	80 91 a0 00 	lds	r24, 0x00A0
     5a0:	82 60       	ori	r24, 0x02	; 2
     5a2:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     5a6:	08 95       	ret

000005a8 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     5a8:	ef 92       	push	r14
     5aa:	0f 93       	push	r16
     5ac:	1f 93       	push	r17
     5ae:	df 93       	push	r29
     5b0:	cf 93       	push	r28
     5b2:	cd b7       	in	r28, 0x3d	; 61
     5b4:	de b7       	in	r29, 0x3e	; 62
     5b6:	28 97       	sbiw	r28, 0x08	; 8
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	f8 94       	cli
     5bc:	de bf       	out	0x3e, r29	; 62
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     5c2:	80 91 35 01 	lds	r24, 0x0135
     5c6:	85 30       	cpi	r24, 0x05	; 5
     5c8:	09 f4       	brne	.+2      	; 0x5cc <USB_Host_ProcessNextHostState+0x24>
     5ca:	94 c0       	rjmp	.+296    	; 0x6f4 <USB_Host_ProcessNextHostState+0x14c>
     5cc:	86 30       	cpi	r24, 0x06	; 6
     5ce:	68 f4       	brcc	.+26     	; 0x5ea <USB_Host_ProcessNextHostState+0x42>
     5d0:	82 30       	cpi	r24, 0x02	; 2
     5d2:	b9 f1       	breq	.+110    	; 0x642 <USB_Host_ProcessNextHostState+0x9a>
     5d4:	83 30       	cpi	r24, 0x03	; 3
     5d6:	18 f4       	brcc	.+6      	; 0x5de <USB_Host_ProcessNextHostState+0x36>
     5d8:	88 23       	and	r24, r24
     5da:	a1 f0       	breq	.+40     	; 0x604 <USB_Host_ProcessNextHostState+0x5c>
     5dc:	04 c1       	rjmp	.+520    	; 0x7e6 <USB_Host_ProcessNextHostState+0x23e>
     5de:	83 30       	cpi	r24, 0x03	; 3
     5e0:	d1 f1       	breq	.+116    	; 0x656 <USB_Host_ProcessNextHostState+0xae>
     5e2:	84 30       	cpi	r24, 0x04	; 4
     5e4:	09 f0       	breq	.+2      	; 0x5e8 <USB_Host_ProcessNextHostState+0x40>
     5e6:	ff c0       	rjmp	.+510    	; 0x7e6 <USB_Host_ProcessNextHostState+0x23e>
     5e8:	5d c0       	rjmp	.+186    	; 0x6a4 <USB_Host_ProcessNextHostState+0xfc>
     5ea:	87 30       	cpi	r24, 0x07	; 7
     5ec:	09 f4       	brne	.+2      	; 0x5f0 <USB_Host_ProcessNextHostState+0x48>
     5ee:	9b c0       	rjmp	.+310    	; 0x726 <USB_Host_ProcessNextHostState+0x17e>
     5f0:	87 30       	cpi	r24, 0x07	; 7
     5f2:	08 f4       	brcc	.+2      	; 0x5f6 <USB_Host_ProcessNextHostState+0x4e>
     5f4:	8a c0       	rjmp	.+276    	; 0x70a <USB_Host_ProcessNextHostState+0x162>
     5f6:	88 30       	cpi	r24, 0x08	; 8
     5f8:	09 f4       	brne	.+2      	; 0x5fc <USB_Host_ProcessNextHostState+0x54>
     5fa:	b3 c0       	rjmp	.+358    	; 0x762 <USB_Host_ProcessNextHostState+0x1ba>
     5fc:	89 30       	cpi	r24, 0x09	; 9
     5fe:	09 f0       	breq	.+2      	; 0x602 <USB_Host_ProcessNextHostState+0x5a>
     600:	f2 c0       	rjmp	.+484    	; 0x7e6 <USB_Host_ProcessNextHostState+0x23e>
     602:	d7 c0       	rjmp	.+430    	; 0x7b2 <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     604:	00 91 29 01 	lds	r16, 0x0129
     608:	10 91 2a 01 	lds	r17, 0x012A
     60c:	01 15       	cp	r16, r1
     60e:	11 05       	cpc	r17, r1
     610:	09 f4       	brne	.+2      	; 0x614 <USB_Host_ProcessNextHostState+0x6c>
     612:	e9 c0       	rjmp	.+466    	; 0x7e6 <USB_Host_ProcessNextHostState+0x23e>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	2b df       	rcall	.-426    	; 0x46e <USB_Host_WaitMS>
     618:	68 2f       	mov	r22, r24
     61a:	88 23       	and	r24, r24
     61c:	31 f0       	breq	.+12     	; 0x62a <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
     61e:	80 91 28 01 	lds	r24, 0x0128
     622:	80 93 35 01 	sts	0x0135, r24
     626:	91 e0       	ldi	r25, 0x01	; 1
     628:	da c0       	rjmp	.+436    	; 0x7de <USB_Host_ProcessNextHostState+0x236>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     62a:	c8 01       	movw	r24, r16
     62c:	01 97       	sbiw	r24, 0x01	; 1
     62e:	90 93 2a 01 	sts	0x012A, r25
     632:	80 93 29 01 	sts	0x0129, r24
     636:	89 2b       	or	r24, r25
     638:	09 f0       	breq	.+2      	; 0x63c <USB_Host_ProcessNextHostState+0x94>
     63a:	d5 c0       	rjmp	.+426    	; 0x7e6 <USB_Host_ProcessNextHostState+0x23e>
				  USB_HostState = PostWaitState;
     63c:	80 91 28 01 	lds	r24, 0x0128
     640:	07 c0       	rjmp	.+14     	; 0x650 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     642:	88 ee       	ldi	r24, 0xE8	; 232
     644:	93 e0       	ldi	r25, 0x03	; 3
     646:	90 93 2a 01 	sts	0x012A, r25
     64a:	80 93 29 01 	sts	0x0129, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     64e:	83 e0       	ldi	r24, 0x03	; 3
     650:	80 93 35 01 	sts	0x0135, r24
     654:	c8 c0       	rjmp	.+400    	; 0x7e6 <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     656:	80 91 29 01 	lds	r24, 0x0129
     65a:	90 91 2a 01 	lds	r25, 0x012A
     65e:	01 97       	sbiw	r24, 0x01	; 1
     660:	90 93 2a 01 	sts	0x012A, r25
     664:	80 93 29 01 	sts	0x0129, r24
     668:	01 96       	adiw	r24, 0x01	; 1
     66a:	29 f0       	breq	.+10     	; 0x676 <USB_Host_ProcessNextHostState+0xce>
     66c:	80 ed       	ldi	r24, 0xD0	; 208
     66e:	97 e0       	ldi	r25, 0x07	; 7
     670:	01 97       	sbiw	r24, 0x01	; 1
     672:	f1 f7       	brne	.-4      	; 0x670 <USB_Host_ProcessNextHostState+0xc8>
     674:	b8 c0       	rjmp	.+368    	; 0x7e6 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     676:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     678:	80 91 d8 00 	lds	r24, 0x00D8
     67c:	80 61       	ori	r24, 0x10	; 16
     67e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     682:	80 91 dd 00 	lds	r24, 0x00DD
     686:	8b 7f       	andi	r24, 0xFB	; 251
     688:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     68c:	80 91 d7 00 	lds	r24, 0x00D7
     690:	80 61       	ori	r24, 0x10	; 16
     692:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     696:	80 91 dd 00 	lds	r24, 0x00DD
     69a:	82 60       	ori	r24, 0x02	; 2
     69c:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     6a0:	84 e0       	ldi	r24, 0x04	; 4
     6a2:	d6 cf       	rjmp	.-84     	; 0x650 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     6a4:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     6a8:	80 ff       	sbrs	r24, 0
     6aa:	9d c0       	rjmp	.+314    	; 0x7e6 <USB_Host_ProcessNextHostState+0x23e>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     6ac:	80 91 9f 00 	lds	r24, 0x009F
     6b0:	8e 7f       	andi	r24, 0xFE	; 254
     6b2:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     6b6:	80 91 9f 00 	lds	r24, 0x009F
     6ba:	8d 7f       	andi	r24, 0xFD	; 253
     6bc:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     6c0:	80 91 df 00 	lds	r24, 0x00DF
     6c4:	8d 7f       	andi	r24, 0xFD	; 253
     6c6:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     6ca:	80 91 de 00 	lds	r24, 0x00DE
     6ce:	82 60       	ori	r24, 0x02	; 2
     6d0:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6d4:	80 91 9e 00 	lds	r24, 0x009E
     6d8:	81 60       	ori	r24, 0x01	; 1
     6da:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     6de:	ed d0       	rcall	.+474    	; 0x8ba <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     6e0:	10 92 35 01 	sts	0x0135, r1
     6e4:	84 e6       	ldi	r24, 0x64	; 100
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	90 93 2a 01 	sts	0x012A, r25
     6ec:	80 93 29 01 	sts	0x0129, r24
     6f0:	85 e0       	ldi	r24, 0x05	; 5
     6f2:	5c c0       	rjmp	.+184    	; 0x7ac <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     6f4:	0b df       	rcall	.-490    	; 0x50c <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     6f6:	10 92 35 01 	sts	0x0135, r1
     6fa:	88 ec       	ldi	r24, 0xC8	; 200
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	90 93 2a 01 	sts	0x012A, r25
     702:	80 93 29 01 	sts	0x0129, r24
     706:	86 e0       	ldi	r24, 0x06	; 6
     708:	51 c0       	rjmp	.+162    	; 0x7ac <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	60 e0       	ldi	r22, 0x00	; 0
     70e:	40 e0       	ldi	r20, 0x00	; 0
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	00 e4       	ldi	r16, 0x40	; 64
     714:	10 e0       	ldi	r17, 0x00	; 0
     716:	ee 24       	eor	r14, r14
     718:	72 d0       	rcall	.+228    	; 0x7fe <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     71a:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     71e:	87 ff       	sbrs	r24, 7
     720:	5c c0       	rjmp	.+184    	; 0x7da <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     722:	87 e0       	ldi	r24, 0x07	; 7
     724:	95 cf       	rjmp	.-214    	; 0x650 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     726:	ad e2       	ldi	r26, 0x2D	; 45
     728:	b1 e0       	ldi	r27, 0x01	; 1
     72a:	ef e1       	ldi	r30, 0x1F	; 31
     72c:	f1 e0       	ldi	r31, 0x01	; 1
     72e:	88 e0       	ldi	r24, 0x08	; 8
     730:	01 90       	ld	r0, Z+
     732:	0d 92       	st	X+, r0
     734:	81 50       	subi	r24, 0x01	; 1
     736:	e1 f7       	brne	.-8      	; 0x730 <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     738:	ce 01       	movw	r24, r28
     73a:	01 96       	adiw	r24, 0x01	; 1
     73c:	53 d3       	rcall	.+1702   	; 0xde4 <USB_Host_SendControlRequest>
     73e:	68 2f       	mov	r22, r24
     740:	88 23       	and	r24, r24
     742:	09 f0       	breq	.+2      	; 0x746 <USB_Host_ProcessNextHostState+0x19e>
     744:	48 c0       	rjmp	.+144    	; 0x7d6 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     746:	88 85       	ldd	r24, Y+8	; 0x08
     748:	80 93 27 01 	sts	0x0127, r24

			USB_Host_ResetDevice();
     74c:	df de       	rcall	.-578    	; 0x50c <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     74e:	10 92 35 01 	sts	0x0135, r1
     752:	88 ec       	ldi	r24, 0xC8	; 200
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	90 93 2a 01 	sts	0x012A, r25
     75a:	80 93 29 01 	sts	0x0129, r24
     75e:	88 e0       	ldi	r24, 0x08	; 8
     760:	25 c0       	rjmp	.+74     	; 0x7ac <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     762:	00 91 27 01 	lds	r16, 0x0127
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	60 e0       	ldi	r22, 0x00	; 0
     76a:	40 e0       	ldi	r20, 0x00	; 0
     76c:	20 e0       	ldi	r18, 0x00	; 0
     76e:	10 e0       	ldi	r17, 0x00	; 0
     770:	ee 24       	eor	r14, r14
     772:	45 d0       	rcall	.+138    	; 0x7fe <Pipe_ConfigurePipe>
     774:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     778:	87 ff       	sbrs	r24, 7
     77a:	2f c0       	rjmp	.+94     	; 0x7da <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     77c:	ad e2       	ldi	r26, 0x2D	; 45
     77e:	b1 e0       	ldi	r27, 0x01	; 1
     780:	e7 e1       	ldi	r30, 0x17	; 23
     782:	f1 e0       	ldi	r31, 0x01	; 1
     784:	88 e0       	ldi	r24, 0x08	; 8
     786:	01 90       	ld	r0, Z+
     788:	0d 92       	st	X+, r0
     78a:	81 50       	subi	r24, 0x01	; 1
     78c:	e1 f7       	brne	.-8      	; 0x786 <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	28 d3       	rcall	.+1616   	; 0xde4 <USB_Host_SendControlRequest>
     794:	68 2f       	mov	r22, r24
     796:	88 23       	and	r24, r24
     798:	f1 f4       	brne	.+60     	; 0x7d6 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     79a:	10 92 35 01 	sts	0x0135, r1
     79e:	84 e6       	ldi	r24, 0x64	; 100
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	90 93 2a 01 	sts	0x012A, r25
     7a6:	80 93 29 01 	sts	0x0129, r24
     7aa:	89 e0       	ldi	r24, 0x09	; 9
     7ac:	80 93 28 01 	sts	0x0128, r24
     7b0:	1a c0       	rjmp	.+52     	; 0x7e6 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     7b8:	8a e0       	ldi	r24, 0x0A	; 10
     7ba:	80 93 35 01 	sts	0x0135, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     7be:	9d dd       	rcall	.-1222   	; 0x2fa <EVENT_USB_Host_DeviceEnumerationComplete>
     7c0:	12 c0       	rjmp	.+36     	; 0x7e6 <USB_Host_ProcessNextHostState+0x23e>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     7c2:	89 2f       	mov	r24, r25
     7c4:	3f dd       	rcall	.-1410   	; 0x244 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     7c6:	80 91 dd 00 	lds	r24, 0x00DD
     7ca:	81 60       	ori	r24, 0x01	; 1
     7cc:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     7d0:	82 dd       	rcall	.-1276   	; 0x2d6 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     7d2:	d8 d0       	rcall	.+432    	; 0x984 <USB_ResetInterface>
     7d4:	08 c0       	rjmp	.+16     	; 0x7e6 <USB_Host_ProcessNextHostState+0x23e>
	}
}
     7d6:	93 e0       	ldi	r25, 0x03	; 3
     7d8:	02 c0       	rjmp	.+4      	; 0x7de <USB_Host_ProcessNextHostState+0x236>
     7da:	94 e0       	ldi	r25, 0x04	; 4
     7dc:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     7de:	80 91 35 01 	lds	r24, 0x0135
     7e2:	81 30       	cpi	r24, 0x01	; 1
     7e4:	71 f7       	brne	.-36     	; 0x7c2 <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     7e6:	28 96       	adiw	r28, 0x08	; 8
     7e8:	0f b6       	in	r0, 0x3f	; 63
     7ea:	f8 94       	cli
     7ec:	de bf       	out	0x3e, r29	; 62
     7ee:	0f be       	out	0x3f, r0	; 63
     7f0:	cd bf       	out	0x3d, r28	; 61
     7f2:	cf 91       	pop	r28
     7f4:	df 91       	pop	r29
     7f6:	1f 91       	pop	r17
     7f8:	0f 91       	pop	r16
     7fa:	ef 90       	pop	r14
     7fc:	08 95       	ret

000007fe <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     7fe:	ef 92       	push	r14
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	e8 2f       	mov	r30, r24
     806:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     808:	62 95       	swap	r22
     80a:	66 0f       	add	r22, r22
     80c:	66 0f       	add	r22, r22
     80e:	60 7c       	andi	r22, 0xC0	; 192
     810:	64 2b       	or	r22, r20
     812:	2f 70       	andi	r18, 0x0F	; 15
     814:	62 2b       	or	r22, r18
     816:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     818:	72 60       	ori	r23, 0x02	; 2
     81a:	45 c0       	rjmp	.+138    	; 0x8a6 <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     81c:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     820:	3e 17       	cp	r19, r30
     822:	a1 f4       	brne	.+40     	; 0x84c <Pipe_ConfigurePipe+0x4e>
     824:	88 e0       	ldi	r24, 0x08	; 8
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	20 e0       	ldi	r18, 0x00	; 0
     82a:	03 c0       	rjmp	.+6      	; 0x832 <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     82c:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     82e:	88 0f       	add	r24, r24
     830:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     832:	80 17       	cp	r24, r16
     834:	91 07       	cpc	r25, r17
     836:	10 f4       	brcc	.+4      	; 0x83c <Pipe_ConfigurePipe+0x3e>
     838:	25 30       	cpi	r18, 0x05	; 5
     83a:	c1 f7       	brne	.-16     	; 0x82c <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     83c:	92 2f       	mov	r25, r18
     83e:	92 95       	swap	r25
     840:	90 7f       	andi	r25, 0xF0	; 240
     842:	97 2b       	or	r25, r23
     844:	56 2f       	mov	r21, r22
     846:	40 e0       	ldi	r20, 0x00	; 0
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	08 c0       	rjmp	.+16     	; 0x85c <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     84c:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     850:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     854:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
     858:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     85c:	91 ff       	sbrs	r25, 1
     85e:	22 c0       	rjmp	.+68     	; 0x8a4 <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     860:	80 91 a9 00 	lds	r24, 0x00A9
     864:	8e 7f       	andi	r24, 0xFE	; 254
     866:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     86a:	80 91 ab 00 	lds	r24, 0x00AB
     86e:	8d 7f       	andi	r24, 0xFD	; 253
     870:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     874:	80 91 a9 00 	lds	r24, 0x00A9
     878:	81 60       	ori	r24, 0x01	; 1
     87a:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     87e:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
     882:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
     886:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
     88a:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     88e:	80 91 a9 00 	lds	r24, 0x00A9
     892:	80 62       	ori	r24, 0x20	; 32
     894:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     898:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     89c:	87 fd       	sbrc	r24, 7
     89e:	02 c0       	rjmp	.+4      	; 0x8a4 <Pipe_ConfigurePipe+0xa6>
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	07 c0       	rjmp	.+14     	; 0x8b2 <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     8a4:	3f 5f       	subi	r19, 0xFF	; 255
     8a6:	37 30       	cpi	r19, 0x07	; 7
     8a8:	08 f4       	brcc	.+2      	; 0x8ac <Pipe_ConfigurePipe+0xae>
     8aa:	b8 cf       	rjmp	.-144    	; 0x81c <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     8ac:	e0 93 a7 00 	sts	0x00A7, r30
     8b0:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
     8b2:	1f 91       	pop	r17
     8b4:	0f 91       	pop	r16
     8b6:	ef 90       	pop	r14
     8b8:	08 95       	ret

000008ba <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     8ba:	10 92 f8 00 	sts	0x00F8, r1
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     8c4:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     8c8:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     8cc:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     8d0:	80 91 a9 00 	lds	r24, 0x00A9
     8d4:	8e 7f       	andi	r24, 0xFE	; 254
     8d6:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     8da:	9f 5f       	subi	r25, 0xFF	; 255
     8dc:	97 30       	cpi	r25, 0x07	; 7
     8de:	81 f7       	brne	.-32     	; 0x8c0 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     8e0:	08 95       	ret

000008e2 <Pipe_IsEndpointBound>:

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
     8e2:	48 2f       	mov	r20, r24
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     8e4:	30 91 a7 00 	lds	r19, 0x00A7
     8e8:	20 e0       	ldi	r18, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     8ea:	20 93 a7 00 	sts	0x00A7, r18
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     8ee:	80 91 ac 00 	lds	r24, 0x00AC

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     8f2:	87 ff       	sbrs	r24, 7
     8f4:	10 c0       	rjmp	.+32     	; 0x916 <Pipe_IsEndpointBound+0x34>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     8f6:	90 91 aa 00 	lds	r25, 0x00AA
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     8fa:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     8fe:	80 73       	andi	r24, 0x30	; 48
     900:	80 31       	cpi	r24, 0x10	; 16
     902:	11 f0       	breq	.+4      	; 0x908 <Pipe_IsEndpointBound+0x26>
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	01 c0       	rjmp	.+2      	; 0x90a <Pipe_IsEndpointBound+0x28>
     908:	80 e8       	ldi	r24, 0x80	; 128
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     90a:	9f 70       	andi	r25, 0x0F	; 15
     90c:	89 2b       	or	r24, r25
     90e:	84 17       	cp	r24, r20
     910:	11 f4       	brne	.+4      	; 0x916 <Pipe_IsEndpointBound+0x34>
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	08 95       	ret

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     916:	2f 5f       	subi	r18, 0xFF	; 255
     918:	27 30       	cpi	r18, 0x07	; 7
     91a:	39 f7       	brne	.-50     	; 0x8ea <Pipe_IsEndpointBound+0x8>
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     91c:	37 70       	andi	r19, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     91e:	30 93 a7 00 	sts	0x00A7, r19
     922:	80 e0       	ldi	r24, 0x00	; 0
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     924:	08 95       	ret

00000926 <Pipe_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     926:	40 91 a2 00 	lds	r20, 0x00A2
     92a:	50 91 a3 00 	lds	r21, 0x00A3
     92e:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     930:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     934:	80 73       	andi	r24, 0x30	; 48
     936:	80 31       	cpi	r24, 0x10	; 16
     938:	29 f4       	brne	.+10     	; 0x944 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     93a:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     93e:	80 ff       	sbrs	r24, 0
     940:	05 c0       	rjmp	.+10     	; 0x94c <Pipe_WaitUntilReady+0x26>
     942:	1e c0       	rjmp	.+60     	; 0x980 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     944:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     948:	82 fd       	sbrc	r24, 2
     94a:	1a c0       	rjmp	.+52     	; 0x980 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     94c:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     950:	81 ff       	sbrs	r24, 1
     952:	02 c0       	rjmp	.+4      	; 0x958 <Pipe_WaitUntilReady+0x32>
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     958:	80 91 35 01 	lds	r24, 0x0135
     95c:	81 30       	cpi	r24, 0x01	; 1
     95e:	11 f4       	brne	.+4      	; 0x964 <Pipe_WaitUntilReady+0x3e>
     960:	82 e0       	ldi	r24, 0x02	; 2
     962:	08 95       	ret
     964:	80 91 a2 00 	lds	r24, 0x00A2
     968:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     96c:	84 17       	cp	r24, r20
     96e:	95 07       	cpc	r25, r21
     970:	f9 f2       	breq	.-66     	; 0x930 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     972:	22 23       	and	r18, r18
     974:	11 f4       	brne	.+4      	; 0x97a <Pipe_WaitUntilReady+0x54>
     976:	83 e0       	ldi	r24, 0x03	; 3
     978:	08 95       	ret
     97a:	21 50       	subi	r18, 0x01	; 1
     97c:	ac 01       	movw	r20, r24
     97e:	d8 cf       	rjmp	.-80     	; 0x930 <Pipe_WaitUntilReady+0xa>
     980:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     982:	08 95       	ret

00000984 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     984:	70 d0       	rcall	.+224    	; 0xa66 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     986:	77 d0       	rcall	.+238    	; 0xa76 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     988:	80 91 d8 00 	lds	r24, 0x00D8
     98c:	8f 77       	andi	r24, 0x7F	; 127
     98e:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     992:	80 91 d8 00 	lds	r24, 0x00D8
     996:	80 68       	ori	r24, 0x80	; 128
     998:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     99c:	80 91 d8 00 	lds	r24, 0x00D8
     9a0:	8f 7d       	andi	r24, 0xDF	; 223
     9a2:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     9a6:	80 91 d7 00 	lds	r24, 0x00D7
     9aa:	8f 77       	andi	r24, 0x7F	; 127
     9ac:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     9b0:	8c e0       	ldi	r24, 0x0C	; 12
     9b2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     9b4:	8e e0       	ldi	r24, 0x0E	; 14
     9b6:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     9b8:	09 b4       	in	r0, 0x29	; 41
     9ba:	00 fe       	sbrs	r0, 0
     9bc:	fd cf       	rjmp	.-6      	; 0x9b8 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	80 93 35 01 	sts	0x0135, r24
	USB_Host_ConfigurationNumber = 0;
     9c4:	10 92 2b 01 	sts	0x012B, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     9c8:	80 e4       	ldi	r24, 0x40	; 64
     9ca:	80 93 27 01 	sts	0x0127, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     9ce:	80 91 d8 00 	lds	r24, 0x00D8
     9d2:	80 64       	ori	r24, 0x40	; 64
     9d4:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     9d8:	80 91 dd 00 	lds	r24, 0x00DD
     9dc:	81 60       	ori	r24, 0x01	; 1
     9de:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     9e2:	80 91 dd 00 	lds	r24, 0x00DD
     9e6:	84 60       	ori	r24, 0x04	; 4
     9e8:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     9ec:	80 91 d7 00 	lds	r24, 0x00D7
     9f0:	8f 7e       	andi	r24, 0xEF	; 239
     9f2:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     9f6:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     9f8:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     9fa:	80 91 de 00 	lds	r24, 0x00DE
     9fe:	81 60       	ori	r24, 0x01	; 1
     a00:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     a04:	80 91 de 00 	lds	r24, 0x00DE
     a08:	84 60       	ori	r24, 0x04	; 4
     a0a:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     a0e:	80 91 e0 00 	lds	r24, 0x00E0
     a12:	8e 7f       	andi	r24, 0xFE	; 254
     a14:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     a18:	80 91 d8 00 	lds	r24, 0x00D8
     a1c:	80 61       	ori	r24, 0x10	; 16
     a1e:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     a22:	08 95       	ret

00000a24 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     a24:	e7 ed       	ldi	r30, 0xD7	; 215
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	80 81       	ld	r24, Z
     a2a:	81 60       	ori	r24, 0x01	; 1
     a2c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	80 93 2c 01 	sts	0x012C, r24

	USB_ResetInterface();
}
     a34:	a7 cf       	rjmp	.-178    	; 0x984 <USB_ResetInterface>

00000a36 <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     a36:	17 d0       	rcall	.+46     	; 0xa66 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     a38:	1e d0       	rcall	.+60     	; 0xa76 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     a3a:	e0 ee       	ldi	r30, 0xE0	; 224
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	80 81       	ld	r24, Z
     a40:	81 60       	ori	r24, 0x01	; 1
     a42:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     a44:	a8 ed       	ldi	r26, 0xD8	; 216
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	8c 91       	ld	r24, X
     a4a:	8f 77       	andi	r24, 0x7F	; 127
     a4c:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     a4e:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     a50:	e7 ed       	ldi	r30, 0xD7	; 215
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	80 81       	ld	r24, Z
     a56:	8e 7f       	andi	r24, 0xFE	; 254
     a58:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     a5a:	8c 91       	ld	r24, X
     a5c:	8f 7e       	andi	r24, 0xEF	; 239
     a5e:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     a60:	10 92 2c 01 	sts	0x012C, r1
}
     a64:	08 95       	ret

00000a66 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     a66:	e8 ed       	ldi	r30, 0xD8	; 216
     a68:	f0 e0       	ldi	r31, 0x00	; 0
     a6a:	80 81       	ld	r24, Z
     a6c:	8c 7f       	andi	r24, 0xFC	; 252
     a6e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     a70:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     a74:	08 95       	ret

00000a76 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     a76:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     a7a:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     a7e:	08 95       	ret

00000a80 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     a80:	1f 92       	push	r1
     a82:	0f 92       	push	r0
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	0f 92       	push	r0
     a88:	0b b6       	in	r0, 0x3b	; 59
     a8a:	0f 92       	push	r0
     a8c:	11 24       	eor	r1, r1
     a8e:	2f 93       	push	r18
     a90:	3f 93       	push	r19
     a92:	4f 93       	push	r20
     a94:	5f 93       	push	r21
     a96:	6f 93       	push	r22
     a98:	7f 93       	push	r23
     a9a:	8f 93       	push	r24
     a9c:	9f 93       	push	r25
     a9e:	af 93       	push	r26
     aa0:	bf 93       	push	r27
     aa2:	ef 93       	push	r30
     aa4:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     aa6:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     aaa:	85 ff       	sbrs	r24, 5
     aac:	0a c0       	rjmp	.+20     	; 0xac2 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     aae:	80 91 a0 00 	lds	r24, 0x00A0
     ab2:	85 ff       	sbrs	r24, 5
     ab4:	06 c0       	rjmp	.+12     	; 0xac2 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     ab6:	80 91 9f 00 	lds	r24, 0x009F
     aba:	8f 7d       	andi	r24, 0xDF	; 223
     abc:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     ac0:	67 d1       	rcall	.+718    	; 0xd90 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     ac2:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     ac6:	81 ff       	sbrs	r24, 1
     ac8:	15 c0       	rjmp	.+42     	; 0xaf4 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     aca:	80 91 a0 00 	lds	r24, 0x00A0
     ace:	81 ff       	sbrs	r24, 1
     ad0:	11 c0       	rjmp	.+34     	; 0xaf4 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     ad2:	80 91 9f 00 	lds	r24, 0x009F
     ad6:	8d 7f       	andi	r24, 0xFD	; 253
     ad8:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     adc:	80 91 9f 00 	lds	r24, 0x009F
     ae0:	8e 7f       	andi	r24, 0xFE	; 254
     ae2:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     ae6:	80 91 a0 00 	lds	r24, 0x00A0
     aea:	8d 7f       	andi	r24, 0xFD	; 253
     aec:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     af0:	f2 db       	rcall	.-2076   	; 0x2d6 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     af2:	48 df       	rcall	.-368    	; 0x984 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     af4:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     af8:	81 ff       	sbrs	r24, 1
     afa:	15 c0       	rjmp	.+42     	; 0xb26 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     afc:	80 91 de 00 	lds	r24, 0x00DE
     b00:	81 ff       	sbrs	r24, 1
     b02:	11 c0       	rjmp	.+34     	; 0xb26 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     b04:	80 91 df 00 	lds	r24, 0x00DF
     b08:	8d 7f       	andi	r24, 0xFD	; 253
     b0a:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     b0e:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b10:	80 91 dd 00 	lds	r24, 0x00DD
     b14:	81 60       	ori	r24, 0x01	; 1
     b16:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	bf db       	rcall	.-2178   	; 0x29c <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     b1e:	db db       	rcall	.-2122   	; 0x2d6 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	80 93 35 01 	sts	0x0135, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     b26:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     b2a:	80 ff       	sbrs	r24, 0
     b2c:	17 c0       	rjmp	.+46     	; 0xb5c <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     b2e:	80 91 de 00 	lds	r24, 0x00DE
     b32:	80 ff       	sbrs	r24, 0
     b34:	13 c0       	rjmp	.+38     	; 0xb5c <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     b36:	80 91 df 00 	lds	r24, 0x00DF
     b3a:	8e 7f       	andi	r24, 0xFE	; 254
     b3c:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     b40:	80 91 de 00 	lds	r24, 0x00DE
     b44:	8e 7f       	andi	r24, 0xFE	; 254
     b46:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     b4a:	ce db       	rcall	.-2148   	; 0x2e8 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     b4c:	80 91 a0 00 	lds	r24, 0x00A0
     b50:	82 60       	ori	r24, 0x02	; 2
     b52:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     b56:	82 e0       	ldi	r24, 0x02	; 2
     b58:	80 93 35 01 	sts	0x0135, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     b5c:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     b60:	82 ff       	sbrs	r24, 2
     b62:	0e c0       	rjmp	.+28     	; 0xb80 <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     b64:	80 91 de 00 	lds	r24, 0x00DE
     b68:	82 ff       	sbrs	r24, 2
     b6a:	0a c0       	rjmp	.+20     	; 0xb80 <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     b6c:	80 91 df 00 	lds	r24, 0x00DF
     b70:	8b 7f       	andi	r24, 0xFB	; 251
     b72:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     b76:	82 e0       	ldi	r24, 0x02	; 2
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	64 db       	rcall	.-2360   	; 0x244 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     b7c:	ac db       	rcall	.-2216   	; 0x2d6 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     b7e:	02 df       	rcall	.-508    	; 0x984 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     b80:	ff 91       	pop	r31
     b82:	ef 91       	pop	r30
     b84:	bf 91       	pop	r27
     b86:	af 91       	pop	r26
     b88:	9f 91       	pop	r25
     b8a:	8f 91       	pop	r24
     b8c:	7f 91       	pop	r23
     b8e:	6f 91       	pop	r22
     b90:	5f 91       	pop	r21
     b92:	4f 91       	pop	r20
     b94:	3f 91       	pop	r19
     b96:	2f 91       	pop	r18
     b98:	0f 90       	pop	r0
     b9a:	0b be       	out	0x3b, r0	; 59
     b9c:	0f 90       	pop	r0
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	0f 90       	pop	r0
     ba2:	1f 90       	pop	r1
     ba4:	18 95       	reti

00000ba6 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     ba6:	bf 92       	push	r11
     ba8:	cf 92       	push	r12
     baa:	df 92       	push	r13
     bac:	ef 92       	push	r14
     bae:	ff 92       	push	r15
     bb0:	0f 93       	push	r16
     bb2:	1f 93       	push	r17
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	18 2f       	mov	r17, r24
     bba:	09 2f       	mov	r16, r25
     bbc:	7b 01       	movw	r14, r22
     bbe:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     bc0:	80 91 aa 00 	lds	r24, 0x00AA
     bc4:	8f 7c       	andi	r24, 0xCF	; 207
     bc6:	80 61       	ori	r24, 0x10	; 16
     bc8:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     bcc:	ac de       	rcall	.-680    	; 0x926 <Pipe_WaitUntilReady>
     bce:	b8 2e       	mov	r11, r24
     bd0:	88 23       	and	r24, r24
     bd2:	a9 f5       	brne	.+106    	; 0xc3e <Pipe_Read_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     bd4:	81 2f       	mov	r24, r17
     bd6:	90 2f       	mov	r25, r16
     bd8:	9c 01       	movw	r18, r24
     bda:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     bdc:	c1 14       	cp	r12, r1
     bde:	d1 04       	cpc	r13, r1
     be0:	39 f0       	breq	.+14     	; 0xbf0 <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
     be2:	f6 01       	movw	r30, r12
     be4:	80 81       	ld	r24, Z
     be6:	91 81       	ldd	r25, Z+1	; 0x01
     be8:	e8 1a       	sub	r14, r24
     bea:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     bec:	c8 0f       	add	r28, r24
     bee:	d9 1f       	adc	r29, r25
     bf0:	00 e0       	ldi	r16, 0x00	; 0
     bf2:	10 e0       	ldi	r17, 0x00	; 0
     bf4:	21 c0       	rjmp	.+66     	; 0xc38 <Pipe_Read_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     bf6:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     bfa:	85 fd       	sbrc	r24, 5
     bfc:	15 c0       	rjmp	.+42     	; 0xc28 <Pipe_Read_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     bfe:	80 91 a6 00 	lds	r24, 0x00A6
     c02:	8e 77       	andi	r24, 0x7E	; 126
     c04:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     c08:	c1 14       	cp	r12, r1
     c0a:	d1 04       	cpc	r13, r1
     c0c:	49 f0       	breq	.+18     	; 0xc20 <Pipe_Read_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
     c0e:	f6 01       	movw	r30, r12
     c10:	80 81       	ld	r24, Z
     c12:	91 81       	ldd	r25, Z+1	; 0x01
     c14:	80 0f       	add	r24, r16
     c16:	91 1f       	adc	r25, r17
     c18:	91 83       	std	Z+1, r25	; 0x01
     c1a:	80 83       	st	Z, r24
     c1c:	84 e0       	ldi	r24, 0x04	; 4
     c1e:	10 c0       	rjmp	.+32     	; 0xc40 <Pipe_Read_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     c20:	82 de       	rcall	.-764    	; 0x926 <Pipe_WaitUntilReady>
     c22:	88 23       	and	r24, r24
     c24:	49 f0       	breq	.+18     	; 0xc38 <Pipe_Read_Stream_LE+0x92>
     c26:	0c c0       	rjmp	.+24     	; 0xc40 <Pipe_Read_Stream_LE+0x9a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     c28:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     c2c:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     c2e:	08 94       	sec
     c30:	e1 08       	sbc	r14, r1
     c32:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
     c34:	0f 5f       	subi	r16, 0xFF	; 255
     c36:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     c38:	e1 14       	cp	r14, r1
     c3a:	f1 04       	cpc	r15, r1
     c3c:	e1 f6       	brne	.-72     	; 0xbf6 <Pipe_Read_Stream_LE+0x50>
     c3e:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     c40:	df 91       	pop	r29
     c42:	cf 91       	pop	r28
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	ff 90       	pop	r15
     c4a:	ef 90       	pop	r14
     c4c:	df 90       	pop	r13
     c4e:	cf 90       	pop	r12
     c50:	bf 90       	pop	r11
     c52:	08 95       	ret

00000c54 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     c54:	af 92       	push	r10
     c56:	bf 92       	push	r11
     c58:	cf 92       	push	r12
     c5a:	df 92       	push	r13
     c5c:	ef 92       	push	r14
     c5e:	ff 92       	push	r15
     c60:	0f 93       	push	r16
     c62:	1f 93       	push	r17
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	7c 01       	movw	r14, r24
     c6a:	eb 01       	movw	r28, r22
     c6c:	6a 01       	movw	r12, r20
     c6e:	24 c0       	rjmp	.+72     	; 0xcb8 <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     c70:	e8 81       	ld	r30, Y
     c72:	f9 81       	ldd	r31, Y+1	; 0x01
     c74:	be 2e       	mov	r11, r30
     c76:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     c78:	80 81       	ld	r24, Z
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	98 01       	movw	r18, r16
     c7e:	80 17       	cp	r24, r16
     c80:	91 07       	cpc	r25, r17
     c82:	08 f4       	brcc	.+2      	; 0xc86 <USB_GetNextDescriptorComp+0x32>
     c84:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     c86:	e2 0f       	add	r30, r18
     c88:	f3 1f       	adc	r31, r19
     c8a:	f9 83       	std	Y+1, r31	; 0x01
     c8c:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     c8e:	f7 01       	movw	r30, r14
     c90:	80 81       	ld	r24, Z
     c92:	91 81       	ldd	r25, Z+1	; 0x01
     c94:	82 1b       	sub	r24, r18
     c96:	93 0b       	sbc	r25, r19
     c98:	91 83       	std	Z+1, r25	; 0x01
     c9a:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     c9c:	88 81       	ld	r24, Y
     c9e:	99 81       	ldd	r25, Y+1	; 0x01
     ca0:	f6 01       	movw	r30, r12
     ca2:	09 95       	icall
     ca4:	82 30       	cpi	r24, 0x02	; 2
     ca6:	41 f0       	breq	.+16     	; 0xcb8 <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	69 f4       	brne	.+26     	; 0xcc6 <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
     cac:	b8 82       	st	Y, r11
     cae:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
     cb0:	f7 01       	movw	r30, r14
     cb2:	11 83       	std	Z+1, r17	; 0x01
     cb4:	00 83       	st	Z, r16
     cb6:	07 c0       	rjmp	.+14     	; 0xcc6 <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     cb8:	f7 01       	movw	r30, r14
     cba:	00 81       	ld	r16, Z
     cbc:	11 81       	ldd	r17, Z+1	; 0x01
     cbe:	01 15       	cp	r16, r1
     cc0:	11 05       	cpc	r17, r1
     cc2:	b1 f6       	brne	.-84     	; 0xc70 <USB_GetNextDescriptorComp+0x1c>
     cc4:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	1f 91       	pop	r17
     ccc:	0f 91       	pop	r16
     cce:	ff 90       	pop	r15
     cd0:	ef 90       	pop	r14
     cd2:	df 90       	pop	r13
     cd4:	cf 90       	pop	r12
     cd6:	bf 90       	pop	r11
     cd8:	af 90       	pop	r10
     cda:	08 95       	ret

00000cdc <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     cdc:	cf 92       	push	r12
     cde:	df 92       	push	r13
     ce0:	ef 92       	push	r14
     ce2:	ff 92       	push	r15
     ce4:	0f 93       	push	r16
     ce6:	1f 93       	push	r17
     ce8:	df 93       	push	r29
     cea:	cf 93       	push	r28
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	29 97       	sbiw	r28, 0x09	; 9
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	f8 94       	cli
     cf6:	de bf       	out	0x3e, r29	; 62
     cf8:	0f be       	out	0x3f, r0	; 63
     cfa:	cd bf       	out	0x3d, r28	; 61
     cfc:	6b 01       	movw	r12, r22
     cfe:	8a 01       	movw	r16, r20
     d00:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     d02:	90 e8       	ldi	r25, 0x80	; 128
     d04:	90 93 2d 01 	sts	0x012D, r25
     d08:	96 e0       	ldi	r25, 0x06	; 6
     d0a:	90 93 2e 01 	sts	0x012E, r25
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	01 97       	sbiw	r24, 0x01	; 1
     d12:	92 60       	ori	r25, 0x02	; 2
     d14:	90 93 30 01 	sts	0x0130, r25
     d18:	80 93 2f 01 	sts	0x012F, r24
     d1c:	10 92 32 01 	sts	0x0132, r1
     d20:	10 92 31 01 	sts	0x0131, r1
     d24:	89 e0       	ldi	r24, 0x09	; 9
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	90 93 34 01 	sts	0x0134, r25
     d2c:	80 93 33 01 	sts	0x0133, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     d30:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     d34:	ce 01       	movw	r24, r28
     d36:	01 96       	adiw	r24, 0x01	; 1
     d38:	55 d0       	rcall	.+170    	; 0xde4 <USB_Host_SendControlRequest>
     d3a:	28 2f       	mov	r18, r24
     d3c:	88 23       	and	r24, r24
     d3e:	c1 f4       	brne	.+48     	; 0xd70 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     d40:	8b 81       	ldd	r24, Y+3	; 0x03
     d42:	9c 81       	ldd	r25, Y+4	; 0x04
     d44:	f6 01       	movw	r30, r12
     d46:	91 83       	std	Z+1, r25	; 0x01
     d48:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     d4a:	e8 16       	cp	r14, r24
     d4c:	f9 06       	cpc	r15, r25
     d4e:	10 f4       	brcc	.+4      	; 0xd54 <USB_Host_GetDeviceConfigDescriptor+0x78>
     d50:	25 e0       	ldi	r18, 0x05	; 5
     d52:	0e c0       	rjmp	.+28     	; 0xd70 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     d54:	90 93 34 01 	sts	0x0134, r25
     d58:	80 93 33 01 	sts	0x0133, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     d5c:	c8 01       	movw	r24, r16
     d5e:	42 d0       	rcall	.+132    	; 0xde4 <USB_Host_SendControlRequest>
     d60:	28 2f       	mov	r18, r24
     d62:	88 23       	and	r24, r24
     d64:	29 f4       	brne	.+10     	; 0xd70 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     d66:	f8 01       	movw	r30, r16
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	82 30       	cpi	r24, 0x02	; 2
     d6c:	09 f0       	breq	.+2      	; 0xd70 <USB_Host_GetDeviceConfigDescriptor+0x94>
     d6e:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     d70:	82 2f       	mov	r24, r18
     d72:	29 96       	adiw	r28, 0x09	; 9
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	f8 94       	cli
     d78:	de bf       	out	0x3e, r29	; 62
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	cd bf       	out	0x3d, r28	; 61
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	1f 91       	pop	r17
     d84:	0f 91       	pop	r16
     d86:	ff 90       	pop	r15
     d88:	ef 90       	pop	r14
     d8a:	df 90       	pop	r13
     d8c:	cf 90       	pop	r12
     d8e:	08 95       	ret

00000d90 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     d90:	08 95       	ret

00000d92 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     d92:	1f 93       	push	r17
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	18 2f       	mov	r17, r24
     d9a:	c8 ee       	ldi	r28, 0xE8	; 232
     d9c:	d3 e0       	ldi	r29, 0x03	; 3
     d9e:	09 c0       	rjmp	.+18     	; 0xdb2 <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	65 db       	rcall	.-2358   	; 0x46e <USB_Host_WaitMS>
     da4:	88 23       	and	r24, r24
     da6:	d1 f4       	brne	.+52     	; 0xddc <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     da8:	20 97       	sbiw	r28, 0x00	; 0
     daa:	11 f4       	brne	.+4      	; 0xdb0 <USB_Host_WaitForIOS+0x1e>
     dac:	84 e0       	ldi	r24, 0x04	; 4
     dae:	16 c0       	rjmp	.+44     	; 0xddc <USB_Host_WaitForIOS+0x4a>
     db0:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     db2:	11 23       	and	r17, r17
     db4:	29 f4       	brne	.+10     	; 0xdc0 <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     db6:	80 91 a6 00 	lds	r24, 0x00A6
     dba:	83 ff       	sbrs	r24, 3
     dbc:	f1 cf       	rjmp	.-30     	; 0xda0 <USB_Host_WaitForIOS+0xe>
     dbe:	0d c0       	rjmp	.+26     	; 0xdda <USB_Host_WaitForIOS+0x48>
     dc0:	11 30       	cpi	r17, 0x01	; 1
     dc2:	29 f4       	brne	.+10     	; 0xdce <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     dc4:	80 91 a6 00 	lds	r24, 0x00A6
     dc8:	80 ff       	sbrs	r24, 0
     dca:	ea cf       	rjmp	.-44     	; 0xda0 <USB_Host_WaitForIOS+0xe>
     dcc:	06 c0       	rjmp	.+12     	; 0xdda <USB_Host_WaitForIOS+0x48>
     dce:	12 30       	cpi	r17, 0x02	; 2
     dd0:	39 f7       	brne	.-50     	; 0xda0 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     dd2:	80 91 a6 00 	lds	r24, 0x00A6
     dd6:	82 ff       	sbrs	r24, 2
     dd8:	e3 cf       	rjmp	.-58     	; 0xda0 <USB_Host_WaitForIOS+0xe>
     dda:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	1f 91       	pop	r17
     de2:	08 95       	ret

00000de4 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     de4:	ff 92       	push	r15
     de6:	0f 93       	push	r16
     de8:	1f 93       	push	r17
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	18 2f       	mov	r17, r24
     df0:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     df2:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     df6:	c0 91 33 01 	lds	r28, 0x0133
     dfa:	d0 91 34 01 	lds	r29, 0x0134
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     dfe:	80 91 9e 00 	lds	r24, 0x009E
     e02:	81 60       	ori	r24, 0x01	; 1
     e04:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	31 db       	rcall	.-2462   	; 0x46e <USB_Host_WaitMS>
     e0c:	98 2f       	mov	r25, r24
     e0e:	88 23       	and	r24, r24
     e10:	09 f0       	breq	.+2      	; 0xe14 <USB_Host_SendControlRequest+0x30>
     e12:	ee c0       	rjmp	.+476    	; 0xff0 <USB_Host_SendControlRequest+0x20c>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     e14:	80 91 aa 00 	lds	r24, 0x00AA
     e18:	8f 7c       	andi	r24, 0xCF	; 207
     e1a:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     e1e:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     e22:	80 91 a6 00 	lds	r24, 0x00A6
     e26:	8f 7e       	andi	r24, 0xEF	; 239
     e28:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     e2c:	80 91 a9 00 	lds	r24, 0x00A9
     e30:	8f 7b       	andi	r24, 0xBF	; 191
     e32:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearError();

	Pipe_Unfreeze();

	Pipe_Write_8(USB_ControlRequest.bmRequestType);
     e36:	80 91 2d 01 	lds	r24, 0x012D
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     e3a:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
     e3e:	80 91 2e 01 	lds	r24, 0x012E
     e42:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
     e46:	80 91 2f 01 	lds	r24, 0x012F
     e4a:	90 91 30 01 	lds	r25, 0x0130
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
     e4e:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
     e52:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
     e56:	80 91 31 01 	lds	r24, 0x0131
     e5a:	90 91 32 01 	lds	r25, 0x0132
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
     e5e:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
     e62:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
     e66:	80 91 33 01 	lds	r24, 0x0133
     e6a:	90 91 34 01 	lds	r25, 0x0134
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
     e6e:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
     e72:	90 93 af 00 	sts	0x00AF, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     e76:	80 91 a6 00 	lds	r24, 0x00A6
     e7a:	87 77       	andi	r24, 0x77	; 119
     e7c:	80 93 a6 00 	sts	0x00A6, r24

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	87 df       	rcall	.-242    	; 0xd92 <USB_Host_WaitForIOS>
     e84:	98 2f       	mov	r25, r24
     e86:	88 23       	and	r24, r24
     e88:	09 f0       	breq	.+2      	; 0xe8c <USB_Host_SendControlRequest+0xa8>
     e8a:	b2 c0       	rjmp	.+356    	; 0xff0 <USB_Host_SendControlRequest+0x20c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     e8c:	80 91 a9 00 	lds	r24, 0x00A9
     e90:	80 64       	ori	r24, 0x40	; 64
     e92:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	ea da       	rcall	.-2604   	; 0x46e <USB_Host_WaitMS>
     e9a:	98 2f       	mov	r25, r24
     e9c:	88 23       	and	r24, r24
     e9e:	09 f0       	breq	.+2      	; 0xea2 <USB_Host_SendControlRequest+0xbe>
     ea0:	a7 c0       	rjmp	.+334    	; 0xff0 <USB_Host_SendControlRequest+0x20c>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
     ea2:	21 2f       	mov	r18, r17
     ea4:	30 2f       	mov	r19, r16
     ea6:	c9 01       	movw	r24, r18
     ea8:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     eaa:	80 91 2d 01 	lds	r24, 0x012D
     eae:	87 ff       	sbrs	r24, 7
     eb0:	52 c0       	rjmp	.+164    	; 0xf56 <USB_Host_SendControlRequest+0x172>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     eb2:	80 91 aa 00 	lds	r24, 0x00AA
     eb6:	8f 7c       	andi	r24, 0xCF	; 207
     eb8:	80 61       	ori	r24, 0x10	; 16
     eba:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     ebe:	01 15       	cp	r16, r1
     ec0:	11 05       	cpc	r17, r1
     ec2:	69 f5       	brne	.+90     	; 0xf1e <USB_Host_SendControlRequest+0x13a>
     ec4:	2e c0       	rjmp	.+92     	; 0xf22 <USB_Host_SendControlRequest+0x13e>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     ec6:	80 91 a9 00 	lds	r24, 0x00A9
     eca:	8f 7b       	andi	r24, 0xBF	; 191
     ecc:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	5f df       	rcall	.-322    	; 0xd92 <USB_Host_WaitForIOS>
     ed4:	98 2f       	mov	r25, r24
     ed6:	88 23       	and	r24, r24
     ed8:	09 f0       	breq	.+2      	; 0xedc <USB_Host_SendControlRequest+0xf8>
     eda:	8a c0       	rjmp	.+276    	; 0xff0 <USB_Host_SendControlRequest+0x20c>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     edc:	80 91 f6 00 	lds	r24, 0x00F6
     ee0:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
     ee4:	89 2b       	or	r24, r25
     ee6:	49 f4       	brne	.+18     	; 0xefa <USB_Host_SendControlRequest+0x116>
     ee8:	c0 e0       	ldi	r28, 0x00	; 0
     eea:	d0 e0       	ldi	r29, 0x00	; 0
     eec:	06 c0       	rjmp	.+12     	; 0xefa <USB_Host_SendControlRequest+0x116>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     eee:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
     ef2:	f8 01       	movw	r30, r16
     ef4:	81 93       	st	Z+, r24
     ef6:	8f 01       	movw	r16, r30
					DataLen--;
     ef8:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     efa:	80 91 f6 00 	lds	r24, 0x00F6
     efe:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
     f02:	89 2b       	or	r24, r25
     f04:	11 f0       	breq	.+4      	; 0xf0a <USB_Host_SendControlRequest+0x126>
     f06:	20 97       	sbiw	r28, 0x00	; 0
     f08:	91 f7       	brne	.-28     	; 0xeee <USB_Host_SendControlRequest+0x10a>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f0a:	80 91 a9 00 	lds	r24, 0x00A9
     f0e:	80 64       	ori	r24, 0x40	; 64
     f10:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     f14:	80 91 a6 00 	lds	r24, 0x00A6
     f18:	8e 77       	andi	r24, 0x7E	; 126
     f1a:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
     f1e:	20 97       	sbiw	r28, 0x00	; 0
     f20:	91 f6       	brne	.-92     	; 0xec6 <USB_Host_SendControlRequest+0xe2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f22:	80 91 aa 00 	lds	r24, 0x00AA
     f26:	8f 7c       	andi	r24, 0xCF	; 207
     f28:	80 62       	ori	r24, 0x20	; 32
     f2a:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f2e:	80 91 a9 00 	lds	r24, 0x00A9
     f32:	8f 7b       	andi	r24, 0xBF	; 191
     f34:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f38:	82 e0       	ldi	r24, 0x02	; 2
     f3a:	2b df       	rcall	.-426    	; 0xd92 <USB_Host_WaitForIOS>
     f3c:	98 2f       	mov	r25, r24
     f3e:	88 23       	and	r24, r24
     f40:	09 f0       	breq	.+2      	; 0xf44 <USB_Host_SendControlRequest+0x160>
     f42:	56 c0       	rjmp	.+172    	; 0xff0 <USB_Host_SendControlRequest+0x20c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     f44:	80 91 a6 00 	lds	r24, 0x00A6
     f48:	8b 77       	andi	r24, 0x7B	; 123
     f4a:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f4e:	82 e0       	ldi	r24, 0x02	; 2
     f50:	20 df       	rcall	.-448    	; 0xd92 <USB_Host_WaitForIOS>
     f52:	98 2f       	mov	r25, r24
     f54:	4d c0       	rjmp	.+154    	; 0xff0 <USB_Host_SendControlRequest+0x20c>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
     f56:	01 15       	cp	r16, r1
     f58:	11 05       	cpc	r17, r1
     f5a:	a9 f1       	breq	.+106    	; 0xfc6 <USB_Host_SendControlRequest+0x1e2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f5c:	80 91 aa 00 	lds	r24, 0x00AA
     f60:	8f 7c       	andi	r24, 0xCF	; 207
     f62:	80 62       	ori	r24, 0x20	; 32
     f64:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f68:	80 91 a9 00 	lds	r24, 0x00A9
     f6c:	8f 7b       	andi	r24, 0xBF	; 191
     f6e:	80 93 a9 00 	sts	0x00A9, r24
     f72:	1d c0       	rjmp	.+58     	; 0xfae <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f74:	82 e0       	ldi	r24, 0x02	; 2
     f76:	0d df       	rcall	.-486    	; 0xd92 <USB_Host_WaitForIOS>
     f78:	98 2f       	mov	r25, r24
     f7a:	88 23       	and	r24, r24
     f7c:	c9 f5       	brne	.+114    	; 0xff0 <USB_Host_SendControlRequest+0x20c>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
     f7e:	80 91 27 01 	lds	r24, 0x0127
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	07 c0       	rjmp	.+14     	; 0xf96 <USB_Host_SendControlRequest+0x1b2>
				{
					Pipe_Write_8(*(DataStream++));
     f88:	f8 01       	movw	r30, r16
     f8a:	81 91       	ld	r24, Z+
     f8c:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     f8e:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
     f92:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
     f94:	39 f0       	breq	.+14     	; 0xfa4 <USB_Host_SendControlRequest+0x1c0>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f96:	80 91 f6 00 	lds	r24, 0x00F6
     f9a:	90 91 f7 00 	lds	r25, 0x00F7
     f9e:	82 17       	cp	r24, r18
     fa0:	93 07       	cpc	r25, r19
     fa2:	90 f3       	brcs	.-28     	; 0xf88 <USB_Host_SendControlRequest+0x1a4>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     fa4:	80 91 a6 00 	lds	r24, 0x00A6
     fa8:	8b 77       	andi	r24, 0x7B	; 123
     faa:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
     fae:	20 97       	sbiw	r28, 0x00	; 0
     fb0:	09 f7       	brne	.-62     	; 0xf74 <USB_Host_SendControlRequest+0x190>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     fb2:	82 e0       	ldi	r24, 0x02	; 2
     fb4:	ee de       	rcall	.-548    	; 0xd92 <USB_Host_WaitForIOS>
     fb6:	98 2f       	mov	r25, r24
     fb8:	88 23       	and	r24, r24
     fba:	d1 f4       	brne	.+52     	; 0xff0 <USB_Host_SendControlRequest+0x20c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     fbc:	80 91 a9 00 	lds	r24, 0x00A9
     fc0:	80 64       	ori	r24, 0x40	; 64
     fc2:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fc6:	80 91 aa 00 	lds	r24, 0x00AA
     fca:	8f 7c       	andi	r24, 0xCF	; 207
     fcc:	80 61       	ori	r24, 0x10	; 16
     fce:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fd2:	80 91 a9 00 	lds	r24, 0x00A9
     fd6:	8f 7b       	andi	r24, 0xBF	; 191
     fd8:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	d9 de       	rcall	.-590    	; 0xd92 <USB_Host_WaitForIOS>
     fe0:	98 2f       	mov	r25, r24
     fe2:	88 23       	and	r24, r24
     fe4:	29 f4       	brne	.+10     	; 0xff0 <USB_Host_SendControlRequest+0x20c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     fe6:	80 91 a6 00 	lds	r24, 0x00A6
     fea:	8e 77       	andi	r24, 0x7E	; 126
     fec:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     ff0:	80 91 a9 00 	lds	r24, 0x00A9
     ff4:	80 64       	ori	r24, 0x40	; 64
     ff6:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
     ffa:	f0 fc       	sbrc	r15, 0
     ffc:	05 c0       	rjmp	.+10     	; 0x1008 <USB_Host_SendControlRequest+0x224>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     ffe:	80 91 9e 00 	lds	r24, 0x009E
    1002:	8e 7f       	andi	r24, 0xFE	; 254
    1004:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    100e:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1012:	89 2f       	mov	r24, r25
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	1f 91       	pop	r17
    101a:	0f 91       	pop	r16
    101c:	ff 90       	pop	r15
    101e:	08 95       	ret

00001020 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1020:	1f 93       	push	r17
    1022:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1024:	10 92 2d 01 	sts	0x012D, r1
    1028:	89 e0       	ldi	r24, 0x09	; 9
    102a:	80 93 2e 01 	sts	0x012E, r24
    102e:	10 93 2f 01 	sts	0x012F, r17
    1032:	10 92 30 01 	sts	0x0130, r1
    1036:	10 92 32 01 	sts	0x0132, r1
    103a:	10 92 31 01 	sts	0x0131, r1
    103e:	10 92 34 01 	sts	0x0134, r1
    1042:	10 92 33 01 	sts	0x0133, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1046:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	ca de       	rcall	.-620    	; 0xde4 <USB_Host_SendControlRequest>
    1050:	88 23       	and	r24, r24
    1052:	49 f4       	brne	.+18     	; 0x1066 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1054:	10 93 2b 01 	sts	0x012B, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1058:	11 23       	and	r17, r17
    105a:	11 f4       	brne	.+4      	; 0x1060 <USB_Host_SetDeviceConfiguration+0x40>
    105c:	9a e0       	ldi	r25, 0x0A	; 10
    105e:	01 c0       	rjmp	.+2      	; 0x1062 <USB_Host_SetDeviceConfiguration+0x42>
    1060:	9b e0       	ldi	r25, 0x0B	; 11
    1062:	90 93 35 01 	sts	0x0135, r25
	}

	return ErrorCode;
}
    1066:	1f 91       	pop	r17
    1068:	08 95       	ret

0000106a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    106a:	ff 92       	push	r15
    106c:	0f 93       	push	r16
    106e:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1070:	07 ea       	ldi	r16, 0xA7	; 167
    1072:	10 e0       	ldi	r17, 0x00	; 0
    1074:	f8 01       	movw	r30, r16
    1076:	f0 80       	ld	r15, Z
    1078:	f7 e0       	ldi	r31, 0x07	; 7
    107a:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    107c:	f8 01       	movw	r30, r16
    107e:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1080:	93 da       	rcall	.-2778   	; 0x5a8 <USB_Host_ProcessNextHostState>
    1082:	f8 01       	movw	r30, r16
    1084:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1086:	1f 91       	pop	r17
    1088:	0f 91       	pop	r16
    108a:	ff 90       	pop	r15
    108c:	08 95       	ret

0000108e <DCOMP_CDC_Host_NextCDCControlInterface>:

	return CDC_ENUMERROR_NoError;
}

static uint8_t DCOMP_CDC_Host_NextCDCControlInterface(void* const CurrentDescriptor)
{
    108e:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1090:	81 81       	ldd	r24, Z+1	; 0x01
    1092:	84 30       	cpi	r24, 0x04	; 4
    1094:	59 f4       	brne	.+22     	; 0x10ac <DCOMP_CDC_Host_NextCDCControlInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == CDC_CSCP_CDCClass)    &&
    1096:	85 81       	ldd	r24, Z+5	; 0x05
    1098:	82 30       	cpi	r24, 0x02	; 2
    109a:	41 f4       	brne	.+16     	; 0x10ac <DCOMP_CDC_Host_NextCDCControlInterface+0x1e>
    109c:	86 81       	ldd	r24, Z+6	; 0x06
    109e:	82 30       	cpi	r24, 0x02	; 2
    10a0:	29 f4       	brne	.+10     	; 0x10ac <DCOMP_CDC_Host_NextCDCControlInterface+0x1e>
    10a2:	87 81       	ldd	r24, Z+7	; 0x07
    10a4:	81 30       	cpi	r24, 0x01	; 1
    10a6:	11 f4       	brne	.+4      	; 0x10ac <DCOMP_CDC_Host_NextCDCControlInterface+0x1e>
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	08 95       	ret
    10ac:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    10ae:	08 95       	ret

000010b0 <DCOMP_CDC_Host_NextCDCDataInterface>:

static uint8_t DCOMP_CDC_Host_NextCDCDataInterface(void* const CurrentDescriptor)
{
    10b0:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    10b2:	81 81       	ldd	r24, Z+1	; 0x01
    10b4:	84 30       	cpi	r24, 0x04	; 4
    10b6:	41 f4       	brne	.+16     	; 0x10c8 <DCOMP_CDC_Host_NextCDCDataInterface+0x18>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == CDC_CSCP_CDCDataClass)   &&
    10b8:	85 81       	ldd	r24, Z+5	; 0x05
    10ba:	8a 30       	cpi	r24, 0x0A	; 10
    10bc:	29 f4       	brne	.+10     	; 0x10c8 <DCOMP_CDC_Host_NextCDCDataInterface+0x18>
    10be:	86 81       	ldd	r24, Z+6	; 0x06
    10c0:	88 23       	and	r24, r24
    10c2:	11 f4       	brne	.+4      	; 0x10c8 <DCOMP_CDC_Host_NextCDCDataInterface+0x18>
    10c4:	87 81       	ldd	r24, Z+7	; 0x07
    10c6:	81 11       	cpse	r24, r1
    10c8:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    10ca:	08 95       	ret

000010cc <CDC_Host_BytesReceived>:

	return PIPE_READYWAIT_NoError;
}

uint16_t CDC_Host_BytesReceived(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
    10cc:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
    10ce:	80 91 35 01 	lds	r24, 0x0135
    10d2:	8b 30       	cpi	r24, 0x0B	; 11
    10d4:	51 f5       	brne	.+84     	; 0x112a <CDC_Host_BytesReceived+0x5e>
    10d6:	86 81       	ldd	r24, Z+6	; 0x06
    10d8:	88 23       	and	r24, r24
    10da:	39 f1       	breq	.+78     	; 0x112a <CDC_Host_BytesReceived+0x5e>
	  return 0;

	Pipe_SelectPipe(CDCInterfaceInfo->Config.DataINPipeNumber);
    10dc:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    10de:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10e2:	80 91 a9 00 	lds	r24, 0x00A9
    10e6:	8f 7b       	andi	r24, 0xBF	; 191
    10e8:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    10ec:	80 91 a6 00 	lds	r24, 0x00A6
	Pipe_Unfreeze();

	if (Pipe_IsINReceived())
    10f0:	80 ff       	sbrs	r24, 0
    10f2:	16 c0       	rjmp	.+44     	; 0x1120 <CDC_Host_BytesReceived+0x54>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    10f4:	80 91 f6 00 	lds	r24, 0x00F6
    10f8:	90 91 f7 00 	lds	r25, 0x00F7
	{
		if (!(Pipe_BytesInPipe()))
    10fc:	89 2b       	or	r24, r25
    10fe:	31 f4       	brne	.+12     	; 0x110c <CDC_Host_BytesReceived+0x40>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1100:	80 91 a6 00 	lds	r24, 0x00A6
    1104:	8e 77       	andi	r24, 0x7E	; 126
    1106:	80 93 a6 00 	sts	0x00A6, r24
    110a:	0a c0       	rjmp	.+20     	; 0x1120 <CDC_Host_BytesReceived+0x54>
		{
			Pipe_ClearIN();
			Pipe_Freeze();
			return 0;
    110c:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1110:	80 64       	ori	r24, 0x40	; 64
    1112:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1116:	20 91 f6 00 	lds	r18, 0x00F6
    111a:	30 91 f7 00 	lds	r19, 0x00F7
    111e:	07 c0       	rjmp	.+14     	; 0x112e <CDC_Host_BytesReceived+0x62>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1120:	80 91 a9 00 	lds	r24, 0x00A9
    1124:	80 64       	ori	r24, 0x40	; 64
    1126:	80 93 a9 00 	sts	0x00A9, r24
	}
	else
	{
		Pipe_Freeze();

		return 0;
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	30 e0       	ldi	r19, 0x00	; 0
	}
}
    112e:	c9 01       	movw	r24, r18
    1130:	08 95       	ret

00001132 <CDC_Host_ReceiveByte>:

int16_t CDC_Host_ReceiveByte(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
    1132:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
    1134:	80 91 35 01 	lds	r24, 0x0135
    1138:	8b 30       	cpi	r24, 0x0B	; 11
    113a:	81 f5       	brne	.+96     	; 0x119c <CDC_Host_ReceiveByte+0x6a>
    113c:	86 81       	ldd	r24, Z+6	; 0x06
    113e:	88 23       	and	r24, r24
    1140:	69 f1       	breq	.+90     	; 0x119c <CDC_Host_ReceiveByte+0x6a>
	  return -1;

	int16_t ReceivedByte = -1;

	Pipe_SelectPipe(CDCInterfaceInfo->Config.DataINPipeNumber);
    1142:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1144:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1148:	80 91 a9 00 	lds	r24, 0x00A9
    114c:	8f 7b       	andi	r24, 0xBF	; 191
    114e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1152:	80 91 a6 00 	lds	r24, 0x00A6
	Pipe_Unfreeze();

	if (Pipe_IsINReceived())
    1156:	80 fd       	sbrc	r24, 0
    1158:	03 c0       	rjmp	.+6      	; 0x1160 <CDC_Host_ReceiveByte+0x2e>
    115a:	2f ef       	ldi	r18, 0xFF	; 255
    115c:	3f ef       	ldi	r19, 0xFF	; 255
    115e:	18 c0       	rjmp	.+48     	; 0x1190 <CDC_Host_ReceiveByte+0x5e>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1160:	80 91 f6 00 	lds	r24, 0x00F6
    1164:	90 91 f7 00 	lds	r25, 0x00F7
	{
		if (Pipe_BytesInPipe())
    1168:	89 2b       	or	r24, r25
    116a:	19 f4       	brne	.+6      	; 0x1172 <CDC_Host_ReceiveByte+0x40>
    116c:	2f ef       	ldi	r18, 0xFF	; 255
    116e:	3f ef       	ldi	r19, 0xFF	; 255
    1170:	04 c0       	rjmp	.+8      	; 0x117a <CDC_Host_ReceiveByte+0x48>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1172:	80 91 af 00 	lds	r24, 0x00AF
		  ReceivedByte = Pipe_Read_8();
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    117a:	80 91 f6 00 	lds	r24, 0x00F6
    117e:	90 91 f7 00 	lds	r25, 0x00F7

		if (!(Pipe_BytesInPipe()))
    1182:	89 2b       	or	r24, r25
    1184:	29 f4       	brne	.+10     	; 0x1190 <CDC_Host_ReceiveByte+0x5e>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1186:	80 91 a6 00 	lds	r24, 0x00A6
    118a:	8e 77       	andi	r24, 0x7E	; 126
    118c:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1190:	80 91 a9 00 	lds	r24, 0x00A9
    1194:	80 64       	ori	r24, 0x40	; 64
    1196:	80 93 a9 00 	sts	0x00A9, r24
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <CDC_Host_ReceiveByte+0x6e>
		  Pipe_ClearIN();
	}

	Pipe_Freeze();

	return ReceivedByte;
    119c:	2f ef       	ldi	r18, 0xFF	; 255
    119e:	3f ef       	ldi	r19, 0xFF	; 255
}
    11a0:	c9 01       	movw	r24, r18
    11a2:	08 95       	ret

000011a4 <CDC_Host_Event_Stub>:
#endif

void CDC_Host_Event_Stub(void)
{

}
    11a4:	08 95       	ret

000011a6 <CDC_Host_Flush>:

	return ReceivedByte;
}

uint8_t CDC_Host_Flush(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
    11a6:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
    11a8:	80 91 35 01 	lds	r24, 0x0135
    11ac:	8b 30       	cpi	r24, 0x0B	; 11
    11ae:	49 f5       	brne	.+82     	; 0x1202 <CDC_Host_Flush+0x5c>
    11b0:	86 81       	ldd	r24, Z+6	; 0x06
    11b2:	88 23       	and	r24, r24
    11b4:	31 f1       	breq	.+76     	; 0x1202 <CDC_Host_Flush+0x5c>
	  return PIPE_READYWAIT_DeviceDisconnected;

	uint8_t ErrorCode;

	Pipe_SelectPipe(CDCInterfaceInfo->Config.DataOUTPipeNumber);
    11b6:	82 81       	ldd	r24, Z+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    11b8:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11bc:	80 91 a9 00 	lds	r24, 0x00A9
    11c0:	8f 7b       	andi	r24, 0xBF	; 191
    11c2:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    11c6:	80 91 f6 00 	lds	r24, 0x00F6
    11ca:	90 91 f7 00 	lds	r25, 0x00F7
	Pipe_Unfreeze();

	if (!(Pipe_BytesInPipe()))
    11ce:	89 2b       	or	r24, r25
    11d0:	b1 f0       	breq	.+44     	; 0x11fe <CDC_Host_Flush+0x58>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    11d2:	90 91 a6 00 	lds	r25, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    11d6:	80 91 a6 00 	lds	r24, 0x00A6
    11da:	8b 77       	andi	r24, 0x7B	; 123
    11dc:	80 93 a6 00 	sts	0x00A6, r24

	bool BankFull = !(Pipe_IsReadWriteAllowed());

	Pipe_ClearOUT();

	if (BankFull)
    11e0:	95 fd       	sbrc	r25, 5
    11e2:	08 c0       	rjmp	.+16     	; 0x11f4 <CDC_Host_Flush+0x4e>
	{
		if ((ErrorCode = Pipe_WaitUntilReady()) != PIPE_READYWAIT_NoError)
    11e4:	a0 db       	rcall	.-2240   	; 0x926 <Pipe_WaitUntilReady>
    11e6:	88 23       	and	r24, r24
    11e8:	69 f4       	brne	.+26     	; 0x1204 <CDC_Host_Flush+0x5e>
    11ea:	80 91 a6 00 	lds	r24, 0x00A6
    11ee:	8b 77       	andi	r24, 0x7B	; 123
    11f0:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11f4:	80 91 a9 00 	lds	r24, 0x00A9
    11f8:	80 64       	ori	r24, 0x40	; 64
    11fa:	80 93 a9 00 	sts	0x00A9, r24
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	08 95       	ret
		Pipe_ClearOUT();
	}

	Pipe_Freeze();

	return PIPE_READYWAIT_NoError;
    1202:	82 e0       	ldi	r24, 0x02	; 2
}
    1204:	08 95       	ret

00001206 <CDC_Host_USBTask>:

	return DESCRIPTOR_SEARCH_NotFound;
}

void CDC_Host_USBTask(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
    1206:	0f 93       	push	r16
    1208:	1f 93       	push	r17
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	28 97       	sbiw	r28, 0x08	; 8
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	f8 94       	cli
    1218:	de bf       	out	0x3e, r29	; 62
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	cd bf       	out	0x3d, r28	; 61
    121e:	8c 01       	movw	r16, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
    1220:	80 91 35 01 	lds	r24, 0x0135
    1224:	8b 30       	cpi	r24, 0x0B	; 11
    1226:	c1 f5       	brne	.+112    	; 0x1298 <CDC_Host_USBTask+0x92>
    1228:	f8 01       	movw	r30, r16
    122a:	86 81       	ldd	r24, Z+6	; 0x06
    122c:	88 23       	and	r24, r24
    122e:	a1 f1       	breq	.+104    	; 0x1298 <CDC_Host_USBTask+0x92>
	  return;

	Pipe_SelectPipe(CDCInterfaceInfo->Config.NotificationPipeNumber);
    1230:	84 81       	ldd	r24, Z+4	; 0x04
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1232:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1236:	80 91 a9 00 	lds	r24, 0x00A9
    123a:	8f 7b       	andi	r24, 0xBF	; 191
    123c:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1240:	80 91 a6 00 	lds	r24, 0x00A6
	Pipe_Unfreeze();

	if (Pipe_IsINReceived())
    1244:	80 ff       	sbrs	r24, 0
    1246:	21 c0       	rjmp	.+66     	; 0x128a <CDC_Host_USBTask+0x84>
	{
		USB_Request_Header_t Notification;
		Pipe_Read_Stream_LE(&Notification, sizeof(USB_Request_Header_t), NULL);
    1248:	ce 01       	movw	r24, r28
    124a:	01 96       	adiw	r24, 0x01	; 1
    124c:	68 e0       	ldi	r22, 0x08	; 8
    124e:	70 e0       	ldi	r23, 0x00	; 0
    1250:	40 e0       	ldi	r20, 0x00	; 0
    1252:	50 e0       	ldi	r21, 0x00	; 0
    1254:	a8 dc       	rcall	.-1712   	; 0xba6 <Pipe_Read_Stream_LE>

		if ((Notification.bRequest      == CDC_NOTIF_SerialState) &&
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	80 32       	cpi	r24, 0x20	; 32
    125a:	91 f4       	brne	.+36     	; 0x1280 <CDC_Host_USBTask+0x7a>
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	81 3a       	cpi	r24, 0xA1	; 161
    1260:	79 f4       	brne	.+30     	; 0x1280 <CDC_Host_USBTask+0x7a>
		    (Notification.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)))
		{
			Pipe_Read_Stream_LE(&CDCInterfaceInfo->State.ControlLineStates.DeviceToHost,
    1262:	c8 01       	movw	r24, r16
    1264:	0f 96       	adiw	r24, 0x0f	; 15
    1266:	61 e0       	ldi	r22, 0x01	; 1
    1268:	70 e0       	ldi	r23, 0x00	; 0
    126a:	40 e0       	ldi	r20, 0x00	; 0
    126c:	50 e0       	ldi	r21, 0x00	; 0
    126e:	9b dc       	rcall	.-1738   	; 0xba6 <Pipe_Read_Stream_LE>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1270:	80 91 a6 00 	lds	r24, 0x00A6
    1274:	8e 77       	andi	r24, 0x7E	; 126
    1276:	80 93 a6 00 	sts	0x00A6, r24
			                    sizeof(CDCInterfaceInfo->State.ControlLineStates.DeviceToHost),
			                    NULL);

			Pipe_ClearIN();

			EVENT_CDC_Host_ControLineStateChanged(CDCInterfaceInfo);
    127a:	c8 01       	movw	r24, r16
    127c:	93 df       	rcall	.-218    	; 0x11a4 <CDC_Host_Event_Stub>
    127e:	05 c0       	rjmp	.+10     	; 0x128a <CDC_Host_USBTask+0x84>
    1280:	80 91 a6 00 	lds	r24, 0x00A6
    1284:	8e 77       	andi	r24, 0x7E	; 126
    1286:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    128a:	80 91 a9 00 	lds	r24, 0x00A9
    128e:	80 64       	ori	r24, 0x40	; 64
    1290:	80 93 a9 00 	sts	0x00A9, r24
	}

	Pipe_Freeze();

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Host_Flush(CDCInterfaceInfo);
    1294:	c8 01       	movw	r24, r16
    1296:	87 df       	rcall	.-242    	; 0x11a6 <CDC_Host_Flush>
	#endif
}
    1298:	28 96       	adiw	r28, 0x08	; 8
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	de bf       	out	0x3e, r29	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	cd bf       	out	0x3d, r28	; 61
    12a4:	cf 91       	pop	r28
    12a6:	df 91       	pop	r29
    12a8:	1f 91       	pop	r17
    12aa:	0f 91       	pop	r16
    12ac:	08 95       	ret

000012ae <CDC_Host_ConfigurePipes>:
#include "CDC.h"

uint8_t CDC_Host_ConfigurePipes(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    12ae:	4f 92       	push	r4
    12b0:	5f 92       	push	r5
    12b2:	6f 92       	push	r6
    12b4:	7f 92       	push	r7
    12b6:	8f 92       	push	r8
    12b8:	9f 92       	push	r9
    12ba:	af 92       	push	r10
    12bc:	bf 92       	push	r11
    12be:	cf 92       	push	r12
    12c0:	df 92       	push	r13
    12c2:	ef 92       	push	r14
    12c4:	ff 92       	push	r15
    12c6:	0f 93       	push	r16
    12c8:	1f 93       	push	r17
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	00 d0       	rcall	.+0      	; 0x12d0 <CDC_Host_ConfigurePipes+0x22>
    12d0:	00 d0       	rcall	.+0      	; 0x12d2 <CDC_Host_ConfigurePipes+0x24>
    12d2:	0f 92       	push	r0
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
    12d8:	6c 01       	movw	r12, r24
    12da:	7a 83       	std	Y+2, r23	; 0x02
    12dc:	69 83       	std	Y+1, r22	; 0x01
    12de:	5c 83       	std	Y+4, r21	; 0x04
    12e0:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint       = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint      = NULL;
	USB_Descriptor_Endpoint_t*  NotificationEndpoint = NULL;
	USB_Descriptor_Interface_t* CDCControlInterface  = NULL;

	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    12e2:	06 96       	adiw	r24, 0x06	; 6
    12e4:	fc 01       	movw	r30, r24
    12e6:	81 e1       	ldi	r24, 0x11	; 17
    12e8:	df 01       	movw	r26, r30
    12ea:	1d 92       	st	X+, r1
    12ec:	8a 95       	dec	r24
    12ee:	e9 f7       	brne	.-6      	; 0x12ea <CDC_Host_ConfigurePipes+0x3c>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    12f0:	eb 81       	ldd	r30, Y+3	; 0x03
    12f2:	fc 81       	ldd	r31, Y+4	; 0x04
    12f4:	81 81       	ldd	r24, Z+1	; 0x01
    12f6:	82 30       	cpi	r24, 0x02	; 2
    12f8:	11 f0       	breq	.+4      	; 0x12fe <CDC_Host_ConfigurePipes+0x50>
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	ac c0       	rjmp	.+344    	; 0x1456 <CDC_Host_ConfigurePipes+0x1a8>
    12fe:	66 24       	eor	r6, r6
    1300:	77 24       	eor	r7, r7
    1302:	88 24       	eor	r8, r8
    1304:	99 24       	eor	r9, r9
    1306:	aa 24       	eor	r10, r10
    1308:	bb 24       	eor	r11, r11
    130a:	44 24       	eor	r4, r4
    130c:	55 24       	eor	r5, r5
	  return CDC_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		if (!(CDCControlInterface) ||
    130e:	83 e0       	ldi	r24, 0x03	; 3
    1310:	e8 2e       	mov	r14, r24
    1312:	f1 2c       	mov	r15, r1
    1314:	ec 0e       	add	r14, r28
    1316:	fd 1e       	adc	r15, r29
    1318:	8e 01       	movw	r16, r28
    131a:	0f 5f       	subi	r16, 0xFF	; 255
    131c:	1f 4f       	sbci	r17, 0xFF	; 255
    131e:	04 c0       	rjmp	.+8      	; 0x1328 <CDC_Host_ConfigurePipes+0x7a>
	USB_Descriptor_Endpoint_t*  NotificationEndpoint = NULL;
	USB_Descriptor_Interface_t* CDCControlInterface  = NULL;

	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1320:	88 24       	eor	r8, r8
    1322:	99 24       	eor	r9, r9
    1324:	66 24       	eor	r6, r6
    1326:	77 24       	eor	r7, r7
	  return CDC_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		if (!(CDCControlInterface) ||
    1328:	41 14       	cp	r4, r1
    132a:	51 04       	cpc	r5, r1
    132c:	39 f0       	breq	.+14     	; 0x133c <CDC_Host_ConfigurePipes+0x8e>
    132e:	c8 01       	movw	r24, r16
    1330:	b7 01       	movw	r22, r14
    1332:	41 e4       	ldi	r20, 0x41	; 65
    1334:	5a e0       	ldi	r21, 0x0A	; 10
    1336:	8e dc       	rcall	.-1764   	; 0xc54 <USB_GetNextDescriptorComp>
    1338:	88 23       	and	r24, r24
    133a:	b1 f0       	breq	.+44     	; 0x1368 <CDC_Host_ConfigurePipes+0xba>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_CDC_Host_NextCDCInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (NotificationEndpoint)
    133c:	a1 14       	cp	r10, r1
    133e:	b1 04       	cpc	r11, r1
    1340:	41 f0       	breq	.+16     	; 0x1352 <CDC_Host_ConfigurePipes+0xa4>
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1342:	c8 01       	movw	r24, r16
    1344:	b7 01       	movw	r22, r14
    1346:	48 e5       	ldi	r20, 0x58	; 88
    1348:	58 e0       	ldi	r21, 0x08	; 8
    134a:	84 dc       	rcall	.-1784   	; 0xc54 <USB_GetNextDescriptorComp>
    134c:	88 23       	and	r24, r24
    134e:	41 f3       	breq	.-48     	; 0x1320 <CDC_Host_ConfigurePipes+0x72>
    1350:	81 c0       	rjmp	.+258    	; 0x1454 <CDC_Host_ConfigurePipes+0x1a6>
				DataINEndpoint  = NULL;
				DataOUTEndpoint = NULL;
			}
			else
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1352:	c8 01       	movw	r24, r16
    1354:	b7 01       	movw	r22, r14
    1356:	47 e4       	ldi	r20, 0x47	; 71
    1358:	58 e0       	ldi	r21, 0x08	; 8
    135a:	7c dc       	rcall	.-1800   	; 0xc54 <USB_GetNextDescriptorComp>
    135c:	88 23       	and	r24, r24
    135e:	09 f0       	breq	.+2      	; 0x1362 <CDC_Host_ConfigurePipes+0xb4>
    1360:	79 c0       	rjmp	.+242    	; 0x1454 <CDC_Host_ConfigurePipes+0x1a6>
				                              DCOMP_CDC_Host_NextCDCControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return CDC_ENUMERROR_NoCompatibleInterfaceFound;
				}

				CDCControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1362:	4b 80       	ldd	r4, Y+3	; 0x03
    1364:	5c 80       	ldd	r5, Y+4	; 0x04
    1366:	0e c0       	rjmp	.+28     	; 0x1384 <CDC_Host_ConfigurePipes+0xd6>
			}

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1368:	eb 81       	ldd	r30, Y+3	; 0x03
    136a:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    136c:	82 81       	ldd	r24, Z+2	; 0x02
    136e:	87 fd       	sbrc	r24, 7
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <CDC_Host_ConfigurePipes+0xc8>
    1372:	4f 01       	movw	r8, r30
    1374:	07 c0       	rjmp	.+14     	; 0x1384 <CDC_Host_ConfigurePipes+0xd6>
		{
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
    1376:	83 81       	ldd	r24, Z+3	; 0x03
    1378:	83 70       	andi	r24, 0x03	; 3
    137a:	83 30       	cpi	r24, 0x03	; 3
    137c:	11 f0       	breq	.+4      	; 0x1382 <CDC_Host_ConfigurePipes+0xd4>
    137e:	3f 01       	movw	r6, r30
    1380:	01 c0       	rjmp	.+2      	; 0x1384 <CDC_Host_ConfigurePipes+0xd6>
    1382:	5f 01       	movw	r10, r30
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return CDC_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
    1384:	61 14       	cp	r6, r1
    1386:	71 04       	cpc	r7, r1
    1388:	79 f2       	breq	.-98     	; 0x1328 <CDC_Host_ConfigurePipes+0x7a>
    138a:	81 14       	cp	r8, r1
    138c:	91 04       	cpc	r9, r1
    138e:	61 f2       	breq	.-104    	; 0x1328 <CDC_Host_ConfigurePipes+0x7a>
    1390:	a1 14       	cp	r10, r1
    1392:	b1 04       	cpc	r11, r1
    1394:	49 f2       	breq	.-110    	; 0x1328 <CDC_Host_ConfigurePipes+0x7a>
    1396:	91 e0       	ldi	r25, 0x01	; 1
		uint8_t  Token;
		uint8_t  EndpointAddress;
		uint8_t  InterruptPeriod;
		bool     DoubleBanked;

		if (PipeNum == CDCInterfaceInfo->Config.DataINPipeNumber)
    1398:	f6 01       	movw	r30, r12
    139a:	80 81       	ld	r24, Z
    139c:	98 17       	cp	r25, r24
    139e:	69 f4       	brne	.+26     	; 0x13ba <CDC_Host_ConfigurePipes+0x10c>
		{
			Size            = le16_to_cpu(DataINEndpoint->EndpointSize);
    13a0:	d3 01       	movw	r26, r6
    13a2:	14 96       	adiw	r26, 0x04	; 4
    13a4:	0d 91       	ld	r16, X+
    13a6:	1c 91       	ld	r17, X
    13a8:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataINEndpoint->EndpointAddress;
    13aa:	12 96       	adiw	r26, 0x02	; 2
    13ac:	2c 91       	ld	r18, X
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = CDCInterfaceInfo->Config.DataINPipeDoubleBank;
    13ae:	81 81       	ldd	r24, Z+1	; 0x01
			InterruptPeriod = 0;

			CDCInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    13b0:	11 87       	std	Z+9, r17	; 0x09
    13b2:	00 87       	std	Z+8, r16	; 0x08
    13b4:	62 e0       	ldi	r22, 0x02	; 2
    13b6:	40 e1       	ldi	r20, 0x10	; 16
    13b8:	10 c0       	rjmp	.+32     	; 0x13da <CDC_Host_ConfigurePipes+0x12c>
		}
		else if (PipeNum == CDCInterfaceInfo->Config.DataOUTPipeNumber)
    13ba:	f6 01       	movw	r30, r12
    13bc:	82 81       	ldd	r24, Z+2	; 0x02
    13be:	98 17       	cp	r25, r24
    13c0:	71 f4       	brne	.+28     	; 0x13de <CDC_Host_ConfigurePipes+0x130>
		{
			Size            = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    13c2:	d4 01       	movw	r26, r8
    13c4:	14 96       	adiw	r26, 0x04	; 4
    13c6:	0d 91       	ld	r16, X+
    13c8:	1c 91       	ld	r17, X
    13ca:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
    13cc:	12 96       	adiw	r26, 0x02	; 2
    13ce:	2c 91       	ld	r18, X
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = CDCInterfaceInfo->Config.DataOUTPipeDoubleBank;
    13d0:	83 81       	ldd	r24, Z+3	; 0x03
			InterruptPeriod = 0;

			CDCInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    13d2:	13 87       	std	Z+11, r17	; 0x0b
    13d4:	02 87       	std	Z+10, r16	; 0x0a
    13d6:	62 e0       	ldi	r22, 0x02	; 2
    13d8:	40 e2       	ldi	r20, 0x20	; 32
    13da:	ff 24       	eor	r15, r15
    13dc:	13 c0       	rjmp	.+38     	; 0x1404 <CDC_Host_ConfigurePipes+0x156>
		}
		else if (PipeNum == CDCInterfaceInfo->Config.NotificationPipeNumber)
    13de:	f6 01       	movw	r30, r12
    13e0:	84 81       	ldd	r24, Z+4	; 0x04
    13e2:	98 17       	cp	r25, r24
    13e4:	09 f5       	brne	.+66     	; 0x1428 <CDC_Host_ConfigurePipes+0x17a>
		{
			Size            = le16_to_cpu(NotificationEndpoint->EndpointSize);
    13e6:	d5 01       	movw	r26, r10
    13e8:	14 96       	adiw	r26, 0x04	; 4
    13ea:	0d 91       	ld	r16, X+
    13ec:	1c 91       	ld	r17, X
    13ee:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = NotificationEndpoint->EndpointAddress;
    13f0:	12 96       	adiw	r26, 0x02	; 2
    13f2:	2c 91       	ld	r18, X
    13f4:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_INTERRUPT;
			DoubleBanked    = CDCInterfaceInfo->Config.NotificationPipeDoubleBank;
    13f6:	85 81       	ldd	r24, Z+5	; 0x05
			InterruptPeriod = NotificationEndpoint->PollingIntervalMS;
    13f8:	16 96       	adiw	r26, 0x06	; 6
    13fa:	fc 90       	ld	r15, X

			CDCInterfaceInfo->State.NotificationPipeSize = NotificationEndpoint->EndpointSize;
    13fc:	15 87       	std	Z+13, r17	; 0x0d
    13fe:	04 87       	std	Z+12, r16	; 0x0c
    1400:	63 e0       	ldi	r22, 0x03	; 3
    1402:	40 e1       	ldi	r20, 0x10	; 16
		else
		{
			continue;
		}
		
		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    1404:	88 23       	and	r24, r24
    1406:	11 f4       	brne	.+4      	; 0x140c <CDC_Host_ConfigurePipes+0x15e>
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	01 c0       	rjmp	.+2      	; 0x140e <CDC_Host_ConfigurePipes+0x160>
    140c:	34 e0       	ldi	r19, 0x04	; 4
    140e:	89 2f       	mov	r24, r25
    1410:	e3 2e       	mov	r14, r19
    1412:	9d 83       	std	Y+5, r25	; 0x05
    1414:	f4 d9       	rcall	.-3096   	; 0x7fe <Pipe_ConfigurePipe>
    1416:	9d 81       	ldd	r25, Y+5	; 0x05
    1418:	88 23       	and	r24, r24
    141a:	11 f4       	brne	.+4      	; 0x1420 <CDC_Host_ConfigurePipes+0x172>
    141c:	83 e0       	ldi	r24, 0x03	; 3
    141e:	1b c0       	rjmp	.+54     	; 0x1456 <CDC_Host_ConfigurePipes+0x1a8>
		                         DoubleBanked ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE)))
		{
			return CDC_ENUMERROR_PipeConfigurationFailed;
		}
		
		if (InterruptPeriod)
    1420:	ff 20       	and	r15, r15
    1422:	11 f0       	breq	.+4      	; 0x1428 <CDC_Host_ConfigurePipes+0x17a>
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
    1424:	f0 92 ad 00 	sts	0x00AD, r15
		{
			DataOUTEndpoint = EndpointData;
		}
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    1428:	9f 5f       	subi	r25, 0xFF	; 255
    142a:	97 30       	cpi	r25, 0x07	; 7
    142c:	09 f0       	breq	.+2      	; 0x1430 <CDC_Host_ConfigurePipes+0x182>
    142e:	b4 cf       	rjmp	.-152    	; 0x1398 <CDC_Host_ConfigurePipes+0xea>
		
		if (InterruptPeriod)
		  Pipe_SetInterruptPeriod(InterruptPeriod);
	}

	CDCInterfaceInfo->State.ControlInterfaceNumber = CDCControlInterface->InterfaceNumber;
    1430:	f2 01       	movw	r30, r4
    1432:	82 81       	ldd	r24, Z+2	; 0x02
    1434:	d6 01       	movw	r26, r12
    1436:	17 96       	adiw	r26, 0x07	; 7
    1438:	8c 93       	st	X, r24
    143a:	17 97       	sbiw	r26, 0x07	; 7
	CDCInterfaceInfo->State.ControlLineStates.HostToDevice = (CDC_CONTROL_LINE_OUT_RTS | CDC_CONTROL_LINE_OUT_DTR);
    143c:	83 e0       	ldi	r24, 0x03	; 3
    143e:	1e 96       	adiw	r26, 0x0e	; 14
    1440:	8c 93       	st	X, r24
    1442:	1e 97       	sbiw	r26, 0x0e	; 14
	CDCInterfaceInfo->State.ControlLineStates.DeviceToHost = (CDC_CONTROL_LINE_IN_DCD  | CDC_CONTROL_LINE_IN_DSR);
    1444:	1f 96       	adiw	r26, 0x0f	; 15
    1446:	8c 93       	st	X, r24
    1448:	1f 97       	sbiw	r26, 0x0f	; 15
	CDCInterfaceInfo->State.IsActive = true;
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	16 96       	adiw	r26, 0x06	; 6
    144e:	8c 93       	st	X, r24
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	01 c0       	rjmp	.+2      	; 0x1456 <CDC_Host_ConfigurePipes+0x1a8>

	return CDC_ENUMERROR_NoError;
    1454:	82 e0       	ldi	r24, 0x02	; 2
}
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	1f 91       	pop	r17
    1466:	0f 91       	pop	r16
    1468:	ff 90       	pop	r15
    146a:	ef 90       	pop	r14
    146c:	df 90       	pop	r13
    146e:	cf 90       	pop	r12
    1470:	bf 90       	pop	r11
    1472:	af 90       	pop	r10
    1474:	9f 90       	pop	r9
    1476:	8f 90       	pop	r8
    1478:	7f 90       	pop	r7
    147a:	6f 90       	pop	r6
    147c:	5f 90       	pop	r5
    147e:	4f 90       	pop	r4
    1480:	08 95       	ret

00001482 <DCOMP_CDC_Host_NextCDCInterfaceEndpoint>:

	return DESCRIPTOR_SEARCH_NotFound;
}

static uint8_t DCOMP_CDC_Host_NextCDCInterfaceEndpoint(void* const CurrentDescriptor)
{
    1482:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1484:	81 81       	ldd	r24, Z+1	; 0x01
    1486:	85 30       	cpi	r24, 0x05	; 5
    1488:	51 f4       	brne	.+20     	; 0x149e <DCOMP_CDC_Host_NextCDCInterfaceEndpoint+0x1c>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
    148a:	83 81       	ldd	r24, Z+3	; 0x03
    148c:	83 70       	andi	r24, 0x03	; 3
    148e:	82 50       	subi	r24, 0x02	; 2
    1490:	82 30       	cpi	r24, 0x02	; 2
    1492:	48 f4       	brcc	.+18     	; 0x14a6 <DCOMP_CDC_Host_NextCDCInterfaceEndpoint+0x24>
    1494:	82 81       	ldd	r24, Z+2	; 0x02
    1496:	25 da       	rcall	.-2998   	; 0x8e2 <Pipe_IsEndpointBound>
    1498:	88 23       	and	r24, r24
    149a:	29 f4       	brne	.+10     	; 0x14a6 <DCOMP_CDC_Host_NextCDCInterfaceEndpoint+0x24>
    149c:	08 95       	ret
		    !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
    149e:	84 30       	cpi	r24, 0x04	; 4
    14a0:	11 f4       	brne	.+4      	; 0x14a6 <DCOMP_CDC_Host_NextCDCInterfaceEndpoint+0x24>
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	08 95       	ret
    14a6:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    14a8:	08 95       	ret

000014aa <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    14aa:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    14ac:	80 91 c8 00 	lds	r24, 0x00C8
    14b0:	85 ff       	sbrs	r24, 5
    14b2:	fc cf       	rjmp	.-8      	; 0x14ac <Serial_putchar+0x2>
				UDR1 = DataByte;
    14b4:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	08 95       	ret

000014be <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    14be:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    14c2:	87 fd       	sbrc	r24, 7
    14c4:	03 c0       	rjmp	.+6      	; 0x14cc <Serial_getchar+0xe>
    14c6:	2e ef       	ldi	r18, 0xFE	; 254
    14c8:	3f ef       	ldi	r19, 0xFF	; 255
    14ca:	0b c0       	rjmp	.+22     	; 0x14e2 <Serial_getchar+0x24>
    14cc:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    14d0:	87 fd       	sbrc	r24, 7
    14d2:	03 c0       	rjmp	.+6      	; 0x14da <Serial_getchar+0x1c>
    14d4:	2f ef       	ldi	r18, 0xFF	; 255
    14d6:	3f ef       	ldi	r19, 0xFF	; 255
    14d8:	04 c0       	rjmp	.+8      	; 0x14e2 <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    14da:	80 91 ce 00 	lds	r24, 0x00CE
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    14e2:	c9 01       	movw	r24, r18
    14e4:	08 95       	ret

000014e6 <fputc>:
    14e6:	0f 93       	push	r16
    14e8:	1f 93       	push	r17
    14ea:	cf 93       	push	r28
    14ec:	df 93       	push	r29
    14ee:	8c 01       	movw	r16, r24
    14f0:	eb 01       	movw	r28, r22
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	81 ff       	sbrs	r24, 1
    14f6:	1b c0       	rjmp	.+54     	; 0x152e <fputc+0x48>
    14f8:	82 ff       	sbrs	r24, 2
    14fa:	0d c0       	rjmp	.+26     	; 0x1516 <fputc+0x30>
    14fc:	2e 81       	ldd	r18, Y+6	; 0x06
    14fe:	3f 81       	ldd	r19, Y+7	; 0x07
    1500:	8c 81       	ldd	r24, Y+4	; 0x04
    1502:	9d 81       	ldd	r25, Y+5	; 0x05
    1504:	28 17       	cp	r18, r24
    1506:	39 07       	cpc	r19, r25
    1508:	64 f4       	brge	.+24     	; 0x1522 <fputc+0x3c>
    150a:	e8 81       	ld	r30, Y
    150c:	f9 81       	ldd	r31, Y+1	; 0x01
    150e:	01 93       	st	Z+, r16
    1510:	f9 83       	std	Y+1, r31	; 0x01
    1512:	e8 83       	st	Y, r30
    1514:	06 c0       	rjmp	.+12     	; 0x1522 <fputc+0x3c>
    1516:	e8 85       	ldd	r30, Y+8	; 0x08
    1518:	f9 85       	ldd	r31, Y+9	; 0x09
    151a:	80 2f       	mov	r24, r16
    151c:	09 95       	icall
    151e:	89 2b       	or	r24, r25
    1520:	31 f4       	brne	.+12     	; 0x152e <fputc+0x48>
    1522:	8e 81       	ldd	r24, Y+6	; 0x06
    1524:	9f 81       	ldd	r25, Y+7	; 0x07
    1526:	01 96       	adiw	r24, 0x01	; 1
    1528:	9f 83       	std	Y+7, r25	; 0x07
    152a:	8e 83       	std	Y+6, r24	; 0x06
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <fputc+0x4c>
    152e:	0f ef       	ldi	r16, 0xFF	; 255
    1530:	1f ef       	ldi	r17, 0xFF	; 255
    1532:	c8 01       	movw	r24, r16
    1534:	df 91       	pop	r29
    1536:	cf 91       	pop	r28
    1538:	1f 91       	pop	r17
    153a:	0f 91       	pop	r16
    153c:	08 95       	ret

0000153e <printf_P>:
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
    1546:	fe 01       	movw	r30, r28
    1548:	35 96       	adiw	r30, 0x05	; 5
    154a:	61 91       	ld	r22, Z+
    154c:	71 91       	ld	r23, Z+
    154e:	a0 91 46 01 	lds	r26, 0x0146
    1552:	b0 91 47 01 	lds	r27, 0x0147
    1556:	13 96       	adiw	r26, 0x03	; 3
    1558:	8c 91       	ld	r24, X
    155a:	13 97       	sbiw	r26, 0x03	; 3
    155c:	88 60       	ori	r24, 0x08	; 8
    155e:	13 96       	adiw	r26, 0x03	; 3
    1560:	8c 93       	st	X, r24
    1562:	80 91 46 01 	lds	r24, 0x0146
    1566:	90 91 47 01 	lds	r25, 0x0147
    156a:	af 01       	movw	r20, r30
    156c:	3f d0       	rcall	.+126    	; 0x15ec <vfprintf>
    156e:	e0 91 46 01 	lds	r30, 0x0146
    1572:	f0 91 47 01 	lds	r31, 0x0147
    1576:	23 81       	ldd	r18, Z+3	; 0x03
    1578:	27 7f       	andi	r18, 0xF7	; 247
    157a:	23 83       	std	Z+3, r18	; 0x03
    157c:	cf 91       	pop	r28
    157e:	df 91       	pop	r29
    1580:	08 95       	ret

00001582 <puts_P>:
    1582:	0f 93       	push	r16
    1584:	1f 93       	push	r17
    1586:	cf 93       	push	r28
    1588:	df 93       	push	r29
    158a:	ec 01       	movw	r28, r24
    158c:	e0 91 46 01 	lds	r30, 0x0146
    1590:	f0 91 47 01 	lds	r31, 0x0147
    1594:	83 81       	ldd	r24, Z+3	; 0x03
    1596:	81 ff       	sbrs	r24, 1
    1598:	21 c0       	rjmp	.+66     	; 0x15dc <puts_P+0x5a>
    159a:	00 e0       	ldi	r16, 0x00	; 0
    159c:	10 e0       	ldi	r17, 0x00	; 0
    159e:	0e c0       	rjmp	.+28     	; 0x15bc <puts_P+0x3a>
    15a0:	e0 91 46 01 	lds	r30, 0x0146
    15a4:	f0 91 47 01 	lds	r31, 0x0147
    15a8:	20 85       	ldd	r18, Z+8	; 0x08
    15aa:	31 85       	ldd	r19, Z+9	; 0x09
    15ac:	bf 01       	movw	r22, r30
    15ae:	f9 01       	movw	r30, r18
    15b0:	09 95       	icall
    15b2:	89 2b       	or	r24, r25
    15b4:	11 f0       	breq	.+4      	; 0x15ba <puts_P+0x38>
    15b6:	0f ef       	ldi	r16, 0xFF	; 255
    15b8:	1f ef       	ldi	r17, 0xFF	; 255
    15ba:	21 96       	adiw	r28, 0x01	; 1
    15bc:	fe 01       	movw	r30, r28
    15be:	84 91       	lpm	r24, Z+
    15c0:	88 23       	and	r24, r24
    15c2:	71 f7       	brne	.-36     	; 0x15a0 <puts_P+0x1e>
    15c4:	e0 91 46 01 	lds	r30, 0x0146
    15c8:	f0 91 47 01 	lds	r31, 0x0147
    15cc:	20 85       	ldd	r18, Z+8	; 0x08
    15ce:	31 85       	ldd	r19, Z+9	; 0x09
    15d0:	8a e0       	ldi	r24, 0x0A	; 10
    15d2:	bf 01       	movw	r22, r30
    15d4:	f9 01       	movw	r30, r18
    15d6:	09 95       	icall
    15d8:	89 2b       	or	r24, r25
    15da:	11 f0       	breq	.+4      	; 0x15e0 <puts_P+0x5e>
    15dc:	0f ef       	ldi	r16, 0xFF	; 255
    15de:	1f ef       	ldi	r17, 0xFF	; 255
    15e0:	c8 01       	movw	r24, r16
    15e2:	df 91       	pop	r29
    15e4:	cf 91       	pop	r28
    15e6:	1f 91       	pop	r17
    15e8:	0f 91       	pop	r16
    15ea:	08 95       	ret

000015ec <vfprintf>:
    15ec:	2f 92       	push	r2
    15ee:	3f 92       	push	r3
    15f0:	4f 92       	push	r4
    15f2:	5f 92       	push	r5
    15f4:	6f 92       	push	r6
    15f6:	7f 92       	push	r7
    15f8:	8f 92       	push	r8
    15fa:	9f 92       	push	r9
    15fc:	af 92       	push	r10
    15fe:	bf 92       	push	r11
    1600:	cf 92       	push	r12
    1602:	df 92       	push	r13
    1604:	ef 92       	push	r14
    1606:	ff 92       	push	r15
    1608:	0f 93       	push	r16
    160a:	1f 93       	push	r17
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	2b 97       	sbiw	r28, 0x0b	; 11
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	f8 94       	cli
    161a:	de bf       	out	0x3e, r29	; 62
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	cd bf       	out	0x3d, r28	; 61
    1620:	3c 01       	movw	r6, r24
    1622:	2b 01       	movw	r4, r22
    1624:	5a 01       	movw	r10, r20
    1626:	fc 01       	movw	r30, r24
    1628:	17 82       	std	Z+7, r1	; 0x07
    162a:	16 82       	std	Z+6, r1	; 0x06
    162c:	83 81       	ldd	r24, Z+3	; 0x03
    162e:	81 fd       	sbrc	r24, 1
    1630:	03 c0       	rjmp	.+6      	; 0x1638 <vfprintf+0x4c>
    1632:	6f ef       	ldi	r22, 0xFF	; 255
    1634:	7f ef       	ldi	r23, 0xFF	; 255
    1636:	b9 c1       	rjmp	.+882    	; 0x19aa <vfprintf+0x3be>
    1638:	9a e0       	ldi	r25, 0x0A	; 10
    163a:	89 2e       	mov	r8, r25
    163c:	1e 01       	movw	r2, r28
    163e:	08 94       	sec
    1640:	21 1c       	adc	r2, r1
    1642:	31 1c       	adc	r3, r1
    1644:	f3 01       	movw	r30, r6
    1646:	23 81       	ldd	r18, Z+3	; 0x03
    1648:	f2 01       	movw	r30, r4
    164a:	23 fd       	sbrc	r18, 3
    164c:	85 91       	lpm	r24, Z+
    164e:	23 ff       	sbrs	r18, 3
    1650:	81 91       	ld	r24, Z+
    1652:	2f 01       	movw	r4, r30
    1654:	88 23       	and	r24, r24
    1656:	09 f4       	brne	.+2      	; 0x165a <vfprintf+0x6e>
    1658:	a5 c1       	rjmp	.+842    	; 0x19a4 <vfprintf+0x3b8>
    165a:	85 32       	cpi	r24, 0x25	; 37
    165c:	39 f4       	brne	.+14     	; 0x166c <vfprintf+0x80>
    165e:	23 fd       	sbrc	r18, 3
    1660:	85 91       	lpm	r24, Z+
    1662:	23 ff       	sbrs	r18, 3
    1664:	81 91       	ld	r24, Z+
    1666:	2f 01       	movw	r4, r30
    1668:	85 32       	cpi	r24, 0x25	; 37
    166a:	21 f4       	brne	.+8      	; 0x1674 <vfprintf+0x88>
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	b3 01       	movw	r22, r6
    1670:	3a df       	rcall	.-396    	; 0x14e6 <fputc>
    1672:	e8 cf       	rjmp	.-48     	; 0x1644 <vfprintf+0x58>
    1674:	98 2f       	mov	r25, r24
    1676:	ff 24       	eor	r15, r15
    1678:	ee 24       	eor	r14, r14
    167a:	99 24       	eor	r9, r9
    167c:	ff e1       	ldi	r31, 0x1F	; 31
    167e:	ff 15       	cp	r31, r15
    1680:	d0 f0       	brcs	.+52     	; 0x16b6 <vfprintf+0xca>
    1682:	9b 32       	cpi	r25, 0x2B	; 43
    1684:	69 f0       	breq	.+26     	; 0x16a0 <vfprintf+0xb4>
    1686:	9c 32       	cpi	r25, 0x2C	; 44
    1688:	28 f4       	brcc	.+10     	; 0x1694 <vfprintf+0xa8>
    168a:	90 32       	cpi	r25, 0x20	; 32
    168c:	59 f0       	breq	.+22     	; 0x16a4 <vfprintf+0xb8>
    168e:	93 32       	cpi	r25, 0x23	; 35
    1690:	91 f4       	brne	.+36     	; 0x16b6 <vfprintf+0xca>
    1692:	0e c0       	rjmp	.+28     	; 0x16b0 <vfprintf+0xc4>
    1694:	9d 32       	cpi	r25, 0x2D	; 45
    1696:	49 f0       	breq	.+18     	; 0x16aa <vfprintf+0xbe>
    1698:	90 33       	cpi	r25, 0x30	; 48
    169a:	69 f4       	brne	.+26     	; 0x16b6 <vfprintf+0xca>
    169c:	41 e0       	ldi	r20, 0x01	; 1
    169e:	24 c0       	rjmp	.+72     	; 0x16e8 <vfprintf+0xfc>
    16a0:	52 e0       	ldi	r21, 0x02	; 2
    16a2:	f5 2a       	or	r15, r21
    16a4:	84 e0       	ldi	r24, 0x04	; 4
    16a6:	f8 2a       	or	r15, r24
    16a8:	28 c0       	rjmp	.+80     	; 0x16fa <vfprintf+0x10e>
    16aa:	98 e0       	ldi	r25, 0x08	; 8
    16ac:	f9 2a       	or	r15, r25
    16ae:	25 c0       	rjmp	.+74     	; 0x16fa <vfprintf+0x10e>
    16b0:	e0 e1       	ldi	r30, 0x10	; 16
    16b2:	fe 2a       	or	r15, r30
    16b4:	22 c0       	rjmp	.+68     	; 0x16fa <vfprintf+0x10e>
    16b6:	f7 fc       	sbrc	r15, 7
    16b8:	29 c0       	rjmp	.+82     	; 0x170c <vfprintf+0x120>
    16ba:	89 2f       	mov	r24, r25
    16bc:	80 53       	subi	r24, 0x30	; 48
    16be:	8a 30       	cpi	r24, 0x0A	; 10
    16c0:	70 f4       	brcc	.+28     	; 0x16de <vfprintf+0xf2>
    16c2:	f6 fe       	sbrs	r15, 6
    16c4:	05 c0       	rjmp	.+10     	; 0x16d0 <vfprintf+0xe4>
    16c6:	98 9c       	mul	r9, r8
    16c8:	90 2c       	mov	r9, r0
    16ca:	11 24       	eor	r1, r1
    16cc:	98 0e       	add	r9, r24
    16ce:	15 c0       	rjmp	.+42     	; 0x16fa <vfprintf+0x10e>
    16d0:	e8 9c       	mul	r14, r8
    16d2:	e0 2c       	mov	r14, r0
    16d4:	11 24       	eor	r1, r1
    16d6:	e8 0e       	add	r14, r24
    16d8:	f0 e2       	ldi	r31, 0x20	; 32
    16da:	ff 2a       	or	r15, r31
    16dc:	0e c0       	rjmp	.+28     	; 0x16fa <vfprintf+0x10e>
    16de:	9e 32       	cpi	r25, 0x2E	; 46
    16e0:	29 f4       	brne	.+10     	; 0x16ec <vfprintf+0x100>
    16e2:	f6 fc       	sbrc	r15, 6
    16e4:	5f c1       	rjmp	.+702    	; 0x19a4 <vfprintf+0x3b8>
    16e6:	40 e4       	ldi	r20, 0x40	; 64
    16e8:	f4 2a       	or	r15, r20
    16ea:	07 c0       	rjmp	.+14     	; 0x16fa <vfprintf+0x10e>
    16ec:	9c 36       	cpi	r25, 0x6C	; 108
    16ee:	19 f4       	brne	.+6      	; 0x16f6 <vfprintf+0x10a>
    16f0:	50 e8       	ldi	r21, 0x80	; 128
    16f2:	f5 2a       	or	r15, r21
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <vfprintf+0x10e>
    16f6:	98 36       	cpi	r25, 0x68	; 104
    16f8:	49 f4       	brne	.+18     	; 0x170c <vfprintf+0x120>
    16fa:	f2 01       	movw	r30, r4
    16fc:	23 fd       	sbrc	r18, 3
    16fe:	95 91       	lpm	r25, Z+
    1700:	23 ff       	sbrs	r18, 3
    1702:	91 91       	ld	r25, Z+
    1704:	2f 01       	movw	r4, r30
    1706:	99 23       	and	r25, r25
    1708:	09 f0       	breq	.+2      	; 0x170c <vfprintf+0x120>
    170a:	b8 cf       	rjmp	.-144    	; 0x167c <vfprintf+0x90>
    170c:	89 2f       	mov	r24, r25
    170e:	85 54       	subi	r24, 0x45	; 69
    1710:	83 30       	cpi	r24, 0x03	; 3
    1712:	18 f0       	brcs	.+6      	; 0x171a <vfprintf+0x12e>
    1714:	80 52       	subi	r24, 0x20	; 32
    1716:	83 30       	cpi	r24, 0x03	; 3
    1718:	38 f4       	brcc	.+14     	; 0x1728 <vfprintf+0x13c>
    171a:	44 e0       	ldi	r20, 0x04	; 4
    171c:	50 e0       	ldi	r21, 0x00	; 0
    171e:	a4 0e       	add	r10, r20
    1720:	b5 1e       	adc	r11, r21
    1722:	5f e3       	ldi	r21, 0x3F	; 63
    1724:	59 83       	std	Y+1, r21	; 0x01
    1726:	0f c0       	rjmp	.+30     	; 0x1746 <vfprintf+0x15a>
    1728:	93 36       	cpi	r25, 0x63	; 99
    172a:	31 f0       	breq	.+12     	; 0x1738 <vfprintf+0x14c>
    172c:	93 37       	cpi	r25, 0x73	; 115
    172e:	79 f0       	breq	.+30     	; 0x174e <vfprintf+0x162>
    1730:	93 35       	cpi	r25, 0x53	; 83
    1732:	09 f0       	breq	.+2      	; 0x1736 <vfprintf+0x14a>
    1734:	52 c0       	rjmp	.+164    	; 0x17da <vfprintf+0x1ee>
    1736:	1f c0       	rjmp	.+62     	; 0x1776 <vfprintf+0x18a>
    1738:	f5 01       	movw	r30, r10
    173a:	80 81       	ld	r24, Z
    173c:	89 83       	std	Y+1, r24	; 0x01
    173e:	42 e0       	ldi	r20, 0x02	; 2
    1740:	50 e0       	ldi	r21, 0x00	; 0
    1742:	a4 0e       	add	r10, r20
    1744:	b5 1e       	adc	r11, r21
    1746:	61 01       	movw	r12, r2
    1748:	01 e0       	ldi	r16, 0x01	; 1
    174a:	10 e0       	ldi	r17, 0x00	; 0
    174c:	11 c0       	rjmp	.+34     	; 0x1770 <vfprintf+0x184>
    174e:	f5 01       	movw	r30, r10
    1750:	c0 80       	ld	r12, Z
    1752:	d1 80       	ldd	r13, Z+1	; 0x01
    1754:	f6 fc       	sbrc	r15, 6
    1756:	03 c0       	rjmp	.+6      	; 0x175e <vfprintf+0x172>
    1758:	6f ef       	ldi	r22, 0xFF	; 255
    175a:	7f ef       	ldi	r23, 0xFF	; 255
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <vfprintf+0x176>
    175e:	69 2d       	mov	r22, r9
    1760:	70 e0       	ldi	r23, 0x00	; 0
    1762:	42 e0       	ldi	r20, 0x02	; 2
    1764:	50 e0       	ldi	r21, 0x00	; 0
    1766:	a4 0e       	add	r10, r20
    1768:	b5 1e       	adc	r11, r21
    176a:	c6 01       	movw	r24, r12
    176c:	43 d1       	rcall	.+646    	; 0x19f4 <strnlen>
    176e:	8c 01       	movw	r16, r24
    1770:	5f e7       	ldi	r21, 0x7F	; 127
    1772:	f5 22       	and	r15, r21
    1774:	13 c0       	rjmp	.+38     	; 0x179c <vfprintf+0x1b0>
    1776:	f5 01       	movw	r30, r10
    1778:	c0 80       	ld	r12, Z
    177a:	d1 80       	ldd	r13, Z+1	; 0x01
    177c:	f6 fc       	sbrc	r15, 6
    177e:	03 c0       	rjmp	.+6      	; 0x1786 <vfprintf+0x19a>
    1780:	6f ef       	ldi	r22, 0xFF	; 255
    1782:	7f ef       	ldi	r23, 0xFF	; 255
    1784:	02 c0       	rjmp	.+4      	; 0x178a <vfprintf+0x19e>
    1786:	69 2d       	mov	r22, r9
    1788:	70 e0       	ldi	r23, 0x00	; 0
    178a:	42 e0       	ldi	r20, 0x02	; 2
    178c:	50 e0       	ldi	r21, 0x00	; 0
    178e:	a4 0e       	add	r10, r20
    1790:	b5 1e       	adc	r11, r21
    1792:	c6 01       	movw	r24, r12
    1794:	24 d1       	rcall	.+584    	; 0x19de <strnlen_P>
    1796:	8c 01       	movw	r16, r24
    1798:	50 e8       	ldi	r21, 0x80	; 128
    179a:	f5 2a       	or	r15, r21
    179c:	f3 fe       	sbrs	r15, 3
    179e:	06 c0       	rjmp	.+12     	; 0x17ac <vfprintf+0x1c0>
    17a0:	18 c0       	rjmp	.+48     	; 0x17d2 <vfprintf+0x1e6>
    17a2:	80 e2       	ldi	r24, 0x20	; 32
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	b3 01       	movw	r22, r6
    17a8:	9e de       	rcall	.-708    	; 0x14e6 <fputc>
    17aa:	ea 94       	dec	r14
    17ac:	8e 2d       	mov	r24, r14
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	08 17       	cp	r16, r24
    17b2:	19 07       	cpc	r17, r25
    17b4:	b0 f3       	brcs	.-20     	; 0x17a2 <vfprintf+0x1b6>
    17b6:	0d c0       	rjmp	.+26     	; 0x17d2 <vfprintf+0x1e6>
    17b8:	f6 01       	movw	r30, r12
    17ba:	f7 fc       	sbrc	r15, 7
    17bc:	85 91       	lpm	r24, Z+
    17be:	f7 fe       	sbrs	r15, 7
    17c0:	81 91       	ld	r24, Z+
    17c2:	6f 01       	movw	r12, r30
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	b3 01       	movw	r22, r6
    17c8:	8e de       	rcall	.-740    	; 0x14e6 <fputc>
    17ca:	e1 10       	cpse	r14, r1
    17cc:	ea 94       	dec	r14
    17ce:	01 50       	subi	r16, 0x01	; 1
    17d0:	10 40       	sbci	r17, 0x00	; 0
    17d2:	01 15       	cp	r16, r1
    17d4:	11 05       	cpc	r17, r1
    17d6:	81 f7       	brne	.-32     	; 0x17b8 <vfprintf+0x1cc>
    17d8:	e2 c0       	rjmp	.+452    	; 0x199e <vfprintf+0x3b2>
    17da:	94 36       	cpi	r25, 0x64	; 100
    17dc:	11 f0       	breq	.+4      	; 0x17e2 <vfprintf+0x1f6>
    17de:	99 36       	cpi	r25, 0x69	; 105
    17e0:	61 f5       	brne	.+88     	; 0x183a <vfprintf+0x24e>
    17e2:	f7 fe       	sbrs	r15, 7
    17e4:	08 c0       	rjmp	.+16     	; 0x17f6 <vfprintf+0x20a>
    17e6:	f5 01       	movw	r30, r10
    17e8:	20 81       	ld	r18, Z
    17ea:	31 81       	ldd	r19, Z+1	; 0x01
    17ec:	42 81       	ldd	r20, Z+2	; 0x02
    17ee:	53 81       	ldd	r21, Z+3	; 0x03
    17f0:	84 e0       	ldi	r24, 0x04	; 4
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	0a c0       	rjmp	.+20     	; 0x180a <vfprintf+0x21e>
    17f6:	f5 01       	movw	r30, r10
    17f8:	80 81       	ld	r24, Z
    17fa:	91 81       	ldd	r25, Z+1	; 0x01
    17fc:	9c 01       	movw	r18, r24
    17fe:	44 27       	eor	r20, r20
    1800:	37 fd       	sbrc	r19, 7
    1802:	40 95       	com	r20
    1804:	54 2f       	mov	r21, r20
    1806:	82 e0       	ldi	r24, 0x02	; 2
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	a8 0e       	add	r10, r24
    180c:	b9 1e       	adc	r11, r25
    180e:	9f e6       	ldi	r25, 0x6F	; 111
    1810:	f9 22       	and	r15, r25
    1812:	57 ff       	sbrs	r21, 7
    1814:	09 c0       	rjmp	.+18     	; 0x1828 <vfprintf+0x23c>
    1816:	50 95       	com	r21
    1818:	40 95       	com	r20
    181a:	30 95       	com	r19
    181c:	21 95       	neg	r18
    181e:	3f 4f       	sbci	r19, 0xFF	; 255
    1820:	4f 4f       	sbci	r20, 0xFF	; 255
    1822:	5f 4f       	sbci	r21, 0xFF	; 255
    1824:	e0 e8       	ldi	r30, 0x80	; 128
    1826:	fe 2a       	or	r15, r30
    1828:	ca 01       	movw	r24, r20
    182a:	b9 01       	movw	r22, r18
    182c:	a1 01       	movw	r20, r2
    182e:	2a e0       	ldi	r18, 0x0A	; 10
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	eb d0       	rcall	.+470    	; 0x1a0a <__ultoa_invert>
    1834:	d8 2e       	mov	r13, r24
    1836:	d2 18       	sub	r13, r2
    1838:	3f c0       	rjmp	.+126    	; 0x18b8 <vfprintf+0x2cc>
    183a:	95 37       	cpi	r25, 0x75	; 117
    183c:	29 f4       	brne	.+10     	; 0x1848 <vfprintf+0x25c>
    183e:	1f 2d       	mov	r17, r15
    1840:	1f 7e       	andi	r17, 0xEF	; 239
    1842:	2a e0       	ldi	r18, 0x0A	; 10
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	1d c0       	rjmp	.+58     	; 0x1882 <vfprintf+0x296>
    1848:	1f 2d       	mov	r17, r15
    184a:	19 7f       	andi	r17, 0xF9	; 249
    184c:	9f 36       	cpi	r25, 0x6F	; 111
    184e:	61 f0       	breq	.+24     	; 0x1868 <vfprintf+0x27c>
    1850:	90 37       	cpi	r25, 0x70	; 112
    1852:	20 f4       	brcc	.+8      	; 0x185c <vfprintf+0x270>
    1854:	98 35       	cpi	r25, 0x58	; 88
    1856:	09 f0       	breq	.+2      	; 0x185a <vfprintf+0x26e>
    1858:	a5 c0       	rjmp	.+330    	; 0x19a4 <vfprintf+0x3b8>
    185a:	0f c0       	rjmp	.+30     	; 0x187a <vfprintf+0x28e>
    185c:	90 37       	cpi	r25, 0x70	; 112
    185e:	39 f0       	breq	.+14     	; 0x186e <vfprintf+0x282>
    1860:	98 37       	cpi	r25, 0x78	; 120
    1862:	09 f0       	breq	.+2      	; 0x1866 <vfprintf+0x27a>
    1864:	9f c0       	rjmp	.+318    	; 0x19a4 <vfprintf+0x3b8>
    1866:	04 c0       	rjmp	.+8      	; 0x1870 <vfprintf+0x284>
    1868:	28 e0       	ldi	r18, 0x08	; 8
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	0a c0       	rjmp	.+20     	; 0x1882 <vfprintf+0x296>
    186e:	10 61       	ori	r17, 0x10	; 16
    1870:	14 fd       	sbrc	r17, 4
    1872:	14 60       	ori	r17, 0x04	; 4
    1874:	20 e1       	ldi	r18, 0x10	; 16
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	04 c0       	rjmp	.+8      	; 0x1882 <vfprintf+0x296>
    187a:	14 fd       	sbrc	r17, 4
    187c:	16 60       	ori	r17, 0x06	; 6
    187e:	20 e1       	ldi	r18, 0x10	; 16
    1880:	32 e0       	ldi	r19, 0x02	; 2
    1882:	17 ff       	sbrs	r17, 7
    1884:	08 c0       	rjmp	.+16     	; 0x1896 <vfprintf+0x2aa>
    1886:	f5 01       	movw	r30, r10
    1888:	60 81       	ld	r22, Z
    188a:	71 81       	ldd	r23, Z+1	; 0x01
    188c:	82 81       	ldd	r24, Z+2	; 0x02
    188e:	93 81       	ldd	r25, Z+3	; 0x03
    1890:	44 e0       	ldi	r20, 0x04	; 4
    1892:	50 e0       	ldi	r21, 0x00	; 0
    1894:	08 c0       	rjmp	.+16     	; 0x18a6 <vfprintf+0x2ba>
    1896:	f5 01       	movw	r30, r10
    1898:	80 81       	ld	r24, Z
    189a:	91 81       	ldd	r25, Z+1	; 0x01
    189c:	bc 01       	movw	r22, r24
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	42 e0       	ldi	r20, 0x02	; 2
    18a4:	50 e0       	ldi	r21, 0x00	; 0
    18a6:	a4 0e       	add	r10, r20
    18a8:	b5 1e       	adc	r11, r21
    18aa:	a1 01       	movw	r20, r2
    18ac:	ae d0       	rcall	.+348    	; 0x1a0a <__ultoa_invert>
    18ae:	d8 2e       	mov	r13, r24
    18b0:	d2 18       	sub	r13, r2
    18b2:	8f e7       	ldi	r24, 0x7F	; 127
    18b4:	f8 2e       	mov	r15, r24
    18b6:	f1 22       	and	r15, r17
    18b8:	f6 fe       	sbrs	r15, 6
    18ba:	0b c0       	rjmp	.+22     	; 0x18d2 <vfprintf+0x2e6>
    18bc:	5e ef       	ldi	r21, 0xFE	; 254
    18be:	f5 22       	and	r15, r21
    18c0:	d9 14       	cp	r13, r9
    18c2:	38 f4       	brcc	.+14     	; 0x18d2 <vfprintf+0x2e6>
    18c4:	f4 fe       	sbrs	r15, 4
    18c6:	07 c0       	rjmp	.+14     	; 0x18d6 <vfprintf+0x2ea>
    18c8:	f2 fc       	sbrc	r15, 2
    18ca:	05 c0       	rjmp	.+10     	; 0x18d6 <vfprintf+0x2ea>
    18cc:	8f ee       	ldi	r24, 0xEF	; 239
    18ce:	f8 22       	and	r15, r24
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <vfprintf+0x2ea>
    18d2:	1d 2d       	mov	r17, r13
    18d4:	01 c0       	rjmp	.+2      	; 0x18d8 <vfprintf+0x2ec>
    18d6:	19 2d       	mov	r17, r9
    18d8:	f4 fe       	sbrs	r15, 4
    18da:	0d c0       	rjmp	.+26     	; 0x18f6 <vfprintf+0x30a>
    18dc:	fe 01       	movw	r30, r28
    18de:	ed 0d       	add	r30, r13
    18e0:	f1 1d       	adc	r31, r1
    18e2:	80 81       	ld	r24, Z
    18e4:	80 33       	cpi	r24, 0x30	; 48
    18e6:	19 f4       	brne	.+6      	; 0x18ee <vfprintf+0x302>
    18e8:	99 ee       	ldi	r25, 0xE9	; 233
    18ea:	f9 22       	and	r15, r25
    18ec:	08 c0       	rjmp	.+16     	; 0x18fe <vfprintf+0x312>
    18ee:	1f 5f       	subi	r17, 0xFF	; 255
    18f0:	f2 fe       	sbrs	r15, 2
    18f2:	05 c0       	rjmp	.+10     	; 0x18fe <vfprintf+0x312>
    18f4:	03 c0       	rjmp	.+6      	; 0x18fc <vfprintf+0x310>
    18f6:	8f 2d       	mov	r24, r15
    18f8:	86 78       	andi	r24, 0x86	; 134
    18fa:	09 f0       	breq	.+2      	; 0x18fe <vfprintf+0x312>
    18fc:	1f 5f       	subi	r17, 0xFF	; 255
    18fe:	0f 2d       	mov	r16, r15
    1900:	f3 fc       	sbrc	r15, 3
    1902:	13 c0       	rjmp	.+38     	; 0x192a <vfprintf+0x33e>
    1904:	f0 fe       	sbrs	r15, 0
    1906:	0e c0       	rjmp	.+28     	; 0x1924 <vfprintf+0x338>
    1908:	1e 15       	cp	r17, r14
    190a:	10 f0       	brcs	.+4      	; 0x1910 <vfprintf+0x324>
    190c:	9d 2c       	mov	r9, r13
    190e:	0a c0       	rjmp	.+20     	; 0x1924 <vfprintf+0x338>
    1910:	9d 2c       	mov	r9, r13
    1912:	9e 0c       	add	r9, r14
    1914:	91 1a       	sub	r9, r17
    1916:	1e 2d       	mov	r17, r14
    1918:	05 c0       	rjmp	.+10     	; 0x1924 <vfprintf+0x338>
    191a:	80 e2       	ldi	r24, 0x20	; 32
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	b3 01       	movw	r22, r6
    1920:	e2 dd       	rcall	.-1084   	; 0x14e6 <fputc>
    1922:	1f 5f       	subi	r17, 0xFF	; 255
    1924:	1e 15       	cp	r17, r14
    1926:	c8 f3       	brcs	.-14     	; 0x191a <vfprintf+0x32e>
    1928:	04 c0       	rjmp	.+8      	; 0x1932 <vfprintf+0x346>
    192a:	1e 15       	cp	r17, r14
    192c:	10 f4       	brcc	.+4      	; 0x1932 <vfprintf+0x346>
    192e:	e1 1a       	sub	r14, r17
    1930:	01 c0       	rjmp	.+2      	; 0x1934 <vfprintf+0x348>
    1932:	ee 24       	eor	r14, r14
    1934:	04 ff       	sbrs	r16, 4
    1936:	0e c0       	rjmp	.+28     	; 0x1954 <vfprintf+0x368>
    1938:	80 e3       	ldi	r24, 0x30	; 48
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	b3 01       	movw	r22, r6
    193e:	d3 dd       	rcall	.-1114   	; 0x14e6 <fputc>
    1940:	02 ff       	sbrs	r16, 2
    1942:	1b c0       	rjmp	.+54     	; 0x197a <vfprintf+0x38e>
    1944:	01 fd       	sbrc	r16, 1
    1946:	03 c0       	rjmp	.+6      	; 0x194e <vfprintf+0x362>
    1948:	88 e7       	ldi	r24, 0x78	; 120
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	0e c0       	rjmp	.+28     	; 0x196a <vfprintf+0x37e>
    194e:	88 e5       	ldi	r24, 0x58	; 88
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	0b c0       	rjmp	.+22     	; 0x196a <vfprintf+0x37e>
    1954:	80 2f       	mov	r24, r16
    1956:	86 78       	andi	r24, 0x86	; 134
    1958:	81 f0       	breq	.+32     	; 0x197a <vfprintf+0x38e>
    195a:	01 ff       	sbrs	r16, 1
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <vfprintf+0x376>
    195e:	8b e2       	ldi	r24, 0x2B	; 43
    1960:	01 c0       	rjmp	.+2      	; 0x1964 <vfprintf+0x378>
    1962:	80 e2       	ldi	r24, 0x20	; 32
    1964:	f7 fc       	sbrc	r15, 7
    1966:	8d e2       	ldi	r24, 0x2D	; 45
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	b3 01       	movw	r22, r6
    196c:	bc dd       	rcall	.-1160   	; 0x14e6 <fputc>
    196e:	05 c0       	rjmp	.+10     	; 0x197a <vfprintf+0x38e>
    1970:	80 e3       	ldi	r24, 0x30	; 48
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	b3 01       	movw	r22, r6
    1976:	b7 dd       	rcall	.-1170   	; 0x14e6 <fputc>
    1978:	9a 94       	dec	r9
    197a:	d9 14       	cp	r13, r9
    197c:	c8 f3       	brcs	.-14     	; 0x1970 <vfprintf+0x384>
    197e:	da 94       	dec	r13
    1980:	f1 01       	movw	r30, r2
    1982:	ed 0d       	add	r30, r13
    1984:	f1 1d       	adc	r31, r1
    1986:	80 81       	ld	r24, Z
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	b3 01       	movw	r22, r6
    198c:	ac dd       	rcall	.-1192   	; 0x14e6 <fputc>
    198e:	dd 20       	and	r13, r13
    1990:	b1 f7       	brne	.-20     	; 0x197e <vfprintf+0x392>
    1992:	05 c0       	rjmp	.+10     	; 0x199e <vfprintf+0x3b2>
    1994:	80 e2       	ldi	r24, 0x20	; 32
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	b3 01       	movw	r22, r6
    199a:	a5 dd       	rcall	.-1206   	; 0x14e6 <fputc>
    199c:	ea 94       	dec	r14
    199e:	ee 20       	and	r14, r14
    19a0:	c9 f7       	brne	.-14     	; 0x1994 <vfprintf+0x3a8>
    19a2:	50 ce       	rjmp	.-864    	; 0x1644 <vfprintf+0x58>
    19a4:	f3 01       	movw	r30, r6
    19a6:	66 81       	ldd	r22, Z+6	; 0x06
    19a8:	77 81       	ldd	r23, Z+7	; 0x07
    19aa:	cb 01       	movw	r24, r22
    19ac:	2b 96       	adiw	r28, 0x0b	; 11
    19ae:	0f b6       	in	r0, 0x3f	; 63
    19b0:	f8 94       	cli
    19b2:	de bf       	out	0x3e, r29	; 62
    19b4:	0f be       	out	0x3f, r0	; 63
    19b6:	cd bf       	out	0x3d, r28	; 61
    19b8:	cf 91       	pop	r28
    19ba:	df 91       	pop	r29
    19bc:	1f 91       	pop	r17
    19be:	0f 91       	pop	r16
    19c0:	ff 90       	pop	r15
    19c2:	ef 90       	pop	r14
    19c4:	df 90       	pop	r13
    19c6:	cf 90       	pop	r12
    19c8:	bf 90       	pop	r11
    19ca:	af 90       	pop	r10
    19cc:	9f 90       	pop	r9
    19ce:	8f 90       	pop	r8
    19d0:	7f 90       	pop	r7
    19d2:	6f 90       	pop	r6
    19d4:	5f 90       	pop	r5
    19d6:	4f 90       	pop	r4
    19d8:	3f 90       	pop	r3
    19da:	2f 90       	pop	r2
    19dc:	08 95       	ret

000019de <strnlen_P>:
    19de:	fc 01       	movw	r30, r24
    19e0:	05 90       	lpm	r0, Z+
    19e2:	61 50       	subi	r22, 0x01	; 1
    19e4:	70 40       	sbci	r23, 0x00	; 0
    19e6:	01 10       	cpse	r0, r1
    19e8:	d8 f7       	brcc	.-10     	; 0x19e0 <strnlen_P+0x2>
    19ea:	80 95       	com	r24
    19ec:	90 95       	com	r25
    19ee:	8e 0f       	add	r24, r30
    19f0:	9f 1f       	adc	r25, r31
    19f2:	08 95       	ret

000019f4 <strnlen>:
    19f4:	fc 01       	movw	r30, r24
    19f6:	61 50       	subi	r22, 0x01	; 1
    19f8:	70 40       	sbci	r23, 0x00	; 0
    19fa:	01 90       	ld	r0, Z+
    19fc:	01 10       	cpse	r0, r1
    19fe:	d8 f7       	brcc	.-10     	; 0x19f6 <strnlen+0x2>
    1a00:	80 95       	com	r24
    1a02:	90 95       	com	r25
    1a04:	8e 0f       	add	r24, r30
    1a06:	9f 1f       	adc	r25, r31
    1a08:	08 95       	ret

00001a0a <__ultoa_invert>:
    1a0a:	fa 01       	movw	r30, r20
    1a0c:	aa 27       	eor	r26, r26
    1a0e:	28 30       	cpi	r18, 0x08	; 8
    1a10:	51 f1       	breq	.+84     	; 0x1a66 <__ultoa_invert+0x5c>
    1a12:	20 31       	cpi	r18, 0x10	; 16
    1a14:	81 f1       	breq	.+96     	; 0x1a76 <__ultoa_invert+0x6c>
    1a16:	e8 94       	clt
    1a18:	6f 93       	push	r22
    1a1a:	6e 7f       	andi	r22, 0xFE	; 254
    1a1c:	6e 5f       	subi	r22, 0xFE	; 254
    1a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a20:	8f 4f       	sbci	r24, 0xFF	; 255
    1a22:	9f 4f       	sbci	r25, 0xFF	; 255
    1a24:	af 4f       	sbci	r26, 0xFF	; 255
    1a26:	b1 e0       	ldi	r27, 0x01	; 1
    1a28:	3e d0       	rcall	.+124    	; 0x1aa6 <__ultoa_invert+0x9c>
    1a2a:	b4 e0       	ldi	r27, 0x04	; 4
    1a2c:	3c d0       	rcall	.+120    	; 0x1aa6 <__ultoa_invert+0x9c>
    1a2e:	67 0f       	add	r22, r23
    1a30:	78 1f       	adc	r23, r24
    1a32:	89 1f       	adc	r24, r25
    1a34:	9a 1f       	adc	r25, r26
    1a36:	a1 1d       	adc	r26, r1
    1a38:	68 0f       	add	r22, r24
    1a3a:	79 1f       	adc	r23, r25
    1a3c:	8a 1f       	adc	r24, r26
    1a3e:	91 1d       	adc	r25, r1
    1a40:	a1 1d       	adc	r26, r1
    1a42:	6a 0f       	add	r22, r26
    1a44:	71 1d       	adc	r23, r1
    1a46:	81 1d       	adc	r24, r1
    1a48:	91 1d       	adc	r25, r1
    1a4a:	a1 1d       	adc	r26, r1
    1a4c:	20 d0       	rcall	.+64     	; 0x1a8e <__ultoa_invert+0x84>
    1a4e:	09 f4       	brne	.+2      	; 0x1a52 <__ultoa_invert+0x48>
    1a50:	68 94       	set
    1a52:	3f 91       	pop	r19
    1a54:	2a e0       	ldi	r18, 0x0A	; 10
    1a56:	26 9f       	mul	r18, r22
    1a58:	11 24       	eor	r1, r1
    1a5a:	30 19       	sub	r19, r0
    1a5c:	30 5d       	subi	r19, 0xD0	; 208
    1a5e:	31 93       	st	Z+, r19
    1a60:	de f6       	brtc	.-74     	; 0x1a18 <__ultoa_invert+0xe>
    1a62:	cf 01       	movw	r24, r30
    1a64:	08 95       	ret
    1a66:	46 2f       	mov	r20, r22
    1a68:	47 70       	andi	r20, 0x07	; 7
    1a6a:	40 5d       	subi	r20, 0xD0	; 208
    1a6c:	41 93       	st	Z+, r20
    1a6e:	b3 e0       	ldi	r27, 0x03	; 3
    1a70:	0f d0       	rcall	.+30     	; 0x1a90 <__ultoa_invert+0x86>
    1a72:	c9 f7       	brne	.-14     	; 0x1a66 <__ultoa_invert+0x5c>
    1a74:	f6 cf       	rjmp	.-20     	; 0x1a62 <__ultoa_invert+0x58>
    1a76:	46 2f       	mov	r20, r22
    1a78:	4f 70       	andi	r20, 0x0F	; 15
    1a7a:	40 5d       	subi	r20, 0xD0	; 208
    1a7c:	4a 33       	cpi	r20, 0x3A	; 58
    1a7e:	18 f0       	brcs	.+6      	; 0x1a86 <__ultoa_invert+0x7c>
    1a80:	49 5d       	subi	r20, 0xD9	; 217
    1a82:	31 fd       	sbrc	r19, 1
    1a84:	40 52       	subi	r20, 0x20	; 32
    1a86:	41 93       	st	Z+, r20
    1a88:	02 d0       	rcall	.+4      	; 0x1a8e <__ultoa_invert+0x84>
    1a8a:	a9 f7       	brne	.-22     	; 0x1a76 <__ultoa_invert+0x6c>
    1a8c:	ea cf       	rjmp	.-44     	; 0x1a62 <__ultoa_invert+0x58>
    1a8e:	b4 e0       	ldi	r27, 0x04	; 4
    1a90:	a6 95       	lsr	r26
    1a92:	97 95       	ror	r25
    1a94:	87 95       	ror	r24
    1a96:	77 95       	ror	r23
    1a98:	67 95       	ror	r22
    1a9a:	ba 95       	dec	r27
    1a9c:	c9 f7       	brne	.-14     	; 0x1a90 <__ultoa_invert+0x86>
    1a9e:	00 97       	sbiw	r24, 0x00	; 0
    1aa0:	61 05       	cpc	r22, r1
    1aa2:	71 05       	cpc	r23, r1
    1aa4:	08 95       	ret
    1aa6:	9b 01       	movw	r18, r22
    1aa8:	ac 01       	movw	r20, r24
    1aaa:	0a 2e       	mov	r0, r26
    1aac:	06 94       	lsr	r0
    1aae:	57 95       	ror	r21
    1ab0:	47 95       	ror	r20
    1ab2:	37 95       	ror	r19
    1ab4:	27 95       	ror	r18
    1ab6:	ba 95       	dec	r27
    1ab8:	c9 f7       	brne	.-14     	; 0x1aac <__ultoa_invert+0xa2>
    1aba:	62 0f       	add	r22, r18
    1abc:	73 1f       	adc	r23, r19
    1abe:	84 1f       	adc	r24, r20
    1ac0:	95 1f       	adc	r25, r21
    1ac2:	a0 1d       	adc	r26, r0
    1ac4:	08 95       	ret

00001ac6 <_exit>:
    1ac6:	f8 94       	cli

00001ac8 <__stop_program>:
    1ac8:	ff cf       	rjmp	.-2      	; 0x1ac8 <__stop_program>
