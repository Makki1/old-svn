
GenericHIDHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000018ee  00001982  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800112  00800112  00001994  2**0
                  ALLOC
  3 .stab         000020a0  00000000  00000000  00001994  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000da2  00000000  00000000  00003a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000328  00000000  00000000  000047d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000007ca  00000000  00000000  00004afe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004cbd  00000000  00000000  000052c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001658  00000000  00000000  00009f85  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003e74  00000000  00000000  0000b5dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004b0  00000000  00000000  0000f454  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002331  00000000  00000000  0000f904  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002153  00000000  00000000  00011c35  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003d8  00000000  00000000  00013d88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

		/* Select the control pipe for the request transfer */
		Pipe_SelectPipe(PIPE_CONTROLPIPE);

		/* Send the request to the device */
		USB_Host_SendControlRequest(ReportOUTData);
       0:	2e c1       	rjmp	.+604    	; 0x25e <__ctors_end>
		Pipe_DisablePipe();
	}
}

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
       2:	00 00       	nop
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       4:	4a c1       	rjmp	.+660    	; 0x29a <__bad_interrupt>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       6:	00 00       	nop
	return USB_Host_SendControlRequest(NULL);
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
       8:	48 c1       	rjmp	.+656    	; 0x29a <__bad_interrupt>

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       a:	00 00       	nop
       c:	46 c1       	rjmp	.+652    	; 0x29a <__bad_interrupt>
       e:	00 00       	nop
      10:	44 c1       	rjmp	.+648    	; 0x29a <__bad_interrupt>
      12:	00 00       	nop
      14:	42 c1       	rjmp	.+644    	; 0x29a <__bad_interrupt>
      16:	00 00       	nop
      18:	40 c1       	rjmp	.+640    	; 0x29a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3e c1       	rjmp	.+636    	; 0x29a <__bad_interrupt>
      1e:	00 00       	nop
      20:	3c c1       	rjmp	.+632    	; 0x29a <__bad_interrupt>
      22:	00 00       	nop
      24:	3a c1       	rjmp	.+628    	; 0x29a <__bad_interrupt>
      26:	00 00       	nop
      28:	4b c6       	rjmp	.+3222   	; 0xcc0 <__vector_10>
      2a:	00 00       	nop
      2c:	36 c1       	rjmp	.+620    	; 0x29a <__bad_interrupt>
      2e:	00 00       	nop
      30:	34 c1       	rjmp	.+616    	; 0x29a <__bad_interrupt>
      32:	00 00       	nop
      34:	32 c1       	rjmp	.+612    	; 0x29a <__bad_interrupt>
      36:	00 00       	nop
      38:	30 c1       	rjmp	.+608    	; 0x29a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2e c1       	rjmp	.+604    	; 0x29a <__bad_interrupt>
      3e:	00 00       	nop
      40:	2c c1       	rjmp	.+600    	; 0x29a <__bad_interrupt>
      42:	00 00       	nop
      44:	2a c1       	rjmp	.+596    	; 0x29a <__bad_interrupt>
      46:	00 00       	nop
      48:	28 c1       	rjmp	.+592    	; 0x29a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	26 c1       	rjmp	.+588    	; 0x29a <__bad_interrupt>
      4e:	00 00       	nop
      50:	24 c1       	rjmp	.+584    	; 0x29a <__bad_interrupt>
      52:	00 00       	nop
      54:	22 c1       	rjmp	.+580    	; 0x29a <__bad_interrupt>
      56:	00 00       	nop
      58:	20 c1       	rjmp	.+576    	; 0x29a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	1e c1       	rjmp	.+572    	; 0x29a <__bad_interrupt>
      5e:	00 00       	nop
      60:	1c c1       	rjmp	.+568    	; 0x29a <__bad_interrupt>
      62:	00 00       	nop
      64:	1a c1       	rjmp	.+564    	; 0x29a <__bad_interrupt>
      66:	00 00       	nop
      68:	18 c1       	rjmp	.+560    	; 0x29a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	16 c1       	rjmp	.+556    	; 0x29a <__bad_interrupt>
      6e:	00 00       	nop
      70:	14 c1       	rjmp	.+552    	; 0x29a <__bad_interrupt>
      72:	00 00       	nop
      74:	12 c1       	rjmp	.+548    	; 0x29a <__bad_interrupt>
      76:	00 00       	nop
      78:	10 c1       	rjmp	.+544    	; 0x29a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0e c1       	rjmp	.+540    	; 0x29a <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c c1       	rjmp	.+536    	; 0x29a <__bad_interrupt>
      82:	00 00       	nop
      84:	0a c1       	rjmp	.+532    	; 0x29a <__bad_interrupt>
      86:	00 00       	nop
      88:	08 c1       	rjmp	.+528    	; 0x29a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	06 c1       	rjmp	.+524    	; 0x29a <__bad_interrupt>
      8e:	00 00       	nop
      90:	04 c1       	rjmp	.+520    	; 0x29a <__bad_interrupt>
      92:	00 00       	nop
      94:	02 c1       	rjmp	.+516    	; 0x29a <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4592>:
      98:	0d 0a 00                                            ...

0000009b <__c.4587>:
      9b:	30 78 25 30 32 58 20 00                             0x%02X .

000000a3 <__c.4576>:
      a3:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      b3:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      c3:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      d3:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      e3:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      f3:	1b 5b 33 37 6d 00                                   .[37m.

000000f9 <__c.4568>:
      f9:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     109:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     119:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000128 <__c.4560>:
     128:	48 49 44 20 44 65 76 69 63 65 20 45 6e 75 6d 65     HID Device Enume
     138:	72 61 74 65 64 2e 0d 0a 00                          rated....

00000141 <__c.4558>:
     141:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     151:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     161:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     171:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     181:	37 6d 00                                            7m.

00000184 <__c.4556>:
     184:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     194:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000019e <__c.4554>:
     19e:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     1ae:	69 63 65 2e 0d 0a 00                                ice....

000001b5 <__c.4552>:
     1b5:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1c5:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     1d5:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

000001df <__c.4549>:
     1df:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     1ef:	61 74 61 2e 0d 0a 00                                ata....

000001f6 <__c.4544>:
     1f6:	1b 5b 33 32 6d 44 65 76 69 63 65 20 55 6e 61 74     .[32mDevice Unat
     206:	74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00        tached....[37m.

00000215 <__c.4539>:
     215:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     225:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

00000232 <__c.4526>:
     232:	1b 5b 33 36 6d 47 65 6e 65 72 69 63 20 48 49 44     .[36mGeneric HID
     242:	20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e 69      Host Demo runni
     252:	6e 67 2e 0d 0a 1b 5b 33 37 6d 00 00                 ng....[37m..

0000025e <__ctors_end>:
     25e:	11 24       	eor	r1, r1
     260:	1f be       	out	0x3f, r1	; 63
     262:	cf ef       	ldi	r28, 0xFF	; 255
     264:	d0 e2       	ldi	r29, 0x20	; 32
     266:	de bf       	out	0x3e, r29	; 62
     268:	cd bf       	out	0x3d, r28	; 61

0000026a <__do_copy_data>:
     26a:	11 e0       	ldi	r17, 0x01	; 1
     26c:	a0 e0       	ldi	r26, 0x00	; 0
     26e:	b1 e0       	ldi	r27, 0x01	; 1
     270:	ee ee       	ldi	r30, 0xEE	; 238
     272:	f8 e1       	ldi	r31, 0x18	; 24
     274:	00 e0       	ldi	r16, 0x00	; 0
     276:	0b bf       	out	0x3b, r16	; 59
     278:	02 c0       	rjmp	.+4      	; 0x27e <__do_copy_data+0x14>
     27a:	07 90       	elpm	r0, Z+
     27c:	0d 92       	st	X+, r0
     27e:	a2 31       	cpi	r26, 0x12	; 18
     280:	b1 07       	cpc	r27, r17
     282:	d9 f7       	brne	.-10     	; 0x27a <__do_copy_data+0x10>

00000284 <__do_clear_bss>:
     284:	11 e0       	ldi	r17, 0x01	; 1
     286:	a2 e1       	ldi	r26, 0x12	; 18
     288:	b1 e0       	ldi	r27, 0x01	; 1
     28a:	01 c0       	rjmp	.+2      	; 0x28e <.do_clear_bss_start>

0000028c <.do_clear_bss_loop>:
     28c:	1d 92       	st	X+, r1

0000028e <.do_clear_bss_start>:
     28e:	a4 33       	cpi	r26, 0x34	; 52
     290:	b1 07       	cpc	r27, r17
     292:	e1 f7       	brne	.-8      	; 0x28c <.do_clear_bss_loop>
     294:	77 d1       	rcall	.+750    	; 0x584 <main>
     296:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <_exit>

0000029a <__bad_interrupt>:
     29a:	b2 ce       	rjmp	.-668    	; 0x0 <__vectors>

0000029c <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     29c:	90 91 1f 01 	lds	r25, 0x011F
     2a0:	2d b7       	in	r18, 0x3d	; 61
     2a2:	3e b7       	in	r19, 0x3e	; 62
     2a4:	28 50       	subi	r18, 0x08	; 8
     2a6:	30 40       	sbci	r19, 0x00	; 0
     2a8:	0f b6       	in	r0, 0x3f	; 63
     2aa:	f8 94       	cli
     2ac:	3e bf       	out	0x3e, r19	; 62
     2ae:	0f be       	out	0x3f, r0	; 63
     2b0:	2d bf       	out	0x3d, r18	; 61
     2b2:	ed b7       	in	r30, 0x3d	; 61
     2b4:	fe b7       	in	r31, 0x3e	; 62
     2b6:	31 96       	adiw	r30, 0x01	; 1
     2b8:	23 ea       	ldi	r18, 0xA3	; 163
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	ad b7       	in	r26, 0x3d	; 61
     2be:	be b7       	in	r27, 0x3e	; 62
     2c0:	12 96       	adiw	r26, 0x02	; 2
     2c2:	3c 93       	st	X, r19
     2c4:	2e 93       	st	-X, r18
     2c6:	11 97       	sbiw	r26, 0x01	; 1
     2c8:	82 83       	std	Z+2, r24	; 0x02
     2ca:	13 82       	std	Z+3, r1	; 0x03
     2cc:	64 83       	std	Z+4, r22	; 0x04
     2ce:	15 82       	std	Z+5, r1	; 0x05
     2d0:	96 83       	std	Z+6, r25	; 0x06
     2d2:	17 82       	std	Z+7, r1	; 0x07
     2d4:	0e 94 85 09 	call	0x130a	; 0x130a <printf_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     2d8:	8b b1       	in	r24, 0x0b	; 11
     2da:	8f 70       	andi	r24, 0x0F	; 15
     2dc:	80 69       	ori	r24, 0x90	; 144
     2de:	8b b9       	out	0x0b, r24	; 11
     2e0:	2d b7       	in	r18, 0x3d	; 61
     2e2:	3e b7       	in	r19, 0x3e	; 62
     2e4:	28 5f       	subi	r18, 0xF8	; 248
     2e6:	3f 4f       	sbci	r19, 0xFF	; 255
     2e8:	0f b6       	in	r0, 0x3f	; 63
     2ea:	f8 94       	cli
     2ec:	3e bf       	out	0x3e, r19	; 62
     2ee:	0f be       	out	0x3f, r0	; 63
     2f0:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     2f2:	08 95       	ret

000002f4 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Unattached.\r\n" ESC_FG_WHITE));
     2f4:	86 ef       	ldi	r24, 0xF6	; 246
     2f6:	91 e0       	ldi	r25, 0x01	; 1
     2f8:	0e 94 a7 09 	call	0x134e	; 0x134e <puts_P>
     2fc:	8b b1       	in	r24, 0x0b	; 11
     2fe:	8f 70       	andi	r24, 0x0F	; 15
     300:	80 61       	ori	r24, 0x10	; 16
     302:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     304:	08 95       	ret

00000306 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     306:	85 e1       	ldi	r24, 0x15	; 21
     308:	92 e0       	ldi	r25, 0x02	; 2
     30a:	0e 94 a7 09 	call	0x134e	; 0x134e <puts_P>
     30e:	8b b1       	in	r24, 0x0b	; 11
     310:	8f 70       	andi	r24, 0x0F	; 15
     312:	80 6a       	ori	r24, 0xA0	; 160
     314:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     316:	08 95       	ret

00000318 <ReadNextReport>:

/** Reads in and processes the next report from the attached device, displaying the report
 *  contents on the board LEDs and via the serial port.
 */
void ReadNextReport(void)
{
     318:	6f 92       	push	r6
     31a:	7f 92       	push	r7
     31c:	8f 92       	push	r8
     31e:	9f 92       	push	r9
     320:	af 92       	push	r10
     322:	bf 92       	push	r11
     324:	cf 92       	push	r12
     326:	df 92       	push	r13
     328:	ef 92       	push	r14
     32a:	ff 92       	push	r15
     32c:	0f 93       	push	r16
     32e:	1f 93       	push	r17
     330:	df 93       	push	r29
     332:	cf 93       	push	r28
     334:	cd b7       	in	r28, 0x3d	; 61
     336:	de b7       	in	r29, 0x3e	; 62
	/* Clear the IN endpoint, ready for next data packet */
	Pipe_ClearIN();

	/* Refreeze HID data IN pipe */
	Pipe_Freeze();
}
     338:	8d b6       	in	r8, 0x3d	; 61
     33a:	9e b6       	in	r9, 0x3e	; 62
/** Reads in and processes the next report from the attached device, displaying the report
 *  contents on the board LEDs and via the serial port.
 */
void ReadNextReport(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     33c:	80 91 1f 01 	lds	r24, 0x011F
     340:	8b 30       	cpi	r24, 0x0B	; 11
     342:	09 f0       	breq	.+2      	; 0x346 <ReadNextReport+0x2e>
     344:	60 c0       	rjmp	.+192    	; 0x406 <ReadNextReport+0xee>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     34c:	80 91 a9 00 	lds	r24, 0x00A9
     350:	8f 7b       	andi	r24, 0xBF	; 191
     352:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     356:	80 91 a6 00 	lds	r24, 0x00A6
	/* Select and unfreeze HID data IN pipe */
	Pipe_SelectPipe(HID_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Check to see if a packet has been received */
	if (!(Pipe_IsINReceived()))
     35a:	80 ff       	sbrs	r24, 0
     35c:	4f c0       	rjmp	.+158    	; 0x3fc <ReadNextReport+0xe4>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     35e:	80 91 a6 00 	lds	r24, 0x00A6

		return;
	}

	/* Ensure pipe contains data before trying to read from it */
	if (Pipe_IsReadWriteAllowed())
     362:	85 ff       	sbrs	r24, 5
     364:	46 c0       	rjmp	.+140    	; 0x3f2 <ReadNextReport+0xda>
     366:	7d b6       	in	r7, 0x3d	; 61
     368:	6e b6       	in	r6, 0x3e	; 62
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     36a:	e0 90 f6 00 	lds	r14, 0x00F6
     36e:	f0 90 f7 00 	lds	r15, 0x00F7
	{
		uint8_t ReportINData[Pipe_BytesInPipe()];
     372:	8d b7       	in	r24, 0x3d	; 61
     374:	9e b7       	in	r25, 0x3e	; 62
     376:	8e 19       	sub	r24, r14
     378:	9f 09       	sbc	r25, r15
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	f8 94       	cli
     37e:	9e bf       	out	0x3e, r25	; 62
     380:	0f be       	out	0x3f, r0	; 63
     382:	8d bf       	out	0x3d, r24	; 61
     384:	cd b6       	in	r12, 0x3d	; 61
     386:	de b6       	in	r13, 0x3e	; 62
     388:	08 94       	sec
     38a:	c1 1c       	adc	r12, r1
     38c:	d1 1c       	adc	r13, r1

		/* Read in HID report data */
		Pipe_Read_Stream_LE(&ReportINData, sizeof(ReportINData), NULL);
     38e:	c6 01       	movw	r24, r12
     390:	b7 01       	movw	r22, r14
     392:	40 e0       	ldi	r20, 0x00	; 0
     394:	50 e0       	ldi	r21, 0x00	; 0
     396:	27 d5       	rcall	.+2638   	; 0xde6 <Pipe_Read_Stream_LE>
     398:	00 e0       	ldi	r16, 0x00	; 0
     39a:	10 e0       	ldi	r17, 0x00	; 0

		/* Print report data through the serial port */
		for (uint16_t CurrByte = 0; CurrByte < sizeof(ReportINData); CurrByte++)
		  printf_P(PSTR("0x%02X "), ReportINData[CurrByte]);
     39c:	8b e9       	ldi	r24, 0x9B	; 155
     39e:	a8 2e       	mov	r10, r24
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	b8 2e       	mov	r11, r24
     3a4:	18 c0       	rjmp	.+48     	; 0x3d6 <ReadNextReport+0xbe>
     3a6:	00 d0       	rcall	.+0      	; 0x3a8 <ReadNextReport+0x90>
     3a8:	00 d0       	rcall	.+0      	; 0x3aa <ReadNextReport+0x92>
     3aa:	ed b7       	in	r30, 0x3d	; 61
     3ac:	fe b7       	in	r31, 0x3e	; 62
     3ae:	31 96       	adiw	r30, 0x01	; 1
     3b0:	ad b7       	in	r26, 0x3d	; 61
     3b2:	be b7       	in	r27, 0x3e	; 62
     3b4:	12 96       	adiw	r26, 0x02	; 2
     3b6:	bc 92       	st	X, r11
     3b8:	ae 92       	st	-X, r10
     3ba:	11 97       	sbiw	r26, 0x01	; 1
     3bc:	d6 01       	movw	r26, r12
     3be:	a0 0f       	add	r26, r16
     3c0:	b1 1f       	adc	r27, r17
     3c2:	8c 91       	ld	r24, X
     3c4:	82 83       	std	Z+2, r24	; 0x02
     3c6:	13 82       	std	Z+3, r1	; 0x03
     3c8:	a0 d7       	rcall	.+3904   	; 0x130a <printf_P>

		/* Read in HID report data */
		Pipe_Read_Stream_LE(&ReportINData, sizeof(ReportINData), NULL);

		/* Print report data through the serial port */
		for (uint16_t CurrByte = 0; CurrByte < sizeof(ReportINData); CurrByte++)
     3ca:	0f 5f       	subi	r16, 0xFF	; 255
     3cc:	1f 4f       	sbci	r17, 0xFF	; 255
     3ce:	0f 90       	pop	r0
     3d0:	0f 90       	pop	r0
     3d2:	0f 90       	pop	r0
     3d4:	0f 90       	pop	r0
     3d6:	0e 15       	cp	r16, r14
     3d8:	1f 05       	cpc	r17, r15
     3da:	28 f3       	brcs	.-54     	; 0x3a6 <ReadNextReport+0x8e>
		  printf_P(PSTR("0x%02X "), ReportINData[CurrByte]);

		puts_P(PSTR("\r\n"));
     3dc:	88 e9       	ldi	r24, 0x98	; 152
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	b6 d7       	rcall	.+3948   	; 0x134e <puts_P>
     3e2:	87 2d       	mov	r24, r7
     3e4:	96 2d       	mov	r25, r6
     3e6:	9c 01       	movw	r18, r24
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	f8 94       	cli
     3ec:	3e bf       	out	0x3e, r19	; 62
     3ee:	0f be       	out	0x3f, r0	; 63
     3f0:	2d bf       	out	0x3d, r18	; 61
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     3f2:	80 91 a6 00 	lds	r24, 0x00A6
     3f6:	8e 77       	andi	r24, 0x7E	; 126
     3f8:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     3fc:	80 91 a9 00 	lds	r24, 0x00A9
     400:	80 64       	ori	r24, 0x40	; 64
     402:	80 93 a9 00 	sts	0x00A9, r24
	/* Clear the IN endpoint, ready for next data packet */
	Pipe_ClearIN();

	/* Refreeze HID data IN pipe */
	Pipe_Freeze();
}
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	f8 94       	cli
     40a:	9e be       	out	0x3e, r9	; 62
     40c:	0f be       	out	0x3f, r0	; 63
     40e:	8d be       	out	0x3d, r8	; 61
     410:	cf 91       	pop	r28
     412:	df 91       	pop	r29
     414:	1f 91       	pop	r17
     416:	0f 91       	pop	r16
     418:	ff 90       	pop	r15
     41a:	ef 90       	pop	r14
     41c:	df 90       	pop	r13
     41e:	cf 90       	pop	r12
     420:	bf 90       	pop	r11
     422:	af 90       	pop	r10
     424:	9f 90       	pop	r9
     426:	8f 90       	pop	r8
     428:	7f 90       	pop	r7
     42a:	6f 90       	pop	r6
     42c:	08 95       	ret

0000042e <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     42e:	1f 93       	push	r17
     430:	18 2f       	mov	r17, r24
	USB_Disable();
     432:	21 d4       	rcall	.+2114   	; 0xc76 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     434:	00 d0       	rcall	.+0      	; 0x436 <EVENT_USB_Host_HostError+0x8>
     436:	00 d0       	rcall	.+0      	; 0x438 <EVENT_USB_Host_HostError+0xa>
     438:	ed b7       	in	r30, 0x3d	; 61
     43a:	fe b7       	in	r31, 0x3e	; 62
     43c:	31 96       	adiw	r30, 0x01	; 1
     43e:	89 ef       	ldi	r24, 0xF9	; 249
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	ad b7       	in	r26, 0x3d	; 61
     444:	be b7       	in	r27, 0x3e	; 62
     446:	12 96       	adiw	r26, 0x02	; 2
     448:	9c 93       	st	X, r25
     44a:	8e 93       	st	-X, r24
     44c:	11 97       	sbiw	r26, 0x01	; 1
     44e:	12 83       	std	Z+2, r17	; 0x02
     450:	13 82       	std	Z+3, r1	; 0x03
     452:	5b d7       	rcall	.+3766   	; 0x130a <printf_P>
     454:	8b b1       	in	r24, 0x0b	; 11
     456:	8f 70       	andi	r24, 0x0F	; 15
     458:	80 69       	ori	r24, 0x90	; 144
     45a:	8b b9       	out	0x0b, r24	; 11
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
     460:	0f 90       	pop	r0
     462:	0f 90       	pop	r0
     464:	ff cf       	rjmp	.-2      	; 0x464 <EVENT_USB_Host_HostError+0x36>

00000466 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     466:	1f 93       	push	r17
	puts_P(PSTR("Getting Config Data.\r\n"));
     468:	8f ed       	ldi	r24, 0xDF	; 223
     46a:	91 e0       	ldi	r25, 0x01	; 1
     46c:	70 d7       	rcall	.+3808   	; 0x134e <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     46e:	ad d0       	rcall	.+346    	; 0x5ca <ProcessConfigurationDescriptor>
     470:	18 2f       	mov	r17, r24
     472:	88 23       	and	r24, r24
     474:	b9 f0       	breq	.+46     	; 0x4a4 <EVENT_USB_Host_DeviceEnumerationComplete+0x3e>
	{
		if (ErrorCode == ControlError)
     476:	81 30       	cpi	r24, 0x01	; 1
     478:	19 f4       	brne	.+6      	; 0x480 <EVENT_USB_Host_DeviceEnumerationComplete+0x1a>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     47a:	85 eb       	ldi	r24, 0xB5	; 181
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	02 c0       	rjmp	.+4      	; 0x484 <EVENT_USB_Host_DeviceEnumerationComplete+0x1e>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     480:	8e e9       	ldi	r24, 0x9E	; 158
     482:	91 e0       	ldi	r25, 0x01	; 1
     484:	64 d7       	rcall	.+3784   	; 0x134e <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     486:	00 d0       	rcall	.+0      	; 0x488 <EVENT_USB_Host_DeviceEnumerationComplete+0x22>
     488:	00 d0       	rcall	.+0      	; 0x48a <EVENT_USB_Host_DeviceEnumerationComplete+0x24>
     48a:	ed b7       	in	r30, 0x3d	; 61
     48c:	fe b7       	in	r31, 0x3e	; 62
     48e:	31 96       	adiw	r30, 0x01	; 1
     490:	84 e8       	ldi	r24, 0x84	; 132
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	ad b7       	in	r26, 0x3d	; 61
     496:	be b7       	in	r27, 0x3e	; 62
     498:	12 96       	adiw	r26, 0x02	; 2
     49a:	9c 93       	st	X, r25
     49c:	8e 93       	st	-X, r24
     49e:	11 97       	sbiw	r26, 0x01	; 1
     4a0:	12 83       	std	Z+2, r17	; 0x02
     4a2:	13 c0       	rjmp	.+38     	; 0x4ca <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	dc d6       	rcall	.+3512   	; 0x1260 <USB_Host_SetDeviceConfiguration>
     4a8:	28 2f       	mov	r18, r24
     4aa:	88 23       	and	r24, r24
     4ac:	c9 f0       	breq	.+50     	; 0x4e0 <EVENT_USB_Host_DeviceEnumerationComplete+0x7a>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     4ae:	00 d0       	rcall	.+0      	; 0x4b0 <EVENT_USB_Host_DeviceEnumerationComplete+0x4a>
     4b0:	00 d0       	rcall	.+0      	; 0x4b2 <EVENT_USB_Host_DeviceEnumerationComplete+0x4c>
     4b2:	ed b7       	in	r30, 0x3d	; 61
     4b4:	fe b7       	in	r31, 0x3e	; 62
     4b6:	31 96       	adiw	r30, 0x01	; 1
     4b8:	81 e4       	ldi	r24, 0x41	; 65
     4ba:	91 e0       	ldi	r25, 0x01	; 1
     4bc:	ad b7       	in	r26, 0x3d	; 61
     4be:	be b7       	in	r27, 0x3e	; 62
     4c0:	12 96       	adiw	r26, 0x02	; 2
     4c2:	9c 93       	st	X, r25
     4c4:	8e 93       	st	-X, r24
     4c6:	11 97       	sbiw	r26, 0x01	; 1
     4c8:	22 83       	std	Z+2, r18	; 0x02
     4ca:	13 82       	std	Z+3, r1	; 0x03
     4cc:	1e d7       	rcall	.+3644   	; 0x130a <printf_P>
     4ce:	8b b1       	in	r24, 0x0b	; 11
     4d0:	8f 70       	andi	r24, 0x0F	; 15
     4d2:	80 69       	ori	r24, 0x90	; 144
     4d4:	8b b9       	out	0x0b, r24	; 11
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	0f 90       	pop	r0
     4dc:	0f 90       	pop	r0
     4de:	07 c0       	rjmp	.+14     	; 0x4ee <EVENT_USB_Host_DeviceEnumerationComplete+0x88>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	puts_P(PSTR("HID Device Enumerated.\r\n"));
     4e0:	88 e2       	ldi	r24, 0x28	; 40
     4e2:	91 e0       	ldi	r25, 0x01	; 1
     4e4:	34 d7       	rcall	.+3688   	; 0x134e <puts_P>
     4e6:	8b b1       	in	r24, 0x0b	; 11
     4e8:	8f 70       	andi	r24, 0x0F	; 15
     4ea:	80 66       	ori	r24, 0x60	; 96
     4ec:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     4ee:	1f 91       	pop	r17
     4f0:	08 95       	ret

000004f2 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     4f2:	84 b7       	in	r24, 0x34	; 52
     4f4:	87 7f       	andi	r24, 0xF7	; 247
     4f6:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     4f8:	28 e1       	ldi	r18, 0x18	; 24
     4fa:	0f b6       	in	r0, 0x3f	; 63
     4fc:	f8 94       	cli
     4fe:	20 93 60 00 	sts	0x0060, r18
     502:	10 92 60 00 	sts	0x0060, r1
     506:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	80 e8       	ldi	r24, 0x80	; 128
     50c:	0f b6       	in	r0, 0x3f	; 63
     50e:	f8 94       	cli
     510:	80 93 61 00 	sts	0x0061, r24
     514:	90 93 61 00 	sts	0x0061, r25
     518:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     51a:	83 e3       	ldi	r24, 0x33	; 51
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	90 93 cd 00 	sts	0x00CD, r25
     522:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     526:	86 e0       	ldi	r24, 0x06	; 6
     528:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     52c:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     530:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     534:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     536:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     538:	8a b1       	in	r24, 0x0a	; 10
     53a:	80 6f       	ori	r24, 0xF0	; 240
     53c:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     53e:	8b b1       	in	r24, 0x0b	; 11
     540:	8f 70       	andi	r24, 0x0F	; 15
     542:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     544:	8f d3       	rcall	.+1822   	; 0xc64 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     546:	e0 e2       	ldi	r30, 0x20	; 32
     548:	f1 e0       	ldi	r31, 0x01	; 1
     54a:	f0 93 2f 01 	sts	0x012F, r31
     54e:	e0 93 2e 01 	sts	0x012E, r30
					stdout = Stream;
     552:	f0 93 31 01 	sts	0x0131, r31
     556:	e0 93 30 01 	sts	0x0130, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     55a:	8e e0       	ldi	r24, 0x0E	; 14
     55c:	df 01       	movw	r26, r30
     55e:	1d 92       	st	X+, r1
     560:	8a 95       	dec	r24
     562:	e9 f7       	brne	.-6      	; 0x55e <SetupHardware+0x6c>
     564:	83 e0       	ldi	r24, 0x03	; 3
     566:	80 93 23 01 	sts	0x0123, r24
     56a:	87 e6       	ldi	r24, 0x67	; 103
     56c:	99 e0       	ldi	r25, 0x09	; 9
     56e:	90 93 29 01 	sts	0x0129, r25
     572:	80 93 28 01 	sts	0x0128, r24
     576:	81 e7       	ldi	r24, 0x71	; 113
     578:	99 e0       	ldi	r25, 0x09	; 9
     57a:	90 93 2b 01 	sts	0x012B, r25
     57e:	80 93 2a 01 	sts	0x012A, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     582:	08 95       	ret

00000584 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     584:	b6 df       	rcall	.-148    	; 0x4f2 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Generic HID Host Demo running.\r\n" ESC_FG_WHITE));
     586:	82 e3       	ldi	r24, 0x32	; 50
     588:	92 e0       	ldi	r25, 0x02	; 2
     58a:	e1 d6       	rcall	.+3522   	; 0x134e <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     58c:	8b b1       	in	r24, 0x0b	; 11
     58e:	8f 70       	andi	r24, 0x0F	; 15
     590:	80 61       	ori	r24, 0x10	; 16
     592:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     594:	78 94       	sei

	for (;;)
	{
		ReadNextReport();
     596:	c0 de       	rcall	.-640    	; 0x318 <ReadNextReport>
		
		USB_USBTask();
     598:	88 d6       	rcall	.+3344   	; 0x12aa <USB_USBTask>
     59a:	fd cf       	rjmp	.-6      	; 0x596 <main+0x12>

0000059c <DComp_NextHIDInterface>:
 *  This comparator searches for the next Interface descriptor of the correct HID Class value.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextHIDInterface(void* CurrentDescriptor)
{
     59c:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	/* Determine if the current descriptor is an interface descriptor */
	if (Header->Type == DTYPE_Interface)
     59e:	81 81       	ldd	r24, Z+1	; 0x01
     5a0:	84 30       	cpi	r24, 0x04	; 4
     5a2:	29 f4       	brne	.+10     	; 0x5ae <DComp_NextHIDInterface+0x12>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the HID descriptor class, break out if correct class/protocol interface found */
		if (Interface->Class == HID_CSCP_HIDClass)
     5a4:	85 81       	ldd	r24, Z+5	; 0x05
     5a6:	83 30       	cpi	r24, 0x03	; 3
     5a8:	11 f4       	brne	.+4      	; 0x5ae <DComp_NextHIDInterface+0x12>
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	08 95       	ret
     5ae:	82 e0       	ldi	r24, 0x02	; 2
		}
	}

	/* Current descriptor does not match what this comparator is looking for */
	return DESCRIPTOR_SEARCH_NotFound;
}
     5b0:	08 95       	ret

000005b2 <DComp_NextHIDInterfaceDataEndpoint>:
uint8_t DComp_NextHIDInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	/* Determine the type of the current descriptor */
	if (Header->Type == DTYPE_Endpoint)
     5b2:	fc 01       	movw	r30, r24
     5b4:	81 81       	ldd	r24, Z+1	; 0x01
     5b6:	85 30       	cpi	r24, 0x05	; 5
     5b8:	11 f4       	brne	.+4      	; 0x5be <DComp_NextHIDInterfaceDataEndpoint+0xc>
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	08 95       	ret
	{
		/* Indicate that the descriptor being searched for has been found */
		return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
     5be:	84 30       	cpi	r24, 0x04	; 4
     5c0:	11 f0       	breq	.+4      	; 0x5c6 <DComp_NextHIDInterfaceDataEndpoint+0x14>
     5c2:	82 e0       	ldi	r24, 0x02	; 2
     5c4:	08 95       	ret
     5c6:	81 e0       	ldi	r24, 0x01	; 1
		return DESCRIPTOR_SEARCH_Fail;
	}

	/* Current descriptor does not match what this comparator is looking for */
	return DESCRIPTOR_SEARCH_NotFound;
}
     5c8:	08 95       	ret

000005ca <ProcessConfigurationDescriptor>:
 *  This routine searches for a HID interface descriptor containing at least one Interrupt type IN endpoint.
 *
 *  \return An error code from the \ref GenericHIDHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     5ca:	8f 92       	push	r8
     5cc:	9f 92       	push	r9
     5ce:	af 92       	push	r10
     5d0:	bf 92       	push	r11
     5d2:	cf 92       	push	r12
     5d4:	df 92       	push	r13
     5d6:	ef 92       	push	r14
     5d8:	ff 92       	push	r15
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
     5de:	df 93       	push	r29
     5e0:	cf 93       	push	r28
     5e2:	cd b7       	in	r28, 0x3d	; 61
     5e4:	de b7       	in	r29, 0x3e	; 62
     5e6:	c4 50       	subi	r28, 0x04	; 4
     5e8:	d2 40       	sbci	r29, 0x02	; 2
     5ea:	0f b6       	in	r0, 0x3f	; 63
     5ec:	f8 94       	cli
     5ee:	de bf       	out	0x3e, r29	; 62
     5f0:	0f be       	out	0x3f, r0	; 63
     5f2:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     5f4:	ae 01       	movw	r20, r28
     5f6:	4b 5f       	subi	r20, 0xFB	; 251
     5f8:	5f 4f       	sbci	r21, 0xFF	; 255
     5fa:	5a 83       	std	Y+2, r21	; 0x02
     5fc:	49 83       	std	Y+1, r20	; 0x01
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     5fe:	83 e0       	ldi	r24, 0x03	; 3
     600:	e8 2e       	mov	r14, r24
     602:	f1 2c       	mov	r15, r1
     604:	ec 0e       	add	r14, r28
     606:	fd 1e       	adc	r15, r29
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	b7 01       	movw	r22, r14
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	32 e0       	ldi	r19, 0x02	; 2
     610:	85 d4       	rcall	.+2314   	; 0xf1c <USB_Host_GetDeviceConfigDescriptor>
     612:	85 30       	cpi	r24, 0x05	; 5
     614:	29 f0       	breq	.+10     	; 0x620 <ProcessConfigurationDescriptor+0x56>
     616:	86 30       	cpi	r24, 0x06	; 6
     618:	89 f0       	breq	.+34     	; 0x63c <ProcessConfigurationDescriptor+0x72>
     61a:	88 23       	and	r24, r24
     61c:	19 f0       	breq	.+6      	; 0x624 <ProcessConfigurationDescriptor+0x5a>
     61e:	10 c0       	rjmp	.+32     	; 0x640 <ProcessConfigurationDescriptor+0x76>
     620:	82 e0       	ldi	r24, 0x02	; 2
     622:	53 c0       	rjmp	.+166    	; 0x6ca <ProcessConfigurationDescriptor+0x100>
     624:	00 e0       	ldi	r16, 0x00	; 0
     626:	10 e0       	ldi	r17, 0x00	; 0
     628:	aa 24       	eor	r10, r10
     62a:	bb 24       	eor	r11, r11
     62c:	cc 24       	eor	r12, r12
     62e:	dd 24       	eor	r13, r13
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     630:	47 01       	movw	r8, r14
     632:	7e 01       	movw	r14, r28
     634:	08 94       	sec
     636:	e1 1c       	adc	r14, r1
     638:	f1 1c       	adc	r15, r1
     63a:	04 c0       	rjmp	.+8      	; 0x644 <ProcessConfigurationDescriptor+0x7a>
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     63c:	83 e0       	ldi	r24, 0x03	; 3
     63e:	45 c0       	rjmp	.+138    	; 0x6ca <ProcessConfigurationDescriptor+0x100>
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	43 c0       	rjmp	.+134    	; 0x6ca <ProcessConfigurationDescriptor+0x100>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     644:	01 15       	cp	r16, r1
     646:	11 05       	cpc	r17, r1
     648:	39 f0       	breq	.+14     	; 0x658 <ProcessConfigurationDescriptor+0x8e>
     64a:	c4 01       	movw	r24, r8
     64c:	b7 01       	movw	r22, r14
     64e:	49 ed       	ldi	r20, 0xD9	; 217
     650:	52 e0       	ldi	r21, 0x02	; 2
     652:	20 d4       	rcall	.+2112   	; 0xe94 <USB_GetNextDescriptorComp>
     654:	88 23       	and	r24, r24
     656:	89 f0       	breq	.+34     	; 0x67a <ProcessConfigurationDescriptor+0xb0>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextHIDInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Not all HID devices have an OUT endpoint - if we've reached the end of the HID descriptor
			 * but only found the mandatory IN endpoint, it's safe to continue with the device enumeration */
			if (DataINEndpoint)
     658:	a1 14       	cp	r10, r1
     65a:	b1 04       	cpc	r11, r1
     65c:	e1 f4       	brne	.+56     	; 0x696 <ProcessConfigurationDescriptor+0xcc>
			  break;

			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     65e:	c4 01       	movw	r24, r8
     660:	b7 01       	movw	r22, r14
     662:	4e ec       	ldi	r20, 0xCE	; 206
     664:	52 e0       	ldi	r21, 0x02	; 2
     666:	16 d4       	rcall	.+2092   	; 0xe94 <USB_GetNextDescriptorComp>
     668:	88 23       	and	r24, r24
     66a:	11 f0       	breq	.+4      	; 0x670 <ProcessConfigurationDescriptor+0xa6>
     66c:	84 e0       	ldi	r24, 0x04	; 4
     66e:	2d c0       	rjmp	.+90     	; 0x6ca <ProcessConfigurationDescriptor+0x100>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			HIDInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     670:	09 81       	ldd	r16, Y+1	; 0x01
     672:	1a 81       	ldd	r17, Y+2	; 0x02
     674:	cc 24       	eor	r12, r12
     676:	dd 24       	eor	r13, r13
     678:	e5 cf       	rjmp	.-54     	; 0x644 <ProcessConfigurationDescriptor+0x7a>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     67a:	e9 81       	ldd	r30, Y+1	; 0x01
     67c:	fa 81       	ldd	r31, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     67e:	82 81       	ldd	r24, Z+2	; 0x02
     680:	87 fd       	sbrc	r24, 7
     682:	02 c0       	rjmp	.+4      	; 0x688 <ProcessConfigurationDescriptor+0xbe>
     684:	6f 01       	movw	r12, r30
     686:	01 c0       	rjmp	.+2      	; 0x68a <ProcessConfigurationDescriptor+0xc0>
     688:	5f 01       	movw	r10, r30
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     68a:	a1 14       	cp	r10, r1
     68c:	b1 04       	cpc	r11, r1
     68e:	d1 f2       	breq	.-76     	; 0x644 <ProcessConfigurationDescriptor+0x7a>
     690:	c1 14       	cp	r12, r1
     692:	d1 04       	cpc	r13, r1
     694:	b9 f2       	breq	.-82     	; 0x644 <ProcessConfigurationDescriptor+0x7a>
		else
		  DataOUTEndpoint = EndpointData;
	}

	/* Configure the HID data IN pipe */
	Pipe_ConfigurePipe(HID_DATA_IN_PIPE, EP_TYPE_INTERRUPT, PIPE_TOKEN_IN,
     696:	f5 01       	movw	r30, r10
     698:	04 81       	ldd	r16, Z+4	; 0x04
     69a:	15 81       	ldd	r17, Z+5	; 0x05
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	63 e0       	ldi	r22, 0x03	; 3
     6a0:	40 e1       	ldi	r20, 0x10	; 16
     6a2:	22 81       	ldd	r18, Z+2	; 0x02
     6a4:	ee 24       	eor	r14, r14
     6a6:	ed d1       	rcall	.+986    	; 0xa82 <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);
	Pipe_SetInterruptPeriod(DataINEndpoint->PollingIntervalMS);
     6a8:	f5 01       	movw	r30, r10
     6aa:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     6ac:	80 93 ad 00 	sts	0x00AD, r24

	/* Check if the HID interface contained an optional OUT data endpoint */
	if (DataOUTEndpoint)
     6b0:	c1 14       	cp	r12, r1
     6b2:	d1 04       	cpc	r13, r1
     6b4:	49 f0       	breq	.+18     	; 0x6c8 <ProcessConfigurationDescriptor+0xfe>
	{
		/* Configure the HID data OUT pipe */
		Pipe_ConfigurePipe(HID_DATA_OUT_PIPE, EP_TYPE_INTERRUPT, PIPE_TOKEN_OUT,
     6b6:	f6 01       	movw	r30, r12
     6b8:	04 81       	ldd	r16, Z+4	; 0x04
     6ba:	15 81       	ldd	r17, Z+5	; 0x05
     6bc:	82 e0       	ldi	r24, 0x02	; 2
     6be:	63 e0       	ldi	r22, 0x03	; 3
     6c0:	40 e2       	ldi	r20, 0x20	; 32
     6c2:	22 81       	ldd	r18, Z+2	; 0x02
     6c4:	ee 24       	eor	r14, r14
     6c6:	dd d1       	rcall	.+954    	; 0xa82 <Pipe_ConfigurePipe>
     6c8:	80 e0       	ldi	r24, 0x00	; 0
						   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, PIPE_BANK_SINGLE);
	}

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     6ca:	cc 5f       	subi	r28, 0xFC	; 252
     6cc:	dd 4f       	sbci	r29, 0xFD	; 253
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	f8 94       	cli
     6d2:	de bf       	out	0x3e, r29	; 62
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	cd bf       	out	0x3d, r28	; 61
     6d8:	cf 91       	pop	r28
     6da:	df 91       	pop	r29
     6dc:	1f 91       	pop	r17
     6de:	0f 91       	pop	r16
     6e0:	ff 90       	pop	r15
     6e2:	ef 90       	pop	r14
     6e4:	df 90       	pop	r13
     6e6:	cf 90       	pop	r12
     6e8:	bf 90       	pop	r11
     6ea:	af 90       	pop	r10
     6ec:	9f 90       	pop	r9
     6ee:	8f 90       	pop	r8
     6f0:	08 95       	ret

000006f2 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     6f2:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     6f4:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     6f8:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     6fc:	80 91 a0 00 	lds	r24, 0x00A0
     700:	8f 7d       	andi	r24, 0xDF	; 223
     702:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     706:	80 91 9f 00 	lds	r24, 0x009F
     70a:	8f 7d       	andi	r24, 0xDF	; 223
     70c:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     710:	80 91 9e 00 	lds	r24, 0x009E
     714:	81 60       	ori	r24, 0x01	; 1
     716:	80 93 9e 00 	sts	0x009E, r24
     71a:	28 c0       	rjmp	.+80     	; 0x76c <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     71c:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     720:	85 ff       	sbrs	r24, 5
     722:	06 c0       	rjmp	.+12     	; 0x730 <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     724:	80 91 9f 00 	lds	r24, 0x009F
     728:	8f 7d       	andi	r24, 0xDF	; 223
     72a:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     72e:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     730:	80 91 1f 01 	lds	r24, 0x011F
     734:	81 30       	cpi	r24, 0x01	; 1
     736:	11 f4       	brne	.+4      	; 0x73c <USB_Host_WaitMS+0x4a>
     738:	91 e0       	ldi	r25, 0x01	; 1
     73a:	1a c0       	rjmp	.+52     	; 0x770 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     73c:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     740:	84 ff       	sbrs	r24, 4
     742:	09 c0       	rjmp	.+18     	; 0x756 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     744:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     748:	80 91 a6 00 	lds	r24, 0x00A6
     74c:	8f 7e       	andi	r24, 0xEF	; 239
     74e:	80 93 a6 00 	sts	0x00A6, r24
     752:	92 e0       	ldi	r25, 0x02	; 2
     754:	0d c0       	rjmp	.+26     	; 0x770 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     756:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     75a:	81 ff       	sbrs	r24, 1
     75c:	07 c0       	rjmp	.+14     	; 0x76c <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     75e:	80 91 a6 00 	lds	r24, 0x00A6
     762:	8d 7f       	andi	r24, 0xFD	; 253
     764:	80 93 a6 00 	sts	0x00A6, r24
     768:	93 e0       	ldi	r25, 0x03	; 3
     76a:	02 c0       	rjmp	.+4      	; 0x770 <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     76c:	99 23       	and	r25, r25
     76e:	b1 f6       	brne	.-84     	; 0x71c <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     770:	20 fd       	sbrc	r18, 0
     772:	05 c0       	rjmp	.+10     	; 0x77e <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     774:	80 91 9e 00 	lds	r24, 0x009E
     778:	8e 7f       	andi	r24, 0xFE	; 254
     77a:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     77e:	35 ff       	sbrs	r19, 5
     780:	05 c0       	rjmp	.+10     	; 0x78c <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     782:	80 91 a0 00 	lds	r24, 0x00A0
     786:	80 62       	ori	r24, 0x20	; 32
     788:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     78c:	89 2f       	mov	r24, r25
     78e:	08 95       	ret

00000790 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     790:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     794:	80 91 a0 00 	lds	r24, 0x00A0
     798:	8d 7f       	andi	r24, 0xFD	; 253
     79a:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     79e:	80 91 9e 00 	lds	r24, 0x009E
     7a2:	82 60       	ori	r24, 0x02	; 2
     7a4:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     7a8:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     7ac:	81 fd       	sbrc	r24, 1
     7ae:	fc cf       	rjmp	.-8      	; 0x7a8 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     7b0:	80 91 9e 00 	lds	r24, 0x009E
     7b4:	81 60       	ori	r24, 0x01	; 1
     7b6:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     7ba:	10 92 15 01 	sts	0x0115, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     7be:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     7c2:	80 91 a0 00 	lds	r24, 0x00A0
     7c6:	8f 7d       	andi	r24, 0xDF	; 223
     7c8:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     7cc:	80 91 9f 00 	lds	r24, 0x009F
     7d0:	8f 7d       	andi	r24, 0xDF	; 223
     7d2:	80 93 9f 00 	sts	0x009F, r24
     7d6:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7d8:	40 ed       	ldi	r20, 0xD0	; 208
     7da:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     7dc:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     7e0:	85 ff       	sbrs	r24, 5
     7e2:	0b c0       	rjmp	.+22     	; 0x7fa <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     7e4:	80 91 9f 00 	lds	r24, 0x009F
     7e8:	8f 7d       	andi	r24, 0xDF	; 223
     7ea:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     7ee:	80 91 9f 00 	lds	r24, 0x009F
     7f2:	8d 7f       	andi	r24, 0xFD	; 253
     7f4:	80 93 9f 00 	sts	0x009F, r24
     7f8:	05 c0       	rjmp	.+10     	; 0x804 <USB_Host_ResetDevice+0x74>
     7fa:	ca 01       	movw	r24, r20
     7fc:	01 97       	sbiw	r24, 0x01	; 1
     7fe:	f1 f7       	brne	.-4      	; 0x7fc <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     800:	21 50       	subi	r18, 0x01	; 1
     802:	61 f7       	brne	.-40     	; 0x7dc <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     804:	35 ff       	sbrs	r19, 5
     806:	05 c0       	rjmp	.+10     	; 0x812 <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     808:	80 91 a0 00 	lds	r24, 0x00A0
     80c:	80 62       	ori	r24, 0x20	; 32
     80e:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     812:	60 fd       	sbrc	r22, 0
     814:	05 c0       	rjmp	.+10     	; 0x820 <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     816:	80 91 9e 00 	lds	r24, 0x009E
     81a:	8e 7f       	andi	r24, 0xFE	; 254
     81c:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     820:	80 91 a0 00 	lds	r24, 0x00A0
     824:	82 60       	ori	r24, 0x02	; 2
     826:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     82a:	08 95       	ret

0000082c <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     82c:	ef 92       	push	r14
     82e:	0f 93       	push	r16
     830:	1f 93       	push	r17
     832:	df 93       	push	r29
     834:	cf 93       	push	r28
     836:	cd b7       	in	r28, 0x3d	; 61
     838:	de b7       	in	r29, 0x3e	; 62
     83a:	28 97       	sbiw	r28, 0x08	; 8
     83c:	0f b6       	in	r0, 0x3f	; 63
     83e:	f8 94       	cli
     840:	de bf       	out	0x3e, r29	; 62
     842:	0f be       	out	0x3f, r0	; 63
     844:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     846:	80 91 1f 01 	lds	r24, 0x011F
     84a:	85 30       	cpi	r24, 0x05	; 5
     84c:	09 f4       	brne	.+2      	; 0x850 <USB_Host_ProcessNextHostState+0x24>
     84e:	94 c0       	rjmp	.+296    	; 0x978 <USB_Host_ProcessNextHostState+0x14c>
     850:	86 30       	cpi	r24, 0x06	; 6
     852:	68 f4       	brcc	.+26     	; 0x86e <USB_Host_ProcessNextHostState+0x42>
     854:	82 30       	cpi	r24, 0x02	; 2
     856:	b9 f1       	breq	.+110    	; 0x8c6 <USB_Host_ProcessNextHostState+0x9a>
     858:	83 30       	cpi	r24, 0x03	; 3
     85a:	18 f4       	brcc	.+6      	; 0x862 <USB_Host_ProcessNextHostState+0x36>
     85c:	88 23       	and	r24, r24
     85e:	a1 f0       	breq	.+40     	; 0x888 <USB_Host_ProcessNextHostState+0x5c>
     860:	04 c1       	rjmp	.+520    	; 0xa6a <USB_Host_ProcessNextHostState+0x23e>
     862:	83 30       	cpi	r24, 0x03	; 3
     864:	d1 f1       	breq	.+116    	; 0x8da <USB_Host_ProcessNextHostState+0xae>
     866:	84 30       	cpi	r24, 0x04	; 4
     868:	09 f0       	breq	.+2      	; 0x86c <USB_Host_ProcessNextHostState+0x40>
     86a:	ff c0       	rjmp	.+510    	; 0xa6a <USB_Host_ProcessNextHostState+0x23e>
     86c:	5d c0       	rjmp	.+186    	; 0x928 <USB_Host_ProcessNextHostState+0xfc>
     86e:	87 30       	cpi	r24, 0x07	; 7
     870:	09 f4       	brne	.+2      	; 0x874 <USB_Host_ProcessNextHostState+0x48>
     872:	9b c0       	rjmp	.+310    	; 0x9aa <USB_Host_ProcessNextHostState+0x17e>
     874:	87 30       	cpi	r24, 0x07	; 7
     876:	08 f4       	brcc	.+2      	; 0x87a <USB_Host_ProcessNextHostState+0x4e>
     878:	8a c0       	rjmp	.+276    	; 0x98e <USB_Host_ProcessNextHostState+0x162>
     87a:	88 30       	cpi	r24, 0x08	; 8
     87c:	09 f4       	brne	.+2      	; 0x880 <USB_Host_ProcessNextHostState+0x54>
     87e:	b3 c0       	rjmp	.+358    	; 0x9e6 <USB_Host_ProcessNextHostState+0x1ba>
     880:	89 30       	cpi	r24, 0x09	; 9
     882:	09 f0       	breq	.+2      	; 0x886 <USB_Host_ProcessNextHostState+0x5a>
     884:	f2 c0       	rjmp	.+484    	; 0xa6a <USB_Host_ProcessNextHostState+0x23e>
     886:	d7 c0       	rjmp	.+430    	; 0xa36 <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     888:	00 91 13 01 	lds	r16, 0x0113
     88c:	10 91 14 01 	lds	r17, 0x0114
     890:	01 15       	cp	r16, r1
     892:	11 05       	cpc	r17, r1
     894:	09 f4       	brne	.+2      	; 0x898 <USB_Host_ProcessNextHostState+0x6c>
     896:	e9 c0       	rjmp	.+466    	; 0xa6a <USB_Host_ProcessNextHostState+0x23e>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	2b df       	rcall	.-426    	; 0x6f2 <USB_Host_WaitMS>
     89c:	68 2f       	mov	r22, r24
     89e:	88 23       	and	r24, r24
     8a0:	31 f0       	breq	.+12     	; 0x8ae <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
     8a2:	80 91 12 01 	lds	r24, 0x0112
     8a6:	80 93 1f 01 	sts	0x011F, r24
     8aa:	91 e0       	ldi	r25, 0x01	; 1
     8ac:	da c0       	rjmp	.+436    	; 0xa62 <USB_Host_ProcessNextHostState+0x236>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     8ae:	c8 01       	movw	r24, r16
     8b0:	01 97       	sbiw	r24, 0x01	; 1
     8b2:	90 93 14 01 	sts	0x0114, r25
     8b6:	80 93 13 01 	sts	0x0113, r24
     8ba:	89 2b       	or	r24, r25
     8bc:	09 f0       	breq	.+2      	; 0x8c0 <USB_Host_ProcessNextHostState+0x94>
     8be:	d5 c0       	rjmp	.+426    	; 0xa6a <USB_Host_ProcessNextHostState+0x23e>
				  USB_HostState = PostWaitState;
     8c0:	80 91 12 01 	lds	r24, 0x0112
     8c4:	07 c0       	rjmp	.+14     	; 0x8d4 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     8c6:	88 ee       	ldi	r24, 0xE8	; 232
     8c8:	93 e0       	ldi	r25, 0x03	; 3
     8ca:	90 93 14 01 	sts	0x0114, r25
     8ce:	80 93 13 01 	sts	0x0113, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     8d2:	83 e0       	ldi	r24, 0x03	; 3
     8d4:	80 93 1f 01 	sts	0x011F, r24
     8d8:	c8 c0       	rjmp	.+400    	; 0xa6a <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     8da:	80 91 13 01 	lds	r24, 0x0113
     8de:	90 91 14 01 	lds	r25, 0x0114
     8e2:	01 97       	sbiw	r24, 0x01	; 1
     8e4:	90 93 14 01 	sts	0x0114, r25
     8e8:	80 93 13 01 	sts	0x0113, r24
     8ec:	01 96       	adiw	r24, 0x01	; 1
     8ee:	29 f0       	breq	.+10     	; 0x8fa <USB_Host_ProcessNextHostState+0xce>
     8f0:	80 ed       	ldi	r24, 0xD0	; 208
     8f2:	97 e0       	ldi	r25, 0x07	; 7
     8f4:	01 97       	sbiw	r24, 0x01	; 1
     8f6:	f1 f7       	brne	.-4      	; 0x8f4 <USB_Host_ProcessNextHostState+0xc8>
     8f8:	b8 c0       	rjmp	.+368    	; 0xa6a <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     8fa:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     8fc:	80 91 d8 00 	lds	r24, 0x00D8
     900:	80 61       	ori	r24, 0x10	; 16
     902:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     906:	80 91 dd 00 	lds	r24, 0x00DD
     90a:	8b 7f       	andi	r24, 0xFB	; 251
     90c:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     910:	80 91 d7 00 	lds	r24, 0x00D7
     914:	80 61       	ori	r24, 0x10	; 16
     916:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     91a:	80 91 dd 00 	lds	r24, 0x00DD
     91e:	82 60       	ori	r24, 0x02	; 2
     920:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     924:	84 e0       	ldi	r24, 0x04	; 4
     926:	d6 cf       	rjmp	.-84     	; 0x8d4 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     928:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     92c:	80 ff       	sbrs	r24, 0
     92e:	9d c0       	rjmp	.+314    	; 0xa6a <USB_Host_ProcessNextHostState+0x23e>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     930:	80 91 9f 00 	lds	r24, 0x009F
     934:	8e 7f       	andi	r24, 0xFE	; 254
     936:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     93a:	80 91 9f 00 	lds	r24, 0x009F
     93e:	8d 7f       	andi	r24, 0xFD	; 253
     940:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     944:	80 91 df 00 	lds	r24, 0x00DF
     948:	8d 7f       	andi	r24, 0xFD	; 253
     94a:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     94e:	80 91 de 00 	lds	r24, 0x00DE
     952:	82 60       	ori	r24, 0x02	; 2
     954:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     958:	80 91 9e 00 	lds	r24, 0x009E
     95c:	81 60       	ori	r24, 0x01	; 1
     95e:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     962:	ed d0       	rcall	.+474    	; 0xb3e <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     964:	10 92 1f 01 	sts	0x011F, r1
     968:	84 e6       	ldi	r24, 0x64	; 100
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	90 93 14 01 	sts	0x0114, r25
     970:	80 93 13 01 	sts	0x0113, r24
     974:	85 e0       	ldi	r24, 0x05	; 5
     976:	5c c0       	rjmp	.+184    	; 0xa30 <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     978:	0b df       	rcall	.-490    	; 0x790 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     97a:	10 92 1f 01 	sts	0x011F, r1
     97e:	88 ec       	ldi	r24, 0xC8	; 200
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	90 93 14 01 	sts	0x0114, r25
     986:	80 93 13 01 	sts	0x0113, r24
     98a:	86 e0       	ldi	r24, 0x06	; 6
     98c:	51 c0       	rjmp	.+162    	; 0xa30 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	40 e0       	ldi	r20, 0x00	; 0
     994:	20 e0       	ldi	r18, 0x00	; 0
     996:	00 e4       	ldi	r16, 0x40	; 64
     998:	10 e0       	ldi	r17, 0x00	; 0
     99a:	ee 24       	eor	r14, r14
     99c:	72 d0       	rcall	.+228    	; 0xa82 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     99e:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     9a2:	87 ff       	sbrs	r24, 7
     9a4:	5c c0       	rjmp	.+184    	; 0xa5e <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     9a6:	87 e0       	ldi	r24, 0x07	; 7
     9a8:	95 cf       	rjmp	.-214    	; 0x8d4 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     9aa:	a7 e1       	ldi	r26, 0x17	; 23
     9ac:	b1 e0       	ldi	r27, 0x01	; 1
     9ae:	e8 e0       	ldi	r30, 0x08	; 8
     9b0:	f1 e0       	ldi	r31, 0x01	; 1
     9b2:	88 e0       	ldi	r24, 0x08	; 8
     9b4:	01 90       	ld	r0, Z+
     9b6:	0d 92       	st	X+, r0
     9b8:	81 50       	subi	r24, 0x01	; 1
     9ba:	e1 f7       	brne	.-8      	; 0x9b4 <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     9bc:	ce 01       	movw	r24, r28
     9be:	01 96       	adiw	r24, 0x01	; 1
     9c0:	31 d3       	rcall	.+1634   	; 0x1024 <USB_Host_SendControlRequest>
     9c2:	68 2f       	mov	r22, r24
     9c4:	88 23       	and	r24, r24
     9c6:	09 f0       	breq	.+2      	; 0x9ca <USB_Host_ProcessNextHostState+0x19e>
     9c8:	48 c0       	rjmp	.+144    	; 0xa5a <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     9ca:	88 85       	ldd	r24, Y+8	; 0x08
     9cc:	80 93 10 01 	sts	0x0110, r24

			USB_Host_ResetDevice();
     9d0:	df de       	rcall	.-578    	; 0x790 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     9d2:	10 92 1f 01 	sts	0x011F, r1
     9d6:	88 ec       	ldi	r24, 0xC8	; 200
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	90 93 14 01 	sts	0x0114, r25
     9de:	80 93 13 01 	sts	0x0113, r24
     9e2:	88 e0       	ldi	r24, 0x08	; 8
     9e4:	25 c0       	rjmp	.+74     	; 0xa30 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     9e6:	00 91 10 01 	lds	r16, 0x0110
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	10 e0       	ldi	r17, 0x00	; 0
     9f4:	ee 24       	eor	r14, r14
     9f6:	45 d0       	rcall	.+138    	; 0xa82 <Pipe_ConfigurePipe>
     9f8:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     9fc:	87 ff       	sbrs	r24, 7
     9fe:	2f c0       	rjmp	.+94     	; 0xa5e <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     a00:	a7 e1       	ldi	r26, 0x17	; 23
     a02:	b1 e0       	ldi	r27, 0x01	; 1
     a04:	e0 e0       	ldi	r30, 0x00	; 0
     a06:	f1 e0       	ldi	r31, 0x01	; 1
     a08:	88 e0       	ldi	r24, 0x08	; 8
     a0a:	01 90       	ld	r0, Z+
     a0c:	0d 92       	st	X+, r0
     a0e:	81 50       	subi	r24, 0x01	; 1
     a10:	e1 f7       	brne	.-8      	; 0xa0a <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	06 d3       	rcall	.+1548   	; 0x1024 <USB_Host_SendControlRequest>
     a18:	68 2f       	mov	r22, r24
     a1a:	88 23       	and	r24, r24
     a1c:	f1 f4       	brne	.+60     	; 0xa5a <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     a1e:	10 92 1f 01 	sts	0x011F, r1
     a22:	84 e6       	ldi	r24, 0x64	; 100
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	90 93 14 01 	sts	0x0114, r25
     a2a:	80 93 13 01 	sts	0x0113, r24
     a2e:	89 e0       	ldi	r24, 0x09	; 9
     a30:	80 93 12 01 	sts	0x0112, r24
     a34:	1a c0       	rjmp	.+52     	; 0xa6a <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     a3c:	8a e0       	ldi	r24, 0x0A	; 10
     a3e:	80 93 1f 01 	sts	0x011F, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     a42:	11 dd       	rcall	.-1502   	; 0x466 <EVENT_USB_Host_DeviceEnumerationComplete>
     a44:	12 c0       	rjmp	.+36     	; 0xa6a <USB_Host_ProcessNextHostState+0x23e>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     a46:	89 2f       	mov	r24, r25
     a48:	29 dc       	rcall	.-1966   	; 0x29c <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     a4a:	80 91 dd 00 	lds	r24, 0x00DD
     a4e:	81 60       	ori	r24, 0x01	; 1
     a50:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     a54:	4f dc       	rcall	.-1890   	; 0x2f4 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     a56:	b6 d0       	rcall	.+364    	; 0xbc4 <USB_ResetInterface>
     a58:	08 c0       	rjmp	.+16     	; 0xa6a <USB_Host_ProcessNextHostState+0x23e>
	}
}
     a5a:	93 e0       	ldi	r25, 0x03	; 3
     a5c:	02 c0       	rjmp	.+4      	; 0xa62 <USB_Host_ProcessNextHostState+0x236>
     a5e:	94 e0       	ldi	r25, 0x04	; 4
     a60:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     a62:	80 91 1f 01 	lds	r24, 0x011F
     a66:	81 30       	cpi	r24, 0x01	; 1
     a68:	71 f7       	brne	.-36     	; 0xa46 <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     a6a:	28 96       	adiw	r28, 0x08	; 8
     a6c:	0f b6       	in	r0, 0x3f	; 63
     a6e:	f8 94       	cli
     a70:	de bf       	out	0x3e, r29	; 62
     a72:	0f be       	out	0x3f, r0	; 63
     a74:	cd bf       	out	0x3d, r28	; 61
     a76:	cf 91       	pop	r28
     a78:	df 91       	pop	r29
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	ef 90       	pop	r14
     a80:	08 95       	ret

00000a82 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     a82:	ef 92       	push	r14
     a84:	0f 93       	push	r16
     a86:	1f 93       	push	r17
     a88:	e8 2f       	mov	r30, r24
     a8a:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     a8c:	62 95       	swap	r22
     a8e:	66 0f       	add	r22, r22
     a90:	66 0f       	add	r22, r22
     a92:	60 7c       	andi	r22, 0xC0	; 192
     a94:	64 2b       	or	r22, r20
     a96:	2f 70       	andi	r18, 0x0F	; 15
     a98:	62 2b       	or	r22, r18
     a9a:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     a9c:	72 60       	ori	r23, 0x02	; 2
     a9e:	45 c0       	rjmp	.+138    	; 0xb2a <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     aa0:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     aa4:	3e 17       	cp	r19, r30
     aa6:	a1 f4       	brne	.+40     	; 0xad0 <Pipe_ConfigurePipe+0x4e>
     aa8:	88 e0       	ldi	r24, 0x08	; 8
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	03 c0       	rjmp	.+6      	; 0xab6 <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     ab0:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     ab2:	88 0f       	add	r24, r24
     ab4:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     ab6:	80 17       	cp	r24, r16
     ab8:	91 07       	cpc	r25, r17
     aba:	10 f4       	brcc	.+4      	; 0xac0 <Pipe_ConfigurePipe+0x3e>
     abc:	25 30       	cpi	r18, 0x05	; 5
     abe:	c1 f7       	brne	.-16     	; 0xab0 <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     ac0:	92 2f       	mov	r25, r18
     ac2:	92 95       	swap	r25
     ac4:	90 7f       	andi	r25, 0xF0	; 240
     ac6:	97 2b       	or	r25, r23
     ac8:	56 2f       	mov	r21, r22
     aca:	40 e0       	ldi	r20, 0x00	; 0
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	08 c0       	rjmp	.+16     	; 0xae0 <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     ad0:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     ad4:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     ad8:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
     adc:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     ae0:	91 ff       	sbrs	r25, 1
     ae2:	22 c0       	rjmp	.+68     	; 0xb28 <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     ae4:	80 91 a9 00 	lds	r24, 0x00A9
     ae8:	8e 7f       	andi	r24, 0xFE	; 254
     aea:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     aee:	80 91 ab 00 	lds	r24, 0x00AB
     af2:	8d 7f       	andi	r24, 0xFD	; 253
     af4:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     af8:	80 91 a9 00 	lds	r24, 0x00A9
     afc:	81 60       	ori	r24, 0x01	; 1
     afe:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     b02:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
     b06:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
     b0a:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
     b0e:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     b12:	80 91 a9 00 	lds	r24, 0x00A9
     b16:	80 62       	ori	r24, 0x20	; 32
     b18:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     b1c:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     b20:	87 fd       	sbrc	r24, 7
     b22:	02 c0       	rjmp	.+4      	; 0xb28 <Pipe_ConfigurePipe+0xa6>
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	07 c0       	rjmp	.+14     	; 0xb36 <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     b28:	3f 5f       	subi	r19, 0xFF	; 255
     b2a:	37 30       	cpi	r19, 0x07	; 7
     b2c:	08 f4       	brcc	.+2      	; 0xb30 <Pipe_ConfigurePipe+0xae>
     b2e:	b8 cf       	rjmp	.-144    	; 0xaa0 <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     b30:	e0 93 a7 00 	sts	0x00A7, r30
     b34:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
     b36:	1f 91       	pop	r17
     b38:	0f 91       	pop	r16
     b3a:	ef 90       	pop	r14
     b3c:	08 95       	ret

00000b3e <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     b3e:	10 92 f8 00 	sts	0x00F8, r1
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     b48:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     b4c:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     b50:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     b54:	80 91 a9 00 	lds	r24, 0x00A9
     b58:	8e 7f       	andi	r24, 0xFE	; 254
     b5a:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b5e:	9f 5f       	subi	r25, 0xFF	; 255
     b60:	97 30       	cpi	r25, 0x07	; 7
     b62:	81 f7       	brne	.-32     	; 0xb44 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     b64:	08 95       	ret

00000b66 <Pipe_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     b66:	40 91 a2 00 	lds	r20, 0x00A2
     b6a:	50 91 a3 00 	lds	r21, 0x00A3
     b6e:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     b70:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     b74:	80 73       	andi	r24, 0x30	; 48
     b76:	80 31       	cpi	r24, 0x10	; 16
     b78:	29 f4       	brne	.+10     	; 0xb84 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     b7a:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     b7e:	80 ff       	sbrs	r24, 0
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <Pipe_WaitUntilReady+0x26>
     b82:	1e c0       	rjmp	.+60     	; 0xbc0 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     b84:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     b88:	82 fd       	sbrc	r24, 2
     b8a:	1a c0       	rjmp	.+52     	; 0xbc0 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     b8c:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     b90:	81 ff       	sbrs	r24, 1
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <Pipe_WaitUntilReady+0x32>
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     b98:	80 91 1f 01 	lds	r24, 0x011F
     b9c:	81 30       	cpi	r24, 0x01	; 1
     b9e:	11 f4       	brne	.+4      	; 0xba4 <Pipe_WaitUntilReady+0x3e>
     ba0:	82 e0       	ldi	r24, 0x02	; 2
     ba2:	08 95       	ret
     ba4:	80 91 a2 00 	lds	r24, 0x00A2
     ba8:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     bac:	84 17       	cp	r24, r20
     bae:	95 07       	cpc	r25, r21
     bb0:	f9 f2       	breq	.-66     	; 0xb70 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     bb2:	22 23       	and	r18, r18
     bb4:	11 f4       	brne	.+4      	; 0xbba <Pipe_WaitUntilReady+0x54>
     bb6:	83 e0       	ldi	r24, 0x03	; 3
     bb8:	08 95       	ret
     bba:	21 50       	subi	r18, 0x01	; 1
     bbc:	ac 01       	movw	r20, r24
     bbe:	d8 cf       	rjmp	.-80     	; 0xb70 <Pipe_WaitUntilReady+0xa>
     bc0:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     bc2:	08 95       	ret

00000bc4 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     bc4:	70 d0       	rcall	.+224    	; 0xca6 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     bc6:	77 d0       	rcall	.+238    	; 0xcb6 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     bc8:	80 91 d8 00 	lds	r24, 0x00D8
     bcc:	8f 77       	andi	r24, 0x7F	; 127
     bce:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     bd2:	80 91 d8 00 	lds	r24, 0x00D8
     bd6:	80 68       	ori	r24, 0x80	; 128
     bd8:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     bdc:	80 91 d8 00 	lds	r24, 0x00D8
     be0:	8f 7d       	andi	r24, 0xDF	; 223
     be2:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     be6:	80 91 d7 00 	lds	r24, 0x00D7
     bea:	8f 77       	andi	r24, 0x7F	; 127
     bec:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     bf0:	8c e0       	ldi	r24, 0x0C	; 12
     bf2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     bf4:	8e e0       	ldi	r24, 0x0E	; 14
     bf6:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     bf8:	09 b4       	in	r0, 0x29	; 41
     bfa:	00 fe       	sbrs	r0, 0
     bfc:	fd cf       	rjmp	.-6      	; 0xbf8 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	80 93 1f 01 	sts	0x011F, r24
	USB_Host_ConfigurationNumber = 0;
     c04:	10 92 15 01 	sts	0x0115, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     c08:	80 e4       	ldi	r24, 0x40	; 64
     c0a:	80 93 10 01 	sts	0x0110, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     c0e:	80 91 d8 00 	lds	r24, 0x00D8
     c12:	80 64       	ori	r24, 0x40	; 64
     c14:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c18:	80 91 dd 00 	lds	r24, 0x00DD
     c1c:	81 60       	ori	r24, 0x01	; 1
     c1e:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     c22:	80 91 dd 00 	lds	r24, 0x00DD
     c26:	84 60       	ori	r24, 0x04	; 4
     c28:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     c2c:	80 91 d7 00 	lds	r24, 0x00D7
     c30:	8f 7e       	andi	r24, 0xEF	; 239
     c32:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     c36:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     c38:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     c3a:	80 91 de 00 	lds	r24, 0x00DE
     c3e:	81 60       	ori	r24, 0x01	; 1
     c40:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     c44:	80 91 de 00 	lds	r24, 0x00DE
     c48:	84 60       	ori	r24, 0x04	; 4
     c4a:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     c4e:	80 91 e0 00 	lds	r24, 0x00E0
     c52:	8e 7f       	andi	r24, 0xFE	; 254
     c54:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     c58:	80 91 d8 00 	lds	r24, 0x00D8
     c5c:	80 61       	ori	r24, 0x10	; 16
     c5e:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     c62:	08 95       	ret

00000c64 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     c64:	e7 ed       	ldi	r30, 0xD7	; 215
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	81 60       	ori	r24, 0x01	; 1
     c6c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	80 93 16 01 	sts	0x0116, r24

	USB_ResetInterface();
}
     c74:	a7 cf       	rjmp	.-178    	; 0xbc4 <USB_ResetInterface>

00000c76 <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     c76:	17 d0       	rcall	.+46     	; 0xca6 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     c78:	1e d0       	rcall	.+60     	; 0xcb6 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     c7a:	e0 ee       	ldi	r30, 0xE0	; 224
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	81 60       	ori	r24, 0x01	; 1
     c82:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     c84:	a8 ed       	ldi	r26, 0xD8	; 216
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	8c 91       	ld	r24, X
     c8a:	8f 77       	andi	r24, 0x7F	; 127
     c8c:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     c8e:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     c90:	e7 ed       	ldi	r30, 0xD7	; 215
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	8e 7f       	andi	r24, 0xFE	; 254
     c98:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     c9a:	8c 91       	ld	r24, X
     c9c:	8f 7e       	andi	r24, 0xEF	; 239
     c9e:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     ca0:	10 92 16 01 	sts	0x0116, r1
}
     ca4:	08 95       	ret

00000ca6 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     ca6:	e8 ed       	ldi	r30, 0xD8	; 216
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	8c 7f       	andi	r24, 0xFC	; 252
     cae:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     cb0:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     cb4:	08 95       	ret

00000cb6 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     cb6:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     cba:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     cbe:	08 95       	ret

00000cc0 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     cc0:	1f 92       	push	r1
     cc2:	0f 92       	push	r0
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	0f 92       	push	r0
     cc8:	0b b6       	in	r0, 0x3b	; 59
     cca:	0f 92       	push	r0
     ccc:	11 24       	eor	r1, r1
     cce:	2f 93       	push	r18
     cd0:	3f 93       	push	r19
     cd2:	4f 93       	push	r20
     cd4:	5f 93       	push	r21
     cd6:	6f 93       	push	r22
     cd8:	7f 93       	push	r23
     cda:	8f 93       	push	r24
     cdc:	9f 93       	push	r25
     cde:	af 93       	push	r26
     ce0:	bf 93       	push	r27
     ce2:	ef 93       	push	r30
     ce4:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     ce6:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     cea:	85 ff       	sbrs	r24, 5
     cec:	0a c0       	rjmp	.+20     	; 0xd02 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     cee:	80 91 a0 00 	lds	r24, 0x00A0
     cf2:	85 ff       	sbrs	r24, 5
     cf4:	06 c0       	rjmp	.+12     	; 0xd02 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     cf6:	80 91 9f 00 	lds	r24, 0x009F
     cfa:	8f 7d       	andi	r24, 0xDF	; 223
     cfc:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     d00:	67 d1       	rcall	.+718    	; 0xfd0 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     d02:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     d06:	81 ff       	sbrs	r24, 1
     d08:	15 c0       	rjmp	.+42     	; 0xd34 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     d0a:	80 91 a0 00 	lds	r24, 0x00A0
     d0e:	81 ff       	sbrs	r24, 1
     d10:	11 c0       	rjmp	.+34     	; 0xd34 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     d12:	80 91 9f 00 	lds	r24, 0x009F
     d16:	8d 7f       	andi	r24, 0xFD	; 253
     d18:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     d1c:	80 91 9f 00 	lds	r24, 0x009F
     d20:	8e 7f       	andi	r24, 0xFE	; 254
     d22:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     d26:	80 91 a0 00 	lds	r24, 0x00A0
     d2a:	8d 7f       	andi	r24, 0xFD	; 253
     d2c:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     d30:	e1 da       	rcall	.-2622   	; 0x2f4 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     d32:	48 df       	rcall	.-368    	; 0xbc4 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     d34:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     d38:	81 ff       	sbrs	r24, 1
     d3a:	15 c0       	rjmp	.+42     	; 0xd66 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     d3c:	80 91 de 00 	lds	r24, 0x00DE
     d40:	81 ff       	sbrs	r24, 1
     d42:	11 c0       	rjmp	.+34     	; 0xd66 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     d44:	80 91 df 00 	lds	r24, 0x00DF
     d48:	8d 7f       	andi	r24, 0xFD	; 253
     d4a:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     d4e:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d50:	80 91 dd 00 	lds	r24, 0x00DD
     d54:	81 60       	ori	r24, 0x01	; 1
     d56:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	68 db       	rcall	.-2352   	; 0x42e <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     d5e:	ca da       	rcall	.-2668   	; 0x2f4 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	80 93 1f 01 	sts	0x011F, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     d66:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     d6a:	80 ff       	sbrs	r24, 0
     d6c:	17 c0       	rjmp	.+46     	; 0xd9c <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     d6e:	80 91 de 00 	lds	r24, 0x00DE
     d72:	80 ff       	sbrs	r24, 0
     d74:	13 c0       	rjmp	.+38     	; 0xd9c <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     d76:	80 91 df 00 	lds	r24, 0x00DF
     d7a:	8e 7f       	andi	r24, 0xFE	; 254
     d7c:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     d80:	80 91 de 00 	lds	r24, 0x00DE
     d84:	8e 7f       	andi	r24, 0xFE	; 254
     d86:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     d8a:	bd da       	rcall	.-2694   	; 0x306 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     d8c:	80 91 a0 00 	lds	r24, 0x00A0
     d90:	82 60       	ori	r24, 0x02	; 2
     d92:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     d96:	82 e0       	ldi	r24, 0x02	; 2
     d98:	80 93 1f 01 	sts	0x011F, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     d9c:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     da0:	82 ff       	sbrs	r24, 2
     da2:	0e c0       	rjmp	.+28     	; 0xdc0 <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     da4:	80 91 de 00 	lds	r24, 0x00DE
     da8:	82 ff       	sbrs	r24, 2
     daa:	0a c0       	rjmp	.+20     	; 0xdc0 <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     dac:	80 91 df 00 	lds	r24, 0x00DF
     db0:	8b 7f       	andi	r24, 0xFB	; 251
     db2:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     db6:	82 e0       	ldi	r24, 0x02	; 2
     db8:	60 e0       	ldi	r22, 0x00	; 0
     dba:	70 da       	rcall	.-2848   	; 0x29c <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     dbc:	9b da       	rcall	.-2762   	; 0x2f4 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     dbe:	02 df       	rcall	.-508    	; 0xbc4 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     dc0:	ff 91       	pop	r31
     dc2:	ef 91       	pop	r30
     dc4:	bf 91       	pop	r27
     dc6:	af 91       	pop	r26
     dc8:	9f 91       	pop	r25
     dca:	8f 91       	pop	r24
     dcc:	7f 91       	pop	r23
     dce:	6f 91       	pop	r22
     dd0:	5f 91       	pop	r21
     dd2:	4f 91       	pop	r20
     dd4:	3f 91       	pop	r19
     dd6:	2f 91       	pop	r18
     dd8:	0f 90       	pop	r0
     dda:	0b be       	out	0x3b, r0	; 59
     ddc:	0f 90       	pop	r0
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	0f 90       	pop	r0
     de2:	1f 90       	pop	r1
     de4:	18 95       	reti

00000de6 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     de6:	bf 92       	push	r11
     de8:	cf 92       	push	r12
     dea:	df 92       	push	r13
     dec:	ef 92       	push	r14
     dee:	ff 92       	push	r15
     df0:	0f 93       	push	r16
     df2:	1f 93       	push	r17
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	18 2f       	mov	r17, r24
     dfa:	09 2f       	mov	r16, r25
     dfc:	7b 01       	movw	r14, r22
     dfe:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     e00:	80 91 aa 00 	lds	r24, 0x00AA
     e04:	8f 7c       	andi	r24, 0xCF	; 207
     e06:	80 61       	ori	r24, 0x10	; 16
     e08:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     e0c:	ac de       	rcall	.-680    	; 0xb66 <Pipe_WaitUntilReady>
     e0e:	b8 2e       	mov	r11, r24
     e10:	88 23       	and	r24, r24
     e12:	a9 f5       	brne	.+106    	; 0xe7e <Pipe_Read_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     e14:	81 2f       	mov	r24, r17
     e16:	90 2f       	mov	r25, r16
     e18:	9c 01       	movw	r18, r24
     e1a:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     e1c:	c1 14       	cp	r12, r1
     e1e:	d1 04       	cpc	r13, r1
     e20:	39 f0       	breq	.+14     	; 0xe30 <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
     e22:	f6 01       	movw	r30, r12
     e24:	80 81       	ld	r24, Z
     e26:	91 81       	ldd	r25, Z+1	; 0x01
     e28:	e8 1a       	sub	r14, r24
     e2a:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     e2c:	c8 0f       	add	r28, r24
     e2e:	d9 1f       	adc	r29, r25
     e30:	00 e0       	ldi	r16, 0x00	; 0
     e32:	10 e0       	ldi	r17, 0x00	; 0
     e34:	21 c0       	rjmp	.+66     	; 0xe78 <Pipe_Read_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     e36:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     e3a:	85 fd       	sbrc	r24, 5
     e3c:	15 c0       	rjmp	.+42     	; 0xe68 <Pipe_Read_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     e3e:	80 91 a6 00 	lds	r24, 0x00A6
     e42:	8e 77       	andi	r24, 0x7E	; 126
     e44:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     e48:	c1 14       	cp	r12, r1
     e4a:	d1 04       	cpc	r13, r1
     e4c:	49 f0       	breq	.+18     	; 0xe60 <Pipe_Read_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
     e4e:	f6 01       	movw	r30, r12
     e50:	80 81       	ld	r24, Z
     e52:	91 81       	ldd	r25, Z+1	; 0x01
     e54:	80 0f       	add	r24, r16
     e56:	91 1f       	adc	r25, r17
     e58:	91 83       	std	Z+1, r25	; 0x01
     e5a:	80 83       	st	Z, r24
     e5c:	84 e0       	ldi	r24, 0x04	; 4
     e5e:	10 c0       	rjmp	.+32     	; 0xe80 <Pipe_Read_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     e60:	82 de       	rcall	.-764    	; 0xb66 <Pipe_WaitUntilReady>
     e62:	88 23       	and	r24, r24
     e64:	49 f0       	breq	.+18     	; 0xe78 <Pipe_Read_Stream_LE+0x92>
     e66:	0c c0       	rjmp	.+24     	; 0xe80 <Pipe_Read_Stream_LE+0x9a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     e68:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     e6c:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     e6e:	08 94       	sec
     e70:	e1 08       	sbc	r14, r1
     e72:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
     e74:	0f 5f       	subi	r16, 0xFF	; 255
     e76:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     e78:	e1 14       	cp	r14, r1
     e7a:	f1 04       	cpc	r15, r1
     e7c:	e1 f6       	brne	.-72     	; 0xe36 <Pipe_Read_Stream_LE+0x50>
     e7e:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	1f 91       	pop	r17
     e86:	0f 91       	pop	r16
     e88:	ff 90       	pop	r15
     e8a:	ef 90       	pop	r14
     e8c:	df 90       	pop	r13
     e8e:	cf 90       	pop	r12
     e90:	bf 90       	pop	r11
     e92:	08 95       	ret

00000e94 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     e94:	af 92       	push	r10
     e96:	bf 92       	push	r11
     e98:	cf 92       	push	r12
     e9a:	df 92       	push	r13
     e9c:	ef 92       	push	r14
     e9e:	ff 92       	push	r15
     ea0:	0f 93       	push	r16
     ea2:	1f 93       	push	r17
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
     ea8:	7c 01       	movw	r14, r24
     eaa:	eb 01       	movw	r28, r22
     eac:	6a 01       	movw	r12, r20
     eae:	24 c0       	rjmp	.+72     	; 0xef8 <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     eb0:	e8 81       	ld	r30, Y
     eb2:	f9 81       	ldd	r31, Y+1	; 0x01
     eb4:	be 2e       	mov	r11, r30
     eb6:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     eb8:	80 81       	ld	r24, Z
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	98 01       	movw	r18, r16
     ebe:	80 17       	cp	r24, r16
     ec0:	91 07       	cpc	r25, r17
     ec2:	08 f4       	brcc	.+2      	; 0xec6 <USB_GetNextDescriptorComp+0x32>
     ec4:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     ec6:	e2 0f       	add	r30, r18
     ec8:	f3 1f       	adc	r31, r19
     eca:	f9 83       	std	Y+1, r31	; 0x01
     ecc:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     ece:	f7 01       	movw	r30, r14
     ed0:	80 81       	ld	r24, Z
     ed2:	91 81       	ldd	r25, Z+1	; 0x01
     ed4:	82 1b       	sub	r24, r18
     ed6:	93 0b       	sbc	r25, r19
     ed8:	91 83       	std	Z+1, r25	; 0x01
     eda:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     edc:	88 81       	ld	r24, Y
     ede:	99 81       	ldd	r25, Y+1	; 0x01
     ee0:	f6 01       	movw	r30, r12
     ee2:	09 95       	icall
     ee4:	82 30       	cpi	r24, 0x02	; 2
     ee6:	41 f0       	breq	.+16     	; 0xef8 <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     ee8:	81 30       	cpi	r24, 0x01	; 1
     eea:	69 f4       	brne	.+26     	; 0xf06 <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
     eec:	b8 82       	st	Y, r11
     eee:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
     ef0:	f7 01       	movw	r30, r14
     ef2:	11 83       	std	Z+1, r17	; 0x01
     ef4:	00 83       	st	Z, r16
     ef6:	07 c0       	rjmp	.+14     	; 0xf06 <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     ef8:	f7 01       	movw	r30, r14
     efa:	00 81       	ld	r16, Z
     efc:	11 81       	ldd	r17, Z+1	; 0x01
     efe:	01 15       	cp	r16, r1
     f00:	11 05       	cpc	r17, r1
     f02:	b1 f6       	brne	.-84     	; 0xeb0 <USB_GetNextDescriptorComp+0x1c>
     f04:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     f06:	df 91       	pop	r29
     f08:	cf 91       	pop	r28
     f0a:	1f 91       	pop	r17
     f0c:	0f 91       	pop	r16
     f0e:	ff 90       	pop	r15
     f10:	ef 90       	pop	r14
     f12:	df 90       	pop	r13
     f14:	cf 90       	pop	r12
     f16:	bf 90       	pop	r11
     f18:	af 90       	pop	r10
     f1a:	08 95       	ret

00000f1c <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     f1c:	cf 92       	push	r12
     f1e:	df 92       	push	r13
     f20:	ef 92       	push	r14
     f22:	ff 92       	push	r15
     f24:	0f 93       	push	r16
     f26:	1f 93       	push	r17
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	29 97       	sbiw	r28, 0x09	; 9
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	f8 94       	cli
     f36:	de bf       	out	0x3e, r29	; 62
     f38:	0f be       	out	0x3f, r0	; 63
     f3a:	cd bf       	out	0x3d, r28	; 61
     f3c:	6b 01       	movw	r12, r22
     f3e:	8a 01       	movw	r16, r20
     f40:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     f42:	90 e8       	ldi	r25, 0x80	; 128
     f44:	90 93 17 01 	sts	0x0117, r25
     f48:	96 e0       	ldi	r25, 0x06	; 6
     f4a:	90 93 18 01 	sts	0x0118, r25
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	92 60       	ori	r25, 0x02	; 2
     f54:	90 93 1a 01 	sts	0x011A, r25
     f58:	80 93 19 01 	sts	0x0119, r24
     f5c:	10 92 1c 01 	sts	0x011C, r1
     f60:	10 92 1b 01 	sts	0x011B, r1
     f64:	89 e0       	ldi	r24, 0x09	; 9
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	90 93 1e 01 	sts	0x011E, r25
     f6c:	80 93 1d 01 	sts	0x011D, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     f70:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     f74:	ce 01       	movw	r24, r28
     f76:	01 96       	adiw	r24, 0x01	; 1
     f78:	55 d0       	rcall	.+170    	; 0x1024 <USB_Host_SendControlRequest>
     f7a:	28 2f       	mov	r18, r24
     f7c:	88 23       	and	r24, r24
     f7e:	c1 f4       	brne	.+48     	; 0xfb0 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     f80:	8b 81       	ldd	r24, Y+3	; 0x03
     f82:	9c 81       	ldd	r25, Y+4	; 0x04
     f84:	f6 01       	movw	r30, r12
     f86:	91 83       	std	Z+1, r25	; 0x01
     f88:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     f8a:	e8 16       	cp	r14, r24
     f8c:	f9 06       	cpc	r15, r25
     f8e:	10 f4       	brcc	.+4      	; 0xf94 <USB_Host_GetDeviceConfigDescriptor+0x78>
     f90:	25 e0       	ldi	r18, 0x05	; 5
     f92:	0e c0       	rjmp	.+28     	; 0xfb0 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     f94:	90 93 1e 01 	sts	0x011E, r25
     f98:	80 93 1d 01 	sts	0x011D, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     f9c:	c8 01       	movw	r24, r16
     f9e:	42 d0       	rcall	.+132    	; 0x1024 <USB_Host_SendControlRequest>
     fa0:	28 2f       	mov	r18, r24
     fa2:	88 23       	and	r24, r24
     fa4:	29 f4       	brne	.+10     	; 0xfb0 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     fa6:	f8 01       	movw	r30, r16
     fa8:	81 81       	ldd	r24, Z+1	; 0x01
     faa:	82 30       	cpi	r24, 0x02	; 2
     fac:	09 f0       	breq	.+2      	; 0xfb0 <USB_Host_GetDeviceConfigDescriptor+0x94>
     fae:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     fb0:	82 2f       	mov	r24, r18
     fb2:	29 96       	adiw	r28, 0x09	; 9
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	f8 94       	cli
     fb8:	de bf       	out	0x3e, r29	; 62
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	cd bf       	out	0x3d, r28	; 61
     fbe:	cf 91       	pop	r28
     fc0:	df 91       	pop	r29
     fc2:	1f 91       	pop	r17
     fc4:	0f 91       	pop	r16
     fc6:	ff 90       	pop	r15
     fc8:	ef 90       	pop	r14
     fca:	df 90       	pop	r13
     fcc:	cf 90       	pop	r12
     fce:	08 95       	ret

00000fd0 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     fd0:	08 95       	ret

00000fd2 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     fd2:	1f 93       	push	r17
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	18 2f       	mov	r17, r24
     fda:	c8 ee       	ldi	r28, 0xE8	; 232
     fdc:	d3 e0       	ldi	r29, 0x03	; 3
     fde:	09 c0       	rjmp	.+18     	; 0xff2 <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	87 db       	rcall	.-2290   	; 0x6f2 <USB_Host_WaitMS>
     fe4:	88 23       	and	r24, r24
     fe6:	d1 f4       	brne	.+52     	; 0x101c <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     fe8:	20 97       	sbiw	r28, 0x00	; 0
     fea:	11 f4       	brne	.+4      	; 0xff0 <USB_Host_WaitForIOS+0x1e>
     fec:	84 e0       	ldi	r24, 0x04	; 4
     fee:	16 c0       	rjmp	.+44     	; 0x101c <USB_Host_WaitForIOS+0x4a>
     ff0:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     ff2:	11 23       	and	r17, r17
     ff4:	29 f4       	brne	.+10     	; 0x1000 <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     ff6:	80 91 a6 00 	lds	r24, 0x00A6
     ffa:	83 ff       	sbrs	r24, 3
     ffc:	f1 cf       	rjmp	.-30     	; 0xfe0 <USB_Host_WaitForIOS+0xe>
     ffe:	0d c0       	rjmp	.+26     	; 0x101a <USB_Host_WaitForIOS+0x48>
    1000:	11 30       	cpi	r17, 0x01	; 1
    1002:	29 f4       	brne	.+10     	; 0x100e <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1004:	80 91 a6 00 	lds	r24, 0x00A6
    1008:	80 ff       	sbrs	r24, 0
    100a:	ea cf       	rjmp	.-44     	; 0xfe0 <USB_Host_WaitForIOS+0xe>
    100c:	06 c0       	rjmp	.+12     	; 0x101a <USB_Host_WaitForIOS+0x48>
    100e:	12 30       	cpi	r17, 0x02	; 2
    1010:	39 f7       	brne	.-50     	; 0xfe0 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1012:	80 91 a6 00 	lds	r24, 0x00A6
    1016:	82 ff       	sbrs	r24, 2
    1018:	e3 cf       	rjmp	.-58     	; 0xfe0 <USB_Host_WaitForIOS+0xe>
    101a:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	1f 91       	pop	r17
    1022:	08 95       	ret

00001024 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1024:	ff 92       	push	r15
    1026:	0f 93       	push	r16
    1028:	1f 93       	push	r17
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
    102e:	18 2f       	mov	r17, r24
    1030:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1032:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1036:	c0 91 1d 01 	lds	r28, 0x011D
    103a:	d0 91 1e 01 	lds	r29, 0x011E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    103e:	80 91 9e 00 	lds	r24, 0x009E
    1042:	81 60       	ori	r24, 0x01	; 1
    1044:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	53 db       	rcall	.-2394   	; 0x6f2 <USB_Host_WaitMS>
    104c:	98 2f       	mov	r25, r24
    104e:	88 23       	and	r24, r24
    1050:	09 f0       	breq	.+2      	; 0x1054 <USB_Host_SendControlRequest+0x30>
    1052:	ee c0       	rjmp	.+476    	; 0x1230 <USB_Host_SendControlRequest+0x20c>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1054:	80 91 aa 00 	lds	r24, 0x00AA
    1058:	8f 7c       	andi	r24, 0xCF	; 207
    105a:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    105e:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1062:	80 91 a6 00 	lds	r24, 0x00A6
    1066:	8f 7e       	andi	r24, 0xEF	; 239
    1068:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    106c:	80 91 a9 00 	lds	r24, 0x00A9
    1070:	8f 7b       	andi	r24, 0xBF	; 191
    1072:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearError();

	Pipe_Unfreeze();

	Pipe_Write_8(USB_ControlRequest.bmRequestType);
    1076:	80 91 17 01 	lds	r24, 0x0117
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    107a:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
    107e:	80 91 18 01 	lds	r24, 0x0118
    1082:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
    1086:	80 91 19 01 	lds	r24, 0x0119
    108a:	90 91 1a 01 	lds	r25, 0x011A
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    108e:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    1092:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
    1096:	80 91 1b 01 	lds	r24, 0x011B
    109a:	90 91 1c 01 	lds	r25, 0x011C
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    109e:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    10a2:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
    10a6:	80 91 1d 01 	lds	r24, 0x011D
    10aa:	90 91 1e 01 	lds	r25, 0x011E
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    10ae:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    10b2:	90 93 af 00 	sts	0x00AF, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    10b6:	80 91 a6 00 	lds	r24, 0x00A6
    10ba:	87 77       	andi	r24, 0x77	; 119
    10bc:	80 93 a6 00 	sts	0x00A6, r24

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	87 df       	rcall	.-242    	; 0xfd2 <USB_Host_WaitForIOS>
    10c4:	98 2f       	mov	r25, r24
    10c6:	88 23       	and	r24, r24
    10c8:	09 f0       	breq	.+2      	; 0x10cc <USB_Host_SendControlRequest+0xa8>
    10ca:	b2 c0       	rjmp	.+356    	; 0x1230 <USB_Host_SendControlRequest+0x20c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10cc:	80 91 a9 00 	lds	r24, 0x00A9
    10d0:	80 64       	ori	r24, 0x40	; 64
    10d2:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	0c db       	rcall	.-2536   	; 0x6f2 <USB_Host_WaitMS>
    10da:	98 2f       	mov	r25, r24
    10dc:	88 23       	and	r24, r24
    10de:	09 f0       	breq	.+2      	; 0x10e2 <USB_Host_SendControlRequest+0xbe>
    10e0:	a7 c0       	rjmp	.+334    	; 0x1230 <USB_Host_SendControlRequest+0x20c>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
    10e2:	21 2f       	mov	r18, r17
    10e4:	30 2f       	mov	r19, r16
    10e6:	c9 01       	movw	r24, r18
    10e8:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    10ea:	80 91 17 01 	lds	r24, 0x0117
    10ee:	87 ff       	sbrs	r24, 7
    10f0:	52 c0       	rjmp	.+164    	; 0x1196 <USB_Host_SendControlRequest+0x172>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10f2:	80 91 aa 00 	lds	r24, 0x00AA
    10f6:	8f 7c       	andi	r24, 0xCF	; 207
    10f8:	80 61       	ori	r24, 0x10	; 16
    10fa:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    10fe:	01 15       	cp	r16, r1
    1100:	11 05       	cpc	r17, r1
    1102:	69 f5       	brne	.+90     	; 0x115e <USB_Host_SendControlRequest+0x13a>
    1104:	2e c0       	rjmp	.+92     	; 0x1162 <USB_Host_SendControlRequest+0x13e>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1106:	80 91 a9 00 	lds	r24, 0x00A9
    110a:	8f 7b       	andi	r24, 0xBF	; 191
    110c:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	5f df       	rcall	.-322    	; 0xfd2 <USB_Host_WaitForIOS>
    1114:	98 2f       	mov	r25, r24
    1116:	88 23       	and	r24, r24
    1118:	09 f0       	breq	.+2      	; 0x111c <USB_Host_SendControlRequest+0xf8>
    111a:	8a c0       	rjmp	.+276    	; 0x1230 <USB_Host_SendControlRequest+0x20c>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    111c:	80 91 f6 00 	lds	r24, 0x00F6
    1120:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    1124:	89 2b       	or	r24, r25
    1126:	49 f4       	brne	.+18     	; 0x113a <USB_Host_SendControlRequest+0x116>
    1128:	c0 e0       	ldi	r28, 0x00	; 0
    112a:	d0 e0       	ldi	r29, 0x00	; 0
    112c:	06 c0       	rjmp	.+12     	; 0x113a <USB_Host_SendControlRequest+0x116>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    112e:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    1132:	f8 01       	movw	r30, r16
    1134:	81 93       	st	Z+, r24
    1136:	8f 01       	movw	r16, r30
					DataLen--;
    1138:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    113a:	80 91 f6 00 	lds	r24, 0x00F6
    113e:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1142:	89 2b       	or	r24, r25
    1144:	11 f0       	breq	.+4      	; 0x114a <USB_Host_SendControlRequest+0x126>
    1146:	20 97       	sbiw	r28, 0x00	; 0
    1148:	91 f7       	brne	.-28     	; 0x112e <USB_Host_SendControlRequest+0x10a>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    114a:	80 91 a9 00 	lds	r24, 0x00A9
    114e:	80 64       	ori	r24, 0x40	; 64
    1150:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1154:	80 91 a6 00 	lds	r24, 0x00A6
    1158:	8e 77       	andi	r24, 0x7E	; 126
    115a:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    115e:	20 97       	sbiw	r28, 0x00	; 0
    1160:	91 f6       	brne	.-92     	; 0x1106 <USB_Host_SendControlRequest+0xe2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1162:	80 91 aa 00 	lds	r24, 0x00AA
    1166:	8f 7c       	andi	r24, 0xCF	; 207
    1168:	80 62       	ori	r24, 0x20	; 32
    116a:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    116e:	80 91 a9 00 	lds	r24, 0x00A9
    1172:	8f 7b       	andi	r24, 0xBF	; 191
    1174:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1178:	82 e0       	ldi	r24, 0x02	; 2
    117a:	2b df       	rcall	.-426    	; 0xfd2 <USB_Host_WaitForIOS>
    117c:	98 2f       	mov	r25, r24
    117e:	88 23       	and	r24, r24
    1180:	09 f0       	breq	.+2      	; 0x1184 <USB_Host_SendControlRequest+0x160>
    1182:	56 c0       	rjmp	.+172    	; 0x1230 <USB_Host_SendControlRequest+0x20c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1184:	80 91 a6 00 	lds	r24, 0x00A6
    1188:	8b 77       	andi	r24, 0x7B	; 123
    118a:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    118e:	82 e0       	ldi	r24, 0x02	; 2
    1190:	20 df       	rcall	.-448    	; 0xfd2 <USB_Host_WaitForIOS>
    1192:	98 2f       	mov	r25, r24
    1194:	4d c0       	rjmp	.+154    	; 0x1230 <USB_Host_SendControlRequest+0x20c>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    1196:	01 15       	cp	r16, r1
    1198:	11 05       	cpc	r17, r1
    119a:	a9 f1       	breq	.+106    	; 0x1206 <USB_Host_SendControlRequest+0x1e2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    119c:	80 91 aa 00 	lds	r24, 0x00AA
    11a0:	8f 7c       	andi	r24, 0xCF	; 207
    11a2:	80 62       	ori	r24, 0x20	; 32
    11a4:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11a8:	80 91 a9 00 	lds	r24, 0x00A9
    11ac:	8f 7b       	andi	r24, 0xBF	; 191
    11ae:	80 93 a9 00 	sts	0x00A9, r24
    11b2:	1d c0       	rjmp	.+58     	; 0x11ee <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11b4:	82 e0       	ldi	r24, 0x02	; 2
    11b6:	0d df       	rcall	.-486    	; 0xfd2 <USB_Host_WaitForIOS>
    11b8:	98 2f       	mov	r25, r24
    11ba:	88 23       	and	r24, r24
    11bc:	c9 f5       	brne	.+114    	; 0x1230 <USB_Host_SendControlRequest+0x20c>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    11be:	80 91 10 01 	lds	r24, 0x0110
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	07 c0       	rjmp	.+14     	; 0x11d6 <USB_Host_SendControlRequest+0x1b2>
				{
					Pipe_Write_8(*(DataStream++));
    11c8:	f8 01       	movw	r30, r16
    11ca:	81 91       	ld	r24, Z+
    11cc:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    11ce:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    11d2:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    11d4:	39 f0       	breq	.+14     	; 0x11e4 <USB_Host_SendControlRequest+0x1c0>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    11d6:	80 91 f6 00 	lds	r24, 0x00F6
    11da:	90 91 f7 00 	lds	r25, 0x00F7
    11de:	82 17       	cp	r24, r18
    11e0:	93 07       	cpc	r25, r19
    11e2:	90 f3       	brcs	.-28     	; 0x11c8 <USB_Host_SendControlRequest+0x1a4>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    11e4:	80 91 a6 00 	lds	r24, 0x00A6
    11e8:	8b 77       	andi	r24, 0x7B	; 123
    11ea:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    11ee:	20 97       	sbiw	r28, 0x00	; 0
    11f0:	09 f7       	brne	.-62     	; 0x11b4 <USB_Host_SendControlRequest+0x190>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11f2:	82 e0       	ldi	r24, 0x02	; 2
    11f4:	ee de       	rcall	.-548    	; 0xfd2 <USB_Host_WaitForIOS>
    11f6:	98 2f       	mov	r25, r24
    11f8:	88 23       	and	r24, r24
    11fa:	d1 f4       	brne	.+52     	; 0x1230 <USB_Host_SendControlRequest+0x20c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11fc:	80 91 a9 00 	lds	r24, 0x00A9
    1200:	80 64       	ori	r24, 0x40	; 64
    1202:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1206:	80 91 aa 00 	lds	r24, 0x00AA
    120a:	8f 7c       	andi	r24, 0xCF	; 207
    120c:	80 61       	ori	r24, 0x10	; 16
    120e:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1212:	80 91 a9 00 	lds	r24, 0x00A9
    1216:	8f 7b       	andi	r24, 0xBF	; 191
    1218:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	d9 de       	rcall	.-590    	; 0xfd2 <USB_Host_WaitForIOS>
    1220:	98 2f       	mov	r25, r24
    1222:	88 23       	and	r24, r24
    1224:	29 f4       	brne	.+10     	; 0x1230 <USB_Host_SendControlRequest+0x20c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1226:	80 91 a6 00 	lds	r24, 0x00A6
    122a:	8e 77       	andi	r24, 0x7E	; 126
    122c:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1230:	80 91 a9 00 	lds	r24, 0x00A9
    1234:	80 64       	ori	r24, 0x40	; 64
    1236:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    123a:	f0 fc       	sbrc	r15, 0
    123c:	05 c0       	rjmp	.+10     	; 0x1248 <USB_Host_SendControlRequest+0x224>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    123e:	80 91 9e 00 	lds	r24, 0x009E
    1242:	8e 7f       	andi	r24, 0xFE	; 254
    1244:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    124e:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1252:	89 2f       	mov	r24, r25
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	0f 91       	pop	r16
    125c:	ff 90       	pop	r15
    125e:	08 95       	ret

00001260 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1260:	1f 93       	push	r17
    1262:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1264:	10 92 17 01 	sts	0x0117, r1
    1268:	89 e0       	ldi	r24, 0x09	; 9
    126a:	80 93 18 01 	sts	0x0118, r24
    126e:	10 93 19 01 	sts	0x0119, r17
    1272:	10 92 1a 01 	sts	0x011A, r1
    1276:	10 92 1c 01 	sts	0x011C, r1
    127a:	10 92 1b 01 	sts	0x011B, r1
    127e:	10 92 1e 01 	sts	0x011E, r1
    1282:	10 92 1d 01 	sts	0x011D, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1286:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	ca de       	rcall	.-620    	; 0x1024 <USB_Host_SendControlRequest>
    1290:	88 23       	and	r24, r24
    1292:	49 f4       	brne	.+18     	; 0x12a6 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1294:	10 93 15 01 	sts	0x0115, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1298:	11 23       	and	r17, r17
    129a:	11 f4       	brne	.+4      	; 0x12a0 <USB_Host_SetDeviceConfiguration+0x40>
    129c:	9a e0       	ldi	r25, 0x0A	; 10
    129e:	01 c0       	rjmp	.+2      	; 0x12a2 <USB_Host_SetDeviceConfiguration+0x42>
    12a0:	9b e0       	ldi	r25, 0x0B	; 11
    12a2:	90 93 1f 01 	sts	0x011F, r25
	}

	return ErrorCode;
}
    12a6:	1f 91       	pop	r17
    12a8:	08 95       	ret

000012aa <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    12aa:	ff 92       	push	r15
    12ac:	0f 93       	push	r16
    12ae:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    12b0:	07 ea       	ldi	r16, 0xA7	; 167
    12b2:	10 e0       	ldi	r17, 0x00	; 0
    12b4:	f8 01       	movw	r30, r16
    12b6:	f0 80       	ld	r15, Z
    12b8:	f7 e0       	ldi	r31, 0x07	; 7
    12ba:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    12bc:	f8 01       	movw	r30, r16
    12be:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    12c0:	b5 da       	rcall	.-2710   	; 0x82c <USB_Host_ProcessNextHostState>
    12c2:	f8 01       	movw	r30, r16
    12c4:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    12c6:	1f 91       	pop	r17
    12c8:	0f 91       	pop	r16
    12ca:	ff 90       	pop	r15
    12cc:	08 95       	ret

000012ce <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    12ce:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    12d0:	80 91 c8 00 	lds	r24, 0x00C8
    12d4:	85 ff       	sbrs	r24, 5
    12d6:	fc cf       	rjmp	.-8      	; 0x12d0 <Serial_putchar+0x2>
				UDR1 = DataByte;
    12d8:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	08 95       	ret

000012e2 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    12e2:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    12e6:	87 fd       	sbrc	r24, 7
    12e8:	03 c0       	rjmp	.+6      	; 0x12f0 <Serial_getchar+0xe>
    12ea:	2e ef       	ldi	r18, 0xFE	; 254
    12ec:	3f ef       	ldi	r19, 0xFF	; 255
    12ee:	0b c0       	rjmp	.+22     	; 0x1306 <Serial_getchar+0x24>
    12f0:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    12f4:	87 fd       	sbrc	r24, 7
    12f6:	03 c0       	rjmp	.+6      	; 0x12fe <Serial_getchar+0x1c>
    12f8:	2f ef       	ldi	r18, 0xFF	; 255
    12fa:	3f ef       	ldi	r19, 0xFF	; 255
    12fc:	04 c0       	rjmp	.+8      	; 0x1306 <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    12fe:	80 91 ce 00 	lds	r24, 0x00CE
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    1306:	c9 01       	movw	r24, r18
    1308:	08 95       	ret

0000130a <printf_P>:
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	fe 01       	movw	r30, r28
    1314:	35 96       	adiw	r30, 0x05	; 5
    1316:	61 91       	ld	r22, Z+
    1318:	71 91       	ld	r23, Z+
    131a:	a0 91 30 01 	lds	r26, 0x0130
    131e:	b0 91 31 01 	lds	r27, 0x0131
    1322:	13 96       	adiw	r26, 0x03	; 3
    1324:	8c 91       	ld	r24, X
    1326:	13 97       	sbiw	r26, 0x03	; 3
    1328:	88 60       	ori	r24, 0x08	; 8
    132a:	13 96       	adiw	r26, 0x03	; 3
    132c:	8c 93       	st	X, r24
    132e:	80 91 30 01 	lds	r24, 0x0130
    1332:	90 91 31 01 	lds	r25, 0x0131
    1336:	af 01       	movw	r20, r30
    1338:	3f d0       	rcall	.+126    	; 0x13b8 <vfprintf>
    133a:	e0 91 30 01 	lds	r30, 0x0130
    133e:	f0 91 31 01 	lds	r31, 0x0131
    1342:	23 81       	ldd	r18, Z+3	; 0x03
    1344:	27 7f       	andi	r18, 0xF7	; 247
    1346:	23 83       	std	Z+3, r18	; 0x03
    1348:	cf 91       	pop	r28
    134a:	df 91       	pop	r29
    134c:	08 95       	ret

0000134e <puts_P>:
    134e:	0f 93       	push	r16
    1350:	1f 93       	push	r17
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	ec 01       	movw	r28, r24
    1358:	e0 91 30 01 	lds	r30, 0x0130
    135c:	f0 91 31 01 	lds	r31, 0x0131
    1360:	83 81       	ldd	r24, Z+3	; 0x03
    1362:	81 ff       	sbrs	r24, 1
    1364:	21 c0       	rjmp	.+66     	; 0x13a8 <puts_P+0x5a>
    1366:	00 e0       	ldi	r16, 0x00	; 0
    1368:	10 e0       	ldi	r17, 0x00	; 0
    136a:	0e c0       	rjmp	.+28     	; 0x1388 <puts_P+0x3a>
    136c:	e0 91 30 01 	lds	r30, 0x0130
    1370:	f0 91 31 01 	lds	r31, 0x0131
    1374:	20 85       	ldd	r18, Z+8	; 0x08
    1376:	31 85       	ldd	r19, Z+9	; 0x09
    1378:	bf 01       	movw	r22, r30
    137a:	f9 01       	movw	r30, r18
    137c:	09 95       	icall
    137e:	89 2b       	or	r24, r25
    1380:	11 f0       	breq	.+4      	; 0x1386 <puts_P+0x38>
    1382:	0f ef       	ldi	r16, 0xFF	; 255
    1384:	1f ef       	ldi	r17, 0xFF	; 255
    1386:	21 96       	adiw	r28, 0x01	; 1
    1388:	fe 01       	movw	r30, r28
    138a:	84 91       	lpm	r24, Z+
    138c:	88 23       	and	r24, r24
    138e:	71 f7       	brne	.-36     	; 0x136c <puts_P+0x1e>
    1390:	e0 91 30 01 	lds	r30, 0x0130
    1394:	f0 91 31 01 	lds	r31, 0x0131
    1398:	20 85       	ldd	r18, Z+8	; 0x08
    139a:	31 85       	ldd	r19, Z+9	; 0x09
    139c:	8a e0       	ldi	r24, 0x0A	; 10
    139e:	bf 01       	movw	r22, r30
    13a0:	f9 01       	movw	r30, r18
    13a2:	09 95       	icall
    13a4:	89 2b       	or	r24, r25
    13a6:	11 f0       	breq	.+4      	; 0x13ac <puts_P+0x5e>
    13a8:	0f ef       	ldi	r16, 0xFF	; 255
    13aa:	1f ef       	ldi	r17, 0xFF	; 255
    13ac:	c8 01       	movw	r24, r16
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	1f 91       	pop	r17
    13b4:	0f 91       	pop	r16
    13b6:	08 95       	ret

000013b8 <vfprintf>:
    13b8:	2f 92       	push	r2
    13ba:	3f 92       	push	r3
    13bc:	4f 92       	push	r4
    13be:	5f 92       	push	r5
    13c0:	6f 92       	push	r6
    13c2:	7f 92       	push	r7
    13c4:	8f 92       	push	r8
    13c6:	9f 92       	push	r9
    13c8:	af 92       	push	r10
    13ca:	bf 92       	push	r11
    13cc:	cf 92       	push	r12
    13ce:	df 92       	push	r13
    13d0:	ef 92       	push	r14
    13d2:	ff 92       	push	r15
    13d4:	0f 93       	push	r16
    13d6:	1f 93       	push	r17
    13d8:	df 93       	push	r29
    13da:	cf 93       	push	r28
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
    13e0:	2b 97       	sbiw	r28, 0x0b	; 11
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	de bf       	out	0x3e, r29	; 62
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	cd bf       	out	0x3d, r28	; 61
    13ec:	3c 01       	movw	r6, r24
    13ee:	2b 01       	movw	r4, r22
    13f0:	5a 01       	movw	r10, r20
    13f2:	fc 01       	movw	r30, r24
    13f4:	17 82       	std	Z+7, r1	; 0x07
    13f6:	16 82       	std	Z+6, r1	; 0x06
    13f8:	83 81       	ldd	r24, Z+3	; 0x03
    13fa:	81 fd       	sbrc	r24, 1
    13fc:	03 c0       	rjmp	.+6      	; 0x1404 <vfprintf+0x4c>
    13fe:	6f ef       	ldi	r22, 0xFF	; 255
    1400:	7f ef       	ldi	r23, 0xFF	; 255
    1402:	b9 c1       	rjmp	.+882    	; 0x1776 <vfprintf+0x3be>
    1404:	9a e0       	ldi	r25, 0x0A	; 10
    1406:	89 2e       	mov	r8, r25
    1408:	1e 01       	movw	r2, r28
    140a:	08 94       	sec
    140c:	21 1c       	adc	r2, r1
    140e:	31 1c       	adc	r3, r1
    1410:	f3 01       	movw	r30, r6
    1412:	23 81       	ldd	r18, Z+3	; 0x03
    1414:	f2 01       	movw	r30, r4
    1416:	23 fd       	sbrc	r18, 3
    1418:	85 91       	lpm	r24, Z+
    141a:	23 ff       	sbrs	r18, 3
    141c:	81 91       	ld	r24, Z+
    141e:	2f 01       	movw	r4, r30
    1420:	88 23       	and	r24, r24
    1422:	09 f4       	brne	.+2      	; 0x1426 <vfprintf+0x6e>
    1424:	a5 c1       	rjmp	.+842    	; 0x1770 <vfprintf+0x3b8>
    1426:	85 32       	cpi	r24, 0x25	; 37
    1428:	39 f4       	brne	.+14     	; 0x1438 <vfprintf+0x80>
    142a:	23 fd       	sbrc	r18, 3
    142c:	85 91       	lpm	r24, Z+
    142e:	23 ff       	sbrs	r18, 3
    1430:	81 91       	ld	r24, Z+
    1432:	2f 01       	movw	r4, r30
    1434:	85 32       	cpi	r24, 0x25	; 37
    1436:	21 f4       	brne	.+8      	; 0x1440 <vfprintf+0x88>
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	b3 01       	movw	r22, r6
    143c:	cc d1       	rcall	.+920    	; 0x17d6 <fputc>
    143e:	e8 cf       	rjmp	.-48     	; 0x1410 <vfprintf+0x58>
    1440:	98 2f       	mov	r25, r24
    1442:	ff 24       	eor	r15, r15
    1444:	ee 24       	eor	r14, r14
    1446:	99 24       	eor	r9, r9
    1448:	ff e1       	ldi	r31, 0x1F	; 31
    144a:	ff 15       	cp	r31, r15
    144c:	d0 f0       	brcs	.+52     	; 0x1482 <vfprintf+0xca>
    144e:	9b 32       	cpi	r25, 0x2B	; 43
    1450:	69 f0       	breq	.+26     	; 0x146c <vfprintf+0xb4>
    1452:	9c 32       	cpi	r25, 0x2C	; 44
    1454:	28 f4       	brcc	.+10     	; 0x1460 <vfprintf+0xa8>
    1456:	90 32       	cpi	r25, 0x20	; 32
    1458:	59 f0       	breq	.+22     	; 0x1470 <vfprintf+0xb8>
    145a:	93 32       	cpi	r25, 0x23	; 35
    145c:	91 f4       	brne	.+36     	; 0x1482 <vfprintf+0xca>
    145e:	0e c0       	rjmp	.+28     	; 0x147c <vfprintf+0xc4>
    1460:	9d 32       	cpi	r25, 0x2D	; 45
    1462:	49 f0       	breq	.+18     	; 0x1476 <vfprintf+0xbe>
    1464:	90 33       	cpi	r25, 0x30	; 48
    1466:	69 f4       	brne	.+26     	; 0x1482 <vfprintf+0xca>
    1468:	41 e0       	ldi	r20, 0x01	; 1
    146a:	24 c0       	rjmp	.+72     	; 0x14b4 <vfprintf+0xfc>
    146c:	52 e0       	ldi	r21, 0x02	; 2
    146e:	f5 2a       	or	r15, r21
    1470:	84 e0       	ldi	r24, 0x04	; 4
    1472:	f8 2a       	or	r15, r24
    1474:	28 c0       	rjmp	.+80     	; 0x14c6 <vfprintf+0x10e>
    1476:	98 e0       	ldi	r25, 0x08	; 8
    1478:	f9 2a       	or	r15, r25
    147a:	25 c0       	rjmp	.+74     	; 0x14c6 <vfprintf+0x10e>
    147c:	e0 e1       	ldi	r30, 0x10	; 16
    147e:	fe 2a       	or	r15, r30
    1480:	22 c0       	rjmp	.+68     	; 0x14c6 <vfprintf+0x10e>
    1482:	f7 fc       	sbrc	r15, 7
    1484:	29 c0       	rjmp	.+82     	; 0x14d8 <vfprintf+0x120>
    1486:	89 2f       	mov	r24, r25
    1488:	80 53       	subi	r24, 0x30	; 48
    148a:	8a 30       	cpi	r24, 0x0A	; 10
    148c:	70 f4       	brcc	.+28     	; 0x14aa <vfprintf+0xf2>
    148e:	f6 fe       	sbrs	r15, 6
    1490:	05 c0       	rjmp	.+10     	; 0x149c <vfprintf+0xe4>
    1492:	98 9c       	mul	r9, r8
    1494:	90 2c       	mov	r9, r0
    1496:	11 24       	eor	r1, r1
    1498:	98 0e       	add	r9, r24
    149a:	15 c0       	rjmp	.+42     	; 0x14c6 <vfprintf+0x10e>
    149c:	e8 9c       	mul	r14, r8
    149e:	e0 2c       	mov	r14, r0
    14a0:	11 24       	eor	r1, r1
    14a2:	e8 0e       	add	r14, r24
    14a4:	f0 e2       	ldi	r31, 0x20	; 32
    14a6:	ff 2a       	or	r15, r31
    14a8:	0e c0       	rjmp	.+28     	; 0x14c6 <vfprintf+0x10e>
    14aa:	9e 32       	cpi	r25, 0x2E	; 46
    14ac:	29 f4       	brne	.+10     	; 0x14b8 <vfprintf+0x100>
    14ae:	f6 fc       	sbrc	r15, 6
    14b0:	5f c1       	rjmp	.+702    	; 0x1770 <vfprintf+0x3b8>
    14b2:	40 e4       	ldi	r20, 0x40	; 64
    14b4:	f4 2a       	or	r15, r20
    14b6:	07 c0       	rjmp	.+14     	; 0x14c6 <vfprintf+0x10e>
    14b8:	9c 36       	cpi	r25, 0x6C	; 108
    14ba:	19 f4       	brne	.+6      	; 0x14c2 <vfprintf+0x10a>
    14bc:	50 e8       	ldi	r21, 0x80	; 128
    14be:	f5 2a       	or	r15, r21
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <vfprintf+0x10e>
    14c2:	98 36       	cpi	r25, 0x68	; 104
    14c4:	49 f4       	brne	.+18     	; 0x14d8 <vfprintf+0x120>
    14c6:	f2 01       	movw	r30, r4
    14c8:	23 fd       	sbrc	r18, 3
    14ca:	95 91       	lpm	r25, Z+
    14cc:	23 ff       	sbrs	r18, 3
    14ce:	91 91       	ld	r25, Z+
    14d0:	2f 01       	movw	r4, r30
    14d2:	99 23       	and	r25, r25
    14d4:	09 f0       	breq	.+2      	; 0x14d8 <vfprintf+0x120>
    14d6:	b8 cf       	rjmp	.-144    	; 0x1448 <vfprintf+0x90>
    14d8:	89 2f       	mov	r24, r25
    14da:	85 54       	subi	r24, 0x45	; 69
    14dc:	83 30       	cpi	r24, 0x03	; 3
    14de:	18 f0       	brcs	.+6      	; 0x14e6 <vfprintf+0x12e>
    14e0:	80 52       	subi	r24, 0x20	; 32
    14e2:	83 30       	cpi	r24, 0x03	; 3
    14e4:	38 f4       	brcc	.+14     	; 0x14f4 <vfprintf+0x13c>
    14e6:	44 e0       	ldi	r20, 0x04	; 4
    14e8:	50 e0       	ldi	r21, 0x00	; 0
    14ea:	a4 0e       	add	r10, r20
    14ec:	b5 1e       	adc	r11, r21
    14ee:	5f e3       	ldi	r21, 0x3F	; 63
    14f0:	59 83       	std	Y+1, r21	; 0x01
    14f2:	0f c0       	rjmp	.+30     	; 0x1512 <vfprintf+0x15a>
    14f4:	93 36       	cpi	r25, 0x63	; 99
    14f6:	31 f0       	breq	.+12     	; 0x1504 <vfprintf+0x14c>
    14f8:	93 37       	cpi	r25, 0x73	; 115
    14fa:	79 f0       	breq	.+30     	; 0x151a <vfprintf+0x162>
    14fc:	93 35       	cpi	r25, 0x53	; 83
    14fe:	09 f0       	breq	.+2      	; 0x1502 <vfprintf+0x14a>
    1500:	52 c0       	rjmp	.+164    	; 0x15a6 <vfprintf+0x1ee>
    1502:	1f c0       	rjmp	.+62     	; 0x1542 <vfprintf+0x18a>
    1504:	f5 01       	movw	r30, r10
    1506:	80 81       	ld	r24, Z
    1508:	89 83       	std	Y+1, r24	; 0x01
    150a:	42 e0       	ldi	r20, 0x02	; 2
    150c:	50 e0       	ldi	r21, 0x00	; 0
    150e:	a4 0e       	add	r10, r20
    1510:	b5 1e       	adc	r11, r21
    1512:	61 01       	movw	r12, r2
    1514:	01 e0       	ldi	r16, 0x01	; 1
    1516:	10 e0       	ldi	r17, 0x00	; 0
    1518:	11 c0       	rjmp	.+34     	; 0x153c <vfprintf+0x184>
    151a:	f5 01       	movw	r30, r10
    151c:	c0 80       	ld	r12, Z
    151e:	d1 80       	ldd	r13, Z+1	; 0x01
    1520:	f6 fc       	sbrc	r15, 6
    1522:	03 c0       	rjmp	.+6      	; 0x152a <vfprintf+0x172>
    1524:	6f ef       	ldi	r22, 0xFF	; 255
    1526:	7f ef       	ldi	r23, 0xFF	; 255
    1528:	02 c0       	rjmp	.+4      	; 0x152e <vfprintf+0x176>
    152a:	69 2d       	mov	r22, r9
    152c:	70 e0       	ldi	r23, 0x00	; 0
    152e:	42 e0       	ldi	r20, 0x02	; 2
    1530:	50 e0       	ldi	r21, 0x00	; 0
    1532:	a4 0e       	add	r10, r20
    1534:	b5 1e       	adc	r11, r21
    1536:	c6 01       	movw	r24, r12
    1538:	43 d1       	rcall	.+646    	; 0x17c0 <strnlen>
    153a:	8c 01       	movw	r16, r24
    153c:	5f e7       	ldi	r21, 0x7F	; 127
    153e:	f5 22       	and	r15, r21
    1540:	13 c0       	rjmp	.+38     	; 0x1568 <vfprintf+0x1b0>
    1542:	f5 01       	movw	r30, r10
    1544:	c0 80       	ld	r12, Z
    1546:	d1 80       	ldd	r13, Z+1	; 0x01
    1548:	f6 fc       	sbrc	r15, 6
    154a:	03 c0       	rjmp	.+6      	; 0x1552 <vfprintf+0x19a>
    154c:	6f ef       	ldi	r22, 0xFF	; 255
    154e:	7f ef       	ldi	r23, 0xFF	; 255
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <vfprintf+0x19e>
    1552:	69 2d       	mov	r22, r9
    1554:	70 e0       	ldi	r23, 0x00	; 0
    1556:	42 e0       	ldi	r20, 0x02	; 2
    1558:	50 e0       	ldi	r21, 0x00	; 0
    155a:	a4 0e       	add	r10, r20
    155c:	b5 1e       	adc	r11, r21
    155e:	c6 01       	movw	r24, r12
    1560:	24 d1       	rcall	.+584    	; 0x17aa <strnlen_P>
    1562:	8c 01       	movw	r16, r24
    1564:	50 e8       	ldi	r21, 0x80	; 128
    1566:	f5 2a       	or	r15, r21
    1568:	f3 fe       	sbrs	r15, 3
    156a:	06 c0       	rjmp	.+12     	; 0x1578 <vfprintf+0x1c0>
    156c:	18 c0       	rjmp	.+48     	; 0x159e <vfprintf+0x1e6>
    156e:	80 e2       	ldi	r24, 0x20	; 32
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	b3 01       	movw	r22, r6
    1574:	30 d1       	rcall	.+608    	; 0x17d6 <fputc>
    1576:	ea 94       	dec	r14
    1578:	8e 2d       	mov	r24, r14
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	08 17       	cp	r16, r24
    157e:	19 07       	cpc	r17, r25
    1580:	b0 f3       	brcs	.-20     	; 0x156e <vfprintf+0x1b6>
    1582:	0d c0       	rjmp	.+26     	; 0x159e <vfprintf+0x1e6>
    1584:	f6 01       	movw	r30, r12
    1586:	f7 fc       	sbrc	r15, 7
    1588:	85 91       	lpm	r24, Z+
    158a:	f7 fe       	sbrs	r15, 7
    158c:	81 91       	ld	r24, Z+
    158e:	6f 01       	movw	r12, r30
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	b3 01       	movw	r22, r6
    1594:	20 d1       	rcall	.+576    	; 0x17d6 <fputc>
    1596:	e1 10       	cpse	r14, r1
    1598:	ea 94       	dec	r14
    159a:	01 50       	subi	r16, 0x01	; 1
    159c:	10 40       	sbci	r17, 0x00	; 0
    159e:	01 15       	cp	r16, r1
    15a0:	11 05       	cpc	r17, r1
    15a2:	81 f7       	brne	.-32     	; 0x1584 <vfprintf+0x1cc>
    15a4:	e2 c0       	rjmp	.+452    	; 0x176a <vfprintf+0x3b2>
    15a6:	94 36       	cpi	r25, 0x64	; 100
    15a8:	11 f0       	breq	.+4      	; 0x15ae <vfprintf+0x1f6>
    15aa:	99 36       	cpi	r25, 0x69	; 105
    15ac:	61 f5       	brne	.+88     	; 0x1606 <vfprintf+0x24e>
    15ae:	f7 fe       	sbrs	r15, 7
    15b0:	08 c0       	rjmp	.+16     	; 0x15c2 <vfprintf+0x20a>
    15b2:	f5 01       	movw	r30, r10
    15b4:	20 81       	ld	r18, Z
    15b6:	31 81       	ldd	r19, Z+1	; 0x01
    15b8:	42 81       	ldd	r20, Z+2	; 0x02
    15ba:	53 81       	ldd	r21, Z+3	; 0x03
    15bc:	84 e0       	ldi	r24, 0x04	; 4
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	0a c0       	rjmp	.+20     	; 0x15d6 <vfprintf+0x21e>
    15c2:	f5 01       	movw	r30, r10
    15c4:	80 81       	ld	r24, Z
    15c6:	91 81       	ldd	r25, Z+1	; 0x01
    15c8:	9c 01       	movw	r18, r24
    15ca:	44 27       	eor	r20, r20
    15cc:	37 fd       	sbrc	r19, 7
    15ce:	40 95       	com	r20
    15d0:	54 2f       	mov	r21, r20
    15d2:	82 e0       	ldi	r24, 0x02	; 2
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	a8 0e       	add	r10, r24
    15d8:	b9 1e       	adc	r11, r25
    15da:	9f e6       	ldi	r25, 0x6F	; 111
    15dc:	f9 22       	and	r15, r25
    15de:	57 ff       	sbrs	r21, 7
    15e0:	09 c0       	rjmp	.+18     	; 0x15f4 <vfprintf+0x23c>
    15e2:	50 95       	com	r21
    15e4:	40 95       	com	r20
    15e6:	30 95       	com	r19
    15e8:	21 95       	neg	r18
    15ea:	3f 4f       	sbci	r19, 0xFF	; 255
    15ec:	4f 4f       	sbci	r20, 0xFF	; 255
    15ee:	5f 4f       	sbci	r21, 0xFF	; 255
    15f0:	e0 e8       	ldi	r30, 0x80	; 128
    15f2:	fe 2a       	or	r15, r30
    15f4:	ca 01       	movw	r24, r20
    15f6:	b9 01       	movw	r22, r18
    15f8:	a1 01       	movw	r20, r2
    15fa:	2a e0       	ldi	r18, 0x0A	; 10
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	17 d1       	rcall	.+558    	; 0x182e <__ultoa_invert>
    1600:	d8 2e       	mov	r13, r24
    1602:	d2 18       	sub	r13, r2
    1604:	3f c0       	rjmp	.+126    	; 0x1684 <vfprintf+0x2cc>
    1606:	95 37       	cpi	r25, 0x75	; 117
    1608:	29 f4       	brne	.+10     	; 0x1614 <vfprintf+0x25c>
    160a:	1f 2d       	mov	r17, r15
    160c:	1f 7e       	andi	r17, 0xEF	; 239
    160e:	2a e0       	ldi	r18, 0x0A	; 10
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	1d c0       	rjmp	.+58     	; 0x164e <vfprintf+0x296>
    1614:	1f 2d       	mov	r17, r15
    1616:	19 7f       	andi	r17, 0xF9	; 249
    1618:	9f 36       	cpi	r25, 0x6F	; 111
    161a:	61 f0       	breq	.+24     	; 0x1634 <vfprintf+0x27c>
    161c:	90 37       	cpi	r25, 0x70	; 112
    161e:	20 f4       	brcc	.+8      	; 0x1628 <vfprintf+0x270>
    1620:	98 35       	cpi	r25, 0x58	; 88
    1622:	09 f0       	breq	.+2      	; 0x1626 <vfprintf+0x26e>
    1624:	a5 c0       	rjmp	.+330    	; 0x1770 <vfprintf+0x3b8>
    1626:	0f c0       	rjmp	.+30     	; 0x1646 <vfprintf+0x28e>
    1628:	90 37       	cpi	r25, 0x70	; 112
    162a:	39 f0       	breq	.+14     	; 0x163a <vfprintf+0x282>
    162c:	98 37       	cpi	r25, 0x78	; 120
    162e:	09 f0       	breq	.+2      	; 0x1632 <vfprintf+0x27a>
    1630:	9f c0       	rjmp	.+318    	; 0x1770 <vfprintf+0x3b8>
    1632:	04 c0       	rjmp	.+8      	; 0x163c <vfprintf+0x284>
    1634:	28 e0       	ldi	r18, 0x08	; 8
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	0a c0       	rjmp	.+20     	; 0x164e <vfprintf+0x296>
    163a:	10 61       	ori	r17, 0x10	; 16
    163c:	14 fd       	sbrc	r17, 4
    163e:	14 60       	ori	r17, 0x04	; 4
    1640:	20 e1       	ldi	r18, 0x10	; 16
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	04 c0       	rjmp	.+8      	; 0x164e <vfprintf+0x296>
    1646:	14 fd       	sbrc	r17, 4
    1648:	16 60       	ori	r17, 0x06	; 6
    164a:	20 e1       	ldi	r18, 0x10	; 16
    164c:	32 e0       	ldi	r19, 0x02	; 2
    164e:	17 ff       	sbrs	r17, 7
    1650:	08 c0       	rjmp	.+16     	; 0x1662 <vfprintf+0x2aa>
    1652:	f5 01       	movw	r30, r10
    1654:	60 81       	ld	r22, Z
    1656:	71 81       	ldd	r23, Z+1	; 0x01
    1658:	82 81       	ldd	r24, Z+2	; 0x02
    165a:	93 81       	ldd	r25, Z+3	; 0x03
    165c:	44 e0       	ldi	r20, 0x04	; 4
    165e:	50 e0       	ldi	r21, 0x00	; 0
    1660:	08 c0       	rjmp	.+16     	; 0x1672 <vfprintf+0x2ba>
    1662:	f5 01       	movw	r30, r10
    1664:	80 81       	ld	r24, Z
    1666:	91 81       	ldd	r25, Z+1	; 0x01
    1668:	bc 01       	movw	r22, r24
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	42 e0       	ldi	r20, 0x02	; 2
    1670:	50 e0       	ldi	r21, 0x00	; 0
    1672:	a4 0e       	add	r10, r20
    1674:	b5 1e       	adc	r11, r21
    1676:	a1 01       	movw	r20, r2
    1678:	da d0       	rcall	.+436    	; 0x182e <__ultoa_invert>
    167a:	d8 2e       	mov	r13, r24
    167c:	d2 18       	sub	r13, r2
    167e:	8f e7       	ldi	r24, 0x7F	; 127
    1680:	f8 2e       	mov	r15, r24
    1682:	f1 22       	and	r15, r17
    1684:	f6 fe       	sbrs	r15, 6
    1686:	0b c0       	rjmp	.+22     	; 0x169e <vfprintf+0x2e6>
    1688:	5e ef       	ldi	r21, 0xFE	; 254
    168a:	f5 22       	and	r15, r21
    168c:	d9 14       	cp	r13, r9
    168e:	38 f4       	brcc	.+14     	; 0x169e <vfprintf+0x2e6>
    1690:	f4 fe       	sbrs	r15, 4
    1692:	07 c0       	rjmp	.+14     	; 0x16a2 <vfprintf+0x2ea>
    1694:	f2 fc       	sbrc	r15, 2
    1696:	05 c0       	rjmp	.+10     	; 0x16a2 <vfprintf+0x2ea>
    1698:	8f ee       	ldi	r24, 0xEF	; 239
    169a:	f8 22       	and	r15, r24
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <vfprintf+0x2ea>
    169e:	1d 2d       	mov	r17, r13
    16a0:	01 c0       	rjmp	.+2      	; 0x16a4 <vfprintf+0x2ec>
    16a2:	19 2d       	mov	r17, r9
    16a4:	f4 fe       	sbrs	r15, 4
    16a6:	0d c0       	rjmp	.+26     	; 0x16c2 <vfprintf+0x30a>
    16a8:	fe 01       	movw	r30, r28
    16aa:	ed 0d       	add	r30, r13
    16ac:	f1 1d       	adc	r31, r1
    16ae:	80 81       	ld	r24, Z
    16b0:	80 33       	cpi	r24, 0x30	; 48
    16b2:	19 f4       	brne	.+6      	; 0x16ba <vfprintf+0x302>
    16b4:	99 ee       	ldi	r25, 0xE9	; 233
    16b6:	f9 22       	and	r15, r25
    16b8:	08 c0       	rjmp	.+16     	; 0x16ca <vfprintf+0x312>
    16ba:	1f 5f       	subi	r17, 0xFF	; 255
    16bc:	f2 fe       	sbrs	r15, 2
    16be:	05 c0       	rjmp	.+10     	; 0x16ca <vfprintf+0x312>
    16c0:	03 c0       	rjmp	.+6      	; 0x16c8 <vfprintf+0x310>
    16c2:	8f 2d       	mov	r24, r15
    16c4:	86 78       	andi	r24, 0x86	; 134
    16c6:	09 f0       	breq	.+2      	; 0x16ca <vfprintf+0x312>
    16c8:	1f 5f       	subi	r17, 0xFF	; 255
    16ca:	0f 2d       	mov	r16, r15
    16cc:	f3 fc       	sbrc	r15, 3
    16ce:	13 c0       	rjmp	.+38     	; 0x16f6 <vfprintf+0x33e>
    16d0:	f0 fe       	sbrs	r15, 0
    16d2:	0e c0       	rjmp	.+28     	; 0x16f0 <vfprintf+0x338>
    16d4:	1e 15       	cp	r17, r14
    16d6:	10 f0       	brcs	.+4      	; 0x16dc <vfprintf+0x324>
    16d8:	9d 2c       	mov	r9, r13
    16da:	0a c0       	rjmp	.+20     	; 0x16f0 <vfprintf+0x338>
    16dc:	9d 2c       	mov	r9, r13
    16de:	9e 0c       	add	r9, r14
    16e0:	91 1a       	sub	r9, r17
    16e2:	1e 2d       	mov	r17, r14
    16e4:	05 c0       	rjmp	.+10     	; 0x16f0 <vfprintf+0x338>
    16e6:	80 e2       	ldi	r24, 0x20	; 32
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	b3 01       	movw	r22, r6
    16ec:	74 d0       	rcall	.+232    	; 0x17d6 <fputc>
    16ee:	1f 5f       	subi	r17, 0xFF	; 255
    16f0:	1e 15       	cp	r17, r14
    16f2:	c8 f3       	brcs	.-14     	; 0x16e6 <vfprintf+0x32e>
    16f4:	04 c0       	rjmp	.+8      	; 0x16fe <vfprintf+0x346>
    16f6:	1e 15       	cp	r17, r14
    16f8:	10 f4       	brcc	.+4      	; 0x16fe <vfprintf+0x346>
    16fa:	e1 1a       	sub	r14, r17
    16fc:	01 c0       	rjmp	.+2      	; 0x1700 <vfprintf+0x348>
    16fe:	ee 24       	eor	r14, r14
    1700:	04 ff       	sbrs	r16, 4
    1702:	0e c0       	rjmp	.+28     	; 0x1720 <vfprintf+0x368>
    1704:	80 e3       	ldi	r24, 0x30	; 48
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	b3 01       	movw	r22, r6
    170a:	65 d0       	rcall	.+202    	; 0x17d6 <fputc>
    170c:	02 ff       	sbrs	r16, 2
    170e:	1b c0       	rjmp	.+54     	; 0x1746 <vfprintf+0x38e>
    1710:	01 fd       	sbrc	r16, 1
    1712:	03 c0       	rjmp	.+6      	; 0x171a <vfprintf+0x362>
    1714:	88 e7       	ldi	r24, 0x78	; 120
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	0e c0       	rjmp	.+28     	; 0x1736 <vfprintf+0x37e>
    171a:	88 e5       	ldi	r24, 0x58	; 88
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	0b c0       	rjmp	.+22     	; 0x1736 <vfprintf+0x37e>
    1720:	80 2f       	mov	r24, r16
    1722:	86 78       	andi	r24, 0x86	; 134
    1724:	81 f0       	breq	.+32     	; 0x1746 <vfprintf+0x38e>
    1726:	01 ff       	sbrs	r16, 1
    1728:	02 c0       	rjmp	.+4      	; 0x172e <vfprintf+0x376>
    172a:	8b e2       	ldi	r24, 0x2B	; 43
    172c:	01 c0       	rjmp	.+2      	; 0x1730 <vfprintf+0x378>
    172e:	80 e2       	ldi	r24, 0x20	; 32
    1730:	f7 fc       	sbrc	r15, 7
    1732:	8d e2       	ldi	r24, 0x2D	; 45
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	b3 01       	movw	r22, r6
    1738:	4e d0       	rcall	.+156    	; 0x17d6 <fputc>
    173a:	05 c0       	rjmp	.+10     	; 0x1746 <vfprintf+0x38e>
    173c:	80 e3       	ldi	r24, 0x30	; 48
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	b3 01       	movw	r22, r6
    1742:	49 d0       	rcall	.+146    	; 0x17d6 <fputc>
    1744:	9a 94       	dec	r9
    1746:	d9 14       	cp	r13, r9
    1748:	c8 f3       	brcs	.-14     	; 0x173c <vfprintf+0x384>
    174a:	da 94       	dec	r13
    174c:	f1 01       	movw	r30, r2
    174e:	ed 0d       	add	r30, r13
    1750:	f1 1d       	adc	r31, r1
    1752:	80 81       	ld	r24, Z
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	b3 01       	movw	r22, r6
    1758:	3e d0       	rcall	.+124    	; 0x17d6 <fputc>
    175a:	dd 20       	and	r13, r13
    175c:	b1 f7       	brne	.-20     	; 0x174a <vfprintf+0x392>
    175e:	05 c0       	rjmp	.+10     	; 0x176a <vfprintf+0x3b2>
    1760:	80 e2       	ldi	r24, 0x20	; 32
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	b3 01       	movw	r22, r6
    1766:	37 d0       	rcall	.+110    	; 0x17d6 <fputc>
    1768:	ea 94       	dec	r14
    176a:	ee 20       	and	r14, r14
    176c:	c9 f7       	brne	.-14     	; 0x1760 <vfprintf+0x3a8>
    176e:	50 ce       	rjmp	.-864    	; 0x1410 <vfprintf+0x58>
    1770:	f3 01       	movw	r30, r6
    1772:	66 81       	ldd	r22, Z+6	; 0x06
    1774:	77 81       	ldd	r23, Z+7	; 0x07
    1776:	cb 01       	movw	r24, r22
    1778:	2b 96       	adiw	r28, 0x0b	; 11
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	f8 94       	cli
    177e:	de bf       	out	0x3e, r29	; 62
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	cd bf       	out	0x3d, r28	; 61
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	1f 91       	pop	r17
    178a:	0f 91       	pop	r16
    178c:	ff 90       	pop	r15
    178e:	ef 90       	pop	r14
    1790:	df 90       	pop	r13
    1792:	cf 90       	pop	r12
    1794:	bf 90       	pop	r11
    1796:	af 90       	pop	r10
    1798:	9f 90       	pop	r9
    179a:	8f 90       	pop	r8
    179c:	7f 90       	pop	r7
    179e:	6f 90       	pop	r6
    17a0:	5f 90       	pop	r5
    17a2:	4f 90       	pop	r4
    17a4:	3f 90       	pop	r3
    17a6:	2f 90       	pop	r2
    17a8:	08 95       	ret

000017aa <strnlen_P>:
    17aa:	fc 01       	movw	r30, r24
    17ac:	05 90       	lpm	r0, Z+
    17ae:	61 50       	subi	r22, 0x01	; 1
    17b0:	70 40       	sbci	r23, 0x00	; 0
    17b2:	01 10       	cpse	r0, r1
    17b4:	d8 f7       	brcc	.-10     	; 0x17ac <strnlen_P+0x2>
    17b6:	80 95       	com	r24
    17b8:	90 95       	com	r25
    17ba:	8e 0f       	add	r24, r30
    17bc:	9f 1f       	adc	r25, r31
    17be:	08 95       	ret

000017c0 <strnlen>:
    17c0:	fc 01       	movw	r30, r24
    17c2:	61 50       	subi	r22, 0x01	; 1
    17c4:	70 40       	sbci	r23, 0x00	; 0
    17c6:	01 90       	ld	r0, Z+
    17c8:	01 10       	cpse	r0, r1
    17ca:	d8 f7       	brcc	.-10     	; 0x17c2 <strnlen+0x2>
    17cc:	80 95       	com	r24
    17ce:	90 95       	com	r25
    17d0:	8e 0f       	add	r24, r30
    17d2:	9f 1f       	adc	r25, r31
    17d4:	08 95       	ret

000017d6 <fputc>:
    17d6:	0f 93       	push	r16
    17d8:	1f 93       	push	r17
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	8c 01       	movw	r16, r24
    17e0:	eb 01       	movw	r28, r22
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	81 ff       	sbrs	r24, 1
    17e6:	1b c0       	rjmp	.+54     	; 0x181e <fputc+0x48>
    17e8:	82 ff       	sbrs	r24, 2
    17ea:	0d c0       	rjmp	.+26     	; 0x1806 <fputc+0x30>
    17ec:	2e 81       	ldd	r18, Y+6	; 0x06
    17ee:	3f 81       	ldd	r19, Y+7	; 0x07
    17f0:	8c 81       	ldd	r24, Y+4	; 0x04
    17f2:	9d 81       	ldd	r25, Y+5	; 0x05
    17f4:	28 17       	cp	r18, r24
    17f6:	39 07       	cpc	r19, r25
    17f8:	64 f4       	brge	.+24     	; 0x1812 <fputc+0x3c>
    17fa:	e8 81       	ld	r30, Y
    17fc:	f9 81       	ldd	r31, Y+1	; 0x01
    17fe:	01 93       	st	Z+, r16
    1800:	f9 83       	std	Y+1, r31	; 0x01
    1802:	e8 83       	st	Y, r30
    1804:	06 c0       	rjmp	.+12     	; 0x1812 <fputc+0x3c>
    1806:	e8 85       	ldd	r30, Y+8	; 0x08
    1808:	f9 85       	ldd	r31, Y+9	; 0x09
    180a:	80 2f       	mov	r24, r16
    180c:	09 95       	icall
    180e:	89 2b       	or	r24, r25
    1810:	31 f4       	brne	.+12     	; 0x181e <fputc+0x48>
    1812:	8e 81       	ldd	r24, Y+6	; 0x06
    1814:	9f 81       	ldd	r25, Y+7	; 0x07
    1816:	01 96       	adiw	r24, 0x01	; 1
    1818:	9f 83       	std	Y+7, r25	; 0x07
    181a:	8e 83       	std	Y+6, r24	; 0x06
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <fputc+0x4c>
    181e:	0f ef       	ldi	r16, 0xFF	; 255
    1820:	1f ef       	ldi	r17, 0xFF	; 255
    1822:	c8 01       	movw	r24, r16
    1824:	df 91       	pop	r29
    1826:	cf 91       	pop	r28
    1828:	1f 91       	pop	r17
    182a:	0f 91       	pop	r16
    182c:	08 95       	ret

0000182e <__ultoa_invert>:
    182e:	fa 01       	movw	r30, r20
    1830:	aa 27       	eor	r26, r26
    1832:	28 30       	cpi	r18, 0x08	; 8
    1834:	51 f1       	breq	.+84     	; 0x188a <__ultoa_invert+0x5c>
    1836:	20 31       	cpi	r18, 0x10	; 16
    1838:	81 f1       	breq	.+96     	; 0x189a <__ultoa_invert+0x6c>
    183a:	e8 94       	clt
    183c:	6f 93       	push	r22
    183e:	6e 7f       	andi	r22, 0xFE	; 254
    1840:	6e 5f       	subi	r22, 0xFE	; 254
    1842:	7f 4f       	sbci	r23, 0xFF	; 255
    1844:	8f 4f       	sbci	r24, 0xFF	; 255
    1846:	9f 4f       	sbci	r25, 0xFF	; 255
    1848:	af 4f       	sbci	r26, 0xFF	; 255
    184a:	b1 e0       	ldi	r27, 0x01	; 1
    184c:	3e d0       	rcall	.+124    	; 0x18ca <__ultoa_invert+0x9c>
    184e:	b4 e0       	ldi	r27, 0x04	; 4
    1850:	3c d0       	rcall	.+120    	; 0x18ca <__ultoa_invert+0x9c>
    1852:	67 0f       	add	r22, r23
    1854:	78 1f       	adc	r23, r24
    1856:	89 1f       	adc	r24, r25
    1858:	9a 1f       	adc	r25, r26
    185a:	a1 1d       	adc	r26, r1
    185c:	68 0f       	add	r22, r24
    185e:	79 1f       	adc	r23, r25
    1860:	8a 1f       	adc	r24, r26
    1862:	91 1d       	adc	r25, r1
    1864:	a1 1d       	adc	r26, r1
    1866:	6a 0f       	add	r22, r26
    1868:	71 1d       	adc	r23, r1
    186a:	81 1d       	adc	r24, r1
    186c:	91 1d       	adc	r25, r1
    186e:	a1 1d       	adc	r26, r1
    1870:	20 d0       	rcall	.+64     	; 0x18b2 <__ultoa_invert+0x84>
    1872:	09 f4       	brne	.+2      	; 0x1876 <__ultoa_invert+0x48>
    1874:	68 94       	set
    1876:	3f 91       	pop	r19
    1878:	2a e0       	ldi	r18, 0x0A	; 10
    187a:	26 9f       	mul	r18, r22
    187c:	11 24       	eor	r1, r1
    187e:	30 19       	sub	r19, r0
    1880:	30 5d       	subi	r19, 0xD0	; 208
    1882:	31 93       	st	Z+, r19
    1884:	de f6       	brtc	.-74     	; 0x183c <__ultoa_invert+0xe>
    1886:	cf 01       	movw	r24, r30
    1888:	08 95       	ret
    188a:	46 2f       	mov	r20, r22
    188c:	47 70       	andi	r20, 0x07	; 7
    188e:	40 5d       	subi	r20, 0xD0	; 208
    1890:	41 93       	st	Z+, r20
    1892:	b3 e0       	ldi	r27, 0x03	; 3
    1894:	0f d0       	rcall	.+30     	; 0x18b4 <__ultoa_invert+0x86>
    1896:	c9 f7       	brne	.-14     	; 0x188a <__ultoa_invert+0x5c>
    1898:	f6 cf       	rjmp	.-20     	; 0x1886 <__ultoa_invert+0x58>
    189a:	46 2f       	mov	r20, r22
    189c:	4f 70       	andi	r20, 0x0F	; 15
    189e:	40 5d       	subi	r20, 0xD0	; 208
    18a0:	4a 33       	cpi	r20, 0x3A	; 58
    18a2:	18 f0       	brcs	.+6      	; 0x18aa <__ultoa_invert+0x7c>
    18a4:	49 5d       	subi	r20, 0xD9	; 217
    18a6:	31 fd       	sbrc	r19, 1
    18a8:	40 52       	subi	r20, 0x20	; 32
    18aa:	41 93       	st	Z+, r20
    18ac:	02 d0       	rcall	.+4      	; 0x18b2 <__ultoa_invert+0x84>
    18ae:	a9 f7       	brne	.-22     	; 0x189a <__ultoa_invert+0x6c>
    18b0:	ea cf       	rjmp	.-44     	; 0x1886 <__ultoa_invert+0x58>
    18b2:	b4 e0       	ldi	r27, 0x04	; 4
    18b4:	a6 95       	lsr	r26
    18b6:	97 95       	ror	r25
    18b8:	87 95       	ror	r24
    18ba:	77 95       	ror	r23
    18bc:	67 95       	ror	r22
    18be:	ba 95       	dec	r27
    18c0:	c9 f7       	brne	.-14     	; 0x18b4 <__ultoa_invert+0x86>
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	61 05       	cpc	r22, r1
    18c6:	71 05       	cpc	r23, r1
    18c8:	08 95       	ret
    18ca:	9b 01       	movw	r18, r22
    18cc:	ac 01       	movw	r20, r24
    18ce:	0a 2e       	mov	r0, r26
    18d0:	06 94       	lsr	r0
    18d2:	57 95       	ror	r21
    18d4:	47 95       	ror	r20
    18d6:	37 95       	ror	r19
    18d8:	27 95       	ror	r18
    18da:	ba 95       	dec	r27
    18dc:	c9 f7       	brne	.-14     	; 0x18d0 <__ultoa_invert+0xa2>
    18de:	62 0f       	add	r22, r18
    18e0:	73 1f       	adc	r23, r19
    18e2:	84 1f       	adc	r24, r20
    18e4:	95 1f       	adc	r25, r21
    18e6:	a0 1d       	adc	r26, r0
    18e8:	08 95       	ret

000018ea <_exit>:
    18ea:	f8 94       	cli

000018ec <__stop_program>:
    18ec:	ff cf       	rjmp	.-2      	; 0x18ec <__stop_program>
