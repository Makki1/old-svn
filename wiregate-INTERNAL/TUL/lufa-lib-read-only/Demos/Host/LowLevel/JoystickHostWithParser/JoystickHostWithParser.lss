
JoystickHostWithParser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00002422  000024b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002422  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fd  00800112  00800112  000024c8  2**0
                  ALLOC
  3 .stab         000020a0  00000000  00000000  000024c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000da2  00000000  00000000  00004568  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000358  00000000  00000000  0000530a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000865  00000000  00000000  00005662  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000564e  00000000  00000000  00005ec7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000183c  00000000  00000000  0000b515  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000419e  00000000  00000000  0000cd51  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004f0  00000000  00000000  00010ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002450  00000000  00000000  000113e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000020d8  00000000  00000000  00013830  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000418  00000000  00000000  00015908  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		Pipe_DisablePipe();
	}
}

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
       0:	68 c1       	rjmp	.+720    	; 0x2d2 <__ctors_end>
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       2:	00 00       	nop
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       4:	84 c1       	rjmp	.+776    	; 0x30e <__bad_interrupt>
	return USB_Host_SendControlRequest(NULL);
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
       6:	00 00       	nop
	return true;
}

void USB_SetHIDReportItemInfo(uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
       8:	82 c1       	rjmp	.+772    	; 0x30e <__bad_interrupt>

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       a:	00 00       	nop
       c:	80 c1       	rjmp	.+768    	; 0x30e <__bad_interrupt>
       e:	00 00       	nop
      10:	7e c1       	rjmp	.+764    	; 0x30e <__bad_interrupt>
      12:	00 00       	nop
      14:	7c c1       	rjmp	.+760    	; 0x30e <__bad_interrupt>
      16:	00 00       	nop
      18:	7a c1       	rjmp	.+756    	; 0x30e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	78 c1       	rjmp	.+752    	; 0x30e <__bad_interrupt>
      1e:	00 00       	nop
      20:	76 c1       	rjmp	.+748    	; 0x30e <__bad_interrupt>
      22:	00 00       	nop
      24:	74 c1       	rjmp	.+744    	; 0x30e <__bad_interrupt>
      26:	00 00       	nop
      28:	8b c7       	rjmp	.+3862   	; 0xf40 <__vector_10>
      2a:	00 00       	nop
      2c:	70 c1       	rjmp	.+736    	; 0x30e <__bad_interrupt>
      2e:	00 00       	nop
      30:	6e c1       	rjmp	.+732    	; 0x30e <__bad_interrupt>
      32:	00 00       	nop
      34:	6c c1       	rjmp	.+728    	; 0x30e <__bad_interrupt>
      36:	00 00       	nop
      38:	6a c1       	rjmp	.+724    	; 0x30e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	68 c1       	rjmp	.+720    	; 0x30e <__bad_interrupt>
      3e:	00 00       	nop
      40:	66 c1       	rjmp	.+716    	; 0x30e <__bad_interrupt>
      42:	00 00       	nop
      44:	64 c1       	rjmp	.+712    	; 0x30e <__bad_interrupt>
      46:	00 00       	nop
      48:	62 c1       	rjmp	.+708    	; 0x30e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	60 c1       	rjmp	.+704    	; 0x30e <__bad_interrupt>
      4e:	00 00       	nop
      50:	5e c1       	rjmp	.+700    	; 0x30e <__bad_interrupt>
      52:	00 00       	nop
      54:	5c c1       	rjmp	.+696    	; 0x30e <__bad_interrupt>
      56:	00 00       	nop
      58:	5a c1       	rjmp	.+692    	; 0x30e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	58 c1       	rjmp	.+688    	; 0x30e <__bad_interrupt>
      5e:	00 00       	nop
      60:	56 c1       	rjmp	.+684    	; 0x30e <__bad_interrupt>
      62:	00 00       	nop
      64:	54 c1       	rjmp	.+680    	; 0x30e <__bad_interrupt>
      66:	00 00       	nop
      68:	52 c1       	rjmp	.+676    	; 0x30e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	50 c1       	rjmp	.+672    	; 0x30e <__bad_interrupt>
      6e:	00 00       	nop
      70:	4e c1       	rjmp	.+668    	; 0x30e <__bad_interrupt>
      72:	00 00       	nop
      74:	4c c1       	rjmp	.+664    	; 0x30e <__bad_interrupt>
      76:	00 00       	nop
      78:	4a c1       	rjmp	.+660    	; 0x30e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	48 c1       	rjmp	.+656    	; 0x30e <__bad_interrupt>
      7e:	00 00       	nop
      80:	46 c1       	rjmp	.+652    	; 0x30e <__bad_interrupt>
      82:	00 00       	nop
      84:	44 c1       	rjmp	.+648    	; 0x30e <__bad_interrupt>
      86:	00 00       	nop
      88:	42 c1       	rjmp	.+644    	; 0x30e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	40 c1       	rjmp	.+640    	; 0x30e <__bad_interrupt>
      8e:	00 00       	nop
      90:	3e c1       	rjmp	.+636    	; 0x30e <__bad_interrupt>
      92:	00 00       	nop
      94:	3c c1       	rjmp	.+632    	; 0x30e <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4598>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4590>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4579>:
     11d:	4a 6f 79 73 74 69 63 6b 20 45 6e 75 6d 65 72 61     Joystick Enumera
     12d:	74 65 64 2e 0d 0a 00                                ted....

00000134 <__c.4577>:
     134:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     144:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000014e <__c.4575>:
     14e:	4e 6f 74 20 61 20 76 61 6c 69 64 20 4a 6f 79 73     Not a valid Joys
     15e:	74 69 63 6b 2e 1b 5b 33 37 6d 00                    tick..[37m.

00000169 <__c.4573>:
     169:	1b 5b 33 31 6d 52 65 70 6f 72 74 20 50 61 72 73     .[31mReport Pars
     179:	65 20 45 72 72 6f 72 2e 0d 0a 00                    e Error....

00000184 <__c.4571>:
     184:	50 72 6f 63 65 73 73 69 6e 67 20 48 49 44 20 52     Processing HID R
     194:	65 70 6f 72 74 20 28 53 69 7a 65 20 25 64 20 42     eport (Size %d B
     1a4:	79 74 65 73 29 2e 0d 0a 00                          ytes)....

000001ad <__c.4569>:
     1ad:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1bd:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     1cd:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     1dd:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     1ed:	37 6d 00                                            7m.

000001f0 <__c.4567>:
     1f0:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     200:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000020a <__c.4565>:
     20a:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     21a:	69 63 65 2e 0d 0a 00                                ice....

00000221 <__c.4563>:
     221:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     231:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     241:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

0000024b <__c.4560>:
     24b:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     25b:	61 74 61 2e 0d 0a 00                                ata....

00000262 <__c.4555>:
     262:	1b 5b 33 32 6d 44 65 76 69 63 65 20 55 6e 61 74     .[32mDevice Unat
     272:	74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00        tached....[37m.

00000281 <__c.4550>:
     281:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     291:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

0000029e <__c.4537>:
     29e:	1b 5b 33 36 6d 4a 6f 79 73 74 69 63 6b 20 48 49     .[36mJoystick HI
     2ae:	44 20 50 61 72 73 65 72 20 48 6f 73 74 20 44 65     D Parser Host De
     2be:	6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b 33     mo running....[3
     2ce:	37 6d 00 00                                         7m..

000002d2 <__ctors_end>:
     2d2:	11 24       	eor	r1, r1
     2d4:	1f be       	out	0x3f, r1	; 63
     2d6:	cf ef       	ldi	r28, 0xFF	; 255
     2d8:	d0 e2       	ldi	r29, 0x20	; 32
     2da:	de bf       	out	0x3e, r29	; 62
     2dc:	cd bf       	out	0x3d, r28	; 61

000002de <__do_copy_data>:
     2de:	11 e0       	ldi	r17, 0x01	; 1
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b1 e0       	ldi	r27, 0x01	; 1
     2e4:	e2 e2       	ldi	r30, 0x22	; 34
     2e6:	f4 e2       	ldi	r31, 0x24	; 36
     2e8:	00 e0       	ldi	r16, 0x00	; 0
     2ea:	0b bf       	out	0x3b, r16	; 59
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x14>
     2ee:	07 90       	elpm	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	a2 31       	cpi	r26, 0x12	; 18
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0x10>

000002f8 <__do_clear_bss>:
     2f8:	15 e0       	ldi	r17, 0x05	; 5
     2fa:	a2 e1       	ldi	r26, 0x12	; 18
     2fc:	b1 e0       	ldi	r27, 0x01	; 1
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	af 30       	cpi	r26, 0x0F	; 15
     304:	b1 07       	cpc	r27, r17
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	09 d2       	rcall	.+1042   	; 0x71c <main>
     30a:	0c 94 0f 12 	jmp	0x241e	; 0x241e <_exit>

0000030e <__bad_interrupt>:
     30e:	78 ce       	rjmp	.-784    	; 0x0 <__vectors>

00000310 <ProcessJoystickReport>:
 *  as required and displays movement and button presses on the board LEDs.
 *
 *  \param[in] JoystickReport  Pointer to a HID report from an attached joystick device
 */
void ProcessJoystickReport(uint8_t* JoystickReport)
{
     310:	bf 92       	push	r11
     312:	cf 92       	push	r12
     314:	df 92       	push	r13
     316:	ef 92       	push	r14
     318:	ff 92       	push	r15
     31a:	0f 93       	push	r16
     31c:	1f 93       	push	r17
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	7c 01       	movw	r14, r24
     324:	10 e0       	ldi	r17, 0x00	; 0
     326:	00 e0       	ldi	r16, 0x00	; 0

	/* Check each HID report item in turn, looking for joystick X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
	{
		/* Create a temporary item pointer to the next report item */
		HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     328:	9a e2       	ldi	r25, 0x2A	; 42
     32a:	b9 2e       	mov	r11, r25

			/* For multi-report devices - if the requested data was not in the issued report, continue */
			if (!(FoundData))
			  continue;

			int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     32c:	80 e1       	ldi	r24, 0x10	; 16
     32e:	c8 2e       	mov	r12, r24
     330:	d1 2c       	mov	r13, r1
     332:	55 c0       	rjmp	.+170    	; 0x3de <ProcessJoystickReport+0xce>

	/* Check each HID report item in turn, looking for joystick X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
	{
		/* Create a temporary item pointer to the next report item */
		HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     334:	0b 9d       	mul	r16, r11
     336:	e0 01       	movw	r28, r0
     338:	11 24       	eor	r1, r1
     33a:	ca 5e       	subi	r28, 0xEA	; 234
     33c:	de 4f       	sbci	r29, 0xFE	; 254

		bool FoundData;

		if ((ReportItem->Attributes.Usage.Page        == USAGE_PAGE_BUTTON) &&
     33e:	89 85       	ldd	r24, Y+9	; 0x09
     340:	9a 85       	ldd	r25, Y+10	; 0x0a
     342:	89 30       	cpi	r24, 0x09	; 9
     344:	91 05       	cpc	r25, r1
     346:	a9 f4       	brne	.+42     	; 0x372 <ProcessJoystickReport+0x62>
     348:	8a 81       	ldd	r24, Y+2	; 0x02
     34a:	88 23       	and	r24, r24
     34c:	09 f0       	breq	.+2      	; 0x350 <ProcessJoystickReport+0x40>
     34e:	46 c0       	rjmp	.+140    	; 0x3dc <ProcessJoystickReport+0xcc>
			(ReportItem->ItemType                     == HID_REPORT_ITEM_In))
		{
			/* Get the joystick button value */
			FoundData = USB_GetHIDReportItemInfo(JoystickReport, ReportItem);
     350:	c7 01       	movw	r24, r14
     352:	be 01       	movw	r22, r28
     354:	0e 94 a7 0a 	call	0x154e	; 0x154e <USB_GetHIDReportItemInfo>

			/* For multi-report devices - if the requested data was not in the issued report, continue */
			if (!(FoundData))
     358:	88 23       	and	r24, r24
     35a:	09 f4       	brne	.+2      	; 0x35e <ProcessJoystickReport+0x4e>
     35c:	3f c0       	rjmp	.+126    	; 0x3dc <ProcessJoystickReport+0xcc>
			  continue;

			/* If button is pressed, all LEDs are turned on */
			if (ReportItem->Value)
     35e:	8a a1       	ldd	r24, Y+34	; 0x22
     360:	9b a1       	ldd	r25, Y+35	; 0x23
     362:	ac a1       	ldd	r26, Y+36	; 0x24
     364:	bd a1       	ldd	r27, Y+37	; 0x25
     366:	00 97       	sbiw	r24, 0x00	; 0
     368:	a1 05       	cpc	r26, r1
     36a:	b1 05       	cpc	r27, r1
     36c:	b9 f1       	breq	.+110    	; 0x3dc <ProcessJoystickReport+0xcc>
     36e:	10 ef       	ldi	r17, 0xF0	; 240
     370:	35 c0       	rjmp	.+106    	; 0x3dc <ProcessJoystickReport+0xcc>
			  LEDMask = LEDS_ALL_LEDS;
		}
		else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     372:	01 97       	sbiw	r24, 0x01	; 1
     374:	99 f5       	brne	.+102    	; 0x3dc <ProcessJoystickReport+0xcc>
     376:	8b 85       	ldd	r24, Y+11	; 0x0b
     378:	9c 85       	ldd	r25, Y+12	; 0x0c
     37a:	c0 97       	sbiw	r24, 0x30	; 48
     37c:	02 97       	sbiw	r24, 0x02	; 2
     37e:	70 f5       	brcc	.+92     	; 0x3dc <ProcessJoystickReport+0xcc>
     380:	8a 81       	ldd	r24, Y+2	; 0x02
     382:	88 23       	and	r24, r24
     384:	59 f5       	brne	.+86     	; 0x3dc <ProcessJoystickReport+0xcc>
				 ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
				  (ReportItem->Attributes.Usage.Usage == USAGE_Y))                 &&
				 (ReportItem->ItemType                == HID_REPORT_ITEM_In))
		{
			/* Get the joystick relative position value */
			FoundData = USB_GetHIDReportItemInfo(JoystickReport, ReportItem);
     386:	c7 01       	movw	r24, r14
     388:	be 01       	movw	r22, r28
     38a:	0e 94 a7 0a 	call	0x154e	; 0x154e <USB_GetHIDReportItemInfo>

			/* For multi-report devices - if the requested data was not in the issued report, continue */
			if (!(FoundData))
     38e:	88 23       	and	r24, r24
     390:	29 f1       	breq	.+74     	; 0x3dc <ProcessJoystickReport+0xcc>
			  continue;

			int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     392:	88 85       	ldd	r24, Y+8	; 0x08
     394:	96 01       	movw	r18, r12
     396:	28 1b       	sub	r18, r24
     398:	31 09       	sbc	r19, r1
     39a:	c9 01       	movw	r24, r18
     39c:	2a a1       	ldd	r18, Y+34	; 0x22
     39e:	3b a1       	ldd	r19, Y+35	; 0x23
     3a0:	4c a1       	ldd	r20, Y+36	; 0x24
     3a2:	5d a1       	ldd	r21, Y+37	; 0x25
     3a4:	04 c0       	rjmp	.+8      	; 0x3ae <ProcessJoystickReport+0x9e>
     3a6:	22 0f       	add	r18, r18
     3a8:	33 1f       	adc	r19, r19
     3aa:	44 1f       	adc	r20, r20
     3ac:	55 1f       	adc	r21, r21
     3ae:	8a 95       	dec	r24
     3b0:	d2 f7       	brpl	.-12     	; 0x3a6 <ProcessJoystickReport+0x96>

			/* Check to see if a (non-zero) delta movement has been indicated */
			if (DeltaMovement)
     3b2:	21 15       	cp	r18, r1
     3b4:	31 05       	cpc	r19, r1
     3b6:	91 f0       	breq	.+36     	; 0x3dc <ProcessJoystickReport+0xcc>
			{
				/* Determine if the report is for the X or Y delta movement, light LEDs as appropriate */
				if (ReportItem->Attributes.Usage.Usage == USAGE_X)
     3b8:	8b 85       	ldd	r24, Y+11	; 0x0b
     3ba:	9c 85       	ldd	r25, Y+12	; 0x0c
     3bc:	c0 97       	sbiw	r24, 0x30	; 48
     3be:	39 f4       	brne	.+14     	; 0x3ce <ProcessJoystickReport+0xbe>
				  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED1 : LEDS_LED2);
     3c0:	12 16       	cp	r1, r18
     3c2:	13 06       	cpc	r1, r19
     3c4:	14 f0       	brlt	.+4      	; 0x3ca <ProcessJoystickReport+0xba>
     3c6:	80 e2       	ldi	r24, 0x20	; 32
     3c8:	08 c0       	rjmp	.+16     	; 0x3da <ProcessJoystickReport+0xca>
     3ca:	80 e1       	ldi	r24, 0x10	; 16
     3cc:	06 c0       	rjmp	.+12     	; 0x3da <ProcessJoystickReport+0xca>
				else
				  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED3 : LEDS_LED4);
     3ce:	12 16       	cp	r1, r18
     3d0:	13 06       	cpc	r1, r19
     3d2:	14 f0       	brlt	.+4      	; 0x3d8 <ProcessJoystickReport+0xc8>
     3d4:	80 e4       	ldi	r24, 0x40	; 64
     3d6:	01 c0       	rjmp	.+2      	; 0x3da <ProcessJoystickReport+0xca>
     3d8:	80 e8       	ldi	r24, 0x80	; 128
     3da:	18 2b       	or	r17, r24
void ProcessJoystickReport(uint8_t* JoystickReport)
{
	uint8_t LEDMask = LEDS_NO_LEDS;

	/* Check each HID report item in turn, looking for joystick X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     3dc:	0f 5f       	subi	r16, 0xFF	; 255
     3de:	80 91 15 01 	lds	r24, 0x0115
     3e2:	08 17       	cp	r16, r24
     3e4:	08 f4       	brcc	.+2      	; 0x3e8 <ProcessJoystickReport+0xd8>
     3e6:	a6 cf       	rjmp	.-180    	; 0x334 <ProcessJoystickReport+0x24>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     3e8:	8b b1       	in	r24, 0x0b	; 11
     3ea:	8f 70       	andi	r24, 0x0F	; 15
     3ec:	18 2b       	or	r17, r24
     3ee:	1b b9       	out	0x0b, r17	; 11
		}
	}

	/* Display the button information on the board LEDs */
	LEDs_SetAllLEDs(LEDMask);
}
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	1f 91       	pop	r17
     3f6:	0f 91       	pop	r16
     3f8:	ff 90       	pop	r15
     3fa:	ef 90       	pop	r14
     3fc:	df 90       	pop	r13
     3fe:	cf 90       	pop	r12
     400:	bf 90       	pop	r11
     402:	08 95       	ret

00000404 <JoystickHost_Task>:

/** Task to read and process the HID report descriptor and HID reports from the device
 *  and display the results onto the board LEDs.
 */
void JoystickHost_Task(void)
{
     404:	cf 92       	push	r12
     406:	df 92       	push	r13
     408:	ef 92       	push	r14
     40a:	ff 92       	push	r15
     40c:	0f 93       	push	r16
     40e:	1f 93       	push	r17
     410:	df 93       	push	r29
     412:	cf 93       	push	r28
     414:	cd b7       	in	r28, 0x3d	; 61
     416:	de b7       	in	r29, 0x3e	; 62
		Pipe_ClearIN();
	}

	/* Freeze joystick data pipe */
	Pipe_Freeze();
}
     418:	cd b6       	in	r12, 0x3d	; 61
     41a:	de b6       	in	r13, 0x3e	; 62
/** Task to read and process the HID report descriptor and HID reports from the device
 *  and display the results onto the board LEDs.
 */
void JoystickHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     41c:	80 91 fa 04 	lds	r24, 0x04FA
     420:	8b 30       	cpi	r24, 0x0B	; 11
     422:	09 f0       	breq	.+2      	; 0x426 <JoystickHost_Task+0x22>
     424:	3e c0       	rjmp	.+124    	; 0x4a2 <JoystickHost_Task+0x9e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     42c:	80 91 a9 00 	lds	r24, 0x00A9
     430:	8f 7b       	andi	r24, 0xBF	; 191
     432:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     436:	80 91 a6 00 	lds	r24, 0x00A6
	/* Select and unfreeze joystick data pipe */
	Pipe_SelectPipe(JOYSTICK_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Check to see if a packet has been received */
	if (Pipe_IsINReceived())
     43a:	80 ff       	sbrs	r24, 0
     43c:	2d c0       	rjmp	.+90     	; 0x498 <JoystickHost_Task+0x94>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     43e:	80 91 a6 00 	lds	r24, 0x00A6
	{
		/* Check if data has been received from the attached joystick */
		if (Pipe_IsReadWriteAllowed())
     442:	85 ff       	sbrs	r24, 5
     444:	24 c0       	rjmp	.+72     	; 0x48e <JoystickHost_Task+0x8a>
     446:	ee b6       	in	r14, 0x3e	; 62
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     448:	80 91 f6 00 	lds	r24, 0x00F6
     44c:	90 91 f7 00 	lds	r25, 0x00F7
		{
			/* Create buffer big enough for the report */
			uint8_t JoystickReport[Pipe_BytesInPipe()];
     450:	2d b7       	in	r18, 0x3d	; 61
     452:	3e b7       	in	r19, 0x3e	; 62
     454:	28 1b       	sub	r18, r24
     456:	39 0b       	sbc	r19, r25
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	f8 94       	cli
     45c:	3e bf       	out	0x3e, r19	; 62
     45e:	0f be       	out	0x3f, r0	; 63
     460:	2d bf       	out	0x3d, r18	; 61
     462:	0d b7       	in	r16, 0x3d	; 61
     464:	1e b7       	in	r17, 0x3e	; 62
     466:	0f 5f       	subi	r16, 0xFF	; 255
     468:	1f 4f       	sbci	r17, 0xFF	; 255
     46a:	60 91 f6 00 	lds	r22, 0x00F6
     46e:	70 91 f7 00 	lds	r23, 0x00F7

			/* Load in the joystick report */
			Pipe_Read_Stream_LE(JoystickReport, Pipe_BytesInPipe(), NULL);
     472:	c8 01       	movw	r24, r16
     474:	40 e0       	ldi	r20, 0x00	; 0
     476:	50 e0       	ldi	r21, 0x00	; 0
     478:	f6 d5       	rcall	.+3052   	; 0x1066 <Pipe_Read_Stream_LE>

			/* Process the read in joystick report from the device */
			ProcessJoystickReport(JoystickReport);
     47a:	c8 01       	movw	r24, r16
     47c:	49 df       	rcall	.-366    	; 0x310 <ProcessJoystickReport>
     47e:	2c 2d       	mov	r18, r12
     480:	3e 2d       	mov	r19, r14
     482:	c9 01       	movw	r24, r18
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	9e bf       	out	0x3e, r25	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	8d bf       	out	0x3d, r24	; 61
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     48e:	80 91 a6 00 	lds	r24, 0x00A6
     492:	8e 77       	andi	r24, 0x7E	; 126
     494:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     498:	80 91 a9 00 	lds	r24, 0x00A9
     49c:	80 64       	ori	r24, 0x40	; 64
     49e:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_ClearIN();
	}

	/* Freeze joystick data pipe */
	Pipe_Freeze();
}
     4a2:	0f b6       	in	r0, 0x3f	; 63
     4a4:	f8 94       	cli
     4a6:	de be       	out	0x3e, r13	; 62
     4a8:	0f be       	out	0x3f, r0	; 63
     4aa:	cd be       	out	0x3d, r12	; 61
     4ac:	cf 91       	pop	r28
     4ae:	df 91       	pop	r29
     4b0:	1f 91       	pop	r17
     4b2:	0f 91       	pop	r16
     4b4:	ff 90       	pop	r15
     4b6:	ef 90       	pop	r14
     4b8:	df 90       	pop	r13
     4ba:	cf 90       	pop	r12
     4bc:	08 95       	ret

000004be <EVENT_USB_Host_DeviceEnumerationFailed>:
/** Event handler for the USB_DeviceEnumerationFailed event. This indicates that a problem occurred while
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode, const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     4be:	90 91 fa 04 	lds	r25, 0x04FA
     4c2:	2d b7       	in	r18, 0x3d	; 61
     4c4:	3e b7       	in	r19, 0x3e	; 62
     4c6:	28 50       	subi	r18, 0x08	; 8
     4c8:	30 40       	sbci	r19, 0x00	; 0
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	f8 94       	cli
     4ce:	3e bf       	out	0x3e, r19	; 62
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	2d bf       	out	0x3d, r18	; 61
     4d4:	ed b7       	in	r30, 0x3d	; 61
     4d6:	fe b7       	in	r31, 0x3e	; 62
     4d8:	31 96       	adiw	r30, 0x01	; 1
     4da:	28 e9       	ldi	r18, 0x98	; 152
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	ad b7       	in	r26, 0x3d	; 61
     4e0:	be b7       	in	r27, 0x3e	; 62
     4e2:	12 96       	adiw	r26, 0x02	; 2
     4e4:	3c 93       	st	X, r19
     4e6:	2e 93       	st	-X, r18
     4e8:	11 97       	sbiw	r26, 0x01	; 1
     4ea:	82 83       	std	Z+2, r24	; 0x02
     4ec:	13 82       	std	Z+3, r1	; 0x03
     4ee:	64 83       	std	Z+4, r22	; 0x04
     4f0:	15 82       	std	Z+5, r1	; 0x05
     4f2:	96 83       	std	Z+6, r25	; 0x06
     4f4:	17 82       	std	Z+7, r1	; 0x07
     4f6:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <printf_P>
     4fa:	8b b1       	in	r24, 0x0b	; 11
     4fc:	8f 70       	andi	r24, 0x0F	; 15
     4fe:	80 69       	ori	r24, 0x90	; 144
     500:	8b b9       	out	0x0b, r24	; 11
     502:	2d b7       	in	r18, 0x3d	; 61
     504:	3e b7       	in	r19, 0x3e	; 62
     506:	28 5f       	subi	r18, 0xF8	; 248
     508:	3f 4f       	sbci	r19, 0xFF	; 255
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	f8 94       	cli
     50e:	3e bf       	out	0x3e, r19	; 62
     510:	0f be       	out	0x3f, r0	; 63
     512:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     514:	08 95       	ret

00000516 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     516:	1f 93       	push	r17
     518:	18 2f       	mov	r17, r24
	USB_Disable();
     51a:	ed d4       	rcall	.+2522   	; 0xef6 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     51c:	00 d0       	rcall	.+0      	; 0x51e <EVENT_USB_Host_HostError+0x8>
     51e:	00 d0       	rcall	.+0      	; 0x520 <EVENT_USB_Host_HostError+0xa>
     520:	ed b7       	in	r30, 0x3d	; 61
     522:	fe b7       	in	r31, 0x3e	; 62
     524:	31 96       	adiw	r30, 0x01	; 1
     526:	8e ee       	ldi	r24, 0xEE	; 238
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	ad b7       	in	r26, 0x3d	; 61
     52c:	be b7       	in	r27, 0x3e	; 62
     52e:	12 96       	adiw	r26, 0x02	; 2
     530:	9c 93       	st	X, r25
     532:	8e 93       	st	-X, r24
     534:	11 97       	sbiw	r26, 0x01	; 1
     536:	12 83       	std	Z+2, r17	; 0x02
     538:	13 82       	std	Z+3, r1	; 0x03
     53a:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <printf_P>
     53e:	8b b1       	in	r24, 0x0b	; 11
     540:	8f 70       	andi	r24, 0x0F	; 15
     542:	80 69       	ori	r24, 0x90	; 144
     544:	8b b9       	out	0x0b, r24	; 11
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	ff cf       	rjmp	.-2      	; 0x54e <EVENT_USB_Host_HostError+0x38>

00000550 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Unattached.\r\n" ESC_FG_WHITE));
     550:	82 e6       	ldi	r24, 0x62	; 98
     552:	92 e0       	ldi	r25, 0x02	; 2
     554:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <puts_P>
     558:	8b b1       	in	r24, 0x0b	; 11
     55a:	8f 70       	andi	r24, 0x0F	; 15
     55c:	80 61       	ori	r24, 0x10	; 16
     55e:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     560:	08 95       	ret

00000562 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     562:	81 e8       	ldi	r24, 0x81	; 129
     564:	92 e0       	ldi	r25, 0x02	; 2
     566:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <puts_P>
     56a:	8b b1       	in	r24, 0x0b	; 11
     56c:	8f 70       	andi	r24, 0x0F	; 15
     56e:	80 6a       	ori	r24, 0xA0	; 160
     570:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     572:	08 95       	ret

00000574 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     574:	1f 93       	push	r17
	puts_P(PSTR("Getting Config Data.\r\n"));
     576:	8b e4       	ldi	r24, 0x4B	; 75
     578:	92 e0       	ldi	r25, 0x02	; 2
     57a:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <puts_P>
	
	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     57e:	fa d0       	rcall	.+500    	; 0x774 <ProcessConfigurationDescriptor>
     580:	18 2f       	mov	r17, r24
     582:	88 23       	and	r24, r24
     584:	c1 f0       	breq	.+48     	; 0x5b6 <EVENT_USB_Host_DeviceEnumerationComplete+0x42>
	{
		if (ErrorCode == ControlError)
     586:	81 30       	cpi	r24, 0x01	; 1
     588:	19 f4       	brne	.+6      	; 0x590 <EVENT_USB_Host_DeviceEnumerationComplete+0x1c>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     58a:	81 e2       	ldi	r24, 0x21	; 33
     58c:	92 e0       	ldi	r25, 0x02	; 2
     58e:	02 c0       	rjmp	.+4      	; 0x594 <EVENT_USB_Host_DeviceEnumerationComplete+0x20>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     590:	8a e0       	ldi	r24, 0x0A	; 10
     592:	92 e0       	ldi	r25, 0x02	; 2
     594:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     598:	00 d0       	rcall	.+0      	; 0x59a <EVENT_USB_Host_DeviceEnumerationComplete+0x26>
     59a:	00 d0       	rcall	.+0      	; 0x59c <EVENT_USB_Host_DeviceEnumerationComplete+0x28>
     59c:	ed b7       	in	r30, 0x3d	; 61
     59e:	fe b7       	in	r31, 0x3e	; 62
     5a0:	31 96       	adiw	r30, 0x01	; 1
     5a2:	80 ef       	ldi	r24, 0xF0	; 240
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	ad b7       	in	r26, 0x3d	; 61
     5a8:	be b7       	in	r27, 0x3e	; 62
     5aa:	12 96       	adiw	r26, 0x02	; 2
     5ac:	9c 93       	st	X, r25
     5ae:	8e 93       	st	-X, r24
     5b0:	11 97       	sbiw	r26, 0x01	; 1
     5b2:	12 83       	std	Z+2, r17	; 0x02
     5b4:	13 c0       	rjmp	.+38     	; 0x5dc <EVENT_USB_Host_DeviceEnumerationComplete+0x68>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	93 d7       	rcall	.+3878   	; 0x14e0 <USB_Host_SetDeviceConfiguration>
     5ba:	28 2f       	mov	r18, r24
     5bc:	88 23       	and	r24, r24
     5be:	d1 f0       	breq	.+52     	; 0x5f4 <EVENT_USB_Host_DeviceEnumerationComplete+0x80>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     5c0:	00 d0       	rcall	.+0      	; 0x5c2 <EVENT_USB_Host_DeviceEnumerationComplete+0x4e>
     5c2:	00 d0       	rcall	.+0      	; 0x5c4 <EVENT_USB_Host_DeviceEnumerationComplete+0x50>
     5c4:	ed b7       	in	r30, 0x3d	; 61
     5c6:	fe b7       	in	r31, 0x3e	; 62
     5c8:	31 96       	adiw	r30, 0x01	; 1
     5ca:	8d ea       	ldi	r24, 0xAD	; 173
     5cc:	91 e0       	ldi	r25, 0x01	; 1
     5ce:	ad b7       	in	r26, 0x3d	; 61
     5d0:	be b7       	in	r27, 0x3e	; 62
     5d2:	12 96       	adiw	r26, 0x02	; 2
     5d4:	9c 93       	st	X, r25
     5d6:	8e 93       	st	-X, r24
     5d8:	11 97       	sbiw	r26, 0x01	; 1
     5da:	22 83       	std	Z+2, r18	; 0x02
     5dc:	13 82       	std	Z+3, r1	; 0x03
     5de:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <printf_P>
     5e2:	8b b1       	in	r24, 0x0b	; 11
     5e4:	8f 70       	andi	r24, 0x0F	; 15
     5e6:	80 69       	ori	r24, 0x90	; 144
     5e8:	8b b9       	out	0x0b, r24	; 11
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	49 c0       	rjmp	.+146    	; 0x686 <EVENT_USB_Host_DeviceEnumerationComplete+0x112>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	printf_P(PSTR("Processing HID Report (Size %d Bytes).\r\n"), HIDReportSize);
     5f4:	00 d0       	rcall	.+0      	; 0x5f6 <EVENT_USB_Host_DeviceEnumerationComplete+0x82>
     5f6:	00 d0       	rcall	.+0      	; 0x5f8 <EVENT_USB_Host_DeviceEnumerationComplete+0x84>
     5f8:	84 e8       	ldi	r24, 0x84	; 132
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	ed b7       	in	r30, 0x3d	; 61
     5fe:	fe b7       	in	r31, 0x3e	; 62
     600:	92 83       	std	Z+2, r25	; 0x02
     602:	81 83       	std	Z+1, r24	; 0x01
     604:	80 91 ee 04 	lds	r24, 0x04EE
     608:	90 91 ef 04 	lds	r25, 0x04EF
     60c:	94 83       	std	Z+4, r25	; 0x04
     60e:	83 83       	std	Z+3, r24	; 0x03
     610:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <printf_P>

	/* Get and process the device's first HID report descriptor */
	if ((ErrorCode = GetHIDReportData()) != ParseSuccessful)
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
     61c:	5d d1       	rcall	.+698    	; 0x8d8 <GetHIDReportData>
     61e:	18 2f       	mov	r17, r24
     620:	88 23       	and	r24, r24
     622:	49 f1       	breq	.+82     	; 0x676 <EVENT_USB_Host_DeviceEnumerationComplete+0x102>
	{
		puts_P(PSTR(ESC_FG_RED "Report Parse Error.\r\n"));
     624:	89 e6       	ldi	r24, 0x69	; 105
     626:	91 e0       	ldi	r25, 0x01	; 1
     628:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <puts_P>

		if (!(HIDReportInfo.TotalReportItems))
     62c:	80 91 15 01 	lds	r24, 0x0115
     630:	88 23       	and	r24, r24
     632:	29 f4       	brne	.+10     	; 0x63e <EVENT_USB_Host_DeviceEnumerationComplete+0xca>
			puts_P(PSTR("Not a valid Joystick." ESC_FG_WHITE));
     634:	8e e4       	ldi	r24, 0x4E	; 78
     636:	91 e0       	ldi	r25, 0x01	; 1
     638:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <puts_P>
     63c:	15 c0       	rjmp	.+42     	; 0x668 <EVENT_USB_Host_DeviceEnumerationComplete+0xf4>
		else
			printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     63e:	00 d0       	rcall	.+0      	; 0x640 <EVENT_USB_Host_DeviceEnumerationComplete+0xcc>
     640:	00 d0       	rcall	.+0      	; 0x642 <EVENT_USB_Host_DeviceEnumerationComplete+0xce>
     642:	ed b7       	in	r30, 0x3d	; 61
     644:	fe b7       	in	r31, 0x3e	; 62
     646:	31 96       	adiw	r30, 0x01	; 1
     648:	84 e3       	ldi	r24, 0x34	; 52
     64a:	91 e0       	ldi	r25, 0x01	; 1
     64c:	ad b7       	in	r26, 0x3d	; 61
     64e:	be b7       	in	r27, 0x3e	; 62
     650:	12 96       	adiw	r26, 0x02	; 2
     652:	9c 93       	st	X, r25
     654:	8e 93       	st	-X, r24
     656:	11 97       	sbiw	r26, 0x01	; 1
     658:	12 83       	std	Z+2, r17	; 0x02
     65a:	13 82       	std	Z+3, r1	; 0x03
     65c:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <printf_P>
     660:	0f 90       	pop	r0
     662:	0f 90       	pop	r0
     664:	0f 90       	pop	r0
     666:	0f 90       	pop	r0
     668:	8b b1       	in	r24, 0x0b	; 11
     66a:	8f 70       	andi	r24, 0x0F	; 15
     66c:	80 69       	ori	r24, 0x90	; 144
     66e:	8b b9       	out	0x0b, r24	; 11

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	36 d7       	rcall	.+3692   	; 0x14e0 <USB_Host_SetDeviceConfiguration>
     674:	08 c0       	rjmp	.+16     	; 0x686 <EVENT_USB_Host_DeviceEnumerationComplete+0x112>
		return;
	}

	puts_P(PSTR("Joystick Enumerated.\r\n"));
     676:	8d e1       	ldi	r24, 0x1D	; 29
     678:	91 e0       	ldi	r25, 0x01	; 1
     67a:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <puts_P>
     67e:	8b b1       	in	r24, 0x0b	; 11
     680:	8f 70       	andi	r24, 0x0F	; 15
     682:	80 66       	ori	r24, 0x60	; 96
     684:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     686:	1f 91       	pop	r17
     688:	08 95       	ret

0000068a <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     68a:	84 b7       	in	r24, 0x34	; 52
     68c:	87 7f       	andi	r24, 0xF7	; 247
     68e:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     690:	28 e1       	ldi	r18, 0x18	; 24
     692:	0f b6       	in	r0, 0x3f	; 63
     694:	f8 94       	cli
     696:	20 93 60 00 	sts	0x0060, r18
     69a:	10 92 60 00 	sts	0x0060, r1
     69e:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	80 e8       	ldi	r24, 0x80	; 128
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	f8 94       	cli
     6a8:	80 93 61 00 	sts	0x0061, r24
     6ac:	90 93 61 00 	sts	0x0061, r25
     6b0:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     6b2:	83 e3       	ldi	r24, 0x33	; 51
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	90 93 cd 00 	sts	0x00CD, r25
     6ba:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     6be:	86 e0       	ldi	r24, 0x06	; 6
     6c0:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     6c4:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     6c8:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     6cc:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     6ce:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     6d0:	8a b1       	in	r24, 0x0a	; 10
     6d2:	80 6f       	ori	r24, 0xF0	; 240
     6d4:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     6d6:	8b b1       	in	r24, 0x0b	; 11
     6d8:	8f 70       	andi	r24, 0x0F	; 15
     6da:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     6dc:	03 d4       	rcall	.+2054   	; 0xee4 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     6de:	eb ef       	ldi	r30, 0xFB	; 251
     6e0:	f4 e0       	ldi	r31, 0x04	; 4
     6e2:	f0 93 0a 05 	sts	0x050A, r31
     6e6:	e0 93 09 05 	sts	0x0509, r30
					stdout = Stream;
     6ea:	f0 93 0c 05 	sts	0x050C, r31
     6ee:	e0 93 0b 05 	sts	0x050B, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     6f2:	8e e0       	ldi	r24, 0x0E	; 14
     6f4:	df 01       	movw	r26, r30
     6f6:	1d 92       	st	X+, r1
     6f8:	8a 95       	dec	r24
     6fa:	e9 f7       	brne	.-6      	; 0x6f6 <SetupHardware+0x6c>
     6fc:	83 e0       	ldi	r24, 0x03	; 3
     6fe:	80 93 fe 04 	sts	0x04FE, r24
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	9f e0       	ldi	r25, 0x0F	; 15
     706:	90 93 04 05 	sts	0x0504, r25
     70a:	80 93 03 05 	sts	0x0503, r24
     70e:	8b e0       	ldi	r24, 0x0B	; 11
     710:	9f e0       	ldi	r25, 0x0F	; 15
     712:	90 93 06 05 	sts	0x0506, r25
     716:	80 93 05 05 	sts	0x0505, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     71a:	08 95       	ret

0000071c <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     71c:	b6 df       	rcall	.-148    	; 0x68a <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Joystick HID Parser Host Demo running.\r\n" ESC_FG_WHITE));
     71e:	8e e9       	ldi	r24, 0x9E	; 158
     720:	92 e0       	ldi	r25, 0x02	; 2
     722:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     726:	8b b1       	in	r24, 0x0b	; 11
     728:	8f 70       	andi	r24, 0x0F	; 15
     72a:	80 61       	ori	r24, 0x10	; 16
     72c:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     72e:	78 94       	sei

	for (;;)
	{
		JoystickHost_Task();
     730:	69 de       	rcall	.-814    	; 0x404 <JoystickHost_Task>

		USB_USBTask();
     732:	fb d6       	rcall	.+3574   	; 0x152a <USB_USBTask>
     734:	fd cf       	rjmp	.-6      	; 0x730 <main+0x14>

00000736 <DComp_NextJoystickInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Joystick HID Class and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextJoystickInterface(void* CurrentDescriptor)
{
     736:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     738:	81 81       	ldd	r24, Z+1	; 0x01
     73a:	84 30       	cpi	r24, 0x04	; 4
     73c:	29 f4       	brne	.+10     	; 0x748 <DComp_NextJoystickInterface+0x12>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the HID descriptor class, break out if correct class interface found */
		if ((Interface->Class == HID_CSCP_HIDClass))
     73e:	85 81       	ldd	r24, Z+5	; 0x05
     740:	83 30       	cpi	r24, 0x03	; 3
     742:	11 f4       	brne	.+4      	; 0x748 <DComp_NextJoystickInterface+0x12>
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	08 95       	ret
     748:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     74a:	08 95       	ret

0000074c <DComp_NextJoystickInterfaceDataEndpoint>:
 */
uint8_t DComp_NextJoystickInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     74c:	fc 01       	movw	r30, r24
     74e:	81 81       	ldd	r24, Z+1	; 0x01
     750:	85 30       	cpi	r24, 0x05	; 5
     752:	11 f4       	brne	.+4      	; 0x758 <DComp_NextJoystickInterfaceDataEndpoint+0xc>
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	08 95       	ret
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
     758:	84 30       	cpi	r24, 0x04	; 4
     75a:	11 f0       	breq	.+4      	; 0x760 <DComp_NextJoystickInterfaceDataEndpoint+0x14>
     75c:	82 e0       	ldi	r24, 0x02	; 2
     75e:	08 95       	ret
     760:	81 e0       	ldi	r24, 0x01	; 1
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}
     762:	08 95       	ret

00000764 <DComp_NextHID>:
 */
uint8_t DComp_NextHID(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
     764:	fc 01       	movw	r30, r24
     766:	81 81       	ldd	r24, Z+1	; 0x01
     768:	81 32       	cpi	r24, 0x21	; 33
     76a:	11 f0       	breq	.+4      	; 0x770 <DComp_NextHID+0xc>
     76c:	82 e0       	ldi	r24, 0x02	; 2
     76e:	08 95       	ret
     770:	80 e0       	ldi	r24, 0x00	; 0
	  return DESCRIPTOR_SEARCH_Found;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}
     772:	08 95       	ret

00000774 <ProcessConfigurationDescriptor>:
 *  This routine searches for a HID interface descriptor containing at least one Interrupt type IN endpoint and HID descriptor.
 *
 *  \return An error code from the \ref JoystickHostWithParser_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     774:	8f 92       	push	r8
     776:	9f 92       	push	r9
     778:	af 92       	push	r10
     77a:	bf 92       	push	r11
     77c:	cf 92       	push	r12
     77e:	df 92       	push	r13
     780:	ef 92       	push	r14
     782:	ff 92       	push	r15
     784:	0f 93       	push	r16
     786:	1f 93       	push	r17
     788:	df 93       	push	r29
     78a:	cf 93       	push	r28
     78c:	cd b7       	in	r28, 0x3d	; 61
     78e:	de b7       	in	r29, 0x3e	; 62
     790:	c4 50       	subi	r28, 0x04	; 4
     792:	d2 40       	sbci	r29, 0x02	; 2
     794:	0f b6       	in	r0, 0x3f	; 63
     796:	f8 94       	cli
     798:	de bf       	out	0x3e, r29	; 62
     79a:	0f be       	out	0x3f, r0	; 63
     79c:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     79e:	ae 01       	movw	r20, r28
     7a0:	4b 5f       	subi	r20, 0xFB	; 251
     7a2:	5f 4f       	sbci	r21, 0xFF	; 255
     7a4:	5a 83       	std	Y+2, r21	; 0x02
     7a6:	49 83       	std	Y+1, r20	; 0x01
	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor  = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     7a8:	83 e0       	ldi	r24, 0x03	; 3
     7aa:	c8 2e       	mov	r12, r24
     7ac:	d1 2c       	mov	r13, r1
     7ae:	cc 0e       	add	r12, r28
     7b0:	dd 1e       	adc	r13, r29
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	b6 01       	movw	r22, r12
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	32 e0       	ldi	r19, 0x02	; 2
     7ba:	f0 d4       	rcall	.+2528   	; 0x119c <USB_Host_GetDeviceConfigDescriptor>
     7bc:	85 30       	cpi	r24, 0x05	; 5
     7be:	29 f0       	breq	.+10     	; 0x7ca <ProcessConfigurationDescriptor+0x56>
     7c0:	86 30       	cpi	r24, 0x06	; 6
     7c2:	79 f0       	breq	.+30     	; 0x7e2 <ProcessConfigurationDescriptor+0x6e>
     7c4:	88 23       	and	r24, r24
     7c6:	19 f0       	breq	.+6      	; 0x7ce <ProcessConfigurationDescriptor+0x5a>
     7c8:	0e c0       	rjmp	.+28     	; 0x7e6 <ProcessConfigurationDescriptor+0x72>
     7ca:	82 e0       	ldi	r24, 0x02	; 2
     7cc:	4d c0       	rjmp	.+154    	; 0x868 <ProcessConfigurationDescriptor+0xf4>
     7ce:	00 e0       	ldi	r16, 0x00	; 0
     7d0:	10 e0       	ldi	r17, 0x00	; 0
     7d2:	88 24       	eor	r8, r8
     7d4:	99 24       	eor	r9, r9
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     7d6:	56 01       	movw	r10, r12
     7d8:	7e 01       	movw	r14, r28
     7da:	08 94       	sec
     7dc:	e1 1c       	adc	r14, r1
     7de:	f1 1c       	adc	r15, r1
     7e0:	04 c0       	rjmp	.+8      	; 0x7ea <ProcessConfigurationDescriptor+0x76>
	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor  = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     7e2:	83 e0       	ldi	r24, 0x03	; 3
     7e4:	41 c0       	rjmp	.+130    	; 0x868 <ProcessConfigurationDescriptor+0xf4>
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	3f c0       	rjmp	.+126    	; 0x868 <ProcessConfigurationDescriptor+0xf4>
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     7ea:	01 15       	cp	r16, r1
     7ec:	11 05       	cpc	r17, r1
     7ee:	39 f0       	breq	.+14     	; 0x7fe <ProcessConfigurationDescriptor+0x8a>
     7f0:	c5 01       	movw	r24, r10
     7f2:	b7 01       	movw	r22, r14
     7f4:	46 ea       	ldi	r20, 0xA6	; 166
     7f6:	53 e0       	ldi	r21, 0x03	; 3
     7f8:	8d d4       	rcall	.+2330   	; 0x1114 <USB_GetNextDescriptorComp>
     7fa:	88 23       	and	r24, r24
     7fc:	b9 f0       	breq	.+46     	; 0x82c <ProcessConfigurationDescriptor+0xb8>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextJoystickInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     7fe:	c5 01       	movw	r24, r10
     800:	b7 01       	movw	r22, r14
     802:	4b e9       	ldi	r20, 0x9B	; 155
     804:	53 e0       	ldi	r21, 0x03	; 3
     806:	86 d4       	rcall	.+2316   	; 0x1114 <USB_GetNextDescriptorComp>
     808:	88 23       	and	r24, r24
     80a:	69 f5       	brne	.+90     	; 0x866 <ProcessConfigurationDescriptor+0xf2>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			HIDInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     80c:	19 81       	ldd	r17, Y+1	; 0x01
     80e:	0a 81       	ldd	r16, Y+2	; 0x02

			/* Get the HID descriptor from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     810:	c5 01       	movw	r24, r10
     812:	b7 01       	movw	r22, r14
     814:	42 eb       	ldi	r20, 0xB2	; 178
     816:	53 e0       	ldi	r21, 0x03	; 3
     818:	7d d4       	rcall	.+2298   	; 0x1114 <USB_GetNextDescriptorComp>
     81a:	88 23       	and	r24, r24
     81c:	21 f5       	brne	.+72     	; 0x866 <ProcessConfigurationDescriptor+0xf2>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			HIDInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     81e:	81 2f       	mov	r24, r17
     820:	90 2f       	mov	r25, r16
     822:	9c 01       	movw	r18, r24
     824:	89 01       	movw	r16, r18
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the HID descriptor for later use */
			HIDDescriptor = DESCRIPTOR_PCAST(CurrConfigLocation, USB_HID_Descriptor_HID_t);
     826:	89 80       	ldd	r8, Y+1	; 0x01
     828:	9a 80       	ldd	r9, Y+2	; 0x02
     82a:	df cf       	rjmp	.-66     	; 0x7ea <ProcessConfigurationDescriptor+0x76>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     82c:	c9 80       	ldd	r12, Y+1	; 0x01
     82e:	da 80       	ldd	r13, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     830:	f6 01       	movw	r30, r12
     832:	22 81       	ldd	r18, Z+2	; 0x02
     834:	27 ff       	sbrs	r18, 7
     836:	d9 cf       	rjmp	.-78     	; 0x7ea <ProcessConfigurationDescriptor+0x76>
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint))
     838:	c1 14       	cp	r12, r1
     83a:	d1 04       	cpc	r13, r1
     83c:	b1 f2       	breq	.-84     	; 0x7ea <ProcessConfigurationDescriptor+0x76>
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		  DataINEndpoint = EndpointData;
	}

	/* Configure the HID data IN pipe */
	Pipe_ConfigurePipe(JOYSTICK_DATA_IN_PIPE, EP_TYPE_INTERRUPT, PIPE_TOKEN_IN,
     83e:	04 81       	ldd	r16, Z+4	; 0x04
     840:	15 81       	ldd	r17, Z+5	; 0x05
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	63 e0       	ldi	r22, 0x03	; 3
     846:	40 e1       	ldi	r20, 0x10	; 16
     848:	ee 24       	eor	r14, r14
     84a:	5b d2       	rcall	.+1206   	; 0xd02 <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);
	Pipe_SetInterruptPeriod(DataINEndpoint->PollingIntervalMS);
     84c:	f6 01       	movw	r30, r12
     84e:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     850:	80 93 ad 00 	sts	0x00AD, r24

	/* Get the HID report size from the HID report descriptor */
	HIDReportSize = HIDDescriptor->HIDReportLength;
     854:	f4 01       	movw	r30, r8
     856:	87 81       	ldd	r24, Z+7	; 0x07
     858:	90 85       	ldd	r25, Z+8	; 0x08
     85a:	90 93 ef 04 	sts	0x04EF, r25
     85e:	80 93 ee 04 	sts	0x04EE, r24
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	01 c0       	rjmp	.+2      	; 0x868 <ProcessConfigurationDescriptor+0xf4>

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     866:	84 e0       	ldi	r24, 0x04	; 4
}
     868:	cc 5f       	subi	r28, 0xFC	; 252
     86a:	dd 4f       	sbci	r29, 0xFD	; 253
     86c:	0f b6       	in	r0, 0x3f	; 63
     86e:	f8 94       	cli
     870:	de bf       	out	0x3e, r29	; 62
     872:	0f be       	out	0x3f, r0	; 63
     874:	cd bf       	out	0x3d, r28	; 61
     876:	cf 91       	pop	r28
     878:	df 91       	pop	r29
     87a:	1f 91       	pop	r17
     87c:	0f 91       	pop	r16
     87e:	ff 90       	pop	r15
     880:	ef 90       	pop	r14
     882:	df 90       	pop	r13
     884:	cf 90       	pop	r12
     886:	bf 90       	pop	r11
     888:	af 90       	pop	r10
     88a:	9f 90       	pop	r9
     88c:	8f 90       	pop	r8
     88e:	08 95       	ret

00000890 <CALLBACK_HIDParser_FilterHIDReportItem>:
 *  \param[in] CurrentItem  Pointer to the item the HID report parser is currently working with
 *
 *  \return Boolean true if the item should be stored into the HID report structure, false if it should be discarded
 */
bool CALLBACK_HIDParser_FilterHIDReportItem(HID_ReportItem_t* const CurrentItem)
{
     890:	dc 01       	movw	r26, r24

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Joystick Usage is found - this prevents Mice, which use identical descriptors except for the Mouse usage
	 * parent node, from being erroneously treated as a joystick
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     892:	16 96       	adiw	r26, 0x06	; 6
     894:	ed 91       	ld	r30, X+
     896:	fc 91       	ld	r31, X
     898:	17 97       	sbiw	r26, 0x07	; 7
     89a:	0b c0       	rjmp	.+22     	; 0x8b2 <CALLBACK_HIDParser_FilterHIDReportItem+0x22>
	{
		if ((CurrPath->Usage.Page  == USAGE_PAGE_GENERIC_DCTRL) &&
     89c:	81 81       	ldd	r24, Z+1	; 0x01
     89e:	92 81       	ldd	r25, Z+2	; 0x02
     8a0:	01 97       	sbiw	r24, 0x01	; 1
     8a2:	21 f4       	brne	.+8      	; 0x8ac <CALLBACK_HIDParser_FilterHIDReportItem+0x1c>
     8a4:	83 81       	ldd	r24, Z+3	; 0x03
     8a6:	94 81       	ldd	r25, Z+4	; 0x04
     8a8:	04 97       	sbiw	r24, 0x04	; 4
     8aa:	39 f0       	breq	.+14     	; 0x8ba <CALLBACK_HIDParser_FilterHIDReportItem+0x2a>

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Joystick Usage is found - this prevents Mice, which use identical descriptors except for the Mouse usage
	 * parent node, from being erroneously treated as a joystick
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     8ac:	05 80       	ldd	r0, Z+5	; 0x05
     8ae:	f6 81       	ldd	r31, Z+6	; 0x06
     8b0:	e0 2d       	mov	r30, r0
     8b2:	30 97       	sbiw	r30, 0x00	; 0
     8b4:	99 f7       	brne	.-26     	; 0x89c <CALLBACK_HIDParser_FilterHIDReportItem+0xc>
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	08 95       	ret

	/* Check the attributes of the current joystick item - see if we are interested in it or not;
	 * only store BUTTON and GENERIC_DESKTOP_CONTROL items into the Processed HID Report
	 * structure to save RAM and ignore the rest
	 */
	return ((CurrentItem->Attributes.Usage.Page == USAGE_PAGE_BUTTON) ||
     8ba:	19 96       	adiw	r26, 0x09	; 9
     8bc:	8d 91       	ld	r24, X+
     8be:	9c 91       	ld	r25, X
     8c0:	1a 97       	sbiw	r26, 0x0a	; 10
     8c2:	89 30       	cpi	r24, 0x09	; 9
     8c4:	91 05       	cpc	r25, r1
     8c6:	21 f0       	breq	.+8      	; 0x8d0 <CALLBACK_HIDParser_FilterHIDReportItem+0x40>
     8c8:	20 e0       	ldi	r18, 0x00	; 0
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	01 97       	sbiw	r24, 0x01	; 1
     8ce:	11 f4       	brne	.+4      	; 0x8d4 <CALLBACK_HIDParser_FilterHIDReportItem+0x44>
     8d0:	21 e0       	ldi	r18, 0x01	; 1
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	82 2f       	mov	r24, r18
	        (CurrentItem->Attributes.Usage.Page == USAGE_PAGE_GENERIC_DCTRL));
}
     8d6:	08 95       	ret

000008d8 <GetHIDReportData>:
 *  structures via the HID parser routines in the LUFA library.
 *
 *  \return  A value from the \ref JoystickHostWithParser_GetHIDReportDataCodes_t enum
 */
uint8_t GetHIDReportData(void)
{
     8d8:	ef 92       	push	r14
     8da:	ff 92       	push	r15
     8dc:	0f 93       	push	r16
     8de:	1f 93       	push	r17
     8e0:	df 93       	push	r29
     8e2:	cf 93       	push	r28
     8e4:	cd b7       	in	r28, 0x3d	; 61
     8e6:	de b7       	in	r29, 0x3e	; 62
	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
	  return ParseError;

	return ParseSuccessful;
}
     8e8:	ed b6       	in	r14, 0x3d	; 61
     8ea:	fe b6       	in	r15, 0x3e	; 62
 *  \return  A value from the \ref JoystickHostWithParser_GetHIDReportDataCodes_t enum
 */
uint8_t GetHIDReportData(void)
{
	/* Create a buffer big enough to hold the entire returned HID report */
	uint8_t HIDReportData[HIDReportSize];
     8ec:	20 91 ee 04 	lds	r18, 0x04EE
     8f0:	30 91 ef 04 	lds	r19, 0x04EF
     8f4:	8d b7       	in	r24, 0x3d	; 61
     8f6:	9e b7       	in	r25, 0x3e	; 62
     8f8:	82 1b       	sub	r24, r18
     8fa:	93 0b       	sbc	r25, r19
     8fc:	0f b6       	in	r0, 0x3f	; 63
     8fe:	f8 94       	cli
     900:	9e bf       	out	0x3e, r25	; 62
     902:	0f be       	out	0x3f, r0	; 63
     904:	8d bf       	out	0x3d, r24	; 61
     906:	0d b7       	in	r16, 0x3d	; 61
     908:	1e b7       	in	r17, 0x3e	; 62
     90a:	0f 5f       	subi	r16, 0xFF	; 255
     90c:	1f 4f       	sbci	r17, 0xFF	; 255

	USB_ControlRequest = (USB_Request_Header_t)
     90e:	81 e8       	ldi	r24, 0x81	; 129
     910:	80 93 f2 04 	sts	0x04F2, r24
     914:	86 e0       	ldi	r24, 0x06	; 6
     916:	80 93 f3 04 	sts	0x04F3, r24
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	92 e2       	ldi	r25, 0x22	; 34
     91e:	90 93 f5 04 	sts	0x04F5, r25
     922:	80 93 f4 04 	sts	0x04F4, r24
     926:	10 92 f7 04 	sts	0x04F7, r1
     92a:	10 92 f6 04 	sts	0x04F6, r1
     92e:	30 93 f9 04 	sts	0x04F9, r19
     932:	20 93 f8 04 	sts	0x04F8, r18
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     936:	10 92 a7 00 	sts	0x00A7, r1

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	/* Send control request to retrieve the HID report from the attached device */
	if (USB_Host_SendControlRequest(HIDReportData) != HOST_SENDCONTROL_Successful)
     93a:	c8 01       	movw	r24, r16
     93c:	b3 d4       	rcall	.+2406   	; 0x12a4 <USB_Host_SendControlRequest>
     93e:	88 23       	and	r24, r24
     940:	11 f0       	breq	.+4      	; 0x946 <GetHIDReportData+0x6e>
     942:	82 e0       	ldi	r24, 0x02	; 2
     944:	0a c0       	rjmp	.+20     	; 0x95a <GetHIDReportData+0x82>
	  return ParseControlError;

	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
     946:	60 91 ee 04 	lds	r22, 0x04EE
     94a:	70 91 ef 04 	lds	r23, 0x04EF
     94e:	c8 01       	movw	r24, r16
     950:	45 e1       	ldi	r20, 0x15	; 21
     952:	51 e0       	ldi	r21, 0x01	; 1
     954:	5e d6       	rcall	.+3260   	; 0x1612 <USB_ProcessHIDReport>
     956:	81 11       	cpse	r24, r1
     958:	81 e0       	ldi	r24, 0x01	; 1
	  return ParseError;

	return ParseSuccessful;
}
     95a:	0f b6       	in	r0, 0x3f	; 63
     95c:	f8 94       	cli
     95e:	fe be       	out	0x3e, r15	; 62
     960:	0f be       	out	0x3f, r0	; 63
     962:	ed be       	out	0x3d, r14	; 61
     964:	cf 91       	pop	r28
     966:	df 91       	pop	r29
     968:	1f 91       	pop	r17
     96a:	0f 91       	pop	r16
     96c:	ff 90       	pop	r15
     96e:	ef 90       	pop	r14
     970:	08 95       	ret

00000972 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     972:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     974:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     978:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     97c:	80 91 a0 00 	lds	r24, 0x00A0
     980:	8f 7d       	andi	r24, 0xDF	; 223
     982:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     986:	80 91 9f 00 	lds	r24, 0x009F
     98a:	8f 7d       	andi	r24, 0xDF	; 223
     98c:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     990:	80 91 9e 00 	lds	r24, 0x009E
     994:	81 60       	ori	r24, 0x01	; 1
     996:	80 93 9e 00 	sts	0x009E, r24
     99a:	28 c0       	rjmp	.+80     	; 0x9ec <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     99c:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     9a0:	85 ff       	sbrs	r24, 5
     9a2:	06 c0       	rjmp	.+12     	; 0x9b0 <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     9a4:	80 91 9f 00 	lds	r24, 0x009F
     9a8:	8f 7d       	andi	r24, 0xDF	; 223
     9aa:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     9ae:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     9b0:	80 91 fa 04 	lds	r24, 0x04FA
     9b4:	81 30       	cpi	r24, 0x01	; 1
     9b6:	11 f4       	brne	.+4      	; 0x9bc <USB_Host_WaitMS+0x4a>
     9b8:	91 e0       	ldi	r25, 0x01	; 1
     9ba:	1a c0       	rjmp	.+52     	; 0x9f0 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     9bc:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     9c0:	84 ff       	sbrs	r24, 4
     9c2:	09 c0       	rjmp	.+18     	; 0x9d6 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     9c4:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     9c8:	80 91 a6 00 	lds	r24, 0x00A6
     9cc:	8f 7e       	andi	r24, 0xEF	; 239
     9ce:	80 93 a6 00 	sts	0x00A6, r24
     9d2:	92 e0       	ldi	r25, 0x02	; 2
     9d4:	0d c0       	rjmp	.+26     	; 0x9f0 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     9d6:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     9da:	81 ff       	sbrs	r24, 1
     9dc:	07 c0       	rjmp	.+14     	; 0x9ec <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     9de:	80 91 a6 00 	lds	r24, 0x00A6
     9e2:	8d 7f       	andi	r24, 0xFD	; 253
     9e4:	80 93 a6 00 	sts	0x00A6, r24
     9e8:	93 e0       	ldi	r25, 0x03	; 3
     9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     9ec:	99 23       	and	r25, r25
     9ee:	b1 f6       	brne	.-84     	; 0x99c <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     9f0:	20 fd       	sbrc	r18, 0
     9f2:	05 c0       	rjmp	.+10     	; 0x9fe <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     9f4:	80 91 9e 00 	lds	r24, 0x009E
     9f8:	8e 7f       	andi	r24, 0xFE	; 254
     9fa:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     9fe:	35 ff       	sbrs	r19, 5
     a00:	05 c0       	rjmp	.+10     	; 0xa0c <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     a02:	80 91 a0 00 	lds	r24, 0x00A0
     a06:	80 62       	ori	r24, 0x20	; 32
     a08:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     a0c:	89 2f       	mov	r24, r25
     a0e:	08 95       	ret

00000a10 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     a10:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     a14:	80 91 a0 00 	lds	r24, 0x00A0
     a18:	8d 7f       	andi	r24, 0xFD	; 253
     a1a:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     a1e:	80 91 9e 00 	lds	r24, 0x009E
     a22:	82 60       	ori	r24, 0x02	; 2
     a24:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     a28:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     a2c:	81 fd       	sbrc	r24, 1
     a2e:	fc cf       	rjmp	.-8      	; 0xa28 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     a30:	80 91 9e 00 	lds	r24, 0x009E
     a34:	81 60       	ori	r24, 0x01	; 1
     a36:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     a3a:	10 92 f0 04 	sts	0x04F0, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     a3e:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     a42:	80 91 a0 00 	lds	r24, 0x00A0
     a46:	8f 7d       	andi	r24, 0xDF	; 223
     a48:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     a4c:	80 91 9f 00 	lds	r24, 0x009F
     a50:	8f 7d       	andi	r24, 0xDF	; 223
     a52:	80 93 9f 00 	sts	0x009F, r24
     a56:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a58:	40 ed       	ldi	r20, 0xD0	; 208
     a5a:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     a5c:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     a60:	85 ff       	sbrs	r24, 5
     a62:	0b c0       	rjmp	.+22     	; 0xa7a <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     a64:	80 91 9f 00 	lds	r24, 0x009F
     a68:	8f 7d       	andi	r24, 0xDF	; 223
     a6a:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     a6e:	80 91 9f 00 	lds	r24, 0x009F
     a72:	8d 7f       	andi	r24, 0xFD	; 253
     a74:	80 93 9f 00 	sts	0x009F, r24
     a78:	05 c0       	rjmp	.+10     	; 0xa84 <USB_Host_ResetDevice+0x74>
     a7a:	ca 01       	movw	r24, r20
     a7c:	01 97       	sbiw	r24, 0x01	; 1
     a7e:	f1 f7       	brne	.-4      	; 0xa7c <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     a80:	21 50       	subi	r18, 0x01	; 1
     a82:	61 f7       	brne	.-40     	; 0xa5c <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     a84:	35 ff       	sbrs	r19, 5
     a86:	05 c0       	rjmp	.+10     	; 0xa92 <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     a88:	80 91 a0 00 	lds	r24, 0x00A0
     a8c:	80 62       	ori	r24, 0x20	; 32
     a8e:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     a92:	60 fd       	sbrc	r22, 0
     a94:	05 c0       	rjmp	.+10     	; 0xaa0 <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     a96:	80 91 9e 00 	lds	r24, 0x009E
     a9a:	8e 7f       	andi	r24, 0xFE	; 254
     a9c:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     aa0:	80 91 a0 00 	lds	r24, 0x00A0
     aa4:	82 60       	ori	r24, 0x02	; 2
     aa6:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     aaa:	08 95       	ret

00000aac <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     aac:	ef 92       	push	r14
     aae:	0f 93       	push	r16
     ab0:	1f 93       	push	r17
     ab2:	df 93       	push	r29
     ab4:	cf 93       	push	r28
     ab6:	cd b7       	in	r28, 0x3d	; 61
     ab8:	de b7       	in	r29, 0x3e	; 62
     aba:	28 97       	sbiw	r28, 0x08	; 8
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	f8 94       	cli
     ac0:	de bf       	out	0x3e, r29	; 62
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     ac6:	80 91 fa 04 	lds	r24, 0x04FA
     aca:	85 30       	cpi	r24, 0x05	; 5
     acc:	09 f4       	brne	.+2      	; 0xad0 <USB_Host_ProcessNextHostState+0x24>
     ace:	94 c0       	rjmp	.+296    	; 0xbf8 <USB_Host_ProcessNextHostState+0x14c>
     ad0:	86 30       	cpi	r24, 0x06	; 6
     ad2:	68 f4       	brcc	.+26     	; 0xaee <USB_Host_ProcessNextHostState+0x42>
     ad4:	82 30       	cpi	r24, 0x02	; 2
     ad6:	b9 f1       	breq	.+110    	; 0xb46 <USB_Host_ProcessNextHostState+0x9a>
     ad8:	83 30       	cpi	r24, 0x03	; 3
     ada:	18 f4       	brcc	.+6      	; 0xae2 <USB_Host_ProcessNextHostState+0x36>
     adc:	88 23       	and	r24, r24
     ade:	a1 f0       	breq	.+40     	; 0xb08 <USB_Host_ProcessNextHostState+0x5c>
     ae0:	04 c1       	rjmp	.+520    	; 0xcea <USB_Host_ProcessNextHostState+0x23e>
     ae2:	83 30       	cpi	r24, 0x03	; 3
     ae4:	d1 f1       	breq	.+116    	; 0xb5a <USB_Host_ProcessNextHostState+0xae>
     ae6:	84 30       	cpi	r24, 0x04	; 4
     ae8:	09 f0       	breq	.+2      	; 0xaec <USB_Host_ProcessNextHostState+0x40>
     aea:	ff c0       	rjmp	.+510    	; 0xcea <USB_Host_ProcessNextHostState+0x23e>
     aec:	5d c0       	rjmp	.+186    	; 0xba8 <USB_Host_ProcessNextHostState+0xfc>
     aee:	87 30       	cpi	r24, 0x07	; 7
     af0:	09 f4       	brne	.+2      	; 0xaf4 <USB_Host_ProcessNextHostState+0x48>
     af2:	9b c0       	rjmp	.+310    	; 0xc2a <USB_Host_ProcessNextHostState+0x17e>
     af4:	87 30       	cpi	r24, 0x07	; 7
     af6:	08 f4       	brcc	.+2      	; 0xafa <USB_Host_ProcessNextHostState+0x4e>
     af8:	8a c0       	rjmp	.+276    	; 0xc0e <USB_Host_ProcessNextHostState+0x162>
     afa:	88 30       	cpi	r24, 0x08	; 8
     afc:	09 f4       	brne	.+2      	; 0xb00 <USB_Host_ProcessNextHostState+0x54>
     afe:	b3 c0       	rjmp	.+358    	; 0xc66 <USB_Host_ProcessNextHostState+0x1ba>
     b00:	89 30       	cpi	r24, 0x09	; 9
     b02:	09 f0       	breq	.+2      	; 0xb06 <USB_Host_ProcessNextHostState+0x5a>
     b04:	f2 c0       	rjmp	.+484    	; 0xcea <USB_Host_ProcessNextHostState+0x23e>
     b06:	d7 c0       	rjmp	.+430    	; 0xcb6 <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     b08:	00 91 13 01 	lds	r16, 0x0113
     b0c:	10 91 14 01 	lds	r17, 0x0114
     b10:	01 15       	cp	r16, r1
     b12:	11 05       	cpc	r17, r1
     b14:	09 f4       	brne	.+2      	; 0xb18 <USB_Host_ProcessNextHostState+0x6c>
     b16:	e9 c0       	rjmp	.+466    	; 0xcea <USB_Host_ProcessNextHostState+0x23e>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	2b df       	rcall	.-426    	; 0x972 <USB_Host_WaitMS>
     b1c:	68 2f       	mov	r22, r24
     b1e:	88 23       	and	r24, r24
     b20:	31 f0       	breq	.+12     	; 0xb2e <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
     b22:	80 91 12 01 	lds	r24, 0x0112
     b26:	80 93 fa 04 	sts	0x04FA, r24
     b2a:	91 e0       	ldi	r25, 0x01	; 1
     b2c:	da c0       	rjmp	.+436    	; 0xce2 <USB_Host_ProcessNextHostState+0x236>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     b2e:	c8 01       	movw	r24, r16
     b30:	01 97       	sbiw	r24, 0x01	; 1
     b32:	90 93 14 01 	sts	0x0114, r25
     b36:	80 93 13 01 	sts	0x0113, r24
     b3a:	89 2b       	or	r24, r25
     b3c:	09 f0       	breq	.+2      	; 0xb40 <USB_Host_ProcessNextHostState+0x94>
     b3e:	d5 c0       	rjmp	.+426    	; 0xcea <USB_Host_ProcessNextHostState+0x23e>
				  USB_HostState = PostWaitState;
     b40:	80 91 12 01 	lds	r24, 0x0112
     b44:	07 c0       	rjmp	.+14     	; 0xb54 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     b46:	88 ee       	ldi	r24, 0xE8	; 232
     b48:	93 e0       	ldi	r25, 0x03	; 3
     b4a:	90 93 14 01 	sts	0x0114, r25
     b4e:	80 93 13 01 	sts	0x0113, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     b52:	83 e0       	ldi	r24, 0x03	; 3
     b54:	80 93 fa 04 	sts	0x04FA, r24
     b58:	c8 c0       	rjmp	.+400    	; 0xcea <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     b5a:	80 91 13 01 	lds	r24, 0x0113
     b5e:	90 91 14 01 	lds	r25, 0x0114
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	90 93 14 01 	sts	0x0114, r25
     b68:	80 93 13 01 	sts	0x0113, r24
     b6c:	01 96       	adiw	r24, 0x01	; 1
     b6e:	29 f0       	breq	.+10     	; 0xb7a <USB_Host_ProcessNextHostState+0xce>
     b70:	80 ed       	ldi	r24, 0xD0	; 208
     b72:	97 e0       	ldi	r25, 0x07	; 7
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	f1 f7       	brne	.-4      	; 0xb74 <USB_Host_ProcessNextHostState+0xc8>
     b78:	b8 c0       	rjmp	.+368    	; 0xcea <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     b7a:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     b7c:	80 91 d8 00 	lds	r24, 0x00D8
     b80:	80 61       	ori	r24, 0x10	; 16
     b82:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     b86:	80 91 dd 00 	lds	r24, 0x00DD
     b8a:	8b 7f       	andi	r24, 0xFB	; 251
     b8c:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     b90:	80 91 d7 00 	lds	r24, 0x00D7
     b94:	80 61       	ori	r24, 0x10	; 16
     b96:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     b9a:	80 91 dd 00 	lds	r24, 0x00DD
     b9e:	82 60       	ori	r24, 0x02	; 2
     ba0:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     ba4:	84 e0       	ldi	r24, 0x04	; 4
     ba6:	d6 cf       	rjmp	.-84     	; 0xb54 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     ba8:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     bac:	80 ff       	sbrs	r24, 0
     bae:	9d c0       	rjmp	.+314    	; 0xcea <USB_Host_ProcessNextHostState+0x23e>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     bb0:	80 91 9f 00 	lds	r24, 0x009F
     bb4:	8e 7f       	andi	r24, 0xFE	; 254
     bb6:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     bba:	80 91 9f 00 	lds	r24, 0x009F
     bbe:	8d 7f       	andi	r24, 0xFD	; 253
     bc0:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     bc4:	80 91 df 00 	lds	r24, 0x00DF
     bc8:	8d 7f       	andi	r24, 0xFD	; 253
     bca:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     bce:	80 91 de 00 	lds	r24, 0x00DE
     bd2:	82 60       	ori	r24, 0x02	; 2
     bd4:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     bd8:	80 91 9e 00 	lds	r24, 0x009E
     bdc:	81 60       	ori	r24, 0x01	; 1
     bde:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     be2:	ed d0       	rcall	.+474    	; 0xdbe <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     be4:	10 92 fa 04 	sts	0x04FA, r1
     be8:	84 e6       	ldi	r24, 0x64	; 100
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	90 93 14 01 	sts	0x0114, r25
     bf0:	80 93 13 01 	sts	0x0113, r24
     bf4:	85 e0       	ldi	r24, 0x05	; 5
     bf6:	5c c0       	rjmp	.+184    	; 0xcb0 <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     bf8:	0b df       	rcall	.-490    	; 0xa10 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     bfa:	10 92 fa 04 	sts	0x04FA, r1
     bfe:	88 ec       	ldi	r24, 0xC8	; 200
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	90 93 14 01 	sts	0x0114, r25
     c06:	80 93 13 01 	sts	0x0113, r24
     c0a:	86 e0       	ldi	r24, 0x06	; 6
     c0c:	51 c0       	rjmp	.+162    	; 0xcb0 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	40 e0       	ldi	r20, 0x00	; 0
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	00 e4       	ldi	r16, 0x40	; 64
     c18:	10 e0       	ldi	r17, 0x00	; 0
     c1a:	ee 24       	eor	r14, r14
     c1c:	72 d0       	rcall	.+228    	; 0xd02 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     c1e:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     c22:	87 ff       	sbrs	r24, 7
     c24:	5c c0       	rjmp	.+184    	; 0xcde <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     c26:	87 e0       	ldi	r24, 0x07	; 7
     c28:	95 cf       	rjmp	.-214    	; 0xb54 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     c2a:	a2 ef       	ldi	r26, 0xF2	; 242
     c2c:	b4 e0       	ldi	r27, 0x04	; 4
     c2e:	e8 e0       	ldi	r30, 0x08	; 8
     c30:	f1 e0       	ldi	r31, 0x01	; 1
     c32:	88 e0       	ldi	r24, 0x08	; 8
     c34:	01 90       	ld	r0, Z+
     c36:	0d 92       	st	X+, r0
     c38:	81 50       	subi	r24, 0x01	; 1
     c3a:	e1 f7       	brne	.-8      	; 0xc34 <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     c3c:	ce 01       	movw	r24, r28
     c3e:	01 96       	adiw	r24, 0x01	; 1
     c40:	31 d3       	rcall	.+1634   	; 0x12a4 <USB_Host_SendControlRequest>
     c42:	68 2f       	mov	r22, r24
     c44:	88 23       	and	r24, r24
     c46:	09 f0       	breq	.+2      	; 0xc4a <USB_Host_ProcessNextHostState+0x19e>
     c48:	48 c0       	rjmp	.+144    	; 0xcda <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     c4a:	88 85       	ldd	r24, Y+8	; 0x08
     c4c:	80 93 10 01 	sts	0x0110, r24

			USB_Host_ResetDevice();
     c50:	df de       	rcall	.-578    	; 0xa10 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     c52:	10 92 fa 04 	sts	0x04FA, r1
     c56:	88 ec       	ldi	r24, 0xC8	; 200
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	90 93 14 01 	sts	0x0114, r25
     c5e:	80 93 13 01 	sts	0x0113, r24
     c62:	88 e0       	ldi	r24, 0x08	; 8
     c64:	25 c0       	rjmp	.+74     	; 0xcb0 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     c66:	00 91 10 01 	lds	r16, 0x0110
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	60 e0       	ldi	r22, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	20 e0       	ldi	r18, 0x00	; 0
     c72:	10 e0       	ldi	r17, 0x00	; 0
     c74:	ee 24       	eor	r14, r14
     c76:	45 d0       	rcall	.+138    	; 0xd02 <Pipe_ConfigurePipe>
     c78:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     c7c:	87 ff       	sbrs	r24, 7
     c7e:	2f c0       	rjmp	.+94     	; 0xcde <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     c80:	a2 ef       	ldi	r26, 0xF2	; 242
     c82:	b4 e0       	ldi	r27, 0x04	; 4
     c84:	e0 e0       	ldi	r30, 0x00	; 0
     c86:	f1 e0       	ldi	r31, 0x01	; 1
     c88:	88 e0       	ldi	r24, 0x08	; 8
     c8a:	01 90       	ld	r0, Z+
     c8c:	0d 92       	st	X+, r0
     c8e:	81 50       	subi	r24, 0x01	; 1
     c90:	e1 f7       	brne	.-8      	; 0xc8a <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	06 d3       	rcall	.+1548   	; 0x12a4 <USB_Host_SendControlRequest>
     c98:	68 2f       	mov	r22, r24
     c9a:	88 23       	and	r24, r24
     c9c:	f1 f4       	brne	.+60     	; 0xcda <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     c9e:	10 92 fa 04 	sts	0x04FA, r1
     ca2:	84 e6       	ldi	r24, 0x64	; 100
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	90 93 14 01 	sts	0x0114, r25
     caa:	80 93 13 01 	sts	0x0113, r24
     cae:	89 e0       	ldi	r24, 0x09	; 9
     cb0:	80 93 12 01 	sts	0x0112, r24
     cb4:	1a c0       	rjmp	.+52     	; 0xcea <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     cbc:	8a e0       	ldi	r24, 0x0A	; 10
     cbe:	80 93 fa 04 	sts	0x04FA, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     cc2:	58 dc       	rcall	.-1872   	; 0x574 <EVENT_USB_Host_DeviceEnumerationComplete>
     cc4:	12 c0       	rjmp	.+36     	; 0xcea <USB_Host_ProcessNextHostState+0x23e>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     cc6:	89 2f       	mov	r24, r25
     cc8:	fa db       	rcall	.-2060   	; 0x4be <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     cca:	80 91 dd 00 	lds	r24, 0x00DD
     cce:	81 60       	ori	r24, 0x01	; 1
     cd0:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     cd4:	3d dc       	rcall	.-1926   	; 0x550 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     cd6:	b6 d0       	rcall	.+364    	; 0xe44 <USB_ResetInterface>
     cd8:	08 c0       	rjmp	.+16     	; 0xcea <USB_Host_ProcessNextHostState+0x23e>
	}
}
     cda:	93 e0       	ldi	r25, 0x03	; 3
     cdc:	02 c0       	rjmp	.+4      	; 0xce2 <USB_Host_ProcessNextHostState+0x236>
     cde:	94 e0       	ldi	r25, 0x04	; 4
     ce0:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     ce2:	80 91 fa 04 	lds	r24, 0x04FA
     ce6:	81 30       	cpi	r24, 0x01	; 1
     ce8:	71 f7       	brne	.-36     	; 0xcc6 <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     cea:	28 96       	adiw	r28, 0x08	; 8
     cec:	0f b6       	in	r0, 0x3f	; 63
     cee:	f8 94       	cli
     cf0:	de bf       	out	0x3e, r29	; 62
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	cd bf       	out	0x3d, r28	; 61
     cf6:	cf 91       	pop	r28
     cf8:	df 91       	pop	r29
     cfa:	1f 91       	pop	r17
     cfc:	0f 91       	pop	r16
     cfe:	ef 90       	pop	r14
     d00:	08 95       	ret

00000d02 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     d02:	ef 92       	push	r14
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	e8 2f       	mov	r30, r24
     d0a:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     d0c:	62 95       	swap	r22
     d0e:	66 0f       	add	r22, r22
     d10:	66 0f       	add	r22, r22
     d12:	60 7c       	andi	r22, 0xC0	; 192
     d14:	64 2b       	or	r22, r20
     d16:	2f 70       	andi	r18, 0x0F	; 15
     d18:	62 2b       	or	r22, r18
     d1a:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     d1c:	72 60       	ori	r23, 0x02	; 2
     d1e:	45 c0       	rjmp	.+138    	; 0xdaa <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     d20:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     d24:	3e 17       	cp	r19, r30
     d26:	a1 f4       	brne	.+40     	; 0xd50 <Pipe_ConfigurePipe+0x4e>
     d28:	88 e0       	ldi	r24, 0x08	; 8
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	03 c0       	rjmp	.+6      	; 0xd36 <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     d30:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     d36:	80 17       	cp	r24, r16
     d38:	91 07       	cpc	r25, r17
     d3a:	10 f4       	brcc	.+4      	; 0xd40 <Pipe_ConfigurePipe+0x3e>
     d3c:	25 30       	cpi	r18, 0x05	; 5
     d3e:	c1 f7       	brne	.-16     	; 0xd30 <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     d40:	92 2f       	mov	r25, r18
     d42:	92 95       	swap	r25
     d44:	90 7f       	andi	r25, 0xF0	; 240
     d46:	97 2b       	or	r25, r23
     d48:	56 2f       	mov	r21, r22
     d4a:	40 e0       	ldi	r20, 0x00	; 0
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	08 c0       	rjmp	.+16     	; 0xd60 <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     d50:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     d54:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     d58:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
     d5c:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     d60:	91 ff       	sbrs	r25, 1
     d62:	22 c0       	rjmp	.+68     	; 0xda8 <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     d64:	80 91 a9 00 	lds	r24, 0x00A9
     d68:	8e 7f       	andi	r24, 0xFE	; 254
     d6a:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     d6e:	80 91 ab 00 	lds	r24, 0x00AB
     d72:	8d 7f       	andi	r24, 0xFD	; 253
     d74:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     d78:	80 91 a9 00 	lds	r24, 0x00A9
     d7c:	81 60       	ori	r24, 0x01	; 1
     d7e:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     d82:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
     d86:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
     d8a:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
     d8e:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     d92:	80 91 a9 00 	lds	r24, 0x00A9
     d96:	80 62       	ori	r24, 0x20	; 32
     d98:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     d9c:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     da0:	87 fd       	sbrc	r24, 7
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <Pipe_ConfigurePipe+0xa6>
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	07 c0       	rjmp	.+14     	; 0xdb6 <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     da8:	3f 5f       	subi	r19, 0xFF	; 255
     daa:	37 30       	cpi	r19, 0x07	; 7
     dac:	08 f4       	brcc	.+2      	; 0xdb0 <Pipe_ConfigurePipe+0xae>
     dae:	b8 cf       	rjmp	.-144    	; 0xd20 <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     db0:	e0 93 a7 00 	sts	0x00A7, r30
     db4:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
     db6:	1f 91       	pop	r17
     db8:	0f 91       	pop	r16
     dba:	ef 90       	pop	r14
     dbc:	08 95       	ret

00000dbe <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     dbe:	10 92 f8 00 	sts	0x00F8, r1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     dc8:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     dcc:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     dd0:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     dd4:	80 91 a9 00 	lds	r24, 0x00A9
     dd8:	8e 7f       	andi	r24, 0xFE	; 254
     dda:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     dde:	9f 5f       	subi	r25, 0xFF	; 255
     de0:	97 30       	cpi	r25, 0x07	; 7
     de2:	81 f7       	brne	.-32     	; 0xdc4 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     de4:	08 95       	ret

00000de6 <Pipe_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     de6:	40 91 a2 00 	lds	r20, 0x00A2
     dea:	50 91 a3 00 	lds	r21, 0x00A3
     dee:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     df0:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     df4:	80 73       	andi	r24, 0x30	; 48
     df6:	80 31       	cpi	r24, 0x10	; 16
     df8:	29 f4       	brne	.+10     	; 0xe04 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     dfa:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     dfe:	80 ff       	sbrs	r24, 0
     e00:	05 c0       	rjmp	.+10     	; 0xe0c <Pipe_WaitUntilReady+0x26>
     e02:	1e c0       	rjmp	.+60     	; 0xe40 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     e04:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     e08:	82 fd       	sbrc	r24, 2
     e0a:	1a c0       	rjmp	.+52     	; 0xe40 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     e0c:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     e10:	81 ff       	sbrs	r24, 1
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <Pipe_WaitUntilReady+0x32>
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     e18:	80 91 fa 04 	lds	r24, 0x04FA
     e1c:	81 30       	cpi	r24, 0x01	; 1
     e1e:	11 f4       	brne	.+4      	; 0xe24 <Pipe_WaitUntilReady+0x3e>
     e20:	82 e0       	ldi	r24, 0x02	; 2
     e22:	08 95       	ret
     e24:	80 91 a2 00 	lds	r24, 0x00A2
     e28:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     e2c:	84 17       	cp	r24, r20
     e2e:	95 07       	cpc	r25, r21
     e30:	f9 f2       	breq	.-66     	; 0xdf0 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     e32:	22 23       	and	r18, r18
     e34:	11 f4       	brne	.+4      	; 0xe3a <Pipe_WaitUntilReady+0x54>
     e36:	83 e0       	ldi	r24, 0x03	; 3
     e38:	08 95       	ret
     e3a:	21 50       	subi	r18, 0x01	; 1
     e3c:	ac 01       	movw	r20, r24
     e3e:	d8 cf       	rjmp	.-80     	; 0xdf0 <Pipe_WaitUntilReady+0xa>
     e40:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     e42:	08 95       	ret

00000e44 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     e44:	70 d0       	rcall	.+224    	; 0xf26 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     e46:	77 d0       	rcall	.+238    	; 0xf36 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     e48:	80 91 d8 00 	lds	r24, 0x00D8
     e4c:	8f 77       	andi	r24, 0x7F	; 127
     e4e:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     e52:	80 91 d8 00 	lds	r24, 0x00D8
     e56:	80 68       	ori	r24, 0x80	; 128
     e58:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     e5c:	80 91 d8 00 	lds	r24, 0x00D8
     e60:	8f 7d       	andi	r24, 0xDF	; 223
     e62:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     e66:	80 91 d7 00 	lds	r24, 0x00D7
     e6a:	8f 77       	andi	r24, 0x7F	; 127
     e6c:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     e70:	8c e0       	ldi	r24, 0x0C	; 12
     e72:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     e74:	8e e0       	ldi	r24, 0x0E	; 14
     e76:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     e78:	09 b4       	in	r0, 0x29	; 41
     e7a:	00 fe       	sbrs	r0, 0
     e7c:	fd cf       	rjmp	.-6      	; 0xe78 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	80 93 fa 04 	sts	0x04FA, r24
	USB_Host_ConfigurationNumber = 0;
     e84:	10 92 f0 04 	sts	0x04F0, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     e88:	80 e4       	ldi	r24, 0x40	; 64
     e8a:	80 93 10 01 	sts	0x0110, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     e8e:	80 91 d8 00 	lds	r24, 0x00D8
     e92:	80 64       	ori	r24, 0x40	; 64
     e94:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     e98:	80 91 dd 00 	lds	r24, 0x00DD
     e9c:	81 60       	ori	r24, 0x01	; 1
     e9e:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     ea2:	80 91 dd 00 	lds	r24, 0x00DD
     ea6:	84 60       	ori	r24, 0x04	; 4
     ea8:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     eac:	80 91 d7 00 	lds	r24, 0x00D7
     eb0:	8f 7e       	andi	r24, 0xEF	; 239
     eb2:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     eb6:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     eb8:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     eba:	80 91 de 00 	lds	r24, 0x00DE
     ebe:	81 60       	ori	r24, 0x01	; 1
     ec0:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     ec4:	80 91 de 00 	lds	r24, 0x00DE
     ec8:	84 60       	ori	r24, 0x04	; 4
     eca:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     ece:	80 91 e0 00 	lds	r24, 0x00E0
     ed2:	8e 7f       	andi	r24, 0xFE	; 254
     ed4:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     ed8:	80 91 d8 00 	lds	r24, 0x00D8
     edc:	80 61       	ori	r24, 0x10	; 16
     ede:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     ee2:	08 95       	ret

00000ee4 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     ee4:	e7 ed       	ldi	r30, 0xD7	; 215
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	81 60       	ori	r24, 0x01	; 1
     eec:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	80 93 f1 04 	sts	0x04F1, r24

	USB_ResetInterface();
}
     ef4:	a7 cf       	rjmp	.-178    	; 0xe44 <USB_ResetInterface>

00000ef6 <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     ef6:	17 d0       	rcall	.+46     	; 0xf26 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     ef8:	1e d0       	rcall	.+60     	; 0xf36 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     efa:	e0 ee       	ldi	r30, 0xE0	; 224
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	81 60       	ori	r24, 0x01	; 1
     f02:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     f04:	a8 ed       	ldi	r26, 0xD8	; 216
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	8c 91       	ld	r24, X
     f0a:	8f 77       	andi	r24, 0x7F	; 127
     f0c:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     f0e:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     f10:	e7 ed       	ldi	r30, 0xD7	; 215
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	8e 7f       	andi	r24, 0xFE	; 254
     f18:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     f1a:	8c 91       	ld	r24, X
     f1c:	8f 7e       	andi	r24, 0xEF	; 239
     f1e:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     f20:	10 92 f1 04 	sts	0x04F1, r1
}
     f24:	08 95       	ret

00000f26 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     f26:	e8 ed       	ldi	r30, 0xD8	; 216
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	8c 7f       	andi	r24, 0xFC	; 252
     f2e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     f30:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     f34:	08 95       	ret

00000f36 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     f36:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     f3a:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     f3e:	08 95       	ret

00000f40 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     f40:	1f 92       	push	r1
     f42:	0f 92       	push	r0
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	0f 92       	push	r0
     f48:	0b b6       	in	r0, 0x3b	; 59
     f4a:	0f 92       	push	r0
     f4c:	11 24       	eor	r1, r1
     f4e:	2f 93       	push	r18
     f50:	3f 93       	push	r19
     f52:	4f 93       	push	r20
     f54:	5f 93       	push	r21
     f56:	6f 93       	push	r22
     f58:	7f 93       	push	r23
     f5a:	8f 93       	push	r24
     f5c:	9f 93       	push	r25
     f5e:	af 93       	push	r26
     f60:	bf 93       	push	r27
     f62:	ef 93       	push	r30
     f64:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     f66:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     f6a:	85 ff       	sbrs	r24, 5
     f6c:	0a c0       	rjmp	.+20     	; 0xf82 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     f6e:	80 91 a0 00 	lds	r24, 0x00A0
     f72:	85 ff       	sbrs	r24, 5
     f74:	06 c0       	rjmp	.+12     	; 0xf82 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     f76:	80 91 9f 00 	lds	r24, 0x009F
     f7a:	8f 7d       	andi	r24, 0xDF	; 223
     f7c:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     f80:	67 d1       	rcall	.+718    	; 0x1250 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     f82:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     f86:	81 ff       	sbrs	r24, 1
     f88:	15 c0       	rjmp	.+42     	; 0xfb4 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     f8a:	80 91 a0 00 	lds	r24, 0x00A0
     f8e:	81 ff       	sbrs	r24, 1
     f90:	11 c0       	rjmp	.+34     	; 0xfb4 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     f92:	80 91 9f 00 	lds	r24, 0x009F
     f96:	8d 7f       	andi	r24, 0xFD	; 253
     f98:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     f9c:	80 91 9f 00 	lds	r24, 0x009F
     fa0:	8e 7f       	andi	r24, 0xFE	; 254
     fa2:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     fa6:	80 91 a0 00 	lds	r24, 0x00A0
     faa:	8d 7f       	andi	r24, 0xFD	; 253
     fac:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     fb0:	cf da       	rcall	.-2658   	; 0x550 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     fb2:	48 df       	rcall	.-368    	; 0xe44 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     fb4:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     fb8:	81 ff       	sbrs	r24, 1
     fba:	15 c0       	rjmp	.+42     	; 0xfe6 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     fbc:	80 91 de 00 	lds	r24, 0x00DE
     fc0:	81 ff       	sbrs	r24, 1
     fc2:	11 c0       	rjmp	.+34     	; 0xfe6 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     fc4:	80 91 df 00 	lds	r24, 0x00DF
     fc8:	8d 7f       	andi	r24, 0xFD	; 253
     fca:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     fce:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     fd0:	80 91 dd 00 	lds	r24, 0x00DD
     fd4:	81 60       	ori	r24, 0x01	; 1
     fd6:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	9c da       	rcall	.-2760   	; 0x516 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     fde:	b8 da       	rcall	.-2704   	; 0x550 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	80 93 fa 04 	sts	0x04FA, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     fe6:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     fea:	80 ff       	sbrs	r24, 0
     fec:	17 c0       	rjmp	.+46     	; 0x101c <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     fee:	80 91 de 00 	lds	r24, 0x00DE
     ff2:	80 ff       	sbrs	r24, 0
     ff4:	13 c0       	rjmp	.+38     	; 0x101c <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     ff6:	80 91 df 00 	lds	r24, 0x00DF
     ffa:	8e 7f       	andi	r24, 0xFE	; 254
     ffc:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
    1000:	80 91 de 00 	lds	r24, 0x00DE
    1004:	8e 7f       	andi	r24, 0xFE	; 254
    1006:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    100a:	ab da       	rcall	.-2730   	; 0x562 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    100c:	80 91 a0 00 	lds	r24, 0x00A0
    1010:	82 60       	ori	r24, 0x02	; 2
    1012:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    1016:	82 e0       	ldi	r24, 0x02	; 2
    1018:	80 93 fa 04 	sts	0x04FA, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    101c:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    1020:	82 ff       	sbrs	r24, 2
    1022:	0e c0       	rjmp	.+28     	; 0x1040 <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    1024:	80 91 de 00 	lds	r24, 0x00DE
    1028:	82 ff       	sbrs	r24, 2
    102a:	0a c0       	rjmp	.+20     	; 0x1040 <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    102c:	80 91 df 00 	lds	r24, 0x00DF
    1030:	8b 7f       	andi	r24, 0xFB	; 251
    1032:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    1036:	82 e0       	ldi	r24, 0x02	; 2
    1038:	60 e0       	ldi	r22, 0x00	; 0
    103a:	41 da       	rcall	.-2942   	; 0x4be <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    103c:	89 da       	rcall	.-2798   	; 0x550 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    103e:	02 df       	rcall	.-508    	; 0xe44 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1040:	ff 91       	pop	r31
    1042:	ef 91       	pop	r30
    1044:	bf 91       	pop	r27
    1046:	af 91       	pop	r26
    1048:	9f 91       	pop	r25
    104a:	8f 91       	pop	r24
    104c:	7f 91       	pop	r23
    104e:	6f 91       	pop	r22
    1050:	5f 91       	pop	r21
    1052:	4f 91       	pop	r20
    1054:	3f 91       	pop	r19
    1056:	2f 91       	pop	r18
    1058:	0f 90       	pop	r0
    105a:	0b be       	out	0x3b, r0	; 59
    105c:	0f 90       	pop	r0
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	0f 90       	pop	r0
    1062:	1f 90       	pop	r1
    1064:	18 95       	reti

00001066 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1066:	bf 92       	push	r11
    1068:	cf 92       	push	r12
    106a:	df 92       	push	r13
    106c:	ef 92       	push	r14
    106e:	ff 92       	push	r15
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	18 2f       	mov	r17, r24
    107a:	09 2f       	mov	r16, r25
    107c:	7b 01       	movw	r14, r22
    107e:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1080:	80 91 aa 00 	lds	r24, 0x00AA
    1084:	8f 7c       	andi	r24, 0xCF	; 207
    1086:	80 61       	ori	r24, 0x10	; 16
    1088:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    108c:	ac de       	rcall	.-680    	; 0xde6 <Pipe_WaitUntilReady>
    108e:	b8 2e       	mov	r11, r24
    1090:	88 23       	and	r24, r24
    1092:	a9 f5       	brne	.+106    	; 0x10fe <Pipe_Read_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1094:	81 2f       	mov	r24, r17
    1096:	90 2f       	mov	r25, r16
    1098:	9c 01       	movw	r18, r24
    109a:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    109c:	c1 14       	cp	r12, r1
    109e:	d1 04       	cpc	r13, r1
    10a0:	39 f0       	breq	.+14     	; 0x10b0 <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
    10a2:	f6 01       	movw	r30, r12
    10a4:	80 81       	ld	r24, Z
    10a6:	91 81       	ldd	r25, Z+1	; 0x01
    10a8:	e8 1a       	sub	r14, r24
    10aa:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    10ac:	c8 0f       	add	r28, r24
    10ae:	d9 1f       	adc	r29, r25
    10b0:	00 e0       	ldi	r16, 0x00	; 0
    10b2:	10 e0       	ldi	r17, 0x00	; 0
    10b4:	21 c0       	rjmp	.+66     	; 0x10f8 <Pipe_Read_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    10b6:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    10ba:	85 fd       	sbrc	r24, 5
    10bc:	15 c0       	rjmp	.+42     	; 0x10e8 <Pipe_Read_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    10be:	80 91 a6 00 	lds	r24, 0x00A6
    10c2:	8e 77       	andi	r24, 0x7E	; 126
    10c4:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    10c8:	c1 14       	cp	r12, r1
    10ca:	d1 04       	cpc	r13, r1
    10cc:	49 f0       	breq	.+18     	; 0x10e0 <Pipe_Read_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
    10ce:	f6 01       	movw	r30, r12
    10d0:	80 81       	ld	r24, Z
    10d2:	91 81       	ldd	r25, Z+1	; 0x01
    10d4:	80 0f       	add	r24, r16
    10d6:	91 1f       	adc	r25, r17
    10d8:	91 83       	std	Z+1, r25	; 0x01
    10da:	80 83       	st	Z, r24
    10dc:	84 e0       	ldi	r24, 0x04	; 4
    10de:	10 c0       	rjmp	.+32     	; 0x1100 <Pipe_Read_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    10e0:	82 de       	rcall	.-764    	; 0xde6 <Pipe_WaitUntilReady>
    10e2:	88 23       	and	r24, r24
    10e4:	49 f0       	breq	.+18     	; 0x10f8 <Pipe_Read_Stream_LE+0x92>
    10e6:	0c c0       	rjmp	.+24     	; 0x1100 <Pipe_Read_Stream_LE+0x9a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    10e8:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    10ec:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    10ee:	08 94       	sec
    10f0:	e1 08       	sbc	r14, r1
    10f2:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    10f4:	0f 5f       	subi	r16, 0xFF	; 255
    10f6:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
    10f8:	e1 14       	cp	r14, r1
    10fa:	f1 04       	cpc	r15, r1
    10fc:	e1 f6       	brne	.-72     	; 0x10b6 <Pipe_Read_Stream_LE+0x50>
    10fe:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	1f 91       	pop	r17
    1106:	0f 91       	pop	r16
    1108:	ff 90       	pop	r15
    110a:	ef 90       	pop	r14
    110c:	df 90       	pop	r13
    110e:	cf 90       	pop	r12
    1110:	bf 90       	pop	r11
    1112:	08 95       	ret

00001114 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1114:	af 92       	push	r10
    1116:	bf 92       	push	r11
    1118:	cf 92       	push	r12
    111a:	df 92       	push	r13
    111c:	ef 92       	push	r14
    111e:	ff 92       	push	r15
    1120:	0f 93       	push	r16
    1122:	1f 93       	push	r17
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	7c 01       	movw	r14, r24
    112a:	eb 01       	movw	r28, r22
    112c:	6a 01       	movw	r12, r20
    112e:	24 c0       	rjmp	.+72     	; 0x1178 <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1130:	e8 81       	ld	r30, Y
    1132:	f9 81       	ldd	r31, Y+1	; 0x01
    1134:	be 2e       	mov	r11, r30
    1136:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1138:	80 81       	ld	r24, Z
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	98 01       	movw	r18, r16
    113e:	80 17       	cp	r24, r16
    1140:	91 07       	cpc	r25, r17
    1142:	08 f4       	brcc	.+2      	; 0x1146 <USB_GetNextDescriptorComp+0x32>
    1144:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1146:	e2 0f       	add	r30, r18
    1148:	f3 1f       	adc	r31, r19
    114a:	f9 83       	std	Y+1, r31	; 0x01
    114c:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
    114e:	f7 01       	movw	r30, r14
    1150:	80 81       	ld	r24, Z
    1152:	91 81       	ldd	r25, Z+1	; 0x01
    1154:	82 1b       	sub	r24, r18
    1156:	93 0b       	sbc	r25, r19
    1158:	91 83       	std	Z+1, r25	; 0x01
    115a:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    115c:	88 81       	ld	r24, Y
    115e:	99 81       	ldd	r25, Y+1	; 0x01
    1160:	f6 01       	movw	r30, r12
    1162:	09 95       	icall
    1164:	82 30       	cpi	r24, 0x02	; 2
    1166:	41 f0       	breq	.+16     	; 0x1178 <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	69 f4       	brne	.+26     	; 0x1186 <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
    116c:	b8 82       	st	Y, r11
    116e:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
    1170:	f7 01       	movw	r30, r14
    1172:	11 83       	std	Z+1, r17	; 0x01
    1174:	00 83       	st	Z, r16
    1176:	07 c0       	rjmp	.+14     	; 0x1186 <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    1178:	f7 01       	movw	r30, r14
    117a:	00 81       	ld	r16, Z
    117c:	11 81       	ldd	r17, Z+1	; 0x01
    117e:	01 15       	cp	r16, r1
    1180:	11 05       	cpc	r17, r1
    1182:	b1 f6       	brne	.-84     	; 0x1130 <USB_GetNextDescriptorComp+0x1c>
    1184:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	1f 91       	pop	r17
    118c:	0f 91       	pop	r16
    118e:	ff 90       	pop	r15
    1190:	ef 90       	pop	r14
    1192:	df 90       	pop	r13
    1194:	cf 90       	pop	r12
    1196:	bf 90       	pop	r11
    1198:	af 90       	pop	r10
    119a:	08 95       	ret

0000119c <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    119c:	cf 92       	push	r12
    119e:	df 92       	push	r13
    11a0:	ef 92       	push	r14
    11a2:	ff 92       	push	r15
    11a4:	0f 93       	push	r16
    11a6:	1f 93       	push	r17
    11a8:	df 93       	push	r29
    11aa:	cf 93       	push	r28
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	29 97       	sbiw	r28, 0x09	; 9
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	f8 94       	cli
    11b6:	de bf       	out	0x3e, r29	; 62
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	cd bf       	out	0x3d, r28	; 61
    11bc:	6b 01       	movw	r12, r22
    11be:	8a 01       	movw	r16, r20
    11c0:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    11c2:	90 e8       	ldi	r25, 0x80	; 128
    11c4:	90 93 f2 04 	sts	0x04F2, r25
    11c8:	96 e0       	ldi	r25, 0x06	; 6
    11ca:	90 93 f3 04 	sts	0x04F3, r25
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	01 97       	sbiw	r24, 0x01	; 1
    11d2:	92 60       	ori	r25, 0x02	; 2
    11d4:	90 93 f5 04 	sts	0x04F5, r25
    11d8:	80 93 f4 04 	sts	0x04F4, r24
    11dc:	10 92 f7 04 	sts	0x04F7, r1
    11e0:	10 92 f6 04 	sts	0x04F6, r1
    11e4:	89 e0       	ldi	r24, 0x09	; 9
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	90 93 f9 04 	sts	0x04F9, r25
    11ec:	80 93 f8 04 	sts	0x04F8, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    11f0:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    11f4:	ce 01       	movw	r24, r28
    11f6:	01 96       	adiw	r24, 0x01	; 1
    11f8:	55 d0       	rcall	.+170    	; 0x12a4 <USB_Host_SendControlRequest>
    11fa:	28 2f       	mov	r18, r24
    11fc:	88 23       	and	r24, r24
    11fe:	c1 f4       	brne	.+48     	; 0x1230 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	9c 81       	ldd	r25, Y+4	; 0x04
    1204:	f6 01       	movw	r30, r12
    1206:	91 83       	std	Z+1, r25	; 0x01
    1208:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    120a:	e8 16       	cp	r14, r24
    120c:	f9 06       	cpc	r15, r25
    120e:	10 f4       	brcc	.+4      	; 0x1214 <USB_Host_GetDeviceConfigDescriptor+0x78>
    1210:	25 e0       	ldi	r18, 0x05	; 5
    1212:	0e c0       	rjmp	.+28     	; 0x1230 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    1214:	90 93 f9 04 	sts	0x04F9, r25
    1218:	80 93 f8 04 	sts	0x04F8, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    121c:	c8 01       	movw	r24, r16
    121e:	42 d0       	rcall	.+132    	; 0x12a4 <USB_Host_SendControlRequest>
    1220:	28 2f       	mov	r18, r24
    1222:	88 23       	and	r24, r24
    1224:	29 f4       	brne	.+10     	; 0x1230 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1226:	f8 01       	movw	r30, r16
    1228:	81 81       	ldd	r24, Z+1	; 0x01
    122a:	82 30       	cpi	r24, 0x02	; 2
    122c:	09 f0       	breq	.+2      	; 0x1230 <USB_Host_GetDeviceConfigDescriptor+0x94>
    122e:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    1230:	82 2f       	mov	r24, r18
    1232:	29 96       	adiw	r28, 0x09	; 9
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	1f 91       	pop	r17
    1244:	0f 91       	pop	r16
    1246:	ff 90       	pop	r15
    1248:	ef 90       	pop	r14
    124a:	df 90       	pop	r13
    124c:	cf 90       	pop	r12
    124e:	08 95       	ret

00001250 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1250:	08 95       	ret

00001252 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1252:	1f 93       	push	r17
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    1258:	18 2f       	mov	r17, r24
    125a:	c8 ee       	ldi	r28, 0xE8	; 232
    125c:	d3 e0       	ldi	r29, 0x03	; 3
    125e:	09 c0       	rjmp	.+18     	; 0x1272 <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	87 db       	rcall	.-2290   	; 0x972 <USB_Host_WaitMS>
    1264:	88 23       	and	r24, r24
    1266:	d1 f4       	brne	.+52     	; 0x129c <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1268:	20 97       	sbiw	r28, 0x00	; 0
    126a:	11 f4       	brne	.+4      	; 0x1270 <USB_Host_WaitForIOS+0x1e>
    126c:	84 e0       	ldi	r24, 0x04	; 4
    126e:	16 c0       	rjmp	.+44     	; 0x129c <USB_Host_WaitForIOS+0x4a>
    1270:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1272:	11 23       	and	r17, r17
    1274:	29 f4       	brne	.+10     	; 0x1280 <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1276:	80 91 a6 00 	lds	r24, 0x00A6
    127a:	83 ff       	sbrs	r24, 3
    127c:	f1 cf       	rjmp	.-30     	; 0x1260 <USB_Host_WaitForIOS+0xe>
    127e:	0d c0       	rjmp	.+26     	; 0x129a <USB_Host_WaitForIOS+0x48>
    1280:	11 30       	cpi	r17, 0x01	; 1
    1282:	29 f4       	brne	.+10     	; 0x128e <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1284:	80 91 a6 00 	lds	r24, 0x00A6
    1288:	80 ff       	sbrs	r24, 0
    128a:	ea cf       	rjmp	.-44     	; 0x1260 <USB_Host_WaitForIOS+0xe>
    128c:	06 c0       	rjmp	.+12     	; 0x129a <USB_Host_WaitForIOS+0x48>
    128e:	12 30       	cpi	r17, 0x02	; 2
    1290:	39 f7       	brne	.-50     	; 0x1260 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1292:	80 91 a6 00 	lds	r24, 0x00A6
    1296:	82 ff       	sbrs	r24, 2
    1298:	e3 cf       	rjmp	.-58     	; 0x1260 <USB_Host_WaitForIOS+0xe>
    129a:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
    129c:	df 91       	pop	r29
    129e:	cf 91       	pop	r28
    12a0:	1f 91       	pop	r17
    12a2:	08 95       	ret

000012a4 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    12a4:	ff 92       	push	r15
    12a6:	0f 93       	push	r16
    12a8:	1f 93       	push	r17
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	18 2f       	mov	r17, r24
    12b0:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    12b2:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    12b6:	c0 91 f8 04 	lds	r28, 0x04F8
    12ba:	d0 91 f9 04 	lds	r29, 0x04F9
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    12be:	80 91 9e 00 	lds	r24, 0x009E
    12c2:	81 60       	ori	r24, 0x01	; 1
    12c4:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	53 db       	rcall	.-2394   	; 0x972 <USB_Host_WaitMS>
    12cc:	98 2f       	mov	r25, r24
    12ce:	88 23       	and	r24, r24
    12d0:	09 f0       	breq	.+2      	; 0x12d4 <USB_Host_SendControlRequest+0x30>
    12d2:	ee c0       	rjmp	.+476    	; 0x14b0 <USB_Host_SendControlRequest+0x20c>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    12d4:	80 91 aa 00 	lds	r24, 0x00AA
    12d8:	8f 7c       	andi	r24, 0xCF	; 207
    12da:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    12de:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    12e2:	80 91 a6 00 	lds	r24, 0x00A6
    12e6:	8f 7e       	andi	r24, 0xEF	; 239
    12e8:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    12ec:	80 91 a9 00 	lds	r24, 0x00A9
    12f0:	8f 7b       	andi	r24, 0xBF	; 191
    12f2:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearError();

	Pipe_Unfreeze();

	Pipe_Write_8(USB_ControlRequest.bmRequestType);
    12f6:	80 91 f2 04 	lds	r24, 0x04F2
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    12fa:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
    12fe:	80 91 f3 04 	lds	r24, 0x04F3
    1302:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
    1306:	80 91 f4 04 	lds	r24, 0x04F4
    130a:	90 91 f5 04 	lds	r25, 0x04F5
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    130e:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    1312:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
    1316:	80 91 f6 04 	lds	r24, 0x04F6
    131a:	90 91 f7 04 	lds	r25, 0x04F7
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    131e:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    1322:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
    1326:	80 91 f8 04 	lds	r24, 0x04F8
    132a:	90 91 f9 04 	lds	r25, 0x04F9
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    132e:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    1332:	90 93 af 00 	sts	0x00AF, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1336:	80 91 a6 00 	lds	r24, 0x00A6
    133a:	87 77       	andi	r24, 0x77	; 119
    133c:	80 93 a6 00 	sts	0x00A6, r24

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	87 df       	rcall	.-242    	; 0x1252 <USB_Host_WaitForIOS>
    1344:	98 2f       	mov	r25, r24
    1346:	88 23       	and	r24, r24
    1348:	09 f0       	breq	.+2      	; 0x134c <USB_Host_SendControlRequest+0xa8>
    134a:	b2 c0       	rjmp	.+356    	; 0x14b0 <USB_Host_SendControlRequest+0x20c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    134c:	80 91 a9 00 	lds	r24, 0x00A9
    1350:	80 64       	ori	r24, 0x40	; 64
    1352:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	0c db       	rcall	.-2536   	; 0x972 <USB_Host_WaitMS>
    135a:	98 2f       	mov	r25, r24
    135c:	88 23       	and	r24, r24
    135e:	09 f0       	breq	.+2      	; 0x1362 <USB_Host_SendControlRequest+0xbe>
    1360:	a7 c0       	rjmp	.+334    	; 0x14b0 <USB_Host_SendControlRequest+0x20c>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
    1362:	21 2f       	mov	r18, r17
    1364:	30 2f       	mov	r19, r16
    1366:	c9 01       	movw	r24, r18
    1368:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    136a:	80 91 f2 04 	lds	r24, 0x04F2
    136e:	87 ff       	sbrs	r24, 7
    1370:	52 c0       	rjmp	.+164    	; 0x1416 <USB_Host_SendControlRequest+0x172>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1372:	80 91 aa 00 	lds	r24, 0x00AA
    1376:	8f 7c       	andi	r24, 0xCF	; 207
    1378:	80 61       	ori	r24, 0x10	; 16
    137a:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    137e:	01 15       	cp	r16, r1
    1380:	11 05       	cpc	r17, r1
    1382:	69 f5       	brne	.+90     	; 0x13de <USB_Host_SendControlRequest+0x13a>
    1384:	2e c0       	rjmp	.+92     	; 0x13e2 <USB_Host_SendControlRequest+0x13e>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1386:	80 91 a9 00 	lds	r24, 0x00A9
    138a:	8f 7b       	andi	r24, 0xBF	; 191
    138c:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	5f df       	rcall	.-322    	; 0x1252 <USB_Host_WaitForIOS>
    1394:	98 2f       	mov	r25, r24
    1396:	88 23       	and	r24, r24
    1398:	09 f0       	breq	.+2      	; 0x139c <USB_Host_SendControlRequest+0xf8>
    139a:	8a c0       	rjmp	.+276    	; 0x14b0 <USB_Host_SendControlRequest+0x20c>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    139c:	80 91 f6 00 	lds	r24, 0x00F6
    13a0:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    13a4:	89 2b       	or	r24, r25
    13a6:	49 f4       	brne	.+18     	; 0x13ba <USB_Host_SendControlRequest+0x116>
    13a8:	c0 e0       	ldi	r28, 0x00	; 0
    13aa:	d0 e0       	ldi	r29, 0x00	; 0
    13ac:	06 c0       	rjmp	.+12     	; 0x13ba <USB_Host_SendControlRequest+0x116>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    13ae:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    13b2:	f8 01       	movw	r30, r16
    13b4:	81 93       	st	Z+, r24
    13b6:	8f 01       	movw	r16, r30
					DataLen--;
    13b8:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    13ba:	80 91 f6 00 	lds	r24, 0x00F6
    13be:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    13c2:	89 2b       	or	r24, r25
    13c4:	11 f0       	breq	.+4      	; 0x13ca <USB_Host_SendControlRequest+0x126>
    13c6:	20 97       	sbiw	r28, 0x00	; 0
    13c8:	91 f7       	brne	.-28     	; 0x13ae <USB_Host_SendControlRequest+0x10a>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    13ca:	80 91 a9 00 	lds	r24, 0x00A9
    13ce:	80 64       	ori	r24, 0x40	; 64
    13d0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    13d4:	80 91 a6 00 	lds	r24, 0x00A6
    13d8:	8e 77       	andi	r24, 0x7E	; 126
    13da:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    13de:	20 97       	sbiw	r28, 0x00	; 0
    13e0:	91 f6       	brne	.-92     	; 0x1386 <USB_Host_SendControlRequest+0xe2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    13e2:	80 91 aa 00 	lds	r24, 0x00AA
    13e6:	8f 7c       	andi	r24, 0xCF	; 207
    13e8:	80 62       	ori	r24, 0x20	; 32
    13ea:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    13ee:	80 91 a9 00 	lds	r24, 0x00A9
    13f2:	8f 7b       	andi	r24, 0xBF	; 191
    13f4:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    13f8:	82 e0       	ldi	r24, 0x02	; 2
    13fa:	2b df       	rcall	.-426    	; 0x1252 <USB_Host_WaitForIOS>
    13fc:	98 2f       	mov	r25, r24
    13fe:	88 23       	and	r24, r24
    1400:	09 f0       	breq	.+2      	; 0x1404 <USB_Host_SendControlRequest+0x160>
    1402:	56 c0       	rjmp	.+172    	; 0x14b0 <USB_Host_SendControlRequest+0x20c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1404:	80 91 a6 00 	lds	r24, 0x00A6
    1408:	8b 77       	andi	r24, 0x7B	; 123
    140a:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    140e:	82 e0       	ldi	r24, 0x02	; 2
    1410:	20 df       	rcall	.-448    	; 0x1252 <USB_Host_WaitForIOS>
    1412:	98 2f       	mov	r25, r24
    1414:	4d c0       	rjmp	.+154    	; 0x14b0 <USB_Host_SendControlRequest+0x20c>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    1416:	01 15       	cp	r16, r1
    1418:	11 05       	cpc	r17, r1
    141a:	a9 f1       	breq	.+106    	; 0x1486 <USB_Host_SendControlRequest+0x1e2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    141c:	80 91 aa 00 	lds	r24, 0x00AA
    1420:	8f 7c       	andi	r24, 0xCF	; 207
    1422:	80 62       	ori	r24, 0x20	; 32
    1424:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1428:	80 91 a9 00 	lds	r24, 0x00A9
    142c:	8f 7b       	andi	r24, 0xBF	; 191
    142e:	80 93 a9 00 	sts	0x00A9, r24
    1432:	1d c0       	rjmp	.+58     	; 0x146e <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1434:	82 e0       	ldi	r24, 0x02	; 2
    1436:	0d df       	rcall	.-486    	; 0x1252 <USB_Host_WaitForIOS>
    1438:	98 2f       	mov	r25, r24
    143a:	88 23       	and	r24, r24
    143c:	c9 f5       	brne	.+114    	; 0x14b0 <USB_Host_SendControlRequest+0x20c>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    143e:	80 91 10 01 	lds	r24, 0x0110
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	07 c0       	rjmp	.+14     	; 0x1456 <USB_Host_SendControlRequest+0x1b2>
				{
					Pipe_Write_8(*(DataStream++));
    1448:	f8 01       	movw	r30, r16
    144a:	81 91       	ld	r24, Z+
    144c:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    144e:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1452:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1454:	39 f0       	breq	.+14     	; 0x1464 <USB_Host_SendControlRequest+0x1c0>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1456:	80 91 f6 00 	lds	r24, 0x00F6
    145a:	90 91 f7 00 	lds	r25, 0x00F7
    145e:	82 17       	cp	r24, r18
    1460:	93 07       	cpc	r25, r19
    1462:	90 f3       	brcs	.-28     	; 0x1448 <USB_Host_SendControlRequest+0x1a4>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1464:	80 91 a6 00 	lds	r24, 0x00A6
    1468:	8b 77       	andi	r24, 0x7B	; 123
    146a:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    146e:	20 97       	sbiw	r28, 0x00	; 0
    1470:	09 f7       	brne	.-62     	; 0x1434 <USB_Host_SendControlRequest+0x190>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1472:	82 e0       	ldi	r24, 0x02	; 2
    1474:	ee de       	rcall	.-548    	; 0x1252 <USB_Host_WaitForIOS>
    1476:	98 2f       	mov	r25, r24
    1478:	88 23       	and	r24, r24
    147a:	d1 f4       	brne	.+52     	; 0x14b0 <USB_Host_SendControlRequest+0x20c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    147c:	80 91 a9 00 	lds	r24, 0x00A9
    1480:	80 64       	ori	r24, 0x40	; 64
    1482:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1486:	80 91 aa 00 	lds	r24, 0x00AA
    148a:	8f 7c       	andi	r24, 0xCF	; 207
    148c:	80 61       	ori	r24, 0x10	; 16
    148e:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1492:	80 91 a9 00 	lds	r24, 0x00A9
    1496:	8f 7b       	andi	r24, 0xBF	; 191
    1498:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	d9 de       	rcall	.-590    	; 0x1252 <USB_Host_WaitForIOS>
    14a0:	98 2f       	mov	r25, r24
    14a2:	88 23       	and	r24, r24
    14a4:	29 f4       	brne	.+10     	; 0x14b0 <USB_Host_SendControlRequest+0x20c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    14a6:	80 91 a6 00 	lds	r24, 0x00A6
    14aa:	8e 77       	andi	r24, 0x7E	; 126
    14ac:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    14b0:	80 91 a9 00 	lds	r24, 0x00A9
    14b4:	80 64       	ori	r24, 0x40	; 64
    14b6:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    14ba:	f0 fc       	sbrc	r15, 0
    14bc:	05 c0       	rjmp	.+10     	; 0x14c8 <USB_Host_SendControlRequest+0x224>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    14be:	80 91 9e 00 	lds	r24, 0x009E
    14c2:	8e 7f       	andi	r24, 0xFE	; 254
    14c4:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    14ce:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    14d2:	89 2f       	mov	r24, r25
    14d4:	df 91       	pop	r29
    14d6:	cf 91       	pop	r28
    14d8:	1f 91       	pop	r17
    14da:	0f 91       	pop	r16
    14dc:	ff 90       	pop	r15
    14de:	08 95       	ret

000014e0 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    14e0:	1f 93       	push	r17
    14e2:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    14e4:	10 92 f2 04 	sts	0x04F2, r1
    14e8:	89 e0       	ldi	r24, 0x09	; 9
    14ea:	80 93 f3 04 	sts	0x04F3, r24
    14ee:	10 93 f4 04 	sts	0x04F4, r17
    14f2:	10 92 f5 04 	sts	0x04F5, r1
    14f6:	10 92 f7 04 	sts	0x04F7, r1
    14fa:	10 92 f6 04 	sts	0x04F6, r1
    14fe:	10 92 f9 04 	sts	0x04F9, r1
    1502:	10 92 f8 04 	sts	0x04F8, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1506:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	ca de       	rcall	.-620    	; 0x12a4 <USB_Host_SendControlRequest>
    1510:	88 23       	and	r24, r24
    1512:	49 f4       	brne	.+18     	; 0x1526 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1514:	10 93 f0 04 	sts	0x04F0, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1518:	11 23       	and	r17, r17
    151a:	11 f4       	brne	.+4      	; 0x1520 <USB_Host_SetDeviceConfiguration+0x40>
    151c:	9a e0       	ldi	r25, 0x0A	; 10
    151e:	01 c0       	rjmp	.+2      	; 0x1522 <USB_Host_SetDeviceConfiguration+0x42>
    1520:	9b e0       	ldi	r25, 0x0B	; 11
    1522:	90 93 fa 04 	sts	0x04FA, r25
	}

	return ErrorCode;
}
    1526:	1f 91       	pop	r17
    1528:	08 95       	ret

0000152a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    152a:	ff 92       	push	r15
    152c:	0f 93       	push	r16
    152e:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1530:	07 ea       	ldi	r16, 0xA7	; 167
    1532:	10 e0       	ldi	r17, 0x00	; 0
    1534:	f8 01       	movw	r30, r16
    1536:	f0 80       	ld	r15, Z
    1538:	f7 e0       	ldi	r31, 0x07	; 7
    153a:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    153c:	f8 01       	movw	r30, r16
    153e:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1540:	b5 da       	rcall	.-2710   	; 0xaac <USB_Host_ProcessNextHostState>
    1542:	f8 01       	movw	r30, r16
    1544:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1546:	1f 91       	pop	r17
    1548:	0f 91       	pop	r16
    154a:	ff 90       	pop	r15
    154c:	08 95       	ret

0000154e <USB_GetHIDReportItemInfo>:
	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
    154e:	cf 92       	push	r12
    1550:	df 92       	push	r13
    1552:	ef 92       	push	r14
    1554:	ff 92       	push	r15
    1556:	0f 93       	push	r16
    1558:	1f 93       	push	r17
    155a:	cf 93       	push	r28
    155c:	df 93       	push	r29
    155e:	6c 01       	movw	r12, r24
    1560:	eb 01       	movw	r28, r22
	if (ReportItem == NULL)
		return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
    1562:	28 85       	ldd	r18, Y+8	; 0x08
	uint16_t CurrentBit   = ReportItem->BitOffset;
    1564:	e8 80       	ld	r14, Y
    1566:	f9 80       	ldd	r15, Y+1	; 0x01
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
    1568:	9d 81       	ldd	r25, Y+5	; 0x05
    156a:	99 23       	and	r25, r25
    156c:	49 f0       	breq	.+18     	; 0x1580 <USB_GetHIDReportItemInfo+0x32>
	{
		if (ReportItem->ReportID != ReportData[0])
    156e:	f6 01       	movw	r30, r12
    1570:	80 81       	ld	r24, Z
    1572:	98 17       	cp	r25, r24
    1574:	11 f0       	breq	.+4      	; 0x157a <USB_GetHIDReportItemInfo+0x2c>
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	43 c0       	rjmp	.+134    	; 0x1600 <USB_GetHIDReportItemInfo+0xb2>
		  return false;

		ReportData++;
    157a:	08 94       	sec
    157c:	c1 1c       	adc	r12, r1
    157e:	d1 1c       	adc	r13, r1
                              HID_ReportItem_t* const ReportItem)
{
	if (ReportItem == NULL)
		return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
    1580:	02 2f       	mov	r16, r18
    1582:	10 e0       	ldi	r17, 0x00	; 0
		  return false;

		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
    1584:	8a a1       	ldd	r24, Y+34	; 0x22
    1586:	9b a1       	ldd	r25, Y+35	; 0x23
    1588:	ac a1       	ldd	r26, Y+36	; 0x24
    158a:	bd a1       	ldd	r27, Y+37	; 0x25
    158c:	8e a3       	std	Y+38, r24	; 0x26
    158e:	9f a3       	std	Y+39, r25	; 0x27
    1590:	a8 a7       	std	Y+40, r26	; 0x28
    1592:	b9 a7       	std	Y+41, r27	; 0x29
	ReportItem->Value = 0;
    1594:	1a a2       	std	Y+34, r1	; 0x22
    1596:	1b a2       	std	Y+35, r1	; 0x23
    1598:	1c a2       	std	Y+36, r1	; 0x24
    159a:	1d a2       	std	Y+37, r1	; 0x25
    159c:	41 e0       	ldi	r20, 0x01	; 1
    159e:	50 e0       	ldi	r21, 0x00	; 0
    15a0:	60 e0       	ldi	r22, 0x00	; 0
    15a2:	70 e0       	ldi	r23, 0x00	; 0
    15a4:	29 c0       	rjmp	.+82     	; 0x15f8 <USB_GetHIDReportItemInfo+0xaa>

	while (DataBitsRem--)
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
    15a6:	f7 01       	movw	r30, r14
    15a8:	93 e0       	ldi	r25, 0x03	; 3
    15aa:	f6 95       	lsr	r31
    15ac:	e7 95       	ror	r30
    15ae:	9a 95       	dec	r25
    15b0:	e1 f7       	brne	.-8      	; 0x15aa <USB_GetHIDReportItemInfo+0x5c>
    15b2:	ec 0d       	add	r30, r12
    15b4:	fd 1d       	adc	r31, r13
    15b6:	80 81       	ld	r24, Z
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	97 01       	movw	r18, r14
    15bc:	27 70       	andi	r18, 0x07	; 7
    15be:	30 70       	andi	r19, 0x00	; 0
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <USB_GetHIDReportItemInfo+0x78>
    15c2:	95 95       	asr	r25
    15c4:	87 95       	ror	r24
    15c6:	2a 95       	dec	r18
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <USB_GetHIDReportItemInfo+0x74>
    15ca:	80 ff       	sbrs	r24, 0
    15cc:	0c c0       	rjmp	.+24     	; 0x15e6 <USB_GetHIDReportItemInfo+0x98>
		  ReportItem->Value |= BitMask;
    15ce:	8a a1       	ldd	r24, Y+34	; 0x22
    15d0:	9b a1       	ldd	r25, Y+35	; 0x23
    15d2:	ac a1       	ldd	r26, Y+36	; 0x24
    15d4:	bd a1       	ldd	r27, Y+37	; 0x25
    15d6:	84 2b       	or	r24, r20
    15d8:	95 2b       	or	r25, r21
    15da:	a6 2b       	or	r26, r22
    15dc:	b7 2b       	or	r27, r23
    15de:	8a a3       	std	Y+34, r24	; 0x22
    15e0:	9b a3       	std	Y+35, r25	; 0x23
    15e2:	ac a3       	std	Y+36, r26	; 0x24
    15e4:	bd a3       	std	Y+37, r27	; 0x25

		CurrentBit++;
    15e6:	08 94       	sec
    15e8:	e1 1c       	adc	r14, r1
    15ea:	f1 1c       	adc	r15, r1
		BitMask <<= 1;
    15ec:	44 0f       	add	r20, r20
    15ee:	55 1f       	adc	r21, r21
    15f0:	66 1f       	adc	r22, r22
    15f2:	77 1f       	adc	r23, r23
    15f4:	01 50       	subi	r16, 0x01	; 1
    15f6:	10 40       	sbci	r17, 0x00	; 0
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
    15f8:	01 15       	cp	r16, r1
    15fa:	11 05       	cpc	r17, r1
    15fc:	a1 f6       	brne	.-88     	; 0x15a6 <USB_GetHIDReportItemInfo+0x58>
    15fe:	81 e0       	ldi	r24, 0x01	; 1
		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
}
    1600:	df 91       	pop	r29
    1602:	cf 91       	pop	r28
    1604:	1f 91       	pop	r17
    1606:	0f 91       	pop	r16
    1608:	ff 90       	pop	r15
    160a:	ef 90       	pop	r14
    160c:	df 90       	pop	r13
    160e:	cf 90       	pop	r12
    1610:	08 95       	ret

00001612 <USB_ProcessHIDReport>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
    1612:	2f 92       	push	r2
    1614:	3f 92       	push	r3
    1616:	4f 92       	push	r4
    1618:	5f 92       	push	r5
    161a:	6f 92       	push	r6
    161c:	7f 92       	push	r7
    161e:	8f 92       	push	r8
    1620:	9f 92       	push	r9
    1622:	af 92       	push	r10
    1624:	bf 92       	push	r11
    1626:	cf 92       	push	r12
    1628:	df 92       	push	r13
    162a:	ef 92       	push	r14
    162c:	ff 92       	push	r15
    162e:	0f 93       	push	r16
    1630:	1f 93       	push	r17
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	c5 59       	subi	r28, 0x95	; 149
    163c:	d0 40       	sbci	r29, 0x00	; 0
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	cd bf       	out	0x3d, r28	; 61
    1648:	cf 57       	subi	r28, 0x7F	; 127
    164a:	df 4f       	sbci	r29, 0xFF	; 255
    164c:	99 83       	std	Y+1, r25	; 0x01
    164e:	88 83       	st	Y, r24
    1650:	c1 58       	subi	r28, 0x81	; 129
    1652:	d0 40       	sbci	r29, 0x00	; 0
    1654:	cd 57       	subi	r28, 0x7D	; 125
    1656:	df 4f       	sbci	r29, 0xFF	; 255
    1658:	79 83       	std	Y+1, r23	; 0x01
    165a:	68 83       	st	Y, r22
    165c:	c3 58       	subi	r28, 0x83	; 131
    165e:	d0 40       	sbci	r29, 0x00	; 0
    1660:	1a 01       	movw	r2, r20
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
    1662:	90 e9       	ldi	r25, 0x90	; 144
    1664:	49 2e       	mov	r4, r25
    1666:	93 e0       	ldi	r25, 0x03	; 3
    1668:	59 2e       	mov	r5, r25
    166a:	44 0e       	add	r4, r20
    166c:	55 1e       	adc	r5, r21
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
    166e:	89 ed       	ldi	r24, 0xD9	; 217
    1670:	93 e0       	ldi	r25, 0x03	; 3
    1672:	da 01       	movw	r26, r20
    1674:	fc 01       	movw	r30, r24
    1676:	1d 92       	st	X+, r1
    1678:	31 97       	sbiw	r30, 0x01	; 1
    167a:	e9 f7       	brne	.-6      	; 0x1676 <USB_ProcessHIDReport+0x64>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
    167c:	fe 01       	movw	r30, r28
    167e:	fb 96       	adiw	r30, 0x3b	; 59
    1680:	8c e1       	ldi	r24, 0x1C	; 28
    1682:	df 01       	movw	r26, r30
    1684:	1d 92       	st	X+, r1
    1686:	8a 95       	dec	r24
    1688:	e9 f7       	brne	.-6      	; 0x1684 <USB_ProcessHIDReport+0x72>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
    168a:	87 e0       	ldi	r24, 0x07	; 7
    168c:	d2 01       	movw	r26, r4
    168e:	1d 92       	st	X+, r1
    1690:	8a 95       	dec	r24
    1692:	e9 f7       	brne	.-6      	; 0x168e <USB_ProcessHIDReport+0x7c>

	ParserData->TotalDeviceReports = 1;
    1694:	da 01       	movw	r26, r20
    1696:	a1 57       	subi	r26, 0x71	; 113
    1698:	bc 4f       	sbci	r27, 0xFC	; 252
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	8c 93       	st	X, r24
				UsageMinMax.Maximum = ReportItemData;
				break;
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
    169e:	9a 01       	movw	r18, r20
    16a0:	27 5b       	subi	r18, 0xB7	; 183
    16a2:	3c 4f       	sbci	r19, 0xFC	; 252
    16a4:	e7 96       	adiw	r28, 0x37	; 55
    16a6:	3f af       	std	Y+63, r19	; 0x3f
    16a8:	2e af       	std	Y+62, r18	; 0x3e
    16aa:	e7 97       	sbiw	r28, 0x37	; 55
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
    16ac:	40 5b       	subi	r20, 0xB0	; 176
    16ae:	5c 4f       	sbci	r21, 0xFC	; 252
    16b0:	e5 96       	adiw	r28, 0x35	; 53
    16b2:	5f af       	std	Y+63, r21	; 0x3f
    16b4:	4e af       	std	Y+62, r20	; 0x3e
    16b6:	e5 97       	sbiw	r28, 0x35	; 53

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
    16b8:	c1 01       	movw	r24, r2
    16ba:	88 57       	subi	r24, 0x78	; 120
    16bc:	9c 4f       	sbci	r25, 0xFC	; 252
    16be:	ef 96       	adiw	r28, 0x3f	; 63
    16c0:	9f af       	std	Y+63, r25	; 0x3f
    16c2:	8e af       	std	Y+62, r24	; 0x3e
    16c4:	ef 97       	sbiw	r28, 0x3f	; 63
    16c6:	6f 01       	movw	r12, r30
    16c8:	aa 24       	eor	r10, r10
    16ca:	bb 24       	eor	r11, r11
    16cc:	ed 96       	adiw	r28, 0x3d	; 61
    16ce:	1f ae       	std	Y+63, r1	; 0x3f
    16d0:	ed 97       	sbiw	r28, 0x3d	; 61
    16d2:	eb 96       	adiw	r28, 0x3b	; 59
    16d4:	1c ae       	std	Y+60, r1	; 0x3c
    16d6:	1d ae       	std	Y+61, r1	; 0x3d
    16d8:	1e ae       	std	Y+62, r1	; 0x3e
    16da:	1f ae       	std	Y+63, r1	; 0x3f
    16dc:	eb 97       	sbiw	r28, 0x3b	; 59
    16de:	66 24       	eor	r6, r6
    16e0:	77 24       	eor	r7, r7
    16e2:	43 01       	movw	r8, r6

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					if (ParserData->LargestReportSizeBits < NewReportItem.BitOffset)
    16e4:	f1 01       	movw	r30, r2
    16e6:	ea 52       	subi	r30, 0x2A	; 42
    16e8:	fc 4f       	sbci	r31, 0xFC	; 252
    16ea:	c6 57       	subi	r28, 0x76	; 118
    16ec:	df 4f       	sbci	r29, 0xFF	; 255
    16ee:	f9 83       	std	Y+1, r31	; 0x01
    16f0:	e8 83       	st	Y, r30
    16f2:	ca 58       	subi	r28, 0x8A	; 138
    16f4:	d0 40       	sbci	r29, 0x00	; 0
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
    16f6:	cc 56       	subi	r28, 0x6C	; 108
    16f8:	df 4f       	sbci	r29, 0xFF	; 255
    16fa:	d9 82       	std	Y+1, r13	; 0x01
    16fc:	c8 82       	st	Y, r12
    16fe:	c4 59       	subi	r28, 0x94	; 148
    1700:	d0 40       	sbci	r29, 0x00	; 0
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
    1702:	96 01       	movw	r18, r12
    1704:	24 5e       	subi	r18, 0xE4	; 228
    1706:	3f 4f       	sbci	r19, 0xFF	; 255
    1708:	c4 57       	subi	r28, 0x74	; 116
    170a:	df 4f       	sbci	r29, 0xFF	; 255
    170c:	39 83       	std	Y+1, r19	; 0x01
    170e:	28 83       	st	Y, r18
    1710:	cc 58       	subi	r28, 0x8C	; 140
    1712:	d0 40       	sbci	r29, 0x00	; 0
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
    1714:	a1 01       	movw	r20, r2
    1716:	48 52       	subi	r20, 0x28	; 40
    1718:	5c 4f       	sbci	r21, 0xFC	; 252
    171a:	c2 57       	subi	r28, 0x72	; 114
    171c:	df 4f       	sbci	r29, 0xFF	; 255
    171e:	59 83       	std	Y+1, r21	; 0x01
    1720:	48 83       	st	Y, r20
    1722:	ce 58       	subi	r28, 0x8E	; 142
    1724:	d0 40       	sbci	r29, 0x00	; 0
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    1726:	c0 57       	subi	r28, 0x70	; 112
    1728:	df 4f       	sbci	r29, 0xFF	; 255
    172a:	b9 83       	std	Y+1, r27	; 0x01
    172c:	a8 83       	st	Y, r26
    172e:	c0 59       	subi	r28, 0x90	; 144
    1730:	d0 40       	sbci	r29, 0x00	; 0
    1732:	c2 01       	movw	r24, r4
    1734:	ce 56       	subi	r28, 0x6E	; 110
    1736:	df 4f       	sbci	r29, 0xFF	; 255
    1738:	48 82       	st	Y, r4
    173a:	c2 59       	subi	r28, 0x92	; 146
    173c:	d0 40       	sbci	r29, 0x00	; 0
    173e:	cd 56       	subi	r28, 0x6D	; 109
    1740:	df 4f       	sbci	r29, 0xFF	; 255
    1742:	98 83       	st	Y, r25
    1744:	c3 59       	subi	r28, 0x93	; 147
    1746:	d0 40       	sbci	r29, 0x00	; 0
    1748:	32 c3       	rjmp	.+1636   	; 0x1dae <USB_ProcessHIDReport+0x79c>

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
    174a:	cf 57       	subi	r28, 0x7F	; 127
    174c:	df 4f       	sbci	r29, 0xFF	; 255
    174e:	a8 81       	ld	r26, Y
    1750:	b9 81       	ldd	r27, Y+1	; 0x01
    1752:	c1 58       	subi	r28, 0x81	; 129
    1754:	d0 40       	sbci	r29, 0x00	; 0
    1756:	4d 91       	ld	r20, X+
    1758:	cf 57       	subi	r28, 0x7F	; 127
    175a:	df 4f       	sbci	r29, 0xFF	; 255
    175c:	b9 83       	std	Y+1, r27	; 0x01
    175e:	a8 83       	st	Y, r26
    1760:	c1 58       	subi	r28, 0x81	; 129
    1762:	d0 40       	sbci	r29, 0x00	; 0
		uint32_t ReportItemData = 0;

		ReportData++;
		ReportSize--;
    1764:	cd 57       	subi	r28, 0x7D	; 125
    1766:	df 4f       	sbci	r29, 0xFF	; 255
    1768:	e8 81       	ld	r30, Y
    176a:	f9 81       	ldd	r31, Y+1	; 0x01
    176c:	c3 58       	subi	r28, 0x83	; 131
    176e:	d0 40       	sbci	r29, 0x00	; 0
    1770:	31 97       	sbiw	r30, 0x01	; 1
    1772:	cd 57       	subi	r28, 0x7D	; 125
    1774:	df 4f       	sbci	r29, 0xFF	; 255
    1776:	f9 83       	std	Y+1, r31	; 0x01
    1778:	e8 83       	st	Y, r30
    177a:	c3 58       	subi	r28, 0x83	; 131
    177c:	d0 40       	sbci	r29, 0x00	; 0

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
    177e:	24 2f       	mov	r18, r20
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	c1 58       	subi	r28, 0x81	; 129
    1784:	df 4f       	sbci	r29, 0xFF	; 255
    1786:	39 83       	std	Y+1, r19	; 0x01
    1788:	28 83       	st	Y, r18
    178a:	cf 57       	subi	r28, 0x7F	; 127
    178c:	d0 40       	sbci	r29, 0x00	; 0
    178e:	23 70       	andi	r18, 0x03	; 3
    1790:	30 70       	andi	r19, 0x00	; 0
    1792:	22 30       	cpi	r18, 0x02	; 2
    1794:	31 05       	cpc	r19, r1
    1796:	11 f1       	breq	.+68     	; 0x17dc <USB_ProcessHIDReport+0x1ca>
    1798:	23 30       	cpi	r18, 0x03	; 3
    179a:	31 05       	cpc	r19, r1
    179c:	39 f0       	breq	.+14     	; 0x17ac <USB_ProcessHIDReport+0x19a>
    179e:	21 30       	cpi	r18, 0x01	; 1
    17a0:	31 05       	cpc	r19, r1
    17a2:	a9 f1       	breq	.+106    	; 0x180e <USB_ProcessHIDReport+0x1fc>
    17a4:	ee 24       	eor	r14, r14
    17a6:	ff 24       	eor	r15, r15
    17a8:	87 01       	movw	r16, r14
    17aa:	4f c0       	rjmp	.+158    	; 0x184a <USB_ProcessHIDReport+0x238>
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = le32_to_cpu(*((uint32_t*)ReportData));
    17ac:	cf 57       	subi	r28, 0x7F	; 127
    17ae:	df 4f       	sbci	r29, 0xFF	; 255
    17b0:	a8 81       	ld	r26, Y
    17b2:	b9 81       	ldd	r27, Y+1	; 0x01
    17b4:	c1 58       	subi	r28, 0x81	; 129
    17b6:	d0 40       	sbci	r29, 0x00	; 0
    17b8:	ed 90       	ld	r14, X+
    17ba:	fd 90       	ld	r15, X+
    17bc:	0d 91       	ld	r16, X+
    17be:	1d 91       	ld	r17, X+
    17c0:	cf 57       	subi	r28, 0x7F	; 127
    17c2:	df 4f       	sbci	r29, 0xFF	; 255
    17c4:	b9 83       	std	Y+1, r27	; 0x01
    17c6:	a8 83       	st	Y, r26
    17c8:	c1 58       	subi	r28, 0x81	; 129
    17ca:	d0 40       	sbci	r29, 0x00	; 0
				ReportSize     -= 4;
    17cc:	cd 57       	subi	r28, 0x7D	; 125
    17ce:	df 4f       	sbci	r29, 0xFF	; 255
    17d0:	e8 81       	ld	r30, Y
    17d2:	f9 81       	ldd	r31, Y+1	; 0x01
    17d4:	c3 58       	subi	r28, 0x83	; 131
    17d6:	d0 40       	sbci	r29, 0x00	; 0
    17d8:	34 97       	sbiw	r30, 0x04	; 4
    17da:	31 c0       	rjmp	.+98     	; 0x183e <USB_ProcessHIDReport+0x22c>
				ReportData     += 4;
				break;
			case HID_RI_DATA_BITS_16:
				ReportItemData  = le16_to_cpu(*((uint16_t*)ReportData));
    17dc:	cf 57       	subi	r28, 0x7F	; 127
    17de:	df 4f       	sbci	r29, 0xFF	; 255
    17e0:	a8 81       	ld	r26, Y
    17e2:	b9 81       	ldd	r27, Y+1	; 0x01
    17e4:	c1 58       	subi	r28, 0x81	; 129
    17e6:	d0 40       	sbci	r29, 0x00	; 0
    17e8:	8d 91       	ld	r24, X+
    17ea:	9d 91       	ld	r25, X+
    17ec:	cf 57       	subi	r28, 0x7F	; 127
    17ee:	df 4f       	sbci	r29, 0xFF	; 255
    17f0:	b9 83       	std	Y+1, r27	; 0x01
    17f2:	a8 83       	st	Y, r26
    17f4:	c1 58       	subi	r28, 0x81	; 129
    17f6:	d0 40       	sbci	r29, 0x00	; 0
    17f8:	7c 01       	movw	r14, r24
    17fa:	00 e0       	ldi	r16, 0x00	; 0
    17fc:	10 e0       	ldi	r17, 0x00	; 0
				ReportSize     -= 2;
    17fe:	cd 57       	subi	r28, 0x7D	; 125
    1800:	df 4f       	sbci	r29, 0xFF	; 255
    1802:	e8 81       	ld	r30, Y
    1804:	f9 81       	ldd	r31, Y+1	; 0x01
    1806:	c3 58       	subi	r28, 0x83	; 131
    1808:	d0 40       	sbci	r29, 0x00	; 0
    180a:	32 97       	sbiw	r30, 0x02	; 2
    180c:	18 c0       	rjmp	.+48     	; 0x183e <USB_ProcessHIDReport+0x22c>
				ReportData     += 2;
				break;
			case HID_RI_DATA_BITS_8:
				ReportItemData  = *((uint8_t*)ReportData);
    180e:	cf 57       	subi	r28, 0x7F	; 127
    1810:	df 4f       	sbci	r29, 0xFF	; 255
    1812:	a8 81       	ld	r26, Y
    1814:	b9 81       	ldd	r27, Y+1	; 0x01
    1816:	c1 58       	subi	r28, 0x81	; 129
    1818:	d0 40       	sbci	r29, 0x00	; 0
    181a:	8d 91       	ld	r24, X+
    181c:	cf 57       	subi	r28, 0x7F	; 127
    181e:	df 4f       	sbci	r29, 0xFF	; 255
    1820:	b9 83       	std	Y+1, r27	; 0x01
    1822:	a8 83       	st	Y, r26
    1824:	c1 58       	subi	r28, 0x81	; 129
    1826:	d0 40       	sbci	r29, 0x00	; 0
    1828:	e8 2e       	mov	r14, r24
    182a:	ff 24       	eor	r15, r15
    182c:	00 e0       	ldi	r16, 0x00	; 0
    182e:	10 e0       	ldi	r17, 0x00	; 0
				ReportSize     -= 1;
    1830:	cd 57       	subi	r28, 0x7D	; 125
    1832:	df 4f       	sbci	r29, 0xFF	; 255
    1834:	e8 81       	ld	r30, Y
    1836:	f9 81       	ldd	r31, Y+1	; 0x01
    1838:	c3 58       	subi	r28, 0x83	; 131
    183a:	d0 40       	sbci	r29, 0x00	; 0
    183c:	31 97       	sbiw	r30, 0x01	; 1
    183e:	cd 57       	subi	r28, 0x7D	; 125
    1840:	df 4f       	sbci	r29, 0xFF	; 255
    1842:	f9 83       	std	Y+1, r31	; 0x01
    1844:	e8 83       	st	Y, r30
    1846:	c3 58       	subi	r28, 0x83	; 131
    1848:	d0 40       	sbci	r29, 0x00	; 0
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
    184a:	c1 58       	subi	r28, 0x81	; 129
    184c:	df 4f       	sbci	r29, 0xFF	; 255
    184e:	88 81       	ld	r24, Y
    1850:	99 81       	ldd	r25, Y+1	; 0x01
    1852:	cf 57       	subi	r28, 0x7F	; 127
    1854:	d0 40       	sbci	r29, 0x00	; 0
    1856:	8c 7f       	andi	r24, 0xFC	; 252
    1858:	90 70       	andi	r25, 0x00	; 0
    185a:	84 36       	cpi	r24, 0x64	; 100
    185c:	91 05       	cpc	r25, r1
    185e:	09 f4       	brne	.+2      	; 0x1862 <USB_ProcessHIDReport+0x250>
    1860:	db c0       	rjmp	.+438    	; 0x1a18 <USB_ProcessHIDReport+0x406>
    1862:	85 36       	cpi	r24, 0x65	; 101
    1864:	91 05       	cpc	r25, r1
    1866:	74 f5       	brge	.+92     	; 0x18c4 <USB_ProcessHIDReport+0x2b2>
    1868:	84 32       	cpi	r24, 0x24	; 36
    186a:	91 05       	cpc	r25, r1
    186c:	09 f4       	brne	.+2      	; 0x1870 <USB_ProcessHIDReport+0x25e>
    186e:	bb c0       	rjmp	.+374    	; 0x19e6 <USB_ProcessHIDReport+0x3d4>
    1870:	85 32       	cpi	r24, 0x25	; 37
    1872:	91 05       	cpc	r25, r1
    1874:	9c f4       	brge	.+38     	; 0x189c <USB_ProcessHIDReport+0x28a>
    1876:	88 30       	cpi	r24, 0x08	; 8
    1878:	91 05       	cpc	r25, r1
    187a:	09 f4       	brne	.+2      	; 0x187e <USB_ProcessHIDReport+0x26c>
    187c:	37 c1       	rjmp	.+622    	; 0x1aec <USB_ProcessHIDReport+0x4da>
    187e:	89 30       	cpi	r24, 0x09	; 9
    1880:	91 05       	cpc	r25, r1
    1882:	24 f4       	brge	.+8      	; 0x188c <USB_ProcessHIDReport+0x27a>
    1884:	04 97       	sbiw	r24, 0x04	; 4
    1886:	09 f0       	breq	.+2      	; 0x188a <USB_ProcessHIDReport+0x278>
    1888:	7a c2       	rjmp	.+1268   	; 0x1d7e <USB_ProcessHIDReport+0x76c>
    188a:	98 c0       	rjmp	.+304    	; 0x19bc <USB_ProcessHIDReport+0x3aa>
    188c:	84 31       	cpi	r24, 0x14	; 20
    188e:	91 05       	cpc	r25, r1
    1890:	09 f4       	brne	.+2      	; 0x1894 <USB_ProcessHIDReport+0x282>
    1892:	a3 c0       	rjmp	.+326    	; 0x19da <USB_ProcessHIDReport+0x3c8>
    1894:	48 97       	sbiw	r24, 0x18	; 24
    1896:	09 f0       	breq	.+2      	; 0x189a <USB_ProcessHIDReport+0x288>
    1898:	72 c2       	rjmp	.+1252   	; 0x1d7e <USB_ProcessHIDReport+0x76c>
    189a:	47 c0       	rjmp	.+142    	; 0x192a <USB_ProcessHIDReport+0x318>
    189c:	84 33       	cpi	r24, 0x34	; 52
    189e:	91 05       	cpc	r25, r1
    18a0:	09 f4       	brne	.+2      	; 0x18a4 <USB_ProcessHIDReport+0x292>
    18a2:	a9 c0       	rjmp	.+338    	; 0x19f6 <USB_ProcessHIDReport+0x3e4>
    18a4:	85 33       	cpi	r24, 0x35	; 53
    18a6:	91 05       	cpc	r25, r1
    18a8:	24 f4       	brge	.+8      	; 0x18b2 <USB_ProcessHIDReport+0x2a0>
    18aa:	88 97       	sbiw	r24, 0x28	; 40
    18ac:	09 f0       	breq	.+2      	; 0x18b0 <USB_ProcessHIDReport+0x29e>
    18ae:	67 c2       	rjmp	.+1230   	; 0x1d7e <USB_ProcessHIDReport+0x76c>
    18b0:	38 c1       	rjmp	.+624    	; 0x1b22 <USB_ProcessHIDReport+0x510>
    18b2:	84 34       	cpi	r24, 0x44	; 68
    18b4:	91 05       	cpc	r25, r1
    18b6:	09 f4       	brne	.+2      	; 0x18ba <USB_ProcessHIDReport+0x2a8>
    18b8:	a4 c0       	rjmp	.+328    	; 0x1a02 <USB_ProcessHIDReport+0x3f0>
    18ba:	84 35       	cpi	r24, 0x54	; 84
    18bc:	91 05       	cpc	r25, r1
    18be:	09 f0       	breq	.+2      	; 0x18c2 <USB_ProcessHIDReport+0x2b0>
    18c0:	5e c2       	rjmp	.+1212   	; 0x1d7e <USB_ProcessHIDReport+0x76c>
    18c2:	a7 c0       	rjmp	.+334    	; 0x1a12 <USB_ProcessHIDReport+0x400>
    18c4:	84 39       	cpi	r24, 0x94	; 148
    18c6:	91 05       	cpc	r25, r1
    18c8:	09 f4       	brne	.+2      	; 0x18cc <USB_ProcessHIDReport+0x2ba>
    18ca:	b1 c0       	rjmp	.+354    	; 0x1a2e <USB_ProcessHIDReport+0x41c>
    18cc:	85 39       	cpi	r24, 0x95	; 149
    18ce:	91 05       	cpc	r25, r1
    18d0:	a4 f4       	brge	.+40     	; 0x18fa <USB_ProcessHIDReport+0x2e8>
    18d2:	80 38       	cpi	r24, 0x80	; 128
    18d4:	91 05       	cpc	r25, r1
    18d6:	69 f1       	breq	.+90     	; 0x1932 <USB_ProcessHIDReport+0x320>
    18d8:	81 38       	cpi	r24, 0x81	; 129
    18da:	91 05       	cpc	r25, r1
    18dc:	2c f4       	brge	.+10     	; 0x18e8 <USB_ProcessHIDReport+0x2d6>
    18de:	84 37       	cpi	r24, 0x74	; 116
    18e0:	91 05       	cpc	r25, r1
    18e2:	09 f0       	breq	.+2      	; 0x18e6 <USB_ProcessHIDReport+0x2d4>
    18e4:	4c c2       	rjmp	.+1176   	; 0x1d7e <USB_ProcessHIDReport+0x76c>
    18e6:	a0 c0       	rjmp	.+320    	; 0x1a28 <USB_ProcessHIDReport+0x416>
    18e8:	84 38       	cpi	r24, 0x84	; 132
    18ea:	91 05       	cpc	r25, r1
    18ec:	09 f4       	brne	.+2      	; 0x18f0 <USB_ProcessHIDReport+0x2de>
    18ee:	a3 c0       	rjmp	.+326    	; 0x1a36 <USB_ProcessHIDReport+0x424>
    18f0:	80 39       	cpi	r24, 0x90	; 144
    18f2:	91 05       	cpc	r25, r1
    18f4:	09 f0       	breq	.+2      	; 0x18f8 <USB_ProcessHIDReport+0x2e6>
    18f6:	43 c2       	rjmp	.+1158   	; 0x1d7e <USB_ProcessHIDReport+0x76c>
    18f8:	1c c0       	rjmp	.+56     	; 0x1932 <USB_ProcessHIDReport+0x320>
    18fa:	80 3b       	cpi	r24, 0xB0	; 176
    18fc:	91 05       	cpc	r25, r1
    18fe:	c9 f0       	breq	.+50     	; 0x1932 <USB_ProcessHIDReport+0x320>
    1900:	81 3b       	cpi	r24, 0xB1	; 177
    1902:	91 05       	cpc	r25, r1
    1904:	4c f4       	brge	.+18     	; 0x1918 <USB_ProcessHIDReport+0x306>
    1906:	80 3a       	cpi	r24, 0xA0	; 160
    1908:	91 05       	cpc	r25, r1
    190a:	09 f4       	brne	.+2      	; 0x190e <USB_ProcessHIDReport+0x2fc>
    190c:	12 c1       	rjmp	.+548    	; 0x1b32 <USB_ProcessHIDReport+0x520>
    190e:	84 3a       	cpi	r24, 0xA4	; 164
    1910:	91 05       	cpc	r25, r1
    1912:	09 f0       	breq	.+2      	; 0x1916 <USB_ProcessHIDReport+0x304>
    1914:	34 c2       	rjmp	.+1128   	; 0x1d7e <USB_ProcessHIDReport+0x76c>
    1916:	2a c0       	rjmp	.+84     	; 0x196c <USB_ProcessHIDReport+0x35a>
    1918:	84 3b       	cpi	r24, 0xB4	; 180
    191a:	91 05       	cpc	r25, r1
    191c:	09 f4       	brne	.+2      	; 0x1920 <USB_ProcessHIDReport+0x30e>
    191e:	3e c0       	rjmp	.+124    	; 0x199c <USB_ProcessHIDReport+0x38a>
    1920:	80 3c       	cpi	r24, 0xC0	; 192
    1922:	91 05       	cpc	r25, r1
    1924:	09 f0       	breq	.+2      	; 0x1928 <USB_ProcessHIDReport+0x316>
    1926:	2b c2       	rjmp	.+1110   	; 0x1d7e <USB_ProcessHIDReport+0x76c>
    1928:	63 c1       	rjmp	.+710    	; 0x1bf0 <USB_ProcessHIDReport+0x5de>
    192a:	f5 01       	movw	r30, r10
    192c:	37 01       	movw	r6, r14
    192e:	48 01       	movw	r8, r16
    1930:	27 c2       	rjmp	.+1102   	; 0x1d80 <USB_ProcessHIDReport+0x76e>
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
    1932:	cb 57       	subi	r28, 0x7B	; 123
    1934:	df 4f       	sbci	r29, 0xFF	; 255
    1936:	c8 82       	st	Y, r12
    1938:	c5 58       	subi	r28, 0x85	; 133
    193a:	d0 40       	sbci	r29, 0x00	; 0
    193c:	ca 57       	subi	r28, 0x7A	; 122
    193e:	df 4f       	sbci	r29, 0xFF	; 255
    1940:	d8 82       	st	Y, r13
    1942:	c6 58       	subi	r28, 0x86	; 134
    1944:	d0 40       	sbci	r29, 0x00	; 0
    1946:	ec 96       	adiw	r28, 0x3c	; 60
    1948:	1f ae       	std	Y+63, r1	; 0x3f
    194a:	ec 97       	sbiw	r28, 0x3c	; 60
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));
    194c:	4c 7f       	andi	r20, 0xFC	; 252
    194e:	c9 57       	subi	r28, 0x79	; 121
    1950:	df 4f       	sbci	r29, 0xFF	; 255
    1952:	48 83       	st	Y, r20
    1954:	c7 58       	subi	r28, 0x87	; 135
    1956:	d0 40       	sbci	r29, 0x00	; 0
					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					if (ParserData->LargestReportSizeBits < NewReportItem.BitOffset)
					  ParserData->LargestReportSizeBits = NewReportItem.BitOffset;

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    1958:	97 01       	movw	r18, r14
    195a:	21 70       	andi	r18, 0x01	; 1
    195c:	30 70       	andi	r19, 0x00	; 0
    195e:	c8 57       	subi	r28, 0x78	; 120
    1960:	df 4f       	sbci	r29, 0xFF	; 255
    1962:	39 83       	std	Y+1, r19	; 0x01
    1964:	28 83       	st	Y, r18
    1966:	c8 58       	subi	r28, 0x88	; 136
    1968:	d0 40       	sbci	r29, 0x00	; 0
    196a:	00 c2       	rjmp	.+1024   	; 0x1d6c <USB_ProcessHIDReport+0x75a>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
    196c:	c4 57       	subi	r28, 0x74	; 116
    196e:	df 4f       	sbci	r29, 0xFF	; 255
    1970:	48 81       	ld	r20, Y
    1972:	59 81       	ldd	r21, Y+1	; 0x01
    1974:	cc 58       	subi	r28, 0x8C	; 140
    1976:	d0 40       	sbci	r29, 0x00	; 0
    1978:	c4 16       	cp	r12, r20
    197a:	d5 06       	cpc	r13, r21
    197c:	11 f4       	brne	.+4      	; 0x1982 <USB_ProcessHIDReport+0x370>
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	26 c2       	rjmp	.+1100   	; 0x1dce <USB_ProcessHIDReport+0x7bc>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
    1982:	d6 01       	movw	r26, r12
    1984:	5c 96       	adiw	r26, 0x1c	; 28
    1986:	f6 01       	movw	r30, r12
    1988:	8a e2       	ldi	r24, 0x2A	; 42
    198a:	01 90       	ld	r0, Z+
    198c:	0d 92       	st	X+, r0
    198e:	81 50       	subi	r24, 0x01	; 1
    1990:	e1 f7       	brne	.-8      	; 0x198a <USB_ProcessHIDReport+0x378>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
    1992:	8c e1       	ldi	r24, 0x1C	; 28
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	c8 0e       	add	r12, r24
    1998:	d9 1e       	adc	r13, r25
    199a:	f1 c1       	rjmp	.+994    	; 0x1d7e <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
    199c:	cc 56       	subi	r28, 0x6C	; 108
    199e:	df 4f       	sbci	r29, 0xFF	; 255
    19a0:	a8 81       	ld	r26, Y
    19a2:	b9 81       	ldd	r27, Y+1	; 0x01
    19a4:	c4 59       	subi	r28, 0x94	; 148
    19a6:	d0 40       	sbci	r29, 0x00	; 0
    19a8:	ca 16       	cp	r12, r26
    19aa:	db 06       	cpc	r13, r27
    19ac:	11 f4       	brne	.+4      	; 0x19b2 <USB_ProcessHIDReport+0x3a0>
    19ae:	82 e0       	ldi	r24, 0x02	; 2
    19b0:	0e c2       	rjmp	.+1052   	; 0x1dce <USB_ProcessHIDReport+0x7bc>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
    19b2:	e4 ee       	ldi	r30, 0xE4	; 228
    19b4:	ff ef       	ldi	r31, 0xFF	; 255
    19b6:	ce 0e       	add	r12, r30
    19b8:	df 1e       	adc	r13, r31
    19ba:	e1 c1       	rjmp	.+962    	; 0x1d7e <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
    19bc:	23 30       	cpi	r18, 0x03	; 3
    19be:	31 05       	cpc	r19, r1
    19c0:	31 f4       	brne	.+12     	; 0x19ce <USB_ProcessHIDReport+0x3bc>
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);
    19c2:	c8 01       	movw	r24, r16
    19c4:	aa 27       	eor	r26, r26
    19c6:	bb 27       	eor	r27, r27
    19c8:	f6 01       	movw	r30, r12
    19ca:	92 83       	std	Z+2, r25	; 0x02
    19cc:	81 83       	std	Z+1, r24	; 0x01
				
				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
    19ce:	d6 01       	movw	r26, r12
    19d0:	12 96       	adiw	r26, 0x02	; 2
    19d2:	fc 92       	st	X, r15
    19d4:	ee 92       	st	-X, r14
    19d6:	11 97       	sbiw	r26, 0x01	; 1
    19d8:	d2 c1       	rjmp	.+932    	; 0x1d7e <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
    19da:	f6 01       	movw	r30, r12
    19dc:	e2 86       	std	Z+10, r14	; 0x0a
    19de:	f3 86       	std	Z+11, r15	; 0x0b
    19e0:	04 87       	std	Z+12, r16	; 0x0c
    19e2:	15 87       	std	Z+13, r17	; 0x0d
    19e4:	cc c1       	rjmp	.+920    	; 0x1d7e <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
    19e6:	d6 01       	movw	r26, r12
    19e8:	1e 96       	adiw	r26, 0x0e	; 14
    19ea:	ed 92       	st	X+, r14
    19ec:	fd 92       	st	X+, r15
    19ee:	0d 93       	st	X+, r16
    19f0:	1c 93       	st	X, r17
    19f2:	51 97       	sbiw	r26, 0x11	; 17
    19f4:	c4 c1       	rjmp	.+904    	; 0x1d7e <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
    19f6:	f6 01       	movw	r30, r12
    19f8:	e2 8a       	std	Z+18, r14	; 0x12
    19fa:	f3 8a       	std	Z+19, r15	; 0x13
    19fc:	04 8b       	std	Z+20, r16	; 0x14
    19fe:	15 8b       	std	Z+21, r17	; 0x15
    1a00:	be c1       	rjmp	.+892    	; 0x1d7e <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
    1a02:	d6 01       	movw	r26, r12
    1a04:	56 96       	adiw	r26, 0x16	; 22
    1a06:	ed 92       	st	X+, r14
    1a08:	fd 92       	st	X+, r15
    1a0a:	0d 93       	st	X+, r16
    1a0c:	1c 93       	st	X, r17
    1a0e:	59 97       	sbiw	r26, 0x19	; 25
    1a10:	b6 c1       	rjmp	.+876    	; 0x1d7e <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
    1a12:	f6 01       	movw	r30, r12
    1a14:	e1 86       	std	Z+9, r14	; 0x09
    1a16:	b3 c1       	rjmp	.+870    	; 0x1d7e <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
    1a18:	d6 01       	movw	r26, r12
    1a1a:	15 96       	adiw	r26, 0x05	; 5
    1a1c:	ed 92       	st	X+, r14
    1a1e:	fd 92       	st	X+, r15
    1a20:	0d 93       	st	X+, r16
    1a22:	1c 93       	st	X, r17
    1a24:	18 97       	sbiw	r26, 0x08	; 8
    1a26:	ab c1       	rjmp	.+854    	; 0x1d7e <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
    1a28:	f6 01       	movw	r30, r12
    1a2a:	e0 82       	st	Z, r14
    1a2c:	a8 c1       	rjmp	.+848    	; 0x1d7e <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
    1a2e:	d6 01       	movw	r26, r12
    1a30:	5a 96       	adiw	r26, 0x1a	; 26
    1a32:	ec 92       	st	X, r14
    1a34:	a4 c1       	rjmp	.+840    	; 0x1d7e <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
    1a36:	3e 2d       	mov	r19, r14
    1a38:	f6 01       	movw	r30, r12
    1a3a:	e3 8e       	std	Z+27, r14	; 0x1b

				if (ParserData->UsingReportIDs)
    1a3c:	c2 57       	subi	r28, 0x72	; 114
    1a3e:	df 4f       	sbci	r29, 0xFF	; 255
    1a40:	a8 81       	ld	r26, Y
    1a42:	b9 81       	ldd	r27, Y+1	; 0x01
    1a44:	ce 58       	subi	r28, 0x8E	; 142
    1a46:	d0 40       	sbci	r29, 0x00	; 0
    1a48:	8c 91       	ld	r24, X
    1a4a:	88 23       	and	r24, r24
    1a4c:	09 f4       	brne	.+2      	; 0x1a50 <USB_ProcessHIDReport+0x43e>
    1a4e:	40 c0       	rjmp	.+128    	; 0x1ad0 <USB_ProcessHIDReport+0x4be>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    1a50:	c0 57       	subi	r28, 0x70	; 112
    1a52:	df 4f       	sbci	r29, 0xFF	; 255
    1a54:	e8 81       	ld	r30, Y
    1a56:	f9 81       	ldd	r31, Y+1	; 0x01
    1a58:	c0 59       	subi	r28, 0x90	; 144
    1a5a:	d0 40       	sbci	r29, 0x00	; 0
    1a5c:	20 81       	ld	r18, Z
    1a5e:	ce 56       	subi	r28, 0x6E	; 110
    1a60:	df 4f       	sbci	r29, 0xFF	; 255
    1a62:	88 81       	ld	r24, Y
    1a64:	c2 59       	subi	r28, 0x92	; 146
    1a66:	d0 40       	sbci	r29, 0x00	; 0
    1a68:	cd 56       	subi	r28, 0x6D	; 109
    1a6a:	df 4f       	sbci	r29, 0xFF	; 255
    1a6c:	98 81       	ld	r25, Y
    1a6e:	c3 59       	subi	r28, 0x93	; 147
    1a70:	d0 40       	sbci	r29, 0x00	; 0
    1a72:	dc 01       	movw	r26, r24
    1a74:	e0 e0       	ldi	r30, 0x00	; 0
    1a76:	10 c0       	rjmp	.+32     	; 0x1a98 <USB_ProcessHIDReport+0x486>
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
    1a78:	8c 91       	ld	r24, X
    1a7a:	17 96       	adiw	r26, 0x07	; 7
    1a7c:	83 17       	cp	r24, r19
    1a7e:	59 f4       	brne	.+22     	; 0x1a96 <USB_ProcessHIDReport+0x484>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
    1a80:	87 e0       	ldi	r24, 0x07	; 7
    1a82:	e8 9f       	mul	r30, r24
    1a84:	20 01       	movw	r4, r0
    1a86:	11 24       	eor	r1, r1
    1a88:	20 e9       	ldi	r18, 0x90	; 144
    1a8a:	33 e0       	ldi	r19, 0x03	; 3
    1a8c:	42 0e       	add	r4, r18
    1a8e:	53 1e       	adc	r5, r19
    1a90:	42 0c       	add	r4, r2
    1a92:	53 1c       	adc	r5, r3
    1a94:	1d c0       	rjmp	.+58     	; 0x1ad0 <USB_ProcessHIDReport+0x4be>

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    1a96:	ef 5f       	subi	r30, 0xFF	; 255
    1a98:	e2 17       	cp	r30, r18
    1a9a:	70 f3       	brcs	.-36     	; 0x1a78 <USB_ProcessHIDReport+0x466>
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
    1a9c:	2a 30       	cpi	r18, 0x0A	; 10
    1a9e:	11 f4       	brne	.+4      	; 0x1aa4 <USB_ProcessHIDReport+0x492>
    1aa0:	87 e0       	ldi	r24, 0x07	; 7
    1aa2:	95 c1       	rjmp	.+810    	; 0x1dce <USB_ProcessHIDReport+0x7bc>
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
    1aa4:	87 e0       	ldi	r24, 0x07	; 7
    1aa6:	28 9f       	mul	r18, r24
    1aa8:	20 01       	movw	r4, r0
    1aaa:	11 24       	eor	r1, r1
    1aac:	40 e9       	ldi	r20, 0x90	; 144
    1aae:	53 e0       	ldi	r21, 0x03	; 3
    1ab0:	44 0e       	add	r4, r20
    1ab2:	55 1e       	adc	r5, r21
    1ab4:	42 0c       	add	r4, r2
    1ab6:	53 1c       	adc	r5, r3
    1ab8:	2f 5f       	subi	r18, 0xFF	; 255
    1aba:	c0 57       	subi	r28, 0x70	; 112
    1abc:	df 4f       	sbci	r29, 0xFF	; 255
    1abe:	a8 81       	ld	r26, Y
    1ac0:	b9 81       	ldd	r27, Y+1	; 0x01
    1ac2:	c0 59       	subi	r28, 0x90	; 144
    1ac4:	d0 40       	sbci	r29, 0x00	; 0
    1ac6:	2c 93       	st	X, r18
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
    1ac8:	f2 01       	movw	r30, r4
    1aca:	11 92       	st	Z+, r1
    1acc:	8a 95       	dec	r24
    1ace:	e9 f7       	brne	.-6      	; 0x1aca <USB_ProcessHIDReport+0x4b8>
					}
				}

				ParserData->UsingReportIDs = true;
    1ad0:	e1 e0       	ldi	r30, 0x01	; 1
    1ad2:	c2 57       	subi	r28, 0x72	; 114
    1ad4:	df 4f       	sbci	r29, 0xFF	; 255
    1ad6:	a8 81       	ld	r26, Y
    1ad8:	b9 81       	ldd	r27, Y+1	; 0x01
    1ada:	ce 58       	subi	r28, 0x8E	; 142
    1adc:	d0 40       	sbci	r29, 0x00	; 0
    1ade:	ec 93       	st	X, r30

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
    1ae0:	d6 01       	movw	r26, r12
    1ae2:	5b 96       	adiw	r26, 0x1b	; 27
    1ae4:	8c 91       	ld	r24, X
    1ae6:	f2 01       	movw	r30, r4
    1ae8:	80 83       	st	Z, r24
    1aea:	49 c1       	rjmp	.+658    	; 0x1d7e <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
    1aec:	ed 96       	adiw	r28, 0x3d	; 61
    1aee:	ff ad       	ldd	r31, Y+63	; 0x3f
    1af0:	ed 97       	sbiw	r28, 0x3d	; 61
    1af2:	f8 30       	cpi	r31, 0x08	; 8
    1af4:	11 f4       	brne	.+4      	; 0x1afa <USB_ProcessHIDReport+0x4e8>
    1af6:	86 e0       	ldi	r24, 0x06	; 6
    1af8:	6a c1       	rjmp	.+724    	; 0x1dce <USB_ProcessHIDReport+0x7bc>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
    1afa:	ed 96       	adiw	r28, 0x3d	; 61
    1afc:	2f ad       	ldd	r18, Y+63	; 0x3f
    1afe:	ed 97       	sbiw	r28, 0x3d	; 61
    1b00:	e2 2f       	mov	r30, r18
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	ee 0f       	add	r30, r30
    1b06:	ff 1f       	adc	r31, r31
    1b08:	41 e0       	ldi	r20, 0x01	; 1
    1b0a:	50 e0       	ldi	r21, 0x00	; 0
    1b0c:	4c 0f       	add	r20, r28
    1b0e:	5d 1f       	adc	r21, r29
    1b10:	e4 0f       	add	r30, r20
    1b12:	f5 1f       	adc	r31, r21
    1b14:	f1 82       	std	Z+1, r15	; 0x01
    1b16:	e0 82       	st	Z, r14
    1b18:	2f 5f       	subi	r18, 0xFF	; 255
    1b1a:	ed 96       	adiw	r28, 0x3d	; 61
    1b1c:	2f af       	std	Y+63, r18	; 0x3f
    1b1e:	ed 97       	sbiw	r28, 0x3d	; 61
    1b20:	2e c1       	rjmp	.+604    	; 0x1d7e <USB_ProcessHIDReport+0x76c>
				break;
    1b22:	f5 01       	movw	r30, r10
    1b24:	eb 96       	adiw	r28, 0x3b	; 59
    1b26:	ec ae       	std	Y+60, r14	; 0x3c
    1b28:	fd ae       	std	Y+61, r15	; 0x3d
    1b2a:	0e af       	std	Y+62, r16	; 0x3e
    1b2c:	1f af       	std	Y+63, r17	; 0x3f
    1b2e:	eb 97       	sbiw	r28, 0x3b	; 59
    1b30:	27 c1       	rjmp	.+590    	; 0x1d80 <USB_ProcessHIDReport+0x76e>
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
    1b32:	a1 14       	cp	r10, r1
    1b34:	b1 04       	cpc	r11, r1
    1b36:	29 f4       	brne	.+10     	; 0x1b42 <USB_ProcessHIDReport+0x530>
    1b38:	e7 96       	adiw	r28, 0x37	; 55
    1b3a:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b3c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b3e:	e7 97       	sbiw	r28, 0x37	; 55
    1b40:	15 c0       	rjmp	.+42     	; 0x1b6c <USB_ProcessHIDReport+0x55a>
    1b42:	e5 96       	adiw	r28, 0x35	; 53
    1b44:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b46:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b48:	e5 97       	sbiw	r28, 0x35	; 53
    1b4a:	0a c0       	rjmp	.+20     	; 0x1b60 <USB_ProcessHIDReport+0x54e>

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
    1b4c:	ef 96       	adiw	r28, 0x3f	; 63
    1b4e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b50:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b52:	ef 97       	sbiw	r28, 0x3f	; 63
    1b54:	e8 17       	cp	r30, r24
    1b56:	f9 07       	cpc	r31, r25
    1b58:	11 f4       	brne	.+4      	; 0x1b5e <USB_ProcessHIDReport+0x54c>
    1b5a:	85 e0       	ldi	r24, 0x05	; 5
    1b5c:	38 c1       	rjmp	.+624    	; 0x1dce <USB_ProcessHIDReport+0x7bc>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
    1b5e:	37 96       	adiw	r30, 0x07	; 7
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
    1b60:	85 81       	ldd	r24, Z+5	; 0x05
    1b62:	96 81       	ldd	r25, Z+6	; 0x06
    1b64:	89 2b       	or	r24, r25
    1b66:	91 f7       	brne	.-28     	; 0x1b4c <USB_ProcessHIDReport+0x53a>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
    1b68:	b6 82       	std	Z+6, r11	; 0x06
    1b6a:	a5 82       	std	Z+5, r10	; 0x05
				}

				CurrCollectionPath->Type       = ReportItemData;
    1b6c:	e0 82       	st	Z, r14
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
    1b6e:	d6 01       	movw	r26, r12
    1b70:	11 96       	adiw	r26, 0x01	; 1
    1b72:	8d 91       	ld	r24, X+
    1b74:	9c 91       	ld	r25, X
    1b76:	12 97       	sbiw	r26, 0x02	; 2
    1b78:	92 83       	std	Z+2, r25	; 0x02
    1b7a:	81 83       	std	Z+1, r24	; 0x01

				if (UsageListSize)
    1b7c:	ed 96       	adiw	r28, 0x3d	; 61
    1b7e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1b80:	ed 97       	sbiw	r28, 0x3d	; 61
    1b82:	bb 23       	and	r27, r27
    1b84:	09 f1       	breq	.+66     	; 0x1bc8 <USB_ProcessHIDReport+0x5b6>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
    1b86:	89 81       	ldd	r24, Y+1	; 0x01
    1b88:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8a:	94 83       	std	Z+4, r25	; 0x04
    1b8c:	83 83       	std	Z+3, r24	; 0x03
    1b8e:	de 01       	movw	r26, r28
    1b90:	11 96       	adiw	r26, 0x01	; 1

					for (uint8_t i = 0; i < UsageListSize; i++)
    1b92:	ed 96       	adiw	r28, 0x3d	; 61
    1b94:	4f ad       	ldd	r20, Y+63	; 0x3f
    1b96:	ed 97       	sbiw	r28, 0x3d	; 61
    1b98:	24 2f       	mov	r18, r20
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	22 0f       	add	r18, r18
    1b9e:	33 1f       	adc	r19, r19
    1ba0:	2a 0f       	add	r18, r26
    1ba2:	3b 1f       	adc	r19, r27
    1ba4:	06 c0       	rjmp	.+12     	; 0x1bb2 <USB_ProcessHIDReport+0x5a0>
					  UsageList[i] = UsageList[i + 1];
    1ba6:	12 96       	adiw	r26, 0x02	; 2
    1ba8:	8d 91       	ld	r24, X+
    1baa:	9c 91       	ld	r25, X
    1bac:	13 97       	sbiw	r26, 0x03	; 3
    1bae:	8d 93       	st	X+, r24
    1bb0:	9d 93       	st	X+, r25

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
    1bb2:	a2 17       	cp	r26, r18
    1bb4:	b3 07       	cpc	r27, r19
    1bb6:	b9 f7       	brne	.-18     	; 0x1ba6 <USB_ProcessHIDReport+0x594>
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
    1bb8:	ed 96       	adiw	r28, 0x3d	; 61
    1bba:	9f ad       	ldd	r25, Y+63	; 0x3f
    1bbc:	ed 97       	sbiw	r28, 0x3d	; 61
    1bbe:	91 50       	subi	r25, 0x01	; 1
    1bc0:	ed 96       	adiw	r28, 0x3d	; 61
    1bc2:	9f af       	std	Y+63, r25	; 0x3f
    1bc4:	ed 97       	sbiw	r28, 0x3d	; 61
    1bc6:	dc c0       	rjmp	.+440    	; 0x1d80 <USB_ProcessHIDReport+0x76e>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
    1bc8:	eb 96       	adiw	r28, 0x3b	; 59
    1bca:	2c ad       	ldd	r18, Y+60	; 0x3c
    1bcc:	3d ad       	ldd	r19, Y+61	; 0x3d
    1bce:	4e ad       	ldd	r20, Y+62	; 0x3e
    1bd0:	5f ad       	ldd	r21, Y+63	; 0x3f
    1bd2:	eb 97       	sbiw	r28, 0x3b	; 59
    1bd4:	26 15       	cp	r18, r6
    1bd6:	37 05       	cpc	r19, r7
    1bd8:	48 05       	cpc	r20, r8
    1bda:	59 05       	cpc	r21, r9
    1bdc:	08 f4       	brcc	.+2      	; 0x1be0 <USB_ProcessHIDReport+0x5ce>
    1bde:	d0 c0       	rjmp	.+416    	; 0x1d80 <USB_ProcessHIDReport+0x76e>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
    1be0:	74 82       	std	Z+4, r7	; 0x04
    1be2:	63 82       	std	Z+3, r6	; 0x03
    1be4:	08 94       	sec
    1be6:	61 1c       	adc	r6, r1
    1be8:	71 1c       	adc	r7, r1
    1bea:	81 1c       	adc	r8, r1
    1bec:	91 1c       	adc	r9, r1
    1bee:	c8 c0       	rjmp	.+400    	; 0x1d80 <USB_ProcessHIDReport+0x76e>
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
    1bf0:	a1 14       	cp	r10, r1
    1bf2:	b1 04       	cpc	r11, r1
    1bf4:	11 f4       	brne	.+4      	; 0x1bfa <USB_ProcessHIDReport+0x5e8>
    1bf6:	84 e0       	ldi	r24, 0x04	; 4
    1bf8:	ea c0       	rjmp	.+468    	; 0x1dce <USB_ProcessHIDReport+0x7bc>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
    1bfa:	d5 01       	movw	r26, r10
    1bfc:	15 96       	adiw	r26, 0x05	; 5
    1bfe:	ed 91       	ld	r30, X+
    1c00:	fc 91       	ld	r31, X
    1c02:	16 97       	sbiw	r26, 0x06	; 6
    1c04:	bd c0       	rjmp	.+378    	; 0x1d80 <USB_ProcessHIDReport+0x76e>
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
    1c06:	de 01       	movw	r26, r28
    1c08:	59 96       	adiw	r26, 0x19	; 25
    1c0a:	cb 57       	subi	r28, 0x7B	; 123
    1c0c:	df 4f       	sbci	r29, 0xFF	; 255
    1c0e:	88 81       	ld	r24, Y
    1c10:	c5 58       	subi	r28, 0x85	; 133
    1c12:	d0 40       	sbci	r29, 0x00	; 0
    1c14:	ca 57       	subi	r28, 0x7A	; 122
    1c16:	df 4f       	sbci	r29, 0xFF	; 255
    1c18:	98 81       	ld	r25, Y
    1c1a:	c6 58       	subi	r28, 0x86	; 134
    1c1c:	d0 40       	sbci	r29, 0x00	; 0
    1c1e:	9c 01       	movw	r18, r24
    1c20:	f9 01       	movw	r30, r18
    1c22:	8a e1       	ldi	r24, 0x1A	; 26
    1c24:	01 90       	ld	r0, Z+
    1c26:	0d 92       	st	X+, r0
    1c28:	81 50       	subi	r24, 0x01	; 1
    1c2a:	e1 f7       	brne	.-8      	; 0x1c24 <USB_ProcessHIDReport+0x612>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
    1c2c:	fd 8a       	std	Y+21, r15	; 0x15
    1c2e:	ec 8a       	std	Y+20, r14	; 0x14
					NewReportItem.CollectionPath = CurrCollectionPath;
    1c30:	b8 8e       	std	Y+24, r11	; 0x18
    1c32:	af 8a       	std	Y+23, r10	; 0x17
					NewReportItem.ReportID       = CurrStateTable->ReportID;
    1c34:	f6 01       	movw	r30, r12
    1c36:	83 8d       	ldd	r24, Z+27	; 0x1b
    1c38:	8e 8b       	std	Y+22, r24	; 0x16

					if (UsageListSize)
    1c3a:	ed 96       	adiw	r28, 0x3d	; 61
    1c3c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c3e:	ed 97       	sbiw	r28, 0x3d	; 61
    1c40:	ff 23       	and	r31, r31
    1c42:	f9 f0       	breq	.+62     	; 0x1c82 <USB_ProcessHIDReport+0x670>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
    1c44:	49 81       	ldd	r20, Y+1	; 0x01
    1c46:	5a 81       	ldd	r21, Y+2	; 0x02
    1c48:	fe 01       	movw	r30, r28
    1c4a:	31 96       	adiw	r30, 0x01	; 1

						for (uint8_t i = 0; i < UsageListSize; i++)
    1c4c:	ed 96       	adiw	r28, 0x3d	; 61
    1c4e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1c50:	ed 97       	sbiw	r28, 0x3d	; 61
    1c52:	28 2f       	mov	r18, r24
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	22 0f       	add	r18, r18
    1c58:	33 1f       	adc	r19, r19
    1c5a:	2e 0f       	add	r18, r30
    1c5c:	3f 1f       	adc	r19, r31
    1c5e:	04 c0       	rjmp	.+8      	; 0x1c68 <USB_ProcessHIDReport+0x656>
						  UsageList[i] = UsageList[i + 1];
    1c60:	82 81       	ldd	r24, Z+2	; 0x02
    1c62:	93 81       	ldd	r25, Z+3	; 0x03
    1c64:	81 93       	st	Z+, r24
    1c66:	91 93       	st	Z+, r25

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
    1c68:	e2 17       	cp	r30, r18
    1c6a:	f3 07       	cpc	r31, r19
    1c6c:	c9 f7       	brne	.-14     	; 0x1c60 <USB_ProcessHIDReport+0x64e>
					NewReportItem.CollectionPath = CurrCollectionPath;
					NewReportItem.ReportID       = CurrStateTable->ReportID;

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
    1c6e:	5d 8f       	std	Y+29, r21	; 0x1d
    1c70:	4c 8f       	std	Y+28, r20	; 0x1c

						for (uint8_t i = 0; i < UsageListSize; i++)
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
    1c72:	ed 96       	adiw	r28, 0x3d	; 61
    1c74:	bf ad       	ldd	r27, Y+63	; 0x3f
    1c76:	ed 97       	sbiw	r28, 0x3d	; 61
    1c78:	b1 50       	subi	r27, 0x01	; 1
    1c7a:	ed 96       	adiw	r28, 0x3d	; 61
    1c7c:	bf af       	std	Y+63, r27	; 0x3f
    1c7e:	ed 97       	sbiw	r28, 0x3d	; 61
    1c80:	12 c0       	rjmp	.+36     	; 0x1ca6 <USB_ProcessHIDReport+0x694>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
    1c82:	eb 96       	adiw	r28, 0x3b	; 59
    1c84:	2c ad       	ldd	r18, Y+60	; 0x3c
    1c86:	3d ad       	ldd	r19, Y+61	; 0x3d
    1c88:	4e ad       	ldd	r20, Y+62	; 0x3e
    1c8a:	5f ad       	ldd	r21, Y+63	; 0x3f
    1c8c:	eb 97       	sbiw	r28, 0x3b	; 59
    1c8e:	26 15       	cp	r18, r6
    1c90:	37 05       	cpc	r19, r7
    1c92:	48 05       	cpc	r20, r8
    1c94:	59 05       	cpc	r21, r9
    1c96:	38 f0       	brcs	.+14     	; 0x1ca6 <USB_ProcessHIDReport+0x694>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
    1c98:	7d 8e       	std	Y+29, r7	; 0x1d
    1c9a:	6c 8e       	std	Y+28, r6	; 0x1c
    1c9c:	08 94       	sec
    1c9e:	61 1c       	adc	r6, r1
    1ca0:	71 1c       	adc	r7, r1
    1ca2:	81 1c       	adc	r8, r1
    1ca4:	91 1c       	adc	r9, r1
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
    1ca6:	c9 57       	subi	r28, 0x79	; 121
    1ca8:	df 4f       	sbci	r29, 0xFF	; 255
    1caa:	38 81       	ld	r19, Y
    1cac:	c7 58       	subi	r28, 0x87	; 135
    1cae:	d0 40       	sbci	r29, 0x00	; 0
    1cb0:	30 38       	cpi	r19, 0x80	; 128
    1cb2:	11 f4       	brne	.+4      	; 0x1cb8 <USB_ProcessHIDReport+0x6a6>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
    1cb4:	1b 8a       	std	Y+19, r1	; 0x13
    1cb6:	0c c0       	rjmp	.+24     	; 0x1cd0 <USB_ProcessHIDReport+0x6be>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
    1cb8:	c9 57       	subi	r28, 0x79	; 121
    1cba:	df 4f       	sbci	r29, 0xFF	; 255
    1cbc:	48 81       	ld	r20, Y
    1cbe:	c7 58       	subi	r28, 0x87	; 135
    1cc0:	d0 40       	sbci	r29, 0x00	; 0
    1cc2:	40 39       	cpi	r20, 0x90	; 144
    1cc4:	19 f4       	brne	.+6      	; 0x1ccc <USB_ProcessHIDReport+0x6ba>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
    1cc6:	51 e0       	ldi	r21, 0x01	; 1
    1cc8:	5b 8b       	std	Y+19, r21	; 0x13
    1cca:	02 c0       	rjmp	.+4      	; 0x1cd0 <USB_ProcessHIDReport+0x6be>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
    1ccc:	82 e0       	ldi	r24, 0x02	; 2
    1cce:	8b 8b       	std	Y+19, r24	; 0x13

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
    1cd0:	eb 89       	ldd	r30, Y+19	; 0x13
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	ee 0f       	add	r30, r30
    1cd6:	ff 1f       	adc	r31, r31
    1cd8:	e4 0d       	add	r30, r4
    1cda:	f5 1d       	adc	r31, r5
    1cdc:	81 81       	ldd	r24, Z+1	; 0x01
    1cde:	92 81       	ldd	r25, Z+2	; 0x02
    1ce0:	9a 8b       	std	Y+18, r25	; 0x12
    1ce2:	89 8b       	std	Y+17, r24	; 0x11

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
    1ce4:	d6 01       	movw	r26, r12
    1ce6:	2c 91       	ld	r18, X
    1ce8:	81 81       	ldd	r24, Z+1	; 0x01
    1cea:	92 81       	ldd	r25, Z+2	; 0x02
    1cec:	82 0f       	add	r24, r18
    1cee:	91 1d       	adc	r25, r1
    1cf0:	92 83       	std	Z+2, r25	; 0x02
    1cf2:	81 83       	std	Z+1, r24	; 0x01

					if (ParserData->LargestReportSizeBits < NewReportItem.BitOffset)
    1cf4:	29 89       	ldd	r18, Y+17	; 0x11
    1cf6:	3a 89       	ldd	r19, Y+18	; 0x12
    1cf8:	c6 57       	subi	r28, 0x76	; 118
    1cfa:	df 4f       	sbci	r29, 0xFF	; 255
    1cfc:	e8 81       	ld	r30, Y
    1cfe:	f9 81       	ldd	r31, Y+1	; 0x01
    1d00:	ca 58       	subi	r28, 0x8A	; 138
    1d02:	d0 40       	sbci	r29, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	91 81       	ldd	r25, Z+1	; 0x01
    1d08:	82 17       	cp	r24, r18
    1d0a:	93 07       	cpc	r25, r19
    1d0c:	10 f4       	brcc	.+4      	; 0x1d12 <USB_ProcessHIDReport+0x700>
					  ParserData->LargestReportSizeBits = NewReportItem.BitOffset;
    1d0e:	31 83       	std	Z+1, r19	; 0x01
    1d10:	20 83       	st	Z, r18

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    1d12:	c8 57       	subi	r28, 0x78	; 120
    1d14:	df 4f       	sbci	r29, 0xFF	; 255
    1d16:	28 81       	ld	r18, Y
    1d18:	39 81       	ldd	r19, Y+1	; 0x01
    1d1a:	c8 58       	subi	r28, 0x88	; 136
    1d1c:	d0 40       	sbci	r29, 0x00	; 0
    1d1e:	23 2b       	or	r18, r19
    1d20:	f1 f4       	brne	.+60     	; 0x1d5e <USB_ProcessHIDReport+0x74c>
    1d22:	ce 01       	movw	r24, r28
    1d24:	41 96       	adiw	r24, 0x11	; 17
    1d26:	0e 94 48 04 	call	0x890	; 0x890 <CALLBACK_HIDParser_FilterHIDReportItem>
    1d2a:	88 23       	and	r24, r24
    1d2c:	c1 f0       	breq	.+48     	; 0x1d5e <USB_ProcessHIDReport+0x74c>
					{
						if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
    1d2e:	d1 01       	movw	r26, r2
    1d30:	8c 91       	ld	r24, X
    1d32:	84 31       	cpi	r24, 0x14	; 20
    1d34:	11 f4       	brne	.+4      	; 0x1d3a <USB_ProcessHIDReport+0x728>
    1d36:	83 e0       	ldi	r24, 0x03	; 3
    1d38:	4a c0       	rjmp	.+148    	; 0x1dce <USB_ProcessHIDReport+0x7bc>
						  return HID_PARSE_InsufficientReportItems;

						memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
    1d3a:	ba e2       	ldi	r27, 0x2A	; 42
    1d3c:	8b 9f       	mul	r24, r27
    1d3e:	f0 01       	movw	r30, r0
    1d40:	11 24       	eor	r1, r1
    1d42:	31 96       	adiw	r30, 0x01	; 1
    1d44:	e2 0d       	add	r30, r2
    1d46:	f3 1d       	adc	r31, r3
    1d48:	de 01       	movw	r26, r28
    1d4a:	51 96       	adiw	r26, 0x11	; 17
    1d4c:	8a e2       	ldi	r24, 0x2A	; 42
    1d4e:	0d 90       	ld	r0, X+
    1d50:	01 92       	st	Z+, r0
    1d52:	81 50       	subi	r24, 0x01	; 1
    1d54:	e1 f7       	brne	.-8      	; 0x1d4e <USB_ProcessHIDReport+0x73c>
						       &NewReportItem, sizeof(HID_ReportItem_t));

						ParserData->TotalReportItems++;
    1d56:	f1 01       	movw	r30, r2
    1d58:	80 81       	ld	r24, Z
    1d5a:	8f 5f       	subi	r24, 0xFF	; 255
    1d5c:	80 83       	st	Z, r24
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
    1d5e:	ec 96       	adiw	r28, 0x3c	; 60
    1d60:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d62:	ec 97       	sbiw	r28, 0x3c	; 60
    1d64:	ff 5f       	subi	r31, 0xFF	; 255
    1d66:	ec 96       	adiw	r28, 0x3c	; 60
    1d68:	ff af       	std	Y+63, r31	; 0x3f
    1d6a:	ec 97       	sbiw	r28, 0x3c	; 60
    1d6c:	d6 01       	movw	r26, r12
    1d6e:	5a 96       	adiw	r26, 0x1a	; 26
    1d70:	8c 91       	ld	r24, X
    1d72:	ec 96       	adiw	r28, 0x3c	; 60
    1d74:	bf ad       	ldd	r27, Y+63	; 0x3f
    1d76:	ec 97       	sbiw	r28, 0x3c	; 60
    1d78:	b8 17       	cp	r27, r24
    1d7a:	08 f4       	brcc	.+2      	; 0x1d7e <USB_ProcessHIDReport+0x76c>
    1d7c:	44 cf       	rjmp	.-376    	; 0x1c06 <USB_ProcessHIDReport+0x5f4>
    1d7e:	f5 01       	movw	r30, r10
				}

				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
    1d80:	c1 58       	subi	r28, 0x81	; 129
    1d82:	df 4f       	sbci	r29, 0xFF	; 255
    1d84:	28 81       	ld	r18, Y
    1d86:	39 81       	ldd	r19, Y+1	; 0x01
    1d88:	cf 57       	subi	r28, 0x7F	; 127
    1d8a:	d0 40       	sbci	r29, 0x00	; 0
    1d8c:	2c 70       	andi	r18, 0x0C	; 12
    1d8e:	30 70       	andi	r19, 0x00	; 0
    1d90:	23 2b       	or	r18, r19
    1d92:	61 f4       	brne	.+24     	; 0x1dac <USB_ProcessHIDReport+0x79a>
    1d94:	ed 96       	adiw	r28, 0x3d	; 61
    1d96:	1f ae       	std	Y+63, r1	; 0x3f
    1d98:	ed 97       	sbiw	r28, 0x3d	; 61
    1d9a:	eb 96       	adiw	r28, 0x3b	; 59
    1d9c:	1c ae       	std	Y+60, r1	; 0x3c
    1d9e:	1d ae       	std	Y+61, r1	; 0x3d
    1da0:	1e ae       	std	Y+62, r1	; 0x3e
    1da2:	1f ae       	std	Y+63, r1	; 0x3f
    1da4:	eb 97       	sbiw	r28, 0x3b	; 59
    1da6:	66 24       	eor	r6, r6
    1da8:	77 24       	eor	r7, r7
    1daa:	43 01       	movw	r8, r6
    1dac:	5f 01       	movw	r10, r30
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
    1dae:	cd 57       	subi	r28, 0x7D	; 125
    1db0:	df 4f       	sbci	r29, 0xFF	; 255
    1db2:	48 81       	ld	r20, Y
    1db4:	59 81       	ldd	r21, Y+1	; 0x01
    1db6:	c3 58       	subi	r28, 0x83	; 131
    1db8:	d0 40       	sbci	r29, 0x00	; 0
    1dba:	45 2b       	or	r20, r21
    1dbc:	09 f0       	breq	.+2      	; 0x1dc0 <USB_ProcessHIDReport+0x7ae>
    1dbe:	c5 cc       	rjmp	.-1654   	; 0x174a <USB_ProcessHIDReport+0x138>
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
    1dc0:	d1 01       	movw	r26, r2
    1dc2:	8c 91       	ld	r24, X
    1dc4:	88 23       	and	r24, r24
    1dc6:	11 f0       	breq	.+4      	; 0x1dcc <USB_ProcessHIDReport+0x7ba>
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	01 c0       	rjmp	.+2      	; 0x1dce <USB_ProcessHIDReport+0x7bc>
    1dcc:	88 e0       	ldi	r24, 0x08	; 8
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
    1dce:	cb 56       	subi	r28, 0x6B	; 107
    1dd0:	df 4f       	sbci	r29, 0xFF	; 255
    1dd2:	0f b6       	in	r0, 0x3f	; 63
    1dd4:	f8 94       	cli
    1dd6:	de bf       	out	0x3e, r29	; 62
    1dd8:	0f be       	out	0x3f, r0	; 63
    1dda:	cd bf       	out	0x3d, r28	; 61
    1ddc:	cf 91       	pop	r28
    1dde:	df 91       	pop	r29
    1de0:	1f 91       	pop	r17
    1de2:	0f 91       	pop	r16
    1de4:	ff 90       	pop	r15
    1de6:	ef 90       	pop	r14
    1de8:	df 90       	pop	r13
    1dea:	cf 90       	pop	r12
    1dec:	bf 90       	pop	r11
    1dee:	af 90       	pop	r10
    1df0:	9f 90       	pop	r9
    1df2:	8f 90       	pop	r8
    1df4:	7f 90       	pop	r7
    1df6:	6f 90       	pop	r6
    1df8:	5f 90       	pop	r5
    1dfa:	4f 90       	pop	r4
    1dfc:	3f 90       	pop	r3
    1dfe:	2f 90       	pop	r2
    1e00:	08 95       	ret

00001e02 <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    1e02:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1e04:	80 91 c8 00 	lds	r24, 0x00C8
    1e08:	85 ff       	sbrs	r24, 5
    1e0a:	fc cf       	rjmp	.-8      	; 0x1e04 <Serial_putchar+0x2>
				UDR1 = DataByte;
    1e0c:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	08 95       	ret

00001e16 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1e16:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1e1a:	87 fd       	sbrc	r24, 7
    1e1c:	03 c0       	rjmp	.+6      	; 0x1e24 <Serial_getchar+0xe>
    1e1e:	2e ef       	ldi	r18, 0xFE	; 254
    1e20:	3f ef       	ldi	r19, 0xFF	; 255
    1e22:	0b c0       	rjmp	.+22     	; 0x1e3a <Serial_getchar+0x24>
    1e24:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1e28:	87 fd       	sbrc	r24, 7
    1e2a:	03 c0       	rjmp	.+6      	; 0x1e32 <Serial_getchar+0x1c>
    1e2c:	2f ef       	ldi	r18, 0xFF	; 255
    1e2e:	3f ef       	ldi	r19, 0xFF	; 255
    1e30:	04 c0       	rjmp	.+8      	; 0x1e3a <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    1e32:	80 91 ce 00 	lds	r24, 0x00CE
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    1e3a:	c9 01       	movw	r24, r18
    1e3c:	08 95       	ret

00001e3e <printf_P>:
    1e3e:	df 93       	push	r29
    1e40:	cf 93       	push	r28
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
    1e46:	fe 01       	movw	r30, r28
    1e48:	35 96       	adiw	r30, 0x05	; 5
    1e4a:	61 91       	ld	r22, Z+
    1e4c:	71 91       	ld	r23, Z+
    1e4e:	a0 91 0b 05 	lds	r26, 0x050B
    1e52:	b0 91 0c 05 	lds	r27, 0x050C
    1e56:	13 96       	adiw	r26, 0x03	; 3
    1e58:	8c 91       	ld	r24, X
    1e5a:	13 97       	sbiw	r26, 0x03	; 3
    1e5c:	88 60       	ori	r24, 0x08	; 8
    1e5e:	13 96       	adiw	r26, 0x03	; 3
    1e60:	8c 93       	st	X, r24
    1e62:	80 91 0b 05 	lds	r24, 0x050B
    1e66:	90 91 0c 05 	lds	r25, 0x050C
    1e6a:	af 01       	movw	r20, r30
    1e6c:	3f d0       	rcall	.+126    	; 0x1eec <vfprintf>
    1e6e:	e0 91 0b 05 	lds	r30, 0x050B
    1e72:	f0 91 0c 05 	lds	r31, 0x050C
    1e76:	23 81       	ldd	r18, Z+3	; 0x03
    1e78:	27 7f       	andi	r18, 0xF7	; 247
    1e7a:	23 83       	std	Z+3, r18	; 0x03
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	08 95       	ret

00001e82 <puts_P>:
    1e82:	0f 93       	push	r16
    1e84:	1f 93       	push	r17
    1e86:	cf 93       	push	r28
    1e88:	df 93       	push	r29
    1e8a:	ec 01       	movw	r28, r24
    1e8c:	e0 91 0b 05 	lds	r30, 0x050B
    1e90:	f0 91 0c 05 	lds	r31, 0x050C
    1e94:	83 81       	ldd	r24, Z+3	; 0x03
    1e96:	81 ff       	sbrs	r24, 1
    1e98:	21 c0       	rjmp	.+66     	; 0x1edc <puts_P+0x5a>
    1e9a:	00 e0       	ldi	r16, 0x00	; 0
    1e9c:	10 e0       	ldi	r17, 0x00	; 0
    1e9e:	0e c0       	rjmp	.+28     	; 0x1ebc <puts_P+0x3a>
    1ea0:	e0 91 0b 05 	lds	r30, 0x050B
    1ea4:	f0 91 0c 05 	lds	r31, 0x050C
    1ea8:	20 85       	ldd	r18, Z+8	; 0x08
    1eaa:	31 85       	ldd	r19, Z+9	; 0x09
    1eac:	bf 01       	movw	r22, r30
    1eae:	f9 01       	movw	r30, r18
    1eb0:	09 95       	icall
    1eb2:	89 2b       	or	r24, r25
    1eb4:	11 f0       	breq	.+4      	; 0x1eba <puts_P+0x38>
    1eb6:	0f ef       	ldi	r16, 0xFF	; 255
    1eb8:	1f ef       	ldi	r17, 0xFF	; 255
    1eba:	21 96       	adiw	r28, 0x01	; 1
    1ebc:	fe 01       	movw	r30, r28
    1ebe:	84 91       	lpm	r24, Z+
    1ec0:	88 23       	and	r24, r24
    1ec2:	71 f7       	brne	.-36     	; 0x1ea0 <puts_P+0x1e>
    1ec4:	e0 91 0b 05 	lds	r30, 0x050B
    1ec8:	f0 91 0c 05 	lds	r31, 0x050C
    1ecc:	20 85       	ldd	r18, Z+8	; 0x08
    1ece:	31 85       	ldd	r19, Z+9	; 0x09
    1ed0:	8a e0       	ldi	r24, 0x0A	; 10
    1ed2:	bf 01       	movw	r22, r30
    1ed4:	f9 01       	movw	r30, r18
    1ed6:	09 95       	icall
    1ed8:	89 2b       	or	r24, r25
    1eda:	11 f0       	breq	.+4      	; 0x1ee0 <puts_P+0x5e>
    1edc:	0f ef       	ldi	r16, 0xFF	; 255
    1ede:	1f ef       	ldi	r17, 0xFF	; 255
    1ee0:	c8 01       	movw	r24, r16
    1ee2:	df 91       	pop	r29
    1ee4:	cf 91       	pop	r28
    1ee6:	1f 91       	pop	r17
    1ee8:	0f 91       	pop	r16
    1eea:	08 95       	ret

00001eec <vfprintf>:
    1eec:	2f 92       	push	r2
    1eee:	3f 92       	push	r3
    1ef0:	4f 92       	push	r4
    1ef2:	5f 92       	push	r5
    1ef4:	6f 92       	push	r6
    1ef6:	7f 92       	push	r7
    1ef8:	8f 92       	push	r8
    1efa:	9f 92       	push	r9
    1efc:	af 92       	push	r10
    1efe:	bf 92       	push	r11
    1f00:	cf 92       	push	r12
    1f02:	df 92       	push	r13
    1f04:	ef 92       	push	r14
    1f06:	ff 92       	push	r15
    1f08:	0f 93       	push	r16
    1f0a:	1f 93       	push	r17
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	cd b7       	in	r28, 0x3d	; 61
    1f12:	de b7       	in	r29, 0x3e	; 62
    1f14:	2b 97       	sbiw	r28, 0x0b	; 11
    1f16:	0f b6       	in	r0, 0x3f	; 63
    1f18:	f8 94       	cli
    1f1a:	de bf       	out	0x3e, r29	; 62
    1f1c:	0f be       	out	0x3f, r0	; 63
    1f1e:	cd bf       	out	0x3d, r28	; 61
    1f20:	3c 01       	movw	r6, r24
    1f22:	2b 01       	movw	r4, r22
    1f24:	5a 01       	movw	r10, r20
    1f26:	fc 01       	movw	r30, r24
    1f28:	17 82       	std	Z+7, r1	; 0x07
    1f2a:	16 82       	std	Z+6, r1	; 0x06
    1f2c:	83 81       	ldd	r24, Z+3	; 0x03
    1f2e:	81 fd       	sbrc	r24, 1
    1f30:	03 c0       	rjmp	.+6      	; 0x1f38 <vfprintf+0x4c>
    1f32:	6f ef       	ldi	r22, 0xFF	; 255
    1f34:	7f ef       	ldi	r23, 0xFF	; 255
    1f36:	b9 c1       	rjmp	.+882    	; 0x22aa <__stack+0x1ab>
    1f38:	9a e0       	ldi	r25, 0x0A	; 10
    1f3a:	89 2e       	mov	r8, r25
    1f3c:	1e 01       	movw	r2, r28
    1f3e:	08 94       	sec
    1f40:	21 1c       	adc	r2, r1
    1f42:	31 1c       	adc	r3, r1
    1f44:	f3 01       	movw	r30, r6
    1f46:	23 81       	ldd	r18, Z+3	; 0x03
    1f48:	f2 01       	movw	r30, r4
    1f4a:	23 fd       	sbrc	r18, 3
    1f4c:	85 91       	lpm	r24, Z+
    1f4e:	23 ff       	sbrs	r18, 3
    1f50:	81 91       	ld	r24, Z+
    1f52:	2f 01       	movw	r4, r30
    1f54:	88 23       	and	r24, r24
    1f56:	09 f4       	brne	.+2      	; 0x1f5a <vfprintf+0x6e>
    1f58:	a5 c1       	rjmp	.+842    	; 0x22a4 <__stack+0x1a5>
    1f5a:	85 32       	cpi	r24, 0x25	; 37
    1f5c:	39 f4       	brne	.+14     	; 0x1f6c <vfprintf+0x80>
    1f5e:	23 fd       	sbrc	r18, 3
    1f60:	85 91       	lpm	r24, Z+
    1f62:	23 ff       	sbrs	r18, 3
    1f64:	81 91       	ld	r24, Z+
    1f66:	2f 01       	movw	r4, r30
    1f68:	85 32       	cpi	r24, 0x25	; 37
    1f6a:	21 f4       	brne	.+8      	; 0x1f74 <vfprintf+0x88>
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	b3 01       	movw	r22, r6
    1f70:	cc d1       	rcall	.+920    	; 0x230a <fputc>
    1f72:	e8 cf       	rjmp	.-48     	; 0x1f44 <vfprintf+0x58>
    1f74:	98 2f       	mov	r25, r24
    1f76:	ff 24       	eor	r15, r15
    1f78:	ee 24       	eor	r14, r14
    1f7a:	99 24       	eor	r9, r9
    1f7c:	ff e1       	ldi	r31, 0x1F	; 31
    1f7e:	ff 15       	cp	r31, r15
    1f80:	d0 f0       	brcs	.+52     	; 0x1fb6 <vfprintf+0xca>
    1f82:	9b 32       	cpi	r25, 0x2B	; 43
    1f84:	69 f0       	breq	.+26     	; 0x1fa0 <vfprintf+0xb4>
    1f86:	9c 32       	cpi	r25, 0x2C	; 44
    1f88:	28 f4       	brcc	.+10     	; 0x1f94 <vfprintf+0xa8>
    1f8a:	90 32       	cpi	r25, 0x20	; 32
    1f8c:	59 f0       	breq	.+22     	; 0x1fa4 <vfprintf+0xb8>
    1f8e:	93 32       	cpi	r25, 0x23	; 35
    1f90:	91 f4       	brne	.+36     	; 0x1fb6 <vfprintf+0xca>
    1f92:	0e c0       	rjmp	.+28     	; 0x1fb0 <vfprintf+0xc4>
    1f94:	9d 32       	cpi	r25, 0x2D	; 45
    1f96:	49 f0       	breq	.+18     	; 0x1faa <vfprintf+0xbe>
    1f98:	90 33       	cpi	r25, 0x30	; 48
    1f9a:	69 f4       	brne	.+26     	; 0x1fb6 <vfprintf+0xca>
    1f9c:	41 e0       	ldi	r20, 0x01	; 1
    1f9e:	24 c0       	rjmp	.+72     	; 0x1fe8 <vfprintf+0xfc>
    1fa0:	52 e0       	ldi	r21, 0x02	; 2
    1fa2:	f5 2a       	or	r15, r21
    1fa4:	84 e0       	ldi	r24, 0x04	; 4
    1fa6:	f8 2a       	or	r15, r24
    1fa8:	28 c0       	rjmp	.+80     	; 0x1ffa <vfprintf+0x10e>
    1faa:	98 e0       	ldi	r25, 0x08	; 8
    1fac:	f9 2a       	or	r15, r25
    1fae:	25 c0       	rjmp	.+74     	; 0x1ffa <vfprintf+0x10e>
    1fb0:	e0 e1       	ldi	r30, 0x10	; 16
    1fb2:	fe 2a       	or	r15, r30
    1fb4:	22 c0       	rjmp	.+68     	; 0x1ffa <vfprintf+0x10e>
    1fb6:	f7 fc       	sbrc	r15, 7
    1fb8:	29 c0       	rjmp	.+82     	; 0x200c <vfprintf+0x120>
    1fba:	89 2f       	mov	r24, r25
    1fbc:	80 53       	subi	r24, 0x30	; 48
    1fbe:	8a 30       	cpi	r24, 0x0A	; 10
    1fc0:	70 f4       	brcc	.+28     	; 0x1fde <vfprintf+0xf2>
    1fc2:	f6 fe       	sbrs	r15, 6
    1fc4:	05 c0       	rjmp	.+10     	; 0x1fd0 <vfprintf+0xe4>
    1fc6:	98 9c       	mul	r9, r8
    1fc8:	90 2c       	mov	r9, r0
    1fca:	11 24       	eor	r1, r1
    1fcc:	98 0e       	add	r9, r24
    1fce:	15 c0       	rjmp	.+42     	; 0x1ffa <vfprintf+0x10e>
    1fd0:	e8 9c       	mul	r14, r8
    1fd2:	e0 2c       	mov	r14, r0
    1fd4:	11 24       	eor	r1, r1
    1fd6:	e8 0e       	add	r14, r24
    1fd8:	f0 e2       	ldi	r31, 0x20	; 32
    1fda:	ff 2a       	or	r15, r31
    1fdc:	0e c0       	rjmp	.+28     	; 0x1ffa <vfprintf+0x10e>
    1fde:	9e 32       	cpi	r25, 0x2E	; 46
    1fe0:	29 f4       	brne	.+10     	; 0x1fec <vfprintf+0x100>
    1fe2:	f6 fc       	sbrc	r15, 6
    1fe4:	5f c1       	rjmp	.+702    	; 0x22a4 <__stack+0x1a5>
    1fe6:	40 e4       	ldi	r20, 0x40	; 64
    1fe8:	f4 2a       	or	r15, r20
    1fea:	07 c0       	rjmp	.+14     	; 0x1ffa <vfprintf+0x10e>
    1fec:	9c 36       	cpi	r25, 0x6C	; 108
    1fee:	19 f4       	brne	.+6      	; 0x1ff6 <vfprintf+0x10a>
    1ff0:	50 e8       	ldi	r21, 0x80	; 128
    1ff2:	f5 2a       	or	r15, r21
    1ff4:	02 c0       	rjmp	.+4      	; 0x1ffa <vfprintf+0x10e>
    1ff6:	98 36       	cpi	r25, 0x68	; 104
    1ff8:	49 f4       	brne	.+18     	; 0x200c <vfprintf+0x120>
    1ffa:	f2 01       	movw	r30, r4
    1ffc:	23 fd       	sbrc	r18, 3
    1ffe:	95 91       	lpm	r25, Z+
    2000:	23 ff       	sbrs	r18, 3
    2002:	91 91       	ld	r25, Z+
    2004:	2f 01       	movw	r4, r30
    2006:	99 23       	and	r25, r25
    2008:	09 f0       	breq	.+2      	; 0x200c <vfprintf+0x120>
    200a:	b8 cf       	rjmp	.-144    	; 0x1f7c <vfprintf+0x90>
    200c:	89 2f       	mov	r24, r25
    200e:	85 54       	subi	r24, 0x45	; 69
    2010:	83 30       	cpi	r24, 0x03	; 3
    2012:	18 f0       	brcs	.+6      	; 0x201a <vfprintf+0x12e>
    2014:	80 52       	subi	r24, 0x20	; 32
    2016:	83 30       	cpi	r24, 0x03	; 3
    2018:	38 f4       	brcc	.+14     	; 0x2028 <vfprintf+0x13c>
    201a:	44 e0       	ldi	r20, 0x04	; 4
    201c:	50 e0       	ldi	r21, 0x00	; 0
    201e:	a4 0e       	add	r10, r20
    2020:	b5 1e       	adc	r11, r21
    2022:	5f e3       	ldi	r21, 0x3F	; 63
    2024:	59 83       	std	Y+1, r21	; 0x01
    2026:	0f c0       	rjmp	.+30     	; 0x2046 <vfprintf+0x15a>
    2028:	93 36       	cpi	r25, 0x63	; 99
    202a:	31 f0       	breq	.+12     	; 0x2038 <vfprintf+0x14c>
    202c:	93 37       	cpi	r25, 0x73	; 115
    202e:	79 f0       	breq	.+30     	; 0x204e <vfprintf+0x162>
    2030:	93 35       	cpi	r25, 0x53	; 83
    2032:	09 f0       	breq	.+2      	; 0x2036 <vfprintf+0x14a>
    2034:	52 c0       	rjmp	.+164    	; 0x20da <vfprintf+0x1ee>
    2036:	1f c0       	rjmp	.+62     	; 0x2076 <vfprintf+0x18a>
    2038:	f5 01       	movw	r30, r10
    203a:	80 81       	ld	r24, Z
    203c:	89 83       	std	Y+1, r24	; 0x01
    203e:	42 e0       	ldi	r20, 0x02	; 2
    2040:	50 e0       	ldi	r21, 0x00	; 0
    2042:	a4 0e       	add	r10, r20
    2044:	b5 1e       	adc	r11, r21
    2046:	61 01       	movw	r12, r2
    2048:	01 e0       	ldi	r16, 0x01	; 1
    204a:	10 e0       	ldi	r17, 0x00	; 0
    204c:	11 c0       	rjmp	.+34     	; 0x2070 <vfprintf+0x184>
    204e:	f5 01       	movw	r30, r10
    2050:	c0 80       	ld	r12, Z
    2052:	d1 80       	ldd	r13, Z+1	; 0x01
    2054:	f6 fc       	sbrc	r15, 6
    2056:	03 c0       	rjmp	.+6      	; 0x205e <vfprintf+0x172>
    2058:	6f ef       	ldi	r22, 0xFF	; 255
    205a:	7f ef       	ldi	r23, 0xFF	; 255
    205c:	02 c0       	rjmp	.+4      	; 0x2062 <vfprintf+0x176>
    205e:	69 2d       	mov	r22, r9
    2060:	70 e0       	ldi	r23, 0x00	; 0
    2062:	42 e0       	ldi	r20, 0x02	; 2
    2064:	50 e0       	ldi	r21, 0x00	; 0
    2066:	a4 0e       	add	r10, r20
    2068:	b5 1e       	adc	r11, r21
    206a:	c6 01       	movw	r24, r12
    206c:	43 d1       	rcall	.+646    	; 0x22f4 <strnlen>
    206e:	8c 01       	movw	r16, r24
    2070:	5f e7       	ldi	r21, 0x7F	; 127
    2072:	f5 22       	and	r15, r21
    2074:	13 c0       	rjmp	.+38     	; 0x209c <vfprintf+0x1b0>
    2076:	f5 01       	movw	r30, r10
    2078:	c0 80       	ld	r12, Z
    207a:	d1 80       	ldd	r13, Z+1	; 0x01
    207c:	f6 fc       	sbrc	r15, 6
    207e:	03 c0       	rjmp	.+6      	; 0x2086 <vfprintf+0x19a>
    2080:	6f ef       	ldi	r22, 0xFF	; 255
    2082:	7f ef       	ldi	r23, 0xFF	; 255
    2084:	02 c0       	rjmp	.+4      	; 0x208a <vfprintf+0x19e>
    2086:	69 2d       	mov	r22, r9
    2088:	70 e0       	ldi	r23, 0x00	; 0
    208a:	42 e0       	ldi	r20, 0x02	; 2
    208c:	50 e0       	ldi	r21, 0x00	; 0
    208e:	a4 0e       	add	r10, r20
    2090:	b5 1e       	adc	r11, r21
    2092:	c6 01       	movw	r24, r12
    2094:	24 d1       	rcall	.+584    	; 0x22de <strnlen_P>
    2096:	8c 01       	movw	r16, r24
    2098:	50 e8       	ldi	r21, 0x80	; 128
    209a:	f5 2a       	or	r15, r21
    209c:	f3 fe       	sbrs	r15, 3
    209e:	06 c0       	rjmp	.+12     	; 0x20ac <vfprintf+0x1c0>
    20a0:	18 c0       	rjmp	.+48     	; 0x20d2 <vfprintf+0x1e6>
    20a2:	80 e2       	ldi	r24, 0x20	; 32
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	b3 01       	movw	r22, r6
    20a8:	30 d1       	rcall	.+608    	; 0x230a <fputc>
    20aa:	ea 94       	dec	r14
    20ac:	8e 2d       	mov	r24, r14
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	08 17       	cp	r16, r24
    20b2:	19 07       	cpc	r17, r25
    20b4:	b0 f3       	brcs	.-20     	; 0x20a2 <vfprintf+0x1b6>
    20b6:	0d c0       	rjmp	.+26     	; 0x20d2 <vfprintf+0x1e6>
    20b8:	f6 01       	movw	r30, r12
    20ba:	f7 fc       	sbrc	r15, 7
    20bc:	85 91       	lpm	r24, Z+
    20be:	f7 fe       	sbrs	r15, 7
    20c0:	81 91       	ld	r24, Z+
    20c2:	6f 01       	movw	r12, r30
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	b3 01       	movw	r22, r6
    20c8:	20 d1       	rcall	.+576    	; 0x230a <fputc>
    20ca:	e1 10       	cpse	r14, r1
    20cc:	ea 94       	dec	r14
    20ce:	01 50       	subi	r16, 0x01	; 1
    20d0:	10 40       	sbci	r17, 0x00	; 0
    20d2:	01 15       	cp	r16, r1
    20d4:	11 05       	cpc	r17, r1
    20d6:	81 f7       	brne	.-32     	; 0x20b8 <vfprintf+0x1cc>
    20d8:	e2 c0       	rjmp	.+452    	; 0x229e <__stack+0x19f>
    20da:	94 36       	cpi	r25, 0x64	; 100
    20dc:	11 f0       	breq	.+4      	; 0x20e2 <vfprintf+0x1f6>
    20de:	99 36       	cpi	r25, 0x69	; 105
    20e0:	61 f5       	brne	.+88     	; 0x213a <__stack+0x3b>
    20e2:	f7 fe       	sbrs	r15, 7
    20e4:	08 c0       	rjmp	.+16     	; 0x20f6 <vfprintf+0x20a>
    20e6:	f5 01       	movw	r30, r10
    20e8:	20 81       	ld	r18, Z
    20ea:	31 81       	ldd	r19, Z+1	; 0x01
    20ec:	42 81       	ldd	r20, Z+2	; 0x02
    20ee:	53 81       	ldd	r21, Z+3	; 0x03
    20f0:	84 e0       	ldi	r24, 0x04	; 4
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	0a c0       	rjmp	.+20     	; 0x210a <__stack+0xb>
    20f6:	f5 01       	movw	r30, r10
    20f8:	80 81       	ld	r24, Z
    20fa:	91 81       	ldd	r25, Z+1	; 0x01
    20fc:	9c 01       	movw	r18, r24
    20fe:	44 27       	eor	r20, r20
    2100:	37 fd       	sbrc	r19, 7
    2102:	40 95       	com	r20
    2104:	54 2f       	mov	r21, r20
    2106:	82 e0       	ldi	r24, 0x02	; 2
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	a8 0e       	add	r10, r24
    210c:	b9 1e       	adc	r11, r25
    210e:	9f e6       	ldi	r25, 0x6F	; 111
    2110:	f9 22       	and	r15, r25
    2112:	57 ff       	sbrs	r21, 7
    2114:	09 c0       	rjmp	.+18     	; 0x2128 <__stack+0x29>
    2116:	50 95       	com	r21
    2118:	40 95       	com	r20
    211a:	30 95       	com	r19
    211c:	21 95       	neg	r18
    211e:	3f 4f       	sbci	r19, 0xFF	; 255
    2120:	4f 4f       	sbci	r20, 0xFF	; 255
    2122:	5f 4f       	sbci	r21, 0xFF	; 255
    2124:	e0 e8       	ldi	r30, 0x80	; 128
    2126:	fe 2a       	or	r15, r30
    2128:	ca 01       	movw	r24, r20
    212a:	b9 01       	movw	r22, r18
    212c:	a1 01       	movw	r20, r2
    212e:	2a e0       	ldi	r18, 0x0A	; 10
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	17 d1       	rcall	.+558    	; 0x2362 <__ultoa_invert>
    2134:	d8 2e       	mov	r13, r24
    2136:	d2 18       	sub	r13, r2
    2138:	3f c0       	rjmp	.+126    	; 0x21b8 <__stack+0xb9>
    213a:	95 37       	cpi	r25, 0x75	; 117
    213c:	29 f4       	brne	.+10     	; 0x2148 <__stack+0x49>
    213e:	1f 2d       	mov	r17, r15
    2140:	1f 7e       	andi	r17, 0xEF	; 239
    2142:	2a e0       	ldi	r18, 0x0A	; 10
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	1d c0       	rjmp	.+58     	; 0x2182 <__stack+0x83>
    2148:	1f 2d       	mov	r17, r15
    214a:	19 7f       	andi	r17, 0xF9	; 249
    214c:	9f 36       	cpi	r25, 0x6F	; 111
    214e:	61 f0       	breq	.+24     	; 0x2168 <__stack+0x69>
    2150:	90 37       	cpi	r25, 0x70	; 112
    2152:	20 f4       	brcc	.+8      	; 0x215c <__stack+0x5d>
    2154:	98 35       	cpi	r25, 0x58	; 88
    2156:	09 f0       	breq	.+2      	; 0x215a <__stack+0x5b>
    2158:	a5 c0       	rjmp	.+330    	; 0x22a4 <__stack+0x1a5>
    215a:	0f c0       	rjmp	.+30     	; 0x217a <__stack+0x7b>
    215c:	90 37       	cpi	r25, 0x70	; 112
    215e:	39 f0       	breq	.+14     	; 0x216e <__stack+0x6f>
    2160:	98 37       	cpi	r25, 0x78	; 120
    2162:	09 f0       	breq	.+2      	; 0x2166 <__stack+0x67>
    2164:	9f c0       	rjmp	.+318    	; 0x22a4 <__stack+0x1a5>
    2166:	04 c0       	rjmp	.+8      	; 0x2170 <__stack+0x71>
    2168:	28 e0       	ldi	r18, 0x08	; 8
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	0a c0       	rjmp	.+20     	; 0x2182 <__stack+0x83>
    216e:	10 61       	ori	r17, 0x10	; 16
    2170:	14 fd       	sbrc	r17, 4
    2172:	14 60       	ori	r17, 0x04	; 4
    2174:	20 e1       	ldi	r18, 0x10	; 16
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	04 c0       	rjmp	.+8      	; 0x2182 <__stack+0x83>
    217a:	14 fd       	sbrc	r17, 4
    217c:	16 60       	ori	r17, 0x06	; 6
    217e:	20 e1       	ldi	r18, 0x10	; 16
    2180:	32 e0       	ldi	r19, 0x02	; 2
    2182:	17 ff       	sbrs	r17, 7
    2184:	08 c0       	rjmp	.+16     	; 0x2196 <__stack+0x97>
    2186:	f5 01       	movw	r30, r10
    2188:	60 81       	ld	r22, Z
    218a:	71 81       	ldd	r23, Z+1	; 0x01
    218c:	82 81       	ldd	r24, Z+2	; 0x02
    218e:	93 81       	ldd	r25, Z+3	; 0x03
    2190:	44 e0       	ldi	r20, 0x04	; 4
    2192:	50 e0       	ldi	r21, 0x00	; 0
    2194:	08 c0       	rjmp	.+16     	; 0x21a6 <__stack+0xa7>
    2196:	f5 01       	movw	r30, r10
    2198:	80 81       	ld	r24, Z
    219a:	91 81       	ldd	r25, Z+1	; 0x01
    219c:	bc 01       	movw	r22, r24
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	42 e0       	ldi	r20, 0x02	; 2
    21a4:	50 e0       	ldi	r21, 0x00	; 0
    21a6:	a4 0e       	add	r10, r20
    21a8:	b5 1e       	adc	r11, r21
    21aa:	a1 01       	movw	r20, r2
    21ac:	da d0       	rcall	.+436    	; 0x2362 <__ultoa_invert>
    21ae:	d8 2e       	mov	r13, r24
    21b0:	d2 18       	sub	r13, r2
    21b2:	8f e7       	ldi	r24, 0x7F	; 127
    21b4:	f8 2e       	mov	r15, r24
    21b6:	f1 22       	and	r15, r17
    21b8:	f6 fe       	sbrs	r15, 6
    21ba:	0b c0       	rjmp	.+22     	; 0x21d2 <__stack+0xd3>
    21bc:	5e ef       	ldi	r21, 0xFE	; 254
    21be:	f5 22       	and	r15, r21
    21c0:	d9 14       	cp	r13, r9
    21c2:	38 f4       	brcc	.+14     	; 0x21d2 <__stack+0xd3>
    21c4:	f4 fe       	sbrs	r15, 4
    21c6:	07 c0       	rjmp	.+14     	; 0x21d6 <__stack+0xd7>
    21c8:	f2 fc       	sbrc	r15, 2
    21ca:	05 c0       	rjmp	.+10     	; 0x21d6 <__stack+0xd7>
    21cc:	8f ee       	ldi	r24, 0xEF	; 239
    21ce:	f8 22       	and	r15, r24
    21d0:	02 c0       	rjmp	.+4      	; 0x21d6 <__stack+0xd7>
    21d2:	1d 2d       	mov	r17, r13
    21d4:	01 c0       	rjmp	.+2      	; 0x21d8 <__stack+0xd9>
    21d6:	19 2d       	mov	r17, r9
    21d8:	f4 fe       	sbrs	r15, 4
    21da:	0d c0       	rjmp	.+26     	; 0x21f6 <__stack+0xf7>
    21dc:	fe 01       	movw	r30, r28
    21de:	ed 0d       	add	r30, r13
    21e0:	f1 1d       	adc	r31, r1
    21e2:	80 81       	ld	r24, Z
    21e4:	80 33       	cpi	r24, 0x30	; 48
    21e6:	19 f4       	brne	.+6      	; 0x21ee <__stack+0xef>
    21e8:	99 ee       	ldi	r25, 0xE9	; 233
    21ea:	f9 22       	and	r15, r25
    21ec:	08 c0       	rjmp	.+16     	; 0x21fe <__stack+0xff>
    21ee:	1f 5f       	subi	r17, 0xFF	; 255
    21f0:	f2 fe       	sbrs	r15, 2
    21f2:	05 c0       	rjmp	.+10     	; 0x21fe <__stack+0xff>
    21f4:	03 c0       	rjmp	.+6      	; 0x21fc <__stack+0xfd>
    21f6:	8f 2d       	mov	r24, r15
    21f8:	86 78       	andi	r24, 0x86	; 134
    21fa:	09 f0       	breq	.+2      	; 0x21fe <__stack+0xff>
    21fc:	1f 5f       	subi	r17, 0xFF	; 255
    21fe:	0f 2d       	mov	r16, r15
    2200:	f3 fc       	sbrc	r15, 3
    2202:	13 c0       	rjmp	.+38     	; 0x222a <__stack+0x12b>
    2204:	f0 fe       	sbrs	r15, 0
    2206:	0e c0       	rjmp	.+28     	; 0x2224 <__stack+0x125>
    2208:	1e 15       	cp	r17, r14
    220a:	10 f0       	brcs	.+4      	; 0x2210 <__stack+0x111>
    220c:	9d 2c       	mov	r9, r13
    220e:	0a c0       	rjmp	.+20     	; 0x2224 <__stack+0x125>
    2210:	9d 2c       	mov	r9, r13
    2212:	9e 0c       	add	r9, r14
    2214:	91 1a       	sub	r9, r17
    2216:	1e 2d       	mov	r17, r14
    2218:	05 c0       	rjmp	.+10     	; 0x2224 <__stack+0x125>
    221a:	80 e2       	ldi	r24, 0x20	; 32
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	b3 01       	movw	r22, r6
    2220:	74 d0       	rcall	.+232    	; 0x230a <fputc>
    2222:	1f 5f       	subi	r17, 0xFF	; 255
    2224:	1e 15       	cp	r17, r14
    2226:	c8 f3       	brcs	.-14     	; 0x221a <__stack+0x11b>
    2228:	04 c0       	rjmp	.+8      	; 0x2232 <__stack+0x133>
    222a:	1e 15       	cp	r17, r14
    222c:	10 f4       	brcc	.+4      	; 0x2232 <__stack+0x133>
    222e:	e1 1a       	sub	r14, r17
    2230:	01 c0       	rjmp	.+2      	; 0x2234 <__stack+0x135>
    2232:	ee 24       	eor	r14, r14
    2234:	04 ff       	sbrs	r16, 4
    2236:	0e c0       	rjmp	.+28     	; 0x2254 <__stack+0x155>
    2238:	80 e3       	ldi	r24, 0x30	; 48
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	b3 01       	movw	r22, r6
    223e:	65 d0       	rcall	.+202    	; 0x230a <fputc>
    2240:	02 ff       	sbrs	r16, 2
    2242:	1b c0       	rjmp	.+54     	; 0x227a <__stack+0x17b>
    2244:	01 fd       	sbrc	r16, 1
    2246:	03 c0       	rjmp	.+6      	; 0x224e <__stack+0x14f>
    2248:	88 e7       	ldi	r24, 0x78	; 120
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	0e c0       	rjmp	.+28     	; 0x226a <__stack+0x16b>
    224e:	88 e5       	ldi	r24, 0x58	; 88
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	0b c0       	rjmp	.+22     	; 0x226a <__stack+0x16b>
    2254:	80 2f       	mov	r24, r16
    2256:	86 78       	andi	r24, 0x86	; 134
    2258:	81 f0       	breq	.+32     	; 0x227a <__stack+0x17b>
    225a:	01 ff       	sbrs	r16, 1
    225c:	02 c0       	rjmp	.+4      	; 0x2262 <__stack+0x163>
    225e:	8b e2       	ldi	r24, 0x2B	; 43
    2260:	01 c0       	rjmp	.+2      	; 0x2264 <__stack+0x165>
    2262:	80 e2       	ldi	r24, 0x20	; 32
    2264:	f7 fc       	sbrc	r15, 7
    2266:	8d e2       	ldi	r24, 0x2D	; 45
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	b3 01       	movw	r22, r6
    226c:	4e d0       	rcall	.+156    	; 0x230a <fputc>
    226e:	05 c0       	rjmp	.+10     	; 0x227a <__stack+0x17b>
    2270:	80 e3       	ldi	r24, 0x30	; 48
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	b3 01       	movw	r22, r6
    2276:	49 d0       	rcall	.+146    	; 0x230a <fputc>
    2278:	9a 94       	dec	r9
    227a:	d9 14       	cp	r13, r9
    227c:	c8 f3       	brcs	.-14     	; 0x2270 <__stack+0x171>
    227e:	da 94       	dec	r13
    2280:	f1 01       	movw	r30, r2
    2282:	ed 0d       	add	r30, r13
    2284:	f1 1d       	adc	r31, r1
    2286:	80 81       	ld	r24, Z
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	b3 01       	movw	r22, r6
    228c:	3e d0       	rcall	.+124    	; 0x230a <fputc>
    228e:	dd 20       	and	r13, r13
    2290:	b1 f7       	brne	.-20     	; 0x227e <__stack+0x17f>
    2292:	05 c0       	rjmp	.+10     	; 0x229e <__stack+0x19f>
    2294:	80 e2       	ldi	r24, 0x20	; 32
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	b3 01       	movw	r22, r6
    229a:	37 d0       	rcall	.+110    	; 0x230a <fputc>
    229c:	ea 94       	dec	r14
    229e:	ee 20       	and	r14, r14
    22a0:	c9 f7       	brne	.-14     	; 0x2294 <__stack+0x195>
    22a2:	50 ce       	rjmp	.-864    	; 0x1f44 <vfprintf+0x58>
    22a4:	f3 01       	movw	r30, r6
    22a6:	66 81       	ldd	r22, Z+6	; 0x06
    22a8:	77 81       	ldd	r23, Z+7	; 0x07
    22aa:	cb 01       	movw	r24, r22
    22ac:	2b 96       	adiw	r28, 0x0b	; 11
    22ae:	0f b6       	in	r0, 0x3f	; 63
    22b0:	f8 94       	cli
    22b2:	de bf       	out	0x3e, r29	; 62
    22b4:	0f be       	out	0x3f, r0	; 63
    22b6:	cd bf       	out	0x3d, r28	; 61
    22b8:	cf 91       	pop	r28
    22ba:	df 91       	pop	r29
    22bc:	1f 91       	pop	r17
    22be:	0f 91       	pop	r16
    22c0:	ff 90       	pop	r15
    22c2:	ef 90       	pop	r14
    22c4:	df 90       	pop	r13
    22c6:	cf 90       	pop	r12
    22c8:	bf 90       	pop	r11
    22ca:	af 90       	pop	r10
    22cc:	9f 90       	pop	r9
    22ce:	8f 90       	pop	r8
    22d0:	7f 90       	pop	r7
    22d2:	6f 90       	pop	r6
    22d4:	5f 90       	pop	r5
    22d6:	4f 90       	pop	r4
    22d8:	3f 90       	pop	r3
    22da:	2f 90       	pop	r2
    22dc:	08 95       	ret

000022de <strnlen_P>:
    22de:	fc 01       	movw	r30, r24
    22e0:	05 90       	lpm	r0, Z+
    22e2:	61 50       	subi	r22, 0x01	; 1
    22e4:	70 40       	sbci	r23, 0x00	; 0
    22e6:	01 10       	cpse	r0, r1
    22e8:	d8 f7       	brcc	.-10     	; 0x22e0 <strnlen_P+0x2>
    22ea:	80 95       	com	r24
    22ec:	90 95       	com	r25
    22ee:	8e 0f       	add	r24, r30
    22f0:	9f 1f       	adc	r25, r31
    22f2:	08 95       	ret

000022f4 <strnlen>:
    22f4:	fc 01       	movw	r30, r24
    22f6:	61 50       	subi	r22, 0x01	; 1
    22f8:	70 40       	sbci	r23, 0x00	; 0
    22fa:	01 90       	ld	r0, Z+
    22fc:	01 10       	cpse	r0, r1
    22fe:	d8 f7       	brcc	.-10     	; 0x22f6 <strnlen+0x2>
    2300:	80 95       	com	r24
    2302:	90 95       	com	r25
    2304:	8e 0f       	add	r24, r30
    2306:	9f 1f       	adc	r25, r31
    2308:	08 95       	ret

0000230a <fputc>:
    230a:	0f 93       	push	r16
    230c:	1f 93       	push	r17
    230e:	cf 93       	push	r28
    2310:	df 93       	push	r29
    2312:	8c 01       	movw	r16, r24
    2314:	eb 01       	movw	r28, r22
    2316:	8b 81       	ldd	r24, Y+3	; 0x03
    2318:	81 ff       	sbrs	r24, 1
    231a:	1b c0       	rjmp	.+54     	; 0x2352 <fputc+0x48>
    231c:	82 ff       	sbrs	r24, 2
    231e:	0d c0       	rjmp	.+26     	; 0x233a <fputc+0x30>
    2320:	2e 81       	ldd	r18, Y+6	; 0x06
    2322:	3f 81       	ldd	r19, Y+7	; 0x07
    2324:	8c 81       	ldd	r24, Y+4	; 0x04
    2326:	9d 81       	ldd	r25, Y+5	; 0x05
    2328:	28 17       	cp	r18, r24
    232a:	39 07       	cpc	r19, r25
    232c:	64 f4       	brge	.+24     	; 0x2346 <fputc+0x3c>
    232e:	e8 81       	ld	r30, Y
    2330:	f9 81       	ldd	r31, Y+1	; 0x01
    2332:	01 93       	st	Z+, r16
    2334:	f9 83       	std	Y+1, r31	; 0x01
    2336:	e8 83       	st	Y, r30
    2338:	06 c0       	rjmp	.+12     	; 0x2346 <fputc+0x3c>
    233a:	e8 85       	ldd	r30, Y+8	; 0x08
    233c:	f9 85       	ldd	r31, Y+9	; 0x09
    233e:	80 2f       	mov	r24, r16
    2340:	09 95       	icall
    2342:	89 2b       	or	r24, r25
    2344:	31 f4       	brne	.+12     	; 0x2352 <fputc+0x48>
    2346:	8e 81       	ldd	r24, Y+6	; 0x06
    2348:	9f 81       	ldd	r25, Y+7	; 0x07
    234a:	01 96       	adiw	r24, 0x01	; 1
    234c:	9f 83       	std	Y+7, r25	; 0x07
    234e:	8e 83       	std	Y+6, r24	; 0x06
    2350:	02 c0       	rjmp	.+4      	; 0x2356 <fputc+0x4c>
    2352:	0f ef       	ldi	r16, 0xFF	; 255
    2354:	1f ef       	ldi	r17, 0xFF	; 255
    2356:	c8 01       	movw	r24, r16
    2358:	df 91       	pop	r29
    235a:	cf 91       	pop	r28
    235c:	1f 91       	pop	r17
    235e:	0f 91       	pop	r16
    2360:	08 95       	ret

00002362 <__ultoa_invert>:
    2362:	fa 01       	movw	r30, r20
    2364:	aa 27       	eor	r26, r26
    2366:	28 30       	cpi	r18, 0x08	; 8
    2368:	51 f1       	breq	.+84     	; 0x23be <__ultoa_invert+0x5c>
    236a:	20 31       	cpi	r18, 0x10	; 16
    236c:	81 f1       	breq	.+96     	; 0x23ce <__ultoa_invert+0x6c>
    236e:	e8 94       	clt
    2370:	6f 93       	push	r22
    2372:	6e 7f       	andi	r22, 0xFE	; 254
    2374:	6e 5f       	subi	r22, 0xFE	; 254
    2376:	7f 4f       	sbci	r23, 0xFF	; 255
    2378:	8f 4f       	sbci	r24, 0xFF	; 255
    237a:	9f 4f       	sbci	r25, 0xFF	; 255
    237c:	af 4f       	sbci	r26, 0xFF	; 255
    237e:	b1 e0       	ldi	r27, 0x01	; 1
    2380:	3e d0       	rcall	.+124    	; 0x23fe <__ultoa_invert+0x9c>
    2382:	b4 e0       	ldi	r27, 0x04	; 4
    2384:	3c d0       	rcall	.+120    	; 0x23fe <__ultoa_invert+0x9c>
    2386:	67 0f       	add	r22, r23
    2388:	78 1f       	adc	r23, r24
    238a:	89 1f       	adc	r24, r25
    238c:	9a 1f       	adc	r25, r26
    238e:	a1 1d       	adc	r26, r1
    2390:	68 0f       	add	r22, r24
    2392:	79 1f       	adc	r23, r25
    2394:	8a 1f       	adc	r24, r26
    2396:	91 1d       	adc	r25, r1
    2398:	a1 1d       	adc	r26, r1
    239a:	6a 0f       	add	r22, r26
    239c:	71 1d       	adc	r23, r1
    239e:	81 1d       	adc	r24, r1
    23a0:	91 1d       	adc	r25, r1
    23a2:	a1 1d       	adc	r26, r1
    23a4:	20 d0       	rcall	.+64     	; 0x23e6 <__ultoa_invert+0x84>
    23a6:	09 f4       	brne	.+2      	; 0x23aa <__ultoa_invert+0x48>
    23a8:	68 94       	set
    23aa:	3f 91       	pop	r19
    23ac:	2a e0       	ldi	r18, 0x0A	; 10
    23ae:	26 9f       	mul	r18, r22
    23b0:	11 24       	eor	r1, r1
    23b2:	30 19       	sub	r19, r0
    23b4:	30 5d       	subi	r19, 0xD0	; 208
    23b6:	31 93       	st	Z+, r19
    23b8:	de f6       	brtc	.-74     	; 0x2370 <__ultoa_invert+0xe>
    23ba:	cf 01       	movw	r24, r30
    23bc:	08 95       	ret
    23be:	46 2f       	mov	r20, r22
    23c0:	47 70       	andi	r20, 0x07	; 7
    23c2:	40 5d       	subi	r20, 0xD0	; 208
    23c4:	41 93       	st	Z+, r20
    23c6:	b3 e0       	ldi	r27, 0x03	; 3
    23c8:	0f d0       	rcall	.+30     	; 0x23e8 <__ultoa_invert+0x86>
    23ca:	c9 f7       	brne	.-14     	; 0x23be <__ultoa_invert+0x5c>
    23cc:	f6 cf       	rjmp	.-20     	; 0x23ba <__ultoa_invert+0x58>
    23ce:	46 2f       	mov	r20, r22
    23d0:	4f 70       	andi	r20, 0x0F	; 15
    23d2:	40 5d       	subi	r20, 0xD0	; 208
    23d4:	4a 33       	cpi	r20, 0x3A	; 58
    23d6:	18 f0       	brcs	.+6      	; 0x23de <__ultoa_invert+0x7c>
    23d8:	49 5d       	subi	r20, 0xD9	; 217
    23da:	31 fd       	sbrc	r19, 1
    23dc:	40 52       	subi	r20, 0x20	; 32
    23de:	41 93       	st	Z+, r20
    23e0:	02 d0       	rcall	.+4      	; 0x23e6 <__ultoa_invert+0x84>
    23e2:	a9 f7       	brne	.-22     	; 0x23ce <__ultoa_invert+0x6c>
    23e4:	ea cf       	rjmp	.-44     	; 0x23ba <__ultoa_invert+0x58>
    23e6:	b4 e0       	ldi	r27, 0x04	; 4
    23e8:	a6 95       	lsr	r26
    23ea:	97 95       	ror	r25
    23ec:	87 95       	ror	r24
    23ee:	77 95       	ror	r23
    23f0:	67 95       	ror	r22
    23f2:	ba 95       	dec	r27
    23f4:	c9 f7       	brne	.-14     	; 0x23e8 <__ultoa_invert+0x86>
    23f6:	00 97       	sbiw	r24, 0x00	; 0
    23f8:	61 05       	cpc	r22, r1
    23fa:	71 05       	cpc	r23, r1
    23fc:	08 95       	ret
    23fe:	9b 01       	movw	r18, r22
    2400:	ac 01       	movw	r20, r24
    2402:	0a 2e       	mov	r0, r26
    2404:	06 94       	lsr	r0
    2406:	57 95       	ror	r21
    2408:	47 95       	ror	r20
    240a:	37 95       	ror	r19
    240c:	27 95       	ror	r18
    240e:	ba 95       	dec	r27
    2410:	c9 f7       	brne	.-14     	; 0x2404 <__ultoa_invert+0xa2>
    2412:	62 0f       	add	r22, r18
    2414:	73 1f       	adc	r23, r19
    2416:	84 1f       	adc	r24, r20
    2418:	95 1f       	adc	r25, r21
    241a:	a0 1d       	adc	r26, r0
    241c:	08 95       	ret

0000241e <_exit>:
    241e:	f8 94       	cli

00002420 <__stop_program>:
    2420:	ff cf       	rjmp	.-2      	; 0x2420 <__stop_program>
