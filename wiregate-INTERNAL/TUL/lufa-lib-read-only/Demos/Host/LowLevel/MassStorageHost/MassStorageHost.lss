
MassStorageHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  000025fa  0000268e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800126  00800126  000026b4  2**0
                  ALLOC
  3 .stab         0000219c  00000000  00000000  000026b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dfd  00000000  00000000  00004850  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000003a0  00000000  00000000  0000564d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000904  00000000  00000000  000059ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000620a  00000000  00000000  000062f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000019d8  00000000  00000000  0000c4fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000046f9  00000000  00000000  0000ded3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000580  00000000  00000000  000125cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002732  00000000  00000000  00012b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002b79  00000000  00000000  0001527e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004d0  00000000  00000000  00017df7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
uint8_t MassStore_WriteDeviceBlock(const uint8_t LUNIndex,
                                   const uint32_t BlockAddress,
                                   const uint8_t Blocks,
                                   const uint16_t BlockSize,
                                   void* BufferPtr)
{
       0:	26 c2       	rjmp	.+1100   	; 0x44e <__ctors_end>
		Pipe_DisablePipe();
	}
}

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
       2:	00 00       	nop
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       4:	42 c2       	rjmp	.+1156   	; 0x48a <__bad_interrupt>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       6:	00 00       	nop
	return USB_Host_SendControlRequest(NULL);
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
       8:	40 c2       	rjmp	.+1152   	; 0x48a <__bad_interrupt>

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       a:	00 00       	nop
       c:	3e c2       	rjmp	.+1148   	; 0x48a <__bad_interrupt>
       e:	00 00       	nop
      10:	3c c2       	rjmp	.+1144   	; 0x48a <__bad_interrupt>
      12:	00 00       	nop
      14:	3a c2       	rjmp	.+1140   	; 0x48a <__bad_interrupt>
      16:	00 00       	nop
      18:	38 c2       	rjmp	.+1136   	; 0x48a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	36 c2       	rjmp	.+1132   	; 0x48a <__bad_interrupt>
      1e:	00 00       	nop
      20:	34 c2       	rjmp	.+1128   	; 0x48a <__bad_interrupt>
      22:	00 00       	nop
      24:	32 c2       	rjmp	.+1124   	; 0x48a <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 49 0c 	jmp	0x1892	; 0x1892 <__vector_10>
      2c:	2e c2       	rjmp	.+1116   	; 0x48a <__bad_interrupt>
      2e:	00 00       	nop
      30:	2c c2       	rjmp	.+1112   	; 0x48a <__bad_interrupt>
      32:	00 00       	nop
      34:	2a c2       	rjmp	.+1108   	; 0x48a <__bad_interrupt>
      36:	00 00       	nop
      38:	28 c2       	rjmp	.+1104   	; 0x48a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	26 c2       	rjmp	.+1100   	; 0x48a <__bad_interrupt>
      3e:	00 00       	nop
      40:	24 c2       	rjmp	.+1096   	; 0x48a <__bad_interrupt>
      42:	00 00       	nop
      44:	22 c2       	rjmp	.+1092   	; 0x48a <__bad_interrupt>
      46:	00 00       	nop
      48:	20 c2       	rjmp	.+1088   	; 0x48a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1e c2       	rjmp	.+1084   	; 0x48a <__bad_interrupt>
      4e:	00 00       	nop
      50:	1c c2       	rjmp	.+1080   	; 0x48a <__bad_interrupt>
      52:	00 00       	nop
      54:	1a c2       	rjmp	.+1076   	; 0x48a <__bad_interrupt>
      56:	00 00       	nop
      58:	18 c2       	rjmp	.+1072   	; 0x48a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	16 c2       	rjmp	.+1068   	; 0x48a <__bad_interrupt>
      5e:	00 00       	nop
      60:	14 c2       	rjmp	.+1064   	; 0x48a <__bad_interrupt>
      62:	00 00       	nop
      64:	12 c2       	rjmp	.+1060   	; 0x48a <__bad_interrupt>
      66:	00 00       	nop
      68:	10 c2       	rjmp	.+1056   	; 0x48a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0e c2       	rjmp	.+1052   	; 0x48a <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c c2       	rjmp	.+1048   	; 0x48a <__bad_interrupt>
      72:	00 00       	nop
      74:	0a c2       	rjmp	.+1044   	; 0x48a <__bad_interrupt>
      76:	00 00       	nop
      78:	08 c2       	rjmp	.+1040   	; 0x48a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	06 c2       	rjmp	.+1036   	; 0x48a <__bad_interrupt>
      7e:	00 00       	nop
      80:	04 c2       	rjmp	.+1032   	; 0x48a <__bad_interrupt>
      82:	00 00       	nop
      84:	02 c2       	rjmp	.+1028   	; 0x48a <__bad_interrupt>
      86:	00 00       	nop
      88:	00 c2       	rjmp	.+1024   	; 0x48a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fe c1       	rjmp	.+1020   	; 0x48a <__bad_interrupt>
      8e:	00 00       	nop
      90:	fc c1       	rjmp	.+1016   	; 0x48a <__bad_interrupt>
      92:	00 00       	nop
      94:	fa c1       	rjmp	.+1012   	; 0x48a <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4793>:
      98:	20 20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a       -- Error Code:
      a8:	20 25 64 1b 5b 33 37 6d 00                           %d.[37m.

000000b1 <__c.4791>:
      b1:	1b 5b 33 31 6d 43 6f 6d 6d 61 6e 64 20 65 72 72     .[31mCommand err
      c1:	6f 72 20 28 25 53 29 2e 0d 0a 00                    or (%S)....

000000cc <__c.4789>:
      cc:	1b 5b 33 31 6d 53 43 53 49 20 63 6f 6d 6d 61 6e     .[31mSCSI comman
      dc:	64 20 65 72 72 6f 72 20 28 25 53 29 2e 0d 0a 00     d error (%S)....

000000ec <__c.4726>:
      ec:	52 65 61 64 20 44 65 76 69 63 65 20 42 6c 6f 63     Read Device Bloc
      fc:	6b 00                                               k.

000000fe <__c.4720>:
      fe:	0d 0a 0d 0a 50 72 65 73 73 20 62 6f 61 72 64 20     ....Press board 
     10e:	62 75 74 74 6f 6e 20 74 6f 20 72 65 61 64 20 65     button to read e
     11e:	6e 74 69 72 65 20 41 53 43 49 49 20 63 6f 6e 74     ntire ASCII cont
     12e:	65 6e 74 73 20 6f 66 20 64 69 73 6b 2e 2e 2e 0d     ents of disk....
     13e:	0a 0d 0a 00                                         ....

00000142 <__c.4715>:
     142:	0d 0a 00                                            ...

00000145 <__c.4708>:
     145:	20 20 20 20 00                                          .

0000014a <__c.4703>:
     14a:	25 2e 32 58 20 00                                   %.2X .

00000150 <__c.4697>:
     150:	0d 0a 43 6f 6e 74 65 6e 74 73 20 6f 66 20 66 69     ..Contents of fi
     160:	72 73 74 20 62 6c 6f 63 6b 3a 0d 0a 00              rst block:...

0000016d <__c.4695>:
     16d:	52 65 61 64 20 44 65 76 69 63 65 20 42 6c 6f 63     Read Device Bloc
     17d:	6b 00                                               k.

0000017f <__c.4692>:
     17f:	25 6c 75 20 62 6c 6f 63 6b 73 20 6f 66 20 25 6c     %lu blocks of %l
     18f:	75 20 62 79 74 65 73 2e 0d 0a 00                    u bytes....

0000019a <__c.4690>:
     19a:	52 65 61 64 20 43 61 70 61 63 69 74 79 00           Read Capacity.

000001a8 <__c.4687>:
     1a8:	0d 0a 52 65 74 72 69 65 76 69 6e 67 20 43 61 70     ..Retrieving Cap
     1b8:	61 63 69 74 79 2e 2e 2e 20 00                       acity... .

000001c2 <__c.4684>:
     1c2:	54 65 73 74 20 55 6e 69 74 20 52 65 61 64 79 00     Test Unit Ready.

000001d2 <__c.4681>:
     1d2:	57 61 69 74 69 6e 67 20 75 6e 74 69 6c 20 72 65     Waiting until re
     1e2:	61 64 79 2e 2e 00                                   ady...

000001e8 <__c.4679>:
     1e8:	56 65 6e 64 6f 72 20 22 25 2e 38 73 22 2c 20 50     Vendor "%.8s", P
     1f8:	72 6f 64 75 63 74 20 22 25 2e 31 36 73 22 0d 0a     roduct "%.16s"..
     208:	00                                                  .

00000209 <__c.4677>:
     209:	49 6e 71 75 69 72 79 00                             Inquiry.

00000211 <__c.4674>:
     211:	50 72 65 76 65 6e 74 2f 41 6c 6c 6f 77 20 4d 65     Prevent/Allow Me
     221:	64 69 75 6d 20 52 65 6d 6f 76 61 6c 00              dium Removal.

0000022e <__c.4672>:
     22e:	52 65 71 75 65 73 74 20 53 65 6e 73 65 00           Request Sense.

0000023c <__c.4669>:
     23c:	4d 61 73 73 20 53 74 6f 72 61 67 65 20 52 65 73     Mass Storage Res
     24c:	65 74 00                                            et.

0000024f <__c.4667>:
     24f:	54 6f 74 61 6c 20 4c 55 4e 73 3a 20 25 64 20 2d     Total LUNs: %d -
     25f:	20 55 73 69 6e 67 20 66 69 72 73 74 20 4c 55 4e      Using first LUN
     26f:	20 69 6e 20 64 65 76 69 63 65 2e 0d 0a 00            in device....

0000027d <__c.4665>:
     27d:	47 65 74 20 4d 61 78 20 4c 55 4e 00                 Get Max LUN.

00000289 <__c.4655>:
     289:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     299:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     2a9:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     2b9:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     2c9:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     2d9:	1b 5b 33 37 6d 00                                   .[37m.

000002df <__c.4647>:
     2df:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     2ef:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     2ff:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000030e <__c.4639>:
     30e:	4d 61 73 73 20 53 74 6f 72 61 67 65 20 44 69 73     Mass Storage Dis
     31e:	6b 20 45 6e 75 6d 65 72 61 74 65 64 2e 0d 0a 00     k Enumerated....

0000032e <__c.4637>:
     32e:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     33e:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     34e:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     35e:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     36e:	37 6d 00                                            7m.

00000371 <__c.4635>:
     371:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     381:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000038b <__c.4633>:
     38b:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     39b:	69 63 65 2e 0d 0a 00                                ice....

000003a2 <__c.4631>:
     3a2:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     3b2:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     3c2:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

000003cc <__c.4628>:
     3cc:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     3dc:	61 74 61 2e 0d 0a 00                                ata....

000003e3 <__c.4623>:
     3e3:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
     3f3:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
     403:	00                                                  .

00000404 <__c.4618>:
     404:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     414:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

00000421 <__c.4605>:
     421:	1b 5b 33 36 6d 4d 61 73 73 20 53 74 6f 72 61 67     .[36mMass Storag
     431:	65 20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e     e Host Demo runn
     441:	69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00 00              ing....[37m..

0000044e <__ctors_end>:
     44e:	11 24       	eor	r1, r1
     450:	1f be       	out	0x3f, r1	; 63
     452:	cf ef       	ldi	r28, 0xFF	; 255
     454:	d0 e2       	ldi	r29, 0x20	; 32
     456:	de bf       	out	0x3e, r29	; 62
     458:	cd bf       	out	0x3d, r28	; 61

0000045a <__do_copy_data>:
     45a:	11 e0       	ldi	r17, 0x01	; 1
     45c:	a0 e0       	ldi	r26, 0x00	; 0
     45e:	b1 e0       	ldi	r27, 0x01	; 1
     460:	ea ef       	ldi	r30, 0xFA	; 250
     462:	f5 e2       	ldi	r31, 0x25	; 37
     464:	00 e0       	ldi	r16, 0x00	; 0
     466:	0b bf       	out	0x3b, r16	; 59
     468:	02 c0       	rjmp	.+4      	; 0x46e <__do_copy_data+0x14>
     46a:	07 90       	elpm	r0, Z+
     46c:	0d 92       	st	X+, r0
     46e:	a6 32       	cpi	r26, 0x26	; 38
     470:	b1 07       	cpc	r27, r17
     472:	d9 f7       	brne	.-10     	; 0x46a <__do_copy_data+0x10>

00000474 <__do_clear_bss>:
     474:	11 e0       	ldi	r17, 0x01	; 1
     476:	a6 e2       	ldi	r26, 0x26	; 38
     478:	b1 e0       	ldi	r27, 0x01	; 1
     47a:	01 c0       	rjmp	.+2      	; 0x47e <.do_clear_bss_start>

0000047c <.do_clear_bss_loop>:
     47c:	1d 92       	st	X+, r1

0000047e <.do_clear_bss_start>:
     47e:	a9 34       	cpi	r26, 0x49	; 73
     480:	b1 07       	cpc	r27, r17
     482:	e1 f7       	brne	.-8      	; 0x47c <.do_clear_bss_loop>
     484:	37 d3       	rcall	.+1646   	; 0xaf4 <main>
     486:	0c 94 fb 12 	jmp	0x25f6	; 0x25f6 <_exit>

0000048a <__bad_interrupt>:
     48a:	ba cd       	rjmp	.-1164   	; 0x0 <__vectors>

0000048c <ShowDiskReadError>:
 *  \param[in] CommandString  ASCII string located in PROGMEM space indicating what operation failed
 *  \param[in] ErrorCode      Error code of the function which failed to complete successfully
 */
void ShowDiskReadError(char* CommandString,
                       const uint8_t ErrorCode)
{
     48c:	1f 93       	push	r17
     48e:	9c 01       	movw	r18, r24
     490:	16 2f       	mov	r17, r22
	if (ErrorCode == MASS_STORE_SCSI_COMMAND_FAILED)
     492:	60 3c       	cpi	r22, 0xC0	; 192
     494:	79 f4       	brne	.+30     	; 0x4b4 <ShowDiskReadError+0x28>
	{
		/* Display the error code */
		printf_P(PSTR(ESC_FG_RED "SCSI command error (%S).\r\n"), CommandString);
     496:	00 d0       	rcall	.+0      	; 0x498 <ShowDiskReadError+0xc>
     498:	00 d0       	rcall	.+0      	; 0x49a <ShowDiskReadError+0xe>
     49a:	8c ec       	ldi	r24, 0xCC	; 204
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	ad b7       	in	r26, 0x3d	; 61
     4a0:	be b7       	in	r27, 0x3e	; 62
     4a2:	12 96       	adiw	r26, 0x02	; 2
     4a4:	9c 93       	st	X, r25
     4a6:	8e 93       	st	-X, r24
     4a8:	11 97       	sbiw	r26, 0x01	; 1
     4aa:	14 96       	adiw	r26, 0x04	; 4
     4ac:	3c 93       	st	X, r19
     4ae:	2e 93       	st	-X, r18
     4b0:	13 97       	sbiw	r26, 0x03	; 3
     4b2:	19 c0       	rjmp	.+50     	; 0x4e6 <ShowDiskReadError+0x5a>
	}
	else
	{
		/* Display the error code */
		printf_P(PSTR(ESC_FG_RED "Command error (%S).\r\n"), CommandString);
     4b4:	00 d0       	rcall	.+0      	; 0x4b6 <ShowDiskReadError+0x2a>
     4b6:	00 d0       	rcall	.+0      	; 0x4b8 <ShowDiskReadError+0x2c>
     4b8:	81 eb       	ldi	r24, 0xB1	; 177
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	ed b7       	in	r30, 0x3d	; 61
     4be:	fe b7       	in	r31, 0x3e	; 62
     4c0:	92 83       	std	Z+2, r25	; 0x02
     4c2:	81 83       	std	Z+1, r24	; 0x01
     4c4:	34 83       	std	Z+4, r19	; 0x04
     4c6:	23 83       	std	Z+3, r18	; 0x03
     4c8:	0e 94 34 10 	call	0x2068	; 0x2068 <printf_P>
		printf_P(PSTR("  -- Error Code: %d" ESC_FG_WHITE), ErrorCode);
     4cc:	ed b7       	in	r30, 0x3d	; 61
     4ce:	fe b7       	in	r31, 0x3e	; 62
     4d0:	31 96       	adiw	r30, 0x01	; 1
     4d2:	88 e9       	ldi	r24, 0x98	; 152
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	ad b7       	in	r26, 0x3d	; 61
     4d8:	be b7       	in	r27, 0x3e	; 62
     4da:	12 96       	adiw	r26, 0x02	; 2
     4dc:	9c 93       	st	X, r25
     4de:	8e 93       	st	-X, r24
     4e0:	11 97       	sbiw	r26, 0x01	; 1
     4e2:	12 83       	std	Z+2, r17	; 0x02
     4e4:	13 82       	std	Z+3, r1	; 0x03
     4e6:	0e 94 34 10 	call	0x2068	; 0x2068 <printf_P>
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     4f2:	80 91 a9 00 	lds	r24, 0x00A9
     4f6:	80 64       	ori	r24, 0x40	; 64
     4f8:	80 93 a9 00 	sts	0x00A9, r24
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     4fc:	8b b1       	in	r24, 0x0b	; 11
     4fe:	8f 70       	andi	r24, 0x0F	; 15
     500:	80 69       	ori	r24, 0x90	; 144
     502:	8b b9       	out	0x0b, r24	; 11

	Pipe_Freeze();

	/* Indicate device error via the status LEDs */
	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     504:	1f 91       	pop	r17
     506:	08 95       	ret

00000508 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     508:	90 91 34 01 	lds	r25, 0x0134
     50c:	2d b7       	in	r18, 0x3d	; 61
     50e:	3e b7       	in	r19, 0x3e	; 62
     510:	28 50       	subi	r18, 0x08	; 8
     512:	30 40       	sbci	r19, 0x00	; 0
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	f8 94       	cli
     518:	3e bf       	out	0x3e, r19	; 62
     51a:	0f be       	out	0x3f, r0	; 63
     51c:	2d bf       	out	0x3d, r18	; 61
     51e:	ed b7       	in	r30, 0x3d	; 61
     520:	fe b7       	in	r31, 0x3e	; 62
     522:	31 96       	adiw	r30, 0x01	; 1
     524:	29 e8       	ldi	r18, 0x89	; 137
     526:	32 e0       	ldi	r19, 0x02	; 2
     528:	ad b7       	in	r26, 0x3d	; 61
     52a:	be b7       	in	r27, 0x3e	; 62
     52c:	12 96       	adiw	r26, 0x02	; 2
     52e:	3c 93       	st	X, r19
     530:	2e 93       	st	-X, r18
     532:	11 97       	sbiw	r26, 0x01	; 1
     534:	82 83       	std	Z+2, r24	; 0x02
     536:	13 82       	std	Z+3, r1	; 0x03
     538:	64 83       	std	Z+4, r22	; 0x04
     53a:	15 82       	std	Z+5, r1	; 0x05
     53c:	96 83       	std	Z+6, r25	; 0x06
     53e:	17 82       	std	Z+7, r1	; 0x07
     540:	0e 94 34 10 	call	0x2068	; 0x2068 <printf_P>
     544:	8b b1       	in	r24, 0x0b	; 11
     546:	8f 70       	andi	r24, 0x0F	; 15
     548:	80 69       	ori	r24, 0x90	; 144
     54a:	8b b9       	out	0x0b, r24	; 11
     54c:	2d b7       	in	r18, 0x3d	; 61
     54e:	3e b7       	in	r19, 0x3e	; 62
     550:	28 5f       	subi	r18, 0xF8	; 248
     552:	3f 4f       	sbci	r19, 0xFF	; 255
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	f8 94       	cli
     558:	3e bf       	out	0x3e, r19	; 62
     55a:	0f be       	out	0x3f, r0	; 63
     55c:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     55e:	08 95       	ret

00000560 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     560:	83 ee       	ldi	r24, 0xE3	; 227
     562:	93 e0       	ldi	r25, 0x03	; 3
     564:	0e 94 56 10 	call	0x20ac	; 0x20ac <puts_P>
     568:	8b b1       	in	r24, 0x0b	; 11
     56a:	8f 70       	andi	r24, 0x0F	; 15
     56c:	80 61       	ori	r24, 0x10	; 16
     56e:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     570:	08 95       	ret

00000572 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     572:	84 e0       	ldi	r24, 0x04	; 4
     574:	94 e0       	ldi	r25, 0x04	; 4
     576:	0e 94 56 10 	call	0x20ac	; 0x20ac <puts_P>
     57a:	8b b1       	in	r24, 0x0b	; 11
     57c:	8f 70       	andi	r24, 0x0F	; 15
     57e:	80 6a       	ori	r24, 0xA0	; 160
     580:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     582:	08 95       	ret

00000584 <MassStorageHost_Task>:

/** Task to set the configuration of the attached device after it has been enumerated, and to read in blocks from
 *  the device and print them to the serial port.
 */
void MassStorageHost_Task(void)
{
     584:	2f 92       	push	r2
     586:	3f 92       	push	r3
     588:	4f 92       	push	r4
     58a:	5f 92       	push	r5
     58c:	6f 92       	push	r6
     58e:	7f 92       	push	r7
     590:	8f 92       	push	r8
     592:	9f 92       	push	r9
     594:	af 92       	push	r10
     596:	bf 92       	push	r11
     598:	cf 92       	push	r12
     59a:	df 92       	push	r13
     59c:	ef 92       	push	r14
     59e:	ff 92       	push	r15
     5a0:	0f 93       	push	r16
     5a2:	1f 93       	push	r17
     5a4:	df 93       	push	r29
     5a6:	cf 93       	push	r28
     5a8:	cd b7       	in	r28, 0x3d	; 61
     5aa:	de b7       	in	r29, 0x3e	; 62
     5ac:	c0 54       	subi	r28, 0x40	; 64
     5ae:	d0 40       	sbci	r29, 0x00	; 0
     5b0:	0f b6       	in	r0, 0x3f	; 63
     5b2:	f8 94       	cli
     5b4:	de bf       	out	0x3e, r29	; 62
     5b6:	0f be       	out	0x3f, r0	; 63
     5b8:	cd bf       	out	0x3d, r28	; 61
	}

	/* Indicate device no longer busy */
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
	USB_Host_SetDeviceConfiguration(0);
}
     5ba:	2d b6       	in	r2, 0x3d	; 61
     5bc:	3e b6       	in	r3, 0x3e	; 62

/** Task to set the configuration of the attached device after it has been enumerated, and to read in blocks from
 *  the device and print them to the serial port.
 */
void MassStorageHost_Task(void)
{
     5be:	2f ae       	std	Y+63, r2	; 0x3f
     5c0:	9e b7       	in	r25, 0x3e	; 62
     5c2:	21 96       	adiw	r28, 0x01	; 1
     5c4:	9f af       	std	Y+63, r25	; 0x3f
     5c6:	21 97       	sbiw	r28, 0x01	; 1
	if (USB_HostState != HOST_STATE_Configured)
     5c8:	80 91 34 01 	lds	r24, 0x0134
     5cc:	8b 30       	cpi	r24, 0x0B	; 11
     5ce:	09 f0       	breq	.+2      	; 0x5d2 <MassStorageHost_Task+0x4e>
     5d0:	b5 c1       	rjmp	.+874    	; 0x93c <MassStorageHost_Task+0x3b8>
     5d2:	8b b1       	in	r24, 0x0b	; 11
     5d4:	8f 70       	andi	r24, 0x0F	; 15
     5d6:	80 62       	ori	r24, 0x20	; 32
     5d8:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

	uint8_t ErrorCode;

	/* Send the request, display error and wait for device detach if request fails */
	if ((ErrorCode = MassStore_GetMaxLUN(&MassStore_MaxLUNIndex)) != HOST_SENDCONTROL_Successful)
     5da:	89 e2       	ldi	r24, 0x29	; 41
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	43 d6       	rcall	.+3206   	; 0x1266 <MassStore_GetMaxLUN>
     5e0:	68 2f       	mov	r22, r24
     5e2:	88 23       	and	r24, r24
     5e4:	19 f0       	breq	.+6      	; 0x5ec <MassStorageHost_Task+0x68>
	{
		ShowDiskReadError(PSTR("Get Max LUN"), ErrorCode);
     5e6:	8d e7       	ldi	r24, 0x7D	; 125
     5e8:	92 e0       	ldi	r25, 0x02	; 2
     5ea:	5f c1       	rjmp	.+702    	; 0x8aa <MassStorageHost_Task+0x326>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Print number of LUNs detected in the attached device */
	printf_P(PSTR("Total LUNs: %d - Using first LUN in device.\r\n"), (MassStore_MaxLUNIndex + 1));
     5ec:	00 d0       	rcall	.+0      	; 0x5ee <MassStorageHost_Task+0x6a>
     5ee:	00 d0       	rcall	.+0      	; 0x5f0 <MassStorageHost_Task+0x6c>
     5f0:	8f e4       	ldi	r24, 0x4F	; 79
     5f2:	92 e0       	ldi	r25, 0x02	; 2
     5f4:	ad b7       	in	r26, 0x3d	; 61
     5f6:	be b7       	in	r27, 0x3e	; 62
     5f8:	12 96       	adiw	r26, 0x02	; 2
     5fa:	9c 93       	st	X, r25
     5fc:	8e 93       	st	-X, r24
     5fe:	11 97       	sbiw	r26, 0x01	; 1
     600:	80 91 29 01 	lds	r24, 0x0129
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	01 96       	adiw	r24, 0x01	; 1
     608:	14 96       	adiw	r26, 0x04	; 4
     60a:	9c 93       	st	X, r25
     60c:	8e 93       	st	-X, r24
     60e:	13 97       	sbiw	r26, 0x03	; 3
     610:	0e 94 34 10 	call	0x2068	; 0x2068 <printf_P>

	/* Reset the Mass Storage device interface, ready for use */
	if ((ErrorCode = MassStore_MassStorageReset()) != HOST_SENDCONTROL_Successful)
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
     61c:	40 d6       	rcall	.+3200   	; 0x129e <MassStore_MassStorageReset>
     61e:	68 2f       	mov	r22, r24
     620:	88 23       	and	r24, r24
     622:	19 f0       	breq	.+6      	; 0x62a <MassStorageHost_Task+0xa6>
	{
		ShowDiskReadError(PSTR("Mass Storage Reset"), ErrorCode);
     624:	8c e3       	ldi	r24, 0x3C	; 60
     626:	92 e0       	ldi	r25, 0x02	; 2
     628:	40 c1       	rjmp	.+640    	; 0x8aa <MassStorageHost_Task+0x326>
	}

	/* Get sense data from the device - many devices will not accept any other commands until the sense data
	 * is read - both on start-up and after a failed command */
	SCSI_Request_Sense_Response_t SenseData;
	if ((ErrorCode = MassStore_RequestSense(0, &SenseData)) != 0)
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	be 01       	movw	r22, r28
     62e:	67 5f       	subi	r22, 0xF7	; 247
     630:	7f 4f       	sbci	r23, 0xFF	; 255
     632:	91 d5       	rcall	.+2850   	; 0x1156 <MassStore_RequestSense>
     634:	68 2f       	mov	r22, r24
     636:	88 23       	and	r24, r24
     638:	19 f0       	breq	.+6      	; 0x640 <MassStorageHost_Task+0xbc>
	{
		ShowDiskReadError(PSTR("Request Sense"), ErrorCode);
     63a:	8e e2       	ldi	r24, 0x2E	; 46
     63c:	92 e0       	ldi	r25, 0x02	; 2
     63e:	35 c1       	rjmp	.+618    	; 0x8aa <MassStorageHost_Task+0x326>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Set the prevent removal flag for the device, allowing it to be accessed */
	if ((ErrorCode = MassStore_PreventAllowMediumRemoval(0, true)) != 0)
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	61 e0       	ldi	r22, 0x01	; 1
     644:	4b d4       	rcall	.+2198   	; 0xedc <MassStore_PreventAllowMediumRemoval>
     646:	68 2f       	mov	r22, r24
     648:	88 23       	and	r24, r24
     64a:	19 f0       	breq	.+6      	; 0x652 <MassStorageHost_Task+0xce>
	{
		ShowDiskReadError(PSTR("Prevent/Allow Medium Removal"), ErrorCode);
     64c:	81 e1       	ldi	r24, 0x11	; 17
     64e:	92 e0       	ldi	r25, 0x02	; 2
     650:	2c c1       	rjmp	.+600    	; 0x8aa <MassStorageHost_Task+0x326>
		return;
	}

	/* Get inquiry data from the device */
	SCSI_Inquiry_Response_t InquiryData;
	if ((ErrorCode = MassStore_Inquiry(0, &InquiryData)) != 0)
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	be 01       	movw	r22, r28
     656:	65 5e       	subi	r22, 0xE5	; 229
     658:	7f 4f       	sbci	r23, 0xFF	; 255
     65a:	c1 d5       	rcall	.+2946   	; 0x11de <MassStore_Inquiry>
     65c:	68 2f       	mov	r22, r24
     65e:	88 23       	and	r24, r24
     660:	19 f0       	breq	.+6      	; 0x668 <MassStorageHost_Task+0xe4>
	{
		ShowDiskReadError(PSTR("Inquiry"), ErrorCode);
     662:	89 e0       	ldi	r24, 0x09	; 9
     664:	92 e0       	ldi	r25, 0x02	; 2
     666:	21 c1       	rjmp	.+578    	; 0x8aa <MassStorageHost_Task+0x326>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Print vendor and product names of attached device */
	printf_P(PSTR("Vendor \"%.8s\", Product \"%.16s\"\r\n"), InquiryData.VendorID, InquiryData.ProductID);
     668:	00 d0       	rcall	.+0      	; 0x66a <MassStorageHost_Task+0xe6>
     66a:	00 d0       	rcall	.+0      	; 0x66c <MassStorageHost_Task+0xe8>
     66c:	00 d0       	rcall	.+0      	; 0x66e <MassStorageHost_Task+0xea>
     66e:	ed b7       	in	r30, 0x3d	; 61
     670:	fe b7       	in	r31, 0x3e	; 62
     672:	31 96       	adiw	r30, 0x01	; 1
     674:	88 ee       	ldi	r24, 0xE8	; 232
     676:	91 e0       	ldi	r25, 0x01	; 1
     678:	ad b7       	in	r26, 0x3d	; 61
     67a:	be b7       	in	r27, 0x3e	; 62
     67c:	12 96       	adiw	r26, 0x02	; 2
     67e:	9c 93       	st	X, r25
     680:	8e 93       	st	-X, r24
     682:	11 97       	sbiw	r26, 0x01	; 1
     684:	ce 01       	movw	r24, r28
     686:	83 96       	adiw	r24, 0x23	; 35
     688:	93 83       	std	Z+3, r25	; 0x03
     68a:	82 83       	std	Z+2, r24	; 0x02
     68c:	ce 01       	movw	r24, r28
     68e:	8b 96       	adiw	r24, 0x2b	; 43
     690:	95 83       	std	Z+5, r25	; 0x05
     692:	84 83       	std	Z+4, r24	; 0x04
     694:	0e 94 34 10 	call	0x2068	; 0x2068 <printf_P>

	/* Wait until disk ready */
	puts_P(PSTR("Waiting until ready.."));
     698:	ed b7       	in	r30, 0x3d	; 61
     69a:	fe b7       	in	r31, 0x3e	; 62
     69c:	36 96       	adiw	r30, 0x06	; 6
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	f8 94       	cli
     6a2:	fe bf       	out	0x3e, r31	; 62
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	ed bf       	out	0x3d, r30	; 61
     6a8:	82 ed       	ldi	r24, 0xD2	; 210
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	0e 94 56 10 	call	0x20ac	; 0x20ac <puts_P>
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
				UDR1 = DataByte;
     6b0:	1e e2       	ldi	r17, 0x2E	; 46
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     6b2:	80 91 c8 00 	lds	r24, 0x00C8
     6b6:	85 ff       	sbrs	r24, 5
     6b8:	fc cf       	rjmp	.-8      	; 0x6b2 <MassStorageHost_Task+0x12e>
				UDR1 = DataByte;
     6ba:	10 93 ce 00 	sts	0x00CE, r17
	for (;;)
	{
		Serial_SendByte('.');

		/* Abort if device removed */
		if (USB_HostState == HOST_STATE_Unattached)
     6be:	80 91 34 01 	lds	r24, 0x0134
     6c2:	81 30       	cpi	r24, 0x01	; 1
     6c4:	51 f0       	breq	.+20     	; 0x6da <MassStorageHost_Task+0x156>
		  break;

		/* Check to see if the attached device is ready for new commands */
		ErrorCode = MassStore_TestUnitReady(0);
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	9c d4       	rcall	.+2360   	; 0x1002 <MassStore_TestUnitReady>
     6ca:	68 2f       	mov	r22, r24

		/* If attached device is ready, abort the loop */
		if (!(ErrorCode))
     6cc:	88 23       	and	r24, r24
     6ce:	29 f0       	breq	.+10     	; 0x6da <MassStorageHost_Task+0x156>
		  break;

		/* If an error other than a logical command failure (indicating device busy) returned, abort */
		if (ErrorCode != MASS_STORE_SCSI_COMMAND_FAILED)
     6d0:	80 3c       	cpi	r24, 0xC0	; 192
     6d2:	79 f3       	breq	.-34     	; 0x6b2 <MassStorageHost_Task+0x12e>
		{
			ShowDiskReadError(PSTR("Test Unit Ready"), ErrorCode);
     6d4:	82 ec       	ldi	r24, 0xC2	; 194
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	e8 c0       	rjmp	.+464    	; 0x8aa <MassStorageHost_Task+0x326>
			USB_Host_SetDeviceConfiguration(0);
			return;
		}
	}

	puts_P(PSTR("\r\nRetrieving Capacity... "));
     6da:	88 ea       	ldi	r24, 0xA8	; 168
     6dc:	91 e0       	ldi	r25, 0x01	; 1
     6de:	0e 94 56 10 	call	0x20ac	; 0x20ac <puts_P>

	/* Create new structure for the disk's capacity in blocks and block size */
	SCSI_Capacity_t DiskCapacity;

	/* Retrieve disk capacity */
	if ((ErrorCode = MassStore_ReadCapacity(0, &DiskCapacity)) != 0)
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	be 01       	movw	r22, r28
     6e6:	6f 5f       	subi	r22, 0xFF	; 255
     6e8:	7f 4f       	sbci	r23, 0xFF	; 255
     6ea:	33 d4       	rcall	.+2150   	; 0xf52 <MassStore_ReadCapacity>
     6ec:	68 2f       	mov	r22, r24
     6ee:	88 23       	and	r24, r24
     6f0:	19 f0       	breq	.+6      	; 0x6f8 <MassStorageHost_Task+0x174>
	{
		ShowDiskReadError(PSTR("Read Capacity"), ErrorCode);
     6f2:	8a e9       	ldi	r24, 0x9A	; 154
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	d9 c0       	rjmp	.+434    	; 0x8aa <MassStorageHost_Task+0x326>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Display the disk capacity in blocks * block size bytes */
	printf_P(PSTR("%lu blocks of %lu bytes.\r\n"), DiskCapacity.Blocks, DiskCapacity.BlockSize);
     6f8:	8d b7       	in	r24, 0x3d	; 61
     6fa:	9e b7       	in	r25, 0x3e	; 62
     6fc:	0a 97       	sbiw	r24, 0x0a	; 10
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	f8 94       	cli
     702:	9e bf       	out	0x3e, r25	; 62
     704:	0f be       	out	0x3f, r0	; 63
     706:	8d bf       	out	0x3d, r24	; 61
     708:	ed b7       	in	r30, 0x3d	; 61
     70a:	fe b7       	in	r31, 0x3e	; 62
     70c:	31 96       	adiw	r30, 0x01	; 1
     70e:	8f e7       	ldi	r24, 0x7F	; 127
     710:	91 e0       	ldi	r25, 0x01	; 1
     712:	ad b7       	in	r26, 0x3d	; 61
     714:	be b7       	in	r27, 0x3e	; 62
     716:	12 96       	adiw	r26, 0x02	; 2
     718:	9c 93       	st	X, r25
     71a:	8e 93       	st	-X, r24
     71c:	11 97       	sbiw	r26, 0x01	; 1
     71e:	89 81       	ldd	r24, Y+1	; 0x01
     720:	9a 81       	ldd	r25, Y+2	; 0x02
     722:	ab 81       	ldd	r26, Y+3	; 0x03
     724:	bc 81       	ldd	r27, Y+4	; 0x04
     726:	82 83       	std	Z+2, r24	; 0x02
     728:	93 83       	std	Z+3, r25	; 0x03
     72a:	a4 83       	std	Z+4, r26	; 0x04
     72c:	b5 83       	std	Z+5, r27	; 0x05
     72e:	8d 81       	ldd	r24, Y+5	; 0x05
     730:	9e 81       	ldd	r25, Y+6	; 0x06
     732:	af 81       	ldd	r26, Y+7	; 0x07
     734:	b8 85       	ldd	r27, Y+8	; 0x08
     736:	86 83       	std	Z+6, r24	; 0x06
     738:	97 83       	std	Z+7, r25	; 0x07
     73a:	a0 87       	std	Z+8, r26	; 0x08
     73c:	b1 87       	std	Z+9, r27	; 0x09
     73e:	0e 94 34 10 	call	0x2068	; 0x2068 <printf_P>

	/* Create a new buffer capable of holding a single block from the device */
	uint8_t BlockBuffer[DiskCapacity.BlockSize];
     742:	ed b7       	in	r30, 0x3d	; 61
     744:	fe b7       	in	r31, 0x3e	; 62
     746:	3a 96       	adiw	r30, 0x0a	; 10
     748:	0f b6       	in	r0, 0x3f	; 63
     74a:	f8 94       	cli
     74c:	fe bf       	out	0x3e, r31	; 62
     74e:	0f be       	out	0x3f, r0	; 63
     750:	ed bf       	out	0x3d, r30	; 61
     752:	0d 81       	ldd	r16, Y+5	; 0x05
     754:	1e 81       	ldd	r17, Y+6	; 0x06
     756:	8d b7       	in	r24, 0x3d	; 61
     758:	9e b7       	in	r25, 0x3e	; 62
     75a:	80 1b       	sub	r24, r16
     75c:	91 0b       	sbc	r25, r17
     75e:	0f b6       	in	r0, 0x3f	; 63
     760:	f8 94       	cli
     762:	9e bf       	out	0x3e, r25	; 62
     764:	0f be       	out	0x3f, r0	; 63
     766:	8d bf       	out	0x3d, r24	; 61
     768:	8d b6       	in	r8, 0x3d	; 61
     76a:	9e b6       	in	r9, 0x3e	; 62
     76c:	08 94       	sec
     76e:	81 1c       	adc	r8, r1
     770:	91 1c       	adc	r9, r1

	/* Read in the first 512 byte block from the device */
	if ((ErrorCode = MassStore_ReadDeviceBlock(0, 0x00000000, 1, DiskCapacity.BlockSize, BlockBuffer)) != 0)
     772:	24 01       	movw	r4, r8
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	40 e0       	ldi	r20, 0x00	; 0
     778:	50 e0       	ldi	r21, 0x00	; 0
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	70 e0       	ldi	r23, 0x00	; 0
     77e:	21 e0       	ldi	r18, 0x01	; 1
     780:	74 01       	movw	r14, r8
     782:	79 d4       	rcall	.+2290   	; 0x1076 <MassStore_ReadDeviceBlock>
     784:	68 2f       	mov	r22, r24
     786:	88 23       	and	r24, r24
     788:	19 f0       	breq	.+6      	; 0x790 <MassStorageHost_Task+0x20c>
	{
		ShowDiskReadError(PSTR("Read Device Block"), ErrorCode);
     78a:	8d e6       	ldi	r24, 0x6D	; 109
     78c:	91 e0       	ldi	r25, 0x01	; 1
     78e:	8d c0       	rjmp	.+282    	; 0x8aa <MassStorageHost_Task+0x326>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("\r\nContents of first block:\r\n"));
     790:	80 e5       	ldi	r24, 0x50	; 80
     792:	91 e0       	ldi	r25, 0x01	; 1
     794:	0e 94 56 10 	call	0x20ac	; 0x20ac <puts_P>
     798:	aa 24       	eor	r10, r10
     79a:	bb 24       	eor	r11, r11
		/* Print out the 16 bytes of the chunk in HEX format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
		{
			char CurrByte = *(ChunkPtr + ByteOffset);

			printf_P(PSTR("%.2X "), CurrByte);
     79c:	ea e4       	ldi	r30, 0x4A	; 74
     79e:	6e 2e       	mov	r6, r30
     7a0:	e1 e0       	ldi	r30, 0x01	; 1
     7a2:	7e 2e       	mov	r7, r30
     7a4:	4e c0       	rjmp	.+156    	; 0x842 <MassStorageHost_Task+0x2be>

	/* Print out the first block in both HEX and ASCII, 16 bytes per line */
	for (uint16_t Chunk = 0; Chunk < (DiskCapacity.BlockSize >> 4); Chunk++)
	{
		/* Pointer to the start of the current 16-byte chunk in the read block of data */
		uint8_t* ChunkPtr = &BlockBuffer[Chunk << 4];
     7a6:	65 01       	movw	r12, r10
     7a8:	74 e0       	ldi	r23, 0x04	; 4
     7aa:	cc 0c       	add	r12, r12
     7ac:	dd 1c       	adc	r13, r13
     7ae:	7a 95       	dec	r23
     7b0:	e1 f7       	brne	.-8      	; 0x7aa <MassStorageHost_Task+0x226>
     7b2:	c8 0c       	add	r12, r8
     7b4:	d9 1c       	adc	r13, r9
     7b6:	00 e0       	ldi	r16, 0x00	; 0
     7b8:	10 e0       	ldi	r17, 0x00	; 0
		/* Print out the 16 bytes of the chunk in HEX format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
		{
			char CurrByte = *(ChunkPtr + ByteOffset);

			printf_P(PSTR("%.2X "), CurrByte);
     7ba:	00 d0       	rcall	.+0      	; 0x7bc <MassStorageHost_Task+0x238>
     7bc:	00 d0       	rcall	.+0      	; 0x7be <MassStorageHost_Task+0x23a>
     7be:	ed b7       	in	r30, 0x3d	; 61
     7c0:	fe b7       	in	r31, 0x3e	; 62
     7c2:	31 96       	adiw	r30, 0x01	; 1
     7c4:	ad b7       	in	r26, 0x3d	; 61
     7c6:	be b7       	in	r27, 0x3e	; 62
     7c8:	12 96       	adiw	r26, 0x02	; 2
     7ca:	7c 92       	st	X, r7
     7cc:	6e 92       	st	-X, r6
     7ce:	11 97       	sbiw	r26, 0x01	; 1
     7d0:	d6 01       	movw	r26, r12
     7d2:	a0 0f       	add	r26, r16
     7d4:	b1 1f       	adc	r27, r17
     7d6:	8c 91       	ld	r24, X
     7d8:	82 83       	std	Z+2, r24	; 0x02
     7da:	13 82       	std	Z+3, r1	; 0x03
     7dc:	0e 94 34 10 	call	0x2068	; 0x2068 <printf_P>
     7e0:	0f 5f       	subi	r16, 0xFF	; 255
     7e2:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		/* Pointer to the start of the current 16-byte chunk in the read block of data */
		uint8_t* ChunkPtr = &BlockBuffer[Chunk << 4];

		/* Print out the 16 bytes of the chunk in HEX format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
     7e4:	0f 90       	pop	r0
     7e6:	0f 90       	pop	r0
     7e8:	0f 90       	pop	r0
     7ea:	0f 90       	pop	r0
     7ec:	00 31       	cpi	r16, 0x10	; 16
     7ee:	11 05       	cpc	r17, r1
     7f0:	21 f7       	brne	.-56     	; 0x7ba <MassStorageHost_Task+0x236>
			char CurrByte = *(ChunkPtr + ByteOffset);

			printf_P(PSTR("%.2X "), CurrByte);
		}

		puts_P(PSTR("    "));
     7f2:	85 e4       	ldi	r24, 0x45	; 69
     7f4:	91 e0       	ldi	r25, 0x01	; 1
     7f6:	0e 94 56 10 	call	0x20ac	; 0x20ac <puts_P>
     7fa:	ee 24       	eor	r14, r14
     7fc:	ff 24       	eor	r15, r15
		/* Print out the 16 bytes of the chunk in ASCII format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
		{
			char CurrByte = *(ChunkPtr + ByteOffset);

			putchar(isprint(CurrByte) ? CurrByte : '.');
     7fe:	f6 01       	movw	r30, r12
     800:	ee 0d       	add	r30, r14
     802:	ff 1d       	adc	r31, r15
     804:	80 81       	ld	r24, Z
     806:	08 2f       	mov	r16, r24
     808:	10 e0       	ldi	r17, 0x00	; 0
     80a:	c8 01       	movw	r24, r16
     80c:	0e 94 02 10 	call	0x2004	; 0x2004 <isprint>
     810:	89 2b       	or	r24, r25
     812:	11 f4       	brne	.+4      	; 0x818 <MassStorageHost_Task+0x294>
     814:	0e e2       	ldi	r16, 0x2E	; 46
     816:	10 e0       	ldi	r17, 0x00	; 0
     818:	60 91 45 01 	lds	r22, 0x0145
     81c:	70 91 46 01 	lds	r23, 0x0146
     820:	c8 01       	movw	r24, r16
     822:	0e 94 08 10 	call	0x2010	; 0x2010 <fputc>
     826:	08 94       	sec
     828:	e1 1c       	adc	r14, r1
     82a:	f1 1c       	adc	r15, r1
		}

		puts_P(PSTR("    "));

		/* Print out the 16 bytes of the chunk in ASCII format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
     82c:	b0 e1       	ldi	r27, 0x10	; 16
     82e:	eb 16       	cp	r14, r27
     830:	f1 04       	cpc	r15, r1
     832:	29 f7       	brne	.-54     	; 0x7fe <MassStorageHost_Task+0x27a>
			char CurrByte = *(ChunkPtr + ByteOffset);

			putchar(isprint(CurrByte) ? CurrByte : '.');
		}

		puts_P(PSTR("\r\n"));
     834:	82 e4       	ldi	r24, 0x42	; 66
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	0e 94 56 10 	call	0x20ac	; 0x20ac <puts_P>
	}

	puts_P(PSTR("\r\nContents of first block:\r\n"));

	/* Print out the first block in both HEX and ASCII, 16 bytes per line */
	for (uint16_t Chunk = 0; Chunk < (DiskCapacity.BlockSize >> 4); Chunk++)
     83c:	08 94       	sec
     83e:	a1 1c       	adc	r10, r1
     840:	b1 1c       	adc	r11, r1
     842:	95 01       	movw	r18, r10
     844:	40 e0       	ldi	r20, 0x00	; 0
     846:	50 e0       	ldi	r21, 0x00	; 0
     848:	8d 81       	ldd	r24, Y+5	; 0x05
     84a:	9e 81       	ldd	r25, Y+6	; 0x06
     84c:	af 81       	ldd	r26, Y+7	; 0x07
     84e:	b8 85       	ldd	r27, Y+8	; 0x08
     850:	64 e0       	ldi	r22, 0x04	; 4
     852:	b6 95       	lsr	r27
     854:	a7 95       	ror	r26
     856:	97 95       	ror	r25
     858:	87 95       	ror	r24
     85a:	6a 95       	dec	r22
     85c:	d1 f7       	brne	.-12     	; 0x852 <MassStorageHost_Task+0x2ce>
     85e:	28 17       	cp	r18, r24
     860:	39 07       	cpc	r19, r25
     862:	4a 07       	cpc	r20, r26
     864:	5b 07       	cpc	r21, r27
     866:	08 f4       	brcc	.+2      	; 0x86a <MassStorageHost_Task+0x2e6>
     868:	9e cf       	rjmp	.-196    	; 0x7a6 <MassStorageHost_Task+0x222>
		}

		puts_P(PSTR("\r\n"));
	}

	puts_P(PSTR("\r\n\r\nPress board button to read entire ASCII contents of disk...\r\n\r\n"));
     86a:	8e ef       	ldi	r24, 0xFE	; 254
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	0e 94 56 10 	call	0x20ac	; 0x20ac <puts_P>
     872:	05 c0       	rjmp	.+10     	; 0x87e <MassStorageHost_Task+0x2fa>

	/* Wait for the board button to be pressed */
	while (!(Buttons_GetStatus() & BUTTONS_BUTTON1))
	{
		/* Abort if device removed */
		if (USB_HostState == HOST_STATE_Unattached)
     874:	80 91 34 01 	lds	r24, 0x0134
     878:	81 30       	cpi	r24, 0x01	; 1
     87a:	09 f4       	brne	.+2      	; 0x87e <MassStorageHost_Task+0x2fa>
     87c:	5f c0       	rjmp	.+190    	; 0x93c <MassStorageHost_Task+0x3b8>
	}

	puts_P(PSTR("\r\n\r\nPress board button to read entire ASCII contents of disk...\r\n\r\n"));

	/* Wait for the board button to be pressed */
	while (!(Buttons_GetStatus() & BUTTONS_BUTTON1))
     87e:	62 99       	sbic	0x0c, 2	; 12
     880:	f9 cf       	rjmp	.-14     	; 0x874 <MassStorageHost_Task+0x2f0>
     882:	aa 24       	eor	r10, r10
     884:	bb 24       	eor	r11, r11
     886:	65 01       	movw	r12, r10
     888:	3d c0       	rjmp	.+122    	; 0x904 <MassStorageHost_Task+0x380>

	/* Print out the entire disk contents in ASCII format */
	for (uint32_t CurrBlockAddress = 0; CurrBlockAddress < DiskCapacity.Blocks; CurrBlockAddress++)
	{
		/* Read in the next block of data from the device */
		if ((ErrorCode = MassStore_ReadDeviceBlock(0, CurrBlockAddress, 1, DiskCapacity.BlockSize, BlockBuffer)) != 0)
     88a:	0d 81       	ldd	r16, Y+5	; 0x05
     88c:	1e 81       	ldd	r17, Y+6	; 0x06
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	b6 01       	movw	r22, r12
     892:	a5 01       	movw	r20, r10
     894:	21 e0       	ldi	r18, 0x01	; 1
     896:	72 01       	movw	r14, r4
     898:	ee d3       	rcall	.+2012   	; 0x1076 <MassStore_ReadDeviceBlock>
     89a:	68 2f       	mov	r22, r24
     89c:	88 23       	and	r24, r24
     89e:	19 f4       	brne	.+6      	; 0x8a6 <MassStorageHost_Task+0x322>
     8a0:	ee 24       	eor	r14, r14
     8a2:	ff 24       	eor	r15, r15
     8a4:	1e c0       	rjmp	.+60     	; 0x8e2 <MassStorageHost_Task+0x35e>
		{
			ShowDiskReadError(PSTR("Read Device Block"), ErrorCode);
     8a6:	8c ee       	ldi	r24, 0xEC	; 236
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	f0 dd       	rcall	.-1056   	; 0x48c <ShowDiskReadError>
			USB_Host_SetDeviceConfiguration(0);
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <USB_Host_SetDeviceConfiguration>
     8b2:	44 c0       	rjmp	.+136    	; 0x93c <MassStorageHost_Task+0x3b8>
		/* Send the ASCII data in the read in block to the serial port */
		for (uint16_t Byte = 0; Byte < DiskCapacity.BlockSize; Byte++)
		{
			char CurrByte = BlockBuffer[Byte];

			putchar(isprint(CurrByte) ? CurrByte : '.');
     8b4:	f4 01       	movw	r30, r8
     8b6:	ee 0d       	add	r30, r14
     8b8:	ff 1d       	adc	r31, r15
     8ba:	80 81       	ld	r24, Z
     8bc:	08 2f       	mov	r16, r24
     8be:	10 e0       	ldi	r17, 0x00	; 0
     8c0:	c8 01       	movw	r24, r16
     8c2:	0e 94 02 10 	call	0x2004	; 0x2004 <isprint>
     8c6:	89 2b       	or	r24, r25
     8c8:	11 f4       	brne	.+4      	; 0x8ce <MassStorageHost_Task+0x34a>
     8ca:	0e e2       	ldi	r16, 0x2E	; 46
     8cc:	10 e0       	ldi	r17, 0x00	; 0
     8ce:	60 91 45 01 	lds	r22, 0x0145
     8d2:	70 91 46 01 	lds	r23, 0x0146
     8d6:	c8 01       	movw	r24, r16
     8d8:	0e 94 08 10 	call	0x2010	; 0x2010 <fputc>
			USB_Host_SetDeviceConfiguration(0);
			return;
		}

		/* Send the ASCII data in the read in block to the serial port */
		for (uint16_t Byte = 0; Byte < DiskCapacity.BlockSize; Byte++)
     8dc:	08 94       	sec
     8de:	e1 1c       	adc	r14, r1
     8e0:	f1 1c       	adc	r15, r1
     8e2:	97 01       	movw	r18, r14
     8e4:	40 e0       	ldi	r20, 0x00	; 0
     8e6:	50 e0       	ldi	r21, 0x00	; 0
     8e8:	8d 81       	ldd	r24, Y+5	; 0x05
     8ea:	9e 81       	ldd	r25, Y+6	; 0x06
     8ec:	af 81       	ldd	r26, Y+7	; 0x07
     8ee:	b8 85       	ldd	r27, Y+8	; 0x08
     8f0:	28 17       	cp	r18, r24
     8f2:	39 07       	cpc	r19, r25
     8f4:	4a 07       	cpc	r20, r26
     8f6:	5b 07       	cpc	r21, r27
     8f8:	e8 f2       	brcs	.-70     	; 0x8b4 <MassStorageHost_Task+0x330>
		if (USB_HostState == HOST_STATE_Unattached)
		  return;
	}

	/* Print out the entire disk contents in ASCII format */
	for (uint32_t CurrBlockAddress = 0; CurrBlockAddress < DiskCapacity.Blocks; CurrBlockAddress++)
     8fa:	08 94       	sec
     8fc:	a1 1c       	adc	r10, r1
     8fe:	b1 1c       	adc	r11, r1
     900:	c1 1c       	adc	r12, r1
     902:	d1 1c       	adc	r13, r1
     904:	89 81       	ldd	r24, Y+1	; 0x01
     906:	9a 81       	ldd	r25, Y+2	; 0x02
     908:	ab 81       	ldd	r26, Y+3	; 0x03
     90a:	bc 81       	ldd	r27, Y+4	; 0x04
     90c:	a8 16       	cp	r10, r24
     90e:	b9 06       	cpc	r11, r25
     910:	ca 06       	cpc	r12, r26
     912:	db 06       	cpc	r13, r27
     914:	08 f4       	brcc	.+2      	; 0x918 <MassStorageHost_Task+0x394>
     916:	b9 cf       	rjmp	.-142    	; 0x88a <MassStorageHost_Task+0x306>
     918:	8b b1       	in	r24, 0x0b	; 11
     91a:	8f 70       	andi	r24, 0x0F	; 15
     91c:	80 66       	ori	r24, 0x60	; 96
     91e:	8b b9       	out	0x0b, r24	; 11
		}
	}

	/* Indicate device no longer busy */
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
	USB_Host_SetDeviceConfiguration(0);
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <USB_Host_SetDeviceConfiguration>
     926:	2f ad       	ldd	r18, Y+63	; 0x3f
     928:	21 96       	adiw	r28, 0x01	; 1
     92a:	3f ad       	ldd	r19, Y+63	; 0x3f
     92c:	21 97       	sbiw	r28, 0x01	; 1
     92e:	c9 01       	movw	r24, r18
     930:	0f b6       	in	r0, 0x3f	; 63
     932:	f8 94       	cli
     934:	9e bf       	out	0x3e, r25	; 62
     936:	0f be       	out	0x3f, r0	; 63
     938:	8d bf       	out	0x3d, r24	; 61
     93a:	0a c0       	rjmp	.+20     	; 0x950 <MassStorageHost_Task+0x3cc>
     93c:	8f ad       	ldd	r24, Y+63	; 0x3f
     93e:	21 96       	adiw	r28, 0x01	; 1
     940:	9f ad       	ldd	r25, Y+63	; 0x3f
     942:	21 97       	sbiw	r28, 0x01	; 1
     944:	9c 01       	movw	r18, r24
     946:	0f b6       	in	r0, 0x3f	; 63
     948:	f8 94       	cli
     94a:	3e bf       	out	0x3e, r19	; 62
     94c:	0f be       	out	0x3f, r0	; 63
     94e:	2d bf       	out	0x3d, r18	; 61
}
     950:	0f b6       	in	r0, 0x3f	; 63
     952:	f8 94       	cli
     954:	3e be       	out	0x3e, r3	; 62
     956:	0f be       	out	0x3f, r0	; 63
     958:	2d be       	out	0x3d, r2	; 61
     95a:	c0 5c       	subi	r28, 0xC0	; 192
     95c:	df 4f       	sbci	r29, 0xFF	; 255
     95e:	0f b6       	in	r0, 0x3f	; 63
     960:	f8 94       	cli
     962:	de bf       	out	0x3e, r29	; 62
     964:	0f be       	out	0x3f, r0	; 63
     966:	cd bf       	out	0x3d, r28	; 61
     968:	cf 91       	pop	r28
     96a:	df 91       	pop	r29
     96c:	1f 91       	pop	r17
     96e:	0f 91       	pop	r16
     970:	ff 90       	pop	r15
     972:	ef 90       	pop	r14
     974:	df 90       	pop	r13
     976:	cf 90       	pop	r12
     978:	bf 90       	pop	r11
     97a:	af 90       	pop	r10
     97c:	9f 90       	pop	r9
     97e:	8f 90       	pop	r8
     980:	7f 90       	pop	r7
     982:	6f 90       	pop	r6
     984:	5f 90       	pop	r5
     986:	4f 90       	pop	r4
     988:	3f 90       	pop	r3
     98a:	2f 90       	pop	r2
     98c:	08 95       	ret

0000098e <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     98e:	1f 93       	push	r17
     990:	18 2f       	mov	r17, r24
	USB_Disable();
     992:	5a d7       	rcall	.+3764   	; 0x1848 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     994:	00 d0       	rcall	.+0      	; 0x996 <EVENT_USB_Host_HostError+0x8>
     996:	00 d0       	rcall	.+0      	; 0x998 <EVENT_USB_Host_HostError+0xa>
     998:	ed b7       	in	r30, 0x3d	; 61
     99a:	fe b7       	in	r31, 0x3e	; 62
     99c:	31 96       	adiw	r30, 0x01	; 1
     99e:	8f ed       	ldi	r24, 0xDF	; 223
     9a0:	92 e0       	ldi	r25, 0x02	; 2
     9a2:	ad b7       	in	r26, 0x3d	; 61
     9a4:	be b7       	in	r27, 0x3e	; 62
     9a6:	12 96       	adiw	r26, 0x02	; 2
     9a8:	9c 93       	st	X, r25
     9aa:	8e 93       	st	-X, r24
     9ac:	11 97       	sbiw	r26, 0x01	; 1
     9ae:	12 83       	std	Z+2, r17	; 0x02
     9b0:	13 82       	std	Z+3, r1	; 0x03
     9b2:	0e 94 34 10 	call	0x2068	; 0x2068 <printf_P>
     9b6:	8b b1       	in	r24, 0x0b	; 11
     9b8:	8f 70       	andi	r24, 0x0F	; 15
     9ba:	80 69       	ori	r24, 0x90	; 144
     9bc:	8b b9       	out	0x0b, r24	; 11
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	ff cf       	rjmp	.-2      	; 0x9c6 <EVENT_USB_Host_HostError+0x38>

000009c8 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     9c8:	1f 93       	push	r17
	puts_P(PSTR("Getting Config Data.\r\n"));
     9ca:	8c ec       	ldi	r24, 0xCC	; 204
     9cc:	93 e0       	ldi	r25, 0x03	; 3
     9ce:	0e 94 56 10 	call	0x20ac	; 0x20ac <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     9d2:	bf d0       	rcall	.+382    	; 0xb52 <ProcessConfigurationDescriptor>
     9d4:	18 2f       	mov	r17, r24
     9d6:	88 23       	and	r24, r24
     9d8:	c1 f0       	breq	.+48     	; 0xa0a <EVENT_USB_Host_DeviceEnumerationComplete+0x42>
	{
		if (ErrorCode == ControlError)
     9da:	81 30       	cpi	r24, 0x01	; 1
     9dc:	19 f4       	brne	.+6      	; 0x9e4 <EVENT_USB_Host_DeviceEnumerationComplete+0x1c>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     9de:	82 ea       	ldi	r24, 0xA2	; 162
     9e0:	93 e0       	ldi	r25, 0x03	; 3
     9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <EVENT_USB_Host_DeviceEnumerationComplete+0x20>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     9e4:	8b e8       	ldi	r24, 0x8B	; 139
     9e6:	93 e0       	ldi	r25, 0x03	; 3
     9e8:	0e 94 56 10 	call	0x20ac	; 0x20ac <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     9ec:	00 d0       	rcall	.+0      	; 0x9ee <EVENT_USB_Host_DeviceEnumerationComplete+0x26>
     9ee:	00 d0       	rcall	.+0      	; 0x9f0 <EVENT_USB_Host_DeviceEnumerationComplete+0x28>
     9f0:	ed b7       	in	r30, 0x3d	; 61
     9f2:	fe b7       	in	r31, 0x3e	; 62
     9f4:	31 96       	adiw	r30, 0x01	; 1
     9f6:	81 e7       	ldi	r24, 0x71	; 113
     9f8:	93 e0       	ldi	r25, 0x03	; 3
     9fa:	ad b7       	in	r26, 0x3d	; 61
     9fc:	be b7       	in	r27, 0x3e	; 62
     9fe:	12 96       	adiw	r26, 0x02	; 2
     a00:	9c 93       	st	X, r25
     a02:	8e 93       	st	-X, r24
     a04:	11 97       	sbiw	r26, 0x01	; 1
     a06:	12 83       	std	Z+2, r17	; 0x02
     a08:	14 c0       	rjmp	.+40     	; 0xa32 <EVENT_USB_Host_DeviceEnumerationComplete+0x6a>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <USB_Host_SetDeviceConfiguration>
     a10:	28 2f       	mov	r18, r24
     a12:	88 23       	and	r24, r24
     a14:	d1 f0       	breq	.+52     	; 0xa4a <EVENT_USB_Host_DeviceEnumerationComplete+0x82>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     a16:	00 d0       	rcall	.+0      	; 0xa18 <EVENT_USB_Host_DeviceEnumerationComplete+0x50>
     a18:	00 d0       	rcall	.+0      	; 0xa1a <EVENT_USB_Host_DeviceEnumerationComplete+0x52>
     a1a:	ed b7       	in	r30, 0x3d	; 61
     a1c:	fe b7       	in	r31, 0x3e	; 62
     a1e:	31 96       	adiw	r30, 0x01	; 1
     a20:	8e e2       	ldi	r24, 0x2E	; 46
     a22:	93 e0       	ldi	r25, 0x03	; 3
     a24:	ad b7       	in	r26, 0x3d	; 61
     a26:	be b7       	in	r27, 0x3e	; 62
     a28:	12 96       	adiw	r26, 0x02	; 2
     a2a:	9c 93       	st	X, r25
     a2c:	8e 93       	st	-X, r24
     a2e:	11 97       	sbiw	r26, 0x01	; 1
     a30:	22 83       	std	Z+2, r18	; 0x02
     a32:	13 82       	std	Z+3, r1	; 0x03
     a34:	0e 94 34 10 	call	0x2068	; 0x2068 <printf_P>
     a38:	8b b1       	in	r24, 0x0b	; 11
     a3a:	8f 70       	andi	r24, 0x0F	; 15
     a3c:	80 69       	ori	r24, 0x90	; 144
     a3e:	8b b9       	out	0x0b, r24	; 11
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
     a46:	0f 90       	pop	r0
     a48:	08 c0       	rjmp	.+16     	; 0xa5a <EVENT_USB_Host_DeviceEnumerationComplete+0x92>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	puts_P(PSTR("Mass Storage Disk Enumerated.\r\n"));
     a4a:	8e e0       	ldi	r24, 0x0E	; 14
     a4c:	93 e0       	ldi	r25, 0x03	; 3
     a4e:	0e 94 56 10 	call	0x20ac	; 0x20ac <puts_P>
     a52:	8b b1       	in	r24, 0x0b	; 11
     a54:	8f 70       	andi	r24, 0x0F	; 15
     a56:	80 66       	ori	r24, 0x60	; 96
     a58:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     a5a:	1f 91       	pop	r17
     a5c:	08 95       	ret

00000a5e <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     a5e:	84 b7       	in	r24, 0x34	; 52
     a60:	87 7f       	andi	r24, 0xF7	; 247
     a62:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     a64:	28 e1       	ldi	r18, 0x18	; 24
     a66:	0f b6       	in	r0, 0x3f	; 63
     a68:	f8 94       	cli
     a6a:	20 93 60 00 	sts	0x0060, r18
     a6e:	10 92 60 00 	sts	0x0060, r1
     a72:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	80 e8       	ldi	r24, 0x80	; 128
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	f8 94       	cli
     a7c:	80 93 61 00 	sts	0x0061, r24
     a80:	90 93 61 00 	sts	0x0061, r25
     a84:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     a86:	83 e3       	ldi	r24, 0x33	; 51
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	90 93 cd 00 	sts	0x00CD, r25
     a8e:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     a92:	86 e0       	ldi	r24, 0x06	; 6
     a94:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     a98:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     a9c:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     aa0:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     aa2:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     aa4:	8a b1       	in	r24, 0x0a	; 10
     aa6:	80 6f       	ori	r24, 0xF0	; 240
     aa8:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     aaa:	8b b1       	in	r24, 0x0b	; 11
     aac:	8f 70       	andi	r24, 0x0F	; 15
     aae:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     ab0:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     ab2:	72 9a       	sbi	0x0e, 2	; 14

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	Buttons_Init();
	USB_Init();
     ab4:	c0 d6       	rcall	.+3456   	; 0x1836 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     ab6:	e5 e3       	ldi	r30, 0x35	; 53
     ab8:	f1 e0       	ldi	r31, 0x01	; 1
     aba:	f0 93 44 01 	sts	0x0144, r31
     abe:	e0 93 43 01 	sts	0x0143, r30
					stdout = Stream;
     ac2:	f0 93 46 01 	sts	0x0146, r31
     ac6:	e0 93 45 01 	sts	0x0145, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     aca:	8e e0       	ldi	r24, 0x0E	; 14
     acc:	df 01       	movw	r26, r30
     ace:	1d 92       	st	X+, r1
     ad0:	8a 95       	dec	r24
     ad2:	e9 f7       	brne	.-6      	; 0xace <SetupHardware+0x70>
     ad4:	83 e0       	ldi	r24, 0x03	; 3
     ad6:	80 93 38 01 	sts	0x0138, r24
     ada:	83 ec       	ldi	r24, 0xC3	; 195
     adc:	9f e0       	ldi	r25, 0x0F	; 15
     ade:	90 93 3e 01 	sts	0x013E, r25
     ae2:	80 93 3d 01 	sts	0x013D, r24
     ae6:	8d ec       	ldi	r24, 0xCD	; 205
     ae8:	9f e0       	ldi	r25, 0x0F	; 15
     aea:	90 93 40 01 	sts	0x0140, r25
     aee:	80 93 3f 01 	sts	0x013F, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     af2:	08 95       	ret

00000af4 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     af4:	b4 df       	rcall	.-152    	; 0xa5e <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Mass Storage Host Demo running.\r\n" ESC_FG_WHITE));
     af6:	81 e2       	ldi	r24, 0x21	; 33
     af8:	94 e0       	ldi	r25, 0x04	; 4
     afa:	0e 94 56 10 	call	0x20ac	; 0x20ac <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     afe:	8b b1       	in	r24, 0x0b	; 11
     b00:	8f 70       	andi	r24, 0x0F	; 15
     b02:	80 61       	ori	r24, 0x10	; 16
     b04:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     b06:	78 94       	sei

	for (;;)
	{
		MassStorageHost_Task();
     b08:	3d dd       	rcall	.-1414   	; 0x584 <MassStorageHost_Task>

		USB_USBTask();
     b0a:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <USB_USBTask>
     b0e:	fc cf       	rjmp	.-8      	; 0xb08 <main+0x14>

00000b10 <DComp_NextMSInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Mass Storage Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextMSInterface(void* CurrentDescriptor)
{
     b10:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     b12:	81 81       	ldd	r24, Z+1	; 0x01
     b14:	84 30       	cpi	r24, 0x04	; 4
     b16:	59 f4       	brne	.+22     	; 0xb2e <DComp_NextMSInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the descriptor class and protocol, break out if correct class/protocol interface found */
		if ((Interface->Class    == MASS_STORE_CLASS)    &&
     b18:	85 81       	ldd	r24, Z+5	; 0x05
     b1a:	88 30       	cpi	r24, 0x08	; 8
     b1c:	41 f4       	brne	.+16     	; 0xb2e <DComp_NextMSInterface+0x1e>
     b1e:	86 81       	ldd	r24, Z+6	; 0x06
     b20:	86 30       	cpi	r24, 0x06	; 6
     b22:	29 f4       	brne	.+10     	; 0xb2e <DComp_NextMSInterface+0x1e>
     b24:	87 81       	ldd	r24, Z+7	; 0x07
     b26:	80 35       	cpi	r24, 0x50	; 80
     b28:	11 f4       	brne	.+4      	; 0xb2e <DComp_NextMSInterface+0x1e>
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	08 95       	ret
     b2e:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     b30:	08 95       	ret

00000b32 <DComp_NextMSInterfaceBulkDataEndpoint>:
 *  another interface descriptor is found before the next endpoint.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextMSInterfaceBulkDataEndpoint(void* CurrentDescriptor)
{
     b32:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     b34:	81 81       	ldd	r24, Z+1	; 0x01
     b36:	85 30       	cpi	r24, 0x05	; 5
     b38:	31 f4       	brne	.+12     	; 0xb46 <DComp_NextMSInterfaceBulkDataEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK type endpoint found */
		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK)
     b3a:	83 81       	ldd	r24, Z+3	; 0x03
     b3c:	83 70       	andi	r24, 0x03	; 3
     b3e:	82 30       	cpi	r24, 0x02	; 2
     b40:	31 f4       	brne	.+12     	; 0xb4e <DComp_NextMSInterfaceBulkDataEndpoint+0x1c>
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	08 95       	ret
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
     b46:	84 30       	cpi	r24, 0x04	; 4
     b48:	11 f4       	brne	.+4      	; 0xb4e <DComp_NextMSInterfaceBulkDataEndpoint+0x1c>
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	08 95       	ret
     b4e:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     b50:	08 95       	ret

00000b52 <ProcessConfigurationDescriptor>:
 *  This routine searches for a MSD interface descriptor containing bulk IN and OUT data endpoints.
 *
 *  \return An error code from the \ref MassStorageHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     b52:	8f 92       	push	r8
     b54:	9f 92       	push	r9
     b56:	af 92       	push	r10
     b58:	bf 92       	push	r11
     b5a:	cf 92       	push	r12
     b5c:	df 92       	push	r13
     b5e:	ef 92       	push	r14
     b60:	ff 92       	push	r15
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	df 93       	push	r29
     b68:	cf 93       	push	r28
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
     b6e:	c4 50       	subi	r28, 0x04	; 4
     b70:	d2 40       	sbci	r29, 0x02	; 2
     b72:	0f b6       	in	r0, 0x3f	; 63
     b74:	f8 94       	cli
     b76:	de bf       	out	0x3e, r29	; 62
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     b7c:	ae 01       	movw	r20, r28
     b7e:	4b 5f       	subi	r20, 0xFB	; 251
     b80:	5f 4f       	sbci	r21, 0xFF	; 255
     b82:	5a 83       	std	Y+2, r21	; 0x02
     b84:	49 83       	std	Y+1, r20	; 0x01
	USB_Descriptor_Interface_t* MSInterface     = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     b86:	83 e0       	ldi	r24, 0x03	; 3
     b88:	a8 2e       	mov	r10, r24
     b8a:	b1 2c       	mov	r11, r1
     b8c:	ac 0e       	add	r10, r28
     b8e:	bd 1e       	adc	r11, r29
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	b5 01       	movw	r22, r10
     b94:	20 e0       	ldi	r18, 0x00	; 0
     b96:	32 e0       	ldi	r19, 0x02	; 2
     b98:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <USB_Host_GetDeviceConfigDescriptor>
     b9c:	85 30       	cpi	r24, 0x05	; 5
     b9e:	29 f0       	breq	.+10     	; 0xbaa <ProcessConfigurationDescriptor+0x58>
     ba0:	86 30       	cpi	r24, 0x06	; 6
     ba2:	89 f0       	breq	.+34     	; 0xbc6 <ProcessConfigurationDescriptor+0x74>
     ba4:	88 23       	and	r24, r24
     ba6:	19 f0       	breq	.+6      	; 0xbae <ProcessConfigurationDescriptor+0x5c>
     ba8:	10 c0       	rjmp	.+32     	; 0xbca <ProcessConfigurationDescriptor+0x78>
     baa:	82 e0       	ldi	r24, 0x02	; 2
     bac:	4a c0       	rjmp	.+148    	; 0xc42 <ProcessConfigurationDescriptor+0xf0>
     bae:	00 e0       	ldi	r16, 0x00	; 0
     bb0:	10 e0       	ldi	r17, 0x00	; 0
     bb2:	ee 24       	eor	r14, r14
     bb4:	ff 24       	eor	r15, r15
     bb6:	cc 24       	eor	r12, r12
     bb8:	dd 24       	eor	r13, r13
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(MSInterface) ||
     bba:	45 01       	movw	r8, r10
     bbc:	5e 01       	movw	r10, r28
     bbe:	08 94       	sec
     bc0:	a1 1c       	adc	r10, r1
     bc2:	b1 1c       	adc	r11, r1
     bc4:	04 c0       	rjmp	.+8      	; 0xbce <ProcessConfigurationDescriptor+0x7c>
	USB_Descriptor_Interface_t* MSInterface     = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     bc6:	83 e0       	ldi	r24, 0x03	; 3
     bc8:	3c c0       	rjmp	.+120    	; 0xc42 <ProcessConfigurationDescriptor+0xf0>
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	3a c0       	rjmp	.+116    	; 0xc42 <ProcessConfigurationDescriptor+0xf0>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(MSInterface) ||
     bce:	01 15       	cp	r16, r1
     bd0:	11 05       	cpc	r17, r1
     bd2:	39 f0       	breq	.+14     	; 0xbe2 <ProcessConfigurationDescriptor+0x90>
     bd4:	c4 01       	movw	r24, r8
     bd6:	b5 01       	movw	r22, r10
     bd8:	49 e9       	ldi	r20, 0x99	; 153
     bda:	55 e0       	ldi	r21, 0x05	; 5
     bdc:	a0 d7       	rcall	.+3904   	; 0x1b1e <USB_GetNextDescriptorComp>
     bde:	88 23       	and	r24, r24
     be0:	81 f0       	breq	.+32     	; 0xc02 <ProcessConfigurationDescriptor+0xb0>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextMSInterfaceBulkDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next Mass Storage interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     be2:	c4 01       	movw	r24, r8
     be4:	b5 01       	movw	r22, r10
     be6:	48 e8       	ldi	r20, 0x88	; 136
     be8:	55 e0       	ldi	r21, 0x05	; 5
     bea:	99 d7       	rcall	.+3890   	; 0x1b1e <USB_GetNextDescriptorComp>
     bec:	88 23       	and	r24, r24
     bee:	11 f0       	breq	.+4      	; 0xbf4 <ProcessConfigurationDescriptor+0xa2>
     bf0:	84 e0       	ldi	r24, 0x04	; 4
     bf2:	27 c0       	rjmp	.+78     	; 0xc42 <ProcessConfigurationDescriptor+0xf0>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			MSInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     bf4:	09 81       	ldd	r16, Y+1	; 0x01
     bf6:	1a 81       	ldd	r17, Y+2	; 0x02
     bf8:	cc 24       	eor	r12, r12
     bfa:	dd 24       	eor	r13, r13
     bfc:	ee 24       	eor	r14, r14
     bfe:	ff 24       	eor	r15, r15
     c00:	e6 cf       	rjmp	.-52     	; 0xbce <ProcessConfigurationDescriptor+0x7c>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     c02:	e9 81       	ldd	r30, Y+1	; 0x01
     c04:	fa 81       	ldd	r31, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     c06:	82 81       	ldd	r24, Z+2	; 0x02
     c08:	87 fd       	sbrc	r24, 7
     c0a:	02 c0       	rjmp	.+4      	; 0xc10 <ProcessConfigurationDescriptor+0xbe>
     c0c:	6f 01       	movw	r12, r30
     c0e:	01 c0       	rjmp	.+2      	; 0xc12 <ProcessConfigurationDescriptor+0xc0>
     c10:	7f 01       	movw	r14, r30
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     c12:	e1 14       	cp	r14, r1
     c14:	f1 04       	cpc	r15, r1
     c16:	d9 f2       	breq	.-74     	; 0xbce <ProcessConfigurationDescriptor+0x7c>
     c18:	c1 14       	cp	r12, r1
     c1a:	d1 04       	cpc	r13, r1
     c1c:	c1 f2       	breq	.-80     	; 0xbce <ProcessConfigurationDescriptor+0x7c>
		else
		  DataOUTEndpoint = EndpointData;
	}

	/* Configure the Mass Storage data IN pipe */
	Pipe_ConfigurePipe(MASS_STORE_DATA_IN_PIPE, EP_TYPE_BULK, PIPE_TOKEN_IN,
     c1e:	f7 01       	movw	r30, r14
     c20:	04 81       	ldd	r16, Z+4	; 0x04
     c22:	15 81       	ldd	r17, Z+5	; 0x05
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	62 e0       	ldi	r22, 0x02	; 2
     c28:	40 e1       	ldi	r20, 0x10	; 16
     c2a:	22 81       	ldd	r18, Z+2	; 0x02
     c2c:	ee 24       	eor	r14, r14
     c2e:	0f d5       	rcall	.+2590   	; 0x164e <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Configure the Mass Storage data OUT pipe */
	Pipe_ConfigurePipe(MASS_STORE_DATA_OUT_PIPE, EP_TYPE_BULK, PIPE_TOKEN_OUT,
     c30:	f6 01       	movw	r30, r12
     c32:	04 81       	ldd	r16, Z+4	; 0x04
     c34:	15 81       	ldd	r17, Z+5	; 0x05
     c36:	82 e0       	ldi	r24, 0x02	; 2
     c38:	62 e0       	ldi	r22, 0x02	; 2
     c3a:	40 e2       	ldi	r20, 0x20	; 32
     c3c:	22 81       	ldd	r18, Z+2	; 0x02
     c3e:	07 d5       	rcall	.+2574   	; 0x164e <Pipe_ConfigurePipe>
     c40:	80 e0       	ldi	r24, 0x00	; 0
					   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     c42:	cc 5f       	subi	r28, 0xFC	; 252
     c44:	dd 4f       	sbci	r29, 0xFD	; 253
     c46:	0f b6       	in	r0, 0x3f	; 63
     c48:	f8 94       	cli
     c4a:	de bf       	out	0x3e, r29	; 62
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	cd bf       	out	0x3d, r28	; 61
     c50:	cf 91       	pop	r28
     c52:	df 91       	pop	r29
     c54:	1f 91       	pop	r17
     c56:	0f 91       	pop	r16
     c58:	ff 90       	pop	r15
     c5a:	ef 90       	pop	r14
     c5c:	df 90       	pop	r13
     c5e:	cf 90       	pop	r12
     c60:	bf 90       	pop	r11
     c62:	af 90       	pop	r10
     c64:	9f 90       	pop	r9
     c66:	8f 90       	pop	r8
     c68:	08 95       	ret

00000c6a <MassStore_WaitForDataReceived>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     c6a:	40 91 a2 00 	lds	r20, 0x00A2
     c6e:	50 91 a3 00 	lds	r21, 0x00A3
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     c78:	80 91 a9 00 	lds	r24, 0x00A9
     c7c:	8f 7b       	andi	r24, 0xBF	; 191
     c7e:	80 93 a9 00 	sts	0x00A9, r24
     c82:	20 e1       	ldi	r18, 0x10	; 16
     c84:	37 e2       	ldi	r19, 0x27	; 39
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     c86:	72 e0       	ldi	r23, 0x02	; 2
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	3a c0       	rjmp	.+116    	; 0xd00 <MassStore_WaitForDataReceived+0x96>
     c8c:	80 91 a2 00 	lds	r24, 0x00A2
     c90:	90 91 a3 00 	lds	r25, 0x00A3
	while (!(Pipe_IsINReceived()))
	{
		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		/* Check to see if a new frame has been issued (1ms elapsed) */
		if (CurrentFrameNumber != PreviousFrameNumber)
     c94:	84 17       	cp	r24, r20
     c96:	95 07       	cpc	r25, r21
     c98:	31 f0       	breq	.+12     	; 0xca6 <MassStore_WaitForDataReceived+0x3c>
		{
			/* Save the new frame number and decrement the timeout period */
			PreviousFrameNumber = CurrentFrameNumber;
			TimeoutMSRem--;
     c9a:	21 50       	subi	r18, 0x01	; 1
     c9c:	30 40       	sbci	r19, 0x00	; 0

			/* Check to see if the timeout period for the command has elapsed */
			if (!(TimeoutMSRem))
     c9e:	11 f4       	brne	.+4      	; 0xca4 <MassStore_WaitForDataReceived+0x3a>
     ca0:	83 e0       	ldi	r24, 0x03	; 3
     ca2:	08 95       	ret
     ca4:	ac 01       	movw	r20, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     ca6:	80 91 a9 00 	lds	r24, 0x00A9
     caa:	80 64       	ori	r24, 0x40	; 64
     cac:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     cb0:	70 93 a7 00 	sts	0x00A7, r23

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     cb4:	80 91 a9 00 	lds	r24, 0x00A9
     cb8:	8f 7b       	andi	r24, 0xBF	; 191
     cba:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     cbe:	80 91 a6 00 	lds	r24, 0x00A6
		Pipe_Freeze();
		Pipe_SelectPipe(MASS_STORE_DATA_OUT_PIPE);
		Pipe_Unfreeze();

		/* Check if pipe stalled (command failed by device) */
		if (Pipe_IsStalled())
     cc2:	81 ff       	sbrs	r24, 1
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <MassStore_WaitForDataReceived+0x60>
		{
			/* Clear the stall condition on the OUT pipe */
			USB_Host_ClearPipeStall(MASS_STORE_DATA_OUT_PIPE);
     cc6:	82 e0       	ldi	r24, 0x02	; 2
     cc8:	11 c0       	rjmp	.+34     	; 0xcec <MassStore_WaitForDataReceived+0x82>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     cca:	80 91 a9 00 	lds	r24, 0x00A9
     cce:	80 64       	ori	r24, 0x40	; 64
     cd0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     cd4:	60 93 a7 00 	sts	0x00A7, r22

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     cd8:	80 91 a9 00 	lds	r24, 0x00A9
     cdc:	8f 7b       	andi	r24, 0xBF	; 191
     cde:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     ce2:	80 91 a6 00 	lds	r24, 0x00A6
		Pipe_Freeze();
		Pipe_SelectPipe(MASS_STORE_DATA_IN_PIPE);
		Pipe_Unfreeze();

		/* Check if pipe stalled (command failed by device) */
		if (Pipe_IsStalled())
     ce6:	81 ff       	sbrs	r24, 1
     ce8:	05 c0       	rjmp	.+10     	; 0xcf4 <MassStore_WaitForDataReceived+0x8a>
		{
			/* Clear the stall condition on the IN pipe */
			USB_Host_ClearPipeStall(MASS_STORE_DATA_IN_PIPE);
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	0e 94 75 0f 	call	0x1eea	; 0x1eea <USB_Host_ClearPipeStall>
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	08 95       	ret

			return PIPE_RWSTREAM_PipeStalled;
		}

		/* Check to see if the device was disconnected, if so exit function */
		if (USB_HostState == HOST_STATE_Unattached)
     cf4:	80 91 34 01 	lds	r24, 0x0134
     cf8:	81 30       	cpi	r24, 0x01	; 1
     cfa:	11 f4       	brne	.+4      	; 0xd00 <MassStore_WaitForDataReceived+0x96>
     cfc:	82 e0       	ldi	r24, 0x02	; 2
     cfe:	08 95       	ret
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     d00:	80 91 a6 00 	lds	r24, 0x00A6
	/* Select the IN data pipe for data reception */
	Pipe_SelectPipe(MASS_STORE_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Wait until data received in the IN pipe */
	while (!(Pipe_IsINReceived()))
     d04:	80 ff       	sbrs	r24, 0
     d06:	c2 cf       	rjmp	.-124    	; 0xc8c <MassStore_WaitForDataReceived+0x22>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	80 93 a7 00 	sts	0x00A7, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     d0e:	80 91 a9 00 	lds	r24, 0x00A9
     d12:	80 64       	ori	r24, 0x40	; 64
     d14:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     d18:	82 e0       	ldi	r24, 0x02	; 2
     d1a:	80 93 a7 00 	sts	0x00A7, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     d1e:	80 91 a9 00 	lds	r24, 0x00A9
     d22:	80 64       	ori	r24, 0x40	; 64
     d24:	80 93 a9 00 	sts	0x00A9, r24
     d28:	80 e0       	ldi	r24, 0x00	; 0

	Pipe_SelectPipe(MASS_STORE_DATA_OUT_PIPE);
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
     d2a:	08 95       	ret

00000d2c <MassStore_SendCommand>:
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum
 */
static uint8_t MassStore_SendCommand(MS_CommandBlockWrapper_t* const SCSICommandBlock,
                                     void* BufferPtr)
{
     d2c:	cf 92       	push	r12
     d2e:	df 92       	push	r13
     d30:	ef 92       	push	r14
     d32:	ff 92       	push	r15
     d34:	0f 93       	push	r16
     d36:	1f 93       	push	r17
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
     d3c:	ec 01       	movw	r28, r24
     d3e:	8b 01       	movw	r16, r22
	uint8_t ErrorCode = PIPE_RWSTREAM_NoError;

	/* Wrap Tag value when invalid - MS class defines tag values of 0 and 0xFFFFFFFF to be invalid */
	if (++MassStore_Tag == 0xFFFFFFFF)
     d40:	80 91 00 01 	lds	r24, 0x0100
     d44:	90 91 01 01 	lds	r25, 0x0101
     d48:	a0 91 02 01 	lds	r26, 0x0102
     d4c:	b0 91 03 01 	lds	r27, 0x0103
     d50:	01 96       	adiw	r24, 0x01	; 1
     d52:	a1 1d       	adc	r26, r1
     d54:	b1 1d       	adc	r27, r1
     d56:	80 93 00 01 	sts	0x0100, r24
     d5a:	90 93 01 01 	sts	0x0101, r25
     d5e:	a0 93 02 01 	sts	0x0102, r26
     d62:	b0 93 03 01 	sts	0x0103, r27
     d66:	8f 5f       	subi	r24, 0xFF	; 255
     d68:	9f 4f       	sbci	r25, 0xFF	; 255
     d6a:	af 4f       	sbci	r26, 0xFF	; 255
     d6c:	bf 4f       	sbci	r27, 0xFF	; 255
     d6e:	61 f4       	brne	.+24     	; 0xd88 <MassStore_SendCommand+0x5c>
	  MassStore_Tag = 1;
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	a0 e0       	ldi	r26, 0x00	; 0
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	80 93 00 01 	sts	0x0100, r24
     d7c:	90 93 01 01 	sts	0x0101, r25
     d80:	a0 93 02 01 	sts	0x0102, r26
     d84:	b0 93 03 01 	sts	0x0103, r27

	/* Each transmission should have a unique tag value, increment before use */
	SCSICommandBlock->Tag = MassStore_Tag;
     d88:	80 91 00 01 	lds	r24, 0x0100
     d8c:	90 91 01 01 	lds	r25, 0x0101
     d90:	a0 91 02 01 	lds	r26, 0x0102
     d94:	b0 91 03 01 	lds	r27, 0x0103
     d98:	8c 83       	std	Y+4, r24	; 0x04
     d9a:	9d 83       	std	Y+5, r25	; 0x05
     d9c:	ae 83       	std	Y+6, r26	; 0x06
     d9e:	bf 83       	std	Y+7, r27	; 0x07
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     da0:	82 e0       	ldi	r24, 0x02	; 2
     da2:	c8 2e       	mov	r12, r24
     da4:	c0 92 a7 00 	sts	0x00A7, r12

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     da8:	80 91 a9 00 	lds	r24, 0x00A9
     dac:	8f 7b       	andi	r24, 0xBF	; 191
     dae:	80 93 a9 00 	sts	0x00A9, r24
	/* Select the OUT data pipe for CBW transmission */
	Pipe_SelectPipe(MASS_STORE_DATA_OUT_PIPE);
	Pipe_Unfreeze();

	/* Write the CBW command to the OUT pipe */
	if ((ErrorCode = Pipe_Write_Stream_LE(SCSICommandBlock, sizeof(MS_CommandBlockWrapper_t), NULL)) !=
     db2:	ce 01       	movw	r24, r28
     db4:	6f e1       	ldi	r22, 0x1F	; 31
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	40 e0       	ldi	r20, 0x00	; 0
     dba:	50 e0       	ldi	r21, 0x00	; 0
     dbc:	59 d6       	rcall	.+3250   	; 0x1a70 <Pipe_Write_Stream_LE>
     dbe:	d8 2e       	mov	r13, r24
     dc0:	88 23       	and	r24, r24
     dc2:	09 f0       	breq	.+2      	; 0xdc6 <MassStore_SendCommand+0x9a>
     dc4:	58 c0       	rjmp	.+176    	; 0xe76 <MassStore_SendCommand+0x14a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     dc6:	80 91 a6 00 	lds	r24, 0x00A6
     dca:	8b 77       	andi	r24, 0x7B	; 123
     dcc:	80 93 a6 00 	sts	0x00A6, r24

	/* Send the data in the OUT pipe to the attached device */
	Pipe_ClearOUT();

	/* Wait until command has been sent */
	Pipe_WaitUntilReady();
     dd0:	b0 d4       	rcall	.+2400   	; 0x1732 <Pipe_WaitUntilReady>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     dd2:	80 91 a9 00 	lds	r24, 0x00A9
     dd6:	80 64       	ori	r24, 0x40	; 64
     dd8:	80 93 a9 00 	sts	0x00A9, r24

	/* Freeze pipe after use */
	Pipe_Freeze();

	/* Send data if any has been given */
	if ((BufferPtr != NULL) &&
     ddc:	01 15       	cp	r16, r1
     dde:	11 05       	cpc	r17, r1
     de0:	09 f4       	brne	.+2      	; 0xde4 <MassStore_SendCommand+0xb8>
     de2:	49 c0       	rjmp	.+146    	; 0xe76 <MassStore_SendCommand+0x14a>
 */
static uint8_t MassStore_SendReceiveData(MS_CommandBlockWrapper_t* const SCSICommandBlock,
                                         void* BufferPtr)
{
	uint8_t  ErrorCode = PIPE_RWSTREAM_NoError;
	uint16_t BytesRem  = SCSICommandBlock->DataTransferLength;
     de4:	e8 84       	ldd	r14, Y+8	; 0x08
     de6:	f9 84       	ldd	r15, Y+9	; 0x09

	/* Check the direction of the SCSI command data stage */
	if (SCSICommandBlock->Flags & MS_COMMAND_DIR_DATA_IN)
     de8:	8c 85       	ldd	r24, Y+12	; 0x0c
     dea:	87 ff       	sbrs	r24, 7
     dec:	1a c0       	rjmp	.+52     	; 0xe22 <MassStore_SendCommand+0xf6>
	{
		/* Wait until the device has replied with some data */
		if ((ErrorCode = MassStore_WaitForDataReceived()) != PIPE_RWSTREAM_NoError)
     dee:	3d df       	rcall	.-390    	; 0xc6a <MassStore_WaitForDataReceived>
     df0:	98 2f       	mov	r25, r24
     df2:	88 23       	and	r24, r24
     df4:	d1 f5       	brne	.+116    	; 0xe6a <MassStore_SendCommand+0x13e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     dfc:	80 91 a9 00 	lds	r24, 0x00A9
     e00:	8f 7b       	andi	r24, 0xBF	; 191
     e02:	80 93 a9 00 	sts	0x00A9, r24
		/* Select the IN data pipe for data reception */
		Pipe_SelectPipe(MASS_STORE_DATA_IN_PIPE);
		Pipe_Unfreeze();

		/* Read in the block data from the pipe */
		if ((ErrorCode = Pipe_Read_Stream_LE(BufferPtr, BytesRem, NULL)) != PIPE_RWSTREAM_NoError)
     e06:	c8 01       	movw	r24, r16
     e08:	b7 01       	movw	r22, r14
     e0a:	40 e0       	ldi	r20, 0x00	; 0
     e0c:	50 e0       	ldi	r21, 0x00	; 0
     e0e:	d9 d5       	rcall	.+2994   	; 0x19c2 <Pipe_Read_Stream_LE>
     e10:	98 2f       	mov	r25, r24
     e12:	88 23       	and	r24, r24
     e14:	51 f5       	brne	.+84     	; 0xe6a <MassStore_SendCommand+0x13e>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     e16:	80 91 a6 00 	lds	r24, 0x00A6
     e1a:	8e 77       	andi	r24, 0x7E	; 126
     e1c:	80 93 a6 00 	sts	0x00A6, r24
     e20:	1d c0       	rjmp	.+58     	; 0xe5c <MassStore_SendCommand+0x130>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     e22:	c0 92 a7 00 	sts	0x00A7, r12

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     e26:	80 91 a9 00 	lds	r24, 0x00A9
     e2a:	8f 7b       	andi	r24, 0xBF	; 191
     e2c:	80 93 a9 00 	sts	0x00A9, r24
		/* Select the OUT data pipe for data transmission */
		Pipe_SelectPipe(MASS_STORE_DATA_OUT_PIPE);
		Pipe_Unfreeze();

		/* Write the block data to the pipe */
		if ((ErrorCode = Pipe_Write_Stream_LE(BufferPtr, BytesRem, NULL)) != PIPE_RWSTREAM_NoError)
     e30:	c8 01       	movw	r24, r16
     e32:	b7 01       	movw	r22, r14
     e34:	40 e0       	ldi	r20, 0x00	; 0
     e36:	50 e0       	ldi	r21, 0x00	; 0
     e38:	1b d6       	rcall	.+3126   	; 0x1a70 <Pipe_Write_Stream_LE>
     e3a:	98 2f       	mov	r25, r24
     e3c:	88 23       	and	r24, r24
     e3e:	a9 f4       	brne	.+42     	; 0xe6a <MassStore_SendCommand+0x13e>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     e40:	80 91 a6 00 	lds	r24, 0x00A6
     e44:	8b 77       	andi	r24, 0x7B	; 123
     e46:	80 93 a6 00 	sts	0x00A6, r24
     e4a:	04 c0       	rjmp	.+8      	; 0xe54 <MassStore_SendCommand+0x128>
		/* Acknowledge the packet */
		Pipe_ClearOUT();

		while (!(Pipe_IsOUTReady()))
		{
			if (USB_HostState == HOST_STATE_Unattached)
     e4c:	80 91 34 01 	lds	r24, 0x0134
     e50:	81 30       	cpi	r24, 0x01	; 1
     e52:	51 f0       	breq	.+20     	; 0xe68 <MassStore_SendCommand+0x13c>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     e54:	80 91 a6 00 	lds	r24, 0x00A6
		  return ErrorCode;

		/* Acknowledge the packet */
		Pipe_ClearOUT();

		while (!(Pipe_IsOUTReady()))
     e58:	82 ff       	sbrs	r24, 2
     e5a:	f8 cf       	rjmp	.-16     	; 0xe4c <MassStore_SendCommand+0x120>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     e5c:	80 91 a9 00 	lds	r24, 0x00A9
     e60:	80 64       	ori	r24, 0x40	; 64
     e62:	80 93 a9 00 	sts	0x00A9, r24
     e66:	07 c0       	rjmp	.+14     	; 0xe76 <MassStore_SendCommand+0x14a>
     e68:	92 e0       	ldi	r25, 0x02	; 2
     e6a:	80 91 a9 00 	lds	r24, 0x00A9
     e6e:	80 64       	ori	r24, 0x40	; 64
     e70:	80 93 a9 00 	sts	0x00A9, r24
     e74:	d9 2e       	mov	r13, r25
		Pipe_Freeze();
		return ErrorCode;
	}

	return ErrorCode;
}
     e76:	8d 2d       	mov	r24, r13
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	1f 91       	pop	r17
     e7e:	0f 91       	pop	r16
     e80:	ff 90       	pop	r15
     e82:	ef 90       	pop	r14
     e84:	df 90       	pop	r13
     e86:	cf 90       	pop	r12
     e88:	08 95       	ret

00000e8a <MassStore_GetReturnedStatus>:
 *  \param[out] SCSICommandStatus  Pointer to a destination where the returned status data should be stored
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
static uint8_t MassStore_GetReturnedStatus(MS_CommandStatusWrapper_t* const SCSICommandStatus)
{
     e8a:	cf 93       	push	r28
     e8c:	df 93       	push	r29
     e8e:	ec 01       	movw	r28, r24
	uint8_t ErrorCode = PIPE_RWSTREAM_NoError;

	/* If an error in the command occurred, abort */
	if ((ErrorCode = MassStore_WaitForDataReceived()) != PIPE_RWSTREAM_NoError)
     e90:	ec de       	rcall	.-552    	; 0xc6a <MassStore_WaitForDataReceived>
     e92:	98 2f       	mov	r25, r24
     e94:	88 23       	and	r24, r24
     e96:	f1 f4       	brne	.+60     	; 0xed4 <MassStore_GetReturnedStatus+0x4a>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     e9e:	80 91 a9 00 	lds	r24, 0x00A9
     ea2:	8f 7b       	andi	r24, 0xBF	; 191
     ea4:	80 93 a9 00 	sts	0x00A9, r24
	/* Select the IN data pipe for data reception */
	Pipe_SelectPipe(MASS_STORE_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Load in the CSW from the attached device */
	if ((ErrorCode = Pipe_Read_Stream_LE(SCSICommandStatus, sizeof(MS_CommandStatusWrapper_t), NULL)) !=
     ea8:	ce 01       	movw	r24, r28
     eaa:	6d e0       	ldi	r22, 0x0D	; 13
     eac:	70 e0       	ldi	r23, 0x00	; 0
     eae:	40 e0       	ldi	r20, 0x00	; 0
     eb0:	50 e0       	ldi	r21, 0x00	; 0
     eb2:	87 d5       	rcall	.+2830   	; 0x19c2 <Pipe_Read_Stream_LE>
     eb4:	98 2f       	mov	r25, r24
     eb6:	88 23       	and	r24, r24
     eb8:	69 f4       	brne	.+26     	; 0xed4 <MassStore_GetReturnedStatus+0x4a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     eba:	80 91 a6 00 	lds	r24, 0x00A6
     ebe:	8e 77       	andi	r24, 0x7E	; 126
     ec0:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     ec4:	80 91 a9 00 	lds	r24, 0x00A9
     ec8:	80 64       	ori	r24, 0x40	; 64
     eca:	80 93 a9 00 	sts	0x00A9, r24

	/* Freeze the IN pipe after use */
	Pipe_Freeze();

	/* Check to see if command failed */
	if (SCSICommandStatus->Status != MS_SCSI_COMMAND_Pass)
     ece:	8c 85       	ldd	r24, Y+12	; 0x0c
     ed0:	81 11       	cpse	r24, r1
     ed2:	90 ec       	ldi	r25, 0xC0	; 192
	  ErrorCode = MASS_STORE_SCSI_COMMAND_FAILED;

	return ErrorCode;
}
     ed4:	89 2f       	mov	r24, r25
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	08 95       	ret

00000edc <MassStore_PreventAllowMediumRemoval>:
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_PreventAllowMediumRemoval(const uint8_t LUNIndex,
                                            const bool PreventRemoval)
{
     edc:	df 93       	push	r29
     ede:	cf 93       	push	r28
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
     ee4:	ac 97       	sbiw	r28, 0x2c	; 44
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	f8 94       	cli
     eea:	de bf       	out	0x3e, r29	; 62
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	cd bf       	out	0x3d, r28	; 61
					0x00,                   // Reserved
					PreventRemoval,         // Prevent flag
					0x00,                   // Reserved
					0x00                    // Unused (control)
				}
		};
     ef0:	fe 01       	movw	r30, r28
     ef2:	3e 96       	adiw	r30, 0x0e	; 14
     ef4:	9f e1       	ldi	r25, 0x1F	; 31
     ef6:	df 01       	movw	r26, r30
     ef8:	1d 92       	st	X+, r1
     efa:	9a 95       	dec	r25
     efc:	e9 f7       	brne	.-6      	; 0xef8 <MassStore_PreventAllowMediumRemoval+0x1c>
     efe:	25 e5       	ldi	r18, 0x55	; 85
     f00:	33 e5       	ldi	r19, 0x53	; 83
     f02:	42 e4       	ldi	r20, 0x42	; 66
     f04:	53 e4       	ldi	r21, 0x43	; 67
     f06:	2e 87       	std	Y+14, r18	; 0x0e
     f08:	3f 87       	std	Y+15, r19	; 0x0f
     f0a:	48 8b       	std	Y+16, r20	; 0x10
     f0c:	59 8b       	std	Y+17, r21	; 0x11
     f0e:	8b 8f       	std	Y+27, r24	; 0x1b
     f10:	86 e0       	ldi	r24, 0x06	; 6
     f12:	8c 8f       	std	Y+28, r24	; 0x1c
     f14:	8e e1       	ldi	r24, 0x1E	; 30
     f16:	8d 8f       	std	Y+29, r24	; 0x1d
     f18:	68 a3       	std	Y+32, r22	; 0x20

	MS_CommandStatusWrapper_t SCSICommandStatus;

	/* Send the command and any data to the attached device */
	if ((ErrorCode = MassStore_SendCommand(&SCSICommandBlock, NULL)) != PIPE_RWSTREAM_NoError)
     f1a:	cf 01       	movw	r24, r30
     f1c:	60 e0       	ldi	r22, 0x00	; 0
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	05 df       	rcall	.-502    	; 0xd2c <MassStore_SendCommand>
     f22:	98 2f       	mov	r25, r24
     f24:	88 23       	and	r24, r24
     f26:	31 f4       	brne	.+12     	; 0xf34 <MassStore_PreventAllowMediumRemoval+0x58>
		Pipe_Freeze();
		return ErrorCode;
	}

	/* Retrieve status information from the attached device */
	if ((ErrorCode = MassStore_GetReturnedStatus(&SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
     f28:	ce 01       	movw	r24, r28
     f2a:	01 96       	adiw	r24, 0x01	; 1
     f2c:	ae df       	rcall	.-164    	; 0xe8a <MassStore_GetReturnedStatus>
     f2e:	98 2f       	mov	r25, r24
     f30:	88 23       	and	r24, r24
     f32:	29 f0       	breq	.+10     	; 0xf3e <MassStore_PreventAllowMediumRemoval+0x62>
     f34:	80 91 a9 00 	lds	r24, 0x00A9
     f38:	80 64       	ori	r24, 0x40	; 64
     f3a:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_Freeze();
		return ErrorCode;
	}

	return ErrorCode;
}
     f3e:	89 2f       	mov	r24, r25
     f40:	ac 96       	adiw	r28, 0x2c	; 44
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	f8 94       	cli
     f46:	de bf       	out	0x3e, r29	; 62
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	cd bf       	out	0x3d, r28	; 61
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <MassStore_ReadCapacity>:
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_ReadCapacity(const uint8_t LUNIndex,
                               SCSI_Capacity_t* const CapacityPtr)
{
     f52:	0f 93       	push	r16
     f54:	1f 93       	push	r17
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
     f5e:	ac 97       	sbiw	r28, 0x2c	; 44
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	cd bf       	out	0x3d, r28	; 61
     f6a:	8b 01       	movw	r16, r22
					0x00,                   // Reserved
					0x00,                   // Reserved
					0x00,                   // Partial Medium Indicator
					0x00                    // Unused (control)
				}
		};
     f6c:	fe 01       	movw	r30, r28
     f6e:	3e 96       	adiw	r30, 0x0e	; 14
     f70:	9f e1       	ldi	r25, 0x1F	; 31
     f72:	df 01       	movw	r26, r30
     f74:	1d 92       	st	X+, r1
     f76:	9a 95       	dec	r25
     f78:	e9 f7       	brne	.-6      	; 0xf74 <MassStore_ReadCapacity+0x22>
     f7a:	25 e5       	ldi	r18, 0x55	; 85
     f7c:	33 e5       	ldi	r19, 0x53	; 83
     f7e:	42 e4       	ldi	r20, 0x42	; 66
     f80:	53 e4       	ldi	r21, 0x43	; 67
     f82:	2e 87       	std	Y+14, r18	; 0x0e
     f84:	3f 87       	std	Y+15, r19	; 0x0f
     f86:	48 8b       	std	Y+16, r20	; 0x10
     f88:	59 8b       	std	Y+17, r21	; 0x11
     f8a:	28 e0       	ldi	r18, 0x08	; 8
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	40 e0       	ldi	r20, 0x00	; 0
     f90:	50 e0       	ldi	r21, 0x00	; 0
     f92:	2e 8b       	std	Y+22, r18	; 0x16
     f94:	3f 8b       	std	Y+23, r19	; 0x17
     f96:	48 8f       	std	Y+24, r20	; 0x18
     f98:	59 8f       	std	Y+25, r21	; 0x19
     f9a:	90 e8       	ldi	r25, 0x80	; 128
     f9c:	9a 8f       	std	Y+26, r25	; 0x1a
     f9e:	8b 8f       	std	Y+27, r24	; 0x1b
     fa0:	8a e0       	ldi	r24, 0x0A	; 10
     fa2:	8c 8f       	std	Y+28, r24	; 0x1c
     fa4:	85 e2       	ldi	r24, 0x25	; 37
     fa6:	8d 8f       	std	Y+29, r24	; 0x1d

	MS_CommandStatusWrapper_t SCSICommandStatus;

	/* Send the command and any data to the attached device */
	if ((ErrorCode = MassStore_SendCommand(&SCSICommandBlock, CapacityPtr)) != PIPE_RWSTREAM_NoError)
     fa8:	cf 01       	movw	r24, r30
     faa:	c0 de       	rcall	.-640    	; 0xd2c <MassStore_SendCommand>
     fac:	98 2f       	mov	r25, r24
     fae:	88 23       	and	r24, r24
     fb0:	b9 f4       	brne	.+46     	; 0xfe0 <MassStore_ReadCapacity+0x8e>
				{
					uint32_t DWord;
					uint8_t  Bytes[4];
				} Data;

				Data.DWord = DWord;
     fb2:	f8 01       	movw	r30, r16
     fb4:	30 81       	ld	r19, Z
     fb6:	21 81       	ldd	r18, Z+1	; 0x01
     fb8:	92 81       	ldd	r25, Z+2	; 0x02
     fba:	83 81       	ldd	r24, Z+3	; 0x03
		Pipe_Freeze();
		return ErrorCode;
	}

	/* Endian-correct the read data */
	CapacityPtr->Blocks    = SwapEndian_32(CapacityPtr->Blocks);
     fbc:	80 83       	st	Z, r24
     fbe:	91 83       	std	Z+1, r25	; 0x01
     fc0:	22 83       	std	Z+2, r18	; 0x02
     fc2:	33 83       	std	Z+3, r19	; 0x03
     fc4:	34 81       	ldd	r19, Z+4	; 0x04
     fc6:	25 81       	ldd	r18, Z+5	; 0x05
     fc8:	96 81       	ldd	r25, Z+6	; 0x06
     fca:	87 81       	ldd	r24, Z+7	; 0x07
	CapacityPtr->BlockSize = SwapEndian_32(CapacityPtr->BlockSize);
     fcc:	84 83       	std	Z+4, r24	; 0x04
     fce:	95 83       	std	Z+5, r25	; 0x05
     fd0:	26 83       	std	Z+6, r18	; 0x06
     fd2:	37 83       	std	Z+7, r19	; 0x07

	/* Retrieve status information from the attached device */
	if ((ErrorCode = MassStore_GetReturnedStatus(&SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
     fd4:	ce 01       	movw	r24, r28
     fd6:	01 96       	adiw	r24, 0x01	; 1
     fd8:	58 df       	rcall	.-336    	; 0xe8a <MassStore_GetReturnedStatus>
     fda:	98 2f       	mov	r25, r24
     fdc:	88 23       	and	r24, r24
     fde:	29 f0       	breq	.+10     	; 0xfea <MassStore_ReadCapacity+0x98>
     fe0:	80 91 a9 00 	lds	r24, 0x00A9
     fe4:	80 64       	ori	r24, 0x40	; 64
     fe6:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_Freeze();
		return ErrorCode;
	}

	return ErrorCode;
}
     fea:	89 2f       	mov	r24, r25
     fec:	ac 96       	adiw	r28, 0x2c	; 44
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	f8 94       	cli
     ff2:	de bf       	out	0x3e, r29	; 62
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	cd bf       	out	0x3d, r28	; 61
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	1f 91       	pop	r17
     ffe:	0f 91       	pop	r16
    1000:	08 95       	ret

00001002 <MassStore_TestUnitReady>:
 *  \param[in] LUNIndex      Index of the LUN inside the device the command is being addressed to
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_TestUnitReady(const uint8_t LUNIndex)
{
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
    100a:	ac 97       	sbiw	r28, 0x2c	; 44
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	f8 94       	cli
    1010:	de bf       	out	0x3e, r29	; 62
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	cd bf       	out	0x3d, r28	; 61
					0x00,                   // Reserved
					0x00,                   // Reserved
					0x00,                   // Reserved
					0x00                    // Unused (control)
				}
		};
    1016:	fe 01       	movw	r30, r28
    1018:	3e 96       	adiw	r30, 0x0e	; 14
    101a:	9f e1       	ldi	r25, 0x1F	; 31
    101c:	df 01       	movw	r26, r30
    101e:	1d 92       	st	X+, r1
    1020:	9a 95       	dec	r25
    1022:	e9 f7       	brne	.-6      	; 0x101e <MassStore_TestUnitReady+0x1c>
    1024:	25 e5       	ldi	r18, 0x55	; 85
    1026:	33 e5       	ldi	r19, 0x53	; 83
    1028:	42 e4       	ldi	r20, 0x42	; 66
    102a:	53 e4       	ldi	r21, 0x43	; 67
    102c:	2e 87       	std	Y+14, r18	; 0x0e
    102e:	3f 87       	std	Y+15, r19	; 0x0f
    1030:	48 8b       	std	Y+16, r20	; 0x10
    1032:	59 8b       	std	Y+17, r21	; 0x11
    1034:	90 e8       	ldi	r25, 0x80	; 128
    1036:	9a 8f       	std	Y+26, r25	; 0x1a
    1038:	8b 8f       	std	Y+27, r24	; 0x1b
    103a:	86 e0       	ldi	r24, 0x06	; 6
    103c:	8c 8f       	std	Y+28, r24	; 0x1c

	MS_CommandStatusWrapper_t SCSICommandStatus;

	/* Send the command and any data to the attached device */
	if ((ErrorCode = MassStore_SendCommand(&SCSICommandBlock, NULL)) != PIPE_RWSTREAM_NoError)
    103e:	cf 01       	movw	r24, r30
    1040:	60 e0       	ldi	r22, 0x00	; 0
    1042:	70 e0       	ldi	r23, 0x00	; 0
    1044:	73 de       	rcall	.-794    	; 0xd2c <MassStore_SendCommand>
    1046:	98 2f       	mov	r25, r24
    1048:	88 23       	and	r24, r24
    104a:	31 f4       	brne	.+12     	; 0x1058 <MassStore_TestUnitReady+0x56>
		Pipe_Freeze();
		return ErrorCode;
	}

	/* Retrieve status information from the attached device */
	if ((ErrorCode = MassStore_GetReturnedStatus(&SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
    104c:	ce 01       	movw	r24, r28
    104e:	01 96       	adiw	r24, 0x01	; 1
    1050:	1c df       	rcall	.-456    	; 0xe8a <MassStore_GetReturnedStatus>
    1052:	98 2f       	mov	r25, r24
    1054:	88 23       	and	r24, r24
    1056:	29 f0       	breq	.+10     	; 0x1062 <MassStore_TestUnitReady+0x60>
    1058:	80 91 a9 00 	lds	r24, 0x00A9
    105c:	80 64       	ori	r24, 0x40	; 64
    105e:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_Freeze();
		return ErrorCode;
	}

	return ErrorCode;
}
    1062:	89 2f       	mov	r24, r25
    1064:	ac 96       	adiw	r28, 0x2c	; 44
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	de bf       	out	0x3e, r29	; 62
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	cd bf       	out	0x3d, r28	; 61
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <MassStore_ReadDeviceBlock>:
uint8_t MassStore_ReadDeviceBlock(const uint8_t LUNIndex,
                                  const uint32_t BlockAddress,
                                  const uint8_t Blocks,
                                  const uint16_t BlockSize,
                                  void* BufferPtr)
{
    1076:	8f 92       	push	r8
    1078:	9f 92       	push	r9
    107a:	af 92       	push	r10
    107c:	bf 92       	push	r11
    107e:	cf 92       	push	r12
    1080:	df 92       	push	r13
    1082:	ef 92       	push	r14
    1084:	ff 92       	push	r15
    1086:	0f 93       	push	r16
    1088:	1f 93       	push	r17
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	ac 97       	sbiw	r28, 0x2c	; 44
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	de bf       	out	0x3e, r29	; 62
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	cd bf       	out	0x3d, r28	; 61
    109e:	98 2e       	mov	r9, r24
    10a0:	5a 01       	movw	r10, r20
    10a2:	6b 01       	movw	r12, r22
    10a4:	82 2e       	mov	r8, r18
    10a6:	b8 01       	movw	r22, r16
					0x00,                   // Reserved
					0x00,                   // MSB of Total Blocks to Read
					Blocks,                 // LSB of Total Blocks to Read
					0x00                    // Unused (control)
				}
		};
    10a8:	8e 01       	movw	r16, r28
    10aa:	02 5f       	subi	r16, 0xF2	; 242
    10ac:	1f 4f       	sbci	r17, 0xFF	; 255
    10ae:	2f e1       	ldi	r18, 0x1F	; 31
    10b0:	f8 01       	movw	r30, r16
    10b2:	11 92       	st	Z+, r1
    10b4:	2a 95       	dec	r18
    10b6:	e9 f7       	brne	.-6      	; 0x10b2 <MassStore_ReadDeviceBlock+0x3c>
    10b8:	25 e5       	ldi	r18, 0x55	; 85
    10ba:	33 e5       	ldi	r19, 0x53	; 83
    10bc:	42 e4       	ldi	r20, 0x42	; 66
    10be:	53 e4       	ldi	r21, 0x43	; 67
    10c0:	2e 87       	std	Y+14, r18	; 0x0e
    10c2:	3f 87       	std	Y+15, r19	; 0x0f
    10c4:	48 8b       	std	Y+16, r20	; 0x10
    10c6:	59 8b       	std	Y+17, r21	; 0x11
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	28 2d       	mov	r18, r8
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	40 e0       	ldi	r20, 0x00	; 0
    10d2:	50 e0       	ldi	r21, 0x00	; 0
    10d4:	76 d7       	rcall	.+3820   	; 0x1fc2 <__mulsi3>
    10d6:	6e 8b       	std	Y+22, r22	; 0x16
    10d8:	7f 8b       	std	Y+23, r23	; 0x17
    10da:	88 8f       	std	Y+24, r24	; 0x18
    10dc:	99 8f       	std	Y+25, r25	; 0x19
    10de:	80 e8       	ldi	r24, 0x80	; 128
    10e0:	8a 8f       	std	Y+26, r24	; 0x1a
    10e2:	9b 8e       	std	Y+27, r9	; 0x1b
    10e4:	8a e0       	ldi	r24, 0x0A	; 10
    10e6:	8c 8f       	std	Y+28, r24	; 0x1c
    10e8:	88 e2       	ldi	r24, 0x28	; 40
    10ea:	8d 8f       	std	Y+29, r24	; 0x1d
    10ec:	8d 2d       	mov	r24, r13
    10ee:	99 27       	eor	r25, r25
    10f0:	aa 27       	eor	r26, r26
    10f2:	bb 27       	eor	r27, r27
    10f4:	8f 8f       	std	Y+31, r24	; 0x1f
    10f6:	c6 01       	movw	r24, r12
    10f8:	aa 27       	eor	r26, r26
    10fa:	bb 27       	eor	r27, r27
    10fc:	88 a3       	std	Y+32, r24	; 0x20
    10fe:	bb 27       	eor	r27, r27
    1100:	ad 2d       	mov	r26, r13
    1102:	9c 2d       	mov	r25, r12
    1104:	8b 2d       	mov	r24, r11
    1106:	89 a3       	std	Y+33, r24	; 0x21
    1108:	aa a2       	std	Y+34, r10	; 0x22
    110a:	8d a2       	std	Y+37, r8	; 0x25

	MS_CommandStatusWrapper_t SCSICommandStatus;

	/* Send the command and any data to the attached device */
	if ((ErrorCode = MassStore_SendCommand(&SCSICommandBlock, BufferPtr)) != PIPE_RWSTREAM_NoError)
    110c:	c8 01       	movw	r24, r16
    110e:	b7 01       	movw	r22, r14
    1110:	0d de       	rcall	.-998    	; 0xd2c <MassStore_SendCommand>
    1112:	98 2f       	mov	r25, r24
    1114:	88 23       	and	r24, r24
    1116:	31 f4       	brne	.+12     	; 0x1124 <MassStore_ReadDeviceBlock+0xae>
		Pipe_Freeze();
		return ErrorCode;
	}

	/* Retrieve status information from the attached device */
	if ((ErrorCode = MassStore_GetReturnedStatus(&SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
    1118:	ce 01       	movw	r24, r28
    111a:	01 96       	adiw	r24, 0x01	; 1
    111c:	b6 de       	rcall	.-660    	; 0xe8a <MassStore_GetReturnedStatus>
    111e:	98 2f       	mov	r25, r24
    1120:	88 23       	and	r24, r24
    1122:	29 f0       	breq	.+10     	; 0x112e <MassStore_ReadDeviceBlock+0xb8>
    1124:	80 91 a9 00 	lds	r24, 0x00A9
    1128:	80 64       	ori	r24, 0x40	; 64
    112a:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_Freeze();
		return ErrorCode;
	}

	return ErrorCode;
}
    112e:	89 2f       	mov	r24, r25
    1130:	ac 96       	adiw	r28, 0x2c	; 44
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	f8 94       	cli
    1136:	de bf       	out	0x3e, r29	; 62
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	cd bf       	out	0x3d, r28	; 61
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	1f 91       	pop	r17
    1142:	0f 91       	pop	r16
    1144:	ff 90       	pop	r15
    1146:	ef 90       	pop	r14
    1148:	df 90       	pop	r13
    114a:	cf 90       	pop	r12
    114c:	bf 90       	pop	r11
    114e:	af 90       	pop	r10
    1150:	9f 90       	pop	r9
    1152:	8f 90       	pop	r8
    1154:	08 95       	ret

00001156 <MassStore_RequestSense>:
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_RequestSense(const uint8_t LUNIndex,
                               SCSI_Request_Sense_Response_t* const SensePtr)
{
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
    115e:	ac 97       	sbiw	r28, 0x2c	; 44
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	de bf       	out	0x3e, r29	; 62
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	cd bf       	out	0x3d, r28	; 61
					0x00,                   // Reserved
					0x00,                   // Reserved
					sizeof(SCSI_Request_Sense_Response_t), // Allocation Length
					0x00                    // Unused (control)
				}
		};
    116a:	fe 01       	movw	r30, r28
    116c:	3e 96       	adiw	r30, 0x0e	; 14
    116e:	9f e1       	ldi	r25, 0x1F	; 31
    1170:	df 01       	movw	r26, r30
    1172:	1d 92       	st	X+, r1
    1174:	9a 95       	dec	r25
    1176:	e9 f7       	brne	.-6      	; 0x1172 <MassStore_RequestSense+0x1c>
    1178:	25 e5       	ldi	r18, 0x55	; 85
    117a:	33 e5       	ldi	r19, 0x53	; 83
    117c:	42 e4       	ldi	r20, 0x42	; 66
    117e:	53 e4       	ldi	r21, 0x43	; 67
    1180:	2e 87       	std	Y+14, r18	; 0x0e
    1182:	3f 87       	std	Y+15, r19	; 0x0f
    1184:	48 8b       	std	Y+16, r20	; 0x10
    1186:	59 8b       	std	Y+17, r21	; 0x11
    1188:	22 e1       	ldi	r18, 0x12	; 18
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	40 e0       	ldi	r20, 0x00	; 0
    118e:	50 e0       	ldi	r21, 0x00	; 0
    1190:	2e 8b       	std	Y+22, r18	; 0x16
    1192:	3f 8b       	std	Y+23, r19	; 0x17
    1194:	48 8f       	std	Y+24, r20	; 0x18
    1196:	59 8f       	std	Y+25, r21	; 0x19
    1198:	90 e8       	ldi	r25, 0x80	; 128
    119a:	9a 8f       	std	Y+26, r25	; 0x1a
    119c:	8b 8f       	std	Y+27, r24	; 0x1b
    119e:	86 e0       	ldi	r24, 0x06	; 6
    11a0:	8c 8f       	std	Y+28, r24	; 0x1c
    11a2:	83 e0       	ldi	r24, 0x03	; 3
    11a4:	8d 8f       	std	Y+29, r24	; 0x1d
    11a6:	82 e1       	ldi	r24, 0x12	; 18
    11a8:	89 a3       	std	Y+33, r24	; 0x21

	MS_CommandStatusWrapper_t SCSICommandStatus;

	/* Send the command and any data to the attached device */
	if ((ErrorCode = MassStore_SendCommand(&SCSICommandBlock, SensePtr)) != PIPE_RWSTREAM_NoError)
    11aa:	cf 01       	movw	r24, r30
    11ac:	bf dd       	rcall	.-1154   	; 0xd2c <MassStore_SendCommand>
    11ae:	98 2f       	mov	r25, r24
    11b0:	88 23       	and	r24, r24
    11b2:	31 f4       	brne	.+12     	; 0x11c0 <MassStore_RequestSense+0x6a>
		Pipe_Freeze();
		return ErrorCode;
	}

	/* Retrieve status information from the attached device */
	if ((ErrorCode = MassStore_GetReturnedStatus(&SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
    11b4:	ce 01       	movw	r24, r28
    11b6:	01 96       	adiw	r24, 0x01	; 1
    11b8:	68 de       	rcall	.-816    	; 0xe8a <MassStore_GetReturnedStatus>
    11ba:	98 2f       	mov	r25, r24
    11bc:	88 23       	and	r24, r24
    11be:	29 f0       	breq	.+10     	; 0x11ca <MassStore_RequestSense+0x74>
    11c0:	80 91 a9 00 	lds	r24, 0x00A9
    11c4:	80 64       	ori	r24, 0x40	; 64
    11c6:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_Freeze();
		return ErrorCode;
	}

	return ErrorCode;
}
    11ca:	89 2f       	mov	r24, r25
    11cc:	ac 96       	adiw	r28, 0x2c	; 44
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	08 95       	ret

000011de <MassStore_Inquiry>:
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_Inquiry(const uint8_t LUNIndex,
                          SCSI_Inquiry_Response_t* const InquiryPtr)
{
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	ac 97       	sbiw	r28, 0x2c	; 44
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	f8 94       	cli
    11ec:	de bf       	out	0x3e, r29	; 62
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	cd bf       	out	0x3d, r28	; 61
					0x00,                   // Reserved
					0x00,                   // Reserved
					sizeof(SCSI_Inquiry_Response_t), // Allocation Length
					0x00                    // Unused (control)
				}
		};
    11f2:	fe 01       	movw	r30, r28
    11f4:	3e 96       	adiw	r30, 0x0e	; 14
    11f6:	9f e1       	ldi	r25, 0x1F	; 31
    11f8:	df 01       	movw	r26, r30
    11fa:	1d 92       	st	X+, r1
    11fc:	9a 95       	dec	r25
    11fe:	e9 f7       	brne	.-6      	; 0x11fa <MassStore_Inquiry+0x1c>
    1200:	25 e5       	ldi	r18, 0x55	; 85
    1202:	33 e5       	ldi	r19, 0x53	; 83
    1204:	42 e4       	ldi	r20, 0x42	; 66
    1206:	53 e4       	ldi	r21, 0x43	; 67
    1208:	2e 87       	std	Y+14, r18	; 0x0e
    120a:	3f 87       	std	Y+15, r19	; 0x0f
    120c:	48 8b       	std	Y+16, r20	; 0x10
    120e:	59 8b       	std	Y+17, r21	; 0x11
    1210:	24 e2       	ldi	r18, 0x24	; 36
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	40 e0       	ldi	r20, 0x00	; 0
    1216:	50 e0       	ldi	r21, 0x00	; 0
    1218:	2e 8b       	std	Y+22, r18	; 0x16
    121a:	3f 8b       	std	Y+23, r19	; 0x17
    121c:	48 8f       	std	Y+24, r20	; 0x18
    121e:	59 8f       	std	Y+25, r21	; 0x19
    1220:	90 e8       	ldi	r25, 0x80	; 128
    1222:	9a 8f       	std	Y+26, r25	; 0x1a
    1224:	8b 8f       	std	Y+27, r24	; 0x1b
    1226:	86 e0       	ldi	r24, 0x06	; 6
    1228:	8c 8f       	std	Y+28, r24	; 0x1c
    122a:	82 e1       	ldi	r24, 0x12	; 18
    122c:	8d 8f       	std	Y+29, r24	; 0x1d
    122e:	84 e2       	ldi	r24, 0x24	; 36
    1230:	89 a3       	std	Y+33, r24	; 0x21

	MS_CommandStatusWrapper_t SCSICommandStatus;

	/* Send the command and any data to the attached device */
	if ((ErrorCode = MassStore_SendCommand(&SCSICommandBlock, InquiryPtr)) != PIPE_RWSTREAM_NoError)
    1232:	cf 01       	movw	r24, r30
    1234:	7b dd       	rcall	.-1290   	; 0xd2c <MassStore_SendCommand>
    1236:	98 2f       	mov	r25, r24
    1238:	88 23       	and	r24, r24
    123a:	31 f4       	brne	.+12     	; 0x1248 <MassStore_Inquiry+0x6a>
		Pipe_Freeze();
		return ErrorCode;
	}

	/* Retrieve status information from the attached device */
	if ((ErrorCode = MassStore_GetReturnedStatus(&SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
    123c:	ce 01       	movw	r24, r28
    123e:	01 96       	adiw	r24, 0x01	; 1
    1240:	24 de       	rcall	.-952    	; 0xe8a <MassStore_GetReturnedStatus>
    1242:	98 2f       	mov	r25, r24
    1244:	88 23       	and	r24, r24
    1246:	29 f0       	breq	.+10     	; 0x1252 <MassStore_Inquiry+0x74>
    1248:	80 91 a9 00 	lds	r24, 0x00A9
    124c:	80 64       	ori	r24, 0x40	; 64
    124e:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_Freeze();
		return ErrorCode;
	}

	return ErrorCode;
}
    1252:	89 2f       	mov	r24, r25
    1254:	ac 96       	adiw	r28, 0x2c	; 44
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <MassStore_GetMaxLUN>:
 *  \param[out] MaxLUNIndex  Pointer to the location that the maximum LUN index value should be stored
 *
 *  \return A value from the USB_Host_SendControlErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_GetMaxLUN(uint8_t* const MaxLUNIndex)
{
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	ec 01       	movw	r28, r24
	uint8_t ErrorCode = HOST_SENDCONTROL_Successful;

	USB_ControlRequest = (USB_Request_Header_t)
    126c:	ac e2       	ldi	r26, 0x2C	; 44
    126e:	b1 e0       	ldi	r27, 0x01	; 1
    1270:	e4 e0       	ldi	r30, 0x04	; 4
    1272:	f1 e0       	ldi	r31, 0x01	; 1
    1274:	88 e0       	ldi	r24, 0x08	; 8
    1276:	01 90       	ld	r0, Z+
    1278:	0d 92       	st	X+, r0
    127a:	81 50       	subi	r24, 0x01	; 1
    127c:	e1 f7       	brne	.-8      	; 0x1276 <MassStore_GetMaxLUN+0x10>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    127e:	10 92 a7 00 	sts	0x00A7, r1
		};

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(MaxLUNIndex)) == HOST_SENDCONTROL_SetupStalled)
    1282:	ce 01       	movw	r24, r28
    1284:	14 d5       	rcall	.+2600   	; 0x1cae <USB_Host_SendControlRequest>
    1286:	83 30       	cpi	r24, 0x03	; 3
    1288:	39 f4       	brne	.+14     	; 0x1298 <MassStore_GetMaxLUN+0x32>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
    128a:	80 91 a6 00 	lds	r24, 0x00A6
    128e:	8d 7f       	andi	r24, 0xFD	; 253
    1290:	80 93 a6 00 	sts	0x00A6, r24
	{
		/* Clear the pipe stall */
		Pipe_ClearStall();

		/* Some faulty Mass Storage devices don't implement the GET_MAX_LUN request, so assume a single LUN */
		*MaxLUNIndex = 0;
    1294:	18 82       	st	Y, r1
    1296:	80 e0       	ldi	r24, 0x00	; 0
		/* Clear the error, and pretend the request executed correctly if the device STALLed it */
		ErrorCode = HOST_SENDCONTROL_Successful;
	}

	return ErrorCode;
}
    1298:	df 91       	pop	r29
    129a:	cf 91       	pop	r28
    129c:	08 95       	ret

0000129e <MassStore_MassStorageReset>:
 *
 *  \return A value from the USB_Host_SendControlErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_MassStorageReset(void)
{
	USB_ControlRequest = (USB_Request_Header_t)
    129e:	ac e2       	ldi	r26, 0x2C	; 44
    12a0:	b1 e0       	ldi	r27, 0x01	; 1
    12a2:	ec e0       	ldi	r30, 0x0C	; 12
    12a4:	f1 e0       	ldi	r31, 0x01	; 1
    12a6:	88 e0       	ldi	r24, 0x08	; 8
    12a8:	01 90       	ld	r0, Z+
    12aa:	0d 92       	st	X+, r0
    12ac:	81 50       	subi	r24, 0x01	; 1
    12ae:	e1 f7       	brne	.-8      	; 0x12a8 <MassStore_MassStorageReset+0xa>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    12b0:	10 92 a7 00 	sts	0x00A7, r1
		};

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	90 e0       	ldi	r25, 0x00	; 0
}
    12b8:	fa c4       	rjmp	.+2548   	; 0x1cae <USB_Host_SendControlRequest>

000012ba <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
    12ba:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    12bc:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    12c0:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    12c4:	80 91 a0 00 	lds	r24, 0x00A0
    12c8:	8f 7d       	andi	r24, 0xDF	; 223
    12ca:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    12ce:	80 91 9f 00 	lds	r24, 0x009F
    12d2:	8f 7d       	andi	r24, 0xDF	; 223
    12d4:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    12d8:	80 91 9e 00 	lds	r24, 0x009E
    12dc:	81 60       	ori	r24, 0x01	; 1
    12de:	80 93 9e 00 	sts	0x009E, r24
    12e2:	28 c0       	rjmp	.+80     	; 0x1334 <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    12e4:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    12e8:	85 ff       	sbrs	r24, 5
    12ea:	06 c0       	rjmp	.+12     	; 0x12f8 <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    12ec:	80 91 9f 00 	lds	r24, 0x009F
    12f0:	8f 7d       	andi	r24, 0xDF	; 223
    12f2:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
    12f6:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
    12f8:	80 91 34 01 	lds	r24, 0x0134
    12fc:	81 30       	cpi	r24, 0x01	; 1
    12fe:	11 f4       	brne	.+4      	; 0x1304 <USB_Host_WaitMS+0x4a>
    1300:	91 e0       	ldi	r25, 0x01	; 1
    1302:	1a c0       	rjmp	.+52     	; 0x1338 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
    1304:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
    1308:	84 ff       	sbrs	r24, 4
    130a:	09 c0       	rjmp	.+18     	; 0x131e <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    130c:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1310:	80 91 a6 00 	lds	r24, 0x00A6
    1314:	8f 7e       	andi	r24, 0xEF	; 239
    1316:	80 93 a6 00 	sts	0x00A6, r24
    131a:	92 e0       	ldi	r25, 0x02	; 2
    131c:	0d c0       	rjmp	.+26     	; 0x1338 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    131e:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
    1322:	81 ff       	sbrs	r24, 1
    1324:	07 c0       	rjmp	.+14     	; 0x1334 <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
    1326:	80 91 a6 00 	lds	r24, 0x00A6
    132a:	8d 7f       	andi	r24, 0xFD	; 253
    132c:	80 93 a6 00 	sts	0x00A6, r24
    1330:	93 e0       	ldi	r25, 0x03	; 3
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
    1334:	99 23       	and	r25, r25
    1336:	b1 f6       	brne	.-84     	; 0x12e4 <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
    1338:	20 fd       	sbrc	r18, 0
    133a:	05 c0       	rjmp	.+10     	; 0x1346 <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    133c:	80 91 9e 00 	lds	r24, 0x009E
    1340:	8e 7f       	andi	r24, 0xFE	; 254
    1342:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
    1346:	35 ff       	sbrs	r19, 5
    1348:	05 c0       	rjmp	.+10     	; 0x1354 <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    134a:	80 91 a0 00 	lds	r24, 0x00A0
    134e:	80 62       	ori	r24, 0x20	; 32
    1350:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
    1354:	89 2f       	mov	r24, r25
    1356:	08 95       	ret

00001358 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1358:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    135c:	80 91 a0 00 	lds	r24, 0x00A0
    1360:	8d 7f       	andi	r24, 0xFD	; 253
    1362:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
    1366:	80 91 9e 00 	lds	r24, 0x009E
    136a:	82 60       	ori	r24, 0x02	; 2
    136c:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
    1370:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
    1374:	81 fd       	sbrc	r24, 1
    1376:	fc cf       	rjmp	.-8      	; 0x1370 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1378:	80 91 9e 00 	lds	r24, 0x009E
    137c:	81 60       	ori	r24, 0x01	; 1
    137e:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
    1382:	10 92 2a 01 	sts	0x012A, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    1386:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    138a:	80 91 a0 00 	lds	r24, 0x00A0
    138e:	8f 7d       	andi	r24, 0xDF	; 223
    1390:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1394:	80 91 9f 00 	lds	r24, 0x009F
    1398:	8f 7d       	andi	r24, 0xDF	; 223
    139a:	80 93 9f 00 	sts	0x009F, r24
    139e:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13a0:	40 ed       	ldi	r20, 0xD0	; 208
    13a2:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    13a4:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    13a8:	85 ff       	sbrs	r24, 5
    13aa:	0b c0       	rjmp	.+22     	; 0x13c2 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    13ac:	80 91 9f 00 	lds	r24, 0x009F
    13b0:	8f 7d       	andi	r24, 0xDF	; 223
    13b2:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    13b6:	80 91 9f 00 	lds	r24, 0x009F
    13ba:	8d 7f       	andi	r24, 0xFD	; 253
    13bc:	80 93 9f 00 	sts	0x009F, r24
    13c0:	05 c0       	rjmp	.+10     	; 0x13cc <USB_Host_ResetDevice+0x74>
    13c2:	ca 01       	movw	r24, r20
    13c4:	01 97       	sbiw	r24, 0x01	; 1
    13c6:	f1 f7       	brne	.-4      	; 0x13c4 <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
    13c8:	21 50       	subi	r18, 0x01	; 1
    13ca:	61 f7       	brne	.-40     	; 0x13a4 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
    13cc:	35 ff       	sbrs	r19, 5
    13ce:	05 c0       	rjmp	.+10     	; 0x13da <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    13d0:	80 91 a0 00 	lds	r24, 0x00A0
    13d4:	80 62       	ori	r24, 0x20	; 32
    13d6:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
    13da:	60 fd       	sbrc	r22, 0
    13dc:	05 c0       	rjmp	.+10     	; 0x13e8 <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    13de:	80 91 9e 00 	lds	r24, 0x009E
    13e2:	8e 7f       	andi	r24, 0xFE	; 254
    13e4:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    13e8:	80 91 a0 00 	lds	r24, 0x00A0
    13ec:	82 60       	ori	r24, 0x02	; 2
    13ee:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
    13f2:	08 95       	ret

000013f4 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
    13f4:	ef 92       	push	r14
    13f6:	0f 93       	push	r16
    13f8:	1f 93       	push	r17
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
    1402:	28 97       	sbiw	r28, 0x08	; 8
    1404:	0f b6       	in	r0, 0x3f	; 63
    1406:	f8 94       	cli
    1408:	de bf       	out	0x3e, r29	; 62
    140a:	0f be       	out	0x3f, r0	; 63
    140c:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
    140e:	80 91 34 01 	lds	r24, 0x0134
    1412:	85 30       	cpi	r24, 0x05	; 5
    1414:	09 f4       	brne	.+2      	; 0x1418 <USB_Host_ProcessNextHostState+0x24>
    1416:	94 c0       	rjmp	.+296    	; 0x1540 <USB_Host_ProcessNextHostState+0x14c>
    1418:	86 30       	cpi	r24, 0x06	; 6
    141a:	68 f4       	brcc	.+26     	; 0x1436 <USB_Host_ProcessNextHostState+0x42>
    141c:	82 30       	cpi	r24, 0x02	; 2
    141e:	b9 f1       	breq	.+110    	; 0x148e <USB_Host_ProcessNextHostState+0x9a>
    1420:	83 30       	cpi	r24, 0x03	; 3
    1422:	18 f4       	brcc	.+6      	; 0x142a <USB_Host_ProcessNextHostState+0x36>
    1424:	88 23       	and	r24, r24
    1426:	a1 f0       	breq	.+40     	; 0x1450 <USB_Host_ProcessNextHostState+0x5c>
    1428:	06 c1       	rjmp	.+524    	; 0x1636 <USB_Host_ProcessNextHostState+0x242>
    142a:	83 30       	cpi	r24, 0x03	; 3
    142c:	d1 f1       	breq	.+116    	; 0x14a2 <USB_Host_ProcessNextHostState+0xae>
    142e:	84 30       	cpi	r24, 0x04	; 4
    1430:	09 f0       	breq	.+2      	; 0x1434 <USB_Host_ProcessNextHostState+0x40>
    1432:	01 c1       	rjmp	.+514    	; 0x1636 <USB_Host_ProcessNextHostState+0x242>
    1434:	5d c0       	rjmp	.+186    	; 0x14f0 <USB_Host_ProcessNextHostState+0xfc>
    1436:	87 30       	cpi	r24, 0x07	; 7
    1438:	09 f4       	brne	.+2      	; 0x143c <USB_Host_ProcessNextHostState+0x48>
    143a:	9b c0       	rjmp	.+310    	; 0x1572 <USB_Host_ProcessNextHostState+0x17e>
    143c:	87 30       	cpi	r24, 0x07	; 7
    143e:	08 f4       	brcc	.+2      	; 0x1442 <USB_Host_ProcessNextHostState+0x4e>
    1440:	8a c0       	rjmp	.+276    	; 0x1556 <USB_Host_ProcessNextHostState+0x162>
    1442:	88 30       	cpi	r24, 0x08	; 8
    1444:	09 f4       	brne	.+2      	; 0x1448 <USB_Host_ProcessNextHostState+0x54>
    1446:	b3 c0       	rjmp	.+358    	; 0x15ae <USB_Host_ProcessNextHostState+0x1ba>
    1448:	89 30       	cpi	r24, 0x09	; 9
    144a:	09 f0       	breq	.+2      	; 0x144e <USB_Host_ProcessNextHostState+0x5a>
    144c:	f4 c0       	rjmp	.+488    	; 0x1636 <USB_Host_ProcessNextHostState+0x242>
    144e:	d7 c0       	rjmp	.+430    	; 0x15fe <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
    1450:	00 91 27 01 	lds	r16, 0x0127
    1454:	10 91 28 01 	lds	r17, 0x0128
    1458:	01 15       	cp	r16, r1
    145a:	11 05       	cpc	r17, r1
    145c:	09 f4       	brne	.+2      	; 0x1460 <USB_Host_ProcessNextHostState+0x6c>
    145e:	eb c0       	rjmp	.+470    	; 0x1636 <USB_Host_ProcessNextHostState+0x242>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	2b df       	rcall	.-426    	; 0x12ba <USB_Host_WaitMS>
    1464:	68 2f       	mov	r22, r24
    1466:	88 23       	and	r24, r24
    1468:	31 f0       	breq	.+12     	; 0x1476 <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
    146a:	80 91 26 01 	lds	r24, 0x0126
    146e:	80 93 34 01 	sts	0x0134, r24
    1472:	91 e0       	ldi	r25, 0x01	; 1
    1474:	dc c0       	rjmp	.+440    	; 0x162e <USB_Host_ProcessNextHostState+0x23a>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
    1476:	c8 01       	movw	r24, r16
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	90 93 28 01 	sts	0x0128, r25
    147e:	80 93 27 01 	sts	0x0127, r24
    1482:	89 2b       	or	r24, r25
    1484:	09 f0       	breq	.+2      	; 0x1488 <USB_Host_ProcessNextHostState+0x94>
    1486:	d7 c0       	rjmp	.+430    	; 0x1636 <USB_Host_ProcessNextHostState+0x242>
				  USB_HostState = PostWaitState;
    1488:	80 91 26 01 	lds	r24, 0x0126
    148c:	07 c0       	rjmp	.+14     	; 0x149c <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
    148e:	88 ee       	ldi	r24, 0xE8	; 232
    1490:	93 e0       	ldi	r25, 0x03	; 3
    1492:	90 93 28 01 	sts	0x0128, r25
    1496:	80 93 27 01 	sts	0x0127, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
    149a:	83 e0       	ldi	r24, 0x03	; 3
    149c:	80 93 34 01 	sts	0x0134, r24
    14a0:	ca c0       	rjmp	.+404    	; 0x1636 <USB_Host_ProcessNextHostState+0x242>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
    14a2:	80 91 27 01 	lds	r24, 0x0127
    14a6:	90 91 28 01 	lds	r25, 0x0128
    14aa:	01 97       	sbiw	r24, 0x01	; 1
    14ac:	90 93 28 01 	sts	0x0128, r25
    14b0:	80 93 27 01 	sts	0x0127, r24
    14b4:	01 96       	adiw	r24, 0x01	; 1
    14b6:	29 f0       	breq	.+10     	; 0x14c2 <USB_Host_ProcessNextHostState+0xce>
    14b8:	80 ed       	ldi	r24, 0xD0	; 208
    14ba:	97 e0       	ldi	r25, 0x07	; 7
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	f1 f7       	brne	.-4      	; 0x14bc <USB_Host_ProcessNextHostState+0xc8>
    14c0:	ba c0       	rjmp	.+372    	; 0x1636 <USB_Host_ProcessNextHostState+0x242>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
    14c2:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    14c4:	80 91 d8 00 	lds	r24, 0x00D8
    14c8:	80 61       	ori	r24, 0x10	; 16
    14ca:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
    14ce:	80 91 dd 00 	lds	r24, 0x00DD
    14d2:	8b 7f       	andi	r24, 0xFB	; 251
    14d4:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
    14d8:	80 91 d7 00 	lds	r24, 0x00D7
    14dc:	80 61       	ori	r24, 0x10	; 16
    14de:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
    14e2:	80 91 dd 00 	lds	r24, 0x00DD
    14e6:	82 60       	ori	r24, 0x02	; 2
    14e8:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
    14ec:	84 e0       	ldi	r24, 0x04	; 4
    14ee:	d6 cf       	rjmp	.-84     	; 0x149c <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
    14f0:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
    14f4:	80 ff       	sbrs	r24, 0
    14f6:	9f c0       	rjmp	.+318    	; 0x1636 <USB_Host_ProcessNextHostState+0x242>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    14f8:	80 91 9f 00 	lds	r24, 0x009F
    14fc:	8e 7f       	andi	r24, 0xFE	; 254
    14fe:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1502:	80 91 9f 00 	lds	r24, 0x009F
    1506:	8d 7f       	andi	r24, 0xFD	; 253
    1508:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    150c:	80 91 df 00 	lds	r24, 0x00DF
    1510:	8d 7f       	andi	r24, 0xFD	; 253
    1512:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
    1516:	80 91 de 00 	lds	r24, 0x00DE
    151a:	82 60       	ori	r24, 0x02	; 2
    151c:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1520:	80 91 9e 00 	lds	r24, 0x009E
    1524:	81 60       	ori	r24, 0x01	; 1
    1526:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
    152a:	ef d0       	rcall	.+478    	; 0x170a <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
    152c:	10 92 34 01 	sts	0x0134, r1
    1530:	84 e6       	ldi	r24, 0x64	; 100
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	90 93 28 01 	sts	0x0128, r25
    1538:	80 93 27 01 	sts	0x0127, r24
    153c:	85 e0       	ldi	r24, 0x05	; 5
    153e:	5c c0       	rjmp	.+184    	; 0x15f8 <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
    1540:	0b df       	rcall	.-490    	; 0x1358 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
    1542:	10 92 34 01 	sts	0x0134, r1
    1546:	88 ec       	ldi	r24, 0xC8	; 200
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	90 93 28 01 	sts	0x0128, r25
    154e:	80 93 27 01 	sts	0x0127, r24
    1552:	86 e0       	ldi	r24, 0x06	; 6
    1554:	51 c0       	rjmp	.+162    	; 0x15f8 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	60 e0       	ldi	r22, 0x00	; 0
    155a:	40 e0       	ldi	r20, 0x00	; 0
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	00 e4       	ldi	r16, 0x40	; 64
    1560:	10 e0       	ldi	r17, 0x00	; 0
    1562:	ee 24       	eor	r14, r14
    1564:	74 d0       	rcall	.+232    	; 0x164e <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    1566:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
    156a:	87 ff       	sbrs	r24, 7
    156c:	5e c0       	rjmp	.+188    	; 0x162a <USB_Host_ProcessNextHostState+0x236>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
    156e:	87 e0       	ldi	r24, 0x07	; 7
    1570:	95 cf       	rjmp	.-214    	; 0x149c <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
    1572:	ac e2       	ldi	r26, 0x2C	; 44
    1574:	b1 e0       	ldi	r27, 0x01	; 1
    1576:	ec e1       	ldi	r30, 0x1C	; 28
    1578:	f1 e0       	ldi	r31, 0x01	; 1
    157a:	88 e0       	ldi	r24, 0x08	; 8
    157c:	01 90       	ld	r0, Z+
    157e:	0d 92       	st	X+, r0
    1580:	81 50       	subi	r24, 0x01	; 1
    1582:	e1 f7       	brne	.-8      	; 0x157c <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
    1584:	ce 01       	movw	r24, r28
    1586:	01 96       	adiw	r24, 0x01	; 1
    1588:	92 d3       	rcall	.+1828   	; 0x1cae <USB_Host_SendControlRequest>
    158a:	68 2f       	mov	r22, r24
    158c:	88 23       	and	r24, r24
    158e:	09 f0       	breq	.+2      	; 0x1592 <USB_Host_ProcessNextHostState+0x19e>
    1590:	4a c0       	rjmp	.+148    	; 0x1626 <USB_Host_ProcessNextHostState+0x232>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
    1592:	88 85       	ldd	r24, Y+8	; 0x08
    1594:	80 93 24 01 	sts	0x0124, r24

			USB_Host_ResetDevice();
    1598:	df de       	rcall	.-578    	; 0x1358 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
    159a:	10 92 34 01 	sts	0x0134, r1
    159e:	88 ec       	ldi	r24, 0xC8	; 200
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	90 93 28 01 	sts	0x0128, r25
    15a6:	80 93 27 01 	sts	0x0127, r24
    15aa:	88 e0       	ldi	r24, 0x08	; 8
    15ac:	25 c0       	rjmp	.+74     	; 0x15f8 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
    15ae:	00 91 24 01 	lds	r16, 0x0124
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	60 e0       	ldi	r22, 0x00	; 0
    15b6:	40 e0       	ldi	r20, 0x00	; 0
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	10 e0       	ldi	r17, 0x00	; 0
    15bc:	ee 24       	eor	r14, r14
    15be:	47 d0       	rcall	.+142    	; 0x164e <Pipe_ConfigurePipe>
    15c0:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
    15c4:	87 ff       	sbrs	r24, 7
    15c6:	31 c0       	rjmp	.+98     	; 0x162a <USB_Host_ProcessNextHostState+0x236>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
    15c8:	ac e2       	ldi	r26, 0x2C	; 44
    15ca:	b1 e0       	ldi	r27, 0x01	; 1
    15cc:	e4 e1       	ldi	r30, 0x14	; 20
    15ce:	f1 e0       	ldi	r31, 0x01	; 1
    15d0:	88 e0       	ldi	r24, 0x08	; 8
    15d2:	01 90       	ld	r0, Z+
    15d4:	0d 92       	st	X+, r0
    15d6:	81 50       	subi	r24, 0x01	; 1
    15d8:	e1 f7       	brne	.-8      	; 0x15d2 <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	67 d3       	rcall	.+1742   	; 0x1cae <USB_Host_SendControlRequest>
    15e0:	68 2f       	mov	r22, r24
    15e2:	88 23       	and	r24, r24
    15e4:	01 f5       	brne	.+64     	; 0x1626 <USB_Host_ProcessNextHostState+0x232>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
    15e6:	10 92 34 01 	sts	0x0134, r1
    15ea:	84 e6       	ldi	r24, 0x64	; 100
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	90 93 28 01 	sts	0x0128, r25
    15f2:	80 93 27 01 	sts	0x0127, r24
    15f6:	89 e0       	ldi	r24, 0x09	; 9
    15f8:	80 93 26 01 	sts	0x0126, r24
    15fc:	1c c0       	rjmp	.+56     	; 0x1636 <USB_Host_ProcessNextHostState+0x242>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
    1604:	8a e0       	ldi	r24, 0x0A	; 10
    1606:	80 93 34 01 	sts	0x0134, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
    160a:	de d9       	rcall	.-3140   	; 0x9c8 <EVENT_USB_Host_DeviceEnumerationComplete>
    160c:	14 c0       	rjmp	.+40     	; 0x1636 <USB_Host_ProcessNextHostState+0x242>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    160e:	89 2f       	mov	r24, r25
    1610:	0e 94 84 02 	call	0x508	; 0x508 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1614:	80 91 dd 00 	lds	r24, 0x00DD
    1618:	81 60       	ori	r24, 0x01	; 1
    161a:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    161e:	0e 94 b0 02 	call	0x560	; 0x560 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1622:	b9 d0       	rcall	.+370    	; 0x1796 <USB_ResetInterface>
    1624:	08 c0       	rjmp	.+16     	; 0x1636 <USB_Host_ProcessNextHostState+0x242>
	}
}
    1626:	93 e0       	ldi	r25, 0x03	; 3
    1628:	02 c0       	rjmp	.+4      	; 0x162e <USB_Host_ProcessNextHostState+0x23a>
    162a:	94 e0       	ldi	r25, 0x04	; 4
    162c:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    162e:	80 91 34 01 	lds	r24, 0x0134
    1632:	81 30       	cpi	r24, 0x01	; 1
    1634:	61 f7       	brne	.-40     	; 0x160e <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
    1636:	28 96       	adiw	r28, 0x08	; 8
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	f8 94       	cli
    163c:	de bf       	out	0x3e, r29	; 62
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	cd bf       	out	0x3d, r28	; 61
    1642:	cf 91       	pop	r28
    1644:	df 91       	pop	r29
    1646:	1f 91       	pop	r17
    1648:	0f 91       	pop	r16
    164a:	ef 90       	pop	r14
    164c:	08 95       	ret

0000164e <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    164e:	ef 92       	push	r14
    1650:	0f 93       	push	r16
    1652:	1f 93       	push	r17
    1654:	e8 2f       	mov	r30, r24
    1656:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
    1658:	62 95       	swap	r22
    165a:	66 0f       	add	r22, r22
    165c:	66 0f       	add	r22, r22
    165e:	60 7c       	andi	r22, 0xC0	; 192
    1660:	64 2b       	or	r22, r20
    1662:	2f 70       	andi	r18, 0x0F	; 15
    1664:	62 2b       	or	r22, r18
    1666:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    1668:	72 60       	ori	r23, 0x02	; 2
    166a:	45 c0       	rjmp	.+138    	; 0x16f6 <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    166c:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
    1670:	3e 17       	cp	r19, r30
    1672:	a1 f4       	brne	.+40     	; 0x169c <Pipe_ConfigurePipe+0x4e>
    1674:	88 e0       	ldi	r24, 0x08	; 8
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	03 c0       	rjmp	.+6      	; 0x1682 <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
    167c:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    167e:	88 0f       	add	r24, r24
    1680:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    1682:	80 17       	cp	r24, r16
    1684:	91 07       	cpc	r25, r17
    1686:	10 f4       	brcc	.+4      	; 0x168c <Pipe_ConfigurePipe+0x3e>
    1688:	25 30       	cpi	r18, 0x05	; 5
    168a:	c1 f7       	brne	.-16     	; 0x167c <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    168c:	92 2f       	mov	r25, r18
    168e:	92 95       	swap	r25
    1690:	90 7f       	andi	r25, 0xF0	; 240
    1692:	97 2b       	or	r25, r23
    1694:	56 2f       	mov	r21, r22
    1696:	40 e0       	ldi	r20, 0x00	; 0
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	08 c0       	rjmp	.+16     	; 0x16ac <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    169c:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    16a0:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    16a4:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
    16a8:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    16ac:	91 ff       	sbrs	r25, 1
    16ae:	22 c0       	rjmp	.+68     	; 0x16f4 <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    16b0:	80 91 a9 00 	lds	r24, 0x00A9
    16b4:	8e 7f       	andi	r24, 0xFE	; 254
    16b6:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    16ba:	80 91 ab 00 	lds	r24, 0x00AB
    16be:	8d 7f       	andi	r24, 0xFD	; 253
    16c0:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    16c4:	80 91 a9 00 	lds	r24, 0x00A9
    16c8:	81 60       	ori	r24, 0x01	; 1
    16ca:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    16ce:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
    16d2:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
    16d6:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
    16da:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    16de:	80 91 a9 00 	lds	r24, 0x00A9
    16e2:	80 62       	ori	r24, 0x20	; 32
    16e4:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    16e8:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
    16ec:	87 fd       	sbrc	r24, 7
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <Pipe_ConfigurePipe+0xa6>
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	07 c0       	rjmp	.+14     	; 0x1702 <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    16f4:	3f 5f       	subi	r19, 0xFF	; 255
    16f6:	37 30       	cpi	r19, 0x07	; 7
    16f8:	08 f4       	brcc	.+2      	; 0x16fc <Pipe_ConfigurePipe+0xae>
    16fa:	b8 cf       	rjmp	.-144    	; 0x166c <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    16fc:	e0 93 a7 00 	sts	0x00A7, r30
    1700:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
    1702:	1f 91       	pop	r17
    1704:	0f 91       	pop	r16
    1706:	ef 90       	pop	r14
    1708:	08 95       	ret

0000170a <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
    170a:	10 92 f8 00 	sts	0x00F8, r1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    1714:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    1718:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    171c:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    1720:	80 91 a9 00 	lds	r24, 0x00A9
    1724:	8e 7f       	andi	r24, 0xFE	; 254
    1726:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    172a:	9f 5f       	subi	r25, 0xFF	; 255
    172c:	97 30       	cpi	r25, 0x07	; 7
    172e:	81 f7       	brne	.-32     	; 0x1710 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    1730:	08 95       	ret

00001732 <Pipe_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    1732:	40 91 a2 00 	lds	r20, 0x00A2
    1736:	50 91 a3 00 	lds	r21, 0x00A3
    173a:	28 e8       	ldi	r18, 0x88	; 136
    173c:	33 e1       	ldi	r19, 0x13	; 19
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    173e:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    1742:	80 73       	andi	r24, 0x30	; 48
    1744:	80 31       	cpi	r24, 0x10	; 16
    1746:	29 f4       	brne	.+10     	; 0x1752 <Pipe_WaitUntilReady+0x20>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1748:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
    174c:	80 ff       	sbrs	r24, 0
    174e:	05 c0       	rjmp	.+10     	; 0x175a <Pipe_WaitUntilReady+0x28>
    1750:	20 c0       	rjmp	.+64     	; 0x1792 <Pipe_WaitUntilReady+0x60>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1752:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    1756:	82 fd       	sbrc	r24, 2
    1758:	1c c0       	rjmp	.+56     	; 0x1792 <Pipe_WaitUntilReady+0x60>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    175a:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    175e:	81 ff       	sbrs	r24, 1
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <Pipe_WaitUntilReady+0x34>
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    1766:	80 91 34 01 	lds	r24, 0x0134
    176a:	81 30       	cpi	r24, 0x01	; 1
    176c:	11 f4       	brne	.+4      	; 0x1772 <Pipe_WaitUntilReady+0x40>
    176e:	82 e0       	ldi	r24, 0x02	; 2
    1770:	08 95       	ret
    1772:	80 91 a2 00 	lds	r24, 0x00A2
    1776:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    177a:	84 17       	cp	r24, r20
    177c:	95 07       	cpc	r25, r21
    177e:	f9 f2       	breq	.-66     	; 0x173e <Pipe_WaitUntilReady+0xc>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1780:	21 15       	cp	r18, r1
    1782:	31 05       	cpc	r19, r1
    1784:	11 f4       	brne	.+4      	; 0x178a <Pipe_WaitUntilReady+0x58>
    1786:	83 e0       	ldi	r24, 0x03	; 3
    1788:	08 95       	ret
    178a:	21 50       	subi	r18, 0x01	; 1
    178c:	30 40       	sbci	r19, 0x00	; 0
    178e:	ac 01       	movw	r20, r24
    1790:	d6 cf       	rjmp	.-84     	; 0x173e <Pipe_WaitUntilReady+0xc>
    1792:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
    1794:	08 95       	ret

00001796 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1796:	70 d0       	rcall	.+224    	; 0x1878 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1798:	77 d0       	rcall	.+238    	; 0x1888 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    179a:	80 91 d8 00 	lds	r24, 0x00D8
    179e:	8f 77       	andi	r24, 0x7F	; 127
    17a0:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
    17a4:	80 91 d8 00 	lds	r24, 0x00D8
    17a8:	80 68       	ori	r24, 0x80	; 128
    17aa:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    17ae:	80 91 d8 00 	lds	r24, 0x00D8
    17b2:	8f 7d       	andi	r24, 0xDF	; 223
    17b4:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    17b8:	80 91 d7 00 	lds	r24, 0x00D7
    17bc:	8f 77       	andi	r24, 0x7F	; 127
    17be:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    17c2:	8c e0       	ldi	r24, 0x0C	; 12
    17c4:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    17c6:	8e e0       	ldi	r24, 0x0E	; 14
    17c8:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
    17ca:	09 b4       	in	r0, 0x29	; 41
    17cc:	00 fe       	sbrs	r0, 0
    17ce:	fd cf       	rjmp	.-6      	; 0x17ca <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	80 93 34 01 	sts	0x0134, r24
	USB_Host_ConfigurationNumber = 0;
    17d6:	10 92 2a 01 	sts	0x012A, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    17da:	80 e4       	ldi	r24, 0x40	; 64
    17dc:	80 93 24 01 	sts	0x0124, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    17e0:	80 91 d8 00 	lds	r24, 0x00D8
    17e4:	80 64       	ori	r24, 0x40	; 64
    17e6:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    17ea:	80 91 dd 00 	lds	r24, 0x00DD
    17ee:	81 60       	ori	r24, 0x01	; 1
    17f0:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    17f4:	80 91 dd 00 	lds	r24, 0x00DD
    17f8:	84 60       	ori	r24, 0x04	; 4
    17fa:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
    17fe:	80 91 d7 00 	lds	r24, 0x00D7
    1802:	8f 7e       	andi	r24, 0xEF	; 239
    1804:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
    1808:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
    180a:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
    180c:	80 91 de 00 	lds	r24, 0x00DE
    1810:	81 60       	ori	r24, 0x01	; 1
    1812:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    1816:	80 91 de 00 	lds	r24, 0x00DE
    181a:	84 60       	ori	r24, 0x04	; 4
    181c:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1820:	80 91 e0 00 	lds	r24, 0x00E0
    1824:	8e 7f       	andi	r24, 0xFE	; 254
    1826:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    182a:	80 91 d8 00 	lds	r24, 0x00D8
    182e:	80 61       	ori	r24, 0x10	; 16
    1830:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1834:	08 95       	ret

00001836 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    1836:	e7 ed       	ldi	r30, 0xD7	; 215
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	81 60       	ori	r24, 0x01	; 1
    183e:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	80 93 2b 01 	sts	0x012B, r24

	USB_ResetInterface();
}
    1846:	a7 cf       	rjmp	.-178    	; 0x1796 <USB_ResetInterface>

00001848 <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1848:	17 d0       	rcall	.+46     	; 0x1878 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    184a:	1e d0       	rcall	.+60     	; 0x1888 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    184c:	e0 ee       	ldi	r30, 0xE0	; 224
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	81 60       	ori	r24, 0x01	; 1
    1854:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
    1856:	a8 ed       	ldi	r26, 0xD8	; 216
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	8c 91       	ld	r24, X
    185c:	8f 77       	andi	r24, 0x7F	; 127
    185e:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1860:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
    1862:	e7 ed       	ldi	r30, 0xD7	; 215
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	8e 7f       	andi	r24, 0xFE	; 254
    186a:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
    186c:	8c 91       	ld	r24, X
    186e:	8f 7e       	andi	r24, 0xEF	; 239
    1870:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1872:	10 92 2b 01 	sts	0x012B, r1
}
    1876:	08 95       	ret

00001878 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1878:	e8 ed       	ldi	r30, 0xD8	; 216
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	8c 7f       	andi	r24, 0xFC	; 252
    1880:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    1882:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    1886:	08 95       	ret

00001888 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1888:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    188c:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
    1890:	08 95       	ret

00001892 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1892:	1f 92       	push	r1
    1894:	0f 92       	push	r0
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	0f 92       	push	r0
    189a:	0b b6       	in	r0, 0x3b	; 59
    189c:	0f 92       	push	r0
    189e:	11 24       	eor	r1, r1
    18a0:	2f 93       	push	r18
    18a2:	3f 93       	push	r19
    18a4:	4f 93       	push	r20
    18a6:	5f 93       	push	r21
    18a8:	6f 93       	push	r22
    18aa:	7f 93       	push	r23
    18ac:	8f 93       	push	r24
    18ae:	9f 93       	push	r25
    18b0:	af 93       	push	r26
    18b2:	bf 93       	push	r27
    18b4:	ef 93       	push	r30
    18b6:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    18b8:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    18bc:	85 ff       	sbrs	r24, 5
    18be:	0a c0       	rjmp	.+20     	; 0x18d4 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    18c0:	80 91 a0 00 	lds	r24, 0x00A0
    18c4:	85 ff       	sbrs	r24, 5
    18c6:	06 c0       	rjmp	.+12     	; 0x18d4 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    18c8:	80 91 9f 00 	lds	r24, 0x009F
    18cc:	8f 7d       	andi	r24, 0xDF	; 223
    18ce:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    18d2:	c3 d1       	rcall	.+902    	; 0x1c5a <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    18d4:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    18d8:	81 ff       	sbrs	r24, 1
    18da:	16 c0       	rjmp	.+44     	; 0x1908 <__vector_10+0x76>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    18dc:	80 91 a0 00 	lds	r24, 0x00A0
    18e0:	81 ff       	sbrs	r24, 1
    18e2:	12 c0       	rjmp	.+36     	; 0x1908 <__vector_10+0x76>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    18e4:	80 91 9f 00 	lds	r24, 0x009F
    18e8:	8d 7f       	andi	r24, 0xFD	; 253
    18ea:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    18ee:	80 91 9f 00 	lds	r24, 0x009F
    18f2:	8e 7f       	andi	r24, 0xFE	; 254
    18f4:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    18f8:	80 91 a0 00 	lds	r24, 0x00A0
    18fc:	8d 7f       	andi	r24, 0xFD	; 253
    18fe:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    1902:	0e 94 b0 02 	call	0x560	; 0x560 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1906:	47 df       	rcall	.-370    	; 0x1796 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    1908:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    190c:	81 ff       	sbrs	r24, 1
    190e:	16 c0       	rjmp	.+44     	; 0x193c <__vector_10+0xaa>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    1910:	80 91 de 00 	lds	r24, 0x00DE
    1914:	81 ff       	sbrs	r24, 1
    1916:	12 c0       	rjmp	.+36     	; 0x193c <__vector_10+0xaa>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1918:	80 91 df 00 	lds	r24, 0x00DF
    191c:	8d 7f       	andi	r24, 0xFD	; 253
    191e:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
    1922:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1924:	80 91 dd 00 	lds	r24, 0x00DD
    1928:	81 60       	ori	r24, 0x01	; 1
    192a:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	2e d8       	rcall	.-4004   	; 0x98e <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    1932:	0e 94 b0 02 	call	0x560	; 0x560 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	80 93 34 01 	sts	0x0134, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    193c:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    1940:	80 ff       	sbrs	r24, 0
    1942:	18 c0       	rjmp	.+48     	; 0x1974 <__vector_10+0xe2>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    1944:	80 91 de 00 	lds	r24, 0x00DE
    1948:	80 ff       	sbrs	r24, 0
    194a:	14 c0       	rjmp	.+40     	; 0x1974 <__vector_10+0xe2>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    194c:	80 91 df 00 	lds	r24, 0x00DF
    1950:	8e 7f       	andi	r24, 0xFE	; 254
    1952:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
    1956:	80 91 de 00 	lds	r24, 0x00DE
    195a:	8e 7f       	andi	r24, 0xFE	; 254
    195c:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    1960:	0e 94 b9 02 	call	0x572	; 0x572 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    1964:	80 91 a0 00 	lds	r24, 0x00A0
    1968:	82 60       	ori	r24, 0x02	; 2
    196a:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    196e:	82 e0       	ldi	r24, 0x02	; 2
    1970:	80 93 34 01 	sts	0x0134, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    1974:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    1978:	82 ff       	sbrs	r24, 2
    197a:	10 c0       	rjmp	.+32     	; 0x199c <__vector_10+0x10a>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    197c:	80 91 de 00 	lds	r24, 0x00DE
    1980:	82 ff       	sbrs	r24, 2
    1982:	0c c0       	rjmp	.+24     	; 0x199c <__vector_10+0x10a>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    1984:	80 91 df 00 	lds	r24, 0x00DF
    1988:	8b 7f       	andi	r24, 0xFB	; 251
    198a:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    198e:	82 e0       	ldi	r24, 0x02	; 2
    1990:	60 e0       	ldi	r22, 0x00	; 0
    1992:	0e 94 84 02 	call	0x508	; 0x508 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    1996:	0e 94 b0 02 	call	0x560	; 0x560 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    199a:	fd de       	rcall	.-518    	; 0x1796 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    199c:	ff 91       	pop	r31
    199e:	ef 91       	pop	r30
    19a0:	bf 91       	pop	r27
    19a2:	af 91       	pop	r26
    19a4:	9f 91       	pop	r25
    19a6:	8f 91       	pop	r24
    19a8:	7f 91       	pop	r23
    19aa:	6f 91       	pop	r22
    19ac:	5f 91       	pop	r21
    19ae:	4f 91       	pop	r20
    19b0:	3f 91       	pop	r19
    19b2:	2f 91       	pop	r18
    19b4:	0f 90       	pop	r0
    19b6:	0b be       	out	0x3b, r0	; 59
    19b8:	0f 90       	pop	r0
    19ba:	0f be       	out	0x3f, r0	; 63
    19bc:	0f 90       	pop	r0
    19be:	1f 90       	pop	r1
    19c0:	18 95       	reti

000019c2 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    19c2:	bf 92       	push	r11
    19c4:	cf 92       	push	r12
    19c6:	df 92       	push	r13
    19c8:	ef 92       	push	r14
    19ca:	ff 92       	push	r15
    19cc:	0f 93       	push	r16
    19ce:	1f 93       	push	r17
    19d0:	cf 93       	push	r28
    19d2:	df 93       	push	r29
    19d4:	18 2f       	mov	r17, r24
    19d6:	09 2f       	mov	r16, r25
    19d8:	7b 01       	movw	r14, r22
    19da:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    19dc:	80 91 aa 00 	lds	r24, 0x00AA
    19e0:	8f 7c       	andi	r24, 0xCF	; 207
    19e2:	80 61       	ori	r24, 0x10	; 16
    19e4:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    19e8:	a4 de       	rcall	.-696    	; 0x1732 <Pipe_WaitUntilReady>
    19ea:	b8 2e       	mov	r11, r24
    19ec:	88 23       	and	r24, r24
    19ee:	a9 f5       	brne	.+106    	; 0x1a5a <Pipe_Read_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    19f0:	81 2f       	mov	r24, r17
    19f2:	90 2f       	mov	r25, r16
    19f4:	9c 01       	movw	r18, r24
    19f6:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    19f8:	c1 14       	cp	r12, r1
    19fa:	d1 04       	cpc	r13, r1
    19fc:	39 f0       	breq	.+14     	; 0x1a0c <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
    19fe:	f6 01       	movw	r30, r12
    1a00:	80 81       	ld	r24, Z
    1a02:	91 81       	ldd	r25, Z+1	; 0x01
    1a04:	e8 1a       	sub	r14, r24
    1a06:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1a08:	c8 0f       	add	r28, r24
    1a0a:	d9 1f       	adc	r29, r25
    1a0c:	00 e0       	ldi	r16, 0x00	; 0
    1a0e:	10 e0       	ldi	r17, 0x00	; 0
    1a10:	21 c0       	rjmp	.+66     	; 0x1a54 <Pipe_Read_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1a12:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1a16:	85 fd       	sbrc	r24, 5
    1a18:	15 c0       	rjmp	.+42     	; 0x1a44 <Pipe_Read_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1a1a:	80 91 a6 00 	lds	r24, 0x00A6
    1a1e:	8e 77       	andi	r24, 0x7E	; 126
    1a20:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    1a24:	c1 14       	cp	r12, r1
    1a26:	d1 04       	cpc	r13, r1
    1a28:	49 f0       	breq	.+18     	; 0x1a3c <Pipe_Read_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
    1a2a:	f6 01       	movw	r30, r12
    1a2c:	80 81       	ld	r24, Z
    1a2e:	91 81       	ldd	r25, Z+1	; 0x01
    1a30:	80 0f       	add	r24, r16
    1a32:	91 1f       	adc	r25, r17
    1a34:	91 83       	std	Z+1, r25	; 0x01
    1a36:	80 83       	st	Z, r24
    1a38:	84 e0       	ldi	r24, 0x04	; 4
    1a3a:	10 c0       	rjmp	.+32     	; 0x1a5c <Pipe_Read_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1a3c:	7a de       	rcall	.-780    	; 0x1732 <Pipe_WaitUntilReady>
    1a3e:	88 23       	and	r24, r24
    1a40:	49 f0       	breq	.+18     	; 0x1a54 <Pipe_Read_Stream_LE+0x92>
    1a42:	0c c0       	rjmp	.+24     	; 0x1a5c <Pipe_Read_Stream_LE+0x9a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1a44:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1a48:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1a4a:	08 94       	sec
    1a4c:	e1 08       	sbc	r14, r1
    1a4e:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    1a50:	0f 5f       	subi	r16, 0xFF	; 255
    1a52:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
    1a54:	e1 14       	cp	r14, r1
    1a56:	f1 04       	cpc	r15, r1
    1a58:	e1 f6       	brne	.-72     	; 0x1a12 <Pipe_Read_Stream_LE+0x50>
    1a5a:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1a5c:	df 91       	pop	r29
    1a5e:	cf 91       	pop	r28
    1a60:	1f 91       	pop	r17
    1a62:	0f 91       	pop	r16
    1a64:	ff 90       	pop	r15
    1a66:	ef 90       	pop	r14
    1a68:	df 90       	pop	r13
    1a6a:	cf 90       	pop	r12
    1a6c:	bf 90       	pop	r11
    1a6e:	08 95       	ret

00001a70 <Pipe_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1a70:	bf 92       	push	r11
    1a72:	cf 92       	push	r12
    1a74:	df 92       	push	r13
    1a76:	ef 92       	push	r14
    1a78:	ff 92       	push	r15
    1a7a:	0f 93       	push	r16
    1a7c:	1f 93       	push	r17
    1a7e:	cf 93       	push	r28
    1a80:	df 93       	push	r29
    1a82:	18 2f       	mov	r17, r24
    1a84:	09 2f       	mov	r16, r25
    1a86:	7b 01       	movw	r14, r22
    1a88:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1a8a:	80 91 aa 00 	lds	r24, 0x00AA
    1a8e:	8f 7c       	andi	r24, 0xCF	; 207
    1a90:	80 62       	ori	r24, 0x20	; 32
    1a92:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1a96:	4d de       	rcall	.-870    	; 0x1732 <Pipe_WaitUntilReady>
    1a98:	b8 2e       	mov	r11, r24
    1a9a:	88 23       	and	r24, r24
    1a9c:	a9 f5       	brne	.+106    	; 0x1b08 <Pipe_Write_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1a9e:	81 2f       	mov	r24, r17
    1aa0:	90 2f       	mov	r25, r16
    1aa2:	9c 01       	movw	r18, r24
    1aa4:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1aa6:	c1 14       	cp	r12, r1
    1aa8:	d1 04       	cpc	r13, r1
    1aaa:	39 f0       	breq	.+14     	; 0x1aba <Pipe_Write_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
    1aac:	f6 01       	movw	r30, r12
    1aae:	80 81       	ld	r24, Z
    1ab0:	91 81       	ldd	r25, Z+1	; 0x01
    1ab2:	e8 1a       	sub	r14, r24
    1ab4:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1ab6:	c8 0f       	add	r28, r24
    1ab8:	d9 1f       	adc	r29, r25
    1aba:	00 e0       	ldi	r16, 0x00	; 0
    1abc:	10 e0       	ldi	r17, 0x00	; 0
    1abe:	21 c0       	rjmp	.+66     	; 0x1b02 <Pipe_Write_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1ac0:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1ac4:	85 fd       	sbrc	r24, 5
    1ac6:	15 c0       	rjmp	.+42     	; 0x1af2 <Pipe_Write_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1ac8:	80 91 a6 00 	lds	r24, 0x00A6
    1acc:	8b 77       	andi	r24, 0x7B	; 123
    1ace:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    1ad2:	c1 14       	cp	r12, r1
    1ad4:	d1 04       	cpc	r13, r1
    1ad6:	49 f0       	breq	.+18     	; 0x1aea <Pipe_Write_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
    1ad8:	f6 01       	movw	r30, r12
    1ada:	80 81       	ld	r24, Z
    1adc:	91 81       	ldd	r25, Z+1	; 0x01
    1ade:	80 0f       	add	r24, r16
    1ae0:	91 1f       	adc	r25, r17
    1ae2:	91 83       	std	Z+1, r25	; 0x01
    1ae4:	80 83       	st	Z, r24
    1ae6:	84 e0       	ldi	r24, 0x04	; 4
    1ae8:	10 c0       	rjmp	.+32     	; 0x1b0a <Pipe_Write_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1aea:	23 de       	rcall	.-954    	; 0x1732 <Pipe_WaitUntilReady>
    1aec:	88 23       	and	r24, r24
    1aee:	49 f0       	breq	.+18     	; 0x1b02 <Pipe_Write_Stream_LE+0x92>
    1af0:	0c c0       	rjmp	.+24     	; 0x1b0a <Pipe_Write_Stream_LE+0x9a>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1af2:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1af4:	80 93 af 00 	sts	0x00AF, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1af8:	08 94       	sec
    1afa:	e1 08       	sbc	r14, r1
    1afc:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    1afe:	0f 5f       	subi	r16, 0xFF	; 255
    1b00:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
    1b02:	e1 14       	cp	r14, r1
    1b04:	f1 04       	cpc	r15, r1
    1b06:	e1 f6       	brne	.-72     	; 0x1ac0 <Pipe_Write_Stream_LE+0x50>
    1b08:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1b0a:	df 91       	pop	r29
    1b0c:	cf 91       	pop	r28
    1b0e:	1f 91       	pop	r17
    1b10:	0f 91       	pop	r16
    1b12:	ff 90       	pop	r15
    1b14:	ef 90       	pop	r14
    1b16:	df 90       	pop	r13
    1b18:	cf 90       	pop	r12
    1b1a:	bf 90       	pop	r11
    1b1c:	08 95       	ret

00001b1e <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1b1e:	af 92       	push	r10
    1b20:	bf 92       	push	r11
    1b22:	cf 92       	push	r12
    1b24:	df 92       	push	r13
    1b26:	ef 92       	push	r14
    1b28:	ff 92       	push	r15
    1b2a:	0f 93       	push	r16
    1b2c:	1f 93       	push	r17
    1b2e:	cf 93       	push	r28
    1b30:	df 93       	push	r29
    1b32:	7c 01       	movw	r14, r24
    1b34:	eb 01       	movw	r28, r22
    1b36:	6a 01       	movw	r12, r20
    1b38:	24 c0       	rjmp	.+72     	; 0x1b82 <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1b3a:	e8 81       	ld	r30, Y
    1b3c:	f9 81       	ldd	r31, Y+1	; 0x01
    1b3e:	be 2e       	mov	r11, r30
    1b40:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1b42:	80 81       	ld	r24, Z
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	98 01       	movw	r18, r16
    1b48:	80 17       	cp	r24, r16
    1b4a:	91 07       	cpc	r25, r17
    1b4c:	08 f4       	brcc	.+2      	; 0x1b50 <USB_GetNextDescriptorComp+0x32>
    1b4e:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1b50:	e2 0f       	add	r30, r18
    1b52:	f3 1f       	adc	r31, r19
    1b54:	f9 83       	std	Y+1, r31	; 0x01
    1b56:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
    1b58:	f7 01       	movw	r30, r14
    1b5a:	80 81       	ld	r24, Z
    1b5c:	91 81       	ldd	r25, Z+1	; 0x01
    1b5e:	82 1b       	sub	r24, r18
    1b60:	93 0b       	sbc	r25, r19
    1b62:	91 83       	std	Z+1, r25	; 0x01
    1b64:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1b66:	88 81       	ld	r24, Y
    1b68:	99 81       	ldd	r25, Y+1	; 0x01
    1b6a:	f6 01       	movw	r30, r12
    1b6c:	09 95       	icall
    1b6e:	82 30       	cpi	r24, 0x02	; 2
    1b70:	41 f0       	breq	.+16     	; 0x1b82 <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1b72:	81 30       	cpi	r24, 0x01	; 1
    1b74:	69 f4       	brne	.+26     	; 0x1b90 <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
    1b76:	b8 82       	st	Y, r11
    1b78:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
    1b7a:	f7 01       	movw	r30, r14
    1b7c:	11 83       	std	Z+1, r17	; 0x01
    1b7e:	00 83       	st	Z, r16
    1b80:	07 c0       	rjmp	.+14     	; 0x1b90 <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    1b82:	f7 01       	movw	r30, r14
    1b84:	00 81       	ld	r16, Z
    1b86:	11 81       	ldd	r17, Z+1	; 0x01
    1b88:	01 15       	cp	r16, r1
    1b8a:	11 05       	cpc	r17, r1
    1b8c:	b1 f6       	brne	.-84     	; 0x1b3a <USB_GetNextDescriptorComp+0x1c>
    1b8e:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
    1b90:	df 91       	pop	r29
    1b92:	cf 91       	pop	r28
    1b94:	1f 91       	pop	r17
    1b96:	0f 91       	pop	r16
    1b98:	ff 90       	pop	r15
    1b9a:	ef 90       	pop	r14
    1b9c:	df 90       	pop	r13
    1b9e:	cf 90       	pop	r12
    1ba0:	bf 90       	pop	r11
    1ba2:	af 90       	pop	r10
    1ba4:	08 95       	ret

00001ba6 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    1ba6:	cf 92       	push	r12
    1ba8:	df 92       	push	r13
    1baa:	ef 92       	push	r14
    1bac:	ff 92       	push	r15
    1bae:	0f 93       	push	r16
    1bb0:	1f 93       	push	r17
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    1bba:	29 97       	sbiw	r28, 0x09	; 9
    1bbc:	0f b6       	in	r0, 0x3f	; 63
    1bbe:	f8 94       	cli
    1bc0:	de bf       	out	0x3e, r29	; 62
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	cd bf       	out	0x3d, r28	; 61
    1bc6:	6b 01       	movw	r12, r22
    1bc8:	8a 01       	movw	r16, r20
    1bca:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1bcc:	90 e8       	ldi	r25, 0x80	; 128
    1bce:	90 93 2c 01 	sts	0x012C, r25
    1bd2:	96 e0       	ldi	r25, 0x06	; 6
    1bd4:	90 93 2d 01 	sts	0x012D, r25
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	01 97       	sbiw	r24, 0x01	; 1
    1bdc:	92 60       	ori	r25, 0x02	; 2
    1bde:	90 93 2f 01 	sts	0x012F, r25
    1be2:	80 93 2e 01 	sts	0x012E, r24
    1be6:	10 92 31 01 	sts	0x0131, r1
    1bea:	10 92 30 01 	sts	0x0130, r1
    1bee:	89 e0       	ldi	r24, 0x09	; 9
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	90 93 33 01 	sts	0x0133, r25
    1bf6:	80 93 32 01 	sts	0x0132, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1bfa:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    1bfe:	ce 01       	movw	r24, r28
    1c00:	01 96       	adiw	r24, 0x01	; 1
    1c02:	55 d0       	rcall	.+170    	; 0x1cae <USB_Host_SendControlRequest>
    1c04:	28 2f       	mov	r18, r24
    1c06:	88 23       	and	r24, r24
    1c08:	c1 f4       	brne	.+48     	; 0x1c3a <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0e:	f6 01       	movw	r30, r12
    1c10:	91 83       	std	Z+1, r25	; 0x01
    1c12:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    1c14:	e8 16       	cp	r14, r24
    1c16:	f9 06       	cpc	r15, r25
    1c18:	10 f4       	brcc	.+4      	; 0x1c1e <USB_Host_GetDeviceConfigDescriptor+0x78>
    1c1a:	25 e0       	ldi	r18, 0x05	; 5
    1c1c:	0e c0       	rjmp	.+28     	; 0x1c3a <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    1c1e:	90 93 33 01 	sts	0x0133, r25
    1c22:	80 93 32 01 	sts	0x0132, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1c26:	c8 01       	movw	r24, r16
    1c28:	42 d0       	rcall	.+132    	; 0x1cae <USB_Host_SendControlRequest>
    1c2a:	28 2f       	mov	r18, r24
    1c2c:	88 23       	and	r24, r24
    1c2e:	29 f4       	brne	.+10     	; 0x1c3a <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1c30:	f8 01       	movw	r30, r16
    1c32:	81 81       	ldd	r24, Z+1	; 0x01
    1c34:	82 30       	cpi	r24, 0x02	; 2
    1c36:	09 f0       	breq	.+2      	; 0x1c3a <USB_Host_GetDeviceConfigDescriptor+0x94>
    1c38:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    1c3a:	82 2f       	mov	r24, r18
    1c3c:	29 96       	adiw	r28, 0x09	; 9
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	f8 94       	cli
    1c42:	de bf       	out	0x3e, r29	; 62
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	cd bf       	out	0x3d, r28	; 61
    1c48:	cf 91       	pop	r28
    1c4a:	df 91       	pop	r29
    1c4c:	1f 91       	pop	r17
    1c4e:	0f 91       	pop	r16
    1c50:	ff 90       	pop	r15
    1c52:	ef 90       	pop	r14
    1c54:	df 90       	pop	r13
    1c56:	cf 90       	pop	r12
    1c58:	08 95       	ret

00001c5a <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1c5a:	08 95       	ret

00001c5c <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1c5c:	1f 93       	push	r17
    1c5e:	cf 93       	push	r28
    1c60:	df 93       	push	r29
    1c62:	18 2f       	mov	r17, r24
    1c64:	c8 ee       	ldi	r28, 0xE8	; 232
    1c66:	d3 e0       	ldi	r29, 0x03	; 3
    1c68:	09 c0       	rjmp	.+18     	; 0x1c7c <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	26 db       	rcall	.-2484   	; 0x12ba <USB_Host_WaitMS>
    1c6e:	88 23       	and	r24, r24
    1c70:	d1 f4       	brne	.+52     	; 0x1ca6 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1c72:	20 97       	sbiw	r28, 0x00	; 0
    1c74:	11 f4       	brne	.+4      	; 0x1c7a <USB_Host_WaitForIOS+0x1e>
    1c76:	84 e0       	ldi	r24, 0x04	; 4
    1c78:	16 c0       	rjmp	.+44     	; 0x1ca6 <USB_Host_WaitForIOS+0x4a>
    1c7a:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1c7c:	11 23       	and	r17, r17
    1c7e:	29 f4       	brne	.+10     	; 0x1c8a <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1c80:	80 91 a6 00 	lds	r24, 0x00A6
    1c84:	83 ff       	sbrs	r24, 3
    1c86:	f1 cf       	rjmp	.-30     	; 0x1c6a <USB_Host_WaitForIOS+0xe>
    1c88:	0d c0       	rjmp	.+26     	; 0x1ca4 <USB_Host_WaitForIOS+0x48>
    1c8a:	11 30       	cpi	r17, 0x01	; 1
    1c8c:	29 f4       	brne	.+10     	; 0x1c98 <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1c8e:	80 91 a6 00 	lds	r24, 0x00A6
    1c92:	80 ff       	sbrs	r24, 0
    1c94:	ea cf       	rjmp	.-44     	; 0x1c6a <USB_Host_WaitForIOS+0xe>
    1c96:	06 c0       	rjmp	.+12     	; 0x1ca4 <USB_Host_WaitForIOS+0x48>
    1c98:	12 30       	cpi	r17, 0x02	; 2
    1c9a:	39 f7       	brne	.-50     	; 0x1c6a <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1c9c:	80 91 a6 00 	lds	r24, 0x00A6
    1ca0:	82 ff       	sbrs	r24, 2
    1ca2:	e3 cf       	rjmp	.-58     	; 0x1c6a <USB_Host_WaitForIOS+0xe>
    1ca4:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
    1ca6:	df 91       	pop	r29
    1ca8:	cf 91       	pop	r28
    1caa:	1f 91       	pop	r17
    1cac:	08 95       	ret

00001cae <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1cae:	ff 92       	push	r15
    1cb0:	0f 93       	push	r16
    1cb2:	1f 93       	push	r17
    1cb4:	cf 93       	push	r28
    1cb6:	df 93       	push	r29
    1cb8:	18 2f       	mov	r17, r24
    1cba:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1cbc:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1cc0:	c0 91 32 01 	lds	r28, 0x0132
    1cc4:	d0 91 33 01 	lds	r29, 0x0133
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1cc8:	80 91 9e 00 	lds	r24, 0x009E
    1ccc:	81 60       	ori	r24, 0x01	; 1
    1cce:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	f2 da       	rcall	.-2588   	; 0x12ba <USB_Host_WaitMS>
    1cd6:	98 2f       	mov	r25, r24
    1cd8:	88 23       	and	r24, r24
    1cda:	09 f0       	breq	.+2      	; 0x1cde <USB_Host_SendControlRequest+0x30>
    1cdc:	ee c0       	rjmp	.+476    	; 0x1eba <USB_Host_SendControlRequest+0x20c>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1cde:	80 91 aa 00 	lds	r24, 0x00AA
    1ce2:	8f 7c       	andi	r24, 0xCF	; 207
    1ce4:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1ce8:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1cec:	80 91 a6 00 	lds	r24, 0x00A6
    1cf0:	8f 7e       	andi	r24, 0xEF	; 239
    1cf2:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1cf6:	80 91 a9 00 	lds	r24, 0x00A9
    1cfa:	8f 7b       	andi	r24, 0xBF	; 191
    1cfc:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearError();

	Pipe_Unfreeze();

	Pipe_Write_8(USB_ControlRequest.bmRequestType);
    1d00:	80 91 2c 01 	lds	r24, 0x012C
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1d04:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
    1d08:	80 91 2d 01 	lds	r24, 0x012D
    1d0c:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
    1d10:	80 91 2e 01 	lds	r24, 0x012E
    1d14:	90 91 2f 01 	lds	r25, 0x012F
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    1d18:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    1d1c:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
    1d20:	80 91 30 01 	lds	r24, 0x0130
    1d24:	90 91 31 01 	lds	r25, 0x0131
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    1d28:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    1d2c:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
    1d30:	80 91 32 01 	lds	r24, 0x0132
    1d34:	90 91 33 01 	lds	r25, 0x0133
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    1d38:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    1d3c:	90 93 af 00 	sts	0x00AF, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1d40:	80 91 a6 00 	lds	r24, 0x00A6
    1d44:	87 77       	andi	r24, 0x77	; 119
    1d46:	80 93 a6 00 	sts	0x00A6, r24

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	87 df       	rcall	.-242    	; 0x1c5c <USB_Host_WaitForIOS>
    1d4e:	98 2f       	mov	r25, r24
    1d50:	88 23       	and	r24, r24
    1d52:	09 f0       	breq	.+2      	; 0x1d56 <USB_Host_SendControlRequest+0xa8>
    1d54:	b2 c0       	rjmp	.+356    	; 0x1eba <USB_Host_SendControlRequest+0x20c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1d56:	80 91 a9 00 	lds	r24, 0x00A9
    1d5a:	80 64       	ori	r24, 0x40	; 64
    1d5c:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	ab da       	rcall	.-2730   	; 0x12ba <USB_Host_WaitMS>
    1d64:	98 2f       	mov	r25, r24
    1d66:	88 23       	and	r24, r24
    1d68:	09 f0       	breq	.+2      	; 0x1d6c <USB_Host_SendControlRequest+0xbe>
    1d6a:	a7 c0       	rjmp	.+334    	; 0x1eba <USB_Host_SendControlRequest+0x20c>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
    1d6c:	21 2f       	mov	r18, r17
    1d6e:	30 2f       	mov	r19, r16
    1d70:	c9 01       	movw	r24, r18
    1d72:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1d74:	80 91 2c 01 	lds	r24, 0x012C
    1d78:	87 ff       	sbrs	r24, 7
    1d7a:	52 c0       	rjmp	.+164    	; 0x1e20 <USB_Host_SendControlRequest+0x172>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1d7c:	80 91 aa 00 	lds	r24, 0x00AA
    1d80:	8f 7c       	andi	r24, 0xCF	; 207
    1d82:	80 61       	ori	r24, 0x10	; 16
    1d84:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1d88:	01 15       	cp	r16, r1
    1d8a:	11 05       	cpc	r17, r1
    1d8c:	69 f5       	brne	.+90     	; 0x1de8 <USB_Host_SendControlRequest+0x13a>
    1d8e:	2e c0       	rjmp	.+92     	; 0x1dec <USB_Host_SendControlRequest+0x13e>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1d90:	80 91 a9 00 	lds	r24, 0x00A9
    1d94:	8f 7b       	andi	r24, 0xBF	; 191
    1d96:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	5f df       	rcall	.-322    	; 0x1c5c <USB_Host_WaitForIOS>
    1d9e:	98 2f       	mov	r25, r24
    1da0:	88 23       	and	r24, r24
    1da2:	09 f0       	breq	.+2      	; 0x1da6 <USB_Host_SendControlRequest+0xf8>
    1da4:	8a c0       	rjmp	.+276    	; 0x1eba <USB_Host_SendControlRequest+0x20c>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1da6:	80 91 f6 00 	lds	r24, 0x00F6
    1daa:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    1dae:	89 2b       	or	r24, r25
    1db0:	49 f4       	brne	.+18     	; 0x1dc4 <USB_Host_SendControlRequest+0x116>
    1db2:	c0 e0       	ldi	r28, 0x00	; 0
    1db4:	d0 e0       	ldi	r29, 0x00	; 0
    1db6:	06 c0       	rjmp	.+12     	; 0x1dc4 <USB_Host_SendControlRequest+0x116>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1db8:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    1dbc:	f8 01       	movw	r30, r16
    1dbe:	81 93       	st	Z+, r24
    1dc0:	8f 01       	movw	r16, r30
					DataLen--;
    1dc2:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1dc4:	80 91 f6 00 	lds	r24, 0x00F6
    1dc8:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1dcc:	89 2b       	or	r24, r25
    1dce:	11 f0       	breq	.+4      	; 0x1dd4 <USB_Host_SendControlRequest+0x126>
    1dd0:	20 97       	sbiw	r28, 0x00	; 0
    1dd2:	91 f7       	brne	.-28     	; 0x1db8 <USB_Host_SendControlRequest+0x10a>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1dd4:	80 91 a9 00 	lds	r24, 0x00A9
    1dd8:	80 64       	ori	r24, 0x40	; 64
    1dda:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1dde:	80 91 a6 00 	lds	r24, 0x00A6
    1de2:	8e 77       	andi	r24, 0x7E	; 126
    1de4:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1de8:	20 97       	sbiw	r28, 0x00	; 0
    1dea:	91 f6       	brne	.-92     	; 0x1d90 <USB_Host_SendControlRequest+0xe2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1dec:	80 91 aa 00 	lds	r24, 0x00AA
    1df0:	8f 7c       	andi	r24, 0xCF	; 207
    1df2:	80 62       	ori	r24, 0x20	; 32
    1df4:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1df8:	80 91 a9 00 	lds	r24, 0x00A9
    1dfc:	8f 7b       	andi	r24, 0xBF	; 191
    1dfe:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1e02:	82 e0       	ldi	r24, 0x02	; 2
    1e04:	2b df       	rcall	.-426    	; 0x1c5c <USB_Host_WaitForIOS>
    1e06:	98 2f       	mov	r25, r24
    1e08:	88 23       	and	r24, r24
    1e0a:	09 f0       	breq	.+2      	; 0x1e0e <USB_Host_SendControlRequest+0x160>
    1e0c:	56 c0       	rjmp	.+172    	; 0x1eba <USB_Host_SendControlRequest+0x20c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1e0e:	80 91 a6 00 	lds	r24, 0x00A6
    1e12:	8b 77       	andi	r24, 0x7B	; 123
    1e14:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1e18:	82 e0       	ldi	r24, 0x02	; 2
    1e1a:	20 df       	rcall	.-448    	; 0x1c5c <USB_Host_WaitForIOS>
    1e1c:	98 2f       	mov	r25, r24
    1e1e:	4d c0       	rjmp	.+154    	; 0x1eba <USB_Host_SendControlRequest+0x20c>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    1e20:	01 15       	cp	r16, r1
    1e22:	11 05       	cpc	r17, r1
    1e24:	a9 f1       	breq	.+106    	; 0x1e90 <USB_Host_SendControlRequest+0x1e2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1e26:	80 91 aa 00 	lds	r24, 0x00AA
    1e2a:	8f 7c       	andi	r24, 0xCF	; 207
    1e2c:	80 62       	ori	r24, 0x20	; 32
    1e2e:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1e32:	80 91 a9 00 	lds	r24, 0x00A9
    1e36:	8f 7b       	andi	r24, 0xBF	; 191
    1e38:	80 93 a9 00 	sts	0x00A9, r24
    1e3c:	1d c0       	rjmp	.+58     	; 0x1e78 <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1e3e:	82 e0       	ldi	r24, 0x02	; 2
    1e40:	0d df       	rcall	.-486    	; 0x1c5c <USB_Host_WaitForIOS>
    1e42:	98 2f       	mov	r25, r24
    1e44:	88 23       	and	r24, r24
    1e46:	c9 f5       	brne	.+114    	; 0x1eba <USB_Host_SendControlRequest+0x20c>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1e48:	80 91 24 01 	lds	r24, 0x0124
    1e4c:	28 2f       	mov	r18, r24
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	07 c0       	rjmp	.+14     	; 0x1e60 <USB_Host_SendControlRequest+0x1b2>
				{
					Pipe_Write_8(*(DataStream++));
    1e52:	f8 01       	movw	r30, r16
    1e54:	81 91       	ld	r24, Z+
    1e56:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1e58:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1e5c:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1e5e:	39 f0       	breq	.+14     	; 0x1e6e <USB_Host_SendControlRequest+0x1c0>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1e60:	80 91 f6 00 	lds	r24, 0x00F6
    1e64:	90 91 f7 00 	lds	r25, 0x00F7
    1e68:	82 17       	cp	r24, r18
    1e6a:	93 07       	cpc	r25, r19
    1e6c:	90 f3       	brcs	.-28     	; 0x1e52 <USB_Host_SendControlRequest+0x1a4>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1e6e:	80 91 a6 00 	lds	r24, 0x00A6
    1e72:	8b 77       	andi	r24, 0x7B	; 123
    1e74:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1e78:	20 97       	sbiw	r28, 0x00	; 0
    1e7a:	09 f7       	brne	.-62     	; 0x1e3e <USB_Host_SendControlRequest+0x190>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1e7c:	82 e0       	ldi	r24, 0x02	; 2
    1e7e:	ee de       	rcall	.-548    	; 0x1c5c <USB_Host_WaitForIOS>
    1e80:	98 2f       	mov	r25, r24
    1e82:	88 23       	and	r24, r24
    1e84:	d1 f4       	brne	.+52     	; 0x1eba <USB_Host_SendControlRequest+0x20c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1e86:	80 91 a9 00 	lds	r24, 0x00A9
    1e8a:	80 64       	ori	r24, 0x40	; 64
    1e8c:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1e90:	80 91 aa 00 	lds	r24, 0x00AA
    1e94:	8f 7c       	andi	r24, 0xCF	; 207
    1e96:	80 61       	ori	r24, 0x10	; 16
    1e98:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1e9c:	80 91 a9 00 	lds	r24, 0x00A9
    1ea0:	8f 7b       	andi	r24, 0xBF	; 191
    1ea2:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	d9 de       	rcall	.-590    	; 0x1c5c <USB_Host_WaitForIOS>
    1eaa:	98 2f       	mov	r25, r24
    1eac:	88 23       	and	r24, r24
    1eae:	29 f4       	brne	.+10     	; 0x1eba <USB_Host_SendControlRequest+0x20c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1eb0:	80 91 a6 00 	lds	r24, 0x00A6
    1eb4:	8e 77       	andi	r24, 0x7E	; 126
    1eb6:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1eba:	80 91 a9 00 	lds	r24, 0x00A9
    1ebe:	80 64       	ori	r24, 0x40	; 64
    1ec0:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    1ec4:	f0 fc       	sbrc	r15, 0
    1ec6:	05 c0       	rjmp	.+10     	; 0x1ed2 <USB_Host_SendControlRequest+0x224>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1ec8:	80 91 9e 00 	lds	r24, 0x009E
    1ecc:	8e 7f       	andi	r24, 0xFE	; 254
    1ece:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    1ed8:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1edc:	89 2f       	mov	r24, r25
    1ede:	df 91       	pop	r29
    1ee0:	cf 91       	pop	r28
    1ee2:	1f 91       	pop	r17
    1ee4:	0f 91       	pop	r16
    1ee6:	ff 90       	pop	r15
    1ee8:	08 95       	ret

00001eea <USB_Host_ClearPipeStall>:
	return USB_Host_SendControlRequest(FeatureStatus);
}

uint8_t USB_Host_ClearPipeStall(const uint8_t EndpointAddress)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1eea:	92 e0       	ldi	r25, 0x02	; 2
    1eec:	90 93 2c 01 	sts	0x012C, r25
    1ef0:	91 e0       	ldi	r25, 0x01	; 1
    1ef2:	90 93 2d 01 	sts	0x012D, r25
    1ef6:	10 92 2f 01 	sts	0x012F, r1
    1efa:	10 92 2e 01 	sts	0x012E, r1
    1efe:	80 93 30 01 	sts	0x0130, r24
    1f02:	10 92 31 01 	sts	0x0131, r1
    1f06:	10 92 33 01 	sts	0x0133, r1
    1f0a:	10 92 32 01 	sts	0x0132, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1f0e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	90 e0       	ldi	r25, 0x00	; 0
}
    1f16:	cb ce       	rjmp	.-618    	; 0x1cae <USB_Host_SendControlRequest>

00001f18 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1f18:	1f 93       	push	r17
    1f1a:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1f1c:	10 92 2c 01 	sts	0x012C, r1
    1f20:	89 e0       	ldi	r24, 0x09	; 9
    1f22:	80 93 2d 01 	sts	0x012D, r24
    1f26:	10 93 2e 01 	sts	0x012E, r17
    1f2a:	10 92 2f 01 	sts	0x012F, r1
    1f2e:	10 92 31 01 	sts	0x0131, r1
    1f32:	10 92 30 01 	sts	0x0130, r1
    1f36:	10 92 33 01 	sts	0x0133, r1
    1f3a:	10 92 32 01 	sts	0x0132, r1
    1f3e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	b3 de       	rcall	.-666    	; 0x1cae <USB_Host_SendControlRequest>
    1f48:	88 23       	and	r24, r24
    1f4a:	49 f4       	brne	.+18     	; 0x1f5e <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1f4c:	10 93 2a 01 	sts	0x012A, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1f50:	11 23       	and	r17, r17
    1f52:	11 f4       	brne	.+4      	; 0x1f58 <USB_Host_SetDeviceConfiguration+0x40>
    1f54:	9a e0       	ldi	r25, 0x0A	; 10
    1f56:	01 c0       	rjmp	.+2      	; 0x1f5a <USB_Host_SetDeviceConfiguration+0x42>
    1f58:	9b e0       	ldi	r25, 0x0B	; 11
    1f5a:	90 93 34 01 	sts	0x0134, r25
	}

	return ErrorCode;
}
    1f5e:	1f 91       	pop	r17
    1f60:	08 95       	ret

00001f62 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1f62:	ff 92       	push	r15
    1f64:	0f 93       	push	r16
    1f66:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1f68:	07 ea       	ldi	r16, 0xA7	; 167
    1f6a:	10 e0       	ldi	r17, 0x00	; 0
    1f6c:	f8 01       	movw	r30, r16
    1f6e:	f0 80       	ld	r15, Z
    1f70:	f7 e0       	ldi	r31, 0x07	; 7
    1f72:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1f74:	f8 01       	movw	r30, r16
    1f76:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1f78:	3d da       	rcall	.-2950   	; 0x13f4 <USB_Host_ProcessNextHostState>
    1f7a:	f8 01       	movw	r30, r16
    1f7c:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1f7e:	1f 91       	pop	r17
    1f80:	0f 91       	pop	r16
    1f82:	ff 90       	pop	r15
    1f84:	08 95       	ret

00001f86 <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    1f86:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1f88:	80 91 c8 00 	lds	r24, 0x00C8
    1f8c:	85 ff       	sbrs	r24, 5
    1f8e:	fc cf       	rjmp	.-8      	; 0x1f88 <Serial_putchar+0x2>
				UDR1 = DataByte;
    1f90:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	08 95       	ret

00001f9a <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1f9a:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1f9e:	87 fd       	sbrc	r24, 7
    1fa0:	03 c0       	rjmp	.+6      	; 0x1fa8 <Serial_getchar+0xe>
    1fa2:	2e ef       	ldi	r18, 0xFE	; 254
    1fa4:	3f ef       	ldi	r19, 0xFF	; 255
    1fa6:	0b c0       	rjmp	.+22     	; 0x1fbe <Serial_getchar+0x24>
    1fa8:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1fac:	87 fd       	sbrc	r24, 7
    1fae:	03 c0       	rjmp	.+6      	; 0x1fb6 <Serial_getchar+0x1c>
    1fb0:	2f ef       	ldi	r18, 0xFF	; 255
    1fb2:	3f ef       	ldi	r19, 0xFF	; 255
    1fb4:	04 c0       	rjmp	.+8      	; 0x1fbe <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    1fb6:	80 91 ce 00 	lds	r24, 0x00CE
    1fba:	28 2f       	mov	r18, r24
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    1fbe:	c9 01       	movw	r24, r18
    1fc0:	08 95       	ret

00001fc2 <__mulsi3>:
    1fc2:	62 9f       	mul	r22, r18
    1fc4:	d0 01       	movw	r26, r0
    1fc6:	73 9f       	mul	r23, r19
    1fc8:	f0 01       	movw	r30, r0
    1fca:	82 9f       	mul	r24, r18
    1fcc:	e0 0d       	add	r30, r0
    1fce:	f1 1d       	adc	r31, r1
    1fd0:	64 9f       	mul	r22, r20
    1fd2:	e0 0d       	add	r30, r0
    1fd4:	f1 1d       	adc	r31, r1
    1fd6:	92 9f       	mul	r25, r18
    1fd8:	f0 0d       	add	r31, r0
    1fda:	83 9f       	mul	r24, r19
    1fdc:	f0 0d       	add	r31, r0
    1fde:	74 9f       	mul	r23, r20
    1fe0:	f0 0d       	add	r31, r0
    1fe2:	65 9f       	mul	r22, r21
    1fe4:	f0 0d       	add	r31, r0
    1fe6:	99 27       	eor	r25, r25
    1fe8:	72 9f       	mul	r23, r18
    1fea:	b0 0d       	add	r27, r0
    1fec:	e1 1d       	adc	r30, r1
    1fee:	f9 1f       	adc	r31, r25
    1ff0:	63 9f       	mul	r22, r19
    1ff2:	b0 0d       	add	r27, r0
    1ff4:	e1 1d       	adc	r30, r1
    1ff6:	f9 1f       	adc	r31, r25
    1ff8:	bd 01       	movw	r22, r26
    1ffa:	cf 01       	movw	r24, r30
    1ffc:	11 24       	eor	r1, r1
    1ffe:	08 95       	ret

00002000 <isgraph>:
    2000:	80 32       	cpi	r24, 0x20	; 32
    2002:	09 f0       	breq	.+2      	; 0x2006 <isprint+0x2>

00002004 <isprint>:
    2004:	91 11       	cpse	r25, r1
    2006:	80 c2       	rjmp	.+1280   	; 0x2508 <__ctype_isfalse>
    2008:	80 52       	subi	r24, 0x20	; 32
    200a:	8f 55       	subi	r24, 0x5F	; 95
    200c:	e0 f7       	brcc	.-8      	; 0x2006 <isprint+0x2>
    200e:	08 95       	ret

00002010 <fputc>:
    2010:	0f 93       	push	r16
    2012:	1f 93       	push	r17
    2014:	cf 93       	push	r28
    2016:	df 93       	push	r29
    2018:	8c 01       	movw	r16, r24
    201a:	eb 01       	movw	r28, r22
    201c:	8b 81       	ldd	r24, Y+3	; 0x03
    201e:	81 ff       	sbrs	r24, 1
    2020:	1b c0       	rjmp	.+54     	; 0x2058 <fputc+0x48>
    2022:	82 ff       	sbrs	r24, 2
    2024:	0d c0       	rjmp	.+26     	; 0x2040 <fputc+0x30>
    2026:	2e 81       	ldd	r18, Y+6	; 0x06
    2028:	3f 81       	ldd	r19, Y+7	; 0x07
    202a:	8c 81       	ldd	r24, Y+4	; 0x04
    202c:	9d 81       	ldd	r25, Y+5	; 0x05
    202e:	28 17       	cp	r18, r24
    2030:	39 07       	cpc	r19, r25
    2032:	64 f4       	brge	.+24     	; 0x204c <fputc+0x3c>
    2034:	e8 81       	ld	r30, Y
    2036:	f9 81       	ldd	r31, Y+1	; 0x01
    2038:	01 93       	st	Z+, r16
    203a:	f9 83       	std	Y+1, r31	; 0x01
    203c:	e8 83       	st	Y, r30
    203e:	06 c0       	rjmp	.+12     	; 0x204c <fputc+0x3c>
    2040:	e8 85       	ldd	r30, Y+8	; 0x08
    2042:	f9 85       	ldd	r31, Y+9	; 0x09
    2044:	80 2f       	mov	r24, r16
    2046:	09 95       	icall
    2048:	89 2b       	or	r24, r25
    204a:	31 f4       	brne	.+12     	; 0x2058 <fputc+0x48>
    204c:	8e 81       	ldd	r24, Y+6	; 0x06
    204e:	9f 81       	ldd	r25, Y+7	; 0x07
    2050:	01 96       	adiw	r24, 0x01	; 1
    2052:	9f 83       	std	Y+7, r25	; 0x07
    2054:	8e 83       	std	Y+6, r24	; 0x06
    2056:	02 c0       	rjmp	.+4      	; 0x205c <fputc+0x4c>
    2058:	0f ef       	ldi	r16, 0xFF	; 255
    205a:	1f ef       	ldi	r17, 0xFF	; 255
    205c:	c8 01       	movw	r24, r16
    205e:	df 91       	pop	r29
    2060:	cf 91       	pop	r28
    2062:	1f 91       	pop	r17
    2064:	0f 91       	pop	r16
    2066:	08 95       	ret

00002068 <printf_P>:
    2068:	df 93       	push	r29
    206a:	cf 93       	push	r28
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
    2070:	fe 01       	movw	r30, r28
    2072:	35 96       	adiw	r30, 0x05	; 5
    2074:	61 91       	ld	r22, Z+
    2076:	71 91       	ld	r23, Z+
    2078:	a0 91 45 01 	lds	r26, 0x0145
    207c:	b0 91 46 01 	lds	r27, 0x0146
    2080:	13 96       	adiw	r26, 0x03	; 3
    2082:	8c 91       	ld	r24, X
    2084:	13 97       	sbiw	r26, 0x03	; 3
    2086:	88 60       	ori	r24, 0x08	; 8
    2088:	13 96       	adiw	r26, 0x03	; 3
    208a:	8c 93       	st	X, r24
    208c:	80 91 45 01 	lds	r24, 0x0145
    2090:	90 91 46 01 	lds	r25, 0x0146
    2094:	af 01       	movw	r20, r30
    2096:	3f d0       	rcall	.+126    	; 0x2116 <vfprintf>
    2098:	e0 91 45 01 	lds	r30, 0x0145
    209c:	f0 91 46 01 	lds	r31, 0x0146
    20a0:	23 81       	ldd	r18, Z+3	; 0x03
    20a2:	27 7f       	andi	r18, 0xF7	; 247
    20a4:	23 83       	std	Z+3, r18	; 0x03
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	08 95       	ret

000020ac <puts_P>:
    20ac:	0f 93       	push	r16
    20ae:	1f 93       	push	r17
    20b0:	cf 93       	push	r28
    20b2:	df 93       	push	r29
    20b4:	ec 01       	movw	r28, r24
    20b6:	e0 91 45 01 	lds	r30, 0x0145
    20ba:	f0 91 46 01 	lds	r31, 0x0146
    20be:	83 81       	ldd	r24, Z+3	; 0x03
    20c0:	81 ff       	sbrs	r24, 1
    20c2:	21 c0       	rjmp	.+66     	; 0x2106 <__stack+0x7>
    20c4:	00 e0       	ldi	r16, 0x00	; 0
    20c6:	10 e0       	ldi	r17, 0x00	; 0
    20c8:	0e c0       	rjmp	.+28     	; 0x20e6 <puts_P+0x3a>
    20ca:	e0 91 45 01 	lds	r30, 0x0145
    20ce:	f0 91 46 01 	lds	r31, 0x0146
    20d2:	20 85       	ldd	r18, Z+8	; 0x08
    20d4:	31 85       	ldd	r19, Z+9	; 0x09
    20d6:	bf 01       	movw	r22, r30
    20d8:	f9 01       	movw	r30, r18
    20da:	09 95       	icall
    20dc:	89 2b       	or	r24, r25
    20de:	11 f0       	breq	.+4      	; 0x20e4 <puts_P+0x38>
    20e0:	0f ef       	ldi	r16, 0xFF	; 255
    20e2:	1f ef       	ldi	r17, 0xFF	; 255
    20e4:	21 96       	adiw	r28, 0x01	; 1
    20e6:	fe 01       	movw	r30, r28
    20e8:	84 91       	lpm	r24, Z+
    20ea:	88 23       	and	r24, r24
    20ec:	71 f7       	brne	.-36     	; 0x20ca <puts_P+0x1e>
    20ee:	e0 91 45 01 	lds	r30, 0x0145
    20f2:	f0 91 46 01 	lds	r31, 0x0146
    20f6:	20 85       	ldd	r18, Z+8	; 0x08
    20f8:	31 85       	ldd	r19, Z+9	; 0x09
    20fa:	8a e0       	ldi	r24, 0x0A	; 10
    20fc:	bf 01       	movw	r22, r30
    20fe:	f9 01       	movw	r30, r18
    2100:	09 95       	icall
    2102:	89 2b       	or	r24, r25
    2104:	11 f0       	breq	.+4      	; 0x210a <__stack+0xb>
    2106:	0f ef       	ldi	r16, 0xFF	; 255
    2108:	1f ef       	ldi	r17, 0xFF	; 255
    210a:	c8 01       	movw	r24, r16
    210c:	df 91       	pop	r29
    210e:	cf 91       	pop	r28
    2110:	1f 91       	pop	r17
    2112:	0f 91       	pop	r16
    2114:	08 95       	ret

00002116 <vfprintf>:
    2116:	2f 92       	push	r2
    2118:	3f 92       	push	r3
    211a:	4f 92       	push	r4
    211c:	5f 92       	push	r5
    211e:	6f 92       	push	r6
    2120:	7f 92       	push	r7
    2122:	8f 92       	push	r8
    2124:	9f 92       	push	r9
    2126:	af 92       	push	r10
    2128:	bf 92       	push	r11
    212a:	cf 92       	push	r12
    212c:	df 92       	push	r13
    212e:	ef 92       	push	r14
    2130:	ff 92       	push	r15
    2132:	0f 93       	push	r16
    2134:	1f 93       	push	r17
    2136:	df 93       	push	r29
    2138:	cf 93       	push	r28
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
    213e:	2b 97       	sbiw	r28, 0x0b	; 11
    2140:	0f b6       	in	r0, 0x3f	; 63
    2142:	f8 94       	cli
    2144:	de bf       	out	0x3e, r29	; 62
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	cd bf       	out	0x3d, r28	; 61
    214a:	3c 01       	movw	r6, r24
    214c:	2b 01       	movw	r4, r22
    214e:	5a 01       	movw	r10, r20
    2150:	fc 01       	movw	r30, r24
    2152:	17 82       	std	Z+7, r1	; 0x07
    2154:	16 82       	std	Z+6, r1	; 0x06
    2156:	83 81       	ldd	r24, Z+3	; 0x03
    2158:	81 fd       	sbrc	r24, 1
    215a:	03 c0       	rjmp	.+6      	; 0x2162 <vfprintf+0x4c>
    215c:	6f ef       	ldi	r22, 0xFF	; 255
    215e:	7f ef       	ldi	r23, 0xFF	; 255
    2160:	b9 c1       	rjmp	.+882    	; 0x24d4 <vfprintf+0x3be>
    2162:	9a e0       	ldi	r25, 0x0A	; 10
    2164:	89 2e       	mov	r8, r25
    2166:	1e 01       	movw	r2, r28
    2168:	08 94       	sec
    216a:	21 1c       	adc	r2, r1
    216c:	31 1c       	adc	r3, r1
    216e:	f3 01       	movw	r30, r6
    2170:	23 81       	ldd	r18, Z+3	; 0x03
    2172:	f2 01       	movw	r30, r4
    2174:	23 fd       	sbrc	r18, 3
    2176:	85 91       	lpm	r24, Z+
    2178:	23 ff       	sbrs	r18, 3
    217a:	81 91       	ld	r24, Z+
    217c:	2f 01       	movw	r4, r30
    217e:	88 23       	and	r24, r24
    2180:	09 f4       	brne	.+2      	; 0x2184 <vfprintf+0x6e>
    2182:	a5 c1       	rjmp	.+842    	; 0x24ce <vfprintf+0x3b8>
    2184:	85 32       	cpi	r24, 0x25	; 37
    2186:	39 f4       	brne	.+14     	; 0x2196 <vfprintf+0x80>
    2188:	23 fd       	sbrc	r18, 3
    218a:	85 91       	lpm	r24, Z+
    218c:	23 ff       	sbrs	r18, 3
    218e:	81 91       	ld	r24, Z+
    2190:	2f 01       	movw	r4, r30
    2192:	85 32       	cpi	r24, 0x25	; 37
    2194:	21 f4       	brne	.+8      	; 0x219e <vfprintf+0x88>
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	b3 01       	movw	r22, r6
    219a:	3a df       	rcall	.-396    	; 0x2010 <fputc>
    219c:	e8 cf       	rjmp	.-48     	; 0x216e <vfprintf+0x58>
    219e:	98 2f       	mov	r25, r24
    21a0:	ff 24       	eor	r15, r15
    21a2:	ee 24       	eor	r14, r14
    21a4:	99 24       	eor	r9, r9
    21a6:	ff e1       	ldi	r31, 0x1F	; 31
    21a8:	ff 15       	cp	r31, r15
    21aa:	d0 f0       	brcs	.+52     	; 0x21e0 <vfprintf+0xca>
    21ac:	9b 32       	cpi	r25, 0x2B	; 43
    21ae:	69 f0       	breq	.+26     	; 0x21ca <vfprintf+0xb4>
    21b0:	9c 32       	cpi	r25, 0x2C	; 44
    21b2:	28 f4       	brcc	.+10     	; 0x21be <vfprintf+0xa8>
    21b4:	90 32       	cpi	r25, 0x20	; 32
    21b6:	59 f0       	breq	.+22     	; 0x21ce <vfprintf+0xb8>
    21b8:	93 32       	cpi	r25, 0x23	; 35
    21ba:	91 f4       	brne	.+36     	; 0x21e0 <vfprintf+0xca>
    21bc:	0e c0       	rjmp	.+28     	; 0x21da <vfprintf+0xc4>
    21be:	9d 32       	cpi	r25, 0x2D	; 45
    21c0:	49 f0       	breq	.+18     	; 0x21d4 <vfprintf+0xbe>
    21c2:	90 33       	cpi	r25, 0x30	; 48
    21c4:	69 f4       	brne	.+26     	; 0x21e0 <vfprintf+0xca>
    21c6:	41 e0       	ldi	r20, 0x01	; 1
    21c8:	24 c0       	rjmp	.+72     	; 0x2212 <vfprintf+0xfc>
    21ca:	52 e0       	ldi	r21, 0x02	; 2
    21cc:	f5 2a       	or	r15, r21
    21ce:	84 e0       	ldi	r24, 0x04	; 4
    21d0:	f8 2a       	or	r15, r24
    21d2:	28 c0       	rjmp	.+80     	; 0x2224 <vfprintf+0x10e>
    21d4:	98 e0       	ldi	r25, 0x08	; 8
    21d6:	f9 2a       	or	r15, r25
    21d8:	25 c0       	rjmp	.+74     	; 0x2224 <vfprintf+0x10e>
    21da:	e0 e1       	ldi	r30, 0x10	; 16
    21dc:	fe 2a       	or	r15, r30
    21de:	22 c0       	rjmp	.+68     	; 0x2224 <vfprintf+0x10e>
    21e0:	f7 fc       	sbrc	r15, 7
    21e2:	29 c0       	rjmp	.+82     	; 0x2236 <vfprintf+0x120>
    21e4:	89 2f       	mov	r24, r25
    21e6:	80 53       	subi	r24, 0x30	; 48
    21e8:	8a 30       	cpi	r24, 0x0A	; 10
    21ea:	70 f4       	brcc	.+28     	; 0x2208 <vfprintf+0xf2>
    21ec:	f6 fe       	sbrs	r15, 6
    21ee:	05 c0       	rjmp	.+10     	; 0x21fa <vfprintf+0xe4>
    21f0:	98 9c       	mul	r9, r8
    21f2:	90 2c       	mov	r9, r0
    21f4:	11 24       	eor	r1, r1
    21f6:	98 0e       	add	r9, r24
    21f8:	15 c0       	rjmp	.+42     	; 0x2224 <vfprintf+0x10e>
    21fa:	e8 9c       	mul	r14, r8
    21fc:	e0 2c       	mov	r14, r0
    21fe:	11 24       	eor	r1, r1
    2200:	e8 0e       	add	r14, r24
    2202:	f0 e2       	ldi	r31, 0x20	; 32
    2204:	ff 2a       	or	r15, r31
    2206:	0e c0       	rjmp	.+28     	; 0x2224 <vfprintf+0x10e>
    2208:	9e 32       	cpi	r25, 0x2E	; 46
    220a:	29 f4       	brne	.+10     	; 0x2216 <vfprintf+0x100>
    220c:	f6 fc       	sbrc	r15, 6
    220e:	5f c1       	rjmp	.+702    	; 0x24ce <vfprintf+0x3b8>
    2210:	40 e4       	ldi	r20, 0x40	; 64
    2212:	f4 2a       	or	r15, r20
    2214:	07 c0       	rjmp	.+14     	; 0x2224 <vfprintf+0x10e>
    2216:	9c 36       	cpi	r25, 0x6C	; 108
    2218:	19 f4       	brne	.+6      	; 0x2220 <vfprintf+0x10a>
    221a:	50 e8       	ldi	r21, 0x80	; 128
    221c:	f5 2a       	or	r15, r21
    221e:	02 c0       	rjmp	.+4      	; 0x2224 <vfprintf+0x10e>
    2220:	98 36       	cpi	r25, 0x68	; 104
    2222:	49 f4       	brne	.+18     	; 0x2236 <vfprintf+0x120>
    2224:	f2 01       	movw	r30, r4
    2226:	23 fd       	sbrc	r18, 3
    2228:	95 91       	lpm	r25, Z+
    222a:	23 ff       	sbrs	r18, 3
    222c:	91 91       	ld	r25, Z+
    222e:	2f 01       	movw	r4, r30
    2230:	99 23       	and	r25, r25
    2232:	09 f0       	breq	.+2      	; 0x2236 <vfprintf+0x120>
    2234:	b8 cf       	rjmp	.-144    	; 0x21a6 <vfprintf+0x90>
    2236:	89 2f       	mov	r24, r25
    2238:	85 54       	subi	r24, 0x45	; 69
    223a:	83 30       	cpi	r24, 0x03	; 3
    223c:	18 f0       	brcs	.+6      	; 0x2244 <vfprintf+0x12e>
    223e:	80 52       	subi	r24, 0x20	; 32
    2240:	83 30       	cpi	r24, 0x03	; 3
    2242:	38 f4       	brcc	.+14     	; 0x2252 <vfprintf+0x13c>
    2244:	44 e0       	ldi	r20, 0x04	; 4
    2246:	50 e0       	ldi	r21, 0x00	; 0
    2248:	a4 0e       	add	r10, r20
    224a:	b5 1e       	adc	r11, r21
    224c:	5f e3       	ldi	r21, 0x3F	; 63
    224e:	59 83       	std	Y+1, r21	; 0x01
    2250:	0f c0       	rjmp	.+30     	; 0x2270 <vfprintf+0x15a>
    2252:	93 36       	cpi	r25, 0x63	; 99
    2254:	31 f0       	breq	.+12     	; 0x2262 <vfprintf+0x14c>
    2256:	93 37       	cpi	r25, 0x73	; 115
    2258:	79 f0       	breq	.+30     	; 0x2278 <vfprintf+0x162>
    225a:	93 35       	cpi	r25, 0x53	; 83
    225c:	09 f0       	breq	.+2      	; 0x2260 <vfprintf+0x14a>
    225e:	52 c0       	rjmp	.+164    	; 0x2304 <vfprintf+0x1ee>
    2260:	1f c0       	rjmp	.+62     	; 0x22a0 <vfprintf+0x18a>
    2262:	f5 01       	movw	r30, r10
    2264:	80 81       	ld	r24, Z
    2266:	89 83       	std	Y+1, r24	; 0x01
    2268:	42 e0       	ldi	r20, 0x02	; 2
    226a:	50 e0       	ldi	r21, 0x00	; 0
    226c:	a4 0e       	add	r10, r20
    226e:	b5 1e       	adc	r11, r21
    2270:	61 01       	movw	r12, r2
    2272:	01 e0       	ldi	r16, 0x01	; 1
    2274:	10 e0       	ldi	r17, 0x00	; 0
    2276:	11 c0       	rjmp	.+34     	; 0x229a <vfprintf+0x184>
    2278:	f5 01       	movw	r30, r10
    227a:	c0 80       	ld	r12, Z
    227c:	d1 80       	ldd	r13, Z+1	; 0x01
    227e:	f6 fc       	sbrc	r15, 6
    2280:	03 c0       	rjmp	.+6      	; 0x2288 <vfprintf+0x172>
    2282:	6f ef       	ldi	r22, 0xFF	; 255
    2284:	7f ef       	ldi	r23, 0xFF	; 255
    2286:	02 c0       	rjmp	.+4      	; 0x228c <vfprintf+0x176>
    2288:	69 2d       	mov	r22, r9
    228a:	70 e0       	ldi	r23, 0x00	; 0
    228c:	42 e0       	ldi	r20, 0x02	; 2
    228e:	50 e0       	ldi	r21, 0x00	; 0
    2290:	a4 0e       	add	r10, r20
    2292:	b5 1e       	adc	r11, r21
    2294:	c6 01       	movw	r24, r12
    2296:	46 d1       	rcall	.+652    	; 0x2524 <strnlen>
    2298:	8c 01       	movw	r16, r24
    229a:	5f e7       	ldi	r21, 0x7F	; 127
    229c:	f5 22       	and	r15, r21
    229e:	13 c0       	rjmp	.+38     	; 0x22c6 <vfprintf+0x1b0>
    22a0:	f5 01       	movw	r30, r10
    22a2:	c0 80       	ld	r12, Z
    22a4:	d1 80       	ldd	r13, Z+1	; 0x01
    22a6:	f6 fc       	sbrc	r15, 6
    22a8:	03 c0       	rjmp	.+6      	; 0x22b0 <vfprintf+0x19a>
    22aa:	6f ef       	ldi	r22, 0xFF	; 255
    22ac:	7f ef       	ldi	r23, 0xFF	; 255
    22ae:	02 c0       	rjmp	.+4      	; 0x22b4 <vfprintf+0x19e>
    22b0:	69 2d       	mov	r22, r9
    22b2:	70 e0       	ldi	r23, 0x00	; 0
    22b4:	42 e0       	ldi	r20, 0x02	; 2
    22b6:	50 e0       	ldi	r21, 0x00	; 0
    22b8:	a4 0e       	add	r10, r20
    22ba:	b5 1e       	adc	r11, r21
    22bc:	c6 01       	movw	r24, r12
    22be:	27 d1       	rcall	.+590    	; 0x250e <strnlen_P>
    22c0:	8c 01       	movw	r16, r24
    22c2:	50 e8       	ldi	r21, 0x80	; 128
    22c4:	f5 2a       	or	r15, r21
    22c6:	f3 fe       	sbrs	r15, 3
    22c8:	06 c0       	rjmp	.+12     	; 0x22d6 <vfprintf+0x1c0>
    22ca:	18 c0       	rjmp	.+48     	; 0x22fc <vfprintf+0x1e6>
    22cc:	80 e2       	ldi	r24, 0x20	; 32
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	b3 01       	movw	r22, r6
    22d2:	9e de       	rcall	.-708    	; 0x2010 <fputc>
    22d4:	ea 94       	dec	r14
    22d6:	8e 2d       	mov	r24, r14
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	08 17       	cp	r16, r24
    22dc:	19 07       	cpc	r17, r25
    22de:	b0 f3       	brcs	.-20     	; 0x22cc <vfprintf+0x1b6>
    22e0:	0d c0       	rjmp	.+26     	; 0x22fc <vfprintf+0x1e6>
    22e2:	f6 01       	movw	r30, r12
    22e4:	f7 fc       	sbrc	r15, 7
    22e6:	85 91       	lpm	r24, Z+
    22e8:	f7 fe       	sbrs	r15, 7
    22ea:	81 91       	ld	r24, Z+
    22ec:	6f 01       	movw	r12, r30
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	b3 01       	movw	r22, r6
    22f2:	8e de       	rcall	.-740    	; 0x2010 <fputc>
    22f4:	e1 10       	cpse	r14, r1
    22f6:	ea 94       	dec	r14
    22f8:	01 50       	subi	r16, 0x01	; 1
    22fa:	10 40       	sbci	r17, 0x00	; 0
    22fc:	01 15       	cp	r16, r1
    22fe:	11 05       	cpc	r17, r1
    2300:	81 f7       	brne	.-32     	; 0x22e2 <vfprintf+0x1cc>
    2302:	e2 c0       	rjmp	.+452    	; 0x24c8 <vfprintf+0x3b2>
    2304:	94 36       	cpi	r25, 0x64	; 100
    2306:	11 f0       	breq	.+4      	; 0x230c <vfprintf+0x1f6>
    2308:	99 36       	cpi	r25, 0x69	; 105
    230a:	61 f5       	brne	.+88     	; 0x2364 <vfprintf+0x24e>
    230c:	f7 fe       	sbrs	r15, 7
    230e:	08 c0       	rjmp	.+16     	; 0x2320 <vfprintf+0x20a>
    2310:	f5 01       	movw	r30, r10
    2312:	20 81       	ld	r18, Z
    2314:	31 81       	ldd	r19, Z+1	; 0x01
    2316:	42 81       	ldd	r20, Z+2	; 0x02
    2318:	53 81       	ldd	r21, Z+3	; 0x03
    231a:	84 e0       	ldi	r24, 0x04	; 4
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	0a c0       	rjmp	.+20     	; 0x2334 <vfprintf+0x21e>
    2320:	f5 01       	movw	r30, r10
    2322:	80 81       	ld	r24, Z
    2324:	91 81       	ldd	r25, Z+1	; 0x01
    2326:	9c 01       	movw	r18, r24
    2328:	44 27       	eor	r20, r20
    232a:	37 fd       	sbrc	r19, 7
    232c:	40 95       	com	r20
    232e:	54 2f       	mov	r21, r20
    2330:	82 e0       	ldi	r24, 0x02	; 2
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	a8 0e       	add	r10, r24
    2336:	b9 1e       	adc	r11, r25
    2338:	9f e6       	ldi	r25, 0x6F	; 111
    233a:	f9 22       	and	r15, r25
    233c:	57 ff       	sbrs	r21, 7
    233e:	09 c0       	rjmp	.+18     	; 0x2352 <vfprintf+0x23c>
    2340:	50 95       	com	r21
    2342:	40 95       	com	r20
    2344:	30 95       	com	r19
    2346:	21 95       	neg	r18
    2348:	3f 4f       	sbci	r19, 0xFF	; 255
    234a:	4f 4f       	sbci	r20, 0xFF	; 255
    234c:	5f 4f       	sbci	r21, 0xFF	; 255
    234e:	e0 e8       	ldi	r30, 0x80	; 128
    2350:	fe 2a       	or	r15, r30
    2352:	ca 01       	movw	r24, r20
    2354:	b9 01       	movw	r22, r18
    2356:	a1 01       	movw	r20, r2
    2358:	2a e0       	ldi	r18, 0x0A	; 10
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	ee d0       	rcall	.+476    	; 0x253a <__ultoa_invert>
    235e:	d8 2e       	mov	r13, r24
    2360:	d2 18       	sub	r13, r2
    2362:	3f c0       	rjmp	.+126    	; 0x23e2 <vfprintf+0x2cc>
    2364:	95 37       	cpi	r25, 0x75	; 117
    2366:	29 f4       	brne	.+10     	; 0x2372 <vfprintf+0x25c>
    2368:	1f 2d       	mov	r17, r15
    236a:	1f 7e       	andi	r17, 0xEF	; 239
    236c:	2a e0       	ldi	r18, 0x0A	; 10
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	1d c0       	rjmp	.+58     	; 0x23ac <vfprintf+0x296>
    2372:	1f 2d       	mov	r17, r15
    2374:	19 7f       	andi	r17, 0xF9	; 249
    2376:	9f 36       	cpi	r25, 0x6F	; 111
    2378:	61 f0       	breq	.+24     	; 0x2392 <vfprintf+0x27c>
    237a:	90 37       	cpi	r25, 0x70	; 112
    237c:	20 f4       	brcc	.+8      	; 0x2386 <vfprintf+0x270>
    237e:	98 35       	cpi	r25, 0x58	; 88
    2380:	09 f0       	breq	.+2      	; 0x2384 <vfprintf+0x26e>
    2382:	a5 c0       	rjmp	.+330    	; 0x24ce <vfprintf+0x3b8>
    2384:	0f c0       	rjmp	.+30     	; 0x23a4 <vfprintf+0x28e>
    2386:	90 37       	cpi	r25, 0x70	; 112
    2388:	39 f0       	breq	.+14     	; 0x2398 <vfprintf+0x282>
    238a:	98 37       	cpi	r25, 0x78	; 120
    238c:	09 f0       	breq	.+2      	; 0x2390 <vfprintf+0x27a>
    238e:	9f c0       	rjmp	.+318    	; 0x24ce <vfprintf+0x3b8>
    2390:	04 c0       	rjmp	.+8      	; 0x239a <vfprintf+0x284>
    2392:	28 e0       	ldi	r18, 0x08	; 8
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	0a c0       	rjmp	.+20     	; 0x23ac <vfprintf+0x296>
    2398:	10 61       	ori	r17, 0x10	; 16
    239a:	14 fd       	sbrc	r17, 4
    239c:	14 60       	ori	r17, 0x04	; 4
    239e:	20 e1       	ldi	r18, 0x10	; 16
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	04 c0       	rjmp	.+8      	; 0x23ac <vfprintf+0x296>
    23a4:	14 fd       	sbrc	r17, 4
    23a6:	16 60       	ori	r17, 0x06	; 6
    23a8:	20 e1       	ldi	r18, 0x10	; 16
    23aa:	32 e0       	ldi	r19, 0x02	; 2
    23ac:	17 ff       	sbrs	r17, 7
    23ae:	08 c0       	rjmp	.+16     	; 0x23c0 <vfprintf+0x2aa>
    23b0:	f5 01       	movw	r30, r10
    23b2:	60 81       	ld	r22, Z
    23b4:	71 81       	ldd	r23, Z+1	; 0x01
    23b6:	82 81       	ldd	r24, Z+2	; 0x02
    23b8:	93 81       	ldd	r25, Z+3	; 0x03
    23ba:	44 e0       	ldi	r20, 0x04	; 4
    23bc:	50 e0       	ldi	r21, 0x00	; 0
    23be:	08 c0       	rjmp	.+16     	; 0x23d0 <vfprintf+0x2ba>
    23c0:	f5 01       	movw	r30, r10
    23c2:	80 81       	ld	r24, Z
    23c4:	91 81       	ldd	r25, Z+1	; 0x01
    23c6:	bc 01       	movw	r22, r24
    23c8:	80 e0       	ldi	r24, 0x00	; 0
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	42 e0       	ldi	r20, 0x02	; 2
    23ce:	50 e0       	ldi	r21, 0x00	; 0
    23d0:	a4 0e       	add	r10, r20
    23d2:	b5 1e       	adc	r11, r21
    23d4:	a1 01       	movw	r20, r2
    23d6:	b1 d0       	rcall	.+354    	; 0x253a <__ultoa_invert>
    23d8:	d8 2e       	mov	r13, r24
    23da:	d2 18       	sub	r13, r2
    23dc:	8f e7       	ldi	r24, 0x7F	; 127
    23de:	f8 2e       	mov	r15, r24
    23e0:	f1 22       	and	r15, r17
    23e2:	f6 fe       	sbrs	r15, 6
    23e4:	0b c0       	rjmp	.+22     	; 0x23fc <vfprintf+0x2e6>
    23e6:	5e ef       	ldi	r21, 0xFE	; 254
    23e8:	f5 22       	and	r15, r21
    23ea:	d9 14       	cp	r13, r9
    23ec:	38 f4       	brcc	.+14     	; 0x23fc <vfprintf+0x2e6>
    23ee:	f4 fe       	sbrs	r15, 4
    23f0:	07 c0       	rjmp	.+14     	; 0x2400 <vfprintf+0x2ea>
    23f2:	f2 fc       	sbrc	r15, 2
    23f4:	05 c0       	rjmp	.+10     	; 0x2400 <vfprintf+0x2ea>
    23f6:	8f ee       	ldi	r24, 0xEF	; 239
    23f8:	f8 22       	and	r15, r24
    23fa:	02 c0       	rjmp	.+4      	; 0x2400 <vfprintf+0x2ea>
    23fc:	1d 2d       	mov	r17, r13
    23fe:	01 c0       	rjmp	.+2      	; 0x2402 <vfprintf+0x2ec>
    2400:	19 2d       	mov	r17, r9
    2402:	f4 fe       	sbrs	r15, 4
    2404:	0d c0       	rjmp	.+26     	; 0x2420 <vfprintf+0x30a>
    2406:	fe 01       	movw	r30, r28
    2408:	ed 0d       	add	r30, r13
    240a:	f1 1d       	adc	r31, r1
    240c:	80 81       	ld	r24, Z
    240e:	80 33       	cpi	r24, 0x30	; 48
    2410:	19 f4       	brne	.+6      	; 0x2418 <vfprintf+0x302>
    2412:	99 ee       	ldi	r25, 0xE9	; 233
    2414:	f9 22       	and	r15, r25
    2416:	08 c0       	rjmp	.+16     	; 0x2428 <vfprintf+0x312>
    2418:	1f 5f       	subi	r17, 0xFF	; 255
    241a:	f2 fe       	sbrs	r15, 2
    241c:	05 c0       	rjmp	.+10     	; 0x2428 <vfprintf+0x312>
    241e:	03 c0       	rjmp	.+6      	; 0x2426 <vfprintf+0x310>
    2420:	8f 2d       	mov	r24, r15
    2422:	86 78       	andi	r24, 0x86	; 134
    2424:	09 f0       	breq	.+2      	; 0x2428 <vfprintf+0x312>
    2426:	1f 5f       	subi	r17, 0xFF	; 255
    2428:	0f 2d       	mov	r16, r15
    242a:	f3 fc       	sbrc	r15, 3
    242c:	13 c0       	rjmp	.+38     	; 0x2454 <vfprintf+0x33e>
    242e:	f0 fe       	sbrs	r15, 0
    2430:	0e c0       	rjmp	.+28     	; 0x244e <vfprintf+0x338>
    2432:	1e 15       	cp	r17, r14
    2434:	10 f0       	brcs	.+4      	; 0x243a <vfprintf+0x324>
    2436:	9d 2c       	mov	r9, r13
    2438:	0a c0       	rjmp	.+20     	; 0x244e <vfprintf+0x338>
    243a:	9d 2c       	mov	r9, r13
    243c:	9e 0c       	add	r9, r14
    243e:	91 1a       	sub	r9, r17
    2440:	1e 2d       	mov	r17, r14
    2442:	05 c0       	rjmp	.+10     	; 0x244e <vfprintf+0x338>
    2444:	80 e2       	ldi	r24, 0x20	; 32
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	b3 01       	movw	r22, r6
    244a:	e2 dd       	rcall	.-1084   	; 0x2010 <fputc>
    244c:	1f 5f       	subi	r17, 0xFF	; 255
    244e:	1e 15       	cp	r17, r14
    2450:	c8 f3       	brcs	.-14     	; 0x2444 <vfprintf+0x32e>
    2452:	04 c0       	rjmp	.+8      	; 0x245c <vfprintf+0x346>
    2454:	1e 15       	cp	r17, r14
    2456:	10 f4       	brcc	.+4      	; 0x245c <vfprintf+0x346>
    2458:	e1 1a       	sub	r14, r17
    245a:	01 c0       	rjmp	.+2      	; 0x245e <vfprintf+0x348>
    245c:	ee 24       	eor	r14, r14
    245e:	04 ff       	sbrs	r16, 4
    2460:	0e c0       	rjmp	.+28     	; 0x247e <vfprintf+0x368>
    2462:	80 e3       	ldi	r24, 0x30	; 48
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	b3 01       	movw	r22, r6
    2468:	d3 dd       	rcall	.-1114   	; 0x2010 <fputc>
    246a:	02 ff       	sbrs	r16, 2
    246c:	1b c0       	rjmp	.+54     	; 0x24a4 <vfprintf+0x38e>
    246e:	01 fd       	sbrc	r16, 1
    2470:	03 c0       	rjmp	.+6      	; 0x2478 <vfprintf+0x362>
    2472:	88 e7       	ldi	r24, 0x78	; 120
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	0e c0       	rjmp	.+28     	; 0x2494 <vfprintf+0x37e>
    2478:	88 e5       	ldi	r24, 0x58	; 88
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	0b c0       	rjmp	.+22     	; 0x2494 <vfprintf+0x37e>
    247e:	80 2f       	mov	r24, r16
    2480:	86 78       	andi	r24, 0x86	; 134
    2482:	81 f0       	breq	.+32     	; 0x24a4 <vfprintf+0x38e>
    2484:	01 ff       	sbrs	r16, 1
    2486:	02 c0       	rjmp	.+4      	; 0x248c <vfprintf+0x376>
    2488:	8b e2       	ldi	r24, 0x2B	; 43
    248a:	01 c0       	rjmp	.+2      	; 0x248e <vfprintf+0x378>
    248c:	80 e2       	ldi	r24, 0x20	; 32
    248e:	f7 fc       	sbrc	r15, 7
    2490:	8d e2       	ldi	r24, 0x2D	; 45
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	b3 01       	movw	r22, r6
    2496:	bc dd       	rcall	.-1160   	; 0x2010 <fputc>
    2498:	05 c0       	rjmp	.+10     	; 0x24a4 <vfprintf+0x38e>
    249a:	80 e3       	ldi	r24, 0x30	; 48
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	b3 01       	movw	r22, r6
    24a0:	b7 dd       	rcall	.-1170   	; 0x2010 <fputc>
    24a2:	9a 94       	dec	r9
    24a4:	d9 14       	cp	r13, r9
    24a6:	c8 f3       	brcs	.-14     	; 0x249a <vfprintf+0x384>
    24a8:	da 94       	dec	r13
    24aa:	f1 01       	movw	r30, r2
    24ac:	ed 0d       	add	r30, r13
    24ae:	f1 1d       	adc	r31, r1
    24b0:	80 81       	ld	r24, Z
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	b3 01       	movw	r22, r6
    24b6:	ac dd       	rcall	.-1192   	; 0x2010 <fputc>
    24b8:	dd 20       	and	r13, r13
    24ba:	b1 f7       	brne	.-20     	; 0x24a8 <vfprintf+0x392>
    24bc:	05 c0       	rjmp	.+10     	; 0x24c8 <vfprintf+0x3b2>
    24be:	80 e2       	ldi	r24, 0x20	; 32
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	b3 01       	movw	r22, r6
    24c4:	a5 dd       	rcall	.-1206   	; 0x2010 <fputc>
    24c6:	ea 94       	dec	r14
    24c8:	ee 20       	and	r14, r14
    24ca:	c9 f7       	brne	.-14     	; 0x24be <vfprintf+0x3a8>
    24cc:	50 ce       	rjmp	.-864    	; 0x216e <vfprintf+0x58>
    24ce:	f3 01       	movw	r30, r6
    24d0:	66 81       	ldd	r22, Z+6	; 0x06
    24d2:	77 81       	ldd	r23, Z+7	; 0x07
    24d4:	cb 01       	movw	r24, r22
    24d6:	2b 96       	adiw	r28, 0x0b	; 11
    24d8:	0f b6       	in	r0, 0x3f	; 63
    24da:	f8 94       	cli
    24dc:	de bf       	out	0x3e, r29	; 62
    24de:	0f be       	out	0x3f, r0	; 63
    24e0:	cd bf       	out	0x3d, r28	; 61
    24e2:	cf 91       	pop	r28
    24e4:	df 91       	pop	r29
    24e6:	1f 91       	pop	r17
    24e8:	0f 91       	pop	r16
    24ea:	ff 90       	pop	r15
    24ec:	ef 90       	pop	r14
    24ee:	df 90       	pop	r13
    24f0:	cf 90       	pop	r12
    24f2:	bf 90       	pop	r11
    24f4:	af 90       	pop	r10
    24f6:	9f 90       	pop	r9
    24f8:	8f 90       	pop	r8
    24fa:	7f 90       	pop	r7
    24fc:	6f 90       	pop	r6
    24fe:	5f 90       	pop	r5
    2500:	4f 90       	pop	r4
    2502:	3f 90       	pop	r3
    2504:	2f 90       	pop	r2
    2506:	08 95       	ret

00002508 <__ctype_isfalse>:
    2508:	99 27       	eor	r25, r25
    250a:	88 27       	eor	r24, r24

0000250c <__ctype_istrue>:
    250c:	08 95       	ret

0000250e <strnlen_P>:
    250e:	fc 01       	movw	r30, r24
    2510:	05 90       	lpm	r0, Z+
    2512:	61 50       	subi	r22, 0x01	; 1
    2514:	70 40       	sbci	r23, 0x00	; 0
    2516:	01 10       	cpse	r0, r1
    2518:	d8 f7       	brcc	.-10     	; 0x2510 <strnlen_P+0x2>
    251a:	80 95       	com	r24
    251c:	90 95       	com	r25
    251e:	8e 0f       	add	r24, r30
    2520:	9f 1f       	adc	r25, r31
    2522:	08 95       	ret

00002524 <strnlen>:
    2524:	fc 01       	movw	r30, r24
    2526:	61 50       	subi	r22, 0x01	; 1
    2528:	70 40       	sbci	r23, 0x00	; 0
    252a:	01 90       	ld	r0, Z+
    252c:	01 10       	cpse	r0, r1
    252e:	d8 f7       	brcc	.-10     	; 0x2526 <strnlen+0x2>
    2530:	80 95       	com	r24
    2532:	90 95       	com	r25
    2534:	8e 0f       	add	r24, r30
    2536:	9f 1f       	adc	r25, r31
    2538:	08 95       	ret

0000253a <__ultoa_invert>:
    253a:	fa 01       	movw	r30, r20
    253c:	aa 27       	eor	r26, r26
    253e:	28 30       	cpi	r18, 0x08	; 8
    2540:	51 f1       	breq	.+84     	; 0x2596 <__ultoa_invert+0x5c>
    2542:	20 31       	cpi	r18, 0x10	; 16
    2544:	81 f1       	breq	.+96     	; 0x25a6 <__ultoa_invert+0x6c>
    2546:	e8 94       	clt
    2548:	6f 93       	push	r22
    254a:	6e 7f       	andi	r22, 0xFE	; 254
    254c:	6e 5f       	subi	r22, 0xFE	; 254
    254e:	7f 4f       	sbci	r23, 0xFF	; 255
    2550:	8f 4f       	sbci	r24, 0xFF	; 255
    2552:	9f 4f       	sbci	r25, 0xFF	; 255
    2554:	af 4f       	sbci	r26, 0xFF	; 255
    2556:	b1 e0       	ldi	r27, 0x01	; 1
    2558:	3e d0       	rcall	.+124    	; 0x25d6 <__ultoa_invert+0x9c>
    255a:	b4 e0       	ldi	r27, 0x04	; 4
    255c:	3c d0       	rcall	.+120    	; 0x25d6 <__ultoa_invert+0x9c>
    255e:	67 0f       	add	r22, r23
    2560:	78 1f       	adc	r23, r24
    2562:	89 1f       	adc	r24, r25
    2564:	9a 1f       	adc	r25, r26
    2566:	a1 1d       	adc	r26, r1
    2568:	68 0f       	add	r22, r24
    256a:	79 1f       	adc	r23, r25
    256c:	8a 1f       	adc	r24, r26
    256e:	91 1d       	adc	r25, r1
    2570:	a1 1d       	adc	r26, r1
    2572:	6a 0f       	add	r22, r26
    2574:	71 1d       	adc	r23, r1
    2576:	81 1d       	adc	r24, r1
    2578:	91 1d       	adc	r25, r1
    257a:	a1 1d       	adc	r26, r1
    257c:	20 d0       	rcall	.+64     	; 0x25be <__ultoa_invert+0x84>
    257e:	09 f4       	brne	.+2      	; 0x2582 <__ultoa_invert+0x48>
    2580:	68 94       	set
    2582:	3f 91       	pop	r19
    2584:	2a e0       	ldi	r18, 0x0A	; 10
    2586:	26 9f       	mul	r18, r22
    2588:	11 24       	eor	r1, r1
    258a:	30 19       	sub	r19, r0
    258c:	30 5d       	subi	r19, 0xD0	; 208
    258e:	31 93       	st	Z+, r19
    2590:	de f6       	brtc	.-74     	; 0x2548 <__ultoa_invert+0xe>
    2592:	cf 01       	movw	r24, r30
    2594:	08 95       	ret
    2596:	46 2f       	mov	r20, r22
    2598:	47 70       	andi	r20, 0x07	; 7
    259a:	40 5d       	subi	r20, 0xD0	; 208
    259c:	41 93       	st	Z+, r20
    259e:	b3 e0       	ldi	r27, 0x03	; 3
    25a0:	0f d0       	rcall	.+30     	; 0x25c0 <__ultoa_invert+0x86>
    25a2:	c9 f7       	brne	.-14     	; 0x2596 <__ultoa_invert+0x5c>
    25a4:	f6 cf       	rjmp	.-20     	; 0x2592 <__ultoa_invert+0x58>
    25a6:	46 2f       	mov	r20, r22
    25a8:	4f 70       	andi	r20, 0x0F	; 15
    25aa:	40 5d       	subi	r20, 0xD0	; 208
    25ac:	4a 33       	cpi	r20, 0x3A	; 58
    25ae:	18 f0       	brcs	.+6      	; 0x25b6 <__ultoa_invert+0x7c>
    25b0:	49 5d       	subi	r20, 0xD9	; 217
    25b2:	31 fd       	sbrc	r19, 1
    25b4:	40 52       	subi	r20, 0x20	; 32
    25b6:	41 93       	st	Z+, r20
    25b8:	02 d0       	rcall	.+4      	; 0x25be <__ultoa_invert+0x84>
    25ba:	a9 f7       	brne	.-22     	; 0x25a6 <__ultoa_invert+0x6c>
    25bc:	ea cf       	rjmp	.-44     	; 0x2592 <__ultoa_invert+0x58>
    25be:	b4 e0       	ldi	r27, 0x04	; 4
    25c0:	a6 95       	lsr	r26
    25c2:	97 95       	ror	r25
    25c4:	87 95       	ror	r24
    25c6:	77 95       	ror	r23
    25c8:	67 95       	ror	r22
    25ca:	ba 95       	dec	r27
    25cc:	c9 f7       	brne	.-14     	; 0x25c0 <__ultoa_invert+0x86>
    25ce:	00 97       	sbiw	r24, 0x00	; 0
    25d0:	61 05       	cpc	r22, r1
    25d2:	71 05       	cpc	r23, r1
    25d4:	08 95       	ret
    25d6:	9b 01       	movw	r18, r22
    25d8:	ac 01       	movw	r20, r24
    25da:	0a 2e       	mov	r0, r26
    25dc:	06 94       	lsr	r0
    25de:	57 95       	ror	r21
    25e0:	47 95       	ror	r20
    25e2:	37 95       	ror	r19
    25e4:	27 95       	ror	r18
    25e6:	ba 95       	dec	r27
    25e8:	c9 f7       	brne	.-14     	; 0x25dc <__ultoa_invert+0xa2>
    25ea:	62 0f       	add	r22, r18
    25ec:	73 1f       	adc	r23, r19
    25ee:	84 1f       	adc	r24, r20
    25f0:	95 1f       	adc	r25, r21
    25f2:	a0 1d       	adc	r26, r0
    25f4:	08 95       	ret

000025f6 <_exit>:
    25f6:	f8 94       	cli

000025f8 <__stop_program>:
    25f8:	ff cf       	rjmp	.-2      	; 0x25f8 <__stop_program>
