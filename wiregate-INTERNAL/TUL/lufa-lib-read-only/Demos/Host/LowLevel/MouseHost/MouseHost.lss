
MouseHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00001926  000019ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001926  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  0080011a  0080011a  000019d4  2**0
                  ALLOC
  3 .stab         000020a0  00000000  00000000  000019d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000da2  00000000  00000000  00003a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000320  00000000  00000000  00004816  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000007ba  00000000  00000000  00004b36  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004bd9  00000000  00000000  000052f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  00009ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003e07  00000000  00000000  0000b4f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004a0  00000000  00000000  0000f2f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002309  00000000  00000000  0000f798  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000200e  00000000  00000000  00011aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003d0  00000000  00000000  00013aaf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		Pipe_DisablePipe();
	}
}

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
       0:	51 c1       	rjmp	.+674    	; 0x2a4 <__ctors_end>
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       2:	00 00       	nop
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       4:	6d c1       	rjmp	.+730    	; 0x2e0 <__bad_interrupt>
	return USB_Host_SendControlRequest(NULL);
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
       6:	00 00       	nop

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       8:	6b c1       	rjmp	.+726    	; 0x2e0 <__bad_interrupt>
       a:	00 00       	nop
       c:	69 c1       	rjmp	.+722    	; 0x2e0 <__bad_interrupt>
       e:	00 00       	nop
      10:	67 c1       	rjmp	.+718    	; 0x2e0 <__bad_interrupt>
      12:	00 00       	nop
      14:	65 c1       	rjmp	.+714    	; 0x2e0 <__bad_interrupt>
      16:	00 00       	nop
      18:	63 c1       	rjmp	.+710    	; 0x2e0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	61 c1       	rjmp	.+706    	; 0x2e0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5f c1       	rjmp	.+702    	; 0x2e0 <__bad_interrupt>
      22:	00 00       	nop
      24:	5d c1       	rjmp	.+698    	; 0x2e0 <__bad_interrupt>
      26:	00 00       	nop
      28:	67 c6       	rjmp	.+3278   	; 0xcf8 <__vector_10>
      2a:	00 00       	nop
      2c:	59 c1       	rjmp	.+690    	; 0x2e0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	57 c1       	rjmp	.+686    	; 0x2e0 <__bad_interrupt>
      32:	00 00       	nop
      34:	55 c1       	rjmp	.+682    	; 0x2e0 <__bad_interrupt>
      36:	00 00       	nop
      38:	53 c1       	rjmp	.+678    	; 0x2e0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	51 c1       	rjmp	.+674    	; 0x2e0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4f c1       	rjmp	.+670    	; 0x2e0 <__bad_interrupt>
      42:	00 00       	nop
      44:	4d c1       	rjmp	.+666    	; 0x2e0 <__bad_interrupt>
      46:	00 00       	nop
      48:	4b c1       	rjmp	.+662    	; 0x2e0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	49 c1       	rjmp	.+658    	; 0x2e0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	47 c1       	rjmp	.+654    	; 0x2e0 <__bad_interrupt>
      52:	00 00       	nop
      54:	45 c1       	rjmp	.+650    	; 0x2e0 <__bad_interrupt>
      56:	00 00       	nop
      58:	43 c1       	rjmp	.+646    	; 0x2e0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	41 c1       	rjmp	.+642    	; 0x2e0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3f c1       	rjmp	.+638    	; 0x2e0 <__bad_interrupt>
      62:	00 00       	nop
      64:	3d c1       	rjmp	.+634    	; 0x2e0 <__bad_interrupt>
      66:	00 00       	nop
      68:	3b c1       	rjmp	.+630    	; 0x2e0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	39 c1       	rjmp	.+626    	; 0x2e0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	37 c1       	rjmp	.+622    	; 0x2e0 <__bad_interrupt>
      72:	00 00       	nop
      74:	35 c1       	rjmp	.+618    	; 0x2e0 <__bad_interrupt>
      76:	00 00       	nop
      78:	33 c1       	rjmp	.+614    	; 0x2e0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	31 c1       	rjmp	.+610    	; 0x2e0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2f c1       	rjmp	.+606    	; 0x2e0 <__bad_interrupt>
      82:	00 00       	nop
      84:	2d c1       	rjmp	.+602    	; 0x2e0 <__bad_interrupt>
      86:	00 00       	nop
      88:	2b c1       	rjmp	.+598    	; 0x2e0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	29 c1       	rjmp	.+594    	; 0x2e0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	27 c1       	rjmp	.+590    	; 0x2e0 <__bad_interrupt>
      92:	00 00       	nop
      94:	25 c1       	rjmp	.+586    	; 0x2e0 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4589>:
      98:	64 58 3a 25 32 64 20 64 59 3a 25 32 64 20 42 75     dX:%2d dY:%2d Bu
      a8:	74 74 6f 6e 3a 25 64 0d 0a 00                       tton:%d...

000000b2 <__c.4578>:
      b2:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      c2:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      d2:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      e2:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      f2:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     102:	1b 5b 33 37 6d 00                                   .[37m.

00000108 <__c.4570>:
     108:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     118:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     128:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000137 <__c.4560>:
     137:	4d 6f 75 73 65 20 45 6e 75 6d 65 72 61 74 65 64     Mouse Enumerated
     147:	2e 0d 0a 00                                         ....

0000014b <__c.4558>:
     14b:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     15b:	6f 72 20 28 53 65 74 20 50 72 6f 74 6f 63 6f 6c     or (Set Protocol
     16b:	29 2e 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43 6f     )... -- Error Co
     17b:	64 65 3a 20 25 64 0d 0a 1b 5b 33 37 6d 00           de: %d...[37m.

00000189 <__c.4555>:
     189:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     199:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     1a9:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     1b9:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     1c9:	37 6d 00                                            7m.

000001cc <__c.4553>:
     1cc:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     1dc:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

000001e6 <__c.4551>:
     1e6:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     1f6:	69 63 65 2e 0d 0a 00                                ice....

000001fd <__c.4549>:
     1fd:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     20d:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     21d:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

00000227 <__c.4546>:
     227:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     237:	61 74 61 2e 0d 0a 00                                ata....

0000023e <__c.4541>:
     23e:	1b 5b 33 32 6d 44 65 76 69 63 65 20 55 6e 61 74     .[32mDevice Unat
     24e:	74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00        tached....[37m.

0000025d <__c.4536>:
     25d:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     26d:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

0000027a <__c.4523>:
     27a:	1b 5b 33 36 6d 4d 6f 75 73 65 20 48 49 44 20 48     .[36mMouse HID H
     28a:	6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67     ost Demo running
     29a:	2e 0d 0a 1b 5b 33 37 6d 00 00                       ....[37m..

000002a4 <__ctors_end>:
     2a4:	11 24       	eor	r1, r1
     2a6:	1f be       	out	0x3f, r1	; 63
     2a8:	cf ef       	ldi	r28, 0xFF	; 255
     2aa:	d0 e2       	ldi	r29, 0x20	; 32
     2ac:	de bf       	out	0x3e, r29	; 62
     2ae:	cd bf       	out	0x3d, r28	; 61

000002b0 <__do_copy_data>:
     2b0:	11 e0       	ldi	r17, 0x01	; 1
     2b2:	a0 e0       	ldi	r26, 0x00	; 0
     2b4:	b1 e0       	ldi	r27, 0x01	; 1
     2b6:	e6 e2       	ldi	r30, 0x26	; 38
     2b8:	f9 e1       	ldi	r31, 0x19	; 25
     2ba:	00 e0       	ldi	r16, 0x00	; 0
     2bc:	0b bf       	out	0x3b, r16	; 59
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <__do_copy_data+0x14>
     2c0:	07 90       	elpm	r0, Z+
     2c2:	0d 92       	st	X+, r0
     2c4:	aa 31       	cpi	r26, 0x1A	; 26
     2c6:	b1 07       	cpc	r27, r17
     2c8:	d9 f7       	brne	.-10     	; 0x2c0 <__do_copy_data+0x10>

000002ca <__do_clear_bss>:
     2ca:	11 e0       	ldi	r17, 0x01	; 1
     2cc:	aa e1       	ldi	r26, 0x1A	; 26
     2ce:	b1 e0       	ldi	r27, 0x01	; 1
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <.do_clear_bss_start>

000002d2 <.do_clear_bss_loop>:
     2d2:	1d 92       	st	X+, r1

000002d4 <.do_clear_bss_start>:
     2d4:	ac 33       	cpi	r26, 0x3C	; 60
     2d6:	b1 07       	cpc	r27, r17
     2d8:	e1 f7       	brne	.-8      	; 0x2d2 <.do_clear_bss_loop>
     2da:	8d d1       	rcall	.+794    	; 0x5f6 <main>
     2dc:	0c 94 91 0c 	jmp	0x1922	; 0x1922 <_exit>

000002e0 <__bad_interrupt>:
     2e0:	8f ce       	rjmp	.-738    	; 0x0 <__vectors>

000002e2 <MouseHost_Task>:

/** Reads in and processes the next report from the attached device, displaying the report
 *  contents on the board LEDs and via the serial port.
 */
void MouseHost_Task(void)
{
     2e2:	df 93       	push	r29
     2e4:	cf 93       	push	r28
     2e6:	00 d0       	rcall	.+0      	; 0x2e8 <MouseHost_Task+0x6>
     2e8:	0f 92       	push	r0
     2ea:	cd b7       	in	r28, 0x3d	; 61
     2ec:	de b7       	in	r29, 0x3e	; 62
	if (USB_HostState != HOST_STATE_Configured)
     2ee:	80 91 27 01 	lds	r24, 0x0127
     2f2:	8b 30       	cpi	r24, 0x0B	; 11
     2f4:	09 f0       	breq	.+2      	; 0x2f8 <MouseHost_Task+0x16>
     2f6:	67 c0       	rjmp	.+206    	; 0x3c6 <MouseHost_Task+0xe4>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     2fe:	80 91 a9 00 	lds	r24, 0x00A9
     302:	8f 7b       	andi	r24, 0xBF	; 191
     304:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     308:	80 91 a6 00 	lds	r24, 0x00A6

	/* Unfreeze mouse data pipe */
	Pipe_Unfreeze();

	/* Check to see if a packet has been received */
	if (!(Pipe_IsINReceived()))
     30c:	80 fd       	sbrc	r24, 0
     30e:	04 c0       	rjmp	.+8      	; 0x318 <MouseHost_Task+0x36>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     310:	8b b1       	in	r24, 0x0b	; 11
     312:	8f 70       	andi	r24, 0x0F	; 15
     314:	8b b9       	out	0x0b, r24	; 11
     316:	52 c0       	rjmp	.+164    	; 0x3bc <MouseHost_Task+0xda>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     318:	80 91 a6 00 	lds	r24, 0x00A6

		return;
	}

	/* Ensure pipe contains data before trying to read from it */
	if (Pipe_IsReadWriteAllowed())
     31c:	85 ff       	sbrs	r24, 5
     31e:	49 c0       	rjmp	.+146    	; 0x3b2 <MouseHost_Task+0xd0>
	{
		/* Read in mouse report data */
		Pipe_Read_Stream_LE(&MouseReport, sizeof(MouseReport), NULL);
     320:	ce 01       	movw	r24, r28
     322:	01 96       	adiw	r24, 0x01	; 1
     324:	63 e0       	ldi	r22, 0x03	; 3
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	40 e0       	ldi	r20, 0x00	; 0
     32a:	50 e0       	ldi	r21, 0x00	; 0
     32c:	78 d5       	rcall	.+2800   	; 0xe1e <Pipe_Read_Stream_LE>

		/* Alter status LEDs according to mouse X movement */
		if (MouseReport.X > 0)
     32e:	3a 81       	ldd	r19, Y+2	; 0x02
     330:	13 16       	cp	r1, r19
     332:	14 f4       	brge	.+4      	; 0x338 <MouseHost_Task+0x56>
     334:	90 e1       	ldi	r25, 0x10	; 16
     336:	05 c0       	rjmp	.+10     	; 0x342 <MouseHost_Task+0x60>
		  LEDMask |= LEDS_LED1;
		else if (MouseReport.X < 0)
     338:	33 23       	and	r19, r19
     33a:	11 f0       	breq	.+4      	; 0x340 <MouseHost_Task+0x5e>
     33c:	90 e2       	ldi	r25, 0x20	; 32
     33e:	01 c0       	rjmp	.+2      	; 0x342 <MouseHost_Task+0x60>
     340:	90 e0       	ldi	r25, 0x00	; 0
		  LEDMask |= LEDS_LED2;

		/* Alter status LEDs according to mouse Y movement */
		if (MouseReport.Y > 0)
     342:	2b 81       	ldd	r18, Y+3	; 0x03
     344:	12 16       	cp	r1, r18
     346:	14 f4       	brge	.+4      	; 0x34c <MouseHost_Task+0x6a>
		  LEDMask |= LEDS_LED3;
     348:	90 68       	ori	r25, 0x80	; 128
     34a:	02 c0       	rjmp	.+4      	; 0x350 <MouseHost_Task+0x6e>
		else if (MouseReport.Y < 0)
     34c:	21 11       	cpse	r18, r1
		  LEDMask |= LEDS_LED4;
     34e:	90 64       	ori	r25, 0x40	; 64

		/* Alter status LEDs according to mouse button position */
		if (MouseReport.Button)
     350:	49 81       	ldd	r20, Y+1	; 0x01
     352:	41 11       	cpse	r20, r1
     354:	90 ef       	ldi	r25, 0xF0	; 240
     356:	8b b1       	in	r24, 0x0b	; 11
     358:	8f 70       	andi	r24, 0x0F	; 15
     35a:	98 2b       	or	r25, r24
     35c:	9b b9       	out	0x0b, r25	; 11
		  LEDMask  = LEDS_ALL_LEDS;

		LEDs_SetAllLEDs(LEDMask);

		/* Print mouse report data through the serial port */
		printf_P(PSTR("dX:%2d dY:%2d Button:%d\r\n"), MouseReport.X,
     35e:	8d b7       	in	r24, 0x3d	; 61
     360:	9e b7       	in	r25, 0x3e	; 62
     362:	08 97       	sbiw	r24, 0x08	; 8
     364:	0f b6       	in	r0, 0x3f	; 63
     366:	f8 94       	cli
     368:	9e bf       	out	0x3e, r25	; 62
     36a:	0f be       	out	0x3f, r0	; 63
     36c:	8d bf       	out	0x3d, r24	; 61
     36e:	ed b7       	in	r30, 0x3d	; 61
     370:	fe b7       	in	r31, 0x3e	; 62
     372:	31 96       	adiw	r30, 0x01	; 1
     374:	88 e9       	ldi	r24, 0x98	; 152
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	ad b7       	in	r26, 0x3d	; 61
     37a:	be b7       	in	r27, 0x3e	; 62
     37c:	12 96       	adiw	r26, 0x02	; 2
     37e:	9c 93       	st	X, r25
     380:	8e 93       	st	-X, r24
     382:	11 97       	sbiw	r26, 0x01	; 1
     384:	83 2f       	mov	r24, r19
     386:	99 27       	eor	r25, r25
     388:	87 fd       	sbrc	r24, 7
     38a:	90 95       	com	r25
     38c:	93 83       	std	Z+3, r25	; 0x03
     38e:	82 83       	std	Z+2, r24	; 0x02
     390:	82 2f       	mov	r24, r18
     392:	99 27       	eor	r25, r25
     394:	87 fd       	sbrc	r24, 7
     396:	90 95       	com	r25
     398:	95 83       	std	Z+5, r25	; 0x05
     39a:	84 83       	std	Z+4, r24	; 0x04
     39c:	46 83       	std	Z+6, r20	; 0x06
     39e:	17 82       	std	Z+7, r1	; 0x07
     3a0:	d0 d7       	rcall	.+4000   	; 0x1342 <printf_P>
     3a2:	8d b7       	in	r24, 0x3d	; 61
     3a4:	9e b7       	in	r25, 0x3e	; 62
     3a6:	08 96       	adiw	r24, 0x08	; 8
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	f8 94       	cli
     3ac:	9e bf       	out	0x3e, r25	; 62
     3ae:	0f be       	out	0x3f, r0	; 63
     3b0:	8d bf       	out	0x3d, r24	; 61
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     3b2:	80 91 a6 00 	lds	r24, 0x00A6
     3b6:	8e 77       	andi	r24, 0x7E	; 126
     3b8:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     3bc:	80 91 a9 00 	lds	r24, 0x00A9
     3c0:	80 64       	ori	r24, 0x40	; 64
     3c2:	80 93 a9 00 	sts	0x00A9, r24
	/* Clear the IN endpoint, ready for next data packet */
	Pipe_ClearIN();

	/* Refreeze mouse data pipe */
	Pipe_Freeze();
}
     3c6:	0f 90       	pop	r0
     3c8:	0f 90       	pop	r0
     3ca:	0f 90       	pop	r0
     3cc:	cf 91       	pop	r28
     3ce:	df 91       	pop	r29
     3d0:	08 95       	ret

000003d2 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     3d2:	90 91 27 01 	lds	r25, 0x0127
     3d6:	2d b7       	in	r18, 0x3d	; 61
     3d8:	3e b7       	in	r19, 0x3e	; 62
     3da:	28 50       	subi	r18, 0x08	; 8
     3dc:	30 40       	sbci	r19, 0x00	; 0
     3de:	0f b6       	in	r0, 0x3f	; 63
     3e0:	f8 94       	cli
     3e2:	3e bf       	out	0x3e, r19	; 62
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	2d bf       	out	0x3d, r18	; 61
     3e8:	ed b7       	in	r30, 0x3d	; 61
     3ea:	fe b7       	in	r31, 0x3e	; 62
     3ec:	31 96       	adiw	r30, 0x01	; 1
     3ee:	22 eb       	ldi	r18, 0xB2	; 178
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	ad b7       	in	r26, 0x3d	; 61
     3f4:	be b7       	in	r27, 0x3e	; 62
     3f6:	12 96       	adiw	r26, 0x02	; 2
     3f8:	3c 93       	st	X, r19
     3fa:	2e 93       	st	-X, r18
     3fc:	11 97       	sbiw	r26, 0x01	; 1
     3fe:	82 83       	std	Z+2, r24	; 0x02
     400:	13 82       	std	Z+3, r1	; 0x03
     402:	64 83       	std	Z+4, r22	; 0x04
     404:	15 82       	std	Z+5, r1	; 0x05
     406:	96 83       	std	Z+6, r25	; 0x06
     408:	17 82       	std	Z+7, r1	; 0x07
     40a:	9b d7       	rcall	.+3894   	; 0x1342 <printf_P>
     40c:	8b b1       	in	r24, 0x0b	; 11
     40e:	8f 70       	andi	r24, 0x0F	; 15
     410:	80 69       	ori	r24, 0x90	; 144
     412:	8b b9       	out	0x0b, r24	; 11
     414:	2d b7       	in	r18, 0x3d	; 61
     416:	3e b7       	in	r19, 0x3e	; 62
     418:	28 5f       	subi	r18, 0xF8	; 248
     41a:	3f 4f       	sbci	r19, 0xFF	; 255
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	f8 94       	cli
     420:	3e bf       	out	0x3e, r19	; 62
     422:	0f be       	out	0x3f, r0	; 63
     424:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     426:	08 95       	ret

00000428 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     428:	1f 93       	push	r17
     42a:	18 2f       	mov	r17, r24
	USB_Disable();
     42c:	40 d4       	rcall	.+2176   	; 0xcae <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     42e:	00 d0       	rcall	.+0      	; 0x430 <EVENT_USB_Host_HostError+0x8>
     430:	00 d0       	rcall	.+0      	; 0x432 <EVENT_USB_Host_HostError+0xa>
     432:	ed b7       	in	r30, 0x3d	; 61
     434:	fe b7       	in	r31, 0x3e	; 62
     436:	31 96       	adiw	r30, 0x01	; 1
     438:	88 e0       	ldi	r24, 0x08	; 8
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	ad b7       	in	r26, 0x3d	; 61
     43e:	be b7       	in	r27, 0x3e	; 62
     440:	12 96       	adiw	r26, 0x02	; 2
     442:	9c 93       	st	X, r25
     444:	8e 93       	st	-X, r24
     446:	11 97       	sbiw	r26, 0x01	; 1
     448:	12 83       	std	Z+2, r17	; 0x02
     44a:	13 82       	std	Z+3, r1	; 0x03
     44c:	7a d7       	rcall	.+3828   	; 0x1342 <printf_P>
     44e:	8b b1       	in	r24, 0x0b	; 11
     450:	8f 70       	andi	r24, 0x0F	; 15
     452:	80 69       	ori	r24, 0x90	; 144
     454:	8b b9       	out	0x0b, r24	; 11
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	0f 90       	pop	r0
     45e:	ff cf       	rjmp	.-2      	; 0x45e <EVENT_USB_Host_HostError+0x36>

00000460 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Unattached.\r\n" ESC_FG_WHITE));
     460:	8e e3       	ldi	r24, 0x3E	; 62
     462:	92 e0       	ldi	r25, 0x02	; 2
     464:	90 d7       	rcall	.+3872   	; 0x1386 <puts_P>
     466:	8b b1       	in	r24, 0x0b	; 11
     468:	8f 70       	andi	r24, 0x0F	; 15
     46a:	80 61       	ori	r24, 0x10	; 16
     46c:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     46e:	08 95       	ret

00000470 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     470:	8d e5       	ldi	r24, 0x5D	; 93
     472:	92 e0       	ldi	r25, 0x02	; 2
     474:	88 d7       	rcall	.+3856   	; 0x1386 <puts_P>
     476:	8b b1       	in	r24, 0x0b	; 11
     478:	8f 70       	andi	r24, 0x0F	; 15
     47a:	80 6a       	ori	r24, 0xA0	; 160
     47c:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     47e:	08 95       	ret

00000480 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     480:	1f 93       	push	r17
	puts_P(PSTR("Getting Config Data.\r\n"));
     482:	87 e2       	ldi	r24, 0x27	; 39
     484:	92 e0       	ldi	r25, 0x02	; 2
     486:	7f d7       	rcall	.+3838   	; 0x1386 <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     488:	dc d0       	rcall	.+440    	; 0x642 <ProcessConfigurationDescriptor>
     48a:	18 2f       	mov	r17, r24
     48c:	88 23       	and	r24, r24
     48e:	b9 f0       	breq	.+46     	; 0x4be <EVENT_USB_Host_DeviceEnumerationComplete+0x3e>
	{
		if (ErrorCode == ControlError)
     490:	81 30       	cpi	r24, 0x01	; 1
     492:	19 f4       	brne	.+6      	; 0x49a <EVENT_USB_Host_DeviceEnumerationComplete+0x1a>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     494:	8d ef       	ldi	r24, 0xFD	; 253
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	02 c0       	rjmp	.+4      	; 0x49e <EVENT_USB_Host_DeviceEnumerationComplete+0x1e>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     49a:	86 ee       	ldi	r24, 0xE6	; 230
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	73 d7       	rcall	.+3814   	; 0x1386 <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     4a0:	00 d0       	rcall	.+0      	; 0x4a2 <EVENT_USB_Host_DeviceEnumerationComplete+0x22>
     4a2:	00 d0       	rcall	.+0      	; 0x4a4 <EVENT_USB_Host_DeviceEnumerationComplete+0x24>
     4a4:	ed b7       	in	r30, 0x3d	; 61
     4a6:	fe b7       	in	r31, 0x3e	; 62
     4a8:	31 96       	adiw	r30, 0x01	; 1
     4aa:	8c ec       	ldi	r24, 0xCC	; 204
     4ac:	91 e0       	ldi	r25, 0x01	; 1
     4ae:	ad b7       	in	r26, 0x3d	; 61
     4b0:	be b7       	in	r27, 0x3e	; 62
     4b2:	12 96       	adiw	r26, 0x02	; 2
     4b4:	9c 93       	st	X, r25
     4b6:	8e 93       	st	-X, r24
     4b8:	11 97       	sbiw	r26, 0x01	; 1
     4ba:	12 83       	std	Z+2, r17	; 0x02
     4bc:	13 c0       	rjmp	.+38     	; 0x4e4 <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	eb d6       	rcall	.+3542   	; 0x1298 <USB_Host_SetDeviceConfiguration>
     4c2:	28 2f       	mov	r18, r24
     4c4:	88 23       	and	r24, r24
     4c6:	c9 f0       	breq	.+50     	; 0x4fa <EVENT_USB_Host_DeviceEnumerationComplete+0x7a>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     4c8:	00 d0       	rcall	.+0      	; 0x4ca <EVENT_USB_Host_DeviceEnumerationComplete+0x4a>
     4ca:	00 d0       	rcall	.+0      	; 0x4cc <EVENT_USB_Host_DeviceEnumerationComplete+0x4c>
     4cc:	ed b7       	in	r30, 0x3d	; 61
     4ce:	fe b7       	in	r31, 0x3e	; 62
     4d0:	31 96       	adiw	r30, 0x01	; 1
     4d2:	89 e8       	ldi	r24, 0x89	; 137
     4d4:	91 e0       	ldi	r25, 0x01	; 1
     4d6:	ad b7       	in	r26, 0x3d	; 61
     4d8:	be b7       	in	r27, 0x3e	; 62
     4da:	12 96       	adiw	r26, 0x02	; 2
     4dc:	9c 93       	st	X, r25
     4de:	8e 93       	st	-X, r24
     4e0:	11 97       	sbiw	r26, 0x01	; 1
     4e2:	22 83       	std	Z+2, r18	; 0x02
     4e4:	13 82       	std	Z+3, r1	; 0x03
     4e6:	2d d7       	rcall	.+3674   	; 0x1342 <printf_P>
     4e8:	8b b1       	in	r24, 0x0b	; 11
     4ea:	8f 70       	andi	r24, 0x0F	; 15
     4ec:	80 69       	ori	r24, 0x90	; 144
     4ee:	8b b9       	out	0x0b, r24	; 11
     4f0:	0f 90       	pop	r0
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	0f 90       	pop	r0
     4f8:	33 c0       	rjmp	.+102    	; 0x560 <EVENT_USB_Host_DeviceEnumerationComplete+0xe0>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	/* HID class request to set the mouse protocol to the Boot Protocol */
	USB_ControlRequest = (USB_Request_Header_t)
     4fa:	af e1       	ldi	r26, 0x1F	; 31
     4fc:	b1 e0       	ldi	r27, 0x01	; 1
     4fe:	e0 e0       	ldi	r30, 0x00	; 0
     500:	f1 e0       	ldi	r31, 0x01	; 1
     502:	88 e0       	ldi	r24, 0x08	; 8
     504:	01 90       	ld	r0, Z+
     506:	0d 92       	st	X+, r0
     508:	81 50       	subi	r24, 0x01	; 1
     50a:	e1 f7       	brne	.-8      	; 0x504 <EVENT_USB_Host_DeviceEnumerationComplete+0x84>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     50c:	10 92 a7 00 	sts	0x00A7, r1

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	/* Send the request, display error and wait for device detach if request fails */
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	a3 d5       	rcall	.+2886   	; 0x105c <USB_Host_SendControlRequest>
     516:	28 2f       	mov	r18, r24
     518:	88 23       	and	r24, r24
     51a:	d9 f0       	breq	.+54     	; 0x552 <EVENT_USB_Host_DeviceEnumerationComplete+0xd2>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Protocol).\r\n"
     51c:	00 d0       	rcall	.+0      	; 0x51e <EVENT_USB_Host_DeviceEnumerationComplete+0x9e>
     51e:	00 d0       	rcall	.+0      	; 0x520 <EVENT_USB_Host_DeviceEnumerationComplete+0xa0>
     520:	ed b7       	in	r30, 0x3d	; 61
     522:	fe b7       	in	r31, 0x3e	; 62
     524:	31 96       	adiw	r30, 0x01	; 1
     526:	8b e4       	ldi	r24, 0x4B	; 75
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	ad b7       	in	r26, 0x3d	; 61
     52c:	be b7       	in	r27, 0x3e	; 62
     52e:	12 96       	adiw	r26, 0x02	; 2
     530:	9c 93       	st	X, r25
     532:	8e 93       	st	-X, r24
     534:	11 97       	sbiw	r26, 0x01	; 1
     536:	22 83       	std	Z+2, r18	; 0x02
     538:	13 82       	std	Z+3, r1	; 0x03
     53a:	03 d7       	rcall	.+3590   	; 0x1342 <printf_P>
     53c:	8b b1       	in	r24, 0x0b	; 11
     53e:	8f 70       	andi	r24, 0x0F	; 15
     540:	80 69       	ori	r24, 0x90	; 144
     542:	8b b9       	out	0x0b, r24	; 11
								 " -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
     544:	0f 90       	pop	r0
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	a4 d6       	rcall	.+3400   	; 0x1298 <USB_Host_SetDeviceConfiguration>
     550:	07 c0       	rjmp	.+14     	; 0x560 <EVENT_USB_Host_DeviceEnumerationComplete+0xe0>
		return;
	}

	puts_P(PSTR("Mouse Enumerated.\r\n"));
     552:	87 e3       	ldi	r24, 0x37	; 55
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	17 d7       	rcall	.+3630   	; 0x1386 <puts_P>
     558:	8b b1       	in	r24, 0x0b	; 11
     55a:	8f 70       	andi	r24, 0x0F	; 15
     55c:	80 66       	ori	r24, 0x60	; 96
     55e:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     560:	1f 91       	pop	r17
     562:	08 95       	ret

00000564 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     564:	84 b7       	in	r24, 0x34	; 52
     566:	87 7f       	andi	r24, 0xF7	; 247
     568:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     56a:	28 e1       	ldi	r18, 0x18	; 24
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	f8 94       	cli
     570:	20 93 60 00 	sts	0x0060, r18
     574:	10 92 60 00 	sts	0x0060, r1
     578:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	80 e8       	ldi	r24, 0x80	; 128
     57e:	0f b6       	in	r0, 0x3f	; 63
     580:	f8 94       	cli
     582:	80 93 61 00 	sts	0x0061, r24
     586:	90 93 61 00 	sts	0x0061, r25
     58a:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     58c:	83 e3       	ldi	r24, 0x33	; 51
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	90 93 cd 00 	sts	0x00CD, r25
     594:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     598:	86 e0       	ldi	r24, 0x06	; 6
     59a:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     59e:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     5a2:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     5a6:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     5a8:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     5aa:	8a b1       	in	r24, 0x0a	; 10
     5ac:	80 6f       	ori	r24, 0xF0	; 240
     5ae:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     5b0:	8b b1       	in	r24, 0x0b	; 11
     5b2:	8f 70       	andi	r24, 0x0F	; 15
     5b4:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     5b6:	72 d3       	rcall	.+1764   	; 0xc9c <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     5b8:	e8 e2       	ldi	r30, 0x28	; 40
     5ba:	f1 e0       	ldi	r31, 0x01	; 1
     5bc:	f0 93 37 01 	sts	0x0137, r31
     5c0:	e0 93 36 01 	sts	0x0136, r30
					stdout = Stream;
     5c4:	f0 93 39 01 	sts	0x0139, r31
     5c8:	e0 93 38 01 	sts	0x0138, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     5cc:	8e e0       	ldi	r24, 0x0E	; 14
     5ce:	df 01       	movw	r26, r30
     5d0:	1d 92       	st	X+, r1
     5d2:	8a 95       	dec	r24
     5d4:	e9 f7       	brne	.-6      	; 0x5d0 <SetupHardware+0x6c>
     5d6:	83 e0       	ldi	r24, 0x03	; 3
     5d8:	80 93 2b 01 	sts	0x012B, r24
     5dc:	83 e8       	ldi	r24, 0x83	; 131
     5de:	99 e0       	ldi	r25, 0x09	; 9
     5e0:	90 93 31 01 	sts	0x0131, r25
     5e4:	80 93 30 01 	sts	0x0130, r24
     5e8:	8d e8       	ldi	r24, 0x8D	; 141
     5ea:	99 e0       	ldi	r25, 0x09	; 9
     5ec:	90 93 33 01 	sts	0x0133, r25
     5f0:	80 93 32 01 	sts	0x0132, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     5f4:	08 95       	ret

000005f6 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     5f6:	b6 df       	rcall	.-148    	; 0x564 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Mouse HID Host Demo running.\r\n" ESC_FG_WHITE));
     5f8:	8a e7       	ldi	r24, 0x7A	; 122
     5fa:	92 e0       	ldi	r25, 0x02	; 2
     5fc:	c4 d6       	rcall	.+3464   	; 0x1386 <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     5fe:	8b b1       	in	r24, 0x0b	; 11
     600:	8f 70       	andi	r24, 0x0F	; 15
     602:	80 61       	ori	r24, 0x10	; 16
     604:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     606:	78 94       	sei

	for (;;)
	{
		MouseHost_Task();
     608:	6c de       	rcall	.-808    	; 0x2e2 <MouseHost_Task>

		USB_USBTask();
     60a:	6b d6       	rcall	.+3286   	; 0x12e2 <USB_USBTask>
     60c:	fd cf       	rjmp	.-6      	; 0x608 <main+0x12>

0000060e <DComp_NextMouseInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Mouse HID Class and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextMouseInterface(void* CurrentDescriptor)
{
     60e:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	/* Determine if the current descriptor is an interface descriptor */
	if (Header->Type == DTYPE_Interface)
     610:	81 81       	ldd	r24, Z+1	; 0x01
     612:	84 30       	cpi	r24, 0x04	; 4
     614:	41 f4       	brne	.+16     	; 0x626 <DComp_NextMouseInterface+0x18>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the HID descriptor class and protocol, break out if correct class/protocol interface found */
		if ((Interface->Class    == HID_CSCP_HIDClass) &&
     616:	85 81       	ldd	r24, Z+5	; 0x05
     618:	83 30       	cpi	r24, 0x03	; 3
     61a:	29 f4       	brne	.+10     	; 0x626 <DComp_NextMouseInterface+0x18>
     61c:	87 81       	ldd	r24, Z+7	; 0x07
     61e:	82 30       	cpi	r24, 0x02	; 2
     620:	11 f4       	brne	.+4      	; 0x626 <DComp_NextMouseInterface+0x18>
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	08 95       	ret
     626:	82 e0       	ldi	r24, 0x02	; 2
		}
	}

	/* Current descriptor does not match what this comparator is looking for */
	return DESCRIPTOR_SEARCH_NotFound;
}
     628:	08 95       	ret

0000062a <DComp_NextMouseInterfaceDataEndpoint>:
uint8_t DComp_NextMouseInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	/* Determine the type of the current descriptor */
	if (Header->Type == DTYPE_Endpoint)
     62a:	fc 01       	movw	r30, r24
     62c:	81 81       	ldd	r24, Z+1	; 0x01
     62e:	85 30       	cpi	r24, 0x05	; 5
     630:	11 f4       	brne	.+4      	; 0x636 <DComp_NextMouseInterfaceDataEndpoint+0xc>
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	08 95       	ret
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
     636:	84 30       	cpi	r24, 0x04	; 4
     638:	11 f0       	breq	.+4      	; 0x63e <DComp_NextMouseInterfaceDataEndpoint+0x14>
     63a:	82 e0       	ldi	r24, 0x02	; 2
     63c:	08 95       	ret
     63e:	81 e0       	ldi	r24, 0x01	; 1
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}
     640:	08 95       	ret

00000642 <ProcessConfigurationDescriptor>:
 *  This routine searches for a HID interface descriptor containing at least one Interrupt type IN endpoint.
 *
 *  \return An error code from the \ref MouseHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     642:	af 92       	push	r10
     644:	bf 92       	push	r11
     646:	cf 92       	push	r12
     648:	df 92       	push	r13
     64a:	ef 92       	push	r14
     64c:	ff 92       	push	r15
     64e:	0f 93       	push	r16
     650:	1f 93       	push	r17
     652:	df 93       	push	r29
     654:	cf 93       	push	r28
     656:	cd b7       	in	r28, 0x3d	; 61
     658:	de b7       	in	r29, 0x3e	; 62
     65a:	c4 50       	subi	r28, 0x04	; 4
     65c:	d2 40       	sbci	r29, 0x02	; 2
     65e:	0f b6       	in	r0, 0x3f	; 63
     660:	f8 94       	cli
     662:	de bf       	out	0x3e, r29	; 62
     664:	0f be       	out	0x3f, r0	; 63
     666:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     668:	ae 01       	movw	r20, r28
     66a:	4b 5f       	subi	r20, 0xFB	; 251
     66c:	5f 4f       	sbci	r21, 0xFF	; 255
     66e:	5a 83       	std	Y+2, r21	; 0x02
     670:	49 83       	std	Y+1, r20	; 0x01

	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     672:	83 e0       	ldi	r24, 0x03	; 3
     674:	c8 2e       	mov	r12, r24
     676:	d1 2c       	mov	r13, r1
     678:	cc 0e       	add	r12, r28
     67a:	dd 1e       	adc	r13, r29
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	b6 01       	movw	r22, r12
     680:	20 e0       	ldi	r18, 0x00	; 0
     682:	32 e0       	ldi	r19, 0x02	; 2
     684:	67 d4       	rcall	.+2254   	; 0xf54 <USB_Host_GetDeviceConfigDescriptor>
     686:	85 30       	cpi	r24, 0x05	; 5
     688:	29 f0       	breq	.+10     	; 0x694 <ProcessConfigurationDescriptor+0x52>
     68a:	86 30       	cpi	r24, 0x06	; 6
     68c:	69 f0       	breq	.+26     	; 0x6a8 <ProcessConfigurationDescriptor+0x66>
     68e:	88 23       	and	r24, r24
     690:	19 f0       	breq	.+6      	; 0x698 <ProcessConfigurationDescriptor+0x56>
     692:	0c c0       	rjmp	.+24     	; 0x6ac <ProcessConfigurationDescriptor+0x6a>
     694:	82 e0       	ldi	r24, 0x02	; 2
     696:	37 c0       	rjmp	.+110    	; 0x706 <ProcessConfigurationDescriptor+0xc4>
     698:	00 e0       	ldi	r16, 0x00	; 0
     69a:	10 e0       	ldi	r17, 0x00	; 0
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     69c:	56 01       	movw	r10, r12
     69e:	7e 01       	movw	r14, r28
     6a0:	08 94       	sec
     6a2:	e1 1c       	adc	r14, r1
     6a4:	f1 1c       	adc	r15, r1
     6a6:	04 c0       	rjmp	.+8      	; 0x6b0 <ProcessConfigurationDescriptor+0x6e>

	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     6a8:	83 e0       	ldi	r24, 0x03	; 3
     6aa:	2d c0       	rjmp	.+90     	; 0x706 <ProcessConfigurationDescriptor+0xc4>
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	2b c0       	rjmp	.+86     	; 0x706 <ProcessConfigurationDescriptor+0xc4>
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     6b0:	01 15       	cp	r16, r1
     6b2:	11 05       	cpc	r17, r1
     6b4:	39 f0       	breq	.+14     	; 0x6c4 <ProcessConfigurationDescriptor+0x82>
     6b6:	c5 01       	movw	r24, r10
     6b8:	b7 01       	movw	r22, r14
     6ba:	45 e1       	ldi	r20, 0x15	; 21
     6bc:	53 e0       	ldi	r21, 0x03	; 3
     6be:	06 d4       	rcall	.+2060   	; 0xecc <USB_GetNextDescriptorComp>
     6c0:	88 23       	and	r24, r24
     6c2:	61 f0       	breq	.+24     	; 0x6dc <ProcessConfigurationDescriptor+0x9a>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextMouseInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     6c4:	c5 01       	movw	r24, r10
     6c6:	b7 01       	movw	r22, r14
     6c8:	47 e0       	ldi	r20, 0x07	; 7
     6ca:	53 e0       	ldi	r21, 0x03	; 3
     6cc:	ff d3       	rcall	.+2046   	; 0xecc <USB_GetNextDescriptorComp>
     6ce:	88 23       	and	r24, r24
     6d0:	11 f0       	breq	.+4      	; 0x6d6 <ProcessConfigurationDescriptor+0x94>
     6d2:	84 e0       	ldi	r24, 0x04	; 4
     6d4:	18 c0       	rjmp	.+48     	; 0x706 <ProcessConfigurationDescriptor+0xc4>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			HIDInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     6d6:	09 81       	ldd	r16, Y+1	; 0x01
     6d8:	1a 81       	ldd	r17, Y+2	; 0x02
     6da:	ea cf       	rjmp	.-44     	; 0x6b0 <ProcessConfigurationDescriptor+0x6e>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     6dc:	c9 80       	ldd	r12, Y+1	; 0x01
     6de:	da 80       	ldd	r13, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     6e0:	f6 01       	movw	r30, r12
     6e2:	22 81       	ldd	r18, Z+2	; 0x02
     6e4:	27 ff       	sbrs	r18, 7
     6e6:	e4 cf       	rjmp	.-56     	; 0x6b0 <ProcessConfigurationDescriptor+0x6e>
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint))
     6e8:	c1 14       	cp	r12, r1
     6ea:	d1 04       	cpc	r13, r1
     6ec:	09 f3       	breq	.-62     	; 0x6b0 <ProcessConfigurationDescriptor+0x6e>
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		  DataINEndpoint = EndpointData;
	}

	/* Configure the HID data IN pipe */
	Pipe_ConfigurePipe(MOUSE_DATA_IN_PIPE, EP_TYPE_INTERRUPT, PIPE_TOKEN_IN,
     6ee:	04 81       	ldd	r16, Z+4	; 0x04
     6f0:	15 81       	ldd	r17, Z+5	; 0x05
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	63 e0       	ldi	r22, 0x03	; 3
     6f6:	40 e1       	ldi	r20, 0x10	; 16
     6f8:	ee 24       	eor	r14, r14
     6fa:	df d1       	rcall	.+958    	; 0xaba <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);
	Pipe_SetInterruptPeriod(DataINEndpoint->PollingIntervalMS);
     6fc:	f6 01       	movw	r30, r12
     6fe:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     700:	80 93 ad 00 	sts	0x00AD, r24
     704:	80 e0       	ldi	r24, 0x00	; 0

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     706:	cc 5f       	subi	r28, 0xFC	; 252
     708:	dd 4f       	sbci	r29, 0xFD	; 253
     70a:	0f b6       	in	r0, 0x3f	; 63
     70c:	f8 94       	cli
     70e:	de bf       	out	0x3e, r29	; 62
     710:	0f be       	out	0x3f, r0	; 63
     712:	cd bf       	out	0x3d, r28	; 61
     714:	cf 91       	pop	r28
     716:	df 91       	pop	r29
     718:	1f 91       	pop	r17
     71a:	0f 91       	pop	r16
     71c:	ff 90       	pop	r15
     71e:	ef 90       	pop	r14
     720:	df 90       	pop	r13
     722:	cf 90       	pop	r12
     724:	bf 90       	pop	r11
     726:	af 90       	pop	r10
     728:	08 95       	ret

0000072a <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     72a:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     72c:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     730:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     734:	80 91 a0 00 	lds	r24, 0x00A0
     738:	8f 7d       	andi	r24, 0xDF	; 223
     73a:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     73e:	80 91 9f 00 	lds	r24, 0x009F
     742:	8f 7d       	andi	r24, 0xDF	; 223
     744:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     748:	80 91 9e 00 	lds	r24, 0x009E
     74c:	81 60       	ori	r24, 0x01	; 1
     74e:	80 93 9e 00 	sts	0x009E, r24
     752:	28 c0       	rjmp	.+80     	; 0x7a4 <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     754:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     758:	85 ff       	sbrs	r24, 5
     75a:	06 c0       	rjmp	.+12     	; 0x768 <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     75c:	80 91 9f 00 	lds	r24, 0x009F
     760:	8f 7d       	andi	r24, 0xDF	; 223
     762:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     766:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     768:	80 91 27 01 	lds	r24, 0x0127
     76c:	81 30       	cpi	r24, 0x01	; 1
     76e:	11 f4       	brne	.+4      	; 0x774 <USB_Host_WaitMS+0x4a>
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	1a c0       	rjmp	.+52     	; 0x7a8 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     774:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     778:	84 ff       	sbrs	r24, 4
     77a:	09 c0       	rjmp	.+18     	; 0x78e <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     77c:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     780:	80 91 a6 00 	lds	r24, 0x00A6
     784:	8f 7e       	andi	r24, 0xEF	; 239
     786:	80 93 a6 00 	sts	0x00A6, r24
     78a:	92 e0       	ldi	r25, 0x02	; 2
     78c:	0d c0       	rjmp	.+26     	; 0x7a8 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     78e:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     792:	81 ff       	sbrs	r24, 1
     794:	07 c0       	rjmp	.+14     	; 0x7a4 <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     796:	80 91 a6 00 	lds	r24, 0x00A6
     79a:	8d 7f       	andi	r24, 0xFD	; 253
     79c:	80 93 a6 00 	sts	0x00A6, r24
     7a0:	93 e0       	ldi	r25, 0x03	; 3
     7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     7a4:	99 23       	and	r25, r25
     7a6:	b1 f6       	brne	.-84     	; 0x754 <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     7a8:	20 fd       	sbrc	r18, 0
     7aa:	05 c0       	rjmp	.+10     	; 0x7b6 <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     7ac:	80 91 9e 00 	lds	r24, 0x009E
     7b0:	8e 7f       	andi	r24, 0xFE	; 254
     7b2:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     7b6:	35 ff       	sbrs	r19, 5
     7b8:	05 c0       	rjmp	.+10     	; 0x7c4 <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     7ba:	80 91 a0 00 	lds	r24, 0x00A0
     7be:	80 62       	ori	r24, 0x20	; 32
     7c0:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     7c4:	89 2f       	mov	r24, r25
     7c6:	08 95       	ret

000007c8 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     7c8:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     7cc:	80 91 a0 00 	lds	r24, 0x00A0
     7d0:	8d 7f       	andi	r24, 0xFD	; 253
     7d2:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     7d6:	80 91 9e 00 	lds	r24, 0x009E
     7da:	82 60       	ori	r24, 0x02	; 2
     7dc:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     7e0:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     7e4:	81 fd       	sbrc	r24, 1
     7e6:	fc cf       	rjmp	.-8      	; 0x7e0 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     7e8:	80 91 9e 00 	lds	r24, 0x009E
     7ec:	81 60       	ori	r24, 0x01	; 1
     7ee:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     7f2:	10 92 1d 01 	sts	0x011D, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     7f6:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     7fa:	80 91 a0 00 	lds	r24, 0x00A0
     7fe:	8f 7d       	andi	r24, 0xDF	; 223
     800:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     804:	80 91 9f 00 	lds	r24, 0x009F
     808:	8f 7d       	andi	r24, 0xDF	; 223
     80a:	80 93 9f 00 	sts	0x009F, r24
     80e:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     810:	40 ed       	ldi	r20, 0xD0	; 208
     812:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     814:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     818:	85 ff       	sbrs	r24, 5
     81a:	0b c0       	rjmp	.+22     	; 0x832 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     81c:	80 91 9f 00 	lds	r24, 0x009F
     820:	8f 7d       	andi	r24, 0xDF	; 223
     822:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     826:	80 91 9f 00 	lds	r24, 0x009F
     82a:	8d 7f       	andi	r24, 0xFD	; 253
     82c:	80 93 9f 00 	sts	0x009F, r24
     830:	05 c0       	rjmp	.+10     	; 0x83c <USB_Host_ResetDevice+0x74>
     832:	ca 01       	movw	r24, r20
     834:	01 97       	sbiw	r24, 0x01	; 1
     836:	f1 f7       	brne	.-4      	; 0x834 <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     838:	21 50       	subi	r18, 0x01	; 1
     83a:	61 f7       	brne	.-40     	; 0x814 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     83c:	35 ff       	sbrs	r19, 5
     83e:	05 c0       	rjmp	.+10     	; 0x84a <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     840:	80 91 a0 00 	lds	r24, 0x00A0
     844:	80 62       	ori	r24, 0x20	; 32
     846:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     84a:	60 fd       	sbrc	r22, 0
     84c:	05 c0       	rjmp	.+10     	; 0x858 <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     84e:	80 91 9e 00 	lds	r24, 0x009E
     852:	8e 7f       	andi	r24, 0xFE	; 254
     854:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     858:	80 91 a0 00 	lds	r24, 0x00A0
     85c:	82 60       	ori	r24, 0x02	; 2
     85e:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     862:	08 95       	ret

00000864 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     864:	ef 92       	push	r14
     866:	0f 93       	push	r16
     868:	1f 93       	push	r17
     86a:	df 93       	push	r29
     86c:	cf 93       	push	r28
     86e:	cd b7       	in	r28, 0x3d	; 61
     870:	de b7       	in	r29, 0x3e	; 62
     872:	28 97       	sbiw	r28, 0x08	; 8
     874:	0f b6       	in	r0, 0x3f	; 63
     876:	f8 94       	cli
     878:	de bf       	out	0x3e, r29	; 62
     87a:	0f be       	out	0x3f, r0	; 63
     87c:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     87e:	80 91 27 01 	lds	r24, 0x0127
     882:	85 30       	cpi	r24, 0x05	; 5
     884:	09 f4       	brne	.+2      	; 0x888 <USB_Host_ProcessNextHostState+0x24>
     886:	94 c0       	rjmp	.+296    	; 0x9b0 <USB_Host_ProcessNextHostState+0x14c>
     888:	86 30       	cpi	r24, 0x06	; 6
     88a:	68 f4       	brcc	.+26     	; 0x8a6 <USB_Host_ProcessNextHostState+0x42>
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	b9 f1       	breq	.+110    	; 0x8fe <USB_Host_ProcessNextHostState+0x9a>
     890:	83 30       	cpi	r24, 0x03	; 3
     892:	18 f4       	brcc	.+6      	; 0x89a <USB_Host_ProcessNextHostState+0x36>
     894:	88 23       	and	r24, r24
     896:	a1 f0       	breq	.+40     	; 0x8c0 <USB_Host_ProcessNextHostState+0x5c>
     898:	04 c1       	rjmp	.+520    	; 0xaa2 <USB_Host_ProcessNextHostState+0x23e>
     89a:	83 30       	cpi	r24, 0x03	; 3
     89c:	d1 f1       	breq	.+116    	; 0x912 <USB_Host_ProcessNextHostState+0xae>
     89e:	84 30       	cpi	r24, 0x04	; 4
     8a0:	09 f0       	breq	.+2      	; 0x8a4 <USB_Host_ProcessNextHostState+0x40>
     8a2:	ff c0       	rjmp	.+510    	; 0xaa2 <USB_Host_ProcessNextHostState+0x23e>
     8a4:	5d c0       	rjmp	.+186    	; 0x960 <USB_Host_ProcessNextHostState+0xfc>
     8a6:	87 30       	cpi	r24, 0x07	; 7
     8a8:	09 f4       	brne	.+2      	; 0x8ac <USB_Host_ProcessNextHostState+0x48>
     8aa:	9b c0       	rjmp	.+310    	; 0x9e2 <USB_Host_ProcessNextHostState+0x17e>
     8ac:	87 30       	cpi	r24, 0x07	; 7
     8ae:	08 f4       	brcc	.+2      	; 0x8b2 <USB_Host_ProcessNextHostState+0x4e>
     8b0:	8a c0       	rjmp	.+276    	; 0x9c6 <USB_Host_ProcessNextHostState+0x162>
     8b2:	88 30       	cpi	r24, 0x08	; 8
     8b4:	09 f4       	brne	.+2      	; 0x8b8 <USB_Host_ProcessNextHostState+0x54>
     8b6:	b3 c0       	rjmp	.+358    	; 0xa1e <USB_Host_ProcessNextHostState+0x1ba>
     8b8:	89 30       	cpi	r24, 0x09	; 9
     8ba:	09 f0       	breq	.+2      	; 0x8be <USB_Host_ProcessNextHostState+0x5a>
     8bc:	f2 c0       	rjmp	.+484    	; 0xaa2 <USB_Host_ProcessNextHostState+0x23e>
     8be:	d7 c0       	rjmp	.+430    	; 0xa6e <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     8c0:	00 91 1b 01 	lds	r16, 0x011B
     8c4:	10 91 1c 01 	lds	r17, 0x011C
     8c8:	01 15       	cp	r16, r1
     8ca:	11 05       	cpc	r17, r1
     8cc:	09 f4       	brne	.+2      	; 0x8d0 <USB_Host_ProcessNextHostState+0x6c>
     8ce:	e9 c0       	rjmp	.+466    	; 0xaa2 <USB_Host_ProcessNextHostState+0x23e>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	2b df       	rcall	.-426    	; 0x72a <USB_Host_WaitMS>
     8d4:	68 2f       	mov	r22, r24
     8d6:	88 23       	and	r24, r24
     8d8:	31 f0       	breq	.+12     	; 0x8e6 <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
     8da:	80 91 1a 01 	lds	r24, 0x011A
     8de:	80 93 27 01 	sts	0x0127, r24
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	da c0       	rjmp	.+436    	; 0xa9a <USB_Host_ProcessNextHostState+0x236>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     8e6:	c8 01       	movw	r24, r16
     8e8:	01 97       	sbiw	r24, 0x01	; 1
     8ea:	90 93 1c 01 	sts	0x011C, r25
     8ee:	80 93 1b 01 	sts	0x011B, r24
     8f2:	89 2b       	or	r24, r25
     8f4:	09 f0       	breq	.+2      	; 0x8f8 <USB_Host_ProcessNextHostState+0x94>
     8f6:	d5 c0       	rjmp	.+426    	; 0xaa2 <USB_Host_ProcessNextHostState+0x23e>
				  USB_HostState = PostWaitState;
     8f8:	80 91 1a 01 	lds	r24, 0x011A
     8fc:	07 c0       	rjmp	.+14     	; 0x90c <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     8fe:	88 ee       	ldi	r24, 0xE8	; 232
     900:	93 e0       	ldi	r25, 0x03	; 3
     902:	90 93 1c 01 	sts	0x011C, r25
     906:	80 93 1b 01 	sts	0x011B, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     90a:	83 e0       	ldi	r24, 0x03	; 3
     90c:	80 93 27 01 	sts	0x0127, r24
     910:	c8 c0       	rjmp	.+400    	; 0xaa2 <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     912:	80 91 1b 01 	lds	r24, 0x011B
     916:	90 91 1c 01 	lds	r25, 0x011C
     91a:	01 97       	sbiw	r24, 0x01	; 1
     91c:	90 93 1c 01 	sts	0x011C, r25
     920:	80 93 1b 01 	sts	0x011B, r24
     924:	01 96       	adiw	r24, 0x01	; 1
     926:	29 f0       	breq	.+10     	; 0x932 <USB_Host_ProcessNextHostState+0xce>
     928:	80 ed       	ldi	r24, 0xD0	; 208
     92a:	97 e0       	ldi	r25, 0x07	; 7
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	f1 f7       	brne	.-4      	; 0x92c <USB_Host_ProcessNextHostState+0xc8>
     930:	b8 c0       	rjmp	.+368    	; 0xaa2 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     932:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     934:	80 91 d8 00 	lds	r24, 0x00D8
     938:	80 61       	ori	r24, 0x10	; 16
     93a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     93e:	80 91 dd 00 	lds	r24, 0x00DD
     942:	8b 7f       	andi	r24, 0xFB	; 251
     944:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     948:	80 91 d7 00 	lds	r24, 0x00D7
     94c:	80 61       	ori	r24, 0x10	; 16
     94e:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     952:	80 91 dd 00 	lds	r24, 0x00DD
     956:	82 60       	ori	r24, 0x02	; 2
     958:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     95c:	84 e0       	ldi	r24, 0x04	; 4
     95e:	d6 cf       	rjmp	.-84     	; 0x90c <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     960:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     964:	80 ff       	sbrs	r24, 0
     966:	9d c0       	rjmp	.+314    	; 0xaa2 <USB_Host_ProcessNextHostState+0x23e>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     968:	80 91 9f 00 	lds	r24, 0x009F
     96c:	8e 7f       	andi	r24, 0xFE	; 254
     96e:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     972:	80 91 9f 00 	lds	r24, 0x009F
     976:	8d 7f       	andi	r24, 0xFD	; 253
     978:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     97c:	80 91 df 00 	lds	r24, 0x00DF
     980:	8d 7f       	andi	r24, 0xFD	; 253
     982:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     986:	80 91 de 00 	lds	r24, 0x00DE
     98a:	82 60       	ori	r24, 0x02	; 2
     98c:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     990:	80 91 9e 00 	lds	r24, 0x009E
     994:	81 60       	ori	r24, 0x01	; 1
     996:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     99a:	ed d0       	rcall	.+474    	; 0xb76 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     99c:	10 92 27 01 	sts	0x0127, r1
     9a0:	84 e6       	ldi	r24, 0x64	; 100
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	90 93 1c 01 	sts	0x011C, r25
     9a8:	80 93 1b 01 	sts	0x011B, r24
     9ac:	85 e0       	ldi	r24, 0x05	; 5
     9ae:	5c c0       	rjmp	.+184    	; 0xa68 <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     9b0:	0b df       	rcall	.-490    	; 0x7c8 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     9b2:	10 92 27 01 	sts	0x0127, r1
     9b6:	88 ec       	ldi	r24, 0xC8	; 200
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	90 93 1c 01 	sts	0x011C, r25
     9be:	80 93 1b 01 	sts	0x011B, r24
     9c2:	86 e0       	ldi	r24, 0x06	; 6
     9c4:	51 c0       	rjmp	.+162    	; 0xa68 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	60 e0       	ldi	r22, 0x00	; 0
     9ca:	40 e0       	ldi	r20, 0x00	; 0
     9cc:	20 e0       	ldi	r18, 0x00	; 0
     9ce:	00 e4       	ldi	r16, 0x40	; 64
     9d0:	10 e0       	ldi	r17, 0x00	; 0
     9d2:	ee 24       	eor	r14, r14
     9d4:	72 d0       	rcall	.+228    	; 0xaba <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     9d6:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     9da:	87 ff       	sbrs	r24, 7
     9dc:	5c c0       	rjmp	.+184    	; 0xa96 <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     9de:	87 e0       	ldi	r24, 0x07	; 7
     9e0:	95 cf       	rjmp	.-214    	; 0x90c <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     9e2:	af e1       	ldi	r26, 0x1F	; 31
     9e4:	b1 e0       	ldi	r27, 0x01	; 1
     9e6:	e0 e1       	ldi	r30, 0x10	; 16
     9e8:	f1 e0       	ldi	r31, 0x01	; 1
     9ea:	88 e0       	ldi	r24, 0x08	; 8
     9ec:	01 90       	ld	r0, Z+
     9ee:	0d 92       	st	X+, r0
     9f0:	81 50       	subi	r24, 0x01	; 1
     9f2:	e1 f7       	brne	.-8      	; 0x9ec <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     9f4:	ce 01       	movw	r24, r28
     9f6:	01 96       	adiw	r24, 0x01	; 1
     9f8:	31 d3       	rcall	.+1634   	; 0x105c <USB_Host_SendControlRequest>
     9fa:	68 2f       	mov	r22, r24
     9fc:	88 23       	and	r24, r24
     9fe:	09 f0       	breq	.+2      	; 0xa02 <USB_Host_ProcessNextHostState+0x19e>
     a00:	48 c0       	rjmp	.+144    	; 0xa92 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     a02:	88 85       	ldd	r24, Y+8	; 0x08
     a04:	80 93 18 01 	sts	0x0118, r24

			USB_Host_ResetDevice();
     a08:	df de       	rcall	.-578    	; 0x7c8 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     a0a:	10 92 27 01 	sts	0x0127, r1
     a0e:	88 ec       	ldi	r24, 0xC8	; 200
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	90 93 1c 01 	sts	0x011C, r25
     a16:	80 93 1b 01 	sts	0x011B, r24
     a1a:	88 e0       	ldi	r24, 0x08	; 8
     a1c:	25 c0       	rjmp	.+74     	; 0xa68 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     a1e:	00 91 18 01 	lds	r16, 0x0118
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	40 e0       	ldi	r20, 0x00	; 0
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	10 e0       	ldi	r17, 0x00	; 0
     a2c:	ee 24       	eor	r14, r14
     a2e:	45 d0       	rcall	.+138    	; 0xaba <Pipe_ConfigurePipe>
     a30:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     a34:	87 ff       	sbrs	r24, 7
     a36:	2f c0       	rjmp	.+94     	; 0xa96 <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     a38:	af e1       	ldi	r26, 0x1F	; 31
     a3a:	b1 e0       	ldi	r27, 0x01	; 1
     a3c:	e8 e0       	ldi	r30, 0x08	; 8
     a3e:	f1 e0       	ldi	r31, 0x01	; 1
     a40:	88 e0       	ldi	r24, 0x08	; 8
     a42:	01 90       	ld	r0, Z+
     a44:	0d 92       	st	X+, r0
     a46:	81 50       	subi	r24, 0x01	; 1
     a48:	e1 f7       	brne	.-8      	; 0xa42 <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	06 d3       	rcall	.+1548   	; 0x105c <USB_Host_SendControlRequest>
     a50:	68 2f       	mov	r22, r24
     a52:	88 23       	and	r24, r24
     a54:	f1 f4       	brne	.+60     	; 0xa92 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     a56:	10 92 27 01 	sts	0x0127, r1
     a5a:	84 e6       	ldi	r24, 0x64	; 100
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	90 93 1c 01 	sts	0x011C, r25
     a62:	80 93 1b 01 	sts	0x011B, r24
     a66:	89 e0       	ldi	r24, 0x09	; 9
     a68:	80 93 1a 01 	sts	0x011A, r24
     a6c:	1a c0       	rjmp	.+52     	; 0xaa2 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     a74:	8a e0       	ldi	r24, 0x0A	; 10
     a76:	80 93 27 01 	sts	0x0127, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     a7a:	02 dd       	rcall	.-1532   	; 0x480 <EVENT_USB_Host_DeviceEnumerationComplete>
     a7c:	12 c0       	rjmp	.+36     	; 0xaa2 <USB_Host_ProcessNextHostState+0x23e>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     a7e:	89 2f       	mov	r24, r25
     a80:	a8 dc       	rcall	.-1712   	; 0x3d2 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     a82:	80 91 dd 00 	lds	r24, 0x00DD
     a86:	81 60       	ori	r24, 0x01	; 1
     a88:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     a8c:	e9 dc       	rcall	.-1582   	; 0x460 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     a8e:	b6 d0       	rcall	.+364    	; 0xbfc <USB_ResetInterface>
     a90:	08 c0       	rjmp	.+16     	; 0xaa2 <USB_Host_ProcessNextHostState+0x23e>
	}
}
     a92:	93 e0       	ldi	r25, 0x03	; 3
     a94:	02 c0       	rjmp	.+4      	; 0xa9a <USB_Host_ProcessNextHostState+0x236>
     a96:	94 e0       	ldi	r25, 0x04	; 4
     a98:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     a9a:	80 91 27 01 	lds	r24, 0x0127
     a9e:	81 30       	cpi	r24, 0x01	; 1
     aa0:	71 f7       	brne	.-36     	; 0xa7e <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     aa2:	28 96       	adiw	r28, 0x08	; 8
     aa4:	0f b6       	in	r0, 0x3f	; 63
     aa6:	f8 94       	cli
     aa8:	de bf       	out	0x3e, r29	; 62
     aaa:	0f be       	out	0x3f, r0	; 63
     aac:	cd bf       	out	0x3d, r28	; 61
     aae:	cf 91       	pop	r28
     ab0:	df 91       	pop	r29
     ab2:	1f 91       	pop	r17
     ab4:	0f 91       	pop	r16
     ab6:	ef 90       	pop	r14
     ab8:	08 95       	ret

00000aba <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     aba:	ef 92       	push	r14
     abc:	0f 93       	push	r16
     abe:	1f 93       	push	r17
     ac0:	e8 2f       	mov	r30, r24
     ac2:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     ac4:	62 95       	swap	r22
     ac6:	66 0f       	add	r22, r22
     ac8:	66 0f       	add	r22, r22
     aca:	60 7c       	andi	r22, 0xC0	; 192
     acc:	64 2b       	or	r22, r20
     ace:	2f 70       	andi	r18, 0x0F	; 15
     ad0:	62 2b       	or	r22, r18
     ad2:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     ad4:	72 60       	ori	r23, 0x02	; 2
     ad6:	45 c0       	rjmp	.+138    	; 0xb62 <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     ad8:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     adc:	3e 17       	cp	r19, r30
     ade:	a1 f4       	brne	.+40     	; 0xb08 <Pipe_ConfigurePipe+0x4e>
     ae0:	88 e0       	ldi	r24, 0x08	; 8
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	03 c0       	rjmp	.+6      	; 0xaee <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     ae8:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     aea:	88 0f       	add	r24, r24
     aec:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     aee:	80 17       	cp	r24, r16
     af0:	91 07       	cpc	r25, r17
     af2:	10 f4       	brcc	.+4      	; 0xaf8 <Pipe_ConfigurePipe+0x3e>
     af4:	25 30       	cpi	r18, 0x05	; 5
     af6:	c1 f7       	brne	.-16     	; 0xae8 <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     af8:	92 2f       	mov	r25, r18
     afa:	92 95       	swap	r25
     afc:	90 7f       	andi	r25, 0xF0	; 240
     afe:	97 2b       	or	r25, r23
     b00:	56 2f       	mov	r21, r22
     b02:	40 e0       	ldi	r20, 0x00	; 0
     b04:	20 e0       	ldi	r18, 0x00	; 0
     b06:	08 c0       	rjmp	.+16     	; 0xb18 <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     b08:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     b0c:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     b10:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
     b14:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     b18:	91 ff       	sbrs	r25, 1
     b1a:	22 c0       	rjmp	.+68     	; 0xb60 <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     b1c:	80 91 a9 00 	lds	r24, 0x00A9
     b20:	8e 7f       	andi	r24, 0xFE	; 254
     b22:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     b26:	80 91 ab 00 	lds	r24, 0x00AB
     b2a:	8d 7f       	andi	r24, 0xFD	; 253
     b2c:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     b30:	80 91 a9 00 	lds	r24, 0x00A9
     b34:	81 60       	ori	r24, 0x01	; 1
     b36:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     b3a:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
     b3e:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
     b42:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
     b46:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     b4a:	80 91 a9 00 	lds	r24, 0x00A9
     b4e:	80 62       	ori	r24, 0x20	; 32
     b50:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     b54:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     b58:	87 fd       	sbrc	r24, 7
     b5a:	02 c0       	rjmp	.+4      	; 0xb60 <Pipe_ConfigurePipe+0xa6>
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	07 c0       	rjmp	.+14     	; 0xb6e <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     b60:	3f 5f       	subi	r19, 0xFF	; 255
     b62:	37 30       	cpi	r19, 0x07	; 7
     b64:	08 f4       	brcc	.+2      	; 0xb68 <Pipe_ConfigurePipe+0xae>
     b66:	b8 cf       	rjmp	.-144    	; 0xad8 <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     b68:	e0 93 a7 00 	sts	0x00A7, r30
     b6c:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
     b6e:	1f 91       	pop	r17
     b70:	0f 91       	pop	r16
     b72:	ef 90       	pop	r14
     b74:	08 95       	ret

00000b76 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     b76:	10 92 f8 00 	sts	0x00F8, r1
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     b80:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     b84:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     b88:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     b8c:	80 91 a9 00 	lds	r24, 0x00A9
     b90:	8e 7f       	andi	r24, 0xFE	; 254
     b92:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b96:	9f 5f       	subi	r25, 0xFF	; 255
     b98:	97 30       	cpi	r25, 0x07	; 7
     b9a:	81 f7       	brne	.-32     	; 0xb7c <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     b9c:	08 95       	ret

00000b9e <Pipe_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     b9e:	40 91 a2 00 	lds	r20, 0x00A2
     ba2:	50 91 a3 00 	lds	r21, 0x00A3
     ba6:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     ba8:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     bac:	80 73       	andi	r24, 0x30	; 48
     bae:	80 31       	cpi	r24, 0x10	; 16
     bb0:	29 f4       	brne	.+10     	; 0xbbc <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     bb2:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     bb6:	80 ff       	sbrs	r24, 0
     bb8:	05 c0       	rjmp	.+10     	; 0xbc4 <Pipe_WaitUntilReady+0x26>
     bba:	1e c0       	rjmp	.+60     	; 0xbf8 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     bbc:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     bc0:	82 fd       	sbrc	r24, 2
     bc2:	1a c0       	rjmp	.+52     	; 0xbf8 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     bc4:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     bc8:	81 ff       	sbrs	r24, 1
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <Pipe_WaitUntilReady+0x32>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     bd0:	80 91 27 01 	lds	r24, 0x0127
     bd4:	81 30       	cpi	r24, 0x01	; 1
     bd6:	11 f4       	brne	.+4      	; 0xbdc <Pipe_WaitUntilReady+0x3e>
     bd8:	82 e0       	ldi	r24, 0x02	; 2
     bda:	08 95       	ret
     bdc:	80 91 a2 00 	lds	r24, 0x00A2
     be0:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     be4:	84 17       	cp	r24, r20
     be6:	95 07       	cpc	r25, r21
     be8:	f9 f2       	breq	.-66     	; 0xba8 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     bea:	22 23       	and	r18, r18
     bec:	11 f4       	brne	.+4      	; 0xbf2 <Pipe_WaitUntilReady+0x54>
     bee:	83 e0       	ldi	r24, 0x03	; 3
     bf0:	08 95       	ret
     bf2:	21 50       	subi	r18, 0x01	; 1
     bf4:	ac 01       	movw	r20, r24
     bf6:	d8 cf       	rjmp	.-80     	; 0xba8 <Pipe_WaitUntilReady+0xa>
     bf8:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     bfa:	08 95       	ret

00000bfc <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     bfc:	70 d0       	rcall	.+224    	; 0xcde <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     bfe:	77 d0       	rcall	.+238    	; 0xcee <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     c00:	80 91 d8 00 	lds	r24, 0x00D8
     c04:	8f 77       	andi	r24, 0x7F	; 127
     c06:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     c0a:	80 91 d8 00 	lds	r24, 0x00D8
     c0e:	80 68       	ori	r24, 0x80	; 128
     c10:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     c14:	80 91 d8 00 	lds	r24, 0x00D8
     c18:	8f 7d       	andi	r24, 0xDF	; 223
     c1a:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     c1e:	80 91 d7 00 	lds	r24, 0x00D7
     c22:	8f 77       	andi	r24, 0x7F	; 127
     c24:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     c28:	8c e0       	ldi	r24, 0x0C	; 12
     c2a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     c2c:	8e e0       	ldi	r24, 0x0E	; 14
     c2e:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     c30:	09 b4       	in	r0, 0x29	; 41
     c32:	00 fe       	sbrs	r0, 0
     c34:	fd cf       	rjmp	.-6      	; 0xc30 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	80 93 27 01 	sts	0x0127, r24
	USB_Host_ConfigurationNumber = 0;
     c3c:	10 92 1d 01 	sts	0x011D, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     c40:	80 e4       	ldi	r24, 0x40	; 64
     c42:	80 93 18 01 	sts	0x0118, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     c46:	80 91 d8 00 	lds	r24, 0x00D8
     c4a:	80 64       	ori	r24, 0x40	; 64
     c4c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c50:	80 91 dd 00 	lds	r24, 0x00DD
     c54:	81 60       	ori	r24, 0x01	; 1
     c56:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     c5a:	80 91 dd 00 	lds	r24, 0x00DD
     c5e:	84 60       	ori	r24, 0x04	; 4
     c60:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     c64:	80 91 d7 00 	lds	r24, 0x00D7
     c68:	8f 7e       	andi	r24, 0xEF	; 239
     c6a:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     c6e:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     c70:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     c72:	80 91 de 00 	lds	r24, 0x00DE
     c76:	81 60       	ori	r24, 0x01	; 1
     c78:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     c7c:	80 91 de 00 	lds	r24, 0x00DE
     c80:	84 60       	ori	r24, 0x04	; 4
     c82:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     c86:	80 91 e0 00 	lds	r24, 0x00E0
     c8a:	8e 7f       	andi	r24, 0xFE	; 254
     c8c:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     c90:	80 91 d8 00 	lds	r24, 0x00D8
     c94:	80 61       	ori	r24, 0x10	; 16
     c96:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     c9a:	08 95       	ret

00000c9c <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     c9c:	e7 ed       	ldi	r30, 0xD7	; 215
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	81 60       	ori	r24, 0x01	; 1
     ca4:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	80 93 1e 01 	sts	0x011E, r24

	USB_ResetInterface();
}
     cac:	a7 cf       	rjmp	.-178    	; 0xbfc <USB_ResetInterface>

00000cae <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     cae:	17 d0       	rcall	.+46     	; 0xcde <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     cb0:	1e d0       	rcall	.+60     	; 0xcee <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     cb2:	e0 ee       	ldi	r30, 0xE0	; 224
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	81 60       	ori	r24, 0x01	; 1
     cba:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     cbc:	a8 ed       	ldi	r26, 0xD8	; 216
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	8c 91       	ld	r24, X
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     cc6:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     cc8:	e7 ed       	ldi	r30, 0xD7	; 215
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	8e 7f       	andi	r24, 0xFE	; 254
     cd0:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     cd2:	8c 91       	ld	r24, X
     cd4:	8f 7e       	andi	r24, 0xEF	; 239
     cd6:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     cd8:	10 92 1e 01 	sts	0x011E, r1
}
     cdc:	08 95       	ret

00000cde <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     cde:	e8 ed       	ldi	r30, 0xD8	; 216
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	8c 7f       	andi	r24, 0xFC	; 252
     ce6:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     ce8:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     cec:	08 95       	ret

00000cee <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     cee:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     cf2:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     cf6:	08 95       	ret

00000cf8 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     cf8:	1f 92       	push	r1
     cfa:	0f 92       	push	r0
     cfc:	0f b6       	in	r0, 0x3f	; 63
     cfe:	0f 92       	push	r0
     d00:	0b b6       	in	r0, 0x3b	; 59
     d02:	0f 92       	push	r0
     d04:	11 24       	eor	r1, r1
     d06:	2f 93       	push	r18
     d08:	3f 93       	push	r19
     d0a:	4f 93       	push	r20
     d0c:	5f 93       	push	r21
     d0e:	6f 93       	push	r22
     d10:	7f 93       	push	r23
     d12:	8f 93       	push	r24
     d14:	9f 93       	push	r25
     d16:	af 93       	push	r26
     d18:	bf 93       	push	r27
     d1a:	ef 93       	push	r30
     d1c:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     d1e:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     d22:	85 ff       	sbrs	r24, 5
     d24:	0a c0       	rjmp	.+20     	; 0xd3a <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     d26:	80 91 a0 00 	lds	r24, 0x00A0
     d2a:	85 ff       	sbrs	r24, 5
     d2c:	06 c0       	rjmp	.+12     	; 0xd3a <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     d2e:	80 91 9f 00 	lds	r24, 0x009F
     d32:	8f 7d       	andi	r24, 0xDF	; 223
     d34:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     d38:	67 d1       	rcall	.+718    	; 0x1008 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     d3a:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     d3e:	81 ff       	sbrs	r24, 1
     d40:	15 c0       	rjmp	.+42     	; 0xd6c <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     d42:	80 91 a0 00 	lds	r24, 0x00A0
     d46:	81 ff       	sbrs	r24, 1
     d48:	11 c0       	rjmp	.+34     	; 0xd6c <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     d4a:	80 91 9f 00 	lds	r24, 0x009F
     d4e:	8d 7f       	andi	r24, 0xFD	; 253
     d50:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     d54:	80 91 9f 00 	lds	r24, 0x009F
     d58:	8e 7f       	andi	r24, 0xFE	; 254
     d5a:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     d5e:	80 91 a0 00 	lds	r24, 0x00A0
     d62:	8d 7f       	andi	r24, 0xFD	; 253
     d64:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     d68:	7b db       	rcall	.-2314   	; 0x460 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     d6a:	48 df       	rcall	.-368    	; 0xbfc <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     d6c:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     d70:	81 ff       	sbrs	r24, 1
     d72:	15 c0       	rjmp	.+42     	; 0xd9e <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     d74:	80 91 de 00 	lds	r24, 0x00DE
     d78:	81 ff       	sbrs	r24, 1
     d7a:	11 c0       	rjmp	.+34     	; 0xd9e <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     d7c:	80 91 df 00 	lds	r24, 0x00DF
     d80:	8d 7f       	andi	r24, 0xFD	; 253
     d82:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     d86:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d88:	80 91 dd 00 	lds	r24, 0x00DD
     d8c:	81 60       	ori	r24, 0x01	; 1
     d8e:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	49 db       	rcall	.-2414   	; 0x428 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     d96:	64 db       	rcall	.-2360   	; 0x460 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	80 93 27 01 	sts	0x0127, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     d9e:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     da2:	80 ff       	sbrs	r24, 0
     da4:	17 c0       	rjmp	.+46     	; 0xdd4 <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     da6:	80 91 de 00 	lds	r24, 0x00DE
     daa:	80 ff       	sbrs	r24, 0
     dac:	13 c0       	rjmp	.+38     	; 0xdd4 <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     dae:	80 91 df 00 	lds	r24, 0x00DF
     db2:	8e 7f       	andi	r24, 0xFE	; 254
     db4:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     db8:	80 91 de 00 	lds	r24, 0x00DE
     dbc:	8e 7f       	andi	r24, 0xFE	; 254
     dbe:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     dc2:	56 db       	rcall	.-2388   	; 0x470 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     dc4:	80 91 a0 00 	lds	r24, 0x00A0
     dc8:	82 60       	ori	r24, 0x02	; 2
     dca:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     dce:	82 e0       	ldi	r24, 0x02	; 2
     dd0:	80 93 27 01 	sts	0x0127, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     dd4:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     dd8:	82 ff       	sbrs	r24, 2
     dda:	0e c0       	rjmp	.+28     	; 0xdf8 <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     ddc:	80 91 de 00 	lds	r24, 0x00DE
     de0:	82 ff       	sbrs	r24, 2
     de2:	0a c0       	rjmp	.+20     	; 0xdf8 <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     de4:	80 91 df 00 	lds	r24, 0x00DF
     de8:	8b 7f       	andi	r24, 0xFB	; 251
     dea:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     dee:	82 e0       	ldi	r24, 0x02	; 2
     df0:	60 e0       	ldi	r22, 0x00	; 0
     df2:	ef da       	rcall	.-2594   	; 0x3d2 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     df4:	35 db       	rcall	.-2454   	; 0x460 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     df6:	02 df       	rcall	.-508    	; 0xbfc <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     df8:	ff 91       	pop	r31
     dfa:	ef 91       	pop	r30
     dfc:	bf 91       	pop	r27
     dfe:	af 91       	pop	r26
     e00:	9f 91       	pop	r25
     e02:	8f 91       	pop	r24
     e04:	7f 91       	pop	r23
     e06:	6f 91       	pop	r22
     e08:	5f 91       	pop	r21
     e0a:	4f 91       	pop	r20
     e0c:	3f 91       	pop	r19
     e0e:	2f 91       	pop	r18
     e10:	0f 90       	pop	r0
     e12:	0b be       	out	0x3b, r0	; 59
     e14:	0f 90       	pop	r0
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	0f 90       	pop	r0
     e1a:	1f 90       	pop	r1
     e1c:	18 95       	reti

00000e1e <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     e1e:	bf 92       	push	r11
     e20:	cf 92       	push	r12
     e22:	df 92       	push	r13
     e24:	ef 92       	push	r14
     e26:	ff 92       	push	r15
     e28:	0f 93       	push	r16
     e2a:	1f 93       	push	r17
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	18 2f       	mov	r17, r24
     e32:	09 2f       	mov	r16, r25
     e34:	7b 01       	movw	r14, r22
     e36:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     e38:	80 91 aa 00 	lds	r24, 0x00AA
     e3c:	8f 7c       	andi	r24, 0xCF	; 207
     e3e:	80 61       	ori	r24, 0x10	; 16
     e40:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     e44:	ac de       	rcall	.-680    	; 0xb9e <Pipe_WaitUntilReady>
     e46:	b8 2e       	mov	r11, r24
     e48:	88 23       	and	r24, r24
     e4a:	a9 f5       	brne	.+106    	; 0xeb6 <Pipe_Read_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     e4c:	81 2f       	mov	r24, r17
     e4e:	90 2f       	mov	r25, r16
     e50:	9c 01       	movw	r18, r24
     e52:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     e54:	c1 14       	cp	r12, r1
     e56:	d1 04       	cpc	r13, r1
     e58:	39 f0       	breq	.+14     	; 0xe68 <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
     e5a:	f6 01       	movw	r30, r12
     e5c:	80 81       	ld	r24, Z
     e5e:	91 81       	ldd	r25, Z+1	; 0x01
     e60:	e8 1a       	sub	r14, r24
     e62:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     e64:	c8 0f       	add	r28, r24
     e66:	d9 1f       	adc	r29, r25
     e68:	00 e0       	ldi	r16, 0x00	; 0
     e6a:	10 e0       	ldi	r17, 0x00	; 0
     e6c:	21 c0       	rjmp	.+66     	; 0xeb0 <Pipe_Read_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     e6e:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     e72:	85 fd       	sbrc	r24, 5
     e74:	15 c0       	rjmp	.+42     	; 0xea0 <Pipe_Read_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     e76:	80 91 a6 00 	lds	r24, 0x00A6
     e7a:	8e 77       	andi	r24, 0x7E	; 126
     e7c:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     e80:	c1 14       	cp	r12, r1
     e82:	d1 04       	cpc	r13, r1
     e84:	49 f0       	breq	.+18     	; 0xe98 <Pipe_Read_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
     e86:	f6 01       	movw	r30, r12
     e88:	80 81       	ld	r24, Z
     e8a:	91 81       	ldd	r25, Z+1	; 0x01
     e8c:	80 0f       	add	r24, r16
     e8e:	91 1f       	adc	r25, r17
     e90:	91 83       	std	Z+1, r25	; 0x01
     e92:	80 83       	st	Z, r24
     e94:	84 e0       	ldi	r24, 0x04	; 4
     e96:	10 c0       	rjmp	.+32     	; 0xeb8 <Pipe_Read_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     e98:	82 de       	rcall	.-764    	; 0xb9e <Pipe_WaitUntilReady>
     e9a:	88 23       	and	r24, r24
     e9c:	49 f0       	breq	.+18     	; 0xeb0 <Pipe_Read_Stream_LE+0x92>
     e9e:	0c c0       	rjmp	.+24     	; 0xeb8 <Pipe_Read_Stream_LE+0x9a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     ea0:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     ea4:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     ea6:	08 94       	sec
     ea8:	e1 08       	sbc	r14, r1
     eaa:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
     eac:	0f 5f       	subi	r16, 0xFF	; 255
     eae:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     eb0:	e1 14       	cp	r14, r1
     eb2:	f1 04       	cpc	r15, r1
     eb4:	e1 f6       	brne	.-72     	; 0xe6e <Pipe_Read_Stream_LE+0x50>
     eb6:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     eb8:	df 91       	pop	r29
     eba:	cf 91       	pop	r28
     ebc:	1f 91       	pop	r17
     ebe:	0f 91       	pop	r16
     ec0:	ff 90       	pop	r15
     ec2:	ef 90       	pop	r14
     ec4:	df 90       	pop	r13
     ec6:	cf 90       	pop	r12
     ec8:	bf 90       	pop	r11
     eca:	08 95       	ret

00000ecc <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     ecc:	af 92       	push	r10
     ece:	bf 92       	push	r11
     ed0:	cf 92       	push	r12
     ed2:	df 92       	push	r13
     ed4:	ef 92       	push	r14
     ed6:	ff 92       	push	r15
     ed8:	0f 93       	push	r16
     eda:	1f 93       	push	r17
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	7c 01       	movw	r14, r24
     ee2:	eb 01       	movw	r28, r22
     ee4:	6a 01       	movw	r12, r20
     ee6:	24 c0       	rjmp	.+72     	; 0xf30 <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     ee8:	e8 81       	ld	r30, Y
     eea:	f9 81       	ldd	r31, Y+1	; 0x01
     eec:	be 2e       	mov	r11, r30
     eee:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     ef0:	80 81       	ld	r24, Z
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	98 01       	movw	r18, r16
     ef6:	80 17       	cp	r24, r16
     ef8:	91 07       	cpc	r25, r17
     efa:	08 f4       	brcc	.+2      	; 0xefe <USB_GetNextDescriptorComp+0x32>
     efc:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     efe:	e2 0f       	add	r30, r18
     f00:	f3 1f       	adc	r31, r19
     f02:	f9 83       	std	Y+1, r31	; 0x01
     f04:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     f06:	f7 01       	movw	r30, r14
     f08:	80 81       	ld	r24, Z
     f0a:	91 81       	ldd	r25, Z+1	; 0x01
     f0c:	82 1b       	sub	r24, r18
     f0e:	93 0b       	sbc	r25, r19
     f10:	91 83       	std	Z+1, r25	; 0x01
     f12:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     f14:	88 81       	ld	r24, Y
     f16:	99 81       	ldd	r25, Y+1	; 0x01
     f18:	f6 01       	movw	r30, r12
     f1a:	09 95       	icall
     f1c:	82 30       	cpi	r24, 0x02	; 2
     f1e:	41 f0       	breq	.+16     	; 0xf30 <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	69 f4       	brne	.+26     	; 0xf3e <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
     f24:	b8 82       	st	Y, r11
     f26:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
     f28:	f7 01       	movw	r30, r14
     f2a:	11 83       	std	Z+1, r17	; 0x01
     f2c:	00 83       	st	Z, r16
     f2e:	07 c0       	rjmp	.+14     	; 0xf3e <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     f30:	f7 01       	movw	r30, r14
     f32:	00 81       	ld	r16, Z
     f34:	11 81       	ldd	r17, Z+1	; 0x01
     f36:	01 15       	cp	r16, r1
     f38:	11 05       	cpc	r17, r1
     f3a:	b1 f6       	brne	.-84     	; 0xee8 <USB_GetNextDescriptorComp+0x1c>
     f3c:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	1f 91       	pop	r17
     f44:	0f 91       	pop	r16
     f46:	ff 90       	pop	r15
     f48:	ef 90       	pop	r14
     f4a:	df 90       	pop	r13
     f4c:	cf 90       	pop	r12
     f4e:	bf 90       	pop	r11
     f50:	af 90       	pop	r10
     f52:	08 95       	ret

00000f54 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     f54:	cf 92       	push	r12
     f56:	df 92       	push	r13
     f58:	ef 92       	push	r14
     f5a:	ff 92       	push	r15
     f5c:	0f 93       	push	r16
     f5e:	1f 93       	push	r17
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	29 97       	sbiw	r28, 0x09	; 9
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	de bf       	out	0x3e, r29	; 62
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cd bf       	out	0x3d, r28	; 61
     f74:	6b 01       	movw	r12, r22
     f76:	8a 01       	movw	r16, r20
     f78:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     f7a:	90 e8       	ldi	r25, 0x80	; 128
     f7c:	90 93 1f 01 	sts	0x011F, r25
     f80:	96 e0       	ldi	r25, 0x06	; 6
     f82:	90 93 20 01 	sts	0x0120, r25
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	92 60       	ori	r25, 0x02	; 2
     f8c:	90 93 22 01 	sts	0x0122, r25
     f90:	80 93 21 01 	sts	0x0121, r24
     f94:	10 92 24 01 	sts	0x0124, r1
     f98:	10 92 23 01 	sts	0x0123, r1
     f9c:	89 e0       	ldi	r24, 0x09	; 9
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	90 93 26 01 	sts	0x0126, r25
     fa4:	80 93 25 01 	sts	0x0125, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     fa8:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     fac:	ce 01       	movw	r24, r28
     fae:	01 96       	adiw	r24, 0x01	; 1
     fb0:	55 d0       	rcall	.+170    	; 0x105c <USB_Host_SendControlRequest>
     fb2:	28 2f       	mov	r18, r24
     fb4:	88 23       	and	r24, r24
     fb6:	c1 f4       	brne	.+48     	; 0xfe8 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	9c 81       	ldd	r25, Y+4	; 0x04
     fbc:	f6 01       	movw	r30, r12
     fbe:	91 83       	std	Z+1, r25	; 0x01
     fc0:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     fc2:	e8 16       	cp	r14, r24
     fc4:	f9 06       	cpc	r15, r25
     fc6:	10 f4       	brcc	.+4      	; 0xfcc <USB_Host_GetDeviceConfigDescriptor+0x78>
     fc8:	25 e0       	ldi	r18, 0x05	; 5
     fca:	0e c0       	rjmp	.+28     	; 0xfe8 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     fcc:	90 93 26 01 	sts	0x0126, r25
     fd0:	80 93 25 01 	sts	0x0125, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     fd4:	c8 01       	movw	r24, r16
     fd6:	42 d0       	rcall	.+132    	; 0x105c <USB_Host_SendControlRequest>
     fd8:	28 2f       	mov	r18, r24
     fda:	88 23       	and	r24, r24
     fdc:	29 f4       	brne	.+10     	; 0xfe8 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     fde:	f8 01       	movw	r30, r16
     fe0:	81 81       	ldd	r24, Z+1	; 0x01
     fe2:	82 30       	cpi	r24, 0x02	; 2
     fe4:	09 f0       	breq	.+2      	; 0xfe8 <USB_Host_GetDeviceConfigDescriptor+0x94>
     fe6:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     fe8:	82 2f       	mov	r24, r18
     fea:	29 96       	adiw	r28, 0x09	; 9
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	f8 94       	cli
     ff0:	de bf       	out	0x3e, r29	; 62
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	cd bf       	out	0x3d, r28	; 61
     ff6:	cf 91       	pop	r28
     ff8:	df 91       	pop	r29
     ffa:	1f 91       	pop	r17
     ffc:	0f 91       	pop	r16
     ffe:	ff 90       	pop	r15
    1000:	ef 90       	pop	r14
    1002:	df 90       	pop	r13
    1004:	cf 90       	pop	r12
    1006:	08 95       	ret

00001008 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1008:	08 95       	ret

0000100a <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    100a:	1f 93       	push	r17
    100c:	cf 93       	push	r28
    100e:	df 93       	push	r29
    1010:	18 2f       	mov	r17, r24
    1012:	c8 ee       	ldi	r28, 0xE8	; 232
    1014:	d3 e0       	ldi	r29, 0x03	; 3
    1016:	09 c0       	rjmp	.+18     	; 0x102a <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	87 db       	rcall	.-2290   	; 0x72a <USB_Host_WaitMS>
    101c:	88 23       	and	r24, r24
    101e:	d1 f4       	brne	.+52     	; 0x1054 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1020:	20 97       	sbiw	r28, 0x00	; 0
    1022:	11 f4       	brne	.+4      	; 0x1028 <USB_Host_WaitForIOS+0x1e>
    1024:	84 e0       	ldi	r24, 0x04	; 4
    1026:	16 c0       	rjmp	.+44     	; 0x1054 <USB_Host_WaitForIOS+0x4a>
    1028:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    102a:	11 23       	and	r17, r17
    102c:	29 f4       	brne	.+10     	; 0x1038 <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    102e:	80 91 a6 00 	lds	r24, 0x00A6
    1032:	83 ff       	sbrs	r24, 3
    1034:	f1 cf       	rjmp	.-30     	; 0x1018 <USB_Host_WaitForIOS+0xe>
    1036:	0d c0       	rjmp	.+26     	; 0x1052 <USB_Host_WaitForIOS+0x48>
    1038:	11 30       	cpi	r17, 0x01	; 1
    103a:	29 f4       	brne	.+10     	; 0x1046 <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    103c:	80 91 a6 00 	lds	r24, 0x00A6
    1040:	80 ff       	sbrs	r24, 0
    1042:	ea cf       	rjmp	.-44     	; 0x1018 <USB_Host_WaitForIOS+0xe>
    1044:	06 c0       	rjmp	.+12     	; 0x1052 <USB_Host_WaitForIOS+0x48>
    1046:	12 30       	cpi	r17, 0x02	; 2
    1048:	39 f7       	brne	.-50     	; 0x1018 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    104a:	80 91 a6 00 	lds	r24, 0x00A6
    104e:	82 ff       	sbrs	r24, 2
    1050:	e3 cf       	rjmp	.-58     	; 0x1018 <USB_Host_WaitForIOS+0xe>
    1052:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	1f 91       	pop	r17
    105a:	08 95       	ret

0000105c <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    105c:	ff 92       	push	r15
    105e:	0f 93       	push	r16
    1060:	1f 93       	push	r17
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	18 2f       	mov	r17, r24
    1068:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    106a:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    106e:	c0 91 25 01 	lds	r28, 0x0125
    1072:	d0 91 26 01 	lds	r29, 0x0126
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1076:	80 91 9e 00 	lds	r24, 0x009E
    107a:	81 60       	ori	r24, 0x01	; 1
    107c:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	53 db       	rcall	.-2394   	; 0x72a <USB_Host_WaitMS>
    1084:	98 2f       	mov	r25, r24
    1086:	88 23       	and	r24, r24
    1088:	09 f0       	breq	.+2      	; 0x108c <USB_Host_SendControlRequest+0x30>
    108a:	ee c0       	rjmp	.+476    	; 0x1268 <USB_Host_SendControlRequest+0x20c>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    108c:	80 91 aa 00 	lds	r24, 0x00AA
    1090:	8f 7c       	andi	r24, 0xCF	; 207
    1092:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1096:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    109a:	80 91 a6 00 	lds	r24, 0x00A6
    109e:	8f 7e       	andi	r24, 0xEF	; 239
    10a0:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10a4:	80 91 a9 00 	lds	r24, 0x00A9
    10a8:	8f 7b       	andi	r24, 0xBF	; 191
    10aa:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearError();

	Pipe_Unfreeze();

	Pipe_Write_8(USB_ControlRequest.bmRequestType);
    10ae:	80 91 1f 01 	lds	r24, 0x011F
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    10b2:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
    10b6:	80 91 20 01 	lds	r24, 0x0120
    10ba:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
    10be:	80 91 21 01 	lds	r24, 0x0121
    10c2:	90 91 22 01 	lds	r25, 0x0122
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    10c6:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    10ca:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
    10ce:	80 91 23 01 	lds	r24, 0x0123
    10d2:	90 91 24 01 	lds	r25, 0x0124
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    10d6:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    10da:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
    10de:	80 91 25 01 	lds	r24, 0x0125
    10e2:	90 91 26 01 	lds	r25, 0x0126
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    10e6:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    10ea:	90 93 af 00 	sts	0x00AF, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    10ee:	80 91 a6 00 	lds	r24, 0x00A6
    10f2:	87 77       	andi	r24, 0x77	; 119
    10f4:	80 93 a6 00 	sts	0x00A6, r24

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	87 df       	rcall	.-242    	; 0x100a <USB_Host_WaitForIOS>
    10fc:	98 2f       	mov	r25, r24
    10fe:	88 23       	and	r24, r24
    1100:	09 f0       	breq	.+2      	; 0x1104 <USB_Host_SendControlRequest+0xa8>
    1102:	b2 c0       	rjmp	.+356    	; 0x1268 <USB_Host_SendControlRequest+0x20c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1104:	80 91 a9 00 	lds	r24, 0x00A9
    1108:	80 64       	ori	r24, 0x40	; 64
    110a:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	0c db       	rcall	.-2536   	; 0x72a <USB_Host_WaitMS>
    1112:	98 2f       	mov	r25, r24
    1114:	88 23       	and	r24, r24
    1116:	09 f0       	breq	.+2      	; 0x111a <USB_Host_SendControlRequest+0xbe>
    1118:	a7 c0       	rjmp	.+334    	; 0x1268 <USB_Host_SendControlRequest+0x20c>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
    111a:	21 2f       	mov	r18, r17
    111c:	30 2f       	mov	r19, r16
    111e:	c9 01       	movw	r24, r18
    1120:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1122:	80 91 1f 01 	lds	r24, 0x011F
    1126:	87 ff       	sbrs	r24, 7
    1128:	52 c0       	rjmp	.+164    	; 0x11ce <USB_Host_SendControlRequest+0x172>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    112a:	80 91 aa 00 	lds	r24, 0x00AA
    112e:	8f 7c       	andi	r24, 0xCF	; 207
    1130:	80 61       	ori	r24, 0x10	; 16
    1132:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1136:	01 15       	cp	r16, r1
    1138:	11 05       	cpc	r17, r1
    113a:	69 f5       	brne	.+90     	; 0x1196 <USB_Host_SendControlRequest+0x13a>
    113c:	2e c0       	rjmp	.+92     	; 0x119a <USB_Host_SendControlRequest+0x13e>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    113e:	80 91 a9 00 	lds	r24, 0x00A9
    1142:	8f 7b       	andi	r24, 0xBF	; 191
    1144:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	5f df       	rcall	.-322    	; 0x100a <USB_Host_WaitForIOS>
    114c:	98 2f       	mov	r25, r24
    114e:	88 23       	and	r24, r24
    1150:	09 f0       	breq	.+2      	; 0x1154 <USB_Host_SendControlRequest+0xf8>
    1152:	8a c0       	rjmp	.+276    	; 0x1268 <USB_Host_SendControlRequest+0x20c>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1154:	80 91 f6 00 	lds	r24, 0x00F6
    1158:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    115c:	89 2b       	or	r24, r25
    115e:	49 f4       	brne	.+18     	; 0x1172 <USB_Host_SendControlRequest+0x116>
    1160:	c0 e0       	ldi	r28, 0x00	; 0
    1162:	d0 e0       	ldi	r29, 0x00	; 0
    1164:	06 c0       	rjmp	.+12     	; 0x1172 <USB_Host_SendControlRequest+0x116>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1166:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    116a:	f8 01       	movw	r30, r16
    116c:	81 93       	st	Z+, r24
    116e:	8f 01       	movw	r16, r30
					DataLen--;
    1170:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1172:	80 91 f6 00 	lds	r24, 0x00F6
    1176:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    117a:	89 2b       	or	r24, r25
    117c:	11 f0       	breq	.+4      	; 0x1182 <USB_Host_SendControlRequest+0x126>
    117e:	20 97       	sbiw	r28, 0x00	; 0
    1180:	91 f7       	brne	.-28     	; 0x1166 <USB_Host_SendControlRequest+0x10a>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1182:	80 91 a9 00 	lds	r24, 0x00A9
    1186:	80 64       	ori	r24, 0x40	; 64
    1188:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    118c:	80 91 a6 00 	lds	r24, 0x00A6
    1190:	8e 77       	andi	r24, 0x7E	; 126
    1192:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1196:	20 97       	sbiw	r28, 0x00	; 0
    1198:	91 f6       	brne	.-92     	; 0x113e <USB_Host_SendControlRequest+0xe2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    119a:	80 91 aa 00 	lds	r24, 0x00AA
    119e:	8f 7c       	andi	r24, 0xCF	; 207
    11a0:	80 62       	ori	r24, 0x20	; 32
    11a2:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11a6:	80 91 a9 00 	lds	r24, 0x00A9
    11aa:	8f 7b       	andi	r24, 0xBF	; 191
    11ac:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11b0:	82 e0       	ldi	r24, 0x02	; 2
    11b2:	2b df       	rcall	.-426    	; 0x100a <USB_Host_WaitForIOS>
    11b4:	98 2f       	mov	r25, r24
    11b6:	88 23       	and	r24, r24
    11b8:	09 f0       	breq	.+2      	; 0x11bc <USB_Host_SendControlRequest+0x160>
    11ba:	56 c0       	rjmp	.+172    	; 0x1268 <USB_Host_SendControlRequest+0x20c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    11bc:	80 91 a6 00 	lds	r24, 0x00A6
    11c0:	8b 77       	andi	r24, 0x7B	; 123
    11c2:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11c6:	82 e0       	ldi	r24, 0x02	; 2
    11c8:	20 df       	rcall	.-448    	; 0x100a <USB_Host_WaitForIOS>
    11ca:	98 2f       	mov	r25, r24
    11cc:	4d c0       	rjmp	.+154    	; 0x1268 <USB_Host_SendControlRequest+0x20c>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    11ce:	01 15       	cp	r16, r1
    11d0:	11 05       	cpc	r17, r1
    11d2:	a9 f1       	breq	.+106    	; 0x123e <USB_Host_SendControlRequest+0x1e2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11d4:	80 91 aa 00 	lds	r24, 0x00AA
    11d8:	8f 7c       	andi	r24, 0xCF	; 207
    11da:	80 62       	ori	r24, 0x20	; 32
    11dc:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11e0:	80 91 a9 00 	lds	r24, 0x00A9
    11e4:	8f 7b       	andi	r24, 0xBF	; 191
    11e6:	80 93 a9 00 	sts	0x00A9, r24
    11ea:	1d c0       	rjmp	.+58     	; 0x1226 <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11ec:	82 e0       	ldi	r24, 0x02	; 2
    11ee:	0d df       	rcall	.-486    	; 0x100a <USB_Host_WaitForIOS>
    11f0:	98 2f       	mov	r25, r24
    11f2:	88 23       	and	r24, r24
    11f4:	c9 f5       	brne	.+114    	; 0x1268 <USB_Host_SendControlRequest+0x20c>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    11f6:	80 91 18 01 	lds	r24, 0x0118
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	07 c0       	rjmp	.+14     	; 0x120e <USB_Host_SendControlRequest+0x1b2>
				{
					Pipe_Write_8(*(DataStream++));
    1200:	f8 01       	movw	r30, r16
    1202:	81 91       	ld	r24, Z+
    1204:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1206:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    120a:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    120c:	39 f0       	breq	.+14     	; 0x121c <USB_Host_SendControlRequest+0x1c0>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    120e:	80 91 f6 00 	lds	r24, 0x00F6
    1212:	90 91 f7 00 	lds	r25, 0x00F7
    1216:	82 17       	cp	r24, r18
    1218:	93 07       	cpc	r25, r19
    121a:	90 f3       	brcs	.-28     	; 0x1200 <USB_Host_SendControlRequest+0x1a4>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    121c:	80 91 a6 00 	lds	r24, 0x00A6
    1220:	8b 77       	andi	r24, 0x7B	; 123
    1222:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1226:	20 97       	sbiw	r28, 0x00	; 0
    1228:	09 f7       	brne	.-62     	; 0x11ec <USB_Host_SendControlRequest+0x190>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    122a:	82 e0       	ldi	r24, 0x02	; 2
    122c:	ee de       	rcall	.-548    	; 0x100a <USB_Host_WaitForIOS>
    122e:	98 2f       	mov	r25, r24
    1230:	88 23       	and	r24, r24
    1232:	d1 f4       	brne	.+52     	; 0x1268 <USB_Host_SendControlRequest+0x20c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1234:	80 91 a9 00 	lds	r24, 0x00A9
    1238:	80 64       	ori	r24, 0x40	; 64
    123a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    123e:	80 91 aa 00 	lds	r24, 0x00AA
    1242:	8f 7c       	andi	r24, 0xCF	; 207
    1244:	80 61       	ori	r24, 0x10	; 16
    1246:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    124a:	80 91 a9 00 	lds	r24, 0x00A9
    124e:	8f 7b       	andi	r24, 0xBF	; 191
    1250:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	d9 de       	rcall	.-590    	; 0x100a <USB_Host_WaitForIOS>
    1258:	98 2f       	mov	r25, r24
    125a:	88 23       	and	r24, r24
    125c:	29 f4       	brne	.+10     	; 0x1268 <USB_Host_SendControlRequest+0x20c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    125e:	80 91 a6 00 	lds	r24, 0x00A6
    1262:	8e 77       	andi	r24, 0x7E	; 126
    1264:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1268:	80 91 a9 00 	lds	r24, 0x00A9
    126c:	80 64       	ori	r24, 0x40	; 64
    126e:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    1272:	f0 fc       	sbrc	r15, 0
    1274:	05 c0       	rjmp	.+10     	; 0x1280 <USB_Host_SendControlRequest+0x224>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1276:	80 91 9e 00 	lds	r24, 0x009E
    127a:	8e 7f       	andi	r24, 0xFE	; 254
    127c:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    1286:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    128a:	89 2f       	mov	r24, r25
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	1f 91       	pop	r17
    1292:	0f 91       	pop	r16
    1294:	ff 90       	pop	r15
    1296:	08 95       	ret

00001298 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1298:	1f 93       	push	r17
    129a:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    129c:	10 92 1f 01 	sts	0x011F, r1
    12a0:	89 e0       	ldi	r24, 0x09	; 9
    12a2:	80 93 20 01 	sts	0x0120, r24
    12a6:	10 93 21 01 	sts	0x0121, r17
    12aa:	10 92 22 01 	sts	0x0122, r1
    12ae:	10 92 24 01 	sts	0x0124, r1
    12b2:	10 92 23 01 	sts	0x0123, r1
    12b6:	10 92 26 01 	sts	0x0126, r1
    12ba:	10 92 25 01 	sts	0x0125, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    12be:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	ca de       	rcall	.-620    	; 0x105c <USB_Host_SendControlRequest>
    12c8:	88 23       	and	r24, r24
    12ca:	49 f4       	brne	.+18     	; 0x12de <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    12cc:	10 93 1d 01 	sts	0x011D, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    12d0:	11 23       	and	r17, r17
    12d2:	11 f4       	brne	.+4      	; 0x12d8 <USB_Host_SetDeviceConfiguration+0x40>
    12d4:	9a e0       	ldi	r25, 0x0A	; 10
    12d6:	01 c0       	rjmp	.+2      	; 0x12da <USB_Host_SetDeviceConfiguration+0x42>
    12d8:	9b e0       	ldi	r25, 0x0B	; 11
    12da:	90 93 27 01 	sts	0x0127, r25
	}

	return ErrorCode;
}
    12de:	1f 91       	pop	r17
    12e0:	08 95       	ret

000012e2 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    12e2:	ff 92       	push	r15
    12e4:	0f 93       	push	r16
    12e6:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    12e8:	07 ea       	ldi	r16, 0xA7	; 167
    12ea:	10 e0       	ldi	r17, 0x00	; 0
    12ec:	f8 01       	movw	r30, r16
    12ee:	f0 80       	ld	r15, Z
    12f0:	f7 e0       	ldi	r31, 0x07	; 7
    12f2:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    12f4:	f8 01       	movw	r30, r16
    12f6:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    12f8:	b5 da       	rcall	.-2710   	; 0x864 <USB_Host_ProcessNextHostState>
    12fa:	f8 01       	movw	r30, r16
    12fc:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    12fe:	1f 91       	pop	r17
    1300:	0f 91       	pop	r16
    1302:	ff 90       	pop	r15
    1304:	08 95       	ret

00001306 <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    1306:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1308:	80 91 c8 00 	lds	r24, 0x00C8
    130c:	85 ff       	sbrs	r24, 5
    130e:	fc cf       	rjmp	.-8      	; 0x1308 <Serial_putchar+0x2>
				UDR1 = DataByte;
    1310:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	08 95       	ret

0000131a <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    131a:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    131e:	87 fd       	sbrc	r24, 7
    1320:	03 c0       	rjmp	.+6      	; 0x1328 <Serial_getchar+0xe>
    1322:	2e ef       	ldi	r18, 0xFE	; 254
    1324:	3f ef       	ldi	r19, 0xFF	; 255
    1326:	0b c0       	rjmp	.+22     	; 0x133e <Serial_getchar+0x24>
    1328:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    132c:	87 fd       	sbrc	r24, 7
    132e:	03 c0       	rjmp	.+6      	; 0x1336 <Serial_getchar+0x1c>
    1330:	2f ef       	ldi	r18, 0xFF	; 255
    1332:	3f ef       	ldi	r19, 0xFF	; 255
    1334:	04 c0       	rjmp	.+8      	; 0x133e <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    1336:	80 91 ce 00 	lds	r24, 0x00CE
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    133e:	c9 01       	movw	r24, r18
    1340:	08 95       	ret

00001342 <printf_P>:
    1342:	df 93       	push	r29
    1344:	cf 93       	push	r28
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
    134a:	fe 01       	movw	r30, r28
    134c:	35 96       	adiw	r30, 0x05	; 5
    134e:	61 91       	ld	r22, Z+
    1350:	71 91       	ld	r23, Z+
    1352:	a0 91 38 01 	lds	r26, 0x0138
    1356:	b0 91 39 01 	lds	r27, 0x0139
    135a:	13 96       	adiw	r26, 0x03	; 3
    135c:	8c 91       	ld	r24, X
    135e:	13 97       	sbiw	r26, 0x03	; 3
    1360:	88 60       	ori	r24, 0x08	; 8
    1362:	13 96       	adiw	r26, 0x03	; 3
    1364:	8c 93       	st	X, r24
    1366:	80 91 38 01 	lds	r24, 0x0138
    136a:	90 91 39 01 	lds	r25, 0x0139
    136e:	af 01       	movw	r20, r30
    1370:	3f d0       	rcall	.+126    	; 0x13f0 <vfprintf>
    1372:	e0 91 38 01 	lds	r30, 0x0138
    1376:	f0 91 39 01 	lds	r31, 0x0139
    137a:	23 81       	ldd	r18, Z+3	; 0x03
    137c:	27 7f       	andi	r18, 0xF7	; 247
    137e:	23 83       	std	Z+3, r18	; 0x03
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <puts_P>:
    1386:	0f 93       	push	r16
    1388:	1f 93       	push	r17
    138a:	cf 93       	push	r28
    138c:	df 93       	push	r29
    138e:	ec 01       	movw	r28, r24
    1390:	e0 91 38 01 	lds	r30, 0x0138
    1394:	f0 91 39 01 	lds	r31, 0x0139
    1398:	83 81       	ldd	r24, Z+3	; 0x03
    139a:	81 ff       	sbrs	r24, 1
    139c:	21 c0       	rjmp	.+66     	; 0x13e0 <puts_P+0x5a>
    139e:	00 e0       	ldi	r16, 0x00	; 0
    13a0:	10 e0       	ldi	r17, 0x00	; 0
    13a2:	0e c0       	rjmp	.+28     	; 0x13c0 <puts_P+0x3a>
    13a4:	e0 91 38 01 	lds	r30, 0x0138
    13a8:	f0 91 39 01 	lds	r31, 0x0139
    13ac:	20 85       	ldd	r18, Z+8	; 0x08
    13ae:	31 85       	ldd	r19, Z+9	; 0x09
    13b0:	bf 01       	movw	r22, r30
    13b2:	f9 01       	movw	r30, r18
    13b4:	09 95       	icall
    13b6:	89 2b       	or	r24, r25
    13b8:	11 f0       	breq	.+4      	; 0x13be <puts_P+0x38>
    13ba:	0f ef       	ldi	r16, 0xFF	; 255
    13bc:	1f ef       	ldi	r17, 0xFF	; 255
    13be:	21 96       	adiw	r28, 0x01	; 1
    13c0:	fe 01       	movw	r30, r28
    13c2:	84 91       	lpm	r24, Z+
    13c4:	88 23       	and	r24, r24
    13c6:	71 f7       	brne	.-36     	; 0x13a4 <puts_P+0x1e>
    13c8:	e0 91 38 01 	lds	r30, 0x0138
    13cc:	f0 91 39 01 	lds	r31, 0x0139
    13d0:	20 85       	ldd	r18, Z+8	; 0x08
    13d2:	31 85       	ldd	r19, Z+9	; 0x09
    13d4:	8a e0       	ldi	r24, 0x0A	; 10
    13d6:	bf 01       	movw	r22, r30
    13d8:	f9 01       	movw	r30, r18
    13da:	09 95       	icall
    13dc:	89 2b       	or	r24, r25
    13de:	11 f0       	breq	.+4      	; 0x13e4 <puts_P+0x5e>
    13e0:	0f ef       	ldi	r16, 0xFF	; 255
    13e2:	1f ef       	ldi	r17, 0xFF	; 255
    13e4:	c8 01       	movw	r24, r16
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	1f 91       	pop	r17
    13ec:	0f 91       	pop	r16
    13ee:	08 95       	ret

000013f0 <vfprintf>:
    13f0:	2f 92       	push	r2
    13f2:	3f 92       	push	r3
    13f4:	4f 92       	push	r4
    13f6:	5f 92       	push	r5
    13f8:	6f 92       	push	r6
    13fa:	7f 92       	push	r7
    13fc:	8f 92       	push	r8
    13fe:	9f 92       	push	r9
    1400:	af 92       	push	r10
    1402:	bf 92       	push	r11
    1404:	cf 92       	push	r12
    1406:	df 92       	push	r13
    1408:	ef 92       	push	r14
    140a:	ff 92       	push	r15
    140c:	0f 93       	push	r16
    140e:	1f 93       	push	r17
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	2b 97       	sbiw	r28, 0x0b	; 11
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	3c 01       	movw	r6, r24
    1426:	2b 01       	movw	r4, r22
    1428:	5a 01       	movw	r10, r20
    142a:	fc 01       	movw	r30, r24
    142c:	17 82       	std	Z+7, r1	; 0x07
    142e:	16 82       	std	Z+6, r1	; 0x06
    1430:	83 81       	ldd	r24, Z+3	; 0x03
    1432:	81 fd       	sbrc	r24, 1
    1434:	03 c0       	rjmp	.+6      	; 0x143c <vfprintf+0x4c>
    1436:	6f ef       	ldi	r22, 0xFF	; 255
    1438:	7f ef       	ldi	r23, 0xFF	; 255
    143a:	b9 c1       	rjmp	.+882    	; 0x17ae <vfprintf+0x3be>
    143c:	9a e0       	ldi	r25, 0x0A	; 10
    143e:	89 2e       	mov	r8, r25
    1440:	1e 01       	movw	r2, r28
    1442:	08 94       	sec
    1444:	21 1c       	adc	r2, r1
    1446:	31 1c       	adc	r3, r1
    1448:	f3 01       	movw	r30, r6
    144a:	23 81       	ldd	r18, Z+3	; 0x03
    144c:	f2 01       	movw	r30, r4
    144e:	23 fd       	sbrc	r18, 3
    1450:	85 91       	lpm	r24, Z+
    1452:	23 ff       	sbrs	r18, 3
    1454:	81 91       	ld	r24, Z+
    1456:	2f 01       	movw	r4, r30
    1458:	88 23       	and	r24, r24
    145a:	09 f4       	brne	.+2      	; 0x145e <vfprintf+0x6e>
    145c:	a5 c1       	rjmp	.+842    	; 0x17a8 <vfprintf+0x3b8>
    145e:	85 32       	cpi	r24, 0x25	; 37
    1460:	39 f4       	brne	.+14     	; 0x1470 <vfprintf+0x80>
    1462:	23 fd       	sbrc	r18, 3
    1464:	85 91       	lpm	r24, Z+
    1466:	23 ff       	sbrs	r18, 3
    1468:	81 91       	ld	r24, Z+
    146a:	2f 01       	movw	r4, r30
    146c:	85 32       	cpi	r24, 0x25	; 37
    146e:	21 f4       	brne	.+8      	; 0x1478 <vfprintf+0x88>
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	b3 01       	movw	r22, r6
    1474:	cc d1       	rcall	.+920    	; 0x180e <fputc>
    1476:	e8 cf       	rjmp	.-48     	; 0x1448 <vfprintf+0x58>
    1478:	98 2f       	mov	r25, r24
    147a:	ff 24       	eor	r15, r15
    147c:	ee 24       	eor	r14, r14
    147e:	99 24       	eor	r9, r9
    1480:	ff e1       	ldi	r31, 0x1F	; 31
    1482:	ff 15       	cp	r31, r15
    1484:	d0 f0       	brcs	.+52     	; 0x14ba <vfprintf+0xca>
    1486:	9b 32       	cpi	r25, 0x2B	; 43
    1488:	69 f0       	breq	.+26     	; 0x14a4 <vfprintf+0xb4>
    148a:	9c 32       	cpi	r25, 0x2C	; 44
    148c:	28 f4       	brcc	.+10     	; 0x1498 <vfprintf+0xa8>
    148e:	90 32       	cpi	r25, 0x20	; 32
    1490:	59 f0       	breq	.+22     	; 0x14a8 <vfprintf+0xb8>
    1492:	93 32       	cpi	r25, 0x23	; 35
    1494:	91 f4       	brne	.+36     	; 0x14ba <vfprintf+0xca>
    1496:	0e c0       	rjmp	.+28     	; 0x14b4 <vfprintf+0xc4>
    1498:	9d 32       	cpi	r25, 0x2D	; 45
    149a:	49 f0       	breq	.+18     	; 0x14ae <vfprintf+0xbe>
    149c:	90 33       	cpi	r25, 0x30	; 48
    149e:	69 f4       	brne	.+26     	; 0x14ba <vfprintf+0xca>
    14a0:	41 e0       	ldi	r20, 0x01	; 1
    14a2:	24 c0       	rjmp	.+72     	; 0x14ec <vfprintf+0xfc>
    14a4:	52 e0       	ldi	r21, 0x02	; 2
    14a6:	f5 2a       	or	r15, r21
    14a8:	84 e0       	ldi	r24, 0x04	; 4
    14aa:	f8 2a       	or	r15, r24
    14ac:	28 c0       	rjmp	.+80     	; 0x14fe <vfprintf+0x10e>
    14ae:	98 e0       	ldi	r25, 0x08	; 8
    14b0:	f9 2a       	or	r15, r25
    14b2:	25 c0       	rjmp	.+74     	; 0x14fe <vfprintf+0x10e>
    14b4:	e0 e1       	ldi	r30, 0x10	; 16
    14b6:	fe 2a       	or	r15, r30
    14b8:	22 c0       	rjmp	.+68     	; 0x14fe <vfprintf+0x10e>
    14ba:	f7 fc       	sbrc	r15, 7
    14bc:	29 c0       	rjmp	.+82     	; 0x1510 <vfprintf+0x120>
    14be:	89 2f       	mov	r24, r25
    14c0:	80 53       	subi	r24, 0x30	; 48
    14c2:	8a 30       	cpi	r24, 0x0A	; 10
    14c4:	70 f4       	brcc	.+28     	; 0x14e2 <vfprintf+0xf2>
    14c6:	f6 fe       	sbrs	r15, 6
    14c8:	05 c0       	rjmp	.+10     	; 0x14d4 <vfprintf+0xe4>
    14ca:	98 9c       	mul	r9, r8
    14cc:	90 2c       	mov	r9, r0
    14ce:	11 24       	eor	r1, r1
    14d0:	98 0e       	add	r9, r24
    14d2:	15 c0       	rjmp	.+42     	; 0x14fe <vfprintf+0x10e>
    14d4:	e8 9c       	mul	r14, r8
    14d6:	e0 2c       	mov	r14, r0
    14d8:	11 24       	eor	r1, r1
    14da:	e8 0e       	add	r14, r24
    14dc:	f0 e2       	ldi	r31, 0x20	; 32
    14de:	ff 2a       	or	r15, r31
    14e0:	0e c0       	rjmp	.+28     	; 0x14fe <vfprintf+0x10e>
    14e2:	9e 32       	cpi	r25, 0x2E	; 46
    14e4:	29 f4       	brne	.+10     	; 0x14f0 <vfprintf+0x100>
    14e6:	f6 fc       	sbrc	r15, 6
    14e8:	5f c1       	rjmp	.+702    	; 0x17a8 <vfprintf+0x3b8>
    14ea:	40 e4       	ldi	r20, 0x40	; 64
    14ec:	f4 2a       	or	r15, r20
    14ee:	07 c0       	rjmp	.+14     	; 0x14fe <vfprintf+0x10e>
    14f0:	9c 36       	cpi	r25, 0x6C	; 108
    14f2:	19 f4       	brne	.+6      	; 0x14fa <vfprintf+0x10a>
    14f4:	50 e8       	ldi	r21, 0x80	; 128
    14f6:	f5 2a       	or	r15, r21
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <vfprintf+0x10e>
    14fa:	98 36       	cpi	r25, 0x68	; 104
    14fc:	49 f4       	brne	.+18     	; 0x1510 <vfprintf+0x120>
    14fe:	f2 01       	movw	r30, r4
    1500:	23 fd       	sbrc	r18, 3
    1502:	95 91       	lpm	r25, Z+
    1504:	23 ff       	sbrs	r18, 3
    1506:	91 91       	ld	r25, Z+
    1508:	2f 01       	movw	r4, r30
    150a:	99 23       	and	r25, r25
    150c:	09 f0       	breq	.+2      	; 0x1510 <vfprintf+0x120>
    150e:	b8 cf       	rjmp	.-144    	; 0x1480 <vfprintf+0x90>
    1510:	89 2f       	mov	r24, r25
    1512:	85 54       	subi	r24, 0x45	; 69
    1514:	83 30       	cpi	r24, 0x03	; 3
    1516:	18 f0       	brcs	.+6      	; 0x151e <vfprintf+0x12e>
    1518:	80 52       	subi	r24, 0x20	; 32
    151a:	83 30       	cpi	r24, 0x03	; 3
    151c:	38 f4       	brcc	.+14     	; 0x152c <vfprintf+0x13c>
    151e:	44 e0       	ldi	r20, 0x04	; 4
    1520:	50 e0       	ldi	r21, 0x00	; 0
    1522:	a4 0e       	add	r10, r20
    1524:	b5 1e       	adc	r11, r21
    1526:	5f e3       	ldi	r21, 0x3F	; 63
    1528:	59 83       	std	Y+1, r21	; 0x01
    152a:	0f c0       	rjmp	.+30     	; 0x154a <vfprintf+0x15a>
    152c:	93 36       	cpi	r25, 0x63	; 99
    152e:	31 f0       	breq	.+12     	; 0x153c <vfprintf+0x14c>
    1530:	93 37       	cpi	r25, 0x73	; 115
    1532:	79 f0       	breq	.+30     	; 0x1552 <vfprintf+0x162>
    1534:	93 35       	cpi	r25, 0x53	; 83
    1536:	09 f0       	breq	.+2      	; 0x153a <vfprintf+0x14a>
    1538:	52 c0       	rjmp	.+164    	; 0x15de <vfprintf+0x1ee>
    153a:	1f c0       	rjmp	.+62     	; 0x157a <vfprintf+0x18a>
    153c:	f5 01       	movw	r30, r10
    153e:	80 81       	ld	r24, Z
    1540:	89 83       	std	Y+1, r24	; 0x01
    1542:	42 e0       	ldi	r20, 0x02	; 2
    1544:	50 e0       	ldi	r21, 0x00	; 0
    1546:	a4 0e       	add	r10, r20
    1548:	b5 1e       	adc	r11, r21
    154a:	61 01       	movw	r12, r2
    154c:	01 e0       	ldi	r16, 0x01	; 1
    154e:	10 e0       	ldi	r17, 0x00	; 0
    1550:	11 c0       	rjmp	.+34     	; 0x1574 <vfprintf+0x184>
    1552:	f5 01       	movw	r30, r10
    1554:	c0 80       	ld	r12, Z
    1556:	d1 80       	ldd	r13, Z+1	; 0x01
    1558:	f6 fc       	sbrc	r15, 6
    155a:	03 c0       	rjmp	.+6      	; 0x1562 <vfprintf+0x172>
    155c:	6f ef       	ldi	r22, 0xFF	; 255
    155e:	7f ef       	ldi	r23, 0xFF	; 255
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <vfprintf+0x176>
    1562:	69 2d       	mov	r22, r9
    1564:	70 e0       	ldi	r23, 0x00	; 0
    1566:	42 e0       	ldi	r20, 0x02	; 2
    1568:	50 e0       	ldi	r21, 0x00	; 0
    156a:	a4 0e       	add	r10, r20
    156c:	b5 1e       	adc	r11, r21
    156e:	c6 01       	movw	r24, r12
    1570:	43 d1       	rcall	.+646    	; 0x17f8 <strnlen>
    1572:	8c 01       	movw	r16, r24
    1574:	5f e7       	ldi	r21, 0x7F	; 127
    1576:	f5 22       	and	r15, r21
    1578:	13 c0       	rjmp	.+38     	; 0x15a0 <vfprintf+0x1b0>
    157a:	f5 01       	movw	r30, r10
    157c:	c0 80       	ld	r12, Z
    157e:	d1 80       	ldd	r13, Z+1	; 0x01
    1580:	f6 fc       	sbrc	r15, 6
    1582:	03 c0       	rjmp	.+6      	; 0x158a <vfprintf+0x19a>
    1584:	6f ef       	ldi	r22, 0xFF	; 255
    1586:	7f ef       	ldi	r23, 0xFF	; 255
    1588:	02 c0       	rjmp	.+4      	; 0x158e <vfprintf+0x19e>
    158a:	69 2d       	mov	r22, r9
    158c:	70 e0       	ldi	r23, 0x00	; 0
    158e:	42 e0       	ldi	r20, 0x02	; 2
    1590:	50 e0       	ldi	r21, 0x00	; 0
    1592:	a4 0e       	add	r10, r20
    1594:	b5 1e       	adc	r11, r21
    1596:	c6 01       	movw	r24, r12
    1598:	24 d1       	rcall	.+584    	; 0x17e2 <strnlen_P>
    159a:	8c 01       	movw	r16, r24
    159c:	50 e8       	ldi	r21, 0x80	; 128
    159e:	f5 2a       	or	r15, r21
    15a0:	f3 fe       	sbrs	r15, 3
    15a2:	06 c0       	rjmp	.+12     	; 0x15b0 <vfprintf+0x1c0>
    15a4:	18 c0       	rjmp	.+48     	; 0x15d6 <vfprintf+0x1e6>
    15a6:	80 e2       	ldi	r24, 0x20	; 32
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	b3 01       	movw	r22, r6
    15ac:	30 d1       	rcall	.+608    	; 0x180e <fputc>
    15ae:	ea 94       	dec	r14
    15b0:	8e 2d       	mov	r24, r14
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	08 17       	cp	r16, r24
    15b6:	19 07       	cpc	r17, r25
    15b8:	b0 f3       	brcs	.-20     	; 0x15a6 <vfprintf+0x1b6>
    15ba:	0d c0       	rjmp	.+26     	; 0x15d6 <vfprintf+0x1e6>
    15bc:	f6 01       	movw	r30, r12
    15be:	f7 fc       	sbrc	r15, 7
    15c0:	85 91       	lpm	r24, Z+
    15c2:	f7 fe       	sbrs	r15, 7
    15c4:	81 91       	ld	r24, Z+
    15c6:	6f 01       	movw	r12, r30
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	b3 01       	movw	r22, r6
    15cc:	20 d1       	rcall	.+576    	; 0x180e <fputc>
    15ce:	e1 10       	cpse	r14, r1
    15d0:	ea 94       	dec	r14
    15d2:	01 50       	subi	r16, 0x01	; 1
    15d4:	10 40       	sbci	r17, 0x00	; 0
    15d6:	01 15       	cp	r16, r1
    15d8:	11 05       	cpc	r17, r1
    15da:	81 f7       	brne	.-32     	; 0x15bc <vfprintf+0x1cc>
    15dc:	e2 c0       	rjmp	.+452    	; 0x17a2 <vfprintf+0x3b2>
    15de:	94 36       	cpi	r25, 0x64	; 100
    15e0:	11 f0       	breq	.+4      	; 0x15e6 <vfprintf+0x1f6>
    15e2:	99 36       	cpi	r25, 0x69	; 105
    15e4:	61 f5       	brne	.+88     	; 0x163e <vfprintf+0x24e>
    15e6:	f7 fe       	sbrs	r15, 7
    15e8:	08 c0       	rjmp	.+16     	; 0x15fa <vfprintf+0x20a>
    15ea:	f5 01       	movw	r30, r10
    15ec:	20 81       	ld	r18, Z
    15ee:	31 81       	ldd	r19, Z+1	; 0x01
    15f0:	42 81       	ldd	r20, Z+2	; 0x02
    15f2:	53 81       	ldd	r21, Z+3	; 0x03
    15f4:	84 e0       	ldi	r24, 0x04	; 4
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	0a c0       	rjmp	.+20     	; 0x160e <vfprintf+0x21e>
    15fa:	f5 01       	movw	r30, r10
    15fc:	80 81       	ld	r24, Z
    15fe:	91 81       	ldd	r25, Z+1	; 0x01
    1600:	9c 01       	movw	r18, r24
    1602:	44 27       	eor	r20, r20
    1604:	37 fd       	sbrc	r19, 7
    1606:	40 95       	com	r20
    1608:	54 2f       	mov	r21, r20
    160a:	82 e0       	ldi	r24, 0x02	; 2
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	a8 0e       	add	r10, r24
    1610:	b9 1e       	adc	r11, r25
    1612:	9f e6       	ldi	r25, 0x6F	; 111
    1614:	f9 22       	and	r15, r25
    1616:	57 ff       	sbrs	r21, 7
    1618:	09 c0       	rjmp	.+18     	; 0x162c <vfprintf+0x23c>
    161a:	50 95       	com	r21
    161c:	40 95       	com	r20
    161e:	30 95       	com	r19
    1620:	21 95       	neg	r18
    1622:	3f 4f       	sbci	r19, 0xFF	; 255
    1624:	4f 4f       	sbci	r20, 0xFF	; 255
    1626:	5f 4f       	sbci	r21, 0xFF	; 255
    1628:	e0 e8       	ldi	r30, 0x80	; 128
    162a:	fe 2a       	or	r15, r30
    162c:	ca 01       	movw	r24, r20
    162e:	b9 01       	movw	r22, r18
    1630:	a1 01       	movw	r20, r2
    1632:	2a e0       	ldi	r18, 0x0A	; 10
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	17 d1       	rcall	.+558    	; 0x1866 <__ultoa_invert>
    1638:	d8 2e       	mov	r13, r24
    163a:	d2 18       	sub	r13, r2
    163c:	3f c0       	rjmp	.+126    	; 0x16bc <vfprintf+0x2cc>
    163e:	95 37       	cpi	r25, 0x75	; 117
    1640:	29 f4       	brne	.+10     	; 0x164c <vfprintf+0x25c>
    1642:	1f 2d       	mov	r17, r15
    1644:	1f 7e       	andi	r17, 0xEF	; 239
    1646:	2a e0       	ldi	r18, 0x0A	; 10
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	1d c0       	rjmp	.+58     	; 0x1686 <vfprintf+0x296>
    164c:	1f 2d       	mov	r17, r15
    164e:	19 7f       	andi	r17, 0xF9	; 249
    1650:	9f 36       	cpi	r25, 0x6F	; 111
    1652:	61 f0       	breq	.+24     	; 0x166c <vfprintf+0x27c>
    1654:	90 37       	cpi	r25, 0x70	; 112
    1656:	20 f4       	brcc	.+8      	; 0x1660 <vfprintf+0x270>
    1658:	98 35       	cpi	r25, 0x58	; 88
    165a:	09 f0       	breq	.+2      	; 0x165e <vfprintf+0x26e>
    165c:	a5 c0       	rjmp	.+330    	; 0x17a8 <vfprintf+0x3b8>
    165e:	0f c0       	rjmp	.+30     	; 0x167e <vfprintf+0x28e>
    1660:	90 37       	cpi	r25, 0x70	; 112
    1662:	39 f0       	breq	.+14     	; 0x1672 <vfprintf+0x282>
    1664:	98 37       	cpi	r25, 0x78	; 120
    1666:	09 f0       	breq	.+2      	; 0x166a <vfprintf+0x27a>
    1668:	9f c0       	rjmp	.+318    	; 0x17a8 <vfprintf+0x3b8>
    166a:	04 c0       	rjmp	.+8      	; 0x1674 <vfprintf+0x284>
    166c:	28 e0       	ldi	r18, 0x08	; 8
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	0a c0       	rjmp	.+20     	; 0x1686 <vfprintf+0x296>
    1672:	10 61       	ori	r17, 0x10	; 16
    1674:	14 fd       	sbrc	r17, 4
    1676:	14 60       	ori	r17, 0x04	; 4
    1678:	20 e1       	ldi	r18, 0x10	; 16
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	04 c0       	rjmp	.+8      	; 0x1686 <vfprintf+0x296>
    167e:	14 fd       	sbrc	r17, 4
    1680:	16 60       	ori	r17, 0x06	; 6
    1682:	20 e1       	ldi	r18, 0x10	; 16
    1684:	32 e0       	ldi	r19, 0x02	; 2
    1686:	17 ff       	sbrs	r17, 7
    1688:	08 c0       	rjmp	.+16     	; 0x169a <vfprintf+0x2aa>
    168a:	f5 01       	movw	r30, r10
    168c:	60 81       	ld	r22, Z
    168e:	71 81       	ldd	r23, Z+1	; 0x01
    1690:	82 81       	ldd	r24, Z+2	; 0x02
    1692:	93 81       	ldd	r25, Z+3	; 0x03
    1694:	44 e0       	ldi	r20, 0x04	; 4
    1696:	50 e0       	ldi	r21, 0x00	; 0
    1698:	08 c0       	rjmp	.+16     	; 0x16aa <vfprintf+0x2ba>
    169a:	f5 01       	movw	r30, r10
    169c:	80 81       	ld	r24, Z
    169e:	91 81       	ldd	r25, Z+1	; 0x01
    16a0:	bc 01       	movw	r22, r24
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	42 e0       	ldi	r20, 0x02	; 2
    16a8:	50 e0       	ldi	r21, 0x00	; 0
    16aa:	a4 0e       	add	r10, r20
    16ac:	b5 1e       	adc	r11, r21
    16ae:	a1 01       	movw	r20, r2
    16b0:	da d0       	rcall	.+436    	; 0x1866 <__ultoa_invert>
    16b2:	d8 2e       	mov	r13, r24
    16b4:	d2 18       	sub	r13, r2
    16b6:	8f e7       	ldi	r24, 0x7F	; 127
    16b8:	f8 2e       	mov	r15, r24
    16ba:	f1 22       	and	r15, r17
    16bc:	f6 fe       	sbrs	r15, 6
    16be:	0b c0       	rjmp	.+22     	; 0x16d6 <vfprintf+0x2e6>
    16c0:	5e ef       	ldi	r21, 0xFE	; 254
    16c2:	f5 22       	and	r15, r21
    16c4:	d9 14       	cp	r13, r9
    16c6:	38 f4       	brcc	.+14     	; 0x16d6 <vfprintf+0x2e6>
    16c8:	f4 fe       	sbrs	r15, 4
    16ca:	07 c0       	rjmp	.+14     	; 0x16da <vfprintf+0x2ea>
    16cc:	f2 fc       	sbrc	r15, 2
    16ce:	05 c0       	rjmp	.+10     	; 0x16da <vfprintf+0x2ea>
    16d0:	8f ee       	ldi	r24, 0xEF	; 239
    16d2:	f8 22       	and	r15, r24
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <vfprintf+0x2ea>
    16d6:	1d 2d       	mov	r17, r13
    16d8:	01 c0       	rjmp	.+2      	; 0x16dc <vfprintf+0x2ec>
    16da:	19 2d       	mov	r17, r9
    16dc:	f4 fe       	sbrs	r15, 4
    16de:	0d c0       	rjmp	.+26     	; 0x16fa <vfprintf+0x30a>
    16e0:	fe 01       	movw	r30, r28
    16e2:	ed 0d       	add	r30, r13
    16e4:	f1 1d       	adc	r31, r1
    16e6:	80 81       	ld	r24, Z
    16e8:	80 33       	cpi	r24, 0x30	; 48
    16ea:	19 f4       	brne	.+6      	; 0x16f2 <vfprintf+0x302>
    16ec:	99 ee       	ldi	r25, 0xE9	; 233
    16ee:	f9 22       	and	r15, r25
    16f0:	08 c0       	rjmp	.+16     	; 0x1702 <vfprintf+0x312>
    16f2:	1f 5f       	subi	r17, 0xFF	; 255
    16f4:	f2 fe       	sbrs	r15, 2
    16f6:	05 c0       	rjmp	.+10     	; 0x1702 <vfprintf+0x312>
    16f8:	03 c0       	rjmp	.+6      	; 0x1700 <vfprintf+0x310>
    16fa:	8f 2d       	mov	r24, r15
    16fc:	86 78       	andi	r24, 0x86	; 134
    16fe:	09 f0       	breq	.+2      	; 0x1702 <vfprintf+0x312>
    1700:	1f 5f       	subi	r17, 0xFF	; 255
    1702:	0f 2d       	mov	r16, r15
    1704:	f3 fc       	sbrc	r15, 3
    1706:	13 c0       	rjmp	.+38     	; 0x172e <vfprintf+0x33e>
    1708:	f0 fe       	sbrs	r15, 0
    170a:	0e c0       	rjmp	.+28     	; 0x1728 <vfprintf+0x338>
    170c:	1e 15       	cp	r17, r14
    170e:	10 f0       	brcs	.+4      	; 0x1714 <vfprintf+0x324>
    1710:	9d 2c       	mov	r9, r13
    1712:	0a c0       	rjmp	.+20     	; 0x1728 <vfprintf+0x338>
    1714:	9d 2c       	mov	r9, r13
    1716:	9e 0c       	add	r9, r14
    1718:	91 1a       	sub	r9, r17
    171a:	1e 2d       	mov	r17, r14
    171c:	05 c0       	rjmp	.+10     	; 0x1728 <vfprintf+0x338>
    171e:	80 e2       	ldi	r24, 0x20	; 32
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	b3 01       	movw	r22, r6
    1724:	74 d0       	rcall	.+232    	; 0x180e <fputc>
    1726:	1f 5f       	subi	r17, 0xFF	; 255
    1728:	1e 15       	cp	r17, r14
    172a:	c8 f3       	brcs	.-14     	; 0x171e <vfprintf+0x32e>
    172c:	04 c0       	rjmp	.+8      	; 0x1736 <vfprintf+0x346>
    172e:	1e 15       	cp	r17, r14
    1730:	10 f4       	brcc	.+4      	; 0x1736 <vfprintf+0x346>
    1732:	e1 1a       	sub	r14, r17
    1734:	01 c0       	rjmp	.+2      	; 0x1738 <vfprintf+0x348>
    1736:	ee 24       	eor	r14, r14
    1738:	04 ff       	sbrs	r16, 4
    173a:	0e c0       	rjmp	.+28     	; 0x1758 <vfprintf+0x368>
    173c:	80 e3       	ldi	r24, 0x30	; 48
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	b3 01       	movw	r22, r6
    1742:	65 d0       	rcall	.+202    	; 0x180e <fputc>
    1744:	02 ff       	sbrs	r16, 2
    1746:	1b c0       	rjmp	.+54     	; 0x177e <vfprintf+0x38e>
    1748:	01 fd       	sbrc	r16, 1
    174a:	03 c0       	rjmp	.+6      	; 0x1752 <vfprintf+0x362>
    174c:	88 e7       	ldi	r24, 0x78	; 120
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	0e c0       	rjmp	.+28     	; 0x176e <vfprintf+0x37e>
    1752:	88 e5       	ldi	r24, 0x58	; 88
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	0b c0       	rjmp	.+22     	; 0x176e <vfprintf+0x37e>
    1758:	80 2f       	mov	r24, r16
    175a:	86 78       	andi	r24, 0x86	; 134
    175c:	81 f0       	breq	.+32     	; 0x177e <vfprintf+0x38e>
    175e:	01 ff       	sbrs	r16, 1
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <vfprintf+0x376>
    1762:	8b e2       	ldi	r24, 0x2B	; 43
    1764:	01 c0       	rjmp	.+2      	; 0x1768 <vfprintf+0x378>
    1766:	80 e2       	ldi	r24, 0x20	; 32
    1768:	f7 fc       	sbrc	r15, 7
    176a:	8d e2       	ldi	r24, 0x2D	; 45
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	b3 01       	movw	r22, r6
    1770:	4e d0       	rcall	.+156    	; 0x180e <fputc>
    1772:	05 c0       	rjmp	.+10     	; 0x177e <vfprintf+0x38e>
    1774:	80 e3       	ldi	r24, 0x30	; 48
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	b3 01       	movw	r22, r6
    177a:	49 d0       	rcall	.+146    	; 0x180e <fputc>
    177c:	9a 94       	dec	r9
    177e:	d9 14       	cp	r13, r9
    1780:	c8 f3       	brcs	.-14     	; 0x1774 <vfprintf+0x384>
    1782:	da 94       	dec	r13
    1784:	f1 01       	movw	r30, r2
    1786:	ed 0d       	add	r30, r13
    1788:	f1 1d       	adc	r31, r1
    178a:	80 81       	ld	r24, Z
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	b3 01       	movw	r22, r6
    1790:	3e d0       	rcall	.+124    	; 0x180e <fputc>
    1792:	dd 20       	and	r13, r13
    1794:	b1 f7       	brne	.-20     	; 0x1782 <vfprintf+0x392>
    1796:	05 c0       	rjmp	.+10     	; 0x17a2 <vfprintf+0x3b2>
    1798:	80 e2       	ldi	r24, 0x20	; 32
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	b3 01       	movw	r22, r6
    179e:	37 d0       	rcall	.+110    	; 0x180e <fputc>
    17a0:	ea 94       	dec	r14
    17a2:	ee 20       	and	r14, r14
    17a4:	c9 f7       	brne	.-14     	; 0x1798 <vfprintf+0x3a8>
    17a6:	50 ce       	rjmp	.-864    	; 0x1448 <vfprintf+0x58>
    17a8:	f3 01       	movw	r30, r6
    17aa:	66 81       	ldd	r22, Z+6	; 0x06
    17ac:	77 81       	ldd	r23, Z+7	; 0x07
    17ae:	cb 01       	movw	r24, r22
    17b0:	2b 96       	adiw	r28, 0x0b	; 11
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	cd bf       	out	0x3d, r28	; 61
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	1f 91       	pop	r17
    17c2:	0f 91       	pop	r16
    17c4:	ff 90       	pop	r15
    17c6:	ef 90       	pop	r14
    17c8:	df 90       	pop	r13
    17ca:	cf 90       	pop	r12
    17cc:	bf 90       	pop	r11
    17ce:	af 90       	pop	r10
    17d0:	9f 90       	pop	r9
    17d2:	8f 90       	pop	r8
    17d4:	7f 90       	pop	r7
    17d6:	6f 90       	pop	r6
    17d8:	5f 90       	pop	r5
    17da:	4f 90       	pop	r4
    17dc:	3f 90       	pop	r3
    17de:	2f 90       	pop	r2
    17e0:	08 95       	ret

000017e2 <strnlen_P>:
    17e2:	fc 01       	movw	r30, r24
    17e4:	05 90       	lpm	r0, Z+
    17e6:	61 50       	subi	r22, 0x01	; 1
    17e8:	70 40       	sbci	r23, 0x00	; 0
    17ea:	01 10       	cpse	r0, r1
    17ec:	d8 f7       	brcc	.-10     	; 0x17e4 <strnlen_P+0x2>
    17ee:	80 95       	com	r24
    17f0:	90 95       	com	r25
    17f2:	8e 0f       	add	r24, r30
    17f4:	9f 1f       	adc	r25, r31
    17f6:	08 95       	ret

000017f8 <strnlen>:
    17f8:	fc 01       	movw	r30, r24
    17fa:	61 50       	subi	r22, 0x01	; 1
    17fc:	70 40       	sbci	r23, 0x00	; 0
    17fe:	01 90       	ld	r0, Z+
    1800:	01 10       	cpse	r0, r1
    1802:	d8 f7       	brcc	.-10     	; 0x17fa <strnlen+0x2>
    1804:	80 95       	com	r24
    1806:	90 95       	com	r25
    1808:	8e 0f       	add	r24, r30
    180a:	9f 1f       	adc	r25, r31
    180c:	08 95       	ret

0000180e <fputc>:
    180e:	0f 93       	push	r16
    1810:	1f 93       	push	r17
    1812:	cf 93       	push	r28
    1814:	df 93       	push	r29
    1816:	8c 01       	movw	r16, r24
    1818:	eb 01       	movw	r28, r22
    181a:	8b 81       	ldd	r24, Y+3	; 0x03
    181c:	81 ff       	sbrs	r24, 1
    181e:	1b c0       	rjmp	.+54     	; 0x1856 <fputc+0x48>
    1820:	82 ff       	sbrs	r24, 2
    1822:	0d c0       	rjmp	.+26     	; 0x183e <fputc+0x30>
    1824:	2e 81       	ldd	r18, Y+6	; 0x06
    1826:	3f 81       	ldd	r19, Y+7	; 0x07
    1828:	8c 81       	ldd	r24, Y+4	; 0x04
    182a:	9d 81       	ldd	r25, Y+5	; 0x05
    182c:	28 17       	cp	r18, r24
    182e:	39 07       	cpc	r19, r25
    1830:	64 f4       	brge	.+24     	; 0x184a <fputc+0x3c>
    1832:	e8 81       	ld	r30, Y
    1834:	f9 81       	ldd	r31, Y+1	; 0x01
    1836:	01 93       	st	Z+, r16
    1838:	f9 83       	std	Y+1, r31	; 0x01
    183a:	e8 83       	st	Y, r30
    183c:	06 c0       	rjmp	.+12     	; 0x184a <fputc+0x3c>
    183e:	e8 85       	ldd	r30, Y+8	; 0x08
    1840:	f9 85       	ldd	r31, Y+9	; 0x09
    1842:	80 2f       	mov	r24, r16
    1844:	09 95       	icall
    1846:	89 2b       	or	r24, r25
    1848:	31 f4       	brne	.+12     	; 0x1856 <fputc+0x48>
    184a:	8e 81       	ldd	r24, Y+6	; 0x06
    184c:	9f 81       	ldd	r25, Y+7	; 0x07
    184e:	01 96       	adiw	r24, 0x01	; 1
    1850:	9f 83       	std	Y+7, r25	; 0x07
    1852:	8e 83       	std	Y+6, r24	; 0x06
    1854:	02 c0       	rjmp	.+4      	; 0x185a <fputc+0x4c>
    1856:	0f ef       	ldi	r16, 0xFF	; 255
    1858:	1f ef       	ldi	r17, 0xFF	; 255
    185a:	c8 01       	movw	r24, r16
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	1f 91       	pop	r17
    1862:	0f 91       	pop	r16
    1864:	08 95       	ret

00001866 <__ultoa_invert>:
    1866:	fa 01       	movw	r30, r20
    1868:	aa 27       	eor	r26, r26
    186a:	28 30       	cpi	r18, 0x08	; 8
    186c:	51 f1       	breq	.+84     	; 0x18c2 <__ultoa_invert+0x5c>
    186e:	20 31       	cpi	r18, 0x10	; 16
    1870:	81 f1       	breq	.+96     	; 0x18d2 <__ultoa_invert+0x6c>
    1872:	e8 94       	clt
    1874:	6f 93       	push	r22
    1876:	6e 7f       	andi	r22, 0xFE	; 254
    1878:	6e 5f       	subi	r22, 0xFE	; 254
    187a:	7f 4f       	sbci	r23, 0xFF	; 255
    187c:	8f 4f       	sbci	r24, 0xFF	; 255
    187e:	9f 4f       	sbci	r25, 0xFF	; 255
    1880:	af 4f       	sbci	r26, 0xFF	; 255
    1882:	b1 e0       	ldi	r27, 0x01	; 1
    1884:	3e d0       	rcall	.+124    	; 0x1902 <__ultoa_invert+0x9c>
    1886:	b4 e0       	ldi	r27, 0x04	; 4
    1888:	3c d0       	rcall	.+120    	; 0x1902 <__ultoa_invert+0x9c>
    188a:	67 0f       	add	r22, r23
    188c:	78 1f       	adc	r23, r24
    188e:	89 1f       	adc	r24, r25
    1890:	9a 1f       	adc	r25, r26
    1892:	a1 1d       	adc	r26, r1
    1894:	68 0f       	add	r22, r24
    1896:	79 1f       	adc	r23, r25
    1898:	8a 1f       	adc	r24, r26
    189a:	91 1d       	adc	r25, r1
    189c:	a1 1d       	adc	r26, r1
    189e:	6a 0f       	add	r22, r26
    18a0:	71 1d       	adc	r23, r1
    18a2:	81 1d       	adc	r24, r1
    18a4:	91 1d       	adc	r25, r1
    18a6:	a1 1d       	adc	r26, r1
    18a8:	20 d0       	rcall	.+64     	; 0x18ea <__ultoa_invert+0x84>
    18aa:	09 f4       	brne	.+2      	; 0x18ae <__ultoa_invert+0x48>
    18ac:	68 94       	set
    18ae:	3f 91       	pop	r19
    18b0:	2a e0       	ldi	r18, 0x0A	; 10
    18b2:	26 9f       	mul	r18, r22
    18b4:	11 24       	eor	r1, r1
    18b6:	30 19       	sub	r19, r0
    18b8:	30 5d       	subi	r19, 0xD0	; 208
    18ba:	31 93       	st	Z+, r19
    18bc:	de f6       	brtc	.-74     	; 0x1874 <__ultoa_invert+0xe>
    18be:	cf 01       	movw	r24, r30
    18c0:	08 95       	ret
    18c2:	46 2f       	mov	r20, r22
    18c4:	47 70       	andi	r20, 0x07	; 7
    18c6:	40 5d       	subi	r20, 0xD0	; 208
    18c8:	41 93       	st	Z+, r20
    18ca:	b3 e0       	ldi	r27, 0x03	; 3
    18cc:	0f d0       	rcall	.+30     	; 0x18ec <__ultoa_invert+0x86>
    18ce:	c9 f7       	brne	.-14     	; 0x18c2 <__ultoa_invert+0x5c>
    18d0:	f6 cf       	rjmp	.-20     	; 0x18be <__ultoa_invert+0x58>
    18d2:	46 2f       	mov	r20, r22
    18d4:	4f 70       	andi	r20, 0x0F	; 15
    18d6:	40 5d       	subi	r20, 0xD0	; 208
    18d8:	4a 33       	cpi	r20, 0x3A	; 58
    18da:	18 f0       	brcs	.+6      	; 0x18e2 <__ultoa_invert+0x7c>
    18dc:	49 5d       	subi	r20, 0xD9	; 217
    18de:	31 fd       	sbrc	r19, 1
    18e0:	40 52       	subi	r20, 0x20	; 32
    18e2:	41 93       	st	Z+, r20
    18e4:	02 d0       	rcall	.+4      	; 0x18ea <__ultoa_invert+0x84>
    18e6:	a9 f7       	brne	.-22     	; 0x18d2 <__ultoa_invert+0x6c>
    18e8:	ea cf       	rjmp	.-44     	; 0x18be <__ultoa_invert+0x58>
    18ea:	b4 e0       	ldi	r27, 0x04	; 4
    18ec:	a6 95       	lsr	r26
    18ee:	97 95       	ror	r25
    18f0:	87 95       	ror	r24
    18f2:	77 95       	ror	r23
    18f4:	67 95       	ror	r22
    18f6:	ba 95       	dec	r27
    18f8:	c9 f7       	brne	.-14     	; 0x18ec <__ultoa_invert+0x86>
    18fa:	00 97       	sbiw	r24, 0x00	; 0
    18fc:	61 05       	cpc	r22, r1
    18fe:	71 05       	cpc	r23, r1
    1900:	08 95       	ret
    1902:	9b 01       	movw	r18, r22
    1904:	ac 01       	movw	r20, r24
    1906:	0a 2e       	mov	r0, r26
    1908:	06 94       	lsr	r0
    190a:	57 95       	ror	r21
    190c:	47 95       	ror	r20
    190e:	37 95       	ror	r19
    1910:	27 95       	ror	r18
    1912:	ba 95       	dec	r27
    1914:	c9 f7       	brne	.-14     	; 0x1908 <__ultoa_invert+0xa2>
    1916:	62 0f       	add	r22, r18
    1918:	73 1f       	adc	r23, r19
    191a:	84 1f       	adc	r24, r20
    191c:	95 1f       	adc	r25, r21
    191e:	a0 1d       	adc	r26, r0
    1920:	08 95       	ret

00001922 <_exit>:
    1922:	f8 94       	cli

00001924 <__stop_program>:
    1924:	ff cf       	rjmp	.-2      	; 0x1924 <__stop_program>
