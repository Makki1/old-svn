
RNDISEthernetHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00002212  000022a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002212  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  0080011e  0080011e  000022c4  2**0
                  ALLOC
  3 .stab         00002484  00000000  00000000  000022c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e2b  00000000  00000000  00004748  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000378  00000000  00000000  00005573  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000008c5  00000000  00000000  000058eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000056fe  00000000  00000000  000061b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001898  00000000  00000000  0000b8ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000042fa  00000000  00000000  0000d146  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000530  00000000  00000000  00011440  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002761  00000000  00000000  00011970  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000024f8  00000000  00000000  000140d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000420  00000000  00000000  000165c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
 *
 *  \return A value from the USB_Host_SendControlErrorCodes_t enum or RNDIS_COMMAND_FAILED if the device returned a
 *          logical command failure
 */
uint8_t RNDIS_SendKeepAlive(void)
{
       0:	dc c1       	rjmp	.+952    	; 0x3ba <__ctors_end>
		Pipe_DisablePipe();
	}
}

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
       2:	00 00       	nop
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       4:	f8 c1       	rjmp	.+1008   	; 0x3f6 <__bad_interrupt>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       6:	00 00       	nop
	return USB_Host_SendControlRequest(NULL);
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
       8:	f6 c1       	rjmp	.+1004   	; 0x3f6 <__bad_interrupt>

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       a:	00 00       	nop
       c:	f4 c1       	rjmp	.+1000   	; 0x3f6 <__bad_interrupt>
       e:	00 00       	nop
      10:	f2 c1       	rjmp	.+996    	; 0x3f6 <__bad_interrupt>
      12:	00 00       	nop
      14:	f0 c1       	rjmp	.+992    	; 0x3f6 <__bad_interrupt>
      16:	00 00       	nop
      18:	ee c1       	rjmp	.+988    	; 0x3f6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ec c1       	rjmp	.+984    	; 0x3f6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	ea c1       	rjmp	.+980    	; 0x3f6 <__bad_interrupt>
      22:	00 00       	nop
      24:	e8 c1       	rjmp	.+976    	; 0x3f6 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 56 0a 	jmp	0x14ac	; 0x14ac <__vector_10>
      2c:	e4 c1       	rjmp	.+968    	; 0x3f6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	e2 c1       	rjmp	.+964    	; 0x3f6 <__bad_interrupt>
      32:	00 00       	nop
      34:	e0 c1       	rjmp	.+960    	; 0x3f6 <__bad_interrupt>
      36:	00 00       	nop
      38:	de c1       	rjmp	.+956    	; 0x3f6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	dc c1       	rjmp	.+952    	; 0x3f6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	da c1       	rjmp	.+948    	; 0x3f6 <__bad_interrupt>
      42:	00 00       	nop
      44:	d8 c1       	rjmp	.+944    	; 0x3f6 <__bad_interrupt>
      46:	00 00       	nop
      48:	d6 c1       	rjmp	.+940    	; 0x3f6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	d4 c1       	rjmp	.+936    	; 0x3f6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	d2 c1       	rjmp	.+932    	; 0x3f6 <__bad_interrupt>
      52:	00 00       	nop
      54:	d0 c1       	rjmp	.+928    	; 0x3f6 <__bad_interrupt>
      56:	00 00       	nop
      58:	ce c1       	rjmp	.+924    	; 0x3f6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	cc c1       	rjmp	.+920    	; 0x3f6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	ca c1       	rjmp	.+916    	; 0x3f6 <__bad_interrupt>
      62:	00 00       	nop
      64:	c8 c1       	rjmp	.+912    	; 0x3f6 <__bad_interrupt>
      66:	00 00       	nop
      68:	c6 c1       	rjmp	.+908    	; 0x3f6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	c4 c1       	rjmp	.+904    	; 0x3f6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	c2 c1       	rjmp	.+900    	; 0x3f6 <__bad_interrupt>
      72:	00 00       	nop
      74:	c0 c1       	rjmp	.+896    	; 0x3f6 <__bad_interrupt>
      76:	00 00       	nop
      78:	be c1       	rjmp	.+892    	; 0x3f6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	bc c1       	rjmp	.+888    	; 0x3f6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	ba c1       	rjmp	.+884    	; 0x3f6 <__bad_interrupt>
      82:	00 00       	nop
      84:	b8 c1       	rjmp	.+880    	; 0x3f6 <__bad_interrupt>
      86:	00 00       	nop
      88:	b6 c1       	rjmp	.+876    	; 0x3f6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b4 c1       	rjmp	.+872    	; 0x3f6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	b2 c1       	rjmp	.+868    	; 0x3f6 <__bad_interrupt>
      92:	00 00       	nop
      94:	b0 c1       	rjmp	.+864    	; 0x3f6 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4627>:
      98:	1b 5b 33 31 6d 50 61 63 6b 65 74 20 74 6f 6f 20     .[31mPacket too 
      a8:	6c 61 72 67 65 2e 0d 0a 1b 5b 33 37 6d 00           large....[37m.

000000b6 <__c.4625>:
      b6:	2a 2a 2a 50 41 43 4b 45 54 20 28 53 69 7a 65 20     ***PACKET (Size 
      c6:	25 64 29 2a 2a 2a 0d 0a 00                          %d)***...

000000cf <__c.4623>:
      cf:	1b 5b 33 31 6d 50 61 63 6b 65 74 20 52 65 63 65     .[31mPacket Rece
      df:	70 74 69 6f 6e 20 45 72 72 6f 72 2e 0d 0a 20 2d     ption Error... -
      ef:	2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20 25 64     - Error Code: %d
      ff:	0d 0a 1b 5b 33 37 6d 00                             ...[37m.

00000107 <__c.4612>:
     107:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     117:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     127:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     137:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     147:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     157:	1b 5b 33 37 6d 00                                   .[37m.

0000015d <__c.4604>:
     15d:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     16d:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     17d:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000018c <__c.4591>:
     18c:	52 4e 44 49 53 20 44 65 76 69 63 65 20 45 6e 75     RNDIS Device Enu
     19c:	6d 65 72 61 74 65 64 2e 0d 0a 00                    merated....

000001a7 <__c.4589>:
     1a7:	44 65 76 69 63 65 20 56 65 6e 64 6f 72 20 49 44     Device Vendor ID
     1b7:	3a 20 30 78 25 30 38 6c 58 0d 0a 00                 : 0x%08lX...

000001c3 <__c.4587>:
     1c3:	1b 5b 33 31 6d 45 72 72 6f 72 20 47 65 74 74 69     .[31mError Getti
     1d3:	6e 67 20 56 65 6e 64 6f 72 20 49 44 2e 0d 0a 20     ng Vendor ID... 
     1e3:	2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20 25     -- Error Code: %
     1f3:	64 0d 0a 1b 5b 33 37 6d 00                          d...[37m.

000001fc <__c.4584>:
     1fc:	1b 5b 33 31 6d 45 72 72 6f 72 20 53 65 74 74 69     .[31mError Setti
     20c:	6e 67 20 44 65 76 69 63 65 20 50 61 63 6b 65 74     ng Device Packet
     21c:	20 46 69 6c 74 65 72 2e 0d 0a 20 2d 2d 20 45 72      Filter... -- Er
     22c:	72 6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b     ror Code: %d...[
     23c:	33 37 6d 00                                         37m.

00000240 <__c.4581>:
     240:	44 65 76 69 63 65 20 4d 61 78 20 54 72 61 6e 73     Device Max Trans
     250:	66 65 72 20 53 69 7a 65 3a 20 25 6c 75 20 62 79     fer Size: %lu by
     260:	74 65 73 2e 0d 0a 00                                tes....

00000267 <__c.4579>:
     267:	1b 5b 33 31 6d 45 72 72 6f 72 20 49 6e 69 74 69     .[31mError Initi
     277:	61 6c 69 7a 69 6e 67 20 44 65 76 69 63 65 2e 0d     alizing Device..
     287:	0a 20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a     . -- Error Code:
     297:	20 25 64 0d 0a 1b 5b 33 37 6d 00                     %d...[37m.

000002a2 <__c.4576>:
     2a2:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     2b2:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     2c2:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     2d2:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     2e2:	37 6d 00                                            7m.

000002e5 <__c.4574>:
     2e5:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     2f5:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

000002ff <__c.4572>:
     2ff:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     30f:	69 63 65 2e 0d 0a 00                                ice....

00000316 <__c.4570>:
     316:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     326:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     336:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

00000340 <__c.4567>:
     340:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     350:	61 74 61 2e 0d 0a 00                                ata....

00000357 <__c.4562>:
     357:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
     367:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
     377:	00                                                  .

00000378 <__c.4557>:
     378:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     388:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

00000395 <__c.4544>:
     395:	1b 5b 33 36 6d 52 4e 44 49 53 20 48 6f 73 74 20     .[36mRNDIS Host 
     3a5:	44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b     Demo running....
     3b5:	5b 33 37 6d 00                                      [37m.

000003ba <__ctors_end>:
     3ba:	11 24       	eor	r1, r1
     3bc:	1f be       	out	0x3f, r1	; 63
     3be:	cf ef       	ldi	r28, 0xFF	; 255
     3c0:	d0 e2       	ldi	r29, 0x20	; 32
     3c2:	de bf       	out	0x3e, r29	; 62
     3c4:	cd bf       	out	0x3d, r28	; 61

000003c6 <__do_copy_data>:
     3c6:	11 e0       	ldi	r17, 0x01	; 1
     3c8:	a0 e0       	ldi	r26, 0x00	; 0
     3ca:	b1 e0       	ldi	r27, 0x01	; 1
     3cc:	e2 e1       	ldi	r30, 0x12	; 18
     3ce:	f2 e2       	ldi	r31, 0x22	; 34
     3d0:	00 e0       	ldi	r16, 0x00	; 0
     3d2:	0b bf       	out	0x3b, r16	; 59
     3d4:	02 c0       	rjmp	.+4      	; 0x3da <__do_copy_data+0x14>
     3d6:	07 90       	elpm	r0, Z+
     3d8:	0d 92       	st	X+, r0
     3da:	ae 31       	cpi	r26, 0x1E	; 30
     3dc:	b1 07       	cpc	r27, r17
     3de:	d9 f7       	brne	.-10     	; 0x3d6 <__do_copy_data+0x10>

000003e0 <__do_clear_bss>:
     3e0:	11 e0       	ldi	r17, 0x01	; 1
     3e2:	ae e1       	ldi	r26, 0x1E	; 30
     3e4:	b1 e0       	ldi	r27, 0x01	; 1
     3e6:	01 c0       	rjmp	.+2      	; 0x3ea <.do_clear_bss_start>

000003e8 <.do_clear_bss_loop>:
     3e8:	1d 92       	st	X+, r1

000003ea <.do_clear_bss_start>:
     3ea:	a4 34       	cpi	r26, 0x44	; 68
     3ec:	b1 07       	cpc	r27, r17
     3ee:	e1 f7       	brne	.-8      	; 0x3e8 <.do_clear_bss_loop>
     3f0:	53 d2       	rcall	.+1190   	; 0x898 <main>
     3f2:	0c 94 07 11 	jmp	0x220e	; 0x220e <_exit>

000003f6 <__bad_interrupt>:
     3f6:	04 ce       	rjmp	.-1016   	; 0x0 <__vectors>

000003f8 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     3f8:	90 91 2f 01 	lds	r25, 0x012F
     3fc:	2d b7       	in	r18, 0x3d	; 61
     3fe:	3e b7       	in	r19, 0x3e	; 62
     400:	28 50       	subi	r18, 0x08	; 8
     402:	30 40       	sbci	r19, 0x00	; 0
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	f8 94       	cli
     408:	3e bf       	out	0x3e, r19	; 62
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	2d bf       	out	0x3d, r18	; 61
     40e:	ed b7       	in	r30, 0x3d	; 61
     410:	fe b7       	in	r31, 0x3e	; 62
     412:	31 96       	adiw	r30, 0x01	; 1
     414:	27 e0       	ldi	r18, 0x07	; 7
     416:	31 e0       	ldi	r19, 0x01	; 1
     418:	ad b7       	in	r26, 0x3d	; 61
     41a:	be b7       	in	r27, 0x3e	; 62
     41c:	12 96       	adiw	r26, 0x02	; 2
     41e:	3c 93       	st	X, r19
     420:	2e 93       	st	-X, r18
     422:	11 97       	sbiw	r26, 0x01	; 1
     424:	82 83       	std	Z+2, r24	; 0x02
     426:	13 82       	std	Z+3, r1	; 0x03
     428:	64 83       	std	Z+4, r22	; 0x04
     42a:	15 82       	std	Z+5, r1	; 0x05
     42c:	96 83       	std	Z+6, r25	; 0x06
     42e:	17 82       	std	Z+7, r1	; 0x07
     430:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <printf_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     434:	8b b1       	in	r24, 0x0b	; 11
     436:	8f 70       	andi	r24, 0x0F	; 15
     438:	80 69       	ori	r24, 0x90	; 144
     43a:	8b b9       	out	0x0b, r24	; 11
     43c:	2d b7       	in	r18, 0x3d	; 61
     43e:	3e b7       	in	r19, 0x3e	; 62
     440:	28 5f       	subi	r18, 0xF8	; 248
     442:	3f 4f       	sbci	r19, 0xFF	; 255
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	f8 94       	cli
     448:	3e bf       	out	0x3e, r19	; 62
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     44e:	08 95       	ret

00000450 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     450:	87 e5       	ldi	r24, 0x57	; 87
     452:	93 e0       	ldi	r25, 0x03	; 3
     454:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <puts_P>
     458:	8b b1       	in	r24, 0x0b	; 11
     45a:	8f 70       	andi	r24, 0x0F	; 15
     45c:	80 61       	ori	r24, 0x10	; 16
     45e:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     460:	08 95       	ret

00000462 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     462:	88 e7       	ldi	r24, 0x78	; 120
     464:	93 e0       	ldi	r25, 0x03	; 3
     466:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <puts_P>
     46a:	8b b1       	in	r24, 0x0b	; 11
     46c:	8f 70       	andi	r24, 0x0F	; 15
     46e:	80 6a       	ori	r24, 0xA0	; 160
     470:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     472:	08 95       	ret

00000474 <RNDISHost_Task>:
}

/** Task to read in data received from the attached RNDIS device and print it to the serial port.
 */
void RNDISHost_Task(void)
{
     474:	8f 92       	push	r8
     476:	9f 92       	push	r9
     478:	af 92       	push	r10
     47a:	bf 92       	push	r11
     47c:	cf 92       	push	r12
     47e:	df 92       	push	r13
     480:	ef 92       	push	r14
     482:	ff 92       	push	r15
     484:	0f 93       	push	r16
     486:	1f 93       	push	r17
     488:	df 93       	push	r29
     48a:	cf 93       	push	r28
     48c:	00 d0       	rcall	.+0      	; 0x48e <RNDISHost_Task+0x1a>
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
	Pipe_Freeze();

	printf("\r\n\r\n");

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     492:	8d b6       	in	r8, 0x3d	; 61
     494:	9e b6       	in	r9, 0x3e	; 62

/** Task to read in data received from the attached RNDIS device and print it to the serial port.
 */
void RNDISHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     496:	80 91 2f 01 	lds	r24, 0x012F
     49a:	8b 30       	cpi	r24, 0x0B	; 11
     49c:	09 f0       	breq	.+2      	; 0x4a0 <RNDISHost_Task+0x2c>
     49e:	a0 c0       	rjmp	.+320    	; 0x5e0 <RNDISHost_Task+0x16c>
     4a0:	8b b1       	in	r24, 0x0b	; 11
     4a2:	8f 70       	andi	r24, 0x0F	; 15
     4a4:	80 62       	ori	r24, 0x20	; 32
     4a6:	8b b9       	out	0x0b, r24	; 11
	uint8_t ErrorCode;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

	uint16_t PacketLength;
	if ((ErrorCode = RNDIS_GetPacketLength(&PacketLength)) != HOST_SENDCONTROL_Successful)
     4a8:	ce 01       	movw	r24, r28
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	e3 d2       	rcall	.+1478   	; 0xa74 <RNDIS_GetPacketLength>
     4ae:	28 2f       	mov	r18, r24
     4b0:	88 23       	and	r24, r24
     4b2:	b1 f0       	breq	.+44     	; 0x4e0 <RNDISHost_Task+0x6c>
	{
		printf_P(PSTR(ESC_FG_RED "Packet Reception Error.\r\n"
     4b4:	00 d0       	rcall	.+0      	; 0x4b6 <RNDISHost_Task+0x42>
     4b6:	00 d0       	rcall	.+0      	; 0x4b8 <RNDISHost_Task+0x44>
     4b8:	ed b7       	in	r30, 0x3d	; 61
     4ba:	fe b7       	in	r31, 0x3e	; 62
     4bc:	31 96       	adiw	r30, 0x01	; 1
     4be:	8f ec       	ldi	r24, 0xCF	; 207
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	ad b7       	in	r26, 0x3d	; 61
     4c4:	be b7       	in	r27, 0x3e	; 62
     4c6:	12 96       	adiw	r26, 0x02	; 2
     4c8:	9c 93       	st	X, r25
     4ca:	8e 93       	st	-X, r24
     4cc:	11 97       	sbiw	r26, 0x01	; 1
     4ce:	22 83       	std	Z+2, r18	; 0x02
     4d0:	13 82       	std	Z+3, r1	; 0x03
     4d2:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <printf_P>
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	0f 90       	pop	r0
     4dc:	0f 90       	pop	r0
     4de:	80 c0       	rjmp	.+256    	; 0x5e0 <RNDISHost_Task+0x16c>
		                         " -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
		return;
	}

	if (!(PacketLength))
     4e0:	29 81       	ldd	r18, Y+1	; 0x01
     4e2:	3a 81       	ldd	r19, Y+2	; 0x02
     4e4:	21 15       	cp	r18, r1
     4e6:	31 05       	cpc	r19, r1
     4e8:	09 f4       	brne	.+2      	; 0x4ec <RNDISHost_Task+0x78>
     4ea:	7a c0       	rjmp	.+244    	; 0x5e0 <RNDISHost_Task+0x16c>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     4ec:	80 91 a9 00 	lds	r24, 0x00A9
     4f0:	8f 7b       	andi	r24, 0xBF	; 191
     4f2:	80 93 a9 00 	sts	0x00A9, r24
	  return;

	Pipe_Unfreeze();

	printf_P(PSTR("***PACKET (Size %d)***\r\n"), PacketLength);
     4f6:	00 d0       	rcall	.+0      	; 0x4f8 <RNDISHost_Task+0x84>
     4f8:	00 d0       	rcall	.+0      	; 0x4fa <RNDISHost_Task+0x86>
     4fa:	86 eb       	ldi	r24, 0xB6	; 182
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	ed b7       	in	r30, 0x3d	; 61
     500:	fe b7       	in	r31, 0x3e	; 62
     502:	92 83       	std	Z+2, r25	; 0x02
     504:	81 83       	std	Z+1, r24	; 0x01
     506:	34 83       	std	Z+4, r19	; 0x04
     508:	23 83       	std	Z+3, r18	; 0x03
     50a:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <printf_P>

	if (PacketLength > 1024)
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
     516:	69 81       	ldd	r22, Y+1	; 0x01
     518:	7a 81       	ldd	r23, Y+2	; 0x02
     51a:	f4 e0       	ldi	r31, 0x04	; 4
     51c:	61 30       	cpi	r22, 0x01	; 1
     51e:	7f 07       	cpc	r23, r31
     520:	58 f0       	brcs	.+22     	; 0x538 <RNDISHost_Task+0xc4>
	{
		puts_P(PSTR(ESC_FG_RED "Packet too large.\r\n" ESC_FG_WHITE));
     522:	88 e9       	ldi	r24, 0x98	; 152
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <puts_P>
		Pipe_Discard_Stream(PacketLength, NULL);
     52a:	89 81       	ldd	r24, Y+1	; 0x01
     52c:	9a 81       	ldd	r25, Y+2	; 0x02
     52e:	60 e0       	ldi	r22, 0x00	; 0
     530:	70 e0       	ldi	r23, 0x00	; 0
     532:	0e 94 45 0b 	call	0x168a	; 0x168a <Pipe_Discard_Stream>
     536:	42 c0       	rjmp	.+132    	; 0x5bc <RNDISHost_Task+0x148>
     538:	bd b6       	in	r11, 0x3d	; 61
     53a:	ae b6       	in	r10, 0x3e	; 62
	}
	else
	{
		uint8_t PacketBuffer[PacketLength];
     53c:	8d b7       	in	r24, 0x3d	; 61
     53e:	9e b7       	in	r25, 0x3e	; 62
     540:	86 1b       	sub	r24, r22
     542:	97 0b       	sbc	r25, r23
     544:	0f b6       	in	r0, 0x3f	; 63
     546:	f8 94       	cli
     548:	9e bf       	out	0x3e, r25	; 62
     54a:	0f be       	out	0x3f, r0	; 63
     54c:	8d bf       	out	0x3d, r24	; 61
     54e:	ed b6       	in	r14, 0x3d	; 61
     550:	fe b6       	in	r15, 0x3e	; 62
     552:	08 94       	sec
     554:	e1 1c       	adc	r14, r1
     556:	f1 1c       	adc	r15, r1

		Pipe_Read_Stream_LE(&PacketBuffer, PacketLength, NULL);
     558:	c7 01       	movw	r24, r14
     55a:	40 e0       	ldi	r20, 0x00	; 0
     55c:	50 e0       	ldi	r21, 0x00	; 0
     55e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <Pipe_Read_Stream_LE>
     562:	00 e0       	ldi	r16, 0x00	; 0
     564:	10 e0       	ldi	r17, 0x00	; 0

		for (uint16_t i = 0; i < PacketLength; i++)
		  printf("0x%02x ", PacketBuffer[i]);
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	c8 2e       	mov	r12, r24
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	d8 2e       	mov	r13, r24
     56e:	19 c0       	rjmp	.+50     	; 0x5a2 <RNDISHost_Task+0x12e>
     570:	00 d0       	rcall	.+0      	; 0x572 <RNDISHost_Task+0xfe>
     572:	00 d0       	rcall	.+0      	; 0x574 <RNDISHost_Task+0x100>
     574:	ed b7       	in	r30, 0x3d	; 61
     576:	fe b7       	in	r31, 0x3e	; 62
     578:	31 96       	adiw	r30, 0x01	; 1
     57a:	ad b7       	in	r26, 0x3d	; 61
     57c:	be b7       	in	r27, 0x3e	; 62
     57e:	12 96       	adiw	r26, 0x02	; 2
     580:	dc 92       	st	X, r13
     582:	ce 92       	st	-X, r12
     584:	11 97       	sbiw	r26, 0x01	; 1
     586:	d7 01       	movw	r26, r14
     588:	a0 0f       	add	r26, r16
     58a:	b1 1f       	adc	r27, r17
     58c:	8c 91       	ld	r24, X
     58e:	82 83       	std	Z+2, r24	; 0x02
     590:	13 82       	std	Z+3, r1	; 0x03
     592:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <printf>
	{
		uint8_t PacketBuffer[PacketLength];

		Pipe_Read_Stream_LE(&PacketBuffer, PacketLength, NULL);

		for (uint16_t i = 0; i < PacketLength; i++)
     596:	0f 5f       	subi	r16, 0xFF	; 255
     598:	1f 4f       	sbci	r17, 0xFF	; 255
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	89 81       	ldd	r24, Y+1	; 0x01
     5a4:	9a 81       	ldd	r25, Y+2	; 0x02
     5a6:	08 17       	cp	r16, r24
     5a8:	19 07       	cpc	r17, r25
     5aa:	10 f3       	brcs	.-60     	; 0x570 <RNDISHost_Task+0xfc>
     5ac:	8b 2d       	mov	r24, r11
     5ae:	9a 2d       	mov	r25, r10
     5b0:	9c 01       	movw	r18, r24
     5b2:	0f b6       	in	r0, 0x3f	; 63
     5b4:	f8 94       	cli
     5b6:	3e bf       	out	0x3e, r19	; 62
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	2d bf       	out	0x3d, r18	; 61
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     5bc:	80 91 a6 00 	lds	r24, 0x00A6
     5c0:	8e 77       	andi	r24, 0x7E	; 126
     5c2:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     5c6:	80 91 a9 00 	lds	r24, 0x00A9
     5ca:	80 64       	ori	r24, 0x40	; 64
     5cc:	80 93 a9 00 	sts	0x00A9, r24
	}

	Pipe_ClearIN();
	Pipe_Freeze();

	printf("\r\n\r\n");
     5d0:	88 e0       	ldi	r24, 0x08	; 8
     5d2:	91 e0       	ldi	r25, 0x01	; 1
     5d4:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <puts>
     5d8:	8b b1       	in	r24, 0x0b	; 11
     5da:	8f 70       	andi	r24, 0x0F	; 15
     5dc:	80 66       	ori	r24, 0x60	; 96
     5de:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     5e0:	0f b6       	in	r0, 0x3f	; 63
     5e2:	f8 94       	cli
     5e4:	9e be       	out	0x3e, r9	; 62
     5e6:	0f be       	out	0x3f, r0	; 63
     5e8:	8d be       	out	0x3d, r8	; 61
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	cf 91       	pop	r28
     5f0:	df 91       	pop	r29
     5f2:	1f 91       	pop	r17
     5f4:	0f 91       	pop	r16
     5f6:	ff 90       	pop	r15
     5f8:	ef 90       	pop	r14
     5fa:	df 90       	pop	r13
     5fc:	cf 90       	pop	r12
     5fe:	bf 90       	pop	r11
     600:	af 90       	pop	r10
     602:	9f 90       	pop	r9
     604:	8f 90       	pop	r8
     606:	08 95       	ret

00000608 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     608:	1f 93       	push	r17
     60a:	18 2f       	mov	r17, r24
	USB_Disable();
     60c:	2a d7       	rcall	.+3668   	; 0x1462 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     60e:	00 d0       	rcall	.+0      	; 0x610 <EVENT_USB_Host_HostError+0x8>
     610:	00 d0       	rcall	.+0      	; 0x612 <EVENT_USB_Host_HostError+0xa>
     612:	ed b7       	in	r30, 0x3d	; 61
     614:	fe b7       	in	r31, 0x3e	; 62
     616:	31 96       	adiw	r30, 0x01	; 1
     618:	8d e5       	ldi	r24, 0x5D	; 93
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	ad b7       	in	r26, 0x3d	; 61
     61e:	be b7       	in	r27, 0x3e	; 62
     620:	12 96       	adiw	r26, 0x02	; 2
     622:	9c 93       	st	X, r25
     624:	8e 93       	st	-X, r24
     626:	11 97       	sbiw	r26, 0x01	; 1
     628:	12 83       	std	Z+2, r17	; 0x02
     62a:	13 82       	std	Z+3, r1	; 0x03
     62c:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <printf_P>
     630:	8b b1       	in	r24, 0x0b	; 11
     632:	8f 70       	andi	r24, 0x0F	; 15
     634:	80 69       	ori	r24, 0x90	; 144
     636:	8b b9       	out	0x0b, r24	; 11
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	ff cf       	rjmp	.-2      	; 0x640 <EVENT_USB_Host_HostError+0x38>

00000642 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     642:	1f 93       	push	r17
     644:	df 93       	push	r29
     646:	cf 93       	push	r28
     648:	cd b7       	in	r28, 0x3d	; 61
     64a:	de b7       	in	r29, 0x3e	; 62
     64c:	2a 97       	sbiw	r28, 0x0a	; 10
     64e:	0f b6       	in	r0, 0x3f	; 63
     650:	f8 94       	cli
     652:	de bf       	out	0x3e, r29	; 62
     654:	0f be       	out	0x3f, r0	; 63
     656:	cd bf       	out	0x3d, r28	; 61
	puts_P(PSTR("Getting Config Data.\r\n"));
     658:	80 e4       	ldi	r24, 0x40	; 64
     65a:	93 e0       	ldi	r25, 0x03	; 3
     65c:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     660:	5b d1       	rcall	.+694    	; 0x918 <ProcessConfigurationDescriptor>
     662:	18 2f       	mov	r17, r24
     664:	88 23       	and	r24, r24
     666:	c1 f0       	breq	.+48     	; 0x698 <EVENT_USB_Host_DeviceEnumerationComplete+0x56>
	{
		if (ErrorCode == ControlError)
     668:	81 30       	cpi	r24, 0x01	; 1
     66a:	19 f4       	brne	.+6      	; 0x672 <EVENT_USB_Host_DeviceEnumerationComplete+0x30>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     66c:	86 e1       	ldi	r24, 0x16	; 22
     66e:	93 e0       	ldi	r25, 0x03	; 3
     670:	02 c0       	rjmp	.+4      	; 0x676 <EVENT_USB_Host_DeviceEnumerationComplete+0x34>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     672:	8f ef       	ldi	r24, 0xFF	; 255
     674:	92 e0       	ldi	r25, 0x02	; 2
     676:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     67a:	00 d0       	rcall	.+0      	; 0x67c <EVENT_USB_Host_DeviceEnumerationComplete+0x3a>
     67c:	00 d0       	rcall	.+0      	; 0x67e <EVENT_USB_Host_DeviceEnumerationComplete+0x3c>
     67e:	ed b7       	in	r30, 0x3d	; 61
     680:	fe b7       	in	r31, 0x3e	; 62
     682:	31 96       	adiw	r30, 0x01	; 1
     684:	85 ee       	ldi	r24, 0xE5	; 229
     686:	92 e0       	ldi	r25, 0x02	; 2
     688:	ad b7       	in	r26, 0x3d	; 61
     68a:	be b7       	in	r27, 0x3e	; 62
     68c:	12 96       	adiw	r26, 0x02	; 2
     68e:	9c 93       	st	X, r25
     690:	8e 93       	st	-X, r24
     692:	11 97       	sbiw	r26, 0x01	; 1
     694:	12 83       	std	Z+2, r17	; 0x02
     696:	14 c0       	rjmp	.+40     	; 0x6c0 <EVENT_USB_Host_DeviceEnumerationComplete+0x7e>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <USB_Host_SetDeviceConfiguration>
     69e:	28 2f       	mov	r18, r24
     6a0:	88 23       	and	r24, r24
     6a2:	d1 f0       	breq	.+52     	; 0x6d8 <EVENT_USB_Host_DeviceEnumerationComplete+0x96>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     6a4:	00 d0       	rcall	.+0      	; 0x6a6 <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
     6a6:	00 d0       	rcall	.+0      	; 0x6a8 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
     6a8:	ed b7       	in	r30, 0x3d	; 61
     6aa:	fe b7       	in	r31, 0x3e	; 62
     6ac:	31 96       	adiw	r30, 0x01	; 1
     6ae:	82 ea       	ldi	r24, 0xA2	; 162
     6b0:	92 e0       	ldi	r25, 0x02	; 2
     6b2:	ad b7       	in	r26, 0x3d	; 61
     6b4:	be b7       	in	r27, 0x3e	; 62
     6b6:	12 96       	adiw	r26, 0x02	; 2
     6b8:	9c 93       	st	X, r25
     6ba:	8e 93       	st	-X, r24
     6bc:	11 97       	sbiw	r26, 0x01	; 1
     6be:	22 83       	std	Z+2, r18	; 0x02
     6c0:	13 82       	std	Z+3, r1	; 0x03
     6c2:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <printf_P>
     6c6:	8b b1       	in	r24, 0x0b	; 11
     6c8:	8f 70       	andi	r24, 0x0F	; 15
     6ca:	80 69       	ori	r24, 0x90	; 144
     6cc:	8b b9       	out	0x0b, r24	; 11
     6ce:	0f 90       	pop	r0
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	8d c0       	rjmp	.+282    	; 0x7f2 <EVENT_USB_Host_DeviceEnumerationComplete+0x1b0>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	uint16_t DeviceMaxPacketSize;
	if ((ErrorCode = RNDIS_InitializeDevice(1024, &DeviceMaxPacketSize)) != HOST_SENDCONTROL_Successful)
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	94 e0       	ldi	r25, 0x04	; 4
     6dc:	be 01       	movw	r22, r28
     6de:	6f 5f       	subi	r22, 0xFF	; 255
     6e0:	7f 4f       	sbci	r23, 0xFF	; 255
     6e2:	89 d3       	rcall	.+1810   	; 0xdf6 <RNDIS_InitializeDevice>
     6e4:	28 2f       	mov	r18, r24
     6e6:	88 23       	and	r24, r24
     6e8:	41 f0       	breq	.+16     	; 0x6fa <EVENT_USB_Host_DeviceEnumerationComplete+0xb8>
	{
		printf_P(PSTR(ESC_FG_RED "Error Initializing Device.\r\n"
     6ea:	00 d0       	rcall	.+0      	; 0x6ec <EVENT_USB_Host_DeviceEnumerationComplete+0xaa>
     6ec:	00 d0       	rcall	.+0      	; 0x6ee <EVENT_USB_Host_DeviceEnumerationComplete+0xac>
     6ee:	ed b7       	in	r30, 0x3d	; 61
     6f0:	fe b7       	in	r31, 0x3e	; 62
     6f2:	31 96       	adiw	r30, 0x01	; 1
     6f4:	87 e6       	ldi	r24, 0x67	; 103
     6f6:	92 e0       	ldi	r25, 0x02	; 2
     6f8:	43 c0       	rjmp	.+134    	; 0x780 <EVENT_USB_Host_DeviceEnumerationComplete+0x13e>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	printf_P(PSTR("Device Max Transfer Size: %lu bytes.\r\n"), DeviceMaxPacketSize);
     6fa:	00 d0       	rcall	.+0      	; 0x6fc <EVENT_USB_Host_DeviceEnumerationComplete+0xba>
     6fc:	00 d0       	rcall	.+0      	; 0x6fe <EVENT_USB_Host_DeviceEnumerationComplete+0xbc>
     6fe:	80 e4       	ldi	r24, 0x40	; 64
     700:	92 e0       	ldi	r25, 0x02	; 2
     702:	ed b7       	in	r30, 0x3d	; 61
     704:	fe b7       	in	r31, 0x3e	; 62
     706:	92 83       	std	Z+2, r25	; 0x02
     708:	81 83       	std	Z+1, r24	; 0x01
     70a:	89 81       	ldd	r24, Y+1	; 0x01
     70c:	9a 81       	ldd	r25, Y+2	; 0x02
     70e:	94 83       	std	Z+4, r25	; 0x04
     710:	83 83       	std	Z+3, r24	; 0x03
     712:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <printf_P>

	/* We set the default filter to only receive packets we would be interested in */
	uint32_t PacketFilter = (REMOTE_NDIS_PACKET_DIRECTED | REMOTE_NDIS_PACKET_BROADCAST | REMOTE_NDIS_PACKET_ALL_MULTICAST);
     716:	8d e0       	ldi	r24, 0x0D	; 13
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	a0 e0       	ldi	r26, 0x00	; 0
     71c:	b0 e0       	ldi	r27, 0x00	; 0
     71e:	8b 83       	std	Y+3, r24	; 0x03
     720:	9c 83       	std	Y+4, r25	; 0x04
     722:	ad 83       	std	Y+5, r26	; 0x05
     724:	be 83       	std	Y+6, r27	; 0x06
	if ((ErrorCode = RNDIS_SetRNDISProperty(OID_GEN_CURRENT_PACKET_FILTER,
     726:	0f 90       	pop	r0
     728:	0f 90       	pop	r0
     72a:	0f 90       	pop	r0
     72c:	0f 90       	pop	r0
     72e:	6e e0       	ldi	r22, 0x0E	; 14
     730:	71 e0       	ldi	r23, 0x01	; 1
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	ae 01       	movw	r20, r28
     738:	4d 5f       	subi	r20, 0xFD	; 253
     73a:	5f 4f       	sbci	r21, 0xFF	; 255
     73c:	24 e0       	ldi	r18, 0x04	; 4
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	b3 d2       	rcall	.+1382   	; 0xca8 <RNDIS_SetRNDISProperty>
     742:	28 2f       	mov	r18, r24
     744:	88 23       	and	r24, r24
     746:	41 f0       	breq	.+16     	; 0x758 <EVENT_USB_Host_DeviceEnumerationComplete+0x116>
	                                        &PacketFilter, sizeof(PacketFilter))) != HOST_SENDCONTROL_Successful)
	{
		printf_P(PSTR(ESC_FG_RED "Error Setting Device Packet Filter.\r\n"
     748:	00 d0       	rcall	.+0      	; 0x74a <EVENT_USB_Host_DeviceEnumerationComplete+0x108>
     74a:	00 d0       	rcall	.+0      	; 0x74c <EVENT_USB_Host_DeviceEnumerationComplete+0x10a>
     74c:	ed b7       	in	r30, 0x3d	; 61
     74e:	fe b7       	in	r31, 0x3e	; 62
     750:	31 96       	adiw	r30, 0x01	; 1
     752:	8c ef       	ldi	r24, 0xFC	; 252
     754:	91 e0       	ldi	r25, 0x01	; 1
     756:	14 c0       	rjmp	.+40     	; 0x780 <EVENT_USB_Host_DeviceEnumerationComplete+0x13e>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	uint32_t VendorID;
	if ((ErrorCode = RNDIS_QueryRNDISProperty(OID_GEN_VENDOR_ID,
     758:	6c e0       	ldi	r22, 0x0C	; 12
     75a:	71 e0       	ldi	r23, 0x01	; 1
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	ae 01       	movw	r20, r28
     762:	49 5f       	subi	r20, 0xF9	; 249
     764:	5f 4f       	sbci	r21, 0xFF	; 255
     766:	24 e0       	ldi	r18, 0x04	; 4
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	fe d1       	rcall	.+1020   	; 0xb68 <RNDIS_QueryRNDISProperty>
     76c:	28 2f       	mov	r18, r24
     76e:	88 23       	and	r24, r24
     770:	e9 f0       	breq	.+58     	; 0x7ac <EVENT_USB_Host_DeviceEnumerationComplete+0x16a>
	                                          &VendorID, sizeof(VendorID))) != HOST_SENDCONTROL_Successful)
	{
		printf_P(PSTR(ESC_FG_RED "Error Getting Vendor ID.\r\n"
     772:	00 d0       	rcall	.+0      	; 0x774 <EVENT_USB_Host_DeviceEnumerationComplete+0x132>
     774:	00 d0       	rcall	.+0      	; 0x776 <EVENT_USB_Host_DeviceEnumerationComplete+0x134>
     776:	ed b7       	in	r30, 0x3d	; 61
     778:	fe b7       	in	r31, 0x3e	; 62
     77a:	31 96       	adiw	r30, 0x01	; 1
     77c:	83 ec       	ldi	r24, 0xC3	; 195
     77e:	91 e0       	ldi	r25, 0x01	; 1
     780:	ad b7       	in	r26, 0x3d	; 61
     782:	be b7       	in	r27, 0x3e	; 62
     784:	12 96       	adiw	r26, 0x02	; 2
     786:	9c 93       	st	X, r25
     788:	8e 93       	st	-X, r24
     78a:	11 97       	sbiw	r26, 0x01	; 1
     78c:	22 83       	std	Z+2, r18	; 0x02
     78e:	13 82       	std	Z+3, r1	; 0x03
     790:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <printf_P>
     794:	8b b1       	in	r24, 0x0b	; 11
     796:	8f 70       	andi	r24, 0x0F	; 15
     798:	80 69       	ori	r24, 0x90	; 144
     79a:	8b b9       	out	0x0b, r24	; 11
		                         " -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
     79c:	0f 90       	pop	r0
     79e:	0f 90       	pop	r0
     7a0:	0f 90       	pop	r0
     7a2:	0f 90       	pop	r0
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <USB_Host_SetDeviceConfiguration>
     7aa:	23 c0       	rjmp	.+70     	; 0x7f2 <EVENT_USB_Host_DeviceEnumerationComplete+0x1b0>
		return;
	}

	printf_P(PSTR("Device Vendor ID: 0x%08lX\r\n"), VendorID);
     7ac:	00 d0       	rcall	.+0      	; 0x7ae <EVENT_USB_Host_DeviceEnumerationComplete+0x16c>
     7ae:	00 d0       	rcall	.+0      	; 0x7b0 <EVENT_USB_Host_DeviceEnumerationComplete+0x16e>
     7b0:	00 d0       	rcall	.+0      	; 0x7b2 <EVENT_USB_Host_DeviceEnumerationComplete+0x170>
     7b2:	87 ea       	ldi	r24, 0xA7	; 167
     7b4:	91 e0       	ldi	r25, 0x01	; 1
     7b6:	ed b7       	in	r30, 0x3d	; 61
     7b8:	fe b7       	in	r31, 0x3e	; 62
     7ba:	92 83       	std	Z+2, r25	; 0x02
     7bc:	81 83       	std	Z+1, r24	; 0x01
     7be:	8f 81       	ldd	r24, Y+7	; 0x07
     7c0:	98 85       	ldd	r25, Y+8	; 0x08
     7c2:	a9 85       	ldd	r26, Y+9	; 0x09
     7c4:	ba 85       	ldd	r27, Y+10	; 0x0a
     7c6:	83 83       	std	Z+3, r24	; 0x03
     7c8:	94 83       	std	Z+4, r25	; 0x04
     7ca:	a5 83       	std	Z+5, r26	; 0x05
     7cc:	b6 83       	std	Z+6, r27	; 0x06
     7ce:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <printf_P>

	puts_P(PSTR("RNDIS Device Enumerated.\r\n"));
     7d2:	8d b7       	in	r24, 0x3d	; 61
     7d4:	9e b7       	in	r25, 0x3e	; 62
     7d6:	06 96       	adiw	r24, 0x06	; 6
     7d8:	0f b6       	in	r0, 0x3f	; 63
     7da:	f8 94       	cli
     7dc:	9e bf       	out	0x3e, r25	; 62
     7de:	0f be       	out	0x3f, r0	; 63
     7e0:	8d bf       	out	0x3d, r24	; 61
     7e2:	8c e8       	ldi	r24, 0x8C	; 140
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <puts_P>
     7ea:	8b b1       	in	r24, 0x0b	; 11
     7ec:	8f 70       	andi	r24, 0x0F	; 15
     7ee:	80 66       	ori	r24, 0x60	; 96
     7f0:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     7f2:	2a 96       	adiw	r28, 0x0a	; 10
     7f4:	0f b6       	in	r0, 0x3f	; 63
     7f6:	f8 94       	cli
     7f8:	de bf       	out	0x3e, r29	; 62
     7fa:	0f be       	out	0x3f, r0	; 63
     7fc:	cd bf       	out	0x3d, r28	; 61
     7fe:	cf 91       	pop	r28
     800:	df 91       	pop	r29
     802:	1f 91       	pop	r17
     804:	08 95       	ret

00000806 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     806:	84 b7       	in	r24, 0x34	; 52
     808:	87 7f       	andi	r24, 0xF7	; 247
     80a:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     80c:	28 e1       	ldi	r18, 0x18	; 24
     80e:	0f b6       	in	r0, 0x3f	; 63
     810:	f8 94       	cli
     812:	20 93 60 00 	sts	0x0060, r18
     816:	10 92 60 00 	sts	0x0060, r1
     81a:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	80 e8       	ldi	r24, 0x80	; 128
     820:	0f b6       	in	r0, 0x3f	; 63
     822:	f8 94       	cli
     824:	80 93 61 00 	sts	0x0061, r24
     828:	90 93 61 00 	sts	0x0061, r25
     82c:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     82e:	83 e3       	ldi	r24, 0x33	; 51
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	90 93 cd 00 	sts	0x00CD, r25
     836:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     83a:	86 e0       	ldi	r24, 0x06	; 6
     83c:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     840:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     844:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     848:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     84a:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     84c:	8a b1       	in	r24, 0x0a	; 10
     84e:	80 6f       	ori	r24, 0xF0	; 240
     850:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     852:	8b b1       	in	r24, 0x0b	; 11
     854:	8f 70       	andi	r24, 0x0F	; 15
     856:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     858:	fb d5       	rcall	.+3062   	; 0x1450 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     85a:	e0 e3       	ldi	r30, 0x30	; 48
     85c:	f1 e0       	ldi	r31, 0x01	; 1
     85e:	f0 93 3f 01 	sts	0x013F, r31
     862:	e0 93 3e 01 	sts	0x013E, r30
					stdout = Stream;
     866:	f0 93 41 01 	sts	0x0141, r31
     86a:	e0 93 40 01 	sts	0x0140, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     86e:	8e e0       	ldi	r24, 0x0E	; 14
     870:	df 01       	movw	r26, r30
     872:	1d 92       	st	X+, r1
     874:	8a 95       	dec	r24
     876:	e9 f7       	brne	.-6      	; 0x872 <SetupHardware+0x6c>
     878:	83 e0       	ldi	r24, 0x03	; 3
     87a:	80 93 33 01 	sts	0x0133, r24
     87e:	8a ea       	ldi	r24, 0xAA	; 170
     880:	9d e0       	ldi	r25, 0x0D	; 13
     882:	90 93 39 01 	sts	0x0139, r25
     886:	80 93 38 01 	sts	0x0138, r24
     88a:	84 eb       	ldi	r24, 0xB4	; 180
     88c:	9d e0       	ldi	r25, 0x0D	; 13
     88e:	90 93 3b 01 	sts	0x013B, r25
     892:	80 93 3a 01 	sts	0x013A, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     896:	08 95       	ret

00000898 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     898:	b6 df       	rcall	.-148    	; 0x806 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "RNDIS Host Demo running.\r\n" ESC_FG_WHITE));
     89a:	85 e9       	ldi	r24, 0x95	; 149
     89c:	93 e0       	ldi	r25, 0x03	; 3
     89e:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     8a2:	8b b1       	in	r24, 0x0b	; 11
     8a4:	8f 70       	andi	r24, 0x0F	; 15
     8a6:	80 61       	ori	r24, 0x10	; 16
     8a8:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     8aa:	78 94       	sei

	for (;;)
	{
		RNDISHost_Task();
     8ac:	e3 dd       	rcall	.-1082   	; 0x474 <RNDISHost_Task>

		USB_USBTask();
     8ae:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <USB_USBTask>
     8b2:	fc cf       	rjmp	.-8      	; 0x8ac <main+0x14>

000008b4 <DComp_NextCDCControlInterface>:
 *  This comparator searches for the next Interface descriptor of the correct CDC control Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextCDCControlInterface(void* CurrentDescriptor)
{
     8b4:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     8b6:	81 81       	ldd	r24, Z+1	; 0x01
     8b8:	84 30       	cpi	r24, 0x04	; 4
     8ba:	59 f4       	brne	.+22     	; 0x8d2 <DComp_NextCDCControlInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the CDC descriptor class, subclass and protocol, break out if correct control interface found */
		if ((Interface->Class    == CDC_CSCP_CDCClass)    &&
     8bc:	85 81       	ldd	r24, Z+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	41 f4       	brne	.+16     	; 0x8d2 <DComp_NextCDCControlInterface+0x1e>
     8c2:	86 81       	ldd	r24, Z+6	; 0x06
     8c4:	82 30       	cpi	r24, 0x02	; 2
     8c6:	29 f4       	brne	.+10     	; 0x8d2 <DComp_NextCDCControlInterface+0x1e>
     8c8:	87 81       	ldd	r24, Z+7	; 0x07
     8ca:	8f 3f       	cpi	r24, 0xFF	; 255
     8cc:	11 f4       	brne	.+4      	; 0x8d2 <DComp_NextCDCControlInterface+0x1e>
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	08 95       	ret
     8d2:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     8d4:	08 95       	ret

000008d6 <DComp_NextCDCDataInterface>:
 *  This comparator searches for the next Interface descriptor of the correct CDC data Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextCDCDataInterface(void* CurrentDescriptor)
{
     8d6:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     8d8:	81 81       	ldd	r24, Z+1	; 0x01
     8da:	84 30       	cpi	r24, 0x04	; 4
     8dc:	41 f4       	brne	.+16     	; 0x8ee <DComp_NextCDCDataInterface+0x18>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the CDC descriptor class, subclass and protocol, break out if correct data interface found */
		if ((Interface->Class    == CDC_CSCP_CDCDataClass)   &&
     8de:	85 81       	ldd	r24, Z+5	; 0x05
     8e0:	8a 30       	cpi	r24, 0x0A	; 10
     8e2:	29 f4       	brne	.+10     	; 0x8ee <DComp_NextCDCDataInterface+0x18>
     8e4:	86 81       	ldd	r24, Z+6	; 0x06
     8e6:	88 23       	and	r24, r24
     8e8:	11 f4       	brne	.+4      	; 0x8ee <DComp_NextCDCDataInterface+0x18>
     8ea:	87 81       	ldd	r24, Z+7	; 0x07
     8ec:	81 11       	cpse	r24, r1
     8ee:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     8f0:	08 95       	ret

000008f2 <DComp_NextCDCDataInterfaceEndpoint>:
 *  using a different comparator to determine if it is another CDC class interface).
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextCDCDataInterfaceEndpoint(void* CurrentDescriptor)
{
     8f2:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     8f4:	81 81       	ldd	r24, Z+1	; 0x01
     8f6:	85 30       	cpi	r24, 0x05	; 5
     8f8:	49 f4       	brne	.+18     	; 0x90c <DComp_NextCDCDataInterfaceEndpoint+0x1a>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK or INTERRUPT type endpoint found */
		if (((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK) || 
     8fa:	83 81       	ldd	r24, Z+3	; 0x03
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	83 70       	andi	r24, 0x03	; 3
     900:	90 70       	andi	r25, 0x00	; 0
     902:	02 97       	sbiw	r24, 0x02	; 2
     904:	02 97       	sbiw	r24, 0x02	; 2
     906:	30 f4       	brcc	.+12     	; 0x914 <DComp_NextCDCDataInterfaceEndpoint+0x22>
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	08 95       	ret
		    ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
     90c:	84 30       	cpi	r24, 0x04	; 4
     90e:	11 f4       	brne	.+4      	; 0x914 <DComp_NextCDCDataInterfaceEndpoint+0x22>
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	08 95       	ret
     914:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     916:	08 95       	ret

00000918 <ProcessConfigurationDescriptor>:
 *  This routine searches for a RNDIS interface descriptor containing bulk data IN and OUT endpoints, and an interrupt event endpoint.
 *
 *  \return An error code from the \ref RNDISHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     918:	6f 92       	push	r6
     91a:	7f 92       	push	r7
     91c:	8f 92       	push	r8
     91e:	9f 92       	push	r9
     920:	af 92       	push	r10
     922:	bf 92       	push	r11
     924:	cf 92       	push	r12
     926:	df 92       	push	r13
     928:	ef 92       	push	r14
     92a:	ff 92       	push	r15
     92c:	0f 93       	push	r16
     92e:	1f 93       	push	r17
     930:	df 93       	push	r29
     932:	cf 93       	push	r28
     934:	cd b7       	in	r28, 0x3d	; 61
     936:	de b7       	in	r29, 0x3e	; 62
     938:	c4 50       	subi	r28, 0x04	; 4
     93a:	d2 40       	sbci	r29, 0x02	; 2
     93c:	0f b6       	in	r0, 0x3f	; 63
     93e:	f8 94       	cli
     940:	de bf       	out	0x3e, r29	; 62
     942:	0f be       	out	0x3f, r0	; 63
     944:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     946:	ae 01       	movw	r20, r28
     948:	4b 5f       	subi	r20, 0xFB	; 251
     94a:	5f 4f       	sbci	r21, 0xFF	; 255
     94c:	5a 83       	std	Y+2, r21	; 0x02
     94e:	49 83       	std	Y+1, r20	; 0x01
	USB_Descriptor_Endpoint_t*  DataINEndpoint         = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint        = NULL;
	USB_Descriptor_Endpoint_t*  NotificationEndpoint   = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     950:	8e 01       	movw	r16, r28
     952:	0d 5f       	subi	r16, 0xFD	; 253
     954:	1f 4f       	sbci	r17, 0xFF	; 255
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	b8 01       	movw	r22, r16
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	32 e0       	ldi	r19, 0x02	; 2
     95e:	21 d7       	rcall	.+3650   	; 0x17a2 <USB_Host_GetDeviceConfigDescriptor>
     960:	85 30       	cpi	r24, 0x05	; 5
     962:	29 f0       	breq	.+10     	; 0x96e <ProcessConfigurationDescriptor+0x56>
     964:	86 30       	cpi	r24, 0x06	; 6
     966:	91 f0       	breq	.+36     	; 0x98c <ProcessConfigurationDescriptor+0x74>
     968:	88 23       	and	r24, r24
     96a:	19 f0       	breq	.+6      	; 0x972 <ProcessConfigurationDescriptor+0x5a>
     96c:	11 c0       	rjmp	.+34     	; 0x990 <ProcessConfigurationDescriptor+0x78>
     96e:	82 e0       	ldi	r24, 0x02	; 2
     970:	6b c0       	rjmp	.+214    	; 0xa48 <ProcessConfigurationDescriptor+0x130>
     972:	66 24       	eor	r6, r6
     974:	77 24       	eor	r7, r7
     976:	ee 24       	eor	r14, r14
     978:	ff 24       	eor	r15, r15
     97a:	cc 24       	eor	r12, r12
     97c:	dd 24       	eor	r13, r13
     97e:	aa 24       	eor	r10, r10
     980:	bb 24       	eor	r11, r11
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(RNDISControlInterface) ||
     982:	48 01       	movw	r8, r16
     984:	8e 01       	movw	r16, r28
     986:	0f 5f       	subi	r16, 0xFF	; 255
     988:	1f 4f       	sbci	r17, 0xFF	; 255
     98a:	08 c0       	rjmp	.+16     	; 0x99c <ProcessConfigurationDescriptor+0x84>
	USB_Descriptor_Endpoint_t*  DataINEndpoint         = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint        = NULL;
	USB_Descriptor_Endpoint_t*  NotificationEndpoint   = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     98c:	83 e0       	ldi	r24, 0x03	; 3
     98e:	5c c0       	rjmp	.+184    	; 0xa48 <ProcessConfigurationDescriptor+0x130>
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	5a c0       	rjmp	.+180    	; 0xa48 <ProcessConfigurationDescriptor+0x130>
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     994:	cc 24       	eor	r12, r12
     996:	dd 24       	eor	r13, r13
     998:	ee 24       	eor	r14, r14
     99a:	ff 24       	eor	r15, r15
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(RNDISControlInterface) ||
     99c:	61 14       	cp	r6, r1
     99e:	71 04       	cpc	r7, r1
     9a0:	39 f0       	breq	.+14     	; 0x9b0 <ProcessConfigurationDescriptor+0x98>
     9a2:	c4 01       	movw	r24, r8
     9a4:	b8 01       	movw	r22, r16
     9a6:	49 e7       	ldi	r20, 0x79	; 121
     9a8:	54 e0       	ldi	r21, 0x04	; 4
     9aa:	b7 d6       	rcall	.+3438   	; 0x171a <USB_GetNextDescriptorComp>
     9ac:	88 23       	and	r24, r24
     9ae:	a9 f0       	breq	.+42     	; 0x9da <ProcessConfigurationDescriptor+0xc2>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextCDCDataInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Check if we have already found the control interface's notification endpoint or not */
			if (NotificationEndpoint)
     9b0:	a1 14       	cp	r10, r1
     9b2:	b1 04       	cpc	r11, r1
     9b4:	41 f0       	breq	.+16     	; 0x9c6 <ProcessConfigurationDescriptor+0xae>
			{
				/* Get the next RNDIS data interface from the configuration descriptor */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     9b6:	c4 01       	movw	r24, r8
     9b8:	b8 01       	movw	r22, r16
     9ba:	4b e6       	ldi	r20, 0x6B	; 107
     9bc:	54 e0       	ldi	r21, 0x04	; 4
     9be:	ad d6       	rcall	.+3418   	; 0x171a <USB_GetNextDescriptorComp>
     9c0:	88 23       	and	r24, r24
     9c2:	41 f3       	breq	.-48     	; 0x994 <ProcessConfigurationDescriptor+0x7c>
     9c4:	40 c0       	rjmp	.+128    	; 0xa46 <ProcessConfigurationDescriptor+0x12e>
				DataOUTEndpoint      = NULL;
			}
			else
			{
				/* Get the next RNDIS control interface from the configuration descriptor */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     9c6:	c4 01       	movw	r24, r8
     9c8:	b8 01       	movw	r22, r16
     9ca:	4a e5       	ldi	r20, 0x5A	; 90
     9cc:	54 e0       	ldi	r21, 0x04	; 4
     9ce:	a5 d6       	rcall	.+3402   	; 0x171a <USB_GetNextDescriptorComp>
     9d0:	88 23       	and	r24, r24
     9d2:	c9 f5       	brne	.+114    	; 0xa46 <ProcessConfigurationDescriptor+0x12e>
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
				}

				/* Save the interface in case we need to refer back to it later */
				RNDISControlInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     9d4:	69 80       	ldd	r6, Y+1	; 0x01
     9d6:	7a 80       	ldd	r7, Y+2	; 0x02
     9d8:	0e c0       	rjmp	.+28     	; 0x9f6 <ProcessConfigurationDescriptor+0xde>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     9da:	e9 81       	ldd	r30, Y+1	; 0x01
     9dc:	fa 81       	ldd	r31, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     9de:	82 81       	ldd	r24, Z+2	; 0x02
     9e0:	87 fd       	sbrc	r24, 7
     9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <ProcessConfigurationDescriptor+0xd0>
     9e4:	6f 01       	movw	r12, r30
     9e6:	07 c0       	rjmp	.+14     	; 0x9f6 <ProcessConfigurationDescriptor+0xde>
		{
			/* Check if the found endpoint is a interrupt or bulk type descriptor */
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
     9e8:	83 81       	ldd	r24, Z+3	; 0x03
     9ea:	83 70       	andi	r24, 0x03	; 3
     9ec:	83 30       	cpi	r24, 0x03	; 3
     9ee:	11 f0       	breq	.+4      	; 0x9f4 <ProcessConfigurationDescriptor+0xdc>
     9f0:	7f 01       	movw	r14, r30
     9f2:	01 c0       	rjmp	.+2      	; 0x9f6 <ProcessConfigurationDescriptor+0xde>
     9f4:	5f 01       	movw	r10, r30
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
     9f6:	e1 14       	cp	r14, r1
     9f8:	f1 04       	cpc	r15, r1
     9fa:	81 f2       	breq	.-96     	; 0x99c <ProcessConfigurationDescriptor+0x84>
     9fc:	c1 14       	cp	r12, r1
     9fe:	d1 04       	cpc	r13, r1
     a00:	69 f2       	breq	.-102    	; 0x99c <ProcessConfigurationDescriptor+0x84>
     a02:	a1 14       	cp	r10, r1
     a04:	b1 04       	cpc	r11, r1
     a06:	51 f2       	breq	.-108    	; 0x99c <ProcessConfigurationDescriptor+0x84>
			DataOUTEndpoint = EndpointData;
		}
	}

	/* Configure the RNDIS data IN pipe */
	Pipe_ConfigurePipe(RNDIS_DATA_IN_PIPE, EP_TYPE_BULK, PIPE_TOKEN_IN,
     a08:	f7 01       	movw	r30, r14
     a0a:	04 81       	ldd	r16, Z+4	; 0x04
     a0c:	15 81       	ldd	r17, Z+5	; 0x05
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	62 e0       	ldi	r22, 0x02	; 2
     a12:	40 e1       	ldi	r20, 0x10	; 16
     a14:	22 81       	ldd	r18, Z+2	; 0x02
     a16:	ee 24       	eor	r14, r14
     a18:	2a d4       	rcall	.+2132   	; 0x126e <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Configure the RNDIS data OUT pipe */
	Pipe_ConfigurePipe(RNDIS_DATA_OUT_PIPE, EP_TYPE_BULK, PIPE_TOKEN_OUT,
     a1a:	f6 01       	movw	r30, r12
     a1c:	04 81       	ldd	r16, Z+4	; 0x04
     a1e:	15 81       	ldd	r17, Z+5	; 0x05
     a20:	82 e0       	ldi	r24, 0x02	; 2
     a22:	62 e0       	ldi	r22, 0x02	; 2
     a24:	40 e2       	ldi	r20, 0x20	; 32
     a26:	22 81       	ldd	r18, Z+2	; 0x02
     a28:	22 d4       	rcall	.+2116   	; 0x126e <Pipe_ConfigurePipe>
					   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Configure the RNDIS notification pipe */
	Pipe_ConfigurePipe(RNDIS_NOTIFICATION_PIPE, EP_TYPE_INTERRUPT, PIPE_TOKEN_IN,
     a2a:	f5 01       	movw	r30, r10
     a2c:	04 81       	ldd	r16, Z+4	; 0x04
     a2e:	15 81       	ldd	r17, Z+5	; 0x05
     a30:	83 e0       	ldi	r24, 0x03	; 3
     a32:	63 e0       	ldi	r22, 0x03	; 3
     a34:	40 e1       	ldi	r20, 0x10	; 16
     a36:	22 81       	ldd	r18, Z+2	; 0x02
     a38:	1a d4       	rcall	.+2100   	; 0x126e <Pipe_ConfigurePipe>
					   NotificationEndpoint->EndpointAddress, NotificationEndpoint->EndpointSize, PIPE_BANK_SINGLE);
	Pipe_SetInterruptPeriod(NotificationEndpoint->PollingIntervalMS);
     a3a:	f5 01       	movw	r30, r10
     a3c:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     a3e:	80 93 ad 00 	sts	0x00AD, r24
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	01 c0       	rjmp	.+2      	; 0xa48 <ProcessConfigurationDescriptor+0x130>

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     a46:	84 e0       	ldi	r24, 0x04	; 4
}
     a48:	cc 5f       	subi	r28, 0xFC	; 252
     a4a:	dd 4f       	sbci	r29, 0xFD	; 253
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	f8 94       	cli
     a50:	de bf       	out	0x3e, r29	; 62
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	cd bf       	out	0x3d, r28	; 61
     a56:	cf 91       	pop	r28
     a58:	df 91       	pop	r29
     a5a:	1f 91       	pop	r17
     a5c:	0f 91       	pop	r16
     a5e:	ff 90       	pop	r15
     a60:	ef 90       	pop	r14
     a62:	df 90       	pop	r13
     a64:	cf 90       	pop	r12
     a66:	bf 90       	pop	r11
     a68:	af 90       	pop	r10
     a6a:	9f 90       	pop	r9
     a6c:	8f 90       	pop	r8
     a6e:	7f 90       	pop	r7
     a70:	6f 90       	pop	r6
     a72:	08 95       	ret

00000a74 <RNDIS_GetPacketLength>:
 *  \param[out] PacketLength  Size of the packet currently in the pipe
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum
 */
uint8_t RNDIS_GetPacketLength(uint16_t* const PacketLength)
{
     a74:	ef 92       	push	r14
     a76:	ff 92       	push	r15
     a78:	1f 93       	push	r17
     a7a:	df 93       	push	r29
     a7c:	cf 93       	push	r28
     a7e:	cd b7       	in	r28, 0x3d	; 61
     a80:	de b7       	in	r29, 0x3e	; 62
     a82:	ac 97       	sbiw	r28, 0x2c	; 44
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	f8 94       	cli
     a88:	de bf       	out	0x3e, r29	; 62
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	cd bf       	out	0x3d, r28	; 61
     a8e:	7c 01       	movw	r14, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	80 93 a7 00 	sts	0x00A7, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     a96:	80 91 aa 00 	lds	r24, 0x00AA
     a9a:	8f 7c       	andi	r24, 0xCF	; 207
     a9c:	80 61       	ori	r24, 0x10	; 16
     a9e:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     aa2:	80 91 a9 00 	lds	r24, 0x00A9
     aa6:	8f 7b       	andi	r24, 0xBF	; 191
     aa8:	80 93 a9 00 	sts	0x00A9, r24
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     aac:	80 91 a6 00 	lds	r24, 0x00A6

	Pipe_SelectPipe(RNDIS_DATA_IN_PIPE);
	Pipe_SetPipeToken(PIPE_TOKEN_IN);
	Pipe_Unfreeze();

	if (!(Pipe_IsReadWriteAllowed()))
     ab0:	85 fd       	sbrc	r24, 5
     ab2:	0a c0       	rjmp	.+20     	; 0xac8 <RNDIS_GetPacketLength+0x54>
	{
		*PacketLength = 0;
     ab4:	f7 01       	movw	r30, r14
     ab6:	11 82       	std	Z+1, r1	; 0x01
     ab8:	10 82       	st	Z, r1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     aba:	80 91 a9 00 	lds	r24, 0x00A9
     abe:	80 64       	ori	r24, 0x40	; 64
     ac0:	80 93 a9 00 	sts	0x00A9, r24
     ac4:	10 e0       	ldi	r17, 0x00	; 0
     ac6:	1a c0       	rjmp	.+52     	; 0xafc <RNDIS_GetPacketLength+0x88>
		return PIPE_RWSTREAM_NoError;
	}

	RNDIS_Packet_Message_t DeviceMessage;

	if ((ErrorCode = Pipe_Read_Stream_LE(&DeviceMessage, sizeof(RNDIS_Packet_Message_t), NULL)) != PIPE_RWSTREAM_NoError)
     ac8:	ce 01       	movw	r24, r28
     aca:	01 96       	adiw	r24, 0x01	; 1
     acc:	6c e2       	ldi	r22, 0x2C	; 44
     ace:	70 e0       	ldi	r23, 0x00	; 0
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	83 d5       	rcall	.+2822   	; 0x15dc <Pipe_Read_Stream_LE>
     ad6:	18 2f       	mov	r17, r24
     ad8:	88 23       	and	r24, r24
     ada:	81 f4       	brne	.+32     	; 0xafc <RNDIS_GetPacketLength+0x88>
	{
		return ErrorCode;
	}

	*PacketLength = (uint16_t)DeviceMessage.DataLength;
     adc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ade:	9e 85       	ldd	r25, Y+14	; 0x0e
     ae0:	f7 01       	movw	r30, r14
     ae2:	91 83       	std	Z+1, r25	; 0x01
     ae4:	80 83       	st	Z, r24

	Pipe_Discard_Stream(DeviceMessage.DataOffset - (sizeof(RNDIS_Packet_Message_t) - sizeof(RNDIS_Message_Header_t)),
     ae6:	89 85       	ldd	r24, Y+9	; 0x09
     ae8:	9a 85       	ldd	r25, Y+10	; 0x0a
     aea:	84 97       	sbiw	r24, 0x24	; 36
     aec:	60 e0       	ldi	r22, 0x00	; 0
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	cc d5       	rcall	.+2968   	; 0x168a <Pipe_Discard_Stream>
     af2:	80 91 a9 00 	lds	r24, 0x00A9
     af6:	80 64       	ori	r24, 0x40	; 64
     af8:	80 93 a9 00 	sts	0x00A9, r24
	                    NULL);

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
     afc:	81 2f       	mov	r24, r17
     afe:	ac 96       	adiw	r28, 0x2c	; 44
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	f8 94       	cli
     b04:	de bf       	out	0x3e, r29	; 62
     b06:	0f be       	out	0x3f, r0	; 63
     b08:	cd bf       	out	0x3d, r28	; 61
     b0a:	cf 91       	pop	r28
     b0c:	df 91       	pop	r29
     b0e:	1f 91       	pop	r17
     b10:	ff 90       	pop	r15
     b12:	ef 90       	pop	r14
     b14:	08 95       	ret

00000b16 <RNDIS_GetEncapsulatedResponse>:
 *  \return A value from the USB_Host_SendControlErrorCodes_t enum
 */
uint8_t RNDIS_GetEncapsulatedResponse(void* const Buffer,
                                      const uint16_t Length)
{
	USB_ControlRequest = (USB_Request_Header_t)
     b16:	21 ea       	ldi	r18, 0xA1	; 161
     b18:	20 93 27 01 	sts	0x0127, r18
     b1c:	21 e0       	ldi	r18, 0x01	; 1
     b1e:	20 93 28 01 	sts	0x0128, r18
     b22:	10 92 2a 01 	sts	0x012A, r1
     b26:	10 92 29 01 	sts	0x0129, r1
     b2a:	10 92 2c 01 	sts	0x012C, r1
     b2e:	10 92 2b 01 	sts	0x012B, r1
     b32:	70 93 2e 01 	sts	0x012E, r23
     b36:	60 93 2d 01 	sts	0x012D, r22
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     b3a:	10 92 a7 00 	sts	0x00A7, r1

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Buffer);
}
     b3e:	b5 c6       	rjmp	.+3434   	; 0x18aa <USB_Host_SendControlRequest>

00000b40 <RNDIS_SendEncapsulatedCommand>:
 *  \return A value from the USB_Host_SendControlErrorCodes_t enum
 */
uint8_t RNDIS_SendEncapsulatedCommand(void* const Buffer,
                                      const uint16_t Length)
{
	USB_ControlRequest = (USB_Request_Header_t)
     b40:	21 e2       	ldi	r18, 0x21	; 33
     b42:	20 93 27 01 	sts	0x0127, r18
     b46:	10 92 28 01 	sts	0x0128, r1
     b4a:	10 92 2a 01 	sts	0x012A, r1
     b4e:	10 92 29 01 	sts	0x0129, r1
     b52:	10 92 2c 01 	sts	0x012C, r1
     b56:	10 92 2b 01 	sts	0x012B, r1
     b5a:	70 93 2e 01 	sts	0x012E, r23
     b5e:	60 93 2d 01 	sts	0x012D, r22
     b62:	10 92 a7 00 	sts	0x00A7, r1

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Buffer);
}
     b66:	a1 c6       	rjmp	.+3394   	; 0x18aa <USB_Host_SendControlRequest>

00000b68 <RNDIS_QueryRNDISProperty>:
 *          logical command failure
 */
uint8_t RNDIS_QueryRNDISProperty(const uint32_t Oid,
                                 void* Buffer,
                                 const uint16_t MaxLength)
{
     b68:	7f 92       	push	r7
     b6a:	8f 92       	push	r8
     b6c:	9f 92       	push	r9
     b6e:	af 92       	push	r10
     b70:	bf 92       	push	r11
     b72:	cf 92       	push	r12
     b74:	df 92       	push	r13
     b76:	ef 92       	push	r14
     b78:	ff 92       	push	r15
     b7a:	0f 93       	push	r16
     b7c:	1f 93       	push	r17
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
     b86:	6c 97       	sbiw	r28, 0x1c	; 28
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	f8 94       	cli
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	cd bf       	out	0x3d, r28	; 61
     b92:	04 2f       	mov	r16, r20
     b94:	75 2e       	mov	r7, r21
     b96:	69 01       	movw	r12, r18
	  return RNDIS_COMMAND_FAILED;

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);

	return HOST_SENDCONTROL_Successful;
}
     b98:	8d b6       	in	r8, 0x3d	; 61
     b9a:	9e b6       	in	r9, 0x3e	; 62

	struct
	{
		RNDIS_Query_Complete_t QueryMessageResponse;
		uint8_t                ContiguousBuffer[MaxLength];
	} QueryMessageResponseData;
     b9c:	28 e1       	ldi	r18, 0x18	; 24
     b9e:	a2 2e       	mov	r10, r18
     ba0:	b1 2c       	mov	r11, r1
     ba2:	ac 0c       	add	r10, r12
     ba4:	bd 1c       	adc	r11, r13
     ba6:	2d b7       	in	r18, 0x3d	; 61
     ba8:	3e b7       	in	r19, 0x3e	; 62
     baa:	2a 19       	sub	r18, r10
     bac:	3b 09       	sbc	r19, r11
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	f8 94       	cli
     bb2:	3e bf       	out	0x3e, r19	; 62
     bb4:	0f be       	out	0x3f, r0	; 63
     bb6:	2d bf       	out	0x3d, r18	; 61
     bb8:	ed b6       	in	r14, 0x3d	; 61
     bba:	fe b6       	in	r15, 0x3e	; 62
     bbc:	08 94       	sec
     bbe:	e1 1c       	adc	r14, r1
     bc0:	f1 1c       	adc	r15, r1

	QueryMessage.MessageType    = REMOTE_NDIS_QUERY_MSG;
     bc2:	24 e0       	ldi	r18, 0x04	; 4
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	40 e0       	ldi	r20, 0x00	; 0
     bc8:	50 e0       	ldi	r21, 0x00	; 0
     bca:	29 83       	std	Y+1, r18	; 0x01
     bcc:	3a 83       	std	Y+2, r19	; 0x02
     bce:	4b 83       	std	Y+3, r20	; 0x03
     bd0:	5c 83       	std	Y+4, r21	; 0x04
	QueryMessage.MessageLength  = sizeof(RNDIS_Query_Message_t);
     bd2:	2c e1       	ldi	r18, 0x1C	; 28
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	40 e0       	ldi	r20, 0x00	; 0
     bd8:	50 e0       	ldi	r21, 0x00	; 0
     bda:	2d 83       	std	Y+5, r18	; 0x05
     bdc:	3e 83       	std	Y+6, r19	; 0x06
     bde:	4f 83       	std	Y+7, r20	; 0x07
     be0:	58 87       	std	Y+8, r21	; 0x08
	QueryMessage.RequestId      = RequestID++;
     be2:	20 91 1e 01 	lds	r18, 0x011E
     be6:	30 91 1f 01 	lds	r19, 0x011F
     bea:	40 91 20 01 	lds	r20, 0x0120
     bee:	50 91 21 01 	lds	r21, 0x0121
     bf2:	29 87       	std	Y+9, r18	; 0x09
     bf4:	3a 87       	std	Y+10, r19	; 0x0a
     bf6:	4b 87       	std	Y+11, r20	; 0x0b
     bf8:	5c 87       	std	Y+12, r21	; 0x0c
     bfa:	2f 5f       	subi	r18, 0xFF	; 255
     bfc:	3f 4f       	sbci	r19, 0xFF	; 255
     bfe:	4f 4f       	sbci	r20, 0xFF	; 255
     c00:	5f 4f       	sbci	r21, 0xFF	; 255
     c02:	20 93 1e 01 	sts	0x011E, r18
     c06:	30 93 1f 01 	sts	0x011F, r19
     c0a:	40 93 20 01 	sts	0x0120, r20
     c0e:	50 93 21 01 	sts	0x0121, r21

	QueryMessage.Oid            = Oid;
     c12:	6d 87       	std	Y+13, r22	; 0x0d
     c14:	7e 87       	std	Y+14, r23	; 0x0e
     c16:	8f 87       	std	Y+15, r24	; 0x0f
     c18:	98 8b       	std	Y+16, r25	; 0x10
	QueryMessage.InformationBufferLength = 0;
     c1a:	19 8a       	std	Y+17, r1	; 0x11
     c1c:	1a 8a       	std	Y+18, r1	; 0x12
     c1e:	1b 8a       	std	Y+19, r1	; 0x13
     c20:	1c 8a       	std	Y+20, r1	; 0x14
	QueryMessage.InformationBufferOffset = 0;
     c22:	1d 8a       	std	Y+21, r1	; 0x15
     c24:	1e 8a       	std	Y+22, r1	; 0x16
     c26:	1f 8a       	std	Y+23, r1	; 0x17
     c28:	18 8e       	std	Y+24, r1	; 0x18
	QueryMessage.DeviceVcHandle = 0;
     c2a:	19 8e       	std	Y+25, r1	; 0x19
     c2c:	1a 8e       	std	Y+26, r1	; 0x1a
     c2e:	1b 8e       	std	Y+27, r1	; 0x1b
     c30:	1c 8e       	std	Y+28, r1	; 0x1c

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(&QueryMessage,
     c32:	ce 01       	movw	r24, r28
     c34:	01 96       	adiw	r24, 0x01	; 1
     c36:	6c e1       	ldi	r22, 0x1C	; 28
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	82 df       	rcall	.-252    	; 0xb40 <RNDIS_SendEncapsulatedCommand>
     c3c:	18 2f       	mov	r17, r24
     c3e:	88 23       	and	r24, r24
     c40:	c9 f4       	brne	.+50     	; 0xc74 <RNDIS_QueryRNDISProperty+0x10c>
	                                               sizeof(RNDIS_Query_Message_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(&QueryMessageResponseData,
     c42:	c7 01       	movw	r24, r14
     c44:	b5 01       	movw	r22, r10
     c46:	67 df       	rcall	.-306    	; 0xb16 <RNDIS_GetEncapsulatedResponse>
     c48:	18 2f       	mov	r17, r24
     c4a:	88 23       	and	r24, r24
     c4c:	99 f4       	brne	.+38     	; 0xc74 <RNDIS_QueryRNDISProperty+0x10c>
	                                               sizeof(QueryMessageResponseData))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (QueryMessageResponseData.QueryMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
     c4e:	f7 01       	movw	r30, r14
     c50:	84 85       	ldd	r24, Z+12	; 0x0c
     c52:	95 85       	ldd	r25, Z+13	; 0x0d
     c54:	a6 85       	ldd	r26, Z+14	; 0x0e
     c56:	b7 85       	ldd	r27, Z+15	; 0x0f
     c58:	00 97       	sbiw	r24, 0x00	; 0
     c5a:	a1 05       	cpc	r26, r1
     c5c:	b1 05       	cpc	r27, r1
     c5e:	11 f0       	breq	.+4      	; 0xc64 <RNDIS_QueryRNDISProperty+0xfc>
     c60:	10 ec       	ldi	r17, 0xC0	; 192
     c62:	08 c0       	rjmp	.+16     	; 0xc74 <RNDIS_QueryRNDISProperty+0x10c>
	  return RNDIS_COMMAND_FAILED;

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);
     c64:	97 01       	movw	r18, r14
     c66:	28 5e       	subi	r18, 0xE8	; 232
     c68:	3f 4f       	sbci	r19, 0xFF	; 255
     c6a:	80 2f       	mov	r24, r16
     c6c:	97 2d       	mov	r25, r7
     c6e:	b9 01       	movw	r22, r18
     c70:	a6 01       	movw	r20, r12
     c72:	8e d7       	rcall	.+3868   	; 0x1b90 <memcpy>

	return HOST_SENDCONTROL_Successful;
}
     c74:	81 2f       	mov	r24, r17
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	f8 94       	cli
     c7a:	9e be       	out	0x3e, r9	; 62
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	8d be       	out	0x3d, r8	; 61
     c80:	6c 96       	adiw	r28, 0x1c	; 28
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	f8 94       	cli
     c86:	de bf       	out	0x3e, r29	; 62
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	cd bf       	out	0x3d, r28	; 61
     c8c:	cf 91       	pop	r28
     c8e:	df 91       	pop	r29
     c90:	1f 91       	pop	r17
     c92:	0f 91       	pop	r16
     c94:	ff 90       	pop	r15
     c96:	ef 90       	pop	r14
     c98:	df 90       	pop	r13
     c9a:	cf 90       	pop	r12
     c9c:	bf 90       	pop	r11
     c9e:	af 90       	pop	r10
     ca0:	9f 90       	pop	r9
     ca2:	8f 90       	pop	r8
     ca4:	7f 90       	pop	r7
     ca6:	08 95       	ret

00000ca8 <RNDIS_SetRNDISProperty>:
 *          logical command failure
 */
uint8_t RNDIS_SetRNDISProperty(const uint32_t Oid,
                               void* Buffer,
                               const uint16_t Length)
{
     ca8:	6f 92       	push	r6
     caa:	7f 92       	push	r7
     cac:	8f 92       	push	r8
     cae:	9f 92       	push	r9
     cb0:	af 92       	push	r10
     cb2:	bf 92       	push	r11
     cb4:	cf 92       	push	r12
     cb6:	df 92       	push	r13
     cb8:	ef 92       	push	r14
     cba:	ff 92       	push	r15
     cbc:	0f 93       	push	r16
     cbe:	1f 93       	push	r17
     cc0:	df 93       	push	r29
     cc2:	cf 93       	push	r28
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
     cc8:	60 97       	sbiw	r28, 0x10	; 16
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	f8 94       	cli
     cce:	de bf       	out	0x3e, r29	; 62
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	cd bf       	out	0x3d, r28	; 61

	if (SetMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
	  return RNDIS_COMMAND_FAILED;

	return HOST_SENDCONTROL_Successful;
}
     cd4:	6d b6       	in	r6, 0x3d	; 61
     cd6:	7e b6       	in	r7, 0x3e	; 62

	struct
	{
		RNDIS_Set_Message_t SetMessage;
		uint8_t             ContiguousBuffer[Length];
	} SetMessageData;
     cd8:	bc e1       	ldi	r27, 0x1C	; 28
     cda:	ab 2e       	mov	r10, r27
     cdc:	b1 2c       	mov	r11, r1
     cde:	a2 0e       	add	r10, r18
     ce0:	b3 1e       	adc	r11, r19
     ce2:	ed b7       	in	r30, 0x3d	; 61
     ce4:	fe b7       	in	r31, 0x3e	; 62
     ce6:	ea 19       	sub	r30, r10
     ce8:	fb 09       	sbc	r31, r11
     cea:	0f b6       	in	r0, 0x3f	; 63
     cec:	f8 94       	cli
     cee:	fe bf       	out	0x3e, r31	; 62
     cf0:	0f be       	out	0x3f, r0	; 63
     cf2:	ed bf       	out	0x3d, r30	; 61
     cf4:	8d b6       	in	r8, 0x3d	; 61
     cf6:	9e b6       	in	r9, 0x3e	; 62
     cf8:	08 94       	sec
     cfa:	81 1c       	adc	r8, r1
     cfc:	91 1c       	adc	r9, r1

	RNDIS_Set_Complete_t SetMessageResponse;

	SetMessageData.SetMessage.MessageType    = REMOTE_NDIS_SET_MSG;
     cfe:	a5 e0       	ldi	r26, 0x05	; 5
     d00:	ea 2e       	mov	r14, r26
     d02:	f1 2c       	mov	r15, r1
     d04:	01 2d       	mov	r16, r1
     d06:	11 2d       	mov	r17, r1
     d08:	e1 82       	std	Z+1, r14	; 0x01
     d0a:	f2 82       	std	Z+2, r15	; 0x02
     d0c:	03 83       	std	Z+3, r16	; 0x03
     d0e:	14 83       	std	Z+4, r17	; 0x04
	SetMessageData.SetMessage.MessageLength  = sizeof(RNDIS_Set_Message_t) + Length;
     d10:	cc 24       	eor	r12, r12
     d12:	dd 24       	eor	r13, r13
     d14:	f4 01       	movw	r30, r8
     d16:	a4 82       	std	Z+4, r10	; 0x04
     d18:	b5 82       	std	Z+5, r11	; 0x05
     d1a:	c6 82       	std	Z+6, r12	; 0x06
     d1c:	d7 82       	std	Z+7, r13	; 0x07
	SetMessageData.SetMessage.RequestId      = RequestID++;
     d1e:	e0 90 1e 01 	lds	r14, 0x011E
     d22:	f0 90 1f 01 	lds	r15, 0x011F
     d26:	00 91 20 01 	lds	r16, 0x0120
     d2a:	10 91 21 01 	lds	r17, 0x0121
     d2e:	e0 86       	std	Z+8, r14	; 0x08
     d30:	f1 86       	std	Z+9, r15	; 0x09
     d32:	02 87       	std	Z+10, r16	; 0x0a
     d34:	13 87       	std	Z+11, r17	; 0x0b
     d36:	08 94       	sec
     d38:	e1 1c       	adc	r14, r1
     d3a:	f1 1c       	adc	r15, r1
     d3c:	01 1d       	adc	r16, r1
     d3e:	11 1d       	adc	r17, r1
     d40:	e0 92 1e 01 	sts	0x011E, r14
     d44:	f0 92 1f 01 	sts	0x011F, r15
     d48:	00 93 20 01 	sts	0x0120, r16
     d4c:	10 93 21 01 	sts	0x0121, r17

	SetMessageData.SetMessage.Oid            = Oid;
     d50:	64 87       	std	Z+12, r22	; 0x0c
     d52:	75 87       	std	Z+13, r23	; 0x0d
     d54:	86 87       	std	Z+14, r24	; 0x0e
     d56:	97 87       	std	Z+15, r25	; 0x0f
	SetMessageData.SetMessage.InformationBufferLength = Length;
     d58:	c9 01       	movw	r24, r18
     d5a:	a0 e0       	ldi	r26, 0x00	; 0
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	80 8b       	std	Z+16, r24	; 0x10
     d60:	91 8b       	std	Z+17, r25	; 0x11
     d62:	a2 8b       	std	Z+18, r26	; 0x12
     d64:	b3 8b       	std	Z+19, r27	; 0x13
	SetMessageData.SetMessage.InformationBufferOffset = (sizeof(RNDIS_Set_Message_t) - sizeof(RNDIS_Message_Header_t));
     d66:	84 e1       	ldi	r24, 0x14	; 20
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	a0 e0       	ldi	r26, 0x00	; 0
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	84 8b       	std	Z+20, r24	; 0x14
     d70:	95 8b       	std	Z+21, r25	; 0x15
     d72:	a6 8b       	std	Z+22, r26	; 0x16
     d74:	b7 8b       	std	Z+23, r27	; 0x17
	SetMessageData.SetMessage.DeviceVcHandle = 0;
     d76:	10 8e       	std	Z+24, r1	; 0x18
     d78:	11 8e       	std	Z+25, r1	; 0x19
     d7a:	12 8e       	std	Z+26, r1	; 0x1a
     d7c:	13 8e       	std	Z+27, r1	; 0x1b

	memcpy(&SetMessageData.ContiguousBuffer, Buffer, Length);
     d7e:	6d b7       	in	r22, 0x3d	; 61
     d80:	7e b7       	in	r23, 0x3e	; 62
     d82:	63 5e       	subi	r22, 0xE3	; 227
     d84:	7f 4f       	sbci	r23, 0xFF	; 255
     d86:	cb 01       	movw	r24, r22
     d88:	ba 01       	movw	r22, r20
     d8a:	a9 01       	movw	r20, r18
     d8c:	01 d7       	rcall	.+3586   	; 0x1b90 <memcpy>

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(&SetMessageData,
     d8e:	f4 01       	movw	r30, r8
     d90:	64 81       	ldd	r22, Z+4	; 0x04
     d92:	75 81       	ldd	r23, Z+5	; 0x05
     d94:	c4 01       	movw	r24, r8
     d96:	d4 de       	rcall	.-600    	; 0xb40 <RNDIS_SendEncapsulatedCommand>
     d98:	28 2f       	mov	r18, r24
     d9a:	88 23       	and	r24, r24
     d9c:	89 f4       	brne	.+34     	; 0xdc0 <RNDIS_SetRNDISProperty+0x118>
	                                               SetMessageData.SetMessage.MessageLength)) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(&SetMessageResponse,
     d9e:	ce 01       	movw	r24, r28
     da0:	01 96       	adiw	r24, 0x01	; 1
     da2:	60 e1       	ldi	r22, 0x10	; 16
     da4:	70 e0       	ldi	r23, 0x00	; 0
     da6:	b7 de       	rcall	.-658    	; 0xb16 <RNDIS_GetEncapsulatedResponse>
     da8:	28 2f       	mov	r18, r24
     daa:	88 23       	and	r24, r24
     dac:	49 f4       	brne	.+18     	; 0xdc0 <RNDIS_SetRNDISProperty+0x118>
	                                               sizeof(RNDIS_Set_Complete_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (SetMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
     dae:	8d 85       	ldd	r24, Y+13	; 0x0d
     db0:	9e 85       	ldd	r25, Y+14	; 0x0e
     db2:	af 85       	ldd	r26, Y+15	; 0x0f
     db4:	b8 89       	ldd	r27, Y+16	; 0x10
     db6:	00 97       	sbiw	r24, 0x00	; 0
     db8:	a1 05       	cpc	r26, r1
     dba:	b1 05       	cpc	r27, r1
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <RNDIS_SetRNDISProperty+0x118>
     dbe:	20 ec       	ldi	r18, 0xC0	; 192
	  return RNDIS_COMMAND_FAILED;

	return HOST_SENDCONTROL_Successful;
}
     dc0:	82 2f       	mov	r24, r18
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	f8 94       	cli
     dc6:	7e be       	out	0x3e, r7	; 62
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	6d be       	out	0x3d, r6	; 61
     dcc:	60 96       	adiw	r28, 0x10	; 16
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	f8 94       	cli
     dd2:	de bf       	out	0x3e, r29	; 62
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	cd bf       	out	0x3d, r28	; 61
     dd8:	cf 91       	pop	r28
     dda:	df 91       	pop	r29
     ddc:	1f 91       	pop	r17
     dde:	0f 91       	pop	r16
     de0:	ff 90       	pop	r15
     de2:	ef 90       	pop	r14
     de4:	df 90       	pop	r13
     de6:	cf 90       	pop	r12
     de8:	bf 90       	pop	r11
     dea:	af 90       	pop	r10
     dec:	9f 90       	pop	r9
     dee:	8f 90       	pop	r8
     df0:	7f 90       	pop	r7
     df2:	6f 90       	pop	r6
     df4:	08 95       	ret

00000df6 <RNDIS_InitializeDevice>:
 *  \return A value from the USB_Host_SendControlErrorCodes_t enum or RNDIS_COMMAND_FAILED if the device returned a
 *          logical command failure
 */
uint8_t RNDIS_InitializeDevice(const uint16_t HostMaxPacketSize,
                               uint16_t* const DeviceMaxPacketSize)
{
     df6:	0f 93       	push	r16
     df8:	1f 93       	push	r17
     dfa:	df 93       	push	r29
     dfc:	cf 93       	push	r28
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	cc 54       	subi	r28, 0x4C	; 76
     e04:	d0 40       	sbci	r29, 0x00	; 0
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	f8 94       	cli
     e0a:	de bf       	out	0x3e, r29	; 62
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	cd bf       	out	0x3d, r28	; 61
     e10:	8b 01       	movw	r16, r22
	uint8_t ErrorCode;

	RNDIS_Initialize_Message_t  InitMessage;
	RNDIS_Initialize_Complete_t InitMessageResponse;

	InitMessage.MessageType     = REMOTE_NDIS_INITIALIZE_MSG;
     e12:	22 e0       	ldi	r18, 0x02	; 2
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	40 e0       	ldi	r20, 0x00	; 0
     e18:	50 e0       	ldi	r21, 0x00	; 0
     e1a:	29 83       	std	Y+1, r18	; 0x01
     e1c:	3a 83       	std	Y+2, r19	; 0x02
     e1e:	4b 83       	std	Y+3, r20	; 0x03
     e20:	5c 83       	std	Y+4, r21	; 0x04
	InitMessage.MessageLength   = sizeof(RNDIS_Initialize_Message_t);
     e22:	28 e1       	ldi	r18, 0x18	; 24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	40 e0       	ldi	r20, 0x00	; 0
     e28:	50 e0       	ldi	r21, 0x00	; 0
     e2a:	2d 83       	std	Y+5, r18	; 0x05
     e2c:	3e 83       	std	Y+6, r19	; 0x06
     e2e:	4f 83       	std	Y+7, r20	; 0x07
     e30:	58 87       	std	Y+8, r21	; 0x08
	InitMessage.RequestId       = RequestID++;
     e32:	20 91 1e 01 	lds	r18, 0x011E
     e36:	30 91 1f 01 	lds	r19, 0x011F
     e3a:	40 91 20 01 	lds	r20, 0x0120
     e3e:	50 91 21 01 	lds	r21, 0x0121
     e42:	29 87       	std	Y+9, r18	; 0x09
     e44:	3a 87       	std	Y+10, r19	; 0x0a
     e46:	4b 87       	std	Y+11, r20	; 0x0b
     e48:	5c 87       	std	Y+12, r21	; 0x0c
     e4a:	2f 5f       	subi	r18, 0xFF	; 255
     e4c:	3f 4f       	sbci	r19, 0xFF	; 255
     e4e:	4f 4f       	sbci	r20, 0xFF	; 255
     e50:	5f 4f       	sbci	r21, 0xFF	; 255
     e52:	20 93 1e 01 	sts	0x011E, r18
     e56:	30 93 1f 01 	sts	0x011F, r19
     e5a:	40 93 20 01 	sts	0x0120, r20
     e5e:	50 93 21 01 	sts	0x0121, r21

	InitMessage.MajorVersion    = REMOTE_NDIS_VERSION_MAJOR;
     e62:	21 e0       	ldi	r18, 0x01	; 1
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	40 e0       	ldi	r20, 0x00	; 0
     e68:	50 e0       	ldi	r21, 0x00	; 0
     e6a:	2d 87       	std	Y+13, r18	; 0x0d
     e6c:	3e 87       	std	Y+14, r19	; 0x0e
     e6e:	4f 87       	std	Y+15, r20	; 0x0f
     e70:	58 8b       	std	Y+16, r21	; 0x10
	InitMessage.MinorVersion    = REMOTE_NDIS_VERSION_MINOR;
     e72:	19 8a       	std	Y+17, r1	; 0x11
     e74:	1a 8a       	std	Y+18, r1	; 0x12
     e76:	1b 8a       	std	Y+19, r1	; 0x13
     e78:	1c 8a       	std	Y+20, r1	; 0x14
	InitMessage.MaxTransferSize = HostMaxPacketSize;
     e7a:	a0 e0       	ldi	r26, 0x00	; 0
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	8d 8b       	std	Y+21, r24	; 0x15
     e80:	9e 8b       	std	Y+22, r25	; 0x16
     e82:	af 8b       	std	Y+23, r26	; 0x17
     e84:	b8 8f       	std	Y+24, r27	; 0x18

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(&InitMessage,
     e86:	ce 01       	movw	r24, r28
     e88:	01 96       	adiw	r24, 0x01	; 1
     e8a:	68 e1       	ldi	r22, 0x18	; 24
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	58 de       	rcall	.-848    	; 0xb40 <RNDIS_SendEncapsulatedCommand>
     e90:	28 2f       	mov	r18, r24
     e92:	88 23       	and	r24, r24
     e94:	b9 f4       	brne	.+46     	; 0xec4 <RNDIS_InitializeDevice+0xce>
	                                               sizeof(RNDIS_Initialize_Message_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(&InitMessageResponse,
     e96:	ce 01       	movw	r24, r28
     e98:	49 96       	adiw	r24, 0x19	; 25
     e9a:	64 e3       	ldi	r22, 0x34	; 52
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	3b de       	rcall	.-906    	; 0xb16 <RNDIS_GetEncapsulatedResponse>
     ea0:	28 2f       	mov	r18, r24
     ea2:	88 23       	and	r24, r24
     ea4:	79 f4       	brne	.+30     	; 0xec4 <RNDIS_InitializeDevice+0xce>
	                                               sizeof(RNDIS_Initialize_Complete_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (InitMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
     ea6:	8d a1       	ldd	r24, Y+37	; 0x25
     ea8:	9e a1       	ldd	r25, Y+38	; 0x26
     eaa:	af a1       	ldd	r26, Y+39	; 0x27
     eac:	b8 a5       	ldd	r27, Y+40	; 0x28
     eae:	00 97       	sbiw	r24, 0x00	; 0
     eb0:	a1 05       	cpc	r26, r1
     eb2:	b1 05       	cpc	r27, r1
     eb4:	11 f0       	breq	.+4      	; 0xeba <RNDIS_InitializeDevice+0xc4>
     eb6:	20 ec       	ldi	r18, 0xC0	; 192
     eb8:	05 c0       	rjmp	.+10     	; 0xec4 <RNDIS_InitializeDevice+0xce>
	  return RNDIS_COMMAND_FAILED;

	*DeviceMaxPacketSize = InitMessageResponse.MaxTransferSize;
     eba:	8d ad       	ldd	r24, Y+61	; 0x3d
     ebc:	9e ad       	ldd	r25, Y+62	; 0x3e
     ebe:	f8 01       	movw	r30, r16
     ec0:	91 83       	std	Z+1, r25	; 0x01
     ec2:	80 83       	st	Z, r24

	return HOST_SENDCONTROL_Successful;
}
     ec4:	82 2f       	mov	r24, r18
     ec6:	c4 5b       	subi	r28, 0xB4	; 180
     ec8:	df 4f       	sbci	r29, 0xFF	; 255
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	1f 91       	pop	r17
     eda:	0f 91       	pop	r16
     edc:	08 95       	ret

00000ede <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     ede:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     ee0:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     ee4:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     ee8:	80 91 a0 00 	lds	r24, 0x00A0
     eec:	8f 7d       	andi	r24, 0xDF	; 223
     eee:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     ef2:	80 91 9f 00 	lds	r24, 0x009F
     ef6:	8f 7d       	andi	r24, 0xDF	; 223
     ef8:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     efc:	80 91 9e 00 	lds	r24, 0x009E
     f00:	81 60       	ori	r24, 0x01	; 1
     f02:	80 93 9e 00 	sts	0x009E, r24
     f06:	28 c0       	rjmp	.+80     	; 0xf58 <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     f08:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     f0c:	85 ff       	sbrs	r24, 5
     f0e:	06 c0       	rjmp	.+12     	; 0xf1c <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     f10:	80 91 9f 00 	lds	r24, 0x009F
     f14:	8f 7d       	andi	r24, 0xDF	; 223
     f16:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     f1a:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     f1c:	80 91 2f 01 	lds	r24, 0x012F
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	11 f4       	brne	.+4      	; 0xf28 <USB_Host_WaitMS+0x4a>
     f24:	91 e0       	ldi	r25, 0x01	; 1
     f26:	1a c0       	rjmp	.+52     	; 0xf5c <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     f28:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     f2c:	84 ff       	sbrs	r24, 4
     f2e:	09 c0       	rjmp	.+18     	; 0xf42 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     f30:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     f34:	80 91 a6 00 	lds	r24, 0x00A6
     f38:	8f 7e       	andi	r24, 0xEF	; 239
     f3a:	80 93 a6 00 	sts	0x00A6, r24
     f3e:	92 e0       	ldi	r25, 0x02	; 2
     f40:	0d c0       	rjmp	.+26     	; 0xf5c <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     f42:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     f46:	81 ff       	sbrs	r24, 1
     f48:	07 c0       	rjmp	.+14     	; 0xf58 <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     f4a:	80 91 a6 00 	lds	r24, 0x00A6
     f4e:	8d 7f       	andi	r24, 0xFD	; 253
     f50:	80 93 a6 00 	sts	0x00A6, r24
     f54:	93 e0       	ldi	r25, 0x03	; 3
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     f58:	99 23       	and	r25, r25
     f5a:	b1 f6       	brne	.-84     	; 0xf08 <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     f5c:	20 fd       	sbrc	r18, 0
     f5e:	05 c0       	rjmp	.+10     	; 0xf6a <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     f60:	80 91 9e 00 	lds	r24, 0x009E
     f64:	8e 7f       	andi	r24, 0xFE	; 254
     f66:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     f6a:	35 ff       	sbrs	r19, 5
     f6c:	05 c0       	rjmp	.+10     	; 0xf78 <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     f6e:	80 91 a0 00 	lds	r24, 0x00A0
     f72:	80 62       	ori	r24, 0x20	; 32
     f74:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     f78:	89 2f       	mov	r24, r25
     f7a:	08 95       	ret

00000f7c <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     f7c:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     f80:	80 91 a0 00 	lds	r24, 0x00A0
     f84:	8d 7f       	andi	r24, 0xFD	; 253
     f86:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     f8a:	80 91 9e 00 	lds	r24, 0x009E
     f8e:	82 60       	ori	r24, 0x02	; 2
     f90:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     f94:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     f98:	81 fd       	sbrc	r24, 1
     f9a:	fc cf       	rjmp	.-8      	; 0xf94 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     f9c:	80 91 9e 00 	lds	r24, 0x009E
     fa0:	81 60       	ori	r24, 0x01	; 1
     fa2:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     fa6:	10 92 25 01 	sts	0x0125, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     faa:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     fae:	80 91 a0 00 	lds	r24, 0x00A0
     fb2:	8f 7d       	andi	r24, 0xDF	; 223
     fb4:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     fb8:	80 91 9f 00 	lds	r24, 0x009F
     fbc:	8f 7d       	andi	r24, 0xDF	; 223
     fbe:	80 93 9f 00 	sts	0x009F, r24
     fc2:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fc4:	40 ed       	ldi	r20, 0xD0	; 208
     fc6:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     fc8:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     fcc:	85 ff       	sbrs	r24, 5
     fce:	0b c0       	rjmp	.+22     	; 0xfe6 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     fd0:	80 91 9f 00 	lds	r24, 0x009F
     fd4:	8f 7d       	andi	r24, 0xDF	; 223
     fd6:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     fda:	80 91 9f 00 	lds	r24, 0x009F
     fde:	8d 7f       	andi	r24, 0xFD	; 253
     fe0:	80 93 9f 00 	sts	0x009F, r24
     fe4:	05 c0       	rjmp	.+10     	; 0xff0 <USB_Host_ResetDevice+0x74>
     fe6:	ca 01       	movw	r24, r20
     fe8:	01 97       	sbiw	r24, 0x01	; 1
     fea:	f1 f7       	brne	.-4      	; 0xfe8 <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     fec:	21 50       	subi	r18, 0x01	; 1
     fee:	61 f7       	brne	.-40     	; 0xfc8 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     ff0:	35 ff       	sbrs	r19, 5
     ff2:	05 c0       	rjmp	.+10     	; 0xffe <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     ff4:	80 91 a0 00 	lds	r24, 0x00A0
     ff8:	80 62       	ori	r24, 0x20	; 32
     ffa:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     ffe:	60 fd       	sbrc	r22, 0
    1000:	05 c0       	rjmp	.+10     	; 0x100c <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1002:	80 91 9e 00 	lds	r24, 0x009E
    1006:	8e 7f       	andi	r24, 0xFE	; 254
    1008:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    100c:	80 91 a0 00 	lds	r24, 0x00A0
    1010:	82 60       	ori	r24, 0x02	; 2
    1012:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
    1016:	08 95       	ret

00001018 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
    1018:	ef 92       	push	r14
    101a:	0f 93       	push	r16
    101c:	1f 93       	push	r17
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	28 97       	sbiw	r28, 0x08	; 8
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	f8 94       	cli
    102c:	de bf       	out	0x3e, r29	; 62
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
    1032:	80 91 2f 01 	lds	r24, 0x012F
    1036:	85 30       	cpi	r24, 0x05	; 5
    1038:	09 f4       	brne	.+2      	; 0x103c <USB_Host_ProcessNextHostState+0x24>
    103a:	94 c0       	rjmp	.+296    	; 0x1164 <USB_Host_ProcessNextHostState+0x14c>
    103c:	86 30       	cpi	r24, 0x06	; 6
    103e:	68 f4       	brcc	.+26     	; 0x105a <USB_Host_ProcessNextHostState+0x42>
    1040:	82 30       	cpi	r24, 0x02	; 2
    1042:	b9 f1       	breq	.+110    	; 0x10b2 <USB_Host_ProcessNextHostState+0x9a>
    1044:	83 30       	cpi	r24, 0x03	; 3
    1046:	18 f4       	brcc	.+6      	; 0x104e <USB_Host_ProcessNextHostState+0x36>
    1048:	88 23       	and	r24, r24
    104a:	a1 f0       	breq	.+40     	; 0x1074 <USB_Host_ProcessNextHostState+0x5c>
    104c:	04 c1       	rjmp	.+520    	; 0x1256 <USB_Host_ProcessNextHostState+0x23e>
    104e:	83 30       	cpi	r24, 0x03	; 3
    1050:	d1 f1       	breq	.+116    	; 0x10c6 <USB_Host_ProcessNextHostState+0xae>
    1052:	84 30       	cpi	r24, 0x04	; 4
    1054:	09 f0       	breq	.+2      	; 0x1058 <USB_Host_ProcessNextHostState+0x40>
    1056:	ff c0       	rjmp	.+510    	; 0x1256 <USB_Host_ProcessNextHostState+0x23e>
    1058:	5d c0       	rjmp	.+186    	; 0x1114 <USB_Host_ProcessNextHostState+0xfc>
    105a:	87 30       	cpi	r24, 0x07	; 7
    105c:	09 f4       	brne	.+2      	; 0x1060 <USB_Host_ProcessNextHostState+0x48>
    105e:	9b c0       	rjmp	.+310    	; 0x1196 <USB_Host_ProcessNextHostState+0x17e>
    1060:	87 30       	cpi	r24, 0x07	; 7
    1062:	08 f4       	brcc	.+2      	; 0x1066 <USB_Host_ProcessNextHostState+0x4e>
    1064:	8a c0       	rjmp	.+276    	; 0x117a <USB_Host_ProcessNextHostState+0x162>
    1066:	88 30       	cpi	r24, 0x08	; 8
    1068:	09 f4       	brne	.+2      	; 0x106c <USB_Host_ProcessNextHostState+0x54>
    106a:	b3 c0       	rjmp	.+358    	; 0x11d2 <USB_Host_ProcessNextHostState+0x1ba>
    106c:	89 30       	cpi	r24, 0x09	; 9
    106e:	09 f0       	breq	.+2      	; 0x1072 <USB_Host_ProcessNextHostState+0x5a>
    1070:	f2 c0       	rjmp	.+484    	; 0x1256 <USB_Host_ProcessNextHostState+0x23e>
    1072:	d7 c0       	rjmp	.+430    	; 0x1222 <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
    1074:	00 91 23 01 	lds	r16, 0x0123
    1078:	10 91 24 01 	lds	r17, 0x0124
    107c:	01 15       	cp	r16, r1
    107e:	11 05       	cpc	r17, r1
    1080:	09 f4       	brne	.+2      	; 0x1084 <USB_Host_ProcessNextHostState+0x6c>
    1082:	e9 c0       	rjmp	.+466    	; 0x1256 <USB_Host_ProcessNextHostState+0x23e>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	2b df       	rcall	.-426    	; 0xede <USB_Host_WaitMS>
    1088:	68 2f       	mov	r22, r24
    108a:	88 23       	and	r24, r24
    108c:	31 f0       	breq	.+12     	; 0x109a <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
    108e:	80 91 22 01 	lds	r24, 0x0122
    1092:	80 93 2f 01 	sts	0x012F, r24
    1096:	91 e0       	ldi	r25, 0x01	; 1
    1098:	da c0       	rjmp	.+436    	; 0x124e <USB_Host_ProcessNextHostState+0x236>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
    109a:	c8 01       	movw	r24, r16
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	90 93 24 01 	sts	0x0124, r25
    10a2:	80 93 23 01 	sts	0x0123, r24
    10a6:	89 2b       	or	r24, r25
    10a8:	09 f0       	breq	.+2      	; 0x10ac <USB_Host_ProcessNextHostState+0x94>
    10aa:	d5 c0       	rjmp	.+426    	; 0x1256 <USB_Host_ProcessNextHostState+0x23e>
				  USB_HostState = PostWaitState;
    10ac:	80 91 22 01 	lds	r24, 0x0122
    10b0:	07 c0       	rjmp	.+14     	; 0x10c0 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
    10b2:	88 ee       	ldi	r24, 0xE8	; 232
    10b4:	93 e0       	ldi	r25, 0x03	; 3
    10b6:	90 93 24 01 	sts	0x0124, r25
    10ba:	80 93 23 01 	sts	0x0123, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
    10be:	83 e0       	ldi	r24, 0x03	; 3
    10c0:	80 93 2f 01 	sts	0x012F, r24
    10c4:	c8 c0       	rjmp	.+400    	; 0x1256 <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
    10c6:	80 91 23 01 	lds	r24, 0x0123
    10ca:	90 91 24 01 	lds	r25, 0x0124
    10ce:	01 97       	sbiw	r24, 0x01	; 1
    10d0:	90 93 24 01 	sts	0x0124, r25
    10d4:	80 93 23 01 	sts	0x0123, r24
    10d8:	01 96       	adiw	r24, 0x01	; 1
    10da:	29 f0       	breq	.+10     	; 0x10e6 <USB_Host_ProcessNextHostState+0xce>
    10dc:	80 ed       	ldi	r24, 0xD0	; 208
    10de:	97 e0       	ldi	r25, 0x07	; 7
    10e0:	01 97       	sbiw	r24, 0x01	; 1
    10e2:	f1 f7       	brne	.-4      	; 0x10e0 <USB_Host_ProcessNextHostState+0xc8>
    10e4:	b8 c0       	rjmp	.+368    	; 0x1256 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
    10e6:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    10e8:	80 91 d8 00 	lds	r24, 0x00D8
    10ec:	80 61       	ori	r24, 0x10	; 16
    10ee:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
    10f2:	80 91 dd 00 	lds	r24, 0x00DD
    10f6:	8b 7f       	andi	r24, 0xFB	; 251
    10f8:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
    10fc:	80 91 d7 00 	lds	r24, 0x00D7
    1100:	80 61       	ori	r24, 0x10	; 16
    1102:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
    1106:	80 91 dd 00 	lds	r24, 0x00DD
    110a:	82 60       	ori	r24, 0x02	; 2
    110c:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
    1110:	84 e0       	ldi	r24, 0x04	; 4
    1112:	d6 cf       	rjmp	.-84     	; 0x10c0 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
    1114:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
    1118:	80 ff       	sbrs	r24, 0
    111a:	9d c0       	rjmp	.+314    	; 0x1256 <USB_Host_ProcessNextHostState+0x23e>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    111c:	80 91 9f 00 	lds	r24, 0x009F
    1120:	8e 7f       	andi	r24, 0xFE	; 254
    1122:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1126:	80 91 9f 00 	lds	r24, 0x009F
    112a:	8d 7f       	andi	r24, 0xFD	; 253
    112c:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1130:	80 91 df 00 	lds	r24, 0x00DF
    1134:	8d 7f       	andi	r24, 0xFD	; 253
    1136:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
    113a:	80 91 de 00 	lds	r24, 0x00DE
    113e:	82 60       	ori	r24, 0x02	; 2
    1140:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1144:	80 91 9e 00 	lds	r24, 0x009E
    1148:	81 60       	ori	r24, 0x01	; 1
    114a:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
    114e:	ed d0       	rcall	.+474    	; 0x132a <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
    1150:	10 92 2f 01 	sts	0x012F, r1
    1154:	84 e6       	ldi	r24, 0x64	; 100
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	90 93 24 01 	sts	0x0124, r25
    115c:	80 93 23 01 	sts	0x0123, r24
    1160:	85 e0       	ldi	r24, 0x05	; 5
    1162:	5c c0       	rjmp	.+184    	; 0x121c <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
    1164:	0b df       	rcall	.-490    	; 0xf7c <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
    1166:	10 92 2f 01 	sts	0x012F, r1
    116a:	88 ec       	ldi	r24, 0xC8	; 200
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	90 93 24 01 	sts	0x0124, r25
    1172:	80 93 23 01 	sts	0x0123, r24
    1176:	86 e0       	ldi	r24, 0x06	; 6
    1178:	51 c0       	rjmp	.+162    	; 0x121c <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	60 e0       	ldi	r22, 0x00	; 0
    117e:	40 e0       	ldi	r20, 0x00	; 0
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	00 e4       	ldi	r16, 0x40	; 64
    1184:	10 e0       	ldi	r17, 0x00	; 0
    1186:	ee 24       	eor	r14, r14
    1188:	72 d0       	rcall	.+228    	; 0x126e <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    118a:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
    118e:	87 ff       	sbrs	r24, 7
    1190:	5c c0       	rjmp	.+184    	; 0x124a <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
    1192:	87 e0       	ldi	r24, 0x07	; 7
    1194:	95 cf       	rjmp	.-214    	; 0x10c0 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
    1196:	a7 e2       	ldi	r26, 0x27	; 39
    1198:	b1 e0       	ldi	r27, 0x01	; 1
    119a:	e4 e1       	ldi	r30, 0x14	; 20
    119c:	f1 e0       	ldi	r31, 0x01	; 1
    119e:	88 e0       	ldi	r24, 0x08	; 8
    11a0:	01 90       	ld	r0, Z+
    11a2:	0d 92       	st	X+, r0
    11a4:	81 50       	subi	r24, 0x01	; 1
    11a6:	e1 f7       	brne	.-8      	; 0x11a0 <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
    11a8:	ce 01       	movw	r24, r28
    11aa:	01 96       	adiw	r24, 0x01	; 1
    11ac:	7e d3       	rcall	.+1788   	; 0x18aa <USB_Host_SendControlRequest>
    11ae:	68 2f       	mov	r22, r24
    11b0:	88 23       	and	r24, r24
    11b2:	09 f0       	breq	.+2      	; 0x11b6 <USB_Host_ProcessNextHostState+0x19e>
    11b4:	48 c0       	rjmp	.+144    	; 0x1246 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
    11b6:	88 85       	ldd	r24, Y+8	; 0x08
    11b8:	80 93 1c 01 	sts	0x011C, r24

			USB_Host_ResetDevice();
    11bc:	df de       	rcall	.-578    	; 0xf7c <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
    11be:	10 92 2f 01 	sts	0x012F, r1
    11c2:	88 ec       	ldi	r24, 0xC8	; 200
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	90 93 24 01 	sts	0x0124, r25
    11ca:	80 93 23 01 	sts	0x0123, r24
    11ce:	88 e0       	ldi	r24, 0x08	; 8
    11d0:	25 c0       	rjmp	.+74     	; 0x121c <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
    11d2:	00 91 1c 01 	lds	r16, 0x011C
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	60 e0       	ldi	r22, 0x00	; 0
    11da:	40 e0       	ldi	r20, 0x00	; 0
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	10 e0       	ldi	r17, 0x00	; 0
    11e0:	ee 24       	eor	r14, r14
    11e2:	45 d0       	rcall	.+138    	; 0x126e <Pipe_ConfigurePipe>
    11e4:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
    11e8:	87 ff       	sbrs	r24, 7
    11ea:	2f c0       	rjmp	.+94     	; 0x124a <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
    11ec:	a7 e2       	ldi	r26, 0x27	; 39
    11ee:	b1 e0       	ldi	r27, 0x01	; 1
    11f0:	ec e0       	ldi	r30, 0x0C	; 12
    11f2:	f1 e0       	ldi	r31, 0x01	; 1
    11f4:	88 e0       	ldi	r24, 0x08	; 8
    11f6:	01 90       	ld	r0, Z+
    11f8:	0d 92       	st	X+, r0
    11fa:	81 50       	subi	r24, 0x01	; 1
    11fc:	e1 f7       	brne	.-8      	; 0x11f6 <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	53 d3       	rcall	.+1702   	; 0x18aa <USB_Host_SendControlRequest>
    1204:	68 2f       	mov	r22, r24
    1206:	88 23       	and	r24, r24
    1208:	f1 f4       	brne	.+60     	; 0x1246 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
    120a:	10 92 2f 01 	sts	0x012F, r1
    120e:	84 e6       	ldi	r24, 0x64	; 100
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	90 93 24 01 	sts	0x0124, r25
    1216:	80 93 23 01 	sts	0x0123, r24
    121a:	89 e0       	ldi	r24, 0x09	; 9
    121c:	80 93 22 01 	sts	0x0122, r24
    1220:	1a c0       	rjmp	.+52     	; 0x1256 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
    1228:	8a e0       	ldi	r24, 0x0A	; 10
    122a:	80 93 2f 01 	sts	0x012F, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
    122e:	09 da       	rcall	.-3054   	; 0x642 <EVENT_USB_Host_DeviceEnumerationComplete>
    1230:	12 c0       	rjmp	.+36     	; 0x1256 <USB_Host_ProcessNextHostState+0x23e>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    1232:	89 2f       	mov	r24, r25
    1234:	e1 d8       	rcall	.-3646   	; 0x3f8 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1236:	80 91 dd 00 	lds	r24, 0x00DD
    123a:	81 60       	ori	r24, 0x01	; 1
    123c:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    1240:	07 d9       	rcall	.-3570   	; 0x450 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1242:	b6 d0       	rcall	.+364    	; 0x13b0 <USB_ResetInterface>
    1244:	08 c0       	rjmp	.+16     	; 0x1256 <USB_Host_ProcessNextHostState+0x23e>
	}
}
    1246:	93 e0       	ldi	r25, 0x03	; 3
    1248:	02 c0       	rjmp	.+4      	; 0x124e <USB_Host_ProcessNextHostState+0x236>
    124a:	94 e0       	ldi	r25, 0x04	; 4
    124c:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    124e:	80 91 2f 01 	lds	r24, 0x012F
    1252:	81 30       	cpi	r24, 0x01	; 1
    1254:	71 f7       	brne	.-36     	; 0x1232 <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
    1256:	28 96       	adiw	r28, 0x08	; 8
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	de bf       	out	0x3e, r29	; 62
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	cd bf       	out	0x3d, r28	; 61
    1262:	cf 91       	pop	r28
    1264:	df 91       	pop	r29
    1266:	1f 91       	pop	r17
    1268:	0f 91       	pop	r16
    126a:	ef 90       	pop	r14
    126c:	08 95       	ret

0000126e <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    126e:	ef 92       	push	r14
    1270:	0f 93       	push	r16
    1272:	1f 93       	push	r17
    1274:	e8 2f       	mov	r30, r24
    1276:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
    1278:	62 95       	swap	r22
    127a:	66 0f       	add	r22, r22
    127c:	66 0f       	add	r22, r22
    127e:	60 7c       	andi	r22, 0xC0	; 192
    1280:	64 2b       	or	r22, r20
    1282:	2f 70       	andi	r18, 0x0F	; 15
    1284:	62 2b       	or	r22, r18
    1286:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    1288:	72 60       	ori	r23, 0x02	; 2
    128a:	45 c0       	rjmp	.+138    	; 0x1316 <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    128c:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
    1290:	3e 17       	cp	r19, r30
    1292:	a1 f4       	brne	.+40     	; 0x12bc <Pipe_ConfigurePipe+0x4e>
    1294:	88 e0       	ldi	r24, 0x08	; 8
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	03 c0       	rjmp	.+6      	; 0x12a2 <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
    129c:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    129e:	88 0f       	add	r24, r24
    12a0:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    12a2:	80 17       	cp	r24, r16
    12a4:	91 07       	cpc	r25, r17
    12a6:	10 f4       	brcc	.+4      	; 0x12ac <Pipe_ConfigurePipe+0x3e>
    12a8:	25 30       	cpi	r18, 0x05	; 5
    12aa:	c1 f7       	brne	.-16     	; 0x129c <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    12ac:	92 2f       	mov	r25, r18
    12ae:	92 95       	swap	r25
    12b0:	90 7f       	andi	r25, 0xF0	; 240
    12b2:	97 2b       	or	r25, r23
    12b4:	56 2f       	mov	r21, r22
    12b6:	40 e0       	ldi	r20, 0x00	; 0
    12b8:	20 e0       	ldi	r18, 0x00	; 0
    12ba:	08 c0       	rjmp	.+16     	; 0x12cc <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    12bc:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    12c0:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    12c4:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
    12c8:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    12cc:	91 ff       	sbrs	r25, 1
    12ce:	22 c0       	rjmp	.+68     	; 0x1314 <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    12d0:	80 91 a9 00 	lds	r24, 0x00A9
    12d4:	8e 7f       	andi	r24, 0xFE	; 254
    12d6:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    12da:	80 91 ab 00 	lds	r24, 0x00AB
    12de:	8d 7f       	andi	r24, 0xFD	; 253
    12e0:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    12e4:	80 91 a9 00 	lds	r24, 0x00A9
    12e8:	81 60       	ori	r24, 0x01	; 1
    12ea:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    12ee:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
    12f2:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
    12f6:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
    12fa:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    12fe:	80 91 a9 00 	lds	r24, 0x00A9
    1302:	80 62       	ori	r24, 0x20	; 32
    1304:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    1308:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
    130c:	87 fd       	sbrc	r24, 7
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <Pipe_ConfigurePipe+0xa6>
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	07 c0       	rjmp	.+14     	; 0x1322 <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    1314:	3f 5f       	subi	r19, 0xFF	; 255
    1316:	37 30       	cpi	r19, 0x07	; 7
    1318:	08 f4       	brcc	.+2      	; 0x131c <Pipe_ConfigurePipe+0xae>
    131a:	b8 cf       	rjmp	.-144    	; 0x128c <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    131c:	e0 93 a7 00 	sts	0x00A7, r30
    1320:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
    1322:	1f 91       	pop	r17
    1324:	0f 91       	pop	r16
    1326:	ef 90       	pop	r14
    1328:	08 95       	ret

0000132a <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
    132a:	10 92 f8 00 	sts	0x00F8, r1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    1334:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    1338:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    133c:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    1340:	80 91 a9 00 	lds	r24, 0x00A9
    1344:	8e 7f       	andi	r24, 0xFE	; 254
    1346:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    134a:	9f 5f       	subi	r25, 0xFF	; 255
    134c:	97 30       	cpi	r25, 0x07	; 7
    134e:	81 f7       	brne	.-32     	; 0x1330 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    1350:	08 95       	ret

00001352 <Pipe_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    1352:	40 91 a2 00 	lds	r20, 0x00A2
    1356:	50 91 a3 00 	lds	r21, 0x00A3
    135a:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    135c:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    1360:	80 73       	andi	r24, 0x30	; 48
    1362:	80 31       	cpi	r24, 0x10	; 16
    1364:	29 f4       	brne	.+10     	; 0x1370 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1366:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
    136a:	80 ff       	sbrs	r24, 0
    136c:	05 c0       	rjmp	.+10     	; 0x1378 <Pipe_WaitUntilReady+0x26>
    136e:	1e c0       	rjmp	.+60     	; 0x13ac <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1370:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    1374:	82 fd       	sbrc	r24, 2
    1376:	1a c0       	rjmp	.+52     	; 0x13ac <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1378:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    137c:	81 ff       	sbrs	r24, 1
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <Pipe_WaitUntilReady+0x32>
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    1384:	80 91 2f 01 	lds	r24, 0x012F
    1388:	81 30       	cpi	r24, 0x01	; 1
    138a:	11 f4       	brne	.+4      	; 0x1390 <Pipe_WaitUntilReady+0x3e>
    138c:	82 e0       	ldi	r24, 0x02	; 2
    138e:	08 95       	ret
    1390:	80 91 a2 00 	lds	r24, 0x00A2
    1394:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1398:	84 17       	cp	r24, r20
    139a:	95 07       	cpc	r25, r21
    139c:	f9 f2       	breq	.-66     	; 0x135c <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    139e:	22 23       	and	r18, r18
    13a0:	11 f4       	brne	.+4      	; 0x13a6 <Pipe_WaitUntilReady+0x54>
    13a2:	83 e0       	ldi	r24, 0x03	; 3
    13a4:	08 95       	ret
    13a6:	21 50       	subi	r18, 0x01	; 1
    13a8:	ac 01       	movw	r20, r24
    13aa:	d8 cf       	rjmp	.-80     	; 0x135c <Pipe_WaitUntilReady+0xa>
    13ac:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
    13ae:	08 95       	ret

000013b0 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    13b0:	70 d0       	rcall	.+224    	; 0x1492 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    13b2:	77 d0       	rcall	.+238    	; 0x14a2 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    13b4:	80 91 d8 00 	lds	r24, 0x00D8
    13b8:	8f 77       	andi	r24, 0x7F	; 127
    13ba:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
    13be:	80 91 d8 00 	lds	r24, 0x00D8
    13c2:	80 68       	ori	r24, 0x80	; 128
    13c4:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    13c8:	80 91 d8 00 	lds	r24, 0x00D8
    13cc:	8f 7d       	andi	r24, 0xDF	; 223
    13ce:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    13d2:	80 91 d7 00 	lds	r24, 0x00D7
    13d6:	8f 77       	andi	r24, 0x7F	; 127
    13d8:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    13dc:	8c e0       	ldi	r24, 0x0C	; 12
    13de:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    13e0:	8e e0       	ldi	r24, 0x0E	; 14
    13e2:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
    13e4:	09 b4       	in	r0, 0x29	; 41
    13e6:	00 fe       	sbrs	r0, 0
    13e8:	fd cf       	rjmp	.-6      	; 0x13e4 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	80 93 2f 01 	sts	0x012F, r24
	USB_Host_ConfigurationNumber = 0;
    13f0:	10 92 25 01 	sts	0x0125, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    13f4:	80 e4       	ldi	r24, 0x40	; 64
    13f6:	80 93 1c 01 	sts	0x011C, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    13fa:	80 91 d8 00 	lds	r24, 0x00D8
    13fe:	80 64       	ori	r24, 0x40	; 64
    1400:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1404:	80 91 dd 00 	lds	r24, 0x00DD
    1408:	81 60       	ori	r24, 0x01	; 1
    140a:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    140e:	80 91 dd 00 	lds	r24, 0x00DD
    1412:	84 60       	ori	r24, 0x04	; 4
    1414:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
    1418:	80 91 d7 00 	lds	r24, 0x00D7
    141c:	8f 7e       	andi	r24, 0xEF	; 239
    141e:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
    1422:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
    1424:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
    1426:	80 91 de 00 	lds	r24, 0x00DE
    142a:	81 60       	ori	r24, 0x01	; 1
    142c:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    1430:	80 91 de 00 	lds	r24, 0x00DE
    1434:	84 60       	ori	r24, 0x04	; 4
    1436:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    143a:	80 91 e0 00 	lds	r24, 0x00E0
    143e:	8e 7f       	andi	r24, 0xFE	; 254
    1440:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    1444:	80 91 d8 00 	lds	r24, 0x00D8
    1448:	80 61       	ori	r24, 0x10	; 16
    144a:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    144e:	08 95       	ret

00001450 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    1450:	e7 ed       	ldi	r30, 0xD7	; 215
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	81 60       	ori	r24, 0x01	; 1
    1458:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	80 93 26 01 	sts	0x0126, r24

	USB_ResetInterface();
}
    1460:	a7 cf       	rjmp	.-178    	; 0x13b0 <USB_ResetInterface>

00001462 <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1462:	17 d0       	rcall	.+46     	; 0x1492 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1464:	1e d0       	rcall	.+60     	; 0x14a2 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1466:	e0 ee       	ldi	r30, 0xE0	; 224
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	81 60       	ori	r24, 0x01	; 1
    146e:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
    1470:	a8 ed       	ldi	r26, 0xD8	; 216
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	8c 91       	ld	r24, X
    1476:	8f 77       	andi	r24, 0x7F	; 127
    1478:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    147a:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
    147c:	e7 ed       	ldi	r30, 0xD7	; 215
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	8e 7f       	andi	r24, 0xFE	; 254
    1484:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
    1486:	8c 91       	ld	r24, X
    1488:	8f 7e       	andi	r24, 0xEF	; 239
    148a:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    148c:	10 92 26 01 	sts	0x0126, r1
}
    1490:	08 95       	ret

00001492 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1492:	e8 ed       	ldi	r30, 0xD8	; 216
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	8c 7f       	andi	r24, 0xFC	; 252
    149a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    149c:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    14a0:	08 95       	ret

000014a2 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    14a2:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    14a6:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
    14aa:	08 95       	ret

000014ac <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    14ac:	1f 92       	push	r1
    14ae:	0f 92       	push	r0
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	0f 92       	push	r0
    14b4:	0b b6       	in	r0, 0x3b	; 59
    14b6:	0f 92       	push	r0
    14b8:	11 24       	eor	r1, r1
    14ba:	2f 93       	push	r18
    14bc:	3f 93       	push	r19
    14be:	4f 93       	push	r20
    14c0:	5f 93       	push	r21
    14c2:	6f 93       	push	r22
    14c4:	7f 93       	push	r23
    14c6:	8f 93       	push	r24
    14c8:	9f 93       	push	r25
    14ca:	af 93       	push	r26
    14cc:	bf 93       	push	r27
    14ce:	ef 93       	push	r30
    14d0:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    14d2:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    14d6:	85 ff       	sbrs	r24, 5
    14d8:	0a c0       	rjmp	.+20     	; 0x14ee <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    14da:	80 91 a0 00 	lds	r24, 0x00A0
    14de:	85 ff       	sbrs	r24, 5
    14e0:	06 c0       	rjmp	.+12     	; 0x14ee <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    14e2:	80 91 9f 00 	lds	r24, 0x009F
    14e6:	8f 7d       	andi	r24, 0xDF	; 223
    14e8:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    14ec:	b4 d1       	rcall	.+872    	; 0x1856 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    14ee:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    14f2:	81 ff       	sbrs	r24, 1
    14f4:	16 c0       	rjmp	.+44     	; 0x1522 <__vector_10+0x76>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    14f6:	80 91 a0 00 	lds	r24, 0x00A0
    14fa:	81 ff       	sbrs	r24, 1
    14fc:	12 c0       	rjmp	.+36     	; 0x1522 <__vector_10+0x76>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    14fe:	80 91 9f 00 	lds	r24, 0x009F
    1502:	8d 7f       	andi	r24, 0xFD	; 253
    1504:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    1508:	80 91 9f 00 	lds	r24, 0x009F
    150c:	8e 7f       	andi	r24, 0xFE	; 254
    150e:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    1512:	80 91 a0 00 	lds	r24, 0x00A0
    1516:	8d 7f       	andi	r24, 0xFD	; 253
    1518:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    151c:	0e 94 28 02 	call	0x450	; 0x450 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1520:	47 df       	rcall	.-370    	; 0x13b0 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    1522:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    1526:	81 ff       	sbrs	r24, 1
    1528:	16 c0       	rjmp	.+44     	; 0x1556 <__vector_10+0xaa>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    152a:	80 91 de 00 	lds	r24, 0x00DE
    152e:	81 ff       	sbrs	r24, 1
    1530:	12 c0       	rjmp	.+36     	; 0x1556 <__vector_10+0xaa>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1532:	80 91 df 00 	lds	r24, 0x00DF
    1536:	8d 7f       	andi	r24, 0xFD	; 253
    1538:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
    153c:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    153e:	80 91 dd 00 	lds	r24, 0x00DD
    1542:	81 60       	ori	r24, 0x01	; 1
    1544:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	5e d8       	rcall	.-3908   	; 0x608 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    154c:	0e 94 28 02 	call	0x450	; 0x450 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	80 93 2f 01 	sts	0x012F, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    1556:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    155a:	80 ff       	sbrs	r24, 0
    155c:	18 c0       	rjmp	.+48     	; 0x158e <__vector_10+0xe2>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    155e:	80 91 de 00 	lds	r24, 0x00DE
    1562:	80 ff       	sbrs	r24, 0
    1564:	14 c0       	rjmp	.+40     	; 0x158e <__vector_10+0xe2>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    1566:	80 91 df 00 	lds	r24, 0x00DF
    156a:	8e 7f       	andi	r24, 0xFE	; 254
    156c:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
    1570:	80 91 de 00 	lds	r24, 0x00DE
    1574:	8e 7f       	andi	r24, 0xFE	; 254
    1576:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    157a:	0e 94 31 02 	call	0x462	; 0x462 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    157e:	80 91 a0 00 	lds	r24, 0x00A0
    1582:	82 60       	ori	r24, 0x02	; 2
    1584:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    1588:	82 e0       	ldi	r24, 0x02	; 2
    158a:	80 93 2f 01 	sts	0x012F, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    158e:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    1592:	82 ff       	sbrs	r24, 2
    1594:	10 c0       	rjmp	.+32     	; 0x15b6 <__vector_10+0x10a>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    1596:	80 91 de 00 	lds	r24, 0x00DE
    159a:	82 ff       	sbrs	r24, 2
    159c:	0c c0       	rjmp	.+24     	; 0x15b6 <__vector_10+0x10a>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    159e:	80 91 df 00 	lds	r24, 0x00DF
    15a2:	8b 7f       	andi	r24, 0xFB	; 251
    15a4:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    15a8:	82 e0       	ldi	r24, 0x02	; 2
    15aa:	60 e0       	ldi	r22, 0x00	; 0
    15ac:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    15b0:	0e 94 28 02 	call	0x450	; 0x450 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    15b4:	fd de       	rcall	.-518    	; 0x13b0 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    15b6:	ff 91       	pop	r31
    15b8:	ef 91       	pop	r30
    15ba:	bf 91       	pop	r27
    15bc:	af 91       	pop	r26
    15be:	9f 91       	pop	r25
    15c0:	8f 91       	pop	r24
    15c2:	7f 91       	pop	r23
    15c4:	6f 91       	pop	r22
    15c6:	5f 91       	pop	r21
    15c8:	4f 91       	pop	r20
    15ca:	3f 91       	pop	r19
    15cc:	2f 91       	pop	r18
    15ce:	0f 90       	pop	r0
    15d0:	0b be       	out	0x3b, r0	; 59
    15d2:	0f 90       	pop	r0
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	0f 90       	pop	r0
    15d8:	1f 90       	pop	r1
    15da:	18 95       	reti

000015dc <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    15dc:	bf 92       	push	r11
    15de:	cf 92       	push	r12
    15e0:	df 92       	push	r13
    15e2:	ef 92       	push	r14
    15e4:	ff 92       	push	r15
    15e6:	0f 93       	push	r16
    15e8:	1f 93       	push	r17
    15ea:	cf 93       	push	r28
    15ec:	df 93       	push	r29
    15ee:	18 2f       	mov	r17, r24
    15f0:	09 2f       	mov	r16, r25
    15f2:	7b 01       	movw	r14, r22
    15f4:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    15f6:	80 91 aa 00 	lds	r24, 0x00AA
    15fa:	8f 7c       	andi	r24, 0xCF	; 207
    15fc:	80 61       	ori	r24, 0x10	; 16
    15fe:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1602:	a7 de       	rcall	.-690    	; 0x1352 <Pipe_WaitUntilReady>
    1604:	b8 2e       	mov	r11, r24
    1606:	88 23       	and	r24, r24
    1608:	a9 f5       	brne	.+106    	; 0x1674 <Pipe_Read_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    160a:	81 2f       	mov	r24, r17
    160c:	90 2f       	mov	r25, r16
    160e:	9c 01       	movw	r18, r24
    1610:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1612:	c1 14       	cp	r12, r1
    1614:	d1 04       	cpc	r13, r1
    1616:	39 f0       	breq	.+14     	; 0x1626 <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
    1618:	f6 01       	movw	r30, r12
    161a:	80 81       	ld	r24, Z
    161c:	91 81       	ldd	r25, Z+1	; 0x01
    161e:	e8 1a       	sub	r14, r24
    1620:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1622:	c8 0f       	add	r28, r24
    1624:	d9 1f       	adc	r29, r25
    1626:	00 e0       	ldi	r16, 0x00	; 0
    1628:	10 e0       	ldi	r17, 0x00	; 0
    162a:	21 c0       	rjmp	.+66     	; 0x166e <Pipe_Read_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    162c:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1630:	85 fd       	sbrc	r24, 5
    1632:	15 c0       	rjmp	.+42     	; 0x165e <Pipe_Read_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1634:	80 91 a6 00 	lds	r24, 0x00A6
    1638:	8e 77       	andi	r24, 0x7E	; 126
    163a:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    163e:	c1 14       	cp	r12, r1
    1640:	d1 04       	cpc	r13, r1
    1642:	49 f0       	breq	.+18     	; 0x1656 <Pipe_Read_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
    1644:	f6 01       	movw	r30, r12
    1646:	80 81       	ld	r24, Z
    1648:	91 81       	ldd	r25, Z+1	; 0x01
    164a:	80 0f       	add	r24, r16
    164c:	91 1f       	adc	r25, r17
    164e:	91 83       	std	Z+1, r25	; 0x01
    1650:	80 83       	st	Z, r24
    1652:	84 e0       	ldi	r24, 0x04	; 4
    1654:	10 c0       	rjmp	.+32     	; 0x1676 <Pipe_Read_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1656:	7d de       	rcall	.-774    	; 0x1352 <Pipe_WaitUntilReady>
    1658:	88 23       	and	r24, r24
    165a:	49 f0       	breq	.+18     	; 0x166e <Pipe_Read_Stream_LE+0x92>
    165c:	0c c0       	rjmp	.+24     	; 0x1676 <Pipe_Read_Stream_LE+0x9a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    165e:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1662:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1664:	08 94       	sec
    1666:	e1 08       	sbc	r14, r1
    1668:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    166a:	0f 5f       	subi	r16, 0xFF	; 255
    166c:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
    166e:	e1 14       	cp	r14, r1
    1670:	f1 04       	cpc	r15, r1
    1672:	e1 f6       	brne	.-72     	; 0x162c <Pipe_Read_Stream_LE+0x50>
    1674:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	1f 91       	pop	r17
    167c:	0f 91       	pop	r16
    167e:	ff 90       	pop	r15
    1680:	ef 90       	pop	r14
    1682:	df 90       	pop	r13
    1684:	cf 90       	pop	r12
    1686:	bf 90       	pop	r11
    1688:	08 95       	ret

0000168a <Pipe_Discard_Stream>:

#include "PipeStream_AVR8.h"

uint8_t Pipe_Discard_Stream(uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    168a:	df 92       	push	r13
    168c:	ef 92       	push	r14
    168e:	ff 92       	push	r15
    1690:	0f 93       	push	r16
    1692:	1f 93       	push	r17
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	8c 01       	movw	r16, r24
    169a:	7b 01       	movw	r14, r22
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    169c:	80 91 aa 00 	lds	r24, 0x00AA
    16a0:	8f 7c       	andi	r24, 0xCF	; 207
    16a2:	80 61       	ori	r24, 0x10	; 16
    16a4:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;
	
	Pipe_SetPipeToken(PIPE_TOKEN_IN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    16a8:	54 de       	rcall	.-856    	; 0x1352 <Pipe_WaitUntilReady>
    16aa:	d8 2e       	mov	r13, r24
    16ac:	88 23       	and	r24, r24
    16ae:	61 f5       	brne	.+88     	; 0x1708 <Pipe_Discard_Stream+0x7e>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    16b0:	e1 14       	cp	r14, r1
    16b2:	f1 04       	cpc	r15, r1
    16b4:	29 f0       	breq	.+10     	; 0x16c0 <Pipe_Discard_Stream+0x36>
	  Length -= *BytesProcessed;
    16b6:	f7 01       	movw	r30, r14
    16b8:	80 81       	ld	r24, Z
    16ba:	91 81       	ldd	r25, Z+1	; 0x01
    16bc:	08 1b       	sub	r16, r24
    16be:	19 0b       	sbc	r17, r25
    16c0:	c0 e0       	ldi	r28, 0x00	; 0
    16c2:	d0 e0       	ldi	r29, 0x00	; 0
    16c4:	1e c0       	rjmp	.+60     	; 0x1702 <Pipe_Discard_Stream+0x78>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    16c6:	80 91 a6 00 	lds	r24, 0x00A6

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    16ca:	85 fd       	sbrc	r24, 5
    16cc:	15 c0       	rjmp	.+42     	; 0x16f8 <Pipe_Discard_Stream+0x6e>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    16ce:	80 91 a6 00 	lds	r24, 0x00A6
    16d2:	8e 77       	andi	r24, 0x7E	; 126
    16d4:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearIN();
				
			if (BytesProcessed != NULL)
    16d8:	e1 14       	cp	r14, r1
    16da:	f1 04       	cpc	r15, r1
    16dc:	49 f0       	breq	.+18     	; 0x16f0 <Pipe_Discard_Stream+0x66>
			{
				*BytesProcessed += BytesInTransfer;
    16de:	f7 01       	movw	r30, r14
    16e0:	80 81       	ld	r24, Z
    16e2:	91 81       	ldd	r25, Z+1	; 0x01
    16e4:	8c 0f       	add	r24, r28
    16e6:	9d 1f       	adc	r25, r29
    16e8:	91 83       	std	Z+1, r25	; 0x01
    16ea:	80 83       	st	Z, r24
    16ec:	84 e0       	ldi	r24, 0x04	; 4
    16ee:	0d c0       	rjmp	.+26     	; 0x170a <Pipe_Discard_Stream+0x80>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    16f0:	30 de       	rcall	.-928    	; 0x1352 <Pipe_WaitUntilReady>
    16f2:	88 23       	and	r24, r24
    16f4:	31 f0       	breq	.+12     	; 0x1702 <Pipe_Discard_Stream+0x78>
    16f6:	09 c0       	rjmp	.+18     	; 0x170a <Pipe_Discard_Stream+0x80>
			static inline void Pipe_Discard_8(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Discard_8(void)
			{
				uint8_t Dummy;

				Dummy = UPDATX;
    16f8:	80 91 af 00 	lds	r24, 0x00AF
		}
		else
		{
			Pipe_Discard_8();
			
			Length--;
    16fc:	01 50       	subi	r16, 0x01	; 1
    16fe:	10 40       	sbci	r17, 0x00	; 0
			BytesInTransfer++;
    1700:	21 96       	adiw	r28, 0x01	; 1
	  return ErrorCode;

	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
    1702:	01 15       	cp	r16, r1
    1704:	11 05       	cpc	r17, r1
    1706:	f9 f6       	brne	.-66     	; 0x16c6 <Pipe_Discard_Stream+0x3c>
    1708:	8d 2d       	mov	r24, r13
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	1f 91       	pop	r17
    1710:	0f 91       	pop	r16
    1712:	ff 90       	pop	r15
    1714:	ef 90       	pop	r14
    1716:	df 90       	pop	r13
    1718:	08 95       	ret

0000171a <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    171a:	af 92       	push	r10
    171c:	bf 92       	push	r11
    171e:	cf 92       	push	r12
    1720:	df 92       	push	r13
    1722:	ef 92       	push	r14
    1724:	ff 92       	push	r15
    1726:	0f 93       	push	r16
    1728:	1f 93       	push	r17
    172a:	cf 93       	push	r28
    172c:	df 93       	push	r29
    172e:	7c 01       	movw	r14, r24
    1730:	eb 01       	movw	r28, r22
    1732:	6a 01       	movw	r12, r20
    1734:	24 c0       	rjmp	.+72     	; 0x177e <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1736:	e8 81       	ld	r30, Y
    1738:	f9 81       	ldd	r31, Y+1	; 0x01
    173a:	be 2e       	mov	r11, r30
    173c:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    173e:	80 81       	ld	r24, Z
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	98 01       	movw	r18, r16
    1744:	80 17       	cp	r24, r16
    1746:	91 07       	cpc	r25, r17
    1748:	08 f4       	brcc	.+2      	; 0x174c <USB_GetNextDescriptorComp+0x32>
    174a:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    174c:	e2 0f       	add	r30, r18
    174e:	f3 1f       	adc	r31, r19
    1750:	f9 83       	std	Y+1, r31	; 0x01
    1752:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
    1754:	f7 01       	movw	r30, r14
    1756:	80 81       	ld	r24, Z
    1758:	91 81       	ldd	r25, Z+1	; 0x01
    175a:	82 1b       	sub	r24, r18
    175c:	93 0b       	sbc	r25, r19
    175e:	91 83       	std	Z+1, r25	; 0x01
    1760:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1762:	88 81       	ld	r24, Y
    1764:	99 81       	ldd	r25, Y+1	; 0x01
    1766:	f6 01       	movw	r30, r12
    1768:	09 95       	icall
    176a:	82 30       	cpi	r24, 0x02	; 2
    176c:	41 f0       	breq	.+16     	; 0x177e <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    176e:	81 30       	cpi	r24, 0x01	; 1
    1770:	69 f4       	brne	.+26     	; 0x178c <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
    1772:	b8 82       	st	Y, r11
    1774:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
    1776:	f7 01       	movw	r30, r14
    1778:	11 83       	std	Z+1, r17	; 0x01
    177a:	00 83       	st	Z, r16
    177c:	07 c0       	rjmp	.+14     	; 0x178c <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    177e:	f7 01       	movw	r30, r14
    1780:	00 81       	ld	r16, Z
    1782:	11 81       	ldd	r17, Z+1	; 0x01
    1784:	01 15       	cp	r16, r1
    1786:	11 05       	cpc	r17, r1
    1788:	b1 f6       	brne	.-84     	; 0x1736 <USB_GetNextDescriptorComp+0x1c>
    178a:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
    178c:	df 91       	pop	r29
    178e:	cf 91       	pop	r28
    1790:	1f 91       	pop	r17
    1792:	0f 91       	pop	r16
    1794:	ff 90       	pop	r15
    1796:	ef 90       	pop	r14
    1798:	df 90       	pop	r13
    179a:	cf 90       	pop	r12
    179c:	bf 90       	pop	r11
    179e:	af 90       	pop	r10
    17a0:	08 95       	ret

000017a2 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    17a2:	cf 92       	push	r12
    17a4:	df 92       	push	r13
    17a6:	ef 92       	push	r14
    17a8:	ff 92       	push	r15
    17aa:	0f 93       	push	r16
    17ac:	1f 93       	push	r17
    17ae:	df 93       	push	r29
    17b0:	cf 93       	push	r28
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
    17b6:	29 97       	sbiw	r28, 0x09	; 9
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	f8 94       	cli
    17bc:	de bf       	out	0x3e, r29	; 62
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	cd bf       	out	0x3d, r28	; 61
    17c2:	6b 01       	movw	r12, r22
    17c4:	8a 01       	movw	r16, r20
    17c6:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    17c8:	90 e8       	ldi	r25, 0x80	; 128
    17ca:	90 93 27 01 	sts	0x0127, r25
    17ce:	96 e0       	ldi	r25, 0x06	; 6
    17d0:	90 93 28 01 	sts	0x0128, r25
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	01 97       	sbiw	r24, 0x01	; 1
    17d8:	92 60       	ori	r25, 0x02	; 2
    17da:	90 93 2a 01 	sts	0x012A, r25
    17de:	80 93 29 01 	sts	0x0129, r24
    17e2:	10 92 2c 01 	sts	0x012C, r1
    17e6:	10 92 2b 01 	sts	0x012B, r1
    17ea:	89 e0       	ldi	r24, 0x09	; 9
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	90 93 2e 01 	sts	0x012E, r25
    17f2:	80 93 2d 01 	sts	0x012D, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    17f6:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    17fa:	ce 01       	movw	r24, r28
    17fc:	01 96       	adiw	r24, 0x01	; 1
    17fe:	55 d0       	rcall	.+170    	; 0x18aa <USB_Host_SendControlRequest>
    1800:	28 2f       	mov	r18, r24
    1802:	88 23       	and	r24, r24
    1804:	c1 f4       	brne	.+48     	; 0x1836 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    1806:	8b 81       	ldd	r24, Y+3	; 0x03
    1808:	9c 81       	ldd	r25, Y+4	; 0x04
    180a:	f6 01       	movw	r30, r12
    180c:	91 83       	std	Z+1, r25	; 0x01
    180e:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    1810:	e8 16       	cp	r14, r24
    1812:	f9 06       	cpc	r15, r25
    1814:	10 f4       	brcc	.+4      	; 0x181a <USB_Host_GetDeviceConfigDescriptor+0x78>
    1816:	25 e0       	ldi	r18, 0x05	; 5
    1818:	0e c0       	rjmp	.+28     	; 0x1836 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    181a:	90 93 2e 01 	sts	0x012E, r25
    181e:	80 93 2d 01 	sts	0x012D, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1822:	c8 01       	movw	r24, r16
    1824:	42 d0       	rcall	.+132    	; 0x18aa <USB_Host_SendControlRequest>
    1826:	28 2f       	mov	r18, r24
    1828:	88 23       	and	r24, r24
    182a:	29 f4       	brne	.+10     	; 0x1836 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    182c:	f8 01       	movw	r30, r16
    182e:	81 81       	ldd	r24, Z+1	; 0x01
    1830:	82 30       	cpi	r24, 0x02	; 2
    1832:	09 f0       	breq	.+2      	; 0x1836 <USB_Host_GetDeviceConfigDescriptor+0x94>
    1834:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    1836:	82 2f       	mov	r24, r18
    1838:	29 96       	adiw	r28, 0x09	; 9
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	f8 94       	cli
    183e:	de bf       	out	0x3e, r29	; 62
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	cd bf       	out	0x3d, r28	; 61
    1844:	cf 91       	pop	r28
    1846:	df 91       	pop	r29
    1848:	1f 91       	pop	r17
    184a:	0f 91       	pop	r16
    184c:	ff 90       	pop	r15
    184e:	ef 90       	pop	r14
    1850:	df 90       	pop	r13
    1852:	cf 90       	pop	r12
    1854:	08 95       	ret

00001856 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1856:	08 95       	ret

00001858 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1858:	1f 93       	push	r17
    185a:	cf 93       	push	r28
    185c:	df 93       	push	r29
    185e:	18 2f       	mov	r17, r24
    1860:	c8 ee       	ldi	r28, 0xE8	; 232
    1862:	d3 e0       	ldi	r29, 0x03	; 3
    1864:	09 c0       	rjmp	.+18     	; 0x1878 <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	3a db       	rcall	.-2444   	; 0xede <USB_Host_WaitMS>
    186a:	88 23       	and	r24, r24
    186c:	d1 f4       	brne	.+52     	; 0x18a2 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    186e:	20 97       	sbiw	r28, 0x00	; 0
    1870:	11 f4       	brne	.+4      	; 0x1876 <USB_Host_WaitForIOS+0x1e>
    1872:	84 e0       	ldi	r24, 0x04	; 4
    1874:	16 c0       	rjmp	.+44     	; 0x18a2 <USB_Host_WaitForIOS+0x4a>
    1876:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1878:	11 23       	and	r17, r17
    187a:	29 f4       	brne	.+10     	; 0x1886 <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    187c:	80 91 a6 00 	lds	r24, 0x00A6
    1880:	83 ff       	sbrs	r24, 3
    1882:	f1 cf       	rjmp	.-30     	; 0x1866 <USB_Host_WaitForIOS+0xe>
    1884:	0d c0       	rjmp	.+26     	; 0x18a0 <USB_Host_WaitForIOS+0x48>
    1886:	11 30       	cpi	r17, 0x01	; 1
    1888:	29 f4       	brne	.+10     	; 0x1894 <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    188a:	80 91 a6 00 	lds	r24, 0x00A6
    188e:	80 ff       	sbrs	r24, 0
    1890:	ea cf       	rjmp	.-44     	; 0x1866 <USB_Host_WaitForIOS+0xe>
    1892:	06 c0       	rjmp	.+12     	; 0x18a0 <USB_Host_WaitForIOS+0x48>
    1894:	12 30       	cpi	r17, 0x02	; 2
    1896:	39 f7       	brne	.-50     	; 0x1866 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1898:	80 91 a6 00 	lds	r24, 0x00A6
    189c:	82 ff       	sbrs	r24, 2
    189e:	e3 cf       	rjmp	.-58     	; 0x1866 <USB_Host_WaitForIOS+0xe>
    18a0:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
    18a2:	df 91       	pop	r29
    18a4:	cf 91       	pop	r28
    18a6:	1f 91       	pop	r17
    18a8:	08 95       	ret

000018aa <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    18aa:	ff 92       	push	r15
    18ac:	0f 93       	push	r16
    18ae:	1f 93       	push	r17
    18b0:	cf 93       	push	r28
    18b2:	df 93       	push	r29
    18b4:	18 2f       	mov	r17, r24
    18b6:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    18b8:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    18bc:	c0 91 2d 01 	lds	r28, 0x012D
    18c0:	d0 91 2e 01 	lds	r29, 0x012E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    18c4:	80 91 9e 00 	lds	r24, 0x009E
    18c8:	81 60       	ori	r24, 0x01	; 1
    18ca:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	06 db       	rcall	.-2548   	; 0xede <USB_Host_WaitMS>
    18d2:	98 2f       	mov	r25, r24
    18d4:	88 23       	and	r24, r24
    18d6:	09 f0       	breq	.+2      	; 0x18da <USB_Host_SendControlRequest+0x30>
    18d8:	ee c0       	rjmp	.+476    	; 0x1ab6 <USB_Host_SendControlRequest+0x20c>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    18da:	80 91 aa 00 	lds	r24, 0x00AA
    18de:	8f 7c       	andi	r24, 0xCF	; 207
    18e0:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    18e4:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    18e8:	80 91 a6 00 	lds	r24, 0x00A6
    18ec:	8f 7e       	andi	r24, 0xEF	; 239
    18ee:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    18f2:	80 91 a9 00 	lds	r24, 0x00A9
    18f6:	8f 7b       	andi	r24, 0xBF	; 191
    18f8:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearError();

	Pipe_Unfreeze();

	Pipe_Write_8(USB_ControlRequest.bmRequestType);
    18fc:	80 91 27 01 	lds	r24, 0x0127
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1900:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
    1904:	80 91 28 01 	lds	r24, 0x0128
    1908:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
    190c:	80 91 29 01 	lds	r24, 0x0129
    1910:	90 91 2a 01 	lds	r25, 0x012A
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    1914:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    1918:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
    191c:	80 91 2b 01 	lds	r24, 0x012B
    1920:	90 91 2c 01 	lds	r25, 0x012C
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    1924:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    1928:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
    192c:	80 91 2d 01 	lds	r24, 0x012D
    1930:	90 91 2e 01 	lds	r25, 0x012E
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    1934:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    1938:	90 93 af 00 	sts	0x00AF, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    193c:	80 91 a6 00 	lds	r24, 0x00A6
    1940:	87 77       	andi	r24, 0x77	; 119
    1942:	80 93 a6 00 	sts	0x00A6, r24

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	87 df       	rcall	.-242    	; 0x1858 <USB_Host_WaitForIOS>
    194a:	98 2f       	mov	r25, r24
    194c:	88 23       	and	r24, r24
    194e:	09 f0       	breq	.+2      	; 0x1952 <USB_Host_SendControlRequest+0xa8>
    1950:	b2 c0       	rjmp	.+356    	; 0x1ab6 <USB_Host_SendControlRequest+0x20c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1952:	80 91 a9 00 	lds	r24, 0x00A9
    1956:	80 64       	ori	r24, 0x40	; 64
    1958:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	bf da       	rcall	.-2690   	; 0xede <USB_Host_WaitMS>
    1960:	98 2f       	mov	r25, r24
    1962:	88 23       	and	r24, r24
    1964:	09 f0       	breq	.+2      	; 0x1968 <USB_Host_SendControlRequest+0xbe>
    1966:	a7 c0       	rjmp	.+334    	; 0x1ab6 <USB_Host_SendControlRequest+0x20c>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
    1968:	21 2f       	mov	r18, r17
    196a:	30 2f       	mov	r19, r16
    196c:	c9 01       	movw	r24, r18
    196e:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1970:	80 91 27 01 	lds	r24, 0x0127
    1974:	87 ff       	sbrs	r24, 7
    1976:	52 c0       	rjmp	.+164    	; 0x1a1c <USB_Host_SendControlRequest+0x172>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1978:	80 91 aa 00 	lds	r24, 0x00AA
    197c:	8f 7c       	andi	r24, 0xCF	; 207
    197e:	80 61       	ori	r24, 0x10	; 16
    1980:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1984:	01 15       	cp	r16, r1
    1986:	11 05       	cpc	r17, r1
    1988:	69 f5       	brne	.+90     	; 0x19e4 <USB_Host_SendControlRequest+0x13a>
    198a:	2e c0       	rjmp	.+92     	; 0x19e8 <USB_Host_SendControlRequest+0x13e>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    198c:	80 91 a9 00 	lds	r24, 0x00A9
    1990:	8f 7b       	andi	r24, 0xBF	; 191
    1992:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	5f df       	rcall	.-322    	; 0x1858 <USB_Host_WaitForIOS>
    199a:	98 2f       	mov	r25, r24
    199c:	88 23       	and	r24, r24
    199e:	09 f0       	breq	.+2      	; 0x19a2 <USB_Host_SendControlRequest+0xf8>
    19a0:	8a c0       	rjmp	.+276    	; 0x1ab6 <USB_Host_SendControlRequest+0x20c>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    19a2:	80 91 f6 00 	lds	r24, 0x00F6
    19a6:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    19aa:	89 2b       	or	r24, r25
    19ac:	49 f4       	brne	.+18     	; 0x19c0 <USB_Host_SendControlRequest+0x116>
    19ae:	c0 e0       	ldi	r28, 0x00	; 0
    19b0:	d0 e0       	ldi	r29, 0x00	; 0
    19b2:	06 c0       	rjmp	.+12     	; 0x19c0 <USB_Host_SendControlRequest+0x116>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    19b4:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    19b8:	f8 01       	movw	r30, r16
    19ba:	81 93       	st	Z+, r24
    19bc:	8f 01       	movw	r16, r30
					DataLen--;
    19be:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    19c0:	80 91 f6 00 	lds	r24, 0x00F6
    19c4:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    19c8:	89 2b       	or	r24, r25
    19ca:	11 f0       	breq	.+4      	; 0x19d0 <USB_Host_SendControlRequest+0x126>
    19cc:	20 97       	sbiw	r28, 0x00	; 0
    19ce:	91 f7       	brne	.-28     	; 0x19b4 <USB_Host_SendControlRequest+0x10a>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    19d0:	80 91 a9 00 	lds	r24, 0x00A9
    19d4:	80 64       	ori	r24, 0x40	; 64
    19d6:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    19da:	80 91 a6 00 	lds	r24, 0x00A6
    19de:	8e 77       	andi	r24, 0x7E	; 126
    19e0:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    19e4:	20 97       	sbiw	r28, 0x00	; 0
    19e6:	91 f6       	brne	.-92     	; 0x198c <USB_Host_SendControlRequest+0xe2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    19e8:	80 91 aa 00 	lds	r24, 0x00AA
    19ec:	8f 7c       	andi	r24, 0xCF	; 207
    19ee:	80 62       	ori	r24, 0x20	; 32
    19f0:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    19f4:	80 91 a9 00 	lds	r24, 0x00A9
    19f8:	8f 7b       	andi	r24, 0xBF	; 191
    19fa:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    19fe:	82 e0       	ldi	r24, 0x02	; 2
    1a00:	2b df       	rcall	.-426    	; 0x1858 <USB_Host_WaitForIOS>
    1a02:	98 2f       	mov	r25, r24
    1a04:	88 23       	and	r24, r24
    1a06:	09 f0       	breq	.+2      	; 0x1a0a <USB_Host_SendControlRequest+0x160>
    1a08:	56 c0       	rjmp	.+172    	; 0x1ab6 <USB_Host_SendControlRequest+0x20c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1a0a:	80 91 a6 00 	lds	r24, 0x00A6
    1a0e:	8b 77       	andi	r24, 0x7B	; 123
    1a10:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1a14:	82 e0       	ldi	r24, 0x02	; 2
    1a16:	20 df       	rcall	.-448    	; 0x1858 <USB_Host_WaitForIOS>
    1a18:	98 2f       	mov	r25, r24
    1a1a:	4d c0       	rjmp	.+154    	; 0x1ab6 <USB_Host_SendControlRequest+0x20c>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    1a1c:	01 15       	cp	r16, r1
    1a1e:	11 05       	cpc	r17, r1
    1a20:	a9 f1       	breq	.+106    	; 0x1a8c <USB_Host_SendControlRequest+0x1e2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1a22:	80 91 aa 00 	lds	r24, 0x00AA
    1a26:	8f 7c       	andi	r24, 0xCF	; 207
    1a28:	80 62       	ori	r24, 0x20	; 32
    1a2a:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1a2e:	80 91 a9 00 	lds	r24, 0x00A9
    1a32:	8f 7b       	andi	r24, 0xBF	; 191
    1a34:	80 93 a9 00 	sts	0x00A9, r24
    1a38:	1d c0       	rjmp	.+58     	; 0x1a74 <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1a3a:	82 e0       	ldi	r24, 0x02	; 2
    1a3c:	0d df       	rcall	.-486    	; 0x1858 <USB_Host_WaitForIOS>
    1a3e:	98 2f       	mov	r25, r24
    1a40:	88 23       	and	r24, r24
    1a42:	c9 f5       	brne	.+114    	; 0x1ab6 <USB_Host_SendControlRequest+0x20c>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1a44:	80 91 1c 01 	lds	r24, 0x011C
    1a48:	28 2f       	mov	r18, r24
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	07 c0       	rjmp	.+14     	; 0x1a5c <USB_Host_SendControlRequest+0x1b2>
				{
					Pipe_Write_8(*(DataStream++));
    1a4e:	f8 01       	movw	r30, r16
    1a50:	81 91       	ld	r24, Z+
    1a52:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1a54:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1a58:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1a5a:	39 f0       	breq	.+14     	; 0x1a6a <USB_Host_SendControlRequest+0x1c0>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1a5c:	80 91 f6 00 	lds	r24, 0x00F6
    1a60:	90 91 f7 00 	lds	r25, 0x00F7
    1a64:	82 17       	cp	r24, r18
    1a66:	93 07       	cpc	r25, r19
    1a68:	90 f3       	brcs	.-28     	; 0x1a4e <USB_Host_SendControlRequest+0x1a4>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1a6a:	80 91 a6 00 	lds	r24, 0x00A6
    1a6e:	8b 77       	andi	r24, 0x7B	; 123
    1a70:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1a74:	20 97       	sbiw	r28, 0x00	; 0
    1a76:	09 f7       	brne	.-62     	; 0x1a3a <USB_Host_SendControlRequest+0x190>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1a78:	82 e0       	ldi	r24, 0x02	; 2
    1a7a:	ee de       	rcall	.-548    	; 0x1858 <USB_Host_WaitForIOS>
    1a7c:	98 2f       	mov	r25, r24
    1a7e:	88 23       	and	r24, r24
    1a80:	d1 f4       	brne	.+52     	; 0x1ab6 <USB_Host_SendControlRequest+0x20c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1a82:	80 91 a9 00 	lds	r24, 0x00A9
    1a86:	80 64       	ori	r24, 0x40	; 64
    1a88:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1a8c:	80 91 aa 00 	lds	r24, 0x00AA
    1a90:	8f 7c       	andi	r24, 0xCF	; 207
    1a92:	80 61       	ori	r24, 0x10	; 16
    1a94:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1a98:	80 91 a9 00 	lds	r24, 0x00A9
    1a9c:	8f 7b       	andi	r24, 0xBF	; 191
    1a9e:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	d9 de       	rcall	.-590    	; 0x1858 <USB_Host_WaitForIOS>
    1aa6:	98 2f       	mov	r25, r24
    1aa8:	88 23       	and	r24, r24
    1aaa:	29 f4       	brne	.+10     	; 0x1ab6 <USB_Host_SendControlRequest+0x20c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1aac:	80 91 a6 00 	lds	r24, 0x00A6
    1ab0:	8e 77       	andi	r24, 0x7E	; 126
    1ab2:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1ab6:	80 91 a9 00 	lds	r24, 0x00A9
    1aba:	80 64       	ori	r24, 0x40	; 64
    1abc:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    1ac0:	f0 fc       	sbrc	r15, 0
    1ac2:	05 c0       	rjmp	.+10     	; 0x1ace <USB_Host_SendControlRequest+0x224>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1ac4:	80 91 9e 00 	lds	r24, 0x009E
    1ac8:	8e 7f       	andi	r24, 0xFE	; 254
    1aca:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    1ad4:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1ad8:	89 2f       	mov	r24, r25
    1ada:	df 91       	pop	r29
    1adc:	cf 91       	pop	r28
    1ade:	1f 91       	pop	r17
    1ae0:	0f 91       	pop	r16
    1ae2:	ff 90       	pop	r15
    1ae4:	08 95       	ret

00001ae6 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1ae6:	1f 93       	push	r17
    1ae8:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1aea:	10 92 27 01 	sts	0x0127, r1
    1aee:	89 e0       	ldi	r24, 0x09	; 9
    1af0:	80 93 28 01 	sts	0x0128, r24
    1af4:	10 93 29 01 	sts	0x0129, r17
    1af8:	10 92 2a 01 	sts	0x012A, r1
    1afc:	10 92 2c 01 	sts	0x012C, r1
    1b00:	10 92 2b 01 	sts	0x012B, r1
    1b04:	10 92 2e 01 	sts	0x012E, r1
    1b08:	10 92 2d 01 	sts	0x012D, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1b0c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	ca de       	rcall	.-620    	; 0x18aa <USB_Host_SendControlRequest>
    1b16:	88 23       	and	r24, r24
    1b18:	49 f4       	brne	.+18     	; 0x1b2c <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1b1a:	10 93 25 01 	sts	0x0125, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1b1e:	11 23       	and	r17, r17
    1b20:	11 f4       	brne	.+4      	; 0x1b26 <USB_Host_SetDeviceConfiguration+0x40>
    1b22:	9a e0       	ldi	r25, 0x0A	; 10
    1b24:	01 c0       	rjmp	.+2      	; 0x1b28 <USB_Host_SetDeviceConfiguration+0x42>
    1b26:	9b e0       	ldi	r25, 0x0B	; 11
    1b28:	90 93 2f 01 	sts	0x012F, r25
	}

	return ErrorCode;
}
    1b2c:	1f 91       	pop	r17
    1b2e:	08 95       	ret

00001b30 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1b30:	ff 92       	push	r15
    1b32:	0f 93       	push	r16
    1b34:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1b36:	07 ea       	ldi	r16, 0xA7	; 167
    1b38:	10 e0       	ldi	r17, 0x00	; 0
    1b3a:	f8 01       	movw	r30, r16
    1b3c:	f0 80       	ld	r15, Z
    1b3e:	f7 e0       	ldi	r31, 0x07	; 7
    1b40:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1b42:	f8 01       	movw	r30, r16
    1b44:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1b46:	68 da       	rcall	.-2864   	; 0x1018 <USB_Host_ProcessNextHostState>
    1b48:	f8 01       	movw	r30, r16
    1b4a:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1b4c:	1f 91       	pop	r17
    1b4e:	0f 91       	pop	r16
    1b50:	ff 90       	pop	r15
    1b52:	08 95       	ret

00001b54 <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    1b54:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1b56:	80 91 c8 00 	lds	r24, 0x00C8
    1b5a:	85 ff       	sbrs	r24, 5
    1b5c:	fc cf       	rjmp	.-8      	; 0x1b56 <Serial_putchar+0x2>
				UDR1 = DataByte;
    1b5e:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	08 95       	ret

00001b68 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1b68:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1b6c:	87 fd       	sbrc	r24, 7
    1b6e:	03 c0       	rjmp	.+6      	; 0x1b76 <Serial_getchar+0xe>
    1b70:	2e ef       	ldi	r18, 0xFE	; 254
    1b72:	3f ef       	ldi	r19, 0xFF	; 255
    1b74:	0b c0       	rjmp	.+22     	; 0x1b8c <Serial_getchar+0x24>
    1b76:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1b7a:	87 fd       	sbrc	r24, 7
    1b7c:	03 c0       	rjmp	.+6      	; 0x1b84 <Serial_getchar+0x1c>
    1b7e:	2f ef       	ldi	r18, 0xFF	; 255
    1b80:	3f ef       	ldi	r19, 0xFF	; 255
    1b82:	04 c0       	rjmp	.+8      	; 0x1b8c <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    1b84:	80 91 ce 00 	lds	r24, 0x00CE
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    1b8c:	c9 01       	movw	r24, r18
    1b8e:	08 95       	ret

00001b90 <memcpy>:
    1b90:	fb 01       	movw	r30, r22
    1b92:	dc 01       	movw	r26, r24
    1b94:	02 c0       	rjmp	.+4      	; 0x1b9a <memcpy+0xa>
    1b96:	01 90       	ld	r0, Z+
    1b98:	0d 92       	st	X+, r0
    1b9a:	41 50       	subi	r20, 0x01	; 1
    1b9c:	50 40       	sbci	r21, 0x00	; 0
    1b9e:	d8 f7       	brcc	.-10     	; 0x1b96 <memcpy+0x6>
    1ba0:	08 95       	ret

00001ba2 <printf>:
    1ba2:	df 93       	push	r29
    1ba4:	cf 93       	push	r28
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
    1baa:	fe 01       	movw	r30, r28
    1bac:	35 96       	adiw	r30, 0x05	; 5
    1bae:	61 91       	ld	r22, Z+
    1bb0:	71 91       	ld	r23, Z+
    1bb2:	80 91 40 01 	lds	r24, 0x0140
    1bb6:	90 91 41 01 	lds	r25, 0x0141
    1bba:	af 01       	movw	r20, r30
    1bbc:	8f d0       	rcall	.+286    	; 0x1cdc <vfprintf>
    1bbe:	cf 91       	pop	r28
    1bc0:	df 91       	pop	r29
    1bc2:	08 95       	ret

00001bc4 <printf_P>:
    1bc4:	df 93       	push	r29
    1bc6:	cf 93       	push	r28
    1bc8:	cd b7       	in	r28, 0x3d	; 61
    1bca:	de b7       	in	r29, 0x3e	; 62
    1bcc:	fe 01       	movw	r30, r28
    1bce:	35 96       	adiw	r30, 0x05	; 5
    1bd0:	61 91       	ld	r22, Z+
    1bd2:	71 91       	ld	r23, Z+
    1bd4:	a0 91 40 01 	lds	r26, 0x0140
    1bd8:	b0 91 41 01 	lds	r27, 0x0141
    1bdc:	13 96       	adiw	r26, 0x03	; 3
    1bde:	8c 91       	ld	r24, X
    1be0:	13 97       	sbiw	r26, 0x03	; 3
    1be2:	88 60       	ori	r24, 0x08	; 8
    1be4:	13 96       	adiw	r26, 0x03	; 3
    1be6:	8c 93       	st	X, r24
    1be8:	80 91 40 01 	lds	r24, 0x0140
    1bec:	90 91 41 01 	lds	r25, 0x0141
    1bf0:	af 01       	movw	r20, r30
    1bf2:	74 d0       	rcall	.+232    	; 0x1cdc <vfprintf>
    1bf4:	e0 91 40 01 	lds	r30, 0x0140
    1bf8:	f0 91 41 01 	lds	r31, 0x0141
    1bfc:	23 81       	ldd	r18, Z+3	; 0x03
    1bfe:	27 7f       	andi	r18, 0xF7	; 247
    1c00:	23 83       	std	Z+3, r18	; 0x03
    1c02:	cf 91       	pop	r28
    1c04:	df 91       	pop	r29
    1c06:	08 95       	ret

00001c08 <puts>:
    1c08:	0f 93       	push	r16
    1c0a:	1f 93       	push	r17
    1c0c:	cf 93       	push	r28
    1c0e:	df 93       	push	r29
    1c10:	8c 01       	movw	r16, r24
    1c12:	e0 91 40 01 	lds	r30, 0x0140
    1c16:	f0 91 41 01 	lds	r31, 0x0141
    1c1a:	83 81       	ldd	r24, Z+3	; 0x03
    1c1c:	81 ff       	sbrs	r24, 1
    1c1e:	21 c0       	rjmp	.+66     	; 0x1c62 <puts+0x5a>
    1c20:	c0 e0       	ldi	r28, 0x00	; 0
    1c22:	d0 e0       	ldi	r29, 0x00	; 0
    1c24:	0d c0       	rjmp	.+26     	; 0x1c40 <puts+0x38>
    1c26:	e0 91 40 01 	lds	r30, 0x0140
    1c2a:	f0 91 41 01 	lds	r31, 0x0141
    1c2e:	20 85       	ldd	r18, Z+8	; 0x08
    1c30:	31 85       	ldd	r19, Z+9	; 0x09
    1c32:	bf 01       	movw	r22, r30
    1c34:	f9 01       	movw	r30, r18
    1c36:	09 95       	icall
    1c38:	89 2b       	or	r24, r25
    1c3a:	11 f0       	breq	.+4      	; 0x1c40 <puts+0x38>
    1c3c:	cf ef       	ldi	r28, 0xFF	; 255
    1c3e:	df ef       	ldi	r29, 0xFF	; 255
    1c40:	f8 01       	movw	r30, r16
    1c42:	81 91       	ld	r24, Z+
    1c44:	8f 01       	movw	r16, r30
    1c46:	88 23       	and	r24, r24
    1c48:	71 f7       	brne	.-36     	; 0x1c26 <puts+0x1e>
    1c4a:	e0 91 40 01 	lds	r30, 0x0140
    1c4e:	f0 91 41 01 	lds	r31, 0x0141
    1c52:	20 85       	ldd	r18, Z+8	; 0x08
    1c54:	31 85       	ldd	r19, Z+9	; 0x09
    1c56:	8a e0       	ldi	r24, 0x0A	; 10
    1c58:	bf 01       	movw	r22, r30
    1c5a:	f9 01       	movw	r30, r18
    1c5c:	09 95       	icall
    1c5e:	89 2b       	or	r24, r25
    1c60:	11 f0       	breq	.+4      	; 0x1c66 <puts+0x5e>
    1c62:	cf ef       	ldi	r28, 0xFF	; 255
    1c64:	df ef       	ldi	r29, 0xFF	; 255
    1c66:	ce 01       	movw	r24, r28
    1c68:	df 91       	pop	r29
    1c6a:	cf 91       	pop	r28
    1c6c:	1f 91       	pop	r17
    1c6e:	0f 91       	pop	r16
    1c70:	08 95       	ret

00001c72 <puts_P>:
    1c72:	0f 93       	push	r16
    1c74:	1f 93       	push	r17
    1c76:	cf 93       	push	r28
    1c78:	df 93       	push	r29
    1c7a:	ec 01       	movw	r28, r24
    1c7c:	e0 91 40 01 	lds	r30, 0x0140
    1c80:	f0 91 41 01 	lds	r31, 0x0141
    1c84:	83 81       	ldd	r24, Z+3	; 0x03
    1c86:	81 ff       	sbrs	r24, 1
    1c88:	21 c0       	rjmp	.+66     	; 0x1ccc <puts_P+0x5a>
    1c8a:	00 e0       	ldi	r16, 0x00	; 0
    1c8c:	10 e0       	ldi	r17, 0x00	; 0
    1c8e:	0e c0       	rjmp	.+28     	; 0x1cac <puts_P+0x3a>
    1c90:	e0 91 40 01 	lds	r30, 0x0140
    1c94:	f0 91 41 01 	lds	r31, 0x0141
    1c98:	20 85       	ldd	r18, Z+8	; 0x08
    1c9a:	31 85       	ldd	r19, Z+9	; 0x09
    1c9c:	bf 01       	movw	r22, r30
    1c9e:	f9 01       	movw	r30, r18
    1ca0:	09 95       	icall
    1ca2:	89 2b       	or	r24, r25
    1ca4:	11 f0       	breq	.+4      	; 0x1caa <puts_P+0x38>
    1ca6:	0f ef       	ldi	r16, 0xFF	; 255
    1ca8:	1f ef       	ldi	r17, 0xFF	; 255
    1caa:	21 96       	adiw	r28, 0x01	; 1
    1cac:	fe 01       	movw	r30, r28
    1cae:	84 91       	lpm	r24, Z+
    1cb0:	88 23       	and	r24, r24
    1cb2:	71 f7       	brne	.-36     	; 0x1c90 <puts_P+0x1e>
    1cb4:	e0 91 40 01 	lds	r30, 0x0140
    1cb8:	f0 91 41 01 	lds	r31, 0x0141
    1cbc:	20 85       	ldd	r18, Z+8	; 0x08
    1cbe:	31 85       	ldd	r19, Z+9	; 0x09
    1cc0:	8a e0       	ldi	r24, 0x0A	; 10
    1cc2:	bf 01       	movw	r22, r30
    1cc4:	f9 01       	movw	r30, r18
    1cc6:	09 95       	icall
    1cc8:	89 2b       	or	r24, r25
    1cca:	11 f0       	breq	.+4      	; 0x1cd0 <puts_P+0x5e>
    1ccc:	0f ef       	ldi	r16, 0xFF	; 255
    1cce:	1f ef       	ldi	r17, 0xFF	; 255
    1cd0:	c8 01       	movw	r24, r16
    1cd2:	df 91       	pop	r29
    1cd4:	cf 91       	pop	r28
    1cd6:	1f 91       	pop	r17
    1cd8:	0f 91       	pop	r16
    1cda:	08 95       	ret

00001cdc <vfprintf>:
    1cdc:	2f 92       	push	r2
    1cde:	3f 92       	push	r3
    1ce0:	4f 92       	push	r4
    1ce2:	5f 92       	push	r5
    1ce4:	6f 92       	push	r6
    1ce6:	7f 92       	push	r7
    1ce8:	8f 92       	push	r8
    1cea:	9f 92       	push	r9
    1cec:	af 92       	push	r10
    1cee:	bf 92       	push	r11
    1cf0:	cf 92       	push	r12
    1cf2:	df 92       	push	r13
    1cf4:	ef 92       	push	r14
    1cf6:	ff 92       	push	r15
    1cf8:	0f 93       	push	r16
    1cfa:	1f 93       	push	r17
    1cfc:	df 93       	push	r29
    1cfe:	cf 93       	push	r28
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
    1d04:	2b 97       	sbiw	r28, 0x0b	; 11
    1d06:	0f b6       	in	r0, 0x3f	; 63
    1d08:	f8 94       	cli
    1d0a:	de bf       	out	0x3e, r29	; 62
    1d0c:	0f be       	out	0x3f, r0	; 63
    1d0e:	cd bf       	out	0x3d, r28	; 61
    1d10:	3c 01       	movw	r6, r24
    1d12:	2b 01       	movw	r4, r22
    1d14:	5a 01       	movw	r10, r20
    1d16:	fc 01       	movw	r30, r24
    1d18:	17 82       	std	Z+7, r1	; 0x07
    1d1a:	16 82       	std	Z+6, r1	; 0x06
    1d1c:	83 81       	ldd	r24, Z+3	; 0x03
    1d1e:	81 fd       	sbrc	r24, 1
    1d20:	03 c0       	rjmp	.+6      	; 0x1d28 <vfprintf+0x4c>
    1d22:	6f ef       	ldi	r22, 0xFF	; 255
    1d24:	7f ef       	ldi	r23, 0xFF	; 255
    1d26:	b9 c1       	rjmp	.+882    	; 0x209a <vfprintf+0x3be>
    1d28:	9a e0       	ldi	r25, 0x0A	; 10
    1d2a:	89 2e       	mov	r8, r25
    1d2c:	1e 01       	movw	r2, r28
    1d2e:	08 94       	sec
    1d30:	21 1c       	adc	r2, r1
    1d32:	31 1c       	adc	r3, r1
    1d34:	f3 01       	movw	r30, r6
    1d36:	23 81       	ldd	r18, Z+3	; 0x03
    1d38:	f2 01       	movw	r30, r4
    1d3a:	23 fd       	sbrc	r18, 3
    1d3c:	85 91       	lpm	r24, Z+
    1d3e:	23 ff       	sbrs	r18, 3
    1d40:	81 91       	ld	r24, Z+
    1d42:	2f 01       	movw	r4, r30
    1d44:	88 23       	and	r24, r24
    1d46:	09 f4       	brne	.+2      	; 0x1d4a <vfprintf+0x6e>
    1d48:	a5 c1       	rjmp	.+842    	; 0x2094 <vfprintf+0x3b8>
    1d4a:	85 32       	cpi	r24, 0x25	; 37
    1d4c:	39 f4       	brne	.+14     	; 0x1d5c <vfprintf+0x80>
    1d4e:	23 fd       	sbrc	r18, 3
    1d50:	85 91       	lpm	r24, Z+
    1d52:	23 ff       	sbrs	r18, 3
    1d54:	81 91       	ld	r24, Z+
    1d56:	2f 01       	movw	r4, r30
    1d58:	85 32       	cpi	r24, 0x25	; 37
    1d5a:	21 f4       	brne	.+8      	; 0x1d64 <vfprintf+0x88>
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	b3 01       	movw	r22, r6
    1d60:	cc d1       	rcall	.+920    	; 0x20fa <fputc>
    1d62:	e8 cf       	rjmp	.-48     	; 0x1d34 <vfprintf+0x58>
    1d64:	98 2f       	mov	r25, r24
    1d66:	ff 24       	eor	r15, r15
    1d68:	ee 24       	eor	r14, r14
    1d6a:	99 24       	eor	r9, r9
    1d6c:	ff e1       	ldi	r31, 0x1F	; 31
    1d6e:	ff 15       	cp	r31, r15
    1d70:	d0 f0       	brcs	.+52     	; 0x1da6 <vfprintf+0xca>
    1d72:	9b 32       	cpi	r25, 0x2B	; 43
    1d74:	69 f0       	breq	.+26     	; 0x1d90 <vfprintf+0xb4>
    1d76:	9c 32       	cpi	r25, 0x2C	; 44
    1d78:	28 f4       	brcc	.+10     	; 0x1d84 <vfprintf+0xa8>
    1d7a:	90 32       	cpi	r25, 0x20	; 32
    1d7c:	59 f0       	breq	.+22     	; 0x1d94 <vfprintf+0xb8>
    1d7e:	93 32       	cpi	r25, 0x23	; 35
    1d80:	91 f4       	brne	.+36     	; 0x1da6 <vfprintf+0xca>
    1d82:	0e c0       	rjmp	.+28     	; 0x1da0 <vfprintf+0xc4>
    1d84:	9d 32       	cpi	r25, 0x2D	; 45
    1d86:	49 f0       	breq	.+18     	; 0x1d9a <vfprintf+0xbe>
    1d88:	90 33       	cpi	r25, 0x30	; 48
    1d8a:	69 f4       	brne	.+26     	; 0x1da6 <vfprintf+0xca>
    1d8c:	41 e0       	ldi	r20, 0x01	; 1
    1d8e:	24 c0       	rjmp	.+72     	; 0x1dd8 <vfprintf+0xfc>
    1d90:	52 e0       	ldi	r21, 0x02	; 2
    1d92:	f5 2a       	or	r15, r21
    1d94:	84 e0       	ldi	r24, 0x04	; 4
    1d96:	f8 2a       	or	r15, r24
    1d98:	28 c0       	rjmp	.+80     	; 0x1dea <vfprintf+0x10e>
    1d9a:	98 e0       	ldi	r25, 0x08	; 8
    1d9c:	f9 2a       	or	r15, r25
    1d9e:	25 c0       	rjmp	.+74     	; 0x1dea <vfprintf+0x10e>
    1da0:	e0 e1       	ldi	r30, 0x10	; 16
    1da2:	fe 2a       	or	r15, r30
    1da4:	22 c0       	rjmp	.+68     	; 0x1dea <vfprintf+0x10e>
    1da6:	f7 fc       	sbrc	r15, 7
    1da8:	29 c0       	rjmp	.+82     	; 0x1dfc <vfprintf+0x120>
    1daa:	89 2f       	mov	r24, r25
    1dac:	80 53       	subi	r24, 0x30	; 48
    1dae:	8a 30       	cpi	r24, 0x0A	; 10
    1db0:	70 f4       	brcc	.+28     	; 0x1dce <vfprintf+0xf2>
    1db2:	f6 fe       	sbrs	r15, 6
    1db4:	05 c0       	rjmp	.+10     	; 0x1dc0 <vfprintf+0xe4>
    1db6:	98 9c       	mul	r9, r8
    1db8:	90 2c       	mov	r9, r0
    1dba:	11 24       	eor	r1, r1
    1dbc:	98 0e       	add	r9, r24
    1dbe:	15 c0       	rjmp	.+42     	; 0x1dea <vfprintf+0x10e>
    1dc0:	e8 9c       	mul	r14, r8
    1dc2:	e0 2c       	mov	r14, r0
    1dc4:	11 24       	eor	r1, r1
    1dc6:	e8 0e       	add	r14, r24
    1dc8:	f0 e2       	ldi	r31, 0x20	; 32
    1dca:	ff 2a       	or	r15, r31
    1dcc:	0e c0       	rjmp	.+28     	; 0x1dea <vfprintf+0x10e>
    1dce:	9e 32       	cpi	r25, 0x2E	; 46
    1dd0:	29 f4       	brne	.+10     	; 0x1ddc <vfprintf+0x100>
    1dd2:	f6 fc       	sbrc	r15, 6
    1dd4:	5f c1       	rjmp	.+702    	; 0x2094 <vfprintf+0x3b8>
    1dd6:	40 e4       	ldi	r20, 0x40	; 64
    1dd8:	f4 2a       	or	r15, r20
    1dda:	07 c0       	rjmp	.+14     	; 0x1dea <vfprintf+0x10e>
    1ddc:	9c 36       	cpi	r25, 0x6C	; 108
    1dde:	19 f4       	brne	.+6      	; 0x1de6 <vfprintf+0x10a>
    1de0:	50 e8       	ldi	r21, 0x80	; 128
    1de2:	f5 2a       	or	r15, r21
    1de4:	02 c0       	rjmp	.+4      	; 0x1dea <vfprintf+0x10e>
    1de6:	98 36       	cpi	r25, 0x68	; 104
    1de8:	49 f4       	brne	.+18     	; 0x1dfc <vfprintf+0x120>
    1dea:	f2 01       	movw	r30, r4
    1dec:	23 fd       	sbrc	r18, 3
    1dee:	95 91       	lpm	r25, Z+
    1df0:	23 ff       	sbrs	r18, 3
    1df2:	91 91       	ld	r25, Z+
    1df4:	2f 01       	movw	r4, r30
    1df6:	99 23       	and	r25, r25
    1df8:	09 f0       	breq	.+2      	; 0x1dfc <vfprintf+0x120>
    1dfa:	b8 cf       	rjmp	.-144    	; 0x1d6c <vfprintf+0x90>
    1dfc:	89 2f       	mov	r24, r25
    1dfe:	85 54       	subi	r24, 0x45	; 69
    1e00:	83 30       	cpi	r24, 0x03	; 3
    1e02:	18 f0       	brcs	.+6      	; 0x1e0a <vfprintf+0x12e>
    1e04:	80 52       	subi	r24, 0x20	; 32
    1e06:	83 30       	cpi	r24, 0x03	; 3
    1e08:	38 f4       	brcc	.+14     	; 0x1e18 <vfprintf+0x13c>
    1e0a:	44 e0       	ldi	r20, 0x04	; 4
    1e0c:	50 e0       	ldi	r21, 0x00	; 0
    1e0e:	a4 0e       	add	r10, r20
    1e10:	b5 1e       	adc	r11, r21
    1e12:	5f e3       	ldi	r21, 0x3F	; 63
    1e14:	59 83       	std	Y+1, r21	; 0x01
    1e16:	0f c0       	rjmp	.+30     	; 0x1e36 <vfprintf+0x15a>
    1e18:	93 36       	cpi	r25, 0x63	; 99
    1e1a:	31 f0       	breq	.+12     	; 0x1e28 <vfprintf+0x14c>
    1e1c:	93 37       	cpi	r25, 0x73	; 115
    1e1e:	79 f0       	breq	.+30     	; 0x1e3e <vfprintf+0x162>
    1e20:	93 35       	cpi	r25, 0x53	; 83
    1e22:	09 f0       	breq	.+2      	; 0x1e26 <vfprintf+0x14a>
    1e24:	52 c0       	rjmp	.+164    	; 0x1eca <vfprintf+0x1ee>
    1e26:	1f c0       	rjmp	.+62     	; 0x1e66 <vfprintf+0x18a>
    1e28:	f5 01       	movw	r30, r10
    1e2a:	80 81       	ld	r24, Z
    1e2c:	89 83       	std	Y+1, r24	; 0x01
    1e2e:	42 e0       	ldi	r20, 0x02	; 2
    1e30:	50 e0       	ldi	r21, 0x00	; 0
    1e32:	a4 0e       	add	r10, r20
    1e34:	b5 1e       	adc	r11, r21
    1e36:	61 01       	movw	r12, r2
    1e38:	01 e0       	ldi	r16, 0x01	; 1
    1e3a:	10 e0       	ldi	r17, 0x00	; 0
    1e3c:	11 c0       	rjmp	.+34     	; 0x1e60 <vfprintf+0x184>
    1e3e:	f5 01       	movw	r30, r10
    1e40:	c0 80       	ld	r12, Z
    1e42:	d1 80       	ldd	r13, Z+1	; 0x01
    1e44:	f6 fc       	sbrc	r15, 6
    1e46:	03 c0       	rjmp	.+6      	; 0x1e4e <vfprintf+0x172>
    1e48:	6f ef       	ldi	r22, 0xFF	; 255
    1e4a:	7f ef       	ldi	r23, 0xFF	; 255
    1e4c:	02 c0       	rjmp	.+4      	; 0x1e52 <vfprintf+0x176>
    1e4e:	69 2d       	mov	r22, r9
    1e50:	70 e0       	ldi	r23, 0x00	; 0
    1e52:	42 e0       	ldi	r20, 0x02	; 2
    1e54:	50 e0       	ldi	r21, 0x00	; 0
    1e56:	a4 0e       	add	r10, r20
    1e58:	b5 1e       	adc	r11, r21
    1e5a:	c6 01       	movw	r24, r12
    1e5c:	43 d1       	rcall	.+646    	; 0x20e4 <strnlen>
    1e5e:	8c 01       	movw	r16, r24
    1e60:	5f e7       	ldi	r21, 0x7F	; 127
    1e62:	f5 22       	and	r15, r21
    1e64:	13 c0       	rjmp	.+38     	; 0x1e8c <vfprintf+0x1b0>
    1e66:	f5 01       	movw	r30, r10
    1e68:	c0 80       	ld	r12, Z
    1e6a:	d1 80       	ldd	r13, Z+1	; 0x01
    1e6c:	f6 fc       	sbrc	r15, 6
    1e6e:	03 c0       	rjmp	.+6      	; 0x1e76 <vfprintf+0x19a>
    1e70:	6f ef       	ldi	r22, 0xFF	; 255
    1e72:	7f ef       	ldi	r23, 0xFF	; 255
    1e74:	02 c0       	rjmp	.+4      	; 0x1e7a <vfprintf+0x19e>
    1e76:	69 2d       	mov	r22, r9
    1e78:	70 e0       	ldi	r23, 0x00	; 0
    1e7a:	42 e0       	ldi	r20, 0x02	; 2
    1e7c:	50 e0       	ldi	r21, 0x00	; 0
    1e7e:	a4 0e       	add	r10, r20
    1e80:	b5 1e       	adc	r11, r21
    1e82:	c6 01       	movw	r24, r12
    1e84:	24 d1       	rcall	.+584    	; 0x20ce <strnlen_P>
    1e86:	8c 01       	movw	r16, r24
    1e88:	50 e8       	ldi	r21, 0x80	; 128
    1e8a:	f5 2a       	or	r15, r21
    1e8c:	f3 fe       	sbrs	r15, 3
    1e8e:	06 c0       	rjmp	.+12     	; 0x1e9c <vfprintf+0x1c0>
    1e90:	18 c0       	rjmp	.+48     	; 0x1ec2 <vfprintf+0x1e6>
    1e92:	80 e2       	ldi	r24, 0x20	; 32
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	b3 01       	movw	r22, r6
    1e98:	30 d1       	rcall	.+608    	; 0x20fa <fputc>
    1e9a:	ea 94       	dec	r14
    1e9c:	8e 2d       	mov	r24, r14
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	08 17       	cp	r16, r24
    1ea2:	19 07       	cpc	r17, r25
    1ea4:	b0 f3       	brcs	.-20     	; 0x1e92 <vfprintf+0x1b6>
    1ea6:	0d c0       	rjmp	.+26     	; 0x1ec2 <vfprintf+0x1e6>
    1ea8:	f6 01       	movw	r30, r12
    1eaa:	f7 fc       	sbrc	r15, 7
    1eac:	85 91       	lpm	r24, Z+
    1eae:	f7 fe       	sbrs	r15, 7
    1eb0:	81 91       	ld	r24, Z+
    1eb2:	6f 01       	movw	r12, r30
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	b3 01       	movw	r22, r6
    1eb8:	20 d1       	rcall	.+576    	; 0x20fa <fputc>
    1eba:	e1 10       	cpse	r14, r1
    1ebc:	ea 94       	dec	r14
    1ebe:	01 50       	subi	r16, 0x01	; 1
    1ec0:	10 40       	sbci	r17, 0x00	; 0
    1ec2:	01 15       	cp	r16, r1
    1ec4:	11 05       	cpc	r17, r1
    1ec6:	81 f7       	brne	.-32     	; 0x1ea8 <vfprintf+0x1cc>
    1ec8:	e2 c0       	rjmp	.+452    	; 0x208e <vfprintf+0x3b2>
    1eca:	94 36       	cpi	r25, 0x64	; 100
    1ecc:	11 f0       	breq	.+4      	; 0x1ed2 <vfprintf+0x1f6>
    1ece:	99 36       	cpi	r25, 0x69	; 105
    1ed0:	61 f5       	brne	.+88     	; 0x1f2a <vfprintf+0x24e>
    1ed2:	f7 fe       	sbrs	r15, 7
    1ed4:	08 c0       	rjmp	.+16     	; 0x1ee6 <vfprintf+0x20a>
    1ed6:	f5 01       	movw	r30, r10
    1ed8:	20 81       	ld	r18, Z
    1eda:	31 81       	ldd	r19, Z+1	; 0x01
    1edc:	42 81       	ldd	r20, Z+2	; 0x02
    1ede:	53 81       	ldd	r21, Z+3	; 0x03
    1ee0:	84 e0       	ldi	r24, 0x04	; 4
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	0a c0       	rjmp	.+20     	; 0x1efa <vfprintf+0x21e>
    1ee6:	f5 01       	movw	r30, r10
    1ee8:	80 81       	ld	r24, Z
    1eea:	91 81       	ldd	r25, Z+1	; 0x01
    1eec:	9c 01       	movw	r18, r24
    1eee:	44 27       	eor	r20, r20
    1ef0:	37 fd       	sbrc	r19, 7
    1ef2:	40 95       	com	r20
    1ef4:	54 2f       	mov	r21, r20
    1ef6:	82 e0       	ldi	r24, 0x02	; 2
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	a8 0e       	add	r10, r24
    1efc:	b9 1e       	adc	r11, r25
    1efe:	9f e6       	ldi	r25, 0x6F	; 111
    1f00:	f9 22       	and	r15, r25
    1f02:	57 ff       	sbrs	r21, 7
    1f04:	09 c0       	rjmp	.+18     	; 0x1f18 <vfprintf+0x23c>
    1f06:	50 95       	com	r21
    1f08:	40 95       	com	r20
    1f0a:	30 95       	com	r19
    1f0c:	21 95       	neg	r18
    1f0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f10:	4f 4f       	sbci	r20, 0xFF	; 255
    1f12:	5f 4f       	sbci	r21, 0xFF	; 255
    1f14:	e0 e8       	ldi	r30, 0x80	; 128
    1f16:	fe 2a       	or	r15, r30
    1f18:	ca 01       	movw	r24, r20
    1f1a:	b9 01       	movw	r22, r18
    1f1c:	a1 01       	movw	r20, r2
    1f1e:	2a e0       	ldi	r18, 0x0A	; 10
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	17 d1       	rcall	.+558    	; 0x2152 <__ultoa_invert>
    1f24:	d8 2e       	mov	r13, r24
    1f26:	d2 18       	sub	r13, r2
    1f28:	3f c0       	rjmp	.+126    	; 0x1fa8 <vfprintf+0x2cc>
    1f2a:	95 37       	cpi	r25, 0x75	; 117
    1f2c:	29 f4       	brne	.+10     	; 0x1f38 <vfprintf+0x25c>
    1f2e:	1f 2d       	mov	r17, r15
    1f30:	1f 7e       	andi	r17, 0xEF	; 239
    1f32:	2a e0       	ldi	r18, 0x0A	; 10
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	1d c0       	rjmp	.+58     	; 0x1f72 <vfprintf+0x296>
    1f38:	1f 2d       	mov	r17, r15
    1f3a:	19 7f       	andi	r17, 0xF9	; 249
    1f3c:	9f 36       	cpi	r25, 0x6F	; 111
    1f3e:	61 f0       	breq	.+24     	; 0x1f58 <vfprintf+0x27c>
    1f40:	90 37       	cpi	r25, 0x70	; 112
    1f42:	20 f4       	brcc	.+8      	; 0x1f4c <vfprintf+0x270>
    1f44:	98 35       	cpi	r25, 0x58	; 88
    1f46:	09 f0       	breq	.+2      	; 0x1f4a <vfprintf+0x26e>
    1f48:	a5 c0       	rjmp	.+330    	; 0x2094 <vfprintf+0x3b8>
    1f4a:	0f c0       	rjmp	.+30     	; 0x1f6a <vfprintf+0x28e>
    1f4c:	90 37       	cpi	r25, 0x70	; 112
    1f4e:	39 f0       	breq	.+14     	; 0x1f5e <vfprintf+0x282>
    1f50:	98 37       	cpi	r25, 0x78	; 120
    1f52:	09 f0       	breq	.+2      	; 0x1f56 <vfprintf+0x27a>
    1f54:	9f c0       	rjmp	.+318    	; 0x2094 <vfprintf+0x3b8>
    1f56:	04 c0       	rjmp	.+8      	; 0x1f60 <vfprintf+0x284>
    1f58:	28 e0       	ldi	r18, 0x08	; 8
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	0a c0       	rjmp	.+20     	; 0x1f72 <vfprintf+0x296>
    1f5e:	10 61       	ori	r17, 0x10	; 16
    1f60:	14 fd       	sbrc	r17, 4
    1f62:	14 60       	ori	r17, 0x04	; 4
    1f64:	20 e1       	ldi	r18, 0x10	; 16
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	04 c0       	rjmp	.+8      	; 0x1f72 <vfprintf+0x296>
    1f6a:	14 fd       	sbrc	r17, 4
    1f6c:	16 60       	ori	r17, 0x06	; 6
    1f6e:	20 e1       	ldi	r18, 0x10	; 16
    1f70:	32 e0       	ldi	r19, 0x02	; 2
    1f72:	17 ff       	sbrs	r17, 7
    1f74:	08 c0       	rjmp	.+16     	; 0x1f86 <vfprintf+0x2aa>
    1f76:	f5 01       	movw	r30, r10
    1f78:	60 81       	ld	r22, Z
    1f7a:	71 81       	ldd	r23, Z+1	; 0x01
    1f7c:	82 81       	ldd	r24, Z+2	; 0x02
    1f7e:	93 81       	ldd	r25, Z+3	; 0x03
    1f80:	44 e0       	ldi	r20, 0x04	; 4
    1f82:	50 e0       	ldi	r21, 0x00	; 0
    1f84:	08 c0       	rjmp	.+16     	; 0x1f96 <vfprintf+0x2ba>
    1f86:	f5 01       	movw	r30, r10
    1f88:	80 81       	ld	r24, Z
    1f8a:	91 81       	ldd	r25, Z+1	; 0x01
    1f8c:	bc 01       	movw	r22, r24
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	42 e0       	ldi	r20, 0x02	; 2
    1f94:	50 e0       	ldi	r21, 0x00	; 0
    1f96:	a4 0e       	add	r10, r20
    1f98:	b5 1e       	adc	r11, r21
    1f9a:	a1 01       	movw	r20, r2
    1f9c:	da d0       	rcall	.+436    	; 0x2152 <__ultoa_invert>
    1f9e:	d8 2e       	mov	r13, r24
    1fa0:	d2 18       	sub	r13, r2
    1fa2:	8f e7       	ldi	r24, 0x7F	; 127
    1fa4:	f8 2e       	mov	r15, r24
    1fa6:	f1 22       	and	r15, r17
    1fa8:	f6 fe       	sbrs	r15, 6
    1faa:	0b c0       	rjmp	.+22     	; 0x1fc2 <vfprintf+0x2e6>
    1fac:	5e ef       	ldi	r21, 0xFE	; 254
    1fae:	f5 22       	and	r15, r21
    1fb0:	d9 14       	cp	r13, r9
    1fb2:	38 f4       	brcc	.+14     	; 0x1fc2 <vfprintf+0x2e6>
    1fb4:	f4 fe       	sbrs	r15, 4
    1fb6:	07 c0       	rjmp	.+14     	; 0x1fc6 <vfprintf+0x2ea>
    1fb8:	f2 fc       	sbrc	r15, 2
    1fba:	05 c0       	rjmp	.+10     	; 0x1fc6 <vfprintf+0x2ea>
    1fbc:	8f ee       	ldi	r24, 0xEF	; 239
    1fbe:	f8 22       	and	r15, r24
    1fc0:	02 c0       	rjmp	.+4      	; 0x1fc6 <vfprintf+0x2ea>
    1fc2:	1d 2d       	mov	r17, r13
    1fc4:	01 c0       	rjmp	.+2      	; 0x1fc8 <vfprintf+0x2ec>
    1fc6:	19 2d       	mov	r17, r9
    1fc8:	f4 fe       	sbrs	r15, 4
    1fca:	0d c0       	rjmp	.+26     	; 0x1fe6 <vfprintf+0x30a>
    1fcc:	fe 01       	movw	r30, r28
    1fce:	ed 0d       	add	r30, r13
    1fd0:	f1 1d       	adc	r31, r1
    1fd2:	80 81       	ld	r24, Z
    1fd4:	80 33       	cpi	r24, 0x30	; 48
    1fd6:	19 f4       	brne	.+6      	; 0x1fde <vfprintf+0x302>
    1fd8:	99 ee       	ldi	r25, 0xE9	; 233
    1fda:	f9 22       	and	r15, r25
    1fdc:	08 c0       	rjmp	.+16     	; 0x1fee <vfprintf+0x312>
    1fde:	1f 5f       	subi	r17, 0xFF	; 255
    1fe0:	f2 fe       	sbrs	r15, 2
    1fe2:	05 c0       	rjmp	.+10     	; 0x1fee <vfprintf+0x312>
    1fe4:	03 c0       	rjmp	.+6      	; 0x1fec <vfprintf+0x310>
    1fe6:	8f 2d       	mov	r24, r15
    1fe8:	86 78       	andi	r24, 0x86	; 134
    1fea:	09 f0       	breq	.+2      	; 0x1fee <vfprintf+0x312>
    1fec:	1f 5f       	subi	r17, 0xFF	; 255
    1fee:	0f 2d       	mov	r16, r15
    1ff0:	f3 fc       	sbrc	r15, 3
    1ff2:	13 c0       	rjmp	.+38     	; 0x201a <vfprintf+0x33e>
    1ff4:	f0 fe       	sbrs	r15, 0
    1ff6:	0e c0       	rjmp	.+28     	; 0x2014 <vfprintf+0x338>
    1ff8:	1e 15       	cp	r17, r14
    1ffa:	10 f0       	brcs	.+4      	; 0x2000 <vfprintf+0x324>
    1ffc:	9d 2c       	mov	r9, r13
    1ffe:	0a c0       	rjmp	.+20     	; 0x2014 <vfprintf+0x338>
    2000:	9d 2c       	mov	r9, r13
    2002:	9e 0c       	add	r9, r14
    2004:	91 1a       	sub	r9, r17
    2006:	1e 2d       	mov	r17, r14
    2008:	05 c0       	rjmp	.+10     	; 0x2014 <vfprintf+0x338>
    200a:	80 e2       	ldi	r24, 0x20	; 32
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	b3 01       	movw	r22, r6
    2010:	74 d0       	rcall	.+232    	; 0x20fa <fputc>
    2012:	1f 5f       	subi	r17, 0xFF	; 255
    2014:	1e 15       	cp	r17, r14
    2016:	c8 f3       	brcs	.-14     	; 0x200a <vfprintf+0x32e>
    2018:	04 c0       	rjmp	.+8      	; 0x2022 <vfprintf+0x346>
    201a:	1e 15       	cp	r17, r14
    201c:	10 f4       	brcc	.+4      	; 0x2022 <vfprintf+0x346>
    201e:	e1 1a       	sub	r14, r17
    2020:	01 c0       	rjmp	.+2      	; 0x2024 <vfprintf+0x348>
    2022:	ee 24       	eor	r14, r14
    2024:	04 ff       	sbrs	r16, 4
    2026:	0e c0       	rjmp	.+28     	; 0x2044 <vfprintf+0x368>
    2028:	80 e3       	ldi	r24, 0x30	; 48
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	b3 01       	movw	r22, r6
    202e:	65 d0       	rcall	.+202    	; 0x20fa <fputc>
    2030:	02 ff       	sbrs	r16, 2
    2032:	1b c0       	rjmp	.+54     	; 0x206a <vfprintf+0x38e>
    2034:	01 fd       	sbrc	r16, 1
    2036:	03 c0       	rjmp	.+6      	; 0x203e <vfprintf+0x362>
    2038:	88 e7       	ldi	r24, 0x78	; 120
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	0e c0       	rjmp	.+28     	; 0x205a <vfprintf+0x37e>
    203e:	88 e5       	ldi	r24, 0x58	; 88
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	0b c0       	rjmp	.+22     	; 0x205a <vfprintf+0x37e>
    2044:	80 2f       	mov	r24, r16
    2046:	86 78       	andi	r24, 0x86	; 134
    2048:	81 f0       	breq	.+32     	; 0x206a <vfprintf+0x38e>
    204a:	01 ff       	sbrs	r16, 1
    204c:	02 c0       	rjmp	.+4      	; 0x2052 <vfprintf+0x376>
    204e:	8b e2       	ldi	r24, 0x2B	; 43
    2050:	01 c0       	rjmp	.+2      	; 0x2054 <vfprintf+0x378>
    2052:	80 e2       	ldi	r24, 0x20	; 32
    2054:	f7 fc       	sbrc	r15, 7
    2056:	8d e2       	ldi	r24, 0x2D	; 45
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	b3 01       	movw	r22, r6
    205c:	4e d0       	rcall	.+156    	; 0x20fa <fputc>
    205e:	05 c0       	rjmp	.+10     	; 0x206a <vfprintf+0x38e>
    2060:	80 e3       	ldi	r24, 0x30	; 48
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	b3 01       	movw	r22, r6
    2066:	49 d0       	rcall	.+146    	; 0x20fa <fputc>
    2068:	9a 94       	dec	r9
    206a:	d9 14       	cp	r13, r9
    206c:	c8 f3       	brcs	.-14     	; 0x2060 <vfprintf+0x384>
    206e:	da 94       	dec	r13
    2070:	f1 01       	movw	r30, r2
    2072:	ed 0d       	add	r30, r13
    2074:	f1 1d       	adc	r31, r1
    2076:	80 81       	ld	r24, Z
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	b3 01       	movw	r22, r6
    207c:	3e d0       	rcall	.+124    	; 0x20fa <fputc>
    207e:	dd 20       	and	r13, r13
    2080:	b1 f7       	brne	.-20     	; 0x206e <vfprintf+0x392>
    2082:	05 c0       	rjmp	.+10     	; 0x208e <vfprintf+0x3b2>
    2084:	80 e2       	ldi	r24, 0x20	; 32
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	b3 01       	movw	r22, r6
    208a:	37 d0       	rcall	.+110    	; 0x20fa <fputc>
    208c:	ea 94       	dec	r14
    208e:	ee 20       	and	r14, r14
    2090:	c9 f7       	brne	.-14     	; 0x2084 <vfprintf+0x3a8>
    2092:	50 ce       	rjmp	.-864    	; 0x1d34 <vfprintf+0x58>
    2094:	f3 01       	movw	r30, r6
    2096:	66 81       	ldd	r22, Z+6	; 0x06
    2098:	77 81       	ldd	r23, Z+7	; 0x07
    209a:	cb 01       	movw	r24, r22
    209c:	2b 96       	adiw	r28, 0x0b	; 11
    209e:	0f b6       	in	r0, 0x3f	; 63
    20a0:	f8 94       	cli
    20a2:	de bf       	out	0x3e, r29	; 62
    20a4:	0f be       	out	0x3f, r0	; 63
    20a6:	cd bf       	out	0x3d, r28	; 61
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	1f 91       	pop	r17
    20ae:	0f 91       	pop	r16
    20b0:	ff 90       	pop	r15
    20b2:	ef 90       	pop	r14
    20b4:	df 90       	pop	r13
    20b6:	cf 90       	pop	r12
    20b8:	bf 90       	pop	r11
    20ba:	af 90       	pop	r10
    20bc:	9f 90       	pop	r9
    20be:	8f 90       	pop	r8
    20c0:	7f 90       	pop	r7
    20c2:	6f 90       	pop	r6
    20c4:	5f 90       	pop	r5
    20c6:	4f 90       	pop	r4
    20c8:	3f 90       	pop	r3
    20ca:	2f 90       	pop	r2
    20cc:	08 95       	ret

000020ce <strnlen_P>:
    20ce:	fc 01       	movw	r30, r24
    20d0:	05 90       	lpm	r0, Z+
    20d2:	61 50       	subi	r22, 0x01	; 1
    20d4:	70 40       	sbci	r23, 0x00	; 0
    20d6:	01 10       	cpse	r0, r1
    20d8:	d8 f7       	brcc	.-10     	; 0x20d0 <strnlen_P+0x2>
    20da:	80 95       	com	r24
    20dc:	90 95       	com	r25
    20de:	8e 0f       	add	r24, r30
    20e0:	9f 1f       	adc	r25, r31
    20e2:	08 95       	ret

000020e4 <strnlen>:
    20e4:	fc 01       	movw	r30, r24
    20e6:	61 50       	subi	r22, 0x01	; 1
    20e8:	70 40       	sbci	r23, 0x00	; 0
    20ea:	01 90       	ld	r0, Z+
    20ec:	01 10       	cpse	r0, r1
    20ee:	d8 f7       	brcc	.-10     	; 0x20e6 <strnlen+0x2>
    20f0:	80 95       	com	r24
    20f2:	90 95       	com	r25
    20f4:	8e 0f       	add	r24, r30
    20f6:	9f 1f       	adc	r25, r31
    20f8:	08 95       	ret

000020fa <fputc>:
    20fa:	0f 93       	push	r16
    20fc:	1f 93       	push	r17
    20fe:	cf 93       	push	r28
    2100:	df 93       	push	r29
    2102:	8c 01       	movw	r16, r24
    2104:	eb 01       	movw	r28, r22
    2106:	8b 81       	ldd	r24, Y+3	; 0x03
    2108:	81 ff       	sbrs	r24, 1
    210a:	1b c0       	rjmp	.+54     	; 0x2142 <__stack+0x43>
    210c:	82 ff       	sbrs	r24, 2
    210e:	0d c0       	rjmp	.+26     	; 0x212a <__stack+0x2b>
    2110:	2e 81       	ldd	r18, Y+6	; 0x06
    2112:	3f 81       	ldd	r19, Y+7	; 0x07
    2114:	8c 81       	ldd	r24, Y+4	; 0x04
    2116:	9d 81       	ldd	r25, Y+5	; 0x05
    2118:	28 17       	cp	r18, r24
    211a:	39 07       	cpc	r19, r25
    211c:	64 f4       	brge	.+24     	; 0x2136 <__stack+0x37>
    211e:	e8 81       	ld	r30, Y
    2120:	f9 81       	ldd	r31, Y+1	; 0x01
    2122:	01 93       	st	Z+, r16
    2124:	f9 83       	std	Y+1, r31	; 0x01
    2126:	e8 83       	st	Y, r30
    2128:	06 c0       	rjmp	.+12     	; 0x2136 <__stack+0x37>
    212a:	e8 85       	ldd	r30, Y+8	; 0x08
    212c:	f9 85       	ldd	r31, Y+9	; 0x09
    212e:	80 2f       	mov	r24, r16
    2130:	09 95       	icall
    2132:	89 2b       	or	r24, r25
    2134:	31 f4       	brne	.+12     	; 0x2142 <__stack+0x43>
    2136:	8e 81       	ldd	r24, Y+6	; 0x06
    2138:	9f 81       	ldd	r25, Y+7	; 0x07
    213a:	01 96       	adiw	r24, 0x01	; 1
    213c:	9f 83       	std	Y+7, r25	; 0x07
    213e:	8e 83       	std	Y+6, r24	; 0x06
    2140:	02 c0       	rjmp	.+4      	; 0x2146 <__stack+0x47>
    2142:	0f ef       	ldi	r16, 0xFF	; 255
    2144:	1f ef       	ldi	r17, 0xFF	; 255
    2146:	c8 01       	movw	r24, r16
    2148:	df 91       	pop	r29
    214a:	cf 91       	pop	r28
    214c:	1f 91       	pop	r17
    214e:	0f 91       	pop	r16
    2150:	08 95       	ret

00002152 <__ultoa_invert>:
    2152:	fa 01       	movw	r30, r20
    2154:	aa 27       	eor	r26, r26
    2156:	28 30       	cpi	r18, 0x08	; 8
    2158:	51 f1       	breq	.+84     	; 0x21ae <__ultoa_invert+0x5c>
    215a:	20 31       	cpi	r18, 0x10	; 16
    215c:	81 f1       	breq	.+96     	; 0x21be <__ultoa_invert+0x6c>
    215e:	e8 94       	clt
    2160:	6f 93       	push	r22
    2162:	6e 7f       	andi	r22, 0xFE	; 254
    2164:	6e 5f       	subi	r22, 0xFE	; 254
    2166:	7f 4f       	sbci	r23, 0xFF	; 255
    2168:	8f 4f       	sbci	r24, 0xFF	; 255
    216a:	9f 4f       	sbci	r25, 0xFF	; 255
    216c:	af 4f       	sbci	r26, 0xFF	; 255
    216e:	b1 e0       	ldi	r27, 0x01	; 1
    2170:	3e d0       	rcall	.+124    	; 0x21ee <__ultoa_invert+0x9c>
    2172:	b4 e0       	ldi	r27, 0x04	; 4
    2174:	3c d0       	rcall	.+120    	; 0x21ee <__ultoa_invert+0x9c>
    2176:	67 0f       	add	r22, r23
    2178:	78 1f       	adc	r23, r24
    217a:	89 1f       	adc	r24, r25
    217c:	9a 1f       	adc	r25, r26
    217e:	a1 1d       	adc	r26, r1
    2180:	68 0f       	add	r22, r24
    2182:	79 1f       	adc	r23, r25
    2184:	8a 1f       	adc	r24, r26
    2186:	91 1d       	adc	r25, r1
    2188:	a1 1d       	adc	r26, r1
    218a:	6a 0f       	add	r22, r26
    218c:	71 1d       	adc	r23, r1
    218e:	81 1d       	adc	r24, r1
    2190:	91 1d       	adc	r25, r1
    2192:	a1 1d       	adc	r26, r1
    2194:	20 d0       	rcall	.+64     	; 0x21d6 <__ultoa_invert+0x84>
    2196:	09 f4       	brne	.+2      	; 0x219a <__ultoa_invert+0x48>
    2198:	68 94       	set
    219a:	3f 91       	pop	r19
    219c:	2a e0       	ldi	r18, 0x0A	; 10
    219e:	26 9f       	mul	r18, r22
    21a0:	11 24       	eor	r1, r1
    21a2:	30 19       	sub	r19, r0
    21a4:	30 5d       	subi	r19, 0xD0	; 208
    21a6:	31 93       	st	Z+, r19
    21a8:	de f6       	brtc	.-74     	; 0x2160 <__ultoa_invert+0xe>
    21aa:	cf 01       	movw	r24, r30
    21ac:	08 95       	ret
    21ae:	46 2f       	mov	r20, r22
    21b0:	47 70       	andi	r20, 0x07	; 7
    21b2:	40 5d       	subi	r20, 0xD0	; 208
    21b4:	41 93       	st	Z+, r20
    21b6:	b3 e0       	ldi	r27, 0x03	; 3
    21b8:	0f d0       	rcall	.+30     	; 0x21d8 <__ultoa_invert+0x86>
    21ba:	c9 f7       	brne	.-14     	; 0x21ae <__ultoa_invert+0x5c>
    21bc:	f6 cf       	rjmp	.-20     	; 0x21aa <__ultoa_invert+0x58>
    21be:	46 2f       	mov	r20, r22
    21c0:	4f 70       	andi	r20, 0x0F	; 15
    21c2:	40 5d       	subi	r20, 0xD0	; 208
    21c4:	4a 33       	cpi	r20, 0x3A	; 58
    21c6:	18 f0       	brcs	.+6      	; 0x21ce <__ultoa_invert+0x7c>
    21c8:	49 5d       	subi	r20, 0xD9	; 217
    21ca:	31 fd       	sbrc	r19, 1
    21cc:	40 52       	subi	r20, 0x20	; 32
    21ce:	41 93       	st	Z+, r20
    21d0:	02 d0       	rcall	.+4      	; 0x21d6 <__ultoa_invert+0x84>
    21d2:	a9 f7       	brne	.-22     	; 0x21be <__ultoa_invert+0x6c>
    21d4:	ea cf       	rjmp	.-44     	; 0x21aa <__ultoa_invert+0x58>
    21d6:	b4 e0       	ldi	r27, 0x04	; 4
    21d8:	a6 95       	lsr	r26
    21da:	97 95       	ror	r25
    21dc:	87 95       	ror	r24
    21de:	77 95       	ror	r23
    21e0:	67 95       	ror	r22
    21e2:	ba 95       	dec	r27
    21e4:	c9 f7       	brne	.-14     	; 0x21d8 <__ultoa_invert+0x86>
    21e6:	00 97       	sbiw	r24, 0x00	; 0
    21e8:	61 05       	cpc	r22, r1
    21ea:	71 05       	cpc	r23, r1
    21ec:	08 95       	ret
    21ee:	9b 01       	movw	r18, r22
    21f0:	ac 01       	movw	r20, r24
    21f2:	0a 2e       	mov	r0, r26
    21f4:	06 94       	lsr	r0
    21f6:	57 95       	ror	r21
    21f8:	47 95       	ror	r20
    21fa:	37 95       	ror	r19
    21fc:	27 95       	ror	r18
    21fe:	ba 95       	dec	r27
    2200:	c9 f7       	brne	.-14     	; 0x21f4 <__ultoa_invert+0xa2>
    2202:	62 0f       	add	r22, r18
    2204:	73 1f       	adc	r23, r19
    2206:	84 1f       	adc	r24, r20
    2208:	95 1f       	adc	r25, r21
    220a:	a0 1d       	adc	r26, r0
    220c:	08 95       	ret

0000220e <_exit>:
    220e:	f8 94       	cli

00002210 <__stop_program>:
    2210:	ff cf       	rjmp	.-2      	; 0x2210 <__stop_program>
