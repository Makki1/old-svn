
Benito.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00001030  000010c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001030  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009c  00800118  00800118  000010dc  2**0
                  ALLOC
  3 .stab         00000a80  00000000  00000000  000010dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00001b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000488  00000000  00000000  00001ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000ce2  00000000  00000000  00002153  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000081fb  00000000  00000000  00002e35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000020cd  00000000  00000000  0000b030  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000061e4  00000000  00000000  0000d0fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006d0  00000000  00000000  000132e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000033cb  00000000  00000000  000139b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000354d  00000000  00000000  00016d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005d8  00000000  00000000  0001a2cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       0:	9d c0       	rjmp	.+314    	; 0x13c <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       4:	b6 c0       	rjmp	.+364    	; 0x172 <__bad_interrupt>
}

#if defined(FDEV_SETUP_STREAM)
void CDC_Device_CreateStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                             FILE* const Stream)
{
       6:	00 00       	nop
       8:	b4 c0       	rjmp	.+360    	; 0x172 <__bad_interrupt>
       a:	00 00       	nop
       c:	b2 c0       	rjmp	.+356    	; 0x172 <__bad_interrupt>
       e:	00 00       	nop
      10:	b0 c0       	rjmp	.+352    	; 0x172 <__bad_interrupt>
      12:	00 00       	nop
      14:	ae c0       	rjmp	.+348    	; 0x172 <__bad_interrupt>
      16:	00 00       	nop
      18:	ac c0       	rjmp	.+344    	; 0x172 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	aa c0       	rjmp	.+340    	; 0x172 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a8 c0       	rjmp	.+336    	; 0x172 <__bad_interrupt>
      22:	00 00       	nop
      24:	a6 c0       	rjmp	.+332    	; 0x172 <__bad_interrupt>
      26:	00 00       	nop
      28:	a4 c0       	rjmp	.+328    	; 0x172 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	41 c3       	rjmp	.+1666   	; 0x6b0 <__vector_11>
      2e:	00 00       	nop
      30:	06 c3       	rjmp	.+1548   	; 0x63e <__vector_12>
      32:	00 00       	nop
      34:	9e c0       	rjmp	.+316    	; 0x172 <__bad_interrupt>
      36:	00 00       	nop
      38:	9c c0       	rjmp	.+312    	; 0x172 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9a c0       	rjmp	.+308    	; 0x172 <__bad_interrupt>
      3e:	00 00       	nop
      40:	98 c0       	rjmp	.+304    	; 0x172 <__bad_interrupt>
      42:	00 00       	nop
      44:	96 c0       	rjmp	.+300    	; 0x172 <__bad_interrupt>
      46:	00 00       	nop
      48:	94 c0       	rjmp	.+296    	; 0x172 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	92 c0       	rjmp	.+292    	; 0x172 <__bad_interrupt>
      4e:	00 00       	nop
      50:	90 c0       	rjmp	.+288    	; 0x172 <__bad_interrupt>
      52:	00 00       	nop
      54:	8e c0       	rjmp	.+284    	; 0x172 <__bad_interrupt>
      56:	00 00       	nop
      58:	8c c0       	rjmp	.+280    	; 0x172 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	db c0       	rjmp	.+438    	; 0x214 <__vector_23>
      5e:	00 00       	nop
      60:	88 c0       	rjmp	.+272    	; 0x172 <__bad_interrupt>
      62:	00 00       	nop
      64:	86 c0       	rjmp	.+268    	; 0x172 <__bad_interrupt>
      66:	00 00       	nop
      68:	84 c0       	rjmp	.+264    	; 0x172 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	82 c0       	rjmp	.+260    	; 0x172 <__bad_interrupt>
      6e:	00 00       	nop
      70:	80 c0       	rjmp	.+256    	; 0x172 <__bad_interrupt>
      72:	00 00       	nop
      74:	7e c0       	rjmp	.+252    	; 0x172 <__bad_interrupt>
      76:	00 00       	nop
      78:	7c c0       	rjmp	.+248    	; 0x172 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7a c0       	rjmp	.+244    	; 0x172 <__bad_interrupt>
      7e:	00 00       	nop
      80:	78 c0       	rjmp	.+240    	; 0x172 <__bad_interrupt>
      82:	00 00       	nop
      84:	76 c0       	rjmp	.+236    	; 0x172 <__bad_interrupt>
      86:	00 00       	nop
      88:	74 c0       	rjmp	.+232    	; 0x172 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	72 c0       	rjmp	.+228    	; 0x172 <__bad_interrupt>
      8e:	00 00       	nop
      90:	70 c0       	rjmp	.+224    	; 0x172 <__bad_interrupt>
      92:	00 00       	nop
      94:	6e c0       	rjmp	.+220    	; 0x172 <__bad_interrupt>
      96:	00 00       	nop

00000098 <DeviceDescriptor>:
      98:	12 01 10 01 02 00 00 08 eb 03 60 20 01 00 01 02     ..........` ....
      a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
      aa:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      ba:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
      ca:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
      da:	07 05 04 02 10 00 01 07 05 83 02 10 00 01           ..............

000000e8 <LanguageString>:
      e8:	04 03 09 04                                         ....

000000ec <ManufacturerString>:
      ec:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      fc:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000106 <ProductString>:
     106:	34 03 42 00 65 00 6e 00 69 00 74 00 6f 00 20 00     4.B.e.n.i.t.o. .
     116:	41 00 72 00 64 00 75 00 69 00 6e 00 6f 00 20 00     A.r.d.u.i.n.o. .
     126:	50 00 72 00 6f 00 67 00 72 00 61 00 6d 00 6d 00     P.r.o.g.r.a.m.m.
     136:	65 00 72 00 00 00                                   e.r...

0000013c <__ctors_end>:
     13c:	11 24       	eor	r1, r1
     13e:	1f be       	out	0x3f, r1	; 63
     140:	cf ef       	ldi	r28, 0xFF	; 255
     142:	d4 e0       	ldi	r29, 0x04	; 4
     144:	de bf       	out	0x3e, r29	; 62
     146:	cd bf       	out	0x3d, r28	; 61

00000148 <__do_copy_data>:
     148:	11 e0       	ldi	r17, 0x01	; 1
     14a:	a0 e0       	ldi	r26, 0x00	; 0
     14c:	b1 e0       	ldi	r27, 0x01	; 1
     14e:	e0 e3       	ldi	r30, 0x30	; 48
     150:	f0 e1       	ldi	r31, 0x10	; 16
     152:	02 c0       	rjmp	.+4      	; 0x158 <.do_copy_data_start>

00000154 <.do_copy_data_loop>:
     154:	05 90       	lpm	r0, Z+
     156:	0d 92       	st	X+, r0

00000158 <.do_copy_data_start>:
     158:	a8 31       	cpi	r26, 0x18	; 24
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <.do_copy_data_loop>

0000015e <__do_clear_bss>:
     15e:	11 e0       	ldi	r17, 0x01	; 1
     160:	a8 e1       	ldi	r26, 0x18	; 24
     162:	b1 e0       	ldi	r27, 0x01	; 1
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	a4 3b       	cpi	r26, 0xB4	; 180
     16a:	b1 07       	cpc	r27, r17
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	d1 d0       	rcall	.+418    	; 0x312 <main>
     170:	5d c7       	rjmp	.+3770   	; 0x102c <_exit>

00000172 <__bad_interrupt>:
     172:	46 cf       	rjmp	.-372    	; 0x0 <__vectors>

00000174 <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	PulseMSRemaining.PingPongLEDPulse = PING_PONG_LED_PULSE_MS;
     174:	84 e6       	ldi	r24, 0x64	; 100
     176:	80 93 a7 01 	sts	0x01A7, r24
				PORTC |= LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTC = ((PORTC | LEDS_ALL_LEDS) & ~LEDMask);
     17a:	88 b1       	in	r24, 0x08	; 8
     17c:	80 6c       	ori	r24, 0xC0	; 192
     17e:	8f 77       	andi	r24, 0x7F	; 127
     180:	88 b9       	out	0x08, r24	; 8
	LEDs_SetAllLEDs(LEDMASK_TX);
}
     182:	08 95       	ret

00000184 <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	PulseMSRemaining.PingPongLEDPulse = 0;
     184:	10 92 a7 01 	sts	0x01A7, r1
     188:	88 b1       	in	r24, 0x08	; 8
     18a:	80 6c       	ori	r24, 0xC0	; 192
     18c:	88 b9       	out	0x08, r24	; 8
	LEDs_SetAllLEDs(LEDS_NO_LEDS);
}
     18e:	08 95       	ret

00000190 <EVENT_CDC_Device_LineEncodingChanged>:
/** Event handler for the CDC Class driver Line Encoding Changed event.
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     190:	1f 93       	push	r17
     192:	fc 01       	movw	r30, r24
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
     194:	84 89       	ldd	r24, Z+20	; 0x14
     196:	81 30       	cpi	r24, 0x01	; 1
     198:	19 f0       	breq	.+6      	; 0x1a0 <EVENT_CDC_Device_LineEncodingChanged+0x10>
     19a:	82 30       	cpi	r24, 0x02	; 2
     19c:	19 f4       	brne	.+6      	; 0x1a4 <EVENT_CDC_Device_LineEncodingChanged+0x14>
     19e:	04 c0       	rjmp	.+8      	; 0x1a8 <EVENT_CDC_Device_LineEncodingChanged+0x18>
     1a0:	10 e3       	ldi	r17, 0x30	; 48
     1a2:	03 c0       	rjmp	.+6      	; 0x1aa <EVENT_CDC_Device_LineEncodingChanged+0x1a>
     1a4:	10 e0       	ldi	r17, 0x00	; 0
     1a6:	01 c0       	rjmp	.+2      	; 0x1aa <EVENT_CDC_Device_LineEncodingChanged+0x1a>
     1a8:	10 e2       	ldi	r17, 0x20	; 32
		case CDC_PARITY_Even:
			ConfigMask = (1 << UPM11);
			break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
     1aa:	83 89       	ldd	r24, Z+19	; 0x13
     1ac:	82 30       	cpi	r24, 0x02	; 2
     1ae:	09 f4       	brne	.+2      	; 0x1b2 <EVENT_CDC_Device_LineEncodingChanged+0x22>
	  ConfigMask |= (1 << USBS1);
     1b0:	18 60       	ori	r17, 0x08	; 8

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
     1b2:	85 89       	ldd	r24, Z+21	; 0x15
     1b4:	87 30       	cpi	r24, 0x07	; 7
     1b6:	31 f0       	breq	.+12     	; 0x1c4 <EVENT_CDC_Device_LineEncodingChanged+0x34>
     1b8:	88 30       	cpi	r24, 0x08	; 8
     1ba:	31 f0       	breq	.+12     	; 0x1c8 <EVENT_CDC_Device_LineEncodingChanged+0x38>
     1bc:	86 30       	cpi	r24, 0x06	; 6
     1be:	29 f4       	brne	.+10     	; 0x1ca <EVENT_CDC_Device_LineEncodingChanged+0x3a>
	{
		case 6:
			ConfigMask |= (1 << UCSZ10);
     1c0:	12 60       	ori	r17, 0x02	; 2
     1c2:	03 c0       	rjmp	.+6      	; 0x1ca <EVENT_CDC_Device_LineEncodingChanged+0x3a>
			break;
		case 7:
			ConfigMask |= (1 << UCSZ11);
     1c4:	14 60       	ori	r17, 0x04	; 4
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <EVENT_CDC_Device_LineEncodingChanged+0x3a>
			break;
		case 8:
			ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
     1c8:	16 60       	ori	r17, 0x06	; 6
			break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
     1ca:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1A = 0;
     1ce:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0;
     1d2:	10 92 ca 00 	sts	0x00CA, r1

	/* Set the new baud rate before configuring the USART */
	UBRR1  = SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     1d6:	27 85       	ldd	r18, Z+15	; 0x0f
     1d8:	30 89       	ldd	r19, Z+16	; 0x10
     1da:	41 89       	ldd	r20, Z+17	; 0x11
     1dc:	52 89       	ldd	r21, Z+18	; 0x12
     1de:	ca 01       	movw	r24, r20
     1e0:	b9 01       	movw	r22, r18
     1e2:	96 95       	lsr	r25
     1e4:	87 95       	ror	r24
     1e6:	77 95       	ror	r23
     1e8:	67 95       	ror	r22
     1ea:	60 5c       	subi	r22, 0xC0	; 192
     1ec:	7d 4b       	sbci	r23, 0xBD	; 189
     1ee:	80 4f       	sbci	r24, 0xF0	; 240
     1f0:	9f 4f       	sbci	r25, 0xFF	; 255
     1f2:	fa d6       	rcall	.+3572   	; 0xfe8 <__udivmodsi4>
     1f4:	21 50       	subi	r18, 0x01	; 1
     1f6:	30 40       	sbci	r19, 0x00	; 0
     1f8:	30 93 cd 00 	sts	0x00CD, r19
     1fc:	20 93 cc 00 	sts	0x00CC, r18

	/* Reconfigure the USART in double speed mode for a wider baud rate range at the expense of accuracy */
	UCSR1C = ConfigMask;
     200:	10 93 ca 00 	sts	0x00CA, r17
	UCSR1A = (1 << U2X1);
     204:	82 e0       	ldi	r24, 0x02	; 2
     206:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
     20a:	88 e9       	ldi	r24, 0x98	; 152
     20c:	80 93 c9 00 	sts	0x00C9, r24
}
     210:	1f 91       	pop	r17
     212:	08 95       	ret

00000214 <__vector_23>:

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
     214:	1f 92       	push	r1
     216:	0f 92       	push	r0
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	0f 92       	push	r0
     21c:	11 24       	eor	r1, r1
     21e:	2f 93       	push	r18
     220:	3f 93       	push	r19
     222:	8f 93       	push	r24
     224:	9f 93       	push	r25
     226:	cf 93       	push	r28
     228:	df 93       	push	r29
     22a:	ef 93       	push	r30
     22c:	ff 93       	push	r31
	uint8_t ReceivedByte = UDR1;
     22e:	90 91 ce 00 	lds	r25, 0x00CE

	if (USB_DeviceState == DEVICE_STATE_Configured)
     232:	8e b3       	in	r24, 0x1e	; 30
     234:	84 30       	cpi	r24, 0x04	; 4
     236:	d9 f4       	brne	.+54     	; 0x26e <__vector_23+0x5a>
		 *  \param[in]     Data    Data element to insert into the buffer.
		 */
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     238:	c9 e1       	ldi	r28, 0x19	; 25
     23a:	d1 e0       	ldi	r29, 0x01	; 1

			*Buffer->In = Data;
     23c:	e8 81       	ld	r30, Y
     23e:	f9 81       	ldd	r31, Y+1	; 0x01
     240:	90 83       	st	Z, r25

			if (++Buffer->In == Buffer->End)
     242:	88 81       	ld	r24, Y
     244:	99 81       	ldd	r25, Y+1	; 0x01
     246:	01 96       	adiw	r24, 0x01	; 1
     248:	99 83       	std	Y+1, r25	; 0x01
     24a:	88 83       	st	Y, r24
     24c:	2e 81       	ldd	r18, Y+6	; 0x06
     24e:	3f 81       	ldd	r19, Y+7	; 0x07
     250:	82 17       	cp	r24, r18
     252:	93 07       	cpc	r25, r19
     254:	21 f4       	brne	.+8      	; 0x25e <__vector_23+0x4a>
			  Buffer->In = Buffer->Start;
     256:	8c 81       	ldd	r24, Y+4	; 0x04
     258:	9d 81       	ldd	r25, Y+5	; 0x05
     25a:	99 83       	std	Y+1, r25	; 0x01
     25c:	88 83       	st	Y, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     25e:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     260:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Buffer->Count++;
     262:	89 85       	ldd	r24, Y+9	; 0x09
     264:	9a 85       	ldd	r25, Y+10	; 0x0a
     266:	01 96       	adiw	r24, 0x01	; 1
     268:	9a 87       	std	Y+10, r25	; 0x0a
     26a:	89 87       	std	Y+9, r24	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     26c:	2f bf       	out	0x3f, r18	; 63
	  RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
}
     26e:	ff 91       	pop	r31
     270:	ef 91       	pop	r30
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	9f 91       	pop	r25
     278:	8f 91       	pop	r24
     27a:	3f 91       	pop	r19
     27c:	2f 91       	pop	r18
     27e:	0f 90       	pop	r0
     280:	0f be       	out	0x3f, r0	; 63
     282:	0f 90       	pop	r0
     284:	1f 90       	pop	r1
     286:	18 95       	reti

00000288 <EVENT_CDC_Device_ControLineStateChanged>:
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	static bool PreviousDTRState = false;
	bool        CurrentDTRState  = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR);
     288:	fc 01       	movw	r30, r24
     28a:	85 85       	ldd	r24, Z+13	; 0x0d
     28c:	28 2f       	mov	r18, r24
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	21 70       	andi	r18, 0x01	; 1
     292:	30 70       	andi	r19, 0x00	; 0
     294:	92 2f       	mov	r25, r18

	/* Check if the DTR line has been asserted - if so, start the target AVR's reset pulse */
	if (!(PreviousDTRState) && CurrentDTRState)
     296:	80 91 18 01 	lds	r24, 0x0118
     29a:	88 23       	and	r24, r24
     29c:	49 f4       	brne	.+18     	; 0x2b0 <EVENT_CDC_Device_ControLineStateChanged+0x28>
     29e:	22 23       	and	r18, r18
     2a0:	39 f0       	breq	.+14     	; 0x2b0 <EVENT_CDC_Device_ControLineStateChanged+0x28>
     2a2:	88 b1       	in	r24, 0x08	; 8
     2a4:	8f 73       	andi	r24, 0x3F	; 63
     2a6:	88 b9       	out	0x08, r24	; 8
	{
		LEDs_SetAllLEDs(LEDMASK_BUSY);

		AVR_RESET_LINE_DDR |= AVR_RESET_LINE_MASK;
     2a8:	54 9a       	sbi	0x0a, 4	; 10
		PulseMSRemaining.ResetPulse = AVR_RESET_PULSE_MS;
     2aa:	8a e0       	ldi	r24, 0x0A	; 10
     2ac:	80 93 a4 01 	sts	0x01A4, r24
	}

	PreviousDTRState = CurrentDTRState;
     2b0:	90 93 18 01 	sts	0x0118, r25
}
     2b4:	08 95       	ret

000002b6 <EVENT_USB_Device_ControlRequest>:
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	91 e0       	ldi	r25, 0x01	; 1
}
     2ba:	29 c6       	rjmp	.+3154   	; 0xf0e <CDC_Device_ProcessControlRequest>

000002bc <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	91 e0       	ldi	r25, 0x01	; 1
     2c0:	d6 d5       	rcall	.+2988   	; 0xe6e <CDC_Device_ConfigureEndpoints>

	PulseMSRemaining.PingPongLEDPulse = 0;
     2c2:	10 92 a7 01 	sts	0x01A7, r1

	LEDs_SetAllLEDs(ConfigSuccess ? LEDS_NO_LEDS : LEDMASK_ERROR);
     2c6:	80 fd       	sbrc	r24, 0
     2c8:	02 c0       	rjmp	.+4      	; 0x2ce <EVENT_USB_Device_ConfigurationChanged+0x12>
     2ca:	90 ec       	ldi	r25, 0xC0	; 192
     2cc:	01 c0       	rjmp	.+2      	; 0x2d0 <EVENT_USB_Device_ConfigurationChanged+0x14>
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	88 b1       	in	r24, 0x08	; 8
     2d2:	90 95       	com	r25
     2d4:	80 6c       	ori	r24, 0xC0	; 192
     2d6:	98 23       	and	r25, r24
     2d8:	98 b9       	out	0x08, r25	; 8
}
     2da:	08 95       	ret

000002dc <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     2dc:	84 b7       	in	r24, 0x34	; 52
     2de:	87 7f       	andi	r24, 0xF7	; 247
     2e0:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     2e2:	88 e1       	ldi	r24, 0x18	; 24
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	f8 94       	cli
     2e8:	80 93 60 00 	sts	0x0060, r24
     2ec:	10 92 60 00 	sts	0x0060, r1
     2f0:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRC  |= LEDS_ALL_LEDS;
     2f2:	87 b1       	in	r24, 0x07	; 7
     2f4:	80 6c       	ori	r24, 0xC0	; 192
     2f6:	87 b9       	out	0x07, r24	; 7
				PORTC |= LEDS_ALL_LEDS;
     2f8:	88 b1       	in	r24, 0x08	; 8
     2fa:	80 6c       	ori	r24, 0xC0	; 192
     2fc:	88 b9       	out	0x08, r24	; 8

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
     2fe:	90 d1       	rcall	.+800    	; 0x620 <USB_Init>

	/* Millisecond Timer Interrupt */
	OCR0A  = (F_CPU / 64 / 1000);
     300:	8d e7       	ldi	r24, 0x7D	; 125
     302:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1 << WGM01);
     304:	82 e0       	ldi	r24, 0x02	; 2
     306:	84 bd       	out	0x24, r24	; 36
	TCCR0B = ((1 << CS01) | (1 << CS00));
     308:	83 e0       	ldi	r24, 0x03	; 3
     30a:	85 bd       	out	0x25, r24	; 37

	/* Tristate target /RESET Line */
	AVR_RESET_LINE_PORT &= ~AVR_RESET_LINE_MASK;
     30c:	5c 98       	cbi	0x0b, 4	; 11
	AVR_RESET_LINE_DDR  &= ~AVR_RESET_LINE_MASK;
     30e:	54 98       	cbi	0x0a, 4	; 10
}
     310:	08 95       	ret

00000312 <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
     312:	cf 92       	push	r12
     314:	df 92       	push	r13
     316:	ef 92       	push	r14
     318:	ff 92       	push	r15
     31a:	0f 93       	push	r16
     31c:	1f 93       	push	r17
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
	SetupHardware();
     322:	dc df       	rcall	.-72     	; 0x2dc <SetupHardware>
		 */
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		                                         ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     324:	e9 e1       	ldi	r30, 0x19	; 25
     326:	f1 e0       	ldi	r31, 0x01	; 1
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     328:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     32a:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
	
			Buffer->In     = DataPtr;
     32c:	84 e2       	ldi	r24, 0x24	; 36
     32e:	91 e0       	ldi	r25, 0x01	; 1
     330:	91 83       	std	Z+1, r25	; 0x01
     332:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
     334:	93 83       	std	Z+3, r25	; 0x03
     336:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
     338:	95 83       	std	Z+5, r25	; 0x05
     33a:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
     33c:	84 ea       	ldi	r24, 0xA4	; 164
     33e:	91 e0       	ldi	r25, 0x01	; 1
     340:	97 83       	std	Z+7, r25	; 0x07
     342:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
     344:	80 e8       	ldi	r24, 0x80	; 128
     346:	80 87       	std	Z+8, r24	; 0x08
			Buffer->Count  = 0;
     348:	12 86       	std	Z+10, r1	; 0x0a
     34a:	11 86       	std	Z+9, r1	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     34c:	2f bf       	out	0x3f, r18	; 63

	RingBuffer_InitBuffer(&USARTtoUSB_Buffer, USARTtoUSB_Buffer_Data, sizeof(USARTtoUSB_Buffer_Data));

	sei();
     34e:	78 94       	sei
		if ((UCSR1A & (1 << UDRE1)) && CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface))
		{
			UDR1 = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);

			LEDs_TurnOnLEDs(LEDMASK_TX);
			PulseMSRemaining.TxLEDPulse = TX_RX_LED_PULSE_MS;
     350:	1e e1       	ldi	r17, 0x1E	; 30
     352:	f1 2e       	mov	r15, r17

			/* Check if the receive buffer flush period has expired */
			uint16_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
			if (!(--FlushPeriodRemaining) || (BufferCount > 200))
			{
				FlushPeriodRemaining = RECEIVE_BUFFER_FLUSH_MS;
     354:	ba e0       	ldi	r27, 0x0A	; 10
     356:	cb 2e       	mov	r12, r27
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     358:	09 e1       	ldi	r16, 0x19	; 25
     35a:	11 e0       	ldi	r17, 0x01	; 1
				PORTC = ((PORTC | LEDMask) & ~ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PORTC ^= LEDMask;
     35c:	a0 ec       	ldi	r26, 0xC0	; 192
     35e:	da 2e       	mov	r13, r26

			/* Check if the LEDs should be ping-ponging (during enumeration) */
			if (PulseMSRemaining.PingPongLEDPulse && !(--PulseMSRemaining.PingPongLEDPulse))
			{
				LEDs_ToggleLEDs(LEDMASK_TX | LEDMASK_RX);
				PulseMSRemaining.PingPongLEDPulse = PING_PONG_LED_PULSE_MS;
     360:	f4 e6       	ldi	r31, 0x64	; 100
     362:	ef 2e       	mov	r14, r31
	sei();

	for (;;)
	{
		/* Echo bytes from the host to the target via the hardware USART */
		if ((UCSR1A & (1 << UDRE1)) && CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface))
     364:	80 91 c8 00 	lds	r24, 0x00C8
     368:	85 ff       	sbrs	r24, 5
     36a:	0d c0       	rjmp	.+26     	; 0x386 <main+0x74>
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	cd d4       	rcall	.+2458   	; 0xd0c <CDC_Device_BytesReceived>
     372:	89 2b       	or	r24, r25
     374:	41 f0       	breq	.+16     	; 0x386 <main+0x74>
		{
			UDR1 = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	91 e0       	ldi	r25, 0x01	; 1
     37a:	ee d4       	rcall	.+2524   	; 0xd58 <CDC_Device_ReceiveByte>
     37c:	80 93 ce 00 	sts	0x00CE, r24
				PORTC |= LEDS_ALL_LEDS;
			}

			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
			{
				PORTC &= ~LEDMask;
     380:	47 98       	cbi	0x08, 7	; 8

			LEDs_TurnOnLEDs(LEDMASK_TX);
			PulseMSRemaining.TxLEDPulse = TX_RX_LED_PULSE_MS;
     382:	f0 92 a5 01 	sts	0x01A5, r15
		}

		/* Check if the millisecond timer has elapsed */
		if (TIFR0 & (1 << OCF0A))
     386:	a9 9b       	sbis	0x15, 1	; 21
     388:	7d c0       	rjmp	.+250    	; 0x484 <main+0x172>
		{
			/* Clear flush timer expiry flag */
			TIFR0 |= (1 << TOV0);
     38a:	a8 9a       	sbi	0x15, 0	; 21

			/* Check if the reset pulse period has elapsed, if so tristate the target reset line */
			if (PulseMSRemaining.ResetPulse && !(--PulseMSRemaining.ResetPulse))
     38c:	80 91 a4 01 	lds	r24, 0x01A4
     390:	88 23       	and	r24, r24
     392:	69 f0       	breq	.+26     	; 0x3ae <main+0x9c>
     394:	80 91 a4 01 	lds	r24, 0x01A4
     398:	81 50       	subi	r24, 0x01	; 1
     39a:	80 93 a4 01 	sts	0x01A4, r24
     39e:	80 91 a4 01 	lds	r24, 0x01A4
     3a2:	88 23       	and	r24, r24
     3a4:	21 f4       	brne	.+8      	; 0x3ae <main+0x9c>
			}

			static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
			{
				PORTC |= LEDMask;
     3a6:	88 b1       	in	r24, 0x08	; 8
     3a8:	80 6c       	ori	r24, 0xC0	; 192
     3aa:	88 b9       	out	0x08, r24	; 8
			{
				LEDs_TurnOffLEDs(LEDMASK_BUSY);
				AVR_RESET_LINE_DDR &= ~AVR_RESET_LINE_MASK;
     3ac:	54 98       	cbi	0x0a, 4	; 10
			}

			/* Check if the LEDs should be ping-ponging (during enumeration) */
			if (PulseMSRemaining.PingPongLEDPulse && !(--PulseMSRemaining.PingPongLEDPulse))
     3ae:	80 91 a7 01 	lds	r24, 0x01A7
     3b2:	88 23       	and	r24, r24
     3b4:	71 f0       	breq	.+28     	; 0x3d2 <main+0xc0>
     3b6:	80 91 a7 01 	lds	r24, 0x01A7
     3ba:	81 50       	subi	r24, 0x01	; 1
     3bc:	80 93 a7 01 	sts	0x01A7, r24
     3c0:	80 91 a7 01 	lds	r24, 0x01A7
     3c4:	88 23       	and	r24, r24
     3c6:	29 f4       	brne	.+10     	; 0x3d2 <main+0xc0>
				PORTC = ((PORTC | LEDMask) & ~ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PORTC ^= LEDMask;
     3c8:	88 b1       	in	r24, 0x08	; 8
     3ca:	8d 25       	eor	r24, r13
     3cc:	88 b9       	out	0x08, r24	; 8
			{
				LEDs_ToggleLEDs(LEDMASK_TX | LEDMASK_RX);
				PulseMSRemaining.PingPongLEDPulse = PING_PONG_LED_PULSE_MS;
     3ce:	e0 92 a7 01 	sts	0x01A7, r14
			}

			/* Turn off TX LED(s) once the TX pulse period has elapsed */
			if (PulseMSRemaining.TxLEDPulse && !(--PulseMSRemaining.TxLEDPulse))
     3d2:	80 91 a5 01 	lds	r24, 0x01A5
     3d6:	88 23       	and	r24, r24
     3d8:	51 f0       	breq	.+20     	; 0x3ee <main+0xdc>
     3da:	80 91 a5 01 	lds	r24, 0x01A5
     3de:	81 50       	subi	r24, 0x01	; 1
     3e0:	80 93 a5 01 	sts	0x01A5, r24
     3e4:	80 91 a5 01 	lds	r24, 0x01A5
     3e8:	88 23       	and	r24, r24
     3ea:	09 f4       	brne	.+2      	; 0x3ee <main+0xdc>
				PORTC &= ~LEDMask;
			}

			static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
			{
				PORTC |= LEDMask;
     3ec:	47 9a       	sbi	0x08, 7	; 8
			  LEDs_TurnOffLEDs(LEDMASK_TX);

			/* Turn off RX LED(s) once the RX pulse period has elapsed */
			if (PulseMSRemaining.RxLEDPulse && !(--PulseMSRemaining.RxLEDPulse))
     3ee:	80 91 a6 01 	lds	r24, 0x01A6
     3f2:	88 23       	and	r24, r24
     3f4:	51 f0       	breq	.+20     	; 0x40a <main+0xf8>
     3f6:	80 91 a6 01 	lds	r24, 0x01A6
     3fa:	81 50       	subi	r24, 0x01	; 1
     3fc:	80 93 a6 01 	sts	0x01A6, r24
     400:	80 91 a6 01 	lds	r24, 0x01A6
     404:	88 23       	and	r24, r24
     406:	09 f4       	brne	.+2      	; 0x40a <main+0xf8>
     408:	46 9a       	sbi	0x08, 6	; 8
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     40a:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     40c:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Count = Buffer->Count;
     40e:	c0 91 22 01 	lds	r28, 0x0122
     412:	d0 91 23 01 	lds	r29, 0x0123
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     416:	8f bf       	out	0x3f, r24	; 63
			  LEDs_TurnOffLEDs(LEDMASK_RX);

			/* Check if the receive buffer flush period has expired */
			uint16_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
			if (!(--FlushPeriodRemaining) || (BufferCount > 200))
     418:	80 91 00 01 	lds	r24, 0x0100
     41c:	81 50       	subi	r24, 0x01	; 1
     41e:	80 93 00 01 	sts	0x0100, r24
     422:	88 23       	and	r24, r24
     424:	19 f0       	breq	.+6      	; 0x42c <main+0x11a>
     426:	c9 3c       	cpi	r28, 0xC9	; 201
     428:	d1 05       	cpc	r29, r1
     42a:	60 f1       	brcs	.+88     	; 0x484 <main+0x172>
			{
				FlushPeriodRemaining = RECEIVE_BUFFER_FLUSH_MS;
     42c:	c0 92 00 01 	sts	0x0100, r12

				/* Start RX LED indicator pulse */
				if (BufferCount)
     430:	20 97       	sbiw	r28, 0x00	; 0
     432:	31 f1       	breq	.+76     	; 0x480 <main+0x16e>
				PORTC |= LEDS_ALL_LEDS;
			}

			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
			{
				PORTC &= ~LEDMask;
     434:	46 98       	cbi	0x08, 6	; 8
				{
					LEDs_TurnOnLEDs(LEDMASK_RX);
					PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;
     436:	f0 92 a6 01 	sts	0x01A6, r15
     43a:	22 c0       	rjmp	.+68     	; 0x480 <main+0x16e>

				/* Echo bytes from the target to the host via the virtual serial port */
				while (BufferCount--)
				{
					/* Try to send the next byte of data to the host, abort if there is an error without dequeuing */
					if (CDC_Device_SendByte(&VirtualSerial_CDC_Interface,
     43c:	e0 91 1b 01 	lds	r30, 0x011B
     440:	f0 91 1c 01 	lds	r31, 0x011C
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	91 e0       	ldi	r25, 0x01	; 1
     448:	60 81       	ld	r22, Z
     44a:	ed d4       	rcall	.+2522   	; 0xe26 <CDC_Device_SendByte>
     44c:	88 23       	and	r24, r24
     44e:	d1 f4       	brne	.+52     	; 0x484 <main+0x172>
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     450:	f8 01       	movw	r30, r16
		
			uint8_t Data = *Buffer->Out;

			if (++Buffer->Out == Buffer->End)
     452:	82 81       	ldd	r24, Z+2	; 0x02
     454:	93 81       	ldd	r25, Z+3	; 0x03
     456:	01 96       	adiw	r24, 0x01	; 1
     458:	93 83       	std	Z+3, r25	; 0x03
     45a:	82 83       	std	Z+2, r24	; 0x02
     45c:	26 81       	ldd	r18, Z+6	; 0x06
     45e:	37 81       	ldd	r19, Z+7	; 0x07
     460:	82 17       	cp	r24, r18
     462:	93 07       	cpc	r25, r19
     464:	21 f4       	brne	.+8      	; 0x46e <main+0x15c>
			  Buffer->Out = Buffer->Start;
     466:	84 81       	ldd	r24, Z+4	; 0x04
     468:	95 81       	ldd	r25, Z+5	; 0x05
     46a:	93 83       	std	Z+3, r25	; 0x03
     46c:	82 83       	std	Z+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     46e:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     470:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Buffer->Count--;
     472:	81 85       	ldd	r24, Z+9	; 0x09
     474:	92 85       	ldd	r25, Z+10	; 0x0a
     476:	01 97       	sbiw	r24, 0x01	; 1
     478:	92 87       	std	Z+10, r25	; 0x0a
     47a:	81 87       	std	Z+9, r24	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     47c:	2f bf       	out	0x3f, r18	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
     47e:	21 97       	sbiw	r28, 0x01	; 1
					LEDs_TurnOnLEDs(LEDMASK_RX);
					PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;
				}

				/* Echo bytes from the target to the host via the virtual serial port */
				while (BufferCount--)
     480:	20 97       	sbiw	r28, 0x00	; 0
     482:	e1 f6       	brne	.-72     	; 0x43c <main+0x12a>
					RingBuffer_Remove(&USARTtoUSB_Buffer);
				}
			}
		}

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	bf d4       	rcall	.+2430   	; 0xe08 <CDC_Device_USBTask>
		USB_USBTask();
     48a:	2e d4       	rcall	.+2140   	; 0xce8 <USB_USBTask>
     48c:	6b cf       	rjmp	.-298    	; 0x364 <main+0x52>

0000048e <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     48e:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	49 f0       	breq	.+18     	; 0x4a6 <CALLBACK_USB_GetDescriptor+0x18>
     494:	93 30       	cpi	r25, 0x03	; 3
     496:	61 f0       	breq	.+24     	; 0x4b0 <CALLBACK_USB_GetDescriptor+0x22>
     498:	91 30       	cpi	r25, 0x01	; 1
     49a:	f9 f4       	brne	.+62     	; 0x4da <CALLBACK_USB_GetDescriptor+0x4c>
     49c:	e8 e9       	ldi	r30, 0x98	; 152
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	22 e1       	ldi	r18, 0x12	; 18
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	1e c0       	rjmp	.+60     	; 0x4e2 <CALLBACK_USB_GetDescriptor+0x54>
     4a6:	ea ea       	ldi	r30, 0xAA	; 170
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	2e e3       	ldi	r18, 0x3E	; 62
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	19 c0       	rjmp	.+50     	; 0x4e2 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     4b0:	81 30       	cpi	r24, 0x01	; 1
     4b2:	49 f0       	breq	.+18     	; 0x4c6 <CALLBACK_USB_GetDescriptor+0x38>
     4b4:	81 30       	cpi	r24, 0x01	; 1
     4b6:	18 f0       	brcs	.+6      	; 0x4be <CALLBACK_USB_GetDescriptor+0x30>
     4b8:	82 30       	cpi	r24, 0x02	; 2
     4ba:	79 f4       	brne	.+30     	; 0x4da <CALLBACK_USB_GetDescriptor+0x4c>
     4bc:	08 c0       	rjmp	.+16     	; 0x4ce <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     4be:	e8 ee       	ldi	r30, 0xE8	; 232
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	84 91       	lpm	r24, Z+
     4c4:	07 c0       	rjmp	.+14     	; 0x4d4 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     4c6:	ec ee       	ldi	r30, 0xEC	; 236
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
     4ca:	84 91       	lpm	r24, Z+
     4cc:	03 c0       	rjmp	.+6      	; 0x4d4 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     4ce:	e6 e0       	ldi	r30, 0x06	; 6
     4d0:	f1 e0       	ldi	r31, 0x01	; 1
     4d2:	84 91       	lpm	r24, Z+
     4d4:	28 2f       	mov	r18, r24
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	04 c0       	rjmp	.+8      	; 0x4e2 <CALLBACK_USB_GetDescriptor+0x54>
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	20 e0       	ldi	r18, 0x00	; 0
     4e0:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     4e2:	ed 93       	st	X+, r30
     4e4:	fc 93       	st	X, r31
	return Size;
}
     4e6:	c9 01       	movw	r24, r18
     4e8:	08 95       	ret

000004ea <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     4ea:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     4ee:	80 91 eb 00 	lds	r24, 0x00EB
     4f2:	81 60       	ori	r24, 0x01	; 1
     4f4:	80 93 eb 00 	sts	0x00EB, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
     4f8:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
     4fc:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
     500:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     504:	80 91 ee 00 	lds	r24, 0x00EE
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     508:	88 1f       	adc	r24, r24
     50a:	88 27       	eor	r24, r24
     50c:	88 1f       	adc	r24, r24
     50e:	08 95       	ret

00000510 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     510:	80 91 ac 01 	lds	r24, 0x01AC
     514:	88 23       	and	r24, r24
     516:	8c f4       	brge	.+34     	; 0x53a <Endpoint_ClearStatusStage+0x2a>
     518:	03 c0       	rjmp	.+6      	; 0x520 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     51a:	8e b3       	in	r24, 0x1e	; 30
     51c:	88 23       	and	r24, r24
     51e:	b1 f0       	breq	.+44     	; 0x54c <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     520:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     524:	82 ff       	sbrs	r24, 2
     526:	f9 cf       	rjmp	.-14     	; 0x51a <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     528:	80 91 e8 00 	lds	r24, 0x00E8
     52c:	8b 77       	andi	r24, 0x7B	; 123
     52e:	80 93 e8 00 	sts	0x00E8, r24
     532:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     534:	8e b3       	in	r24, 0x1e	; 30
     536:	88 23       	and	r24, r24
     538:	49 f0       	breq	.+18     	; 0x54c <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     53a:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     53e:	80 ff       	sbrs	r24, 0
     540:	f9 cf       	rjmp	.-14     	; 0x534 <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     542:	80 91 e8 00 	lds	r24, 0x00E8
     546:	8e 77       	andi	r24, 0x7E	; 126
     548:	80 93 e8 00 	sts	0x00E8, r24
     54c:	08 95       	ret

0000054e <Endpoint_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     54e:	40 91 e4 00 	lds	r20, 0x00E4
     552:	50 91 e5 00 	lds	r21, 0x00E5
     556:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
     558:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
     55c:	80 78       	andi	r24, 0x80	; 128
     55e:	80 38       	cpi	r24, 0x80	; 128
     560:	29 f4       	brne	.+10     	; 0x56c <Endpoint_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     562:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
     566:	80 ff       	sbrs	r24, 0
     568:	05 c0       	rjmp	.+10     	; 0x574 <Endpoint_WaitUntilReady+0x26>
     56a:	21 c0       	rjmp	.+66     	; 0x5ae <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     56c:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     570:	82 fd       	sbrc	r24, 2
     572:	1d c0       	rjmp	.+58     	; 0x5ae <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     574:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     576:	88 23       	and	r24, r24
     578:	11 f4       	brne	.+4      	; 0x57e <Endpoint_WaitUntilReady+0x30>
     57a:	82 e0       	ldi	r24, 0x02	; 2
     57c:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     57e:	85 30       	cpi	r24, 0x05	; 5
     580:	11 f4       	brne	.+4      	; 0x586 <Endpoint_WaitUntilReady+0x38>
     582:	83 e0       	ldi	r24, 0x03	; 3
     584:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     586:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     58a:	85 ff       	sbrs	r24, 5
     58c:	02 c0       	rjmp	.+4      	; 0x592 <Endpoint_WaitUntilReady+0x44>
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	08 95       	ret
     592:	80 91 e4 00 	lds	r24, 0x00E4
     596:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     59a:	84 17       	cp	r24, r20
     59c:	95 07       	cpc	r25, r21
     59e:	e1 f2       	breq	.-72     	; 0x558 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     5a0:	22 23       	and	r18, r18
     5a2:	11 f4       	brne	.+4      	; 0x5a8 <Endpoint_WaitUntilReady+0x5a>
     5a4:	84 e0       	ldi	r24, 0x04	; 4
     5a6:	08 95       	ret
     5a8:	21 50       	subi	r18, 0x01	; 1
     5aa:	ac 01       	movw	r20, r24
     5ac:	d5 cf       	rjmp	.-86     	; 0x558 <Endpoint_WaitUntilReady+0xa>
     5ae:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     5b0:	08 95       	ret

000005b2 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     5b2:	3f d0       	rcall	.+126    	; 0x632 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     5b4:	41 d0       	rcall	.+130    	; 0x638 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     5b6:	80 91 d8 00 	lds	r24, 0x00D8
     5ba:	8f 77       	andi	r24, 0x7F	; 127
     5bc:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     5c0:	80 91 d8 00 	lds	r24, 0x00D8
     5c4:	80 68       	ori	r24, 0x80	; 128
     5c6:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     5ca:	80 91 d8 00 	lds	r24, 0x00D8
     5ce:	8f 7d       	andi	r24, 0xDF	; 223
     5d0:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     5d4:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     5d6:	82 e0       	ldi	r24, 0x02	; 2
     5d8:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     5da:	09 b4       	in	r0, 0x29	; 41
     5dc:	00 fe       	sbrs	r0, 0
     5de:	fd cf       	rjmp	.-6      	; 0x5da <USB_ResetInterface+0x28>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     5e0:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
     5e2:	10 92 a8 01 	sts	0x01A8, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     5e6:	10 92 aa 01 	sts	0x01AA, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     5ea:	10 92 a9 01 	sts	0x01A9, r1
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	60 e0       	ldi	r22, 0x00	; 0
     5f2:	42 e0       	ldi	r20, 0x02	; 2
     5f4:	7a df       	rcall	.-268    	; 0x4ea <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     5f6:	80 91 e1 00 	lds	r24, 0x00E1
     5fa:	8e 7f       	andi	r24, 0xFE	; 254
     5fc:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     600:	80 91 e2 00 	lds	r24, 0x00E2
     604:	81 60       	ori	r24, 0x01	; 1
     606:	80 93 e2 00 	sts	0x00E2, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     60a:	80 91 e2 00 	lds	r24, 0x00E2
     60e:	88 60       	ori	r24, 0x08	; 8
     610:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     614:	80 91 e0 00 	lds	r24, 0x00E0
     618:	8e 7f       	andi	r24, 0xFE	; 254
     61a:	80 93 e0 00 	sts	0x00E0, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     61e:	08 95       	ret

00000620 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
			#else
				REGCR   &= ~(1 << REGDIS);
     620:	e3 e6       	ldi	r30, 0x63	; 99
     622:	f0 e0       	ldi	r31, 0x00	; 0
     624:	80 81       	ld	r24, Z
     626:	8e 7f       	andi	r24, 0xFE	; 254
     628:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	80 93 ab 01 	sts	0x01AB, r24

	USB_ResetInterface();
}
     630:	c0 cf       	rjmp	.-128    	; 0x5b2 <USB_ResetInterface>

00000632 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     632:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     636:	08 95       	ret

00000638 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     638:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     63c:	08 95       	ret

0000063e <__vector_12>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     63e:	1f 92       	push	r1
     640:	0f 92       	push	r0
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	0f 92       	push	r0
     646:	11 24       	eor	r1, r1
     648:	1f 93       	push	r17
     64a:	2f 93       	push	r18
     64c:	3f 93       	push	r19
     64e:	4f 93       	push	r20
     650:	5f 93       	push	r21
     652:	6f 93       	push	r22
     654:	7f 93       	push	r23
     656:	8f 93       	push	r24
     658:	9f 93       	push	r25
     65a:	af 93       	push	r26
     65c:	bf 93       	push	r27
     65e:	ef 93       	push	r30
     660:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     662:	e9 ee       	ldi	r30, 0xE9	; 233
     664:	f0 e0       	ldi	r31, 0x00	; 0
     666:	10 81       	ld	r17, Z
     668:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     66a:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     66c:	e0 ef       	ldi	r30, 0xF0	; 240
     66e:	f0 e0       	ldi	r31, 0x00	; 0
     670:	80 81       	ld	r24, Z
     672:	87 7f       	andi	r24, 0xF7	; 247
     674:	80 83       	st	Z, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     676:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     678:	b6 d1       	rcall	.+876    	; 0x9e6 <USB_Device_ProcessControlRequest>
     67a:	a9 ee       	ldi	r26, 0xE9	; 233
     67c:	b0 e0       	ldi	r27, 0x00	; 0
     67e:	1c 92       	st	X, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     680:	e0 ef       	ldi	r30, 0xF0	; 240
     682:	f0 e0       	ldi	r31, 0x00	; 0
     684:	80 81       	ld	r24, Z
     686:	88 60       	ori	r24, 0x08	; 8
     688:	80 83       	st	Z, r24
     68a:	1c 93       	st	X, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     68c:	ff 91       	pop	r31
     68e:	ef 91       	pop	r30
     690:	bf 91       	pop	r27
     692:	af 91       	pop	r26
     694:	9f 91       	pop	r25
     696:	8f 91       	pop	r24
     698:	7f 91       	pop	r23
     69a:	6f 91       	pop	r22
     69c:	5f 91       	pop	r21
     69e:	4f 91       	pop	r20
     6a0:	3f 91       	pop	r19
     6a2:	2f 91       	pop	r18
     6a4:	1f 91       	pop	r17
     6a6:	0f 90       	pop	r0
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	0f 90       	pop	r0
     6ac:	1f 90       	pop	r1
     6ae:	18 95       	reti

000006b0 <__vector_11>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     6b0:	1f 92       	push	r1
     6b2:	0f 92       	push	r0
     6b4:	0f b6       	in	r0, 0x3f	; 63
     6b6:	0f 92       	push	r0
     6b8:	11 24       	eor	r1, r1
     6ba:	2f 93       	push	r18
     6bc:	3f 93       	push	r19
     6be:	4f 93       	push	r20
     6c0:	5f 93       	push	r21
     6c2:	6f 93       	push	r22
     6c4:	7f 93       	push	r23
     6c6:	8f 93       	push	r24
     6c8:	9f 93       	push	r25
     6ca:	af 93       	push	r26
     6cc:	bf 93       	push	r27
     6ce:	ef 93       	push	r30
     6d0:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     6d2:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     6d6:	82 ff       	sbrs	r24, 2
     6d8:	0a c0       	rjmp	.+20     	; 0x6ee <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     6da:	80 91 e2 00 	lds	r24, 0x00E2
     6de:	82 ff       	sbrs	r24, 2
     6e0:	06 c0       	rjmp	.+12     	; 0x6ee <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     6e2:	80 91 e1 00 	lds	r24, 0x00E1
     6e6:	8b 7f       	andi	r24, 0xFB	; 251
     6e8:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     6ec:	fc d2       	rcall	.+1528   	; 0xce6 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     6ee:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     6f2:	80 ff       	sbrs	r24, 0
     6f4:	16 c0       	rjmp	.+44     	; 0x722 <__vector_11+0x72>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     6f6:	80 91 e2 00 	lds	r24, 0x00E2
     6fa:	80 ff       	sbrs	r24, 0
     6fc:	12 c0       	rjmp	.+36     	; 0x722 <__vector_11+0x72>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     6fe:	80 91 e2 00 	lds	r24, 0x00E2
     702:	8e 7f       	andi	r24, 0xFE	; 254
     704:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     708:	80 91 e2 00 	lds	r24, 0x00E2
     70c:	80 61       	ori	r24, 0x10	; 16
     70e:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     712:	80 91 d8 00 	lds	r24, 0x00D8
     716:	80 62       	ori	r24, 0x20	; 32
     718:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     71c:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     71e:	1e ba       	out	0x1e, r1	; 30
		EVENT_USB_Device_Disconnect();
     720:	31 dd       	rcall	.-1438   	; 0x184 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     722:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     726:	84 ff       	sbrs	r24, 4
     728:	2b c0       	rjmp	.+86     	; 0x780 <__vector_11+0xd0>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     72a:	80 91 e2 00 	lds	r24, 0x00E2
     72e:	84 ff       	sbrs	r24, 4
     730:	27 c0       	rjmp	.+78     	; 0x780 <__vector_11+0xd0>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     732:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     734:	82 e0       	ldi	r24, 0x02	; 2
     736:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     738:	09 b4       	in	r0, 0x29	; 41
     73a:	00 fe       	sbrs	r0, 0
     73c:	fd cf       	rjmp	.-6      	; 0x738 <__vector_11+0x88>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     73e:	80 91 d8 00 	lds	r24, 0x00D8
     742:	8f 7d       	andi	r24, 0xDF	; 223
     744:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     748:	80 91 e1 00 	lds	r24, 0x00E1
     74c:	8f 7e       	andi	r24, 0xEF	; 239
     74e:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     752:	80 91 e2 00 	lds	r24, 0x00E2
     756:	8f 7e       	andi	r24, 0xEF	; 239
     758:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     75c:	80 91 e2 00 	lds	r24, 0x00E2
     760:	81 60       	ori	r24, 0x01	; 1
     762:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     766:	80 91 a8 01 	lds	r24, 0x01A8
     76a:	88 23       	and	r24, r24
     76c:	31 f4       	brne	.+12     	; 0x77a <__vector_11+0xca>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     76e:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     772:	87 fd       	sbrc	r24, 7
     774:	02 c0       	rjmp	.+4      	; 0x77a <__vector_11+0xca>
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	01 c0       	rjmp	.+2      	; 0x77c <__vector_11+0xcc>
     77a:	84 e0       	ldi	r24, 0x04	; 4
     77c:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     77e:	fa dc       	rcall	.-1548   	; 0x174 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     780:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     784:	83 ff       	sbrs	r24, 3
     786:	26 c0       	rjmp	.+76     	; 0x7d4 <__vector_11+0x124>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     788:	80 91 e2 00 	lds	r24, 0x00E2
     78c:	83 ff       	sbrs	r24, 3
     78e:	22 c0       	rjmp	.+68     	; 0x7d4 <__vector_11+0x124>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     790:	80 91 e1 00 	lds	r24, 0x00E1
     794:	87 7f       	andi	r24, 0xF7	; 247
     796:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     79a:	82 e0       	ldi	r24, 0x02	; 2
     79c:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
     79e:	10 92 a8 01 	sts	0x01A8, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     7a2:	80 91 e1 00 	lds	r24, 0x00E1
     7a6:	8e 7f       	andi	r24, 0xFE	; 254
     7a8:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     7ac:	80 91 e2 00 	lds	r24, 0x00E2
     7b0:	8e 7f       	andi	r24, 0xFE	; 254
     7b2:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     7b6:	80 91 e2 00 	lds	r24, 0x00E2
     7ba:	80 61       	ori	r24, 0x10	; 16
     7bc:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	60 e0       	ldi	r22, 0x00	; 0
     7c4:	42 e0       	ldi	r20, 0x02	; 2
     7c6:	91 de       	rcall	.-734    	; 0x4ea <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     7c8:	80 91 f0 00 	lds	r24, 0x00F0
     7cc:	88 60       	ori	r24, 0x08	; 8
     7ce:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     7d2:	89 d2       	rcall	.+1298   	; 0xce6 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     7d4:	ff 91       	pop	r31
     7d6:	ef 91       	pop	r30
     7d8:	bf 91       	pop	r27
     7da:	af 91       	pop	r26
     7dc:	9f 91       	pop	r25
     7de:	8f 91       	pop	r24
     7e0:	7f 91       	pop	r23
     7e2:	6f 91       	pop	r22
     7e4:	5f 91       	pop	r21
     7e6:	4f 91       	pop	r20
     7e8:	3f 91       	pop	r19
     7ea:	2f 91       	pop	r18
     7ec:	0f 90       	pop	r0
     7ee:	0f be       	out	0x3f, r0	; 63
     7f0:	0f 90       	pop	r0
     7f2:	1f 90       	pop	r1
     7f4:	18 95       	reti

000007f6 <Endpoint_Write_Control_Stream_LE>:
     7f6:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     7f8:	40 91 b2 01 	lds	r20, 0x01B2
     7fc:	50 91 b3 01 	lds	r21, 0x01B3
     800:	46 17       	cp	r20, r22
     802:	57 07       	cpc	r21, r23
     804:	18 f4       	brcc	.+6      	; 0x80c <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     806:	f9 01       	movw	r30, r18
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	3c c0       	rjmp	.+120    	; 0x884 <Endpoint_Write_Control_Stream_LE+0x8e>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     80c:	61 15       	cp	r22, r1
     80e:	71 05       	cpc	r23, r1
     810:	11 f0       	breq	.+4      	; 0x816 <Endpoint_Write_Control_Stream_LE+0x20>
     812:	ab 01       	movw	r20, r22
     814:	f8 cf       	rjmp	.-16     	; 0x806 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     816:	80 91 e8 00 	lds	r24, 0x00E8
     81a:	8e 77       	andi	r24, 0x7E	; 126
     81c:	80 93 e8 00 	sts	0x00E8, r24
     820:	40 e0       	ldi	r20, 0x00	; 0
     822:	50 e0       	ldi	r21, 0x00	; 0
     824:	f0 cf       	rjmp	.-32     	; 0x806 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     826:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     828:	88 23       	and	r24, r24
     82a:	e9 f1       	breq	.+122    	; 0x8a6 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     82c:	85 30       	cpi	r24, 0x05	; 5
     82e:	e9 f1       	breq	.+122    	; 0x8aa <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     830:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     834:	83 ff       	sbrs	r24, 3
     836:	02 c0       	rjmp	.+4      	; 0x83c <Endpoint_Write_Control_Stream_LE+0x46>
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     83c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     840:	82 fd       	sbrc	r24, 2
     842:	2b c0       	rjmp	.+86     	; 0x89a <Endpoint_Write_Control_Stream_LE+0xa4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     844:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     848:	80 ff       	sbrs	r24, 0
     84a:	1c c0       	rjmp	.+56     	; 0x884 <Endpoint_Write_Control_Stream_LE+0x8e>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     84c:	80 91 f2 00 	lds	r24, 0x00F2
     850:	28 2f       	mov	r18, r24
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	07 c0       	rjmp	.+14     	; 0x864 <Endpoint_Write_Control_Stream_LE+0x6e>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     856:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     858:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     85c:	41 50       	subi	r20, 0x01	; 1
     85e:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     860:	2f 5f       	subi	r18, 0xFF	; 255
     862:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     864:	41 15       	cp	r20, r1
     866:	51 05       	cpc	r21, r1
     868:	19 f0       	breq	.+6      	; 0x870 <Endpoint_Write_Control_Stream_LE+0x7a>
     86a:	28 30       	cpi	r18, 0x08	; 8
     86c:	31 05       	cpc	r19, r1
     86e:	98 f3       	brcs	.-26     	; 0x856 <Endpoint_Write_Control_Stream_LE+0x60>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	28 30       	cpi	r18, 0x08	; 8
     874:	31 05       	cpc	r19, r1
     876:	09 f4       	brne	.+2      	; 0x87a <Endpoint_Write_Control_Stream_LE+0x84>
     878:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     87a:	80 91 e8 00 	lds	r24, 0x00E8
     87e:	8e 77       	andi	r24, 0x7E	; 126
     880:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     884:	41 15       	cp	r20, r1
     886:	51 05       	cpc	r21, r1
     888:	71 f6       	brne	.-100    	; 0x826 <Endpoint_Write_Control_Stream_LE+0x30>
     88a:	99 23       	and	r25, r25
     88c:	61 f6       	brne	.-104    	; 0x826 <Endpoint_Write_Control_Stream_LE+0x30>
     88e:	05 c0       	rjmp	.+10     	; 0x89a <Endpoint_Write_Control_Stream_LE+0xa4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     890:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     892:	88 23       	and	r24, r24
     894:	41 f0       	breq	.+16     	; 0x8a6 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     896:	85 30       	cpi	r24, 0x05	; 5
     898:	41 f0       	breq	.+16     	; 0x8aa <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     89a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     89e:	82 ff       	sbrs	r24, 2
     8a0:	f7 cf       	rjmp	.-18     	; 0x890 <Endpoint_Write_Control_Stream_LE+0x9a>
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	08 95       	ret
     8a6:	82 e0       	ldi	r24, 0x02	; 2
     8a8:	08 95       	ret
     8aa:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     8ac:	08 95       	ret

000008ae <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
     8ae:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     8b0:	61 15       	cp	r22, r1
     8b2:	71 05       	cpc	r23, r1
     8b4:	29 f4       	brne	.+10     	; 0x8c0 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     8b6:	80 91 e8 00 	lds	r24, 0x00E8
     8ba:	8b 77       	andi	r24, 0x7B	; 123
     8bc:	80 93 e8 00 	sts	0x00E8, r24
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     8c0:	f9 01       	movw	r30, r18
     8c2:	1f c0       	rjmp	.+62     	; 0x902 <Endpoint_Read_Control_Stream_LE+0x54>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     8c4:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     8c6:	88 23       	and	r24, r24
     8c8:	59 f1       	breq	.+86     	; 0x920 <Endpoint_Read_Control_Stream_LE+0x72>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     8ca:	85 30       	cpi	r24, 0x05	; 5
     8cc:	59 f1       	breq	.+86     	; 0x924 <Endpoint_Read_Control_Stream_LE+0x76>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     8ce:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     8d2:	83 ff       	sbrs	r24, 3
     8d4:	02 c0       	rjmp	.+4      	; 0x8da <Endpoint_Read_Control_Stream_LE+0x2c>
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     8da:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     8de:	82 ff       	sbrs	r24, 2
     8e0:	f1 cf       	rjmp	.-30     	; 0x8c4 <Endpoint_Read_Control_Stream_LE+0x16>
     8e2:	06 c0       	rjmp	.+12     	; 0x8f0 <Endpoint_Read_Control_Stream_LE+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     8e4:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     8e8:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     8ea:	61 50       	subi	r22, 0x01	; 1
     8ec:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     8ee:	21 f0       	breq	.+8      	; 0x8f8 <Endpoint_Read_Control_Stream_LE+0x4a>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     8f0:	80 91 f2 00 	lds	r24, 0x00F2
     8f4:	88 23       	and	r24, r24
     8f6:	b1 f7       	brne	.-20     	; 0x8e4 <Endpoint_Read_Control_Stream_LE+0x36>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     8f8:	80 91 e8 00 	lds	r24, 0x00E8
     8fc:	8b 77       	andi	r24, 0x7B	; 123
     8fe:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
     902:	61 15       	cp	r22, r1
     904:	71 05       	cpc	r23, r1
     906:	f1 f6       	brne	.-68     	; 0x8c4 <Endpoint_Read_Control_Stream_LE+0x16>
     908:	05 c0       	rjmp	.+10     	; 0x914 <Endpoint_Read_Control_Stream_LE+0x66>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     90a:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     90c:	88 23       	and	r24, r24
     90e:	41 f0       	breq	.+16     	; 0x920 <Endpoint_Read_Control_Stream_LE+0x72>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     910:	85 30       	cpi	r24, 0x05	; 5
     912:	41 f0       	breq	.+16     	; 0x924 <Endpoint_Read_Control_Stream_LE+0x76>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     914:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     918:	80 ff       	sbrs	r24, 0
     91a:	f7 cf       	rjmp	.-18     	; 0x90a <Endpoint_Read_Control_Stream_LE+0x5c>
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	08 95       	ret
     920:	82 e0       	ldi	r24, 0x02	; 2
     922:	08 95       	ret
     924:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     926:	08 95       	ret

00000928 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     928:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     92a:	40 91 b2 01 	lds	r20, 0x01B2
     92e:	50 91 b3 01 	lds	r21, 0x01B3
     932:	46 17       	cp	r20, r22
     934:	57 07       	cpc	r21, r23
     936:	18 f4       	brcc	.+6      	; 0x93e <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     938:	f9 01       	movw	r30, r18
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	3f c0       	rjmp	.+126    	; 0x9bc <Endpoint_Write_Control_PStream_LE+0x94>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     93e:	61 15       	cp	r22, r1
     940:	71 05       	cpc	r23, r1
     942:	11 f0       	breq	.+4      	; 0x948 <Endpoint_Write_Control_PStream_LE+0x20>
     944:	ab 01       	movw	r20, r22
     946:	f8 cf       	rjmp	.-16     	; 0x938 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     948:	80 91 e8 00 	lds	r24, 0x00E8
     94c:	8e 77       	andi	r24, 0x7E	; 126
     94e:	80 93 e8 00 	sts	0x00E8, r24
     952:	40 e0       	ldi	r20, 0x00	; 0
     954:	50 e0       	ldi	r21, 0x00	; 0
     956:	f0 cf       	rjmp	.-32     	; 0x938 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     958:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     95a:	88 23       	and	r24, r24
     95c:	09 f4       	brne	.+2      	; 0x960 <Endpoint_Write_Control_PStream_LE+0x38>
     95e:	3f c0       	rjmp	.+126    	; 0x9de <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     960:	85 30       	cpi	r24, 0x05	; 5
     962:	09 f4       	brne	.+2      	; 0x966 <Endpoint_Write_Control_PStream_LE+0x3e>
     964:	3e c0       	rjmp	.+124    	; 0x9e2 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     966:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     96a:	83 ff       	sbrs	r24, 3
     96c:	02 c0       	rjmp	.+4      	; 0x972 <Endpoint_Write_Control_PStream_LE+0x4a>
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     972:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     976:	82 fd       	sbrc	r24, 2
     978:	2c c0       	rjmp	.+88     	; 0x9d2 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     97a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     97e:	80 ff       	sbrs	r24, 0
     980:	1d c0       	rjmp	.+58     	; 0x9bc <Endpoint_Write_Control_PStream_LE+0x94>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     982:	80 91 f2 00 	lds	r24, 0x00F2
     986:	28 2f       	mov	r18, r24
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	08 c0       	rjmp	.+16     	; 0x99c <Endpoint_Write_Control_PStream_LE+0x74>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     98c:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     98e:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     992:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     994:	41 50       	subi	r20, 0x01	; 1
     996:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     998:	2f 5f       	subi	r18, 0xFF	; 255
     99a:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     99c:	41 15       	cp	r20, r1
     99e:	51 05       	cpc	r21, r1
     9a0:	19 f0       	breq	.+6      	; 0x9a8 <Endpoint_Write_Control_PStream_LE+0x80>
     9a2:	28 30       	cpi	r18, 0x08	; 8
     9a4:	31 05       	cpc	r19, r1
     9a6:	90 f3       	brcs	.-28     	; 0x98c <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	28 30       	cpi	r18, 0x08	; 8
     9ac:	31 05       	cpc	r19, r1
     9ae:	09 f4       	brne	.+2      	; 0x9b2 <Endpoint_Write_Control_PStream_LE+0x8a>
     9b0:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9b2:	80 91 e8 00 	lds	r24, 0x00E8
     9b6:	8e 77       	andi	r24, 0x7E	; 126
     9b8:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     9bc:	41 15       	cp	r20, r1
     9be:	51 05       	cpc	r21, r1
     9c0:	59 f6       	brne	.-106    	; 0x958 <Endpoint_Write_Control_PStream_LE+0x30>
     9c2:	99 23       	and	r25, r25
     9c4:	49 f6       	brne	.-110    	; 0x958 <Endpoint_Write_Control_PStream_LE+0x30>
     9c6:	05 c0       	rjmp	.+10     	; 0x9d2 <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     9c8:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     9ca:	88 23       	and	r24, r24
     9cc:	41 f0       	breq	.+16     	; 0x9de <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     9ce:	85 30       	cpi	r24, 0x05	; 5
     9d0:	41 f0       	breq	.+16     	; 0x9e2 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9d2:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     9d6:	82 ff       	sbrs	r24, 2
     9d8:	f7 cf       	rjmp	.-18     	; 0x9c8 <Endpoint_Write_Control_PStream_LE+0xa0>
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	08 95       	ret
     9de:	82 e0       	ldi	r24, 0x02	; 2
     9e0:	08 95       	ret
     9e2:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     9e4:	08 95       	ret

000009e6 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     9e6:	0f 93       	push	r16
     9e8:	1f 93       	push	r17
     9ea:	df 93       	push	r29
     9ec:	cf 93       	push	r28
     9ee:	cd b7       	in	r28, 0x3d	; 61
     9f0:	de b7       	in	r29, 0x3e	; 62
     9f2:	ac 97       	sbiw	r28, 0x2c	; 44
     9f4:	0f b6       	in	r0, 0x3f	; 63
     9f6:	f8 94       	cli
     9f8:	de bf       	out	0x3e, r29	; 62
     9fa:	0f be       	out	0x3f, r0	; 63
     9fc:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     9fe:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
     a02:	80 93 ac 01 	sts	0x01AC, r24
     a06:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
     a0a:	80 93 ad 01 	sts	0x01AD, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     a0e:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
     a12:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
     a16:	ee ea       	ldi	r30, 0xAE	; 174
     a18:	f1 e0       	ldi	r31, 0x01	; 1
     a1a:	80 93 ae 01 	sts	0x01AE, r24
     a1e:	90 93 af 01 	sts	0x01AF, r25
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     a22:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
     a26:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
     a2a:	80 93 b0 01 	sts	0x01B0, r24
     a2e:	93 83       	std	Z+3, r25	; 0x03
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     a30:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
     a34:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
     a38:	80 93 b2 01 	sts	0x01B2, r24
     a3c:	95 83       	std	Z+5, r25	; 0x05

	EVENT_USB_Device_ControlRequest();
     a3e:	3b dc       	rcall	.-1930   	; 0x2b6 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a40:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     a44:	83 ff       	sbrs	r24, 3
     a46:	36 c1       	rjmp	.+620    	; 0xcb4 <USB_Device_ProcessControlRequest+0x2ce>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     a48:	80 91 ac 01 	lds	r24, 0x01AC

		switch (USB_ControlRequest.bRequest)
     a4c:	30 91 ad 01 	lds	r19, 0x01AD
     a50:	35 30       	cpi	r19, 0x05	; 5
     a52:	09 f4       	brne	.+2      	; 0xa56 <USB_Device_ProcessControlRequest+0x70>
     a54:	87 c0       	rjmp	.+270    	; 0xb64 <USB_Device_ProcessControlRequest+0x17e>
     a56:	36 30       	cpi	r19, 0x06	; 6
     a58:	40 f4       	brcc	.+16     	; 0xa6a <USB_Device_ProcessControlRequest+0x84>
     a5a:	31 30       	cpi	r19, 0x01	; 1
     a5c:	c9 f1       	breq	.+114    	; 0xad0 <USB_Device_ProcessControlRequest+0xea>
     a5e:	31 30       	cpi	r19, 0x01	; 1
     a60:	70 f0       	brcs	.+28     	; 0xa7e <USB_Device_ProcessControlRequest+0x98>
     a62:	33 30       	cpi	r19, 0x03	; 3
     a64:	09 f0       	breq	.+2      	; 0xa68 <USB_Device_ProcessControlRequest+0x82>
     a66:	26 c1       	rjmp	.+588    	; 0xcb4 <USB_Device_ProcessControlRequest+0x2ce>
     a68:	33 c0       	rjmp	.+102    	; 0xad0 <USB_Device_ProcessControlRequest+0xea>
     a6a:	38 30       	cpi	r19, 0x08	; 8
     a6c:	09 f4       	brne	.+2      	; 0xa70 <USB_Device_ProcessControlRequest+0x8a>
     a6e:	f5 c0       	rjmp	.+490    	; 0xc5a <USB_Device_ProcessControlRequest+0x274>
     a70:	39 30       	cpi	r19, 0x09	; 9
     a72:	09 f4       	brne	.+2      	; 0xa76 <USB_Device_ProcessControlRequest+0x90>
     a74:	04 c1       	rjmp	.+520    	; 0xc7e <USB_Device_ProcessControlRequest+0x298>
     a76:	36 30       	cpi	r19, 0x06	; 6
     a78:	09 f0       	breq	.+2      	; 0xa7c <USB_Device_ProcessControlRequest+0x96>
     a7a:	1c c1       	rjmp	.+568    	; 0xcb4 <USB_Device_ProcessControlRequest+0x2ce>
     a7c:	96 c0       	rjmp	.+300    	; 0xbaa <USB_Device_ProcessControlRequest+0x1c4>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a7e:	80 38       	cpi	r24, 0x80	; 128
     a80:	21 f0       	breq	.+8      	; 0xa8a <USB_Device_ProcessControlRequest+0xa4>
     a82:	82 38       	cpi	r24, 0x82	; 130
     a84:	09 f0       	breq	.+2      	; 0xa88 <USB_Device_ProcessControlRequest+0xa2>
     a86:	16 c1       	rjmp	.+556    	; 0xcb4 <USB_Device_ProcessControlRequest+0x2ce>
     a88:	08 c0       	rjmp	.+16     	; 0xa9a <USB_Device_ProcessControlRequest+0xb4>
     a8a:	90 91 a9 01 	lds	r25, 0x01A9
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     a8e:	80 91 aa 01 	lds	r24, 0x01AA
     a92:	88 23       	and	r24, r24
     a94:	99 f0       	breq	.+38     	; 0xabc <USB_Device_ProcessControlRequest+0xd6>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     a96:	92 60       	ori	r25, 0x02	; 2
     a98:	11 c0       	rjmp	.+34     	; 0xabc <USB_Device_ProcessControlRequest+0xd6>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     a9a:	80 91 b0 01 	lds	r24, 0x01B0
     a9e:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     aa0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     aa4:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	25 e0       	ldi	r18, 0x05	; 5
     aac:	96 95       	lsr	r25
     aae:	87 95       	ror	r24
     ab0:	2a 95       	dec	r18
     ab2:	e1 f7       	brne	.-8      	; 0xaac <USB_Device_ProcessControlRequest+0xc6>
     ab4:	98 2f       	mov	r25, r24
     ab6:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     ab8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     abc:	80 91 e8 00 	lds	r24, 0x00E8
     ac0:	87 7f       	andi	r24, 0xF7	; 247
     ac2:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     ac6:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
     aca:	10 92 f1 00 	sts	0x00F1, r1
     ace:	d0 c0       	rjmp	.+416    	; 0xc70 <USB_Device_ProcessControlRequest+0x28a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ad0:	88 23       	and	r24, r24
     ad2:	19 f0       	breq	.+6      	; 0xada <USB_Device_ProcessControlRequest+0xf4>
     ad4:	82 30       	cpi	r24, 0x02	; 2
     ad6:	09 f0       	breq	.+2      	; 0xada <USB_Device_ProcessControlRequest+0xf4>
     ad8:	ed c0       	rjmp	.+474    	; 0xcb4 <USB_Device_ProcessControlRequest+0x2ce>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	8f 71       	andi	r24, 0x1F	; 31
     ade:	90 70       	andi	r25, 0x00	; 0
     ae0:	00 97       	sbiw	r24, 0x00	; 0
     ae2:	21 f0       	breq	.+8      	; 0xaec <USB_Device_ProcessControlRequest+0x106>
     ae4:	02 97       	sbiw	r24, 0x02	; 2
     ae6:	09 f0       	breq	.+2      	; 0xaea <USB_Device_ProcessControlRequest+0x104>
     ae8:	e5 c0       	rjmp	.+458    	; 0xcb4 <USB_Device_ProcessControlRequest+0x2ce>
     aea:	0c c0       	rjmp	.+24     	; 0xb04 <USB_Device_ProcessControlRequest+0x11e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     aec:	80 91 ae 01 	lds	r24, 0x01AE
     af0:	81 30       	cpi	r24, 0x01	; 1
     af2:	09 f0       	breq	.+2      	; 0xaf6 <USB_Device_ProcessControlRequest+0x110>
     af4:	df c0       	rjmp	.+446    	; 0xcb4 <USB_Device_ProcessControlRequest+0x2ce>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     af6:	10 92 aa 01 	sts	0x01AA, r1
     afa:	33 30       	cpi	r19, 0x03	; 3
     afc:	69 f5       	brne	.+90     	; 0xb58 <USB_Device_ProcessControlRequest+0x172>
     afe:	80 93 aa 01 	sts	0x01AA, r24
     b02:	2a c0       	rjmp	.+84     	; 0xb58 <USB_Device_ProcessControlRequest+0x172>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     b04:	80 91 ae 01 	lds	r24, 0x01AE
     b08:	88 23       	and	r24, r24
     b0a:	31 f5       	brne	.+76     	; 0xb58 <USB_Device_ProcessControlRequest+0x172>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     b0c:	20 91 b0 01 	lds	r18, 0x01B0
     b10:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     b12:	09 f4       	brne	.+2      	; 0xb16 <USB_Device_ProcessControlRequest+0x130>
     b14:	cf c0       	rjmp	.+414    	; 0xcb4 <USB_Device_ProcessControlRequest+0x2ce>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     b16:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     b1a:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     b1e:	80 ff       	sbrs	r24, 0
     b20:	1b c0       	rjmp	.+54     	; 0xb58 <USB_Device_ProcessControlRequest+0x172>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     b22:	33 30       	cpi	r19, 0x03	; 3
     b24:	21 f4       	brne	.+8      	; 0xb2e <USB_Device_ProcessControlRequest+0x148>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     b26:	80 91 eb 00 	lds	r24, 0x00EB
     b2a:	80 62       	ori	r24, 0x20	; 32
     b2c:	13 c0       	rjmp	.+38     	; 0xb54 <USB_Device_ProcessControlRequest+0x16e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     b2e:	80 91 eb 00 	lds	r24, 0x00EB
     b32:	80 61       	ori	r24, 0x10	; 16
     b34:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	02 c0       	rjmp	.+4      	; 0xb42 <USB_Device_ProcessControlRequest+0x15c>
     b3e:	88 0f       	add	r24, r24
     b40:	99 1f       	adc	r25, r25
     b42:	2a 95       	dec	r18
     b44:	e2 f7       	brpl	.-8      	; 0xb3e <USB_Device_ProcessControlRequest+0x158>
     b46:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     b4a:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     b4e:	80 91 eb 00 	lds	r24, 0x00EB
     b52:	88 60       	ori	r24, 0x08	; 8
     b54:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     b58:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b5c:	80 91 e8 00 	lds	r24, 0x00E8
     b60:	87 7f       	andi	r24, 0xF7	; 247
     b62:	89 c0       	rjmp	.+274    	; 0xc76 <USB_Device_ProcessControlRequest+0x290>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     b64:	88 23       	and	r24, r24
     b66:	09 f0       	breq	.+2      	; 0xb6a <USB_Device_ProcessControlRequest+0x184>
     b68:	a5 c0       	rjmp	.+330    	; 0xcb4 <USB_Device_ProcessControlRequest+0x2ce>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
     b6a:	10 91 ae 01 	lds	r17, 0x01AE
     b6e:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     b70:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     b72:	f8 94       	cli
     b74:	80 91 e8 00 	lds	r24, 0x00E8
     b78:	87 7f       	andi	r24, 0xF7	; 247
     b7a:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     b7e:	c8 dc       	rcall	.-1648   	; 0x510 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b80:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     b84:	80 ff       	sbrs	r24, 0
     b86:	fc cf       	rjmp	.-8      	; 0xb80 <USB_Device_ProcessControlRequest+0x19a>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     b88:	80 91 e3 00 	lds	r24, 0x00E3
     b8c:	80 78       	andi	r24, 0x80	; 128
     b8e:	81 2b       	or	r24, r17

				UDADDR = Temp;
     b90:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
     b94:	80 68       	ori	r24, 0x80	; 128
     b96:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     b9a:	11 23       	and	r17, r17
     b9c:	11 f4       	brne	.+4      	; 0xba2 <USB_Device_ProcessControlRequest+0x1bc>
     b9e:	82 e0       	ldi	r24, 0x02	; 2
     ba0:	01 c0       	rjmp	.+2      	; 0xba4 <USB_Device_ProcessControlRequest+0x1be>
     ba2:	83 e0       	ldi	r24, 0x03	; 3
     ba4:	8e bb       	out	0x1e, r24	; 30
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     ba6:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
     ba8:	85 c0       	rjmp	.+266    	; 0xcb4 <USB_Device_ProcessControlRequest+0x2ce>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     baa:	80 58       	subi	r24, 0x80	; 128
     bac:	82 30       	cpi	r24, 0x02	; 2
     bae:	08 f0       	brcs	.+2      	; 0xbb2 <USB_Device_ProcessControlRequest+0x1cc>
     bb0:	81 c0       	rjmp	.+258    	; 0xcb4 <USB_Device_ProcessControlRequest+0x2ce>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     bb2:	80 91 ae 01 	lds	r24, 0x01AE
     bb6:	90 91 af 01 	lds	r25, 0x01AF
     bba:	23 e0       	ldi	r18, 0x03	; 3
     bbc:	8c 3d       	cpi	r24, 0xDC	; 220
     bbe:	92 07       	cpc	r25, r18
     bc0:	09 f0       	breq	.+2      	; 0xbc4 <USB_Device_ProcessControlRequest+0x1de>
     bc2:	33 c0       	rjmp	.+102    	; 0xc2a <USB_Device_ProcessControlRequest+0x244>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     bc4:	83 e0       	ldi	r24, 0x03	; 3
     bc6:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     bc8:	8a e2       	ldi	r24, 0x2A	; 42
     bca:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     bcc:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     bce:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     bd0:	de 01       	movw	r26, r28
     bd2:	15 96       	adiw	r26, 0x05	; 5
     bd4:	6e e0       	ldi	r22, 0x0E	; 14
     bd6:	40 e0       	ldi	r20, 0x00	; 0
     bd8:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     bda:	11 e2       	ldi	r17, 0x21	; 33
     bdc:	e6 2f       	mov	r30, r22
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	10 93 57 00 	sts	0x0057, r17
     be4:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
     be6:	40 ff       	sbrs	r20, 0
     be8:	03 c0       	rjmp	.+6      	; 0xbf0 <USB_Device_ProcessControlRequest+0x20a>
					{
						SerialByte >>= 4;
     bea:	82 95       	swap	r24
     bec:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
     bee:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     bf0:	8f 70       	andi	r24, 0x0F	; 15
     bf2:	28 2f       	mov	r18, r24
     bf4:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     bf6:	8a 30       	cpi	r24, 0x0A	; 10
     bf8:	18 f0       	brcs	.+6      	; 0xc00 <USB_Device_ProcessControlRequest+0x21a>
     bfa:	c9 01       	movw	r24, r18
     bfc:	c7 96       	adiw	r24, 0x37	; 55
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <USB_Device_ProcessControlRequest+0x21e>
     c00:	c9 01       	movw	r24, r18
     c02:	c0 96       	adiw	r24, 0x30	; 48
     c04:	8d 93       	st	X+, r24
     c06:	9d 93       	st	X+, r25
     c08:	4f 5f       	subi	r20, 0xFF	; 255
     c0a:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     c0c:	44 31       	cpi	r20, 0x14	; 20
     c0e:	51 05       	cpc	r21, r1
     c10:	29 f7       	brne	.-54     	; 0xbdc <USB_Device_ProcessControlRequest+0x1f6>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     c12:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c14:	80 91 e8 00 	lds	r24, 0x00E8
     c18:	87 7f       	andi	r24, 0xF7	; 247
     c1a:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     c1e:	ce 01       	movw	r24, r28
     c20:	03 96       	adiw	r24, 0x03	; 3
     c22:	6a e2       	ldi	r22, 0x2A	; 42
     c24:	70 e0       	ldi	r23, 0x00	; 0
     c26:	e7 dd       	rcall	.-1074   	; 0x7f6 <Endpoint_Write_Control_Stream_LE>
     c28:	12 c0       	rjmp	.+36     	; 0xc4e <USB_Device_ProcessControlRequest+0x268>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     c2a:	60 91 b0 01 	lds	r22, 0x01B0
     c2e:	ae 01       	movw	r20, r28
     c30:	4f 5f       	subi	r20, 0xFF	; 255
     c32:	5f 4f       	sbci	r21, 0xFF	; 255
     c34:	2c dc       	rcall	.-1960   	; 0x48e <CALLBACK_USB_GetDescriptor>
     c36:	bc 01       	movw	r22, r24
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	09 f4       	brne	.+2      	; 0xc3e <USB_Device_ProcessControlRequest+0x258>
     c3c:	3b c0       	rjmp	.+118    	; 0xcb4 <USB_Device_ProcessControlRequest+0x2ce>
     c3e:	80 91 e8 00 	lds	r24, 0x00E8
     c42:	87 7f       	andi	r24, 0xF7	; 247
     c44:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	9a 81       	ldd	r25, Y+2	; 0x02
     c4c:	6d de       	rcall	.-806    	; 0x928 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c4e:	80 91 e8 00 	lds	r24, 0x00E8
     c52:	8b 77       	andi	r24, 0x7B	; 123
     c54:	80 93 e8 00 	sts	0x00E8, r24
     c58:	2d c0       	rjmp	.+90     	; 0xcb4 <USB_Device_ProcessControlRequest+0x2ce>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     c5a:	80 38       	cpi	r24, 0x80	; 128
     c5c:	59 f5       	brne	.+86     	; 0xcb4 <USB_Device_ProcessControlRequest+0x2ce>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c5e:	80 91 e8 00 	lds	r24, 0x00E8
     c62:	87 7f       	andi	r24, 0xF7	; 247
     c64:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     c68:	80 91 a8 01 	lds	r24, 0x01A8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c6c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c70:	80 91 e8 00 	lds	r24, 0x00E8
     c74:	8e 77       	andi	r24, 0x7E	; 126
     c76:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     c7a:	4a dc       	rcall	.-1900   	; 0x510 <Endpoint_ClearStatusStage>
     c7c:	1b c0       	rjmp	.+54     	; 0xcb4 <USB_Device_ProcessControlRequest+0x2ce>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     c7e:	88 23       	and	r24, r24
     c80:	c9 f4       	brne	.+50     	; 0xcb4 <USB_Device_ProcessControlRequest+0x2ce>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     c82:	90 91 ae 01 	lds	r25, 0x01AE
     c86:	92 30       	cpi	r25, 0x02	; 2
     c88:	a8 f4       	brcc	.+42     	; 0xcb4 <USB_Device_ProcessControlRequest+0x2ce>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c8a:	80 91 e8 00 	lds	r24, 0x00E8
     c8e:	87 7f       	andi	r24, 0xF7	; 247
     c90:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     c94:	90 93 a8 01 	sts	0x01A8, r25

	Endpoint_ClearStatusStage();
     c98:	3b dc       	rcall	.-1930   	; 0x510 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     c9a:	80 91 a8 01 	lds	r24, 0x01A8
     c9e:	88 23       	and	r24, r24
     ca0:	31 f4       	brne	.+12     	; 0xcae <USB_Device_ProcessControlRequest+0x2c8>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     ca2:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     ca6:	87 fd       	sbrc	r24, 7
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <USB_Device_ProcessControlRequest+0x2c8>
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	01 c0       	rjmp	.+2      	; 0xcb0 <USB_Device_ProcessControlRequest+0x2ca>
     cae:	84 e0       	ldi	r24, 0x04	; 4
     cb0:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
     cb2:	04 db       	rcall	.-2552   	; 0x2bc <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cb4:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     cb8:	83 ff       	sbrs	r24, 3
     cba:	0a c0       	rjmp	.+20     	; 0xcd0 <USB_Device_ProcessControlRequest+0x2ea>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     cbc:	80 91 eb 00 	lds	r24, 0x00EB
     cc0:	80 62       	ori	r24, 0x20	; 32
     cc2:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cc6:	80 91 e8 00 	lds	r24, 0x00E8
     cca:	87 7f       	andi	r24, 0xF7	; 247
     ccc:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
     cd0:	ac 96       	adiw	r28, 0x2c	; 44
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	f8 94       	cli
     cd6:	de bf       	out	0x3e, r29	; 62
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	cd bf       	out	0x3d, r28	; 61
     cdc:	cf 91       	pop	r28
     cde:	df 91       	pop	r29
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	08 95       	ret

00000ce6 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     ce6:	08 95       	ret

00000ce8 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     ce8:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
     cea:	8e b3       	in	r24, 0x1e	; 30
     cec:	88 23       	and	r24, r24
     cee:	61 f0       	breq	.+24     	; 0xd08 <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     cf0:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     cf4:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cf8:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
     cfc:	83 ff       	sbrs	r24, 3
     cfe:	01 c0       	rjmp	.+2      	; 0xd02 <USB_USBTask+0x1a>
		  USB_Device_ProcessControlRequest();
     d00:	72 de       	rcall	.-796    	; 0x9e6 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     d02:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     d04:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
     d08:	1f 91       	pop	r17
     d0a:	08 95       	ret

00000d0c <CDC_Device_BytesReceived>:

	return ENDPOINT_READYWAIT_NoError;
}

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     d0c:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     d0e:	8e b3       	in	r24, 0x1e	; 30
     d10:	84 30       	cpi	r24, 0x04	; 4
     d12:	f1 f4       	brne	.+60     	; 0xd50 <CDC_Device_BytesReceived+0x44>
     d14:	87 85       	ldd	r24, Z+15	; 0x0f
     d16:	90 89       	ldd	r25, Z+16	; 0x10
     d18:	a1 89       	ldd	r26, Z+17	; 0x11
     d1a:	b2 89       	ldd	r27, Z+18	; 0x12
     d1c:	00 97       	sbiw	r24, 0x00	; 0
     d1e:	a1 05       	cpc	r26, r1
     d20:	b1 05       	cpc	r27, r1
     d22:	b1 f0       	breq	.+44     	; 0xd50 <CDC_Device_BytesReceived+0x44>
	  return 0;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
     d24:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     d26:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     d2a:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsOUTReceived())
     d2e:	82 ff       	sbrs	r24, 2
     d30:	0f c0       	rjmp	.+30     	; 0xd50 <CDC_Device_BytesReceived+0x44>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     d32:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (!(Endpoint_BytesInEndpoint()))
     d36:	88 23       	and	r24, r24
     d38:	31 f4       	brne	.+12     	; 0xd46 <CDC_Device_BytesReceived+0x3a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d3a:	80 91 e8 00 	lds	r24, 0x00E8
     d3e:	8b 77       	andi	r24, 0x7B	; 123
     d40:	80 93 e8 00 	sts	0x00E8, r24
     d44:	05 c0       	rjmp	.+10     	; 0xd50 <CDC_Device_BytesReceived+0x44>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     d46:	80 91 f2 00 	lds	r24, 0x00F2
     d4a:	28 2f       	mov	r18, r24
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <CDC_Device_BytesReceived+0x48>
			Endpoint_ClearOUT();
			return 0;
		}
		else
		{
			return Endpoint_BytesInEndpoint();
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e0       	ldi	r19, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
     d54:	c9 01       	movw	r24, r18
     d56:	08 95       	ret

00000d58 <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     d58:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     d5a:	8e b3       	in	r24, 0x1e	; 30
     d5c:	84 30       	cpi	r24, 0x04	; 4
     d5e:	21 f5       	brne	.+72     	; 0xda8 <CDC_Device_ReceiveByte+0x50>
     d60:	87 85       	ldd	r24, Z+15	; 0x0f
     d62:	90 89       	ldd	r25, Z+16	; 0x10
     d64:	a1 89       	ldd	r26, Z+17	; 0x11
     d66:	b2 89       	ldd	r27, Z+18	; 0x12
     d68:	00 97       	sbiw	r24, 0x00	; 0
     d6a:	a1 05       	cpc	r26, r1
     d6c:	b1 05       	cpc	r27, r1
     d6e:	e1 f0       	breq	.+56     	; 0xda8 <CDC_Device_ReceiveByte+0x50>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
     d70:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     d72:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     d76:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsOUTReceived())
     d7a:	82 ff       	sbrs	r24, 2
     d7c:	15 c0       	rjmp	.+42     	; 0xda8 <CDC_Device_ReceiveByte+0x50>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     d7e:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
     d82:	88 23       	and	r24, r24
     d84:	19 f4       	brne	.+6      	; 0xd8c <CDC_Device_ReceiveByte+0x34>
     d86:	2f ef       	ldi	r18, 0xFF	; 255
     d88:	3f ef       	ldi	r19, 0xFF	; 255
     d8a:	04 c0       	rjmp	.+8      	; 0xd94 <CDC_Device_ReceiveByte+0x3c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     d8c:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
     d90:	28 2f       	mov	r18, r24
     d92:	30 e0       	ldi	r19, 0x00	; 0
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     d94:	80 91 f2 00 	lds	r24, 0x00F2

		if (!(Endpoint_BytesInEndpoint()))
     d98:	88 23       	and	r24, r24
     d9a:	41 f4       	brne	.+16     	; 0xdac <CDC_Device_ReceiveByte+0x54>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d9c:	80 91 e8 00 	lds	r24, 0x00E8
     da0:	8b 77       	andi	r24, 0x7B	; 123
     da2:	80 93 e8 00 	sts	0x00E8, r24
     da6:	02 c0       	rjmp	.+4      	; 0xdac <CDC_Device_ReceiveByte+0x54>
     da8:	2f ef       	ldi	r18, 0xFF	; 255
     daa:	3f ef       	ldi	r19, 0xFF	; 255
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
     dac:	c9 01       	movw	r24, r18
     dae:	08 95       	ret

00000db0 <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
     db0:	08 95       	ret

00000db2 <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     db2:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     db4:	8e b3       	in	r24, 0x1e	; 30
     db6:	84 30       	cpi	r24, 0x04	; 4
     db8:	11 f5       	brne	.+68     	; 0xdfe <CDC_Device_Flush+0x4c>
     dba:	87 85       	ldd	r24, Z+15	; 0x0f
     dbc:	90 89       	ldd	r25, Z+16	; 0x10
     dbe:	a1 89       	ldd	r26, Z+17	; 0x11
     dc0:	b2 89       	ldd	r27, Z+18	; 0x12
     dc2:	00 97       	sbiw	r24, 0x00	; 0
     dc4:	a1 05       	cpc	r26, r1
     dc6:	b1 05       	cpc	r27, r1
     dc8:	d1 f0       	breq	.+52     	; 0xdfe <CDC_Device_Flush+0x4c>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
     dca:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     dcc:	80 93 e9 00 	sts	0x00E9, r24
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     dd0:	80 91 f2 00 	lds	r24, 0x00F2

	if (!(Endpoint_BytesInEndpoint()))
     dd4:	88 23       	and	r24, r24
     dd6:	a9 f0       	breq	.+42     	; 0xe02 <CDC_Device_Flush+0x50>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     dd8:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ddc:	80 91 e8 00 	lds	r24, 0x00E8
     de0:	8e 77       	andi	r24, 0x7E	; 126
     de2:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
     de6:	95 fd       	sbrc	r25, 5
     de8:	0c c0       	rjmp	.+24     	; 0xe02 <CDC_Device_Flush+0x50>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     dea:	b1 db       	rcall	.-2206   	; 0x54e <Endpoint_WaitUntilReady>
     dec:	98 2f       	mov	r25, r24
     dee:	88 23       	and	r24, r24
     df0:	49 f4       	brne	.+18     	; 0xe04 <CDC_Device_Flush+0x52>
     df2:	80 91 e8 00 	lds	r24, 0x00E8
     df6:	8e 77       	andi	r24, 0x7E	; 126
     df8:	80 93 e8 00 	sts	0x00E8, r24
     dfc:	03 c0       	rjmp	.+6      	; 0xe04 <CDC_Device_Flush+0x52>
     dfe:	92 e0       	ldi	r25, 0x02	; 2
     e00:	01 c0       	rjmp	.+2      	; 0xe04 <CDC_Device_Flush+0x52>
     e02:	90 e0       	ldi	r25, 0x00	; 0

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
     e04:	89 2f       	mov	r24, r25
     e06:	08 95       	ret

00000e08 <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     e08:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     e0a:	8e b3       	in	r24, 0x1e	; 30
     e0c:	84 30       	cpi	r24, 0x04	; 4
     e0e:	51 f4       	brne	.+20     	; 0xe24 <CDC_Device_USBTask+0x1c>
     e10:	87 85       	ldd	r24, Z+15	; 0x0f
     e12:	90 89       	ldd	r25, Z+16	; 0x10
     e14:	a1 89       	ldd	r26, Z+17	; 0x11
     e16:	b2 89       	ldd	r27, Z+18	; 0x12
     e18:	00 97       	sbiw	r24, 0x00	; 0
     e1a:	a1 05       	cpc	r26, r1
     e1c:	b1 05       	cpc	r27, r1
     e1e:	11 f0       	breq	.+4      	; 0xe24 <CDC_Device_USBTask+0x1c>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Device_Flush(CDCInterfaceInfo);
     e20:	cf 01       	movw	r24, r30
     e22:	c7 cf       	rjmp	.-114    	; 0xdb2 <CDC_Device_Flush>
     e24:	08 95       	ret

00000e26 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
     e26:	1f 93       	push	r17
     e28:	fc 01       	movw	r30, r24
     e2a:	16 2f       	mov	r17, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     e2c:	8e b3       	in	r24, 0x1e	; 30
     e2e:	84 30       	cpi	r24, 0x04	; 4
     e30:	d9 f4       	brne	.+54     	; 0xe68 <CDC_Device_SendByte+0x42>
     e32:	87 85       	ldd	r24, Z+15	; 0x0f
     e34:	90 89       	ldd	r25, Z+16	; 0x10
     e36:	a1 89       	ldd	r26, Z+17	; 0x11
     e38:	b2 89       	ldd	r27, Z+18	; 0x12
     e3a:	00 97       	sbiw	r24, 0x00	; 0
     e3c:	a1 05       	cpc	r26, r1
     e3e:	b1 05       	cpc	r27, r1
     e40:	99 f0       	breq	.+38     	; 0xe68 <CDC_Device_SendByte+0x42>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
     e42:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     e44:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     e48:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
     e4c:	85 fd       	sbrc	r24, 5
     e4e:	08 c0       	rjmp	.+16     	; 0xe60 <CDC_Device_SendByte+0x3a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e50:	80 91 e8 00 	lds	r24, 0x00E8
     e54:	8e 77       	andi	r24, 0x7E	; 126
     e56:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     e5a:	79 db       	rcall	.-2318   	; 0x54e <Endpoint_WaitUntilReady>
     e5c:	88 23       	and	r24, r24
     e5e:	29 f4       	brne	.+10     	; 0xe6a <CDC_Device_SendByte+0x44>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e60:	10 93 f1 00 	sts	0x00F1, r17
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	01 c0       	rjmp	.+2      	; 0xe6a <CDC_Device_SendByte+0x44>
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
     e68:	82 e0       	ldi	r24, 0x02	; 2
}
     e6a:	1f 91       	pop	r17
     e6c:	08 95       	ret

00000e6e <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     e6e:	1f 93       	push	r17
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
     e74:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     e76:	0d 96       	adiw	r24, 0x0d	; 13
     e78:	fc 01       	movw	r30, r24
     e7a:	89 e0       	ldi	r24, 0x09	; 9
     e7c:	df 01       	movw	r26, r30
     e7e:	1d 92       	st	X+, r1
     e80:	8a 95       	dec	r24
     e82:	e9 f7       	brne	.-6      	; 0xe7e <CDC_Device_ConfigureEndpoints+0x10>
     e84:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == CDCInterfaceInfo->Config.DataINEndpointNumber)
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	18 17       	cp	r17, r24
     e8a:	29 f4       	brne	.+10     	; 0xe96 <CDC_Device_ConfigureEndpoints+0x28>
		{
			Size         = CDCInterfaceInfo->Config.DataINEndpointSize;
     e8c:	6a 81       	ldd	r22, Y+2	; 0x02
     e8e:	7b 81       	ldd	r23, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataINEndpointDoubleBank;
     e90:	8c 81       	ldd	r24, Y+4	; 0x04
     e92:	52 e0       	ldi	r21, 0x02	; 2
     e94:	10 c0       	rjmp	.+32     	; 0xeb6 <CDC_Device_ConfigureEndpoints+0x48>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.DataOUTEndpointNumber)
     e96:	8d 81       	ldd	r24, Y+5	; 0x05
     e98:	18 17       	cp	r17, r24
     e9a:	31 f4       	brne	.+12     	; 0xea8 <CDC_Device_ConfigureEndpoints+0x3a>
		{
			Size         = CDCInterfaceInfo->Config.DataOUTEndpointSize;
     e9c:	6e 81       	ldd	r22, Y+6	; 0x06
     e9e:	7f 81       	ldd	r23, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
     ea0:	88 85       	ldd	r24, Y+8	; 0x08
     ea2:	52 e0       	ldi	r21, 0x02	; 2
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	08 c0       	rjmp	.+16     	; 0xeb8 <CDC_Device_ConfigureEndpoints+0x4a>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.NotificationEndpointNumber)
     ea8:	89 85       	ldd	r24, Y+9	; 0x09
     eaa:	18 17       	cp	r17, r24
     eac:	39 f5       	brne	.+78     	; 0xefc <CDC_Device_ConfigureEndpoints+0x8e>
		{
			Size         = CDCInterfaceInfo->Config.NotificationEndpointSize;
     eae:	6a 85       	ldd	r22, Y+10	; 0x0a
     eb0:	7b 85       	ldd	r23, Y+11	; 0x0b
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_INTERRUPT;
			DoubleBanked = CDCInterfaceInfo->Config.NotificationEndpointDoubleBank;
     eb2:	8c 85       	ldd	r24, Y+12	; 0x0c
     eb4:	53 e0       	ldi	r21, 0x03	; 3
     eb6:	30 e8       	ldi	r19, 0x80	; 128
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
     eb8:	88 23       	and	r24, r24
     eba:	11 f4       	brne	.+4      	; 0xec0 <CDC_Device_ConfigureEndpoints+0x52>
     ebc:	40 e0       	ldi	r20, 0x00	; 0
     ebe:	01 c0       	rjmp	.+2      	; 0xec2 <CDC_Device_ConfigureEndpoints+0x54>
     ec0:	44 e0       	ldi	r20, 0x04	; 4
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	88 e0       	ldi	r24, 0x08	; 8
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	03 c0       	rjmp	.+6      	; 0xed0 <CDC_Device_ConfigureEndpoints+0x62>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     eca:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     ecc:	88 0f       	add	r24, r24
     ece:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     ed0:	86 17       	cp	r24, r22
     ed2:	97 07       	cpc	r25, r23
     ed4:	d0 f3       	brcs	.-12     	; 0xeca <CDC_Device_ConfigureEndpoints+0x5c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     ed6:	85 2f       	mov	r24, r21
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	56 e0       	ldi	r21, 0x06	; 6
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	5a 95       	dec	r21
     ee2:	e1 f7       	brne	.-8      	; 0xedc <CDC_Device_ConfigureEndpoints+0x6e>
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	31 11       	cpse	r19, r1
     ee8:	61 e0       	ldi	r22, 0x01	; 1
     eea:	68 2b       	or	r22, r24
     eec:	42 60       	ori	r20, 0x02	; 2
     eee:	22 95       	swap	r18
     ef0:	20 7f       	andi	r18, 0xF0	; 240
     ef2:	42 2b       	or	r20, r18
     ef4:	81 2f       	mov	r24, r17
     ef6:	f9 da       	rcall	.-2574   	; 0x4ea <Endpoint_ConfigureEndpoint_Prv>
     ef8:	88 23       	and	r24, r24
     efa:	29 f0       	breq	.+10     	; 0xf06 <CDC_Device_ConfigureEndpoints+0x98>

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
     efc:	1f 5f       	subi	r17, 0xFF	; 255
     efe:	15 30       	cpi	r17, 0x05	; 5
     f00:	09 f0       	breq	.+2      	; 0xf04 <CDC_Device_ConfigureEndpoints+0x96>
     f02:	c1 cf       	rjmp	.-126    	; 0xe86 <CDC_Device_ConfigureEndpoints+0x18>
     f04:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
     f06:	df 91       	pop	r29
     f08:	cf 91       	pop	r28
     f0a:	1f 91       	pop	r17
     f0c:	08 95       	ret

00000f0e <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDC.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f14:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     f18:	83 ff       	sbrs	r24, 3
     f1a:	63 c0       	rjmp	.+198    	; 0xfe2 <CDC_Device_ProcessControlRequest+0xd4>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     f1c:	88 81       	ld	r24, Y
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	20 91 b0 01 	lds	r18, 0x01B0
     f24:	30 91 b1 01 	lds	r19, 0x01B1
     f28:	28 17       	cp	r18, r24
     f2a:	39 07       	cpc	r19, r25
     f2c:	09 f0       	breq	.+2      	; 0xf30 <CDC_Device_ProcessControlRequest+0x22>
     f2e:	59 c0       	rjmp	.+178    	; 0xfe2 <CDC_Device_ProcessControlRequest+0xd4>
	  return;

	switch (USB_ControlRequest.bRequest)
     f30:	80 91 ad 01 	lds	r24, 0x01AD
     f34:	81 32       	cpi	r24, 0x21	; 33
     f36:	61 f0       	breq	.+24     	; 0xf50 <CDC_Device_ProcessControlRequest+0x42>
     f38:	82 32       	cpi	r24, 0x22	; 34
     f3a:	20 f4       	brcc	.+8      	; 0xf44 <CDC_Device_ProcessControlRequest+0x36>
     f3c:	80 32       	cpi	r24, 0x20	; 32
     f3e:	09 f0       	breq	.+2      	; 0xf42 <CDC_Device_ProcessControlRequest+0x34>
     f40:	50 c0       	rjmp	.+160    	; 0xfe2 <CDC_Device_ProcessControlRequest+0xd4>
     f42:	1b c0       	rjmp	.+54     	; 0xf7a <CDC_Device_ProcessControlRequest+0x6c>
     f44:	82 32       	cpi	r24, 0x22	; 34
     f46:	79 f1       	breq	.+94     	; 0xfa6 <CDC_Device_ProcessControlRequest+0x98>
     f48:	83 32       	cpi	r24, 0x23	; 35
     f4a:	09 f0       	breq	.+2      	; 0xf4e <CDC_Device_ProcessControlRequest+0x40>
     f4c:	4a c0       	rjmp	.+148    	; 0xfe2 <CDC_Device_ProcessControlRequest+0xd4>
     f4e:	3b c0       	rjmp	.+118    	; 0xfc6 <CDC_Device_ProcessControlRequest+0xb8>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     f50:	80 91 ac 01 	lds	r24, 0x01AC
     f54:	81 3a       	cpi	r24, 0xA1	; 161
     f56:	09 f0       	breq	.+2      	; 0xf5a <CDC_Device_ProcessControlRequest+0x4c>
     f58:	44 c0       	rjmp	.+136    	; 0xfe2 <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f5a:	80 91 e8 00 	lds	r24, 0x00E8
     f5e:	87 7f       	andi	r24, 0xF7	; 247
     f60:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
     f64:	ce 01       	movw	r24, r28
     f66:	0f 96       	adiw	r24, 0x0f	; 15
     f68:	67 e0       	ldi	r22, 0x07	; 7
     f6a:	70 e0       	ldi	r23, 0x00	; 0
     f6c:	44 dc       	rcall	.-1912   	; 0x7f6 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f6e:	80 91 e8 00 	lds	r24, 0x00E8
     f72:	8b 77       	andi	r24, 0x7B	; 123
     f74:	80 93 e8 00 	sts	0x00E8, r24
     f78:	34 c0       	rjmp	.+104    	; 0xfe2 <CDC_Device_ProcessControlRequest+0xd4>
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f7a:	80 91 ac 01 	lds	r24, 0x01AC
     f7e:	81 32       	cpi	r24, 0x21	; 33
     f80:	81 f5       	brne	.+96     	; 0xfe2 <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f82:	80 91 e8 00 	lds	r24, 0x00E8
     f86:	87 7f       	andi	r24, 0xF7	; 247
     f88:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
     f8c:	ce 01       	movw	r24, r28
     f8e:	0f 96       	adiw	r24, 0x0f	; 15
     f90:	67 e0       	ldi	r22, 0x07	; 7
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	8c dc       	rcall	.-1768   	; 0x8ae <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f96:	80 91 e8 00 	lds	r24, 0x00E8
     f9a:	8e 77       	andi	r24, 0x7E	; 126
     f9c:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     fa0:	ce 01       	movw	r24, r28
     fa2:	f6 d8       	rcall	.-3604   	; 0x190 <EVENT_CDC_Device_LineEncodingChanged>
     fa4:	1e c0       	rjmp	.+60     	; 0xfe2 <CDC_Device_ProcessControlRequest+0xd4>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     fa6:	80 91 ac 01 	lds	r24, 0x01AC
     faa:	81 32       	cpi	r24, 0x21	; 33
     fac:	d1 f4       	brne	.+52     	; 0xfe2 <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fae:	80 91 e8 00 	lds	r24, 0x00E8
     fb2:	87 7f       	andi	r24, 0xF7	; 247
     fb4:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     fb8:	ab da       	rcall	.-2730   	; 0x510 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     fba:	80 91 ae 01 	lds	r24, 0x01AE
     fbe:	8d 87       	std	Y+13, r24	; 0x0d

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     fc0:	ce 01       	movw	r24, r28
     fc2:	62 d9       	rcall	.-3388   	; 0x288 <EVENT_CDC_Device_ControLineStateChanged>
     fc4:	0e c0       	rjmp	.+28     	; 0xfe2 <CDC_Device_ProcessControlRequest+0xd4>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     fc6:	80 91 ac 01 	lds	r24, 0x01AC
     fca:	81 32       	cpi	r24, 0x21	; 33
     fcc:	51 f4       	brne	.+20     	; 0xfe2 <CDC_Device_ProcessControlRequest+0xd4>
     fce:	80 91 e8 00 	lds	r24, 0x00E8
     fd2:	87 7f       	andi	r24, 0xF7	; 247
     fd4:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     fd8:	9b da       	rcall	.-2762   	; 0x510 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     fda:	ce 01       	movw	r24, r28
     fdc:	60 91 ae 01 	lds	r22, 0x01AE
     fe0:	e7 de       	rcall	.-562    	; 0xdb0 <CDC_Device_Event_Stub>
			}

			break;
	}
}
     fe2:	df 91       	pop	r29
     fe4:	cf 91       	pop	r28
     fe6:	08 95       	ret

00000fe8 <__udivmodsi4>:
     fe8:	a1 e2       	ldi	r26, 0x21	; 33
     fea:	1a 2e       	mov	r1, r26
     fec:	aa 1b       	sub	r26, r26
     fee:	bb 1b       	sub	r27, r27
     ff0:	fd 01       	movw	r30, r26
     ff2:	0d c0       	rjmp	.+26     	; 0x100e <__udivmodsi4_ep>

00000ff4 <__udivmodsi4_loop>:
     ff4:	aa 1f       	adc	r26, r26
     ff6:	bb 1f       	adc	r27, r27
     ff8:	ee 1f       	adc	r30, r30
     ffa:	ff 1f       	adc	r31, r31
     ffc:	a2 17       	cp	r26, r18
     ffe:	b3 07       	cpc	r27, r19
    1000:	e4 07       	cpc	r30, r20
    1002:	f5 07       	cpc	r31, r21
    1004:	20 f0       	brcs	.+8      	; 0x100e <__udivmodsi4_ep>
    1006:	a2 1b       	sub	r26, r18
    1008:	b3 0b       	sbc	r27, r19
    100a:	e4 0b       	sbc	r30, r20
    100c:	f5 0b       	sbc	r31, r21

0000100e <__udivmodsi4_ep>:
    100e:	66 1f       	adc	r22, r22
    1010:	77 1f       	adc	r23, r23
    1012:	88 1f       	adc	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	1a 94       	dec	r1
    1018:	69 f7       	brne	.-38     	; 0xff4 <__udivmodsi4_loop>
    101a:	60 95       	com	r22
    101c:	70 95       	com	r23
    101e:	80 95       	com	r24
    1020:	90 95       	com	r25
    1022:	9b 01       	movw	r18, r22
    1024:	ac 01       	movw	r20, r24
    1026:	bd 01       	movw	r22, r26
    1028:	cf 01       	movw	r24, r30
    102a:	08 95       	ret

0000102c <_exit>:
    102c:	f8 94       	cli

0000102e <__stop_program>:
    102e:	ff cf       	rjmp	.-2      	; 0x102e <__stop_program>
