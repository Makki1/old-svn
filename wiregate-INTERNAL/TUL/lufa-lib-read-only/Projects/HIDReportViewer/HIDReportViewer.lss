
HIDReportViewer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00002748  000027dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002748  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fb  00800134  00800134  00002810  2**0
                  ALLOC
  3 .stab         00002208  00000000  00000000  00002810  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dff  00000000  00000000  00004a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000006e8  00000000  00000000  00005817  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001003  00000000  00000000  00005eff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000bb03  00000000  00000000  00006f02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002883  00000000  00000000  00012a05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007b0b  00000000  00000000  00015288  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b50  00000000  00000000  0001cd94  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000045d8  00000000  00000000  0001d8e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005781  00000000  00000000  00021ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007b8  00000000  00000000  0002763d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}

uint8_t Pipe_WaitUntilReady(void)
{
       0:	96 c2       	rjmp	.+1324   	; 0x52e <__ctors_end>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       2:	00 00       	nop
	return USB_Host_SendControlRequest(NULL);
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
       4:	b2 c2       	rjmp	.+1380   	; 0x56a <__bad_interrupt>
		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
}
       6:	00 00       	nop
		return USB_Host_SendControlRequest(Buffer);
	}
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
       8:	b0 c2       	rjmp	.+1376   	; 0x56a <__bad_interrupt>

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       a:	00 00       	nop
       c:	ae c2       	rjmp	.+1372   	; 0x56a <__bad_interrupt>
       e:	00 00       	nop
      10:	ac c2       	rjmp	.+1368   	; 0x56a <__bad_interrupt>
      12:	00 00       	nop
      14:	aa c2       	rjmp	.+1364   	; 0x56a <__bad_interrupt>
      16:	00 00       	nop
      18:	a8 c2       	rjmp	.+1360   	; 0x56a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a6 c2       	rjmp	.+1356   	; 0x56a <__bad_interrupt>
      1e:	00 00       	nop
      20:	a4 c2       	rjmp	.+1352   	; 0x56a <__bad_interrupt>
      22:	00 00       	nop
      24:	a2 c2       	rjmp	.+1348   	; 0x56a <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 3d 08 	jmp	0x107a	; 0x107a <__vector_10>
      2c:	9e c2       	rjmp	.+1340   	; 0x56a <__bad_interrupt>
      2e:	00 00       	nop
      30:	9c c2       	rjmp	.+1336   	; 0x56a <__bad_interrupt>
      32:	00 00       	nop
      34:	9a c2       	rjmp	.+1332   	; 0x56a <__bad_interrupt>
      36:	00 00       	nop
      38:	98 c2       	rjmp	.+1328   	; 0x56a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	96 c2       	rjmp	.+1324   	; 0x56a <__bad_interrupt>
      3e:	00 00       	nop
      40:	94 c2       	rjmp	.+1320   	; 0x56a <__bad_interrupt>
      42:	00 00       	nop
      44:	92 c2       	rjmp	.+1316   	; 0x56a <__bad_interrupt>
      46:	00 00       	nop
      48:	90 c2       	rjmp	.+1312   	; 0x56a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8e c2       	rjmp	.+1308   	; 0x56a <__bad_interrupt>
      4e:	00 00       	nop
      50:	8c c2       	rjmp	.+1304   	; 0x56a <__bad_interrupt>
      52:	00 00       	nop
      54:	8a c2       	rjmp	.+1300   	; 0x56a <__bad_interrupt>
      56:	00 00       	nop
      58:	88 c2       	rjmp	.+1296   	; 0x56a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	86 c2       	rjmp	.+1292   	; 0x56a <__bad_interrupt>
      5e:	00 00       	nop
      60:	84 c2       	rjmp	.+1288   	; 0x56a <__bad_interrupt>
      62:	00 00       	nop
      64:	82 c2       	rjmp	.+1284   	; 0x56a <__bad_interrupt>
      66:	00 00       	nop
      68:	80 c2       	rjmp	.+1280   	; 0x56a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7e c2       	rjmp	.+1276   	; 0x56a <__bad_interrupt>
      6e:	00 00       	nop
      70:	7c c2       	rjmp	.+1272   	; 0x56a <__bad_interrupt>
      72:	00 00       	nop
      74:	7a c2       	rjmp	.+1268   	; 0x56a <__bad_interrupt>
      76:	00 00       	nop
      78:	78 c2       	rjmp	.+1264   	; 0x56a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	76 c2       	rjmp	.+1260   	; 0x56a <__bad_interrupt>
      7e:	00 00       	nop
      80:	74 c2       	rjmp	.+1256   	; 0x56a <__bad_interrupt>
      82:	00 00       	nop
      84:	72 c2       	rjmp	.+1252   	; 0x56a <__bad_interrupt>
      86:	00 00       	nop
      88:	70 c2       	rjmp	.+1248   	; 0x56a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6e c2       	rjmp	.+1244   	; 0x56a <__bad_interrupt>
      8e:	00 00       	nop
      90:	6c c2       	rjmp	.+1240   	; 0x56a <__bad_interrupt>
      92:	00 00       	nop
      94:	6a c2       	rjmp	.+1236   	; 0x56a <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4664>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4656>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4646>:
     11d:	48 49 44 20 44 65 76 69 63 65 20 45 6e 75 6d 65     HID Device Enume
     12d:	72 61 74 65 64 2e 0d 0a 00                          rated....

00000136 <__c.4644>:
     136:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 52 65     Error Setting Re
     146:	70 6f 72 74 20 50 72 6f 74 6f 63 6f 6c 20 4d 6f     port Protocol Mo
     156:	64 65 2e 0d 0a 00                                   de....

0000015c <__c.4642>:
     15c:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     16c:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     17c:	6f 6e 2e 0d 0a 00                                   on....

00000182 <__c.4640>:
     182:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     192:	4e 6f 74 20 61 20 56 61 6c 69 64 20 48 49 44 20     Not a Valid HID 
     1a2:	44 65 76 69 63 65 2e 0d 0a 00                       Device....

000001ac <__c.4638>:
     1ac:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1bc:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1cc:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001d9 <__c.4631>:
     1d9:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1e9:	68 65 64 2e 0d 0a 00                                hed....

000001f0 <__c.4626>:
     1f0:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     200:	0d 0a 00                                            ...

00000203 <__c.4613>:
     203:	20 20 20 20 20 20 7c 0d 0a 20 20 20 20 20 20 45           |..      E
     213:	4e 44 0d 0a 00                                      ND...

00000218 <__c.4608>:
     218:	20 20 20 20 20 20 7c 0d 0a 20 20 20 20 20 20 2d           |..      -
     228:	20 54 79 70 65 3a 20 20 30 78 25 30 32 58 0d 0a      Type:  0x%02X..
     238:	20 20 20 20 20 20 2d 20 55 73 61 67 65 3a 20 30           - Usage: 0
     248:	78 25 30 32 58 0d 0a 00                             x%02X...

00000250 <__c.4575>:
     250:	20 20 2b 20 49 74 65 6d 20 25 64 3a 0d 0a 20 20       + Item %d:..  
     260:	20 20 2d 20 52 65 70 6f 72 74 20 49 44 3a 20 20       - Report ID:  
     270:	20 20 20 20 20 20 20 20 30 78 25 30 32 58 0d 0a             0x%02X..
     280:	20 20 20 20 2d 20 44 61 74 61 20 44 69 72 65 63         - Data Direc
     290:	74 69 6f 6e 3a 20 20 20 20 20 25 73 0d 0a 20 20     tion:     %s..  
     2a0:	20 20 2d 20 49 74 65 6d 20 46 6c 61 67 73 3a 20       - Item Flags: 
     2b0:	20 20 20 20 20 20 20 20 30 78 25 30 32 58 0d 0a             0x%02X..
     2c0:	20 20 20 20 2d 20 49 74 65 6d 20 4f 66 66 73 65         - Item Offse
     2d0:	74 20 28 42 69 74 73 29 3a 20 30 78 25 30 32 58     t (Bits): 0x%02X
     2e0:	0d 0a 20 20 20 20 2d 20 49 74 65 6d 20 53 69 7a     ..    - Item Siz
     2f0:	65 20 28 42 69 74 73 29 3a 20 20 20 30 78 25 30     e (Bits):   0x%0
     300:	32 58 0d 0a 20 20 20 20 2d 20 55 73 61 67 65 20     2X..    - Usage 
     310:	50 61 67 65 3a 20 20 20 20 20 20 20 20 20 30 78     Page:         0x
     320:	25 30 34 58 0d 0a 20 20 20 20 2d 20 55 73 61 67     %04X..    - Usag
     330:	65 3a 20 20 20 20 20 20 20 20 20 20 20 20 20 20     e:              
     340:	30 78 25 30 34 58 0d 0a 20 20 20 20 2d 20 55 6e     0x%04X..    - Un
     350:	69 74 20 54 79 70 65 3a 20 20 20 20 20 20 20 20     it Type:        
     360:	20 20 30 78 25 30 38 6c 58 0d 0a 20 20 20 20 2d       0x%08lX..    -
     370:	20 55 6e 69 74 20 45 78 70 6f 6e 65 6e 74 3a 20      Unit Exponent: 
     380:	20 20 20 20 20 30 78 25 30 32 58 0d 0a 20 20 20          0x%02X..   
     390:	20 2d 20 4c 6f 67 69 63 61 6c 20 4d 69 6e 69 6d      - Logical Minim
     3a0:	75 6d 3a 20 20 20 20 30 78 25 30 38 6c 58 0d 0a     um:    0x%08lX..
     3b0:	20 20 20 20 2d 20 4c 6f 67 69 63 61 6c 20 4d 61         - Logical Ma
     3c0:	78 69 6d 75 6d 3a 20 20 20 20 30 78 25 30 38 6c     ximum:    0x%08l
     3d0:	58 0d 0a 20 20 20 20 2d 20 50 68 79 73 69 63 61     X..    - Physica
     3e0:	6c 20 4d 69 6e 69 6d 75 6d 3a 20 20 20 30 78 25     l Minimum:   0x%
     3f0:	30 38 6c 58 0d 0a 20 20 20 20 2d 20 50 68 79 73     08lX..    - Phys
     400:	69 63 61 6c 20 4d 61 78 69 6d 75 6d 3a 20 20 20     ical Maximum:   
     410:	30 78 25 30 38 6c 58 0d 0a 20 20 20 20 2d 20 43     0x%08lX..    - C
     420:	6f 6c 6c 65 63 74 69 6f 6e 20 50 61 74 68 3a 0d     ollection Path:.
     430:	0a 00                                               ..

00000432 <__c.4571>:
     432:	0d 0a 52 65 70 6f 72 74 20 49 74 65 6d 73 20 28     ..Report Items (
     442:	25 64 20 69 6e 20 54 61 62 6c 65 29 3a 0d 0a 00     %d in Table):...

00000452 <__c.4536>:
     452:	20 20 2b 20 52 65 70 6f 72 74 20 49 44 20 30 78       + Report ID 0x
     462:	25 30 32 58 0d 0a 20 20 20 20 2d 20 49 6e 70 75     %02X..    - Inpu
     472:	74 20 44 61 74 61 3a 20 20 20 25 64 20 62 69 74     t Data:   %d bit
     482:	73 20 28 25 64 20 62 79 74 65 73 29 0d 0a 20 20     s (%d bytes)..  
     492:	20 20 2d 20 4f 75 74 70 75 74 20 44 61 74 61 3a       - Output Data:
     4a2:	20 20 25 64 20 62 69 74 73 20 28 25 64 20 62 79       %d bits (%d by
     4b2:	74 65 73 29 0d 0a 20 20 20 20 2d 20 46 65 61 74     tes)..    - Feat
     4c2:	75 72 65 20 44 61 74 61 3a 20 25 64 20 62 69 74     ure Data: %d bit
     4d2:	73 20 28 25 64 20 62 79 74 65 73 29 0d 0a 00        s (%d bytes)...

000004e1 <__c.4529>:
     4e1:	0d 0a 0d 0a 54 6f 74 61 6c 20 44 65 76 69 63 65     ....Total Device
     4f1:	20 52 65 70 6f 72 74 73 3a 20 25 64 0d 0a 00         Reports: %d...

00000500 <__c.4519>:
     500:	1b 5b 33 36 6d 48 49 44 20 44 65 76 69 63 65 20     .[36mHID Device 
     510:	52 65 70 6f 72 74 20 56 69 65 77 65 72 20 52 75     Report Viewer Ru
     520:	6e 6e 69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00           nning....[37m.

0000052e <__ctors_end>:
     52e:	11 24       	eor	r1, r1
     530:	1f be       	out	0x3f, r1	; 63
     532:	cf ef       	ldi	r28, 0xFF	; 255
     534:	d0 e2       	ldi	r29, 0x20	; 32
     536:	de bf       	out	0x3e, r29	; 62
     538:	cd bf       	out	0x3d, r28	; 61

0000053a <__do_copy_data>:
     53a:	11 e0       	ldi	r17, 0x01	; 1
     53c:	a0 e0       	ldi	r26, 0x00	; 0
     53e:	b1 e0       	ldi	r27, 0x01	; 1
     540:	e8 e4       	ldi	r30, 0x48	; 72
     542:	f7 e2       	ldi	r31, 0x27	; 39
     544:	00 e0       	ldi	r16, 0x00	; 0
     546:	0b bf       	out	0x3b, r16	; 59
     548:	02 c0       	rjmp	.+4      	; 0x54e <__do_copy_data+0x14>
     54a:	07 90       	elpm	r0, Z+
     54c:	0d 92       	st	X+, r0
     54e:	a4 33       	cpi	r26, 0x34	; 52
     550:	b1 07       	cpc	r27, r17
     552:	d9 f7       	brne	.-10     	; 0x54a <__do_copy_data+0x10>

00000554 <__do_clear_bss>:
     554:	15 e0       	ldi	r17, 0x05	; 5
     556:	a4 e3       	ldi	r26, 0x34	; 52
     558:	b1 e0       	ldi	r27, 0x01	; 1
     55a:	01 c0       	rjmp	.+2      	; 0x55e <.do_clear_bss_start>

0000055c <.do_clear_bss_loop>:
     55c:	1d 92       	st	X+, r1

0000055e <.do_clear_bss_start>:
     55e:	af 32       	cpi	r26, 0x2F	; 47
     560:	b1 07       	cpc	r27, r17
     562:	e1 f7       	brne	.-8      	; 0x55c <.do_clear_bss_loop>
     564:	a3 d2       	rcall	.+1350   	; 0xaac <main>
     566:	0c 94 a2 13 	jmp	0x2744	; 0x2744 <_exit>

0000056a <__bad_interrupt>:
     56a:	4a cd       	rjmp	.-1388   	; 0x0 <__vectors>

0000056c <CALLBACK_HIDParser_FilterHIDReportItem>:
 *  \return Boolean true if the item should be stored into the HID report structure, false if it should be discarded
 */
bool CALLBACK_HIDParser_FilterHIDReportItem(HID_ReportItem_t* const CurrentItem)
{
	return true;
}
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	08 95       	ret

00000570 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     570:	90 91 1a 05 	lds	r25, 0x051A
     574:	2d b7       	in	r18, 0x3d	; 61
     576:	3e b7       	in	r19, 0x3e	; 62
     578:	28 50       	subi	r18, 0x08	; 8
     57a:	30 40       	sbci	r19, 0x00	; 0
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	f8 94       	cli
     580:	3e bf       	out	0x3e, r19	; 62
     582:	0f be       	out	0x3f, r0	; 63
     584:	2d bf       	out	0x3d, r18	; 61
     586:	ed b7       	in	r30, 0x3d	; 61
     588:	fe b7       	in	r31, 0x3e	; 62
     58a:	31 96       	adiw	r30, 0x01	; 1
     58c:	28 e9       	ldi	r18, 0x98	; 152
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	ad b7       	in	r26, 0x3d	; 61
     592:	be b7       	in	r27, 0x3e	; 62
     594:	12 96       	adiw	r26, 0x02	; 2
     596:	3c 93       	st	X, r19
     598:	2e 93       	st	-X, r18
     59a:	11 97       	sbiw	r26, 0x01	; 1
     59c:	82 83       	std	Z+2, r24	; 0x02
     59e:	13 82       	std	Z+3, r1	; 0x03
     5a0:	64 83       	std	Z+4, r22	; 0x04
     5a2:	15 82       	std	Z+5, r1	; 0x05
     5a4:	96 83       	std	Z+6, r25	; 0x06
     5a6:	17 82       	std	Z+7, r1	; 0x07
     5a8:	0e 94 b2 10 	call	0x2164	; 0x2164 <printf_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     5ac:	8b b1       	in	r24, 0x0b	; 11
     5ae:	8f 70       	andi	r24, 0x0F	; 15
     5b0:	80 69       	ori	r24, 0x90	; 144
     5b2:	8b b9       	out	0x0b, r24	; 11
     5b4:	2d b7       	in	r18, 0x3d	; 61
     5b6:	3e b7       	in	r19, 0x3e	; 62
     5b8:	28 5f       	subi	r18, 0xF8	; 248
     5ba:	3f 4f       	sbci	r19, 0xFF	; 255
     5bc:	0f b6       	in	r0, 0x3f	; 63
     5be:	f8 94       	cli
     5c0:	3e bf       	out	0x3e, r19	; 62
     5c2:	0f be       	out	0x3f, r0	; 63
     5c4:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     5c6:	08 95       	ret

000005c8 <OutputCollectionPath>:
 *  for display to the user, from the given starting node to the root node.
 *
 *  \param[in] CollectionPath  Starting HID Collection node to print
 */
void OutputCollectionPath(const HID_CollectionPath_t* const CollectionPath)
{
     5c8:	0f 93       	push	r16
     5ca:	1f 93       	push	r17
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	ec 01       	movw	r28, r24
	const HID_CollectionPath_t* CurrentNode = CollectionPath;

	while (CurrentNode != NULL)
	{
		printf_P(PSTR("      |\r\n"
     5d2:	08 e1       	ldi	r16, 0x18	; 24
     5d4:	12 e0       	ldi	r17, 0x02	; 2
     5d6:	29 c0       	rjmp	.+82     	; 0x62a <OutputCollectionPath+0x62>
     5d8:	8d b7       	in	r24, 0x3d	; 61
     5da:	9e b7       	in	r25, 0x3e	; 62
     5dc:	08 97       	sbiw	r24, 0x08	; 8
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	f8 94       	cli
     5e2:	9e bf       	out	0x3e, r25	; 62
     5e4:	0f be       	out	0x3f, r0	; 63
     5e6:	8d bf       	out	0x3d, r24	; 61
     5e8:	ed b7       	in	r30, 0x3d	; 61
     5ea:	fe b7       	in	r31, 0x3e	; 62
     5ec:	31 96       	adiw	r30, 0x01	; 1
     5ee:	ad b7       	in	r26, 0x3d	; 61
     5f0:	be b7       	in	r27, 0x3e	; 62
     5f2:	12 96       	adiw	r26, 0x02	; 2
     5f4:	1c 93       	st	X, r17
     5f6:	0e 93       	st	-X, r16
     5f8:	11 97       	sbiw	r26, 0x01	; 1
     5fa:	88 81       	ld	r24, Y
     5fc:	82 83       	std	Z+2, r24	; 0x02
     5fe:	13 82       	std	Z+3, r1	; 0x03
     600:	89 81       	ldd	r24, Y+1	; 0x01
     602:	9a 81       	ldd	r25, Y+2	; 0x02
     604:	ab 81       	ldd	r26, Y+3	; 0x03
     606:	bc 81       	ldd	r27, Y+4	; 0x04
     608:	84 83       	std	Z+4, r24	; 0x04
     60a:	95 83       	std	Z+5, r25	; 0x05
     60c:	a6 83       	std	Z+6, r26	; 0x06
     60e:	b7 83       	std	Z+7, r27	; 0x07
     610:	0e 94 b2 10 	call	0x2164	; 0x2164 <printf_P>
					  "      - Type:  0x%02" PRIX8 "\r\n"
					  "      - Usage: 0x%02" PRIX8 "\r\n"),
					  CurrentNode->Type, CurrentNode->Usage);
		
		CurrentNode = CurrentNode->Parent;
     614:	0d 80       	ldd	r0, Y+5	; 0x05
     616:	de 81       	ldd	r29, Y+6	; 0x06
     618:	c0 2d       	mov	r28, r0
     61a:	ed b7       	in	r30, 0x3d	; 61
     61c:	fe b7       	in	r31, 0x3e	; 62
     61e:	38 96       	adiw	r30, 0x08	; 8
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	f8 94       	cli
     624:	fe bf       	out	0x3e, r31	; 62
     626:	0f be       	out	0x3f, r0	; 63
     628:	ed bf       	out	0x3d, r30	; 61
 */
void OutputCollectionPath(const HID_CollectionPath_t* const CollectionPath)
{
	const HID_CollectionPath_t* CurrentNode = CollectionPath;

	while (CurrentNode != NULL)
     62a:	20 97       	sbiw	r28, 0x00	; 0
     62c:	a9 f6       	brne	.-86     	; 0x5d8 <OutputCollectionPath+0x10>
					  CurrentNode->Type, CurrentNode->Usage);
		
		CurrentNode = CurrentNode->Parent;
	}
	
	printf_P(PSTR("      |\r\n"
     62e:	00 d0       	rcall	.+0      	; 0x630 <OutputCollectionPath+0x68>
     630:	83 e0       	ldi	r24, 0x03	; 3
     632:	92 e0       	ldi	r25, 0x02	; 2
     634:	ad b7       	in	r26, 0x3d	; 61
     636:	be b7       	in	r27, 0x3e	; 62
     638:	12 96       	adiw	r26, 0x02	; 2
     63a:	9c 93       	st	X, r25
     63c:	8e 93       	st	-X, r24
     63e:	11 97       	sbiw	r26, 0x01	; 1
     640:	0e 94 b2 10 	call	0x2164	; 0x2164 <printf_P>
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
				  "      END\r\n"));
}
     648:	df 91       	pop	r29
     64a:	cf 91       	pop	r28
     64c:	1f 91       	pop	r17
     64e:	0f 91       	pop	r16
     650:	08 95       	ret

00000652 <OutputParsedReportItems>:

/** Prints a summary of the device's parsed and stored report items along with their attributes
 *  to the serial port for display to the user.
 */
void OutputParsedReportItems(void)
{
     652:	ef 92       	push	r14
     654:	ff 92       	push	r15
     656:	0f 93       	push	r16
     658:	1f 93       	push	r17
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
	printf_P(PSTR("\r\nReport Items (%" PRId8 " in Table):\r\n"), HIDReportInfo.TotalReportItems);
     65e:	00 d0       	rcall	.+0      	; 0x660 <OutputParsedReportItems+0xe>
     660:	00 d0       	rcall	.+0      	; 0x662 <OutputParsedReportItems+0x10>
     662:	ed b7       	in	r30, 0x3d	; 61
     664:	fe b7       	in	r31, 0x3e	; 62
     666:	31 96       	adiw	r30, 0x01	; 1
     668:	82 e3       	ldi	r24, 0x32	; 50
     66a:	94 e0       	ldi	r25, 0x04	; 4
     66c:	ad b7       	in	r26, 0x3d	; 61
     66e:	be b7       	in	r27, 0x3e	; 62
     670:	12 96       	adiw	r26, 0x02	; 2
     672:	9c 93       	st	X, r25
     674:	8e 93       	st	-X, r24
     676:	11 97       	sbiw	r26, 0x01	; 1
     678:	80 91 34 01 	lds	r24, 0x0134
     67c:	82 83       	std	Z+2, r24	; 0x02
     67e:	13 82       	std	Z+3, r1	; 0x03
     680:	0e 94 b2 10 	call	0x2164	; 0x2164 <printf_P>
     684:	10 e0       	ldi	r17, 0x00	; 0
     686:	0f 90       	pop	r0
     688:	0f 90       	pop	r0
     68a:	0f 90       	pop	r0
     68c:	0f 90       	pop	r0

	for (uint8_t ItemIndex = 0; ItemIndex < HIDReportInfo.TotalReportItems; ItemIndex++)
	{
		const HID_ReportItem_t* RItem = &HIDReportInfo.ReportItems[ItemIndex];
     68e:	0a e2       	ldi	r16, 0x2A	; 42

		printf_P(PSTR("  + Item %" PRId8 ":\r\n"
     690:	80 e5       	ldi	r24, 0x50	; 80
     692:	e8 2e       	mov	r14, r24
     694:	82 e0       	ldi	r24, 0x02	; 2
     696:	f8 2e       	mov	r15, r24
     698:	78 c0       	rjmp	.+240    	; 0x78a <OutputParsedReportItems+0x138>
{
	printf_P(PSTR("\r\nReport Items (%" PRId8 " in Table):\r\n"), HIDReportInfo.TotalReportItems);

	for (uint8_t ItemIndex = 0; ItemIndex < HIDReportInfo.TotalReportItems; ItemIndex++)
	{
		const HID_ReportItem_t* RItem = &HIDReportInfo.ReportItems[ItemIndex];
     69a:	10 9f       	mul	r17, r16
     69c:	e0 01       	movw	r28, r0
     69e:	11 24       	eor	r1, r1
     6a0:	cb 5c       	subi	r28, 0xCB	; 203
     6a2:	de 4f       	sbci	r29, 0xFE	; 254

		printf_P(PSTR("  + Item %" PRId8 ":\r\n"
     6a4:	2d 81       	ldd	r18, Y+5	; 0x05
     6a6:	8a 81       	ldd	r24, Y+2	; 0x02
     6a8:	88 23       	and	r24, r24
     6aa:	19 f4       	brne	.+6      	; 0x6b2 <OutputParsedReportItems+0x60>
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	07 c0       	rjmp	.+14     	; 0x6c0 <OutputParsedReportItems+0x6e>
     6b2:	81 30       	cpi	r24, 0x01	; 1
     6b4:	19 f0       	breq	.+6      	; 0x6bc <OutputParsedReportItems+0x6a>
     6b6:	83 e0       	ldi	r24, 0x03	; 3
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <OutputParsedReportItems+0x6e>
     6bc:	8b e0       	ldi	r24, 0x0B	; 11
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	4d b7       	in	r20, 0x3d	; 61
     6c2:	5e b7       	in	r21, 0x3e	; 62
     6c4:	48 52       	subi	r20, 0x28	; 40
     6c6:	50 40       	sbci	r21, 0x00	; 0
     6c8:	0f b6       	in	r0, 0x3f	; 63
     6ca:	f8 94       	cli
     6cc:	5e bf       	out	0x3e, r21	; 62
     6ce:	0f be       	out	0x3f, r0	; 63
     6d0:	4d bf       	out	0x3d, r20	; 61
     6d2:	ed b7       	in	r30, 0x3d	; 61
     6d4:	fe b7       	in	r31, 0x3e	; 62
     6d6:	31 96       	adiw	r30, 0x01	; 1
     6d8:	ad b7       	in	r26, 0x3d	; 61
     6da:	be b7       	in	r27, 0x3e	; 62
     6dc:	12 96       	adiw	r26, 0x02	; 2
     6de:	fc 92       	st	X, r15
     6e0:	ee 92       	st	-X, r14
     6e2:	11 97       	sbiw	r26, 0x01	; 1
     6e4:	12 83       	std	Z+2, r17	; 0x02
     6e6:	13 82       	std	Z+3, r1	; 0x03
     6e8:	24 83       	std	Z+4, r18	; 0x04
     6ea:	15 82       	std	Z+5, r1	; 0x05
     6ec:	97 83       	std	Z+7, r25	; 0x07
     6ee:	86 83       	std	Z+6, r24	; 0x06
     6f0:	8b 81       	ldd	r24, Y+3	; 0x03
     6f2:	9c 81       	ldd	r25, Y+4	; 0x04
     6f4:	91 87       	std	Z+9, r25	; 0x09
     6f6:	80 87       	std	Z+8, r24	; 0x08
     6f8:	88 81       	ld	r24, Y
     6fa:	99 81       	ldd	r25, Y+1	; 0x01
     6fc:	93 87       	std	Z+11, r25	; 0x0b
     6fe:	82 87       	std	Z+10, r24	; 0x0a
     700:	88 85       	ldd	r24, Y+8	; 0x08
     702:	84 87       	std	Z+12, r24	; 0x0c
     704:	15 86       	std	Z+13, r1	; 0x0d
     706:	89 85       	ldd	r24, Y+9	; 0x09
     708:	9a 85       	ldd	r25, Y+10	; 0x0a
     70a:	97 87       	std	Z+15, r25	; 0x0f
     70c:	86 87       	std	Z+14, r24	; 0x0e
     70e:	8b 85       	ldd	r24, Y+11	; 0x0b
     710:	9c 85       	ldd	r25, Y+12	; 0x0c
     712:	91 8b       	std	Z+17, r25	; 0x11
     714:	80 8b       	std	Z+16, r24	; 0x10
     716:	8d 85       	ldd	r24, Y+13	; 0x0d
     718:	9e 85       	ldd	r25, Y+14	; 0x0e
     71a:	af 85       	ldd	r26, Y+15	; 0x0f
     71c:	b8 89       	ldd	r27, Y+16	; 0x10
     71e:	82 8b       	std	Z+18, r24	; 0x12
     720:	93 8b       	std	Z+19, r25	; 0x13
     722:	a4 8b       	std	Z+20, r26	; 0x14
     724:	b5 8b       	std	Z+21, r27	; 0x15
     726:	89 89       	ldd	r24, Y+17	; 0x11
     728:	86 8b       	std	Z+22, r24	; 0x16
     72a:	17 8a       	std	Z+23, r1	; 0x17
     72c:	8a 89       	ldd	r24, Y+18	; 0x12
     72e:	9b 89       	ldd	r25, Y+19	; 0x13
     730:	ac 89       	ldd	r26, Y+20	; 0x14
     732:	bd 89       	ldd	r27, Y+21	; 0x15
     734:	80 8f       	std	Z+24, r24	; 0x18
     736:	91 8f       	std	Z+25, r25	; 0x19
     738:	a2 8f       	std	Z+26, r26	; 0x1a
     73a:	b3 8f       	std	Z+27, r27	; 0x1b
     73c:	8e 89       	ldd	r24, Y+22	; 0x16
     73e:	9f 89       	ldd	r25, Y+23	; 0x17
     740:	a8 8d       	ldd	r26, Y+24	; 0x18
     742:	b9 8d       	ldd	r27, Y+25	; 0x19
     744:	84 8f       	std	Z+28, r24	; 0x1c
     746:	95 8f       	std	Z+29, r25	; 0x1d
     748:	a6 8f       	std	Z+30, r26	; 0x1e
     74a:	b7 8f       	std	Z+31, r27	; 0x1f
     74c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     74e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     750:	ac 8d       	ldd	r26, Y+28	; 0x1c
     752:	bd 8d       	ldd	r27, Y+29	; 0x1d
     754:	80 a3       	std	Z+32, r24	; 0x20
     756:	91 a3       	std	Z+33, r25	; 0x21
     758:	a2 a3       	std	Z+34, r26	; 0x22
     75a:	b3 a3       	std	Z+35, r27	; 0x23
     75c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     75e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     760:	a8 a1       	ldd	r26, Y+32	; 0x20
     762:	b9 a1       	ldd	r27, Y+33	; 0x21
     764:	84 a3       	std	Z+36, r24	; 0x24
     766:	95 a3       	std	Z+37, r25	; 0x25
     768:	a6 a3       	std	Z+38, r26	; 0x26
     76a:	b7 a3       	std	Z+39, r27	; 0x27
     76c:	0e 94 b2 10 	call	0x2164	; 0x2164 <printf_P>
				 RItem->Attributes.Logical.Minimum,
				 RItem->Attributes.Logical.Maximum,
				 RItem->Attributes.Physical.Minimum,
				 RItem->Attributes.Physical.Maximum);
		
		OutputCollectionPath(RItem->CollectionPath);
     770:	4d b7       	in	r20, 0x3d	; 61
     772:	5e b7       	in	r21, 0x3e	; 62
     774:	48 5d       	subi	r20, 0xD8	; 216
     776:	5f 4f       	sbci	r21, 0xFF	; 255
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	f8 94       	cli
     77c:	5e bf       	out	0x3e, r21	; 62
     77e:	0f be       	out	0x3f, r0	; 63
     780:	4d bf       	out	0x3d, r20	; 61
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	9f 81       	ldd	r25, Y+7	; 0x07
     786:	20 df       	rcall	.-448    	; 0x5c8 <OutputCollectionPath>
 */
void OutputParsedReportItems(void)
{
	printf_P(PSTR("\r\nReport Items (%" PRId8 " in Table):\r\n"), HIDReportInfo.TotalReportItems);

	for (uint8_t ItemIndex = 0; ItemIndex < HIDReportInfo.TotalReportItems; ItemIndex++)
     788:	1f 5f       	subi	r17, 0xFF	; 255
     78a:	80 91 34 01 	lds	r24, 0x0134
     78e:	18 17       	cp	r17, r24
     790:	08 f4       	brcc	.+2      	; 0x794 <OutputParsedReportItems+0x142>
     792:	83 cf       	rjmp	.-250    	; 0x69a <OutputParsedReportItems+0x48>
				 RItem->Attributes.Physical.Minimum,
				 RItem->Attributes.Physical.Maximum);
		
		OutputCollectionPath(RItem->CollectionPath);
	}
}
     794:	df 91       	pop	r29
     796:	cf 91       	pop	r28
     798:	1f 91       	pop	r17
     79a:	0f 91       	pop	r16
     79c:	ff 90       	pop	r15
     79e:	ef 90       	pop	r14
     7a0:	08 95       	ret

000007a2 <OutputReportSizes>:

/** Prints a summary of the device's HID report sizes from the HID parser output to the serial port
 *  for display to the user.
 */
void OutputReportSizes(void)
{
     7a2:	af 92       	push	r10
     7a4:	bf 92       	push	r11
     7a6:	df 92       	push	r13
     7a8:	ef 92       	push	r14
     7aa:	ff 92       	push	r15
     7ac:	0f 93       	push	r16
     7ae:	1f 93       	push	r17
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
	printf_P(PSTR("\r\n\r\nTotal Device Reports: %" PRId8 "\r\n"), HIDReportInfo.TotalDeviceReports);
     7b4:	00 d0       	rcall	.+0      	; 0x7b6 <OutputReportSizes+0x14>
     7b6:	00 d0       	rcall	.+0      	; 0x7b8 <OutputReportSizes+0x16>
     7b8:	ed b7       	in	r30, 0x3d	; 61
     7ba:	fe b7       	in	r31, 0x3e	; 62
     7bc:	31 96       	adiw	r30, 0x01	; 1
     7be:	81 ee       	ldi	r24, 0xE1	; 225
     7c0:	94 e0       	ldi	r25, 0x04	; 4
     7c2:	ad b7       	in	r26, 0x3d	; 61
     7c4:	be b7       	in	r27, 0x3e	; 62
     7c6:	12 96       	adiw	r26, 0x02	; 2
     7c8:	9c 93       	st	X, r25
     7ca:	8e 93       	st	-X, r24
     7cc:	11 97       	sbiw	r26, 0x01	; 1
     7ce:	80 91 c3 04 	lds	r24, 0x04C3
     7d2:	82 83       	std	Z+2, r24	; 0x02
     7d4:	13 82       	std	Z+3, r1	; 0x03
     7d6:	0e 94 b2 10 	call	0x2164	; 0x2164 <printf_P>
     7da:	ee 24       	eor	r14, r14
     7dc:	0f 90       	pop	r0
     7de:	0f 90       	pop	r0
     7e0:	0f 90       	pop	r0
     7e2:	0f 90       	pop	r0

	for (uint8_t ReportIndex = 0; ReportIndex < HIDReportInfo.TotalDeviceReports; ReportIndex++)
	{
		const HID_ReportSizeInfo_t* CurrReportIDInfo = &HIDReportInfo.ReportIDSizes[ReportIndex];
     7e4:	27 e0       	ldi	r18, 0x07	; 7
     7e6:	d2 2e       	mov	r13, r18
		uint8_t ReportSizeInBits      = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_In];
		uint8_t ReportSizeOutBits     = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Out];
		uint8_t ReportSizeFeatureBits = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Feature];

		/* Print out the byte sizes of each report within the device */
		printf_P(PSTR("  + Report ID 0x%02" PRIX8 "\r\n"
     7e8:	92 e5       	ldi	r25, 0x52	; 82
     7ea:	a9 2e       	mov	r10, r25
     7ec:	94 e0       	ldi	r25, 0x04	; 4
     7ee:	b9 2e       	mov	r11, r25
     7f0:	6c c0       	rjmp	.+216    	; 0x8ca <OutputReportSizes+0x128>
{
	printf_P(PSTR("\r\n\r\nTotal Device Reports: %" PRId8 "\r\n"), HIDReportInfo.TotalDeviceReports);

	for (uint8_t ReportIndex = 0; ReportIndex < HIDReportInfo.TotalDeviceReports; ReportIndex++)
	{
		const HID_ReportSizeInfo_t* CurrReportIDInfo = &HIDReportInfo.ReportIDSizes[ReportIndex];
     7f2:	ed 9c       	mul	r14, r13
     7f4:	f0 01       	movw	r30, r0
     7f6:	11 24       	eor	r1, r1
     7f8:	ec 53       	subi	r30, 0x3C	; 60
     7fa:	fb 4f       	sbci	r31, 0xFB	; 251

		uint8_t ReportSizeInBits      = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_In];
     7fc:	11 81       	ldd	r17, Z+1	; 0x01
		uint8_t ReportSizeOutBits     = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Out];
     7fe:	03 81       	ldd	r16, Z+3	; 0x03
		uint8_t ReportSizeFeatureBits = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Feature];
     800:	f5 80       	ldd	r15, Z+5	; 0x05

		/* Print out the byte sizes of each report within the device */
		printf_P(PSTR("  + Report ID 0x%02" PRIX8 "\r\n"
     802:	21 2f       	mov	r18, r17
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	40 2f       	mov	r20, r16
     808:	50 e0       	ldi	r21, 0x00	; 0
     80a:	6f 2d       	mov	r22, r15
     80c:	70 e0       	ldi	r23, 0x00	; 0
     80e:	cd b7       	in	r28, 0x3d	; 61
     810:	de b7       	in	r29, 0x3e	; 62
     812:	60 97       	sbiw	r28, 0x10	; 16
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	f8 94       	cli
     818:	de bf       	out	0x3e, r29	; 62
     81a:	0f be       	out	0x3f, r0	; 63
     81c:	cd bf       	out	0x3d, r28	; 61
     81e:	ad b7       	in	r26, 0x3d	; 61
     820:	be b7       	in	r27, 0x3e	; 62
     822:	11 96       	adiw	r26, 0x01	; 1
     824:	ba 82       	std	Y+2, r11	; 0x02
     826:	a9 82       	std	Y+1, r10	; 0x01
     828:	80 81       	ld	r24, Z
     82a:	12 96       	adiw	r26, 0x02	; 2
     82c:	8c 93       	st	X, r24
     82e:	12 97       	sbiw	r26, 0x02	; 2
     830:	13 96       	adiw	r26, 0x03	; 3
     832:	1c 92       	st	X, r1
     834:	13 97       	sbiw	r26, 0x03	; 3
     836:	15 96       	adiw	r26, 0x05	; 5
     838:	3c 93       	st	X, r19
     83a:	2e 93       	st	-X, r18
     83c:	14 97       	sbiw	r26, 0x04	; 4
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	27 70       	andi	r18, 0x07	; 7
     844:	30 70       	andi	r19, 0x00	; 0
     846:	23 2b       	or	r18, r19
     848:	11 f0       	breq	.+4      	; 0x84e <OutputReportSizes+0xac>
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	16 95       	lsr	r17
     850:	16 95       	lsr	r17
     852:	16 95       	lsr	r17
     854:	81 0f       	add	r24, r17
     856:	91 1d       	adc	r25, r1
     858:	17 96       	adiw	r26, 0x07	; 7
     85a:	9c 93       	st	X, r25
     85c:	8e 93       	st	-X, r24
     85e:	16 97       	sbiw	r26, 0x06	; 6
     860:	19 96       	adiw	r26, 0x09	; 9
     862:	5c 93       	st	X, r21
     864:	4e 93       	st	-X, r20
     866:	18 97       	sbiw	r26, 0x08	; 8
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	47 70       	andi	r20, 0x07	; 7
     86e:	50 70       	andi	r21, 0x00	; 0
     870:	45 2b       	or	r20, r21
     872:	11 f0       	breq	.+4      	; 0x878 <OutputReportSizes+0xd6>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	06 95       	lsr	r16
     87a:	06 95       	lsr	r16
     87c:	06 95       	lsr	r16
     87e:	80 0f       	add	r24, r16
     880:	91 1d       	adc	r25, r1
     882:	1b 96       	adiw	r26, 0x0b	; 11
     884:	9c 93       	st	X, r25
     886:	8e 93       	st	-X, r24
     888:	1a 97       	sbiw	r26, 0x0a	; 10
     88a:	1d 96       	adiw	r26, 0x0d	; 13
     88c:	7c 93       	st	X, r23
     88e:	6e 93       	st	-X, r22
     890:	1c 97       	sbiw	r26, 0x0c	; 12
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	67 70       	andi	r22, 0x07	; 7
     898:	70 70       	andi	r23, 0x00	; 0
     89a:	67 2b       	or	r22, r23
     89c:	11 f0       	breq	.+4      	; 0x8a2 <OutputReportSizes+0x100>
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	f6 94       	lsr	r15
     8a4:	f6 94       	lsr	r15
     8a6:	f6 94       	lsr	r15
     8a8:	8f 0d       	add	r24, r15
     8aa:	91 1d       	adc	r25, r1
     8ac:	1f 96       	adiw	r26, 0x0f	; 15
     8ae:	9c 93       	st	X, r25
     8b0:	8e 93       	st	-X, r24
     8b2:	1e 97       	sbiw	r26, 0x0e	; 14
     8b4:	0e 94 b2 10 	call	0x2164	; 0x2164 <printf_P>
 */
void OutputReportSizes(void)
{
	printf_P(PSTR("\r\n\r\nTotal Device Reports: %" PRId8 "\r\n"), HIDReportInfo.TotalDeviceReports);

	for (uint8_t ReportIndex = 0; ReportIndex < HIDReportInfo.TotalDeviceReports; ReportIndex++)
     8b8:	e3 94       	inc	r14
     8ba:	8d b7       	in	r24, 0x3d	; 61
     8bc:	9e b7       	in	r25, 0x3e	; 62
     8be:	40 96       	adiw	r24, 0x10	; 16
     8c0:	0f b6       	in	r0, 0x3f	; 63
     8c2:	f8 94       	cli
     8c4:	9e bf       	out	0x3e, r25	; 62
     8c6:	0f be       	out	0x3f, r0	; 63
     8c8:	8d bf       	out	0x3d, r24	; 61
     8ca:	80 91 c3 04 	lds	r24, 0x04C3
     8ce:	e8 16       	cp	r14, r24
     8d0:	08 f4       	brcc	.+2      	; 0x8d4 <OutputReportSizes+0x132>
     8d2:	8f cf       	rjmp	.-226    	; 0x7f2 <OutputReportSizes+0x50>
				 ReportSizeOutBits,
				 ((ReportSizeOutBits     >> 3) + ((ReportSizeOutBits     & 0x07) != 0)),
				 ReportSizeFeatureBits,
				 ((ReportSizeFeatureBits >> 3) + ((ReportSizeFeatureBits & 0x07) != 0)));
	}
}
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	1f 91       	pop	r17
     8da:	0f 91       	pop	r16
     8dc:	ff 90       	pop	r15
     8de:	ef 90       	pop	r14
     8e0:	df 90       	pop	r13
     8e2:	bf 90       	pop	r11
     8e4:	af 90       	pop	r10
     8e6:	08 95       	ret

000008e8 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     8e8:	1f 93       	push	r17
     8ea:	18 2f       	mov	r17, r24
	USB_Disable();
     8ec:	a1 d3       	rcall	.+1858   	; 0x1030 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     8ee:	00 d0       	rcall	.+0      	; 0x8f0 <EVENT_USB_Host_HostError+0x8>
     8f0:	00 d0       	rcall	.+0      	; 0x8f2 <EVENT_USB_Host_HostError+0xa>
     8f2:	ed b7       	in	r30, 0x3d	; 61
     8f4:	fe b7       	in	r31, 0x3e	; 62
     8f6:	31 96       	adiw	r30, 0x01	; 1
     8f8:	8e ee       	ldi	r24, 0xEE	; 238
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	ad b7       	in	r26, 0x3d	; 61
     8fe:	be b7       	in	r27, 0x3e	; 62
     900:	12 96       	adiw	r26, 0x02	; 2
     902:	9c 93       	st	X, r25
     904:	8e 93       	st	-X, r24
     906:	11 97       	sbiw	r26, 0x01	; 1
     908:	12 83       	std	Z+2, r17	; 0x02
     90a:	13 82       	std	Z+3, r1	; 0x03
     90c:	0e 94 b2 10 	call	0x2164	; 0x2164 <printf_P>
     910:	8b b1       	in	r24, 0x0b	; 11
     912:	8f 70       	andi	r24, 0x0F	; 15
     914:	80 69       	ori	r24, 0x90	; 144
     916:	8b b9       	out	0x0b, r24	; 11
     918:	0f 90       	pop	r0
     91a:	0f 90       	pop	r0
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	ff cf       	rjmp	.-2      	; 0x920 <EVENT_USB_Host_HostError+0x38>

00000922 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     922:	89 ed       	ldi	r24, 0xD9	; 217
     924:	91 e0       	ldi	r25, 0x01	; 1
     926:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <puts_P>
     92a:	8b b1       	in	r24, 0x0b	; 11
     92c:	8f 70       	andi	r24, 0x0F	; 15
     92e:	80 61       	ori	r24, 0x10	; 16
     930:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     932:	08 95       	ret

00000934 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     934:	80 ef       	ldi	r24, 0xF0	; 240
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <puts_P>
     93c:	8b b1       	in	r24, 0x0b	; 11
     93e:	8f 70       	andi	r24, 0x0F	; 15
     940:	80 6a       	ori	r24, 0xA0	; 160
     942:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     944:	08 95       	ret

00000946 <RetrieveDeviceData>:
     946:	8b b1       	in	r24, 0x0b	; 11
     948:	8f 70       	andi	r24, 0x0F	; 15
     94a:	80 6d       	ori	r24, 0xD0	; 208
     94c:	8b b9       	out	0x0b, r24	; 11
	if (USB_CurrentMode != USB_MODE_Host)
	  return;
	
	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
	
	OutputReportSizes();
     94e:	29 df       	rcall	.-430    	; 0x7a2 <OutputReportSizes>
	OutputParsedReportItems();
     950:	80 de       	rcall	.-768    	; 0x652 <OutputParsedReportItems>
     952:	8b b1       	in	r24, 0x0b	; 11
     954:	8f 70       	andi	r24, 0x0F	; 15
     956:	80 66       	ori	r24, 0x60	; 96
     958:	8b b9       	out	0x0b, r24	; 11
	
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
	USB_Host_SetDeviceConfiguration(0);
     95a:	80 e0       	ldi	r24, 0x00	; 0
}
     95c:	07 c6       	rjmp	.+3086   	; 0x156c <USB_Host_SetDeviceConfiguration>

0000095e <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     95e:	0f 93       	push	r16
     960:	1f 93       	push	r17
     962:	df 93       	push	r29
     964:	cf 93       	push	r28
     966:	cd b7       	in	r28, 0x3d	; 61
     968:	de b7       	in	r29, 0x3e	; 62
     96a:	c2 50       	subi	r28, 0x02	; 2
     96c:	d2 40       	sbci	r29, 0x02	; 2
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	f8 94       	cli
     972:	de bf       	out	0x3e, r29	; 62
     974:	0f be       	out	0x3f, r0	; 63
     976:	cd bf       	out	0x3d, r28	; 61
     978:	8b b1       	in	r24, 0x0b	; 11
     97a:	8f 70       	andi	r24, 0x0F	; 15
     97c:	80 6a       	ori	r24, 0xA0	; 160
     97e:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     980:	8e 01       	movw	r16, r28
     982:	0d 5f       	subi	r16, 0xFD	; 253
     984:	1f 4f       	sbci	r17, 0xFF	; 255
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	be 01       	movw	r22, r28
     98a:	6f 5f       	subi	r22, 0xFF	; 255
     98c:	7f 4f       	sbci	r23, 0xFF	; 255
     98e:	a8 01       	movw	r20, r16
     990:	20 e0       	ldi	r18, 0x00	; 0
     992:	32 e0       	ldi	r19, 0x02	; 2
     994:	49 d4       	rcall	.+2194   	; 0x1228 <USB_Host_GetDeviceConfigDescriptor>
     996:	88 23       	and	r24, r24
     998:	19 f0       	breq	.+6      	; 0x9a0 <EVENT_USB_Host_DeviceEnumerationComplete+0x42>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     99a:	8c ea       	ldi	r24, 0xAC	; 172
     99c:	91 e0       	ldi	r25, 0x01	; 1
     99e:	12 c0       	rjmp	.+36     	; 0x9c4 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_ConfigurePipes(&Device_HID_Interface,
     9a0:	69 81       	ldd	r22, Y+1	; 0x01
     9a2:	7a 81       	ldd	r23, Y+2	; 0x02
     9a4:	8f e0       	ldi	r24, 0x0F	; 15
     9a6:	91 e0       	ldi	r25, 0x01	; 1
     9a8:	a8 01       	movw	r20, r16
     9aa:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <HID_Host_ConfigurePipes>
     9ae:	88 23       	and	r24, r24
     9b0:	19 f0       	breq	.+6      	; 0x9b8 <EVENT_USB_Host_DeviceEnumerationComplete+0x5a>
	                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid HID Device.\r\n"));
     9b2:	82 e8       	ldi	r24, 0x82	; 130
     9b4:	91 e0       	ldi	r25, 0x01	; 1
     9b6:	06 c0       	rjmp	.+12     	; 0x9c4 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	d8 d5       	rcall	.+2992   	; 0x156c <USB_Host_SetDeviceConfiguration>
     9bc:	88 23       	and	r24, r24
     9be:	41 f0       	breq	.+16     	; 0x9d0 <EVENT_USB_Host_DeviceEnumerationComplete+0x72>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     9c0:	8c e5       	ldi	r24, 0x5C	; 92
     9c2:	91 e0       	ldi	r25, 0x01	; 1
     9c4:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <puts_P>
     9c8:	8b b1       	in	r24, 0x0b	; 11
     9ca:	8f 70       	andi	r24, 0x0F	; 15
     9cc:	80 69       	ori	r24, 0x90	; 144
     9ce:	18 c0       	rjmp	.+48     	; 0xa00 <EVENT_USB_Host_DeviceEnumerationComplete+0xa2>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_SetReportProtocol(&Device_HID_Interface) != 0)
     9d0:	8f e0       	ldi	r24, 0x0F	; 15
     9d2:	91 e0       	ldi	r25, 0x01	; 1
     9d4:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <HID_Host_SetReportProtocol>
     9d8:	88 23       	and	r24, r24
     9da:	59 f0       	breq	.+22     	; 0x9f2 <EVENT_USB_Host_DeviceEnumerationComplete+0x94>
	{
		puts_P(PSTR("Error Setting Report Protocol Mode.\r\n"));
     9dc:	86 e3       	ldi	r24, 0x36	; 54
     9de:	91 e0       	ldi	r25, 0x01	; 1
     9e0:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <puts_P>
     9e4:	8b b1       	in	r24, 0x0b	; 11
     9e6:	8f 70       	andi	r24, 0x0F	; 15
     9e8:	80 69       	ori	r24, 0x90	; 144
     9ea:	8b b9       	out	0x0b, r24	; 11
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	be d5       	rcall	.+2940   	; 0x156c <USB_Host_SetDeviceConfiguration>
     9f0:	08 c0       	rjmp	.+16     	; 0xa02 <EVENT_USB_Host_DeviceEnumerationComplete+0xa4>
		return;
	}

	puts_P(PSTR("HID Device Enumerated.\r\n"));
     9f2:	8d e1       	ldi	r24, 0x1D	; 29
     9f4:	91 e0       	ldi	r25, 0x01	; 1
     9f6:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <puts_P>
     9fa:	8b b1       	in	r24, 0x0b	; 11
     9fc:	8f 70       	andi	r24, 0x0F	; 15
     9fe:	80 66       	ori	r24, 0x60	; 96
     a00:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     a02:	ce 5f       	subi	r28, 0xFE	; 254
     a04:	dd 4f       	sbci	r29, 0xFD	; 253
     a06:	0f b6       	in	r0, 0x3f	; 63
     a08:	f8 94       	cli
     a0a:	de bf       	out	0x3e, r29	; 62
     a0c:	0f be       	out	0x3f, r0	; 63
     a0e:	cd bf       	out	0x3d, r28	; 61
     a10:	cf 91       	pop	r28
     a12:	df 91       	pop	r29
     a14:	1f 91       	pop	r17
     a16:	0f 91       	pop	r16
     a18:	08 95       	ret

00000a1a <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     a1a:	84 b7       	in	r24, 0x34	; 52
     a1c:	87 7f       	andi	r24, 0xF7	; 247
     a1e:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     a20:	28 e1       	ldi	r18, 0x18	; 24
     a22:	0f b6       	in	r0, 0x3f	; 63
     a24:	f8 94       	cli
     a26:	20 93 60 00 	sts	0x0060, r18
     a2a:	10 92 60 00 	sts	0x0060, r1
     a2e:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	80 e8       	ldi	r24, 0x80	; 128
     a34:	0f b6       	in	r0, 0x3f	; 63
     a36:	f8 94       	cli
     a38:	80 93 61 00 	sts	0x0061, r24
     a3c:	90 93 61 00 	sts	0x0061, r25
     a40:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     a42:	83 e3       	ldi	r24, 0x33	; 51
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	90 93 cd 00 	sts	0x00CD, r25
     a4a:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     a4e:	86 e0       	ldi	r24, 0x06	; 6
     a50:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     a54:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     a58:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     a5c:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     a5e:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     a60:	8a b1       	in	r24, 0x0a	; 10
     a62:	80 6f       	ori	r24, 0xF0	; 240
     a64:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     a66:	8b b1       	in	r24, 0x0b	; 11
     a68:	8f 70       	andi	r24, 0x0F	; 15
     a6a:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     a6c:	d8 d2       	rcall	.+1456   	; 0x101e <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     a6e:	eb e1       	ldi	r30, 0x1B	; 27
     a70:	f5 e0       	ldi	r31, 0x05	; 5
     a72:	f0 93 2a 05 	sts	0x052A, r31
     a76:	e0 93 29 05 	sts	0x0529, r30
					stdout = Stream;
     a7a:	f0 93 2c 05 	sts	0x052C, r31
     a7e:	e0 93 2b 05 	sts	0x052B, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     a82:	8e e0       	ldi	r24, 0x0E	; 14
     a84:	df 01       	movw	r26, r30
     a86:	1d 92       	st	X+, r1
     a88:	8a 95       	dec	r24
     a8a:	e9 f7       	brne	.-6      	; 0xa86 <SetupHardware+0x6c>
     a8c:	83 e0       	ldi	r24, 0x03	; 3
     a8e:	80 93 1e 05 	sts	0x051E, r24
     a92:	84 e9       	ldi	r24, 0x94	; 148
     a94:	90 e1       	ldi	r25, 0x10	; 16
     a96:	90 93 24 05 	sts	0x0524, r25
     a9a:	80 93 23 05 	sts	0x0523, r24
     a9e:	8e e9       	ldi	r24, 0x9E	; 158
     aa0:	90 e1       	ldi	r25, 0x10	; 16
     aa2:	90 93 26 05 	sts	0x0526, r25
     aa6:	80 93 25 05 	sts	0x0525, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     aaa:	08 95       	ret

00000aac <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     aac:	b6 df       	rcall	.-148    	; 0xa1a <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "HID Device Report Viewer Running.\r\n" ESC_FG_WHITE));
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	95 e0       	ldi	r25, 0x05	; 5
     ab2:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     ab6:	8b b1       	in	r24, 0x0b	; 11
     ab8:	8f 70       	andi	r24, 0x0F	; 15
     aba:	80 61       	ori	r24, 0x10	; 16
     abc:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     abe:	78 94       	sei

	for (;;)
	{
		RetrieveDeviceData();
     ac0:	42 df       	rcall	.-380    	; 0x946 <RetrieveDeviceData>
		
		HID_Host_USBTask(&Device_HID_Interface);
		USB_USBTask();
     ac2:	79 d5       	rcall	.+2802   	; 0x15b6 <USB_USBTask>
     ac4:	fd cf       	rjmp	.-6      	; 0xac0 <main+0x14>

00000ac6 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     ac6:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     ac8:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     acc:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     ad0:	80 91 a0 00 	lds	r24, 0x00A0
     ad4:	8f 7d       	andi	r24, 0xDF	; 223
     ad6:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     ada:	80 91 9f 00 	lds	r24, 0x009F
     ade:	8f 7d       	andi	r24, 0xDF	; 223
     ae0:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     ae4:	80 91 9e 00 	lds	r24, 0x009E
     ae8:	81 60       	ori	r24, 0x01	; 1
     aea:	80 93 9e 00 	sts	0x009E, r24
     aee:	28 c0       	rjmp	.+80     	; 0xb40 <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     af0:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     af4:	85 ff       	sbrs	r24, 5
     af6:	06 c0       	rjmp	.+12     	; 0xb04 <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     af8:	80 91 9f 00 	lds	r24, 0x009F
     afc:	8f 7d       	andi	r24, 0xDF	; 223
     afe:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     b02:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     b04:	80 91 1a 05 	lds	r24, 0x051A
     b08:	81 30       	cpi	r24, 0x01	; 1
     b0a:	11 f4       	brne	.+4      	; 0xb10 <USB_Host_WaitMS+0x4a>
     b0c:	91 e0       	ldi	r25, 0x01	; 1
     b0e:	1a c0       	rjmp	.+52     	; 0xb44 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     b10:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     b14:	84 ff       	sbrs	r24, 4
     b16:	09 c0       	rjmp	.+18     	; 0xb2a <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     b18:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     b1c:	80 91 a6 00 	lds	r24, 0x00A6
     b20:	8f 7e       	andi	r24, 0xEF	; 239
     b22:	80 93 a6 00 	sts	0x00A6, r24
     b26:	92 e0       	ldi	r25, 0x02	; 2
     b28:	0d c0       	rjmp	.+26     	; 0xb44 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     b2a:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     b2e:	81 ff       	sbrs	r24, 1
     b30:	07 c0       	rjmp	.+14     	; 0xb40 <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     b32:	80 91 a6 00 	lds	r24, 0x00A6
     b36:	8d 7f       	andi	r24, 0xFD	; 253
     b38:	80 93 a6 00 	sts	0x00A6, r24
     b3c:	93 e0       	ldi	r25, 0x03	; 3
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     b40:	99 23       	and	r25, r25
     b42:	b1 f6       	brne	.-84     	; 0xaf0 <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     b44:	20 fd       	sbrc	r18, 0
     b46:	05 c0       	rjmp	.+10     	; 0xb52 <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     b48:	80 91 9e 00 	lds	r24, 0x009E
     b4c:	8e 7f       	andi	r24, 0xFE	; 254
     b4e:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     b52:	35 ff       	sbrs	r19, 5
     b54:	05 c0       	rjmp	.+10     	; 0xb60 <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     b56:	80 91 a0 00 	lds	r24, 0x00A0
     b5a:	80 62       	ori	r24, 0x20	; 32
     b5c:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     b60:	89 2f       	mov	r24, r25
     b62:	08 95       	ret

00000b64 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     b64:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     b68:	80 91 a0 00 	lds	r24, 0x00A0
     b6c:	8d 7f       	andi	r24, 0xFD	; 253
     b6e:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     b72:	80 91 9e 00 	lds	r24, 0x009E
     b76:	82 60       	ori	r24, 0x02	; 2
     b78:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     b7c:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     b80:	81 fd       	sbrc	r24, 1
     b82:	fc cf       	rjmp	.-8      	; 0xb7c <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     b84:	80 91 9e 00 	lds	r24, 0x009E
     b88:	81 60       	ori	r24, 0x01	; 1
     b8a:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     b8e:	10 92 10 05 	sts	0x0510, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     b92:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     b96:	80 91 a0 00 	lds	r24, 0x00A0
     b9a:	8f 7d       	andi	r24, 0xDF	; 223
     b9c:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     ba0:	80 91 9f 00 	lds	r24, 0x009F
     ba4:	8f 7d       	andi	r24, 0xDF	; 223
     ba6:	80 93 9f 00 	sts	0x009F, r24
     baa:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bac:	40 ed       	ldi	r20, 0xD0	; 208
     bae:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     bb0:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     bb4:	85 ff       	sbrs	r24, 5
     bb6:	0b c0       	rjmp	.+22     	; 0xbce <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     bb8:	80 91 9f 00 	lds	r24, 0x009F
     bbc:	8f 7d       	andi	r24, 0xDF	; 223
     bbe:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     bc2:	80 91 9f 00 	lds	r24, 0x009F
     bc6:	8d 7f       	andi	r24, 0xFD	; 253
     bc8:	80 93 9f 00 	sts	0x009F, r24
     bcc:	05 c0       	rjmp	.+10     	; 0xbd8 <USB_Host_ResetDevice+0x74>
     bce:	ca 01       	movw	r24, r20
     bd0:	01 97       	sbiw	r24, 0x01	; 1
     bd2:	f1 f7       	brne	.-4      	; 0xbd0 <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     bd4:	21 50       	subi	r18, 0x01	; 1
     bd6:	61 f7       	brne	.-40     	; 0xbb0 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     bd8:	35 ff       	sbrs	r19, 5
     bda:	05 c0       	rjmp	.+10     	; 0xbe6 <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     bdc:	80 91 a0 00 	lds	r24, 0x00A0
     be0:	80 62       	ori	r24, 0x20	; 32
     be2:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     be6:	60 fd       	sbrc	r22, 0
     be8:	05 c0       	rjmp	.+10     	; 0xbf4 <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     bea:	80 91 9e 00 	lds	r24, 0x009E
     bee:	8e 7f       	andi	r24, 0xFE	; 254
     bf0:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     bf4:	80 91 a0 00 	lds	r24, 0x00A0
     bf8:	82 60       	ori	r24, 0x02	; 2
     bfa:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     bfe:	08 95       	ret

00000c00 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     c00:	ef 92       	push	r14
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	df 93       	push	r29
     c08:	cf 93       	push	r28
     c0a:	cd b7       	in	r28, 0x3d	; 61
     c0c:	de b7       	in	r29, 0x3e	; 62
     c0e:	28 97       	sbiw	r28, 0x08	; 8
     c10:	0f b6       	in	r0, 0x3f	; 63
     c12:	f8 94       	cli
     c14:	de bf       	out	0x3e, r29	; 62
     c16:	0f be       	out	0x3f, r0	; 63
     c18:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     c1a:	80 91 1a 05 	lds	r24, 0x051A
     c1e:	85 30       	cpi	r24, 0x05	; 5
     c20:	09 f4       	brne	.+2      	; 0xc24 <USB_Host_ProcessNextHostState+0x24>
     c22:	94 c0       	rjmp	.+296    	; 0xd4c <USB_Host_ProcessNextHostState+0x14c>
     c24:	86 30       	cpi	r24, 0x06	; 6
     c26:	68 f4       	brcc	.+26     	; 0xc42 <USB_Host_ProcessNextHostState+0x42>
     c28:	82 30       	cpi	r24, 0x02	; 2
     c2a:	b9 f1       	breq	.+110    	; 0xc9a <USB_Host_ProcessNextHostState+0x9a>
     c2c:	83 30       	cpi	r24, 0x03	; 3
     c2e:	18 f4       	brcc	.+6      	; 0xc36 <USB_Host_ProcessNextHostState+0x36>
     c30:	88 23       	and	r24, r24
     c32:	a1 f0       	breq	.+40     	; 0xc5c <USB_Host_ProcessNextHostState+0x5c>
     c34:	04 c1       	rjmp	.+520    	; 0xe3e <USB_Host_ProcessNextHostState+0x23e>
     c36:	83 30       	cpi	r24, 0x03	; 3
     c38:	d1 f1       	breq	.+116    	; 0xcae <USB_Host_ProcessNextHostState+0xae>
     c3a:	84 30       	cpi	r24, 0x04	; 4
     c3c:	09 f0       	breq	.+2      	; 0xc40 <USB_Host_ProcessNextHostState+0x40>
     c3e:	ff c0       	rjmp	.+510    	; 0xe3e <USB_Host_ProcessNextHostState+0x23e>
     c40:	5d c0       	rjmp	.+186    	; 0xcfc <USB_Host_ProcessNextHostState+0xfc>
     c42:	87 30       	cpi	r24, 0x07	; 7
     c44:	09 f4       	brne	.+2      	; 0xc48 <USB_Host_ProcessNextHostState+0x48>
     c46:	9b c0       	rjmp	.+310    	; 0xd7e <USB_Host_ProcessNextHostState+0x17e>
     c48:	87 30       	cpi	r24, 0x07	; 7
     c4a:	08 f4       	brcc	.+2      	; 0xc4e <USB_Host_ProcessNextHostState+0x4e>
     c4c:	8a c0       	rjmp	.+276    	; 0xd62 <USB_Host_ProcessNextHostState+0x162>
     c4e:	88 30       	cpi	r24, 0x08	; 8
     c50:	09 f4       	brne	.+2      	; 0xc54 <USB_Host_ProcessNextHostState+0x54>
     c52:	b3 c0       	rjmp	.+358    	; 0xdba <USB_Host_ProcessNextHostState+0x1ba>
     c54:	89 30       	cpi	r24, 0x09	; 9
     c56:	09 f0       	breq	.+2      	; 0xc5a <USB_Host_ProcessNextHostState+0x5a>
     c58:	f2 c0       	rjmp	.+484    	; 0xe3e <USB_Host_ProcessNextHostState+0x23e>
     c5a:	d7 c0       	rjmp	.+430    	; 0xe0a <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     c5c:	00 91 0e 05 	lds	r16, 0x050E
     c60:	10 91 0f 05 	lds	r17, 0x050F
     c64:	01 15       	cp	r16, r1
     c66:	11 05       	cpc	r17, r1
     c68:	09 f4       	brne	.+2      	; 0xc6c <USB_Host_ProcessNextHostState+0x6c>
     c6a:	e9 c0       	rjmp	.+466    	; 0xe3e <USB_Host_ProcessNextHostState+0x23e>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	2b df       	rcall	.-426    	; 0xac6 <USB_Host_WaitMS>
     c70:	68 2f       	mov	r22, r24
     c72:	88 23       	and	r24, r24
     c74:	31 f0       	breq	.+12     	; 0xc82 <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
     c76:	80 91 0d 05 	lds	r24, 0x050D
     c7a:	80 93 1a 05 	sts	0x051A, r24
     c7e:	91 e0       	ldi	r25, 0x01	; 1
     c80:	da c0       	rjmp	.+436    	; 0xe36 <USB_Host_ProcessNextHostState+0x236>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     c82:	c8 01       	movw	r24, r16
     c84:	01 97       	sbiw	r24, 0x01	; 1
     c86:	90 93 0f 05 	sts	0x050F, r25
     c8a:	80 93 0e 05 	sts	0x050E, r24
     c8e:	89 2b       	or	r24, r25
     c90:	09 f0       	breq	.+2      	; 0xc94 <USB_Host_ProcessNextHostState+0x94>
     c92:	d5 c0       	rjmp	.+426    	; 0xe3e <USB_Host_ProcessNextHostState+0x23e>
				  USB_HostState = PostWaitState;
     c94:	80 91 0d 05 	lds	r24, 0x050D
     c98:	07 c0       	rjmp	.+14     	; 0xca8 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     c9a:	88 ee       	ldi	r24, 0xE8	; 232
     c9c:	93 e0       	ldi	r25, 0x03	; 3
     c9e:	90 93 0f 05 	sts	0x050F, r25
     ca2:	80 93 0e 05 	sts	0x050E, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     ca6:	83 e0       	ldi	r24, 0x03	; 3
     ca8:	80 93 1a 05 	sts	0x051A, r24
     cac:	c8 c0       	rjmp	.+400    	; 0xe3e <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     cae:	80 91 0e 05 	lds	r24, 0x050E
     cb2:	90 91 0f 05 	lds	r25, 0x050F
     cb6:	01 97       	sbiw	r24, 0x01	; 1
     cb8:	90 93 0f 05 	sts	0x050F, r25
     cbc:	80 93 0e 05 	sts	0x050E, r24
     cc0:	01 96       	adiw	r24, 0x01	; 1
     cc2:	29 f0       	breq	.+10     	; 0xcce <USB_Host_ProcessNextHostState+0xce>
     cc4:	80 ed       	ldi	r24, 0xD0	; 208
     cc6:	97 e0       	ldi	r25, 0x07	; 7
     cc8:	01 97       	sbiw	r24, 0x01	; 1
     cca:	f1 f7       	brne	.-4      	; 0xcc8 <USB_Host_ProcessNextHostState+0xc8>
     ccc:	b8 c0       	rjmp	.+368    	; 0xe3e <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     cce:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     cd0:	80 91 d8 00 	lds	r24, 0x00D8
     cd4:	80 61       	ori	r24, 0x10	; 16
     cd6:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     cda:	80 91 dd 00 	lds	r24, 0x00DD
     cde:	8b 7f       	andi	r24, 0xFB	; 251
     ce0:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     ce4:	80 91 d7 00 	lds	r24, 0x00D7
     ce8:	80 61       	ori	r24, 0x10	; 16
     cea:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     cee:	80 91 dd 00 	lds	r24, 0x00DD
     cf2:	82 60       	ori	r24, 0x02	; 2
     cf4:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     cf8:	84 e0       	ldi	r24, 0x04	; 4
     cfa:	d6 cf       	rjmp	.-84     	; 0xca8 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     cfc:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     d00:	80 ff       	sbrs	r24, 0
     d02:	9d c0       	rjmp	.+314    	; 0xe3e <USB_Host_ProcessNextHostState+0x23e>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     d04:	80 91 9f 00 	lds	r24, 0x009F
     d08:	8e 7f       	andi	r24, 0xFE	; 254
     d0a:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     d0e:	80 91 9f 00 	lds	r24, 0x009F
     d12:	8d 7f       	andi	r24, 0xFD	; 253
     d14:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     d18:	80 91 df 00 	lds	r24, 0x00DF
     d1c:	8d 7f       	andi	r24, 0xFD	; 253
     d1e:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     d22:	80 91 de 00 	lds	r24, 0x00DE
     d26:	82 60       	ori	r24, 0x02	; 2
     d28:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     d2c:	80 91 9e 00 	lds	r24, 0x009E
     d30:	81 60       	ori	r24, 0x01	; 1
     d32:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     d36:	ed d0       	rcall	.+474    	; 0xf12 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     d38:	10 92 1a 05 	sts	0x051A, r1
     d3c:	84 e6       	ldi	r24, 0x64	; 100
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	90 93 0f 05 	sts	0x050F, r25
     d44:	80 93 0e 05 	sts	0x050E, r24
     d48:	85 e0       	ldi	r24, 0x05	; 5
     d4a:	5c c0       	rjmp	.+184    	; 0xe04 <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     d4c:	0b df       	rcall	.-490    	; 0xb64 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     d4e:	10 92 1a 05 	sts	0x051A, r1
     d52:	88 ec       	ldi	r24, 0xC8	; 200
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	90 93 0f 05 	sts	0x050F, r25
     d5a:	80 93 0e 05 	sts	0x050E, r24
     d5e:	86 e0       	ldi	r24, 0x06	; 6
     d60:	51 c0       	rjmp	.+162    	; 0xe04 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	40 e0       	ldi	r20, 0x00	; 0
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	00 e4       	ldi	r16, 0x40	; 64
     d6c:	10 e0       	ldi	r17, 0x00	; 0
     d6e:	ee 24       	eor	r14, r14
     d70:	72 d0       	rcall	.+228    	; 0xe56 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     d72:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     d76:	87 ff       	sbrs	r24, 7
     d78:	5c c0       	rjmp	.+184    	; 0xe32 <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     d7a:	87 e0       	ldi	r24, 0x07	; 7
     d7c:	95 cf       	rjmp	.-214    	; 0xca8 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     d7e:	a2 e1       	ldi	r26, 0x12	; 18
     d80:	b5 e0       	ldi	r27, 0x05	; 5
     d82:	ea e2       	ldi	r30, 0x2A	; 42
     d84:	f1 e0       	ldi	r31, 0x01	; 1
     d86:	88 e0       	ldi	r24, 0x08	; 8
     d88:	01 90       	ld	r0, Z+
     d8a:	0d 92       	st	X+, r0
     d8c:	81 50       	subi	r24, 0x01	; 1
     d8e:	e1 f7       	brne	.-8      	; 0xd88 <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     d90:	ce 01       	movw	r24, r28
     d92:	01 96       	adiw	r24, 0x01	; 1
     d94:	cd d2       	rcall	.+1434   	; 0x1330 <USB_Host_SendControlRequest>
     d96:	68 2f       	mov	r22, r24
     d98:	88 23       	and	r24, r24
     d9a:	09 f0       	breq	.+2      	; 0xd9e <USB_Host_ProcessNextHostState+0x19e>
     d9c:	48 c0       	rjmp	.+144    	; 0xe2e <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     d9e:	88 85       	ldd	r24, Y+8	; 0x08
     da0:	80 93 32 01 	sts	0x0132, r24

			USB_Host_ResetDevice();
     da4:	df de       	rcall	.-578    	; 0xb64 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     da6:	10 92 1a 05 	sts	0x051A, r1
     daa:	88 ec       	ldi	r24, 0xC8	; 200
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	90 93 0f 05 	sts	0x050F, r25
     db2:	80 93 0e 05 	sts	0x050E, r24
     db6:	88 e0       	ldi	r24, 0x08	; 8
     db8:	25 c0       	rjmp	.+74     	; 0xe04 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     dba:	00 91 32 01 	lds	r16, 0x0132
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	40 e0       	ldi	r20, 0x00	; 0
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	10 e0       	ldi	r17, 0x00	; 0
     dc8:	ee 24       	eor	r14, r14
     dca:	45 d0       	rcall	.+138    	; 0xe56 <Pipe_ConfigurePipe>
     dcc:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     dd0:	87 ff       	sbrs	r24, 7
     dd2:	2f c0       	rjmp	.+94     	; 0xe32 <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     dd4:	a2 e1       	ldi	r26, 0x12	; 18
     dd6:	b5 e0       	ldi	r27, 0x05	; 5
     dd8:	e2 e2       	ldi	r30, 0x22	; 34
     dda:	f1 e0       	ldi	r31, 0x01	; 1
     ddc:	88 e0       	ldi	r24, 0x08	; 8
     dde:	01 90       	ld	r0, Z+
     de0:	0d 92       	st	X+, r0
     de2:	81 50       	subi	r24, 0x01	; 1
     de4:	e1 f7       	brne	.-8      	; 0xdde <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	a2 d2       	rcall	.+1348   	; 0x1330 <USB_Host_SendControlRequest>
     dec:	68 2f       	mov	r22, r24
     dee:	88 23       	and	r24, r24
     df0:	f1 f4       	brne	.+60     	; 0xe2e <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     df2:	10 92 1a 05 	sts	0x051A, r1
     df6:	84 e6       	ldi	r24, 0x64	; 100
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	90 93 0f 05 	sts	0x050F, r25
     dfe:	80 93 0e 05 	sts	0x050E, r24
     e02:	89 e0       	ldi	r24, 0x09	; 9
     e04:	80 93 0d 05 	sts	0x050D, r24
     e08:	1a c0       	rjmp	.+52     	; 0xe3e <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     e10:	8a e0       	ldi	r24, 0x0A	; 10
     e12:	80 93 1a 05 	sts	0x051A, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     e16:	a3 dd       	rcall	.-1210   	; 0x95e <EVENT_USB_Host_DeviceEnumerationComplete>
     e18:	12 c0       	rjmp	.+36     	; 0xe3e <USB_Host_ProcessNextHostState+0x23e>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     e1a:	89 2f       	mov	r24, r25
     e1c:	a9 db       	rcall	.-2222   	; 0x570 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     e1e:	80 91 dd 00 	lds	r24, 0x00DD
     e22:	81 60       	ori	r24, 0x01	; 1
     e24:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     e28:	7c dd       	rcall	.-1288   	; 0x922 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     e2a:	a9 d0       	rcall	.+338    	; 0xf7e <USB_ResetInterface>
     e2c:	08 c0       	rjmp	.+16     	; 0xe3e <USB_Host_ProcessNextHostState+0x23e>
	}
}
     e2e:	93 e0       	ldi	r25, 0x03	; 3
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <USB_Host_ProcessNextHostState+0x236>
     e32:	94 e0       	ldi	r25, 0x04	; 4
     e34:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     e36:	80 91 1a 05 	lds	r24, 0x051A
     e3a:	81 30       	cpi	r24, 0x01	; 1
     e3c:	71 f7       	brne	.-36     	; 0xe1a <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     e3e:	28 96       	adiw	r28, 0x08	; 8
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	f8 94       	cli
     e44:	de bf       	out	0x3e, r29	; 62
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	cd bf       	out	0x3d, r28	; 61
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	1f 91       	pop	r17
     e50:	0f 91       	pop	r16
     e52:	ef 90       	pop	r14
     e54:	08 95       	ret

00000e56 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     e56:	ef 92       	push	r14
     e58:	0f 93       	push	r16
     e5a:	1f 93       	push	r17
     e5c:	e8 2f       	mov	r30, r24
     e5e:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     e60:	62 95       	swap	r22
     e62:	66 0f       	add	r22, r22
     e64:	66 0f       	add	r22, r22
     e66:	60 7c       	andi	r22, 0xC0	; 192
     e68:	64 2b       	or	r22, r20
     e6a:	2f 70       	andi	r18, 0x0F	; 15
     e6c:	62 2b       	or	r22, r18
     e6e:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     e70:	72 60       	ori	r23, 0x02	; 2
     e72:	45 c0       	rjmp	.+138    	; 0xefe <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     e74:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     e78:	3e 17       	cp	r19, r30
     e7a:	a1 f4       	brne	.+40     	; 0xea4 <Pipe_ConfigurePipe+0x4e>
     e7c:	88 e0       	ldi	r24, 0x08	; 8
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	03 c0       	rjmp	.+6      	; 0xe8a <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     e84:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     e86:	88 0f       	add	r24, r24
     e88:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     e8a:	80 17       	cp	r24, r16
     e8c:	91 07       	cpc	r25, r17
     e8e:	10 f4       	brcc	.+4      	; 0xe94 <Pipe_ConfigurePipe+0x3e>
     e90:	25 30       	cpi	r18, 0x05	; 5
     e92:	c1 f7       	brne	.-16     	; 0xe84 <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     e94:	92 2f       	mov	r25, r18
     e96:	92 95       	swap	r25
     e98:	90 7f       	andi	r25, 0xF0	; 240
     e9a:	97 2b       	or	r25, r23
     e9c:	56 2f       	mov	r21, r22
     e9e:	40 e0       	ldi	r20, 0x00	; 0
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	08 c0       	rjmp	.+16     	; 0xeb4 <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     ea4:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     ea8:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     eac:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
     eb0:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     eb4:	91 ff       	sbrs	r25, 1
     eb6:	22 c0       	rjmp	.+68     	; 0xefc <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     eb8:	80 91 a9 00 	lds	r24, 0x00A9
     ebc:	8e 7f       	andi	r24, 0xFE	; 254
     ebe:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     ec2:	80 91 ab 00 	lds	r24, 0x00AB
     ec6:	8d 7f       	andi	r24, 0xFD	; 253
     ec8:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     ecc:	80 91 a9 00 	lds	r24, 0x00A9
     ed0:	81 60       	ori	r24, 0x01	; 1
     ed2:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     ed6:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
     eda:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
     ede:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
     ee2:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     ee6:	80 91 a9 00 	lds	r24, 0x00A9
     eea:	80 62       	ori	r24, 0x20	; 32
     eec:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     ef0:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     ef4:	87 fd       	sbrc	r24, 7
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <Pipe_ConfigurePipe+0xa6>
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	07 c0       	rjmp	.+14     	; 0xf0a <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     efc:	3f 5f       	subi	r19, 0xFF	; 255
     efe:	37 30       	cpi	r19, 0x07	; 7
     f00:	08 f4       	brcc	.+2      	; 0xf04 <Pipe_ConfigurePipe+0xae>
     f02:	b8 cf       	rjmp	.-144    	; 0xe74 <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     f04:	e0 93 a7 00 	sts	0x00A7, r30
     f08:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
     f0a:	1f 91       	pop	r17
     f0c:	0f 91       	pop	r16
     f0e:	ef 90       	pop	r14
     f10:	08 95       	ret

00000f12 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     f12:	10 92 f8 00 	sts	0x00F8, r1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     f1c:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     f20:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     f24:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     f28:	80 91 a9 00 	lds	r24, 0x00A9
     f2c:	8e 7f       	andi	r24, 0xFE	; 254
     f2e:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     f32:	9f 5f       	subi	r25, 0xFF	; 255
     f34:	97 30       	cpi	r25, 0x07	; 7
     f36:	81 f7       	brne	.-32     	; 0xf18 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     f38:	08 95       	ret

00000f3a <Pipe_IsEndpointBound>:

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
     f3a:	48 2f       	mov	r20, r24
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     f3c:	30 91 a7 00 	lds	r19, 0x00A7
     f40:	20 e0       	ldi	r18, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     f42:	20 93 a7 00 	sts	0x00A7, r18
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     f46:	80 91 ac 00 	lds	r24, 0x00AC

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     f4a:	87 ff       	sbrs	r24, 7
     f4c:	10 c0       	rjmp	.+32     	; 0xf6e <Pipe_IsEndpointBound+0x34>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     f4e:	90 91 aa 00 	lds	r25, 0x00AA
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     f52:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     f56:	80 73       	andi	r24, 0x30	; 48
     f58:	80 31       	cpi	r24, 0x10	; 16
     f5a:	11 f0       	breq	.+4      	; 0xf60 <Pipe_IsEndpointBound+0x26>
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	01 c0       	rjmp	.+2      	; 0xf62 <Pipe_IsEndpointBound+0x28>
     f60:	80 e8       	ldi	r24, 0x80	; 128
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     f62:	9f 70       	andi	r25, 0x0F	; 15
     f64:	89 2b       	or	r24, r25
     f66:	84 17       	cp	r24, r20
     f68:	11 f4       	brne	.+4      	; 0xf6e <Pipe_IsEndpointBound+0x34>
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	08 95       	ret

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     f6e:	2f 5f       	subi	r18, 0xFF	; 255
     f70:	27 30       	cpi	r18, 0x07	; 7
     f72:	39 f7       	brne	.-50     	; 0xf42 <Pipe_IsEndpointBound+0x8>
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     f74:	37 70       	andi	r19, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     f76:	30 93 a7 00 	sts	0x00A7, r19
     f7a:	80 e0       	ldi	r24, 0x00	; 0
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     f7c:	08 95       	ret

00000f7e <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     f7e:	70 d0       	rcall	.+224    	; 0x1060 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     f80:	77 d0       	rcall	.+238    	; 0x1070 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     f82:	80 91 d8 00 	lds	r24, 0x00D8
     f86:	8f 77       	andi	r24, 0x7F	; 127
     f88:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     f8c:	80 91 d8 00 	lds	r24, 0x00D8
     f90:	80 68       	ori	r24, 0x80	; 128
     f92:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     f96:	80 91 d8 00 	lds	r24, 0x00D8
     f9a:	8f 7d       	andi	r24, 0xDF	; 223
     f9c:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     fa0:	80 91 d7 00 	lds	r24, 0x00D7
     fa4:	8f 77       	andi	r24, 0x7F	; 127
     fa6:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     faa:	8c e0       	ldi	r24, 0x0C	; 12
     fac:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     fae:	8e e0       	ldi	r24, 0x0E	; 14
     fb0:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     fb2:	09 b4       	in	r0, 0x29	; 41
     fb4:	00 fe       	sbrs	r0, 0
     fb6:	fd cf       	rjmp	.-6      	; 0xfb2 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	80 93 1a 05 	sts	0x051A, r24
	USB_Host_ConfigurationNumber = 0;
     fbe:	10 92 10 05 	sts	0x0510, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     fc2:	80 e4       	ldi	r24, 0x40	; 64
     fc4:	80 93 32 01 	sts	0x0132, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     fc8:	80 91 d8 00 	lds	r24, 0x00D8
     fcc:	80 64       	ori	r24, 0x40	; 64
     fce:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     fd2:	80 91 dd 00 	lds	r24, 0x00DD
     fd6:	81 60       	ori	r24, 0x01	; 1
     fd8:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     fdc:	80 91 dd 00 	lds	r24, 0x00DD
     fe0:	84 60       	ori	r24, 0x04	; 4
     fe2:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     fe6:	80 91 d7 00 	lds	r24, 0x00D7
     fea:	8f 7e       	andi	r24, 0xEF	; 239
     fec:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     ff0:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     ff2:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     ff4:	80 91 de 00 	lds	r24, 0x00DE
     ff8:	81 60       	ori	r24, 0x01	; 1
     ffa:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     ffe:	80 91 de 00 	lds	r24, 0x00DE
    1002:	84 60       	ori	r24, 0x04	; 4
    1004:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1008:	80 91 e0 00 	lds	r24, 0x00E0
    100c:	8e 7f       	andi	r24, 0xFE	; 254
    100e:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    1012:	80 91 d8 00 	lds	r24, 0x00D8
    1016:	80 61       	ori	r24, 0x10	; 16
    1018:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    101c:	08 95       	ret

0000101e <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    101e:	e7 ed       	ldi	r30, 0xD7	; 215
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	81 60       	ori	r24, 0x01	; 1
    1026:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	80 93 11 05 	sts	0x0511, r24

	USB_ResetInterface();
}
    102e:	a7 cf       	rjmp	.-178    	; 0xf7e <USB_ResetInterface>

00001030 <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1030:	17 d0       	rcall	.+46     	; 0x1060 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1032:	1e d0       	rcall	.+60     	; 0x1070 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1034:	e0 ee       	ldi	r30, 0xE0	; 224
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	81 60       	ori	r24, 0x01	; 1
    103c:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
    103e:	a8 ed       	ldi	r26, 0xD8	; 216
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	8c 91       	ld	r24, X
    1044:	8f 77       	andi	r24, 0x7F	; 127
    1046:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1048:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
    104a:	e7 ed       	ldi	r30, 0xD7	; 215
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	8e 7f       	andi	r24, 0xFE	; 254
    1052:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
    1054:	8c 91       	ld	r24, X
    1056:	8f 7e       	andi	r24, 0xEF	; 239
    1058:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    105a:	10 92 11 05 	sts	0x0511, r1
}
    105e:	08 95       	ret

00001060 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1060:	e8 ed       	ldi	r30, 0xD8	; 216
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	8c 7f       	andi	r24, 0xFC	; 252
    1068:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    106a:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    106e:	08 95       	ret

00001070 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1070:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    1074:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
    1078:	08 95       	ret

0000107a <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    107a:	1f 92       	push	r1
    107c:	0f 92       	push	r0
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	0f 92       	push	r0
    1082:	0b b6       	in	r0, 0x3b	; 59
    1084:	0f 92       	push	r0
    1086:	11 24       	eor	r1, r1
    1088:	2f 93       	push	r18
    108a:	3f 93       	push	r19
    108c:	4f 93       	push	r20
    108e:	5f 93       	push	r21
    1090:	6f 93       	push	r22
    1092:	7f 93       	push	r23
    1094:	8f 93       	push	r24
    1096:	9f 93       	push	r25
    1098:	af 93       	push	r26
    109a:	bf 93       	push	r27
    109c:	ef 93       	push	r30
    109e:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    10a0:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    10a4:	85 ff       	sbrs	r24, 5
    10a6:	0a c0       	rjmp	.+20     	; 0x10bc <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    10a8:	80 91 a0 00 	lds	r24, 0x00A0
    10ac:	85 ff       	sbrs	r24, 5
    10ae:	06 c0       	rjmp	.+12     	; 0x10bc <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    10b0:	80 91 9f 00 	lds	r24, 0x009F
    10b4:	8f 7d       	andi	r24, 0xDF	; 223
    10b6:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    10ba:	10 d1       	rcall	.+544    	; 0x12dc <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    10bc:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    10c0:	81 ff       	sbrs	r24, 1
    10c2:	15 c0       	rjmp	.+42     	; 0x10ee <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    10c4:	80 91 a0 00 	lds	r24, 0x00A0
    10c8:	81 ff       	sbrs	r24, 1
    10ca:	11 c0       	rjmp	.+34     	; 0x10ee <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    10cc:	80 91 9f 00 	lds	r24, 0x009F
    10d0:	8d 7f       	andi	r24, 0xFD	; 253
    10d2:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    10d6:	80 91 9f 00 	lds	r24, 0x009F
    10da:	8e 7f       	andi	r24, 0xFE	; 254
    10dc:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    10e0:	80 91 a0 00 	lds	r24, 0x00A0
    10e4:	8d 7f       	andi	r24, 0xFD	; 253
    10e6:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    10ea:	1b dc       	rcall	.-1994   	; 0x922 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    10ec:	48 df       	rcall	.-368    	; 0xf7e <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    10ee:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    10f2:	81 ff       	sbrs	r24, 1
    10f4:	15 c0       	rjmp	.+42     	; 0x1120 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    10f6:	80 91 de 00 	lds	r24, 0x00DE
    10fa:	81 ff       	sbrs	r24, 1
    10fc:	11 c0       	rjmp	.+34     	; 0x1120 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    10fe:	80 91 df 00 	lds	r24, 0x00DF
    1102:	8d 7f       	andi	r24, 0xFD	; 253
    1104:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
    1108:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    110a:	80 91 dd 00 	lds	r24, 0x00DD
    110e:	81 60       	ori	r24, 0x01	; 1
    1110:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	e8 db       	rcall	.-2096   	; 0x8e8 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    1118:	04 dc       	rcall	.-2040   	; 0x922 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	80 93 1a 05 	sts	0x051A, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    1120:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    1124:	80 ff       	sbrs	r24, 0
    1126:	17 c0       	rjmp	.+46     	; 0x1156 <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    1128:	80 91 de 00 	lds	r24, 0x00DE
    112c:	80 ff       	sbrs	r24, 0
    112e:	13 c0       	rjmp	.+38     	; 0x1156 <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    1130:	80 91 df 00 	lds	r24, 0x00DF
    1134:	8e 7f       	andi	r24, 0xFE	; 254
    1136:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
    113a:	80 91 de 00 	lds	r24, 0x00DE
    113e:	8e 7f       	andi	r24, 0xFE	; 254
    1140:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    1144:	f7 db       	rcall	.-2066   	; 0x934 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    1146:	80 91 a0 00 	lds	r24, 0x00A0
    114a:	82 60       	ori	r24, 0x02	; 2
    114c:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    1150:	82 e0       	ldi	r24, 0x02	; 2
    1152:	80 93 1a 05 	sts	0x051A, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    1156:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    115a:	82 ff       	sbrs	r24, 2
    115c:	0e c0       	rjmp	.+28     	; 0x117a <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    115e:	80 91 de 00 	lds	r24, 0x00DE
    1162:	82 ff       	sbrs	r24, 2
    1164:	0a c0       	rjmp	.+20     	; 0x117a <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    1166:	80 91 df 00 	lds	r24, 0x00DF
    116a:	8b 7f       	andi	r24, 0xFB	; 251
    116c:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    1170:	82 e0       	ldi	r24, 0x02	; 2
    1172:	60 e0       	ldi	r22, 0x00	; 0
    1174:	fd d9       	rcall	.-3078   	; 0x570 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    1176:	d5 db       	rcall	.-2134   	; 0x922 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1178:	02 df       	rcall	.-508    	; 0xf7e <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    117a:	ff 91       	pop	r31
    117c:	ef 91       	pop	r30
    117e:	bf 91       	pop	r27
    1180:	af 91       	pop	r26
    1182:	9f 91       	pop	r25
    1184:	8f 91       	pop	r24
    1186:	7f 91       	pop	r23
    1188:	6f 91       	pop	r22
    118a:	5f 91       	pop	r21
    118c:	4f 91       	pop	r20
    118e:	3f 91       	pop	r19
    1190:	2f 91       	pop	r18
    1192:	0f 90       	pop	r0
    1194:	0b be       	out	0x3b, r0	; 59
    1196:	0f 90       	pop	r0
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	0f 90       	pop	r0
    119c:	1f 90       	pop	r1
    119e:	18 95       	reti

000011a0 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    11a0:	af 92       	push	r10
    11a2:	bf 92       	push	r11
    11a4:	cf 92       	push	r12
    11a6:	df 92       	push	r13
    11a8:	ef 92       	push	r14
    11aa:	ff 92       	push	r15
    11ac:	0f 93       	push	r16
    11ae:	1f 93       	push	r17
    11b0:	cf 93       	push	r28
    11b2:	df 93       	push	r29
    11b4:	7c 01       	movw	r14, r24
    11b6:	eb 01       	movw	r28, r22
    11b8:	6a 01       	movw	r12, r20
    11ba:	24 c0       	rjmp	.+72     	; 0x1204 <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    11bc:	e8 81       	ld	r30, Y
    11be:	f9 81       	ldd	r31, Y+1	; 0x01
    11c0:	be 2e       	mov	r11, r30
    11c2:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    11c4:	80 81       	ld	r24, Z
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	98 01       	movw	r18, r16
    11ca:	80 17       	cp	r24, r16
    11cc:	91 07       	cpc	r25, r17
    11ce:	08 f4       	brcc	.+2      	; 0x11d2 <USB_GetNextDescriptorComp+0x32>
    11d0:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    11d2:	e2 0f       	add	r30, r18
    11d4:	f3 1f       	adc	r31, r19
    11d6:	f9 83       	std	Y+1, r31	; 0x01
    11d8:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
    11da:	f7 01       	movw	r30, r14
    11dc:	80 81       	ld	r24, Z
    11de:	91 81       	ldd	r25, Z+1	; 0x01
    11e0:	82 1b       	sub	r24, r18
    11e2:	93 0b       	sbc	r25, r19
    11e4:	91 83       	std	Z+1, r25	; 0x01
    11e6:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    11e8:	88 81       	ld	r24, Y
    11ea:	99 81       	ldd	r25, Y+1	; 0x01
    11ec:	f6 01       	movw	r30, r12
    11ee:	09 95       	icall
    11f0:	82 30       	cpi	r24, 0x02	; 2
    11f2:	41 f0       	breq	.+16     	; 0x1204 <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	69 f4       	brne	.+26     	; 0x1212 <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
    11f8:	b8 82       	st	Y, r11
    11fa:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
    11fc:	f7 01       	movw	r30, r14
    11fe:	11 83       	std	Z+1, r17	; 0x01
    1200:	00 83       	st	Z, r16
    1202:	07 c0       	rjmp	.+14     	; 0x1212 <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    1204:	f7 01       	movw	r30, r14
    1206:	00 81       	ld	r16, Z
    1208:	11 81       	ldd	r17, Z+1	; 0x01
    120a:	01 15       	cp	r16, r1
    120c:	11 05       	cpc	r17, r1
    120e:	b1 f6       	brne	.-84     	; 0x11bc <USB_GetNextDescriptorComp+0x1c>
    1210:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
    1212:	df 91       	pop	r29
    1214:	cf 91       	pop	r28
    1216:	1f 91       	pop	r17
    1218:	0f 91       	pop	r16
    121a:	ff 90       	pop	r15
    121c:	ef 90       	pop	r14
    121e:	df 90       	pop	r13
    1220:	cf 90       	pop	r12
    1222:	bf 90       	pop	r11
    1224:	af 90       	pop	r10
    1226:	08 95       	ret

00001228 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    1228:	cf 92       	push	r12
    122a:	df 92       	push	r13
    122c:	ef 92       	push	r14
    122e:	ff 92       	push	r15
    1230:	0f 93       	push	r16
    1232:	1f 93       	push	r17
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    123c:	29 97       	sbiw	r28, 0x09	; 9
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	f8 94       	cli
    1242:	de bf       	out	0x3e, r29	; 62
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	cd bf       	out	0x3d, r28	; 61
    1248:	6b 01       	movw	r12, r22
    124a:	8a 01       	movw	r16, r20
    124c:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    124e:	90 e8       	ldi	r25, 0x80	; 128
    1250:	90 93 12 05 	sts	0x0512, r25
    1254:	96 e0       	ldi	r25, 0x06	; 6
    1256:	90 93 13 05 	sts	0x0513, r25
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	01 97       	sbiw	r24, 0x01	; 1
    125e:	92 60       	ori	r25, 0x02	; 2
    1260:	90 93 15 05 	sts	0x0515, r25
    1264:	80 93 14 05 	sts	0x0514, r24
    1268:	10 92 17 05 	sts	0x0517, r1
    126c:	10 92 16 05 	sts	0x0516, r1
    1270:	89 e0       	ldi	r24, 0x09	; 9
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	90 93 19 05 	sts	0x0519, r25
    1278:	80 93 18 05 	sts	0x0518, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    127c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    1280:	ce 01       	movw	r24, r28
    1282:	01 96       	adiw	r24, 0x01	; 1
    1284:	55 d0       	rcall	.+170    	; 0x1330 <USB_Host_SendControlRequest>
    1286:	28 2f       	mov	r18, r24
    1288:	88 23       	and	r24, r24
    128a:	c1 f4       	brne	.+48     	; 0x12bc <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
    128e:	9c 81       	ldd	r25, Y+4	; 0x04
    1290:	f6 01       	movw	r30, r12
    1292:	91 83       	std	Z+1, r25	; 0x01
    1294:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    1296:	e8 16       	cp	r14, r24
    1298:	f9 06       	cpc	r15, r25
    129a:	10 f4       	brcc	.+4      	; 0x12a0 <USB_Host_GetDeviceConfigDescriptor+0x78>
    129c:	25 e0       	ldi	r18, 0x05	; 5
    129e:	0e c0       	rjmp	.+28     	; 0x12bc <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    12a0:	90 93 19 05 	sts	0x0519, r25
    12a4:	80 93 18 05 	sts	0x0518, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    12a8:	c8 01       	movw	r24, r16
    12aa:	42 d0       	rcall	.+132    	; 0x1330 <USB_Host_SendControlRequest>
    12ac:	28 2f       	mov	r18, r24
    12ae:	88 23       	and	r24, r24
    12b0:	29 f4       	brne	.+10     	; 0x12bc <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    12b2:	f8 01       	movw	r30, r16
    12b4:	81 81       	ldd	r24, Z+1	; 0x01
    12b6:	82 30       	cpi	r24, 0x02	; 2
    12b8:	09 f0       	breq	.+2      	; 0x12bc <USB_Host_GetDeviceConfigDescriptor+0x94>
    12ba:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    12bc:	82 2f       	mov	r24, r18
    12be:	29 96       	adiw	r28, 0x09	; 9
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	f8 94       	cli
    12c4:	de bf       	out	0x3e, r29	; 62
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	cd bf       	out	0x3d, r28	; 61
    12ca:	cf 91       	pop	r28
    12cc:	df 91       	pop	r29
    12ce:	1f 91       	pop	r17
    12d0:	0f 91       	pop	r16
    12d2:	ff 90       	pop	r15
    12d4:	ef 90       	pop	r14
    12d6:	df 90       	pop	r13
    12d8:	cf 90       	pop	r12
    12da:	08 95       	ret

000012dc <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    12dc:	08 95       	ret

000012de <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    12de:	1f 93       	push	r17
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
    12e4:	18 2f       	mov	r17, r24
    12e6:	c8 ee       	ldi	r28, 0xE8	; 232
    12e8:	d3 e0       	ldi	r29, 0x03	; 3
    12ea:	09 c0       	rjmp	.+18     	; 0x12fe <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	eb db       	rcall	.-2090   	; 0xac6 <USB_Host_WaitMS>
    12f0:	88 23       	and	r24, r24
    12f2:	d1 f4       	brne	.+52     	; 0x1328 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    12f4:	20 97       	sbiw	r28, 0x00	; 0
    12f6:	11 f4       	brne	.+4      	; 0x12fc <USB_Host_WaitForIOS+0x1e>
    12f8:	84 e0       	ldi	r24, 0x04	; 4
    12fa:	16 c0       	rjmp	.+44     	; 0x1328 <USB_Host_WaitForIOS+0x4a>
    12fc:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    12fe:	11 23       	and	r17, r17
    1300:	29 f4       	brne	.+10     	; 0x130c <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1302:	80 91 a6 00 	lds	r24, 0x00A6
    1306:	83 ff       	sbrs	r24, 3
    1308:	f1 cf       	rjmp	.-30     	; 0x12ec <USB_Host_WaitForIOS+0xe>
    130a:	0d c0       	rjmp	.+26     	; 0x1326 <USB_Host_WaitForIOS+0x48>
    130c:	11 30       	cpi	r17, 0x01	; 1
    130e:	29 f4       	brne	.+10     	; 0x131a <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1310:	80 91 a6 00 	lds	r24, 0x00A6
    1314:	80 ff       	sbrs	r24, 0
    1316:	ea cf       	rjmp	.-44     	; 0x12ec <USB_Host_WaitForIOS+0xe>
    1318:	06 c0       	rjmp	.+12     	; 0x1326 <USB_Host_WaitForIOS+0x48>
    131a:	12 30       	cpi	r17, 0x02	; 2
    131c:	39 f7       	brne	.-50     	; 0x12ec <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    131e:	80 91 a6 00 	lds	r24, 0x00A6
    1322:	82 ff       	sbrs	r24, 2
    1324:	e3 cf       	rjmp	.-58     	; 0x12ec <USB_Host_WaitForIOS+0xe>
    1326:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	1f 91       	pop	r17
    132e:	08 95       	ret

00001330 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1330:	ff 92       	push	r15
    1332:	0f 93       	push	r16
    1334:	1f 93       	push	r17
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
    133a:	18 2f       	mov	r17, r24
    133c:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    133e:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1342:	c0 91 18 05 	lds	r28, 0x0518
    1346:	d0 91 19 05 	lds	r29, 0x0519
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    134a:	80 91 9e 00 	lds	r24, 0x009E
    134e:	81 60       	ori	r24, 0x01	; 1
    1350:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	b7 db       	rcall	.-2194   	; 0xac6 <USB_Host_WaitMS>
    1358:	98 2f       	mov	r25, r24
    135a:	88 23       	and	r24, r24
    135c:	09 f0       	breq	.+2      	; 0x1360 <USB_Host_SendControlRequest+0x30>
    135e:	ee c0       	rjmp	.+476    	; 0x153c <USB_Host_SendControlRequest+0x20c>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1360:	80 91 aa 00 	lds	r24, 0x00AA
    1364:	8f 7c       	andi	r24, 0xCF	; 207
    1366:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    136a:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    136e:	80 91 a6 00 	lds	r24, 0x00A6
    1372:	8f 7e       	andi	r24, 0xEF	; 239
    1374:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1378:	80 91 a9 00 	lds	r24, 0x00A9
    137c:	8f 7b       	andi	r24, 0xBF	; 191
    137e:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearError();

	Pipe_Unfreeze();

	Pipe_Write_8(USB_ControlRequest.bmRequestType);
    1382:	80 91 12 05 	lds	r24, 0x0512
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1386:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
    138a:	80 91 13 05 	lds	r24, 0x0513
    138e:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
    1392:	80 91 14 05 	lds	r24, 0x0514
    1396:	90 91 15 05 	lds	r25, 0x0515
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    139a:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    139e:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
    13a2:	80 91 16 05 	lds	r24, 0x0516
    13a6:	90 91 17 05 	lds	r25, 0x0517
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    13aa:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    13ae:	90 93 af 00 	sts	0x00AF, r25
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
    13b2:	80 91 18 05 	lds	r24, 0x0518
    13b6:	90 91 19 05 	lds	r25, 0x0519
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
    13ba:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
    13be:	90 93 af 00 	sts	0x00AF, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    13c2:	80 91 a6 00 	lds	r24, 0x00A6
    13c6:	87 77       	andi	r24, 0x77	; 119
    13c8:	80 93 a6 00 	sts	0x00A6, r24

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	87 df       	rcall	.-242    	; 0x12de <USB_Host_WaitForIOS>
    13d0:	98 2f       	mov	r25, r24
    13d2:	88 23       	and	r24, r24
    13d4:	09 f0       	breq	.+2      	; 0x13d8 <USB_Host_SendControlRequest+0xa8>
    13d6:	b2 c0       	rjmp	.+356    	; 0x153c <USB_Host_SendControlRequest+0x20c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    13d8:	80 91 a9 00 	lds	r24, 0x00A9
    13dc:	80 64       	ori	r24, 0x40	; 64
    13de:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	70 db       	rcall	.-2336   	; 0xac6 <USB_Host_WaitMS>
    13e6:	98 2f       	mov	r25, r24
    13e8:	88 23       	and	r24, r24
    13ea:	09 f0       	breq	.+2      	; 0x13ee <USB_Host_SendControlRequest+0xbe>
    13ec:	a7 c0       	rjmp	.+334    	; 0x153c <USB_Host_SendControlRequest+0x20c>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
    13ee:	21 2f       	mov	r18, r17
    13f0:	30 2f       	mov	r19, r16
    13f2:	c9 01       	movw	r24, r18
    13f4:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    13f6:	80 91 12 05 	lds	r24, 0x0512
    13fa:	87 ff       	sbrs	r24, 7
    13fc:	52 c0       	rjmp	.+164    	; 0x14a2 <USB_Host_SendControlRequest+0x172>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    13fe:	80 91 aa 00 	lds	r24, 0x00AA
    1402:	8f 7c       	andi	r24, 0xCF	; 207
    1404:	80 61       	ori	r24, 0x10	; 16
    1406:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    140a:	01 15       	cp	r16, r1
    140c:	11 05       	cpc	r17, r1
    140e:	69 f5       	brne	.+90     	; 0x146a <USB_Host_SendControlRequest+0x13a>
    1410:	2e c0       	rjmp	.+92     	; 0x146e <USB_Host_SendControlRequest+0x13e>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1412:	80 91 a9 00 	lds	r24, 0x00A9
    1416:	8f 7b       	andi	r24, 0xBF	; 191
    1418:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	5f df       	rcall	.-322    	; 0x12de <USB_Host_WaitForIOS>
    1420:	98 2f       	mov	r25, r24
    1422:	88 23       	and	r24, r24
    1424:	09 f0       	breq	.+2      	; 0x1428 <USB_Host_SendControlRequest+0xf8>
    1426:	8a c0       	rjmp	.+276    	; 0x153c <USB_Host_SendControlRequest+0x20c>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1428:	80 91 f6 00 	lds	r24, 0x00F6
    142c:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    1430:	89 2b       	or	r24, r25
    1432:	49 f4       	brne	.+18     	; 0x1446 <USB_Host_SendControlRequest+0x116>
    1434:	c0 e0       	ldi	r28, 0x00	; 0
    1436:	d0 e0       	ldi	r29, 0x00	; 0
    1438:	06 c0       	rjmp	.+12     	; 0x1446 <USB_Host_SendControlRequest+0x116>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    143a:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    143e:	f8 01       	movw	r30, r16
    1440:	81 93       	st	Z+, r24
    1442:	8f 01       	movw	r16, r30
					DataLen--;
    1444:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1446:	80 91 f6 00 	lds	r24, 0x00F6
    144a:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    144e:	89 2b       	or	r24, r25
    1450:	11 f0       	breq	.+4      	; 0x1456 <USB_Host_SendControlRequest+0x126>
    1452:	20 97       	sbiw	r28, 0x00	; 0
    1454:	91 f7       	brne	.-28     	; 0x143a <USB_Host_SendControlRequest+0x10a>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1456:	80 91 a9 00 	lds	r24, 0x00A9
    145a:	80 64       	ori	r24, 0x40	; 64
    145c:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1460:	80 91 a6 00 	lds	r24, 0x00A6
    1464:	8e 77       	andi	r24, 0x7E	; 126
    1466:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    146a:	20 97       	sbiw	r28, 0x00	; 0
    146c:	91 f6       	brne	.-92     	; 0x1412 <USB_Host_SendControlRequest+0xe2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    146e:	80 91 aa 00 	lds	r24, 0x00AA
    1472:	8f 7c       	andi	r24, 0xCF	; 207
    1474:	80 62       	ori	r24, 0x20	; 32
    1476:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    147a:	80 91 a9 00 	lds	r24, 0x00A9
    147e:	8f 7b       	andi	r24, 0xBF	; 191
    1480:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1484:	82 e0       	ldi	r24, 0x02	; 2
    1486:	2b df       	rcall	.-426    	; 0x12de <USB_Host_WaitForIOS>
    1488:	98 2f       	mov	r25, r24
    148a:	88 23       	and	r24, r24
    148c:	09 f0       	breq	.+2      	; 0x1490 <USB_Host_SendControlRequest+0x160>
    148e:	56 c0       	rjmp	.+172    	; 0x153c <USB_Host_SendControlRequest+0x20c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1490:	80 91 a6 00 	lds	r24, 0x00A6
    1494:	8b 77       	andi	r24, 0x7B	; 123
    1496:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    149a:	82 e0       	ldi	r24, 0x02	; 2
    149c:	20 df       	rcall	.-448    	; 0x12de <USB_Host_WaitForIOS>
    149e:	98 2f       	mov	r25, r24
    14a0:	4d c0       	rjmp	.+154    	; 0x153c <USB_Host_SendControlRequest+0x20c>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    14a2:	01 15       	cp	r16, r1
    14a4:	11 05       	cpc	r17, r1
    14a6:	a9 f1       	breq	.+106    	; 0x1512 <USB_Host_SendControlRequest+0x1e2>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    14a8:	80 91 aa 00 	lds	r24, 0x00AA
    14ac:	8f 7c       	andi	r24, 0xCF	; 207
    14ae:	80 62       	ori	r24, 0x20	; 32
    14b0:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    14b4:	80 91 a9 00 	lds	r24, 0x00A9
    14b8:	8f 7b       	andi	r24, 0xBF	; 191
    14ba:	80 93 a9 00 	sts	0x00A9, r24
    14be:	1d c0       	rjmp	.+58     	; 0x14fa <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    14c0:	82 e0       	ldi	r24, 0x02	; 2
    14c2:	0d df       	rcall	.-486    	; 0x12de <USB_Host_WaitForIOS>
    14c4:	98 2f       	mov	r25, r24
    14c6:	88 23       	and	r24, r24
    14c8:	c9 f5       	brne	.+114    	; 0x153c <USB_Host_SendControlRequest+0x20c>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    14ca:	80 91 32 01 	lds	r24, 0x0132
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	07 c0       	rjmp	.+14     	; 0x14e2 <USB_Host_SendControlRequest+0x1b2>
				{
					Pipe_Write_8(*(DataStream++));
    14d4:	f8 01       	movw	r30, r16
    14d6:	81 91       	ld	r24, Z+
    14d8:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    14da:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    14de:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    14e0:	39 f0       	breq	.+14     	; 0x14f0 <USB_Host_SendControlRequest+0x1c0>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    14e2:	80 91 f6 00 	lds	r24, 0x00F6
    14e6:	90 91 f7 00 	lds	r25, 0x00F7
    14ea:	82 17       	cp	r24, r18
    14ec:	93 07       	cpc	r25, r19
    14ee:	90 f3       	brcs	.-28     	; 0x14d4 <USB_Host_SendControlRequest+0x1a4>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    14f0:	80 91 a6 00 	lds	r24, 0x00A6
    14f4:	8b 77       	andi	r24, 0x7B	; 123
    14f6:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    14fa:	20 97       	sbiw	r28, 0x00	; 0
    14fc:	09 f7       	brne	.-62     	; 0x14c0 <USB_Host_SendControlRequest+0x190>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    14fe:	82 e0       	ldi	r24, 0x02	; 2
    1500:	ee de       	rcall	.-548    	; 0x12de <USB_Host_WaitForIOS>
    1502:	98 2f       	mov	r25, r24
    1504:	88 23       	and	r24, r24
    1506:	d1 f4       	brne	.+52     	; 0x153c <USB_Host_SendControlRequest+0x20c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1508:	80 91 a9 00 	lds	r24, 0x00A9
    150c:	80 64       	ori	r24, 0x40	; 64
    150e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1512:	80 91 aa 00 	lds	r24, 0x00AA
    1516:	8f 7c       	andi	r24, 0xCF	; 207
    1518:	80 61       	ori	r24, 0x10	; 16
    151a:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    151e:	80 91 a9 00 	lds	r24, 0x00A9
    1522:	8f 7b       	andi	r24, 0xBF	; 191
    1524:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	d9 de       	rcall	.-590    	; 0x12de <USB_Host_WaitForIOS>
    152c:	98 2f       	mov	r25, r24
    152e:	88 23       	and	r24, r24
    1530:	29 f4       	brne	.+10     	; 0x153c <USB_Host_SendControlRequest+0x20c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1532:	80 91 a6 00 	lds	r24, 0x00A6
    1536:	8e 77       	andi	r24, 0x7E	; 126
    1538:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    153c:	80 91 a9 00 	lds	r24, 0x00A9
    1540:	80 64       	ori	r24, 0x40	; 64
    1542:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    1546:	f0 fc       	sbrc	r15, 0
    1548:	05 c0       	rjmp	.+10     	; 0x1554 <USB_Host_SendControlRequest+0x224>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    154a:	80 91 9e 00 	lds	r24, 0x009E
    154e:	8e 7f       	andi	r24, 0xFE	; 254
    1550:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    155a:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    155e:	89 2f       	mov	r24, r25
    1560:	df 91       	pop	r29
    1562:	cf 91       	pop	r28
    1564:	1f 91       	pop	r17
    1566:	0f 91       	pop	r16
    1568:	ff 90       	pop	r15
    156a:	08 95       	ret

0000156c <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    156c:	1f 93       	push	r17
    156e:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1570:	10 92 12 05 	sts	0x0512, r1
    1574:	89 e0       	ldi	r24, 0x09	; 9
    1576:	80 93 13 05 	sts	0x0513, r24
    157a:	10 93 14 05 	sts	0x0514, r17
    157e:	10 92 15 05 	sts	0x0515, r1
    1582:	10 92 17 05 	sts	0x0517, r1
    1586:	10 92 16 05 	sts	0x0516, r1
    158a:	10 92 19 05 	sts	0x0519, r1
    158e:	10 92 18 05 	sts	0x0518, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1592:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	ca de       	rcall	.-620    	; 0x1330 <USB_Host_SendControlRequest>
    159c:	88 23       	and	r24, r24
    159e:	49 f4       	brne	.+18     	; 0x15b2 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    15a0:	10 93 10 05 	sts	0x0510, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    15a4:	11 23       	and	r17, r17
    15a6:	11 f4       	brne	.+4      	; 0x15ac <USB_Host_SetDeviceConfiguration+0x40>
    15a8:	9a e0       	ldi	r25, 0x0A	; 10
    15aa:	01 c0       	rjmp	.+2      	; 0x15ae <USB_Host_SetDeviceConfiguration+0x42>
    15ac:	9b e0       	ldi	r25, 0x0B	; 11
    15ae:	90 93 1a 05 	sts	0x051A, r25
	}

	return ErrorCode;
}
    15b2:	1f 91       	pop	r17
    15b4:	08 95       	ret

000015b6 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    15b6:	ff 92       	push	r15
    15b8:	0f 93       	push	r16
    15ba:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    15bc:	07 ea       	ldi	r16, 0xA7	; 167
    15be:	10 e0       	ldi	r17, 0x00	; 0
    15c0:	f8 01       	movw	r30, r16
    15c2:	f0 80       	ld	r15, Z
    15c4:	f7 e0       	ldi	r31, 0x07	; 7
    15c6:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    15c8:	f8 01       	movw	r30, r16
    15ca:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    15cc:	19 db       	rcall	.-2510   	; 0xc00 <USB_Host_ProcessNextHostState>
    15ce:	f8 01       	movw	r30, r16
    15d0:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    15d2:	1f 91       	pop	r17
    15d4:	0f 91       	pop	r16
    15d6:	ff 90       	pop	r15
    15d8:	08 95       	ret

000015da <USB_ProcessHIDReport>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
    15da:	2f 92       	push	r2
    15dc:	3f 92       	push	r3
    15de:	4f 92       	push	r4
    15e0:	5f 92       	push	r5
    15e2:	6f 92       	push	r6
    15e4:	7f 92       	push	r7
    15e6:	8f 92       	push	r8
    15e8:	9f 92       	push	r9
    15ea:	af 92       	push	r10
    15ec:	bf 92       	push	r11
    15ee:	cf 92       	push	r12
    15f0:	df 92       	push	r13
    15f2:	ef 92       	push	r14
    15f4:	ff 92       	push	r15
    15f6:	0f 93       	push	r16
    15f8:	1f 93       	push	r17
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	c5 59       	subi	r28, 0x95	; 149
    1604:	d0 40       	sbci	r29, 0x00	; 0
    1606:	0f b6       	in	r0, 0x3f	; 63
    1608:	f8 94       	cli
    160a:	de bf       	out	0x3e, r29	; 62
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	cd bf       	out	0x3d, r28	; 61
    1610:	cf 57       	subi	r28, 0x7F	; 127
    1612:	df 4f       	sbci	r29, 0xFF	; 255
    1614:	99 83       	std	Y+1, r25	; 0x01
    1616:	88 83       	st	Y, r24
    1618:	c1 58       	subi	r28, 0x81	; 129
    161a:	d0 40       	sbci	r29, 0x00	; 0
    161c:	cd 57       	subi	r28, 0x7D	; 125
    161e:	df 4f       	sbci	r29, 0xFF	; 255
    1620:	79 83       	std	Y+1, r23	; 0x01
    1622:	68 83       	st	Y, r22
    1624:	c3 58       	subi	r28, 0x83	; 131
    1626:	d0 40       	sbci	r29, 0x00	; 0
    1628:	1a 01       	movw	r2, r20
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
    162a:	90 e9       	ldi	r25, 0x90	; 144
    162c:	49 2e       	mov	r4, r25
    162e:	93 e0       	ldi	r25, 0x03	; 3
    1630:	59 2e       	mov	r5, r25
    1632:	44 0e       	add	r4, r20
    1634:	55 1e       	adc	r5, r21
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
    1636:	89 ed       	ldi	r24, 0xD9	; 217
    1638:	93 e0       	ldi	r25, 0x03	; 3
    163a:	da 01       	movw	r26, r20
    163c:	fc 01       	movw	r30, r24
    163e:	1d 92       	st	X+, r1
    1640:	31 97       	sbiw	r30, 0x01	; 1
    1642:	e9 f7       	brne	.-6      	; 0x163e <USB_ProcessHIDReport+0x64>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
    1644:	fe 01       	movw	r30, r28
    1646:	fb 96       	adiw	r30, 0x3b	; 59
    1648:	8c e1       	ldi	r24, 0x1C	; 28
    164a:	df 01       	movw	r26, r30
    164c:	1d 92       	st	X+, r1
    164e:	8a 95       	dec	r24
    1650:	e9 f7       	brne	.-6      	; 0x164c <USB_ProcessHIDReport+0x72>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
    1652:	87 e0       	ldi	r24, 0x07	; 7
    1654:	d2 01       	movw	r26, r4
    1656:	1d 92       	st	X+, r1
    1658:	8a 95       	dec	r24
    165a:	e9 f7       	brne	.-6      	; 0x1656 <USB_ProcessHIDReport+0x7c>

	ParserData->TotalDeviceReports = 1;
    165c:	da 01       	movw	r26, r20
    165e:	a1 57       	subi	r26, 0x71	; 113
    1660:	bc 4f       	sbci	r27, 0xFC	; 252
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	8c 93       	st	X, r24
				UsageMinMax.Maximum = ReportItemData;
				break;
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
    1666:	9a 01       	movw	r18, r20
    1668:	27 5b       	subi	r18, 0xB7	; 183
    166a:	3c 4f       	sbci	r19, 0xFC	; 252
    166c:	e7 96       	adiw	r28, 0x37	; 55
    166e:	3f af       	std	Y+63, r19	; 0x3f
    1670:	2e af       	std	Y+62, r18	; 0x3e
    1672:	e7 97       	sbiw	r28, 0x37	; 55
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
    1674:	40 5b       	subi	r20, 0xB0	; 176
    1676:	5c 4f       	sbci	r21, 0xFC	; 252
    1678:	e5 96       	adiw	r28, 0x35	; 53
    167a:	5f af       	std	Y+63, r21	; 0x3f
    167c:	4e af       	std	Y+62, r20	; 0x3e
    167e:	e5 97       	sbiw	r28, 0x35	; 53

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
    1680:	c1 01       	movw	r24, r2
    1682:	88 57       	subi	r24, 0x78	; 120
    1684:	9c 4f       	sbci	r25, 0xFC	; 252
    1686:	ef 96       	adiw	r28, 0x3f	; 63
    1688:	9f af       	std	Y+63, r25	; 0x3f
    168a:	8e af       	std	Y+62, r24	; 0x3e
    168c:	ef 97       	sbiw	r28, 0x3f	; 63
    168e:	6f 01       	movw	r12, r30
    1690:	aa 24       	eor	r10, r10
    1692:	bb 24       	eor	r11, r11
    1694:	ed 96       	adiw	r28, 0x3d	; 61
    1696:	1f ae       	std	Y+63, r1	; 0x3f
    1698:	ed 97       	sbiw	r28, 0x3d	; 61
    169a:	eb 96       	adiw	r28, 0x3b	; 59
    169c:	1c ae       	std	Y+60, r1	; 0x3c
    169e:	1d ae       	std	Y+61, r1	; 0x3d
    16a0:	1e ae       	std	Y+62, r1	; 0x3e
    16a2:	1f ae       	std	Y+63, r1	; 0x3f
    16a4:	eb 97       	sbiw	r28, 0x3b	; 59
    16a6:	66 24       	eor	r6, r6
    16a8:	77 24       	eor	r7, r7
    16aa:	43 01       	movw	r8, r6

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					if (ParserData->LargestReportSizeBits < NewReportItem.BitOffset)
    16ac:	f1 01       	movw	r30, r2
    16ae:	ea 52       	subi	r30, 0x2A	; 42
    16b0:	fc 4f       	sbci	r31, 0xFC	; 252
    16b2:	c6 57       	subi	r28, 0x76	; 118
    16b4:	df 4f       	sbci	r29, 0xFF	; 255
    16b6:	f9 83       	std	Y+1, r31	; 0x01
    16b8:	e8 83       	st	Y, r30
    16ba:	ca 58       	subi	r28, 0x8A	; 138
    16bc:	d0 40       	sbci	r29, 0x00	; 0
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
    16be:	cc 56       	subi	r28, 0x6C	; 108
    16c0:	df 4f       	sbci	r29, 0xFF	; 255
    16c2:	d9 82       	std	Y+1, r13	; 0x01
    16c4:	c8 82       	st	Y, r12
    16c6:	c4 59       	subi	r28, 0x94	; 148
    16c8:	d0 40       	sbci	r29, 0x00	; 0
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
    16ca:	96 01       	movw	r18, r12
    16cc:	24 5e       	subi	r18, 0xE4	; 228
    16ce:	3f 4f       	sbci	r19, 0xFF	; 255
    16d0:	c4 57       	subi	r28, 0x74	; 116
    16d2:	df 4f       	sbci	r29, 0xFF	; 255
    16d4:	39 83       	std	Y+1, r19	; 0x01
    16d6:	28 83       	st	Y, r18
    16d8:	cc 58       	subi	r28, 0x8C	; 140
    16da:	d0 40       	sbci	r29, 0x00	; 0
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
    16dc:	a1 01       	movw	r20, r2
    16de:	48 52       	subi	r20, 0x28	; 40
    16e0:	5c 4f       	sbci	r21, 0xFC	; 252
    16e2:	c2 57       	subi	r28, 0x72	; 114
    16e4:	df 4f       	sbci	r29, 0xFF	; 255
    16e6:	59 83       	std	Y+1, r21	; 0x01
    16e8:	48 83       	st	Y, r20
    16ea:	ce 58       	subi	r28, 0x8E	; 142
    16ec:	d0 40       	sbci	r29, 0x00	; 0
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    16ee:	c0 57       	subi	r28, 0x70	; 112
    16f0:	df 4f       	sbci	r29, 0xFF	; 255
    16f2:	b9 83       	std	Y+1, r27	; 0x01
    16f4:	a8 83       	st	Y, r26
    16f6:	c0 59       	subi	r28, 0x90	; 144
    16f8:	d0 40       	sbci	r29, 0x00	; 0
    16fa:	c2 01       	movw	r24, r4
    16fc:	ce 56       	subi	r28, 0x6E	; 110
    16fe:	df 4f       	sbci	r29, 0xFF	; 255
    1700:	48 82       	st	Y, r4
    1702:	c2 59       	subi	r28, 0x92	; 146
    1704:	d0 40       	sbci	r29, 0x00	; 0
    1706:	cd 56       	subi	r28, 0x6D	; 109
    1708:	df 4f       	sbci	r29, 0xFF	; 255
    170a:	98 83       	st	Y, r25
    170c:	c3 59       	subi	r28, 0x93	; 147
    170e:	d0 40       	sbci	r29, 0x00	; 0
    1710:	32 c3       	rjmp	.+1636   	; 0x1d76 <USB_ProcessHIDReport+0x79c>

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
    1712:	cf 57       	subi	r28, 0x7F	; 127
    1714:	df 4f       	sbci	r29, 0xFF	; 255
    1716:	a8 81       	ld	r26, Y
    1718:	b9 81       	ldd	r27, Y+1	; 0x01
    171a:	c1 58       	subi	r28, 0x81	; 129
    171c:	d0 40       	sbci	r29, 0x00	; 0
    171e:	4d 91       	ld	r20, X+
    1720:	cf 57       	subi	r28, 0x7F	; 127
    1722:	df 4f       	sbci	r29, 0xFF	; 255
    1724:	b9 83       	std	Y+1, r27	; 0x01
    1726:	a8 83       	st	Y, r26
    1728:	c1 58       	subi	r28, 0x81	; 129
    172a:	d0 40       	sbci	r29, 0x00	; 0
		uint32_t ReportItemData = 0;

		ReportData++;
		ReportSize--;
    172c:	cd 57       	subi	r28, 0x7D	; 125
    172e:	df 4f       	sbci	r29, 0xFF	; 255
    1730:	e8 81       	ld	r30, Y
    1732:	f9 81       	ldd	r31, Y+1	; 0x01
    1734:	c3 58       	subi	r28, 0x83	; 131
    1736:	d0 40       	sbci	r29, 0x00	; 0
    1738:	31 97       	sbiw	r30, 0x01	; 1
    173a:	cd 57       	subi	r28, 0x7D	; 125
    173c:	df 4f       	sbci	r29, 0xFF	; 255
    173e:	f9 83       	std	Y+1, r31	; 0x01
    1740:	e8 83       	st	Y, r30
    1742:	c3 58       	subi	r28, 0x83	; 131
    1744:	d0 40       	sbci	r29, 0x00	; 0

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
    1746:	24 2f       	mov	r18, r20
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	c1 58       	subi	r28, 0x81	; 129
    174c:	df 4f       	sbci	r29, 0xFF	; 255
    174e:	39 83       	std	Y+1, r19	; 0x01
    1750:	28 83       	st	Y, r18
    1752:	cf 57       	subi	r28, 0x7F	; 127
    1754:	d0 40       	sbci	r29, 0x00	; 0
    1756:	23 70       	andi	r18, 0x03	; 3
    1758:	30 70       	andi	r19, 0x00	; 0
    175a:	22 30       	cpi	r18, 0x02	; 2
    175c:	31 05       	cpc	r19, r1
    175e:	11 f1       	breq	.+68     	; 0x17a4 <USB_ProcessHIDReport+0x1ca>
    1760:	23 30       	cpi	r18, 0x03	; 3
    1762:	31 05       	cpc	r19, r1
    1764:	39 f0       	breq	.+14     	; 0x1774 <USB_ProcessHIDReport+0x19a>
    1766:	21 30       	cpi	r18, 0x01	; 1
    1768:	31 05       	cpc	r19, r1
    176a:	a9 f1       	breq	.+106    	; 0x17d6 <USB_ProcessHIDReport+0x1fc>
    176c:	ee 24       	eor	r14, r14
    176e:	ff 24       	eor	r15, r15
    1770:	87 01       	movw	r16, r14
    1772:	4f c0       	rjmp	.+158    	; 0x1812 <USB_ProcessHIDReport+0x238>
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = le32_to_cpu(*((uint32_t*)ReportData));
    1774:	cf 57       	subi	r28, 0x7F	; 127
    1776:	df 4f       	sbci	r29, 0xFF	; 255
    1778:	a8 81       	ld	r26, Y
    177a:	b9 81       	ldd	r27, Y+1	; 0x01
    177c:	c1 58       	subi	r28, 0x81	; 129
    177e:	d0 40       	sbci	r29, 0x00	; 0
    1780:	ed 90       	ld	r14, X+
    1782:	fd 90       	ld	r15, X+
    1784:	0d 91       	ld	r16, X+
    1786:	1d 91       	ld	r17, X+
    1788:	cf 57       	subi	r28, 0x7F	; 127
    178a:	df 4f       	sbci	r29, 0xFF	; 255
    178c:	b9 83       	std	Y+1, r27	; 0x01
    178e:	a8 83       	st	Y, r26
    1790:	c1 58       	subi	r28, 0x81	; 129
    1792:	d0 40       	sbci	r29, 0x00	; 0
				ReportSize     -= 4;
    1794:	cd 57       	subi	r28, 0x7D	; 125
    1796:	df 4f       	sbci	r29, 0xFF	; 255
    1798:	e8 81       	ld	r30, Y
    179a:	f9 81       	ldd	r31, Y+1	; 0x01
    179c:	c3 58       	subi	r28, 0x83	; 131
    179e:	d0 40       	sbci	r29, 0x00	; 0
    17a0:	34 97       	sbiw	r30, 0x04	; 4
    17a2:	31 c0       	rjmp	.+98     	; 0x1806 <USB_ProcessHIDReport+0x22c>
				ReportData     += 4;
				break;
			case HID_RI_DATA_BITS_16:
				ReportItemData  = le16_to_cpu(*((uint16_t*)ReportData));
    17a4:	cf 57       	subi	r28, 0x7F	; 127
    17a6:	df 4f       	sbci	r29, 0xFF	; 255
    17a8:	a8 81       	ld	r26, Y
    17aa:	b9 81       	ldd	r27, Y+1	; 0x01
    17ac:	c1 58       	subi	r28, 0x81	; 129
    17ae:	d0 40       	sbci	r29, 0x00	; 0
    17b0:	8d 91       	ld	r24, X+
    17b2:	9d 91       	ld	r25, X+
    17b4:	cf 57       	subi	r28, 0x7F	; 127
    17b6:	df 4f       	sbci	r29, 0xFF	; 255
    17b8:	b9 83       	std	Y+1, r27	; 0x01
    17ba:	a8 83       	st	Y, r26
    17bc:	c1 58       	subi	r28, 0x81	; 129
    17be:	d0 40       	sbci	r29, 0x00	; 0
    17c0:	7c 01       	movw	r14, r24
    17c2:	00 e0       	ldi	r16, 0x00	; 0
    17c4:	10 e0       	ldi	r17, 0x00	; 0
				ReportSize     -= 2;
    17c6:	cd 57       	subi	r28, 0x7D	; 125
    17c8:	df 4f       	sbci	r29, 0xFF	; 255
    17ca:	e8 81       	ld	r30, Y
    17cc:	f9 81       	ldd	r31, Y+1	; 0x01
    17ce:	c3 58       	subi	r28, 0x83	; 131
    17d0:	d0 40       	sbci	r29, 0x00	; 0
    17d2:	32 97       	sbiw	r30, 0x02	; 2
    17d4:	18 c0       	rjmp	.+48     	; 0x1806 <USB_ProcessHIDReport+0x22c>
				ReportData     += 2;
				break;
			case HID_RI_DATA_BITS_8:
				ReportItemData  = *((uint8_t*)ReportData);
    17d6:	cf 57       	subi	r28, 0x7F	; 127
    17d8:	df 4f       	sbci	r29, 0xFF	; 255
    17da:	a8 81       	ld	r26, Y
    17dc:	b9 81       	ldd	r27, Y+1	; 0x01
    17de:	c1 58       	subi	r28, 0x81	; 129
    17e0:	d0 40       	sbci	r29, 0x00	; 0
    17e2:	8d 91       	ld	r24, X+
    17e4:	cf 57       	subi	r28, 0x7F	; 127
    17e6:	df 4f       	sbci	r29, 0xFF	; 255
    17e8:	b9 83       	std	Y+1, r27	; 0x01
    17ea:	a8 83       	st	Y, r26
    17ec:	c1 58       	subi	r28, 0x81	; 129
    17ee:	d0 40       	sbci	r29, 0x00	; 0
    17f0:	e8 2e       	mov	r14, r24
    17f2:	ff 24       	eor	r15, r15
    17f4:	00 e0       	ldi	r16, 0x00	; 0
    17f6:	10 e0       	ldi	r17, 0x00	; 0
				ReportSize     -= 1;
    17f8:	cd 57       	subi	r28, 0x7D	; 125
    17fa:	df 4f       	sbci	r29, 0xFF	; 255
    17fc:	e8 81       	ld	r30, Y
    17fe:	f9 81       	ldd	r31, Y+1	; 0x01
    1800:	c3 58       	subi	r28, 0x83	; 131
    1802:	d0 40       	sbci	r29, 0x00	; 0
    1804:	31 97       	sbiw	r30, 0x01	; 1
    1806:	cd 57       	subi	r28, 0x7D	; 125
    1808:	df 4f       	sbci	r29, 0xFF	; 255
    180a:	f9 83       	std	Y+1, r31	; 0x01
    180c:	e8 83       	st	Y, r30
    180e:	c3 58       	subi	r28, 0x83	; 131
    1810:	d0 40       	sbci	r29, 0x00	; 0
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
    1812:	c1 58       	subi	r28, 0x81	; 129
    1814:	df 4f       	sbci	r29, 0xFF	; 255
    1816:	88 81       	ld	r24, Y
    1818:	99 81       	ldd	r25, Y+1	; 0x01
    181a:	cf 57       	subi	r28, 0x7F	; 127
    181c:	d0 40       	sbci	r29, 0x00	; 0
    181e:	8c 7f       	andi	r24, 0xFC	; 252
    1820:	90 70       	andi	r25, 0x00	; 0
    1822:	84 36       	cpi	r24, 0x64	; 100
    1824:	91 05       	cpc	r25, r1
    1826:	09 f4       	brne	.+2      	; 0x182a <USB_ProcessHIDReport+0x250>
    1828:	db c0       	rjmp	.+438    	; 0x19e0 <USB_ProcessHIDReport+0x406>
    182a:	85 36       	cpi	r24, 0x65	; 101
    182c:	91 05       	cpc	r25, r1
    182e:	74 f5       	brge	.+92     	; 0x188c <USB_ProcessHIDReport+0x2b2>
    1830:	84 32       	cpi	r24, 0x24	; 36
    1832:	91 05       	cpc	r25, r1
    1834:	09 f4       	brne	.+2      	; 0x1838 <USB_ProcessHIDReport+0x25e>
    1836:	bb c0       	rjmp	.+374    	; 0x19ae <USB_ProcessHIDReport+0x3d4>
    1838:	85 32       	cpi	r24, 0x25	; 37
    183a:	91 05       	cpc	r25, r1
    183c:	9c f4       	brge	.+38     	; 0x1864 <USB_ProcessHIDReport+0x28a>
    183e:	88 30       	cpi	r24, 0x08	; 8
    1840:	91 05       	cpc	r25, r1
    1842:	09 f4       	brne	.+2      	; 0x1846 <USB_ProcessHIDReport+0x26c>
    1844:	37 c1       	rjmp	.+622    	; 0x1ab4 <USB_ProcessHIDReport+0x4da>
    1846:	89 30       	cpi	r24, 0x09	; 9
    1848:	91 05       	cpc	r25, r1
    184a:	24 f4       	brge	.+8      	; 0x1854 <USB_ProcessHIDReport+0x27a>
    184c:	04 97       	sbiw	r24, 0x04	; 4
    184e:	09 f0       	breq	.+2      	; 0x1852 <USB_ProcessHIDReport+0x278>
    1850:	7a c2       	rjmp	.+1268   	; 0x1d46 <USB_ProcessHIDReport+0x76c>
    1852:	98 c0       	rjmp	.+304    	; 0x1984 <USB_ProcessHIDReport+0x3aa>
    1854:	84 31       	cpi	r24, 0x14	; 20
    1856:	91 05       	cpc	r25, r1
    1858:	09 f4       	brne	.+2      	; 0x185c <USB_ProcessHIDReport+0x282>
    185a:	a3 c0       	rjmp	.+326    	; 0x19a2 <USB_ProcessHIDReport+0x3c8>
    185c:	48 97       	sbiw	r24, 0x18	; 24
    185e:	09 f0       	breq	.+2      	; 0x1862 <USB_ProcessHIDReport+0x288>
    1860:	72 c2       	rjmp	.+1252   	; 0x1d46 <USB_ProcessHIDReport+0x76c>
    1862:	47 c0       	rjmp	.+142    	; 0x18f2 <USB_ProcessHIDReport+0x318>
    1864:	84 33       	cpi	r24, 0x34	; 52
    1866:	91 05       	cpc	r25, r1
    1868:	09 f4       	brne	.+2      	; 0x186c <USB_ProcessHIDReport+0x292>
    186a:	a9 c0       	rjmp	.+338    	; 0x19be <USB_ProcessHIDReport+0x3e4>
    186c:	85 33       	cpi	r24, 0x35	; 53
    186e:	91 05       	cpc	r25, r1
    1870:	24 f4       	brge	.+8      	; 0x187a <USB_ProcessHIDReport+0x2a0>
    1872:	88 97       	sbiw	r24, 0x28	; 40
    1874:	09 f0       	breq	.+2      	; 0x1878 <USB_ProcessHIDReport+0x29e>
    1876:	67 c2       	rjmp	.+1230   	; 0x1d46 <USB_ProcessHIDReport+0x76c>
    1878:	38 c1       	rjmp	.+624    	; 0x1aea <USB_ProcessHIDReport+0x510>
    187a:	84 34       	cpi	r24, 0x44	; 68
    187c:	91 05       	cpc	r25, r1
    187e:	09 f4       	brne	.+2      	; 0x1882 <USB_ProcessHIDReport+0x2a8>
    1880:	a4 c0       	rjmp	.+328    	; 0x19ca <USB_ProcessHIDReport+0x3f0>
    1882:	84 35       	cpi	r24, 0x54	; 84
    1884:	91 05       	cpc	r25, r1
    1886:	09 f0       	breq	.+2      	; 0x188a <USB_ProcessHIDReport+0x2b0>
    1888:	5e c2       	rjmp	.+1212   	; 0x1d46 <USB_ProcessHIDReport+0x76c>
    188a:	a7 c0       	rjmp	.+334    	; 0x19da <USB_ProcessHIDReport+0x400>
    188c:	84 39       	cpi	r24, 0x94	; 148
    188e:	91 05       	cpc	r25, r1
    1890:	09 f4       	brne	.+2      	; 0x1894 <USB_ProcessHIDReport+0x2ba>
    1892:	b1 c0       	rjmp	.+354    	; 0x19f6 <USB_ProcessHIDReport+0x41c>
    1894:	85 39       	cpi	r24, 0x95	; 149
    1896:	91 05       	cpc	r25, r1
    1898:	a4 f4       	brge	.+40     	; 0x18c2 <USB_ProcessHIDReport+0x2e8>
    189a:	80 38       	cpi	r24, 0x80	; 128
    189c:	91 05       	cpc	r25, r1
    189e:	69 f1       	breq	.+90     	; 0x18fa <USB_ProcessHIDReport+0x320>
    18a0:	81 38       	cpi	r24, 0x81	; 129
    18a2:	91 05       	cpc	r25, r1
    18a4:	2c f4       	brge	.+10     	; 0x18b0 <USB_ProcessHIDReport+0x2d6>
    18a6:	84 37       	cpi	r24, 0x74	; 116
    18a8:	91 05       	cpc	r25, r1
    18aa:	09 f0       	breq	.+2      	; 0x18ae <USB_ProcessHIDReport+0x2d4>
    18ac:	4c c2       	rjmp	.+1176   	; 0x1d46 <USB_ProcessHIDReport+0x76c>
    18ae:	a0 c0       	rjmp	.+320    	; 0x19f0 <USB_ProcessHIDReport+0x416>
    18b0:	84 38       	cpi	r24, 0x84	; 132
    18b2:	91 05       	cpc	r25, r1
    18b4:	09 f4       	brne	.+2      	; 0x18b8 <USB_ProcessHIDReport+0x2de>
    18b6:	a3 c0       	rjmp	.+326    	; 0x19fe <USB_ProcessHIDReport+0x424>
    18b8:	80 39       	cpi	r24, 0x90	; 144
    18ba:	91 05       	cpc	r25, r1
    18bc:	09 f0       	breq	.+2      	; 0x18c0 <USB_ProcessHIDReport+0x2e6>
    18be:	43 c2       	rjmp	.+1158   	; 0x1d46 <USB_ProcessHIDReport+0x76c>
    18c0:	1c c0       	rjmp	.+56     	; 0x18fa <USB_ProcessHIDReport+0x320>
    18c2:	80 3b       	cpi	r24, 0xB0	; 176
    18c4:	91 05       	cpc	r25, r1
    18c6:	c9 f0       	breq	.+50     	; 0x18fa <USB_ProcessHIDReport+0x320>
    18c8:	81 3b       	cpi	r24, 0xB1	; 177
    18ca:	91 05       	cpc	r25, r1
    18cc:	4c f4       	brge	.+18     	; 0x18e0 <USB_ProcessHIDReport+0x306>
    18ce:	80 3a       	cpi	r24, 0xA0	; 160
    18d0:	91 05       	cpc	r25, r1
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <USB_ProcessHIDReport+0x2fc>
    18d4:	12 c1       	rjmp	.+548    	; 0x1afa <USB_ProcessHIDReport+0x520>
    18d6:	84 3a       	cpi	r24, 0xA4	; 164
    18d8:	91 05       	cpc	r25, r1
    18da:	09 f0       	breq	.+2      	; 0x18de <USB_ProcessHIDReport+0x304>
    18dc:	34 c2       	rjmp	.+1128   	; 0x1d46 <USB_ProcessHIDReport+0x76c>
    18de:	2a c0       	rjmp	.+84     	; 0x1934 <USB_ProcessHIDReport+0x35a>
    18e0:	84 3b       	cpi	r24, 0xB4	; 180
    18e2:	91 05       	cpc	r25, r1
    18e4:	09 f4       	brne	.+2      	; 0x18e8 <USB_ProcessHIDReport+0x30e>
    18e6:	3e c0       	rjmp	.+124    	; 0x1964 <USB_ProcessHIDReport+0x38a>
    18e8:	80 3c       	cpi	r24, 0xC0	; 192
    18ea:	91 05       	cpc	r25, r1
    18ec:	09 f0       	breq	.+2      	; 0x18f0 <USB_ProcessHIDReport+0x316>
    18ee:	2b c2       	rjmp	.+1110   	; 0x1d46 <USB_ProcessHIDReport+0x76c>
    18f0:	63 c1       	rjmp	.+710    	; 0x1bb8 <USB_ProcessHIDReport+0x5de>
    18f2:	f5 01       	movw	r30, r10
    18f4:	37 01       	movw	r6, r14
    18f6:	48 01       	movw	r8, r16
    18f8:	27 c2       	rjmp	.+1102   	; 0x1d48 <USB_ProcessHIDReport+0x76e>
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
    18fa:	cb 57       	subi	r28, 0x7B	; 123
    18fc:	df 4f       	sbci	r29, 0xFF	; 255
    18fe:	c8 82       	st	Y, r12
    1900:	c5 58       	subi	r28, 0x85	; 133
    1902:	d0 40       	sbci	r29, 0x00	; 0
    1904:	ca 57       	subi	r28, 0x7A	; 122
    1906:	df 4f       	sbci	r29, 0xFF	; 255
    1908:	d8 82       	st	Y, r13
    190a:	c6 58       	subi	r28, 0x86	; 134
    190c:	d0 40       	sbci	r29, 0x00	; 0
    190e:	ec 96       	adiw	r28, 0x3c	; 60
    1910:	1f ae       	std	Y+63, r1	; 0x3f
    1912:	ec 97       	sbiw	r28, 0x3c	; 60
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));
    1914:	4c 7f       	andi	r20, 0xFC	; 252
    1916:	c9 57       	subi	r28, 0x79	; 121
    1918:	df 4f       	sbci	r29, 0xFF	; 255
    191a:	48 83       	st	Y, r20
    191c:	c7 58       	subi	r28, 0x87	; 135
    191e:	d0 40       	sbci	r29, 0x00	; 0
					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					if (ParserData->LargestReportSizeBits < NewReportItem.BitOffset)
					  ParserData->LargestReportSizeBits = NewReportItem.BitOffset;

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    1920:	97 01       	movw	r18, r14
    1922:	21 70       	andi	r18, 0x01	; 1
    1924:	30 70       	andi	r19, 0x00	; 0
    1926:	c8 57       	subi	r28, 0x78	; 120
    1928:	df 4f       	sbci	r29, 0xFF	; 255
    192a:	39 83       	std	Y+1, r19	; 0x01
    192c:	28 83       	st	Y, r18
    192e:	c8 58       	subi	r28, 0x88	; 136
    1930:	d0 40       	sbci	r29, 0x00	; 0
    1932:	00 c2       	rjmp	.+1024   	; 0x1d34 <USB_ProcessHIDReport+0x75a>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
    1934:	c4 57       	subi	r28, 0x74	; 116
    1936:	df 4f       	sbci	r29, 0xFF	; 255
    1938:	48 81       	ld	r20, Y
    193a:	59 81       	ldd	r21, Y+1	; 0x01
    193c:	cc 58       	subi	r28, 0x8C	; 140
    193e:	d0 40       	sbci	r29, 0x00	; 0
    1940:	c4 16       	cp	r12, r20
    1942:	d5 06       	cpc	r13, r21
    1944:	11 f4       	brne	.+4      	; 0x194a <USB_ProcessHIDReport+0x370>
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	26 c2       	rjmp	.+1100   	; 0x1d96 <USB_ProcessHIDReport+0x7bc>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
    194a:	d6 01       	movw	r26, r12
    194c:	5c 96       	adiw	r26, 0x1c	; 28
    194e:	f6 01       	movw	r30, r12
    1950:	8a e2       	ldi	r24, 0x2A	; 42
    1952:	01 90       	ld	r0, Z+
    1954:	0d 92       	st	X+, r0
    1956:	81 50       	subi	r24, 0x01	; 1
    1958:	e1 f7       	brne	.-8      	; 0x1952 <USB_ProcessHIDReport+0x378>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
    195a:	8c e1       	ldi	r24, 0x1C	; 28
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	c8 0e       	add	r12, r24
    1960:	d9 1e       	adc	r13, r25
    1962:	f1 c1       	rjmp	.+994    	; 0x1d46 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
    1964:	cc 56       	subi	r28, 0x6C	; 108
    1966:	df 4f       	sbci	r29, 0xFF	; 255
    1968:	a8 81       	ld	r26, Y
    196a:	b9 81       	ldd	r27, Y+1	; 0x01
    196c:	c4 59       	subi	r28, 0x94	; 148
    196e:	d0 40       	sbci	r29, 0x00	; 0
    1970:	ca 16       	cp	r12, r26
    1972:	db 06       	cpc	r13, r27
    1974:	11 f4       	brne	.+4      	; 0x197a <USB_ProcessHIDReport+0x3a0>
    1976:	82 e0       	ldi	r24, 0x02	; 2
    1978:	0e c2       	rjmp	.+1052   	; 0x1d96 <USB_ProcessHIDReport+0x7bc>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
    197a:	e4 ee       	ldi	r30, 0xE4	; 228
    197c:	ff ef       	ldi	r31, 0xFF	; 255
    197e:	ce 0e       	add	r12, r30
    1980:	df 1e       	adc	r13, r31
    1982:	e1 c1       	rjmp	.+962    	; 0x1d46 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
    1984:	23 30       	cpi	r18, 0x03	; 3
    1986:	31 05       	cpc	r19, r1
    1988:	31 f4       	brne	.+12     	; 0x1996 <USB_ProcessHIDReport+0x3bc>
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);
    198a:	c8 01       	movw	r24, r16
    198c:	aa 27       	eor	r26, r26
    198e:	bb 27       	eor	r27, r27
    1990:	f6 01       	movw	r30, r12
    1992:	92 83       	std	Z+2, r25	; 0x02
    1994:	81 83       	std	Z+1, r24	; 0x01
				
				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
    1996:	d6 01       	movw	r26, r12
    1998:	12 96       	adiw	r26, 0x02	; 2
    199a:	fc 92       	st	X, r15
    199c:	ee 92       	st	-X, r14
    199e:	11 97       	sbiw	r26, 0x01	; 1
    19a0:	d2 c1       	rjmp	.+932    	; 0x1d46 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
    19a2:	f6 01       	movw	r30, r12
    19a4:	e2 86       	std	Z+10, r14	; 0x0a
    19a6:	f3 86       	std	Z+11, r15	; 0x0b
    19a8:	04 87       	std	Z+12, r16	; 0x0c
    19aa:	15 87       	std	Z+13, r17	; 0x0d
    19ac:	cc c1       	rjmp	.+920    	; 0x1d46 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
    19ae:	d6 01       	movw	r26, r12
    19b0:	1e 96       	adiw	r26, 0x0e	; 14
    19b2:	ed 92       	st	X+, r14
    19b4:	fd 92       	st	X+, r15
    19b6:	0d 93       	st	X+, r16
    19b8:	1c 93       	st	X, r17
    19ba:	51 97       	sbiw	r26, 0x11	; 17
    19bc:	c4 c1       	rjmp	.+904    	; 0x1d46 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
    19be:	f6 01       	movw	r30, r12
    19c0:	e2 8a       	std	Z+18, r14	; 0x12
    19c2:	f3 8a       	std	Z+19, r15	; 0x13
    19c4:	04 8b       	std	Z+20, r16	; 0x14
    19c6:	15 8b       	std	Z+21, r17	; 0x15
    19c8:	be c1       	rjmp	.+892    	; 0x1d46 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
    19ca:	d6 01       	movw	r26, r12
    19cc:	56 96       	adiw	r26, 0x16	; 22
    19ce:	ed 92       	st	X+, r14
    19d0:	fd 92       	st	X+, r15
    19d2:	0d 93       	st	X+, r16
    19d4:	1c 93       	st	X, r17
    19d6:	59 97       	sbiw	r26, 0x19	; 25
    19d8:	b6 c1       	rjmp	.+876    	; 0x1d46 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
    19da:	f6 01       	movw	r30, r12
    19dc:	e1 86       	std	Z+9, r14	; 0x09
    19de:	b3 c1       	rjmp	.+870    	; 0x1d46 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
    19e0:	d6 01       	movw	r26, r12
    19e2:	15 96       	adiw	r26, 0x05	; 5
    19e4:	ed 92       	st	X+, r14
    19e6:	fd 92       	st	X+, r15
    19e8:	0d 93       	st	X+, r16
    19ea:	1c 93       	st	X, r17
    19ec:	18 97       	sbiw	r26, 0x08	; 8
    19ee:	ab c1       	rjmp	.+854    	; 0x1d46 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
    19f0:	f6 01       	movw	r30, r12
    19f2:	e0 82       	st	Z, r14
    19f4:	a8 c1       	rjmp	.+848    	; 0x1d46 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
    19f6:	d6 01       	movw	r26, r12
    19f8:	5a 96       	adiw	r26, 0x1a	; 26
    19fa:	ec 92       	st	X, r14
    19fc:	a4 c1       	rjmp	.+840    	; 0x1d46 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
    19fe:	3e 2d       	mov	r19, r14
    1a00:	f6 01       	movw	r30, r12
    1a02:	e3 8e       	std	Z+27, r14	; 0x1b

				if (ParserData->UsingReportIDs)
    1a04:	c2 57       	subi	r28, 0x72	; 114
    1a06:	df 4f       	sbci	r29, 0xFF	; 255
    1a08:	a8 81       	ld	r26, Y
    1a0a:	b9 81       	ldd	r27, Y+1	; 0x01
    1a0c:	ce 58       	subi	r28, 0x8E	; 142
    1a0e:	d0 40       	sbci	r29, 0x00	; 0
    1a10:	8c 91       	ld	r24, X
    1a12:	88 23       	and	r24, r24
    1a14:	09 f4       	brne	.+2      	; 0x1a18 <USB_ProcessHIDReport+0x43e>
    1a16:	40 c0       	rjmp	.+128    	; 0x1a98 <USB_ProcessHIDReport+0x4be>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    1a18:	c0 57       	subi	r28, 0x70	; 112
    1a1a:	df 4f       	sbci	r29, 0xFF	; 255
    1a1c:	e8 81       	ld	r30, Y
    1a1e:	f9 81       	ldd	r31, Y+1	; 0x01
    1a20:	c0 59       	subi	r28, 0x90	; 144
    1a22:	d0 40       	sbci	r29, 0x00	; 0
    1a24:	20 81       	ld	r18, Z
    1a26:	ce 56       	subi	r28, 0x6E	; 110
    1a28:	df 4f       	sbci	r29, 0xFF	; 255
    1a2a:	88 81       	ld	r24, Y
    1a2c:	c2 59       	subi	r28, 0x92	; 146
    1a2e:	d0 40       	sbci	r29, 0x00	; 0
    1a30:	cd 56       	subi	r28, 0x6D	; 109
    1a32:	df 4f       	sbci	r29, 0xFF	; 255
    1a34:	98 81       	ld	r25, Y
    1a36:	c3 59       	subi	r28, 0x93	; 147
    1a38:	d0 40       	sbci	r29, 0x00	; 0
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	e0 e0       	ldi	r30, 0x00	; 0
    1a3e:	10 c0       	rjmp	.+32     	; 0x1a60 <USB_ProcessHIDReport+0x486>
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
    1a40:	8c 91       	ld	r24, X
    1a42:	17 96       	adiw	r26, 0x07	; 7
    1a44:	83 17       	cp	r24, r19
    1a46:	59 f4       	brne	.+22     	; 0x1a5e <USB_ProcessHIDReport+0x484>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
    1a48:	87 e0       	ldi	r24, 0x07	; 7
    1a4a:	e8 9f       	mul	r30, r24
    1a4c:	20 01       	movw	r4, r0
    1a4e:	11 24       	eor	r1, r1
    1a50:	20 e9       	ldi	r18, 0x90	; 144
    1a52:	33 e0       	ldi	r19, 0x03	; 3
    1a54:	42 0e       	add	r4, r18
    1a56:	53 1e       	adc	r5, r19
    1a58:	42 0c       	add	r4, r2
    1a5a:	53 1c       	adc	r5, r3
    1a5c:	1d c0       	rjmp	.+58     	; 0x1a98 <USB_ProcessHIDReport+0x4be>

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    1a5e:	ef 5f       	subi	r30, 0xFF	; 255
    1a60:	e2 17       	cp	r30, r18
    1a62:	70 f3       	brcs	.-36     	; 0x1a40 <USB_ProcessHIDReport+0x466>
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
    1a64:	2a 30       	cpi	r18, 0x0A	; 10
    1a66:	11 f4       	brne	.+4      	; 0x1a6c <USB_ProcessHIDReport+0x492>
    1a68:	87 e0       	ldi	r24, 0x07	; 7
    1a6a:	95 c1       	rjmp	.+810    	; 0x1d96 <USB_ProcessHIDReport+0x7bc>
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
    1a6c:	87 e0       	ldi	r24, 0x07	; 7
    1a6e:	28 9f       	mul	r18, r24
    1a70:	20 01       	movw	r4, r0
    1a72:	11 24       	eor	r1, r1
    1a74:	40 e9       	ldi	r20, 0x90	; 144
    1a76:	53 e0       	ldi	r21, 0x03	; 3
    1a78:	44 0e       	add	r4, r20
    1a7a:	55 1e       	adc	r5, r21
    1a7c:	42 0c       	add	r4, r2
    1a7e:	53 1c       	adc	r5, r3
    1a80:	2f 5f       	subi	r18, 0xFF	; 255
    1a82:	c0 57       	subi	r28, 0x70	; 112
    1a84:	df 4f       	sbci	r29, 0xFF	; 255
    1a86:	a8 81       	ld	r26, Y
    1a88:	b9 81       	ldd	r27, Y+1	; 0x01
    1a8a:	c0 59       	subi	r28, 0x90	; 144
    1a8c:	d0 40       	sbci	r29, 0x00	; 0
    1a8e:	2c 93       	st	X, r18
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
    1a90:	f2 01       	movw	r30, r4
    1a92:	11 92       	st	Z+, r1
    1a94:	8a 95       	dec	r24
    1a96:	e9 f7       	brne	.-6      	; 0x1a92 <USB_ProcessHIDReport+0x4b8>
					}
				}

				ParserData->UsingReportIDs = true;
    1a98:	e1 e0       	ldi	r30, 0x01	; 1
    1a9a:	c2 57       	subi	r28, 0x72	; 114
    1a9c:	df 4f       	sbci	r29, 0xFF	; 255
    1a9e:	a8 81       	ld	r26, Y
    1aa0:	b9 81       	ldd	r27, Y+1	; 0x01
    1aa2:	ce 58       	subi	r28, 0x8E	; 142
    1aa4:	d0 40       	sbci	r29, 0x00	; 0
    1aa6:	ec 93       	st	X, r30

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
    1aa8:	d6 01       	movw	r26, r12
    1aaa:	5b 96       	adiw	r26, 0x1b	; 27
    1aac:	8c 91       	ld	r24, X
    1aae:	f2 01       	movw	r30, r4
    1ab0:	80 83       	st	Z, r24
    1ab2:	49 c1       	rjmp	.+658    	; 0x1d46 <USB_ProcessHIDReport+0x76c>
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
    1ab4:	ed 96       	adiw	r28, 0x3d	; 61
    1ab6:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ab8:	ed 97       	sbiw	r28, 0x3d	; 61
    1aba:	f8 30       	cpi	r31, 0x08	; 8
    1abc:	11 f4       	brne	.+4      	; 0x1ac2 <USB_ProcessHIDReport+0x4e8>
    1abe:	86 e0       	ldi	r24, 0x06	; 6
    1ac0:	6a c1       	rjmp	.+724    	; 0x1d96 <USB_ProcessHIDReport+0x7bc>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
    1ac2:	ed 96       	adiw	r28, 0x3d	; 61
    1ac4:	2f ad       	ldd	r18, Y+63	; 0x3f
    1ac6:	ed 97       	sbiw	r28, 0x3d	; 61
    1ac8:	e2 2f       	mov	r30, r18
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	ee 0f       	add	r30, r30
    1ace:	ff 1f       	adc	r31, r31
    1ad0:	41 e0       	ldi	r20, 0x01	; 1
    1ad2:	50 e0       	ldi	r21, 0x00	; 0
    1ad4:	4c 0f       	add	r20, r28
    1ad6:	5d 1f       	adc	r21, r29
    1ad8:	e4 0f       	add	r30, r20
    1ada:	f5 1f       	adc	r31, r21
    1adc:	f1 82       	std	Z+1, r15	; 0x01
    1ade:	e0 82       	st	Z, r14
    1ae0:	2f 5f       	subi	r18, 0xFF	; 255
    1ae2:	ed 96       	adiw	r28, 0x3d	; 61
    1ae4:	2f af       	std	Y+63, r18	; 0x3f
    1ae6:	ed 97       	sbiw	r28, 0x3d	; 61
    1ae8:	2e c1       	rjmp	.+604    	; 0x1d46 <USB_ProcessHIDReport+0x76c>
				break;
    1aea:	f5 01       	movw	r30, r10
    1aec:	eb 96       	adiw	r28, 0x3b	; 59
    1aee:	ec ae       	std	Y+60, r14	; 0x3c
    1af0:	fd ae       	std	Y+61, r15	; 0x3d
    1af2:	0e af       	std	Y+62, r16	; 0x3e
    1af4:	1f af       	std	Y+63, r17	; 0x3f
    1af6:	eb 97       	sbiw	r28, 0x3b	; 59
    1af8:	27 c1       	rjmp	.+590    	; 0x1d48 <USB_ProcessHIDReport+0x76e>
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
    1afa:	a1 14       	cp	r10, r1
    1afc:	b1 04       	cpc	r11, r1
    1afe:	29 f4       	brne	.+10     	; 0x1b0a <USB_ProcessHIDReport+0x530>
    1b00:	e7 96       	adiw	r28, 0x37	; 55
    1b02:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b04:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b06:	e7 97       	sbiw	r28, 0x37	; 55
    1b08:	15 c0       	rjmp	.+42     	; 0x1b34 <USB_ProcessHIDReport+0x55a>
    1b0a:	e5 96       	adiw	r28, 0x35	; 53
    1b0c:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b0e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b10:	e5 97       	sbiw	r28, 0x35	; 53
    1b12:	0a c0       	rjmp	.+20     	; 0x1b28 <USB_ProcessHIDReport+0x54e>

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
    1b14:	ef 96       	adiw	r28, 0x3f	; 63
    1b16:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b18:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b1a:	ef 97       	sbiw	r28, 0x3f	; 63
    1b1c:	e8 17       	cp	r30, r24
    1b1e:	f9 07       	cpc	r31, r25
    1b20:	11 f4       	brne	.+4      	; 0x1b26 <USB_ProcessHIDReport+0x54c>
    1b22:	85 e0       	ldi	r24, 0x05	; 5
    1b24:	38 c1       	rjmp	.+624    	; 0x1d96 <USB_ProcessHIDReport+0x7bc>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
    1b26:	37 96       	adiw	r30, 0x07	; 7
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
    1b28:	85 81       	ldd	r24, Z+5	; 0x05
    1b2a:	96 81       	ldd	r25, Z+6	; 0x06
    1b2c:	89 2b       	or	r24, r25
    1b2e:	91 f7       	brne	.-28     	; 0x1b14 <USB_ProcessHIDReport+0x53a>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
    1b30:	b6 82       	std	Z+6, r11	; 0x06
    1b32:	a5 82       	std	Z+5, r10	; 0x05
				}

				CurrCollectionPath->Type       = ReportItemData;
    1b34:	e0 82       	st	Z, r14
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
    1b36:	d6 01       	movw	r26, r12
    1b38:	11 96       	adiw	r26, 0x01	; 1
    1b3a:	8d 91       	ld	r24, X+
    1b3c:	9c 91       	ld	r25, X
    1b3e:	12 97       	sbiw	r26, 0x02	; 2
    1b40:	92 83       	std	Z+2, r25	; 0x02
    1b42:	81 83       	std	Z+1, r24	; 0x01

				if (UsageListSize)
    1b44:	ed 96       	adiw	r28, 0x3d	; 61
    1b46:	bf ad       	ldd	r27, Y+63	; 0x3f
    1b48:	ed 97       	sbiw	r28, 0x3d	; 61
    1b4a:	bb 23       	and	r27, r27
    1b4c:	09 f1       	breq	.+66     	; 0x1b90 <USB_ProcessHIDReport+0x5b6>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	9a 81       	ldd	r25, Y+2	; 0x02
    1b52:	94 83       	std	Z+4, r25	; 0x04
    1b54:	83 83       	std	Z+3, r24	; 0x03
    1b56:	de 01       	movw	r26, r28
    1b58:	11 96       	adiw	r26, 0x01	; 1

					for (uint8_t i = 0; i < UsageListSize; i++)
    1b5a:	ed 96       	adiw	r28, 0x3d	; 61
    1b5c:	4f ad       	ldd	r20, Y+63	; 0x3f
    1b5e:	ed 97       	sbiw	r28, 0x3d	; 61
    1b60:	24 2f       	mov	r18, r20
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	22 0f       	add	r18, r18
    1b66:	33 1f       	adc	r19, r19
    1b68:	2a 0f       	add	r18, r26
    1b6a:	3b 1f       	adc	r19, r27
    1b6c:	06 c0       	rjmp	.+12     	; 0x1b7a <USB_ProcessHIDReport+0x5a0>
					  UsageList[i] = UsageList[i + 1];
    1b6e:	12 96       	adiw	r26, 0x02	; 2
    1b70:	8d 91       	ld	r24, X+
    1b72:	9c 91       	ld	r25, X
    1b74:	13 97       	sbiw	r26, 0x03	; 3
    1b76:	8d 93       	st	X+, r24
    1b78:	9d 93       	st	X+, r25

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
    1b7a:	a2 17       	cp	r26, r18
    1b7c:	b3 07       	cpc	r27, r19
    1b7e:	b9 f7       	brne	.-18     	; 0x1b6e <USB_ProcessHIDReport+0x594>
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
    1b80:	ed 96       	adiw	r28, 0x3d	; 61
    1b82:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b84:	ed 97       	sbiw	r28, 0x3d	; 61
    1b86:	91 50       	subi	r25, 0x01	; 1
    1b88:	ed 96       	adiw	r28, 0x3d	; 61
    1b8a:	9f af       	std	Y+63, r25	; 0x3f
    1b8c:	ed 97       	sbiw	r28, 0x3d	; 61
    1b8e:	dc c0       	rjmp	.+440    	; 0x1d48 <USB_ProcessHIDReport+0x76e>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
    1b90:	eb 96       	adiw	r28, 0x3b	; 59
    1b92:	2c ad       	ldd	r18, Y+60	; 0x3c
    1b94:	3d ad       	ldd	r19, Y+61	; 0x3d
    1b96:	4e ad       	ldd	r20, Y+62	; 0x3e
    1b98:	5f ad       	ldd	r21, Y+63	; 0x3f
    1b9a:	eb 97       	sbiw	r28, 0x3b	; 59
    1b9c:	26 15       	cp	r18, r6
    1b9e:	37 05       	cpc	r19, r7
    1ba0:	48 05       	cpc	r20, r8
    1ba2:	59 05       	cpc	r21, r9
    1ba4:	08 f4       	brcc	.+2      	; 0x1ba8 <USB_ProcessHIDReport+0x5ce>
    1ba6:	d0 c0       	rjmp	.+416    	; 0x1d48 <USB_ProcessHIDReport+0x76e>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
    1ba8:	74 82       	std	Z+4, r7	; 0x04
    1baa:	63 82       	std	Z+3, r6	; 0x03
    1bac:	08 94       	sec
    1bae:	61 1c       	adc	r6, r1
    1bb0:	71 1c       	adc	r7, r1
    1bb2:	81 1c       	adc	r8, r1
    1bb4:	91 1c       	adc	r9, r1
    1bb6:	c8 c0       	rjmp	.+400    	; 0x1d48 <USB_ProcessHIDReport+0x76e>
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
    1bb8:	a1 14       	cp	r10, r1
    1bba:	b1 04       	cpc	r11, r1
    1bbc:	11 f4       	brne	.+4      	; 0x1bc2 <USB_ProcessHIDReport+0x5e8>
    1bbe:	84 e0       	ldi	r24, 0x04	; 4
    1bc0:	ea c0       	rjmp	.+468    	; 0x1d96 <USB_ProcessHIDReport+0x7bc>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
    1bc2:	d5 01       	movw	r26, r10
    1bc4:	15 96       	adiw	r26, 0x05	; 5
    1bc6:	ed 91       	ld	r30, X+
    1bc8:	fc 91       	ld	r31, X
    1bca:	16 97       	sbiw	r26, 0x06	; 6
    1bcc:	bd c0       	rjmp	.+378    	; 0x1d48 <USB_ProcessHIDReport+0x76e>
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
    1bce:	de 01       	movw	r26, r28
    1bd0:	59 96       	adiw	r26, 0x19	; 25
    1bd2:	cb 57       	subi	r28, 0x7B	; 123
    1bd4:	df 4f       	sbci	r29, 0xFF	; 255
    1bd6:	88 81       	ld	r24, Y
    1bd8:	c5 58       	subi	r28, 0x85	; 133
    1bda:	d0 40       	sbci	r29, 0x00	; 0
    1bdc:	ca 57       	subi	r28, 0x7A	; 122
    1bde:	df 4f       	sbci	r29, 0xFF	; 255
    1be0:	98 81       	ld	r25, Y
    1be2:	c6 58       	subi	r28, 0x86	; 134
    1be4:	d0 40       	sbci	r29, 0x00	; 0
    1be6:	9c 01       	movw	r18, r24
    1be8:	f9 01       	movw	r30, r18
    1bea:	8a e1       	ldi	r24, 0x1A	; 26
    1bec:	01 90       	ld	r0, Z+
    1bee:	0d 92       	st	X+, r0
    1bf0:	81 50       	subi	r24, 0x01	; 1
    1bf2:	e1 f7       	brne	.-8      	; 0x1bec <USB_ProcessHIDReport+0x612>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
    1bf4:	fd 8a       	std	Y+21, r15	; 0x15
    1bf6:	ec 8a       	std	Y+20, r14	; 0x14
					NewReportItem.CollectionPath = CurrCollectionPath;
    1bf8:	b8 8e       	std	Y+24, r11	; 0x18
    1bfa:	af 8a       	std	Y+23, r10	; 0x17
					NewReportItem.ReportID       = CurrStateTable->ReportID;
    1bfc:	f6 01       	movw	r30, r12
    1bfe:	83 8d       	ldd	r24, Z+27	; 0x1b
    1c00:	8e 8b       	std	Y+22, r24	; 0x16

					if (UsageListSize)
    1c02:	ed 96       	adiw	r28, 0x3d	; 61
    1c04:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c06:	ed 97       	sbiw	r28, 0x3d	; 61
    1c08:	ff 23       	and	r31, r31
    1c0a:	f9 f0       	breq	.+62     	; 0x1c4a <USB_ProcessHIDReport+0x670>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
    1c0c:	49 81       	ldd	r20, Y+1	; 0x01
    1c0e:	5a 81       	ldd	r21, Y+2	; 0x02
    1c10:	fe 01       	movw	r30, r28
    1c12:	31 96       	adiw	r30, 0x01	; 1

						for (uint8_t i = 0; i < UsageListSize; i++)
    1c14:	ed 96       	adiw	r28, 0x3d	; 61
    1c16:	8f ad       	ldd	r24, Y+63	; 0x3f
    1c18:	ed 97       	sbiw	r28, 0x3d	; 61
    1c1a:	28 2f       	mov	r18, r24
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	22 0f       	add	r18, r18
    1c20:	33 1f       	adc	r19, r19
    1c22:	2e 0f       	add	r18, r30
    1c24:	3f 1f       	adc	r19, r31
    1c26:	04 c0       	rjmp	.+8      	; 0x1c30 <USB_ProcessHIDReport+0x656>
						  UsageList[i] = UsageList[i + 1];
    1c28:	82 81       	ldd	r24, Z+2	; 0x02
    1c2a:	93 81       	ldd	r25, Z+3	; 0x03
    1c2c:	81 93       	st	Z+, r24
    1c2e:	91 93       	st	Z+, r25

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
    1c30:	e2 17       	cp	r30, r18
    1c32:	f3 07       	cpc	r31, r19
    1c34:	c9 f7       	brne	.-14     	; 0x1c28 <USB_ProcessHIDReport+0x64e>
					NewReportItem.CollectionPath = CurrCollectionPath;
					NewReportItem.ReportID       = CurrStateTable->ReportID;

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
    1c36:	5d 8f       	std	Y+29, r21	; 0x1d
    1c38:	4c 8f       	std	Y+28, r20	; 0x1c

						for (uint8_t i = 0; i < UsageListSize; i++)
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
    1c3a:	ed 96       	adiw	r28, 0x3d	; 61
    1c3c:	bf ad       	ldd	r27, Y+63	; 0x3f
    1c3e:	ed 97       	sbiw	r28, 0x3d	; 61
    1c40:	b1 50       	subi	r27, 0x01	; 1
    1c42:	ed 96       	adiw	r28, 0x3d	; 61
    1c44:	bf af       	std	Y+63, r27	; 0x3f
    1c46:	ed 97       	sbiw	r28, 0x3d	; 61
    1c48:	12 c0       	rjmp	.+36     	; 0x1c6e <USB_ProcessHIDReport+0x694>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
    1c4a:	eb 96       	adiw	r28, 0x3b	; 59
    1c4c:	2c ad       	ldd	r18, Y+60	; 0x3c
    1c4e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1c50:	4e ad       	ldd	r20, Y+62	; 0x3e
    1c52:	5f ad       	ldd	r21, Y+63	; 0x3f
    1c54:	eb 97       	sbiw	r28, 0x3b	; 59
    1c56:	26 15       	cp	r18, r6
    1c58:	37 05       	cpc	r19, r7
    1c5a:	48 05       	cpc	r20, r8
    1c5c:	59 05       	cpc	r21, r9
    1c5e:	38 f0       	brcs	.+14     	; 0x1c6e <USB_ProcessHIDReport+0x694>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
    1c60:	7d 8e       	std	Y+29, r7	; 0x1d
    1c62:	6c 8e       	std	Y+28, r6	; 0x1c
    1c64:	08 94       	sec
    1c66:	61 1c       	adc	r6, r1
    1c68:	71 1c       	adc	r7, r1
    1c6a:	81 1c       	adc	r8, r1
    1c6c:	91 1c       	adc	r9, r1
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
    1c6e:	c9 57       	subi	r28, 0x79	; 121
    1c70:	df 4f       	sbci	r29, 0xFF	; 255
    1c72:	38 81       	ld	r19, Y
    1c74:	c7 58       	subi	r28, 0x87	; 135
    1c76:	d0 40       	sbci	r29, 0x00	; 0
    1c78:	30 38       	cpi	r19, 0x80	; 128
    1c7a:	11 f4       	brne	.+4      	; 0x1c80 <USB_ProcessHIDReport+0x6a6>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
    1c7c:	1b 8a       	std	Y+19, r1	; 0x13
    1c7e:	0c c0       	rjmp	.+24     	; 0x1c98 <USB_ProcessHIDReport+0x6be>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
    1c80:	c9 57       	subi	r28, 0x79	; 121
    1c82:	df 4f       	sbci	r29, 0xFF	; 255
    1c84:	48 81       	ld	r20, Y
    1c86:	c7 58       	subi	r28, 0x87	; 135
    1c88:	d0 40       	sbci	r29, 0x00	; 0
    1c8a:	40 39       	cpi	r20, 0x90	; 144
    1c8c:	19 f4       	brne	.+6      	; 0x1c94 <USB_ProcessHIDReport+0x6ba>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
    1c8e:	51 e0       	ldi	r21, 0x01	; 1
    1c90:	5b 8b       	std	Y+19, r21	; 0x13
    1c92:	02 c0       	rjmp	.+4      	; 0x1c98 <USB_ProcessHIDReport+0x6be>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
    1c94:	82 e0       	ldi	r24, 0x02	; 2
    1c96:	8b 8b       	std	Y+19, r24	; 0x13

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
    1c98:	eb 89       	ldd	r30, Y+19	; 0x13
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	ee 0f       	add	r30, r30
    1c9e:	ff 1f       	adc	r31, r31
    1ca0:	e4 0d       	add	r30, r4
    1ca2:	f5 1d       	adc	r31, r5
    1ca4:	81 81       	ldd	r24, Z+1	; 0x01
    1ca6:	92 81       	ldd	r25, Z+2	; 0x02
    1ca8:	9a 8b       	std	Y+18, r25	; 0x12
    1caa:	89 8b       	std	Y+17, r24	; 0x11

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
    1cac:	d6 01       	movw	r26, r12
    1cae:	2c 91       	ld	r18, X
    1cb0:	81 81       	ldd	r24, Z+1	; 0x01
    1cb2:	92 81       	ldd	r25, Z+2	; 0x02
    1cb4:	82 0f       	add	r24, r18
    1cb6:	91 1d       	adc	r25, r1
    1cb8:	92 83       	std	Z+2, r25	; 0x02
    1cba:	81 83       	std	Z+1, r24	; 0x01

					if (ParserData->LargestReportSizeBits < NewReportItem.BitOffset)
    1cbc:	29 89       	ldd	r18, Y+17	; 0x11
    1cbe:	3a 89       	ldd	r19, Y+18	; 0x12
    1cc0:	c6 57       	subi	r28, 0x76	; 118
    1cc2:	df 4f       	sbci	r29, 0xFF	; 255
    1cc4:	e8 81       	ld	r30, Y
    1cc6:	f9 81       	ldd	r31, Y+1	; 0x01
    1cc8:	ca 58       	subi	r28, 0x8A	; 138
    1cca:	d0 40       	sbci	r29, 0x00	; 0
    1ccc:	80 81       	ld	r24, Z
    1cce:	91 81       	ldd	r25, Z+1	; 0x01
    1cd0:	82 17       	cp	r24, r18
    1cd2:	93 07       	cpc	r25, r19
    1cd4:	10 f4       	brcc	.+4      	; 0x1cda <USB_ProcessHIDReport+0x700>
					  ParserData->LargestReportSizeBits = NewReportItem.BitOffset;
    1cd6:	31 83       	std	Z+1, r19	; 0x01
    1cd8:	20 83       	st	Z, r18

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    1cda:	c8 57       	subi	r28, 0x78	; 120
    1cdc:	df 4f       	sbci	r29, 0xFF	; 255
    1cde:	28 81       	ld	r18, Y
    1ce0:	39 81       	ldd	r19, Y+1	; 0x01
    1ce2:	c8 58       	subi	r28, 0x88	; 136
    1ce4:	d0 40       	sbci	r29, 0x00	; 0
    1ce6:	23 2b       	or	r18, r19
    1ce8:	f1 f4       	brne	.+60     	; 0x1d26 <USB_ProcessHIDReport+0x74c>
    1cea:	ce 01       	movw	r24, r28
    1cec:	41 96       	adiw	r24, 0x11	; 17
    1cee:	0e 94 b6 02 	call	0x56c	; 0x56c <CALLBACK_HIDParser_FilterHIDReportItem>
    1cf2:	88 23       	and	r24, r24
    1cf4:	c1 f0       	breq	.+48     	; 0x1d26 <USB_ProcessHIDReport+0x74c>
					{
						if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
    1cf6:	d1 01       	movw	r26, r2
    1cf8:	8c 91       	ld	r24, X
    1cfa:	84 31       	cpi	r24, 0x14	; 20
    1cfc:	11 f4       	brne	.+4      	; 0x1d02 <USB_ProcessHIDReport+0x728>
    1cfe:	83 e0       	ldi	r24, 0x03	; 3
    1d00:	4a c0       	rjmp	.+148    	; 0x1d96 <USB_ProcessHIDReport+0x7bc>
						  return HID_PARSE_InsufficientReportItems;

						memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
    1d02:	ba e2       	ldi	r27, 0x2A	; 42
    1d04:	8b 9f       	mul	r24, r27
    1d06:	f0 01       	movw	r30, r0
    1d08:	11 24       	eor	r1, r1
    1d0a:	31 96       	adiw	r30, 0x01	; 1
    1d0c:	e2 0d       	add	r30, r2
    1d0e:	f3 1d       	adc	r31, r3
    1d10:	de 01       	movw	r26, r28
    1d12:	51 96       	adiw	r26, 0x11	; 17
    1d14:	8a e2       	ldi	r24, 0x2A	; 42
    1d16:	0d 90       	ld	r0, X+
    1d18:	01 92       	st	Z+, r0
    1d1a:	81 50       	subi	r24, 0x01	; 1
    1d1c:	e1 f7       	brne	.-8      	; 0x1d16 <USB_ProcessHIDReport+0x73c>
						       &NewReportItem, sizeof(HID_ReportItem_t));

						ParserData->TotalReportItems++;
    1d1e:	f1 01       	movw	r30, r2
    1d20:	80 81       	ld	r24, Z
    1d22:	8f 5f       	subi	r24, 0xFF	; 255
    1d24:	80 83       	st	Z, r24
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
    1d26:	ec 96       	adiw	r28, 0x3c	; 60
    1d28:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d2a:	ec 97       	sbiw	r28, 0x3c	; 60
    1d2c:	ff 5f       	subi	r31, 0xFF	; 255
    1d2e:	ec 96       	adiw	r28, 0x3c	; 60
    1d30:	ff af       	std	Y+63, r31	; 0x3f
    1d32:	ec 97       	sbiw	r28, 0x3c	; 60
    1d34:	d6 01       	movw	r26, r12
    1d36:	5a 96       	adiw	r26, 0x1a	; 26
    1d38:	8c 91       	ld	r24, X
    1d3a:	ec 96       	adiw	r28, 0x3c	; 60
    1d3c:	bf ad       	ldd	r27, Y+63	; 0x3f
    1d3e:	ec 97       	sbiw	r28, 0x3c	; 60
    1d40:	b8 17       	cp	r27, r24
    1d42:	08 f4       	brcc	.+2      	; 0x1d46 <USB_ProcessHIDReport+0x76c>
    1d44:	44 cf       	rjmp	.-376    	; 0x1bce <USB_ProcessHIDReport+0x5f4>
    1d46:	f5 01       	movw	r30, r10
				}

				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
    1d48:	c1 58       	subi	r28, 0x81	; 129
    1d4a:	df 4f       	sbci	r29, 0xFF	; 255
    1d4c:	28 81       	ld	r18, Y
    1d4e:	39 81       	ldd	r19, Y+1	; 0x01
    1d50:	cf 57       	subi	r28, 0x7F	; 127
    1d52:	d0 40       	sbci	r29, 0x00	; 0
    1d54:	2c 70       	andi	r18, 0x0C	; 12
    1d56:	30 70       	andi	r19, 0x00	; 0
    1d58:	23 2b       	or	r18, r19
    1d5a:	61 f4       	brne	.+24     	; 0x1d74 <USB_ProcessHIDReport+0x79a>
    1d5c:	ed 96       	adiw	r28, 0x3d	; 61
    1d5e:	1f ae       	std	Y+63, r1	; 0x3f
    1d60:	ed 97       	sbiw	r28, 0x3d	; 61
    1d62:	eb 96       	adiw	r28, 0x3b	; 59
    1d64:	1c ae       	std	Y+60, r1	; 0x3c
    1d66:	1d ae       	std	Y+61, r1	; 0x3d
    1d68:	1e ae       	std	Y+62, r1	; 0x3e
    1d6a:	1f ae       	std	Y+63, r1	; 0x3f
    1d6c:	eb 97       	sbiw	r28, 0x3b	; 59
    1d6e:	66 24       	eor	r6, r6
    1d70:	77 24       	eor	r7, r7
    1d72:	43 01       	movw	r8, r6
    1d74:	5f 01       	movw	r10, r30
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
    1d76:	cd 57       	subi	r28, 0x7D	; 125
    1d78:	df 4f       	sbci	r29, 0xFF	; 255
    1d7a:	48 81       	ld	r20, Y
    1d7c:	59 81       	ldd	r21, Y+1	; 0x01
    1d7e:	c3 58       	subi	r28, 0x83	; 131
    1d80:	d0 40       	sbci	r29, 0x00	; 0
    1d82:	45 2b       	or	r20, r21
    1d84:	09 f0       	breq	.+2      	; 0x1d88 <USB_ProcessHIDReport+0x7ae>
    1d86:	c5 cc       	rjmp	.-1654   	; 0x1712 <USB_ProcessHIDReport+0x138>
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
    1d88:	d1 01       	movw	r26, r2
    1d8a:	8c 91       	ld	r24, X
    1d8c:	88 23       	and	r24, r24
    1d8e:	11 f0       	breq	.+4      	; 0x1d94 <USB_ProcessHIDReport+0x7ba>
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	01 c0       	rjmp	.+2      	; 0x1d96 <USB_ProcessHIDReport+0x7bc>
    1d94:	88 e0       	ldi	r24, 0x08	; 8
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
    1d96:	cb 56       	subi	r28, 0x6B	; 107
    1d98:	df 4f       	sbci	r29, 0xFF	; 255
    1d9a:	0f b6       	in	r0, 0x3f	; 63
    1d9c:	f8 94       	cli
    1d9e:	de bf       	out	0x3e, r29	; 62
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	cd bf       	out	0x3d, r28	; 61
    1da4:	cf 91       	pop	r28
    1da6:	df 91       	pop	r29
    1da8:	1f 91       	pop	r17
    1daa:	0f 91       	pop	r16
    1dac:	ff 90       	pop	r15
    1dae:	ef 90       	pop	r14
    1db0:	df 90       	pop	r13
    1db2:	cf 90       	pop	r12
    1db4:	bf 90       	pop	r11
    1db6:	af 90       	pop	r10
    1db8:	9f 90       	pop	r9
    1dba:	8f 90       	pop	r8
    1dbc:	7f 90       	pop	r7
    1dbe:	6f 90       	pop	r6
    1dc0:	5f 90       	pop	r5
    1dc2:	4f 90       	pop	r4
    1dc4:	3f 90       	pop	r3
    1dc6:	2f 90       	pop	r2
    1dc8:	08 95       	ret

00001dca <DCOMP_HID_Host_NextHIDInterface>:

	return HID_ENUMERROR_NoError;
}

static uint8_t DCOMP_HID_Host_NextHIDInterface(void* const CurrentDescriptor)
{
    1dca:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1dcc:	81 81       	ldd	r24, Z+1	; 0x01
    1dce:	84 30       	cpi	r24, 0x04	; 4
    1dd0:	29 f4       	brne	.+10     	; 0x1ddc <DCOMP_HID_Host_NextHIDInterface+0x12>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
    1dd2:	85 81       	ldd	r24, Z+5	; 0x05
    1dd4:	83 30       	cpi	r24, 0x03	; 3
    1dd6:	11 f4       	brne	.+4      	; 0x1ddc <DCOMP_HID_Host_NextHIDInterface+0x12>
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	08 95       	ret
    1ddc:	82 e0       	ldi	r24, 0x02	; 2
		  return DESCRIPTOR_SEARCH_Found;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1dde:	08 95       	ret

00001de0 <DCOMP_HID_Host_NextHIDDescriptor>:

static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
    1de0:	fc 01       	movw	r30, r24
    1de2:	81 81       	ldd	r24, Z+1	; 0x01
    1de4:	81 32       	cpi	r24, 0x21	; 33
    1de6:	11 f4       	brne	.+4      	; 0x1dec <DCOMP_HID_Host_NextHIDDescriptor+0xc>
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    1dea:	08 95       	ret
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
    1dec:	84 30       	cpi	r24, 0x04	; 4
    1dee:	11 f0       	breq	.+4      	; 0x1df4 <DCOMP_HID_Host_NextHIDDescriptor+0x14>
    1df0:	82 e0       	ldi	r24, 0x02	; 2
    1df2:	08 95       	ret
    1df4:	81 e0       	ldi	r24, 0x01	; 1
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}
    1df6:	08 95       	ret

00001df8 <HID_Host_SetReportProtocol>:
	return USB_Host_SendControlRequest(NULL);
}

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    1df8:	cf 92       	push	r12
    1dfa:	df 92       	push	r13
    1dfc:	ef 92       	push	r14
    1dfe:	ff 92       	push	r15
    1e00:	0f 93       	push	r16
    1e02:	1f 93       	push	r17
    1e04:	df 93       	push	r29
    1e06:	cf 93       	push	r28
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    1e0c:	8c 01       	movw	r16, r24

	uint8_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    1e0e:	cd b6       	in	r12, 0x3d	; 61
    1e10:	de b6       	in	r13, 0x3e	; 62
#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	uint8_t ErrorCode;

	uint8_t HIDReportData[HIDInterfaceInfo->State.HIDReportSize];
    1e12:	dc 01       	movw	r26, r24
    1e14:	50 96       	adiw	r26, 0x10	; 16
    1e16:	4d 91       	ld	r20, X+
    1e18:	5c 91       	ld	r21, X
    1e1a:	51 97       	sbiw	r26, 0x11	; 17
    1e1c:	ed b7       	in	r30, 0x3d	; 61
    1e1e:	fe b7       	in	r31, 0x3e	; 62
    1e20:	e4 1b       	sub	r30, r20
    1e22:	f5 0b       	sbc	r31, r21
    1e24:	0f b6       	in	r0, 0x3f	; 63
    1e26:	f8 94       	cli
    1e28:	fe bf       	out	0x3e, r31	; 62
    1e2a:	0f be       	out	0x3f, r0	; 63
    1e2c:	ed bf       	out	0x3d, r30	; 61
    1e2e:	2d b7       	in	r18, 0x3d	; 61
    1e30:	3e b7       	in	r19, 0x3e	; 62
    1e32:	2f 5f       	subi	r18, 0xFF	; 255
    1e34:	3f 4f       	sbci	r19, 0xFF	; 255

	USB_ControlRequest = (USB_Request_Header_t)
    1e36:	18 96       	adiw	r26, 0x08	; 8
    1e38:	6c 91       	ld	r22, X
    1e3a:	81 e8       	ldi	r24, 0x81	; 129
    1e3c:	80 93 12 05 	sts	0x0512, r24
    1e40:	86 e0       	ldi	r24, 0x06	; 6
    1e42:	80 93 13 05 	sts	0x0513, r24
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	92 e2       	ldi	r25, 0x22	; 34
    1e4a:	90 93 15 05 	sts	0x0515, r25
    1e4e:	80 93 14 05 	sts	0x0514, r24
    1e52:	60 93 16 05 	sts	0x0516, r22
    1e56:	10 92 17 05 	sts	0x0517, r1
    1e5a:	50 93 19 05 	sts	0x0519, r21
    1e5e:	40 93 18 05 	sts	0x0518, r20
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1e62:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = HIDInterfaceInfo->State.HIDReportSize,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(HIDReportData)) != HOST_SENDCONTROL_Successful)
    1e66:	f2 2e       	mov	r15, r18
    1e68:	e3 2e       	mov	r14, r19
    1e6a:	c9 01       	movw	r24, r18
    1e6c:	61 da       	rcall	.-2878   	; 0x1330 <USB_Host_SendControlRequest>
    1e6e:	28 2f       	mov	r18, r24
    1e70:	88 23       	and	r24, r24
    1e72:	09 f0       	breq	.+2      	; 0x1e76 <HID_Host_SetReportProtocol+0x7e>
    1e74:	4f c0       	rjmp	.+158    	; 0x1f14 <HID_Host_SetReportProtocol+0x11c>
	  return ErrorCode;

	if (HIDInterfaceInfo->State.UsingBootProtocol)
    1e76:	d8 01       	movw	r26, r16
    1e78:	1f 96       	adiw	r26, 0x0f	; 15
    1e7a:	8c 91       	ld	r24, X
    1e7c:	1f 97       	sbiw	r26, 0x0f	; 15
    1e7e:	88 23       	and	r24, r24
    1e80:	f1 f0       	breq	.+60     	; 0x1ebe <HID_Host_SetReportProtocol+0xc6>
	{
		USB_ControlRequest = (USB_Request_Header_t)
    1e82:	18 96       	adiw	r26, 0x08	; 8
    1e84:	2c 91       	ld	r18, X
    1e86:	81 e2       	ldi	r24, 0x21	; 33
    1e88:	80 93 12 05 	sts	0x0512, r24
    1e8c:	8b e0       	ldi	r24, 0x0B	; 11
    1e8e:	80 93 13 05 	sts	0x0513, r24
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	90 93 15 05 	sts	0x0515, r25
    1e9a:	80 93 14 05 	sts	0x0514, r24
    1e9e:	20 93 16 05 	sts	0x0516, r18
    1ea2:	10 92 17 05 	sts	0x0517, r1
    1ea6:	10 92 19 05 	sts	0x0519, r1
    1eaa:	10 92 18 05 	sts	0x0518, r1
				.wValue        = 1,
				.wIndex        = HIDInterfaceInfo->State.InterfaceNumber,
				.wLength       = 0,
			};

		if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	3e da       	rcall	.-2948   	; 0x1330 <USB_Host_SendControlRequest>
    1eb4:	28 2f       	mov	r18, r24
    1eb6:	88 23       	and	r24, r24
    1eb8:	69 f5       	brne	.+90     	; 0x1f14 <HID_Host_SetReportProtocol+0x11c>
		  return ErrorCode;

		HIDInterfaceInfo->State.UsingBootProtocol = false;
    1eba:	f8 01       	movw	r30, r16
    1ebc:	17 86       	std	Z+15, r1	; 0x0f
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
    1ebe:	d8 01       	movw	r26, r16
    1ec0:	15 96       	adiw	r26, 0x05	; 5
    1ec2:	4d 91       	ld	r20, X+
    1ec4:	5c 91       	ld	r21, X
    1ec6:	16 97       	sbiw	r26, 0x06	; 6
    1ec8:	41 15       	cp	r20, r1
    1eca:	51 05       	cpc	r21, r1
    1ecc:	11 f4       	brne	.+4      	; 0x1ed2 <HID_Host_SetReportProtocol+0xda>
    1ece:	20 e8       	ldi	r18, 0x80	; 128
    1ed0:	21 c0       	rjmp	.+66     	; 0x1f14 <HID_Host_SetReportProtocol+0x11c>
	  return HID_ERROR_LOGICAL;

	if ((ErrorCode = USB_ProcessHIDReport(HIDReportData, HIDInterfaceInfo->State.HIDReportSize,
    1ed2:	f8 01       	movw	r30, r16
    1ed4:	60 89       	ldd	r22, Z+16	; 0x10
    1ed6:	71 89       	ldd	r23, Z+17	; 0x11
    1ed8:	8f 2d       	mov	r24, r15
    1eda:	9e 2d       	mov	r25, r14
    1edc:	7e db       	rcall	.-2308   	; 0x15da <USB_ProcessHIDReport>
    1ede:	28 2f       	mov	r18, r24
    1ee0:	88 23       	and	r24, r24
    1ee2:	11 f0       	breq	.+4      	; 0x1ee8 <HID_Host_SetReportProtocol+0xf0>
	                                      HIDInterfaceInfo->Config.HIDParserData)) != HID_PARSE_Successful)
	{
		return HID_ERROR_LOGICAL | ErrorCode;
    1ee4:	20 68       	ori	r18, 0x80	; 128
    1ee6:	16 c0       	rjmp	.+44     	; 0x1f14 <HID_Host_SetReportProtocol+0x11c>
	}

	uint8_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
    1ee8:	d8 01       	movw	r26, r16
    1eea:	15 96       	adiw	r26, 0x05	; 5
    1eec:	ed 91       	ld	r30, X+
    1eee:	fc 91       	ld	r31, X
    1ef0:	16 97       	sbiw	r26, 0x06	; 6
    1ef2:	ea 52       	subi	r30, 0x2A	; 42
    1ef4:	fc 4f       	sbci	r31, 0xFC	; 252
    1ef6:	e0 81       	ld	r30, Z
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	8e 2f       	mov	r24, r30
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	87 70       	andi	r24, 0x07	; 7
    1f00:	90 70       	andi	r25, 0x00	; 0
    1f02:	89 2b       	or	r24, r25
    1f04:	09 f0       	breq	.+2      	; 0x1f08 <HID_Host_SetReportProtocol+0x110>
    1f06:	31 e0       	ldi	r19, 0x01	; 1
    1f08:	e6 95       	lsr	r30
    1f0a:	e6 95       	lsr	r30
    1f0c:	e6 95       	lsr	r30
    1f0e:	3e 0f       	add	r19, r30
    1f10:	f8 01       	movw	r30, r16
    1f12:	32 8b       	std	Z+18, r19	; 0x12

	return 0;
}
    1f14:	82 2f       	mov	r24, r18
    1f16:	0f b6       	in	r0, 0x3f	; 63
    1f18:	f8 94       	cli
    1f1a:	de be       	out	0x3e, r13	; 62
    1f1c:	0f be       	out	0x3f, r0	; 63
    1f1e:	cd be       	out	0x3d, r12	; 61
    1f20:	cf 91       	pop	r28
    1f22:	df 91       	pop	r29
    1f24:	1f 91       	pop	r17
    1f26:	0f 91       	pop	r16
    1f28:	ff 90       	pop	r15
    1f2a:	ef 90       	pop	r14
    1f2c:	df 90       	pop	r13
    1f2e:	cf 90       	pop	r12
    1f30:	08 95       	ret

00001f32 <HID_Host_ConfigurePipes>:
#include "HID.h"

uint8_t HID_Host_ConfigurePipes(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    1f32:	2f 92       	push	r2
    1f34:	3f 92       	push	r3
    1f36:	4f 92       	push	r4
    1f38:	5f 92       	push	r5
    1f3a:	6f 92       	push	r6
    1f3c:	7f 92       	push	r7
    1f3e:	8f 92       	push	r8
    1f40:	9f 92       	push	r9
    1f42:	af 92       	push	r10
    1f44:	bf 92       	push	r11
    1f46:	cf 92       	push	r12
    1f48:	df 92       	push	r13
    1f4a:	ef 92       	push	r14
    1f4c:	ff 92       	push	r15
    1f4e:	0f 93       	push	r16
    1f50:	1f 93       	push	r17
    1f52:	df 93       	push	r29
    1f54:	cf 93       	push	r28
    1f56:	00 d0       	rcall	.+0      	; 0x1f58 <HID_Host_ConfigurePipes+0x26>
    1f58:	00 d0       	rcall	.+0      	; 0x1f5a <HID_Host_ConfigurePipes+0x28>
    1f5a:	cd b7       	in	r28, 0x3d	; 61
    1f5c:	de b7       	in	r29, 0x3e	; 62
    1f5e:	6c 01       	movw	r12, r24
    1f60:	7a 83       	std	Y+2, r23	; 0x02
    1f62:	69 83       	std	Y+1, r22	; 0x01
    1f64:	5c 83       	std	Y+4, r21	; 0x04
    1f66:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1f68:	07 96       	adiw	r24, 0x07	; 7
    1f6a:	fc 01       	movw	r30, r24
    1f6c:	8c e0       	ldi	r24, 0x0C	; 12
    1f6e:	df 01       	movw	r26, r30
    1f70:	1d 92       	st	X+, r1
    1f72:	8a 95       	dec	r24
    1f74:	e9 f7       	brne	.-6      	; 0x1f70 <HID_Host_ConfigurePipes+0x3e>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1f76:	eb 81       	ldd	r30, Y+3	; 0x03
    1f78:	fc 81       	ldd	r31, Y+4	; 0x04
    1f7a:	81 81       	ldd	r24, Z+1	; 0x01
    1f7c:	82 30       	cpi	r24, 0x02	; 2
    1f7e:	11 f0       	breq	.+4      	; 0x1f84 <HID_Host_ConfigurePipes+0x52>
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	ab c0       	rjmp	.+342    	; 0x20da <HID_Host_ConfigurePipes+0x1a8>
    1f84:	66 24       	eor	r6, r6
    1f86:	77 24       	eor	r7, r7
    1f88:	aa 24       	eor	r10, r10
    1f8a:	bb 24       	eor	r11, r11
    1f8c:	44 24       	eor	r4, r4
    1f8e:	55 24       	eor	r5, r5
    1f90:	22 24       	eor	r2, r2
    1f92:	33 24       	eor	r3, r3
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    1f94:	23 e0       	ldi	r18, 0x03	; 3
    1f96:	e2 2e       	mov	r14, r18
    1f98:	f1 2c       	mov	r15, r1
    1f9a:	ec 0e       	add	r14, r28
    1f9c:	fd 1e       	adc	r15, r29
    1f9e:	8e 01       	movw	r16, r28
    1fa0:	0f 5f       	subi	r16, 0xFF	; 255
    1fa2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa4:	41 14       	cp	r4, r1
    1fa6:	51 04       	cpc	r5, r1
    1fa8:	39 f0       	breq	.+14     	; 0x1fb8 <HID_Host_ConfigurePipes+0x86>
    1faa:	c8 01       	movw	r24, r16
    1fac:	b7 01       	movw	r22, r14
    1fae:	44 e8       	ldi	r20, 0x84	; 132
    1fb0:	50 e1       	ldi	r21, 0x10	; 16
    1fb2:	f6 d8       	rcall	.-3604   	; 0x11a0 <USB_GetNextDescriptorComp>
    1fb4:	88 23       	and	r24, r24
    1fb6:	21 f1       	breq	.+72     	; 0x2000 <HID_Host_ConfigurePipes+0xce>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_HID_Host_NextHIDInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (DataINEndpoint || DataOUTEndpoint)
    1fb8:	61 14       	cp	r6, r1
    1fba:	71 04       	cpc	r7, r1
    1fbc:	79 f5       	brne	.+94     	; 0x201c <HID_Host_ConfigurePipes+0xea>
    1fbe:	a1 14       	cp	r10, r1
    1fc0:	b1 04       	cpc	r11, r1
    1fc2:	61 f5       	brne	.+88     	; 0x201c <HID_Host_ConfigurePipes+0xea>
			  break;

			do
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1fc4:	c8 01       	movw	r24, r16
    1fc6:	b7 01       	movw	r22, r14
    1fc8:	45 ee       	ldi	r20, 0xE5	; 229
    1fca:	5e e0       	ldi	r21, 0x0E	; 14
    1fcc:	e9 d8       	rcall	.-3630   	; 0x11a0 <USB_GetNextDescriptorComp>
    1fce:	88 23       	and	r24, r24
    1fd0:	09 f0       	breq	.+2      	; 0x1fd4 <HID_Host_ConfigurePipes+0xa2>
    1fd2:	82 c0       	rjmp	.+260    	; 0x20d8 <HID_Host_ConfigurePipes+0x1a6>
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1fd4:	4b 80       	ldd	r4, Y+3	; 0x03
    1fd6:	5c 80       	ldd	r5, Y+4	; 0x04
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));
    1fd8:	f6 01       	movw	r30, r12
    1fda:	94 81       	ldd	r25, Z+4	; 0x04
    1fdc:	99 23       	and	r25, r25
    1fde:	29 f0       	breq	.+10     	; 0x1fea <HID_Host_ConfigurePipes+0xb8>
    1fe0:	d2 01       	movw	r26, r4
    1fe2:	17 96       	adiw	r26, 0x07	; 7
    1fe4:	8c 91       	ld	r24, X
    1fe6:	89 17       	cp	r24, r25
    1fe8:	69 f7       	brne	.-38     	; 0x1fc4 <HID_Host_ConfigurePipes+0x92>

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1fea:	c8 01       	movw	r24, r16
    1fec:	b7 01       	movw	r22, r14
    1fee:	40 ef       	ldi	r20, 0xF0	; 240
    1ff0:	5e e0       	ldi	r21, 0x0E	; 14
    1ff2:	d6 d8       	rcall	.-3668   	; 0x11a0 <USB_GetNextDescriptorComp>
    1ff4:	88 23       	and	r24, r24
    1ff6:	09 f0       	breq	.+2      	; 0x1ffa <HID_Host_ConfigurePipes+0xc8>
    1ff8:	6f c0       	rjmp	.+222    	; 0x20d8 <HID_Host_ConfigurePipes+0x1a6>
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
			}

			HIDDescriptor = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_HID_Descriptor_HID_t);
    1ffa:	2b 80       	ldd	r2, Y+3	; 0x03
    1ffc:	3c 80       	ldd	r3, Y+4	; 0x04
    1ffe:	d2 cf       	rjmp	.-92     	; 0x1fa4 <HID_Host_ConfigurePipes+0x72>
			DataOUTEndpoint = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    2000:	eb 81       	ldd	r30, Y+3	; 0x03
    2002:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    2004:	82 81       	ldd	r24, Z+2	; 0x02
    2006:	87 fd       	sbrc	r24, 7
    2008:	02 c0       	rjmp	.+4      	; 0x200e <HID_Host_ConfigurePipes+0xdc>
    200a:	5f 01       	movw	r10, r30
    200c:	01 c0       	rjmp	.+2      	; 0x2010 <HID_Host_ConfigurePipes+0xde>
    200e:	3f 01       	movw	r6, r30
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    2010:	61 14       	cp	r6, r1
    2012:	71 04       	cpc	r7, r1
    2014:	39 f2       	breq	.-114    	; 0x1fa4 <HID_Host_ConfigurePipes+0x72>
    2016:	a1 14       	cp	r10, r1
    2018:	b1 04       	cpc	r11, r1
    201a:	21 f2       	breq	.-120    	; 0x1fa4 <HID_Host_ConfigurePipes+0x72>
    201c:	99 24       	eor	r9, r9
    201e:	93 94       	inc	r9
			Type            = EP_TYPE_INTERRUPT;
			DoubleBanked    = HIDInterfaceInfo->Config.DataOUTPipeDoubleBank;
			InterruptPeriod = DataOUTEndpoint->PollingIntervalMS;

			HIDInterfaceInfo->State.DataOUTPipeSize   = DataOUTEndpoint->EndpointSize;
			HIDInterfaceInfo->State.DeviceUsesOUTPipe = true;
    2020:	88 24       	eor	r8, r8
    2022:	83 94       	inc	r8
		uint8_t  Token;
		uint8_t  EndpointAddress;
		uint8_t  InterruptPeriod;
		bool     DoubleBanked;

		if (PipeNum == HIDInterfaceInfo->Config.DataINPipeNumber)
    2024:	f6 01       	movw	r30, r12
    2026:	80 81       	ld	r24, Z
    2028:	98 16       	cp	r9, r24
    202a:	79 f4       	brne	.+30     	; 0x204a <HID_Host_ConfigurePipes+0x118>
		{
			Size            = le16_to_cpu(DataINEndpoint->EndpointSize);
    202c:	d3 01       	movw	r26, r6
    202e:	14 96       	adiw	r26, 0x04	; 4
    2030:	0d 91       	ld	r16, X+
    2032:	1c 91       	ld	r17, X
    2034:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataINEndpoint->EndpointAddress;
    2036:	12 96       	adiw	r26, 0x02	; 2
    2038:	2c 91       	ld	r18, X
    203a:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_INTERRUPT;
			DoubleBanked    = HIDInterfaceInfo->Config.DataINPipeDoubleBank;
    203c:	81 81       	ldd	r24, Z+1	; 0x01
			InterruptPeriod = DataINEndpoint->PollingIntervalMS;
    203e:	16 96       	adiw	r26, 0x06	; 6
    2040:	fc 90       	ld	r15, X

			HIDInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    2042:	12 87       	std	Z+10, r17	; 0x0a
    2044:	01 87       	std	Z+9, r16	; 0x09
    2046:	40 e1       	ldi	r20, 0x10	; 16
    2048:	16 c0       	rjmp	.+44     	; 0x2076 <HID_Host_ConfigurePipes+0x144>
		}
		else if (PipeNum == HIDInterfaceInfo->Config.DataOUTPipeNumber)
    204a:	f6 01       	movw	r30, r12
    204c:	82 81       	ldd	r24, Z+2	; 0x02
    204e:	98 16       	cp	r9, r24
    2050:	21 f5       	brne	.+72     	; 0x209a <HID_Host_ConfigurePipes+0x168>
		{
			if (DataOUTEndpoint == NULL)
    2052:	a1 14       	cp	r10, r1
    2054:	b1 04       	cpc	r11, r1
    2056:	09 f1       	breq	.+66     	; 0x209a <HID_Host_ConfigurePipes+0x168>
			  continue;
		
			Size            = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    2058:	d5 01       	movw	r26, r10
    205a:	14 96       	adiw	r26, 0x04	; 4
    205c:	0d 91       	ld	r16, X+
    205e:	1c 91       	ld	r17, X
    2060:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
    2062:	12 96       	adiw	r26, 0x02	; 2
    2064:	2c 91       	ld	r18, X
    2066:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_INTERRUPT;
			DoubleBanked    = HIDInterfaceInfo->Config.DataOUTPipeDoubleBank;
    2068:	83 81       	ldd	r24, Z+3	; 0x03
			InterruptPeriod = DataOUTEndpoint->PollingIntervalMS;
    206a:	16 96       	adiw	r26, 0x06	; 6
    206c:	fc 90       	ld	r15, X

			HIDInterfaceInfo->State.DataOUTPipeSize   = DataOUTEndpoint->EndpointSize;
    206e:	14 87       	std	Z+12, r17	; 0x0c
    2070:	03 87       	std	Z+11, r16	; 0x0b
			HIDInterfaceInfo->State.DeviceUsesOUTPipe = true;
    2072:	86 86       	std	Z+14, r8	; 0x0e
    2074:	40 e2       	ldi	r20, 0x20	; 32
		else
		{
			continue;
		}

		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    2076:	88 23       	and	r24, r24
    2078:	11 f4       	brne	.+4      	; 0x207e <HID_Host_ConfigurePipes+0x14c>
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	01 c0       	rjmp	.+2      	; 0x2080 <HID_Host_ConfigurePipes+0x14e>
    207e:	94 e0       	ldi	r25, 0x04	; 4
    2080:	89 2d       	mov	r24, r9
    2082:	63 e0       	ldi	r22, 0x03	; 3
    2084:	e9 2e       	mov	r14, r25
    2086:	0e 94 2b 07 	call	0xe56	; 0xe56 <Pipe_ConfigurePipe>
    208a:	88 23       	and	r24, r24
    208c:	11 f4       	brne	.+4      	; 0x2092 <HID_Host_ConfigurePipes+0x160>
    208e:	83 e0       	ldi	r24, 0x03	; 3
    2090:	24 c0       	rjmp	.+72     	; 0x20da <HID_Host_ConfigurePipes+0x1a8>
		                         DoubleBanked ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE)))
		{
			return HID_ENUMERROR_PipeConfigurationFailed;
		}
		
		if (InterruptPeriod)
    2092:	ff 20       	and	r15, r15
    2094:	11 f0       	breq	.+4      	; 0x209a <HID_Host_ConfigurePipes+0x168>
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
    2096:	f0 92 ad 00 	sts	0x00AD, r15
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    209a:	93 94       	inc	r9
    209c:	b7 e0       	ldi	r27, 0x07	; 7
    209e:	9b 16       	cp	r9, r27
    20a0:	09 f6       	brne	.-126    	; 0x2024 <HID_Host_ConfigurePipes+0xf2>
		
		if (InterruptPeriod)
		  Pipe_SetInterruptPeriod(InterruptPeriod);
	}

	HIDInterfaceInfo->State.InterfaceNumber      = HIDInterface->InterfaceNumber;
    20a2:	f2 01       	movw	r30, r4
    20a4:	82 81       	ldd	r24, Z+2	; 0x02
    20a6:	d6 01       	movw	r26, r12
    20a8:	18 96       	adiw	r26, 0x08	; 8
    20aa:	8c 93       	st	X, r24
    20ac:	18 97       	sbiw	r26, 0x08	; 8
	HIDInterfaceInfo->State.HIDReportSize        = LE16_TO_CPU(HIDDescriptor->HIDReportLength);
    20ae:	f1 01       	movw	r30, r2
    20b0:	87 81       	ldd	r24, Z+7	; 0x07
    20b2:	90 85       	ldd	r25, Z+8	; 0x08
    20b4:	51 96       	adiw	r26, 0x11	; 17
    20b6:	9c 93       	st	X, r25
    20b8:	8e 93       	st	-X, r24
    20ba:	50 97       	sbiw	r26, 0x10	; 16
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	d2 01       	movw	r26, r4
    20c0:	16 96       	adiw	r26, 0x06	; 6
    20c2:	8c 91       	ld	r24, X
    20c4:	81 11       	cpse	r24, r1
    20c6:	91 e0       	ldi	r25, 0x01	; 1
    20c8:	f6 01       	movw	r30, r12
    20ca:	95 87       	std	Z+13, r25	; 0x0d
	HIDInterfaceInfo->State.LargestReportSize    = 8;
    20cc:	88 e0       	ldi	r24, 0x08	; 8
    20ce:	82 8b       	std	Z+18, r24	; 0x12
	HIDInterfaceInfo->State.IsActive             = true;
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	87 83       	std	Z+7, r24	; 0x07
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	01 c0       	rjmp	.+2      	; 0x20da <HID_Host_ConfigurePipes+0x1a8>

	return HID_ENUMERROR_NoError;
    20d8:	82 e0       	ldi	r24, 0x02	; 2
}
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	cf 91       	pop	r28
    20e4:	df 91       	pop	r29
    20e6:	1f 91       	pop	r17
    20e8:	0f 91       	pop	r16
    20ea:	ff 90       	pop	r15
    20ec:	ef 90       	pop	r14
    20ee:	df 90       	pop	r13
    20f0:	cf 90       	pop	r12
    20f2:	bf 90       	pop	r11
    20f4:	af 90       	pop	r10
    20f6:	9f 90       	pop	r9
    20f8:	8f 90       	pop	r8
    20fa:	7f 90       	pop	r7
    20fc:	6f 90       	pop	r6
    20fe:	5f 90       	pop	r5
    2100:	4f 90       	pop	r4
    2102:	3f 90       	pop	r3
    2104:	2f 90       	pop	r2
    2106:	08 95       	ret

00002108 <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}

static uint8_t DCOMP_HID_Host_NextHIDInterfaceEndpoint(void* const CurrentDescriptor)
{
    2108:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    210a:	81 81       	ldd	r24, Z+1	; 0x01
    210c:	85 30       	cpi	r24, 0x05	; 5
    210e:	31 f4       	brne	.+12     	; 0x211c <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    2110:	82 81       	ldd	r24, Z+2	; 0x02
    2112:	0e 94 9d 07 	call	0xf3a	; 0xf3a <Pipe_IsEndpointBound>
    2116:	88 23       	and	r24, r24
    2118:	29 f4       	brne	.+10     	; 0x2124 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1c>
    211a:	08 95       	ret
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    211c:	84 30       	cpi	r24, 0x04	; 4
    211e:	11 f4       	brne	.+4      	; 0x2124 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1c>
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	08 95       	ret
    2124:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    2126:	08 95       	ret

00002128 <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    2128:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    212a:	80 91 c8 00 	lds	r24, 0x00C8
    212e:	85 ff       	sbrs	r24, 5
    2130:	fc cf       	rjmp	.-8      	; 0x212a <Serial_putchar+0x2>
				UDR1 = DataByte;
    2132:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	08 95       	ret

0000213c <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    213c:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    2140:	87 fd       	sbrc	r24, 7
    2142:	03 c0       	rjmp	.+6      	; 0x214a <Serial_getchar+0xe>
    2144:	2e ef       	ldi	r18, 0xFE	; 254
    2146:	3f ef       	ldi	r19, 0xFF	; 255
    2148:	0b c0       	rjmp	.+22     	; 0x2160 <Serial_getchar+0x24>
    214a:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    214e:	87 fd       	sbrc	r24, 7
    2150:	03 c0       	rjmp	.+6      	; 0x2158 <Serial_getchar+0x1c>
    2152:	2f ef       	ldi	r18, 0xFF	; 255
    2154:	3f ef       	ldi	r19, 0xFF	; 255
    2156:	04 c0       	rjmp	.+8      	; 0x2160 <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    2158:	80 91 ce 00 	lds	r24, 0x00CE
    215c:	28 2f       	mov	r18, r24
    215e:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    2160:	c9 01       	movw	r24, r18
    2162:	08 95       	ret

00002164 <printf_P>:
    2164:	df 93       	push	r29
    2166:	cf 93       	push	r28
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
    216c:	fe 01       	movw	r30, r28
    216e:	35 96       	adiw	r30, 0x05	; 5
    2170:	61 91       	ld	r22, Z+
    2172:	71 91       	ld	r23, Z+
    2174:	a0 91 2b 05 	lds	r26, 0x052B
    2178:	b0 91 2c 05 	lds	r27, 0x052C
    217c:	13 96       	adiw	r26, 0x03	; 3
    217e:	8c 91       	ld	r24, X
    2180:	13 97       	sbiw	r26, 0x03	; 3
    2182:	88 60       	ori	r24, 0x08	; 8
    2184:	13 96       	adiw	r26, 0x03	; 3
    2186:	8c 93       	st	X, r24
    2188:	80 91 2b 05 	lds	r24, 0x052B
    218c:	90 91 2c 05 	lds	r25, 0x052C
    2190:	af 01       	movw	r20, r30
    2192:	3f d0       	rcall	.+126    	; 0x2212 <vfprintf>
    2194:	e0 91 2b 05 	lds	r30, 0x052B
    2198:	f0 91 2c 05 	lds	r31, 0x052C
    219c:	23 81       	ldd	r18, Z+3	; 0x03
    219e:	27 7f       	andi	r18, 0xF7	; 247
    21a0:	23 83       	std	Z+3, r18	; 0x03
    21a2:	cf 91       	pop	r28
    21a4:	df 91       	pop	r29
    21a6:	08 95       	ret

000021a8 <puts_P>:
    21a8:	0f 93       	push	r16
    21aa:	1f 93       	push	r17
    21ac:	cf 93       	push	r28
    21ae:	df 93       	push	r29
    21b0:	ec 01       	movw	r28, r24
    21b2:	e0 91 2b 05 	lds	r30, 0x052B
    21b6:	f0 91 2c 05 	lds	r31, 0x052C
    21ba:	83 81       	ldd	r24, Z+3	; 0x03
    21bc:	81 ff       	sbrs	r24, 1
    21be:	21 c0       	rjmp	.+66     	; 0x2202 <puts_P+0x5a>
    21c0:	00 e0       	ldi	r16, 0x00	; 0
    21c2:	10 e0       	ldi	r17, 0x00	; 0
    21c4:	0e c0       	rjmp	.+28     	; 0x21e2 <puts_P+0x3a>
    21c6:	e0 91 2b 05 	lds	r30, 0x052B
    21ca:	f0 91 2c 05 	lds	r31, 0x052C
    21ce:	20 85       	ldd	r18, Z+8	; 0x08
    21d0:	31 85       	ldd	r19, Z+9	; 0x09
    21d2:	bf 01       	movw	r22, r30
    21d4:	f9 01       	movw	r30, r18
    21d6:	09 95       	icall
    21d8:	89 2b       	or	r24, r25
    21da:	11 f0       	breq	.+4      	; 0x21e0 <puts_P+0x38>
    21dc:	0f ef       	ldi	r16, 0xFF	; 255
    21de:	1f ef       	ldi	r17, 0xFF	; 255
    21e0:	21 96       	adiw	r28, 0x01	; 1
    21e2:	fe 01       	movw	r30, r28
    21e4:	84 91       	lpm	r24, Z+
    21e6:	88 23       	and	r24, r24
    21e8:	71 f7       	brne	.-36     	; 0x21c6 <puts_P+0x1e>
    21ea:	e0 91 2b 05 	lds	r30, 0x052B
    21ee:	f0 91 2c 05 	lds	r31, 0x052C
    21f2:	20 85       	ldd	r18, Z+8	; 0x08
    21f4:	31 85       	ldd	r19, Z+9	; 0x09
    21f6:	8a e0       	ldi	r24, 0x0A	; 10
    21f8:	bf 01       	movw	r22, r30
    21fa:	f9 01       	movw	r30, r18
    21fc:	09 95       	icall
    21fe:	89 2b       	or	r24, r25
    2200:	11 f0       	breq	.+4      	; 0x2206 <puts_P+0x5e>
    2202:	0f ef       	ldi	r16, 0xFF	; 255
    2204:	1f ef       	ldi	r17, 0xFF	; 255
    2206:	c8 01       	movw	r24, r16
    2208:	df 91       	pop	r29
    220a:	cf 91       	pop	r28
    220c:	1f 91       	pop	r17
    220e:	0f 91       	pop	r16
    2210:	08 95       	ret

00002212 <vfprintf>:
    2212:	2f 92       	push	r2
    2214:	3f 92       	push	r3
    2216:	4f 92       	push	r4
    2218:	5f 92       	push	r5
    221a:	6f 92       	push	r6
    221c:	7f 92       	push	r7
    221e:	8f 92       	push	r8
    2220:	9f 92       	push	r9
    2222:	af 92       	push	r10
    2224:	bf 92       	push	r11
    2226:	cf 92       	push	r12
    2228:	df 92       	push	r13
    222a:	ef 92       	push	r14
    222c:	ff 92       	push	r15
    222e:	0f 93       	push	r16
    2230:	1f 93       	push	r17
    2232:	df 93       	push	r29
    2234:	cf 93       	push	r28
    2236:	cd b7       	in	r28, 0x3d	; 61
    2238:	de b7       	in	r29, 0x3e	; 62
    223a:	2b 97       	sbiw	r28, 0x0b	; 11
    223c:	0f b6       	in	r0, 0x3f	; 63
    223e:	f8 94       	cli
    2240:	de bf       	out	0x3e, r29	; 62
    2242:	0f be       	out	0x3f, r0	; 63
    2244:	cd bf       	out	0x3d, r28	; 61
    2246:	3c 01       	movw	r6, r24
    2248:	2b 01       	movw	r4, r22
    224a:	5a 01       	movw	r10, r20
    224c:	fc 01       	movw	r30, r24
    224e:	17 82       	std	Z+7, r1	; 0x07
    2250:	16 82       	std	Z+6, r1	; 0x06
    2252:	83 81       	ldd	r24, Z+3	; 0x03
    2254:	81 fd       	sbrc	r24, 1
    2256:	03 c0       	rjmp	.+6      	; 0x225e <vfprintf+0x4c>
    2258:	6f ef       	ldi	r22, 0xFF	; 255
    225a:	7f ef       	ldi	r23, 0xFF	; 255
    225c:	b9 c1       	rjmp	.+882    	; 0x25d0 <vfprintf+0x3be>
    225e:	9a e0       	ldi	r25, 0x0A	; 10
    2260:	89 2e       	mov	r8, r25
    2262:	1e 01       	movw	r2, r28
    2264:	08 94       	sec
    2266:	21 1c       	adc	r2, r1
    2268:	31 1c       	adc	r3, r1
    226a:	f3 01       	movw	r30, r6
    226c:	23 81       	ldd	r18, Z+3	; 0x03
    226e:	f2 01       	movw	r30, r4
    2270:	23 fd       	sbrc	r18, 3
    2272:	85 91       	lpm	r24, Z+
    2274:	23 ff       	sbrs	r18, 3
    2276:	81 91       	ld	r24, Z+
    2278:	2f 01       	movw	r4, r30
    227a:	88 23       	and	r24, r24
    227c:	09 f4       	brne	.+2      	; 0x2280 <vfprintf+0x6e>
    227e:	a5 c1       	rjmp	.+842    	; 0x25ca <vfprintf+0x3b8>
    2280:	85 32       	cpi	r24, 0x25	; 37
    2282:	39 f4       	brne	.+14     	; 0x2292 <vfprintf+0x80>
    2284:	23 fd       	sbrc	r18, 3
    2286:	85 91       	lpm	r24, Z+
    2288:	23 ff       	sbrs	r18, 3
    228a:	81 91       	ld	r24, Z+
    228c:	2f 01       	movw	r4, r30
    228e:	85 32       	cpi	r24, 0x25	; 37
    2290:	21 f4       	brne	.+8      	; 0x229a <vfprintf+0x88>
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	b3 01       	movw	r22, r6
    2296:	cc d1       	rcall	.+920    	; 0x2630 <fputc>
    2298:	e8 cf       	rjmp	.-48     	; 0x226a <vfprintf+0x58>
    229a:	98 2f       	mov	r25, r24
    229c:	ff 24       	eor	r15, r15
    229e:	ee 24       	eor	r14, r14
    22a0:	99 24       	eor	r9, r9
    22a2:	ff e1       	ldi	r31, 0x1F	; 31
    22a4:	ff 15       	cp	r31, r15
    22a6:	d0 f0       	brcs	.+52     	; 0x22dc <vfprintf+0xca>
    22a8:	9b 32       	cpi	r25, 0x2B	; 43
    22aa:	69 f0       	breq	.+26     	; 0x22c6 <vfprintf+0xb4>
    22ac:	9c 32       	cpi	r25, 0x2C	; 44
    22ae:	28 f4       	brcc	.+10     	; 0x22ba <vfprintf+0xa8>
    22b0:	90 32       	cpi	r25, 0x20	; 32
    22b2:	59 f0       	breq	.+22     	; 0x22ca <vfprintf+0xb8>
    22b4:	93 32       	cpi	r25, 0x23	; 35
    22b6:	91 f4       	brne	.+36     	; 0x22dc <vfprintf+0xca>
    22b8:	0e c0       	rjmp	.+28     	; 0x22d6 <vfprintf+0xc4>
    22ba:	9d 32       	cpi	r25, 0x2D	; 45
    22bc:	49 f0       	breq	.+18     	; 0x22d0 <vfprintf+0xbe>
    22be:	90 33       	cpi	r25, 0x30	; 48
    22c0:	69 f4       	brne	.+26     	; 0x22dc <vfprintf+0xca>
    22c2:	41 e0       	ldi	r20, 0x01	; 1
    22c4:	24 c0       	rjmp	.+72     	; 0x230e <vfprintf+0xfc>
    22c6:	52 e0       	ldi	r21, 0x02	; 2
    22c8:	f5 2a       	or	r15, r21
    22ca:	84 e0       	ldi	r24, 0x04	; 4
    22cc:	f8 2a       	or	r15, r24
    22ce:	28 c0       	rjmp	.+80     	; 0x2320 <vfprintf+0x10e>
    22d0:	98 e0       	ldi	r25, 0x08	; 8
    22d2:	f9 2a       	or	r15, r25
    22d4:	25 c0       	rjmp	.+74     	; 0x2320 <vfprintf+0x10e>
    22d6:	e0 e1       	ldi	r30, 0x10	; 16
    22d8:	fe 2a       	or	r15, r30
    22da:	22 c0       	rjmp	.+68     	; 0x2320 <vfprintf+0x10e>
    22dc:	f7 fc       	sbrc	r15, 7
    22de:	29 c0       	rjmp	.+82     	; 0x2332 <vfprintf+0x120>
    22e0:	89 2f       	mov	r24, r25
    22e2:	80 53       	subi	r24, 0x30	; 48
    22e4:	8a 30       	cpi	r24, 0x0A	; 10
    22e6:	70 f4       	brcc	.+28     	; 0x2304 <vfprintf+0xf2>
    22e8:	f6 fe       	sbrs	r15, 6
    22ea:	05 c0       	rjmp	.+10     	; 0x22f6 <vfprintf+0xe4>
    22ec:	98 9c       	mul	r9, r8
    22ee:	90 2c       	mov	r9, r0
    22f0:	11 24       	eor	r1, r1
    22f2:	98 0e       	add	r9, r24
    22f4:	15 c0       	rjmp	.+42     	; 0x2320 <vfprintf+0x10e>
    22f6:	e8 9c       	mul	r14, r8
    22f8:	e0 2c       	mov	r14, r0
    22fa:	11 24       	eor	r1, r1
    22fc:	e8 0e       	add	r14, r24
    22fe:	f0 e2       	ldi	r31, 0x20	; 32
    2300:	ff 2a       	or	r15, r31
    2302:	0e c0       	rjmp	.+28     	; 0x2320 <vfprintf+0x10e>
    2304:	9e 32       	cpi	r25, 0x2E	; 46
    2306:	29 f4       	brne	.+10     	; 0x2312 <vfprintf+0x100>
    2308:	f6 fc       	sbrc	r15, 6
    230a:	5f c1       	rjmp	.+702    	; 0x25ca <vfprintf+0x3b8>
    230c:	40 e4       	ldi	r20, 0x40	; 64
    230e:	f4 2a       	or	r15, r20
    2310:	07 c0       	rjmp	.+14     	; 0x2320 <vfprintf+0x10e>
    2312:	9c 36       	cpi	r25, 0x6C	; 108
    2314:	19 f4       	brne	.+6      	; 0x231c <vfprintf+0x10a>
    2316:	50 e8       	ldi	r21, 0x80	; 128
    2318:	f5 2a       	or	r15, r21
    231a:	02 c0       	rjmp	.+4      	; 0x2320 <vfprintf+0x10e>
    231c:	98 36       	cpi	r25, 0x68	; 104
    231e:	49 f4       	brne	.+18     	; 0x2332 <vfprintf+0x120>
    2320:	f2 01       	movw	r30, r4
    2322:	23 fd       	sbrc	r18, 3
    2324:	95 91       	lpm	r25, Z+
    2326:	23 ff       	sbrs	r18, 3
    2328:	91 91       	ld	r25, Z+
    232a:	2f 01       	movw	r4, r30
    232c:	99 23       	and	r25, r25
    232e:	09 f0       	breq	.+2      	; 0x2332 <vfprintf+0x120>
    2330:	b8 cf       	rjmp	.-144    	; 0x22a2 <vfprintf+0x90>
    2332:	89 2f       	mov	r24, r25
    2334:	85 54       	subi	r24, 0x45	; 69
    2336:	83 30       	cpi	r24, 0x03	; 3
    2338:	18 f0       	brcs	.+6      	; 0x2340 <vfprintf+0x12e>
    233a:	80 52       	subi	r24, 0x20	; 32
    233c:	83 30       	cpi	r24, 0x03	; 3
    233e:	38 f4       	brcc	.+14     	; 0x234e <vfprintf+0x13c>
    2340:	44 e0       	ldi	r20, 0x04	; 4
    2342:	50 e0       	ldi	r21, 0x00	; 0
    2344:	a4 0e       	add	r10, r20
    2346:	b5 1e       	adc	r11, r21
    2348:	5f e3       	ldi	r21, 0x3F	; 63
    234a:	59 83       	std	Y+1, r21	; 0x01
    234c:	0f c0       	rjmp	.+30     	; 0x236c <vfprintf+0x15a>
    234e:	93 36       	cpi	r25, 0x63	; 99
    2350:	31 f0       	breq	.+12     	; 0x235e <vfprintf+0x14c>
    2352:	93 37       	cpi	r25, 0x73	; 115
    2354:	79 f0       	breq	.+30     	; 0x2374 <vfprintf+0x162>
    2356:	93 35       	cpi	r25, 0x53	; 83
    2358:	09 f0       	breq	.+2      	; 0x235c <vfprintf+0x14a>
    235a:	52 c0       	rjmp	.+164    	; 0x2400 <vfprintf+0x1ee>
    235c:	1f c0       	rjmp	.+62     	; 0x239c <vfprintf+0x18a>
    235e:	f5 01       	movw	r30, r10
    2360:	80 81       	ld	r24, Z
    2362:	89 83       	std	Y+1, r24	; 0x01
    2364:	42 e0       	ldi	r20, 0x02	; 2
    2366:	50 e0       	ldi	r21, 0x00	; 0
    2368:	a4 0e       	add	r10, r20
    236a:	b5 1e       	adc	r11, r21
    236c:	61 01       	movw	r12, r2
    236e:	01 e0       	ldi	r16, 0x01	; 1
    2370:	10 e0       	ldi	r17, 0x00	; 0
    2372:	11 c0       	rjmp	.+34     	; 0x2396 <vfprintf+0x184>
    2374:	f5 01       	movw	r30, r10
    2376:	c0 80       	ld	r12, Z
    2378:	d1 80       	ldd	r13, Z+1	; 0x01
    237a:	f6 fc       	sbrc	r15, 6
    237c:	03 c0       	rjmp	.+6      	; 0x2384 <vfprintf+0x172>
    237e:	6f ef       	ldi	r22, 0xFF	; 255
    2380:	7f ef       	ldi	r23, 0xFF	; 255
    2382:	02 c0       	rjmp	.+4      	; 0x2388 <vfprintf+0x176>
    2384:	69 2d       	mov	r22, r9
    2386:	70 e0       	ldi	r23, 0x00	; 0
    2388:	42 e0       	ldi	r20, 0x02	; 2
    238a:	50 e0       	ldi	r21, 0x00	; 0
    238c:	a4 0e       	add	r10, r20
    238e:	b5 1e       	adc	r11, r21
    2390:	c6 01       	movw	r24, r12
    2392:	43 d1       	rcall	.+646    	; 0x261a <strnlen>
    2394:	8c 01       	movw	r16, r24
    2396:	5f e7       	ldi	r21, 0x7F	; 127
    2398:	f5 22       	and	r15, r21
    239a:	13 c0       	rjmp	.+38     	; 0x23c2 <vfprintf+0x1b0>
    239c:	f5 01       	movw	r30, r10
    239e:	c0 80       	ld	r12, Z
    23a0:	d1 80       	ldd	r13, Z+1	; 0x01
    23a2:	f6 fc       	sbrc	r15, 6
    23a4:	03 c0       	rjmp	.+6      	; 0x23ac <vfprintf+0x19a>
    23a6:	6f ef       	ldi	r22, 0xFF	; 255
    23a8:	7f ef       	ldi	r23, 0xFF	; 255
    23aa:	02 c0       	rjmp	.+4      	; 0x23b0 <vfprintf+0x19e>
    23ac:	69 2d       	mov	r22, r9
    23ae:	70 e0       	ldi	r23, 0x00	; 0
    23b0:	42 e0       	ldi	r20, 0x02	; 2
    23b2:	50 e0       	ldi	r21, 0x00	; 0
    23b4:	a4 0e       	add	r10, r20
    23b6:	b5 1e       	adc	r11, r21
    23b8:	c6 01       	movw	r24, r12
    23ba:	24 d1       	rcall	.+584    	; 0x2604 <strnlen_P>
    23bc:	8c 01       	movw	r16, r24
    23be:	50 e8       	ldi	r21, 0x80	; 128
    23c0:	f5 2a       	or	r15, r21
    23c2:	f3 fe       	sbrs	r15, 3
    23c4:	06 c0       	rjmp	.+12     	; 0x23d2 <vfprintf+0x1c0>
    23c6:	18 c0       	rjmp	.+48     	; 0x23f8 <vfprintf+0x1e6>
    23c8:	80 e2       	ldi	r24, 0x20	; 32
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	b3 01       	movw	r22, r6
    23ce:	30 d1       	rcall	.+608    	; 0x2630 <fputc>
    23d0:	ea 94       	dec	r14
    23d2:	8e 2d       	mov	r24, r14
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	08 17       	cp	r16, r24
    23d8:	19 07       	cpc	r17, r25
    23da:	b0 f3       	brcs	.-20     	; 0x23c8 <vfprintf+0x1b6>
    23dc:	0d c0       	rjmp	.+26     	; 0x23f8 <vfprintf+0x1e6>
    23de:	f6 01       	movw	r30, r12
    23e0:	f7 fc       	sbrc	r15, 7
    23e2:	85 91       	lpm	r24, Z+
    23e4:	f7 fe       	sbrs	r15, 7
    23e6:	81 91       	ld	r24, Z+
    23e8:	6f 01       	movw	r12, r30
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	b3 01       	movw	r22, r6
    23ee:	20 d1       	rcall	.+576    	; 0x2630 <fputc>
    23f0:	e1 10       	cpse	r14, r1
    23f2:	ea 94       	dec	r14
    23f4:	01 50       	subi	r16, 0x01	; 1
    23f6:	10 40       	sbci	r17, 0x00	; 0
    23f8:	01 15       	cp	r16, r1
    23fa:	11 05       	cpc	r17, r1
    23fc:	81 f7       	brne	.-32     	; 0x23de <vfprintf+0x1cc>
    23fe:	e2 c0       	rjmp	.+452    	; 0x25c4 <vfprintf+0x3b2>
    2400:	94 36       	cpi	r25, 0x64	; 100
    2402:	11 f0       	breq	.+4      	; 0x2408 <vfprintf+0x1f6>
    2404:	99 36       	cpi	r25, 0x69	; 105
    2406:	61 f5       	brne	.+88     	; 0x2460 <vfprintf+0x24e>
    2408:	f7 fe       	sbrs	r15, 7
    240a:	08 c0       	rjmp	.+16     	; 0x241c <vfprintf+0x20a>
    240c:	f5 01       	movw	r30, r10
    240e:	20 81       	ld	r18, Z
    2410:	31 81       	ldd	r19, Z+1	; 0x01
    2412:	42 81       	ldd	r20, Z+2	; 0x02
    2414:	53 81       	ldd	r21, Z+3	; 0x03
    2416:	84 e0       	ldi	r24, 0x04	; 4
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	0a c0       	rjmp	.+20     	; 0x2430 <vfprintf+0x21e>
    241c:	f5 01       	movw	r30, r10
    241e:	80 81       	ld	r24, Z
    2420:	91 81       	ldd	r25, Z+1	; 0x01
    2422:	9c 01       	movw	r18, r24
    2424:	44 27       	eor	r20, r20
    2426:	37 fd       	sbrc	r19, 7
    2428:	40 95       	com	r20
    242a:	54 2f       	mov	r21, r20
    242c:	82 e0       	ldi	r24, 0x02	; 2
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	a8 0e       	add	r10, r24
    2432:	b9 1e       	adc	r11, r25
    2434:	9f e6       	ldi	r25, 0x6F	; 111
    2436:	f9 22       	and	r15, r25
    2438:	57 ff       	sbrs	r21, 7
    243a:	09 c0       	rjmp	.+18     	; 0x244e <vfprintf+0x23c>
    243c:	50 95       	com	r21
    243e:	40 95       	com	r20
    2440:	30 95       	com	r19
    2442:	21 95       	neg	r18
    2444:	3f 4f       	sbci	r19, 0xFF	; 255
    2446:	4f 4f       	sbci	r20, 0xFF	; 255
    2448:	5f 4f       	sbci	r21, 0xFF	; 255
    244a:	e0 e8       	ldi	r30, 0x80	; 128
    244c:	fe 2a       	or	r15, r30
    244e:	ca 01       	movw	r24, r20
    2450:	b9 01       	movw	r22, r18
    2452:	a1 01       	movw	r20, r2
    2454:	2a e0       	ldi	r18, 0x0A	; 10
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	17 d1       	rcall	.+558    	; 0x2688 <__ultoa_invert>
    245a:	d8 2e       	mov	r13, r24
    245c:	d2 18       	sub	r13, r2
    245e:	3f c0       	rjmp	.+126    	; 0x24de <vfprintf+0x2cc>
    2460:	95 37       	cpi	r25, 0x75	; 117
    2462:	29 f4       	brne	.+10     	; 0x246e <vfprintf+0x25c>
    2464:	1f 2d       	mov	r17, r15
    2466:	1f 7e       	andi	r17, 0xEF	; 239
    2468:	2a e0       	ldi	r18, 0x0A	; 10
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	1d c0       	rjmp	.+58     	; 0x24a8 <vfprintf+0x296>
    246e:	1f 2d       	mov	r17, r15
    2470:	19 7f       	andi	r17, 0xF9	; 249
    2472:	9f 36       	cpi	r25, 0x6F	; 111
    2474:	61 f0       	breq	.+24     	; 0x248e <vfprintf+0x27c>
    2476:	90 37       	cpi	r25, 0x70	; 112
    2478:	20 f4       	brcc	.+8      	; 0x2482 <vfprintf+0x270>
    247a:	98 35       	cpi	r25, 0x58	; 88
    247c:	09 f0       	breq	.+2      	; 0x2480 <vfprintf+0x26e>
    247e:	a5 c0       	rjmp	.+330    	; 0x25ca <vfprintf+0x3b8>
    2480:	0f c0       	rjmp	.+30     	; 0x24a0 <vfprintf+0x28e>
    2482:	90 37       	cpi	r25, 0x70	; 112
    2484:	39 f0       	breq	.+14     	; 0x2494 <vfprintf+0x282>
    2486:	98 37       	cpi	r25, 0x78	; 120
    2488:	09 f0       	breq	.+2      	; 0x248c <vfprintf+0x27a>
    248a:	9f c0       	rjmp	.+318    	; 0x25ca <vfprintf+0x3b8>
    248c:	04 c0       	rjmp	.+8      	; 0x2496 <vfprintf+0x284>
    248e:	28 e0       	ldi	r18, 0x08	; 8
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	0a c0       	rjmp	.+20     	; 0x24a8 <vfprintf+0x296>
    2494:	10 61       	ori	r17, 0x10	; 16
    2496:	14 fd       	sbrc	r17, 4
    2498:	14 60       	ori	r17, 0x04	; 4
    249a:	20 e1       	ldi	r18, 0x10	; 16
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	04 c0       	rjmp	.+8      	; 0x24a8 <vfprintf+0x296>
    24a0:	14 fd       	sbrc	r17, 4
    24a2:	16 60       	ori	r17, 0x06	; 6
    24a4:	20 e1       	ldi	r18, 0x10	; 16
    24a6:	32 e0       	ldi	r19, 0x02	; 2
    24a8:	17 ff       	sbrs	r17, 7
    24aa:	08 c0       	rjmp	.+16     	; 0x24bc <vfprintf+0x2aa>
    24ac:	f5 01       	movw	r30, r10
    24ae:	60 81       	ld	r22, Z
    24b0:	71 81       	ldd	r23, Z+1	; 0x01
    24b2:	82 81       	ldd	r24, Z+2	; 0x02
    24b4:	93 81       	ldd	r25, Z+3	; 0x03
    24b6:	44 e0       	ldi	r20, 0x04	; 4
    24b8:	50 e0       	ldi	r21, 0x00	; 0
    24ba:	08 c0       	rjmp	.+16     	; 0x24cc <vfprintf+0x2ba>
    24bc:	f5 01       	movw	r30, r10
    24be:	80 81       	ld	r24, Z
    24c0:	91 81       	ldd	r25, Z+1	; 0x01
    24c2:	bc 01       	movw	r22, r24
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	42 e0       	ldi	r20, 0x02	; 2
    24ca:	50 e0       	ldi	r21, 0x00	; 0
    24cc:	a4 0e       	add	r10, r20
    24ce:	b5 1e       	adc	r11, r21
    24d0:	a1 01       	movw	r20, r2
    24d2:	da d0       	rcall	.+436    	; 0x2688 <__ultoa_invert>
    24d4:	d8 2e       	mov	r13, r24
    24d6:	d2 18       	sub	r13, r2
    24d8:	8f e7       	ldi	r24, 0x7F	; 127
    24da:	f8 2e       	mov	r15, r24
    24dc:	f1 22       	and	r15, r17
    24de:	f6 fe       	sbrs	r15, 6
    24e0:	0b c0       	rjmp	.+22     	; 0x24f8 <vfprintf+0x2e6>
    24e2:	5e ef       	ldi	r21, 0xFE	; 254
    24e4:	f5 22       	and	r15, r21
    24e6:	d9 14       	cp	r13, r9
    24e8:	38 f4       	brcc	.+14     	; 0x24f8 <vfprintf+0x2e6>
    24ea:	f4 fe       	sbrs	r15, 4
    24ec:	07 c0       	rjmp	.+14     	; 0x24fc <vfprintf+0x2ea>
    24ee:	f2 fc       	sbrc	r15, 2
    24f0:	05 c0       	rjmp	.+10     	; 0x24fc <vfprintf+0x2ea>
    24f2:	8f ee       	ldi	r24, 0xEF	; 239
    24f4:	f8 22       	and	r15, r24
    24f6:	02 c0       	rjmp	.+4      	; 0x24fc <vfprintf+0x2ea>
    24f8:	1d 2d       	mov	r17, r13
    24fa:	01 c0       	rjmp	.+2      	; 0x24fe <vfprintf+0x2ec>
    24fc:	19 2d       	mov	r17, r9
    24fe:	f4 fe       	sbrs	r15, 4
    2500:	0d c0       	rjmp	.+26     	; 0x251c <vfprintf+0x30a>
    2502:	fe 01       	movw	r30, r28
    2504:	ed 0d       	add	r30, r13
    2506:	f1 1d       	adc	r31, r1
    2508:	80 81       	ld	r24, Z
    250a:	80 33       	cpi	r24, 0x30	; 48
    250c:	19 f4       	brne	.+6      	; 0x2514 <vfprintf+0x302>
    250e:	99 ee       	ldi	r25, 0xE9	; 233
    2510:	f9 22       	and	r15, r25
    2512:	08 c0       	rjmp	.+16     	; 0x2524 <vfprintf+0x312>
    2514:	1f 5f       	subi	r17, 0xFF	; 255
    2516:	f2 fe       	sbrs	r15, 2
    2518:	05 c0       	rjmp	.+10     	; 0x2524 <vfprintf+0x312>
    251a:	03 c0       	rjmp	.+6      	; 0x2522 <vfprintf+0x310>
    251c:	8f 2d       	mov	r24, r15
    251e:	86 78       	andi	r24, 0x86	; 134
    2520:	09 f0       	breq	.+2      	; 0x2524 <vfprintf+0x312>
    2522:	1f 5f       	subi	r17, 0xFF	; 255
    2524:	0f 2d       	mov	r16, r15
    2526:	f3 fc       	sbrc	r15, 3
    2528:	13 c0       	rjmp	.+38     	; 0x2550 <vfprintf+0x33e>
    252a:	f0 fe       	sbrs	r15, 0
    252c:	0e c0       	rjmp	.+28     	; 0x254a <vfprintf+0x338>
    252e:	1e 15       	cp	r17, r14
    2530:	10 f0       	brcs	.+4      	; 0x2536 <vfprintf+0x324>
    2532:	9d 2c       	mov	r9, r13
    2534:	0a c0       	rjmp	.+20     	; 0x254a <vfprintf+0x338>
    2536:	9d 2c       	mov	r9, r13
    2538:	9e 0c       	add	r9, r14
    253a:	91 1a       	sub	r9, r17
    253c:	1e 2d       	mov	r17, r14
    253e:	05 c0       	rjmp	.+10     	; 0x254a <vfprintf+0x338>
    2540:	80 e2       	ldi	r24, 0x20	; 32
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	b3 01       	movw	r22, r6
    2546:	74 d0       	rcall	.+232    	; 0x2630 <fputc>
    2548:	1f 5f       	subi	r17, 0xFF	; 255
    254a:	1e 15       	cp	r17, r14
    254c:	c8 f3       	brcs	.-14     	; 0x2540 <vfprintf+0x32e>
    254e:	04 c0       	rjmp	.+8      	; 0x2558 <vfprintf+0x346>
    2550:	1e 15       	cp	r17, r14
    2552:	10 f4       	brcc	.+4      	; 0x2558 <vfprintf+0x346>
    2554:	e1 1a       	sub	r14, r17
    2556:	01 c0       	rjmp	.+2      	; 0x255a <vfprintf+0x348>
    2558:	ee 24       	eor	r14, r14
    255a:	04 ff       	sbrs	r16, 4
    255c:	0e c0       	rjmp	.+28     	; 0x257a <vfprintf+0x368>
    255e:	80 e3       	ldi	r24, 0x30	; 48
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	b3 01       	movw	r22, r6
    2564:	65 d0       	rcall	.+202    	; 0x2630 <fputc>
    2566:	02 ff       	sbrs	r16, 2
    2568:	1b c0       	rjmp	.+54     	; 0x25a0 <vfprintf+0x38e>
    256a:	01 fd       	sbrc	r16, 1
    256c:	03 c0       	rjmp	.+6      	; 0x2574 <vfprintf+0x362>
    256e:	88 e7       	ldi	r24, 0x78	; 120
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	0e c0       	rjmp	.+28     	; 0x2590 <vfprintf+0x37e>
    2574:	88 e5       	ldi	r24, 0x58	; 88
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	0b c0       	rjmp	.+22     	; 0x2590 <vfprintf+0x37e>
    257a:	80 2f       	mov	r24, r16
    257c:	86 78       	andi	r24, 0x86	; 134
    257e:	81 f0       	breq	.+32     	; 0x25a0 <vfprintf+0x38e>
    2580:	01 ff       	sbrs	r16, 1
    2582:	02 c0       	rjmp	.+4      	; 0x2588 <vfprintf+0x376>
    2584:	8b e2       	ldi	r24, 0x2B	; 43
    2586:	01 c0       	rjmp	.+2      	; 0x258a <vfprintf+0x378>
    2588:	80 e2       	ldi	r24, 0x20	; 32
    258a:	f7 fc       	sbrc	r15, 7
    258c:	8d e2       	ldi	r24, 0x2D	; 45
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	b3 01       	movw	r22, r6
    2592:	4e d0       	rcall	.+156    	; 0x2630 <fputc>
    2594:	05 c0       	rjmp	.+10     	; 0x25a0 <vfprintf+0x38e>
    2596:	80 e3       	ldi	r24, 0x30	; 48
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	b3 01       	movw	r22, r6
    259c:	49 d0       	rcall	.+146    	; 0x2630 <fputc>
    259e:	9a 94       	dec	r9
    25a0:	d9 14       	cp	r13, r9
    25a2:	c8 f3       	brcs	.-14     	; 0x2596 <vfprintf+0x384>
    25a4:	da 94       	dec	r13
    25a6:	f1 01       	movw	r30, r2
    25a8:	ed 0d       	add	r30, r13
    25aa:	f1 1d       	adc	r31, r1
    25ac:	80 81       	ld	r24, Z
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	b3 01       	movw	r22, r6
    25b2:	3e d0       	rcall	.+124    	; 0x2630 <fputc>
    25b4:	dd 20       	and	r13, r13
    25b6:	b1 f7       	brne	.-20     	; 0x25a4 <vfprintf+0x392>
    25b8:	05 c0       	rjmp	.+10     	; 0x25c4 <vfprintf+0x3b2>
    25ba:	80 e2       	ldi	r24, 0x20	; 32
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	b3 01       	movw	r22, r6
    25c0:	37 d0       	rcall	.+110    	; 0x2630 <fputc>
    25c2:	ea 94       	dec	r14
    25c4:	ee 20       	and	r14, r14
    25c6:	c9 f7       	brne	.-14     	; 0x25ba <vfprintf+0x3a8>
    25c8:	50 ce       	rjmp	.-864    	; 0x226a <vfprintf+0x58>
    25ca:	f3 01       	movw	r30, r6
    25cc:	66 81       	ldd	r22, Z+6	; 0x06
    25ce:	77 81       	ldd	r23, Z+7	; 0x07
    25d0:	cb 01       	movw	r24, r22
    25d2:	2b 96       	adiw	r28, 0x0b	; 11
    25d4:	0f b6       	in	r0, 0x3f	; 63
    25d6:	f8 94       	cli
    25d8:	de bf       	out	0x3e, r29	; 62
    25da:	0f be       	out	0x3f, r0	; 63
    25dc:	cd bf       	out	0x3d, r28	; 61
    25de:	cf 91       	pop	r28
    25e0:	df 91       	pop	r29
    25e2:	1f 91       	pop	r17
    25e4:	0f 91       	pop	r16
    25e6:	ff 90       	pop	r15
    25e8:	ef 90       	pop	r14
    25ea:	df 90       	pop	r13
    25ec:	cf 90       	pop	r12
    25ee:	bf 90       	pop	r11
    25f0:	af 90       	pop	r10
    25f2:	9f 90       	pop	r9
    25f4:	8f 90       	pop	r8
    25f6:	7f 90       	pop	r7
    25f8:	6f 90       	pop	r6
    25fa:	5f 90       	pop	r5
    25fc:	4f 90       	pop	r4
    25fe:	3f 90       	pop	r3
    2600:	2f 90       	pop	r2
    2602:	08 95       	ret

00002604 <strnlen_P>:
    2604:	fc 01       	movw	r30, r24
    2606:	05 90       	lpm	r0, Z+
    2608:	61 50       	subi	r22, 0x01	; 1
    260a:	70 40       	sbci	r23, 0x00	; 0
    260c:	01 10       	cpse	r0, r1
    260e:	d8 f7       	brcc	.-10     	; 0x2606 <strnlen_P+0x2>
    2610:	80 95       	com	r24
    2612:	90 95       	com	r25
    2614:	8e 0f       	add	r24, r30
    2616:	9f 1f       	adc	r25, r31
    2618:	08 95       	ret

0000261a <strnlen>:
    261a:	fc 01       	movw	r30, r24
    261c:	61 50       	subi	r22, 0x01	; 1
    261e:	70 40       	sbci	r23, 0x00	; 0
    2620:	01 90       	ld	r0, Z+
    2622:	01 10       	cpse	r0, r1
    2624:	d8 f7       	brcc	.-10     	; 0x261c <strnlen+0x2>
    2626:	80 95       	com	r24
    2628:	90 95       	com	r25
    262a:	8e 0f       	add	r24, r30
    262c:	9f 1f       	adc	r25, r31
    262e:	08 95       	ret

00002630 <fputc>:
    2630:	0f 93       	push	r16
    2632:	1f 93       	push	r17
    2634:	cf 93       	push	r28
    2636:	df 93       	push	r29
    2638:	8c 01       	movw	r16, r24
    263a:	eb 01       	movw	r28, r22
    263c:	8b 81       	ldd	r24, Y+3	; 0x03
    263e:	81 ff       	sbrs	r24, 1
    2640:	1b c0       	rjmp	.+54     	; 0x2678 <fputc+0x48>
    2642:	82 ff       	sbrs	r24, 2
    2644:	0d c0       	rjmp	.+26     	; 0x2660 <fputc+0x30>
    2646:	2e 81       	ldd	r18, Y+6	; 0x06
    2648:	3f 81       	ldd	r19, Y+7	; 0x07
    264a:	8c 81       	ldd	r24, Y+4	; 0x04
    264c:	9d 81       	ldd	r25, Y+5	; 0x05
    264e:	28 17       	cp	r18, r24
    2650:	39 07       	cpc	r19, r25
    2652:	64 f4       	brge	.+24     	; 0x266c <fputc+0x3c>
    2654:	e8 81       	ld	r30, Y
    2656:	f9 81       	ldd	r31, Y+1	; 0x01
    2658:	01 93       	st	Z+, r16
    265a:	f9 83       	std	Y+1, r31	; 0x01
    265c:	e8 83       	st	Y, r30
    265e:	06 c0       	rjmp	.+12     	; 0x266c <fputc+0x3c>
    2660:	e8 85       	ldd	r30, Y+8	; 0x08
    2662:	f9 85       	ldd	r31, Y+9	; 0x09
    2664:	80 2f       	mov	r24, r16
    2666:	09 95       	icall
    2668:	89 2b       	or	r24, r25
    266a:	31 f4       	brne	.+12     	; 0x2678 <fputc+0x48>
    266c:	8e 81       	ldd	r24, Y+6	; 0x06
    266e:	9f 81       	ldd	r25, Y+7	; 0x07
    2670:	01 96       	adiw	r24, 0x01	; 1
    2672:	9f 83       	std	Y+7, r25	; 0x07
    2674:	8e 83       	std	Y+6, r24	; 0x06
    2676:	02 c0       	rjmp	.+4      	; 0x267c <fputc+0x4c>
    2678:	0f ef       	ldi	r16, 0xFF	; 255
    267a:	1f ef       	ldi	r17, 0xFF	; 255
    267c:	c8 01       	movw	r24, r16
    267e:	df 91       	pop	r29
    2680:	cf 91       	pop	r28
    2682:	1f 91       	pop	r17
    2684:	0f 91       	pop	r16
    2686:	08 95       	ret

00002688 <__ultoa_invert>:
    2688:	fa 01       	movw	r30, r20
    268a:	aa 27       	eor	r26, r26
    268c:	28 30       	cpi	r18, 0x08	; 8
    268e:	51 f1       	breq	.+84     	; 0x26e4 <__ultoa_invert+0x5c>
    2690:	20 31       	cpi	r18, 0x10	; 16
    2692:	81 f1       	breq	.+96     	; 0x26f4 <__ultoa_invert+0x6c>
    2694:	e8 94       	clt
    2696:	6f 93       	push	r22
    2698:	6e 7f       	andi	r22, 0xFE	; 254
    269a:	6e 5f       	subi	r22, 0xFE	; 254
    269c:	7f 4f       	sbci	r23, 0xFF	; 255
    269e:	8f 4f       	sbci	r24, 0xFF	; 255
    26a0:	9f 4f       	sbci	r25, 0xFF	; 255
    26a2:	af 4f       	sbci	r26, 0xFF	; 255
    26a4:	b1 e0       	ldi	r27, 0x01	; 1
    26a6:	3e d0       	rcall	.+124    	; 0x2724 <__ultoa_invert+0x9c>
    26a8:	b4 e0       	ldi	r27, 0x04	; 4
    26aa:	3c d0       	rcall	.+120    	; 0x2724 <__ultoa_invert+0x9c>
    26ac:	67 0f       	add	r22, r23
    26ae:	78 1f       	adc	r23, r24
    26b0:	89 1f       	adc	r24, r25
    26b2:	9a 1f       	adc	r25, r26
    26b4:	a1 1d       	adc	r26, r1
    26b6:	68 0f       	add	r22, r24
    26b8:	79 1f       	adc	r23, r25
    26ba:	8a 1f       	adc	r24, r26
    26bc:	91 1d       	adc	r25, r1
    26be:	a1 1d       	adc	r26, r1
    26c0:	6a 0f       	add	r22, r26
    26c2:	71 1d       	adc	r23, r1
    26c4:	81 1d       	adc	r24, r1
    26c6:	91 1d       	adc	r25, r1
    26c8:	a1 1d       	adc	r26, r1
    26ca:	20 d0       	rcall	.+64     	; 0x270c <__ultoa_invert+0x84>
    26cc:	09 f4       	brne	.+2      	; 0x26d0 <__ultoa_invert+0x48>
    26ce:	68 94       	set
    26d0:	3f 91       	pop	r19
    26d2:	2a e0       	ldi	r18, 0x0A	; 10
    26d4:	26 9f       	mul	r18, r22
    26d6:	11 24       	eor	r1, r1
    26d8:	30 19       	sub	r19, r0
    26da:	30 5d       	subi	r19, 0xD0	; 208
    26dc:	31 93       	st	Z+, r19
    26de:	de f6       	brtc	.-74     	; 0x2696 <__ultoa_invert+0xe>
    26e0:	cf 01       	movw	r24, r30
    26e2:	08 95       	ret
    26e4:	46 2f       	mov	r20, r22
    26e6:	47 70       	andi	r20, 0x07	; 7
    26e8:	40 5d       	subi	r20, 0xD0	; 208
    26ea:	41 93       	st	Z+, r20
    26ec:	b3 e0       	ldi	r27, 0x03	; 3
    26ee:	0f d0       	rcall	.+30     	; 0x270e <__ultoa_invert+0x86>
    26f0:	c9 f7       	brne	.-14     	; 0x26e4 <__ultoa_invert+0x5c>
    26f2:	f6 cf       	rjmp	.-20     	; 0x26e0 <__ultoa_invert+0x58>
    26f4:	46 2f       	mov	r20, r22
    26f6:	4f 70       	andi	r20, 0x0F	; 15
    26f8:	40 5d       	subi	r20, 0xD0	; 208
    26fa:	4a 33       	cpi	r20, 0x3A	; 58
    26fc:	18 f0       	brcs	.+6      	; 0x2704 <__ultoa_invert+0x7c>
    26fe:	49 5d       	subi	r20, 0xD9	; 217
    2700:	31 fd       	sbrc	r19, 1
    2702:	40 52       	subi	r20, 0x20	; 32
    2704:	41 93       	st	Z+, r20
    2706:	02 d0       	rcall	.+4      	; 0x270c <__ultoa_invert+0x84>
    2708:	a9 f7       	brne	.-22     	; 0x26f4 <__ultoa_invert+0x6c>
    270a:	ea cf       	rjmp	.-44     	; 0x26e0 <__ultoa_invert+0x58>
    270c:	b4 e0       	ldi	r27, 0x04	; 4
    270e:	a6 95       	lsr	r26
    2710:	97 95       	ror	r25
    2712:	87 95       	ror	r24
    2714:	77 95       	ror	r23
    2716:	67 95       	ror	r22
    2718:	ba 95       	dec	r27
    271a:	c9 f7       	brne	.-14     	; 0x270e <__ultoa_invert+0x86>
    271c:	00 97       	sbiw	r24, 0x00	; 0
    271e:	61 05       	cpc	r22, r1
    2720:	71 05       	cpc	r23, r1
    2722:	08 95       	ret
    2724:	9b 01       	movw	r18, r22
    2726:	ac 01       	movw	r20, r24
    2728:	0a 2e       	mov	r0, r26
    272a:	06 94       	lsr	r0
    272c:	57 95       	ror	r21
    272e:	47 95       	ror	r20
    2730:	37 95       	ror	r19
    2732:	27 95       	ror	r18
    2734:	ba 95       	dec	r27
    2736:	c9 f7       	brne	.-14     	; 0x272a <__ultoa_invert+0xa2>
    2738:	62 0f       	add	r22, r18
    273a:	73 1f       	adc	r23, r19
    273c:	84 1f       	adc	r24, r20
    273e:	95 1f       	adc	r25, r21
    2740:	a0 1d       	adc	r26, r0
    2742:	08 95       	ret

00002744 <_exit>:
    2744:	f8 94       	cli

00002746 <__stop_program>:
    2746:	ff cf       	rjmp	.-2      	; 0x2746 <__stop_program>
