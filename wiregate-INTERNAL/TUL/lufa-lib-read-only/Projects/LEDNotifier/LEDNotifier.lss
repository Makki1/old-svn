
LEDNotifier.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000e6e  00000f02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800116  00800116  00000f18  2**0
                  ALLOC
  3 .stab         00000f3c  00000000  00000000  00000f18  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000090c  00000000  00000000  00001e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000460  00000000  00000000  00002760  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000c12  00000000  00000000  00002bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007c19  00000000  00000000  000037d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001f25  00000000  00000000  0000b3eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005df5  00000000  00000000  0000d310  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000680  00000000  00000000  00013108  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003216  00000000  00000000  00013788  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000344a  00000000  00000000  0001699e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000550  00000000  00000000  00019de8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
   0:	90 c0       	rjmp	.+288    	; 0x122 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   2:	00 00       	nop

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
   4:	ab c0       	rjmp	.+342    	; 0x15c <__bad_interrupt>
	}
	else
	{
		return 0;
	}
}
   6:	00 00       	nop
   8:	a9 c0       	rjmp	.+338    	; 0x15c <__bad_interrupt>
   a:	00 00       	nop
   c:	a7 c0       	rjmp	.+334    	; 0x15c <__bad_interrupt>
   e:	00 00       	nop
  10:	a5 c0       	rjmp	.+330    	; 0x15c <__bad_interrupt>
  12:	00 00       	nop
  14:	a3 c0       	rjmp	.+326    	; 0x15c <__bad_interrupt>
  16:	00 00       	nop
  18:	a1 c0       	rjmp	.+322    	; 0x15c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	9f c0       	rjmp	.+318    	; 0x15c <__bad_interrupt>
  1e:	00 00       	nop
  20:	9d c0       	rjmp	.+314    	; 0x15c <__bad_interrupt>
  22:	00 00       	nop
  24:	9b c0       	rjmp	.+310    	; 0x15c <__bad_interrupt>
  26:	00 00       	nop
  28:	06 c2       	rjmp	.+1036   	; 0x436 <__vector_10>
  2a:	00 00       	nop
  2c:	97 c0       	rjmp	.+302    	; 0x15c <__bad_interrupt>
  2e:	00 00       	nop
  30:	95 c0       	rjmp	.+298    	; 0x15c <__bad_interrupt>
  32:	00 00       	nop
  34:	93 c0       	rjmp	.+294    	; 0x15c <__bad_interrupt>
  36:	00 00       	nop
  38:	91 c0       	rjmp	.+290    	; 0x15c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	8f c0       	rjmp	.+286    	; 0x15c <__bad_interrupt>
  3e:	00 00       	nop
  40:	8d c0       	rjmp	.+282    	; 0x15c <__bad_interrupt>
  42:	00 00       	nop
  44:	8b c0       	rjmp	.+278    	; 0x15c <__bad_interrupt>
  46:	00 00       	nop
  48:	89 c0       	rjmp	.+274    	; 0x15c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	87 c0       	rjmp	.+270    	; 0x15c <__bad_interrupt>
  4e:	00 00       	nop
  50:	85 c0       	rjmp	.+266    	; 0x15c <__bad_interrupt>
  52:	00 00       	nop
  54:	84 c0       	rjmp	.+264    	; 0x15e <__vector_21>
  56:	00 00       	nop
  58:	81 c0       	rjmp	.+258    	; 0x15c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	7f c0       	rjmp	.+254    	; 0x15c <__bad_interrupt>
  5e:	00 00       	nop
  60:	7d c0       	rjmp	.+250    	; 0x15c <__bad_interrupt>
  62:	00 00       	nop
  64:	7b c0       	rjmp	.+246    	; 0x15c <__bad_interrupt>
  66:	00 00       	nop
  68:	79 c0       	rjmp	.+242    	; 0x15c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	77 c0       	rjmp	.+238    	; 0x15c <__bad_interrupt>
  6e:	00 00       	nop
  70:	75 c0       	rjmp	.+234    	; 0x15c <__bad_interrupt>
  72:	00 00       	nop
  74:	73 c0       	rjmp	.+230    	; 0x15c <__bad_interrupt>
  76:	00 00       	nop
  78:	71 c0       	rjmp	.+226    	; 0x15c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	6f c0       	rjmp	.+222    	; 0x15c <__bad_interrupt>
  7e:	00 00       	nop
  80:	6d c0       	rjmp	.+218    	; 0x15c <__bad_interrupt>
  82:	00 00       	nop
  84:	6b c0       	rjmp	.+214    	; 0x15c <__bad_interrupt>
  86:	00 00       	nop
  88:	69 c0       	rjmp	.+210    	; 0x15c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	67 c0       	rjmp	.+206    	; 0x15c <__bad_interrupt>
  8e:	00 00       	nop
  90:	65 c0       	rjmp	.+202    	; 0x15c <__bad_interrupt>
  92:	00 00       	nop
  94:	63 c0       	rjmp	.+198    	; 0x15c <__bad_interrupt>
  96:	00 00       	nop

00000098 <DeviceDescriptor>:
  98:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
  a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
  aa:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
  ba:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
  ca:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
  da:	07 05 04 02 10 00 01 07 05 83 02 10 00 01           ..............

000000e8 <LanguageString>:
  e8:	04 03 09 04                                         ....

000000ec <ManufacturerString>:
  ec:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  fc:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000106 <ProductString>:
 106:	1a 03 4c 00 45 00 44 00 20 00 4e 00 6f 00 74 00     ..L.E.D. .N.o.t.
 116:	69 00 66 00 69 00 65 00 72 00 00 00                 i.f.i.e.r...

00000122 <__ctors_end>:
 122:	11 24       	eor	r1, r1
 124:	1f be       	out	0x3f, r1	; 63
 126:	cf ef       	ldi	r28, 0xFF	; 255
 128:	d0 e2       	ldi	r29, 0x20	; 32
 12a:	de bf       	out	0x3e, r29	; 62
 12c:	cd bf       	out	0x3d, r28	; 61

0000012e <__do_copy_data>:
 12e:	11 e0       	ldi	r17, 0x01	; 1
 130:	a0 e0       	ldi	r26, 0x00	; 0
 132:	b1 e0       	ldi	r27, 0x01	; 1
 134:	ee e6       	ldi	r30, 0x6E	; 110
 136:	fe e0       	ldi	r31, 0x0E	; 14
 138:	00 e0       	ldi	r16, 0x00	; 0
 13a:	0b bf       	out	0x3b, r16	; 59
 13c:	02 c0       	rjmp	.+4      	; 0x142 <__do_copy_data+0x14>
 13e:	07 90       	elpm	r0, Z+
 140:	0d 92       	st	X+, r0
 142:	a6 31       	cpi	r26, 0x16	; 22
 144:	b1 07       	cpc	r27, r17
 146:	d9 f7       	brne	.-10     	; 0x13e <__do_copy_data+0x10>

00000148 <__do_clear_bss>:
 148:	11 e0       	ldi	r17, 0x01	; 1
 14a:	a6 e1       	ldi	r26, 0x16	; 22
 14c:	b1 e0       	ldi	r27, 0x01	; 1
 14e:	01 c0       	rjmp	.+2      	; 0x152 <.do_clear_bss_start>

00000150 <.do_clear_bss_loop>:
 150:	1d 92       	st	X+, r1

00000152 <.do_clear_bss_start>:
 152:	a4 33       	cpi	r26, 0x34	; 52
 154:	b1 07       	cpc	r27, r17
 156:	e1 f7       	brne	.-8      	; 0x150 <.do_clear_bss_loop>
 158:	5f d0       	rcall	.+190    	; 0x218 <main>
 15a:	87 c6       	rjmp	.+3342   	; 0xe6a <_exit>

0000015c <__bad_interrupt>:
 15c:	51 cf       	rjmp	.-350    	; 0x0 <__vectors>

0000015e <__vector_21>:
static FILE USBSerialStream;


/** Interrupt handler for managing the software PWM channels for the LEDs */
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	2f 93       	push	r18
 16a:	8f 93       	push	r24
 16c:	9f 93       	push	r25
	uint8_t LEDMask = LEDS_ALL_LEDS;

	if (++SoftPWM_Count == 0b00011111)
 16e:	80 91 16 01 	lds	r24, 0x0116
 172:	8f 5f       	subi	r24, 0xFF	; 255
 174:	80 93 16 01 	sts	0x0116, r24
 178:	80 91 16 01 	lds	r24, 0x0116
 17c:	8f 31       	cpi	r24, 0x1F	; 31
 17e:	11 f4       	brne	.+4      	; 0x184 <__vector_21+0x26>
	  SoftPWM_Count = 0;
 180:	10 92 16 01 	sts	0x0116, r1

	if (SoftPWM_Count >= SoftPWM_Channel1_Duty)
 184:	90 91 16 01 	lds	r25, 0x0116
 188:	80 91 17 01 	lds	r24, 0x0117
 18c:	98 17       	cp	r25, r24
 18e:	10 f0       	brcs	.+4      	; 0x194 <__vector_21+0x36>
 190:	28 e1       	ldi	r18, 0x18	; 24
 192:	01 c0       	rjmp	.+2      	; 0x196 <__vector_21+0x38>
 194:	2c e1       	ldi	r18, 0x1C	; 28
	  LEDMask &= ~LEDS_LED1;

	if (SoftPWM_Count >= SoftPWM_Channel2_Duty)
 196:	90 91 16 01 	lds	r25, 0x0116
 19a:	80 91 18 01 	lds	r24, 0x0118
 19e:	98 17       	cp	r25, r24
 1a0:	08 f0       	brcs	.+2      	; 0x1a4 <__vector_21+0x46>
	  LEDMask &= ~LEDS_LED2;
 1a2:	27 7f       	andi	r18, 0xF7	; 247

	if (SoftPWM_Count >= SoftPWM_Channel3_Duty)
 1a4:	90 91 16 01 	lds	r25, 0x0116
 1a8:	80 91 19 01 	lds	r24, 0x0119
 1ac:	98 17       	cp	r25, r24
 1ae:	08 f0       	brcs	.+2      	; 0x1b2 <__vector_21+0x54>
	  LEDMask &= ~LEDS_LED3;
 1b0:	2f 7e       	andi	r18, 0xEF	; 239
				PORTC &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTC = (PORTC & ~LEDS_ALL_LEDS) | LEDMask;
 1b2:	88 b1       	in	r24, 0x08	; 8
 1b4:	83 7e       	andi	r24, 0xE3	; 227
 1b6:	28 2b       	or	r18, r24
 1b8:	28 b9       	out	0x08, r18	; 8

	LEDs_SetAllLEDs(LEDMask);
}
 1ba:	9f 91       	pop	r25
 1bc:	8f 91       	pop	r24
 1be:	2f 91       	pop	r18
 1c0:	0f 90       	pop	r0
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	0f 90       	pop	r0
 1c6:	1f 90       	pop	r1
 1c8:	18 95       	reti

000001ca <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	91 e0       	ldi	r25, 0x01	; 1
}
 1ce:	9e c5       	rjmp	.+2876   	; 0xd0c <CDC_Device_ProcessControlRequest>

000001d0 <EVENT_USB_Device_ConfigurationChanged>:
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	91 e0       	ldi	r25, 0x01	; 1
}
 1d4:	4b c5       	rjmp	.+2710   	; 0xc6c <CDC_Device_ConfigureEndpoints>

000001d6 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 1d6:	84 b7       	in	r24, 0x34	; 52
 1d8:	87 7f       	andi	r24, 0xF7	; 247
 1da:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 1dc:	88 e1       	ldi	r24, 0x18	; 24
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	f8 94       	cli
 1e2:	80 93 60 00 	sts	0x0060, r24
 1e6:	10 92 60 00 	sts	0x0060, r1
 1ea:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	80 e8       	ldi	r24, 0x80	; 128
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	f8 94       	cli
 1f4:	80 93 61 00 	sts	0x0061, r24
 1f8:	90 93 61 00 	sts	0x0061, r25
 1fc:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRC |= LEDS_ALL_LEDS;
 1fe:	87 b1       	in	r24, 0x07	; 7
 200:	8c 61       	ori	r24, 0x1C	; 28
 202:	87 b9       	out	0x07, r24	; 7
	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
 204:	02 d1       	rcall	.+516    	; 0x40a <USB_Init>

	/* Timer Initialization */
	OCR0A  = 100;
 206:	84 e6       	ldi	r24, 0x64	; 100
 208:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1 << WGM01);
 20a:	92 e0       	ldi	r25, 0x02	; 2
 20c:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS00);
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1 << OCIE0A);
 212:	90 93 6e 00 	sts	0x006E, r25
}
 216:	08 95       	ret

00000218 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
 218:	de df       	rcall	.-68     	; 0x1d6 <SetupHardware>

	/* Create a regular blocking character stream for the interface so that it can be used with the stdio.h functions */
	CDC_Device_CreateBlockingStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	6a e1       	ldi	r22, 0x1A	; 26
 220:	71 e0       	ldi	r23, 0x01	; 1
 222:	89 d4       	rcall	.+2322   	; 0xb36 <CDC_Device_CreateBlockingStream>

	sei();
 224:	78 94       	sei

	for (;;)
	{
		/* Read in next LED colour command from the host */
		uint8_t ColourUpdate = fgetc(&USBSerialStream);
 226:	8a e1       	ldi	r24, 0x1A	; 26
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	dd d5       	rcall	.+3002   	; 0xde6 <fgetc>

		/* Top 3 bits select the LED, bottom 5 control the brightness */
		uint8_t Channel = (ColourUpdate & 0b11100000);
 22c:	28 2f       	mov	r18, r24
 22e:	20 7e       	andi	r18, 0xE0	; 224
		uint8_t Duty    = (ColourUpdate & 0b00011111);
 230:	8f 71       	andi	r24, 0x1F	; 31

		if (Channel & (1 << 5))
 232:	92 2f       	mov	r25, r18
 234:	25 ff       	sbrs	r18, 5
 236:	02 c0       	rjmp	.+4      	; 0x23c <main+0x24>
		  SoftPWM_Channel1_Duty = Duty;
 238:	80 93 17 01 	sts	0x0117, r24

		if (Channel & (1 << 6))
 23c:	96 ff       	sbrs	r25, 6
 23e:	02 c0       	rjmp	.+4      	; 0x244 <main+0x2c>
		  SoftPWM_Channel2_Duty = Duty;
 240:	80 93 18 01 	sts	0x0118, r24

		if (Channel & (1 << 7))
 244:	27 ff       	sbrs	r18, 7
 246:	02 c0       	rjmp	.+4      	; 0x24c <main+0x34>
		  SoftPWM_Channel3_Duty = Duty;
 248:	80 93 19 01 	sts	0x0119, r24

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	b3 d4       	rcall	.+2406   	; 0xbb8 <CDC_Device_USBTask>
		USB_USBTask();
 252:	2f d4       	rcall	.+2142   	; 0xab2 <USB_USBTask>
 254:	e8 cf       	rjmp	.-48     	; 0x226 <main+0xe>

00000256 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
 256:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 258:	92 30       	cpi	r25, 0x02	; 2
 25a:	49 f0       	breq	.+18     	; 0x26e <CALLBACK_USB_GetDescriptor+0x18>
 25c:	93 30       	cpi	r25, 0x03	; 3
 25e:	61 f0       	breq	.+24     	; 0x278 <CALLBACK_USB_GetDescriptor+0x22>
 260:	91 30       	cpi	r25, 0x01	; 1
 262:	f9 f4       	brne	.+62     	; 0x2a2 <CALLBACK_USB_GetDescriptor+0x4c>
 264:	e8 e9       	ldi	r30, 0x98	; 152
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	22 e1       	ldi	r18, 0x12	; 18
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	1e c0       	rjmp	.+60     	; 0x2aa <CALLBACK_USB_GetDescriptor+0x54>
 26e:	ea ea       	ldi	r30, 0xAA	; 170
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	2e e3       	ldi	r18, 0x3E	; 62
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	19 c0       	rjmp	.+50     	; 0x2aa <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 278:	81 30       	cpi	r24, 0x01	; 1
 27a:	49 f0       	breq	.+18     	; 0x28e <CALLBACK_USB_GetDescriptor+0x38>
 27c:	81 30       	cpi	r24, 0x01	; 1
 27e:	18 f0       	brcs	.+6      	; 0x286 <CALLBACK_USB_GetDescriptor+0x30>
 280:	82 30       	cpi	r24, 0x02	; 2
 282:	79 f4       	brne	.+30     	; 0x2a2 <CALLBACK_USB_GetDescriptor+0x4c>
 284:	08 c0       	rjmp	.+16     	; 0x296 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 286:	e8 ee       	ldi	r30, 0xE8	; 232
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	84 91       	lpm	r24, Z+
 28c:	07 c0       	rjmp	.+14     	; 0x29c <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 28e:	ec ee       	ldi	r30, 0xEC	; 236
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	84 91       	lpm	r24, Z+
 294:	03 c0       	rjmp	.+6      	; 0x29c <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 296:	e6 e0       	ldi	r30, 0x06	; 6
 298:	f1 e0       	ldi	r31, 0x01	; 1
 29a:	84 91       	lpm	r24, Z+
 29c:	28 2f       	mov	r18, r24
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	04 c0       	rjmp	.+8      	; 0x2aa <CALLBACK_USB_GetDescriptor+0x54>
 2a2:	e0 e0       	ldi	r30, 0x00	; 0
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	20 e0       	ldi	r18, 0x00	; 0
 2a8:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 2aa:	ed 93       	st	X+, r30
 2ac:	fc 93       	st	X, r31
	return Size;
}
 2ae:	c9 01       	movw	r24, r18
 2b0:	08 95       	ret

000002b2 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 2b2:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 2b6:	80 91 eb 00 	lds	r24, 0x00EB
 2ba:	81 60       	ori	r24, 0x01	; 1
 2bc:	80 93 eb 00 	sts	0x00EB, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
 2c0:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
 2c4:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
 2c8:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 2cc:	80 91 ee 00 	lds	r24, 0x00EE
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 2d0:	88 1f       	adc	r24, r24
 2d2:	88 27       	eor	r24, r24
 2d4:	88 1f       	adc	r24, r24
 2d6:	08 95       	ret

000002d8 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 2d8:	80 91 2c 01 	lds	r24, 0x012C
 2dc:	88 23       	and	r24, r24
 2de:	8c f4       	brge	.+34     	; 0x302 <Endpoint_ClearStatusStage+0x2a>
 2e0:	03 c0       	rjmp	.+6      	; 0x2e8 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 2e2:	8e b3       	in	r24, 0x1e	; 30
 2e4:	88 23       	and	r24, r24
 2e6:	b1 f0       	breq	.+44     	; 0x314 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 2e8:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 2ec:	82 ff       	sbrs	r24, 2
 2ee:	f9 cf       	rjmp	.-14     	; 0x2e2 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 2f0:	80 91 e8 00 	lds	r24, 0x00E8
 2f4:	8b 77       	andi	r24, 0x7B	; 123
 2f6:	80 93 e8 00 	sts	0x00E8, r24
 2fa:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 2fc:	8e b3       	in	r24, 0x1e	; 30
 2fe:	88 23       	and	r24, r24
 300:	49 f0       	breq	.+18     	; 0x314 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 302:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 306:	80 ff       	sbrs	r24, 0
 308:	f9 cf       	rjmp	.-14     	; 0x2fc <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 30a:	80 91 e8 00 	lds	r24, 0x00E8
 30e:	8e 77       	andi	r24, 0x7E	; 126
 310:	80 93 e8 00 	sts	0x00E8, r24
 314:	08 95       	ret

00000316 <Endpoint_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 316:	40 91 e4 00 	lds	r20, 0x00E4
 31a:	50 91 e5 00 	lds	r21, 0x00E5
 31e:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
 320:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 324:	80 78       	andi	r24, 0x80	; 128
 326:	80 38       	cpi	r24, 0x80	; 128
 328:	29 f4       	brne	.+10     	; 0x334 <Endpoint_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 32a:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
 32e:	80 ff       	sbrs	r24, 0
 330:	05 c0       	rjmp	.+10     	; 0x33c <Endpoint_WaitUntilReady+0x26>
 332:	21 c0       	rjmp	.+66     	; 0x376 <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 334:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 338:	82 fd       	sbrc	r24, 2
 33a:	1d c0       	rjmp	.+58     	; 0x376 <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 33c:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 33e:	88 23       	and	r24, r24
 340:	11 f4       	brne	.+4      	; 0x346 <Endpoint_WaitUntilReady+0x30>
 342:	82 e0       	ldi	r24, 0x02	; 2
 344:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 346:	85 30       	cpi	r24, 0x05	; 5
 348:	11 f4       	brne	.+4      	; 0x34e <Endpoint_WaitUntilReady+0x38>
 34a:	83 e0       	ldi	r24, 0x03	; 3
 34c:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 34e:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 352:	85 ff       	sbrs	r24, 5
 354:	02 c0       	rjmp	.+4      	; 0x35a <Endpoint_WaitUntilReady+0x44>
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	08 95       	ret
 35a:	80 91 e4 00 	lds	r24, 0x00E4
 35e:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 362:	84 17       	cp	r24, r20
 364:	95 07       	cpc	r25, r21
 366:	e1 f2       	breq	.-72     	; 0x320 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 368:	22 23       	and	r18, r18
 36a:	11 f4       	brne	.+4      	; 0x370 <Endpoint_WaitUntilReady+0x5a>
 36c:	84 e0       	ldi	r24, 0x04	; 4
 36e:	08 95       	ret
 370:	21 50       	subi	r18, 0x01	; 1
 372:	ac 01       	movw	r20, r24
 374:	d5 cf       	rjmp	.-86     	; 0x320 <Endpoint_WaitUntilReady+0xa>
 376:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 378:	08 95       	ret

0000037a <USB_ResetInterface>:

void USB_ResetInterface(void)
{
 37a:	ef 92       	push	r14
 37c:	ff 92       	push	r15
 37e:	0f 93       	push	r16
 380:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 382:	4c d0       	rcall	.+152    	; 0x41c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 384:	53 d0       	rcall	.+166    	; 0x42c <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 386:	08 ed       	ldi	r16, 0xD8	; 216
 388:	10 e0       	ldi	r17, 0x00	; 0
 38a:	f8 01       	movw	r30, r16
 38c:	80 81       	ld	r24, Z
 38e:	8f 77       	andi	r24, 0x7F	; 127
 390:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
 392:	80 81       	ld	r24, Z
 394:	80 68       	ori	r24, 0x80	; 128
 396:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 398:	80 81       	ld	r24, Z
 39a:	8f 7d       	andi	r24, 0xDF	; 223
 39c:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 39e:	e7 ed       	ldi	r30, 0xD7	; 215
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	80 68       	ori	r24, 0x80	; 128
 3a6:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 3a8:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 3aa:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
 3ac:	10 92 28 01 	sts	0x0128, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 3b0:	10 92 2a 01 	sts	0x012A, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 3b4:	10 92 29 01 	sts	0x0129, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 3b8:	80 ee       	ldi	r24, 0xE0	; 224
 3ba:	e8 2e       	mov	r14, r24
 3bc:	f1 2c       	mov	r15, r1
 3be:	f7 01       	movw	r30, r14
 3c0:	80 81       	ld	r24, Z
 3c2:	8b 7f       	andi	r24, 0xFB	; 251
 3c4:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 3c6:	f8 01       	movw	r30, r16
 3c8:	80 81       	ld	r24, Z
 3ca:	81 60       	ori	r24, 0x01	; 1
 3cc:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	42 e0       	ldi	r20, 0x02	; 2
 3d4:	6e df       	rcall	.-292    	; 0x2b2 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 3d6:	e1 ee       	ldi	r30, 0xE1	; 225
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	8e 7f       	andi	r24, 0xFE	; 254
 3de:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 3e0:	e2 ee       	ldi	r30, 0xE2	; 226
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 81       	ld	r24, Z
 3e6:	81 60       	ori	r24, 0x01	; 1
 3e8:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 3ea:	80 81       	ld	r24, Z
 3ec:	88 60       	ori	r24, 0x08	; 8
 3ee:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 3f0:	f7 01       	movw	r30, r14
 3f2:	80 81       	ld	r24, Z
 3f4:	8e 7f       	andi	r24, 0xFE	; 254
 3f6:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 3f8:	f8 01       	movw	r30, r16
 3fa:	80 81       	ld	r24, Z
 3fc:	80 61       	ori	r24, 0x10	; 16
 3fe:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 400:	1f 91       	pop	r17
 402:	0f 91       	pop	r16
 404:	ff 90       	pop	r15
 406:	ef 90       	pop	r14
 408:	08 95       	ret

0000040a <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 40a:	e7 ed       	ldi	r30, 0xD7	; 215
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	80 81       	ld	r24, Z
 410:	81 60       	ori	r24, 0x01	; 1
 412:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	80 93 2b 01 	sts	0x012B, r24

	USB_ResetInterface();
}
 41a:	af cf       	rjmp	.-162    	; 0x37a <USB_ResetInterface>

0000041c <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 41c:	e8 ed       	ldi	r30, 0xD8	; 216
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	80 81       	ld	r24, Z
 422:	8c 7f       	andi	r24, 0xFC	; 252
 424:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 426:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 42a:	08 95       	ret

0000042c <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 42c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 430:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 434:	08 95       	ret

00000436 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 436:	1f 92       	push	r1
 438:	0f 92       	push	r0
 43a:	0f b6       	in	r0, 0x3f	; 63
 43c:	0f 92       	push	r0
 43e:	0b b6       	in	r0, 0x3b	; 59
 440:	0f 92       	push	r0
 442:	11 24       	eor	r1, r1
 444:	2f 93       	push	r18
 446:	3f 93       	push	r19
 448:	4f 93       	push	r20
 44a:	5f 93       	push	r21
 44c:	6f 93       	push	r22
 44e:	7f 93       	push	r23
 450:	8f 93       	push	r24
 452:	9f 93       	push	r25
 454:	af 93       	push	r26
 456:	bf 93       	push	r27
 458:	ef 93       	push	r30
 45a:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 45c:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 460:	82 ff       	sbrs	r24, 2
 462:	0a c0       	rjmp	.+20     	; 0x478 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 464:	80 91 e2 00 	lds	r24, 0x00E2
 468:	82 ff       	sbrs	r24, 2
 46a:	06 c0       	rjmp	.+12     	; 0x478 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 46c:	80 91 e1 00 	lds	r24, 0x00E1
 470:	8b 7f       	andi	r24, 0xFB	; 251
 472:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 476:	1c d3       	rcall	.+1592   	; 0xab0 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 478:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 47c:	80 ff       	sbrs	r24, 0
 47e:	1b c0       	rjmp	.+54     	; 0x4b6 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 480:	80 91 d8 00 	lds	r24, 0x00D8
 484:	80 ff       	sbrs	r24, 0
 486:	17 c0       	rjmp	.+46     	; 0x4b6 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 488:	80 91 da 00 	lds	r24, 0x00DA
 48c:	8e 7f       	andi	r24, 0xFE	; 254
 48e:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 492:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 496:	80 ff       	sbrs	r24, 0
 498:	0b c0       	rjmp	.+22     	; 0x4b0 <__vector_10+0x7a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 49a:	8c e0       	ldi	r24, 0x0C	; 12
 49c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 49e:	8e e0       	ldi	r24, 0x0E	; 14
 4a0:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 4a2:	09 b4       	in	r0, 0x29	; 41
 4a4:	00 fe       	sbrs	r0, 0
 4a6:	fd cf       	rjmp	.-6      	; 0x4a2 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
 4ac:	01 d3       	rcall	.+1538   	; 0xab0 <USB_Event_Stub>
 4ae:	03 c0       	rjmp	.+6      	; 0x4b6 <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 4b0:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 4b2:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
 4b4:	fd d2       	rcall	.+1530   	; 0xab0 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 4b6:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 4ba:	80 ff       	sbrs	r24, 0
 4bc:	17 c0       	rjmp	.+46     	; 0x4ec <__vector_10+0xb6>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 4be:	80 91 e2 00 	lds	r24, 0x00E2
 4c2:	80 ff       	sbrs	r24, 0
 4c4:	13 c0       	rjmp	.+38     	; 0x4ec <__vector_10+0xb6>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 4c6:	80 91 e2 00 	lds	r24, 0x00E2
 4ca:	8e 7f       	andi	r24, 0xFE	; 254
 4cc:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 4d0:	80 91 e2 00 	lds	r24, 0x00E2
 4d4:	80 61       	ori	r24, 0x10	; 16
 4d6:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 4da:	80 91 d8 00 	lds	r24, 0x00D8
 4de:	80 62       	ori	r24, 0x20	; 32
 4e0:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 4e4:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 4e6:	85 e0       	ldi	r24, 0x05	; 5
 4e8:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
 4ea:	e2 d2       	rcall	.+1476   	; 0xab0 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 4ec:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 4f0:	84 ff       	sbrs	r24, 4
 4f2:	2c c0       	rjmp	.+88     	; 0x54c <__vector_10+0x116>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 4f4:	80 91 e2 00 	lds	r24, 0x00E2
 4f8:	84 ff       	sbrs	r24, 4
 4fa:	28 c0       	rjmp	.+80     	; 0x54c <__vector_10+0x116>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 4fc:	8c e0       	ldi	r24, 0x0C	; 12
 4fe:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 500:	8e e0       	ldi	r24, 0x0E	; 14
 502:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 504:	09 b4       	in	r0, 0x29	; 41
 506:	00 fe       	sbrs	r0, 0
 508:	fd cf       	rjmp	.-6      	; 0x504 <__vector_10+0xce>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 50a:	80 91 d8 00 	lds	r24, 0x00D8
 50e:	8f 7d       	andi	r24, 0xDF	; 223
 510:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 514:	80 91 e1 00 	lds	r24, 0x00E1
 518:	8f 7e       	andi	r24, 0xEF	; 239
 51a:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 51e:	80 91 e2 00 	lds	r24, 0x00E2
 522:	8f 7e       	andi	r24, 0xEF	; 239
 524:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 528:	80 91 e2 00 	lds	r24, 0x00E2
 52c:	81 60       	ori	r24, 0x01	; 1
 52e:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 532:	80 91 28 01 	lds	r24, 0x0128
 536:	88 23       	and	r24, r24
 538:	31 f4       	brne	.+12     	; 0x546 <__vector_10+0x110>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 53a:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 53e:	87 fd       	sbrc	r24, 7
 540:	02 c0       	rjmp	.+4      	; 0x546 <__vector_10+0x110>
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	01 c0       	rjmp	.+2      	; 0x548 <__vector_10+0x112>
 546:	84 e0       	ldi	r24, 0x04	; 4
 548:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 54a:	b2 d2       	rcall	.+1380   	; 0xab0 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 54c:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 550:	83 ff       	sbrs	r24, 3
 552:	21 c0       	rjmp	.+66     	; 0x596 <__vector_10+0x160>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 554:	80 91 e2 00 	lds	r24, 0x00E2
 558:	83 ff       	sbrs	r24, 3
 55a:	1d c0       	rjmp	.+58     	; 0x596 <__vector_10+0x160>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 55c:	80 91 e1 00 	lds	r24, 0x00E1
 560:	87 7f       	andi	r24, 0xF7	; 247
 562:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 566:	82 e0       	ldi	r24, 0x02	; 2
 568:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
 56a:	10 92 28 01 	sts	0x0128, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 56e:	80 91 e1 00 	lds	r24, 0x00E1
 572:	8e 7f       	andi	r24, 0xFE	; 254
 574:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 578:	80 91 e2 00 	lds	r24, 0x00E2
 57c:	8e 7f       	andi	r24, 0xFE	; 254
 57e:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 582:	80 91 e2 00 	lds	r24, 0x00E2
 586:	80 61       	ori	r24, 0x10	; 16
 588:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 58c:	80 e0       	ldi	r24, 0x00	; 0
 58e:	60 e0       	ldi	r22, 0x00	; 0
 590:	42 e0       	ldi	r20, 0x02	; 2
 592:	8f de       	rcall	.-738    	; 0x2b2 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 594:	8d d2       	rcall	.+1306   	; 0xab0 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 596:	ff 91       	pop	r31
 598:	ef 91       	pop	r30
 59a:	bf 91       	pop	r27
 59c:	af 91       	pop	r26
 59e:	9f 91       	pop	r25
 5a0:	8f 91       	pop	r24
 5a2:	7f 91       	pop	r23
 5a4:	6f 91       	pop	r22
 5a6:	5f 91       	pop	r21
 5a8:	4f 91       	pop	r20
 5aa:	3f 91       	pop	r19
 5ac:	2f 91       	pop	r18
 5ae:	0f 90       	pop	r0
 5b0:	0b be       	out	0x3b, r0	; 59
 5b2:	0f 90       	pop	r0
 5b4:	0f be       	out	0x3f, r0	; 63
 5b6:	0f 90       	pop	r0
 5b8:	1f 90       	pop	r1
 5ba:	18 95       	reti

000005bc <Endpoint_Write_Control_Stream_LE>:
 5bc:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 5be:	40 91 32 01 	lds	r20, 0x0132
 5c2:	50 91 33 01 	lds	r21, 0x0133
 5c6:	46 17       	cp	r20, r22
 5c8:	57 07       	cpc	r21, r23
 5ca:	18 f4       	brcc	.+6      	; 0x5d2 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 5cc:	f9 01       	movw	r30, r18
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	3c c0       	rjmp	.+120    	; 0x64a <Endpoint_Write_Control_Stream_LE+0x8e>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 5d2:	61 15       	cp	r22, r1
 5d4:	71 05       	cpc	r23, r1
 5d6:	11 f0       	breq	.+4      	; 0x5dc <Endpoint_Write_Control_Stream_LE+0x20>
 5d8:	ab 01       	movw	r20, r22
 5da:	f8 cf       	rjmp	.-16     	; 0x5cc <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 5dc:	80 91 e8 00 	lds	r24, 0x00E8
 5e0:	8e 77       	andi	r24, 0x7E	; 126
 5e2:	80 93 e8 00 	sts	0x00E8, r24
 5e6:	40 e0       	ldi	r20, 0x00	; 0
 5e8:	50 e0       	ldi	r21, 0x00	; 0
 5ea:	f0 cf       	rjmp	.-32     	; 0x5cc <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 5ec:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 5ee:	88 23       	and	r24, r24
 5f0:	e9 f1       	breq	.+122    	; 0x66c <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 5f2:	85 30       	cpi	r24, 0x05	; 5
 5f4:	e9 f1       	breq	.+122    	; 0x670 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 5f6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 5fa:	83 ff       	sbrs	r24, 3
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <Endpoint_Write_Control_Stream_LE+0x46>
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 602:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 606:	82 fd       	sbrc	r24, 2
 608:	2b c0       	rjmp	.+86     	; 0x660 <Endpoint_Write_Control_Stream_LE+0xa4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 60a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 60e:	80 ff       	sbrs	r24, 0
 610:	1c c0       	rjmp	.+56     	; 0x64a <Endpoint_Write_Control_Stream_LE+0x8e>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 612:	20 91 f2 00 	lds	r18, 0x00F2
 616:	30 91 f3 00 	lds	r19, 0x00F3
 61a:	07 c0       	rjmp	.+14     	; 0x62a <Endpoint_Write_Control_Stream_LE+0x6e>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 61c:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 61e:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 622:	41 50       	subi	r20, 0x01	; 1
 624:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 626:	2f 5f       	subi	r18, 0xFF	; 255
 628:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 62a:	41 15       	cp	r20, r1
 62c:	51 05       	cpc	r21, r1
 62e:	19 f0       	breq	.+6      	; 0x636 <Endpoint_Write_Control_Stream_LE+0x7a>
 630:	28 30       	cpi	r18, 0x08	; 8
 632:	31 05       	cpc	r19, r1
 634:	98 f3       	brcs	.-26     	; 0x61c <Endpoint_Write_Control_Stream_LE+0x60>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	28 30       	cpi	r18, 0x08	; 8
 63a:	31 05       	cpc	r19, r1
 63c:	09 f4       	brne	.+2      	; 0x640 <Endpoint_Write_Control_Stream_LE+0x84>
 63e:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 640:	80 91 e8 00 	lds	r24, 0x00E8
 644:	8e 77       	andi	r24, 0x7E	; 126
 646:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 64a:	41 15       	cp	r20, r1
 64c:	51 05       	cpc	r21, r1
 64e:	71 f6       	brne	.-100    	; 0x5ec <Endpoint_Write_Control_Stream_LE+0x30>
 650:	99 23       	and	r25, r25
 652:	61 f6       	brne	.-104    	; 0x5ec <Endpoint_Write_Control_Stream_LE+0x30>
 654:	05 c0       	rjmp	.+10     	; 0x660 <Endpoint_Write_Control_Stream_LE+0xa4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 656:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 658:	88 23       	and	r24, r24
 65a:	41 f0       	breq	.+16     	; 0x66c <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 65c:	85 30       	cpi	r24, 0x05	; 5
 65e:	41 f0       	breq	.+16     	; 0x670 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 660:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 664:	82 ff       	sbrs	r24, 2
 666:	f7 cf       	rjmp	.-18     	; 0x656 <Endpoint_Write_Control_Stream_LE+0x9a>
 668:	80 e0       	ldi	r24, 0x00	; 0
 66a:	08 95       	ret
 66c:	82 e0       	ldi	r24, 0x02	; 2
 66e:	08 95       	ret
 670:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 672:	08 95       	ret

00000674 <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
 674:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
 676:	61 15       	cp	r22, r1
 678:	71 05       	cpc	r23, r1
 67a:	29 f4       	brne	.+10     	; 0x686 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 67c:	80 91 e8 00 	lds	r24, 0x00E8
 680:	8b 77       	andi	r24, 0x7B	; 123
 682:	80 93 e8 00 	sts	0x00E8, r24
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 686:	f9 01       	movw	r30, r18
 688:	21 c0       	rjmp	.+66     	; 0x6cc <Endpoint_Read_Control_Stream_LE+0x58>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 68a:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 68c:	88 23       	and	r24, r24
 68e:	69 f1       	breq	.+90     	; 0x6ea <Endpoint_Read_Control_Stream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 690:	85 30       	cpi	r24, 0x05	; 5
 692:	69 f1       	breq	.+90     	; 0x6ee <Endpoint_Read_Control_Stream_LE+0x7a>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 694:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 698:	83 ff       	sbrs	r24, 3
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <Endpoint_Read_Control_Stream_LE+0x2c>
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6a0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
 6a4:	82 ff       	sbrs	r24, 2
 6a6:	f1 cf       	rjmp	.-30     	; 0x68a <Endpoint_Read_Control_Stream_LE+0x16>
 6a8:	06 c0       	rjmp	.+12     	; 0x6b6 <Endpoint_Read_Control_Stream_LE+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 6aa:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 6ae:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 6b0:	61 50       	subi	r22, 0x01	; 1
 6b2:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
 6b4:	31 f0       	breq	.+12     	; 0x6c2 <Endpoint_Read_Control_Stream_LE+0x4e>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 6b6:	80 91 f2 00 	lds	r24, 0x00F2
 6ba:	90 91 f3 00 	lds	r25, 0x00F3
 6be:	89 2b       	or	r24, r25
 6c0:	a1 f7       	brne	.-24     	; 0x6aa <Endpoint_Read_Control_Stream_LE+0x36>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 6c2:	80 91 e8 00 	lds	r24, 0x00E8
 6c6:	8b 77       	andi	r24, 0x7B	; 123
 6c8:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
 6cc:	61 15       	cp	r22, r1
 6ce:	71 05       	cpc	r23, r1
 6d0:	e1 f6       	brne	.-72     	; 0x68a <Endpoint_Read_Control_Stream_LE+0x16>
 6d2:	05 c0       	rjmp	.+10     	; 0x6de <Endpoint_Read_Control_Stream_LE+0x6a>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 6d4:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 6d6:	88 23       	and	r24, r24
 6d8:	41 f0       	breq	.+16     	; 0x6ea <Endpoint_Read_Control_Stream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 6da:	85 30       	cpi	r24, 0x05	; 5
 6dc:	41 f0       	breq	.+16     	; 0x6ee <Endpoint_Read_Control_Stream_LE+0x7a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 6de:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
 6e2:	80 ff       	sbrs	r24, 0
 6e4:	f7 cf       	rjmp	.-18     	; 0x6d4 <Endpoint_Read_Control_Stream_LE+0x60>
 6e6:	80 e0       	ldi	r24, 0x00	; 0
 6e8:	08 95       	ret
 6ea:	82 e0       	ldi	r24, 0x02	; 2
 6ec:	08 95       	ret
 6ee:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 6f0:	08 95       	ret

000006f2 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
 6f2:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 6f4:	40 91 32 01 	lds	r20, 0x0132
 6f8:	50 91 33 01 	lds	r21, 0x0133
 6fc:	46 17       	cp	r20, r22
 6fe:	57 07       	cpc	r21, r23
 700:	18 f4       	brcc	.+6      	; 0x708 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 702:	f9 01       	movw	r30, r18
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	3f c0       	rjmp	.+126    	; 0x786 <Endpoint_Write_Control_PStream_LE+0x94>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 708:	61 15       	cp	r22, r1
 70a:	71 05       	cpc	r23, r1
 70c:	11 f0       	breq	.+4      	; 0x712 <Endpoint_Write_Control_PStream_LE+0x20>
 70e:	ab 01       	movw	r20, r22
 710:	f8 cf       	rjmp	.-16     	; 0x702 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 712:	80 91 e8 00 	lds	r24, 0x00E8
 716:	8e 77       	andi	r24, 0x7E	; 126
 718:	80 93 e8 00 	sts	0x00E8, r24
 71c:	40 e0       	ldi	r20, 0x00	; 0
 71e:	50 e0       	ldi	r21, 0x00	; 0
 720:	f0 cf       	rjmp	.-32     	; 0x702 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 722:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 724:	88 23       	and	r24, r24
 726:	09 f4       	brne	.+2      	; 0x72a <Endpoint_Write_Control_PStream_LE+0x38>
 728:	3f c0       	rjmp	.+126    	; 0x7a8 <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 72a:	85 30       	cpi	r24, 0x05	; 5
 72c:	09 f4       	brne	.+2      	; 0x730 <Endpoint_Write_Control_PStream_LE+0x3e>
 72e:	3e c0       	rjmp	.+124    	; 0x7ac <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 730:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 734:	83 ff       	sbrs	r24, 3
 736:	02 c0       	rjmp	.+4      	; 0x73c <Endpoint_Write_Control_PStream_LE+0x4a>
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 73c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 740:	82 fd       	sbrc	r24, 2
 742:	2c c0       	rjmp	.+88     	; 0x79c <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 744:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 748:	80 ff       	sbrs	r24, 0
 74a:	1d c0       	rjmp	.+58     	; 0x786 <Endpoint_Write_Control_PStream_LE+0x94>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 74c:	20 91 f2 00 	lds	r18, 0x00F2
 750:	30 91 f3 00 	lds	r19, 0x00F3
 754:	08 c0       	rjmp	.+16     	; 0x766 <Endpoint_Write_Control_PStream_LE+0x74>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 756:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 758:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 75c:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 75e:	41 50       	subi	r20, 0x01	; 1
 760:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 762:	2f 5f       	subi	r18, 0xFF	; 255
 764:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 766:	41 15       	cp	r20, r1
 768:	51 05       	cpc	r21, r1
 76a:	19 f0       	breq	.+6      	; 0x772 <Endpoint_Write_Control_PStream_LE+0x80>
 76c:	28 30       	cpi	r18, 0x08	; 8
 76e:	31 05       	cpc	r19, r1
 770:	90 f3       	brcs	.-28     	; 0x756 <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	28 30       	cpi	r18, 0x08	; 8
 776:	31 05       	cpc	r19, r1
 778:	09 f4       	brne	.+2      	; 0x77c <Endpoint_Write_Control_PStream_LE+0x8a>
 77a:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 77c:	80 91 e8 00 	lds	r24, 0x00E8
 780:	8e 77       	andi	r24, 0x7E	; 126
 782:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 786:	41 15       	cp	r20, r1
 788:	51 05       	cpc	r21, r1
 78a:	59 f6       	brne	.-106    	; 0x722 <Endpoint_Write_Control_PStream_LE+0x30>
 78c:	99 23       	and	r25, r25
 78e:	49 f6       	brne	.-110    	; 0x722 <Endpoint_Write_Control_PStream_LE+0x30>
 790:	05 c0       	rjmp	.+10     	; 0x79c <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 792:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 794:	88 23       	and	r24, r24
 796:	41 f0       	breq	.+16     	; 0x7a8 <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 798:	85 30       	cpi	r24, 0x05	; 5
 79a:	41 f0       	breq	.+16     	; 0x7ac <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 79c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 7a0:	82 ff       	sbrs	r24, 2
 7a2:	f7 cf       	rjmp	.-18     	; 0x792 <Endpoint_Write_Control_PStream_LE+0xa0>
 7a4:	80 e0       	ldi	r24, 0x00	; 0
 7a6:	08 95       	ret
 7a8:	82 e0       	ldi	r24, 0x02	; 2
 7aa:	08 95       	ret
 7ac:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 7ae:	08 95       	ret

000007b0 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 7b0:	0f 93       	push	r16
 7b2:	1f 93       	push	r17
 7b4:	df 93       	push	r29
 7b6:	cf 93       	push	r28
 7b8:	cd b7       	in	r28, 0x3d	; 61
 7ba:	de b7       	in	r29, 0x3e	; 62
 7bc:	ac 97       	sbiw	r28, 0x2c	; 44
 7be:	0f b6       	in	r0, 0x3f	; 63
 7c0:	f8 94       	cli
 7c2:	de bf       	out	0x3e, r29	; 62
 7c4:	0f be       	out	0x3f, r0	; 63
 7c6:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 7c8:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
 7cc:	80 93 2c 01 	sts	0x012C, r24
 7d0:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
 7d4:	80 93 2d 01 	sts	0x012D, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 7d8:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 7dc:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
 7e0:	ee e2       	ldi	r30, 0x2E	; 46
 7e2:	f1 e0       	ldi	r31, 0x01	; 1
 7e4:	80 93 2e 01 	sts	0x012E, r24
 7e8:	90 93 2f 01 	sts	0x012F, r25
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 7ec:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 7f0:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
 7f4:	80 93 30 01 	sts	0x0130, r24
 7f8:	93 83       	std	Z+3, r25	; 0x03
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 7fa:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 7fe:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
 802:	80 93 32 01 	sts	0x0132, r24
 806:	95 83       	std	Z+5, r25	; 0x05

	EVENT_USB_Device_ControlRequest();
 808:	e0 dc       	rcall	.-1600   	; 0x1ca <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 80a:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 80e:	83 ff       	sbrs	r24, 3
 810:	36 c1       	rjmp	.+620    	; 0xa7e <USB_Device_ProcessControlRequest+0x2ce>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 812:	80 91 2c 01 	lds	r24, 0x012C

		switch (USB_ControlRequest.bRequest)
 816:	30 91 2d 01 	lds	r19, 0x012D
 81a:	35 30       	cpi	r19, 0x05	; 5
 81c:	09 f4       	brne	.+2      	; 0x820 <USB_Device_ProcessControlRequest+0x70>
 81e:	87 c0       	rjmp	.+270    	; 0x92e <USB_Device_ProcessControlRequest+0x17e>
 820:	36 30       	cpi	r19, 0x06	; 6
 822:	40 f4       	brcc	.+16     	; 0x834 <USB_Device_ProcessControlRequest+0x84>
 824:	31 30       	cpi	r19, 0x01	; 1
 826:	c9 f1       	breq	.+114    	; 0x89a <USB_Device_ProcessControlRequest+0xea>
 828:	31 30       	cpi	r19, 0x01	; 1
 82a:	70 f0       	brcs	.+28     	; 0x848 <USB_Device_ProcessControlRequest+0x98>
 82c:	33 30       	cpi	r19, 0x03	; 3
 82e:	09 f0       	breq	.+2      	; 0x832 <USB_Device_ProcessControlRequest+0x82>
 830:	26 c1       	rjmp	.+588    	; 0xa7e <USB_Device_ProcessControlRequest+0x2ce>
 832:	33 c0       	rjmp	.+102    	; 0x89a <USB_Device_ProcessControlRequest+0xea>
 834:	38 30       	cpi	r19, 0x08	; 8
 836:	09 f4       	brne	.+2      	; 0x83a <USB_Device_ProcessControlRequest+0x8a>
 838:	f5 c0       	rjmp	.+490    	; 0xa24 <USB_Device_ProcessControlRequest+0x274>
 83a:	39 30       	cpi	r19, 0x09	; 9
 83c:	09 f4       	brne	.+2      	; 0x840 <USB_Device_ProcessControlRequest+0x90>
 83e:	04 c1       	rjmp	.+520    	; 0xa48 <USB_Device_ProcessControlRequest+0x298>
 840:	36 30       	cpi	r19, 0x06	; 6
 842:	09 f0       	breq	.+2      	; 0x846 <USB_Device_ProcessControlRequest+0x96>
 844:	1c c1       	rjmp	.+568    	; 0xa7e <USB_Device_ProcessControlRequest+0x2ce>
 846:	96 c0       	rjmp	.+300    	; 0x974 <USB_Device_ProcessControlRequest+0x1c4>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 848:	80 38       	cpi	r24, 0x80	; 128
 84a:	21 f0       	breq	.+8      	; 0x854 <USB_Device_ProcessControlRequest+0xa4>
 84c:	82 38       	cpi	r24, 0x82	; 130
 84e:	09 f0       	breq	.+2      	; 0x852 <USB_Device_ProcessControlRequest+0xa2>
 850:	16 c1       	rjmp	.+556    	; 0xa7e <USB_Device_ProcessControlRequest+0x2ce>
 852:	08 c0       	rjmp	.+16     	; 0x864 <USB_Device_ProcessControlRequest+0xb4>
 854:	90 91 29 01 	lds	r25, 0x0129
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 858:	80 91 2a 01 	lds	r24, 0x012A
 85c:	88 23       	and	r24, r24
 85e:	99 f0       	breq	.+38     	; 0x886 <USB_Device_ProcessControlRequest+0xd6>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 860:	92 60       	ori	r25, 0x02	; 2
 862:	11 c0       	rjmp	.+34     	; 0x886 <USB_Device_ProcessControlRequest+0xd6>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 864:	80 91 30 01 	lds	r24, 0x0130
 868:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 86a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 86e:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	25 e0       	ldi	r18, 0x05	; 5
 876:	96 95       	lsr	r25
 878:	87 95       	ror	r24
 87a:	2a 95       	dec	r18
 87c:	e1 f7       	brne	.-8      	; 0x876 <USB_Device_ProcessControlRequest+0xc6>
 87e:	98 2f       	mov	r25, r24
 880:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 882:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 886:	80 91 e8 00 	lds	r24, 0x00E8
 88a:	87 7f       	andi	r24, 0xF7	; 247
 88c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 890:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
 894:	10 92 f1 00 	sts	0x00F1, r1
 898:	d0 c0       	rjmp	.+416    	; 0xa3a <USB_Device_ProcessControlRequest+0x28a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 89a:	88 23       	and	r24, r24
 89c:	19 f0       	breq	.+6      	; 0x8a4 <USB_Device_ProcessControlRequest+0xf4>
 89e:	82 30       	cpi	r24, 0x02	; 2
 8a0:	09 f0       	breq	.+2      	; 0x8a4 <USB_Device_ProcessControlRequest+0xf4>
 8a2:	ed c0       	rjmp	.+474    	; 0xa7e <USB_Device_ProcessControlRequest+0x2ce>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	8f 71       	andi	r24, 0x1F	; 31
 8a8:	90 70       	andi	r25, 0x00	; 0
 8aa:	00 97       	sbiw	r24, 0x00	; 0
 8ac:	21 f0       	breq	.+8      	; 0x8b6 <USB_Device_ProcessControlRequest+0x106>
 8ae:	02 97       	sbiw	r24, 0x02	; 2
 8b0:	09 f0       	breq	.+2      	; 0x8b4 <USB_Device_ProcessControlRequest+0x104>
 8b2:	e5 c0       	rjmp	.+458    	; 0xa7e <USB_Device_ProcessControlRequest+0x2ce>
 8b4:	0c c0       	rjmp	.+24     	; 0x8ce <USB_Device_ProcessControlRequest+0x11e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 8b6:	80 91 2e 01 	lds	r24, 0x012E
 8ba:	81 30       	cpi	r24, 0x01	; 1
 8bc:	09 f0       	breq	.+2      	; 0x8c0 <USB_Device_ProcessControlRequest+0x110>
 8be:	df c0       	rjmp	.+446    	; 0xa7e <USB_Device_ProcessControlRequest+0x2ce>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 8c0:	10 92 2a 01 	sts	0x012A, r1
 8c4:	33 30       	cpi	r19, 0x03	; 3
 8c6:	69 f5       	brne	.+90     	; 0x922 <USB_Device_ProcessControlRequest+0x172>
 8c8:	80 93 2a 01 	sts	0x012A, r24
 8cc:	2a c0       	rjmp	.+84     	; 0x922 <USB_Device_ProcessControlRequest+0x172>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 8ce:	80 91 2e 01 	lds	r24, 0x012E
 8d2:	88 23       	and	r24, r24
 8d4:	31 f5       	brne	.+76     	; 0x922 <USB_Device_ProcessControlRequest+0x172>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 8d6:	20 91 30 01 	lds	r18, 0x0130
 8da:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 8dc:	09 f4       	brne	.+2      	; 0x8e0 <USB_Device_ProcessControlRequest+0x130>
 8de:	cf c0       	rjmp	.+414    	; 0xa7e <USB_Device_ProcessControlRequest+0x2ce>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 8e0:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 8e4:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 8e8:	80 ff       	sbrs	r24, 0
 8ea:	1b c0       	rjmp	.+54     	; 0x922 <USB_Device_ProcessControlRequest+0x172>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 8ec:	33 30       	cpi	r19, 0x03	; 3
 8ee:	21 f4       	brne	.+8      	; 0x8f8 <USB_Device_ProcessControlRequest+0x148>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 8f0:	80 91 eb 00 	lds	r24, 0x00EB
 8f4:	80 62       	ori	r24, 0x20	; 32
 8f6:	13 c0       	rjmp	.+38     	; 0x91e <USB_Device_ProcessControlRequest+0x16e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 8f8:	80 91 eb 00 	lds	r24, 0x00EB
 8fc:	80 61       	ori	r24, 0x10	; 16
 8fe:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 902:	81 e0       	ldi	r24, 0x01	; 1
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	02 c0       	rjmp	.+4      	; 0x90c <USB_Device_ProcessControlRequest+0x15c>
 908:	88 0f       	add	r24, r24
 90a:	99 1f       	adc	r25, r25
 90c:	2a 95       	dec	r18
 90e:	e2 f7       	brpl	.-8      	; 0x908 <USB_Device_ProcessControlRequest+0x158>
 910:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 914:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 918:	80 91 eb 00 	lds	r24, 0x00EB
 91c:	88 60       	ori	r24, 0x08	; 8
 91e:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 922:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 926:	80 91 e8 00 	lds	r24, 0x00E8
 92a:	87 7f       	andi	r24, 0xF7	; 247
 92c:	89 c0       	rjmp	.+274    	; 0xa40 <USB_Device_ProcessControlRequest+0x290>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 92e:	88 23       	and	r24, r24
 930:	09 f0       	breq	.+2      	; 0x934 <USB_Device_ProcessControlRequest+0x184>
 932:	a5 c0       	rjmp	.+330    	; 0xa7e <USB_Device_ProcessControlRequest+0x2ce>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 934:	10 91 2e 01 	lds	r17, 0x012E
 938:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 93a:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 93c:	f8 94       	cli
 93e:	80 91 e8 00 	lds	r24, 0x00E8
 942:	87 7f       	andi	r24, 0xF7	; 247
 944:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 948:	c7 dc       	rcall	.-1650   	; 0x2d8 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 94a:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
 94e:	80 ff       	sbrs	r24, 0
 950:	fc cf       	rjmp	.-8      	; 0x94a <USB_Device_ProcessControlRequest+0x19a>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 952:	80 91 e3 00 	lds	r24, 0x00E3
 956:	80 78       	andi	r24, 0x80	; 128
 958:	81 2b       	or	r24, r17

				UDADDR = Temp;
 95a:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
 95e:	80 68       	ori	r24, 0x80	; 128
 960:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 964:	11 23       	and	r17, r17
 966:	11 f4       	brne	.+4      	; 0x96c <USB_Device_ProcessControlRequest+0x1bc>
 968:	82 e0       	ldi	r24, 0x02	; 2
 96a:	01 c0       	rjmp	.+2      	; 0x96e <USB_Device_ProcessControlRequest+0x1be>
 96c:	83 e0       	ldi	r24, 0x03	; 3
 96e:	8e bb       	out	0x1e, r24	; 30
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 970:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
 972:	85 c0       	rjmp	.+266    	; 0xa7e <USB_Device_ProcessControlRequest+0x2ce>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 974:	80 58       	subi	r24, 0x80	; 128
 976:	82 30       	cpi	r24, 0x02	; 2
 978:	08 f0       	brcs	.+2      	; 0x97c <USB_Device_ProcessControlRequest+0x1cc>
 97a:	81 c0       	rjmp	.+258    	; 0xa7e <USB_Device_ProcessControlRequest+0x2ce>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 97c:	80 91 2e 01 	lds	r24, 0x012E
 980:	90 91 2f 01 	lds	r25, 0x012F
 984:	23 e0       	ldi	r18, 0x03	; 3
 986:	8c 3d       	cpi	r24, 0xDC	; 220
 988:	92 07       	cpc	r25, r18
 98a:	09 f0       	breq	.+2      	; 0x98e <USB_Device_ProcessControlRequest+0x1de>
 98c:	33 c0       	rjmp	.+102    	; 0x9f4 <USB_Device_ProcessControlRequest+0x244>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 98e:	83 e0       	ldi	r24, 0x03	; 3
 990:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 992:	8a e2       	ldi	r24, 0x2A	; 42
 994:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 996:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 998:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 99a:	de 01       	movw	r26, r28
 99c:	15 96       	adiw	r26, 0x05	; 5
 99e:	6e e0       	ldi	r22, 0x0E	; 14
 9a0:	40 e0       	ldi	r20, 0x00	; 0
 9a2:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 9a4:	11 e2       	ldi	r17, 0x21	; 33
 9a6:	e6 2f       	mov	r30, r22
 9a8:	f0 e0       	ldi	r31, 0x00	; 0
 9aa:	10 93 57 00 	sts	0x0057, r17
 9ae:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
 9b0:	40 ff       	sbrs	r20, 0
 9b2:	03 c0       	rjmp	.+6      	; 0x9ba <USB_Device_ProcessControlRequest+0x20a>
					{
						SerialByte >>= 4;
 9b4:	82 95       	swap	r24
 9b6:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
 9b8:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 9ba:	8f 70       	andi	r24, 0x0F	; 15
 9bc:	28 2f       	mov	r18, r24
 9be:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 9c0:	8a 30       	cpi	r24, 0x0A	; 10
 9c2:	18 f0       	brcs	.+6      	; 0x9ca <USB_Device_ProcessControlRequest+0x21a>
 9c4:	c9 01       	movw	r24, r18
 9c6:	c7 96       	adiw	r24, 0x37	; 55
 9c8:	02 c0       	rjmp	.+4      	; 0x9ce <USB_Device_ProcessControlRequest+0x21e>
 9ca:	c9 01       	movw	r24, r18
 9cc:	c0 96       	adiw	r24, 0x30	; 48
 9ce:	8d 93       	st	X+, r24
 9d0:	9d 93       	st	X+, r25
 9d2:	4f 5f       	subi	r20, 0xFF	; 255
 9d4:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 9d6:	44 31       	cpi	r20, 0x14	; 20
 9d8:	51 05       	cpc	r21, r1
 9da:	29 f7       	brne	.-54     	; 0x9a6 <USB_Device_ProcessControlRequest+0x1f6>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 9dc:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9de:	80 91 e8 00 	lds	r24, 0x00E8
 9e2:	87 7f       	andi	r24, 0xF7	; 247
 9e4:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 9e8:	ce 01       	movw	r24, r28
 9ea:	03 96       	adiw	r24, 0x03	; 3
 9ec:	6a e2       	ldi	r22, 0x2A	; 42
 9ee:	70 e0       	ldi	r23, 0x00	; 0
 9f0:	e5 dd       	rcall	.-1078   	; 0x5bc <Endpoint_Write_Control_Stream_LE>
 9f2:	12 c0       	rjmp	.+36     	; 0xa18 <USB_Device_ProcessControlRequest+0x268>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 9f4:	60 91 30 01 	lds	r22, 0x0130
 9f8:	ae 01       	movw	r20, r28
 9fa:	4f 5f       	subi	r20, 0xFF	; 255
 9fc:	5f 4f       	sbci	r21, 0xFF	; 255
 9fe:	2b dc       	rcall	.-1962   	; 0x256 <CALLBACK_USB_GetDescriptor>
 a00:	bc 01       	movw	r22, r24
 a02:	00 97       	sbiw	r24, 0x00	; 0
 a04:	09 f4       	brne	.+2      	; 0xa08 <USB_Device_ProcessControlRequest+0x258>
 a06:	3b c0       	rjmp	.+118    	; 0xa7e <USB_Device_ProcessControlRequest+0x2ce>
 a08:	80 91 e8 00 	lds	r24, 0x00E8
 a0c:	87 7f       	andi	r24, 0xF7	; 247
 a0e:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 a12:	89 81       	ldd	r24, Y+1	; 0x01
 a14:	9a 81       	ldd	r25, Y+2	; 0x02
 a16:	6d de       	rcall	.-806    	; 0x6f2 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 a18:	80 91 e8 00 	lds	r24, 0x00E8
 a1c:	8b 77       	andi	r24, 0x7B	; 123
 a1e:	80 93 e8 00 	sts	0x00E8, r24
 a22:	2d c0       	rjmp	.+90     	; 0xa7e <USB_Device_ProcessControlRequest+0x2ce>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 a24:	80 38       	cpi	r24, 0x80	; 128
 a26:	59 f5       	brne	.+86     	; 0xa7e <USB_Device_ProcessControlRequest+0x2ce>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a28:	80 91 e8 00 	lds	r24, 0x00E8
 a2c:	87 7f       	andi	r24, 0xF7	; 247
 a2e:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 a32:	80 91 28 01 	lds	r24, 0x0128
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 a36:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 a3a:	80 91 e8 00 	lds	r24, 0x00E8
 a3e:	8e 77       	andi	r24, 0x7E	; 126
 a40:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 a44:	49 dc       	rcall	.-1902   	; 0x2d8 <Endpoint_ClearStatusStage>
 a46:	1b c0       	rjmp	.+54     	; 0xa7e <USB_Device_ProcessControlRequest+0x2ce>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 a48:	88 23       	and	r24, r24
 a4a:	c9 f4       	brne	.+50     	; 0xa7e <USB_Device_ProcessControlRequest+0x2ce>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 a4c:	90 91 2e 01 	lds	r25, 0x012E
 a50:	92 30       	cpi	r25, 0x02	; 2
 a52:	a8 f4       	brcc	.+42     	; 0xa7e <USB_Device_ProcessControlRequest+0x2ce>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a54:	80 91 e8 00 	lds	r24, 0x00E8
 a58:	87 7f       	andi	r24, 0xF7	; 247
 a5a:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 a5e:	90 93 28 01 	sts	0x0128, r25

	Endpoint_ClearStatusStage();
 a62:	3a dc       	rcall	.-1932   	; 0x2d8 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 a64:	80 91 28 01 	lds	r24, 0x0128
 a68:	88 23       	and	r24, r24
 a6a:	31 f4       	brne	.+12     	; 0xa78 <USB_Device_ProcessControlRequest+0x2c8>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 a6c:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 a70:	87 fd       	sbrc	r24, 7
 a72:	02 c0       	rjmp	.+4      	; 0xa78 <USB_Device_ProcessControlRequest+0x2c8>
 a74:	81 e0       	ldi	r24, 0x01	; 1
 a76:	01 c0       	rjmp	.+2      	; 0xa7a <USB_Device_ProcessControlRequest+0x2ca>
 a78:	84 e0       	ldi	r24, 0x04	; 4
 a7a:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
 a7c:	a9 db       	rcall	.-2222   	; 0x1d0 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a7e:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 a82:	83 ff       	sbrs	r24, 3
 a84:	0a c0       	rjmp	.+20     	; 0xa9a <USB_Device_ProcessControlRequest+0x2ea>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 a86:	80 91 eb 00 	lds	r24, 0x00EB
 a8a:	80 62       	ori	r24, 0x20	; 32
 a8c:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a90:	80 91 e8 00 	lds	r24, 0x00E8
 a94:	87 7f       	andi	r24, 0xF7	; 247
 a96:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 a9a:	ac 96       	adiw	r28, 0x2c	; 44
 a9c:	0f b6       	in	r0, 0x3f	; 63
 a9e:	f8 94       	cli
 aa0:	de bf       	out	0x3e, r29	; 62
 aa2:	0f be       	out	0x3f, r0	; 63
 aa4:	cd bf       	out	0x3d, r28	; 61
 aa6:	cf 91       	pop	r28
 aa8:	df 91       	pop	r29
 aaa:	1f 91       	pop	r17
 aac:	0f 91       	pop	r16
 aae:	08 95       	ret

00000ab0 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 ab0:	08 95       	ret

00000ab2 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 ab2:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 ab4:	8e b3       	in	r24, 0x1e	; 30
 ab6:	88 23       	and	r24, r24
 ab8:	61 f0       	breq	.+24     	; 0xad2 <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 aba:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 abe:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 ac2:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 ac6:	83 ff       	sbrs	r24, 3
 ac8:	01 c0       	rjmp	.+2      	; 0xacc <USB_USBTask+0x1a>
		  USB_Device_ProcessControlRequest();
 aca:	72 de       	rcall	.-796    	; 0x7b0 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 acc:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 ace:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 ad2:	1f 91       	pop	r17
 ad4:	08 95       	ret

00000ad6 <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 ad6:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 ad8:	8e b3       	in	r24, 0x1e	; 30
 ada:	84 30       	cpi	r24, 0x04	; 4
 adc:	41 f5       	brne	.+80     	; 0xb2e <CDC_Device_ReceiveByte+0x58>
 ade:	87 85       	ldd	r24, Z+15	; 0x0f
 ae0:	90 89       	ldd	r25, Z+16	; 0x10
 ae2:	a1 89       	ldd	r26, Z+17	; 0x11
 ae4:	b2 89       	ldd	r27, Z+18	; 0x12
 ae6:	00 97       	sbiw	r24, 0x00	; 0
 ae8:	a1 05       	cpc	r26, r1
 aea:	b1 05       	cpc	r27, r1
 aec:	01 f1       	breq	.+64     	; 0xb2e <CDC_Device_ReceiveByte+0x58>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
 aee:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 af0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 af4:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsOUTReceived())
 af8:	82 ff       	sbrs	r24, 2
 afa:	19 c0       	rjmp	.+50     	; 0xb2e <CDC_Device_ReceiveByte+0x58>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 afc:	80 91 f2 00 	lds	r24, 0x00F2
 b00:	90 91 f3 00 	lds	r25, 0x00F3
	{
		if (Endpoint_BytesInEndpoint())
 b04:	89 2b       	or	r24, r25
 b06:	19 f4       	brne	.+6      	; 0xb0e <CDC_Device_ReceiveByte+0x38>
 b08:	2f ef       	ldi	r18, 0xFF	; 255
 b0a:	3f ef       	ldi	r19, 0xFF	; 255
 b0c:	04 c0       	rjmp	.+8      	; 0xb16 <CDC_Device_ReceiveByte+0x40>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 b0e:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
 b12:	28 2f       	mov	r18, r24
 b14:	30 e0       	ldi	r19, 0x00	; 0
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 b16:	80 91 f2 00 	lds	r24, 0x00F2
 b1a:	90 91 f3 00 	lds	r25, 0x00F3

		if (!(Endpoint_BytesInEndpoint()))
 b1e:	89 2b       	or	r24, r25
 b20:	41 f4       	brne	.+16     	; 0xb32 <CDC_Device_ReceiveByte+0x5c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 b22:	80 91 e8 00 	lds	r24, 0x00E8
 b26:	8b 77       	andi	r24, 0x7B	; 123
 b28:	80 93 e8 00 	sts	0x00E8, r24
 b2c:	02 c0       	rjmp	.+4      	; 0xb32 <CDC_Device_ReceiveByte+0x5c>
 b2e:	2f ef       	ldi	r18, 0xFF	; 255
 b30:	3f ef       	ldi	r19, 0xFF	; 255
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
 b32:	c9 01       	movw	r24, r18
 b34:	08 95       	ret

00000b36 <CDC_Device_CreateBlockingStream>:
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
 b36:	fb 01       	movw	r30, r22
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
 b38:	2e e0       	ldi	r18, 0x0E	; 14
 b3a:	db 01       	movw	r26, r22
 b3c:	1d 92       	st	X+, r1
 b3e:	2a 95       	dec	r18
 b40:	e9 f7       	brne	.-6      	; 0xb3c <CDC_Device_CreateBlockingStream+0x6>
 b42:	23 e0       	ldi	r18, 0x03	; 3
 b44:	23 83       	std	Z+3, r18	; 0x03
 b46:	27 e2       	ldi	r18, 0x27	; 39
 b48:	36 e0       	ldi	r19, 0x06	; 6
 b4a:	31 87       	std	Z+9, r19	; 0x09
 b4c:	20 87       	std	Z+8, r18	; 0x08
 b4e:	2b ee       	ldi	r18, 0xEB	; 235
 b50:	35 e0       	ldi	r19, 0x05	; 5
 b52:	33 87       	std	Z+11, r19	; 0x0b
 b54:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
 b56:	95 87       	std	Z+13, r25	; 0x0d
 b58:	84 87       	std	Z+12, r24	; 0x0c
}
 b5a:	08 95       	ret

00000b5c <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
 b5c:	08 95       	ret

00000b5e <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 b5e:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 b60:	8e b3       	in	r24, 0x1e	; 30
 b62:	84 30       	cpi	r24, 0x04	; 4
 b64:	21 f5       	brne	.+72     	; 0xbae <CDC_Device_Flush+0x50>
 b66:	87 85       	ldd	r24, Z+15	; 0x0f
 b68:	90 89       	ldd	r25, Z+16	; 0x10
 b6a:	a1 89       	ldd	r26, Z+17	; 0x11
 b6c:	b2 89       	ldd	r27, Z+18	; 0x12
 b6e:	00 97       	sbiw	r24, 0x00	; 0
 b70:	a1 05       	cpc	r26, r1
 b72:	b1 05       	cpc	r27, r1
 b74:	e1 f0       	breq	.+56     	; 0xbae <CDC_Device_Flush+0x50>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
 b76:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 b78:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 b7c:	80 91 f2 00 	lds	r24, 0x00F2
 b80:	90 91 f3 00 	lds	r25, 0x00F3

	if (!(Endpoint_BytesInEndpoint()))
 b84:	89 2b       	or	r24, r25
 b86:	a9 f0       	breq	.+42     	; 0xbb2 <CDC_Device_Flush+0x54>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 b88:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b8c:	80 91 e8 00 	lds	r24, 0x00E8
 b90:	8e 77       	andi	r24, 0x7E	; 126
 b92:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
 b96:	95 fd       	sbrc	r25, 5
 b98:	0c c0       	rjmp	.+24     	; 0xbb2 <CDC_Device_Flush+0x54>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 b9a:	bd db       	rcall	.-2182   	; 0x316 <Endpoint_WaitUntilReady>
 b9c:	98 2f       	mov	r25, r24
 b9e:	88 23       	and	r24, r24
 ba0:	49 f4       	brne	.+18     	; 0xbb4 <CDC_Device_Flush+0x56>
 ba2:	80 91 e8 00 	lds	r24, 0x00E8
 ba6:	8e 77       	andi	r24, 0x7E	; 126
 ba8:	80 93 e8 00 	sts	0x00E8, r24
 bac:	03 c0       	rjmp	.+6      	; 0xbb4 <CDC_Device_Flush+0x56>
 bae:	92 e0       	ldi	r25, 0x02	; 2
 bb0:	01 c0       	rjmp	.+2      	; 0xbb4 <CDC_Device_Flush+0x56>
 bb2:	90 e0       	ldi	r25, 0x00	; 0

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
 bb4:	89 2f       	mov	r24, r25
 bb6:	08 95       	ret

00000bb8 <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 bb8:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 bba:	8e b3       	in	r24, 0x1e	; 30
 bbc:	84 30       	cpi	r24, 0x04	; 4
 bbe:	51 f4       	brne	.+20     	; 0xbd4 <CDC_Device_USBTask+0x1c>
 bc0:	87 85       	ldd	r24, Z+15	; 0x0f
 bc2:	90 89       	ldd	r25, Z+16	; 0x10
 bc4:	a1 89       	ldd	r26, Z+17	; 0x11
 bc6:	b2 89       	ldd	r27, Z+18	; 0x12
 bc8:	00 97       	sbiw	r24, 0x00	; 0
 bca:	a1 05       	cpc	r26, r1
 bcc:	b1 05       	cpc	r27, r1
 bce:	11 f0       	breq	.+4      	; 0xbd4 <CDC_Device_USBTask+0x1c>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Device_Flush(CDCInterfaceInfo);
 bd0:	cf 01       	movw	r24, r30
 bd2:	c5 cf       	rjmp	.-118    	; 0xb5e <CDC_Device_Flush>
 bd4:	08 95       	ret

00000bd6 <CDC_Device_getchar_Blocking>:

	return ReceivedByte;
}

static int CDC_Device_getchar_Blocking(FILE* Stream)
{
 bd6:	cf 93       	push	r28
 bd8:	df 93       	push	r29
 bda:	ec 01       	movw	r28, r24
 bdc:	0a c0       	rjmp	.+20     	; 0xbf2 <CDC_Device_getchar_Blocking+0x1c>
	int16_t ReceivedByte;

	while ((ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream))) < 0)
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 bde:	8e b3       	in	r24, 0x1e	; 30
 be0:	88 23       	and	r24, r24
 be2:	19 f4       	brne	.+6      	; 0xbea <CDC_Device_getchar_Blocking+0x14>
 be4:	2e ef       	ldi	r18, 0xFE	; 254
 be6:	3f ef       	ldi	r19, 0xFF	; 255
 be8:	0a c0       	rjmp	.+20     	; 0xbfe <CDC_Device_getchar_Blocking+0x28>
		  return _FDEV_EOF;

		CDC_Device_USBTask((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
 bea:	8c 85       	ldd	r24, Y+12	; 0x0c
 bec:	9d 85       	ldd	r25, Y+13	; 0x0d
 bee:	e4 df       	rcall	.-56     	; 0xbb8 <CDC_Device_USBTask>
		USB_USBTask();
 bf0:	60 df       	rcall	.-320    	; 0xab2 <USB_USBTask>

static int CDC_Device_getchar_Blocking(FILE* Stream)
{
	int16_t ReceivedByte;

	while ((ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream))) < 0)
 bf2:	8c 85       	ldd	r24, Y+12	; 0x0c
 bf4:	9d 85       	ldd	r25, Y+13	; 0x0d
 bf6:	6f df       	rcall	.-290    	; 0xad6 <CDC_Device_ReceiveByte>
 bf8:	9c 01       	movw	r18, r24
 bfa:	97 fd       	sbrc	r25, 7
 bfc:	f0 cf       	rjmp	.-32     	; 0xbde <CDC_Device_getchar_Blocking+0x8>
		CDC_Device_USBTask((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
		USB_USBTask();
	}

	return ReceivedByte;
}
 bfe:	c9 01       	movw	r24, r18
 c00:	df 91       	pop	r29
 c02:	cf 91       	pop	r28
 c04:	08 95       	ret

00000c06 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
 c06:	1f 93       	push	r17
 c08:	fc 01       	movw	r30, r24
 c0a:	16 2f       	mov	r17, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 c0c:	8e b3       	in	r24, 0x1e	; 30
 c0e:	84 30       	cpi	r24, 0x04	; 4
 c10:	d9 f4       	brne	.+54     	; 0xc48 <CDC_Device_SendByte+0x42>
 c12:	87 85       	ldd	r24, Z+15	; 0x0f
 c14:	90 89       	ldd	r25, Z+16	; 0x10
 c16:	a1 89       	ldd	r26, Z+17	; 0x11
 c18:	b2 89       	ldd	r27, Z+18	; 0x12
 c1a:	00 97       	sbiw	r24, 0x00	; 0
 c1c:	a1 05       	cpc	r26, r1
 c1e:	b1 05       	cpc	r27, r1
 c20:	99 f0       	breq	.+38     	; 0xc48 <CDC_Device_SendByte+0x42>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
 c22:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c24:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 c28:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
 c2c:	85 fd       	sbrc	r24, 5
 c2e:	08 c0       	rjmp	.+16     	; 0xc40 <CDC_Device_SendByte+0x3a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c30:	80 91 e8 00 	lds	r24, 0x00E8
 c34:	8e 77       	andi	r24, 0x7E	; 126
 c36:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 c3a:	6d db       	rcall	.-2342   	; 0x316 <Endpoint_WaitUntilReady>
 c3c:	88 23       	and	r24, r24
 c3e:	29 f4       	brne	.+10     	; 0xc4a <CDC_Device_SendByte+0x44>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 c40:	10 93 f1 00 	sts	0x00F1, r17
 c44:	80 e0       	ldi	r24, 0x00	; 0
 c46:	01 c0       	rjmp	.+2      	; 0xc4a <CDC_Device_SendByte+0x44>
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
 c48:	82 e0       	ldi	r24, 0x02	; 2
}
 c4a:	1f 91       	pop	r17
 c4c:	08 95       	ret

00000c4e <CDC_Device_putchar>:
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
 c4e:	28 2f       	mov	r18, r24
 c50:	fb 01       	movw	r30, r22
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
 c52:	84 85       	ldd	r24, Z+12	; 0x0c
 c54:	95 85       	ldd	r25, Z+13	; 0x0d
 c56:	62 2f       	mov	r22, r18
 c58:	d6 df       	rcall	.-84     	; 0xc06 <CDC_Device_SendByte>
 c5a:	88 23       	and	r24, r24
 c5c:	19 f4       	brne	.+6      	; 0xc64 <CDC_Device_putchar+0x16>
 c5e:	20 e0       	ldi	r18, 0x00	; 0
 c60:	30 e0       	ldi	r19, 0x00	; 0
 c62:	02 c0       	rjmp	.+4      	; 0xc68 <CDC_Device_putchar+0x1a>
 c64:	2f ef       	ldi	r18, 0xFF	; 255
 c66:	3f ef       	ldi	r19, 0xFF	; 255
}
 c68:	c9 01       	movw	r24, r18
 c6a:	08 95       	ret

00000c6c <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 c6c:	1f 93       	push	r17
 c6e:	cf 93       	push	r28
 c70:	df 93       	push	r29
 c72:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 c74:	0d 96       	adiw	r24, 0x0d	; 13
 c76:	fc 01       	movw	r30, r24
 c78:	89 e0       	ldi	r24, 0x09	; 9
 c7a:	df 01       	movw	r26, r30
 c7c:	1d 92       	st	X+, r1
 c7e:	8a 95       	dec	r24
 c80:	e9 f7       	brne	.-6      	; 0xc7c <CDC_Device_ConfigureEndpoints+0x10>
 c82:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == CDCInterfaceInfo->Config.DataINEndpointNumber)
 c84:	89 81       	ldd	r24, Y+1	; 0x01
 c86:	18 17       	cp	r17, r24
 c88:	29 f4       	brne	.+10     	; 0xc94 <CDC_Device_ConfigureEndpoints+0x28>
		{
			Size         = CDCInterfaceInfo->Config.DataINEndpointSize;
 c8a:	6a 81       	ldd	r22, Y+2	; 0x02
 c8c:	7b 81       	ldd	r23, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataINEndpointDoubleBank;
 c8e:	8c 81       	ldd	r24, Y+4	; 0x04
 c90:	52 e0       	ldi	r21, 0x02	; 2
 c92:	10 c0       	rjmp	.+32     	; 0xcb4 <CDC_Device_ConfigureEndpoints+0x48>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.DataOUTEndpointNumber)
 c94:	8d 81       	ldd	r24, Y+5	; 0x05
 c96:	18 17       	cp	r17, r24
 c98:	31 f4       	brne	.+12     	; 0xca6 <CDC_Device_ConfigureEndpoints+0x3a>
		{
			Size         = CDCInterfaceInfo->Config.DataOUTEndpointSize;
 c9a:	6e 81       	ldd	r22, Y+6	; 0x06
 c9c:	7f 81       	ldd	r23, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
 c9e:	88 85       	ldd	r24, Y+8	; 0x08
 ca0:	52 e0       	ldi	r21, 0x02	; 2
 ca2:	30 e0       	ldi	r19, 0x00	; 0
 ca4:	08 c0       	rjmp	.+16     	; 0xcb6 <CDC_Device_ConfigureEndpoints+0x4a>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.NotificationEndpointNumber)
 ca6:	89 85       	ldd	r24, Y+9	; 0x09
 ca8:	18 17       	cp	r17, r24
 caa:	39 f5       	brne	.+78     	; 0xcfa <CDC_Device_ConfigureEndpoints+0x8e>
		{
			Size         = CDCInterfaceInfo->Config.NotificationEndpointSize;
 cac:	6a 85       	ldd	r22, Y+10	; 0x0a
 cae:	7b 85       	ldd	r23, Y+11	; 0x0b
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_INTERRUPT;
			DoubleBanked = CDCInterfaceInfo->Config.NotificationEndpointDoubleBank;
 cb0:	8c 85       	ldd	r24, Y+12	; 0x0c
 cb2:	53 e0       	ldi	r21, 0x03	; 3
 cb4:	30 e8       	ldi	r19, 0x80	; 128
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
 cb6:	88 23       	and	r24, r24
 cb8:	11 f4       	brne	.+4      	; 0xcbe <CDC_Device_ConfigureEndpoints+0x52>
 cba:	40 e0       	ldi	r20, 0x00	; 0
 cbc:	01 c0       	rjmp	.+2      	; 0xcc0 <CDC_Device_ConfigureEndpoints+0x54>
 cbe:	44 e0       	ldi	r20, 0x04	; 4
 cc0:	20 e0       	ldi	r18, 0x00	; 0
 cc2:	88 e0       	ldi	r24, 0x08	; 8
 cc4:	90 e0       	ldi	r25, 0x00	; 0
 cc6:	03 c0       	rjmp	.+6      	; 0xcce <CDC_Device_ConfigureEndpoints+0x62>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
 cc8:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
 cca:	88 0f       	add	r24, r24
 ccc:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
 cce:	86 17       	cp	r24, r22
 cd0:	97 07       	cpc	r25, r23
 cd2:	d0 f3       	brcs	.-12     	; 0xcc8 <CDC_Device_ConfigureEndpoints+0x5c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 cd4:	85 2f       	mov	r24, r21
 cd6:	90 e0       	ldi	r25, 0x00	; 0
 cd8:	56 e0       	ldi	r21, 0x06	; 6
 cda:	88 0f       	add	r24, r24
 cdc:	99 1f       	adc	r25, r25
 cde:	5a 95       	dec	r21
 ce0:	e1 f7       	brne	.-8      	; 0xcda <CDC_Device_ConfigureEndpoints+0x6e>
 ce2:	60 e0       	ldi	r22, 0x00	; 0
 ce4:	31 11       	cpse	r19, r1
 ce6:	61 e0       	ldi	r22, 0x01	; 1
 ce8:	68 2b       	or	r22, r24
 cea:	42 60       	ori	r20, 0x02	; 2
 cec:	22 95       	swap	r18
 cee:	20 7f       	andi	r18, 0xF0	; 240
 cf0:	42 2b       	or	r20, r18
 cf2:	81 2f       	mov	r24, r17
 cf4:	de da       	rcall	.-2628   	; 0x2b2 <Endpoint_ConfigureEndpoint_Prv>
 cf6:	88 23       	and	r24, r24
 cf8:	29 f0       	breq	.+10     	; 0xd04 <CDC_Device_ConfigureEndpoints+0x98>

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
 cfa:	1f 5f       	subi	r17, 0xFF	; 255
 cfc:	17 30       	cpi	r17, 0x07	; 7
 cfe:	09 f0       	breq	.+2      	; 0xd02 <CDC_Device_ConfigureEndpoints+0x96>
 d00:	c1 cf       	rjmp	.-126    	; 0xc84 <CDC_Device_ConfigureEndpoints+0x18>
 d02:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
 d04:	df 91       	pop	r29
 d06:	cf 91       	pop	r28
 d08:	1f 91       	pop	r17
 d0a:	08 95       	ret

00000d0c <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDC.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 d0c:	cf 93       	push	r28
 d0e:	df 93       	push	r29
 d10:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d12:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
 d16:	83 ff       	sbrs	r24, 3
 d18:	63 c0       	rjmp	.+198    	; 0xde0 <CDC_Device_ProcessControlRequest+0xd4>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 d1a:	88 81       	ld	r24, Y
 d1c:	90 e0       	ldi	r25, 0x00	; 0
 d1e:	20 91 30 01 	lds	r18, 0x0130
 d22:	30 91 31 01 	lds	r19, 0x0131
 d26:	28 17       	cp	r18, r24
 d28:	39 07       	cpc	r19, r25
 d2a:	09 f0       	breq	.+2      	; 0xd2e <CDC_Device_ProcessControlRequest+0x22>
 d2c:	59 c0       	rjmp	.+178    	; 0xde0 <CDC_Device_ProcessControlRequest+0xd4>
	  return;

	switch (USB_ControlRequest.bRequest)
 d2e:	80 91 2d 01 	lds	r24, 0x012D
 d32:	81 32       	cpi	r24, 0x21	; 33
 d34:	61 f0       	breq	.+24     	; 0xd4e <CDC_Device_ProcessControlRequest+0x42>
 d36:	82 32       	cpi	r24, 0x22	; 34
 d38:	20 f4       	brcc	.+8      	; 0xd42 <CDC_Device_ProcessControlRequest+0x36>
 d3a:	80 32       	cpi	r24, 0x20	; 32
 d3c:	09 f0       	breq	.+2      	; 0xd40 <CDC_Device_ProcessControlRequest+0x34>
 d3e:	50 c0       	rjmp	.+160    	; 0xde0 <CDC_Device_ProcessControlRequest+0xd4>
 d40:	1b c0       	rjmp	.+54     	; 0xd78 <CDC_Device_ProcessControlRequest+0x6c>
 d42:	82 32       	cpi	r24, 0x22	; 34
 d44:	79 f1       	breq	.+94     	; 0xda4 <CDC_Device_ProcessControlRequest+0x98>
 d46:	83 32       	cpi	r24, 0x23	; 35
 d48:	09 f0       	breq	.+2      	; 0xd4c <CDC_Device_ProcessControlRequest+0x40>
 d4a:	4a c0       	rjmp	.+148    	; 0xde0 <CDC_Device_ProcessControlRequest+0xd4>
 d4c:	3b c0       	rjmp	.+118    	; 0xdc4 <CDC_Device_ProcessControlRequest+0xb8>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 d4e:	80 91 2c 01 	lds	r24, 0x012C
 d52:	81 3a       	cpi	r24, 0xA1	; 161
 d54:	09 f0       	breq	.+2      	; 0xd58 <CDC_Device_ProcessControlRequest+0x4c>
 d56:	44 c0       	rjmp	.+136    	; 0xde0 <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d58:	80 91 e8 00 	lds	r24, 0x00E8
 d5c:	87 7f       	andi	r24, 0xF7	; 247
 d5e:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
 d62:	ce 01       	movw	r24, r28
 d64:	0f 96       	adiw	r24, 0x0f	; 15
 d66:	67 e0       	ldi	r22, 0x07	; 7
 d68:	70 e0       	ldi	r23, 0x00	; 0
 d6a:	28 dc       	rcall	.-1968   	; 0x5bc <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 d6c:	80 91 e8 00 	lds	r24, 0x00E8
 d70:	8b 77       	andi	r24, 0x7B	; 123
 d72:	80 93 e8 00 	sts	0x00E8, r24
 d76:	34 c0       	rjmp	.+104    	; 0xde0 <CDC_Device_ProcessControlRequest+0xd4>
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 d78:	80 91 2c 01 	lds	r24, 0x012C
 d7c:	81 32       	cpi	r24, 0x21	; 33
 d7e:	81 f5       	brne	.+96     	; 0xde0 <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d80:	80 91 e8 00 	lds	r24, 0x00E8
 d84:	87 7f       	andi	r24, 0xF7	; 247
 d86:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
 d8a:	ce 01       	movw	r24, r28
 d8c:	0f 96       	adiw	r24, 0x0f	; 15
 d8e:	67 e0       	ldi	r22, 0x07	; 7
 d90:	70 e0       	ldi	r23, 0x00	; 0
 d92:	70 dc       	rcall	.-1824   	; 0x674 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d94:	80 91 e8 00 	lds	r24, 0x00E8
 d98:	8e 77       	andi	r24, 0x7E	; 126
 d9a:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 d9e:	ce 01       	movw	r24, r28
 da0:	dd de       	rcall	.-582    	; 0xb5c <CDC_Device_Event_Stub>
 da2:	1e c0       	rjmp	.+60     	; 0xde0 <CDC_Device_ProcessControlRequest+0xd4>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 da4:	80 91 2c 01 	lds	r24, 0x012C
 da8:	81 32       	cpi	r24, 0x21	; 33
 daa:	d1 f4       	brne	.+52     	; 0xde0 <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 dac:	80 91 e8 00 	lds	r24, 0x00E8
 db0:	87 7f       	andi	r24, 0xF7	; 247
 db2:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 db6:	90 da       	rcall	.-2784   	; 0x2d8 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 db8:	80 91 2e 01 	lds	r24, 0x012E
 dbc:	8d 87       	std	Y+13, r24	; 0x0d

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 dbe:	ce 01       	movw	r24, r28
 dc0:	cd de       	rcall	.-614    	; 0xb5c <CDC_Device_Event_Stub>
 dc2:	0e c0       	rjmp	.+28     	; 0xde0 <CDC_Device_ProcessControlRequest+0xd4>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 dc4:	80 91 2c 01 	lds	r24, 0x012C
 dc8:	81 32       	cpi	r24, 0x21	; 33
 dca:	51 f4       	brne	.+20     	; 0xde0 <CDC_Device_ProcessControlRequest+0xd4>
 dcc:	80 91 e8 00 	lds	r24, 0x00E8
 dd0:	87 7f       	andi	r24, 0xF7	; 247
 dd2:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 dd6:	80 da       	rcall	.-2816   	; 0x2d8 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 dd8:	ce 01       	movw	r24, r28
 dda:	60 91 2e 01 	lds	r22, 0x012E
 dde:	be de       	rcall	.-644    	; 0xb5c <CDC_Device_Event_Stub>
			}

			break;
	}
}
 de0:	df 91       	pop	r29
 de2:	cf 91       	pop	r28
 de4:	08 95       	ret

00000de6 <fgetc>:
 de6:	cf 93       	push	r28
 de8:	df 93       	push	r29
 dea:	ec 01       	movw	r28, r24
 dec:	4b 81       	ldd	r20, Y+3	; 0x03
 dee:	40 ff       	sbrs	r20, 0
 df0:	1a c0       	rjmp	.+52     	; 0xe26 <fgetc+0x40>
 df2:	46 ff       	sbrs	r20, 6
 df4:	0a c0       	rjmp	.+20     	; 0xe0a <fgetc+0x24>
 df6:	4f 7b       	andi	r20, 0xBF	; 191
 df8:	4b 83       	std	Y+3, r20	; 0x03
 dfa:	8e 81       	ldd	r24, Y+6	; 0x06
 dfc:	9f 81       	ldd	r25, Y+7	; 0x07
 dfe:	01 96       	adiw	r24, 0x01	; 1
 e00:	9f 83       	std	Y+7, r25	; 0x07
 e02:	8e 83       	std	Y+6, r24	; 0x06
 e04:	8a 81       	ldd	r24, Y+2	; 0x02
 e06:	28 2f       	mov	r18, r24
 e08:	2b c0       	rjmp	.+86     	; 0xe60 <fgetc+0x7a>
 e0a:	42 ff       	sbrs	r20, 2
 e0c:	13 c0       	rjmp	.+38     	; 0xe34 <fgetc+0x4e>
 e0e:	e8 81       	ld	r30, Y
 e10:	f9 81       	ldd	r31, Y+1	; 0x01
 e12:	80 81       	ld	r24, Z
 e14:	28 2f       	mov	r18, r24
 e16:	33 27       	eor	r19, r19
 e18:	27 fd       	sbrc	r18, 7
 e1a:	30 95       	com	r19
 e1c:	21 15       	cp	r18, r1
 e1e:	31 05       	cpc	r19, r1
 e20:	29 f4       	brne	.+10     	; 0xe2c <fgetc+0x46>
 e22:	40 62       	ori	r20, 0x20	; 32
 e24:	4b 83       	std	Y+3, r20	; 0x03
 e26:	2f ef       	ldi	r18, 0xFF	; 255
 e28:	3f ef       	ldi	r19, 0xFF	; 255
 e2a:	1b c0       	rjmp	.+54     	; 0xe62 <fgetc+0x7c>
 e2c:	31 96       	adiw	r30, 0x01	; 1
 e2e:	f9 83       	std	Y+1, r31	; 0x01
 e30:	e8 83       	st	Y, r30
 e32:	11 c0       	rjmp	.+34     	; 0xe56 <fgetc+0x70>
 e34:	ea 85       	ldd	r30, Y+10	; 0x0a
 e36:	fb 85       	ldd	r31, Y+11	; 0x0b
 e38:	ce 01       	movw	r24, r28
 e3a:	09 95       	icall
 e3c:	9c 01       	movw	r18, r24
 e3e:	97 ff       	sbrs	r25, 7
 e40:	0a c0       	rjmp	.+20     	; 0xe56 <fgetc+0x70>
 e42:	9b 81       	ldd	r25, Y+3	; 0x03
 e44:	2f 5f       	subi	r18, 0xFF	; 255
 e46:	3f 4f       	sbci	r19, 0xFF	; 255
 e48:	11 f0       	breq	.+4      	; 0xe4e <fgetc+0x68>
 e4a:	80 e2       	ldi	r24, 0x20	; 32
 e4c:	01 c0       	rjmp	.+2      	; 0xe50 <fgetc+0x6a>
 e4e:	80 e1       	ldi	r24, 0x10	; 16
 e50:	89 2b       	or	r24, r25
 e52:	8b 83       	std	Y+3, r24	; 0x03
 e54:	e8 cf       	rjmp	.-48     	; 0xe26 <fgetc+0x40>
 e56:	8e 81       	ldd	r24, Y+6	; 0x06
 e58:	9f 81       	ldd	r25, Y+7	; 0x07
 e5a:	01 96       	adiw	r24, 0x01	; 1
 e5c:	9f 83       	std	Y+7, r25	; 0x07
 e5e:	8e 83       	std	Y+6, r24	; 0x06
 e60:	30 e0       	ldi	r19, 0x00	; 0
 e62:	c9 01       	movw	r24, r18
 e64:	df 91       	pop	r29
 e66:	cf 91       	pop	r28
 e68:	08 95       	ret

00000e6a <_exit>:
 e6a:	f8 94       	cli

00000e6c <__stop_program>:
 e6c:	ff cf       	rjmp	.-2      	; 0xe6c <__stop_program>
