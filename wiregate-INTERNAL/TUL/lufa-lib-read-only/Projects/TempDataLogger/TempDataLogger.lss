
TempDataLogger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ca  00800100  000050c4  00005178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000050c4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000268  008001ca  008001ca  00005242  2**0
                  ALLOC
  3 .eeprom       00000001  00810000  00810000  00005242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00001fec  00000000  00000000  00005244  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000db4  00000000  00000000  00007230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000698  00000000  00000000  00007fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00001003  00000000  00000000  0000867c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000c7fd  00000000  00000000  0000967f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002cde  00000000  00000000  00015e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000916a  00000000  00000000  00018b5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000a10  00000000  00000000  00021cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000412b  00000000  00000000  000226d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006754  00000000  00000000  000267ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a40  00000000  00000000  0002cf53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
       0:	20 c1       	rjmp	.+576    	; 0x242 <__ctors_end>
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       2:	00 00       	nop
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       4:	3c c1       	rjmp	.+632    	; 0x27e <__bad_interrupt>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       6:	00 00       	nop
       8:	3a c1       	rjmp	.+628    	; 0x27e <__bad_interrupt>
       a:	00 00       	nop
       c:	38 c1       	rjmp	.+624    	; 0x27e <__bad_interrupt>
       e:	00 00       	nop
      10:	36 c1       	rjmp	.+620    	; 0x27e <__bad_interrupt>
      12:	00 00       	nop
      14:	34 c1       	rjmp	.+616    	; 0x27e <__bad_interrupt>
      16:	00 00       	nop
      18:	32 c1       	rjmp	.+612    	; 0x27e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	30 c1       	rjmp	.+608    	; 0x27e <__bad_interrupt>
      1e:	00 00       	nop
      20:	2e c1       	rjmp	.+604    	; 0x27e <__bad_interrupt>
      22:	00 00       	nop
      24:	2c c1       	rjmp	.+600    	; 0x27e <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 9c 1b 	jmp	0x3738	; 0x3738 <__vector_10>
      2c:	0c 94 5f 1b 	jmp	0x36be	; 0x36be <__vector_11>
      30:	26 c1       	rjmp	.+588    	; 0x27e <__bad_interrupt>
      32:	00 00       	nop
      34:	24 c1       	rjmp	.+584    	; 0x27e <__bad_interrupt>
      36:	00 00       	nop
      38:	22 c1       	rjmp	.+580    	; 0x27e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	20 c1       	rjmp	.+576    	; 0x27e <__bad_interrupt>
      3e:	00 00       	nop
      40:	1e c1       	rjmp	.+572    	; 0x27e <__bad_interrupt>
      42:	00 00       	nop
      44:	5c c2       	rjmp	.+1208   	; 0x4fe <__vector_17>
      46:	00 00       	nop
      48:	1a c1       	rjmp	.+564    	; 0x27e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	18 c1       	rjmp	.+560    	; 0x27e <__bad_interrupt>
      4e:	00 00       	nop
      50:	16 c1       	rjmp	.+556    	; 0x27e <__bad_interrupt>
      52:	00 00       	nop
      54:	14 c1       	rjmp	.+552    	; 0x27e <__bad_interrupt>
      56:	00 00       	nop
      58:	12 c1       	rjmp	.+548    	; 0x27e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	10 c1       	rjmp	.+544    	; 0x27e <__bad_interrupt>
      5e:	00 00       	nop
      60:	0e c1       	rjmp	.+540    	; 0x27e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c c1       	rjmp	.+536    	; 0x27e <__bad_interrupt>
      66:	00 00       	nop
      68:	0a c1       	rjmp	.+532    	; 0x27e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	08 c1       	rjmp	.+528    	; 0x27e <__bad_interrupt>
      6e:	00 00       	nop
      70:	06 c1       	rjmp	.+524    	; 0x27e <__bad_interrupt>
      72:	00 00       	nop
      74:	04 c1       	rjmp	.+520    	; 0x27e <__bad_interrupt>
      76:	00 00       	nop
      78:	02 c1       	rjmp	.+516    	; 0x27e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	00 c1       	rjmp	.+512    	; 0x27e <__bad_interrupt>
      7e:	00 00       	nop
      80:	fe c0       	rjmp	.+508    	; 0x27e <__bad_interrupt>
      82:	00 00       	nop
      84:	fc c0       	rjmp	.+504    	; 0x27e <__bad_interrupt>
      86:	00 00       	nop
      88:	fa c0       	rjmp	.+500    	; 0x27e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f8 c0       	rjmp	.+496    	; 0x27e <__bad_interrupt>
      8e:	00 00       	nop
      90:	f6 c0       	rjmp	.+492    	; 0x27e <__bad_interrupt>
      92:	00 00       	nop
      94:	f4 c0       	rjmp	.+488    	; 0x27e <__bad_interrupt>
      96:	00 00       	nop

00000098 <GenericReport>:
      98:	06 00 ff 09 01 a1 01 09 02 15 00 25 ff 75 08 95     ...........%.u..
      a8:	07 81 02 09 03 15 00 25 ff 75 08 95 07 91 02 c0     .......%.u......

000000b8 <DeviceDescriptor>:
      b8:	12 01 10 01 00 00 00 08 eb 03 63 20 01 00 01 02     ..........c ....
      c8:	dc 01                                               ..

000000ca <ConfigurationDescriptor>:
      ca:	09 02 39 00 02 01 00 c0 32 09 04 00 00 02 08 06     ..9.....2.......
      da:	50 00 07 05 83 02 40 00 01 07 05 04 02 40 00 01     P.....@......@..
      ea:	09 04 01 00 01 03 00 00 00 09 21 11 01 00 01 22     ..........!...."
      fa:	20 00 07 05 81 03 10 00 01                           ........

00000103 <LanguageString>:
     103:	04 03 09 04                                         ....

00000107 <ManufacturerString>:
     107:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     117:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000121 <ProductString>:
     121:	2e 03 54 00 65 00 6d 00 70 00 65 00 72 00 61 00     ..T.e.m.p.e.r.a.
     131:	74 00 75 00 72 00 65 00 20 00 44 00 61 00 74 00     t.u.r.e. .D.a.t.
     141:	61 00 6c 00 6f 00 67 00 67 00 65 00 72 00 00 00     a.l.o.g.g.e.r...

00000151 <Temperature_Lookup>:
     151:	b4 03 b0 03 ab 03 a6 03 a0 03 9a 03 94 03 8e 03     ................
     161:	88 03 81 03 7a 03 73 03 6b 03 63 03 5b 03 53 03     ....z.s.k.c.[.S.
     171:	4a 03 41 03 38 03 2f 03 25 03 1b 03 11 03 07 03     J.A.8./.%.......
     181:	fc 02 f1 02 e6 02 db 02 d0 02 c4 02 b8 02 ac 02     ................
     191:	a0 02 94 02 88 02 7c 02 6f 02 63 02 56 02 4a 02     ......|.o.c.V.J.
     1a1:	3d 02 31 02 25 02 18 02 0c 02 00 02 f3 01 e7 01     =.1.%...........
     1b1:	db 01 cf 01 c4 01 b8 01 ac 01 a1 01 96 01 8b 01     ................
     1c1:	80 01 76 01 6b 01 61 01 57 01 4d 01 44 01 3a 01     ..v.k.a.W.M.D.:.
     1d1:	31 01 28 01 1f 01 17 01 0f 01 06 01 fe 00 f7 00     1.(.............
     1e1:	ef 00 e8 00 e1 00 da 00 d3 00 cd 00 c7 00 c0 00     ................
     1f1:	ba 00 b5 00 af 00 aa 00 a4 00 9f 00 9a 00 96 00     ................
     201:	91 00 8c 00 88 00 84 00 80 00 7c 00 78 00 74 00     ..........|.x.t.
     211:	71 00 6d 00 6a 00 67 00 64 00 61 00 5e 00 5b 00     q.m.j.g.d.a.^.[.
     221:	58 00 55 00 53 00 50 00 4e 00 4c 00 49 00 47 00     X.U.S.P.N.L.I.G.
     231:	45 00 43 00 41 00 3f 00 3d 00 3c 00 3a 00 38 00     E.C.A.?.=.<.:.8.
     241:	00                                                  .

00000242 <__ctors_end>:
     242:	11 24       	eor	r1, r1
     244:	1f be       	out	0x3f, r1	; 63
     246:	cf ef       	ldi	r28, 0xFF	; 255
     248:	d0 e2       	ldi	r29, 0x20	; 32
     24a:	de bf       	out	0x3e, r29	; 62
     24c:	cd bf       	out	0x3d, r28	; 61

0000024e <__do_copy_data>:
     24e:	11 e0       	ldi	r17, 0x01	; 1
     250:	a0 e0       	ldi	r26, 0x00	; 0
     252:	b1 e0       	ldi	r27, 0x01	; 1
     254:	e4 ec       	ldi	r30, 0xC4	; 196
     256:	f0 e5       	ldi	r31, 0x50	; 80
     258:	00 e0       	ldi	r16, 0x00	; 0
     25a:	0b bf       	out	0x3b, r16	; 59
     25c:	02 c0       	rjmp	.+4      	; 0x262 <__do_copy_data+0x14>
     25e:	07 90       	elpm	r0, Z+
     260:	0d 92       	st	X+, r0
     262:	aa 3c       	cpi	r26, 0xCA	; 202
     264:	b1 07       	cpc	r27, r17
     266:	d9 f7       	brne	.-10     	; 0x25e <__do_copy_data+0x10>

00000268 <__do_clear_bss>:
     268:	14 e0       	ldi	r17, 0x04	; 4
     26a:	aa ec       	ldi	r26, 0xCA	; 202
     26c:	b1 e0       	ldi	r27, 0x01	; 1
     26e:	01 c0       	rjmp	.+2      	; 0x272 <.do_clear_bss_start>

00000270 <.do_clear_bss_loop>:
     270:	1d 92       	st	X+, r1

00000272 <.do_clear_bss_start>:
     272:	a2 33       	cpi	r26, 0x32	; 50
     274:	b1 07       	cpc	r27, r17
     276:	e1 f7       	brne	.-8      	; 0x270 <.do_clear_bss_loop>
     278:	25 d1       	rcall	.+586    	; 0x4c4 <main>
     27a:	0c 94 60 28 	jmp	0x50c0	; 0x50c0 <_exit>

0000027e <__bad_interrupt>:
     27e:	c0 ce       	rjmp	.-640    	; 0x0 <__vectors>

00000280 <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
     280:	0f 93       	push	r16
     282:	1f 93       	push	r17
	Device_Report_t* ReportParams = (Device_Report_t*)ReportData;
     284:	89 01       	movw	r16, r18
	
	DS1307_SetTimeDate(&ReportParams->TimeDate);
     286:	c9 01       	movw	r24, r18
     288:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DS1307_SetTimeDate>

	/* If the logging interval has changed from its current value, write it to EEPROM */
	if (LoggingInterval500MS_SRAM != ReportParams->LogInterval500MS)
     28c:	f8 01       	movw	r30, r16
     28e:	66 81       	ldd	r22, Z+6	; 0x06
     290:	80 91 ca 01 	lds	r24, 0x01CA
     294:	86 17       	cp	r24, r22
     296:	31 f0       	breq	.+12     	; 0x2a4 <CALLBACK_HID_Device_ProcessHIDReport+0x24>
	{
		LoggingInterval500MS_SRAM = ReportParams->LogInterval500MS;
     298:	60 93 ca 01 	sts	0x01CA, r22
		eeprom_update_byte(&LoggingInterval500MS_EEPROM, LoggingInterval500MS_SRAM);
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <__eeupd_byte_usb1287>
	}
}
     2a4:	1f 91       	pop	r17
     2a6:	0f 91       	pop	r16
     2a8:	08 95       	ret

000002aa <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     2aa:	ef 92       	push	r14
     2ac:	ff 92       	push	r15
     2ae:	0f 93       	push	r16
     2b0:	1f 93       	push	r17
     2b2:	78 01       	movw	r14, r16
	Device_Report_t* ReportParams = (Device_Report_t*)ReportData;
     2b4:	89 01       	movw	r16, r18

	DS1307_GetTimeDate(&ReportParams->TimeDate);
     2b6:	c9 01       	movw	r24, r18
     2b8:	ed d7       	rcall	.+4058   	; 0x1294 <DS1307_GetTimeDate>

	ReportParams->LogInterval500MS = LoggingInterval500MS_SRAM;
     2ba:	80 91 ca 01 	lds	r24, 0x01CA
     2be:	f8 01       	movw	r30, r16
     2c0:	86 83       	std	Z+6, r24	; 0x06

	*ReportSize = sizeof(Device_Report_t);
     2c2:	87 e0       	ldi	r24, 0x07	; 7
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	f7 01       	movw	r30, r14
     2c8:	91 83       	std	Z+1, r25	; 0x01
     2ca:	80 83       	st	Z, r24
	return true;
}
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	1f 91       	pop	r17
     2d0:	0f 91       	pop	r16
     2d2:	ff 90       	pop	r15
     2d4:	ef 90       	pop	r14
     2d6:	08 95       	ret

000002d8 <CALLBACK_MS_Device_SCSICommandReceived>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     2d8:	2b b1       	in	r18, 0x0b	; 11
     2da:	2f 70       	andi	r18, 0x0F	; 15
     2dc:	20 62       	ori	r18, 0x20	; 32
     2de:	2b b9       	out	0x0b, r18	; 11
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
     2e0:	af d6       	rcall	.+3422   	; 0x1040 <SCSI_DecodeSCSICommand>
     2e2:	9b b1       	in	r25, 0x0b	; 11
     2e4:	9f 70       	andi	r25, 0x0F	; 15
     2e6:	90 66       	ori	r25, 0x60	; 96
     2e8:	9b b9       	out	0x0b, r25	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);

	return CommandSuccess;
}
     2ea:	08 95       	ret

000002ec <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
     2ec:	80 e4       	ldi	r24, 0x40	; 64
     2ee:	91 e0       	ldi	r25, 0x01	; 1
     2f0:	0e 94 ba 23 	call	0x4774	; 0x4774 <MS_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Generic_HID_Interface);
     2f4:	87 e7       	ldi	r24, 0x77	; 119
     2f6:	91 e0       	ldi	r25, 0x01	; 1
     2f8:	0c 94 1d 21 	jmp	0x423a	; 0x423a <HID_Device_ProcessControlRequest>

000002fc <EVENT_USB_Device_ConfigurationChanged>:
	OpenLogFile();
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     2fc:	0f 93       	push	r16
     2fe:	1f 93       	push	r17
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Generic_HID_Interface);
     300:	87 e7       	ldi	r24, 0x77	; 119
     302:	91 e0       	ldi	r25, 0x01	; 1
     304:	0e 94 e5 20 	call	0x41ca	; 0x41ca <HID_Device_ConfigureEndpoints>
     308:	08 2f       	mov	r16, r24
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     30a:	80 e4       	ldi	r24, 0x40	; 64
     30c:	91 e0       	ldi	r25, 0x01	; 1
     30e:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <MS_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     312:	10 e0       	ldi	r17, 0x00	; 0
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	08 23       	and	r16, r24
     318:	19 23       	and	r17, r25
     31a:	00 ff       	sbrs	r16, 0
     31c:	02 c0       	rjmp	.+4      	; 0x322 <EVENT_USB_Device_ConfigurationChanged+0x26>
     31e:	90 e6       	ldi	r25, 0x60	; 96
     320:	01 c0       	rjmp	.+2      	; 0x324 <EVENT_USB_Device_ConfigurationChanged+0x28>
     322:	90 e9       	ldi	r25, 0x90	; 144
     324:	8b b1       	in	r24, 0x0b	; 11
     326:	8f 70       	andi	r24, 0x0F	; 15
     328:	98 2b       	or	r25, r24
     32a:	9b b9       	out	0x0b, r25	; 11
}
     32c:	1f 91       	pop	r17
     32e:	0f 91       	pop	r16
     330:	08 95       	ret

00000332 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     332:	84 b7       	in	r24, 0x34	; 52
     334:	87 7f       	andi	r24, 0xF7	; 247
     336:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     338:	88 e1       	ldi	r24, 0x18	; 24
     33a:	0f b6       	in	r0, 0x3f	; 63
     33c:	f8 94       	cli
     33e:	80 93 60 00 	sts	0x0060, r24
     342:	10 92 60 00 	sts	0x0060, r1
     346:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	80 e8       	ldi	r24, 0x80	; 128
     34c:	0f b6       	in	r0, 0x3f	; 63
     34e:	f8 94       	cli
     350:	80 93 61 00 	sts	0x0061, r24
     354:	90 93 61 00 	sts	0x0061, r25
     358:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     35a:	8a b1       	in	r24, 0x0a	; 10
     35c:	80 6f       	ori	r24, 0xF0	; 240
     35e:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     360:	8b b1       	in	r24, 0x0b	; 11
     362:	8f 70       	andi	r24, 0x0F	; 15
     364:	8b b9       	out	0x0b, r24	; 11
			 *                         \c SPI_SCK_*, \c SPI_SAMPLE_*, \c SPI_ORDER_* and \c SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
     366:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
     368:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
     36a:	84 b1       	in	r24, 0x04	; 4
     36c:	86 60       	ori	r24, 0x06	; 6
     36e:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
     370:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
     372:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     374:	8d b5       	in	r24, 0x2d	; 45
     376:	81 60       	ori	r24, 0x01	; 1
     378:	8d bd       	out	0x2d, r24	; 45
				else
				  SPSR &= ~(1 << SPI2X);

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
     37a:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
     37c:	8c e5       	ldi	r24, 0x5C	; 92
     37e:	8c bd       	out	0x2c, r24	; 44
			 *  \param[in] Mode  Mask of ADC prescale and mode settings.
			 */
			static inline void ADC_Init(uint8_t Mode) ATTR_ALWAYS_INLINE;
			static inline void ADC_Init(uint8_t Mode)
			{
				ADCSRA = ((1 << ADEN) | Mode);
     380:	87 ea       	ldi	r24, 0xA7	; 167
     382:	80 93 7a 00 	sts	0x007A, r24
			static inline void ADC_SetupChannel(const uint8_t ChannelIndex)
			{
				#if (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) || \
					 defined(__AVR_AT90USB1287__) || defined(__AVR_AT90USB647__) || \
					 defined(__AVR_ATmega32U6__))
				DDRF  &= ~(1 << ChannelIndex);
     386:	80 98       	cbi	0x10, 0	; 16
				DIDR0 |=  (1 << ChannelIndex);
     388:	ee e7       	ldi	r30, 0x7E	; 126
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	80 81       	ld	r24, Z
     38e:	81 60       	ori	r24, 0x01	; 1
     390:	80 83       	st	Z, r24
			/** Initializes the dataflash driver so that commands and data may be sent to an attached dataflash IC.
			 *  The microcontroller's SPI driver MUST be initialized before any of the dataflash commands are used.
			 */
			static inline void Dataflash_Init(void)
			{
				DATAFLASH_CHIPCS_DDR  |= DATAFLASH_CHIPCS_MASK;
     392:	8d b1       	in	r24, 0x0d	; 13
     394:	83 60       	ori	r24, 0x03	; 3
     396:	8d b9       	out	0x0d, r24	; 13
				DATAFLASH_CHIPCS_PORT |= DATAFLASH_CHIPCS_MASK;
     398:	8e b1       	in	r24, 0x0e	; 14
     39a:	83 60       	ori	r24, 0x03	; 3
     39c:	8e b9       	out	0x0e, r24	; 14
	LEDs_Init();
	SPI_Init(SPI_SPEED_FCPU_DIV_2 | SPI_SCK_LEAD_FALLING | SPI_SAMPLE_TRAILING | SPI_MODE_MASTER);
	ADC_Init(ADC_FREE_RUNNING | ADC_PRESCALE_128);
	Temperature_Init();
	Dataflash_Init();
	USB_Init();
     39e:	0e 94 49 1b 	call	0x3692	; 0x3692 <USB_Init>
			 *  \param[in] BitLength  Length of the bits sent on the bus.
			 */
			static inline void TWI_Init(const uint8_t Prescale, const uint8_t BitLength) ATTR_ALWAYS_INLINE;
			static inline void TWI_Init(const uint8_t Prescale, const uint8_t BitLength)
			{
				TWCR |= (1 << TWEN);
     3a2:	ec eb       	ldi	r30, 0xBC	; 188
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
     3a6:	80 81       	ld	r24, Z
     3a8:	84 60       	ori	r24, 0x04	; 4
     3aa:	80 83       	st	Z, r24
				TWSR  = Prescale;
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	80 93 b9 00 	sts	0x00B9, r24
				TWBR  = BitLength;
     3b2:	84 e1       	ldi	r24, 0x14	; 20
     3b4:	80 93 b8 00 	sts	0x00B8, r24
	TWI_Init(TWI_BIT_PRESCALE_4, (F_CPU / 4 / 50000) / 2);

	/* 500ms logging interval timer configuration */
	OCR1A   = (((F_CPU / 1024) / 2) - 1);
     3b8:	81 e4       	ldi	r24, 0x41	; 65
     3ba:	9f e0       	ldi	r25, 0x0F	; 15
     3bc:	90 93 89 00 	sts	0x0089, r25
     3c0:	80 93 88 00 	sts	0x0088, r24
	TCCR1B  = (1 << WGM12) | (1 << CS12) | (1 << CS10);
     3c4:	8d e0       	ldi	r24, 0x0D	; 13
     3c6:	80 93 81 00 	sts	0x0081, r24
	TIMSK1  = (1 << OCIE1A);
     3ca:	82 e0       	ldi	r24, 0x02	; 2
     3cc:	80 93 6f 00 	sts	0x006F, r24

	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
}
     3d0:	26 c3       	rjmp	.+1612   	; 0xa1e <DataflashManager_ResetDataflashProtections>

000003d2 <CloseLogFile>:
	f_lseek(&TempLogFile, TempLogFile.fsize);
}

/** Closes the open data log file on the Dataflash's FAT formatted partition */
void CloseLogFile(void)
{
     3d2:	0f 93       	push	r16
     3d4:	1f 93       	push	r17
	/* Sync any data waiting to be written, unmount the storage device */
	f_sync(&TempLogFile);
     3d6:	0b ef       	ldi	r16, 0xFB	; 251
     3d8:	13 e0       	ldi	r17, 0x03	; 3
     3da:	c8 01       	movw	r24, r16
     3dc:	0e 94 11 14 	call	0x2822	; 0x2822 <f_sync>
	f_close(&TempLogFile);
     3e0:	c8 01       	movw	r24, r16
     3e2:	0e 94 c9 14 	call	0x2992	; 0x2992 <f_close>
}
     3e6:	1f 91       	pop	r17
     3e8:	0f 91       	pop	r16
     3ea:	08 95       	ret

000003ec <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     3ec:	8b b1       	in	r24, 0x0b	; 11
     3ee:	8f 70       	andi	r24, 0x0F	; 15
     3f0:	80 6a       	ori	r24, 0xA0	; 160
     3f2:	8b b9       	out	0x0b, r24	; 11
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	/* Close the log file so that the host has exclusive filesystem access */
	CloseLogFile();
}
     3f4:	ee cf       	rjmp	.-36     	; 0x3d2 <CloseLogFile>

000003f6 <OpenLogFile>:
	}
}

/** Opens the log file on the Dataflash's FAT formatted partition according to the current date */
void OpenLogFile(void)
{
     3f6:	ef 92       	push	r14
     3f8:	ff 92       	push	r15
     3fa:	0f 93       	push	r16
     3fc:	1f 93       	push	r17
     3fe:	df 93       	push	r29
     400:	cf 93       	push	r28
     402:	cd b7       	in	r28, 0x3d	; 61
     404:	de b7       	in	r29, 0x3e	; 62
     406:	62 97       	sbiw	r28, 0x12	; 18
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	f8 94       	cli
     40c:	de bf       	out	0x3e, r29	; 62
     40e:	0f be       	out	0x3f, r0	; 63
     410:	cd bf       	out	0x3d, r28	; 61
	char LogFileName[12];

	/* Get the current date for the filename as "DDMMYY.csv" */
	TimeDate_t CurrentTimeDate;
	DS1307_GetTimeDate(&CurrentTimeDate);
     412:	ce 01       	movw	r24, r28
     414:	01 96       	adiw	r24, 0x01	; 1
     416:	3e d7       	rcall	.+3708   	; 0x1294 <DS1307_GetTimeDate>
	sprintf(LogFileName, "%02d%02d%02d.csv", CurrentTimeDate.Day, CurrentTimeDate.Month, CurrentTimeDate.Year);
     418:	8d b7       	in	r24, 0x3d	; 61
     41a:	9e b7       	in	r25, 0x3e	; 62
     41c:	0a 97       	sbiw	r24, 0x0a	; 10
     41e:	0f b6       	in	r0, 0x3f	; 63
     420:	f8 94       	cli
     422:	9e bf       	out	0x3e, r25	; 62
     424:	0f be       	out	0x3f, r0	; 63
     426:	8d bf       	out	0x3d, r24	; 61
     428:	ed b7       	in	r30, 0x3d	; 61
     42a:	fe b7       	in	r31, 0x3e	; 62
     42c:	31 96       	adiw	r30, 0x01	; 1
     42e:	87 e0       	ldi	r24, 0x07	; 7
     430:	e8 2e       	mov	r14, r24
     432:	f1 2c       	mov	r15, r1
     434:	ec 0e       	add	r14, r28
     436:	fd 1e       	adc	r15, r29
     438:	ad b7       	in	r26, 0x3d	; 61
     43a:	be b7       	in	r27, 0x3e	; 62
     43c:	12 96       	adiw	r26, 0x02	; 2
     43e:	fc 92       	st	X, r15
     440:	ee 92       	st	-X, r14
     442:	11 97       	sbiw	r26, 0x01	; 1
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	91 e0       	ldi	r25, 0x01	; 1
     448:	93 83       	std	Z+3, r25	; 0x03
     44a:	82 83       	std	Z+2, r24	; 0x02
     44c:	8c 81       	ldd	r24, Y+4	; 0x04
     44e:	84 83       	std	Z+4, r24	; 0x04
     450:	15 82       	std	Z+5, r1	; 0x05
     452:	8d 81       	ldd	r24, Y+5	; 0x05
     454:	86 83       	std	Z+6, r24	; 0x06
     456:	17 82       	std	Z+7, r1	; 0x07
     458:	8e 81       	ldd	r24, Y+6	; 0x06
     45a:	80 87       	std	Z+8, r24	; 0x08
     45c:	11 86       	std	Z+9, r1	; 0x09
     45e:	0e 94 7d 25 	call	0x4afa	; 0x4afa <sprintf>

	/* Mount the storage device, open the file */
	f_mount(0, &DiskFATState);
     462:	8d b7       	in	r24, 0x3d	; 61
     464:	9e b7       	in	r25, 0x3e	; 62
     466:	0a 96       	adiw	r24, 0x0a	; 10
     468:	0f b6       	in	r0, 0x3f	; 63
     46a:	f8 94       	cli
     46c:	9e bf       	out	0x3e, r25	; 62
     46e:	0f be       	out	0x3f, r0	; 63
     470:	8d bf       	out	0x3d, r24	; 61
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	6d ec       	ldi	r22, 0xCD	; 205
     476:	71 e0       	ldi	r23, 0x01	; 1
     478:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <f_mount>
	f_open(&TempLogFile, LogFileName, FA_OPEN_ALWAYS | FA_WRITE);
     47c:	0b ef       	ldi	r16, 0xFB	; 251
     47e:	13 e0       	ldi	r17, 0x03	; 3
     480:	c8 01       	movw	r24, r16
     482:	b7 01       	movw	r22, r14
     484:	42 e1       	ldi	r20, 0x12	; 18
     486:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <f_open>
	f_lseek(&TempLogFile, TempLogFile.fsize);
     48a:	40 91 05 04 	lds	r20, 0x0405
     48e:	50 91 06 04 	lds	r21, 0x0406
     492:	60 91 07 04 	lds	r22, 0x0407
     496:	70 91 08 04 	lds	r23, 0x0408
     49a:	c8 01       	movw	r24, r16
     49c:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <f_lseek>
}
     4a0:	62 96       	adiw	r28, 0x12	; 18
     4a2:	0f b6       	in	r0, 0x3f	; 63
     4a4:	f8 94       	cli
     4a6:	de bf       	out	0x3e, r29	; 62
     4a8:	0f be       	out	0x3f, r0	; 63
     4aa:	cd bf       	out	0x3d, r28	; 61
     4ac:	cf 91       	pop	r28
     4ae:	df 91       	pop	r29
     4b0:	1f 91       	pop	r17
     4b2:	0f 91       	pop	r16
     4b4:	ff 90       	pop	r15
     4b6:	ef 90       	pop	r14
     4b8:	08 95       	ret

000004ba <EVENT_USB_Device_Disconnect>:
     4ba:	8b b1       	in	r24, 0x0b	; 11
     4bc:	8f 70       	andi	r24, 0x0F	; 15
     4be:	80 61       	ori	r24, 0x10	; 16
     4c0:	8b b9       	out	0x0b, r24	; 11
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);

	/* Mount and open the log file on the Dataflash FAT partition */
	OpenLogFile();
}
     4c2:	99 cf       	rjmp	.-206    	; 0x3f6 <OpenLogFile>

000004c4 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     4c4:	36 df       	rcall	.-404    	; 0x332 <SetupHardware>

	/* Fetch logging interval from EEPROM */
	LoggingInterval500MS_SRAM = eeprom_read_byte(&LoggingInterval500MS_EEPROM);
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	0e 94 a6 27 	call	0x4f4c	; 0x4f4c <__eerd_byte_usb1287>
     4ce:	80 93 ca 01 	sts	0x01CA, r24

	/* Check if the logging interval is invalid (0xFF) indicating that the EEPROM is blank */
	if (LoggingInterval500MS_SRAM == 0xFF)
     4d2:	8f 3f       	cpi	r24, 0xFF	; 255
     4d4:	19 f4       	brne	.+6      	; 0x4dc <main+0x18>
	  LoggingInterval500MS_SRAM = DEFAULT_LOG_INTERVAL;
     4d6:	84 e1       	ldi	r24, 0x14	; 20
     4d8:	80 93 ca 01 	sts	0x01CA, r24

	/* Mount and open the log file on the Dataflash FAT partition */
	OpenLogFile();
     4dc:	8c df       	rcall	.-232    	; 0x3f6 <OpenLogFile>
     4de:	8b b1       	in	r24, 0x0b	; 11
     4e0:	8f 70       	andi	r24, 0x0F	; 15
     4e2:	80 61       	ori	r24, 0x10	; 16
     4e4:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     4e6:	78 94       	sei

	for (;;)
	{
		MS_Device_USBTask(&Disk_MS_Interface);
     4e8:	80 e4       	ldi	r24, 0x40	; 64
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	0e 94 59 22 	call	0x44b2	; 0x44b2 <MS_Device_USBTask>
		HID_Device_USBTask(&Generic_HID_Interface);
     4f0:	87 e7       	ldi	r24, 0x77	; 119
     4f2:	91 e0       	ldi	r25, 0x01	; 1
     4f4:	0e 94 2b 20 	call	0x4056	; 0x4056 <HID_Device_USBTask>
		USB_USBTask();
     4f8:	0e 94 19 20 	call	0x4032	; 0x4032 <USB_USBTask>
     4fc:	f5 cf       	rjmp	.-22     	; 0x4e8 <main+0x24>

000004fe <__vector_17>:
static FIL TempLogFile;


/** ISR to handle the 500ms ticks for sampling and data logging */
ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
     4fe:	1f 92       	push	r1
     500:	0f 92       	push	r0
     502:	0f b6       	in	r0, 0x3f	; 63
     504:	0f 92       	push	r0
     506:	0b b6       	in	r0, 0x3b	; 59
     508:	0f 92       	push	r0
     50a:	11 24       	eor	r1, r1
     50c:	8f 92       	push	r8
     50e:	9f 92       	push	r9
     510:	af 92       	push	r10
     512:	bf 92       	push	r11
     514:	cf 92       	push	r12
     516:	df 92       	push	r13
     518:	ef 92       	push	r14
     51a:	ff 92       	push	r15
     51c:	0f 93       	push	r16
     51e:	2f 93       	push	r18
     520:	3f 93       	push	r19
     522:	4f 93       	push	r20
     524:	5f 93       	push	r21
     526:	6f 93       	push	r22
     528:	7f 93       	push	r23
     52a:	8f 93       	push	r24
     52c:	9f 93       	push	r25
     52e:	af 93       	push	r26
     530:	bf 93       	push	r27
     532:	ef 93       	push	r30
     534:	ff 93       	push	r31
     536:	df 93       	push	r29
     538:	cf 93       	push	r28
     53a:	cd b7       	in	r28, 0x3d	; 61
     53c:	de b7       	in	r29, 0x3e	; 62
     53e:	cc 56       	subi	r28, 0x6C	; 108
     540:	d0 40       	sbci	r29, 0x00	; 0
     542:	de bf       	out	0x3e, r29	; 62
     544:	cd bf       	out	0x3d, r28	; 61
			}

			static inline uint8_t LEDs_GetLEDs(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t LEDs_GetLEDs(void)
			{
				return (PORTD & LEDS_ALL_LEDS);
     546:	0b b1       	in	r16, 0x0b	; 11
	uint8_t LEDMask = LEDs_GetLEDs();

	/* Check to see if the logging interval has expired */
	if (CurrentLoggingTicks++ < LoggingInterval500MS_SRAM)
     548:	80 91 cb 01 	lds	r24, 0x01CB
     54c:	90 91 cc 01 	lds	r25, 0x01CC
     550:	20 91 ca 01 	lds	r18, 0x01CA
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	90 93 cc 01 	sts	0x01CC, r25
     55c:	80 93 cb 01 	sts	0x01CB, r24
     560:	01 97       	sbiw	r24, 0x01	; 1
     562:	82 17       	cp	r24, r18
     564:	93 07       	cpc	r25, r19
     566:	08 f4       	brcc	.+2      	; 0x56a <__vector_17+0x6c>
     568:	62 c0       	rjmp	.+196    	; 0x62e <__vector_17+0x130>
	  return;

	/* Reset log tick counter to prepare for next logging interval */
	CurrentLoggingTicks = 0;
     56a:	10 92 cc 01 	sts	0x01CC, r1
     56e:	10 92 cb 01 	sts	0x01CB, r1
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     572:	8b b1       	in	r24, 0x0b	; 11
     574:	8f 70       	andi	r24, 0x0F	; 15
     576:	80 62       	ori	r24, 0x20	; 32
     578:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

	/* Only log when not connected to a USB host */
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     57a:	8e b3       	in	r24, 0x1e	; 30
     57c:	88 23       	and	r24, r24
     57e:	09 f0       	breq	.+2      	; 0x582 <__vector_17+0x84>
     580:	51 c0       	rjmp	.+162    	; 0x624 <__vector_17+0x126>
	{
		TimeDate_t CurrentTimeDate;
		DS1307_GetTimeDate(&CurrentTimeDate);
     582:	ce 01       	movw	r24, r28
     584:	03 96       	adiw	r24, 0x03	; 3
     586:	86 d6       	rcall	.+3340   	; 0x1294 <DS1307_GetTimeDate>

		char     LineBuffer[100];
		uint16_t BytesWritten;

		BytesWritten = sprintf(LineBuffer, "%02d/%02d/20%02d, %02d:%02d:%02d, %d Degrees\r\n",
     588:	fe 80       	ldd	r15, Y+6	; 0x06
     58a:	ef 80       	ldd	r14, Y+7	; 0x07
     58c:	d8 84       	ldd	r13, Y+8	; 0x08
     58e:	cb 80       	ldd	r12, Y+3	; 0x03
     590:	bc 80       	ldd	r11, Y+4	; 0x04
     592:	ad 80       	ldd	r10, Y+5	; 0x05
     594:	0e 94 f5 23 	call	0x47ea	; 0x47ea <Temperature_GetTemperature>
     598:	2d b7       	in	r18, 0x3d	; 61
     59a:	3e b7       	in	r19, 0x3e	; 62
     59c:	22 51       	subi	r18, 0x12	; 18
     59e:	30 40       	sbci	r19, 0x00	; 0
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	f8 94       	cli
     5a4:	3e bf       	out	0x3e, r19	; 62
     5a6:	0f be       	out	0x3f, r0	; 63
     5a8:	2d bf       	out	0x3d, r18	; 61
     5aa:	ed b7       	in	r30, 0x3d	; 61
     5ac:	fe b7       	in	r31, 0x3e	; 62
     5ae:	31 96       	adiw	r30, 0x01	; 1
     5b0:	99 e0       	ldi	r25, 0x09	; 9
     5b2:	89 2e       	mov	r8, r25
     5b4:	91 2c       	mov	r9, r1
     5b6:	8c 0e       	add	r8, r28
     5b8:	9d 1e       	adc	r9, r29
     5ba:	ad b7       	in	r26, 0x3d	; 61
     5bc:	be b7       	in	r27, 0x3e	; 62
     5be:	12 96       	adiw	r26, 0x02	; 2
     5c0:	9c 92       	st	X, r9
     5c2:	8e 92       	st	-X, r8
     5c4:	11 97       	sbiw	r26, 0x01	; 1
     5c6:	21 e1       	ldi	r18, 0x11	; 17
     5c8:	31 e0       	ldi	r19, 0x01	; 1
     5ca:	33 83       	std	Z+3, r19	; 0x03
     5cc:	22 83       	std	Z+2, r18	; 0x02
     5ce:	f4 82       	std	Z+4, r15	; 0x04
     5d0:	15 82       	std	Z+5, r1	; 0x05
     5d2:	e6 82       	std	Z+6, r14	; 0x06
     5d4:	17 82       	std	Z+7, r1	; 0x07
     5d6:	d0 86       	std	Z+8, r13	; 0x08
     5d8:	11 86       	std	Z+9, r1	; 0x09
     5da:	c2 86       	std	Z+10, r12	; 0x0a
     5dc:	13 86       	std	Z+11, r1	; 0x0b
     5de:	b4 86       	std	Z+12, r11	; 0x0c
     5e0:	15 86       	std	Z+13, r1	; 0x0d
     5e2:	a6 86       	std	Z+14, r10	; 0x0e
     5e4:	17 86       	std	Z+15, r1	; 0x0f
     5e6:	99 27       	eor	r25, r25
     5e8:	87 fd       	sbrc	r24, 7
     5ea:	90 95       	com	r25
     5ec:	91 8b       	std	Z+17, r25	; 0x11
     5ee:	80 8b       	std	Z+16, r24	; 0x10
     5f0:	0e 94 7d 25 	call	0x4afa	; 0x4afa <sprintf>
     5f4:	ac 01       	movw	r20, r24
     5f6:	89 83       	std	Y+1, r24	; 0x01
     5f8:	5a 83       	std	Y+2, r21	; 0x02
		                       CurrentTimeDate.Day, CurrentTimeDate.Month, CurrentTimeDate.Year,
		                       CurrentTimeDate.Hour, CurrentTimeDate.Minute, CurrentTimeDate.Second,
		                       Temperature_GetTemperature());

		f_write(&TempLogFile, LineBuffer, BytesWritten, &BytesWritten);
     5fa:	2d b7       	in	r18, 0x3d	; 61
     5fc:	3e b7       	in	r19, 0x3e	; 62
     5fe:	2e 5e       	subi	r18, 0xEE	; 238
     600:	3f 4f       	sbci	r19, 0xFF	; 255
     602:	0f b6       	in	r0, 0x3f	; 63
     604:	f8 94       	cli
     606:	3e bf       	out	0x3e, r19	; 62
     608:	0f be       	out	0x3f, r0	; 63
     60a:	2d bf       	out	0x3d, r18	; 61
     60c:	8b ef       	ldi	r24, 0xFB	; 251
     60e:	93 e0       	ldi	r25, 0x03	; 3
     610:	b4 01       	movw	r22, r8
     612:	9e 01       	movw	r18, r28
     614:	2f 5f       	subi	r18, 0xFF	; 255
     616:	3f 4f       	sbci	r19, 0xFF	; 255
     618:	0e 94 1f 11 	call	0x223e	; 0x223e <f_write>
		f_sync(&TempLogFile);
     61c:	8b ef       	ldi	r24, 0xFB	; 251
     61e:	93 e0       	ldi	r25, 0x03	; 3
     620:	0e 94 11 14 	call	0x2822	; 0x2822 <f_sync>
     624:	8b b1       	in	r24, 0x0b	; 11
     626:	00 7f       	andi	r16, 0xF0	; 240
     628:	8f 70       	andi	r24, 0x0F	; 15
     62a:	08 2b       	or	r16, r24
     62c:	0b b9       	out	0x0b, r16	; 11
	}

	LEDs_SetAllLEDs(LEDMask);
}
     62e:	c4 59       	subi	r28, 0x94	; 148
     630:	df 4f       	sbci	r29, 0xFF	; 255
     632:	de bf       	out	0x3e, r29	; 62
     634:	cd bf       	out	0x3d, r28	; 61
     636:	cf 91       	pop	r28
     638:	df 91       	pop	r29
     63a:	ff 91       	pop	r31
     63c:	ef 91       	pop	r30
     63e:	bf 91       	pop	r27
     640:	af 91       	pop	r26
     642:	9f 91       	pop	r25
     644:	8f 91       	pop	r24
     646:	7f 91       	pop	r23
     648:	6f 91       	pop	r22
     64a:	5f 91       	pop	r21
     64c:	4f 91       	pop	r20
     64e:	3f 91       	pop	r19
     650:	2f 91       	pop	r18
     652:	0f 91       	pop	r16
     654:	ff 90       	pop	r15
     656:	ef 90       	pop	r14
     658:	df 90       	pop	r13
     65a:	cf 90       	pop	r12
     65c:	bf 90       	pop	r11
     65e:	af 90       	pop	r10
     660:	9f 90       	pop	r9
     662:	8f 90       	pop	r8
     664:	0f 90       	pop	r0
     666:	0b be       	out	0x3b, r0	; 59
     668:	0f 90       	pop	r0
     66a:	0f be       	out	0x3f, r0	; 63
     66c:	0f 90       	pop	r0
     66e:	1f 90       	pop	r1
     670:	18 95       	reti

00000672 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     672:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     674:	93 30       	cpi	r25, 0x03	; 3
     676:	b1 f0       	breq	.+44     	; 0x6a4 <CALLBACK_USB_GetDescriptor+0x32>
     678:	94 30       	cpi	r25, 0x04	; 4
     67a:	28 f4       	brcc	.+10     	; 0x686 <CALLBACK_USB_GetDescriptor+0x14>
     67c:	91 30       	cpi	r25, 0x01	; 1
     67e:	41 f0       	breq	.+16     	; 0x690 <CALLBACK_USB_GetDescriptor+0x1e>
     680:	92 30       	cpi	r25, 0x02	; 2
     682:	79 f5       	brne	.+94     	; 0x6e2 <CALLBACK_USB_GetDescriptor+0x70>
     684:	0a c0       	rjmp	.+20     	; 0x69a <CALLBACK_USB_GetDescriptor+0x28>
     686:	91 32       	cpi	r25, 0x21	; 33
     688:	11 f1       	breq	.+68     	; 0x6ce <CALLBACK_USB_GetDescriptor+0x5c>
     68a:	92 32       	cpi	r25, 0x22	; 34
     68c:	51 f5       	brne	.+84     	; 0x6e2 <CALLBACK_USB_GetDescriptor+0x70>
     68e:	24 c0       	rjmp	.+72     	; 0x6d8 <CALLBACK_USB_GetDescriptor+0x66>
     690:	e8 eb       	ldi	r30, 0xB8	; 184
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	22 e1       	ldi	r18, 0x12	; 18
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	28 c0       	rjmp	.+80     	; 0x6ea <CALLBACK_USB_GetDescriptor+0x78>
     69a:	ea ec       	ldi	r30, 0xCA	; 202
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	29 e3       	ldi	r18, 0x39	; 57
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	23 c0       	rjmp	.+70     	; 0x6ea <CALLBACK_USB_GetDescriptor+0x78>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     6a4:	81 30       	cpi	r24, 0x01	; 1
     6a6:	49 f0       	breq	.+18     	; 0x6ba <CALLBACK_USB_GetDescriptor+0x48>
     6a8:	81 30       	cpi	r24, 0x01	; 1
     6aa:	18 f0       	brcs	.+6      	; 0x6b2 <CALLBACK_USB_GetDescriptor+0x40>
     6ac:	82 30       	cpi	r24, 0x02	; 2
     6ae:	c9 f4       	brne	.+50     	; 0x6e2 <CALLBACK_USB_GetDescriptor+0x70>
     6b0:	0a c0       	rjmp	.+20     	; 0x6c6 <CALLBACK_USB_GetDescriptor+0x54>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     6b2:	e3 e0       	ldi	r30, 0x03	; 3
     6b4:	f1 e0       	ldi	r31, 0x01	; 1
     6b6:	84 91       	lpm	r24, Z+
     6b8:	03 c0       	rjmp	.+6      	; 0x6c0 <CALLBACK_USB_GetDescriptor+0x4e>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     6ba:	e7 e0       	ldi	r30, 0x07	; 7
     6bc:	f1 e0       	ldi	r31, 0x01	; 1
     6be:	84 91       	lpm	r24, Z+
     6c0:	28 2f       	mov	r18, r24
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	12 c0       	rjmp	.+36     	; 0x6ea <CALLBACK_USB_GetDescriptor+0x78>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     6c6:	e1 e2       	ldi	r30, 0x21	; 33
     6c8:	f1 e0       	ldi	r31, 0x01	; 1
     6ca:	84 91       	lpm	r24, Z+
     6cc:	f9 cf       	rjmp	.-14     	; 0x6c0 <CALLBACK_USB_GetDescriptor+0x4e>
     6ce:	e3 ef       	ldi	r30, 0xF3	; 243
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	29 e0       	ldi	r18, 0x09	; 9
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	09 c0       	rjmp	.+18     	; 0x6ea <CALLBACK_USB_GetDescriptor+0x78>

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     6d8:	e8 e9       	ldi	r30, 0x98	; 152
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	20 e2       	ldi	r18, 0x20	; 32
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	04 c0       	rjmp	.+8      	; 0x6ea <CALLBACK_USB_GetDescriptor+0x78>
     6e2:	e0 e0       	ldi	r30, 0x00	; 0
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	30 e0       	ldi	r19, 0x00	; 0
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
			break;
	}

	*DescriptorAddress = Address;
     6ea:	ed 93       	st	X+, r30
     6ec:	fc 93       	st	X, r31
	return Size;
}
     6ee:	c9 01       	movw	r24, r18
     6f0:	08 95       	ret

000006f2 <Dataflash_SelectChipFromPage>:
			 *
			 *  \param[in] PageAddress  Address of the page to manipulate, ranging from
			 *                          0 to ((DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS) - 1).
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
     6f2:	9c 01       	movw	r18, r24
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     6f4:	8e b1       	in	r24, 0x0e	; 14
     6f6:	83 60       	ori	r24, 0x03	; 3
     6f8:	8e b9       	out	0x0e, r24	; 14
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
				Dataflash_DeselectChip();

				if (PageAddress >= (DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS))
     6fa:	80 e4       	ldi	r24, 0x40	; 64
     6fc:	20 30       	cpi	r18, 0x00	; 0
     6fe:	38 07       	cpc	r19, r24
     700:	58 f4       	brcc	.+22     	; 0x718 <Dataflash_SelectChipFromPage+0x26>
				  return;

				if (PageAddress & 0x01)
     702:	20 ff       	sbrs	r18, 0
     704:	05 c0       	rjmp	.+10     	; 0x710 <Dataflash_SelectChipFromPage+0x1e>
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     706:	8e b1       	in	r24, 0x0e	; 14
     708:	8c 7f       	andi	r24, 0xFC	; 252
     70a:	81 60       	ori	r24, 0x01	; 1
     70c:	8e b9       	out	0x0e, r24	; 14
     70e:	08 95       	ret
     710:	8e b1       	in	r24, 0x0e	; 14
     712:	8c 7f       	andi	r24, 0xFC	; 252
     714:	82 60       	ori	r24, 0x02	; 2
     716:	8e b9       	out	0x0e, r24	; 14
     718:	08 95       	ret

0000071a <Dataflash_ToggleSelectedChipCS>:
			 *  or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     71a:	8e b1       	in	r24, 0x0e	; 14
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     71c:	9e b1       	in	r25, 0x0e	; 14
     71e:	93 60       	ori	r25, 0x03	; 3
     720:	9e b9       	out	0x0e, r25	; 14
     722:	9e b1       	in	r25, 0x0e	; 14
     724:	83 70       	andi	r24, 0x03	; 3
     726:	9c 7f       	andi	r25, 0xFC	; 252
     728:	89 2b       	or	r24, r25
     72a:	8e b9       	out	0x0e, r24	; 14
			{
				uint8_t SelectedChipMask = Dataflash_GetSelectedChip();

				Dataflash_DeselectChip();
				Dataflash_SelectChip(SelectedChipMask);
			}
     72c:	08 95       	ret

0000072e <Dataflash_WaitWhileBusy>:
			/** Spin-loops while the currently selected dataflash is busy executing a command, such as a main
			 *  memory page program or main memory to buffer transfer.
			 */
			static inline void Dataflash_WaitWhileBusy(void)
			{
				Dataflash_ToggleSelectedChipCS();
     72e:	f5 df       	rcall	.-22     	; 0x71a <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     730:	87 ed       	ldi	r24, 0xD7	; 215
     732:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     734:	0d b4       	in	r0, 0x2d	; 45
     736:	07 fe       	sbrs	r0, 7
     738:	fd cf       	rjmp	.-6      	; 0x734 <Dataflash_WaitWhileBusy+0x6>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     73a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     73c:	0d b4       	in	r0, 0x2d	; 45
     73e:	07 fe       	sbrs	r0, 7
     740:	fd cf       	rjmp	.-6      	; 0x73c <Dataflash_WaitWhileBusy+0xe>
				Dataflash_SendByte(DF_CMD_GETSTATUS);
				while (!(Dataflash_ReceiveByte() & DF_STATUS_READY));
     742:	0e b4       	in	r0, 0x2e	; 46
     744:	07 fe       	sbrs	r0, 7
     746:	f9 cf       	rjmp	.-14     	; 0x73a <Dataflash_WaitWhileBusy+0xc>
				Dataflash_ToggleSelectedChipCS();
			}
     748:	e8 cf       	rjmp	.-48     	; 0x71a <Dataflash_ToggleSelectedChipCS>

0000074a <Dataflash_SendAddressBytes>:
			 *  \param[in] BufferByte   Address within the dataflash's buffer
			 */
			static inline void Dataflash_SendAddressBytes(uint16_t PageAddress,
			                                              const uint16_t BufferByte)
			{
				PageAddress >>= 1;
     74a:	9c 01       	movw	r18, r24
     74c:	36 95       	lsr	r19
     74e:	27 95       	ror	r18

				Dataflash_SendByte(PageAddress >> 5);
     750:	36 e0       	ldi	r19, 0x06	; 6
     752:	96 95       	lsr	r25
     754:	87 95       	ror	r24
     756:	3a 95       	dec	r19
     758:	e1 f7       	brne	.-8      	; 0x752 <Dataflash_SendAddressBytes+0x8>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     75a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     75c:	0d b4       	in	r0, 0x2d	; 45
     75e:	07 fe       	sbrs	r0, 7
     760:	fd cf       	rjmp	.-6      	; 0x75c <Dataflash_SendAddressBytes+0x12>
				Dataflash_SendByte((PageAddress << 3) | (BufferByte >> 8));
     762:	82 2f       	mov	r24, r18
     764:	88 0f       	add	r24, r24
     766:	88 0f       	add	r24, r24
     768:	88 0f       	add	r24, r24
     76a:	87 2b       	or	r24, r23
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     76c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     76e:	0d b4       	in	r0, 0x2d	; 45
     770:	07 fe       	sbrs	r0, 7
     772:	fd cf       	rjmp	.-6      	; 0x76e <Dataflash_SendAddressBytes+0x24>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     774:	6e bd       	out	0x2e, r22	; 46
				while (!(SPSR & (1 << SPIF)));
     776:	0d b4       	in	r0, 0x2d	; 45
     778:	07 fe       	sbrs	r0, 7
     77a:	fd cf       	rjmp	.-6      	; 0x776 <Dataflash_SendAddressBytes+0x2c>
				Dataflash_SendByte(BufferByte);
			}
     77c:	08 95       	ret

0000077e <DataflashManager_WriteBlocks_RAM>:
 *  \param[in] BufferPtr     Pointer to the data source RAM buffer
 */
void DataflashManager_WriteBlocks_RAM(const uint32_t BlockAddress,
                                      uint16_t TotalBlocks,
                                      const uint8_t* BufferPtr)
{
     77e:	6f 92       	push	r6
     780:	7f 92       	push	r7
     782:	8f 92       	push	r8
     784:	9f 92       	push	r9
     786:	af 92       	push	r10
     788:	bf 92       	push	r11
     78a:	cf 92       	push	r12
     78c:	df 92       	push	r13
     78e:	ef 92       	push	r14
     790:	ff 92       	push	r15
     792:	0f 93       	push	r16
     794:	1f 93       	push	r17
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	5a 01       	movw	r10, r20
     79c:	49 01       	movw	r8, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     79e:	f9 e0       	ldi	r31, 0x09	; 9
     7a0:	66 0f       	add	r22, r22
     7a2:	77 1f       	adc	r23, r23
     7a4:	88 1f       	adc	r24, r24
     7a6:	99 1f       	adc	r25, r25
     7a8:	fa 95       	dec	r31
     7aa:	d1 f7       	brne	.-12     	; 0x7a0 <DataflashManager_WriteBlocks_RAM+0x22>
     7ac:	9b 01       	movw	r18, r22
     7ae:	ac 01       	movw	r20, r24
     7b0:	ea e0       	ldi	r30, 0x0A	; 10
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	ea 95       	dec	r30
     7bc:	d1 f7       	brne	.-12     	; 0x7b2 <DataflashManager_WriteBlocks_RAM+0x34>
     7be:	e9 01       	movw	r28, r18
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     7c0:	8b 01       	movw	r16, r22
     7c2:	13 70       	andi	r17, 0x03	; 3
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     7c4:	c9 01       	movw	r24, r18
     7c6:	95 df       	rcall	.-214    	; 0x6f2 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7c8:	83 e5       	ldi	r24, 0x53	; 83
     7ca:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7cc:	0d b4       	in	r0, 0x2d	; 45
     7ce:	07 fe       	sbrs	r0, 7
     7d0:	fd cf       	rjmp	.-6      	; 0x7cc <DataflashManager_WriteBlocks_RAM+0x4e>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
	/* Copy selected dataflash's current page contents to the Dataflash buffer */
	Dataflash_SendByte(DF_CMD_MAINMEMTOBUFF1);
	Dataflash_SendAddressBytes(CurrDFPage, 0);
     7d2:	ce 01       	movw	r24, r28
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	70 e0       	ldi	r23, 0x00	; 0
     7d8:	b8 df       	rcall	.-144    	; 0x74a <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     7da:	a9 df       	rcall	.-174    	; 0x72e <Dataflash_WaitWhileBusy>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7dc:	84 e8       	ldi	r24, 0x84	; 132
     7de:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7e0:	0d b4       	in	r0, 0x2d	; 45
     7e2:	07 fe       	sbrs	r0, 7
     7e4:	fd cf       	rjmp	.-6      	; 0x7e0 <DataflashManager_WriteBlocks_RAM+0x62>
                                      uint16_t TotalBlocks,
                                      const uint8_t* BufferPtr)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     7e6:	c8 01       	movw	r24, r16
     7e8:	74 e0       	ldi	r23, 0x04	; 4
     7ea:	96 95       	lsr	r25
     7ec:	87 95       	ror	r24
     7ee:	7a 95       	dec	r23
     7f0:	e1 f7       	brne	.-8      	; 0x7ea <DataflashManager_WriteBlocks_RAM+0x6c>
     7f2:	f8 2e       	mov	r15, r24
	Dataflash_WaitWhileBusy();
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	b8 01       	movw	r22, r16
     7fa:	a7 df       	rcall	.-178    	; 0x74a <Dataflash_SendAddressBytes>
     7fc:	65 01       	movw	r12, r10
     7fe:	65 e0       	ldi	r22, 0x05	; 5
     800:	cc 0c       	add	r12, r12
     802:	dd 1c       	adc	r13, r13
     804:	6a 95       	dec	r22
     806:	e1 f7       	brne	.-8      	; 0x800 <DataflashManager_WriteBlocks_RAM+0x82>
     808:	ee 24       	eor	r14, r14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     80a:	54 e8       	ldi	r21, 0x84	; 132
     80c:	65 2e       	mov	r6, r21
     80e:	56 c0       	rjmp	.+172    	; 0x8bc <DataflashManager_WriteBlocks_RAM+0x13e>

	while (TotalBlocks)
     810:	84 01       	movw	r16, r8
     812:	77 24       	eor	r7, r7

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     814:	80 e4       	ldi	r24, 0x40	; 64
     816:	f8 16       	cp	r15, r24
     818:	a1 f5       	brne	.+104    	; 0x882 <DataflashManager_WriteBlocks_RAM+0x104>
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
     81a:	89 df       	rcall	.-238    	; 0x72e <Dataflash_WaitWhileBusy>
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     81c:	ee 20       	and	r14, r14
     81e:	11 f4       	brne	.+4      	; 0x824 <DataflashManager_WriteBlocks_RAM+0xa6>
     820:	83 e8       	ldi	r24, 0x83	; 131
     822:	01 c0       	rjmp	.+2      	; 0x826 <DataflashManager_WriteBlocks_RAM+0xa8>
     824:	86 e8       	ldi	r24, 0x86	; 134
     826:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     828:	0d b4       	in	r0, 0x2d	; 45
     82a:	07 fe       	sbrs	r0, 7
     82c:	fd cf       	rjmp	.-6      	; 0x828 <DataflashManager_WriteBlocks_RAM+0xaa>
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     82e:	ce 01       	movw	r24, r28
     830:	60 e0       	ldi	r22, 0x00	; 0
     832:	70 e0       	ldi	r23, 0x00	; 0
     834:	8a df       	rcall	.-236    	; 0x74a <Dataflash_SendAddressBytes>

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     836:	21 96       	adiw	r28, 0x01	; 1
			 *  or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     838:	8e b1       	in	r24, 0x0e	; 14

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     83a:	83 70       	andi	r24, 0x03	; 3
     83c:	81 30       	cpi	r24, 0x01	; 1
     83e:	09 f4       	brne	.+2      	; 0x842 <DataflashManager_WriteBlocks_RAM+0xc4>
				  UsingSecondBuffer = !(UsingSecondBuffer);
     840:	e8 26       	eor	r14, r24

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     842:	ce 01       	movw	r24, r28
     844:	56 df       	rcall	.-340    	; 0x6f2 <Dataflash_SelectChipFromPage>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     846:	90 e4       	ldi	r25, 0x40	; 64
     848:	c9 16       	cp	r12, r25
     84a:	d1 04       	cpc	r13, r1
     84c:	78 f4       	brcc	.+30     	; 0x86c <DataflashManager_WriteBlocks_RAM+0xee>
				{
					/* Copy selected dataflash's current page contents to the Dataflash buffer */
					Dataflash_WaitWhileBusy();
     84e:	6f df       	rcall	.-290    	; 0x72e <Dataflash_WaitWhileBusy>
					Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_MAINMEMTOBUFF2 : DF_CMD_MAINMEMTOBUFF1);
     850:	ee 20       	and	r14, r14
     852:	11 f4       	brne	.+4      	; 0x858 <DataflashManager_WriteBlocks_RAM+0xda>
     854:	83 e5       	ldi	r24, 0x53	; 83
     856:	01 c0       	rjmp	.+2      	; 0x85a <DataflashManager_WriteBlocks_RAM+0xdc>
     858:	85 e5       	ldi	r24, 0x55	; 85
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     85a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     85c:	0d b4       	in	r0, 0x2d	; 45
     85e:	07 fe       	sbrs	r0, 7
     860:	fd cf       	rjmp	.-6      	; 0x85c <DataflashManager_WriteBlocks_RAM+0xde>
					Dataflash_SendAddressBytes(CurrDFPage, 0);
     862:	ce 01       	movw	r24, r28
     864:	60 e0       	ldi	r22, 0x00	; 0
     866:	70 e0       	ldi	r23, 0x00	; 0
     868:	70 df       	rcall	.-288    	; 0x74a <Dataflash_SendAddressBytes>
					Dataflash_WaitWhileBusy();
     86a:	61 df       	rcall	.-318    	; 0x72e <Dataflash_WaitWhileBusy>
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_ToggleSelectedChipCS();
     86c:	56 df       	rcall	.-340    	; 0x71a <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     86e:	6e bc       	out	0x2e, r6	; 46
				while (!(SPSR & (1 << SPIF)));
     870:	0d b4       	in	r0, 0x2d	; 45
     872:	07 fe       	sbrs	r0, 7
     874:	fd cf       	rjmp	.-6      	; 0x870 <DataflashManager_WriteBlocks_RAM+0xf2>
				Dataflash_SendByte(DF_CMD_BUFF1WRITE);
				Dataflash_SendAddressBytes(0, 0);
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	60 e0       	ldi	r22, 0x00	; 0
     87c:	70 e0       	ldi	r23, 0x00	; 0
     87e:	65 df       	rcall	.-310    	; 0x74a <Dataflash_SendAddressBytes>
     880:	ff 24       	eor	r15, r15
     882:	f8 01       	movw	r30, r16
     884:	90 e0       	ldi	r25, 0x00	; 0
			}

			/* Write one 16-byte chunk of data to the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
			  Dataflash_SendByte(*(BufferPtr++));
     886:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     888:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     88a:	0d b4       	in	r0, 0x2d	; 45
     88c:	07 fe       	sbrs	r0, 7
     88e:	fd cf       	rjmp	.-6      	; 0x88a <DataflashManager_WriteBlocks_RAM+0x10c>
				Dataflash_SendByte(DF_CMD_BUFF1WRITE);
				Dataflash_SendAddressBytes(0, 0);
			}

			/* Write one 16-byte chunk of data to the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
     890:	9f 5f       	subi	r25, 0xFF	; 255
     892:	90 31       	cpi	r25, 0x10	; 16
     894:	c1 f7       	brne	.-16     	; 0x886 <DataflashManager_WriteBlocks_RAM+0x108>
     896:	00 5f       	subi	r16, 0xF0	; 240
     898:	1f 4f       	sbci	r17, 0xFF	; 255
			  Dataflash_SendByte(*(BufferPtr++));

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     89a:	f3 94       	inc	r15

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     89c:	73 94       	inc	r7
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     89e:	80 e2       	ldi	r24, 0x20	; 32
     8a0:	78 16       	cp	r7, r24
     8a2:	09 f0       	breq	.+2      	; 0x8a6 <DataflashManager_WriteBlocks_RAM+0x128>
     8a4:	b7 cf       	rjmp	.-146    	; 0x814 <DataflashManager_WriteBlocks_RAM+0x96>
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	92 e0       	ldi	r25, 0x02	; 2
     8aa:	88 0e       	add	r8, r24
     8ac:	99 1e       	adc	r9, r25
			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     8ae:	08 94       	sec
     8b0:	a1 08       	sbc	r10, r1
     8b2:	b1 08       	sbc	r11, r1
     8b4:	80 ee       	ldi	r24, 0xE0	; 224
     8b6:	9f ef       	ldi	r25, 0xFF	; 255
     8b8:	c8 0e       	add	r12, r24
     8ba:	d9 1e       	adc	r13, r25

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);

	while (TotalBlocks)
     8bc:	a1 14       	cp	r10, r1
     8be:	b1 04       	cpc	r11, r1
     8c0:	09 f0       	breq	.+2      	; 0x8c4 <DataflashManager_WriteBlocks_RAM+0x146>
     8c2:	a6 cf       	rjmp	.-180    	; 0x810 <DataflashManager_WriteBlocks_RAM+0x92>
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
     8c4:	34 df       	rcall	.-408    	; 0x72e <Dataflash_WaitWhileBusy>
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     8c6:	ee 20       	and	r14, r14
     8c8:	11 f4       	brne	.+4      	; 0x8ce <DataflashManager_WriteBlocks_RAM+0x150>
     8ca:	83 e8       	ldi	r24, 0x83	; 131
     8cc:	01 c0       	rjmp	.+2      	; 0x8d0 <DataflashManager_WriteBlocks_RAM+0x152>
     8ce:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8d0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8d2:	0d b4       	in	r0, 0x2d	; 45
     8d4:	07 fe       	sbrs	r0, 7
     8d6:	fd cf       	rjmp	.-6      	; 0x8d2 <DataflashManager_WriteBlocks_RAM+0x154>
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
     8d8:	ce 01       	movw	r24, r28
     8da:	60 e0       	ldi	r22, 0x00	; 0
     8dc:	70 e0       	ldi	r23, 0x00	; 0
     8de:	35 df       	rcall	.-406    	; 0x74a <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     8e0:	26 df       	rcall	.-436    	; 0x72e <Dataflash_WaitWhileBusy>
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     8e2:	8e b1       	in	r24, 0x0e	; 14
     8e4:	83 60       	ori	r24, 0x03	; 3
     8e6:	8e b9       	out	0x0e, r24	; 14

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	ff 90       	pop	r15
     8f2:	ef 90       	pop	r14
     8f4:	df 90       	pop	r13
     8f6:	cf 90       	pop	r12
     8f8:	bf 90       	pop	r11
     8fa:	af 90       	pop	r10
     8fc:	9f 90       	pop	r9
     8fe:	8f 90       	pop	r8
     900:	7f 90       	pop	r7
     902:	6f 90       	pop	r6
     904:	08 95       	ret

00000906 <DataflashManager_ReadBlocks_RAM>:
 *  \param[out] BufferPtr    Pointer to the data destination RAM buffer
 */
void DataflashManager_ReadBlocks_RAM(const uint32_t BlockAddress,
                                     uint16_t TotalBlocks,
                                     uint8_t* BufferPtr)
{
     906:	af 92       	push	r10
     908:	bf 92       	push	r11
     90a:	cf 92       	push	r12
     90c:	df 92       	push	r13
     90e:	ef 92       	push	r14
     910:	ff 92       	push	r15
     912:	0f 93       	push	r16
     914:	1f 93       	push	r17
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	6a 01       	movw	r12, r20
     91c:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     91e:	09 e0       	ldi	r16, 0x09	; 9
     920:	66 0f       	add	r22, r22
     922:	77 1f       	adc	r23, r23
     924:	88 1f       	adc	r24, r24
     926:	99 1f       	adc	r25, r25
     928:	0a 95       	dec	r16
     92a:	d1 f7       	brne	.-12     	; 0x920 <DataflashManager_ReadBlocks_RAM+0x1a>
     92c:	9b 01       	movw	r18, r22
     92e:	ac 01       	movw	r20, r24
     930:	1a e0       	ldi	r17, 0x0A	; 10
     932:	56 95       	lsr	r21
     934:	47 95       	ror	r20
     936:	37 95       	ror	r19
     938:	27 95       	ror	r18
     93a:	1a 95       	dec	r17
     93c:	d1 f7       	brne	.-12     	; 0x932 <DataflashManager_ReadBlocks_RAM+0x2c>
     93e:	89 01       	movw	r16, r18
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     940:	eb 01       	movw	r28, r22
     942:	d3 70       	andi	r29, 0x03	; 3
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     944:	c9 01       	movw	r24, r18
     946:	d5 de       	rcall	.-598    	; 0x6f2 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     948:	82 ed       	ldi	r24, 0xD2	; 210
     94a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     94c:	0d b4       	in	r0, 0x2d	; 45
     94e:	07 fe       	sbrs	r0, 7
     950:	fd cf       	rjmp	.-6      	; 0x94c <DataflashManager_ReadBlocks_RAM+0x46>

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     952:	c8 01       	movw	r24, r16
     954:	be 01       	movw	r22, r28
     956:	f9 de       	rcall	.-526    	; 0x74a <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     958:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     95a:	0d b4       	in	r0, 0x2d	; 45
     95c:	07 fe       	sbrs	r0, 7
     95e:	fd cf       	rjmp	.-6      	; 0x95a <DataflashManager_ReadBlocks_RAM+0x54>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     960:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     962:	0d b4       	in	r0, 0x2d	; 45
     964:	07 fe       	sbrs	r0, 7
     966:	fd cf       	rjmp	.-6      	; 0x962 <DataflashManager_ReadBlocks_RAM+0x5c>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     968:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     96a:	0d b4       	in	r0, 0x2d	; 45
     96c:	07 fe       	sbrs	r0, 7
     96e:	fd cf       	rjmp	.-6      	; 0x96a <DataflashManager_ReadBlocks_RAM+0x64>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     970:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     972:	0d b4       	in	r0, 0x2d	; 45
     974:	07 fe       	sbrs	r0, 7
     976:	fd cf       	rjmp	.-6      	; 0x972 <DataflashManager_ReadBlocks_RAM+0x6c>
                                     uint16_t TotalBlocks,
                                     uint8_t* BufferPtr)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     978:	b4 e0       	ldi	r27, 0x04	; 4
     97a:	d6 95       	lsr	r29
     97c:	c7 95       	ror	r28
     97e:	ba 95       	dec	r27
     980:	e1 f7       	brne	.-8      	; 0x97a <DataflashManager_ReadBlocks_RAM+0x74>
     982:	6c 2f       	mov	r22, r28
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     984:	a2 ed       	ldi	r26, 0xD2	; 210
     986:	aa 2e       	mov	r10, r26
     988:	39 c0       	rjmp	.+114    	; 0x9fc <DataflashManager_ReadBlocks_RAM+0xf6>
     98a:	e7 01       	movw	r28, r14
     98c:	bb 24       	eor	r11, r11

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     98e:	60 34       	cpi	r22, 0x40	; 64
     990:	e9 f4       	brne	.+58     	; 0x9cc <DataflashManager_ReadBlocks_RAM+0xc6>
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     992:	0f 5f       	subi	r16, 0xFF	; 255
     994:	1f 4f       	sbci	r17, 0xFF	; 255

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     996:	c8 01       	movw	r24, r16
     998:	ac de       	rcall	.-680    	; 0x6f2 <Dataflash_SelectChipFromPage>
     99a:	ae bc       	out	0x2e, r10	; 46
				while (!(SPSR & (1 << SPIF)));
     99c:	0d b4       	in	r0, 0x2d	; 45
     99e:	07 fe       	sbrs	r0, 7
     9a0:	fd cf       	rjmp	.-6      	; 0x99c <DataflashManager_ReadBlocks_RAM+0x96>

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     9a2:	c8 01       	movw	r24, r16
     9a4:	60 e0       	ldi	r22, 0x00	; 0
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	d0 de       	rcall	.-608    	; 0x74a <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9aa:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     9ac:	0d b4       	in	r0, 0x2d	; 45
     9ae:	07 fe       	sbrs	r0, 7
     9b0:	fd cf       	rjmp	.-6      	; 0x9ac <DataflashManager_ReadBlocks_RAM+0xa6>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9b2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     9b4:	0d b4       	in	r0, 0x2d	; 45
     9b6:	07 fe       	sbrs	r0, 7
     9b8:	fd cf       	rjmp	.-6      	; 0x9b4 <DataflashManager_ReadBlocks_RAM+0xae>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9ba:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     9bc:	0d b4       	in	r0, 0x2d	; 45
     9be:	07 fe       	sbrs	r0, 7
     9c0:	fd cf       	rjmp	.-6      	; 0x9bc <DataflashManager_ReadBlocks_RAM+0xb6>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9c2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     9c4:	0d b4       	in	r0, 0x2d	; 45
     9c6:	07 fe       	sbrs	r0, 7
     9c8:	fd cf       	rjmp	.-6      	; 0x9c4 <DataflashManager_ReadBlocks_RAM+0xbe>
     9ca:	60 e0       	ldi	r22, 0x00	; 0
     9cc:	fe 01       	movw	r30, r28
     9ce:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     9d0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     9d2:	0d b4       	in	r0, 0x2d	; 45
     9d4:	07 fe       	sbrs	r0, 7
     9d6:	fd cf       	rjmp	.-6      	; 0x9d2 <DataflashManager_ReadBlocks_RAM+0xcc>
				return SPDR;
     9d8:	8e b5       	in	r24, 0x2e	; 46
				Dataflash_SendByte(0x00);
			}

			/* Read one 16-byte chunk of data from the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
			  *(BufferPtr++) = Dataflash_ReceiveByte();
     9da:	81 93       	st	Z+, r24
				Dataflash_SendByte(0x00);
				Dataflash_SendByte(0x00);
			}

			/* Read one 16-byte chunk of data from the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
     9dc:	9f 5f       	subi	r25, 0xFF	; 255
     9de:	90 31       	cpi	r25, 0x10	; 16
     9e0:	b9 f7       	brne	.-18     	; 0x9d0 <DataflashManager_ReadBlocks_RAM+0xca>
     9e2:	60 96       	adiw	r28, 0x10	; 16
			  *(BufferPtr++) = Dataflash_ReceiveByte();

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     9e4:	6f 5f       	subi	r22, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     9e6:	b3 94       	inc	r11
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     9e8:	80 e2       	ldi	r24, 0x20	; 32
     9ea:	b8 16       	cp	r11, r24
     9ec:	81 f6       	brne	.-96     	; 0x98e <DataflashManager_ReadBlocks_RAM+0x88>
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	92 e0       	ldi	r25, 0x02	; 2
     9f2:	e8 0e       	add	r14, r24
     9f4:	f9 1e       	adc	r15, r25
			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     9f6:	08 94       	sec
     9f8:	c1 08       	sbc	r12, r1
     9fa:	d1 08       	sbc	r13, r1
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	while (TotalBlocks)
     9fc:	c1 14       	cp	r12, r1
     9fe:	d1 04       	cpc	r13, r1
     a00:	21 f6       	brne	.-120    	; 0x98a <DataflashManager_ReadBlocks_RAM+0x84>
     a02:	8e b1       	in	r24, 0x0e	; 14
     a04:	83 60       	ori	r24, 0x03	; 3
     a06:	8e b9       	out	0x0e, r24	; 14
		TotalBlocks--;
	}

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	1f 91       	pop	r17
     a0e:	0f 91       	pop	r16
     a10:	ff 90       	pop	r15
     a12:	ef 90       	pop	r14
     a14:	df 90       	pop	r13
     a16:	cf 90       	pop	r12
     a18:	bf 90       	pop	r11
     a1a:	af 90       	pop	r10
     a1c:	08 95       	ret

00000a1e <DataflashManager_ResetDataflashProtections>:
     a1e:	8e b1       	in	r24, 0x0e	; 14
     a20:	8c 7f       	andi	r24, 0xFC	; 252
     a22:	82 60       	ori	r24, 0x02	; 2
     a24:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a26:	87 ed       	ldi	r24, 0xD7	; 215
     a28:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a2a:	0d b4       	in	r0, 0x2d	; 45
     a2c:	07 fe       	sbrs	r0, 7
     a2e:	fd cf       	rjmp	.-6      	; 0xa2a <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     a30:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a32:	0d b4       	in	r0, 0x2d	; 45
     a34:	07 fe       	sbrs	r0, 7
     a36:	fd cf       	rjmp	.-6      	; 0xa32 <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     a38:	0e b4       	in	r0, 0x2e	; 46
     a3a:	01 fe       	sbrs	r0, 1
     a3c:	15 c0       	rjmp	.+42     	; 0xa68 <DataflashManager_ResetDataflashProtections+0x4a>
	{
		Dataflash_ToggleSelectedChipCS();
     a3e:	6d de       	rcall	.-806    	; 0x71a <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a40:	8d e3       	ldi	r24, 0x3D	; 61
     a42:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a44:	0d b4       	in	r0, 0x2d	; 45
     a46:	07 fe       	sbrs	r0, 7
     a48:	fd cf       	rjmp	.-6      	; 0xa44 <DataflashManager_ResetDataflashProtections+0x26>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a4a:	8a e2       	ldi	r24, 0x2A	; 42
     a4c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a4e:	0d b4       	in	r0, 0x2d	; 45
     a50:	07 fe       	sbrs	r0, 7
     a52:	fd cf       	rjmp	.-6      	; 0xa4e <DataflashManager_ResetDataflashProtections+0x30>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a54:	8f e7       	ldi	r24, 0x7F	; 127
     a56:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a58:	0d b4       	in	r0, 0x2d	; 45
     a5a:	07 fe       	sbrs	r0, 7
     a5c:	fd cf       	rjmp	.-6      	; 0xa58 <DataflashManager_ResetDataflashProtections+0x3a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a5e:	8a e9       	ldi	r24, 0x9A	; 154
     a60:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a62:	0d b4       	in	r0, 0x2d	; 45
     a64:	07 fe       	sbrs	r0, 7
     a66:	fd cf       	rjmp	.-6      	; 0xa62 <DataflashManager_ResetDataflashProtections+0x44>
     a68:	8e b1       	in	r24, 0x0e	; 14
     a6a:	8c 7f       	andi	r24, 0xFC	; 252
     a6c:	81 60       	ori	r24, 0x01	; 1
     a6e:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a70:	87 ed       	ldi	r24, 0xD7	; 215
     a72:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a74:	0d b4       	in	r0, 0x2d	; 45
     a76:	07 fe       	sbrs	r0, 7
     a78:	fd cf       	rjmp	.-6      	; 0xa74 <DataflashManager_ResetDataflashProtections+0x56>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     a7a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a7c:	0d b4       	in	r0, 0x2d	; 45
     a7e:	07 fe       	sbrs	r0, 7
     a80:	fd cf       	rjmp	.-6      	; 0xa7c <DataflashManager_ResetDataflashProtections+0x5e>
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     a82:	0e b4       	in	r0, 0x2e	; 46
     a84:	01 fe       	sbrs	r0, 1
     a86:	15 c0       	rjmp	.+42     	; 0xab2 <DataflashManager_ResetDataflashProtections+0x94>
	{
		Dataflash_ToggleSelectedChipCS();
     a88:	48 de       	rcall	.-880    	; 0x71a <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a8a:	8d e3       	ldi	r24, 0x3D	; 61
     a8c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a8e:	0d b4       	in	r0, 0x2d	; 45
     a90:	07 fe       	sbrs	r0, 7
     a92:	fd cf       	rjmp	.-6      	; 0xa8e <DataflashManager_ResetDataflashProtections+0x70>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a94:	8a e2       	ldi	r24, 0x2A	; 42
     a96:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a98:	0d b4       	in	r0, 0x2d	; 45
     a9a:	07 fe       	sbrs	r0, 7
     a9c:	fd cf       	rjmp	.-6      	; 0xa98 <DataflashManager_ResetDataflashProtections+0x7a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a9e:	8f e7       	ldi	r24, 0x7F	; 127
     aa0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     aa2:	0d b4       	in	r0, 0x2d	; 45
     aa4:	07 fe       	sbrs	r0, 7
     aa6:	fd cf       	rjmp	.-6      	; 0xaa2 <DataflashManager_ResetDataflashProtections+0x84>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     aa8:	8a e9       	ldi	r24, 0x9A	; 154
     aaa:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     aac:	0d b4       	in	r0, 0x2d	; 45
     aae:	07 fe       	sbrs	r0, 7
     ab0:	fd cf       	rjmp	.-6      	; 0xaac <DataflashManager_ResetDataflashProtections+0x8e>
     ab2:	8e b1       	in	r24, 0x0e	; 14
     ab4:	83 60       	ori	r24, 0x03	; 3
     ab6:	8e b9       	out	0x0e, r24	; 14
	}
	#endif

	/* Deselect current Dataflash chip */
	Dataflash_DeselectChip();
}
     ab8:	08 95       	ret

00000aba <DataflashManager_CheckDataflashOperation>:
     aba:	8e b1       	in	r24, 0x0e	; 14
     abc:	8c 7f       	andi	r24, 0xFC	; 252
     abe:	82 60       	ori	r24, 0x02	; 2
     ac0:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ac2:	8f e9       	ldi	r24, 0x9F	; 159
     ac4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     ac6:	0d b4       	in	r0, 0x2d	; 45
     ac8:	07 fe       	sbrs	r0, 7
     aca:	fd cf       	rjmp	.-6      	; 0xac6 <DataflashManager_CheckDataflashOperation+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     acc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     ace:	0d b4       	in	r0, 0x2d	; 45
     ad0:	07 fe       	sbrs	r0, 7
     ad2:	fd cf       	rjmp	.-6      	; 0xace <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     ad4:	9e b5       	in	r25, 0x2e	; 46
     ad6:	8e b1       	in	r24, 0x0e	; 14
     ad8:	83 60       	ori	r24, 0x03	; 3
     ada:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     adc:	9f 31       	cpi	r25, 0x1F	; 31
     ade:	11 f0       	breq	.+4      	; 0xae4 <DataflashManager_CheckDataflashOperation+0x2a>
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	08 95       	ret
     ae4:	8e b1       	in	r24, 0x0e	; 14
     ae6:	8c 7f       	andi	r24, 0xFC	; 252
     ae8:	81 60       	ori	r24, 0x01	; 1
     aea:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     aec:	8f e9       	ldi	r24, 0x9F	; 159
     aee:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     af0:	0d b4       	in	r0, 0x2d	; 45
     af2:	07 fe       	sbrs	r0, 7
     af4:	fd cf       	rjmp	.-6      	; 0xaf0 <DataflashManager_CheckDataflashOperation+0x36>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     af6:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     af8:	0d b4       	in	r0, 0x2d	; 45
     afa:	07 fe       	sbrs	r0, 7
     afc:	fd cf       	rjmp	.-6      	; 0xaf8 <DataflashManager_CheckDataflashOperation+0x3e>
				return SPDR;
     afe:	9e b5       	in	r25, 0x2e	; 46
     b00:	8e b1       	in	r24, 0x0e	; 14
     b02:	83 60       	ori	r24, 0x03	; 3
     b04:	8e b9       	out	0x0e, r24	; 14
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	9f 31       	cpi	r25, 0x1F	; 31
     b0a:	09 f4       	brne	.+2      	; 0xb0e <DataflashManager_CheckDataflashOperation+0x54>
     b0c:	81 e0       	ldi	r24, 0x01	; 1
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     b0e:	08 95       	ret

00000b10 <DataflashManager_ReadBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to read
 */
void DataflashManager_ReadBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
     b10:	af 92       	push	r10
     b12:	bf 92       	push	r11
     b14:	cf 92       	push	r12
     b16:	df 92       	push	r13
     b18:	ef 92       	push	r14
     b1a:	ff 92       	push	r15
     b1c:	0f 93       	push	r16
     b1e:	1f 93       	push	r17
     b20:	df 93       	push	r29
     b22:	cf 93       	push	r28
     b24:	0f 92       	push	r0
     b26:	cd b7       	in	r28, 0x3d	; 61
     b28:	de b7       	in	r29, 0x3e	; 62
     b2a:	5c 01       	movw	r10, r24
     b2c:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     b2e:	e9 e0       	ldi	r30, 0x09	; 9
     b30:	44 0f       	add	r20, r20
     b32:	55 1f       	adc	r21, r21
     b34:	66 1f       	adc	r22, r22
     b36:	77 1f       	adc	r23, r23
     b38:	ea 95       	dec	r30
     b3a:	d1 f7       	brne	.-12     	; 0xb30 <DataflashManager_ReadBlocks+0x20>
     b3c:	db 01       	movw	r26, r22
     b3e:	ca 01       	movw	r24, r20
     b40:	3a e0       	ldi	r19, 0x0A	; 10
     b42:	b6 95       	lsr	r27
     b44:	a7 95       	ror	r26
     b46:	97 95       	ror	r25
     b48:	87 95       	ror	r24
     b4a:	3a 95       	dec	r19
     b4c:	d1 f7       	brne	.-12     	; 0xb42 <DataflashManager_ReadBlocks+0x32>
     b4e:	8c 01       	movw	r16, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     b50:	2f ef       	ldi	r18, 0xFF	; 255
     b52:	c2 2e       	mov	r12, r18
     b54:	23 e0       	ldi	r18, 0x03	; 3
     b56:	d2 2e       	mov	r13, r18
     b58:	c4 22       	and	r12, r20
     b5a:	d5 22       	and	r13, r21
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     b5c:	ca dd       	rcall	.-1132   	; 0x6f2 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     b5e:	82 ed       	ldi	r24, 0xD2	; 210
     b60:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     b62:	0d b4       	in	r0, 0x2d	; 45
     b64:	07 fe       	sbrs	r0, 7
     b66:	fd cf       	rjmp	.-6      	; 0xb62 <DataflashManager_ReadBlocks+0x52>

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     b68:	c8 01       	movw	r24, r16
     b6a:	b6 01       	movw	r22, r12
     b6c:	ee dd       	rcall	.-1060   	; 0x74a <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     b6e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     b70:	0d b4       	in	r0, 0x2d	; 45
     b72:	07 fe       	sbrs	r0, 7
     b74:	fd cf       	rjmp	.-6      	; 0xb70 <DataflashManager_ReadBlocks+0x60>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     b76:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     b78:	0d b4       	in	r0, 0x2d	; 45
     b7a:	07 fe       	sbrs	r0, 7
     b7c:	fd cf       	rjmp	.-6      	; 0xb78 <DataflashManager_ReadBlocks+0x68>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     b7e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     b80:	0d b4       	in	r0, 0x2d	; 45
     b82:	07 fe       	sbrs	r0, 7
     b84:	fd cf       	rjmp	.-6      	; 0xb80 <DataflashManager_ReadBlocks+0x70>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     b86:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     b88:	0d b4       	in	r0, 0x2d	; 45
     b8a:	07 fe       	sbrs	r0, 7
     b8c:	fd cf       	rjmp	.-6      	; 0xb88 <DataflashManager_ReadBlocks+0x78>
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     b8e:	0e 94 cf 1a 	call	0x359e	; 0x359e <Endpoint_WaitUntilReady>
     b92:	88 23       	and	r24, r24
     b94:	09 f0       	breq	.+2      	; 0xb98 <DataflashManager_ReadBlocks+0x88>
     b96:	c6 c0       	rjmp	.+396    	; 0xd24 <DataflashManager_ReadBlocks+0x214>
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     b98:	94 e0       	ldi	r25, 0x04	; 4
     b9a:	d6 94       	lsr	r13
     b9c:	c7 94       	ror	r12
     b9e:	9a 95       	dec	r25
     ba0:	e1 f7       	brne	.-8      	; 0xb9a <DataflashManager_ReadBlocks+0x8a>
     ba2:	9c 2d       	mov	r25, r12
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ba4:	82 ed       	ldi	r24, 0xD2	; 210
     ba6:	c8 2e       	mov	r12, r24
     ba8:	ad c0       	rjmp	.+346    	; 0xd04 <DataflashManager_ReadBlocks+0x1f4>
     baa:	dd 24       	eor	r13, r13
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     bac:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently full */
			if (!(Endpoint_IsReadWriteAllowed()))
     bb0:	85 fd       	sbrc	r24, 5
     bb2:	0c c0       	rjmp	.+24     	; 0xbcc <DataflashManager_ReadBlocks+0xbc>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     bb4:	80 91 e8 00 	lds	r24, 0x00E8
     bb8:	8e 77       	andi	r24, 0x7E	; 126
     bba:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the endpoint bank to send its contents to the host */
				Endpoint_ClearIN();

				/* Wait until the endpoint is ready for more data */
				if (Endpoint_WaitUntilReady())
     bbe:	99 83       	std	Y+1, r25	; 0x01
     bc0:	0e 94 cf 1a 	call	0x359e	; 0x359e <Endpoint_WaitUntilReady>
     bc4:	99 81       	ldd	r25, Y+1	; 0x01
     bc6:	88 23       	and	r24, r24
     bc8:	09 f0       	breq	.+2      	; 0xbcc <DataflashManager_ReadBlocks+0xbc>
     bca:	ac c0       	rjmp	.+344    	; 0xd24 <DataflashManager_ReadBlocks+0x214>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     bcc:	90 34       	cpi	r25, 0x40	; 64
     bce:	e9 f4       	brne	.+58     	; 0xc0a <DataflashManager_ReadBlocks+0xfa>
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     bd0:	0f 5f       	subi	r16, 0xFF	; 255
     bd2:	1f 4f       	sbci	r17, 0xFF	; 255

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     bd4:	c8 01       	movw	r24, r16
     bd6:	8d dd       	rcall	.-1254   	; 0x6f2 <Dataflash_SelectChipFromPage>
     bd8:	ce bc       	out	0x2e, r12	; 46
				while (!(SPSR & (1 << SPIF)));
     bda:	0d b4       	in	r0, 0x2d	; 45
     bdc:	07 fe       	sbrs	r0, 7
     bde:	fd cf       	rjmp	.-6      	; 0xbda <DataflashManager_ReadBlocks+0xca>

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     be0:	c8 01       	movw	r24, r16
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	b1 dd       	rcall	.-1182   	; 0x74a <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     be8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     bea:	0d b4       	in	r0, 0x2d	; 45
     bec:	07 fe       	sbrs	r0, 7
     bee:	fd cf       	rjmp	.-6      	; 0xbea <DataflashManager_ReadBlocks+0xda>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     bf0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     bf2:	0d b4       	in	r0, 0x2d	; 45
     bf4:	07 fe       	sbrs	r0, 7
     bf6:	fd cf       	rjmp	.-6      	; 0xbf2 <DataflashManager_ReadBlocks+0xe2>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     bf8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     bfa:	0d b4       	in	r0, 0x2d	; 45
     bfc:	07 fe       	sbrs	r0, 7
     bfe:	fd cf       	rjmp	.-6      	; 0xbfa <DataflashManager_ReadBlocks+0xea>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     c00:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     c02:	0d b4       	in	r0, 0x2d	; 45
     c04:	07 fe       	sbrs	r0, 7
     c06:	fd cf       	rjmp	.-6      	; 0xc02 <DataflashManager_ReadBlocks+0xf2>
     c08:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     c0a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     c0c:	0d b4       	in	r0, 0x2d	; 45
     c0e:	07 fe       	sbrs	r0, 7
     c10:	fd cf       	rjmp	.-6      	; 0xc0c <DataflashManager_ReadBlocks+0xfc>
				return SPDR;
     c12:	8e b5       	in	r24, 0x2e	; 46
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c14:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     c18:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     c1a:	0d b4       	in	r0, 0x2d	; 45
     c1c:	07 fe       	sbrs	r0, 7
     c1e:	fd cf       	rjmp	.-6      	; 0xc1a <DataflashManager_ReadBlocks+0x10a>
				return SPDR;
     c20:	8e b5       	in	r24, 0x2e	; 46
     c22:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     c26:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     c28:	0d b4       	in	r0, 0x2d	; 45
     c2a:	07 fe       	sbrs	r0, 7
     c2c:	fd cf       	rjmp	.-6      	; 0xc28 <DataflashManager_ReadBlocks+0x118>
				return SPDR;
     c2e:	8e b5       	in	r24, 0x2e	; 46
     c30:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     c34:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     c36:	0d b4       	in	r0, 0x2d	; 45
     c38:	07 fe       	sbrs	r0, 7
     c3a:	fd cf       	rjmp	.-6      	; 0xc36 <DataflashManager_ReadBlocks+0x126>
				return SPDR;
     c3c:	8e b5       	in	r24, 0x2e	; 46
     c3e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     c42:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     c44:	0d b4       	in	r0, 0x2d	; 45
     c46:	07 fe       	sbrs	r0, 7
     c48:	fd cf       	rjmp	.-6      	; 0xc44 <DataflashManager_ReadBlocks+0x134>
				return SPDR;
     c4a:	8e b5       	in	r24, 0x2e	; 46
     c4c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     c50:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     c52:	0d b4       	in	r0, 0x2d	; 45
     c54:	07 fe       	sbrs	r0, 7
     c56:	fd cf       	rjmp	.-6      	; 0xc52 <DataflashManager_ReadBlocks+0x142>
				return SPDR;
     c58:	8e b5       	in	r24, 0x2e	; 46
     c5a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     c5e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     c60:	0d b4       	in	r0, 0x2d	; 45
     c62:	07 fe       	sbrs	r0, 7
     c64:	fd cf       	rjmp	.-6      	; 0xc60 <DataflashManager_ReadBlocks+0x150>
				return SPDR;
     c66:	8e b5       	in	r24, 0x2e	; 46
     c68:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     c6c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     c6e:	0d b4       	in	r0, 0x2d	; 45
     c70:	07 fe       	sbrs	r0, 7
     c72:	fd cf       	rjmp	.-6      	; 0xc6e <DataflashManager_ReadBlocks+0x15e>
				return SPDR;
     c74:	8e b5       	in	r24, 0x2e	; 46
     c76:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     c7a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     c7c:	0d b4       	in	r0, 0x2d	; 45
     c7e:	07 fe       	sbrs	r0, 7
     c80:	fd cf       	rjmp	.-6      	; 0xc7c <DataflashManager_ReadBlocks+0x16c>
				return SPDR;
     c82:	8e b5       	in	r24, 0x2e	; 46
     c84:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     c88:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     c8a:	0d b4       	in	r0, 0x2d	; 45
     c8c:	07 fe       	sbrs	r0, 7
     c8e:	fd cf       	rjmp	.-6      	; 0xc8a <DataflashManager_ReadBlocks+0x17a>
				return SPDR;
     c90:	8e b5       	in	r24, 0x2e	; 46
     c92:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     c96:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     c98:	0d b4       	in	r0, 0x2d	; 45
     c9a:	07 fe       	sbrs	r0, 7
     c9c:	fd cf       	rjmp	.-6      	; 0xc98 <DataflashManager_ReadBlocks+0x188>
				return SPDR;
     c9e:	8e b5       	in	r24, 0x2e	; 46
     ca0:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     ca4:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     ca6:	0d b4       	in	r0, 0x2d	; 45
     ca8:	07 fe       	sbrs	r0, 7
     caa:	fd cf       	rjmp	.-6      	; 0xca6 <DataflashManager_ReadBlocks+0x196>
				return SPDR;
     cac:	8e b5       	in	r24, 0x2e	; 46
     cae:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     cb2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     cb4:	0d b4       	in	r0, 0x2d	; 45
     cb6:	07 fe       	sbrs	r0, 7
     cb8:	fd cf       	rjmp	.-6      	; 0xcb4 <DataflashManager_ReadBlocks+0x1a4>
				return SPDR;
     cba:	8e b5       	in	r24, 0x2e	; 46
     cbc:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     cc0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     cc2:	0d b4       	in	r0, 0x2d	; 45
     cc4:	07 fe       	sbrs	r0, 7
     cc6:	fd cf       	rjmp	.-6      	; 0xcc2 <DataflashManager_ReadBlocks+0x1b2>
				return SPDR;
     cc8:	8e b5       	in	r24, 0x2e	; 46
     cca:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     cce:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     cd0:	0d b4       	in	r0, 0x2d	; 45
     cd2:	07 fe       	sbrs	r0, 7
     cd4:	fd cf       	rjmp	.-6      	; 0xcd0 <DataflashManager_ReadBlocks+0x1c0>
				return SPDR;
     cd6:	8e b5       	in	r24, 0x2e	; 46
     cd8:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     cdc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     cde:	0d b4       	in	r0, 0x2d	; 45
     ce0:	07 fe       	sbrs	r0, 7
     ce2:	fd cf       	rjmp	.-6      	; 0xcde <DataflashManager_ReadBlocks+0x1ce>
				return SPDR;
     ce4:	8e b5       	in	r24, 0x2e	; 46
     ce6:	80 93 f1 00 	sts	0x00F1, r24

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     cea:	f5 01       	movw	r30, r10
     cec:	86 a9       	ldd	r24, Z+54	; 0x36
     cee:	88 23       	and	r24, r24
     cf0:	c9 f4       	brne	.+50     	; 0xd24 <DataflashManager_ReadBlocks+0x214>
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     cf2:	9f 5f       	subi	r25, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     cf4:	d3 94       	inc	r13
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     cf6:	f0 e2       	ldi	r31, 0x20	; 32
     cf8:	df 16       	cp	r13, r31
     cfa:	09 f0       	breq	.+2      	; 0xcfe <DataflashManager_ReadBlocks+0x1ee>
     cfc:	57 cf       	rjmp	.-338    	; 0xbac <DataflashManager_ReadBlocks+0x9c>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     cfe:	08 94       	sec
     d00:	e1 08       	sbc	r14, r1
     d02:	f1 08       	sbc	r15, r1

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     d04:	e1 14       	cp	r14, r1
     d06:	f1 04       	cpc	r15, r1
     d08:	09 f0       	breq	.+2      	; 0xd0c <DataflashManager_ReadBlocks+0x1fc>
     d0a:	4f cf       	rjmp	.-354    	; 0xbaa <DataflashManager_ReadBlocks+0x9a>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     d0c:	80 91 e8 00 	lds	r24, 0x00E8
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     d10:	85 fd       	sbrc	r24, 5
     d12:	05 c0       	rjmp	.+10     	; 0xd1e <DataflashManager_ReadBlocks+0x20e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d14:	80 91 e8 00 	lds	r24, 0x00E8
     d18:	8e 77       	andi	r24, 0x7E	; 126
     d1a:	80 93 e8 00 	sts	0x00E8, r24
     d1e:	8e b1       	in	r24, 0x0e	; 14
     d20:	83 60       	ori	r24, 0x03	; 3
     d22:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearIN();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     d24:	0f 90       	pop	r0
     d26:	cf 91       	pop	r28
     d28:	df 91       	pop	r29
     d2a:	1f 91       	pop	r17
     d2c:	0f 91       	pop	r16
     d2e:	ff 90       	pop	r15
     d30:	ef 90       	pop	r14
     d32:	df 90       	pop	r13
     d34:	cf 90       	pop	r12
     d36:	bf 90       	pop	r11
     d38:	af 90       	pop	r10
     d3a:	08 95       	ret

00000d3c <DataflashManager_WriteBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
     d3c:	8f 92       	push	r8
     d3e:	9f 92       	push	r9
     d40:	af 92       	push	r10
     d42:	bf 92       	push	r11
     d44:	cf 92       	push	r12
     d46:	df 92       	push	r13
     d48:	ef 92       	push	r14
     d4a:	ff 92       	push	r15
     d4c:	0f 93       	push	r16
     d4e:	1f 93       	push	r17
     d50:	df 93       	push	r29
     d52:	cf 93       	push	r28
     d54:	0f 92       	push	r0
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	5c 01       	movw	r10, r24
     d5c:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     d5e:	09 e0       	ldi	r16, 0x09	; 9
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	0a 95       	dec	r16
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <DataflashManager_WriteBlocks+0x24>
     d6c:	db 01       	movw	r26, r22
     d6e:	ca 01       	movw	r24, r20
     d70:	1a e0       	ldi	r17, 0x0A	; 10
     d72:	b6 95       	lsr	r27
     d74:	a7 95       	ror	r26
     d76:	97 95       	ror	r25
     d78:	87 95       	ror	r24
     d7a:	1a 95       	dec	r17
     d7c:	d1 f7       	brne	.-12     	; 0xd72 <DataflashManager_WriteBlocks+0x36>
     d7e:	8c 01       	movw	r16, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     d80:	bf ef       	ldi	r27, 0xFF	; 255
     d82:	cb 2e       	mov	r12, r27
     d84:	b3 e0       	ldi	r27, 0x03	; 3
     d86:	db 2e       	mov	r13, r27
     d88:	c4 22       	and	r12, r20
     d8a:	d5 22       	and	r13, r21
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     d8c:	b2 dc       	rcall	.-1692   	; 0x6f2 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     d8e:	83 e5       	ldi	r24, 0x53	; 83
     d90:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     d92:	0d b4       	in	r0, 0x2d	; 45
     d94:	07 fe       	sbrs	r0, 7
     d96:	fd cf       	rjmp	.-6      	; 0xd92 <DataflashManager_WriteBlocks+0x56>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
	/* Copy selected dataflash's current page contents to the Dataflash buffer */
	Dataflash_SendByte(DF_CMD_MAINMEMTOBUFF1);
	Dataflash_SendAddressBytes(CurrDFPage, 0);
     d98:	c8 01       	movw	r24, r16
     d9a:	60 e0       	ldi	r22, 0x00	; 0
     d9c:	70 e0       	ldi	r23, 0x00	; 0
     d9e:	d5 dc       	rcall	.-1622   	; 0x74a <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     da0:	c6 dc       	rcall	.-1652   	; 0x72e <Dataflash_WaitWhileBusy>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     da2:	84 e8       	ldi	r24, 0x84	; 132
     da4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     da6:	0d b4       	in	r0, 0x2d	; 45
     da8:	07 fe       	sbrs	r0, 7
     daa:	fd cf       	rjmp	.-6      	; 0xda6 <DataflashManager_WriteBlocks+0x6a>
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	b6 01       	movw	r22, r12
     db2:	cb dc       	rcall	.-1642   	; 0x74a <Dataflash_SendAddressBytes>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     db4:	0e 94 cf 1a 	call	0x359e	; 0x359e <Endpoint_WaitUntilReady>
     db8:	88 23       	and	r24, r24
     dba:	09 f0       	breq	.+2      	; 0xdbe <DataflashManager_WriteBlocks+0x82>
     dbc:	eb c0       	rjmp	.+470    	; 0xf94 <DataflashManager_WriteBlocks+0x258>
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     dbe:	a4 e0       	ldi	r26, 0x04	; 4
     dc0:	d6 94       	lsr	r13
     dc2:	c7 94       	ror	r12
     dc4:	aa 95       	dec	r26
     dc6:	e1 f7       	brne	.-8      	; 0xdc0 <DataflashManager_WriteBlocks+0x84>
     dc8:	9c 2d       	mov	r25, r12
     dca:	47 01       	movw	r8, r14
     dcc:	f5 e0       	ldi	r31, 0x05	; 5
     dce:	88 0c       	add	r8, r8
     dd0:	99 1c       	adc	r9, r9
     dd2:	fa 95       	dec	r31
     dd4:	e1 f7       	brne	.-8      	; 0xdce <DataflashManager_WriteBlocks+0x92>
     dd6:	dd 24       	eor	r13, r13
     dd8:	be c0       	rjmp	.+380    	; 0xf56 <DataflashManager_WriteBlocks+0x21a>
     dda:	cc 24       	eor	r12, r12
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     ddc:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently empty */
			if (!(Endpoint_IsReadWriteAllowed()))
     de0:	85 fd       	sbrc	r24, 5
     de2:	0c c0       	rjmp	.+24     	; 0xdfc <DataflashManager_WriteBlocks+0xc0>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     de4:	80 91 e8 00 	lds	r24, 0x00E8
     de8:	8b 77       	andi	r24, 0x7B	; 123
     dea:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the current endpoint bank */
				Endpoint_ClearOUT();

				/* Wait until the host has sent another packet */
				if (Endpoint_WaitUntilReady())
     dee:	99 83       	std	Y+1, r25	; 0x01
     df0:	0e 94 cf 1a 	call	0x359e	; 0x359e <Endpoint_WaitUntilReady>
     df4:	99 81       	ldd	r25, Y+1	; 0x01
     df6:	88 23       	and	r24, r24
     df8:	09 f0       	breq	.+2      	; 0xdfc <DataflashManager_WriteBlocks+0xc0>
     dfa:	cc c0       	rjmp	.+408    	; 0xf94 <DataflashManager_WriteBlocks+0x258>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     dfc:	90 34       	cpi	r25, 0x40	; 64
     dfe:	09 f0       	breq	.+2      	; 0xe02 <DataflashManager_WriteBlocks+0xc6>
     e00:	39 c0       	rjmp	.+114    	; 0xe74 <DataflashManager_WriteBlocks+0x138>
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
     e02:	95 dc       	rcall	.-1750   	; 0x72e <Dataflash_WaitWhileBusy>
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     e04:	dd 20       	and	r13, r13
     e06:	11 f4       	brne	.+4      	; 0xe0c <DataflashManager_WriteBlocks+0xd0>
     e08:	83 e8       	ldi	r24, 0x83	; 131
     e0a:	01 c0       	rjmp	.+2      	; 0xe0e <DataflashManager_WriteBlocks+0xd2>
     e0c:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e0e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     e10:	0d b4       	in	r0, 0x2d	; 45
     e12:	07 fe       	sbrs	r0, 7
     e14:	fd cf       	rjmp	.-6      	; 0xe10 <DataflashManager_WriteBlocks+0xd4>
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     e16:	c8 01       	movw	r24, r16
     e18:	60 e0       	ldi	r22, 0x00	; 0
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	96 dc       	rcall	.-1748   	; 0x74a <Dataflash_SendAddressBytes>

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     e1e:	0f 5f       	subi	r16, 0xFF	; 255
     e20:	1f 4f       	sbci	r17, 0xFF	; 255
			 *  or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     e22:	8e b1       	in	r24, 0x0e	; 14

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     e24:	83 70       	andi	r24, 0x03	; 3
     e26:	81 30       	cpi	r24, 0x01	; 1
     e28:	09 f4       	brne	.+2      	; 0xe2c <DataflashManager_WriteBlocks+0xf0>
				  UsingSecondBuffer = !(UsingSecondBuffer);
     e2a:	d8 26       	eor	r13, r24

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     e2c:	c8 01       	movw	r24, r16
     e2e:	61 dc       	rcall	.-1854   	; 0x6f2 <Dataflash_SelectChipFromPage>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     e30:	20 e4       	ldi	r18, 0x40	; 64
     e32:	82 16       	cp	r8, r18
     e34:	91 04       	cpc	r9, r1
     e36:	78 f4       	brcc	.+30     	; 0xe56 <DataflashManager_WriteBlocks+0x11a>
				{
					/* Copy selected dataflash's current page contents to the Dataflash buffer */
					Dataflash_WaitWhileBusy();
     e38:	7a dc       	rcall	.-1804   	; 0x72e <Dataflash_WaitWhileBusy>
					Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_MAINMEMTOBUFF2 : DF_CMD_MAINMEMTOBUFF1);
     e3a:	dd 20       	and	r13, r13
     e3c:	11 f4       	brne	.+4      	; 0xe42 <DataflashManager_WriteBlocks+0x106>
     e3e:	83 e5       	ldi	r24, 0x53	; 83
     e40:	01 c0       	rjmp	.+2      	; 0xe44 <DataflashManager_WriteBlocks+0x108>
     e42:	85 e5       	ldi	r24, 0x55	; 85
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e44:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     e46:	0d b4       	in	r0, 0x2d	; 45
     e48:	07 fe       	sbrs	r0, 7
     e4a:	fd cf       	rjmp	.-6      	; 0xe46 <DataflashManager_WriteBlocks+0x10a>
					Dataflash_SendAddressBytes(CurrDFPage, 0);
     e4c:	c8 01       	movw	r24, r16
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	7b dc       	rcall	.-1802   	; 0x74a <Dataflash_SendAddressBytes>
					Dataflash_WaitWhileBusy();
     e54:	6c dc       	rcall	.-1832   	; 0x72e <Dataflash_WaitWhileBusy>
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
     e56:	dd 20       	and	r13, r13
     e58:	11 f4       	brne	.+4      	; 0xe5e <DataflashManager_WriteBlocks+0x122>
     e5a:	84 e8       	ldi	r24, 0x84	; 132
     e5c:	01 c0       	rjmp	.+2      	; 0xe60 <DataflashManager_WriteBlocks+0x124>
     e5e:	87 e8       	ldi	r24, 0x87	; 135
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e60:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     e62:	0d b4       	in	r0, 0x2d	; 45
     e64:	07 fe       	sbrs	r0, 7
     e66:	fd cf       	rjmp	.-6      	; 0xe62 <DataflashManager_WriteBlocks+0x126>
				Dataflash_SendAddressBytes(0, 0);
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	60 e0       	ldi	r22, 0x00	; 0
     e6e:	70 e0       	ldi	r23, 0x00	; 0
     e70:	6c dc       	rcall	.-1832   	; 0x74a <Dataflash_SendAddressBytes>
     e72:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     e74:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e78:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     e7a:	0d b4       	in	r0, 0x2d	; 45
     e7c:	07 fe       	sbrs	r0, 7
     e7e:	fd cf       	rjmp	.-6      	; 0xe7a <DataflashManager_WriteBlocks+0x13e>
     e80:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e84:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     e86:	0d b4       	in	r0, 0x2d	; 45
     e88:	07 fe       	sbrs	r0, 7
     e8a:	fd cf       	rjmp	.-6      	; 0xe86 <DataflashManager_WriteBlocks+0x14a>
     e8c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e90:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     e92:	0d b4       	in	r0, 0x2d	; 45
     e94:	07 fe       	sbrs	r0, 7
     e96:	fd cf       	rjmp	.-6      	; 0xe92 <DataflashManager_WriteBlocks+0x156>
     e98:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e9c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     e9e:	0d b4       	in	r0, 0x2d	; 45
     ea0:	07 fe       	sbrs	r0, 7
     ea2:	fd cf       	rjmp	.-6      	; 0xe9e <DataflashManager_WriteBlocks+0x162>
     ea4:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ea8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     eaa:	0d b4       	in	r0, 0x2d	; 45
     eac:	07 fe       	sbrs	r0, 7
     eae:	fd cf       	rjmp	.-6      	; 0xeaa <DataflashManager_WriteBlocks+0x16e>
     eb0:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     eb4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     eb6:	0d b4       	in	r0, 0x2d	; 45
     eb8:	07 fe       	sbrs	r0, 7
     eba:	fd cf       	rjmp	.-6      	; 0xeb6 <DataflashManager_WriteBlocks+0x17a>
     ebc:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ec0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     ec2:	0d b4       	in	r0, 0x2d	; 45
     ec4:	07 fe       	sbrs	r0, 7
     ec6:	fd cf       	rjmp	.-6      	; 0xec2 <DataflashManager_WriteBlocks+0x186>
     ec8:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ecc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     ece:	0d b4       	in	r0, 0x2d	; 45
     ed0:	07 fe       	sbrs	r0, 7
     ed2:	fd cf       	rjmp	.-6      	; 0xece <DataflashManager_WriteBlocks+0x192>
     ed4:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ed8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     eda:	0d b4       	in	r0, 0x2d	; 45
     edc:	07 fe       	sbrs	r0, 7
     ede:	fd cf       	rjmp	.-6      	; 0xeda <DataflashManager_WriteBlocks+0x19e>
     ee0:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ee4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     ee6:	0d b4       	in	r0, 0x2d	; 45
     ee8:	07 fe       	sbrs	r0, 7
     eea:	fd cf       	rjmp	.-6      	; 0xee6 <DataflashManager_WriteBlocks+0x1aa>
     eec:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ef0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     ef2:	0d b4       	in	r0, 0x2d	; 45
     ef4:	07 fe       	sbrs	r0, 7
     ef6:	fd cf       	rjmp	.-6      	; 0xef2 <DataflashManager_WriteBlocks+0x1b6>
     ef8:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     efc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     efe:	0d b4       	in	r0, 0x2d	; 45
     f00:	07 fe       	sbrs	r0, 7
     f02:	fd cf       	rjmp	.-6      	; 0xefe <DataflashManager_WriteBlocks+0x1c2>
     f04:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f08:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f0a:	0d b4       	in	r0, 0x2d	; 45
     f0c:	07 fe       	sbrs	r0, 7
     f0e:	fd cf       	rjmp	.-6      	; 0xf0a <DataflashManager_WriteBlocks+0x1ce>
     f10:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f14:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f16:	0d b4       	in	r0, 0x2d	; 45
     f18:	07 fe       	sbrs	r0, 7
     f1a:	fd cf       	rjmp	.-6      	; 0xf16 <DataflashManager_WriteBlocks+0x1da>
     f1c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f20:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f22:	0d b4       	in	r0, 0x2d	; 45
     f24:	07 fe       	sbrs	r0, 7
     f26:	fd cf       	rjmp	.-6      	; 0xf22 <DataflashManager_WriteBlocks+0x1e6>
     f28:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f2c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f2e:	0d b4       	in	r0, 0x2d	; 45
     f30:	07 fe       	sbrs	r0, 7
     f32:	fd cf       	rjmp	.-6      	; 0xf2e <DataflashManager_WriteBlocks+0x1f2>

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     f34:	f5 01       	movw	r30, r10
     f36:	86 a9       	ldd	r24, Z+54	; 0x36
     f38:	88 23       	and	r24, r24
     f3a:	61 f5       	brne	.+88     	; 0xf94 <DataflashManager_WriteBlocks+0x258>
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     f3c:	9f 5f       	subi	r25, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     f3e:	c3 94       	inc	r12
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     f40:	f0 e2       	ldi	r31, 0x20	; 32
     f42:	cf 16       	cp	r12, r31
     f44:	09 f0       	breq	.+2      	; 0xf48 <DataflashManager_WriteBlocks+0x20c>
     f46:	4a cf       	rjmp	.-364    	; 0xddc <DataflashManager_WriteBlocks+0xa0>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     f48:	08 94       	sec
     f4a:	e1 08       	sbc	r14, r1
     f4c:	f1 08       	sbc	r15, r1
     f4e:	20 ee       	ldi	r18, 0xE0	; 224
     f50:	3f ef       	ldi	r19, 0xFF	; 255
     f52:	82 0e       	add	r8, r18
     f54:	93 1e       	adc	r9, r19

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     f56:	e1 14       	cp	r14, r1
     f58:	f1 04       	cpc	r15, r1
     f5a:	09 f0       	breq	.+2      	; 0xf5e <DataflashManager_WriteBlocks+0x222>
     f5c:	3e cf       	rjmp	.-388    	; 0xdda <DataflashManager_WriteBlocks+0x9e>
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
     f5e:	e7 db       	rcall	.-2098   	; 0x72e <Dataflash_WaitWhileBusy>
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     f60:	dd 20       	and	r13, r13
     f62:	11 f4       	brne	.+4      	; 0xf68 <DataflashManager_WriteBlocks+0x22c>
     f64:	83 e8       	ldi	r24, 0x83	; 131
     f66:	01 c0       	rjmp	.+2      	; 0xf6a <DataflashManager_WriteBlocks+0x22e>
     f68:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f6a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f6c:	0d b4       	in	r0, 0x2d	; 45
     f6e:	07 fe       	sbrs	r0, 7
     f70:	fd cf       	rjmp	.-6      	; 0xf6c <DataflashManager_WriteBlocks+0x230>
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
     f72:	c8 01       	movw	r24, r16
     f74:	60 e0       	ldi	r22, 0x00	; 0
     f76:	70 e0       	ldi	r23, 0x00	; 0
     f78:	e8 db       	rcall	.-2096   	; 0x74a <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     f7a:	d9 db       	rcall	.-2126   	; 0x72e <Dataflash_WaitWhileBusy>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f7c:	80 91 e8 00 	lds	r24, 0x00E8

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     f80:	85 fd       	sbrc	r24, 5
     f82:	05 c0       	rjmp	.+10     	; 0xf8e <DataflashManager_WriteBlocks+0x252>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f84:	80 91 e8 00 	lds	r24, 0x00E8
     f88:	8b 77       	andi	r24, 0x7B	; 123
     f8a:	80 93 e8 00 	sts	0x00E8, r24
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     f8e:	8e b1       	in	r24, 0x0e	; 14
     f90:	83 60       	ori	r24, 0x03	; 3
     f92:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearOUT();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     f94:	0f 90       	pop	r0
     f96:	cf 91       	pop	r28
     f98:	df 91       	pop	r29
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	ff 90       	pop	r15
     fa0:	ef 90       	pop	r14
     fa2:	df 90       	pop	r13
     fa4:	cf 90       	pop	r12
     fa6:	bf 90       	pop	r11
     fa8:	af 90       	pop	r10
     faa:	9f 90       	pop	r9
     fac:	8f 90       	pop	r8
     fae:	08 95       	ret

00000fb0 <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
     fb0:	0f 93       	push	r16
     fb2:	1f 93       	push	r17
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	8c 01       	movw	r16, r24
     fba:	86 2f       	mov	r24, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     fbc:	f8 01       	movw	r30, r16
     fbe:	46 8d       	ldd	r20, Z+30	; 0x1e
     fc0:	55 8d       	ldd	r21, Z+29	; 0x1d
     fc2:	64 8d       	ldd	r22, Z+28	; 0x1c
     fc4:	73 8d       	ldd	r23, Z+27	; 0x1b

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     fc6:	c1 a1       	ldd	r28, Z+33	; 0x21
     fc8:	d0 a1       	ldd	r29, Z+32	; 0x20

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= VIRTUAL_MEMORY_BLOCKS)
     fca:	40 30       	cpi	r20, 0x00	; 0
     fcc:	f0 e8       	ldi	r31, 0x80	; 128
     fce:	5f 07       	cpc	r21, r31
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	6f 07       	cpc	r22, r31
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	7f 07       	cpc	r23, r31
     fd8:	68 f0       	brcs	.+26     	; 0xff4 <SCSI_Command_ReadWrite_10+0x44>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     fda:	80 91 86 01 	lds	r24, 0x0186
     fde:	80 7f       	andi	r24, 0xF0	; 240
     fe0:	85 60       	ori	r24, 0x05	; 5
     fe2:	80 93 86 01 	sts	0x0186, r24
     fe6:	81 e2       	ldi	r24, 0x21	; 33
     fe8:	80 93 90 01 	sts	0x0190, r24
     fec:	10 92 91 01 	sts	0x0191, r1
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	21 c0       	rjmp	.+66     	; 0x1036 <SCSI_Command_ReadWrite_10+0x86>

		return false;
	}
	
	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
     ff4:	88 23       	and	r24, r24
     ff6:	21 f0       	breq	.+8      	; 0x1000 <SCSI_Command_ReadWrite_10+0x50>
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     ff8:	c8 01       	movw	r24, r16
     ffa:	9e 01       	movw	r18, r28
     ffc:	89 dd       	rcall	.-1262   	; 0xb10 <DataflashManager_ReadBlocks>
     ffe:	03 c0       	rjmp	.+6      	; 0x1006 <SCSI_Command_ReadWrite_10+0x56>
	else
	  DataflashManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
    1000:	c8 01       	movw	r24, r16
    1002:	9e 01       	movw	r18, r28
    1004:	9b de       	rcall	.-714    	; 0xd3c <DataflashManager_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
    1006:	9e 01       	movw	r18, r28
    1008:	40 e0       	ldi	r20, 0x00	; 0
    100a:	50 e0       	ldi	r21, 0x00	; 0
    100c:	89 e0       	ldi	r24, 0x09	; 9
    100e:	22 0f       	add	r18, r18
    1010:	33 1f       	adc	r19, r19
    1012:	44 1f       	adc	r20, r20
    1014:	55 1f       	adc	r21, r21
    1016:	8a 95       	dec	r24
    1018:	d1 f7       	brne	.-12     	; 0x100e <SCSI_Command_ReadWrite_10+0x5e>
    101a:	f8 01       	movw	r30, r16
    101c:	82 89       	ldd	r24, Z+18	; 0x12
    101e:	93 89       	ldd	r25, Z+19	; 0x13
    1020:	a4 89       	ldd	r26, Z+20	; 0x14
    1022:	b5 89       	ldd	r27, Z+21	; 0x15
    1024:	82 1b       	sub	r24, r18
    1026:	93 0b       	sbc	r25, r19
    1028:	a4 0b       	sbc	r26, r20
    102a:	b5 0b       	sbc	r27, r21
    102c:	82 8b       	std	Z+18, r24	; 0x12
    102e:	93 8b       	std	Z+19, r25	; 0x13
    1030:	a4 8b       	std	Z+20, r26	; 0x14
    1032:	b5 8b       	std	Z+21, r27	; 0x15
    1034:	81 e0       	ldi	r24, 0x01	; 1

	return true;
}
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	1f 91       	pop	r17
    103c:	0f 91       	pop	r16
    103e:	08 95       	ret

00001040 <SCSI_DecodeSCSICommand>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean true if the command completed successfully, false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1040:	cf 92       	push	r12
    1042:	df 92       	push	r13
    1044:	ef 92       	push	r14
    1046:	ff 92       	push	r15
    1048:	0f 93       	push	r16
    104a:	1f 93       	push	r17
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
    1054:	28 97       	sbiw	r28, 0x08	; 8
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	f8 94       	cli
    105a:	de bf       	out	0x3e, r29	; 62
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	cd bf       	out	0x3d, r28	; 61
    1060:	7c 01       	movw	r14, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
    1062:	fc 01       	movw	r30, r24
    1064:	81 8d       	ldd	r24, Z+25	; 0x19
    1066:	8d 31       	cpi	r24, 0x1D	; 29
    1068:	09 f4       	brne	.+2      	; 0x106c <SCSI_DecodeSCSICommand+0x2c>
    106a:	ac c0       	rjmp	.+344    	; 0x11c4 <SCSI_DecodeSCSICommand+0x184>
    106c:	8e 31       	cpi	r24, 0x1E	; 30
    106e:	78 f4       	brcc	.+30     	; 0x108e <SCSI_DecodeSCSICommand+0x4e>
    1070:	83 30       	cpi	r24, 0x03	; 3
    1072:	09 f4       	brne	.+2      	; 0x1076 <SCSI_DecodeSCSICommand+0x36>
    1074:	54 c0       	rjmp	.+168    	; 0x111e <SCSI_DecodeSCSICommand+0xde>
    1076:	84 30       	cpi	r24, 0x04	; 4
    1078:	20 f4       	brcc	.+8      	; 0x1082 <SCSI_DecodeSCSICommand+0x42>
    107a:	88 23       	and	r24, r24
    107c:	09 f4       	brne	.+2      	; 0x1080 <SCSI_DecodeSCSICommand+0x40>
    107e:	df c0       	rjmp	.+446    	; 0x123e <SCSI_DecodeSCSICommand+0x1fe>
    1080:	e4 c0       	rjmp	.+456    	; 0x124a <SCSI_DecodeSCSICommand+0x20a>
    1082:	82 31       	cpi	r24, 0x12	; 18
    1084:	b9 f0       	breq	.+46     	; 0x10b4 <SCSI_DecodeSCSICommand+0x74>
    1086:	8a 31       	cpi	r24, 0x1A	; 26
    1088:	09 f0       	breq	.+2      	; 0x108c <SCSI_DecodeSCSICommand+0x4c>
    108a:	df c0       	rjmp	.+446    	; 0x124a <SCSI_DecodeSCSICommand+0x20a>
    108c:	be c0       	rjmp	.+380    	; 0x120a <SCSI_DecodeSCSICommand+0x1ca>
    108e:	88 32       	cpi	r24, 0x28	; 40
    1090:	09 f4       	brne	.+2      	; 0x1094 <SCSI_DecodeSCSICommand+0x54>
    1092:	b5 c0       	rjmp	.+362    	; 0x11fe <SCSI_DecodeSCSICommand+0x1be>
    1094:	89 32       	cpi	r24, 0x29	; 41
    1096:	38 f4       	brcc	.+14     	; 0x10a6 <SCSI_DecodeSCSICommand+0x66>
    1098:	8e 31       	cpi	r24, 0x1E	; 30
    109a:	09 f4       	brne	.+2      	; 0x109e <SCSI_DecodeSCSICommand+0x5e>
    109c:	d0 c0       	rjmp	.+416    	; 0x123e <SCSI_DecodeSCSICommand+0x1fe>
    109e:	85 32       	cpi	r24, 0x25	; 37
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <SCSI_DecodeSCSICommand+0x64>
    10a2:	d3 c0       	rjmp	.+422    	; 0x124a <SCSI_DecodeSCSICommand+0x20a>
    10a4:	61 c0       	rjmp	.+194    	; 0x1168 <SCSI_DecodeSCSICommand+0x128>
    10a6:	8a 32       	cpi	r24, 0x2A	; 42
    10a8:	09 f4       	brne	.+2      	; 0x10ac <SCSI_DecodeSCSICommand+0x6c>
    10aa:	a6 c0       	rjmp	.+332    	; 0x11f8 <SCSI_DecodeSCSICommand+0x1b8>
    10ac:	8f 32       	cpi	r24, 0x2F	; 47
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <SCSI_DecodeSCSICommand+0x72>
    10b0:	cc c0       	rjmp	.+408    	; 0x124a <SCSI_DecodeSCSICommand+0x20a>
    10b2:	c5 c0       	rjmp	.+394    	; 0x123e <SCSI_DecodeSCSICommand+0x1fe>
    10b4:	f7 01       	movw	r30, r14
    10b6:	05 8d       	ldd	r16, Z+29	; 0x1d
    10b8:	14 8d       	ldd	r17, Z+28	; 0x1c
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
    10ba:	82 8d       	ldd	r24, Z+26	; 0x1a
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	83 70       	andi	r24, 0x03	; 3
    10c0:	90 70       	andi	r25, 0x00	; 0
    10c2:	89 2b       	or	r24, r25
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <SCSI_DecodeSCSICommand+0x88>
    10c6:	82 c0       	rjmp	.+260    	; 0x11cc <SCSI_DecodeSCSICommand+0x18c>
    10c8:	83 8d       	ldd	r24, Z+27	; 0x1b
    10ca:	88 23       	and	r24, r24
    10cc:	09 f0       	breq	.+2      	; 0x10d0 <SCSI_DecodeSCSICommand+0x90>
    10ce:	7e c0       	rjmp	.+252    	; 0x11cc <SCSI_DecodeSCSICommand+0x18c>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
    10d0:	68 01       	movw	r12, r16
    10d2:	05 32       	cpi	r16, 0x25	; 37
    10d4:	11 05       	cpc	r17, r1
    10d6:	18 f0       	brcs	.+6      	; 0x10de <SCSI_DecodeSCSICommand+0x9e>
    10d8:	94 e2       	ldi	r25, 0x24	; 36
    10da:	c9 2e       	mov	r12, r25
    10dc:	d1 2c       	mov	r13, r1
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
    10de:	86 e9       	ldi	r24, 0x96	; 150
    10e0:	91 e0       	ldi	r25, 0x01	; 1
    10e2:	b6 01       	movw	r22, r12
    10e4:	40 e0       	ldi	r20, 0x00	; 0
    10e6:	50 e0       	ldi	r21, 0x00	; 0
    10e8:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
    10ec:	c8 01       	movw	r24, r16
    10ee:	8c 19       	sub	r24, r12
    10f0:	9d 09       	sbc	r25, r13
    10f2:	60 e0       	ldi	r22, 0x00	; 0
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    10f6:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <Endpoint_Null_Stream>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10fa:	80 91 e8 00 	lds	r24, 0x00E8
    10fe:	8e 77       	andi	r24, 0x7E	; 126
    1100:	80 93 e8 00 	sts	0x00E8, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
    1104:	96 01       	movw	r18, r12
    1106:	40 e0       	ldi	r20, 0x00	; 0
    1108:	50 e0       	ldi	r21, 0x00	; 0
    110a:	f7 01       	movw	r30, r14
    110c:	82 89       	ldd	r24, Z+18	; 0x12
    110e:	93 89       	ldd	r25, Z+19	; 0x13
    1110:	a4 89       	ldd	r26, Z+20	; 0x14
    1112:	b5 89       	ldd	r27, Z+21	; 0x15
    1114:	82 1b       	sub	r24, r18
    1116:	93 0b       	sbc	r25, r19
    1118:	a4 0b       	sbc	r26, r20
    111a:	b5 0b       	sbc	r27, r21
    111c:	8b c0       	rjmp	.+278    	; 0x1234 <SCSI_DecodeSCSICommand+0x1f4>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
    111e:	f7 01       	movw	r30, r14
    1120:	15 8d       	ldd	r17, Z+29	; 0x1d
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
    1122:	01 2f       	mov	r16, r17
    1124:	13 31       	cpi	r17, 0x13	; 19
    1126:	08 f0       	brcs	.+2      	; 0x112a <SCSI_DecodeSCSICommand+0xea>
    1128:	02 e1       	ldi	r16, 0x12	; 18

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
    112a:	84 e8       	ldi	r24, 0x84	; 132
    112c:	91 e0       	ldi	r25, 0x01	; 1
    112e:	60 2f       	mov	r22, r16
    1130:	70 e0       	ldi	r23, 0x00	; 0
    1132:	40 e0       	ldi	r20, 0x00	; 0
    1134:	50 e0       	ldi	r21, 0x00	; 0
    1136:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
    113a:	81 2f       	mov	r24, r17
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	80 1b       	sub	r24, r16
    1140:	91 09       	sbc	r25, r1
    1142:	60 e0       	ldi	r22, 0x00	; 0
    1144:	70 e0       	ldi	r23, 0x00	; 0
    1146:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <Endpoint_Null_Stream>
    114a:	80 91 e8 00 	lds	r24, 0x00E8
    114e:	8e 77       	andi	r24, 0x7E	; 126
    1150:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
    1154:	f7 01       	movw	r30, r14
    1156:	82 89       	ldd	r24, Z+18	; 0x12
    1158:	93 89       	ldd	r25, Z+19	; 0x13
    115a:	a4 89       	ldd	r26, Z+20	; 0x14
    115c:	b5 89       	ldd	r27, Z+21	; 0x15
    115e:	80 1b       	sub	r24, r16
    1160:	91 09       	sbc	r25, r1
    1162:	a1 09       	sbc	r26, r1
    1164:	b1 09       	sbc	r27, r1
    1166:	66 c0       	rjmp	.+204    	; 0x1234 <SCSI_DecodeSCSICommand+0x1f4>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN = (VIRTUAL_MEMORY_BLOCKS - 1);
    1168:	8f ef       	ldi	r24, 0xFF	; 255
    116a:	9f e7       	ldi	r25, 0x7F	; 127
    116c:	a0 e0       	ldi	r26, 0x00	; 0
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	89 83       	std	Y+1, r24	; 0x01
    1172:	9a 83       	std	Y+2, r25	; 0x02
    1174:	ab 83       	std	Y+3, r26	; 0x03
    1176:	bc 83       	std	Y+4, r27	; 0x04
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	92 e0       	ldi	r25, 0x02	; 2
    117c:	a0 e0       	ldi	r26, 0x00	; 0
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	8d 83       	std	Y+5, r24	; 0x05
    1182:	9e 83       	std	Y+6, r25	; 0x06
    1184:	af 83       	std	Y+7, r26	; 0x07
    1186:	b8 87       	std	Y+8, r27	; 0x08

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
    1188:	ce 01       	movw	r24, r28
    118a:	01 96       	adiw	r24, 0x01	; 1
    118c:	64 e0       	ldi	r22, 0x04	; 4
    118e:	70 e0       	ldi	r23, 0x00	; 0
    1190:	40 e0       	ldi	r20, 0x00	; 0
    1192:	50 e0       	ldi	r21, 0x00	; 0
    1194:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <Endpoint_Write_Stream_BE>
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
    1198:	ce 01       	movw	r24, r28
    119a:	05 96       	adiw	r24, 0x05	; 5
    119c:	64 e0       	ldi	r22, 0x04	; 4
    119e:	70 e0       	ldi	r23, 0x00	; 0
    11a0:	40 e0       	ldi	r20, 0x00	; 0
    11a2:	50 e0       	ldi	r21, 0x00	; 0
    11a4:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <Endpoint_Write_Stream_BE>
    11a8:	80 91 e8 00 	lds	r24, 0x00E8
    11ac:	8e 77       	andi	r24, 0x7E	; 126
    11ae:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
    11b2:	f7 01       	movw	r30, r14
    11b4:	82 89       	ldd	r24, Z+18	; 0x12
    11b6:	93 89       	ldd	r25, Z+19	; 0x13
    11b8:	a4 89       	ldd	r26, Z+20	; 0x14
    11ba:	b5 89       	ldd	r27, Z+21	; 0x15
    11bc:	08 97       	sbiw	r24, 0x08	; 8
    11be:	a1 09       	sbc	r26, r1
    11c0:	b1 09       	sbc	r27, r1
    11c2:	38 c0       	rjmp	.+112    	; 0x1234 <SCSI_DecodeSCSICommand+0x1f4>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
    11c4:	f7 01       	movw	r30, r14
    11c6:	82 8d       	ldd	r24, Z+26	; 0x1a
    11c8:	82 fd       	sbrc	r24, 2
    11ca:	08 c0       	rjmp	.+16     	; 0x11dc <SCSI_DecodeSCSICommand+0x19c>
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    11cc:	80 91 86 01 	lds	r24, 0x0186
    11d0:	80 7f       	andi	r24, 0xF0	; 240
    11d2:	85 60       	ori	r24, 0x05	; 5
    11d4:	80 93 86 01 	sts	0x0186, r24
    11d8:	84 e2       	ldi	r24, 0x24	; 36
    11da:	3e c0       	rjmp	.+124    	; 0x1258 <SCSI_DecodeSCSICommand+0x218>

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
    11dc:	6e dc       	rcall	.-1828   	; 0xaba <DataflashManager_CheckDataflashOperation>
    11de:	88 23       	and	r24, r24
    11e0:	71 f5       	brne	.+92     	; 0x123e <SCSI_DecodeSCSICommand+0x1fe>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
    11e2:	80 91 86 01 	lds	r24, 0x0186
    11e6:	80 7f       	andi	r24, 0xF0	; 240
    11e8:	84 60       	ori	r24, 0x04	; 4
    11ea:	80 93 86 01 	sts	0x0186, r24
    11ee:	10 92 90 01 	sts	0x0190, r1
    11f2:	10 92 91 01 	sts	0x0191, r1
    11f6:	33 c0       	rjmp	.+102    	; 0x125e <SCSI_DecodeSCSICommand+0x21e>
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
    11f8:	c7 01       	movw	r24, r14
    11fa:	60 e0       	ldi	r22, 0x00	; 0
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <SCSI_DecodeSCSICommand+0x1c2>
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
    11fe:	c7 01       	movw	r24, r14
    1200:	61 e0       	ldi	r22, 0x01	; 1
    1202:	d6 de       	rcall	.-596    	; 0xfb0 <SCSI_Command_ReadWrite_10>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
    1204:	88 23       	and	r24, r24
    1206:	59 f1       	breq	.+86     	; 0x125e <SCSI_DecodeSCSICommand+0x21e>
    1208:	2c c0       	rjmp	.+88     	; 0x1262 <SCSI_DecodeSCSICommand+0x222>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    120a:	10 92 f1 00 	sts	0x00F1, r1
    120e:	10 92 f1 00 	sts	0x00F1, r1
    1212:	10 92 f1 00 	sts	0x00F1, r1
    1216:	10 92 f1 00 	sts	0x00F1, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    121a:	80 91 e8 00 	lds	r24, 0x00E8
    121e:	8e 77       	andi	r24, 0x7E	; 126
    1220:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
    1224:	f7 01       	movw	r30, r14
    1226:	82 89       	ldd	r24, Z+18	; 0x12
    1228:	93 89       	ldd	r25, Z+19	; 0x13
    122a:	a4 89       	ldd	r26, Z+20	; 0x14
    122c:	b5 89       	ldd	r27, Z+21	; 0x15
    122e:	04 97       	sbiw	r24, 0x04	; 4
    1230:	a1 09       	sbc	r26, r1
    1232:	b1 09       	sbc	r27, r1
    1234:	82 8b       	std	Z+18, r24	; 0x12
    1236:	93 8b       	std	Z+19, r25	; 0x13
    1238:	a4 8b       	std	Z+20, r26	; 0x14
    123a:	b5 8b       	std	Z+21, r27	; 0x15
    123c:	12 c0       	rjmp	.+36     	; 0x1262 <SCSI_DecodeSCSICommand+0x222>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
    123e:	f7 01       	movw	r30, r14
    1240:	12 8a       	std	Z+18, r1	; 0x12
    1242:	13 8a       	std	Z+19, r1	; 0x13
    1244:	14 8a       	std	Z+20, r1	; 0x14
    1246:	15 8a       	std	Z+21, r1	; 0x15
    1248:	0c c0       	rjmp	.+24     	; 0x1262 <SCSI_DecodeSCSICommand+0x222>
			break;
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    124a:	80 91 86 01 	lds	r24, 0x0186
    124e:	80 7f       	andi	r24, 0xF0	; 240
    1250:	85 60       	ori	r24, 0x05	; 5
    1252:	80 93 86 01 	sts	0x0186, r24
    1256:	80 e2       	ldi	r24, 0x20	; 32
    1258:	80 93 90 01 	sts	0x0190, r24
    125c:	ca cf       	rjmp	.-108    	; 0x11f2 <SCSI_DecodeSCSICommand+0x1b2>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	0a c0       	rjmp	.+20     	; 0x1276 <SCSI_DecodeSCSICommand+0x236>
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
    1262:	80 91 86 01 	lds	r24, 0x0186
    1266:	80 7f       	andi	r24, 0xF0	; 240
    1268:	80 93 86 01 	sts	0x0186, r24
    126c:	10 92 90 01 	sts	0x0190, r1
    1270:	10 92 91 01 	sts	0x0191, r1
    1274:	81 e0       	ldi	r24, 0x01	; 1

		return true;
	}

	return false;
}
    1276:	28 96       	adiw	r28, 0x08	; 8
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	f8 94       	cli
    127c:	de bf       	out	0x3e, r29	; 62
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	cd bf       	out	0x3d, r28	; 61
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	1f 91       	pop	r17
    1288:	0f 91       	pop	r16
    128a:	ff 90       	pop	r15
    128c:	ef 90       	pop	r14
    128e:	df 90       	pop	r13
    1290:	cf 90       	pop	r12
    1292:	08 95       	ret

00001294 <DS1307_GetTimeDate>:

	return true;
}

bool DS1307_GetTimeDate(TimeDate_t* const TimeDate)
{
    1294:	cf 92       	push	r12
    1296:	df 92       	push	r13
    1298:	ef 92       	push	r14
    129a:	0f 93       	push	r16
    129c:	1f 93       	push	r17
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	28 97       	sbiw	r28, 0x08	; 8
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	6c 01       	movw	r12, r24
	
	return true;
#endif

	DS1307_DateTimeRegs_t CurrentRegValues;
	const uint8_t         ReadAddress = 0;
    12b4:	19 82       	std	Y+1, r1	; 0x01
	
	// Read in the stored Time and Date from the DS1307
	if (TWI_ReadPacket(DS1307_ADDRESS, 10, &ReadAddress, sizeof(ReadAddress),
    12b6:	80 ed       	ldi	r24, 0xD0	; 208
    12b8:	6a e0       	ldi	r22, 0x0A	; 10
    12ba:	ae 01       	movw	r20, r28
    12bc:	4f 5f       	subi	r20, 0xFF	; 255
    12be:	5f 4f       	sbci	r21, 0xFF	; 255
    12c0:	21 e0       	ldi	r18, 0x01	; 1
    12c2:	8e 01       	movw	r16, r28
    12c4:	0e 5f       	subi	r16, 0xFE	; 254
    12c6:	1f 4f       	sbci	r17, 0xFF	; 255
    12c8:	a7 e0       	ldi	r26, 0x07	; 7
    12ca:	ea 2e       	mov	r14, r26
    12cc:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <TWI_ReadPacket>
    12d0:	88 23       	and	r24, r24
    12d2:	11 f0       	breq	.+4      	; 0x12d8 <DS1307_GetTimeDate+0x44>
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	78 c0       	rjmp	.+240    	; 0x13c8 <DS1307_GetTimeDate+0x134>
	{
		return false;
	}
	
	// Convert stored time value into decimal
	TimeDate->Second  = (CurrentRegValues.Byte1.Fields.TenSec  * 10) + CurrentRegValues.Byte1.Fields.Sec;
    12d8:	4a 81       	ldd	r20, Y+2	; 0x02
    12da:	24 2f       	mov	r18, r20
    12dc:	22 95       	swap	r18
    12de:	2f 70       	andi	r18, 0x0F	; 15
    12e0:	82 2f       	mov	r24, r18
    12e2:	87 70       	andi	r24, 0x07	; 7
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	9c 01       	movw	r18, r24
    12e8:	f3 e0       	ldi	r31, 0x03	; 3
    12ea:	22 0f       	add	r18, r18
    12ec:	33 1f       	adc	r19, r19
    12ee:	fa 95       	dec	r31
    12f0:	e1 f7       	brne	.-8      	; 0x12ea <DS1307_GetTimeDate+0x56>
    12f2:	88 0f       	add	r24, r24
    12f4:	99 1f       	adc	r25, r25
    12f6:	28 0f       	add	r18, r24
    12f8:	39 1f       	adc	r19, r25
    12fa:	4f 70       	andi	r20, 0x0F	; 15
    12fc:	42 0f       	add	r20, r18
    12fe:	f6 01       	movw	r30, r12
    1300:	42 83       	std	Z+2, r20	; 0x02
	TimeDate->Minute  = (CurrentRegValues.Byte2.Fields.TenMin  * 10) + CurrentRegValues.Byte2.Fields.Min;
    1302:	4b 81       	ldd	r20, Y+3	; 0x03
    1304:	24 2f       	mov	r18, r20
    1306:	22 95       	swap	r18
    1308:	2f 70       	andi	r18, 0x0F	; 15
    130a:	82 2f       	mov	r24, r18
    130c:	87 70       	andi	r24, 0x07	; 7
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	9c 01       	movw	r18, r24
    1312:	73 e0       	ldi	r23, 0x03	; 3
    1314:	22 0f       	add	r18, r18
    1316:	33 1f       	adc	r19, r19
    1318:	7a 95       	dec	r23
    131a:	e1 f7       	brne	.-8      	; 0x1314 <DS1307_GetTimeDate+0x80>
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	28 0f       	add	r18, r24
    1322:	39 1f       	adc	r19, r25
    1324:	4f 70       	andi	r20, 0x0F	; 15
    1326:	42 0f       	add	r20, r18
    1328:	41 83       	std	Z+1, r20	; 0x01
	TimeDate->Hour    = (CurrentRegValues.Byte3.Fields.TenHour * 10) + CurrentRegValues.Byte3.Fields.Hour;
    132a:	4c 81       	ldd	r20, Y+4	; 0x04
    132c:	24 2f       	mov	r18, r20
    132e:	22 95       	swap	r18
    1330:	2f 70       	andi	r18, 0x0F	; 15
    1332:	82 2f       	mov	r24, r18
    1334:	83 70       	andi	r24, 0x03	; 3
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	9c 01       	movw	r18, r24
    133a:	53 e0       	ldi	r21, 0x03	; 3
    133c:	22 0f       	add	r18, r18
    133e:	33 1f       	adc	r19, r19
    1340:	5a 95       	dec	r21
    1342:	e1 f7       	brne	.-8      	; 0x133c <DS1307_GetTimeDate+0xa8>
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	28 0f       	add	r18, r24
    134a:	39 1f       	adc	r19, r25
    134c:	4f 70       	andi	r20, 0x0F	; 15
    134e:	42 0f       	add	r20, r18
    1350:	40 83       	st	Z, r20

	// Convert stored date value into decimal
	TimeDate->Day    = (CurrentRegValues.Byte5.Fields.TenDay   * 10) + CurrentRegValues.Byte5.Fields.Day;
    1352:	4e 81       	ldd	r20, Y+6	; 0x06
    1354:	24 2f       	mov	r18, r20
    1356:	22 95       	swap	r18
    1358:	2f 70       	andi	r18, 0x0F	; 15
    135a:	82 2f       	mov	r24, r18
    135c:	83 70       	andi	r24, 0x03	; 3
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	9c 01       	movw	r18, r24
    1362:	13 e0       	ldi	r17, 0x03	; 3
    1364:	22 0f       	add	r18, r18
    1366:	33 1f       	adc	r19, r19
    1368:	1a 95       	dec	r17
    136a:	e1 f7       	brne	.-8      	; 0x1364 <DS1307_GetTimeDate+0xd0>
    136c:	88 0f       	add	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	28 0f       	add	r18, r24
    1372:	39 1f       	adc	r19, r25
    1374:	4f 70       	andi	r20, 0x0F	; 15
    1376:	42 0f       	add	r20, r18
    1378:	43 83       	std	Z+3, r20	; 0x03
	TimeDate->Month  = (CurrentRegValues.Byte6.Fields.TenMonth * 10) + CurrentRegValues.Byte6.Fields.Month;
    137a:	4f 81       	ldd	r20, Y+7	; 0x07
    137c:	24 2f       	mov	r18, r20
    137e:	22 95       	swap	r18
    1380:	2f 70       	andi	r18, 0x0F	; 15
    1382:	82 2f       	mov	r24, r18
    1384:	81 70       	andi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	9c 01       	movw	r18, r24
    138a:	a3 e0       	ldi	r26, 0x03	; 3
    138c:	22 0f       	add	r18, r18
    138e:	33 1f       	adc	r19, r19
    1390:	aa 95       	dec	r26
    1392:	e1 f7       	brne	.-8      	; 0x138c <DS1307_GetTimeDate+0xf8>
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	28 0f       	add	r18, r24
    139a:	39 1f       	adc	r19, r25
    139c:	4f 70       	andi	r20, 0x0F	; 15
    139e:	42 0f       	add	r20, r18
    13a0:	44 83       	std	Z+4, r20	; 0x04
	TimeDate->Year   = (CurrentRegValues.Byte7.Fields.TenYear  * 10) + CurrentRegValues.Byte7.Fields.Year;
    13a2:	48 85       	ldd	r20, Y+8	; 0x08
    13a4:	84 2f       	mov	r24, r20
    13a6:	82 95       	swap	r24
    13a8:	8f 70       	andi	r24, 0x0F	; 15
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	9c 01       	movw	r18, r24
    13ae:	63 e0       	ldi	r22, 0x03	; 3
    13b0:	22 0f       	add	r18, r18
    13b2:	33 1f       	adc	r19, r19
    13b4:	6a 95       	dec	r22
    13b6:	e1 f7       	brne	.-8      	; 0x13b0 <DS1307_GetTimeDate+0x11c>
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	28 0f       	add	r18, r24
    13be:	39 1f       	adc	r19, r25
    13c0:	4f 70       	andi	r20, 0x0F	; 15
    13c2:	42 0f       	add	r20, r18
    13c4:	45 83       	std	Z+5, r20	; 0x05
    13c6:	81 e0       	ldi	r24, 0x01	; 1

	return true;
}
    13c8:	28 96       	adiw	r28, 0x08	; 8
    13ca:	0f b6       	in	r0, 0x3f	; 63
    13cc:	f8 94       	cli
    13ce:	de bf       	out	0x3e, r29	; 62
    13d0:	0f be       	out	0x3f, r0	; 63
    13d2:	cd bf       	out	0x3d, r28	; 61
    13d4:	cf 91       	pop	r28
    13d6:	df 91       	pop	r29
    13d8:	1f 91       	pop	r17
    13da:	0f 91       	pop	r16
    13dc:	ef 90       	pop	r14
    13de:	df 90       	pop	r13
    13e0:	cf 90       	pop	r12
    13e2:	08 95       	ret

000013e4 <DS1307_SetTimeDate>:
*/

#include "DS1307.h"

bool DS1307_SetTimeDate(const TimeDate_t* NewTimeDate)
{
    13e4:	ef 92       	push	r14
    13e6:	0f 93       	push	r16
    13e8:	1f 93       	push	r17
    13ea:	df 93       	push	r29
    13ec:	cf 93       	push	r28
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
    13f2:	28 97       	sbiw	r28, 0x08	; 8
    13f4:	0f b6       	in	r0, 0x3f	; 63
    13f6:	f8 94       	cli
    13f8:	de bf       	out	0x3e, r29	; 62
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	cd bf       	out	0x3d, r28	; 61
    13fe:	fc 01       	movw	r30, r24
#if defined(DUMMY_RTC)
	return true;
#endif

	DS1307_DateTimeRegs_t NewRegValues;
	const uint8_t         WriteAddress = 0;
    1400:	19 82       	std	Y+1, r1	; 0x01

	// Convert new time data to the DS1307's time register layout
	NewRegValues.Byte1.Fields.TenSec    = (NewTimeDate->Second / 10);
    1402:	32 81       	ldd	r19, Z+2	; 0x02
    1404:	83 2f       	mov	r24, r19
    1406:	6a e0       	ldi	r22, 0x0A	; 10
    1408:	0e 94 32 25 	call	0x4a64	; 0x4a64 <__udivmodqi4>
    140c:	28 2f       	mov	r18, r24
    140e:	27 70       	andi	r18, 0x07	; 7
    1410:	22 95       	swap	r18
    1412:	20 7f       	andi	r18, 0xF0	; 240
	NewRegValues.Byte1.Fields.Sec       = (NewTimeDate->Second % 10);
    1414:	83 2f       	mov	r24, r19
    1416:	0e 94 32 25 	call	0x4a64	; 0x4a64 <__udivmodqi4>
    141a:	9f 70       	andi	r25, 0x0F	; 15
	NewRegValues.Byte1.Fields.CH        = false;
    141c:	29 2b       	or	r18, r25
    141e:	2a 83       	std	Y+2, r18	; 0x02
	NewRegValues.Byte2.Fields.TenMin    = (NewTimeDate->Minute / 10);
    1420:	41 81       	ldd	r20, Z+1	; 0x01
    1422:	84 2f       	mov	r24, r20
    1424:	0e 94 32 25 	call	0x4a64	; 0x4a64 <__udivmodqi4>
    1428:	38 2f       	mov	r19, r24
    142a:	37 70       	andi	r19, 0x07	; 7
    142c:	32 95       	swap	r19
    142e:	30 7f       	andi	r19, 0xF0	; 240
    1430:	2b 81       	ldd	r18, Y+3	; 0x03
    1432:	20 78       	andi	r18, 0x80	; 128
	NewRegValues.Byte2.Fields.Min       = (NewTimeDate->Minute % 10);
    1434:	84 2f       	mov	r24, r20
    1436:	0e 94 32 25 	call	0x4a64	; 0x4a64 <__udivmodqi4>
    143a:	9f 70       	andi	r25, 0x0F	; 15
    143c:	23 2b       	or	r18, r19
    143e:	29 2b       	or	r18, r25
    1440:	2b 83       	std	Y+3, r18	; 0x03
	NewRegValues.Byte3.Fields.TenHour   = (NewTimeDate->Hour / 10);
    1442:	40 81       	ld	r20, Z
    1444:	84 2f       	mov	r24, r20
    1446:	0e 94 32 25 	call	0x4a64	; 0x4a64 <__udivmodqi4>
    144a:	38 2f       	mov	r19, r24
    144c:	33 70       	andi	r19, 0x03	; 3
    144e:	32 95       	swap	r19
    1450:	30 7f       	andi	r19, 0xF0	; 240
    1452:	2c 81       	ldd	r18, Y+4	; 0x04
    1454:	20 7c       	andi	r18, 0xC0	; 192
	NewRegValues.Byte3.Fields.Hour      = (NewTimeDate->Hour % 10);
    1456:	84 2f       	mov	r24, r20
    1458:	0e 94 32 25 	call	0x4a64	; 0x4a64 <__udivmodqi4>
    145c:	9f 70       	andi	r25, 0x0F	; 15
    145e:	23 2b       	or	r18, r19
    1460:	29 2b       	or	r18, r25
	NewRegValues.Byte3.Fields.TwelveHourMode = false;
    1462:	2f 7b       	andi	r18, 0xBF	; 191
    1464:	2c 83       	std	Y+4, r18	; 0x04

	// Convert new date data to the DS1307's date register layout
	NewRegValues.Byte4.Fields.DayOfWeek = 0;
    1466:	8d 81       	ldd	r24, Y+5	; 0x05
    1468:	88 7f       	andi	r24, 0xF8	; 248
    146a:	8d 83       	std	Y+5, r24	; 0x05
	NewRegValues.Byte5.Fields.TenDay    = (NewTimeDate->Day / 10);
    146c:	43 81       	ldd	r20, Z+3	; 0x03
    146e:	84 2f       	mov	r24, r20
    1470:	0e 94 32 25 	call	0x4a64	; 0x4a64 <__udivmodqi4>
    1474:	38 2f       	mov	r19, r24
    1476:	33 70       	andi	r19, 0x03	; 3
    1478:	32 95       	swap	r19
    147a:	30 7f       	andi	r19, 0xF0	; 240
    147c:	2e 81       	ldd	r18, Y+6	; 0x06
    147e:	20 7c       	andi	r18, 0xC0	; 192
	NewRegValues.Byte5.Fields.Day       = (NewTimeDate->Day % 10);
    1480:	84 2f       	mov	r24, r20
    1482:	0e 94 32 25 	call	0x4a64	; 0x4a64 <__udivmodqi4>
    1486:	9f 70       	andi	r25, 0x0F	; 15
    1488:	23 2b       	or	r18, r19
    148a:	29 2b       	or	r18, r25
    148c:	2e 83       	std	Y+6, r18	; 0x06
	NewRegValues.Byte6.Fields.TenMonth  = (NewTimeDate->Month / 10);
    148e:	44 81       	ldd	r20, Z+4	; 0x04
    1490:	84 2f       	mov	r24, r20
    1492:	0e 94 32 25 	call	0x4a64	; 0x4a64 <__udivmodqi4>
    1496:	38 2f       	mov	r19, r24
    1498:	31 70       	andi	r19, 0x01	; 1
    149a:	32 95       	swap	r19
    149c:	30 7f       	andi	r19, 0xF0	; 240
    149e:	2f 81       	ldd	r18, Y+7	; 0x07
    14a0:	20 7e       	andi	r18, 0xE0	; 224
	NewRegValues.Byte6.Fields.Month     = (NewTimeDate->Month % 10);
    14a2:	84 2f       	mov	r24, r20
    14a4:	0e 94 32 25 	call	0x4a64	; 0x4a64 <__udivmodqi4>
    14a8:	9f 70       	andi	r25, 0x0F	; 15
    14aa:	23 2b       	or	r18, r19
    14ac:	29 2b       	or	r18, r25
    14ae:	2f 83       	std	Y+7, r18	; 0x07
	NewRegValues.Byte7.Fields.TenYear   = (NewTimeDate->Year / 10);
    14b0:	25 81       	ldd	r18, Z+5	; 0x05
    14b2:	82 2f       	mov	r24, r18
    14b4:	0e 94 32 25 	call	0x4a64	; 0x4a64 <__udivmodqi4>
    14b8:	38 2f       	mov	r19, r24
    14ba:	32 95       	swap	r19
    14bc:	30 7f       	andi	r19, 0xF0	; 240
	NewRegValues.Byte7.Fields.Year      = (NewTimeDate->Year % 10);
    14be:	82 2f       	mov	r24, r18
    14c0:	0e 94 32 25 	call	0x4a64	; 0x4a64 <__udivmodqi4>
    14c4:	9f 70       	andi	r25, 0x0F	; 15
    14c6:	93 2b       	or	r25, r19
    14c8:	98 87       	std	Y+8, r25	; 0x08
	
	// Write the new Time and Date into the DS1307
	if (TWI_WritePacket(DS1307_ADDRESS, 10, &WriteAddress, sizeof(WriteAddress),
    14ca:	80 ed       	ldi	r24, 0xD0	; 208
    14cc:	ae 01       	movw	r20, r28
    14ce:	4f 5f       	subi	r20, 0xFF	; 255
    14d0:	5f 4f       	sbci	r21, 0xFF	; 255
    14d2:	21 e0       	ldi	r18, 0x01	; 1
    14d4:	8e 01       	movw	r16, r28
    14d6:	0e 5f       	subi	r16, 0xFE	; 254
    14d8:	1f 4f       	sbci	r17, 0xFF	; 255
    14da:	b7 e0       	ldi	r27, 0x07	; 7
    14dc:	eb 2e       	mov	r14, r27
    14de:	0e 94 8c 24 	call	0x4918	; 0x4918 <TWI_WritePacket>
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	88 23       	and	r24, r24
    14e6:	09 f4       	brne	.+2      	; 0x14ea <DS1307_SetTimeDate+0x106>
    14e8:	91 e0       	ldi	r25, 0x01	; 1
	{
		return false;
	}

	return true;
}
    14ea:	89 2f       	mov	r24, r25
    14ec:	28 96       	adiw	r28, 0x08	; 8
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	de bf       	out	0x3e, r29	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	cd bf       	out	0x3d, r28	; 61
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	1f 91       	pop	r17
    14fe:	0f 91       	pop	r16
    1500:	ef 90       	pop	r14
    1502:	08 95       	ret

00001504 <disk_initialize>:
DSTATUS disk_initialize (
	BYTE drv				/* Physical drive number (0..) */
)
{
	return FR_OK;
}
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	08 95       	ret

00001508 <disk_status>:
DSTATUS disk_status (
	BYTE drv		/* Physical drive number (0..) */
)
{
	return FR_OK;
}
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	08 95       	ret

0000150c <disk_ioctl>:
	BYTE drv,		/* Physical drive number (0..) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
	if (ctrl == CTRL_SYNC)
    150c:	66 23       	and	r22, r22
    150e:	11 f0       	breq	.+4      	; 0x1514 <disk_ioctl+0x8>
    1510:	84 e0       	ldi	r24, 0x04	; 4
    1512:	08 95       	ret
    1514:	80 e0       	ldi	r24, 0x00	; 0
	  return RES_OK;
	else
	  return RES_PARERR;
}
    1516:	08 95       	ret

00001518 <get_fattime>:


DWORD get_fattime (void)
{
    1518:	df 93       	push	r29
    151a:	cf 93       	push	r28
    151c:	00 d0       	rcall	.+0      	; 0x151e <get_fattime+0x6>
    151e:	00 d0       	rcall	.+0      	; 0x1520 <get_fattime+0x8>
    1520:	00 d0       	rcall	.+0      	; 0x1522 <get_fattime+0xa>
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
	TimeDate_t CurrTimeDate;

	DS1307_GetTimeDate(&CurrTimeDate);
    1526:	ce 01       	movw	r24, r28
    1528:	01 96       	adiw	r24, 0x01	; 1
    152a:	b4 de       	rcall	.-664    	; 0x1294 <DS1307_GetTimeDate>
    152c:	2c 81       	ldd	r18, Y+4	; 0x04
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	40 e0       	ldi	r20, 0x00	; 0
    1532:	50 e0       	ldi	r21, 0x00	; 0
    1534:	a9 01       	movw	r20, r18
    1536:	33 27       	eor	r19, r19
    1538:	22 27       	eor	r18, r18
    153a:	8d 81       	ldd	r24, Y+5	; 0x05
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	a0 e0       	ldi	r26, 0x00	; 0
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	f5 e1       	ldi	r31, 0x15	; 21
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	aa 1f       	adc	r26, r26
    154a:	bb 1f       	adc	r27, r27
    154c:	fa 95       	dec	r31
    154e:	d1 f7       	brne	.-12     	; 0x1544 <get_fattime+0x2c>
    1550:	28 2b       	or	r18, r24
    1552:	39 2b       	or	r19, r25
    1554:	4a 2b       	or	r20, r26
    1556:	5b 2b       	or	r21, r27
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	a0 e0       	ldi	r26, 0x00	; 0
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	eb e0       	ldi	r30, 0x0B	; 11
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	aa 1f       	adc	r26, r26
    1568:	bb 1f       	adc	r27, r27
    156a:	ea 95       	dec	r30
    156c:	d1 f7       	brne	.-12     	; 0x1562 <get_fattime+0x4a>
    156e:	28 2b       	or	r18, r24
    1570:	39 2b       	or	r19, r25
    1572:	4a 2b       	or	r20, r26
    1574:	5b 2b       	or	r21, r27
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	a0 e0       	ldi	r26, 0x00	; 0
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	75 e0       	ldi	r23, 0x05	; 5
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	aa 1f       	adc	r26, r26
    1586:	bb 1f       	adc	r27, r27
    1588:	7a 95       	dec	r23
    158a:	d1 f7       	brne	.-12     	; 0x1580 <get_fattime+0x68>
    158c:	28 2b       	or	r18, r24
    158e:	39 2b       	or	r19, r25
    1590:	4a 2b       	or	r20, r26
    1592:	5b 2b       	or	r21, r27
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	86 95       	lsr	r24
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	a0 e0       	ldi	r26, 0x00	; 0
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	28 2b       	or	r18, r24
    15a0:	39 2b       	or	r19, r25
    15a2:	4a 2b       	or	r20, r26
    15a4:	5b 2b       	or	r21, r27
    15a6:	8e 81       	ldd	r24, Y+6	; 0x06
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	44 96       	adiw	r24, 0x14	; 20
    15ac:	aa 27       	eor	r26, r26
    15ae:	97 fd       	sbrc	r25, 7
    15b0:	a0 95       	com	r26
    15b2:	ba 2f       	mov	r27, r26
    15b4:	69 e1       	ldi	r22, 0x19	; 25
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	aa 1f       	adc	r26, r26
    15bc:	bb 1f       	adc	r27, r27
    15be:	6a 95       	dec	r22
    15c0:	d1 f7       	brne	.-12     	; 0x15b6 <get_fattime+0x9e>
    15c2:	28 2b       	or	r18, r24
    15c4:	39 2b       	or	r19, r25
    15c6:	4a 2b       	or	r20, r26
    15c8:	5b 2b       	or	r21, r27
	             ((DWORD)CurrTimeDate.Month << 21) |
	               ((DWORD)CurrTimeDate.Day << 16) |
	              ((DWORD)CurrTimeDate.Hour << 11) |
	             ((DWORD)CurrTimeDate.Minute << 5) |
	      (((DWORD)CurrTimeDate.Second >> 1) << 0);
}
    15ca:	b9 01       	movw	r22, r18
    15cc:	ca 01       	movw	r24, r20
    15ce:	26 96       	adiw	r28, 0x06	; 6
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	f8 94       	cli
    15d4:	de bf       	out	0x3e, r29	; 62
    15d6:	0f be       	out	0x3f, r0	; 63
    15d8:	cd bf       	out	0x3d, r28	; 61
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <disk_write>:
	BYTE drv,			/* Physical drive number (0..) */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address (LBA) */
	BYTE count			/* Number of sectors to write (1..255) */
)
{
    15e0:	0f 93       	push	r16
    15e2:	fb 01       	movw	r30, r22
	DataflashManager_WriteBlocks_RAM(sector, count, buff);
    15e4:	ca 01       	movw	r24, r20
    15e6:	b9 01       	movw	r22, r18
    15e8:	40 2f       	mov	r20, r16
    15ea:	50 e0       	ldi	r21, 0x00	; 0
    15ec:	9f 01       	movw	r18, r30
    15ee:	c7 d8       	rcall	.-3698   	; 0x77e <DataflashManager_WriteBlocks_RAM>
	return RES_OK;
}
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	0f 91       	pop	r16
    15f4:	08 95       	ret

000015f6 <disk_read>:
	BYTE drv,		/* Physical drive number (0..) */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address (LBA) */
	BYTE count		/* Number of sectors to read (1..255) */
)
{
    15f6:	0f 93       	push	r16
    15f8:	fb 01       	movw	r30, r22
	DataflashManager_ReadBlocks_RAM(sector, count, buff);
    15fa:	ca 01       	movw	r24, r20
    15fc:	b9 01       	movw	r22, r18
    15fe:	40 2f       	mov	r20, r16
    1600:	50 e0       	ldi	r21, 0x00	; 0
    1602:	9f 01       	movw	r18, r30
    1604:	80 d9       	rcall	.-3328   	; 0x906 <DataflashManager_ReadBlocks_RAM>
	return RES_OK;
}
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	0f 91       	pop	r16
    160a:	08 95       	ret

0000160c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    160c:	0f 93       	push	r16
    160e:	1f 93       	push	r17
    1610:	cf 93       	push	r28
    1612:	df 93       	push	r29
    1614:	8c 01       	movw	r16, r24
    1616:	eb 01       	movw	r28, r22
    1618:	ba 01       	movw	r22, r20
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	0e c0       	rjmp	.+28     	; 0x163c <mem_cpy+0x30>

#if _WORD_ACCESS == 1
	while (cnt >= sizeof(int)) {
		*(int*)d = *(int*)s;
    1620:	f8 01       	movw	r30, r16
    1622:	e2 0f       	add	r30, r18
    1624:	f3 1f       	adc	r31, r19
    1626:	de 01       	movw	r26, r28
    1628:	a2 0f       	add	r26, r18
    162a:	b3 1f       	adc	r27, r19
    162c:	8d 91       	ld	r24, X+
    162e:	9c 91       	ld	r25, X
    1630:	91 83       	std	Z+1, r25	; 0x01
    1632:	80 83       	st	Z, r24
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
    1634:	42 50       	subi	r20, 0x02	; 2
    1636:	50 40       	sbci	r21, 0x00	; 0
    1638:	2e 5f       	subi	r18, 0xFE	; 254
    163a:	3f 4f       	sbci	r19, 0xFF	; 255
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

#if _WORD_ACCESS == 1
	while (cnt >= sizeof(int)) {
    163c:	42 30       	cpi	r20, 0x02	; 2
    163e:	51 05       	cpc	r21, r1
    1640:	78 f7       	brcc	.-34     	; 0x1620 <mem_cpy+0x14>
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    1642:	cb 01       	movw	r24, r22
    1644:	8e 7f       	andi	r24, 0xFE	; 254
    1646:	de 01       	movw	r26, r28
    1648:	a8 0f       	add	r26, r24
    164a:	b9 1f       	adc	r27, r25
    164c:	f8 01       	movw	r30, r16
    164e:	e8 0f       	add	r30, r24
    1650:	f9 1f       	adc	r31, r25
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    1652:	60 ff       	sbrs	r22, 0
    1654:	02 c0       	rjmp	.+4      	; 0x165a <mem_cpy+0x4e>
		*d++ = *s++;
    1656:	8c 91       	ld	r24, X
    1658:	80 83       	st	Z, r24
}
    165a:	df 91       	pop	r29
    165c:	cf 91       	pop	r28
    165e:	1f 91       	pop	r17
    1660:	0f 91       	pop	r16
    1662:	08 95       	ret

00001664 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    1664:	fc 01       	movw	r30, r24
    1666:	03 c0       	rjmp	.+6      	; 0x166e <mem_set+0xa>

	while (cnt--)
		*d++ = (BYTE)val;
    1668:	61 93       	st	Z+, r22
    166a:	41 50       	subi	r20, 0x01	; 1
    166c:	50 40       	sbci	r21, 0x00	; 0
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    166e:	41 15       	cp	r20, r1
    1670:	51 05       	cpc	r21, r1
    1672:	d1 f7       	brne	.-12     	; 0x1668 <mem_set+0x4>
		*d++ = (BYTE)val;
}
    1674:	08 95       	ret

00001676 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    1676:	ef 92       	push	r14
    1678:	ff 92       	push	r15
    167a:	0f 93       	push	r16
    167c:	1f 93       	push	r17
    167e:	cf 93       	push	r28
    1680:	df 93       	push	r29
    1682:	ec 01       	movw	r28, r24
    1684:	7a 01       	movw	r14, r20
    1686:	8b 01       	movw	r16, r22
	clst -= 2;
    1688:	8e ef       	ldi	r24, 0xFE	; 254
    168a:	9f ef       	ldi	r25, 0xFF	; 255
    168c:	af ef       	ldi	r26, 0xFF	; 255
    168e:	bf ef       	ldi	r27, 0xFF	; 255
    1690:	e8 0e       	add	r14, r24
    1692:	f9 1e       	adc	r15, r25
    1694:	0a 1f       	adc	r16, r26
    1696:	1b 1f       	adc	r17, r27
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    1698:	8e 89       	ldd	r24, Y+22	; 0x16
    169a:	9f 89       	ldd	r25, Y+23	; 0x17
    169c:	a8 8d       	ldd	r26, Y+24	; 0x18
    169e:	b9 8d       	ldd	r27, Y+25	; 0x19
    16a0:	02 97       	sbiw	r24, 0x02	; 2
    16a2:	a1 09       	sbc	r26, r1
    16a4:	b1 09       	sbc	r27, r1
    16a6:	e8 16       	cp	r14, r24
    16a8:	f9 06       	cpc	r15, r25
    16aa:	0a 07       	cpc	r16, r26
    16ac:	1b 07       	cpc	r17, r27
    16ae:	28 f0       	brcs	.+10     	; 0x16ba <clust2sect+0x44>
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e0       	ldi	r20, 0x00	; 0
    16b6:	50 e0       	ldi	r21, 0x00	; 0
    16b8:	12 c0       	rjmp	.+36     	; 0x16de <clust2sect+0x68>
	return clst * fs->csize + fs->database;
    16ba:	2a 81       	ldd	r18, Y+2	; 0x02
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	40 e0       	ldi	r20, 0x00	; 0
    16c0:	50 e0       	ldi	r21, 0x00	; 0
    16c2:	c8 01       	movw	r24, r16
    16c4:	b7 01       	movw	r22, r14
    16c6:	0e 94 13 25 	call	0x4a26	; 0x4a26 <__mulsi3>
    16ca:	9b 01       	movw	r18, r22
    16cc:	ac 01       	movw	r20, r24
    16ce:	8e a1       	ldd	r24, Y+38	; 0x26
    16d0:	9f a1       	ldd	r25, Y+39	; 0x27
    16d2:	a8 a5       	ldd	r26, Y+40	; 0x28
    16d4:	b9 a5       	ldd	r27, Y+41	; 0x29
    16d6:	28 0f       	add	r18, r24
    16d8:	39 1f       	adc	r19, r25
    16da:	4a 1f       	adc	r20, r26
    16dc:	5b 1f       	adc	r21, r27
}
    16de:	b9 01       	movw	r22, r18
    16e0:	ca 01       	movw	r24, r20
    16e2:	df 91       	pop	r29
    16e4:	cf 91       	pop	r28
    16e6:	1f 91       	pop	r17
    16e8:	0f 91       	pop	r16
    16ea:	ff 90       	pop	r15
    16ec:	ef 90       	pop	r14
    16ee:	08 95       	ret

000016f0 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    16f0:	db 01       	movw	r26, r22
	FATFS *rfs;


	if (vol >= _VOLUMES)			/* Check if the drive number is valid */
    16f2:	88 23       	and	r24, r24
    16f4:	11 f0       	breq	.+4      	; 0x16fa <f_mount+0xa>
    16f6:	8b e0       	ldi	r24, 0x0B	; 11
    16f8:	08 95       	ret
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
    16fa:	e0 91 22 04 	lds	r30, 0x0422
    16fe:	f0 91 23 04 	lds	r31, 0x0423

	if (rfs) {
    1702:	30 97       	sbiw	r30, 0x00	; 0
    1704:	09 f0       	breq	.+2      	; 0x1708 <f_mount+0x18>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
    1706:	10 82       	st	Z, r1
	}

	if (fs) {
    1708:	10 97       	sbiw	r26, 0x00	; 0
    170a:	09 f0       	breq	.+2      	; 0x170e <f_mount+0x1e>
		fs->fs_type = 0;			/* Clear new fs object */
    170c:	1c 92       	st	X, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
    170e:	b0 93 23 04 	sts	0x0423, r27
    1712:	a0 93 22 04 	sts	0x0422, r26
    1716:	80 e0       	ldi	r24, 0x00	; 0

	return FR_OK;
}
    1718:	08 95       	ret

0000171a <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    171a:	fc 01       	movw	r30, r24
	if (!fs || !fs->fs_type || fs->id != id)
    171c:	00 97       	sbiw	r24, 0x00	; 0
    171e:	81 f0       	breq	.+32     	; 0x1740 <validate+0x26>
    1720:	80 81       	ld	r24, Z
    1722:	88 23       	and	r24, r24
    1724:	69 f0       	breq	.+26     	; 0x1740 <validate+0x26>
    1726:	86 81       	ldd	r24, Z+6	; 0x06
    1728:	97 81       	ldd	r25, Z+7	; 0x07
    172a:	86 17       	cp	r24, r22
    172c:	97 07       	cpc	r25, r23
    172e:	41 f4       	brne	.+16     	; 0x1740 <validate+0x26>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
    1730:	81 81       	ldd	r24, Z+1	; 0x01
    1732:	ea de       	rcall	.-556    	; 0x1508 <disk_status>
    1734:	80 fd       	sbrc	r24, 0
    1736:	02 c0       	rjmp	.+4      	; 0x173c <validate+0x22>
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	08 95       	ret
    173c:	83 e0       	ldi	r24, 0x03	; 3
    173e:	08 95       	ret
    1740:	89 e0       	ldi	r24, 0x09	; 9
		return FR_NOT_READY;

	return FR_OK;
}
    1742:	08 95       	ret

00001744 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    1744:	6f 92       	push	r6
    1746:	7f 92       	push	r7
    1748:	8f 92       	push	r8
    174a:	9f 92       	push	r9
    174c:	af 92       	push	r10
    174e:	bf 92       	push	r11
    1750:	cf 92       	push	r12
    1752:	df 92       	push	r13
    1754:	ef 92       	push	r14
    1756:	ff 92       	push	r15
    1758:	0f 93       	push	r16
    175a:	1f 93       	push	r17
    175c:	cf 93       	push	r28
    175e:	df 93       	push	r29
    1760:	ec 01       	movw	r28, r24
    1762:	4a 01       	movw	r8, r20
    1764:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
    1766:	ca a4       	ldd	r12, Y+42	; 0x2a
    1768:	db a4       	ldd	r13, Y+43	; 0x2b
    176a:	ec a4       	ldd	r14, Y+44	; 0x2c
    176c:	fd a4       	ldd	r15, Y+45	; 0x2d
	if (wsect != sector) {	/* Changed current window */
    176e:	c4 16       	cp	r12, r20
    1770:	d5 06       	cpc	r13, r21
    1772:	e6 06       	cpc	r14, r22
    1774:	f7 06       	cpc	r15, r23
    1776:	09 f4       	brne	.+2      	; 0x177a <move_window+0x36>
    1778:	4b c0       	rjmp	.+150    	; 0x1810 <move_window+0xcc>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    177a:	8c 81       	ldd	r24, Y+4	; 0x04
    177c:	88 23       	and	r24, r24
    177e:	91 f1       	breq	.+100    	; 0x17e4 <move_window+0xa0>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    1780:	8e e2       	ldi	r24, 0x2E	; 46
    1782:	68 2e       	mov	r6, r24
    1784:	71 2c       	mov	r7, r1
    1786:	6c 0e       	add	r6, r28
    1788:	7d 1e       	adc	r7, r29
    178a:	89 81       	ldd	r24, Y+1	; 0x01
    178c:	b3 01       	movw	r22, r6
    178e:	a7 01       	movw	r20, r14
    1790:	96 01       	movw	r18, r12
    1792:	01 e0       	ldi	r16, 0x01	; 1
    1794:	25 df       	rcall	.-438    	; 0x15e0 <disk_write>
    1796:	88 23       	and	r24, r24
    1798:	c9 f5       	brne	.+114    	; 0x180c <move_window+0xc8>
				return FR_DISK_ERR;
			fs->wflag = 0;
    179a:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    179c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    179e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    17a0:	ac 8d       	ldd	r26, Y+28	; 0x1c
    17a2:	bd 8d       	ldd	r27, Y+29	; 0x1d
    17a4:	2e 8d       	ldd	r18, Y+30	; 0x1e
    17a6:	3f 8d       	ldd	r19, Y+31	; 0x1f
    17a8:	48 a1       	ldd	r20, Y+32	; 0x20
    17aa:	59 a1       	ldd	r21, Y+33	; 0x21
    17ac:	82 0f       	add	r24, r18
    17ae:	93 1f       	adc	r25, r19
    17b0:	a4 1f       	adc	r26, r20
    17b2:	b5 1f       	adc	r27, r21
    17b4:	c8 16       	cp	r12, r24
    17b6:	d9 06       	cpc	r13, r25
    17b8:	ea 06       	cpc	r14, r26
    17ba:	fb 06       	cpc	r15, r27
    17bc:	98 f4       	brcc	.+38     	; 0x17e4 <move_window+0xa0>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    17be:	1b 81       	ldd	r17, Y+3	; 0x03
    17c0:	0f c0       	rjmp	.+30     	; 0x17e0 <move_window+0x9c>
					wsect += fs->fsize;
    17c2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17c4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    17c6:	ac 8d       	ldd	r26, Y+28	; 0x1c
    17c8:	bd 8d       	ldd	r27, Y+29	; 0x1d
    17ca:	c8 0e       	add	r12, r24
    17cc:	d9 1e       	adc	r13, r25
    17ce:	ea 1e       	adc	r14, r26
    17d0:	fb 1e       	adc	r15, r27
					disk_write(fs->drv, fs->win, wsect, 1);
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	b3 01       	movw	r22, r6
    17d6:	a7 01       	movw	r20, r14
    17d8:	96 01       	movw	r18, r12
    17da:	01 e0       	ldi	r16, 0x01	; 1
    17dc:	01 df       	rcall	.-510    	; 0x15e0 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    17de:	11 50       	subi	r17, 0x01	; 1
    17e0:	12 30       	cpi	r17, 0x02	; 2
    17e2:	78 f7       	brcc	.-34     	; 0x17c2 <move_window+0x7e>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    17e4:	81 14       	cp	r8, r1
    17e6:	91 04       	cpc	r9, r1
    17e8:	a1 04       	cpc	r10, r1
    17ea:	b1 04       	cpc	r11, r1
    17ec:	89 f0       	breq	.+34     	; 0x1810 <move_window+0xcc>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    17ee:	be 01       	movw	r22, r28
    17f0:	62 5d       	subi	r22, 0xD2	; 210
    17f2:	7f 4f       	sbci	r23, 0xFF	; 255
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	a5 01       	movw	r20, r10
    17f8:	94 01       	movw	r18, r8
    17fa:	01 e0       	ldi	r16, 0x01	; 1
    17fc:	fc de       	rcall	.-520    	; 0x15f6 <disk_read>
    17fe:	88 23       	and	r24, r24
    1800:	29 f4       	brne	.+10     	; 0x180c <move_window+0xc8>
				return FR_DISK_ERR;
			fs->winsect = sector;
    1802:	8a a6       	std	Y+42, r8	; 0x2a
    1804:	9b a6       	std	Y+43, r9	; 0x2b
    1806:	ac a6       	std	Y+44, r10	; 0x2c
    1808:	bd a6       	std	Y+45, r11	; 0x2d
    180a:	03 c0       	rjmp	.+6      	; 0x1812 <move_window+0xce>
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	01 c0       	rjmp	.+2      	; 0x1812 <move_window+0xce>
    1810:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return FR_OK;
}
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
    1816:	1f 91       	pop	r17
    1818:	0f 91       	pop	r16
    181a:	ff 90       	pop	r15
    181c:	ef 90       	pop	r14
    181e:	df 90       	pop	r13
    1820:	cf 90       	pop	r12
    1822:	bf 90       	pop	r11
    1824:	af 90       	pop	r10
    1826:	9f 90       	pop	r9
    1828:	8f 90       	pop	r8
    182a:	7f 90       	pop	r7
    182c:	6f 90       	pop	r6
    182e:	08 95       	ret

00001830 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    1830:	8f 92       	push	r8
    1832:	9f 92       	push	r9
    1834:	af 92       	push	r10
    1836:	bf 92       	push	r11
    1838:	cf 92       	push	r12
    183a:	df 92       	push	r13
    183c:	ef 92       	push	r14
    183e:	ff 92       	push	r15
    1840:	0f 93       	push	r16
    1842:	1f 93       	push	r17
    1844:	cf 93       	push	r28
    1846:	df 93       	push	r29
    1848:	ec 01       	movw	r28, r24
    184a:	6a 01       	movw	r12, r20
    184c:	7b 01       	movw	r14, r22
    184e:	48 01       	movw	r8, r16
    1850:	59 01       	movw	r10, r18
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    1852:	42 30       	cpi	r20, 0x02	; 2
    1854:	51 05       	cpc	r21, r1
    1856:	61 05       	cpc	r22, r1
    1858:	71 05       	cpc	r23, r1
    185a:	08 f4       	brcc	.+2      	; 0x185e <put_fat+0x2e>
    185c:	cd c0       	rjmp	.+410    	; 0x19f8 <put_fat+0x1c8>
    185e:	8e 89       	ldd	r24, Y+22	; 0x16
    1860:	9f 89       	ldd	r25, Y+23	; 0x17
    1862:	a8 8d       	ldd	r26, Y+24	; 0x18
    1864:	b9 8d       	ldd	r27, Y+25	; 0x19
    1866:	48 17       	cp	r20, r24
    1868:	59 07       	cpc	r21, r25
    186a:	6a 07       	cpc	r22, r26
    186c:	7b 07       	cpc	r23, r27
    186e:	08 f0       	brcs	.+2      	; 0x1872 <put_fat+0x42>
    1870:	c3 c0       	rjmp	.+390    	; 0x19f8 <put_fat+0x1c8>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
    1872:	88 81       	ld	r24, Y
    1874:	82 30       	cpi	r24, 0x02	; 2
    1876:	09 f4       	brne	.+2      	; 0x187a <put_fat+0x4a>
    1878:	6e c0       	rjmp	.+220    	; 0x1956 <put_fat+0x126>
    187a:	83 30       	cpi	r24, 0x03	; 3
    187c:	09 f4       	brne	.+2      	; 0x1880 <put_fat+0x50>
    187e:	89 c0       	rjmp	.+274    	; 0x1992 <put_fat+0x162>
    1880:	81 30       	cpi	r24, 0x01	; 1
    1882:	11 f0       	breq	.+4      	; 0x1888 <put_fat+0x58>
    1884:	22 e0       	ldi	r18, 0x02	; 2
    1886:	b5 c0       	rjmp	.+362    	; 0x19f2 <put_fat+0x1c2>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    1888:	8a 01       	movw	r16, r20
    188a:	16 95       	lsr	r17
    188c:	07 95       	ror	r16
    188e:	04 0f       	add	r16, r20
    1890:	15 1f       	adc	r17, r21
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1892:	a8 01       	movw	r20, r16
    1894:	45 2f       	mov	r20, r21
    1896:	55 27       	eor	r21, r21
    1898:	46 95       	lsr	r20
    189a:	60 e0       	ldi	r22, 0x00	; 0
    189c:	70 e0       	ldi	r23, 0x00	; 0
    189e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18a0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    18a2:	a8 a1       	ldd	r26, Y+32	; 0x20
    18a4:	b9 a1       	ldd	r27, Y+33	; 0x21
    18a6:	48 0f       	add	r20, r24
    18a8:	59 1f       	adc	r21, r25
    18aa:	6a 1f       	adc	r22, r26
    18ac:	7b 1f       	adc	r23, r27
    18ae:	ce 01       	movw	r24, r28
    18b0:	49 df       	rcall	.-366    	; 0x1744 <move_window>
    18b2:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    18b4:	88 23       	and	r24, r24
    18b6:	09 f0       	breq	.+2      	; 0x18ba <put_fat+0x8a>
    18b8:	9c c0       	rjmp	.+312    	; 0x19f2 <put_fat+0x1c2>
			p = &fs->win[bc % SS(fs)];
    18ba:	d8 01       	movw	r26, r16
    18bc:	b1 70       	andi	r27, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	e8 2e       	mov	r14, r24
    18c2:	f1 2c       	mov	r15, r1
    18c4:	ec 20       	and	r14, r12
    18c6:	fd 20       	and	r15, r13
    18c8:	e1 14       	cp	r14, r1
    18ca:	f1 04       	cpc	r15, r1
    18cc:	51 f0       	breq	.+20     	; 0x18e2 <put_fat+0xb2>
    18ce:	fe 01       	movw	r30, r28
    18d0:	ea 0f       	add	r30, r26
    18d2:	fb 1f       	adc	r31, r27
    18d4:	86 a5       	ldd	r24, Z+46	; 0x2e
    18d6:	8f 70       	andi	r24, 0x0F	; 15
    18d8:	98 2d       	mov	r25, r8
    18da:	92 95       	swap	r25
    18dc:	90 7f       	andi	r25, 0xF0	; 240
    18de:	98 2b       	or	r25, r24
    18e0:	01 c0       	rjmp	.+2      	; 0x18e4 <put_fat+0xb4>
    18e2:	98 2d       	mov	r25, r8
    18e4:	ac 0f       	add	r26, r28
    18e6:	bd 1f       	adc	r27, r29
    18e8:	9e 96       	adiw	r26, 0x2e	; 46
    18ea:	9c 93       	st	X, r25
			bc++;
    18ec:	0f 5f       	subi	r16, 0xFF	; 255
    18ee:	1f 4f       	sbci	r17, 0xFF	; 255
			fs->wflag = 1;
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    18f4:	a8 01       	movw	r20, r16
    18f6:	45 2f       	mov	r20, r21
    18f8:	55 27       	eor	r21, r21
    18fa:	46 95       	lsr	r20
    18fc:	60 e0       	ldi	r22, 0x00	; 0
    18fe:	70 e0       	ldi	r23, 0x00	; 0
    1900:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1902:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1904:	a8 a1       	ldd	r26, Y+32	; 0x20
    1906:	b9 a1       	ldd	r27, Y+33	; 0x21
    1908:	48 0f       	add	r20, r24
    190a:	59 1f       	adc	r21, r25
    190c:	6a 1f       	adc	r22, r26
    190e:	7b 1f       	adc	r23, r27
    1910:	ce 01       	movw	r24, r28
    1912:	18 df       	rcall	.-464    	; 0x1744 <move_window>
    1914:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    1916:	88 23       	and	r24, r24
    1918:	09 f0       	breq	.+2      	; 0x191c <put_fat+0xec>
    191a:	6b c0       	rjmp	.+214    	; 0x19f2 <put_fat+0x1c2>
			p = &fs->win[bc % SS(fs)];
    191c:	a8 01       	movw	r20, r16
    191e:	51 70       	andi	r21, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    1920:	ef 28       	or	r14, r15
    1922:	49 f0       	breq	.+18     	; 0x1936 <put_fat+0x106>
    1924:	e4 e0       	ldi	r30, 0x04	; 4
    1926:	b6 94       	lsr	r11
    1928:	a7 94       	ror	r10
    192a:	97 94       	ror	r9
    192c:	87 94       	ror	r8
    192e:	ea 95       	dec	r30
    1930:	d1 f7       	brne	.-12     	; 0x1926 <put_fat+0xf6>
    1932:	68 2d       	mov	r22, r8
    1934:	0b c0       	rjmp	.+22     	; 0x194c <put_fat+0x11c>
    1936:	fe 01       	movw	r30, r28
    1938:	e4 0f       	add	r30, r20
    193a:	f5 1f       	adc	r31, r21
    193c:	66 a5       	ldd	r22, Z+46	; 0x2e
    193e:	60 7f       	andi	r22, 0xF0	; 240
    1940:	bb 27       	eor	r27, r27
    1942:	ab 2d       	mov	r26, r11
    1944:	9a 2d       	mov	r25, r10
    1946:	89 2d       	mov	r24, r9
    1948:	8f 70       	andi	r24, 0x0F	; 15
    194a:	68 2b       	or	r22, r24
    194c:	4c 0f       	add	r20, r28
    194e:	5d 1f       	adc	r21, r29
    1950:	fa 01       	movw	r30, r20
    1952:	66 a7       	std	Z+46, r22	; 0x2e
    1954:	4e c0       	rjmp	.+156    	; 0x19f2 <put_fat+0x1c2>
			break;

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    1956:	77 27       	eor	r23, r23
    1958:	6f 2d       	mov	r22, r15
    195a:	5e 2d       	mov	r21, r14
    195c:	4d 2d       	mov	r20, r13
    195e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1960:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1962:	a8 a1       	ldd	r26, Y+32	; 0x20
    1964:	b9 a1       	ldd	r27, Y+33	; 0x21
    1966:	48 0f       	add	r20, r24
    1968:	59 1f       	adc	r21, r25
    196a:	6a 1f       	adc	r22, r26
    196c:	7b 1f       	adc	r23, r27
    196e:	ce 01       	movw	r24, r28
    1970:	e9 de       	rcall	.-558    	; 0x1744 <move_window>
    1972:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    1974:	88 23       	and	r24, r24
    1976:	09 f0       	breq	.+2      	; 0x197a <put_fat+0x14a>
    1978:	3c c0       	rjmp	.+120    	; 0x19f2 <put_fat+0x1c2>
			p = &fs->win[clst * 2 % SS(fs)];
			ST_WORD(p, (WORD)val);
    197a:	cc 0c       	add	r12, r12
    197c:	dd 1c       	adc	r13, r13
    197e:	ee 1c       	adc	r14, r14
    1980:	ff 1c       	adc	r15, r15
    1982:	f6 01       	movw	r30, r12
    1984:	f1 70       	andi	r31, 0x01	; 1
    1986:	be 96       	adiw	r30, 0x2e	; 46
    1988:	ec 0f       	add	r30, r28
    198a:	fd 1f       	adc	r31, r29
    198c:	91 82       	std	Z+1, r9	; 0x01
    198e:	80 82       	st	Z, r8
    1990:	30 c0       	rjmp	.+96     	; 0x19f2 <put_fat+0x1c2>
			break;

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    1992:	27 e0       	ldi	r18, 0x07	; 7
    1994:	76 95       	lsr	r23
    1996:	67 95       	ror	r22
    1998:	57 95       	ror	r21
    199a:	47 95       	ror	r20
    199c:	2a 95       	dec	r18
    199e:	d1 f7       	brne	.-12     	; 0x1994 <put_fat+0x164>
    19a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19a2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    19a4:	a8 a1       	ldd	r26, Y+32	; 0x20
    19a6:	b9 a1       	ldd	r27, Y+33	; 0x21
    19a8:	48 0f       	add	r20, r24
    19aa:	59 1f       	adc	r21, r25
    19ac:	6a 1f       	adc	r22, r26
    19ae:	7b 1f       	adc	r23, r27
    19b0:	ce 01       	movw	r24, r28
    19b2:	c8 de       	rcall	.-624    	; 0x1744 <move_window>
    19b4:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    19b6:	88 23       	and	r24, r24
    19b8:	e1 f4       	brne	.+56     	; 0x19f2 <put_fat+0x1c2>
			p = &fs->win[clst * 4 % SS(fs)];
			val |= LD_DWORD(p) & 0xF0000000;
    19ba:	92 e0       	ldi	r25, 0x02	; 2
    19bc:	cc 0c       	add	r12, r12
    19be:	dd 1c       	adc	r13, r13
    19c0:	ee 1c       	adc	r14, r14
    19c2:	ff 1c       	adc	r15, r15
    19c4:	9a 95       	dec	r25
    19c6:	d1 f7       	brne	.-12     	; 0x19bc <put_fat+0x18c>
    19c8:	f6 01       	movw	r30, r12
    19ca:	f1 70       	andi	r31, 0x01	; 1
    19cc:	be 96       	adiw	r30, 0x2e	; 46
    19ce:	ec 0f       	add	r30, r28
    19d0:	fd 1f       	adc	r31, r29
			ST_DWORD(p, val);
    19d2:	80 81       	ld	r24, Z
    19d4:	91 81       	ldd	r25, Z+1	; 0x01
    19d6:	a2 81       	ldd	r26, Z+2	; 0x02
    19d8:	b3 81       	ldd	r27, Z+3	; 0x03
    19da:	80 70       	andi	r24, 0x00	; 0
    19dc:	90 70       	andi	r25, 0x00	; 0
    19de:	a0 70       	andi	r26, 0x00	; 0
    19e0:	b0 7f       	andi	r27, 0xF0	; 240
    19e2:	88 29       	or	r24, r8
    19e4:	99 29       	or	r25, r9
    19e6:	aa 29       	or	r26, r10
    19e8:	bb 29       	or	r27, r11
    19ea:	80 83       	st	Z, r24
    19ec:	91 83       	std	Z+1, r25	; 0x01
    19ee:	a2 83       	std	Z+2, r26	; 0x02
    19f0:	b3 83       	std	Z+3, r27	; 0x03
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	8c 83       	std	Y+4, r24	; 0x04
    19f6:	01 c0       	rjmp	.+2      	; 0x19fa <put_fat+0x1ca>
    19f8:	22 e0       	ldi	r18, 0x02	; 2
	}

	return res;
}
    19fa:	82 2f       	mov	r24, r18
    19fc:	df 91       	pop	r29
    19fe:	cf 91       	pop	r28
    1a00:	1f 91       	pop	r17
    1a02:	0f 91       	pop	r16
    1a04:	ff 90       	pop	r15
    1a06:	ef 90       	pop	r14
    1a08:	df 90       	pop	r13
    1a0a:	cf 90       	pop	r12
    1a0c:	bf 90       	pop	r11
    1a0e:	af 90       	pop	r10
    1a10:	9f 90       	pop	r9
    1a12:	8f 90       	pop	r8
    1a14:	08 95       	ret

00001a16 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    1a16:	bf 92       	push	r11
    1a18:	cf 92       	push	r12
    1a1a:	df 92       	push	r13
    1a1c:	ef 92       	push	r14
    1a1e:	ff 92       	push	r15
    1a20:	0f 93       	push	r16
    1a22:	1f 93       	push	r17
    1a24:	cf 93       	push	r28
    1a26:	df 93       	push	r29
    1a28:	6c 01       	movw	r12, r24
    1a2a:	7a 01       	movw	r14, r20
    1a2c:	8b 01       	movw	r16, r22
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    1a2e:	42 30       	cpi	r20, 0x02	; 2
    1a30:	51 05       	cpc	r21, r1
    1a32:	61 05       	cpc	r22, r1
    1a34:	71 05       	cpc	r23, r1
    1a36:	08 f4       	brcc	.+2      	; 0x1a3a <get_fat+0x24>
    1a38:	a8 c0       	rjmp	.+336    	; 0x1b8a <get_fat+0x174>
    1a3a:	f6 01       	movw	r30, r12
    1a3c:	86 89       	ldd	r24, Z+22	; 0x16
    1a3e:	97 89       	ldd	r25, Z+23	; 0x17
    1a40:	a0 8d       	ldd	r26, Z+24	; 0x18
    1a42:	b1 8d       	ldd	r27, Z+25	; 0x19
    1a44:	48 17       	cp	r20, r24
    1a46:	59 07       	cpc	r21, r25
    1a48:	6a 07       	cpc	r22, r26
    1a4a:	7b 07       	cpc	r23, r27
    1a4c:	08 f0       	brcs	.+2      	; 0x1a50 <get_fat+0x3a>
    1a4e:	9d c0       	rjmp	.+314    	; 0x1b8a <get_fat+0x174>
		return 1;

	switch (fs->fs_type) {
    1a50:	80 81       	ld	r24, Z
    1a52:	82 30       	cpi	r24, 0x02	; 2
    1a54:	09 f4       	brne	.+2      	; 0x1a58 <get_fat+0x42>
    1a56:	55 c0       	rjmp	.+170    	; 0x1b02 <get_fat+0xec>
    1a58:	83 30       	cpi	r24, 0x03	; 3
    1a5a:	09 f4       	brne	.+2      	; 0x1a5e <get_fat+0x48>
    1a5c:	71 c0       	rjmp	.+226    	; 0x1b40 <get_fat+0x12a>
    1a5e:	81 30       	cpi	r24, 0x01	; 1
    1a60:	09 f0       	breq	.+2      	; 0x1a64 <get_fat+0x4e>
    1a62:	98 c0       	rjmp	.+304    	; 0x1b94 <get_fat+0x17e>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    1a64:	ea 01       	movw	r28, r20
    1a66:	d6 95       	lsr	r29
    1a68:	c7 95       	ror	r28
    1a6a:	c4 0f       	add	r28, r20
    1a6c:	d5 1f       	adc	r29, r21
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    1a6e:	ae 01       	movw	r20, r28
    1a70:	45 2f       	mov	r20, r21
    1a72:	55 27       	eor	r21, r21
    1a74:	46 95       	lsr	r20
    1a76:	60 e0       	ldi	r22, 0x00	; 0
    1a78:	70 e0       	ldi	r23, 0x00	; 0
    1a7a:	f6 01       	movw	r30, r12
    1a7c:	86 8d       	ldd	r24, Z+30	; 0x1e
    1a7e:	97 8d       	ldd	r25, Z+31	; 0x1f
    1a80:	a0 a1       	ldd	r26, Z+32	; 0x20
    1a82:	b1 a1       	ldd	r27, Z+33	; 0x21
    1a84:	48 0f       	add	r20, r24
    1a86:	59 1f       	adc	r21, r25
    1a88:	6a 1f       	adc	r22, r26
    1a8a:	7b 1f       	adc	r23, r27
    1a8c:	c6 01       	movw	r24, r12
    1a8e:	5a de       	rcall	.-844    	; 0x1744 <move_window>
    1a90:	88 23       	and	r24, r24
    1a92:	09 f0       	breq	.+2      	; 0x1a96 <get_fat+0x80>
    1a94:	7f c0       	rjmp	.+254    	; 0x1b94 <get_fat+0x17e>
		wc = fs->win[bc % SS(fs)]; bc++;
    1a96:	fe 01       	movw	r30, r28
    1a98:	f1 70       	andi	r31, 0x01	; 1
    1a9a:	ec 0d       	add	r30, r12
    1a9c:	fd 1d       	adc	r31, r13
    1a9e:	b6 a4       	ldd	r11, Z+46	; 0x2e
    1aa0:	21 96       	adiw	r28, 0x01	; 1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    1aa2:	ae 01       	movw	r20, r28
    1aa4:	45 2f       	mov	r20, r21
    1aa6:	55 27       	eor	r21, r21
    1aa8:	46 95       	lsr	r20
    1aaa:	60 e0       	ldi	r22, 0x00	; 0
    1aac:	70 e0       	ldi	r23, 0x00	; 0
    1aae:	f6 01       	movw	r30, r12
    1ab0:	86 8d       	ldd	r24, Z+30	; 0x1e
    1ab2:	97 8d       	ldd	r25, Z+31	; 0x1f
    1ab4:	a0 a1       	ldd	r26, Z+32	; 0x20
    1ab6:	b1 a1       	ldd	r27, Z+33	; 0x21
    1ab8:	48 0f       	add	r20, r24
    1aba:	59 1f       	adc	r21, r25
    1abc:	6a 1f       	adc	r22, r26
    1abe:	7b 1f       	adc	r23, r27
    1ac0:	c6 01       	movw	r24, r12
    1ac2:	40 de       	rcall	.-896    	; 0x1744 <move_window>
    1ac4:	88 23       	and	r24, r24
    1ac6:	09 f0       	breq	.+2      	; 0x1aca <get_fat+0xb4>
    1ac8:	65 c0       	rjmp	.+202    	; 0x1b94 <get_fat+0x17e>

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
    1aca:	6b 2d       	mov	r22, r11
    1acc:	70 e0       	ldi	r23, 0x00	; 0
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win[bc % SS(fs)] << 8;
    1ace:	d1 70       	andi	r29, 0x01	; 1
    1ad0:	cc 0d       	add	r28, r12
    1ad2:	dd 1d       	adc	r29, r13
    1ad4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	68 2b       	or	r22, r24
    1ada:	79 2b       	or	r23, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    1adc:	c7 01       	movw	r24, r14
    1ade:	81 70       	andi	r24, 0x01	; 1
    1ae0:	90 70       	andi	r25, 0x00	; 0
    1ae2:	89 2b       	or	r24, r25
    1ae4:	39 f0       	breq	.+14     	; 0x1af4 <get_fat+0xde>
    1ae6:	b4 e0       	ldi	r27, 0x04	; 4
    1ae8:	76 95       	lsr	r23
    1aea:	67 95       	ror	r22
    1aec:	ba 95       	dec	r27
    1aee:	e1 f7       	brne	.-8      	; 0x1ae8 <get_fat+0xd2>
    1af0:	9b 01       	movw	r18, r22
    1af2:	23 c0       	rjmp	.+70     	; 0x1b3a <get_fat+0x124>
    1af4:	9b 01       	movw	r18, r22
    1af6:	40 e0       	ldi	r20, 0x00	; 0
    1af8:	50 e0       	ldi	r21, 0x00	; 0
    1afa:	3f 70       	andi	r19, 0x0F	; 15
    1afc:	40 70       	andi	r20, 0x00	; 0
    1afe:	50 70       	andi	r21, 0x00	; 0
    1b00:	4d c0       	rjmp	.+154    	; 0x1b9c <get_fat+0x186>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    1b02:	45 2f       	mov	r20, r21
    1b04:	56 2f       	mov	r21, r22
    1b06:	67 2f       	mov	r22, r23
    1b08:	77 27       	eor	r23, r23
    1b0a:	f6 01       	movw	r30, r12
    1b0c:	86 8d       	ldd	r24, Z+30	; 0x1e
    1b0e:	97 8d       	ldd	r25, Z+31	; 0x1f
    1b10:	a0 a1       	ldd	r26, Z+32	; 0x20
    1b12:	b1 a1       	ldd	r27, Z+33	; 0x21
    1b14:	48 0f       	add	r20, r24
    1b16:	59 1f       	adc	r21, r25
    1b18:	6a 1f       	adc	r22, r26
    1b1a:	7b 1f       	adc	r23, r27
    1b1c:	c6 01       	movw	r24, r12
    1b1e:	12 de       	rcall	.-988    	; 0x1744 <move_window>
    1b20:	88 23       	and	r24, r24
    1b22:	c1 f5       	brne	.+112    	; 0x1b94 <get_fat+0x17e>
		p = &fs->win[clst * 2 % SS(fs)];
		return LD_WORD(p);
    1b24:	ee 0c       	add	r14, r14
    1b26:	ff 1c       	adc	r15, r15
    1b28:	00 1f       	adc	r16, r16
    1b2a:	11 1f       	adc	r17, r17
    1b2c:	f7 01       	movw	r30, r14
    1b2e:	f1 70       	andi	r31, 0x01	; 1
    1b30:	ec 0d       	add	r30, r12
    1b32:	fd 1d       	adc	r31, r13
    1b34:	86 a5       	ldd	r24, Z+46	; 0x2e
    1b36:	97 a5       	ldd	r25, Z+47	; 0x2f
    1b38:	9c 01       	movw	r18, r24
    1b3a:	40 e0       	ldi	r20, 0x00	; 0
    1b3c:	50 e0       	ldi	r21, 0x00	; 0
    1b3e:	2e c0       	rjmp	.+92     	; 0x1b9c <get_fat+0x186>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    1b40:	e7 e0       	ldi	r30, 0x07	; 7
    1b42:	76 95       	lsr	r23
    1b44:	67 95       	ror	r22
    1b46:	57 95       	ror	r21
    1b48:	47 95       	ror	r20
    1b4a:	ea 95       	dec	r30
    1b4c:	d1 f7       	brne	.-12     	; 0x1b42 <get_fat+0x12c>
    1b4e:	f6 01       	movw	r30, r12
    1b50:	86 8d       	ldd	r24, Z+30	; 0x1e
    1b52:	97 8d       	ldd	r25, Z+31	; 0x1f
    1b54:	a0 a1       	ldd	r26, Z+32	; 0x20
    1b56:	b1 a1       	ldd	r27, Z+33	; 0x21
    1b58:	48 0f       	add	r20, r24
    1b5a:	59 1f       	adc	r21, r25
    1b5c:	6a 1f       	adc	r22, r26
    1b5e:	7b 1f       	adc	r23, r27
    1b60:	c6 01       	movw	r24, r12
    1b62:	f0 dd       	rcall	.-1056   	; 0x1744 <move_window>
    1b64:	88 23       	and	r24, r24
    1b66:	b1 f4       	brne	.+44     	; 0x1b94 <get_fat+0x17e>
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;
    1b68:	32 e0       	ldi	r19, 0x02	; 2
    1b6a:	ee 0c       	add	r14, r14
    1b6c:	ff 1c       	adc	r15, r15
    1b6e:	00 1f       	adc	r16, r16
    1b70:	11 1f       	adc	r17, r17
    1b72:	3a 95       	dec	r19
    1b74:	d1 f7       	brne	.-12     	; 0x1b6a <get_fat+0x154>
    1b76:	f7 01       	movw	r30, r14
    1b78:	f1 70       	andi	r31, 0x01	; 1
    1b7a:	ec 0d       	add	r30, r12
    1b7c:	fd 1d       	adc	r31, r13
    1b7e:	26 a5       	ldd	r18, Z+46	; 0x2e
    1b80:	37 a5       	ldd	r19, Z+47	; 0x2f
    1b82:	40 a9       	ldd	r20, Z+48	; 0x30
    1b84:	51 a9       	ldd	r21, Z+49	; 0x31
    1b86:	5f 70       	andi	r21, 0x0F	; 15
    1b88:	09 c0       	rjmp	.+18     	; 0x1b9c <get_fat+0x186>
    1b8a:	21 e0       	ldi	r18, 0x01	; 1
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	40 e0       	ldi	r20, 0x00	; 0
    1b90:	50 e0       	ldi	r21, 0x00	; 0
    1b92:	04 c0       	rjmp	.+8      	; 0x1b9c <get_fat+0x186>
    1b94:	2f ef       	ldi	r18, 0xFF	; 255
    1b96:	3f ef       	ldi	r19, 0xFF	; 255
    1b98:	4f ef       	ldi	r20, 0xFF	; 255
    1b9a:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
}
    1b9c:	b9 01       	movw	r22, r18
    1b9e:	ca 01       	movw	r24, r20
    1ba0:	df 91       	pop	r29
    1ba2:	cf 91       	pop	r28
    1ba4:	1f 91       	pop	r17
    1ba6:	0f 91       	pop	r16
    1ba8:	ff 90       	pop	r15
    1baa:	ef 90       	pop	r14
    1bac:	df 90       	pop	r13
    1bae:	cf 90       	pop	r12
    1bb0:	bf 90       	pop	r11
    1bb2:	08 95       	ret

00001bb4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    1bb4:	4f 92       	push	r4
    1bb6:	5f 92       	push	r5
    1bb8:	6f 92       	push	r6
    1bba:	7f 92       	push	r7
    1bbc:	8f 92       	push	r8
    1bbe:	9f 92       	push	r9
    1bc0:	af 92       	push	r10
    1bc2:	bf 92       	push	r11
    1bc4:	cf 92       	push	r12
    1bc6:	df 92       	push	r13
    1bc8:	ef 92       	push	r14
    1bca:	ff 92       	push	r15
    1bcc:	0f 93       	push	r16
    1bce:	1f 93       	push	r17
    1bd0:	cf 93       	push	r28
    1bd2:	df 93       	push	r29
    1bd4:	ec 01       	movw	r28, r24
    1bd6:	2a 01       	movw	r4, r20
    1bd8:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    1bda:	41 15       	cp	r20, r1
    1bdc:	51 05       	cpc	r21, r1
    1bde:	61 05       	cpc	r22, r1
    1be0:	71 05       	cpc	r23, r1
    1be2:	99 f4       	brne	.+38     	; 0x1c0a <create_chain+0x56>
		scl = fs->last_clust;			/* Get suggested start point */
    1be4:	8a 84       	ldd	r8, Y+10	; 0x0a
    1be6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1be8:	ac 84       	ldd	r10, Y+12	; 0x0c
    1bea:	bd 84       	ldd	r11, Y+13	; 0x0d
		if (!scl || scl >= fs->n_fatent) scl = 1;
    1bec:	81 14       	cp	r8, r1
    1bee:	91 04       	cpc	r9, r1
    1bf0:	a1 04       	cpc	r10, r1
    1bf2:	b1 04       	cpc	r11, r1
    1bf4:	01 f1       	breq	.+64     	; 0x1c36 <create_chain+0x82>
    1bf6:	8e 89       	ldd	r24, Y+22	; 0x16
    1bf8:	9f 89       	ldd	r25, Y+23	; 0x17
    1bfa:	a8 8d       	ldd	r26, Y+24	; 0x18
    1bfc:	b9 8d       	ldd	r27, Y+25	; 0x19
    1bfe:	88 16       	cp	r8, r24
    1c00:	99 06       	cpc	r9, r25
    1c02:	aa 06       	cpc	r10, r26
    1c04:	bb 06       	cpc	r11, r27
    1c06:	b8 f4       	brcc	.+46     	; 0x1c36 <create_chain+0x82>
    1c08:	1b c0       	rjmp	.+54     	; 0x1c40 <create_chain+0x8c>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    1c0a:	05 df       	rcall	.-502    	; 0x1a16 <get_fat>
    1c0c:	9b 01       	movw	r18, r22
    1c0e:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    1c10:	62 30       	cpi	r22, 0x02	; 2
    1c12:	71 05       	cpc	r23, r1
    1c14:	81 05       	cpc	r24, r1
    1c16:	91 05       	cpc	r25, r1
    1c18:	08 f4       	brcc	.+2      	; 0x1c1c <create_chain+0x68>
    1c1a:	87 c0       	rjmp	.+270    	; 0x1d2a <create_chain+0x176>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    1c1c:	8e 89       	ldd	r24, Y+22	; 0x16
    1c1e:	9f 89       	ldd	r25, Y+23	; 0x17
    1c20:	a8 8d       	ldd	r26, Y+24	; 0x18
    1c22:	b9 8d       	ldd	r27, Y+25	; 0x19
    1c24:	28 17       	cp	r18, r24
    1c26:	39 07       	cpc	r19, r25
    1c28:	4a 07       	cpc	r20, r26
    1c2a:	5b 07       	cpc	r21, r27
    1c2c:	08 f4       	brcc	.+2      	; 0x1c30 <create_chain+0x7c>
    1c2e:	8b c0       	rjmp	.+278    	; 0x1d46 <create_chain+0x192>
    1c30:	53 01       	movw	r10, r6
    1c32:	42 01       	movw	r8, r4
    1c34:	05 c0       	rjmp	.+10     	; 0x1c40 <create_chain+0x8c>
    1c36:	41 e0       	ldi	r20, 0x01	; 1
    1c38:	84 2e       	mov	r8, r20
    1c3a:	91 2c       	mov	r9, r1
    1c3c:	a1 2c       	mov	r10, r1
    1c3e:	b1 2c       	mov	r11, r1
    1c40:	75 01       	movw	r14, r10
    1c42:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    1c44:	08 94       	sec
    1c46:	c1 1c       	adc	r12, r1
    1c48:	d1 1c       	adc	r13, r1
    1c4a:	e1 1c       	adc	r14, r1
    1c4c:	f1 1c       	adc	r15, r1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    1c4e:	8e 89       	ldd	r24, Y+22	; 0x16
    1c50:	9f 89       	ldd	r25, Y+23	; 0x17
    1c52:	a8 8d       	ldd	r26, Y+24	; 0x18
    1c54:	b9 8d       	ldd	r27, Y+25	; 0x19
    1c56:	c8 16       	cp	r12, r24
    1c58:	d9 06       	cpc	r13, r25
    1c5a:	ea 06       	cpc	r14, r26
    1c5c:	fb 06       	cpc	r15, r27
    1c5e:	60 f0       	brcs	.+24     	; 0x1c78 <create_chain+0xc4>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    1c60:	22 e0       	ldi	r18, 0x02	; 2
    1c62:	82 16       	cp	r8, r18
    1c64:	91 04       	cpc	r9, r1
    1c66:	a1 04       	cpc	r10, r1
    1c68:	b1 04       	cpc	r11, r1
    1c6a:	08 f4       	brcc	.+2      	; 0x1c6e <create_chain+0xba>
    1c6c:	68 c0       	rjmp	.+208    	; 0x1d3e <create_chain+0x18a>
    1c6e:	32 e0       	ldi	r19, 0x02	; 2
    1c70:	c3 2e       	mov	r12, r19
    1c72:	d1 2c       	mov	r13, r1
    1c74:	e1 2c       	mov	r14, r1
    1c76:	f1 2c       	mov	r15, r1
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    1c78:	ce 01       	movw	r24, r28
    1c7a:	b7 01       	movw	r22, r14
    1c7c:	a6 01       	movw	r20, r12
    1c7e:	cb de       	rcall	.-618    	; 0x1a16 <get_fat>
    1c80:	9b 01       	movw	r18, r22
    1c82:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
    1c84:	61 15       	cp	r22, r1
    1c86:	71 05       	cpc	r23, r1
    1c88:	81 05       	cpc	r24, r1
    1c8a:	91 05       	cpc	r25, r1
    1c8c:	a9 f0       	breq	.+42     	; 0x1cb8 <create_chain+0x104>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    1c8e:	2f 3f       	cpi	r18, 0xFF	; 255
    1c90:	8f ef       	ldi	r24, 0xFF	; 255
    1c92:	38 07       	cpc	r19, r24
    1c94:	8f ef       	ldi	r24, 0xFF	; 255
    1c96:	48 07       	cpc	r20, r24
    1c98:	8f ef       	ldi	r24, 0xFF	; 255
    1c9a:	58 07       	cpc	r21, r24
    1c9c:	09 f4       	brne	.+2      	; 0x1ca0 <create_chain+0xec>
    1c9e:	53 c0       	rjmp	.+166    	; 0x1d46 <create_chain+0x192>
    1ca0:	21 30       	cpi	r18, 0x01	; 1
    1ca2:	31 05       	cpc	r19, r1
    1ca4:	41 05       	cpc	r20, r1
    1ca6:	51 05       	cpc	r21, r1
    1ca8:	09 f4       	brne	.+2      	; 0x1cac <create_chain+0xf8>
    1caa:	4d c0       	rjmp	.+154    	; 0x1d46 <create_chain+0x192>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    1cac:	c8 14       	cp	r12, r8
    1cae:	d9 04       	cpc	r13, r9
    1cb0:	ea 04       	cpc	r14, r10
    1cb2:	fb 04       	cpc	r15, r11
    1cb4:	39 f6       	brne	.-114    	; 0x1c44 <create_chain+0x90>
    1cb6:	43 c0       	rjmp	.+134    	; 0x1d3e <create_chain+0x18a>
    1cb8:	bc 2c       	mov	r11, r12
    1cba:	ad 2c       	mov	r10, r13
    1cbc:	9e 2c       	mov	r9, r14
    1cbe:	8f 2c       	mov	r8, r15
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    1cc0:	ce 01       	movw	r24, r28
    1cc2:	a6 01       	movw	r20, r12
    1cc4:	b7 01       	movw	r22, r14
    1cc6:	0f ef       	ldi	r16, 0xFF	; 255
    1cc8:	1f ef       	ldi	r17, 0xFF	; 255
    1cca:	2f ef       	ldi	r18, 0xFF	; 255
    1ccc:	3f e0       	ldi	r19, 0x0F	; 15
    1cce:	b0 dd       	rcall	.-1184   	; 0x1830 <put_fat>
	if (res == FR_OK && clst != 0) {
    1cd0:	88 23       	and	r24, r24
    1cd2:	49 f5       	brne	.+82     	; 0x1d26 <create_chain+0x172>
    1cd4:	41 14       	cp	r4, r1
    1cd6:	51 04       	cpc	r5, r1
    1cd8:	61 04       	cpc	r6, r1
    1cda:	71 04       	cpc	r7, r1
    1cdc:	41 f0       	breq	.+16     	; 0x1cee <create_chain+0x13a>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    1cde:	ce 01       	movw	r24, r28
    1ce0:	b3 01       	movw	r22, r6
    1ce2:	a2 01       	movw	r20, r4
    1ce4:	86 01       	movw	r16, r12
    1ce6:	97 01       	movw	r18, r14
    1ce8:	a3 dd       	rcall	.-1210   	; 0x1830 <put_fat>
	}
	if (res == FR_OK) {
    1cea:	88 23       	and	r24, r24
    1cec:	e1 f4       	brne	.+56     	; 0x1d26 <create_chain+0x172>
		fs->last_clust = ncl;			/* Update FSINFO */
    1cee:	ba 86       	std	Y+10, r11	; 0x0a
    1cf0:	ab 86       	std	Y+11, r10	; 0x0b
    1cf2:	9c 86       	std	Y+12, r9	; 0x0c
    1cf4:	8d 86       	std	Y+13, r8	; 0x0d
		if (fs->free_clust != 0xFFFFFFFF) {
    1cf6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cf8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cfa:	a8 89       	ldd	r26, Y+16	; 0x10
    1cfc:	b9 89       	ldd	r27, Y+17	; 0x11
    1cfe:	8f 3f       	cpi	r24, 0xFF	; 255
    1d00:	2f ef       	ldi	r18, 0xFF	; 255
    1d02:	92 07       	cpc	r25, r18
    1d04:	2f ef       	ldi	r18, 0xFF	; 255
    1d06:	a2 07       	cpc	r26, r18
    1d08:	2f ef       	ldi	r18, 0xFF	; 255
    1d0a:	b2 07       	cpc	r27, r18
    1d0c:	49 f0       	breq	.+18     	; 0x1d20 <create_chain+0x16c>
			fs->free_clust--;
    1d0e:	01 97       	sbiw	r24, 0x01	; 1
    1d10:	a1 09       	sbc	r26, r1
    1d12:	b1 09       	sbc	r27, r1
    1d14:	8e 87       	std	Y+14, r24	; 0x0e
    1d16:	9f 87       	std	Y+15, r25	; 0x0f
    1d18:	a8 8b       	std	Y+16, r26	; 0x10
    1d1a:	b9 8b       	std	Y+17, r27	; 0x11
			fs->fsi_flag = 1;
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	8d 83       	std	Y+5, r24	; 0x05
    1d20:	a7 01       	movw	r20, r14
    1d22:	96 01       	movw	r18, r12
    1d24:	10 c0       	rjmp	.+32     	; 0x1d46 <create_chain+0x192>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    1d26:	81 30       	cpi	r24, 0x01	; 1
    1d28:	29 f0       	breq	.+10     	; 0x1d34 <create_chain+0x180>
    1d2a:	21 e0       	ldi	r18, 0x01	; 1
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	40 e0       	ldi	r20, 0x00	; 0
    1d30:	50 e0       	ldi	r21, 0x00	; 0
    1d32:	09 c0       	rjmp	.+18     	; 0x1d46 <create_chain+0x192>
    1d34:	2f ef       	ldi	r18, 0xFF	; 255
    1d36:	3f ef       	ldi	r19, 0xFF	; 255
    1d38:	4f ef       	ldi	r20, 0xFF	; 255
    1d3a:	5f ef       	ldi	r21, 0xFF	; 255
    1d3c:	04 c0       	rjmp	.+8      	; 0x1d46 <create_chain+0x192>
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	40 e0       	ldi	r20, 0x00	; 0
    1d44:	50 e0       	ldi	r21, 0x00	; 0
	}

	return ncl;		/* Return new cluster number or error code */
}
    1d46:	b9 01       	movw	r22, r18
    1d48:	ca 01       	movw	r24, r20
    1d4a:	df 91       	pop	r29
    1d4c:	cf 91       	pop	r28
    1d4e:	1f 91       	pop	r17
    1d50:	0f 91       	pop	r16
    1d52:	ff 90       	pop	r15
    1d54:	ef 90       	pop	r14
    1d56:	df 90       	pop	r13
    1d58:	cf 90       	pop	r12
    1d5a:	bf 90       	pop	r11
    1d5c:	af 90       	pop	r10
    1d5e:	9f 90       	pop	r9
    1d60:	8f 90       	pop	r8
    1d62:	7f 90       	pop	r7
    1d64:	6f 90       	pop	r6
    1d66:	5f 90       	pop	r5
    1d68:	4f 90       	pop	r4
    1d6a:	08 95       	ret

00001d6c <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    1d6c:	2f 92       	push	r2
    1d6e:	3f 92       	push	r3
    1d70:	4f 92       	push	r4
    1d72:	5f 92       	push	r5
    1d74:	6f 92       	push	r6
    1d76:	7f 92       	push	r7
    1d78:	8f 92       	push	r8
    1d7a:	9f 92       	push	r9
    1d7c:	af 92       	push	r10
    1d7e:	bf 92       	push	r11
    1d80:	cf 92       	push	r12
    1d82:	df 92       	push	r13
    1d84:	ef 92       	push	r14
    1d86:	ff 92       	push	r15
    1d88:	0f 93       	push	r16
    1d8a:	1f 93       	push	r17
    1d8c:	df 93       	push	r29
    1d8e:	cf 93       	push	r28
    1d90:	00 d0       	rcall	.+0      	; 0x1d92 <f_lseek+0x26>
    1d92:	00 d0       	rcall	.+0      	; 0x1d94 <f_lseek+0x28>
    1d94:	0f 92       	push	r0
    1d96:	cd b7       	in	r28, 0x3d	; 61
    1d98:	de b7       	in	r29, 0x3e	; 62
    1d9a:	9d 83       	std	Y+5, r25	; 0x05
    1d9c:	8c 83       	std	Y+4, r24	; 0x04
    1d9e:	3a 01       	movw	r6, r20
    1da0:	4b 01       	movw	r8, r22
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    1da2:	dc 01       	movw	r26, r24
    1da4:	12 96       	adiw	r26, 0x02	; 2
    1da6:	6d 91       	ld	r22, X+
    1da8:	7c 91       	ld	r23, X
    1daa:	13 97       	sbiw	r26, 0x03	; 3
    1dac:	8d 91       	ld	r24, X+
    1dae:	9c 91       	ld	r25, X
    1db0:	b4 dc       	rcall	.-1688   	; 0x171a <validate>
    1db2:	8b 83       	std	Y+3, r24	; 0x03
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    1db4:	88 23       	and	r24, r24
    1db6:	09 f0       	breq	.+2      	; 0x1dba <f_lseek+0x4e>
    1db8:	7d c1       	rjmp	.+762    	; 0x20b4 <f_lseek+0x348>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    1dba:	ec 81       	ldd	r30, Y+4	; 0x04
    1dbc:	fd 81       	ldd	r31, Y+5	; 0x05
    1dbe:	84 81       	ldd	r24, Z+4	; 0x04
    1dc0:	87 fd       	sbrc	r24, 7
    1dc2:	8f c0       	rjmp	.+286    	; 0x1ee2 <f_lseek+0x176>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    1dc4:	ac 81       	ldd	r26, Y+4	; 0x04
    1dc6:	bd 81       	ldd	r27, Y+5	; 0x05
    1dc8:	1a 96       	adiw	r26, 0x0a	; 10
    1dca:	ad 90       	ld	r10, X+
    1dcc:	bd 90       	ld	r11, X+
    1dce:	cd 90       	ld	r12, X+
    1dd0:	dc 90       	ld	r13, X
    1dd2:	1d 97       	sbiw	r26, 0x0d	; 13
    1dd4:	a6 14       	cp	r10, r6
    1dd6:	b7 04       	cpc	r11, r7
    1dd8:	c8 04       	cpc	r12, r8
    1dda:	d9 04       	cpc	r13, r9
    1ddc:	10 f4       	brcc	.+4      	; 0x1de2 <f_lseek+0x76>
    1dde:	81 ff       	sbrs	r24, 1
    1de0:	02 c0       	rjmp	.+4      	; 0x1de6 <f_lseek+0x7a>
    1de2:	64 01       	movw	r12, r8
    1de4:	53 01       	movw	r10, r6
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
    1de6:	ec 81       	ldd	r30, Y+4	; 0x04
    1de8:	fd 81       	ldd	r31, Y+5	; 0x05
    1dea:	26 81       	ldd	r18, Z+6	; 0x06
    1dec:	37 81       	ldd	r19, Z+7	; 0x07
    1dee:	40 85       	ldd	r20, Z+8	; 0x08
    1df0:	51 85       	ldd	r21, Z+9	; 0x09
		fp->fptr = nsect = 0;
    1df2:	16 82       	std	Z+6, r1	; 0x06
    1df4:	17 82       	std	Z+7, r1	; 0x07
    1df6:	10 86       	std	Z+8, r1	; 0x08
    1df8:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    1dfa:	a1 14       	cp	r10, r1
    1dfc:	b1 04       	cpc	r11, r1
    1dfe:	c1 04       	cpc	r12, r1
    1e00:	d1 04       	cpc	r13, r1
    1e02:	09 f4       	brne	.+2      	; 0x1e06 <f_lseek+0x9a>
    1e04:	23 c1       	rjmp	.+582    	; 0x204c <f_lseek+0x2e0>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    1e06:	01 90       	ld	r0, Z+
    1e08:	f0 81       	ld	r31, Z
    1e0a:	e0 2d       	mov	r30, r0
    1e0c:	fa 83       	std	Y+2, r31	; 0x02
    1e0e:	e9 83       	std	Y+1, r30	; 0x01
    1e10:	82 81       	ldd	r24, Z+2	; 0x02
    1e12:	68 2e       	mov	r6, r24
    1e14:	77 24       	eor	r7, r7
    1e16:	88 24       	eor	r8, r8
    1e18:	99 24       	eor	r9, r9
    1e1a:	f9 e0       	ldi	r31, 0x09	; 9
    1e1c:	66 0c       	add	r6, r6
    1e1e:	77 1c       	adc	r7, r7
    1e20:	88 1c       	adc	r8, r8
    1e22:	99 1c       	adc	r9, r9
    1e24:	fa 95       	dec	r31
    1e26:	d1 f7       	brne	.-12     	; 0x1e1c <f_lseek+0xb0>
			if (ifptr > 0 &&
    1e28:	21 15       	cp	r18, r1
    1e2a:	31 05       	cpc	r19, r1
    1e2c:	41 05       	cpc	r20, r1
    1e2e:	51 05       	cpc	r21, r1
    1e30:	c1 f1       	breq	.+112    	; 0x1ea2 <f_lseek+0x136>
    1e32:	19 01       	movw	r2, r18
    1e34:	2a 01       	movw	r4, r20
    1e36:	08 94       	sec
    1e38:	21 08       	sbc	r2, r1
    1e3a:	31 08       	sbc	r3, r1
    1e3c:	41 08       	sbc	r4, r1
    1e3e:	51 08       	sbc	r5, r1
    1e40:	c6 01       	movw	r24, r12
    1e42:	b5 01       	movw	r22, r10
    1e44:	61 50       	subi	r22, 0x01	; 1
    1e46:	70 40       	sbci	r23, 0x00	; 0
    1e48:	80 40       	sbci	r24, 0x00	; 0
    1e4a:	90 40       	sbci	r25, 0x00	; 0
    1e4c:	a4 01       	movw	r20, r8
    1e4e:	93 01       	movw	r18, r6
    1e50:	0e 94 3e 25 	call	0x4a7c	; 0x4a7c <__udivmodsi4>
    1e54:	79 01       	movw	r14, r18
    1e56:	8a 01       	movw	r16, r20
    1e58:	c2 01       	movw	r24, r4
    1e5a:	b1 01       	movw	r22, r2
    1e5c:	a4 01       	movw	r20, r8
    1e5e:	93 01       	movw	r18, r6
    1e60:	0e 94 3e 25 	call	0x4a7c	; 0x4a7c <__udivmodsi4>
    1e64:	e2 16       	cp	r14, r18
    1e66:	f3 06       	cpc	r15, r19
    1e68:	04 07       	cpc	r16, r20
    1e6a:	15 07       	cpc	r17, r21
    1e6c:	d0 f0       	brcs	.+52     	; 0x1ea2 <f_lseek+0x136>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    1e6e:	88 27       	eor	r24, r24
    1e70:	99 27       	eor	r25, r25
    1e72:	dc 01       	movw	r26, r24
    1e74:	86 19       	sub	r24, r6
    1e76:	97 09       	sbc	r25, r7
    1e78:	a8 09       	sbc	r26, r8
    1e7a:	b9 09       	sbc	r27, r9
    1e7c:	82 21       	and	r24, r2
    1e7e:	93 21       	and	r25, r3
    1e80:	a4 21       	and	r26, r4
    1e82:	b5 21       	and	r27, r5
    1e84:	ec 81       	ldd	r30, Y+4	; 0x04
    1e86:	fd 81       	ldd	r31, Y+5	; 0x05
    1e88:	86 83       	std	Z+6, r24	; 0x06
    1e8a:	97 83       	std	Z+7, r25	; 0x07
    1e8c:	a0 87       	std	Z+8, r26	; 0x08
    1e8e:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= fp->fptr;
    1e90:	a8 1a       	sub	r10, r24
    1e92:	b9 0a       	sbc	r11, r25
    1e94:	ca 0a       	sbc	r12, r26
    1e96:	db 0a       	sbc	r13, r27
				clst = fp->clust;
    1e98:	42 89       	ldd	r20, Z+18	; 0x12
    1e9a:	53 89       	ldd	r21, Z+19	; 0x13
    1e9c:	64 89       	ldd	r22, Z+20	; 0x14
    1e9e:	75 89       	ldd	r23, Z+21	; 0x15
    1ea0:	39 c0       	rjmp	.+114    	; 0x1f14 <f_lseek+0x1a8>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    1ea2:	ac 81       	ldd	r26, Y+4	; 0x04
    1ea4:	bd 81       	ldd	r27, Y+5	; 0x05
    1ea6:	1e 96       	adiw	r26, 0x0e	; 14
    1ea8:	4d 91       	ld	r20, X+
    1eaa:	5d 91       	ld	r21, X+
    1eac:	6d 91       	ld	r22, X+
    1eae:	7c 91       	ld	r23, X
    1eb0:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    1eb2:	41 15       	cp	r20, r1
    1eb4:	51 05       	cpc	r21, r1
    1eb6:	61 05       	cpc	r22, r1
    1eb8:	71 05       	cpc	r23, r1
    1eba:	21 f5       	brne	.+72     	; 0x1f04 <f_lseek+0x198>
					clst = create_chain(fp->fs, 0);
    1ebc:	89 81       	ldd	r24, Y+1	; 0x01
    1ebe:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec0:	40 e0       	ldi	r20, 0x00	; 0
    1ec2:	50 e0       	ldi	r21, 0x00	; 0
    1ec4:	60 e0       	ldi	r22, 0x00	; 0
    1ec6:	70 e0       	ldi	r23, 0x00	; 0
    1ec8:	75 de       	rcall	.-790    	; 0x1bb4 <create_chain>
    1eca:	ab 01       	movw	r20, r22
    1ecc:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    1ece:	41 30       	cpi	r20, 0x01	; 1
    1ed0:	51 05       	cpc	r21, r1
    1ed2:	61 05       	cpc	r22, r1
    1ed4:	71 05       	cpc	r23, r1
    1ed6:	41 f4       	brne	.+16     	; 0x1ee8 <f_lseek+0x17c>
    1ed8:	ec 81       	ldd	r30, Y+4	; 0x04
    1eda:	fd 81       	ldd	r31, Y+5	; 0x05
    1edc:	84 81       	ldd	r24, Z+4	; 0x04
    1ede:	80 68       	ori	r24, 0x80	; 128
    1ee0:	84 83       	std	Z+4, r24	; 0x04
    1ee2:	f2 e0       	ldi	r31, 0x02	; 2
    1ee4:	fb 83       	std	Y+3, r31	; 0x03
    1ee6:	e6 c0       	rjmp	.+460    	; 0x20b4 <f_lseek+0x348>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1ee8:	4f 3f       	cpi	r20, 0xFF	; 255
    1eea:	8f ef       	ldi	r24, 0xFF	; 255
    1eec:	58 07       	cpc	r21, r24
    1eee:	8f ef       	ldi	r24, 0xFF	; 255
    1ef0:	68 07       	cpc	r22, r24
    1ef2:	8f ef       	ldi	r24, 0xFF	; 255
    1ef4:	78 07       	cpc	r23, r24
    1ef6:	a1 f1       	breq	.+104    	; 0x1f60 <f_lseek+0x1f4>
					fp->sclust = clst;
    1ef8:	ec 81       	ldd	r30, Y+4	; 0x04
    1efa:	fd 81       	ldd	r31, Y+5	; 0x05
    1efc:	46 87       	std	Z+14, r20	; 0x0e
    1efe:	57 87       	std	Z+15, r21	; 0x0f
    1f00:	60 8b       	std	Z+16, r22	; 0x10
    1f02:	71 8b       	std	Z+17, r23	; 0x11
				}
#endif
				fp->clust = clst;
    1f04:	ac 81       	ldd	r26, Y+4	; 0x04
    1f06:	bd 81       	ldd	r27, Y+5	; 0x05
    1f08:	52 96       	adiw	r26, 0x12	; 18
    1f0a:	4d 93       	st	X+, r20
    1f0c:	5d 93       	st	X+, r21
    1f0e:	6d 93       	st	X+, r22
    1f10:	7c 93       	st	X, r23
    1f12:	55 97       	sbiw	r26, 0x15	; 21
			}
			if (clst != 0) {
    1f14:	41 15       	cp	r20, r1
    1f16:	51 05       	cpc	r21, r1
    1f18:	61 05       	cpc	r22, r1
    1f1a:	71 05       	cpc	r23, r1
    1f1c:	09 f0       	breq	.+2      	; 0x1f20 <f_lseek+0x1b4>
    1f1e:	58 c0       	rjmp	.+176    	; 0x1fd0 <f_lseek+0x264>
    1f20:	95 c0       	rjmp	.+298    	; 0x204c <f_lseek+0x2e0>
				while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    1f22:	ec 81       	ldd	r30, Y+4	; 0x04
    1f24:	fd 81       	ldd	r31, Y+5	; 0x05
    1f26:	84 81       	ldd	r24, Z+4	; 0x04
    1f28:	20 81       	ld	r18, Z
    1f2a:	31 81       	ldd	r19, Z+1	; 0x01
    1f2c:	81 ff       	sbrs	r24, 1
    1f2e:	0c c0       	rjmp	.+24     	; 0x1f48 <f_lseek+0x1dc>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    1f30:	c9 01       	movw	r24, r18
    1f32:	40 de       	rcall	.-896    	; 0x1bb4 <create_chain>
    1f34:	ab 01       	movw	r20, r22
    1f36:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    1f38:	41 15       	cp	r20, r1
    1f3a:	51 05       	cpc	r21, r1
    1f3c:	61 05       	cpc	r22, r1
    1f3e:	71 05       	cpc	r23, r1
    1f40:	39 f4       	brne	.+14     	; 0x1f50 <f_lseek+0x1e4>
    1f42:	64 01       	movw	r12, r8
    1f44:	53 01       	movw	r10, r6
    1f46:	4a c0       	rjmp	.+148    	; 0x1fdc <f_lseek+0x270>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    1f48:	c9 01       	movw	r24, r18
    1f4a:	65 dd       	rcall	.-1334   	; 0x1a16 <get_fat>
    1f4c:	ab 01       	movw	r20, r22
    1f4e:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1f50:	4f 3f       	cpi	r20, 0xFF	; 255
    1f52:	ff ef       	ldi	r31, 0xFF	; 255
    1f54:	5f 07       	cpc	r21, r31
    1f56:	ff ef       	ldi	r31, 0xFF	; 255
    1f58:	6f 07       	cpc	r22, r31
    1f5a:	ff ef       	ldi	r31, 0xFF	; 255
    1f5c:	7f 07       	cpc	r23, r31
    1f5e:	51 f4       	brne	.+20     	; 0x1f74 <f_lseek+0x208>
    1f60:	ac 81       	ldd	r26, Y+4	; 0x04
    1f62:	bd 81       	ldd	r27, Y+5	; 0x05
    1f64:	14 96       	adiw	r26, 0x04	; 4
    1f66:	8c 91       	ld	r24, X
    1f68:	14 97       	sbiw	r26, 0x04	; 4
    1f6a:	80 68       	ori	r24, 0x80	; 128
    1f6c:	14 96       	adiw	r26, 0x04	; 4
    1f6e:	8c 93       	st	X, r24
    1f70:	b1 e0       	ldi	r27, 0x01	; 1
    1f72:	5c c0       	rjmp	.+184    	; 0x202c <f_lseek+0x2c0>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    1f74:	42 30       	cpi	r20, 0x02	; 2
    1f76:	51 05       	cpc	r21, r1
    1f78:	61 05       	cpc	r22, r1
    1f7a:	71 05       	cpc	r23, r1
    1f7c:	08 f4       	brcc	.+2      	; 0x1f80 <f_lseek+0x214>
    1f7e:	ac cf       	rjmp	.-168    	; 0x1ed8 <f_lseek+0x16c>
    1f80:	ac 81       	ldd	r26, Y+4	; 0x04
    1f82:	bd 81       	ldd	r27, Y+5	; 0x05
    1f84:	ed 91       	ld	r30, X+
    1f86:	fc 91       	ld	r31, X
    1f88:	86 89       	ldd	r24, Z+22	; 0x16
    1f8a:	97 89       	ldd	r25, Z+23	; 0x17
    1f8c:	a0 8d       	ldd	r26, Z+24	; 0x18
    1f8e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1f90:	48 17       	cp	r20, r24
    1f92:	59 07       	cpc	r21, r25
    1f94:	6a 07       	cpc	r22, r26
    1f96:	7b 07       	cpc	r23, r27
    1f98:	08 f0       	brcs	.+2      	; 0x1f9c <f_lseek+0x230>
    1f9a:	9e cf       	rjmp	.-196    	; 0x1ed8 <f_lseek+0x16c>
					fp->clust = clst;
    1f9c:	ac 81       	ldd	r26, Y+4	; 0x04
    1f9e:	bd 81       	ldd	r27, Y+5	; 0x05
    1fa0:	52 96       	adiw	r26, 0x12	; 18
    1fa2:	4d 93       	st	X+, r20
    1fa4:	5d 93       	st	X+, r21
    1fa6:	6d 93       	st	X+, r22
    1fa8:	7c 93       	st	X, r23
    1faa:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    1fac:	ec 81       	ldd	r30, Y+4	; 0x04
    1fae:	fd 81       	ldd	r31, Y+5	; 0x05
    1fb0:	86 81       	ldd	r24, Z+6	; 0x06
    1fb2:	97 81       	ldd	r25, Z+7	; 0x07
    1fb4:	a0 85       	ldd	r26, Z+8	; 0x08
    1fb6:	b1 85       	ldd	r27, Z+9	; 0x09
    1fb8:	86 0d       	add	r24, r6
    1fba:	97 1d       	adc	r25, r7
    1fbc:	a8 1d       	adc	r26, r8
    1fbe:	b9 1d       	adc	r27, r9
    1fc0:	86 83       	std	Z+6, r24	; 0x06
    1fc2:	97 83       	std	Z+7, r25	; 0x07
    1fc4:	a0 87       	std	Z+8, r26	; 0x08
    1fc6:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    1fc8:	a6 18       	sub	r10, r6
    1fca:	b7 08       	sbc	r11, r7
    1fcc:	c8 08       	sbc	r12, r8
    1fce:	d9 08       	sbc	r13, r9
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    1fd0:	6a 14       	cp	r6, r10
    1fd2:	7b 04       	cpc	r7, r11
    1fd4:	8c 04       	cpc	r8, r12
    1fd6:	9d 04       	cpc	r9, r13
    1fd8:	08 f4       	brcc	.+2      	; 0x1fdc <f_lseek+0x270>
    1fda:	a3 cf       	rjmp	.-186    	; 0x1f22 <f_lseek+0x1b6>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    1fdc:	ec 81       	ldd	r30, Y+4	; 0x04
    1fde:	fd 81       	ldd	r31, Y+5	; 0x05
    1fe0:	86 81       	ldd	r24, Z+6	; 0x06
    1fe2:	97 81       	ldd	r25, Z+7	; 0x07
    1fe4:	a0 85       	ldd	r26, Z+8	; 0x08
    1fe6:	b1 85       	ldd	r27, Z+9	; 0x09
    1fe8:	8a 0d       	add	r24, r10
    1fea:	9b 1d       	adc	r25, r11
    1fec:	ac 1d       	adc	r26, r12
    1fee:	bd 1d       	adc	r27, r13
    1ff0:	86 83       	std	Z+6, r24	; 0x06
    1ff2:	97 83       	std	Z+7, r25	; 0x07
    1ff4:	a0 87       	std	Z+8, r26	; 0x08
    1ff6:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    1ff8:	d6 01       	movw	r26, r12
    1ffa:	c5 01       	movw	r24, r10
    1ffc:	91 70       	andi	r25, 0x01	; 1
    1ffe:	a0 70       	andi	r26, 0x00	; 0
    2000:	b0 70       	andi	r27, 0x00	; 0
    2002:	00 97       	sbiw	r24, 0x00	; 0
    2004:	a1 05       	cpc	r26, r1
    2006:	b1 05       	cpc	r27, r1
    2008:	09 f1       	breq	.+66     	; 0x204c <f_lseek+0x2e0>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    200a:	80 81       	ld	r24, Z
    200c:	91 81       	ldd	r25, Z+1	; 0x01
    200e:	33 db       	rcall	.-2458   	; 0x1676 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    2010:	61 15       	cp	r22, r1
    2012:	71 05       	cpc	r23, r1
    2014:	81 05       	cpc	r24, r1
    2016:	91 05       	cpc	r25, r1
    2018:	59 f4       	brne	.+22     	; 0x2030 <f_lseek+0x2c4>
    201a:	ac 81       	ldd	r26, Y+4	; 0x04
    201c:	bd 81       	ldd	r27, Y+5	; 0x05
    201e:	14 96       	adiw	r26, 0x04	; 4
    2020:	8c 91       	ld	r24, X
    2022:	14 97       	sbiw	r26, 0x04	; 4
    2024:	80 68       	ori	r24, 0x80	; 128
    2026:	14 96       	adiw	r26, 0x04	; 4
    2028:	8c 93       	st	X, r24
    202a:	b2 e0       	ldi	r27, 0x02	; 2
    202c:	bb 83       	std	Y+3, r27	; 0x03
    202e:	42 c0       	rjmp	.+132    	; 0x20b4 <f_lseek+0x348>
					nsect += ofs / SS(fp->fs);
    2030:	a6 01       	movw	r20, r12
    2032:	95 01       	movw	r18, r10
    2034:	e9 e0       	ldi	r30, 0x09	; 9
    2036:	56 95       	lsr	r21
    2038:	47 95       	ror	r20
    203a:	37 95       	ror	r19
    203c:	27 95       	ror	r18
    203e:	ea 95       	dec	r30
    2040:	d1 f7       	brne	.-12     	; 0x2036 <f_lseek+0x2ca>
    2042:	26 0f       	add	r18, r22
    2044:	37 1f       	adc	r19, r23
    2046:	48 1f       	adc	r20, r24
    2048:	59 1f       	adc	r21, r25
    204a:	04 c0       	rjmp	.+8      	; 0x2054 <f_lseek+0x2e8>
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	40 e0       	ldi	r20, 0x00	; 0
    2052:	50 e0       	ldi	r21, 0x00	; 0
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    2054:	ec 81       	ldd	r30, Y+4	; 0x04
    2056:	fd 81       	ldd	r31, Y+5	; 0x05
    2058:	86 81       	ldd	r24, Z+6	; 0x06
    205a:	97 81       	ldd	r25, Z+7	; 0x07
    205c:	a0 85       	ldd	r26, Z+8	; 0x08
    205e:	b1 85       	ldd	r27, Z+9	; 0x09
    2060:	91 70       	andi	r25, 0x01	; 1
    2062:	a0 70       	andi	r26, 0x00	; 0
    2064:	b0 70       	andi	r27, 0x00	; 0
    2066:	00 97       	sbiw	r24, 0x00	; 0
    2068:	a1 05       	cpc	r26, r1
    206a:	b1 05       	cpc	r27, r1
    206c:	69 f0       	breq	.+26     	; 0x2088 <f_lseek+0x31c>
    206e:	86 89       	ldd	r24, Z+22	; 0x16
    2070:	97 89       	ldd	r25, Z+23	; 0x17
    2072:	a0 8d       	ldd	r26, Z+24	; 0x18
    2074:	b1 8d       	ldd	r27, Z+25	; 0x19
    2076:	28 17       	cp	r18, r24
    2078:	39 07       	cpc	r19, r25
    207a:	4a 07       	cpc	r20, r26
    207c:	5b 07       	cpc	r21, r27
    207e:	21 f0       	breq	.+8      	; 0x2088 <f_lseek+0x31c>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    2080:	26 8b       	std	Z+22, r18	; 0x16
    2082:	37 8b       	std	Z+23, r19	; 0x17
    2084:	40 8f       	std	Z+24, r20	; 0x18
    2086:	51 8f       	std	Z+25, r21	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    2088:	ec 81       	ldd	r30, Y+4	; 0x04
    208a:	fd 81       	ldd	r31, Y+5	; 0x05
    208c:	26 81       	ldd	r18, Z+6	; 0x06
    208e:	37 81       	ldd	r19, Z+7	; 0x07
    2090:	40 85       	ldd	r20, Z+8	; 0x08
    2092:	51 85       	ldd	r21, Z+9	; 0x09
    2094:	82 85       	ldd	r24, Z+10	; 0x0a
    2096:	93 85       	ldd	r25, Z+11	; 0x0b
    2098:	a4 85       	ldd	r26, Z+12	; 0x0c
    209a:	b5 85       	ldd	r27, Z+13	; 0x0d
    209c:	82 17       	cp	r24, r18
    209e:	93 07       	cpc	r25, r19
    20a0:	a4 07       	cpc	r26, r20
    20a2:	b5 07       	cpc	r27, r21
    20a4:	38 f4       	brcc	.+14     	; 0x20b4 <f_lseek+0x348>
			fp->fsize = fp->fptr;
    20a6:	22 87       	std	Z+10, r18	; 0x0a
    20a8:	33 87       	std	Z+11, r19	; 0x0b
    20aa:	44 87       	std	Z+12, r20	; 0x0c
    20ac:	55 87       	std	Z+13, r21	; 0x0d
			fp->flag |= FA__WRITTEN;
    20ae:	84 81       	ldd	r24, Z+4	; 0x04
    20b0:	80 62       	ori	r24, 0x20	; 32
    20b2:	84 83       	std	Z+4, r24	; 0x04
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    20b4:	8b 81       	ldd	r24, Y+3	; 0x03
    20b6:	0f 90       	pop	r0
    20b8:	0f 90       	pop	r0
    20ba:	0f 90       	pop	r0
    20bc:	0f 90       	pop	r0
    20be:	0f 90       	pop	r0
    20c0:	cf 91       	pop	r28
    20c2:	df 91       	pop	r29
    20c4:	1f 91       	pop	r17
    20c6:	0f 91       	pop	r16
    20c8:	ff 90       	pop	r15
    20ca:	ef 90       	pop	r14
    20cc:	df 90       	pop	r13
    20ce:	cf 90       	pop	r12
    20d0:	bf 90       	pop	r11
    20d2:	af 90       	pop	r10
    20d4:	9f 90       	pop	r9
    20d6:	8f 90       	pop	r8
    20d8:	7f 90       	pop	r7
    20da:	6f 90       	pop	r6
    20dc:	5f 90       	pop	r5
    20de:	4f 90       	pop	r4
    20e0:	3f 90       	pop	r3
    20e2:	2f 90       	pop	r2
    20e4:	08 95       	ret

000020e6 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    20e6:	ef 92       	push	r14
    20e8:	ff 92       	push	r15
    20ea:	0f 93       	push	r16
    20ec:	1f 93       	push	r17
    20ee:	cf 93       	push	r28
    20f0:	df 93       	push	r29
    20f2:	ec 01       	movw	r28, r24
    20f4:	8b 01       	movw	r16, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    20f6:	7d 83       	std	Y+5, r23	; 0x05
    20f8:	6c 83       	std	Y+4, r22	; 0x04
	clst = dj->sclust;
    20fa:	4e 81       	ldd	r20, Y+6	; 0x06
    20fc:	5f 81       	ldd	r21, Y+7	; 0x07
    20fe:	68 85       	ldd	r22, Y+8	; 0x08
    2100:	79 85       	ldd	r23, Y+9	; 0x09
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    2102:	41 30       	cpi	r20, 0x01	; 1
    2104:	51 05       	cpc	r21, r1
    2106:	61 05       	cpc	r22, r1
    2108:	71 05       	cpc	r23, r1
    210a:	09 f4       	brne	.+2      	; 0x210e <__stack+0xf>
    210c:	90 c0       	rjmp	.+288    	; 0x222e <__stack+0x12f>
    210e:	e8 81       	ld	r30, Y
    2110:	f9 81       	ldd	r31, Y+1	; 0x01
    2112:	86 89       	ldd	r24, Z+22	; 0x16
    2114:	97 89       	ldd	r25, Z+23	; 0x17
    2116:	a0 8d       	ldd	r26, Z+24	; 0x18
    2118:	b1 8d       	ldd	r27, Z+25	; 0x19
    211a:	48 17       	cp	r20, r24
    211c:	59 07       	cpc	r21, r25
    211e:	6a 07       	cpc	r22, r26
    2120:	7b 07       	cpc	r23, r27
    2122:	08 f0       	brcs	.+2      	; 0x2126 <__stack+0x27>
    2124:	84 c0       	rjmp	.+264    	; 0x222e <__stack+0x12f>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    2126:	41 15       	cp	r20, r1
    2128:	51 05       	cpc	r21, r1
    212a:	61 05       	cpc	r22, r1
    212c:	71 05       	cpc	r23, r1
    212e:	69 f5       	brne	.+90     	; 0x218a <__stack+0x8b>
    2130:	80 81       	ld	r24, Z
    2132:	83 30       	cpi	r24, 0x03	; 3
    2134:	49 f4       	brne	.+18     	; 0x2148 <__stack+0x49>
		clst = dj->fs->dirbase;
    2136:	42 a1       	ldd	r20, Z+34	; 0x22
    2138:	53 a1       	ldd	r21, Z+35	; 0x23
    213a:	64 a1       	ldd	r22, Z+36	; 0x24
    213c:	75 a1       	ldd	r23, Z+37	; 0x25

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    213e:	41 15       	cp	r20, r1
    2140:	51 05       	cpc	r21, r1
    2142:	61 05       	cpc	r22, r1
    2144:	71 05       	cpc	r23, r1
    2146:	09 f5       	brne	.+66     	; 0x218a <__stack+0x8b>
		dj->clust = clst;
    2148:	1a 86       	std	Y+10, r1	; 0x0a
    214a:	1b 86       	std	Y+11, r1	; 0x0b
    214c:	1c 86       	std	Y+12, r1	; 0x0c
    214e:	1d 86       	std	Y+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    2150:	e8 81       	ld	r30, Y
    2152:	f9 81       	ldd	r31, Y+1	; 0x01
    2154:	80 85       	ldd	r24, Z+8	; 0x08
    2156:	91 85       	ldd	r25, Z+9	; 0x09
    2158:	08 17       	cp	r16, r24
    215a:	19 07       	cpc	r17, r25
    215c:	08 f0       	brcs	.+2      	; 0x2160 <__stack+0x61>
    215e:	67 c0       	rjmp	.+206    	; 0x222e <__stack+0x12f>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    2160:	c8 01       	movw	r24, r16
    2162:	24 e0       	ldi	r18, 0x04	; 4
    2164:	96 95       	lsr	r25
    2166:	87 95       	ror	r24
    2168:	2a 95       	dec	r18
    216a:	e1 f7       	brne	.-8      	; 0x2164 <__stack+0x65>
    216c:	a0 e0       	ldi	r26, 0x00	; 0
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	22 a1       	ldd	r18, Z+34	; 0x22
    2172:	33 a1       	ldd	r19, Z+35	; 0x23
    2174:	44 a1       	ldd	r20, Z+36	; 0x24
    2176:	55 a1       	ldd	r21, Z+37	; 0x25
    2178:	82 0f       	add	r24, r18
    217a:	93 1f       	adc	r25, r19
    217c:	a4 1f       	adc	r26, r20
    217e:	b5 1f       	adc	r27, r21
    2180:	8e 87       	std	Y+14, r24	; 0x0e
    2182:	9f 87       	std	Y+15, r25	; 0x0f
    2184:	a8 8b       	std	Y+16, r26	; 0x10
    2186:	b9 8b       	std	Y+17, r27	; 0x11
    2188:	42 c0       	rjmp	.+132    	; 0x220e <__stack+0x10f>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    218a:	82 81       	ldd	r24, Z+2	; 0x02
    218c:	e8 2e       	mov	r14, r24
    218e:	ff 24       	eor	r15, r15
    2190:	84 e0       	ldi	r24, 0x04	; 4
    2192:	ee 0c       	add	r14, r14
    2194:	ff 1c       	adc	r15, r15
    2196:	8a 95       	dec	r24
    2198:	e1 f7       	brne	.-8      	; 0x2192 <__stack+0x93>
    219a:	1f c0       	rjmp	.+62     	; 0x21da <__stack+0xdb>
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    219c:	3c dc       	rcall	.-1928   	; 0x1a16 <get_fat>
    219e:	ab 01       	movw	r20, r22
    21a0:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    21a2:	4f 3f       	cpi	r20, 0xFF	; 255
    21a4:	8f ef       	ldi	r24, 0xFF	; 255
    21a6:	58 07       	cpc	r21, r24
    21a8:	8f ef       	ldi	r24, 0xFF	; 255
    21aa:	68 07       	cpc	r22, r24
    21ac:	8f ef       	ldi	r24, 0xFF	; 255
    21ae:	78 07       	cpc	r23, r24
    21b0:	11 f4       	brne	.+4      	; 0x21b6 <__stack+0xb7>
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	3d c0       	rjmp	.+122    	; 0x2230 <__stack+0x131>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    21b6:	42 30       	cpi	r20, 0x02	; 2
    21b8:	51 05       	cpc	r21, r1
    21ba:	61 05       	cpc	r22, r1
    21bc:	71 05       	cpc	r23, r1
    21be:	b8 f1       	brcs	.+110    	; 0x222e <__stack+0x12f>
    21c0:	e8 81       	ld	r30, Y
    21c2:	f9 81       	ldd	r31, Y+1	; 0x01
    21c4:	86 89       	ldd	r24, Z+22	; 0x16
    21c6:	97 89       	ldd	r25, Z+23	; 0x17
    21c8:	a0 8d       	ldd	r26, Z+24	; 0x18
    21ca:	b1 8d       	ldd	r27, Z+25	; 0x19
    21cc:	48 17       	cp	r20, r24
    21ce:	59 07       	cpc	r21, r25
    21d0:	6a 07       	cpc	r22, r26
    21d2:	7b 07       	cpc	r23, r27
    21d4:	60 f5       	brcc	.+88     	; 0x222e <__stack+0x12f>
				return FR_INT_ERR;
			idx -= ic;
    21d6:	0e 19       	sub	r16, r14
    21d8:	1f 09       	sbc	r17, r15
    21da:	88 81       	ld	r24, Y
    21dc:	99 81       	ldd	r25, Y+1	; 0x01
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    21de:	0e 15       	cp	r16, r14
    21e0:	1f 05       	cpc	r17, r15
    21e2:	e0 f6       	brcc	.-72     	; 0x219c <__stack+0x9d>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    21e4:	4a 87       	std	Y+10, r20	; 0x0a
    21e6:	5b 87       	std	Y+11, r21	; 0x0b
    21e8:	6c 87       	std	Y+12, r22	; 0x0c
    21ea:	7d 87       	std	Y+13, r23	; 0x0d
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    21ec:	44 da       	rcall	.-2936   	; 0x1676 <clust2sect>
    21ee:	98 01       	movw	r18, r16
    21f0:	b4 e0       	ldi	r27, 0x04	; 4
    21f2:	36 95       	lsr	r19
    21f4:	27 95       	ror	r18
    21f6:	ba 95       	dec	r27
    21f8:	e1 f7       	brne	.-8      	; 0x21f2 <__stack+0xf3>
    21fa:	40 e0       	ldi	r20, 0x00	; 0
    21fc:	50 e0       	ldi	r21, 0x00	; 0
    21fe:	26 0f       	add	r18, r22
    2200:	37 1f       	adc	r19, r23
    2202:	48 1f       	adc	r20, r24
    2204:	59 1f       	adc	r21, r25
    2206:	2e 87       	std	Y+14, r18	; 0x0e
    2208:	3f 87       	std	Y+15, r19	; 0x0f
    220a:	48 8b       	std	Y+16, r20	; 0x10
    220c:	59 8b       	std	Y+17, r21	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    220e:	88 81       	ld	r24, Y
    2210:	99 81       	ldd	r25, Y+1	; 0x01
    2212:	8e 96       	adiw	r24, 0x2e	; 46
    2214:	0f 70       	andi	r16, 0x0F	; 15
    2216:	10 70       	andi	r17, 0x00	; 0
    2218:	a5 e0       	ldi	r26, 0x05	; 5
    221a:	00 0f       	add	r16, r16
    221c:	11 1f       	adc	r17, r17
    221e:	aa 95       	dec	r26
    2220:	e1 f7       	brne	.-8      	; 0x221a <__stack+0x11b>
    2222:	80 0f       	add	r24, r16
    2224:	91 1f       	adc	r25, r17
    2226:	9b 8b       	std	Y+19, r25	; 0x13
    2228:	8a 8b       	std	Y+18, r24	; 0x12
    222a:	80 e0       	ldi	r24, 0x00	; 0
    222c:	01 c0       	rjmp	.+2      	; 0x2230 <__stack+0x131>

	return FR_OK;	/* Seek succeeded */
    222e:	82 e0       	ldi	r24, 0x02	; 2
}
    2230:	df 91       	pop	r29
    2232:	cf 91       	pop	r28
    2234:	1f 91       	pop	r17
    2236:	0f 91       	pop	r16
    2238:	ff 90       	pop	r15
    223a:	ef 90       	pop	r14
    223c:	08 95       	ret

0000223e <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    223e:	2f 92       	push	r2
    2240:	3f 92       	push	r3
    2242:	4f 92       	push	r4
    2244:	5f 92       	push	r5
    2246:	6f 92       	push	r6
    2248:	7f 92       	push	r7
    224a:	8f 92       	push	r8
    224c:	9f 92       	push	r9
    224e:	af 92       	push	r10
    2250:	bf 92       	push	r11
    2252:	cf 92       	push	r12
    2254:	df 92       	push	r13
    2256:	ef 92       	push	r14
    2258:	ff 92       	push	r15
    225a:	0f 93       	push	r16
    225c:	1f 93       	push	r17
    225e:	cf 93       	push	r28
    2260:	df 93       	push	r29
    2262:	ec 01       	movw	r28, r24
    2264:	16 2f       	mov	r17, r22
    2266:	07 2f       	mov	r16, r23
    2268:	3a 01       	movw	r6, r20
    226a:	19 01       	movw	r2, r18
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    226c:	f9 01       	movw	r30, r18
    226e:	11 82       	std	Z+1, r1	; 0x01
    2270:	10 82       	st	Z, r1

	res = validate(fp->fs, fp->id);			/* Check validity */
    2272:	6a 81       	ldd	r22, Y+2	; 0x02
    2274:	7b 81       	ldd	r23, Y+3	; 0x03
    2276:	88 81       	ld	r24, Y
    2278:	99 81       	ldd	r25, Y+1	; 0x01
    227a:	4f da       	rcall	.-2914   	; 0x171a <validate>
    227c:	88 2e       	mov	r8, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    227e:	88 23       	and	r24, r24
    2280:	09 f0       	breq	.+2      	; 0x2284 <f_write+0x46>
    2282:	6d c1       	rjmp	.+730    	; 0x255e <f_write+0x320>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    2284:	8c 81       	ldd	r24, Y+4	; 0x04
    2286:	87 fd       	sbrc	r24, 7
    2288:	67 c0       	rjmp	.+206    	; 0x2358 <f_write+0x11a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    228a:	81 fd       	sbrc	r24, 1
    228c:	03 c0       	rjmp	.+6      	; 0x2294 <f_write+0x56>
    228e:	07 e0       	ldi	r16, 0x07	; 7
    2290:	80 2e       	mov	r8, r16
    2292:	65 c1       	rjmp	.+714    	; 0x255e <f_write+0x320>
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    2294:	2a 85       	ldd	r18, Y+10	; 0x0a
    2296:	3b 85       	ldd	r19, Y+11	; 0x0b
    2298:	4c 85       	ldd	r20, Y+12	; 0x0c
    229a:	5d 85       	ldd	r21, Y+13	; 0x0d
    229c:	c3 01       	movw	r24, r6
    229e:	a0 e0       	ldi	r26, 0x00	; 0
    22a0:	b0 e0       	ldi	r27, 0x00	; 0
    22a2:	82 0f       	add	r24, r18
    22a4:	93 1f       	adc	r25, r19
    22a6:	a4 1f       	adc	r26, r20
    22a8:	b5 1f       	adc	r27, r21
    22aa:	82 17       	cp	r24, r18
    22ac:	93 07       	cpc	r25, r19
    22ae:	a4 07       	cpc	r26, r20
    22b0:	b5 07       	cpc	r27, r21
    22b2:	10 f4       	brcc	.+4      	; 0x22b8 <f_write+0x7a>
    22b4:	66 24       	eor	r6, r6
    22b6:	77 24       	eor	r7, r7
)
{
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    22b8:	81 2f       	mov	r24, r17
    22ba:	90 2f       	mov	r25, r16
    22bc:	9c 01       	movw	r18, r24
    22be:	29 01       	movw	r4, r18
    22c0:	36 c1       	rjmp	.+620    	; 0x252e <f_write+0x2f0>
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    22c2:	2e 81       	ldd	r18, Y+6	; 0x06
    22c4:	3f 81       	ldd	r19, Y+7	; 0x07
    22c6:	48 85       	ldd	r20, Y+8	; 0x08
    22c8:	59 85       	ldd	r21, Y+9	; 0x09
    22ca:	da 01       	movw	r26, r20
    22cc:	c9 01       	movw	r24, r18
    22ce:	91 70       	andi	r25, 0x01	; 1
    22d0:	a0 70       	andi	r26, 0x00	; 0
    22d2:	b0 70       	andi	r27, 0x00	; 0
    22d4:	00 97       	sbiw	r24, 0x00	; 0
    22d6:	a1 05       	cpc	r26, r1
    22d8:	b1 05       	cpc	r27, r1
    22da:	09 f0       	breq	.+2      	; 0x22de <f_write+0xa0>
    22dc:	e0 c0       	rjmp	.+448    	; 0x249e <f_write+0x260>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    22de:	e8 81       	ld	r30, Y
    22e0:	f9 81       	ldd	r31, Y+1	; 0x01
    22e2:	da 01       	movw	r26, r20
    22e4:	c9 01       	movw	r24, r18
    22e6:	19 e0       	ldi	r17, 0x09	; 9
    22e8:	b6 95       	lsr	r27
    22ea:	a7 95       	ror	r26
    22ec:	97 95       	ror	r25
    22ee:	87 95       	ror	r24
    22f0:	1a 95       	dec	r17
    22f2:	d1 f7       	brne	.-12     	; 0x22e8 <f_write+0xaa>
    22f4:	92 80       	ldd	r9, Z+2	; 0x02
    22f6:	9a 94       	dec	r9
    22f8:	98 22       	and	r9, r24
			if (!csect) {					/* On the cluster boundary? */
    22fa:	09 f0       	breq	.+2      	; 0x22fe <f_write+0xc0>
    22fc:	3d c0       	rjmp	.+122    	; 0x2378 <f_write+0x13a>
				if (fp->fptr == 0) {		/* On the top of the file? */
    22fe:	21 15       	cp	r18, r1
    2300:	31 05       	cpc	r19, r1
    2302:	41 05       	cpc	r20, r1
    2304:	51 05       	cpc	r21, r1
    2306:	a1 f4       	brne	.+40     	; 0x2330 <f_write+0xf2>
					clst = fp->sclust;		/* Follow from the origin */
    2308:	6e 85       	ldd	r22, Y+14	; 0x0e
    230a:	7f 85       	ldd	r23, Y+15	; 0x0f
    230c:	88 89       	ldd	r24, Y+16	; 0x10
    230e:	99 89       	ldd	r25, Y+17	; 0x11
					if (clst == 0)			/* When no cluster is allocated, */
    2310:	61 15       	cp	r22, r1
    2312:	71 05       	cpc	r23, r1
    2314:	81 05       	cpc	r24, r1
    2316:	91 05       	cpc	r25, r1
    2318:	b9 f4       	brne	.+46     	; 0x2348 <f_write+0x10a>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    231a:	cf 01       	movw	r24, r30
    231c:	40 e0       	ldi	r20, 0x00	; 0
    231e:	50 e0       	ldi	r21, 0x00	; 0
    2320:	60 e0       	ldi	r22, 0x00	; 0
    2322:	70 e0       	ldi	r23, 0x00	; 0
    2324:	47 dc       	rcall	.-1906   	; 0x1bb4 <create_chain>
    2326:	6e 87       	std	Y+14, r22	; 0x0e
    2328:	7f 87       	std	Y+15, r23	; 0x0f
    232a:	88 8b       	std	Y+16, r24	; 0x10
    232c:	99 8b       	std	Y+17, r25	; 0x11
    232e:	06 c0       	rjmp	.+12     	; 0x233c <f_write+0xfe>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    2330:	4a 89       	ldd	r20, Y+18	; 0x12
    2332:	5b 89       	ldd	r21, Y+19	; 0x13
    2334:	6c 89       	ldd	r22, Y+20	; 0x14
    2336:	7d 89       	ldd	r23, Y+21	; 0x15
    2338:	cf 01       	movw	r24, r30
    233a:	3c dc       	rcall	.-1928   	; 0x1bb4 <create_chain>
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    233c:	61 15       	cp	r22, r1
    233e:	71 05       	cpc	r23, r1
    2340:	81 05       	cpc	r24, r1
    2342:	91 05       	cpc	r25, r1
    2344:	09 f4       	brne	.+2      	; 0x2348 <f_write+0x10a>
    2346:	f7 c0       	rjmp	.+494    	; 0x2536 <f_write+0x2f8>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    2348:	61 30       	cpi	r22, 0x01	; 1
    234a:	71 05       	cpc	r23, r1
    234c:	81 05       	cpc	r24, r1
    234e:	91 05       	cpc	r25, r1
    2350:	31 f4       	brne	.+12     	; 0x235e <f_write+0x120>
    2352:	8c 81       	ldd	r24, Y+4	; 0x04
    2354:	80 68       	ori	r24, 0x80	; 128
    2356:	8c 83       	std	Y+4, r24	; 0x04
    2358:	e2 e0       	ldi	r30, 0x02	; 2
    235a:	8e 2e       	mov	r8, r30
    235c:	00 c1       	rjmp	.+512    	; 0x255e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    235e:	6f 3f       	cpi	r22, 0xFF	; 255
    2360:	ff ef       	ldi	r31, 0xFF	; 255
    2362:	7f 07       	cpc	r23, r31
    2364:	ff ef       	ldi	r31, 0xFF	; 255
    2366:	8f 07       	cpc	r24, r31
    2368:	ff ef       	ldi	r31, 0xFF	; 255
    236a:	9f 07       	cpc	r25, r31
    236c:	09 f4       	brne	.+2      	; 0x2370 <f_write+0x132>
    236e:	a4 c0       	rjmp	.+328    	; 0x24b8 <f_write+0x27a>
				fp->clust = clst;			/* Update current cluster */
    2370:	6a 8b       	std	Y+18, r22	; 0x12
    2372:	7b 8b       	std	Y+19, r23	; 0x13
    2374:	8c 8b       	std	Y+20, r24	; 0x14
    2376:	9d 8b       	std	Y+21, r25	; 0x15
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    2378:	e8 81       	ld	r30, Y
    237a:	f9 81       	ldd	r31, Y+1	; 0x01
    237c:	22 a5       	ldd	r18, Z+42	; 0x2a
    237e:	33 a5       	ldd	r19, Z+43	; 0x2b
    2380:	44 a5       	ldd	r20, Z+44	; 0x2c
    2382:	55 a5       	ldd	r21, Z+45	; 0x2d
    2384:	8e 89       	ldd	r24, Y+22	; 0x16
    2386:	9f 89       	ldd	r25, Y+23	; 0x17
    2388:	a8 8d       	ldd	r26, Y+24	; 0x18
    238a:	b9 8d       	ldd	r27, Y+25	; 0x19
    238c:	28 17       	cp	r18, r24
    238e:	39 07       	cpc	r19, r25
    2390:	4a 07       	cpc	r20, r26
    2392:	5b 07       	cpc	r21, r27
    2394:	49 f4       	brne	.+18     	; 0x23a8 <f_write+0x16a>
    2396:	cf 01       	movw	r24, r30
    2398:	40 e0       	ldi	r20, 0x00	; 0
    239a:	50 e0       	ldi	r21, 0x00	; 0
    239c:	60 e0       	ldi	r22, 0x00	; 0
    239e:	70 e0       	ldi	r23, 0x00	; 0
    23a0:	d1 d9       	rcall	.-3166   	; 0x1744 <move_window>
    23a2:	88 23       	and	r24, r24
    23a4:	09 f0       	breq	.+2      	; 0x23a8 <f_write+0x16a>
    23a6:	88 c0       	rjmp	.+272    	; 0x24b8 <f_write+0x27a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    23a8:	08 81       	ld	r16, Y
    23aa:	19 81       	ldd	r17, Y+1	; 0x01
    23ac:	4a 89       	ldd	r20, Y+18	; 0x12
    23ae:	5b 89       	ldd	r21, Y+19	; 0x13
    23b0:	6c 89       	ldd	r22, Y+20	; 0x14
    23b2:	7d 89       	ldd	r23, Y+21	; 0x15
    23b4:	c8 01       	movw	r24, r16
    23b6:	5f d9       	rcall	.-3394   	; 0x1676 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    23b8:	61 15       	cp	r22, r1
    23ba:	71 05       	cpc	r23, r1
    23bc:	81 05       	cpc	r24, r1
    23be:	91 05       	cpc	r25, r1
    23c0:	41 f2       	breq	.-112    	; 0x2352 <f_write+0x114>
			sect += csect;
    23c2:	6b 01       	movw	r12, r22
    23c4:	7c 01       	movw	r14, r24
    23c6:	c9 0c       	add	r12, r9
    23c8:	d1 1c       	adc	r13, r1
    23ca:	e1 1c       	adc	r14, r1
    23cc:	f1 1c       	adc	r15, r1
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    23ce:	53 01       	movw	r10, r6
    23d0:	ab 2c       	mov	r10, r11
    23d2:	bb 24       	eor	r11, r11
    23d4:	a6 94       	lsr	r10
			if (cc) {						/* Write maximum contiguous sectors directly */
    23d6:	a1 14       	cp	r10, r1
    23d8:	b1 04       	cpc	r11, r1
    23da:	09 f4       	brne	.+2      	; 0x23de <f_write+0x1a0>
    23dc:	41 c0       	rjmp	.+130    	; 0x2460 <f_write+0x222>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    23de:	f8 01       	movw	r30, r16
    23e0:	22 81       	ldd	r18, Z+2	; 0x02
    23e2:	49 2d       	mov	r20, r9
    23e4:	50 e0       	ldi	r21, 0x00	; 0
    23e6:	c5 01       	movw	r24, r10
    23e8:	84 0f       	add	r24, r20
    23ea:	95 1f       	adc	r25, r21
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	28 17       	cp	r18, r24
    23f0:	39 07       	cpc	r19, r25
    23f2:	18 f4       	brcc	.+6      	; 0x23fa <f_write+0x1bc>
					cc = fp->fs->csize - csect;
    23f4:	59 01       	movw	r10, r18
    23f6:	a4 1a       	sub	r10, r20
    23f8:	b5 0a       	sbc	r11, r21
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    23fa:	f8 01       	movw	r30, r16
    23fc:	81 81       	ldd	r24, Z+1	; 0x01
    23fe:	b2 01       	movw	r22, r4
    2400:	a7 01       	movw	r20, r14
    2402:	96 01       	movw	r18, r12
    2404:	0a 2d       	mov	r16, r10
    2406:	ec d8       	rcall	.-3624   	; 0x15e0 <disk_write>
    2408:	88 23       	and	r24, r24
    240a:	09 f0       	breq	.+2      	; 0x240e <f_write+0x1d0>
    240c:	55 c0       	rjmp	.+170    	; 0x24b8 <f_write+0x27a>
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    240e:	e8 81       	ld	r30, Y
    2410:	f9 81       	ldd	r31, Y+1	; 0x01
    2412:	22 a5       	ldd	r18, Z+42	; 0x2a
    2414:	33 a5       	ldd	r19, Z+43	; 0x2b
    2416:	44 a5       	ldd	r20, Z+44	; 0x2c
    2418:	55 a5       	ldd	r21, Z+45	; 0x2d
    241a:	2c 19       	sub	r18, r12
    241c:	3d 09       	sbc	r19, r13
    241e:	4e 09       	sbc	r20, r14
    2420:	5f 09       	sbc	r21, r15
    2422:	c5 01       	movw	r24, r10
    2424:	a0 e0       	ldi	r26, 0x00	; 0
    2426:	b0 e0       	ldi	r27, 0x00	; 0
    2428:	28 17       	cp	r18, r24
    242a:	39 07       	cpc	r19, r25
    242c:	4a 07       	cpc	r20, r26
    242e:	5b 07       	cpc	r21, r27
    2430:	90 f4       	brcc	.+36     	; 0x2456 <f_write+0x218>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    2432:	69 e0       	ldi	r22, 0x09	; 9
    2434:	22 0f       	add	r18, r18
    2436:	33 1f       	adc	r19, r19
    2438:	44 1f       	adc	r20, r20
    243a:	55 1f       	adc	r21, r21
    243c:	6a 95       	dec	r22
    243e:	d1 f7       	brne	.-12     	; 0x2434 <f_write+0x1f6>
    2440:	b2 01       	movw	r22, r4
    2442:	62 0f       	add	r22, r18
    2444:	73 1f       	adc	r23, r19
    2446:	cf 01       	movw	r24, r30
    2448:	8e 96       	adiw	r24, 0x2e	; 46
    244a:	40 e0       	ldi	r20, 0x00	; 0
    244c:	52 e0       	ldi	r21, 0x02	; 2
    244e:	de d8       	rcall	.-3652   	; 0x160c <mem_cpy>
					fp->fs->wflag = 0;
    2450:	e8 81       	ld	r30, Y
    2452:	f9 81       	ldd	r31, Y+1	; 0x01
    2454:	14 82       	std	Z+4, r1	; 0x04
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    2456:	85 01       	movw	r16, r10
    2458:	10 2f       	mov	r17, r16
    245a:	00 27       	eor	r16, r16
    245c:	11 0f       	add	r17, r17
    245e:	4d c0       	rjmp	.+154    	; 0x24fa <f_write+0x2bc>
				continue;
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    2460:	2e 81       	ldd	r18, Y+6	; 0x06
    2462:	3f 81       	ldd	r19, Y+7	; 0x07
    2464:	48 85       	ldd	r20, Y+8	; 0x08
    2466:	59 85       	ldd	r21, Y+9	; 0x09
    2468:	8a 85       	ldd	r24, Y+10	; 0x0a
    246a:	9b 85       	ldd	r25, Y+11	; 0x0b
    246c:	ac 85       	ldd	r26, Y+12	; 0x0c
    246e:	bd 85       	ldd	r27, Y+13	; 0x0d
    2470:	28 17       	cp	r18, r24
    2472:	39 07       	cpc	r19, r25
    2474:	4a 07       	cpc	r20, r26
    2476:	5b 07       	cpc	r21, r27
    2478:	70 f0       	brcs	.+28     	; 0x2496 <f_write+0x258>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    247a:	c8 01       	movw	r24, r16
    247c:	40 e0       	ldi	r20, 0x00	; 0
    247e:	50 e0       	ldi	r21, 0x00	; 0
    2480:	60 e0       	ldi	r22, 0x00	; 0
    2482:	70 e0       	ldi	r23, 0x00	; 0
    2484:	5f d9       	rcall	.-3394   	; 0x1744 <move_window>
    2486:	88 23       	and	r24, r24
    2488:	b9 f4       	brne	.+46     	; 0x24b8 <f_write+0x27a>
				fp->fs->winsect = sect;
    248a:	e8 81       	ld	r30, Y
    248c:	f9 81       	ldd	r31, Y+1	; 0x01
    248e:	c2 a6       	std	Z+42, r12	; 0x2a
    2490:	d3 a6       	std	Z+43, r13	; 0x2b
    2492:	e4 a6       	std	Z+44, r14	; 0x2c
    2494:	f5 a6       	std	Z+45, r15	; 0x2d
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    2496:	ce 8a       	std	Y+22, r12	; 0x16
    2498:	df 8a       	std	Y+23, r13	; 0x17
    249a:	e8 8e       	std	Y+24, r14	; 0x18
    249c:	f9 8e       	std	Y+25, r15	; 0x19
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    249e:	ee 80       	ldd	r14, Y+6	; 0x06
    24a0:	ff 80       	ldd	r15, Y+7	; 0x07
    24a2:	08 85       	ldd	r16, Y+8	; 0x08
    24a4:	19 85       	ldd	r17, Y+9	; 0x09
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    24a6:	4e 89       	ldd	r20, Y+22	; 0x16
    24a8:	5f 89       	ldd	r21, Y+23	; 0x17
    24aa:	68 8d       	ldd	r22, Y+24	; 0x18
    24ac:	79 8d       	ldd	r23, Y+25	; 0x19
    24ae:	88 81       	ld	r24, Y
    24b0:	99 81       	ldd	r25, Y+1	; 0x01
    24b2:	48 d9       	rcall	.-3440   	; 0x1744 <move_window>
    24b4:	88 23       	and	r24, r24
    24b6:	31 f0       	breq	.+12     	; 0x24c4 <f_write+0x286>
			ABORT(fp->fs, FR_DISK_ERR);
    24b8:	8c 81       	ldd	r24, Y+4	; 0x04
    24ba:	80 68       	ori	r24, 0x80	; 128
    24bc:	8c 83       	std	Y+4, r24	; 0x04
    24be:	88 24       	eor	r8, r8
    24c0:	83 94       	inc	r8
    24c2:	4d c0       	rjmp	.+154    	; 0x255e <f_write+0x320>
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    24c4:	c7 01       	movw	r24, r14
    24c6:	91 70       	andi	r25, 0x01	; 1
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	32 e0       	ldi	r19, 0x02	; 2
    24cc:	28 1b       	sub	r18, r24
    24ce:	39 0b       	sbc	r19, r25
    24d0:	83 01       	movw	r16, r6
    24d2:	26 15       	cp	r18, r6
    24d4:	37 05       	cpc	r19, r7
    24d6:	08 f4       	brcc	.+2      	; 0x24da <f_write+0x29c>
    24d8:	89 01       	movw	r16, r18
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    24da:	2e 81       	ldd	r18, Y+6	; 0x06
    24dc:	3f 81       	ldd	r19, Y+7	; 0x07
    24de:	31 70       	andi	r19, 0x01	; 1
    24e0:	22 5d       	subi	r18, 0xD2	; 210
    24e2:	3f 4f       	sbci	r19, 0xFF	; 255
    24e4:	88 81       	ld	r24, Y
    24e6:	99 81       	ldd	r25, Y+1	; 0x01
    24e8:	82 0f       	add	r24, r18
    24ea:	93 1f       	adc	r25, r19
    24ec:	b2 01       	movw	r22, r4
    24ee:	a8 01       	movw	r20, r16
    24f0:	8d d8       	rcall	.-3814   	; 0x160c <mem_cpy>
		fp->fs->wflag = 1;
    24f2:	e8 81       	ld	r30, Y
    24f4:	f9 81       	ldd	r31, Y+1	; 0x01
    24f6:	31 e0       	ldi	r19, 0x01	; 1
    24f8:	34 83       	std	Z+4, r19	; 0x04
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    24fa:	40 0e       	add	r4, r16
    24fc:	51 1e       	adc	r5, r17
    24fe:	c8 01       	movw	r24, r16
    2500:	a0 e0       	ldi	r26, 0x00	; 0
    2502:	b0 e0       	ldi	r27, 0x00	; 0
    2504:	2e 81       	ldd	r18, Y+6	; 0x06
    2506:	3f 81       	ldd	r19, Y+7	; 0x07
    2508:	48 85       	ldd	r20, Y+8	; 0x08
    250a:	59 85       	ldd	r21, Y+9	; 0x09
    250c:	28 0f       	add	r18, r24
    250e:	39 1f       	adc	r19, r25
    2510:	4a 1f       	adc	r20, r26
    2512:	5b 1f       	adc	r21, r27
    2514:	2e 83       	std	Y+6, r18	; 0x06
    2516:	3f 83       	std	Y+7, r19	; 0x07
    2518:	48 87       	std	Y+8, r20	; 0x08
    251a:	59 87       	std	Y+9, r21	; 0x09
    251c:	f1 01       	movw	r30, r2
    251e:	80 81       	ld	r24, Z
    2520:	91 81       	ldd	r25, Z+1	; 0x01
    2522:	80 0f       	add	r24, r16
    2524:	91 1f       	adc	r25, r17
    2526:	91 83       	std	Z+1, r25	; 0x01
    2528:	80 83       	st	Z, r24
    252a:	60 1a       	sub	r6, r16
    252c:	71 0a       	sbc	r7, r17
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    252e:	61 14       	cp	r6, r1
    2530:	71 04       	cpc	r7, r1
    2532:	09 f0       	breq	.+2      	; 0x2536 <f_write+0x2f8>
    2534:	c6 ce       	rjmp	.-628    	; 0x22c2 <f_write+0x84>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    2536:	2e 81       	ldd	r18, Y+6	; 0x06
    2538:	3f 81       	ldd	r19, Y+7	; 0x07
    253a:	48 85       	ldd	r20, Y+8	; 0x08
    253c:	59 85       	ldd	r21, Y+9	; 0x09
    253e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2540:	9b 85       	ldd	r25, Y+11	; 0x0b
    2542:	ac 85       	ldd	r26, Y+12	; 0x0c
    2544:	bd 85       	ldd	r27, Y+13	; 0x0d
    2546:	82 17       	cp	r24, r18
    2548:	93 07       	cpc	r25, r19
    254a:	a4 07       	cpc	r26, r20
    254c:	b5 07       	cpc	r27, r21
    254e:	20 f4       	brcc	.+8      	; 0x2558 <f_write+0x31a>
    2550:	2a 87       	std	Y+10, r18	; 0x0a
    2552:	3b 87       	std	Y+11, r19	; 0x0b
    2554:	4c 87       	std	Y+12, r20	; 0x0c
    2556:	5d 87       	std	Y+13, r21	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    2558:	8c 81       	ldd	r24, Y+4	; 0x04
    255a:	80 62       	ori	r24, 0x20	; 32
    255c:	8c 83       	std	Y+4, r24	; 0x04

	LEAVE_FF(fp->fs, FR_OK);
}
    255e:	88 2d       	mov	r24, r8
    2560:	df 91       	pop	r29
    2562:	cf 91       	pop	r28
    2564:	1f 91       	pop	r17
    2566:	0f 91       	pop	r16
    2568:	ff 90       	pop	r15
    256a:	ef 90       	pop	r14
    256c:	df 90       	pop	r13
    256e:	cf 90       	pop	r12
    2570:	bf 90       	pop	r11
    2572:	af 90       	pop	r10
    2574:	9f 90       	pop	r9
    2576:	8f 90       	pop	r8
    2578:	7f 90       	pop	r7
    257a:	6f 90       	pop	r6
    257c:	5f 90       	pop	r5
    257e:	4f 90       	pop	r4
    2580:	3f 90       	pop	r3
    2582:	2f 90       	pop	r2
    2584:	08 95       	ret

00002586 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    2586:	8f 92       	push	r8
    2588:	9f 92       	push	r9
    258a:	af 92       	push	r10
    258c:	bf 92       	push	r11
    258e:	cf 92       	push	r12
    2590:	df 92       	push	r13
    2592:	ef 92       	push	r14
    2594:	ff 92       	push	r15
    2596:	0f 93       	push	r16
    2598:	1f 93       	push	r17
    259a:	cf 93       	push	r28
    259c:	df 93       	push	r29
    259e:	ec 01       	movw	r28, r24
    25a0:	8b 01       	movw	r16, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
    25a2:	ac 80       	ldd	r10, Y+4	; 0x04
    25a4:	bd 80       	ldd	r11, Y+5	; 0x05
    25a6:	08 94       	sec
    25a8:	a1 1c       	adc	r10, r1
    25aa:	b1 1c       	adc	r11, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    25ac:	a1 14       	cp	r10, r1
    25ae:	b1 04       	cpc	r11, r1
    25b0:	09 f4       	brne	.+2      	; 0x25b4 <dir_next+0x2e>
    25b2:	e6 c0       	rjmp	.+460    	; 0x2780 <dir_next+0x1fa>
    25b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    25b6:	9f 85       	ldd	r25, Y+15	; 0x0f
    25b8:	a8 89       	ldd	r26, Y+16	; 0x10
    25ba:	b9 89       	ldd	r27, Y+17	; 0x11
    25bc:	00 97       	sbiw	r24, 0x00	; 0
    25be:	a1 05       	cpc	r26, r1
    25c0:	b1 05       	cpc	r27, r1
    25c2:	09 f4       	brne	.+2      	; 0x25c6 <dir_next+0x40>
    25c4:	dd c0       	rjmp	.+442    	; 0x2780 <dir_next+0x1fa>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    25c6:	2f e0       	ldi	r18, 0x0F	; 15
    25c8:	82 2e       	mov	r8, r18
    25ca:	91 2c       	mov	r9, r1
    25cc:	8a 20       	and	r8, r10
    25ce:	9b 20       	and	r9, r11
    25d0:	81 14       	cp	r8, r1
    25d2:	91 04       	cpc	r9, r1
    25d4:	09 f0       	breq	.+2      	; 0x25d8 <dir_next+0x52>
    25d6:	c4 c0       	rjmp	.+392    	; 0x2760 <dir_next+0x1da>
		dj->sect++;					/* Next sector */
    25d8:	01 96       	adiw	r24, 0x01	; 1
    25da:	a1 1d       	adc	r26, r1
    25dc:	b1 1d       	adc	r27, r1
    25de:	8e 87       	std	Y+14, r24	; 0x0e
    25e0:	9f 87       	std	Y+15, r25	; 0x0f
    25e2:	a8 8b       	std	Y+16, r26	; 0x10
    25e4:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    25e6:	4a 85       	ldd	r20, Y+10	; 0x0a
    25e8:	5b 85       	ldd	r21, Y+11	; 0x0b
    25ea:	6c 85       	ldd	r22, Y+12	; 0x0c
    25ec:	7d 85       	ldd	r23, Y+13	; 0x0d
    25ee:	e8 81       	ld	r30, Y
    25f0:	f9 81       	ldd	r31, Y+1	; 0x01
    25f2:	41 15       	cp	r20, r1
    25f4:	51 05       	cpc	r21, r1
    25f6:	61 05       	cpc	r22, r1
    25f8:	71 05       	cpc	r23, r1
    25fa:	39 f4       	brne	.+14     	; 0x260a <dir_next+0x84>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    25fc:	80 85       	ldd	r24, Z+8	; 0x08
    25fe:	91 85       	ldd	r25, Z+9	; 0x09
    2600:	a8 16       	cp	r10, r24
    2602:	b9 06       	cpc	r11, r25
    2604:	08 f4       	brcc	.+2      	; 0x2608 <dir_next+0x82>
    2606:	ac c0       	rjmp	.+344    	; 0x2760 <dir_next+0x1da>
    2608:	bb c0       	rjmp	.+374    	; 0x2780 <dir_next+0x1fa>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    260a:	82 81       	ldd	r24, Z+2	; 0x02
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	01 97       	sbiw	r24, 0x01	; 1
    2610:	95 01       	movw	r18, r10
    2612:	a4 e0       	ldi	r26, 0x04	; 4
    2614:	36 95       	lsr	r19
    2616:	27 95       	ror	r18
    2618:	aa 95       	dec	r26
    261a:	e1 f7       	brne	.-8      	; 0x2614 <dir_next+0x8e>
    261c:	82 23       	and	r24, r18
    261e:	93 23       	and	r25, r19
    2620:	89 2b       	or	r24, r25
    2622:	09 f0       	breq	.+2      	; 0x2626 <dir_next+0xa0>
    2624:	9d c0       	rjmp	.+314    	; 0x2760 <dir_next+0x1da>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    2626:	cf 01       	movw	r24, r30
    2628:	f6 d9       	rcall	.-3092   	; 0x1a16 <get_fat>
    262a:	6b 01       	movw	r12, r22
    262c:	7c 01       	movw	r14, r24
				if (clst <= 1) return FR_INT_ERR;
    262e:	82 e0       	ldi	r24, 0x02	; 2
    2630:	c8 16       	cp	r12, r24
    2632:	d1 04       	cpc	r13, r1
    2634:	e1 04       	cpc	r14, r1
    2636:	f1 04       	cpc	r15, r1
    2638:	08 f4       	brcc	.+2      	; 0x263c <dir_next+0xb6>
    263a:	a4 c0       	rjmp	.+328    	; 0x2784 <dir_next+0x1fe>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    263c:	ef ef       	ldi	r30, 0xFF	; 255
    263e:	ce 16       	cp	r12, r30
    2640:	ef ef       	ldi	r30, 0xFF	; 255
    2642:	de 06       	cpc	r13, r30
    2644:	ef ef       	ldi	r30, 0xFF	; 255
    2646:	ee 06       	cpc	r14, r30
    2648:	ef ef       	ldi	r30, 0xFF	; 255
    264a:	fe 06       	cpc	r15, r30
    264c:	09 f4       	brne	.+2      	; 0x2650 <dir_next+0xca>
    264e:	9c c0       	rjmp	.+312    	; 0x2788 <dir_next+0x202>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    2650:	e8 81       	ld	r30, Y
    2652:	f9 81       	ldd	r31, Y+1	; 0x01
    2654:	86 89       	ldd	r24, Z+22	; 0x16
    2656:	97 89       	ldd	r25, Z+23	; 0x17
    2658:	a0 8d       	ldd	r26, Z+24	; 0x18
    265a:	b1 8d       	ldd	r27, Z+25	; 0x19
    265c:	c8 16       	cp	r12, r24
    265e:	d9 06       	cpc	r13, r25
    2660:	ea 06       	cpc	r14, r26
    2662:	fb 06       	cpc	r15, r27
    2664:	08 f4       	brcc	.+2      	; 0x2668 <dir_next+0xe2>
    2666:	6e c0       	rjmp	.+220    	; 0x2744 <dir_next+0x1be>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    2668:	01 2b       	or	r16, r17
    266a:	09 f4       	brne	.+2      	; 0x266e <dir_next+0xe8>
    266c:	89 c0       	rjmp	.+274    	; 0x2780 <dir_next+0x1fa>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    266e:	4a 85       	ldd	r20, Y+10	; 0x0a
    2670:	5b 85       	ldd	r21, Y+11	; 0x0b
    2672:	6c 85       	ldd	r22, Y+12	; 0x0c
    2674:	7d 85       	ldd	r23, Y+13	; 0x0d
    2676:	cf 01       	movw	r24, r30
    2678:	9d da       	rcall	.-2758   	; 0x1bb4 <create_chain>
    267a:	6b 01       	movw	r12, r22
    267c:	7c 01       	movw	r14, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    267e:	61 15       	cp	r22, r1
    2680:	71 05       	cpc	r23, r1
    2682:	81 05       	cpc	r24, r1
    2684:	91 05       	cpc	r25, r1
    2686:	11 f4       	brne	.+4      	; 0x268c <dir_next+0x106>
    2688:	87 e0       	ldi	r24, 0x07	; 7
    268a:	7f c0       	rjmp	.+254    	; 0x278a <dir_next+0x204>
					if (clst == 1) return FR_INT_ERR;
    268c:	61 30       	cpi	r22, 0x01	; 1
    268e:	71 05       	cpc	r23, r1
    2690:	81 05       	cpc	r24, r1
    2692:	91 05       	cpc	r25, r1
    2694:	09 f4       	brne	.+2      	; 0x2698 <dir_next+0x112>
    2696:	76 c0       	rjmp	.+236    	; 0x2784 <dir_next+0x1fe>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    2698:	8f ef       	ldi	r24, 0xFF	; 255
    269a:	c8 16       	cp	r12, r24
    269c:	8f ef       	ldi	r24, 0xFF	; 255
    269e:	d8 06       	cpc	r13, r24
    26a0:	8f ef       	ldi	r24, 0xFF	; 255
    26a2:	e8 06       	cpc	r14, r24
    26a4:	8f ef       	ldi	r24, 0xFF	; 255
    26a6:	f8 06       	cpc	r15, r24
    26a8:	09 f4       	brne	.+2      	; 0x26ac <dir_next+0x126>
    26aa:	6e c0       	rjmp	.+220    	; 0x2788 <dir_next+0x202>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    26ac:	88 81       	ld	r24, Y
    26ae:	99 81       	ldd	r25, Y+1	; 0x01
    26b0:	40 e0       	ldi	r20, 0x00	; 0
    26b2:	50 e0       	ldi	r21, 0x00	; 0
    26b4:	60 e0       	ldi	r22, 0x00	; 0
    26b6:	70 e0       	ldi	r23, 0x00	; 0
    26b8:	45 d8       	rcall	.-3958   	; 0x1744 <move_window>
    26ba:	88 23       	and	r24, r24
    26bc:	09 f0       	breq	.+2      	; 0x26c0 <dir_next+0x13a>
    26be:	64 c0       	rjmp	.+200    	; 0x2788 <dir_next+0x202>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    26c0:	88 81       	ld	r24, Y
    26c2:	99 81       	ldd	r25, Y+1	; 0x01
    26c4:	8e 96       	adiw	r24, 0x2e	; 46
    26c6:	60 e0       	ldi	r22, 0x00	; 0
    26c8:	70 e0       	ldi	r23, 0x00	; 0
    26ca:	40 e0       	ldi	r20, 0x00	; 0
    26cc:	52 e0       	ldi	r21, 0x02	; 2
    26ce:	0e 94 32 0b 	call	0x1664	; 0x1664 <mem_set>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    26d2:	08 81       	ld	r16, Y
    26d4:	19 81       	ldd	r17, Y+1	; 0x01
    26d6:	c8 01       	movw	r24, r16
    26d8:	b7 01       	movw	r22, r14
    26da:	a6 01       	movw	r20, r12
    26dc:	0e 94 3b 0b 	call	0x1676	; 0x1676 <clust2sect>
    26e0:	f8 01       	movw	r30, r16
    26e2:	62 a7       	std	Z+42, r22	; 0x2a
    26e4:	73 a7       	std	Z+43, r23	; 0x2b
    26e6:	84 a7       	std	Z+44, r24	; 0x2c
    26e8:	95 a7       	std	Z+45, r25	; 0x2d
    26ea:	00 e0       	ldi	r16, 0x00	; 0
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
    26ec:	11 e0       	ldi	r17, 0x01	; 1
    26ee:	19 c0       	rjmp	.+50     	; 0x2722 <dir_next+0x19c>
    26f0:	14 83       	std	Z+4, r17	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    26f2:	88 81       	ld	r24, Y
    26f4:	99 81       	ldd	r25, Y+1	; 0x01
    26f6:	40 e0       	ldi	r20, 0x00	; 0
    26f8:	50 e0       	ldi	r21, 0x00	; 0
    26fa:	60 e0       	ldi	r22, 0x00	; 0
    26fc:	70 e0       	ldi	r23, 0x00	; 0
    26fe:	22 d8       	rcall	.-4028   	; 0x1744 <move_window>
    2700:	88 23       	and	r24, r24
    2702:	09 f0       	breq	.+2      	; 0x2706 <dir_next+0x180>
    2704:	41 c0       	rjmp	.+130    	; 0x2788 <dir_next+0x202>
						dj->fs->winsect++;
    2706:	e8 81       	ld	r30, Y
    2708:	f9 81       	ldd	r31, Y+1	; 0x01
    270a:	82 a5       	ldd	r24, Z+42	; 0x2a
    270c:	93 a5       	ldd	r25, Z+43	; 0x2b
    270e:	a4 a5       	ldd	r26, Z+44	; 0x2c
    2710:	b5 a5       	ldd	r27, Z+45	; 0x2d
    2712:	01 96       	adiw	r24, 0x01	; 1
    2714:	a1 1d       	adc	r26, r1
    2716:	b1 1d       	adc	r27, r1
    2718:	82 a7       	std	Z+42, r24	; 0x2a
    271a:	93 a7       	std	Z+43, r25	; 0x2b
    271c:	a4 a7       	std	Z+44, r26	; 0x2c
    271e:	b5 a7       	std	Z+45, r27	; 0x2d
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    2720:	0f 5f       	subi	r16, 0xFF	; 255
    2722:	e8 81       	ld	r30, Y
    2724:	f9 81       	ldd	r31, Y+1	; 0x01
    2726:	82 81       	ldd	r24, Z+2	; 0x02
    2728:	08 17       	cp	r16, r24
    272a:	10 f3       	brcs	.-60     	; 0x26f0 <dir_next+0x16a>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    272c:	82 a5       	ldd	r24, Z+42	; 0x2a
    272e:	93 a5       	ldd	r25, Z+43	; 0x2b
    2730:	a4 a5       	ldd	r26, Z+44	; 0x2c
    2732:	b5 a5       	ldd	r27, Z+45	; 0x2d
    2734:	80 1b       	sub	r24, r16
    2736:	91 09       	sbc	r25, r1
    2738:	a1 09       	sbc	r26, r1
    273a:	b1 09       	sbc	r27, r1
    273c:	82 a7       	std	Z+42, r24	; 0x2a
    273e:	93 a7       	std	Z+43, r25	; 0x2b
    2740:	a4 a7       	std	Z+44, r26	; 0x2c
    2742:	b5 a7       	std	Z+45, r27	; 0x2d
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    2744:	ca 86       	std	Y+10, r12	; 0x0a
    2746:	db 86       	std	Y+11, r13	; 0x0b
    2748:	ec 86       	std	Y+12, r14	; 0x0c
    274a:	fd 86       	std	Y+13, r15	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    274c:	88 81       	ld	r24, Y
    274e:	99 81       	ldd	r25, Y+1	; 0x01
    2750:	b7 01       	movw	r22, r14
    2752:	a6 01       	movw	r20, r12
    2754:	0e 94 3b 0b 	call	0x1676	; 0x1676 <clust2sect>
    2758:	6e 87       	std	Y+14, r22	; 0x0e
    275a:	7f 87       	std	Y+15, r23	; 0x0f
    275c:	88 8b       	std	Y+16, r24	; 0x10
    275e:	99 8b       	std	Y+17, r25	; 0x11
			}
		}
	}

	dj->index = i;
    2760:	bd 82       	std	Y+5, r11	; 0x05
    2762:	ac 82       	std	Y+4, r10	; 0x04
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    2764:	88 81       	ld	r24, Y
    2766:	99 81       	ldd	r25, Y+1	; 0x01
    2768:	8e 96       	adiw	r24, 0x2e	; 46
    276a:	25 e0       	ldi	r18, 0x05	; 5
    276c:	88 0c       	add	r8, r8
    276e:	99 1c       	adc	r9, r9
    2770:	2a 95       	dec	r18
    2772:	e1 f7       	brne	.-8      	; 0x276c <dir_next+0x1e6>
    2774:	88 0d       	add	r24, r8
    2776:	99 1d       	adc	r25, r9
    2778:	9b 8b       	std	Y+19, r25	; 0x13
    277a:	8a 8b       	std	Y+18, r24	; 0x12
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	05 c0       	rjmp	.+10     	; 0x278a <dir_next+0x204>

	return FR_OK;
    2780:	84 e0       	ldi	r24, 0x04	; 4
    2782:	03 c0       	rjmp	.+6      	; 0x278a <dir_next+0x204>
    2784:	82 e0       	ldi	r24, 0x02	; 2
    2786:	01 c0       	rjmp	.+2      	; 0x278a <dir_next+0x204>
    2788:	81 e0       	ldi	r24, 0x01	; 1
}
    278a:	df 91       	pop	r29
    278c:	cf 91       	pop	r28
    278e:	1f 91       	pop	r17
    2790:	0f 91       	pop	r16
    2792:	ff 90       	pop	r15
    2794:	ef 90       	pop	r14
    2796:	df 90       	pop	r13
    2798:	cf 90       	pop	r12
    279a:	bf 90       	pop	r11
    279c:	af 90       	pop	r10
    279e:	9f 90       	pop	r9
    27a0:	8f 90       	pop	r8
    27a2:	08 95       	ret

000027a4 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT BR, 1:Valid BR but not an FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    27a4:	0f 93       	push	r16
    27a6:	cf 93       	push	r28
    27a8:	df 93       	push	r29
    27aa:	ec 01       	movw	r28, r24
    27ac:	9a 01       	movw	r18, r20
    27ae:	ab 01       	movw	r20, r22
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    27b0:	bc 01       	movw	r22, r24
    27b2:	62 5d       	subi	r22, 0xD2	; 210
    27b4:	7f 4f       	sbci	r23, 0xFF	; 255
    27b6:	89 81       	ldd	r24, Y+1	; 0x01
    27b8:	01 e0       	ldi	r16, 0x01	; 1
    27ba:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <disk_read>
    27be:	88 23       	and	r24, r24
    27c0:	11 f0       	breq	.+4      	; 0x27c6 <check_fs+0x22>
    27c2:	23 e0       	ldi	r18, 0x03	; 3
    27c4:	29 c0       	rjmp	.+82     	; 0x2818 <check_fs+0x74>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    27c6:	c4 5d       	subi	r28, 0xD4	; 212
    27c8:	dd 4f       	sbci	r29, 0xFD	; 253
    27ca:	88 81       	ld	r24, Y
    27cc:	99 81       	ldd	r25, Y+1	; 0x01
    27ce:	cc 52       	subi	r28, 0x2C	; 44
    27d0:	d2 40       	sbci	r29, 0x02	; 2
    27d2:	85 55       	subi	r24, 0x55	; 85
    27d4:	9a 4a       	sbci	r25, 0xAA	; 170
    27d6:	11 f0       	breq	.+4      	; 0x27dc <check_fs+0x38>
    27d8:	22 e0       	ldi	r18, 0x02	; 2
    27da:	1e c0       	rjmp	.+60     	; 0x2818 <check_fs+0x74>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    27dc:	cc 59       	subi	r28, 0x9C	; 156
    27de:	df 4f       	sbci	r29, 0xFF	; 255
    27e0:	88 81       	ld	r24, Y
    27e2:	99 81       	ldd	r25, Y+1	; 0x01
    27e4:	aa 81       	ldd	r26, Y+2	; 0x02
    27e6:	bb 81       	ldd	r27, Y+3	; 0x03
    27e8:	c4 56       	subi	r28, 0x64	; 100
    27ea:	d0 40       	sbci	r29, 0x00	; 0
    27ec:	b0 70       	andi	r27, 0x00	; 0
    27ee:	86 54       	subi	r24, 0x46	; 70
    27f0:	91 44       	sbci	r25, 0x41	; 65
    27f2:	a4 45       	sbci	r26, 0x54	; 84
    27f4:	b0 40       	sbci	r27, 0x00	; 0
    27f6:	11 f4       	brne	.+4      	; 0x27fc <check_fs+0x58>
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	0e c0       	rjmp	.+28     	; 0x2818 <check_fs+0x74>
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	c0 58       	subi	r28, 0x80	; 128
    2800:	df 4f       	sbci	r29, 0xFF	; 255
    2802:	88 81       	ld	r24, Y
    2804:	99 81       	ldd	r25, Y+1	; 0x01
    2806:	aa 81       	ldd	r26, Y+2	; 0x02
    2808:	bb 81       	ldd	r27, Y+3	; 0x03
    280a:	b0 70       	andi	r27, 0x00	; 0
    280c:	86 54       	subi	r24, 0x46	; 70
    280e:	91 44       	sbci	r25, 0x41	; 65
    2810:	a4 45       	sbci	r26, 0x54	; 84
    2812:	b0 40       	sbci	r27, 0x00	; 0
    2814:	09 f0       	breq	.+2      	; 0x2818 <check_fs+0x74>
    2816:	21 e0       	ldi	r18, 0x01	; 1
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
    2818:	82 2f       	mov	r24, r18
    281a:	df 91       	pop	r29
    281c:	cf 91       	pop	r28
    281e:	0f 91       	pop	r16
    2820:	08 95       	ret

00002822 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    2822:	0f 93       	push	r16
    2824:	1f 93       	push	r17
    2826:	cf 93       	push	r28
    2828:	df 93       	push	r29
    282a:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    282c:	6a 81       	ldd	r22, Y+2	; 0x02
    282e:	7b 81       	ldd	r23, Y+3	; 0x03
    2830:	88 81       	ld	r24, Y
    2832:	99 81       	ldd	r25, Y+1	; 0x01
    2834:	0e 94 8d 0b 	call	0x171a	; 0x171a <validate>
    2838:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    283a:	88 23       	and	r24, r24
    283c:	09 f0       	breq	.+2      	; 0x2840 <f_sync+0x1e>
    283e:	a3 c0       	rjmp	.+326    	; 0x2986 <f_sync+0x164>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    2840:	8c 81       	ldd	r24, Y+4	; 0x04
    2842:	85 ff       	sbrs	r24, 5
    2844:	a0 c0       	rjmp	.+320    	; 0x2986 <f_sync+0x164>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    2846:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2848:	5b 8d       	ldd	r21, Y+27	; 0x1b
    284a:	6c 8d       	ldd	r22, Y+28	; 0x1c
    284c:	7d 8d       	ldd	r23, Y+29	; 0x1d
    284e:	88 81       	ld	r24, Y
    2850:	99 81       	ldd	r25, Y+1	; 0x01
    2852:	0e 94 a2 0b 	call	0x1744	; 0x1744 <move_window>
    2856:	98 2f       	mov	r25, r24
			if (res == FR_OK) {
    2858:	88 23       	and	r24, r24
    285a:	09 f0       	breq	.+2      	; 0x285e <f_sync+0x3c>
    285c:	94 c0       	rjmp	.+296    	; 0x2986 <f_sync+0x164>
				dir = fp->dir_ptr;
    285e:	0e 8d       	ldd	r16, Y+30	; 0x1e
    2860:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    2862:	f8 01       	movw	r30, r16
    2864:	83 85       	ldd	r24, Z+11	; 0x0b
    2866:	80 62       	ori	r24, 0x20	; 32
    2868:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    286a:	8a 85       	ldd	r24, Y+10	; 0x0a
    286c:	9b 85       	ldd	r25, Y+11	; 0x0b
    286e:	ac 85       	ldd	r26, Y+12	; 0x0c
    2870:	bd 85       	ldd	r27, Y+13	; 0x0d
    2872:	84 8f       	std	Z+28, r24	; 0x1c
    2874:	95 8f       	std	Z+29, r25	; 0x1d
    2876:	a6 8f       	std	Z+30, r26	; 0x1e
    2878:	b7 8f       	std	Z+31, r27	; 0x1f
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    287a:	8e 85       	ldd	r24, Y+14	; 0x0e
    287c:	9f 85       	ldd	r25, Y+15	; 0x0f
    287e:	93 8f       	std	Z+27, r25	; 0x1b
    2880:	82 8f       	std	Z+26, r24	; 0x1a
    2882:	8e 85       	ldd	r24, Y+14	; 0x0e
    2884:	9f 85       	ldd	r25, Y+15	; 0x0f
    2886:	a8 89       	ldd	r26, Y+16	; 0x10
    2888:	b9 89       	ldd	r27, Y+17	; 0x11
    288a:	cd 01       	movw	r24, r26
    288c:	aa 27       	eor	r26, r26
    288e:	bb 27       	eor	r27, r27
    2890:	95 8b       	std	Z+21, r25	; 0x15
    2892:	84 8b       	std	Z+20, r24	; 0x14
				tim = get_fattime();						/* Update updated time */
    2894:	0e 94 8c 0a 	call	0x1518	; 0x1518 <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
    2898:	f8 01       	movw	r30, r16
    289a:	66 8b       	std	Z+22, r22	; 0x16
    289c:	77 8b       	std	Z+23, r23	; 0x17
    289e:	80 8f       	std	Z+24, r24	; 0x18
    28a0:	91 8f       	std	Z+25, r25	; 0x19
				fp->flag &= ~FA__WRITTEN;
    28a2:	8c 81       	ldd	r24, Y+4	; 0x04
    28a4:	8f 7d       	andi	r24, 0xDF	; 223
    28a6:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    28a8:	e8 81       	ld	r30, Y
    28aa:	f9 81       	ldd	r31, Y+1	; 0x01
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    28b0:	09 90       	ld	r0, Y+
    28b2:	d8 81       	ld	r29, Y
    28b4:	c0 2d       	mov	r28, r0
)
{
	FRESULT res;


	res = move_window(fs, 0);
    28b6:	ce 01       	movw	r24, r28
    28b8:	40 e0       	ldi	r20, 0x00	; 0
    28ba:	50 e0       	ldi	r21, 0x00	; 0
    28bc:	60 e0       	ldi	r22, 0x00	; 0
    28be:	70 e0       	ldi	r23, 0x00	; 0
    28c0:	0e 94 a2 0b 	call	0x1744	; 0x1744 <move_window>
    28c4:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    28c6:	88 23       	and	r24, r24
    28c8:	09 f0       	breq	.+2      	; 0x28cc <f_sync+0xaa>
    28ca:	5d c0       	rjmp	.+186    	; 0x2986 <f_sync+0x164>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    28cc:	88 81       	ld	r24, Y
    28ce:	83 30       	cpi	r24, 0x03	; 3
    28d0:	09 f0       	breq	.+2      	; 0x28d4 <f_sync+0xb2>
    28d2:	50 c0       	rjmp	.+160    	; 0x2974 <f_sync+0x152>
    28d4:	8d 81       	ldd	r24, Y+5	; 0x05
    28d6:	88 23       	and	r24, r24
    28d8:	09 f4       	brne	.+2      	; 0x28dc <f_sync+0xba>
    28da:	4c c0       	rjmp	.+152    	; 0x2974 <f_sync+0x152>
			fs->winsect = 0;
    28dc:	1a a6       	std	Y+42, r1	; 0x2a
    28de:	1b a6       	std	Y+43, r1	; 0x2b
    28e0:	1c a6       	std	Y+44, r1	; 0x2c
    28e2:	1d a6       	std	Y+45, r1	; 0x2d
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
    28e4:	8e 01       	movw	r16, r28
    28e6:	02 5d       	subi	r16, 0xD2	; 210
    28e8:	1f 4f       	sbci	r17, 0xFF	; 255
    28ea:	c8 01       	movw	r24, r16
    28ec:	60 e0       	ldi	r22, 0x00	; 0
    28ee:	70 e0       	ldi	r23, 0x00	; 0
    28f0:	40 e0       	ldi	r20, 0x00	; 0
    28f2:	52 e0       	ldi	r21, 0x02	; 2
    28f4:	0e 94 32 0b 	call	0x1664	; 0x1664 <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    28f8:	c4 5d       	subi	r28, 0xD4	; 212
    28fa:	dd 4f       	sbci	r29, 0xFD	; 253
    28fc:	85 e5       	ldi	r24, 0x55	; 85
    28fe:	9a ea       	ldi	r25, 0xAA	; 170
    2900:	99 83       	std	Y+1, r25	; 0x01
    2902:	88 83       	st	Y, r24
    2904:	cc 52       	subi	r28, 0x2C	; 44
    2906:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    2908:	82 e5       	ldi	r24, 0x52	; 82
    290a:	92 e5       	ldi	r25, 0x52	; 82
    290c:	a1 e6       	ldi	r26, 0x61	; 97
    290e:	b1 e4       	ldi	r27, 0x41	; 65
    2910:	8e a7       	std	Y+46, r24	; 0x2e
    2912:	9f a7       	std	Y+47, r25	; 0x2f
    2914:	a8 ab       	std	Y+48, r26	; 0x30
    2916:	b9 ab       	std	Y+49, r27	; 0x31
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    2918:	ce 5e       	subi	r28, 0xEE	; 238
    291a:	dd 4f       	sbci	r29, 0xFD	; 253
    291c:	82 e7       	ldi	r24, 0x72	; 114
    291e:	92 e7       	ldi	r25, 0x72	; 114
    2920:	a1 e4       	ldi	r26, 0x41	; 65
    2922:	b1 e6       	ldi	r27, 0x61	; 97
    2924:	88 83       	st	Y, r24
    2926:	99 83       	std	Y+1, r25	; 0x01
    2928:	aa 83       	std	Y+2, r26	; 0x02
    292a:	bb 83       	std	Y+3, r27	; 0x03
    292c:	c2 51       	subi	r28, 0x12	; 18
    292e:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    2930:	8e 85       	ldd	r24, Y+14	; 0x0e
    2932:	9f 85       	ldd	r25, Y+15	; 0x0f
    2934:	a8 89       	ldd	r26, Y+16	; 0x10
    2936:	b9 89       	ldd	r27, Y+17	; 0x11
    2938:	ca 5e       	subi	r28, 0xEA	; 234
    293a:	dd 4f       	sbci	r29, 0xFD	; 253
    293c:	88 83       	st	Y, r24
    293e:	99 83       	std	Y+1, r25	; 0x01
    2940:	aa 83       	std	Y+2, r26	; 0x02
    2942:	bb 83       	std	Y+3, r27	; 0x03
    2944:	c6 51       	subi	r28, 0x16	; 22
    2946:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    2948:	8a 85       	ldd	r24, Y+10	; 0x0a
    294a:	9b 85       	ldd	r25, Y+11	; 0x0b
    294c:	ac 85       	ldd	r26, Y+12	; 0x0c
    294e:	bd 85       	ldd	r27, Y+13	; 0x0d
    2950:	c6 5e       	subi	r28, 0xE6	; 230
    2952:	dd 4f       	sbci	r29, 0xFD	; 253
    2954:	88 83       	st	Y, r24
    2956:	99 83       	std	Y+1, r25	; 0x01
    2958:	aa 83       	std	Y+2, r26	; 0x02
    295a:	bb 83       	std	Y+3, r27	; 0x03
    295c:	ca 51       	subi	r28, 0x1A	; 26
    295e:	d2 40       	sbci	r29, 0x02	; 2
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    2960:	2a 89       	ldd	r18, Y+18	; 0x12
    2962:	3b 89       	ldd	r19, Y+19	; 0x13
    2964:	4c 89       	ldd	r20, Y+20	; 0x14
    2966:	5d 89       	ldd	r21, Y+21	; 0x15
    2968:	89 81       	ldd	r24, Y+1	; 0x01
    296a:	b8 01       	movw	r22, r16
    296c:	01 e0       	ldi	r16, 0x01	; 1
    296e:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <disk_write>
			fs->fsi_flag = 0;
    2972:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, (void*)0) != RES_OK)
    2974:	89 81       	ldd	r24, Y+1	; 0x01
    2976:	60 e0       	ldi	r22, 0x00	; 0
    2978:	40 e0       	ldi	r20, 0x00	; 0
    297a:	50 e0       	ldi	r21, 0x00	; 0
    297c:	0e 94 86 0a 	call	0x150c	; 0x150c <disk_ioctl>
    2980:	81 11       	cpse	r24, r1
    2982:	81 e0       	ldi	r24, 0x01	; 1
    2984:	98 2f       	mov	r25, r24
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    2986:	89 2f       	mov	r24, r25
    2988:	df 91       	pop	r29
    298a:	cf 91       	pop	r28
    298c:	1f 91       	pop	r17
    298e:	0f 91       	pop	r16
    2990:	08 95       	ret

00002992 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    2992:	cf 93       	push	r28
    2994:	df 93       	push	r29
    2996:	ec 01       	movw	r28, r24
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    2998:	44 df       	rcall	.-376    	; 0x2822 <f_sync>
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    299a:	88 23       	and	r24, r24
    299c:	11 f4       	brne	.+4      	; 0x29a2 <f_close+0x10>
    299e:	19 82       	std	Y+1, r1	; 0x01
    29a0:	18 82       	st	Y, r1
	return res;
#endif
}
    29a2:	df 91       	pop	r29
    29a4:	cf 91       	pop	r28
    29a6:	08 95       	ret

000029a8 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    29a8:	2f 92       	push	r2
    29aa:	3f 92       	push	r3
    29ac:	4f 92       	push	r4
    29ae:	5f 92       	push	r5
    29b0:	6f 92       	push	r6
    29b2:	7f 92       	push	r7
    29b4:	8f 92       	push	r8
    29b6:	9f 92       	push	r9
    29b8:	af 92       	push	r10
    29ba:	bf 92       	push	r11
    29bc:	cf 92       	push	r12
    29be:	df 92       	push	r13
    29c0:	ef 92       	push	r14
    29c2:	ff 92       	push	r15
    29c4:	0f 93       	push	r16
    29c6:	1f 93       	push	r17
    29c8:	df 93       	push	r29
    29ca:	cf 93       	push	r28
    29cc:	cd b7       	in	r28, 0x3d	; 61
    29ce:	de b7       	in	r29, 0x3e	; 62
    29d0:	e5 97       	sbiw	r28, 0x35	; 53
    29d2:	0f b6       	in	r0, 0x3f	; 63
    29d4:	f8 94       	cli
    29d6:	de bf       	out	0x3e, r29	; 62
    29d8:	0f be       	out	0x3f, r0	; 63
    29da:	cd bf       	out	0x3d, r28	; 61
    29dc:	9b ab       	std	Y+51, r25	; 0x33
    29de:	8a ab       	std	Y+50, r24	; 0x32
    29e0:	7d ab       	std	Y+53, r23	; 0x35
    29e2:	6c ab       	std	Y+52, r22	; 0x34
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    29e4:	dc 01       	movw	r26, r24
    29e6:	1d 92       	st	X+, r1
    29e8:	1c 92       	st	X, r1

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    29ea:	4f 71       	andi	r20, 0x1F	; 31
    29ec:	4b a7       	std	Y+43, r20	; 0x2b
	WORD nrsv;
	const TCHAR *p = *path;
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    29ee:	ec a9       	ldd	r30, Y+52	; 0x34
    29f0:	fd a9       	ldd	r31, Y+53	; 0x35
    29f2:	80 81       	ld	r24, Z
    29f4:	28 2f       	mov	r18, r24
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	20 53       	subi	r18, 0x30	; 48
    29fa:	30 40       	sbci	r19, 0x00	; 0
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    29fc:	2a 30       	cpi	r18, 0x0A	; 10
    29fe:	31 05       	cpc	r19, r1
    2a00:	58 f4       	brcc	.+22     	; 0x2a18 <f_open+0x70>
    2a02:	81 81       	ldd	r24, Z+1	; 0x01
    2a04:	8a 33       	cpi	r24, 0x3A	; 58
    2a06:	41 f4       	brne	.+16     	; 0x2a18 <f_open+0x70>
		p += 2; *path = p;				/* Return pointer to the path name */
    2a08:	32 96       	adiw	r30, 0x02	; 2
    2a0a:	fd ab       	std	Y+53, r31	; 0x35
    2a0c:	ec ab       	std	Y+52, r30	; 0x34
		vol = 0;						/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    2a0e:	23 2b       	or	r18, r19
    2a10:	19 f0       	breq	.+6      	; 0x2a18 <f_open+0x70>
    2a12:	5b e0       	ldi	r21, 0x0B	; 11
    2a14:	b5 2e       	mov	r11, r21
    2a16:	67 c2       	rjmp	.+1230   	; 0x2ee6 <f_open+0x53e>
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    2a18:	e0 90 22 04 	lds	r14, 0x0422
    2a1c:	f0 90 23 04 	lds	r15, 0x0423
    2a20:	fe 86       	std	Y+14, r15	; 0x0e
    2a22:	ed 86       	std	Y+13, r14	; 0x0d
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    2a24:	e1 14       	cp	r14, r1
    2a26:	f1 04       	cpc	r15, r1
    2a28:	19 f4       	brne	.+6      	; 0x2a30 <f_open+0x88>
    2a2a:	4c e0       	ldi	r20, 0x0C	; 12
    2a2c:	b4 2e       	mov	r11, r20
    2a2e:	5b c2       	rjmp	.+1206   	; 0x2ee6 <f_open+0x53e>

	fp->fs = 0;			/* Clear file object */

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    2a30:	1b a5       	ldd	r17, Y+43	; 0x2b
    2a32:	1e 7f       	andi	r17, 0xFE	; 254
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
    2a34:	d7 01       	movw	r26, r14
    2a36:	8c 91       	ld	r24, X
    2a38:	88 23       	and	r24, r24
    2a3a:	61 f0       	breq	.+24     	; 0x2a54 <f_open+0xac>
		stat = disk_status(fs->drv);
    2a3c:	11 96       	adiw	r26, 0x01	; 1
    2a3e:	8c 91       	ld	r24, X
    2a40:	0e 94 84 0a 	call	0x1508	; 0x1508 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    2a44:	80 fd       	sbrc	r24, 0
    2a46:	06 c0       	rjmp	.+12     	; 0x2a54 <f_open+0xac>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    2a48:	11 23       	and	r17, r17
    2a4a:	09 f4       	brne	.+2      	; 0x2a4e <f_open+0xa6>
    2a4c:	48 c2       	rjmp	.+1168   	; 0x2ede <f_open+0x536>
    2a4e:	82 fd       	sbrc	r24, 2
    2a50:	43 c2       	rjmp	.+1158   	; 0x2ed8 <f_open+0x530>
    2a52:	45 c2       	rjmp	.+1162   	; 0x2ede <f_open+0x536>
	}

	/* The logical drive must be mounted. */
	/* Following code attempts to mount a volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    2a54:	f7 01       	movw	r30, r14
    2a56:	10 82       	st	Z, r1
	fs->drv = (BYTE)LD2PD(vol);			/* Bind the logical drive and a physical drive */
    2a58:	11 82       	std	Z+1, r1	; 0x01
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    2a5a:	80 e0       	ldi	r24, 0x00	; 0
    2a5c:	0e 94 82 0a 	call	0x1504	; 0x1504 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    2a60:	80 ff       	sbrs	r24, 0
    2a62:	03 c0       	rjmp	.+6      	; 0x2a6a <f_open+0xc2>
    2a64:	33 e0       	ldi	r19, 0x03	; 3
    2a66:	b3 2e       	mov	r11, r19
    2a68:	3e c2       	rjmp	.+1148   	; 0x2ee6 <f_open+0x53e>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    2a6a:	11 23       	and	r17, r17
    2a6c:	11 f0       	breq	.+4      	; 0x2a72 <f_open+0xca>
    2a6e:	82 fd       	sbrc	r24, 2
    2a70:	33 c2       	rjmp	.+1126   	; 0x2ed8 <f_open+0x530>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 if it is a VBR */
    2a72:	c7 01       	movw	r24, r14
    2a74:	40 e0       	ldi	r20, 0x00	; 0
    2a76:	50 e0       	ldi	r21, 0x00	; 0
    2a78:	60 e0       	ldi	r22, 0x00	; 0
    2a7a:	70 e0       	ldi	r23, 0x00	; 0
    2a7c:	93 de       	rcall	.-730    	; 0x27a4 <check_fs>
	if (fmt == 1) {						/* Not an FAT-VBR, the disk may be partitioned */
    2a7e:	81 30       	cpi	r24, 0x01	; 1
    2a80:	29 f0       	breq	.+10     	; 0x2a8c <f_open+0xe4>
    2a82:	1c a6       	std	Y+44, r1	; 0x2c
    2a84:	1d a6       	std	Y+45, r1	; 0x2d
    2a86:	1e a6       	std	Y+46, r1	; 0x2e
    2a88:	1f a6       	std	Y+47, r1	; 0x2f
    2a8a:	13 c0       	rjmp	.+38     	; 0x2ab2 <f_open+0x10a>
		/* Check the partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * SZ_PTE];/* Partition table */
    2a8c:	f7 01       	movw	r30, r14
    2a8e:	e4 51       	subi	r30, 0x14	; 20
    2a90:	fe 4f       	sbci	r31, 0xFE	; 254
		if (tbl[4]) {									/* Is the partition existing? */
    2a92:	84 81       	ldd	r24, Z+4	; 0x04
    2a94:	88 23       	and	r24, r24
    2a96:	09 f4       	brne	.+2      	; 0x2a9a <f_open+0xf2>
    2a98:	24 c2       	rjmp	.+1096   	; 0x2ee2 <f_open+0x53a>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
    2a9a:	20 85       	ldd	r18, Z+8	; 0x08
    2a9c:	31 85       	ldd	r19, Z+9	; 0x09
    2a9e:	42 85       	ldd	r20, Z+10	; 0x0a
    2aa0:	53 85       	ldd	r21, Z+11	; 0x0b
    2aa2:	2c a7       	std	Y+44, r18	; 0x2c
    2aa4:	3d a7       	std	Y+45, r19	; 0x2d
    2aa6:	4e a7       	std	Y+46, r20	; 0x2e
    2aa8:	5f a7       	std	Y+47, r21	; 0x2f
			fmt = check_fs(fs, bsect);					/* Check the partition */
    2aaa:	c7 01       	movw	r24, r14
    2aac:	ba 01       	movw	r22, r20
    2aae:	a9 01       	movw	r20, r18
    2ab0:	79 de       	rcall	.-782    	; 0x27a4 <check_fs>
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    2ab2:	83 30       	cpi	r24, 0x03	; 3
    2ab4:	19 f4       	brne	.+6      	; 0x2abc <f_open+0x114>
    2ab6:	bb 24       	eor	r11, r11
    2ab8:	b3 94       	inc	r11
    2aba:	15 c2       	rjmp	.+1066   	; 0x2ee6 <f_open+0x53e>
	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
    2abc:	88 23       	and	r24, r24
    2abe:	09 f0       	breq	.+2      	; 0x2ac2 <f_open+0x11a>
    2ac0:	10 c2       	rjmp	.+1056   	; 0x2ee2 <f_open+0x53a>

	/* Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    2ac2:	d7 01       	movw	r26, r14
    2ac4:	d9 96       	adiw	r26, 0x39	; 57
    2ac6:	8d 91       	ld	r24, X+
    2ac8:	9c 91       	ld	r25, X
    2aca:	da 97       	sbiw	r26, 0x3a	; 58
    2acc:	80 50       	subi	r24, 0x00	; 0
    2ace:	92 40       	sbci	r25, 0x02	; 2
    2ad0:	09 f0       	breq	.+2      	; 0x2ad4 <f_open+0x12c>
    2ad2:	07 c2       	rjmp	.+1038   	; 0x2ee2 <f_open+0x53a>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    2ad4:	e4 e4       	ldi	r30, 0x44	; 68
    2ad6:	f0 e0       	ldi	r31, 0x00	; 0
    2ad8:	ee 0e       	add	r14, r30
    2ada:	ff 1e       	adc	r15, r31
    2adc:	d7 01       	movw	r26, r14
    2ade:	8d 91       	ld	r24, X+
    2ae0:	9c 91       	ld	r25, X
    2ae2:	ec eb       	ldi	r30, 0xBC	; 188
    2ae4:	ff ef       	ldi	r31, 0xFF	; 255
    2ae6:	ee 0e       	add	r14, r30
    2ae8:	ff 1e       	adc	r15, r31
    2aea:	3c 01       	movw	r6, r24
    2aec:	88 24       	eor	r8, r8
    2aee:	99 24       	eor	r9, r9
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    2af0:	61 14       	cp	r6, r1
    2af2:	71 04       	cpc	r7, r1
    2af4:	81 04       	cpc	r8, r1
    2af6:	91 04       	cpc	r9, r1
    2af8:	69 f4       	brne	.+26     	; 0x2b14 <f_open+0x16c>
    2afa:	22 e5       	ldi	r18, 0x52	; 82
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	e2 0e       	add	r14, r18
    2b00:	f3 1e       	adc	r15, r19
    2b02:	d7 01       	movw	r26, r14
    2b04:	6d 90       	ld	r6, X+
    2b06:	7d 90       	ld	r7, X+
    2b08:	8d 90       	ld	r8, X+
    2b0a:	9c 90       	ld	r9, X
    2b0c:	ee ea       	ldi	r30, 0xAE	; 174
    2b0e:	ff ef       	ldi	r31, 0xFF	; 255
    2b10:	ee 0e       	add	r14, r30
    2b12:	ff 1e       	adc	r15, r31
	fs->fsize = fasize;
    2b14:	d7 01       	movw	r26, r14
    2b16:	5a 96       	adiw	r26, 0x1a	; 26
    2b18:	6d 92       	st	X+, r6
    2b1a:	7d 92       	st	X+, r7
    2b1c:	8d 92       	st	X+, r8
    2b1e:	9c 92       	st	X, r9
    2b20:	5d 97       	sbiw	r26, 0x1d	; 29

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    2b22:	de 96       	adiw	r26, 0x3e	; 62
    2b24:	4c 91       	ld	r20, X
    2b26:	de 97       	sbiw	r26, 0x3e	; 62
    2b28:	13 96       	adiw	r26, 0x03	; 3
    2b2a:	4c 93       	st	X, r20
    2b2c:	13 97       	sbiw	r26, 0x03	; 3
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    2b2e:	84 2f       	mov	r24, r20
    2b30:	81 50       	subi	r24, 0x01	; 1
    2b32:	82 30       	cpi	r24, 0x02	; 2
    2b34:	08 f0       	brcs	.+2      	; 0x2b38 <f_open+0x190>
    2b36:	d5 c1       	rjmp	.+938    	; 0x2ee2 <f_open+0x53a>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    2b38:	db 96       	adiw	r26, 0x3b	; 59
    2b3a:	2c 91       	ld	r18, X
    2b3c:	db 97       	sbiw	r26, 0x3b	; 59
    2b3e:	12 96       	adiw	r26, 0x02	; 2
    2b40:	2c 93       	st	X, r18
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    2b42:	22 23       	and	r18, r18
    2b44:	09 f4       	brne	.+2      	; 0x2b48 <f_open+0x1a0>
    2b46:	cd c1       	rjmp	.+922    	; 0x2ee2 <f_open+0x53a>
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	c9 01       	movw	r24, r18
    2b4c:	01 97       	sbiw	r24, 0x01	; 1
    2b4e:	82 23       	and	r24, r18
    2b50:	93 23       	and	r25, r19
    2b52:	89 2b       	or	r24, r25
    2b54:	09 f0       	breq	.+2      	; 0x2b58 <f_open+0x1b0>
    2b56:	c5 c1       	rjmp	.+906    	; 0x2ee2 <f_open+0x53a>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    2b58:	ef e3       	ldi	r30, 0x3F	; 63
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	ee 0e       	add	r14, r30
    2b5e:	ff 1e       	adc	r15, r31
    2b60:	d7 01       	movw	r26, r14
    2b62:	0d 91       	ld	r16, X+
    2b64:	1c 91       	ld	r17, X
    2b66:	e1 ec       	ldi	r30, 0xC1	; 193
    2b68:	ff ef       	ldi	r31, 0xFF	; 255
    2b6a:	ee 0e       	add	r14, r30
    2b6c:	ff 1e       	adc	r15, r31
    2b6e:	d7 01       	movw	r26, r14
    2b70:	19 96       	adiw	r26, 0x09	; 9
    2b72:	1c 93       	st	X, r17
    2b74:	0e 93       	st	-X, r16
    2b76:	18 97       	sbiw	r26, 0x08	; 8
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    2b78:	c8 01       	movw	r24, r16
    2b7a:	8f 70       	andi	r24, 0x0F	; 15
    2b7c:	90 70       	andi	r25, 0x00	; 0
    2b7e:	89 2b       	or	r24, r25
    2b80:	09 f0       	breq	.+2      	; 0x2b84 <f_open+0x1dc>
    2b82:	af c1       	rjmp	.+862    	; 0x2ee2 <f_open+0x53a>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    2b84:	e1 e4       	ldi	r30, 0x41	; 65
    2b86:	f0 e0       	ldi	r31, 0x00	; 0
    2b88:	ee 0e       	add	r14, r30
    2b8a:	ff 1e       	adc	r15, r31
    2b8c:	d7 01       	movw	r26, r14
    2b8e:	8d 91       	ld	r24, X+
    2b90:	9c 91       	ld	r25, X
    2b92:	ef eb       	ldi	r30, 0xBF	; 191
    2b94:	ff ef       	ldi	r31, 0xFF	; 255
    2b96:	ee 0e       	add	r14, r30
    2b98:	ff 1e       	adc	r15, r31
    2b9a:	5c 01       	movw	r10, r24
    2b9c:	cc 24       	eor	r12, r12
    2b9e:	dd 24       	eor	r13, r13
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    2ba0:	a1 14       	cp	r10, r1
    2ba2:	b1 04       	cpc	r11, r1
    2ba4:	c1 04       	cpc	r12, r1
    2ba6:	d1 04       	cpc	r13, r1
    2ba8:	69 f4       	brne	.+26     	; 0x2bc4 <f_open+0x21c>
    2baa:	2e e4       	ldi	r18, 0x4E	; 78
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	e2 0e       	add	r14, r18
    2bb0:	f3 1e       	adc	r15, r19
    2bb2:	d7 01       	movw	r26, r14
    2bb4:	ad 90       	ld	r10, X+
    2bb6:	bd 90       	ld	r11, X+
    2bb8:	cd 90       	ld	r12, X+
    2bba:	dc 90       	ld	r13, X
    2bbc:	e2 eb       	ldi	r30, 0xB2	; 178
    2bbe:	ff ef       	ldi	r31, 0xFF	; 255
    2bc0:	ee 0e       	add	r14, r30
    2bc2:	ff 1e       	adc	r15, r31

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    2bc4:	d7 01       	movw	r26, r14
    2bc6:	dc 96       	adiw	r26, 0x3c	; 60
    2bc8:	4d 90       	ld	r4, X+
    2bca:	5c 90       	ld	r5, X
    2bcc:	dd 97       	sbiw	r26, 0x3d	; 61
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    2bce:	41 14       	cp	r4, r1
    2bd0:	51 04       	cpc	r5, r1
    2bd2:	09 f4       	brne	.+2      	; 0x2bd6 <f_open+0x22e>
    2bd4:	86 c1       	rjmp	.+780    	; 0x2ee2 <f_open+0x53a>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
    2bd6:	24 2f       	mov	r18, r20
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	40 e0       	ldi	r20, 0x00	; 0
    2bdc:	50 e0       	ldi	r21, 0x00	; 0
    2bde:	c4 01       	movw	r24, r8
    2be0:	b3 01       	movw	r22, r6
    2be2:	0e 94 13 25 	call	0x4a26	; 0x4a26 <__mulsi3>
    2be6:	6b a3       	std	Y+35, r22	; 0x23
    2be8:	7c a3       	std	Y+36, r23	; 0x24
    2bea:	8d a3       	std	Y+37, r24	; 0x25
    2bec:	9e a3       	std	Y+38, r25	; 0x26

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    2bee:	12 01       	movw	r2, r4
    2bf0:	44 24       	eor	r4, r4
    2bf2:	55 24       	eor	r5, r5
    2bf4:	24 e0       	ldi	r18, 0x04	; 4
    2bf6:	16 95       	lsr	r17
    2bf8:	07 95       	ror	r16
    2bfa:	2a 95       	dec	r18
    2bfc:	e1 f7       	brne	.-8      	; 0x2bf6 <f_open+0x24e>
    2bfe:	38 01       	movw	r6, r16
    2c00:	88 24       	eor	r8, r8
    2c02:	99 24       	eor	r9, r9
    2c04:	62 0c       	add	r6, r2
    2c06:	73 1c       	adc	r7, r3
    2c08:	84 1c       	adc	r8, r4
    2c0a:	95 1c       	adc	r9, r5
    2c0c:	66 0e       	add	r6, r22
    2c0e:	77 1e       	adc	r7, r23
    2c10:	88 1e       	adc	r8, r24
    2c12:	99 1e       	adc	r9, r25
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    2c14:	a6 14       	cp	r10, r6
    2c16:	b7 04       	cpc	r11, r7
    2c18:	c8 04       	cpc	r12, r8
    2c1a:	d9 04       	cpc	r13, r9
    2c1c:	08 f4       	brcc	.+2      	; 0x2c20 <f_open+0x278>
    2c1e:	61 c1       	rjmp	.+706    	; 0x2ee2 <f_open+0x53a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    2c20:	a6 18       	sub	r10, r6
    2c22:	b7 08       	sbc	r11, r7
    2c24:	c8 08       	sbc	r12, r8
    2c26:	d9 08       	sbc	r13, r9
    2c28:	f7 01       	movw	r30, r14
    2c2a:	22 81       	ldd	r18, Z+2	; 0x02
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	40 e0       	ldi	r20, 0x00	; 0
    2c30:	50 e0       	ldi	r21, 0x00	; 0
    2c32:	c6 01       	movw	r24, r12
    2c34:	b5 01       	movw	r22, r10
    2c36:	0e 94 3e 25 	call	0x4a7c	; 0x4a7c <__udivmodsi4>
    2c3a:	c9 01       	movw	r24, r18
    2c3c:	da 01       	movw	r26, r20
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    2c3e:	00 97       	sbiw	r24, 0x00	; 0
    2c40:	a1 05       	cpc	r26, r1
    2c42:	b1 05       	cpc	r27, r1
    2c44:	09 f4       	brne	.+2      	; 0x2c48 <f_open+0x2a0>
    2c46:	4d c1       	rjmp	.+666    	; 0x2ee2 <f_open+0x53a>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    2c48:	86 3f       	cpi	r24, 0xF6	; 246
    2c4a:	ff e0       	ldi	r31, 0x0F	; 15
    2c4c:	9f 07       	cpc	r25, r31
    2c4e:	f0 e0       	ldi	r31, 0x00	; 0
    2c50:	af 07       	cpc	r26, r31
    2c52:	f0 e0       	ldi	r31, 0x00	; 0
    2c54:	bf 07       	cpc	r27, r31
    2c56:	10 f4       	brcc	.+4      	; 0x2c5c <f_open+0x2b4>
    2c58:	11 e0       	ldi	r17, 0x01	; 1
    2c5a:	0b c0       	rjmp	.+22     	; 0x2c72 <f_open+0x2ca>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    2c5c:	86 3f       	cpi	r24, 0xF6	; 246
    2c5e:	2f ef       	ldi	r18, 0xFF	; 255
    2c60:	92 07       	cpc	r25, r18
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	a2 07       	cpc	r26, r18
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	b2 07       	cpc	r27, r18
    2c6a:	10 f0       	brcs	.+4      	; 0x2c70 <f_open+0x2c8>
    2c6c:	13 e0       	ldi	r17, 0x03	; 3
    2c6e:	01 c0       	rjmp	.+2      	; 0x2c72 <f_open+0x2ca>
    2c70:	12 e0       	ldi	r17, 0x02	; 2

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    2c72:	02 e0       	ldi	r16, 0x02	; 2
    2c74:	a0 2e       	mov	r10, r16
    2c76:	b1 2c       	mov	r11, r1
    2c78:	c1 2c       	mov	r12, r1
    2c7a:	d1 2c       	mov	r13, r1
    2c7c:	a8 0e       	add	r10, r24
    2c7e:	b9 1e       	adc	r11, r25
    2c80:	ca 1e       	adc	r12, r26
    2c82:	db 1e       	adc	r13, r27
    2c84:	d7 01       	movw	r26, r14
    2c86:	56 96       	adiw	r26, 0x16	; 22
    2c88:	ad 92       	st	X+, r10
    2c8a:	bd 92       	st	X+, r11
    2c8c:	cd 92       	st	X+, r12
    2c8e:	dc 92       	st	X, r13
    2c90:	59 97       	sbiw	r26, 0x19	; 25
	fs->database = bsect + sysect;						/* Data start sector */
    2c92:	2c a5       	ldd	r18, Y+44	; 0x2c
    2c94:	3d a5       	ldd	r19, Y+45	; 0x2d
    2c96:	4e a5       	ldd	r20, Y+46	; 0x2e
    2c98:	5f a5       	ldd	r21, Y+47	; 0x2f
    2c9a:	62 0e       	add	r6, r18
    2c9c:	73 1e       	adc	r7, r19
    2c9e:	84 1e       	adc	r8, r20
    2ca0:	95 1e       	adc	r9, r21
    2ca2:	96 96       	adiw	r26, 0x26	; 38
    2ca4:	6d 92       	st	X+, r6
    2ca6:	7d 92       	st	X+, r7
    2ca8:	8d 92       	st	X+, r8
    2caa:	9c 92       	st	X, r9
    2cac:	99 97       	sbiw	r26, 0x29	; 41
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    2cae:	da 01       	movw	r26, r20
    2cb0:	c9 01       	movw	r24, r18
    2cb2:	82 0d       	add	r24, r2
    2cb4:	93 1d       	adc	r25, r3
    2cb6:	a4 1d       	adc	r26, r4
    2cb8:	b5 1d       	adc	r27, r5
    2cba:	f7 01       	movw	r30, r14
    2cbc:	86 8f       	std	Z+30, r24	; 0x1e
    2cbe:	97 8f       	std	Z+31, r25	; 0x1f
    2cc0:	a0 a3       	std	Z+32, r26	; 0x20
    2cc2:	b1 a3       	std	Z+33, r27	; 0x21
    2cc4:	20 85       	ldd	r18, Z+8	; 0x08
    2cc6:	31 85       	ldd	r19, Z+9	; 0x09
	if (fmt == FS_FAT32) {
    2cc8:	13 30       	cpi	r17, 0x03	; 3
    2cca:	f9 f4       	brne	.+62     	; 0x2d0a <f_open+0x362>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    2ccc:	23 2b       	or	r18, r19
    2cce:	09 f0       	breq	.+2      	; 0x2cd2 <f_open+0x32a>
    2cd0:	08 c1       	rjmp	.+528    	; 0x2ee2 <f_open+0x53a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    2cd2:	2a e5       	ldi	r18, 0x5A	; 90
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	e2 0e       	add	r14, r18
    2cd8:	f3 1e       	adc	r15, r19
    2cda:	f7 01       	movw	r30, r14
    2cdc:	80 81       	ld	r24, Z
    2cde:	91 81       	ldd	r25, Z+1	; 0x01
    2ce0:	a2 81       	ldd	r26, Z+2	; 0x02
    2ce2:	b3 81       	ldd	r27, Z+3	; 0x03
    2ce4:	26 ea       	ldi	r18, 0xA6	; 166
    2ce6:	3f ef       	ldi	r19, 0xFF	; 255
    2ce8:	e2 0e       	add	r14, r18
    2cea:	f3 1e       	adc	r15, r19
    2cec:	f7 01       	movw	r30, r14
    2cee:	82 a3       	std	Z+34, r24	; 0x22
    2cf0:	93 a3       	std	Z+35, r25	; 0x23
    2cf2:	a4 a3       	std	Z+36, r26	; 0x24
    2cf4:	b5 a3       	std	Z+37, r27	; 0x25
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    2cf6:	a6 01       	movw	r20, r12
    2cf8:	95 01       	movw	r18, r10
    2cfa:	f2 e0       	ldi	r31, 0x02	; 2
    2cfc:	22 0f       	add	r18, r18
    2cfe:	33 1f       	adc	r19, r19
    2d00:	44 1f       	adc	r20, r20
    2d02:	55 1f       	adc	r21, r21
    2d04:	fa 95       	dec	r31
    2d06:	d1 f7       	brne	.-12     	; 0x2cfc <f_open+0x354>
    2d08:	31 c0       	rjmp	.+98     	; 0x2d6c <f_open+0x3c4>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    2d0a:	23 2b       	or	r18, r19
    2d0c:	09 f4       	brne	.+2      	; 0x2d10 <f_open+0x368>
    2d0e:	e9 c0       	rjmp	.+466    	; 0x2ee2 <f_open+0x53a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    2d10:	2b a1       	ldd	r18, Y+35	; 0x23
    2d12:	3c a1       	ldd	r19, Y+36	; 0x24
    2d14:	4d a1       	ldd	r20, Y+37	; 0x25
    2d16:	5e a1       	ldd	r21, Y+38	; 0x26
    2d18:	82 0f       	add	r24, r18
    2d1a:	93 1f       	adc	r25, r19
    2d1c:	a4 1f       	adc	r26, r20
    2d1e:	b5 1f       	adc	r27, r21
    2d20:	f7 01       	movw	r30, r14
    2d22:	82 a3       	std	Z+34, r24	; 0x22
    2d24:	93 a3       	std	Z+35, r25	; 0x23
    2d26:	a4 a3       	std	Z+36, r26	; 0x24
    2d28:	b5 a3       	std	Z+37, r27	; 0x25
    2d2a:	d6 01       	movw	r26, r12
    2d2c:	c5 01       	movw	r24, r10
    2d2e:	88 0f       	add	r24, r24
    2d30:	99 1f       	adc	r25, r25
    2d32:	aa 1f       	adc	r26, r26
    2d34:	bb 1f       	adc	r27, r27
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
    2d36:	12 30       	cpi	r17, 0x02	; 2
    2d38:	19 f4       	brne	.+6      	; 0x2d40 <f_open+0x398>
    2d3a:	9c 01       	movw	r18, r24
    2d3c:	ad 01       	movw	r20, r26
    2d3e:	16 c0       	rjmp	.+44     	; 0x2d6c <f_open+0x3c4>
    2d40:	9c 01       	movw	r18, r24
    2d42:	ad 01       	movw	r20, r26
    2d44:	2a 0d       	add	r18, r10
    2d46:	3b 1d       	adc	r19, r11
    2d48:	4c 1d       	adc	r20, r12
    2d4a:	5d 1d       	adc	r21, r13
    2d4c:	56 95       	lsr	r21
    2d4e:	47 95       	ror	r20
    2d50:	37 95       	ror	r19
    2d52:	27 95       	ror	r18
    2d54:	81 e0       	ldi	r24, 0x01	; 1
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	a0 e0       	ldi	r26, 0x00	; 0
    2d5a:	b0 e0       	ldi	r27, 0x00	; 0
    2d5c:	a8 22       	and	r10, r24
    2d5e:	b9 22       	and	r11, r25
    2d60:	ca 22       	and	r12, r26
    2d62:	db 22       	and	r13, r27
    2d64:	2a 0d       	add	r18, r10
    2d66:	3b 1d       	adc	r19, r11
    2d68:	4c 1d       	adc	r20, r12
    2d6a:	5d 1d       	adc	r21, r13
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    2d6c:	21 50       	subi	r18, 0x01	; 1
    2d6e:	3e 4f       	sbci	r19, 0xFE	; 254
    2d70:	4f 4f       	sbci	r20, 0xFF	; 255
    2d72:	5f 4f       	sbci	r21, 0xFF	; 255
    2d74:	69 e0       	ldi	r22, 0x09	; 9
    2d76:	56 95       	lsr	r21
    2d78:	47 95       	ror	r20
    2d7a:	37 95       	ror	r19
    2d7c:	27 95       	ror	r18
    2d7e:	6a 95       	dec	r22
    2d80:	d1 f7       	brne	.-12     	; 0x2d76 <f_open+0x3ce>
    2d82:	f7 01       	movw	r30, r14
    2d84:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d86:	93 8d       	ldd	r25, Z+27	; 0x1b
    2d88:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2d8a:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2d8c:	82 17       	cp	r24, r18
    2d8e:	93 07       	cpc	r25, r19
    2d90:	a4 07       	cpc	r26, r20
    2d92:	b5 07       	cpc	r27, r21
    2d94:	08 f4       	brcc	.+2      	; 0x2d98 <f_open+0x3f0>
    2d96:	a5 c0       	rjmp	.+330    	; 0x2ee2 <f_open+0x53a>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    2d98:	8f ef       	ldi	r24, 0xFF	; 255
    2d9a:	9f ef       	ldi	r25, 0xFF	; 255
    2d9c:	af ef       	ldi	r26, 0xFF	; 255
    2d9e:	bf ef       	ldi	r27, 0xFF	; 255
    2da0:	86 87       	std	Z+14, r24	; 0x0e
    2da2:	97 87       	std	Z+15, r25	; 0x0f
    2da4:	a0 8b       	std	Z+16, r26	; 0x10
    2da6:	b1 8b       	std	Z+17, r27	; 0x11
	fs->last_clust = 0;
    2da8:	d7 01       	movw	r26, r14
    2daa:	1a 96       	adiw	r26, 0x0a	; 10
    2dac:	1d 92       	st	X+, r1
    2dae:	1d 92       	st	X+, r1
    2db0:	1d 92       	st	X+, r1
    2db2:	1c 92       	st	X, r1
    2db4:	1d 97       	sbiw	r26, 0x0d	; 13

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    2db6:	13 30       	cpi	r17, 0x03	; 3
    2db8:	09 f0       	breq	.+2      	; 0x2dbc <f_open+0x414>
    2dba:	78 c0       	rjmp	.+240    	; 0x2eac <f_open+0x504>
	 	fs->fsi_flag = 0;
    2dbc:	15 96       	adiw	r26, 0x05	; 5
    2dbe:	1c 92       	st	X, r1
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    2dc0:	ee e5       	ldi	r30, 0x5E	; 94
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	ee 0e       	add	r14, r30
    2dc6:	ff 1e       	adc	r15, r31
    2dc8:	d7 01       	movw	r26, r14
    2dca:	2d 91       	ld	r18, X+
    2dcc:	3c 91       	ld	r19, X
    2dce:	e2 ea       	ldi	r30, 0xA2	; 162
    2dd0:	ff ef       	ldi	r31, 0xFF	; 255
    2dd2:	ee 0e       	add	r14, r30
    2dd4:	ff 1e       	adc	r15, r31
    2dd6:	40 e0       	ldi	r20, 0x00	; 0
    2dd8:	50 e0       	ldi	r21, 0x00	; 0
    2dda:	8c a5       	ldd	r24, Y+44	; 0x2c
    2ddc:	9d a5       	ldd	r25, Y+45	; 0x2d
    2dde:	ae a5       	ldd	r26, Y+46	; 0x2e
    2de0:	bf a5       	ldd	r27, Y+47	; 0x2f
    2de2:	28 0f       	add	r18, r24
    2de4:	39 1f       	adc	r19, r25
    2de6:	4a 1f       	adc	r20, r26
    2de8:	5b 1f       	adc	r21, r27
    2dea:	d7 01       	movw	r26, r14
    2dec:	52 96       	adiw	r26, 0x12	; 18
    2dee:	2d 93       	st	X+, r18
    2df0:	3d 93       	st	X+, r19
    2df2:	4d 93       	st	X+, r20
    2df4:	5c 93       	st	X, r21
    2df6:	55 97       	sbiw	r26, 0x15	; 21
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    2df8:	b7 01       	movw	r22, r14
    2dfa:	62 5d       	subi	r22, 0xD2	; 210
    2dfc:	7f 4f       	sbci	r23, 0xFF	; 255
    2dfe:	11 96       	adiw	r26, 0x01	; 1
    2e00:	8c 91       	ld	r24, X
    2e02:	01 e0       	ldi	r16, 0x01	; 1
    2e04:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <disk_read>
    2e08:	88 23       	and	r24, r24
    2e0a:	09 f0       	breq	.+2      	; 0x2e0e <f_open+0x466>
    2e0c:	4f c0       	rjmp	.+158    	; 0x2eac <f_open+0x504>
    2e0e:	ec e2       	ldi	r30, 0x2C	; 44
    2e10:	f2 e0       	ldi	r31, 0x02	; 2
    2e12:	ee 0e       	add	r14, r30
    2e14:	ff 1e       	adc	r15, r31
    2e16:	d7 01       	movw	r26, r14
    2e18:	8d 91       	ld	r24, X+
    2e1a:	9c 91       	ld	r25, X
    2e1c:	e4 ed       	ldi	r30, 0xD4	; 212
    2e1e:	fd ef       	ldi	r31, 0xFD	; 253
    2e20:	ee 0e       	add	r14, r30
    2e22:	ff 1e       	adc	r15, r31
    2e24:	85 55       	subi	r24, 0x55	; 85
    2e26:	9a 4a       	sbci	r25, 0xAA	; 170
    2e28:	09 f0       	breq	.+2      	; 0x2e2c <f_open+0x484>
    2e2a:	40 c0       	rjmp	.+128    	; 0x2eac <f_open+0x504>
    2e2c:	f7 01       	movw	r30, r14
    2e2e:	86 a5       	ldd	r24, Z+46	; 0x2e
    2e30:	97 a5       	ldd	r25, Z+47	; 0x2f
    2e32:	a0 a9       	ldd	r26, Z+48	; 0x30
    2e34:	b1 a9       	ldd	r27, Z+49	; 0x31
    2e36:	82 55       	subi	r24, 0x52	; 82
    2e38:	92 45       	sbci	r25, 0x52	; 82
    2e3a:	a1 46       	sbci	r26, 0x61	; 97
    2e3c:	b1 44       	sbci	r27, 0x41	; 65
    2e3e:	b1 f5       	brne	.+108    	; 0x2eac <f_open+0x504>
    2e40:	22 e1       	ldi	r18, 0x12	; 18
    2e42:	32 e0       	ldi	r19, 0x02	; 2
    2e44:	e2 0e       	add	r14, r18
    2e46:	f3 1e       	adc	r15, r19
    2e48:	f7 01       	movw	r30, r14
    2e4a:	80 81       	ld	r24, Z
    2e4c:	91 81       	ldd	r25, Z+1	; 0x01
    2e4e:	a2 81       	ldd	r26, Z+2	; 0x02
    2e50:	b3 81       	ldd	r27, Z+3	; 0x03
    2e52:	2e ee       	ldi	r18, 0xEE	; 238
    2e54:	3d ef       	ldi	r19, 0xFD	; 253
    2e56:	e2 0e       	add	r14, r18
    2e58:	f3 1e       	adc	r15, r19
    2e5a:	82 57       	subi	r24, 0x72	; 114
    2e5c:	92 47       	sbci	r25, 0x72	; 114
    2e5e:	a1 44       	sbci	r26, 0x41	; 65
    2e60:	b1 46       	sbci	r27, 0x61	; 97
    2e62:	21 f5       	brne	.+72     	; 0x2eac <f_open+0x504>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    2e64:	4a e1       	ldi	r20, 0x1A	; 26
    2e66:	52 e0       	ldi	r21, 0x02	; 2
    2e68:	e4 0e       	add	r14, r20
    2e6a:	f5 1e       	adc	r15, r21
    2e6c:	f7 01       	movw	r30, r14
    2e6e:	80 81       	ld	r24, Z
    2e70:	91 81       	ldd	r25, Z+1	; 0x01
    2e72:	a2 81       	ldd	r26, Z+2	; 0x02
    2e74:	b3 81       	ldd	r27, Z+3	; 0x03
    2e76:	26 ee       	ldi	r18, 0xE6	; 230
    2e78:	3d ef       	ldi	r19, 0xFD	; 253
    2e7a:	e2 0e       	add	r14, r18
    2e7c:	f3 1e       	adc	r15, r19
    2e7e:	f7 01       	movw	r30, r14
    2e80:	82 87       	std	Z+10, r24	; 0x0a
    2e82:	93 87       	std	Z+11, r25	; 0x0b
    2e84:	a4 87       	std	Z+12, r26	; 0x0c
    2e86:	b5 87       	std	Z+13, r27	; 0x0d
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    2e88:	26 e1       	ldi	r18, 0x16	; 22
    2e8a:	32 e0       	ldi	r19, 0x02	; 2
    2e8c:	e2 0e       	add	r14, r18
    2e8e:	f3 1e       	adc	r15, r19
    2e90:	f7 01       	movw	r30, r14
    2e92:	80 81       	ld	r24, Z
    2e94:	91 81       	ldd	r25, Z+1	; 0x01
    2e96:	a2 81       	ldd	r26, Z+2	; 0x02
    2e98:	b3 81       	ldd	r27, Z+3	; 0x03
    2e9a:	2a ee       	ldi	r18, 0xEA	; 234
    2e9c:	3d ef       	ldi	r19, 0xFD	; 253
    2e9e:	e2 0e       	add	r14, r18
    2ea0:	f3 1e       	adc	r15, r19
    2ea2:	f7 01       	movw	r30, r14
    2ea4:	86 87       	std	Z+14, r24	; 0x0e
    2ea6:	97 87       	std	Z+15, r25	; 0x0f
    2ea8:	a0 8b       	std	Z+16, r26	; 0x10
    2eaa:	b1 8b       	std	Z+17, r27	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    2eac:	d7 01       	movw	r26, r14
    2eae:	1c 93       	st	X, r17
	fs->id = ++Fsid;		/* File system mount ID */
    2eb0:	80 91 24 04 	lds	r24, 0x0424
    2eb4:	90 91 25 04 	lds	r25, 0x0425
    2eb8:	01 96       	adiw	r24, 0x01	; 1
    2eba:	90 93 25 04 	sts	0x0425, r25
    2ebe:	80 93 24 04 	sts	0x0424, r24
    2ec2:	17 96       	adiw	r26, 0x07	; 7
    2ec4:	9c 93       	st	X, r25
    2ec6:	8e 93       	st	-X, r24
    2ec8:	16 97       	sbiw	r26, 0x06	; 6
	fs->winsect = 0;		/* Invalidate sector cache */
    2eca:	f7 01       	movw	r30, r14
    2ecc:	12 a6       	std	Z+42, r1	; 0x2a
    2ece:	13 a6       	std	Z+43, r1	; 0x2b
    2ed0:	14 a6       	std	Z+44, r1	; 0x2c
    2ed2:	15 a6       	std	Z+45, r1	; 0x2d
	fs->wflag = 0;
    2ed4:	14 82       	std	Z+4, r1	; 0x04
    2ed6:	03 c0       	rjmp	.+6      	; 0x2ede <f_open+0x536>
    2ed8:	5a e0       	ldi	r21, 0x0A	; 10
    2eda:	b5 2e       	mov	r11, r21
    2edc:	04 c0       	rjmp	.+8      	; 0x2ee6 <f_open+0x53e>
    2ede:	bb 24       	eor	r11, r11
    2ee0:	02 c0       	rjmp	.+4      	; 0x2ee6 <f_open+0x53e>
    2ee2:	4d e0       	ldi	r20, 0x0D	; 13
    2ee4:	b4 2e       	mov	r11, r20
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    2ee6:	ce 01       	movw	r24, r28
    2ee8:	01 96       	adiw	r24, 0x01	; 1
    2eea:	9a a3       	std	Y+34, r25	; 0x22
    2eec:	89 a3       	std	Y+33, r24	; 0x21
	if (res == FR_OK)
    2eee:	bb 20       	and	r11, r11
    2ef0:	09 f0       	breq	.+2      	; 0x2ef4 <f_open+0x54c>
    2ef2:	3d c1       	rjmp	.+634    	; 0x316e <f_open+0x7c6>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    2ef4:	ac a9       	ldd	r26, Y+52	; 0x34
    2ef6:	bd a9       	ldd	r27, Y+53	; 0x35
    2ef8:	8c 91       	ld	r24, X
    2efa:	8f 32       	cpi	r24, 0x2F	; 47
    2efc:	11 f0       	breq	.+4      	; 0x2f02 <f_open+0x55a>
    2efe:	8c 35       	cpi	r24, 0x5C	; 92
    2f00:	29 f4       	brne	.+10     	; 0x2f0c <f_open+0x564>
		path++;
    2f02:	ec a9       	ldd	r30, Y+52	; 0x34
    2f04:	fd a9       	ldd	r31, Y+53	; 0x35
    2f06:	31 96       	adiw	r30, 0x01	; 1
    2f08:	fd ab       	std	Y+53, r31	; 0x35
    2f0a:	ec ab       	std	Y+52, r30	; 0x34
	dj->sclust = 0;						/* Start from the root dir */
    2f0c:	1b 8a       	std	Y+19, r1	; 0x13
    2f0e:	1c 8a       	std	Y+20, r1	; 0x14
    2f10:	1d 8a       	std	Y+21, r1	; 0x15
    2f12:	1e 8a       	std	Y+22, r1	; 0x16
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    2f14:	ac a9       	ldd	r26, Y+52	; 0x34
    2f16:	bd a9       	ldd	r27, Y+53	; 0x35
    2f18:	8c 91       	ld	r24, X
    2f1a:	80 32       	cpi	r24, 0x20	; 32
    2f1c:	78 f4       	brcc	.+30     	; 0x2f3c <f_open+0x594>
		res = dir_sdi(dj, 0);
    2f1e:	ce 01       	movw	r24, r28
    2f20:	0d 96       	adiw	r24, 0x0d	; 13
    2f22:	60 e0       	ldi	r22, 0x00	; 0
    2f24:	70 e0       	ldi	r23, 0x00	; 0
    2f26:	df d8       	rcall	.-3650   	; 0x20e6 <dir_sdi>
    2f28:	b8 2e       	mov	r11, r24
		dj->dir = 0;
    2f2a:	18 a2       	std	Y+32, r1	; 0x20
    2f2c:	1f 8e       	std	Y+31, r1	; 0x1f
    2f2e:	1f c1       	rjmp	.+574    	; 0x316e <f_open+0x7c6>
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    2f30:	ec a9       	ldd	r30, Y+52	; 0x34
    2f32:	fd a9       	ldd	r31, Y+53	; 0x35
    2f34:	31 96       	adiw	r30, 0x01	; 1
    2f36:	fd ab       	std	Y+53, r31	; 0x35
    2f38:	ec ab       	std	Y+52, r30	; 0x34
    2f3a:	07 c0       	rjmp	.+14     	; 0x2f4a <f_open+0x5a2>
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    2f3c:	3d e0       	ldi	r19, 0x0D	; 13
    2f3e:	a3 2e       	mov	r10, r19
    2f40:	b1 2c       	mov	r11, r1
    2f42:	ac 0e       	add	r10, r28
    2f44:	bd 1e       	adc	r11, r29
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    2f46:	25 e0       	ldi	r18, 0x05	; 5
    2f48:	92 2e       	mov	r9, r18
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    2f4a:	ac a9       	ldd	r26, Y+52	; 0x34
    2f4c:	bd a9       	ldd	r27, Y+53	; 0x35
    2f4e:	8c 91       	ld	r24, X
    2f50:	8f 32       	cpi	r24, 0x2F	; 47
    2f52:	71 f3       	breq	.-36     	; 0x2f30 <f_open+0x588>
    2f54:	8c 35       	cpi	r24, 0x5C	; 92
    2f56:	61 f3       	breq	.-40     	; 0x2f30 <f_open+0x588>
	sfn = dj->fn;
    2f58:	09 a1       	ldd	r16, Y+33	; 0x21
    2f5a:	1a a1       	ldd	r17, Y+34	; 0x22
	mem_set(sfn, ' ', 11);
    2f5c:	c8 01       	movw	r24, r16
    2f5e:	60 e2       	ldi	r22, 0x20	; 32
    2f60:	70 e0       	ldi	r23, 0x00	; 0
    2f62:	4b e0       	ldi	r20, 0x0B	; 11
    2f64:	50 e0       	ldi	r21, 0x00	; 0
    2f66:	0e 94 32 0b 	call	0x1664	; 0x1664 <mem_set>
    2f6a:	40 e0       	ldi	r20, 0x00	; 0
    2f6c:	50 e0       	ldi	r21, 0x00	; 0
    2f6e:	ee 24       	eor	r14, r14
    2f70:	ff 24       	eor	r15, r15
    2f72:	98 e0       	ldi	r25, 0x08	; 8
    2f74:	c9 2e       	mov	r12, r25
    2f76:	d1 2c       	mov	r13, r1
    2f78:	a0 e0       	ldi	r26, 0x00	; 0
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    2f7a:	ec a9       	ldd	r30, Y+52	; 0x34
    2f7c:	fd a9       	ldd	r31, Y+53	; 0x35
    2f7e:	ee 0d       	add	r30, r14
    2f80:	ff 1d       	adc	r31, r15
    2f82:	20 81       	ld	r18, Z
    2f84:	08 94       	sec
    2f86:	e1 1c       	adc	r14, r1
    2f88:	f1 1c       	adc	r15, r1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    2f8a:	21 32       	cpi	r18, 0x21	; 33
    2f8c:	08 f4       	brcc	.+2      	; 0x2f90 <f_open+0x5e8>
    2f8e:	67 c0       	rjmp	.+206    	; 0x305e <f_open+0x6b6>
    2f90:	2f 32       	cpi	r18, 0x2F	; 47
    2f92:	09 f4       	brne	.+2      	; 0x2f96 <f_open+0x5ee>
    2f94:	ae c2       	rjmp	.+1372   	; 0x34f2 <f_open+0xb4a>
    2f96:	2c 35       	cpi	r18, 0x5C	; 92
    2f98:	09 f4       	brne	.+2      	; 0x2f9c <f_open+0x5f4>
    2f9a:	ab c2       	rjmp	.+1366   	; 0x34f2 <f_open+0xb4a>
		if (c == '.' || i >= ni) {
    2f9c:	2e 32       	cpi	r18, 0x2E	; 46
    2f9e:	19 f0       	breq	.+6      	; 0x2fa6 <f_open+0x5fe>
    2fa0:	4c 15       	cp	r20, r12
    2fa2:	5d 05       	cpc	r21, r13
    2fa4:	80 f0       	brcs	.+32     	; 0x2fc6 <f_open+0x61e>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    2fa6:	b8 e0       	ldi	r27, 0x08	; 8
    2fa8:	cb 16       	cp	r12, r27
    2faa:	d1 04       	cpc	r13, r1
    2fac:	09 f0       	breq	.+2      	; 0x2fb0 <f_open+0x608>
    2fae:	d8 c0       	rjmp	.+432    	; 0x3160 <f_open+0x7b8>
    2fb0:	2e 32       	cpi	r18, 0x2E	; 46
    2fb2:	09 f0       	breq	.+2      	; 0x2fb6 <f_open+0x60e>
    2fb4:	d5 c0       	rjmp	.+426    	; 0x3160 <f_open+0x7b8>
			i = 8; ni = 11;
			b <<= 2; continue;
    2fb6:	aa 0f       	add	r26, r26
    2fb8:	aa 0f       	add	r26, r26
    2fba:	48 e0       	ldi	r20, 0x08	; 8
    2fbc:	50 e0       	ldi	r21, 0x00	; 0
    2fbe:	8b e0       	ldi	r24, 0x0B	; 11
    2fc0:	c8 2e       	mov	r12, r24
    2fc2:	d1 2c       	mov	r13, r1
    2fc4:	da cf       	rjmp	.-76     	; 0x2f7a <f_open+0x5d2>
		}
		if (c >= 0x80) {				/* Extended char? */
    2fc6:	27 fd       	sbrc	r18, 7
			b |= 3;						/* Eliminate NT flag */
    2fc8:	a3 60       	ori	r26, 0x03	; 3
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
    2fca:	82 2f       	mov	r24, r18
    2fcc:	81 58       	subi	r24, 0x81	; 129
    2fce:	8f 31       	cpi	r24, 0x1F	; 31
    2fd0:	18 f0       	brcs	.+6      	; 0x2fd8 <f_open+0x630>
    2fd2:	8f 55       	subi	r24, 0x5F	; 95
    2fd4:	8d 31       	cpi	r24, 0x1D	; 29
    2fd6:	10 f5       	brcc	.+68     	; 0x301c <f_open+0x674>
			d = (BYTE)p[si++];			/* Get 2nd byte */
    2fd8:	ec a9       	ldd	r30, Y+52	; 0x34
    2fda:	fd a9       	ldd	r31, Y+53	; 0x35
    2fdc:	ee 0d       	add	r30, r14
    2fde:	ff 1d       	adc	r31, r15
    2fe0:	30 81       	ld	r19, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    2fe2:	83 2f       	mov	r24, r19
    2fe4:	80 54       	subi	r24, 0x40	; 64
    2fe6:	8f 33       	cpi	r24, 0x3F	; 63
    2fe8:	20 f0       	brcs	.+8      	; 0x2ff2 <f_open+0x64a>
    2fea:	80 54       	subi	r24, 0x40	; 64
    2fec:	8d 37       	cpi	r24, 0x7D	; 125
    2fee:	08 f0       	brcs	.+2      	; 0x2ff2 <f_open+0x64a>
    2ff0:	b7 c0       	rjmp	.+366    	; 0x3160 <f_open+0x7b8>
    2ff2:	c6 01       	movw	r24, r12
    2ff4:	01 97       	sbiw	r24, 0x01	; 1
    2ff6:	48 17       	cp	r20, r24
    2ff8:	59 07       	cpc	r21, r25
    2ffa:	08 f0       	brcs	.+2      	; 0x2ffe <f_open+0x656>
    2ffc:	b1 c0       	rjmp	.+354    	; 0x3160 <f_open+0x7b8>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			d = (BYTE)p[si++];			/* Get 2nd byte */
    2ffe:	08 94       	sec
    3000:	e1 1c       	adc	r14, r1
    3002:	f1 1c       	adc	r15, r1
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    3004:	f8 01       	movw	r30, r16
    3006:	e4 0f       	add	r30, r20
    3008:	f5 1f       	adc	r31, r21
    300a:	20 83       	st	Z, r18
    300c:	ca 01       	movw	r24, r20
    300e:	01 96       	adiw	r24, 0x01	; 1
			sfn[i++] = d;
    3010:	f8 01       	movw	r30, r16
    3012:	e8 0f       	add	r30, r24
    3014:	f9 1f       	adc	r31, r25
    3016:	30 83       	st	Z, r19
    3018:	ac 01       	movw	r20, r24
    301a:	1e c0       	rjmp	.+60     	; 0x3058 <f_open+0x6b0>
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    301c:	62 2f       	mov	r22, r18
    301e:	70 e0       	ldi	r23, 0x00	; 0
    3020:	ea eb       	ldi	r30, 0xBA	; 186
    3022:	f1 e0       	ldi	r31, 0x01	; 1
    3024:	01 c0       	rjmp	.+2      	; 0x3028 <f_open+0x680>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    3026:	31 96       	adiw	r30, 0x01	; 1
    3028:	80 81       	ld	r24, Z
    302a:	88 23       	and	r24, r24
    302c:	29 f0       	breq	.+10     	; 0x3038 <f_open+0x690>
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	86 17       	cp	r24, r22
    3032:	97 07       	cpc	r25, r23
    3034:	c1 f7       	brne	.-16     	; 0x3026 <f_open+0x67e>
    3036:	94 c0       	rjmp	.+296    	; 0x3160 <f_open+0x7b8>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    3038:	82 2f       	mov	r24, r18
    303a:	81 54       	subi	r24, 0x41	; 65
    303c:	8a 31       	cpi	r24, 0x1A	; 26
    303e:	10 f4       	brcc	.+4      	; 0x3044 <f_open+0x69c>
				b |= 2;
    3040:	a2 60       	ori	r26, 0x02	; 2
    3042:	06 c0       	rjmp	.+12     	; 0x3050 <f_open+0x6a8>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    3044:	82 2f       	mov	r24, r18
    3046:	81 56       	subi	r24, 0x61	; 97
    3048:	8a 31       	cpi	r24, 0x1A	; 26
    304a:	10 f4       	brcc	.+4      	; 0x3050 <f_open+0x6a8>
					b |= 1; c -= 0x20;
    304c:	a1 60       	ori	r26, 0x01	; 1
    304e:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    3050:	f8 01       	movw	r30, r16
    3052:	e4 0f       	add	r30, r20
    3054:	f5 1f       	adc	r31, r21
    3056:	20 83       	st	Z, r18
    3058:	4f 5f       	subi	r20, 0xFF	; 255
    305a:	5f 4f       	sbci	r21, 0xFF	; 255
    305c:	8e cf       	rjmp	.-228    	; 0x2f7a <f_open+0x5d2>
    305e:	64 e0       	ldi	r22, 0x04	; 4
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    3060:	45 2b       	or	r20, r21
    3062:	09 f4       	brne	.+2      	; 0x3066 <f_open+0x6be>
    3064:	7d c0       	rjmp	.+250    	; 0x3160 <f_open+0x7b8>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    3066:	f8 01       	movw	r30, r16
    3068:	80 81       	ld	r24, Z
    306a:	85 3e       	cpi	r24, 0xE5	; 229
    306c:	09 f4       	brne	.+2      	; 0x3070 <f_open+0x6c8>
    306e:	90 82       	st	Z, r9

	if (ni == 8) b <<= 2;
    3070:	f8 e0       	ldi	r31, 0x08	; 8
    3072:	cf 16       	cp	r12, r31
    3074:	d1 04       	cpc	r13, r1
    3076:	11 f4       	brne	.+4      	; 0x307c <f_open+0x6d4>
    3078:	aa 0f       	add	r26, r26
    307a:	aa 0f       	add	r26, r26
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    307c:	2a 2f       	mov	r18, r26
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	c9 01       	movw	r24, r18
    3082:	83 70       	andi	r24, 0x03	; 3
    3084:	90 70       	andi	r25, 0x00	; 0
    3086:	01 97       	sbiw	r24, 0x01	; 1
    3088:	09 f4       	brne	.+2      	; 0x308c <f_open+0x6e4>
    308a:	60 61       	ori	r22, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    308c:	2c 70       	andi	r18, 0x0C	; 12
    308e:	30 70       	andi	r19, 0x00	; 0
    3090:	24 30       	cpi	r18, 0x04	; 4
    3092:	31 05       	cpc	r19, r1
    3094:	09 f4       	brne	.+2      	; 0x3098 <f_open+0x6f0>
    3096:	68 60       	ori	r22, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    3098:	d8 01       	movw	r26, r16
    309a:	1b 96       	adiw	r26, 0x0b	; 11
    309c:	6c 93       	st	X, r22
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    309e:	c5 01       	movw	r24, r10
    30a0:	60 e0       	ldi	r22, 0x00	; 0
    30a2:	70 e0       	ldi	r23, 0x00	; 0
    30a4:	20 d8       	rcall	.-4032   	; 0x20e6 <dir_sdi>
    30a6:	48 2f       	mov	r20, r24
	if (res != FR_OK) return res;
    30a8:	88 23       	and	r24, r24
    30aa:	69 f5       	brne	.+90     	; 0x3106 <f_open+0x75e>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    30ac:	4b 8d       	ldd	r20, Y+27	; 0x1b
    30ae:	5c 8d       	ldd	r21, Y+28	; 0x1c
    30b0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    30b2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    30b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    30b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    30b8:	0e 94 a2 0b 	call	0x1744	; 0x1744 <move_window>
    30bc:	48 2f       	mov	r20, r24
		if (res != FR_OK) break;
    30be:	88 23       	and	r24, r24
    30c0:	11 f5       	brne	.+68     	; 0x3106 <f_open+0x75e>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    30c2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    30c4:	f8 a1       	ldd	r31, Y+32	; 0x20
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    30c6:	80 81       	ld	r24, Z
    30c8:	88 23       	and	r24, r24
    30ca:	11 f4       	brne	.+4      	; 0x30d0 <f_open+0x728>
    30cc:	44 e0       	ldi	r20, 0x04	; 4
    30ce:	1b c0       	rjmp	.+54     	; 0x3106 <f_open+0x75e>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    30d0:	83 85       	ldd	r24, Z+11	; 0x0b
    30d2:	83 fd       	sbrc	r24, 3
    30d4:	13 c0       	rjmp	.+38     	; 0x30fc <f_open+0x754>
    30d6:	89 a1       	ldd	r24, Y+33	; 0x21
    30d8:	9a a1       	ldd	r25, Y+34	; 0x22
    30da:	9c 01       	movw	r18, r24
    30dc:	d9 01       	movw	r26, r18
    30de:	2b e0       	ldi	r18, 0x0B	; 11
    30e0:	30 e0       	ldi	r19, 0x00	; 0
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    30e2:	21 50       	subi	r18, 0x01	; 1
    30e4:	30 40       	sbci	r19, 0x00	; 0
    30e6:	5f ef       	ldi	r21, 0xFF	; 255
    30e8:	2f 3f       	cpi	r18, 0xFF	; 255
    30ea:	35 07       	cpc	r19, r21
    30ec:	61 f0       	breq	.+24     	; 0x3106 <f_open+0x75e>
    30ee:	90 81       	ld	r25, Z
    30f0:	8c 91       	ld	r24, X
    30f2:	98 17       	cp	r25, r24
    30f4:	19 f4       	brne	.+6      	; 0x30fc <f_open+0x754>
    30f6:	31 96       	adiw	r30, 0x01	; 1
    30f8:	11 96       	adiw	r26, 0x01	; 1
    30fa:	f3 cf       	rjmp	.-26     	; 0x30e2 <f_open+0x73a>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    30fc:	c5 01       	movw	r24, r10
    30fe:	60 e0       	ldi	r22, 0x00	; 0
    3100:	70 e0       	ldi	r23, 0x00	; 0
    3102:	41 da       	rcall	.-2942   	; 0x2586 <dir_next>
    3104:	d0 cf       	rjmp	.-96     	; 0x30a6 <f_open+0x6fe>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
    3106:	e9 a1       	ldd	r30, Y+33	; 0x21
    3108:	fa a1       	ldd	r31, Y+34	; 0x22
    310a:	83 85       	ldd	r24, Z+11	; 0x0b
			if (res != FR_OK) {				/* Failed to find the object */
    310c:	44 23       	and	r20, r20
    310e:	39 f0       	breq	.+14     	; 0x311e <f_open+0x776>
    3110:	b4 2e       	mov	r11, r20
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    3112:	94 e0       	ldi	r25, 0x04	; 4
    3114:	49 17       	cp	r20, r25
    3116:	39 f5       	brne	.+78     	; 0x3166 <f_open+0x7be>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    3118:	82 ff       	sbrs	r24, 2
    311a:	27 c0       	rjmp	.+78     	; 0x316a <f_open+0x7c2>
    311c:	28 c0       	rjmp	.+80     	; 0x316e <f_open+0x7c6>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    311e:	82 fd       	sbrc	r24, 2
    3120:	22 c0       	rjmp	.+68     	; 0x3166 <f_open+0x7be>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    3122:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3124:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    3126:	83 85       	ldd	r24, Z+11	; 0x0b
    3128:	84 ff       	sbrs	r24, 4
    312a:	1f c0       	rjmp	.+62     	; 0x316a <f_open+0x7c2>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    312c:	ac a9       	ldd	r26, Y+52	; 0x34
    312e:	bd a9       	ldd	r27, Y+53	; 0x35
    3130:	ae 0d       	add	r26, r14
    3132:	bf 1d       	adc	r27, r15
    3134:	bd ab       	std	Y+53, r27	; 0x35
    3136:	ac ab       	std	Y+52, r26	; 0x34
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
    3138:	84 89       	ldd	r24, Z+20	; 0x14
    313a:	95 89       	ldd	r25, Z+21	; 0x15
    313c:	a0 e0       	ldi	r26, 0x00	; 0
    313e:	b0 e0       	ldi	r27, 0x00	; 0
    3140:	dc 01       	movw	r26, r24
    3142:	99 27       	eor	r25, r25
    3144:	88 27       	eor	r24, r24
    3146:	22 8d       	ldd	r18, Z+26	; 0x1a
    3148:	33 8d       	ldd	r19, Z+27	; 0x1b
    314a:	40 e0       	ldi	r20, 0x00	; 0
    314c:	50 e0       	ldi	r21, 0x00	; 0
    314e:	82 2b       	or	r24, r18
    3150:	93 2b       	or	r25, r19
    3152:	a4 2b       	or	r26, r20
    3154:	b5 2b       	or	r27, r21
    3156:	8b 8b       	std	Y+19, r24	; 0x13
    3158:	9c 8b       	std	Y+20, r25	; 0x14
    315a:	ad 8b       	std	Y+21, r26	; 0x15
    315c:	be 8b       	std	Y+22, r27	; 0x16
    315e:	f5 ce       	rjmp	.-534    	; 0x2f4a <f_open+0x5a2>
    3160:	b6 e0       	ldi	r27, 0x06	; 6
    3162:	bb 2e       	mov	r11, r27
    3164:	04 c0       	rjmp	.+8      	; 0x316e <f_open+0x7c6>
    3166:	b4 2e       	mov	r11, r20
    3168:	02 c0       	rjmp	.+4      	; 0x316e <f_open+0x7c6>
    316a:	a5 e0       	ldi	r26, 0x05	; 5
    316c:	ba 2e       	mov	r11, r26
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
	if (res == FR_OK)
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
    316e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3170:	f8 a1       	ldd	r31, Y+32	; 0x20
    3172:	f9 ab       	std	Y+49, r31	; 0x31
    3174:	e8 ab       	std	Y+48, r30	; 0x30

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
    3176:	bb 20       	and	r11, r11
    3178:	21 f4       	brne	.+8      	; 0x3182 <f_open+0x7da>
		if (!dir)	/* Current dir itself */
    317a:	ef 2b       	or	r30, r31
    317c:	11 f4       	brne	.+4      	; 0x3182 <f_open+0x7da>
    317e:	f6 e0       	ldi	r31, 0x06	; 6
    3180:	bf 2e       	mov	r11, r31
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    3182:	fb a5       	ldd	r31, Y+43	; 0x2b
    3184:	2f 2f       	mov	r18, r31
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	c9 01       	movw	r24, r18
    318a:	8c 71       	andi	r24, 0x1C	; 28
    318c:	90 70       	andi	r25, 0x00	; 0
    318e:	89 2b       	or	r24, r25
    3190:	09 f4       	brne	.+2      	; 0x3194 <f_open+0x7ec>
    3192:	fe c0       	rjmp	.+508    	; 0x3390 <f_open+0x9e8>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
    3194:	bb 20       	and	r11, r11
    3196:	09 f4       	brne	.+2      	; 0x319a <f_open+0x7f2>
    3198:	49 c0       	rjmp	.+146    	; 0x322c <f_open+0x884>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    319a:	24 e0       	ldi	r18, 0x04	; 4
    319c:	b2 16       	cp	r11, r18
    319e:	d9 f5       	brne	.+118    	; 0x3216 <f_open+0x86e>
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
    31a0:	8e 01       	movw	r16, r28
    31a2:	03 5f       	subi	r16, 0xF3	; 243
    31a4:	1f 4f       	sbci	r17, 0xFF	; 255
    31a6:	c8 01       	movw	r24, r16
    31a8:	60 e0       	ldi	r22, 0x00	; 0
    31aa:	70 e0       	ldi	r23, 0x00	; 0
    31ac:	0e 94 73 10 	call	0x20e6	; 0x20e6 <dir_sdi>
    31b0:	b8 2e       	mov	r11, r24
	if (res == FR_OK) {
    31b2:	88 23       	and	r24, r24
    31b4:	81 f5       	brne	.+96     	; 0x3216 <f_open+0x86e>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    31b6:	4b 8d       	ldd	r20, Y+27	; 0x1b
    31b8:	5c 8d       	ldd	r21, Y+28	; 0x1c
    31ba:	6d 8d       	ldd	r22, Y+29	; 0x1d
    31bc:	7e 8d       	ldd	r23, Y+30	; 0x1e
    31be:	8d 85       	ldd	r24, Y+13	; 0x0d
    31c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    31c2:	0e 94 a2 0b 	call	0x1744	; 0x1744 <move_window>
    31c6:	b8 2e       	mov	r11, r24
			if (res != FR_OK) break;
    31c8:	88 23       	and	r24, r24
    31ca:	29 f5       	brne	.+74     	; 0x3216 <f_open+0x86e>
			c = *dj->dir;
    31cc:	ef 8d       	ldd	r30, Y+31	; 0x1f
    31ce:	f8 a1       	ldd	r31, Y+32	; 0x20
    31d0:	e0 81       	ld	r30, Z
			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
    31d2:	e5 3e       	cpi	r30, 0xE5	; 229
    31d4:	09 f4       	brne	.+2      	; 0x31d8 <f_open+0x830>
    31d6:	68 c1       	rjmp	.+720    	; 0x34a8 <f_open+0xb00>
    31d8:	ee 23       	and	r30, r30
    31da:	09 f4       	brne	.+2      	; 0x31de <f_open+0x836>
    31dc:	65 c1       	rjmp	.+714    	; 0x34a8 <f_open+0xb00>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
    31de:	c8 01       	movw	r24, r16
    31e0:	61 e0       	ldi	r22, 0x01	; 1
    31e2:	70 e0       	ldi	r23, 0x00	; 0
    31e4:	d0 d9       	rcall	.-3168   	; 0x2586 <dir_next>
    31e6:	b8 2e       	mov	r11, r24
		} while (res == FR_OK);
    31e8:	88 23       	and	r24, r24
    31ea:	29 f3       	breq	.-54     	; 0x31b6 <f_open+0x80e>
    31ec:	14 c0       	rjmp	.+40     	; 0x3216 <f_open+0x86e>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    31ee:	0f 8d       	ldd	r16, Y+31	; 0x1f
    31f0:	18 a1       	ldd	r17, Y+32	; 0x20
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    31f2:	c8 01       	movw	r24, r16
    31f4:	60 e0       	ldi	r22, 0x00	; 0
    31f6:	70 e0       	ldi	r23, 0x00	; 0
    31f8:	40 e2       	ldi	r20, 0x20	; 32
    31fa:	50 e0       	ldi	r21, 0x00	; 0
    31fc:	0e 94 32 0b 	call	0x1664	; 0x1664 <mem_set>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    3200:	69 a1       	ldd	r22, Y+33	; 0x21
    3202:	7a a1       	ldd	r23, Y+34	; 0x22
    3204:	c8 01       	movw	r24, r16
    3206:	4b e0       	ldi	r20, 0x0B	; 11
    3208:	50 e0       	ldi	r21, 0x00	; 0
    320a:	0e 94 06 0b 	call	0x160c	; 0x160c <mem_cpy>
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dj->fs->wflag = 1;
    320e:	ed 85       	ldd	r30, Y+13	; 0x0d
    3210:	fe 85       	ldd	r31, Y+14	; 0x0e
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	84 83       	std	Z+4, r24	; 0x04
				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
			dir = dj.dir;					/* New entry */
    3216:	4f 8d       	ldd	r20, Y+31	; 0x1f
    3218:	58 a1       	ldd	r21, Y+32	; 0x20
    321a:	59 ab       	std	Y+49, r21	; 0x31
    321c:	48 ab       	std	Y+48, r20	; 0x30
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    321e:	bb 20       	and	r11, r11
    3220:	09 f0       	breq	.+2      	; 0x3224 <f_open+0x87c>
    3222:	22 c1       	rjmp	.+580    	; 0x3468 <f_open+0xac0>
#if _FS_SHARE
				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    3224:	5b a5       	ldd	r21, Y+43	; 0x2b
    3226:	58 60       	ori	r21, 0x08	; 8
    3228:	5b a7       	std	Y+43, r21	; 0x2b
    322a:	09 c0       	rjmp	.+18     	; 0x323e <f_open+0x896>
			dir = dj.dir;					/* New entry */
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    322c:	a8 a9       	ldd	r26, Y+48	; 0x30
    322e:	b9 a9       	ldd	r27, Y+49	; 0x31
    3230:	1b 96       	adiw	r26, 0x0b	; 11
    3232:	8c 91       	ld	r24, X
    3234:	81 71       	andi	r24, 0x11	; 17
    3236:	09 f0       	breq	.+2      	; 0x323a <f_open+0x892>
    3238:	34 c1       	rjmp	.+616    	; 0x34a2 <f_open+0xafa>
				res = FR_DENIED;
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    323a:	f2 fd       	sbrc	r31, 2
    323c:	2f c1       	rjmp	.+606    	; 0x349c <f_open+0xaf4>
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    323e:	bb a5       	ldd	r27, Y+43	; 0x2b
    3240:	b3 ff       	sbrs	r27, 3
    3242:	b6 c0       	rjmp	.+364    	; 0x33b0 <f_open+0xa08>
			dw = get_fattime();					/* Created time */
    3244:	0e 94 8c 0a 	call	0x1518	; 0x1518 <get_fattime>
			ST_DWORD(dir+DIR_CrtTime, dw);
    3248:	e8 a9       	ldd	r30, Y+48	; 0x30
    324a:	f9 a9       	ldd	r31, Y+49	; 0x31
    324c:	66 87       	std	Z+14, r22	; 0x0e
    324e:	77 87       	std	Z+15, r23	; 0x0f
    3250:	80 8b       	std	Z+16, r24	; 0x10
    3252:	91 8b       	std	Z+17, r25	; 0x11
			dir[DIR_Attr] = 0;					/* Reset attribute */
    3254:	13 86       	std	Z+11, r1	; 0x0b
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    3256:	a8 a9       	ldd	r26, Y+48	; 0x30
    3258:	b9 a9       	ldd	r27, Y+49	; 0x31
    325a:	5c 96       	adiw	r26, 0x1c	; 28
    325c:	1d 92       	st	X+, r1
    325e:	1d 92       	st	X+, r1
    3260:	1d 92       	st	X+, r1
    3262:	1c 92       	st	X, r1
    3264:	5f 97       	sbiw	r26, 0x1f	; 31
			cl = LD_CLUST(dir);					/* Get start cluster */
    3266:	54 96       	adiw	r26, 0x14	; 20
    3268:	8d 91       	ld	r24, X+
    326a:	9c 91       	ld	r25, X
    326c:	55 97       	sbiw	r26, 0x15	; 21
    326e:	a0 e0       	ldi	r26, 0x00	; 0
    3270:	b0 e0       	ldi	r27, 0x00	; 0
    3272:	7c 01       	movw	r14, r24
    3274:	dd 24       	eor	r13, r13
    3276:	cc 24       	eor	r12, r12
    3278:	e8 a9       	ldd	r30, Y+48	; 0x30
    327a:	f9 a9       	ldd	r31, Y+49	; 0x31
    327c:	82 8d       	ldd	r24, Z+26	; 0x1a
    327e:	93 8d       	ldd	r25, Z+27	; 0x1b
    3280:	a0 e0       	ldi	r26, 0x00	; 0
    3282:	b0 e0       	ldi	r27, 0x00	; 0
    3284:	c8 2a       	or	r12, r24
    3286:	d9 2a       	or	r13, r25
    3288:	ea 2a       	or	r14, r26
    328a:	fb 2a       	or	r15, r27
			ST_CLUST(dir, 0);					/* cluster = 0 */
    328c:	13 8e       	std	Z+27, r1	; 0x1b
    328e:	12 8e       	std	Z+26, r1	; 0x1a
    3290:	15 8a       	std	Z+21, r1	; 0x15
    3292:	14 8a       	std	Z+20, r1	; 0x14
			dj.fs->wflag = 1;
    3294:	ed 85       	ldd	r30, Y+13	; 0x0d
    3296:	fe 85       	ldd	r31, Y+14	; 0x0e
    3298:	81 e0       	ldi	r24, 0x01	; 1
    329a:	84 83       	std	Z+4, r24	; 0x04
			if (cl) {							/* Remove the cluster chain if exist */
    329c:	c1 14       	cp	r12, r1
    329e:	d1 04       	cpc	r13, r1
    32a0:	e1 04       	cpc	r14, r1
    32a2:	f1 04       	cpc	r15, r1
    32a4:	09 f4       	brne	.+2      	; 0x32a8 <f_open+0x900>
    32a6:	84 c0       	rjmp	.+264    	; 0x33b0 <f_open+0xa08>
				dw = dj.fs->winsect;
    32a8:	2d 84       	ldd	r2, Y+13	; 0x0d
    32aa:	3e 84       	ldd	r3, Y+14	; 0x0e
    32ac:	d1 01       	movw	r26, r2
    32ae:	9a 96       	adiw	r26, 0x2a	; 42
    32b0:	2d 91       	ld	r18, X+
    32b2:	3d 91       	ld	r19, X+
    32b4:	4d 91       	ld	r20, X+
    32b6:	5c 91       	ld	r21, X
    32b8:	9d 97       	sbiw	r26, 0x2d	; 45
    32ba:	2f a3       	std	Y+39, r18	; 0x27
    32bc:	38 a7       	std	Y+40, r19	; 0x28
    32be:	49 a7       	std	Y+41, r20	; 0x29
    32c0:	5a a7       	std	Y+42, r21	; 0x2a
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    32c2:	b1 e0       	ldi	r27, 0x01	; 1
    32c4:	cb 16       	cp	r12, r27
    32c6:	d1 04       	cpc	r13, r1
    32c8:	e1 04       	cpc	r14, r1
    32ca:	f1 04       	cpc	r15, r1
    32cc:	09 f4       	brne	.+2      	; 0x32d0 <f_open+0x928>
    32ce:	5d c0       	rjmp	.+186    	; 0x338a <f_open+0x9e2>
    32d0:	f1 01       	movw	r30, r2
    32d2:	86 89       	ldd	r24, Z+22	; 0x16
    32d4:	97 89       	ldd	r25, Z+23	; 0x17
    32d6:	a0 8d       	ldd	r26, Z+24	; 0x18
    32d8:	b1 8d       	ldd	r27, Z+25	; 0x19
    32da:	c8 16       	cp	r12, r24
    32dc:	d9 06       	cpc	r13, r25
    32de:	ea 06       	cpc	r14, r26
    32e0:	fb 06       	cpc	r15, r27
    32e2:	08 f0       	brcs	.+2      	; 0x32e6 <f_open+0x93e>
    32e4:	52 c0       	rjmp	.+164    	; 0x338a <f_open+0x9e2>
    32e6:	46 01       	movw	r8, r12
    32e8:	57 01       	movw	r10, r14
    32ea:	43 c0       	rjmp	.+134    	; 0x3372 <f_open+0x9ca>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    32ec:	c1 01       	movw	r24, r2
    32ee:	b5 01       	movw	r22, r10
    32f0:	a4 01       	movw	r20, r8
    32f2:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <get_fat>
    32f6:	2b 01       	movw	r4, r22
    32f8:	3c 01       	movw	r6, r24
			if (nxt == 0) break;				/* Empty cluster? */
    32fa:	61 15       	cp	r22, r1
    32fc:	71 05       	cpc	r23, r1
    32fe:	81 05       	cpc	r24, r1
    3300:	91 05       	cpc	r25, r1
    3302:	09 f4       	brne	.+2      	; 0x3306 <f_open+0x95e>
    3304:	de c0       	rjmp	.+444    	; 0x34c2 <f_open+0xb1a>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    3306:	61 30       	cpi	r22, 0x01	; 1
    3308:	71 05       	cpc	r23, r1
    330a:	81 05       	cpc	r24, r1
    330c:	91 05       	cpc	r25, r1
    330e:	e9 f1       	breq	.+122    	; 0x338a <f_open+0x9e2>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    3310:	6f 3f       	cpi	r22, 0xFF	; 255
    3312:	2f ef       	ldi	r18, 0xFF	; 255
    3314:	72 07       	cpc	r23, r18
    3316:	2f ef       	ldi	r18, 0xFF	; 255
    3318:	82 07       	cpc	r24, r18
    331a:	2f ef       	ldi	r18, 0xFF	; 255
    331c:	92 07       	cpc	r25, r18
    331e:	19 f4       	brne	.+6      	; 0x3326 <f_open+0x97e>
    3320:	bb 24       	eor	r11, r11
    3322:	b3 94       	inc	r11
    3324:	a1 c0       	rjmp	.+322    	; 0x3468 <f_open+0xac0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    3326:	c1 01       	movw	r24, r2
    3328:	b5 01       	movw	r22, r10
    332a:	a4 01       	movw	r20, r8
    332c:	00 e0       	ldi	r16, 0x00	; 0
    332e:	10 e0       	ldi	r17, 0x00	; 0
    3330:	20 e0       	ldi	r18, 0x00	; 0
    3332:	30 e0       	ldi	r19, 0x00	; 0
    3334:	0e 94 18 0c 	call	0x1830	; 0x1830 <put_fat>
    3338:	b8 2e       	mov	r11, r24
			if (res != FR_OK) break;
    333a:	88 23       	and	r24, r24
    333c:	09 f0       	breq	.+2      	; 0x3340 <f_open+0x998>
    333e:	94 c0       	rjmp	.+296    	; 0x3468 <f_open+0xac0>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    3340:	f1 01       	movw	r30, r2
    3342:	86 85       	ldd	r24, Z+14	; 0x0e
    3344:	97 85       	ldd	r25, Z+15	; 0x0f
    3346:	a0 89       	ldd	r26, Z+16	; 0x10
    3348:	b1 89       	ldd	r27, Z+17	; 0x11
    334a:	8f 3f       	cpi	r24, 0xFF	; 255
    334c:	ff ef       	ldi	r31, 0xFF	; 255
    334e:	9f 07       	cpc	r25, r31
    3350:	ff ef       	ldi	r31, 0xFF	; 255
    3352:	af 07       	cpc	r26, r31
    3354:	ff ef       	ldi	r31, 0xFF	; 255
    3356:	bf 07       	cpc	r27, r31
    3358:	51 f0       	breq	.+20     	; 0x336e <f_open+0x9c6>
				fs->free_clust++;
    335a:	01 96       	adiw	r24, 0x01	; 1
    335c:	a1 1d       	adc	r26, r1
    335e:	b1 1d       	adc	r27, r1
    3360:	f1 01       	movw	r30, r2
    3362:	86 87       	std	Z+14, r24	; 0x0e
    3364:	97 87       	std	Z+15, r25	; 0x0f
    3366:	a0 8b       	std	Z+16, r26	; 0x10
    3368:	b1 8b       	std	Z+17, r27	; 0x11
				fs->fsi_flag = 1;
    336a:	21 e0       	ldi	r18, 0x01	; 1
    336c:	25 83       	std	Z+5, r18	; 0x05
    336e:	53 01       	movw	r10, r6
    3370:	42 01       	movw	r8, r4
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    3372:	f1 01       	movw	r30, r2
    3374:	86 89       	ldd	r24, Z+22	; 0x16
    3376:	97 89       	ldd	r25, Z+23	; 0x17
    3378:	a0 8d       	ldd	r26, Z+24	; 0x18
    337a:	b1 8d       	ldd	r27, Z+25	; 0x19
    337c:	88 16       	cp	r8, r24
    337e:	99 06       	cpc	r9, r25
    3380:	aa 06       	cpc	r10, r26
    3382:	bb 06       	cpc	r11, r27
    3384:	08 f4       	brcc	.+2      	; 0x3388 <f_open+0x9e0>
    3386:	b2 cf       	rjmp	.-156    	; 0x32ec <f_open+0x944>
    3388:	9c c0       	rjmp	.+312    	; 0x34c2 <f_open+0xb1a>
    338a:	72 e0       	ldi	r23, 0x02	; 2
    338c:	b7 2e       	mov	r11, r23
    338e:	6c c0       	rjmp	.+216    	; 0x3468 <f_open+0xac0>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    3390:	bb 20       	and	r11, r11
    3392:	09 f0       	breq	.+2      	; 0x3396 <f_open+0x9ee>
    3394:	69 c0       	rjmp	.+210    	; 0x3468 <f_open+0xac0>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    3396:	a8 a9       	ldd	r26, Y+48	; 0x30
    3398:	b9 a9       	ldd	r27, Y+49	; 0x31
    339a:	1b 96       	adiw	r26, 0x0b	; 11
    339c:	8c 91       	ld	r24, X
    339e:	84 ff       	sbrs	r24, 4
    33a0:	03 c0       	rjmp	.+6      	; 0x33a8 <f_open+0xa00>
    33a2:	64 e0       	ldi	r22, 0x04	; 4
    33a4:	b6 2e       	mov	r11, r22
    33a6:	60 c0       	rjmp	.+192    	; 0x3468 <f_open+0xac0>
				res = FR_NO_FILE;
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    33a8:	f1 ff       	sbrs	r31, 1
    33aa:	02 c0       	rjmp	.+4      	; 0x33b0 <f_open+0xa08>
    33ac:	80 fd       	sbrc	r24, 0
    33ae:	79 c0       	rjmp	.+242    	; 0x34a2 <f_open+0xafa>
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    33b0:	bb a5       	ldd	r27, Y+43	; 0x2b
    33b2:	b3 ff       	sbrs	r27, 3
    33b4:	02 c0       	rjmp	.+4      	; 0x33ba <f_open+0xa12>
			mode |= FA__WRITTEN;
    33b6:	b0 62       	ori	r27, 0x20	; 32
    33b8:	bb a7       	std	Y+43, r27	; 0x2b
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    33ba:	6d 85       	ldd	r22, Y+13	; 0x0d
    33bc:	7e 85       	ldd	r23, Y+14	; 0x0e
    33be:	fb 01       	movw	r30, r22
    33c0:	22 a5       	ldd	r18, Z+42	; 0x2a
    33c2:	33 a5       	ldd	r19, Z+43	; 0x2b
    33c4:	44 a5       	ldd	r20, Z+44	; 0x2c
    33c6:	55 a5       	ldd	r21, Z+45	; 0x2d
    33c8:	aa a9       	ldd	r26, Y+50	; 0x32
    33ca:	bb a9       	ldd	r27, Y+51	; 0x33
    33cc:	5a 96       	adiw	r26, 0x1a	; 26
    33ce:	2d 93       	st	X+, r18
    33d0:	3d 93       	st	X+, r19
    33d2:	4d 93       	st	X+, r20
    33d4:	5c 93       	st	X, r21
    33d6:	5d 97       	sbiw	r26, 0x1d	; 29
		fp->dir_ptr = dir;
    33d8:	e8 a9       	ldd	r30, Y+48	; 0x30
    33da:	f9 a9       	ldd	r31, Y+49	; 0x31
    33dc:	5f 96       	adiw	r26, 0x1f	; 31
    33de:	fc 93       	st	X, r31
    33e0:	ee 93       	st	-X, r30
    33e2:	5e 97       	sbiw	r26, 0x1e	; 30
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    33e4:	fb a5       	ldd	r31, Y+43	; 0x2b
    33e6:	14 96       	adiw	r26, 0x04	; 4
    33e8:	fc 93       	st	X, r31
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    33ea:	a8 a9       	ldd	r26, Y+48	; 0x30
    33ec:	b9 a9       	ldd	r27, Y+49	; 0x31
    33ee:	54 96       	adiw	r26, 0x14	; 20
    33f0:	8d 91       	ld	r24, X+
    33f2:	9c 91       	ld	r25, X
    33f4:	55 97       	sbiw	r26, 0x15	; 21
    33f6:	a0 e0       	ldi	r26, 0x00	; 0
    33f8:	b0 e0       	ldi	r27, 0x00	; 0
    33fa:	dc 01       	movw	r26, r24
    33fc:	99 27       	eor	r25, r25
    33fe:	88 27       	eor	r24, r24
    3400:	e8 a9       	ldd	r30, Y+48	; 0x30
    3402:	f9 a9       	ldd	r31, Y+49	; 0x31
    3404:	22 8d       	ldd	r18, Z+26	; 0x1a
    3406:	33 8d       	ldd	r19, Z+27	; 0x1b
    3408:	40 e0       	ldi	r20, 0x00	; 0
    340a:	50 e0       	ldi	r21, 0x00	; 0
    340c:	82 2b       	or	r24, r18
    340e:	93 2b       	or	r25, r19
    3410:	a4 2b       	or	r26, r20
    3412:	b5 2b       	or	r27, r21
    3414:	ea a9       	ldd	r30, Y+50	; 0x32
    3416:	fb a9       	ldd	r31, Y+51	; 0x33
    3418:	86 87       	std	Z+14, r24	; 0x0e
    341a:	97 87       	std	Z+15, r25	; 0x0f
    341c:	a0 8b       	std	Z+16, r26	; 0x10
    341e:	b1 8b       	std	Z+17, r27	; 0x11
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    3420:	e8 a9       	ldd	r30, Y+48	; 0x30
    3422:	f9 a9       	ldd	r31, Y+49	; 0x31
    3424:	84 8d       	ldd	r24, Z+28	; 0x1c
    3426:	95 8d       	ldd	r25, Z+29	; 0x1d
    3428:	a6 8d       	ldd	r26, Z+30	; 0x1e
    342a:	b7 8d       	ldd	r27, Z+31	; 0x1f
    342c:	ea a9       	ldd	r30, Y+50	; 0x32
    342e:	fb a9       	ldd	r31, Y+51	; 0x33
    3430:	82 87       	std	Z+10, r24	; 0x0a
    3432:	93 87       	std	Z+11, r25	; 0x0b
    3434:	a4 87       	std	Z+12, r26	; 0x0c
    3436:	b5 87       	std	Z+13, r27	; 0x0d
		fp->fptr = 0;						/* File pointer */
    3438:	aa a9       	ldd	r26, Y+50	; 0x32
    343a:	bb a9       	ldd	r27, Y+51	; 0x33
    343c:	16 96       	adiw	r26, 0x06	; 6
    343e:	1d 92       	st	X+, r1
    3440:	1d 92       	st	X+, r1
    3442:	1d 92       	st	X+, r1
    3444:	1c 92       	st	X, r1
    3446:	19 97       	sbiw	r26, 0x09	; 9
		fp->dsect = 0;
    3448:	ea a9       	ldd	r30, Y+50	; 0x32
    344a:	fb a9       	ldd	r31, Y+51	; 0x33
    344c:	16 8a       	std	Z+22, r1	; 0x16
    344e:	17 8a       	std	Z+23, r1	; 0x17
    3450:	10 8e       	std	Z+24, r1	; 0x18
    3452:	11 8e       	std	Z+25, r1	; 0x19
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    3454:	71 83       	std	Z+1, r23	; 0x01
    3456:	60 83       	st	Z, r22
    3458:	db 01       	movw	r26, r22
    345a:	16 96       	adiw	r26, 0x06	; 6
    345c:	8d 91       	ld	r24, X+
    345e:	9c 91       	ld	r25, X
    3460:	17 97       	sbiw	r26, 0x07	; 7
    3462:	93 83       	std	Z+3, r25	; 0x03
    3464:	82 83       	std	Z+2, r24	; 0x02
    3466:	bb 24       	eor	r11, r11
	}

	LEAVE_FF(dj.fs, res);
}
    3468:	8b 2d       	mov	r24, r11
    346a:	e5 96       	adiw	r28, 0x35	; 53
    346c:	0f b6       	in	r0, 0x3f	; 63
    346e:	f8 94       	cli
    3470:	de bf       	out	0x3e, r29	; 62
    3472:	0f be       	out	0x3f, r0	; 63
    3474:	cd bf       	out	0x3d, r28	; 61
    3476:	cf 91       	pop	r28
    3478:	df 91       	pop	r29
    347a:	1f 91       	pop	r17
    347c:	0f 91       	pop	r16
    347e:	ff 90       	pop	r15
    3480:	ef 90       	pop	r14
    3482:	df 90       	pop	r13
    3484:	cf 90       	pop	r12
    3486:	bf 90       	pop	r11
    3488:	af 90       	pop	r10
    348a:	9f 90       	pop	r9
    348c:	8f 90       	pop	r8
    348e:	7f 90       	pop	r7
    3490:	6f 90       	pop	r6
    3492:	5f 90       	pop	r5
    3494:	4f 90       	pop	r4
    3496:	3f 90       	pop	r3
    3498:	2f 90       	pop	r2
    349a:	08 95       	ret
		fp->fptr = 0;						/* File pointer */
		fp->dsect = 0;
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    349c:	48 e0       	ldi	r20, 0x08	; 8
    349e:	b4 2e       	mov	r11, r20
    34a0:	e3 cf       	rjmp	.-58     	; 0x3468 <f_open+0xac0>
    34a2:	37 e0       	ldi	r19, 0x07	; 7
    34a4:	b3 2e       	mov	r11, r19
    34a6:	e0 cf       	rjmp	.-64     	; 0x3468 <f_open+0xac0>
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    34a8:	4b 8d       	ldd	r20, Y+27	; 0x1b
    34aa:	5c 8d       	ldd	r21, Y+28	; 0x1c
    34ac:	6d 8d       	ldd	r22, Y+29	; 0x1d
    34ae:	7e 8d       	ldd	r23, Y+30	; 0x1e
    34b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    34b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    34b4:	0e 94 a2 0b 	call	0x1744	; 0x1744 <move_window>
    34b8:	b8 2e       	mov	r11, r24
		if (res == FR_OK) {
    34ba:	88 23       	and	r24, r24
    34bc:	09 f0       	breq	.+2      	; 0x34c0 <f_open+0xb18>
    34be:	ab ce       	rjmp	.-682    	; 0x3216 <f_open+0x86e>
    34c0:	96 ce       	rjmp	.-724    	; 0x31ee <f_open+0x846>
			dj.fs->wflag = 1;
			if (cl) {							/* Remove the cluster chain if exist */
				dw = dj.fs->winsect;
				res = remove_chain(dj.fs, cl);
				if (res == FR_OK) {
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    34c2:	ed 85       	ldd	r30, Y+13	; 0x0d
    34c4:	fe 85       	ldd	r31, Y+14	; 0x0e
    34c6:	08 94       	sec
    34c8:	c1 08       	sbc	r12, r1
    34ca:	d1 08       	sbc	r13, r1
    34cc:	e1 08       	sbc	r14, r1
    34ce:	f1 08       	sbc	r15, r1
    34d0:	c2 86       	std	Z+10, r12	; 0x0a
    34d2:	d3 86       	std	Z+11, r13	; 0x0b
    34d4:	e4 86       	std	Z+12, r14	; 0x0c
    34d6:	f5 86       	std	Z+13, r15	; 0x0d
					res = move_window(dj.fs, dw);
    34d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    34da:	9e 85       	ldd	r25, Y+14	; 0x0e
    34dc:	4f a1       	ldd	r20, Y+39	; 0x27
    34de:	58 a5       	ldd	r21, Y+40	; 0x28
    34e0:	69 a5       	ldd	r22, Y+41	; 0x29
    34e2:	7a a5       	ldd	r23, Y+42	; 0x2a
    34e4:	0e 94 a2 0b 	call	0x1744	; 0x1744 <move_window>
    34e8:	b8 2e       	mov	r11, r24
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
    34ea:	88 23       	and	r24, r24
    34ec:	09 f4       	brne	.+2      	; 0x34f0 <f_open+0xb48>
    34ee:	60 cf       	rjmp	.-320    	; 0x33b0 <f_open+0xa08>
    34f0:	bb cf       	rjmp	.-138    	; 0x3468 <f_open+0xac0>
    34f2:	60 e0       	ldi	r22, 0x00	; 0
    34f4:	b5 cd       	rjmp	.-1174   	; 0x3060 <f_open+0x6b8>

000034f6 <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
    34f6:	38 2f       	mov	r19, r24
    34f8:	28 2f       	mov	r18, r24
    34fa:	2c c0       	rjmp	.+88     	; 0x3554 <Endpoint_ConfigureEndpoint_Prv+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    34fc:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);
		
		if (EPNum == Number)
    3500:	23 17       	cp	r18, r19
    3502:	21 f4       	brne	.+8      	; 0x350c <Endpoint_ConfigureEndpoint_Prv+0x16>
    3504:	76 2f       	mov	r23, r22
    3506:	94 2f       	mov	r25, r20
    3508:	50 e0       	ldi	r21, 0x00	; 0
    350a:	06 c0       	rjmp	.+12     	; 0x3518 <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    350c:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    3510:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
    3514:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    3518:	91 ff       	sbrs	r25, 1
    351a:	1b c0       	rjmp	.+54     	; 0x3552 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    351c:	80 91 eb 00 	lds	r24, 0x00EB
    3520:	8e 7f       	andi	r24, 0xFE	; 254
    3522:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    3526:	80 91 ed 00 	lds	r24, 0x00ED
    352a:	8d 7f       	andi	r24, 0xFD	; 253
    352c:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    3530:	80 91 eb 00 	lds	r24, 0x00EB
    3534:	81 60       	ori	r24, 0x01	; 1
    3536:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    353a:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    353e:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
    3542:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    3546:	80 91 ee 00 	lds	r24, 0x00EE
			
		if (!(Endpoint_IsConfigured()))
    354a:	87 fd       	sbrc	r24, 7
    354c:	02 c0       	rjmp	.+4      	; 0x3552 <Endpoint_ConfigureEndpoint_Prv+0x5c>
    354e:	80 e0       	ldi	r24, 0x00	; 0
    3550:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else	
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    3552:	2f 5f       	subi	r18, 0xFF	; 255
    3554:	27 30       	cpi	r18, 0x07	; 7
    3556:	90 f2       	brcs	.-92     	; 0x34fc <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    3558:	30 93 e9 00 	sts	0x00E9, r19
    355c:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    355e:	08 95       	ret

00003560 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    3560:	80 91 2a 04 	lds	r24, 0x042A
    3564:	88 23       	and	r24, r24
    3566:	8c f4       	brge	.+34     	; 0x358a <Endpoint_ClearStatusStage+0x2a>
    3568:	03 c0       	rjmp	.+6      	; 0x3570 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    356a:	8e b3       	in	r24, 0x1e	; 30
    356c:	88 23       	and	r24, r24
    356e:	b1 f0       	breq	.+44     	; 0x359c <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3570:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    3574:	82 ff       	sbrs	r24, 2
    3576:	f9 cf       	rjmp	.-14     	; 0x356a <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3578:	80 91 e8 00 	lds	r24, 0x00E8
    357c:	8b 77       	andi	r24, 0x7B	; 123
    357e:	80 93 e8 00 	sts	0x00E8, r24
    3582:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    3584:	8e b3       	in	r24, 0x1e	; 30
    3586:	88 23       	and	r24, r24
    3588:	49 f0       	breq	.+18     	; 0x359c <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    358a:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    358e:	80 ff       	sbrs	r24, 0
    3590:	f9 cf       	rjmp	.-14     	; 0x3584 <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3592:	80 91 e8 00 	lds	r24, 0x00E8
    3596:	8e 77       	andi	r24, 0x7E	; 126
    3598:	80 93 e8 00 	sts	0x00E8, r24
    359c:	08 95       	ret

0000359e <Endpoint_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    359e:	40 91 e4 00 	lds	r20, 0x00E4
    35a2:	50 91 e5 00 	lds	r21, 0x00E5
    35a6:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
    35a8:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
    35ac:	80 78       	andi	r24, 0x80	; 128
    35ae:	80 38       	cpi	r24, 0x80	; 128
    35b0:	29 f4       	brne	.+10     	; 0x35bc <Endpoint_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    35b2:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
    35b6:	80 ff       	sbrs	r24, 0
    35b8:	05 c0       	rjmp	.+10     	; 0x35c4 <Endpoint_WaitUntilReady+0x26>
    35ba:	21 c0       	rjmp	.+66     	; 0x35fe <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    35bc:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    35c0:	82 fd       	sbrc	r24, 2
    35c2:	1d c0       	rjmp	.+58     	; 0x35fe <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    35c4:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    35c6:	88 23       	and	r24, r24
    35c8:	11 f4       	brne	.+4      	; 0x35ce <Endpoint_WaitUntilReady+0x30>
    35ca:	82 e0       	ldi	r24, 0x02	; 2
    35cc:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    35ce:	85 30       	cpi	r24, 0x05	; 5
    35d0:	11 f4       	brne	.+4      	; 0x35d6 <Endpoint_WaitUntilReady+0x38>
    35d2:	83 e0       	ldi	r24, 0x03	; 3
    35d4:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    35d6:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    35da:	85 ff       	sbrs	r24, 5
    35dc:	02 c0       	rjmp	.+4      	; 0x35e2 <Endpoint_WaitUntilReady+0x44>
    35de:	81 e0       	ldi	r24, 0x01	; 1
    35e0:	08 95       	ret
    35e2:	80 91 e4 00 	lds	r24, 0x00E4
    35e6:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    35ea:	84 17       	cp	r24, r20
    35ec:	95 07       	cpc	r25, r21
    35ee:	e1 f2       	breq	.-72     	; 0x35a8 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    35f0:	22 23       	and	r18, r18
    35f2:	11 f4       	brne	.+4      	; 0x35f8 <Endpoint_WaitUntilReady+0x5a>
    35f4:	84 e0       	ldi	r24, 0x04	; 4
    35f6:	08 95       	ret
    35f8:	21 50       	subi	r18, 0x01	; 1
    35fa:	ac 01       	movw	r20, r24
    35fc:	d5 cf       	rjmp	.-86     	; 0x35a8 <Endpoint_WaitUntilReady+0xa>
    35fe:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    3600:	08 95       	ret

00003602 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    3602:	ef 92       	push	r14
    3604:	ff 92       	push	r15
    3606:	0f 93       	push	r16
    3608:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    360a:	4c d0       	rcall	.+152    	; 0x36a4 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    360c:	53 d0       	rcall	.+166    	; 0x36b4 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    360e:	08 ed       	ldi	r16, 0xD8	; 216
    3610:	10 e0       	ldi	r17, 0x00	; 0
    3612:	f8 01       	movw	r30, r16
    3614:	80 81       	ld	r24, Z
    3616:	8f 77       	andi	r24, 0x7F	; 127
    3618:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
    361a:	80 81       	ld	r24, Z
    361c:	80 68       	ori	r24, 0x80	; 128
    361e:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    3620:	80 81       	ld	r24, Z
    3622:	8f 7d       	andi	r24, 0xDF	; 223
    3624:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    3626:	e7 ed       	ldi	r30, 0xD7	; 215
    3628:	f0 e0       	ldi	r31, 0x00	; 0
    362a:	80 81       	ld	r24, Z
    362c:	80 68       	ori	r24, 0x80	; 128
    362e:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    3630:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    3632:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
    3634:	10 92 26 04 	sts	0x0426, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    3638:	10 92 28 04 	sts	0x0428, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    363c:	10 92 27 04 	sts	0x0427, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    3640:	80 ee       	ldi	r24, 0xE0	; 224
    3642:	e8 2e       	mov	r14, r24
    3644:	f1 2c       	mov	r15, r1
    3646:	f7 01       	movw	r30, r14
    3648:	80 81       	ld	r24, Z
    364a:	8b 7f       	andi	r24, 0xFB	; 251
    364c:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    364e:	f8 01       	movw	r30, r16
    3650:	80 81       	ld	r24, Z
    3652:	81 60       	ori	r24, 0x01	; 1
    3654:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    3656:	80 e0       	ldi	r24, 0x00	; 0
    3658:	60 e0       	ldi	r22, 0x00	; 0
    365a:	42 e0       	ldi	r20, 0x02	; 2
    365c:	4c df       	rcall	.-360    	; 0x34f6 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    365e:	e1 ee       	ldi	r30, 0xE1	; 225
    3660:	f0 e0       	ldi	r31, 0x00	; 0
    3662:	80 81       	ld	r24, Z
    3664:	8e 7f       	andi	r24, 0xFE	; 254
    3666:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    3668:	e2 ee       	ldi	r30, 0xE2	; 226
    366a:	f0 e0       	ldi	r31, 0x00	; 0
    366c:	80 81       	ld	r24, Z
    366e:	81 60       	ori	r24, 0x01	; 1
    3670:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    3672:	80 81       	ld	r24, Z
    3674:	88 60       	ori	r24, 0x08	; 8
    3676:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    3678:	f7 01       	movw	r30, r14
    367a:	80 81       	ld	r24, Z
    367c:	8e 7f       	andi	r24, 0xFE	; 254
    367e:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    3680:	f8 01       	movw	r30, r16
    3682:	80 81       	ld	r24, Z
    3684:	80 61       	ori	r24, 0x10	; 16
    3686:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    3688:	1f 91       	pop	r17
    368a:	0f 91       	pop	r16
    368c:	ff 90       	pop	r15
    368e:	ef 90       	pop	r14
    3690:	08 95       	ret

00003692 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    3692:	e7 ed       	ldi	r30, 0xD7	; 215
    3694:	f0 e0       	ldi	r31, 0x00	; 0
    3696:	80 81       	ld	r24, Z
    3698:	81 60       	ori	r24, 0x01	; 1
    369a:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    369c:	81 e0       	ldi	r24, 0x01	; 1
    369e:	80 93 29 04 	sts	0x0429, r24

	USB_ResetInterface();
}
    36a2:	af cf       	rjmp	.-162    	; 0x3602 <USB_ResetInterface>

000036a4 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    36a4:	e8 ed       	ldi	r30, 0xD8	; 216
    36a6:	f0 e0       	ldi	r31, 0x00	; 0
    36a8:	80 81       	ld	r24, Z
    36aa:	8c 7f       	andi	r24, 0xFC	; 252
    36ac:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    36ae:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    36b2:	08 95       	ret

000036b4 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    36b4:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    36b8:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    36bc:	08 95       	ret

000036be <__vector_11>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    36be:	1f 92       	push	r1
    36c0:	0f 92       	push	r0
    36c2:	0f b6       	in	r0, 0x3f	; 63
    36c4:	0f 92       	push	r0
    36c6:	0b b6       	in	r0, 0x3b	; 59
    36c8:	0f 92       	push	r0
    36ca:	11 24       	eor	r1, r1
    36cc:	1f 93       	push	r17
    36ce:	2f 93       	push	r18
    36d0:	3f 93       	push	r19
    36d2:	4f 93       	push	r20
    36d4:	5f 93       	push	r21
    36d6:	6f 93       	push	r22
    36d8:	7f 93       	push	r23
    36da:	8f 93       	push	r24
    36dc:	9f 93       	push	r25
    36de:	af 93       	push	r26
    36e0:	bf 93       	push	r27
    36e2:	ef 93       	push	r30
    36e4:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    36e6:	e9 ee       	ldi	r30, 0xE9	; 233
    36e8:	f0 e0       	ldi	r31, 0x00	; 0
    36ea:	10 81       	ld	r17, Z
    36ec:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    36ee:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    36f0:	e0 ef       	ldi	r30, 0xF0	; 240
    36f2:	f0 e0       	ldi	r31, 0x00	; 0
    36f4:	80 81       	ld	r24, Z
    36f6:	87 7f       	andi	r24, 0xF7	; 247
    36f8:	80 83       	st	Z, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    36fa:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    36fc:	16 d3       	rcall	.+1580   	; 0x3d2a <USB_Device_ProcessControlRequest>
    36fe:	a9 ee       	ldi	r26, 0xE9	; 233
    3700:	b0 e0       	ldi	r27, 0x00	; 0
    3702:	1c 92       	st	X, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    3704:	e0 ef       	ldi	r30, 0xF0	; 240
    3706:	f0 e0       	ldi	r31, 0x00	; 0
    3708:	80 81       	ld	r24, Z
    370a:	88 60       	ori	r24, 0x08	; 8
    370c:	80 83       	st	Z, r24
    370e:	1c 93       	st	X, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    3710:	ff 91       	pop	r31
    3712:	ef 91       	pop	r30
    3714:	bf 91       	pop	r27
    3716:	af 91       	pop	r26
    3718:	9f 91       	pop	r25
    371a:	8f 91       	pop	r24
    371c:	7f 91       	pop	r23
    371e:	6f 91       	pop	r22
    3720:	5f 91       	pop	r21
    3722:	4f 91       	pop	r20
    3724:	3f 91       	pop	r19
    3726:	2f 91       	pop	r18
    3728:	1f 91       	pop	r17
    372a:	0f 90       	pop	r0
    372c:	0b be       	out	0x3b, r0	; 59
    372e:	0f 90       	pop	r0
    3730:	0f be       	out	0x3f, r0	; 63
    3732:	0f 90       	pop	r0
    3734:	1f 90       	pop	r1
    3736:	18 95       	reti

00003738 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    3738:	1f 92       	push	r1
    373a:	0f 92       	push	r0
    373c:	0f b6       	in	r0, 0x3f	; 63
    373e:	0f 92       	push	r0
    3740:	0b b6       	in	r0, 0x3b	; 59
    3742:	0f 92       	push	r0
    3744:	11 24       	eor	r1, r1
    3746:	2f 93       	push	r18
    3748:	3f 93       	push	r19
    374a:	4f 93       	push	r20
    374c:	5f 93       	push	r21
    374e:	6f 93       	push	r22
    3750:	7f 93       	push	r23
    3752:	8f 93       	push	r24
    3754:	9f 93       	push	r25
    3756:	af 93       	push	r26
    3758:	bf 93       	push	r27
    375a:	ef 93       	push	r30
    375c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    375e:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    3762:	82 ff       	sbrs	r24, 2
    3764:	0a c0       	rjmp	.+20     	; 0x377a <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    3766:	80 91 e2 00 	lds	r24, 0x00E2
    376a:	82 ff       	sbrs	r24, 2
    376c:	06 c0       	rjmp	.+12     	; 0x377a <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    376e:	80 91 e1 00 	lds	r24, 0x00E1
    3772:	8b 7f       	andi	r24, 0xFB	; 251
    3774:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    3778:	5b d4       	rcall	.+2230   	; 0x4030 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    377a:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    377e:	80 ff       	sbrs	r24, 0
    3780:	1d c0       	rjmp	.+58     	; 0x37bc <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    3782:	80 91 d8 00 	lds	r24, 0x00D8
    3786:	80 ff       	sbrs	r24, 0
    3788:	19 c0       	rjmp	.+50     	; 0x37bc <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    378a:	80 91 da 00 	lds	r24, 0x00DA
    378e:	8e 7f       	andi	r24, 0xFE	; 254
    3790:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    3794:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    3798:	80 ff       	sbrs	r24, 0
    379a:	0c c0       	rjmp	.+24     	; 0x37b4 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    379c:	8c e0       	ldi	r24, 0x0C	; 12
    379e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    37a0:	8e e0       	ldi	r24, 0x0E	; 14
    37a2:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    37a4:	09 b4       	in	r0, 0x29	; 41
    37a6:	00 fe       	sbrs	r0, 0
    37a8:	fd cf       	rjmp	.-6      	; 0x37a4 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    37aa:	81 e0       	ldi	r24, 0x01	; 1
    37ac:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    37ae:	0e 94 f6 01 	call	0x3ec	; 0x3ec <EVENT_USB_Device_Connect>
    37b2:	04 c0       	rjmp	.+8      	; 0x37bc <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    37b4:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    37b6:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
    37b8:	0e 94 5d 02 	call	0x4ba	; 0x4ba <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    37bc:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    37c0:	80 ff       	sbrs	r24, 0
    37c2:	17 c0       	rjmp	.+46     	; 0x37f2 <__vector_10+0xba>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    37c4:	80 91 e2 00 	lds	r24, 0x00E2
    37c8:	80 ff       	sbrs	r24, 0
    37ca:	13 c0       	rjmp	.+38     	; 0x37f2 <__vector_10+0xba>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    37cc:	80 91 e2 00 	lds	r24, 0x00E2
    37d0:	8e 7f       	andi	r24, 0xFE	; 254
    37d2:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    37d6:	80 91 e2 00 	lds	r24, 0x00E2
    37da:	80 61       	ori	r24, 0x10	; 16
    37dc:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
    37e0:	80 91 d8 00 	lds	r24, 0x00D8
    37e4:	80 62       	ori	r24, 0x20	; 32
    37e6:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    37ea:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    37ec:	85 e0       	ldi	r24, 0x05	; 5
    37ee:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
    37f0:	1f d4       	rcall	.+2110   	; 0x4030 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    37f2:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    37f6:	84 ff       	sbrs	r24, 4
    37f8:	2c c0       	rjmp	.+88     	; 0x3852 <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    37fa:	80 91 e2 00 	lds	r24, 0x00E2
    37fe:	84 ff       	sbrs	r24, 4
    3800:	28 c0       	rjmp	.+80     	; 0x3852 <__vector_10+0x11a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    3802:	8c e0       	ldi	r24, 0x0C	; 12
    3804:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    3806:	8e e0       	ldi	r24, 0x0E	; 14
    3808:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    380a:	09 b4       	in	r0, 0x29	; 41
    380c:	00 fe       	sbrs	r0, 0
    380e:	fd cf       	rjmp	.-6      	; 0x380a <__vector_10+0xd2>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    3810:	80 91 d8 00 	lds	r24, 0x00D8
    3814:	8f 7d       	andi	r24, 0xDF	; 223
    3816:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    381a:	80 91 e1 00 	lds	r24, 0x00E1
    381e:	8f 7e       	andi	r24, 0xEF	; 239
    3820:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    3824:	80 91 e2 00 	lds	r24, 0x00E2
    3828:	8f 7e       	andi	r24, 0xEF	; 239
    382a:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    382e:	80 91 e2 00 	lds	r24, 0x00E2
    3832:	81 60       	ori	r24, 0x01	; 1
    3834:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    3838:	80 91 26 04 	lds	r24, 0x0426
    383c:	88 23       	and	r24, r24
    383e:	31 f4       	brne	.+12     	; 0x384c <__vector_10+0x114>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    3840:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    3844:	87 fd       	sbrc	r24, 7
    3846:	02 c0       	rjmp	.+4      	; 0x384c <__vector_10+0x114>
    3848:	81 e0       	ldi	r24, 0x01	; 1
    384a:	01 c0       	rjmp	.+2      	; 0x384e <__vector_10+0x116>
    384c:	84 e0       	ldi	r24, 0x04	; 4
    384e:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    3850:	ef d3       	rcall	.+2014   	; 0x4030 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    3852:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    3856:	83 ff       	sbrs	r24, 3
    3858:	26 c0       	rjmp	.+76     	; 0x38a6 <__vector_10+0x16e>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    385a:	80 91 e2 00 	lds	r24, 0x00E2
    385e:	83 ff       	sbrs	r24, 3
    3860:	22 c0       	rjmp	.+68     	; 0x38a6 <__vector_10+0x16e>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    3862:	80 91 e1 00 	lds	r24, 0x00E1
    3866:	87 7f       	andi	r24, 0xF7	; 247
    3868:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    386c:	82 e0       	ldi	r24, 0x02	; 2
    386e:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
    3870:	10 92 26 04 	sts	0x0426, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    3874:	80 91 e1 00 	lds	r24, 0x00E1
    3878:	8e 7f       	andi	r24, 0xFE	; 254
    387a:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    387e:	80 91 e2 00 	lds	r24, 0x00E2
    3882:	8e 7f       	andi	r24, 0xFE	; 254
    3884:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    3888:	80 91 e2 00 	lds	r24, 0x00E2
    388c:	80 61       	ori	r24, 0x10	; 16
    388e:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    3892:	80 e0       	ldi	r24, 0x00	; 0
    3894:	60 e0       	ldi	r22, 0x00	; 0
    3896:	42 e0       	ldi	r20, 0x02	; 2
    3898:	2e de       	rcall	.-932    	; 0x34f6 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    389a:	80 91 f0 00 	lds	r24, 0x00F0
    389e:	88 60       	ori	r24, 0x08	; 8
    38a0:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    38a4:	c5 d3       	rcall	.+1930   	; 0x4030 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    38a6:	ff 91       	pop	r31
    38a8:	ef 91       	pop	r30
    38aa:	bf 91       	pop	r27
    38ac:	af 91       	pop	r26
    38ae:	9f 91       	pop	r25
    38b0:	8f 91       	pop	r24
    38b2:	7f 91       	pop	r23
    38b4:	6f 91       	pop	r22
    38b6:	5f 91       	pop	r21
    38b8:	4f 91       	pop	r20
    38ba:	3f 91       	pop	r19
    38bc:	2f 91       	pop	r18
    38be:	0f 90       	pop	r0
    38c0:	0b be       	out	0x3b, r0	; 59
    38c2:	0f 90       	pop	r0
    38c4:	0f be       	out	0x3f, r0	; 63
    38c6:	0f 90       	pop	r0
    38c8:	1f 90       	pop	r1
    38ca:	18 95       	reti

000038cc <Endpoint_Write_Control_Stream_LE>:
    38cc:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    38ce:	40 91 30 04 	lds	r20, 0x0430
    38d2:	50 91 31 04 	lds	r21, 0x0431
    38d6:	46 17       	cp	r20, r22
    38d8:	57 07       	cpc	r21, r23
    38da:	18 f4       	brcc	.+6      	; 0x38e2 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    38dc:	f9 01       	movw	r30, r18
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	3c c0       	rjmp	.+120    	; 0x395a <Endpoint_Write_Control_Stream_LE+0x8e>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    38e2:	61 15       	cp	r22, r1
    38e4:	71 05       	cpc	r23, r1
    38e6:	11 f0       	breq	.+4      	; 0x38ec <Endpoint_Write_Control_Stream_LE+0x20>
    38e8:	ab 01       	movw	r20, r22
    38ea:	f8 cf       	rjmp	.-16     	; 0x38dc <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    38ec:	80 91 e8 00 	lds	r24, 0x00E8
    38f0:	8e 77       	andi	r24, 0x7E	; 126
    38f2:	80 93 e8 00 	sts	0x00E8, r24
    38f6:	40 e0       	ldi	r20, 0x00	; 0
    38f8:	50 e0       	ldi	r21, 0x00	; 0
    38fa:	f0 cf       	rjmp	.-32     	; 0x38dc <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    38fc:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    38fe:	88 23       	and	r24, r24
    3900:	e9 f1       	breq	.+122    	; 0x397c <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3902:	85 30       	cpi	r24, 0x05	; 5
    3904:	e9 f1       	breq	.+122    	; 0x3980 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3906:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    390a:	83 ff       	sbrs	r24, 3
    390c:	02 c0       	rjmp	.+4      	; 0x3912 <Endpoint_Write_Control_Stream_LE+0x46>
    390e:	81 e0       	ldi	r24, 0x01	; 1
    3910:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3912:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    3916:	82 fd       	sbrc	r24, 2
    3918:	2b c0       	rjmp	.+86     	; 0x3970 <Endpoint_Write_Control_Stream_LE+0xa4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    391a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    391e:	80 ff       	sbrs	r24, 0
    3920:	1c c0       	rjmp	.+56     	; 0x395a <Endpoint_Write_Control_Stream_LE+0x8e>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    3922:	20 91 f2 00 	lds	r18, 0x00F2
    3926:	30 91 f3 00 	lds	r19, 0x00F3
    392a:	07 c0       	rjmp	.+14     	; 0x393a <Endpoint_Write_Control_Stream_LE+0x6e>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    392c:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    392e:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    3932:	41 50       	subi	r20, 0x01	; 1
    3934:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    3936:	2f 5f       	subi	r18, 0xFF	; 255
    3938:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    393a:	41 15       	cp	r20, r1
    393c:	51 05       	cpc	r21, r1
    393e:	19 f0       	breq	.+6      	; 0x3946 <Endpoint_Write_Control_Stream_LE+0x7a>
    3940:	28 30       	cpi	r18, 0x08	; 8
    3942:	31 05       	cpc	r19, r1
    3944:	98 f3       	brcs	.-26     	; 0x392c <Endpoint_Write_Control_Stream_LE+0x60>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    3946:	90 e0       	ldi	r25, 0x00	; 0
    3948:	28 30       	cpi	r18, 0x08	; 8
    394a:	31 05       	cpc	r19, r1
    394c:	09 f4       	brne	.+2      	; 0x3950 <Endpoint_Write_Control_Stream_LE+0x84>
    394e:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3950:	80 91 e8 00 	lds	r24, 0x00E8
    3954:	8e 77       	andi	r24, 0x7E	; 126
    3956:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    395a:	41 15       	cp	r20, r1
    395c:	51 05       	cpc	r21, r1
    395e:	71 f6       	brne	.-100    	; 0x38fc <Endpoint_Write_Control_Stream_LE+0x30>
    3960:	99 23       	and	r25, r25
    3962:	61 f6       	brne	.-104    	; 0x38fc <Endpoint_Write_Control_Stream_LE+0x30>
    3964:	05 c0       	rjmp	.+10     	; 0x3970 <Endpoint_Write_Control_Stream_LE+0xa4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3966:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3968:	88 23       	and	r24, r24
    396a:	41 f0       	breq	.+16     	; 0x397c <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    396c:	85 30       	cpi	r24, 0x05	; 5
    396e:	41 f0       	breq	.+16     	; 0x3980 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3970:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    3974:	82 ff       	sbrs	r24, 2
    3976:	f7 cf       	rjmp	.-18     	; 0x3966 <Endpoint_Write_Control_Stream_LE+0x9a>
    3978:	80 e0       	ldi	r24, 0x00	; 0
    397a:	08 95       	ret
    397c:	82 e0       	ldi	r24, 0x02	; 2
    397e:	08 95       	ret
    3980:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    3982:	08 95       	ret

00003984 <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    3984:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    3986:	61 15       	cp	r22, r1
    3988:	71 05       	cpc	r23, r1
    398a:	29 f4       	brne	.+10     	; 0x3996 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    398c:	80 91 e8 00 	lds	r24, 0x00E8
    3990:	8b 77       	andi	r24, 0x7B	; 123
    3992:	80 93 e8 00 	sts	0x00E8, r24
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    3996:	f9 01       	movw	r30, r18
    3998:	21 c0       	rjmp	.+66     	; 0x39dc <Endpoint_Read_Control_Stream_LE+0x58>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    399a:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    399c:	88 23       	and	r24, r24
    399e:	69 f1       	breq	.+90     	; 0x39fa <Endpoint_Read_Control_Stream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    39a0:	85 30       	cpi	r24, 0x05	; 5
    39a2:	69 f1       	breq	.+90     	; 0x39fe <Endpoint_Read_Control_Stream_LE+0x7a>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    39a4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    39a8:	83 ff       	sbrs	r24, 3
    39aa:	02 c0       	rjmp	.+4      	; 0x39b0 <Endpoint_Read_Control_Stream_LE+0x2c>
    39ac:	81 e0       	ldi	r24, 0x01	; 1
    39ae:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    39b0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    39b4:	82 ff       	sbrs	r24, 2
    39b6:	f1 cf       	rjmp	.-30     	; 0x399a <Endpoint_Read_Control_Stream_LE+0x16>
    39b8:	06 c0       	rjmp	.+12     	; 0x39c6 <Endpoint_Read_Control_Stream_LE+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    39ba:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    39be:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    39c0:	61 50       	subi	r22, 0x01	; 1
    39c2:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    39c4:	31 f0       	breq	.+12     	; 0x39d2 <Endpoint_Read_Control_Stream_LE+0x4e>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    39c6:	80 91 f2 00 	lds	r24, 0x00F2
    39ca:	90 91 f3 00 	lds	r25, 0x00F3
    39ce:	89 2b       	or	r24, r25
    39d0:	a1 f7       	brne	.-24     	; 0x39ba <Endpoint_Read_Control_Stream_LE+0x36>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    39d2:	80 91 e8 00 	lds	r24, 0x00E8
    39d6:	8b 77       	andi	r24, 0x7B	; 123
    39d8:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    39dc:	61 15       	cp	r22, r1
    39de:	71 05       	cpc	r23, r1
    39e0:	e1 f6       	brne	.-72     	; 0x399a <Endpoint_Read_Control_Stream_LE+0x16>
    39e2:	05 c0       	rjmp	.+10     	; 0x39ee <Endpoint_Read_Control_Stream_LE+0x6a>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    39e4:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    39e6:	88 23       	and	r24, r24
    39e8:	41 f0       	breq	.+16     	; 0x39fa <Endpoint_Read_Control_Stream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    39ea:	85 30       	cpi	r24, 0x05	; 5
    39ec:	41 f0       	breq	.+16     	; 0x39fe <Endpoint_Read_Control_Stream_LE+0x7a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    39ee:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    39f2:	80 ff       	sbrs	r24, 0
    39f4:	f7 cf       	rjmp	.-18     	; 0x39e4 <Endpoint_Read_Control_Stream_LE+0x60>
    39f6:	80 e0       	ldi	r24, 0x00	; 0
    39f8:	08 95       	ret
    39fa:	82 e0       	ldi	r24, 0x02	; 2
    39fc:	08 95       	ret
    39fe:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    3a00:	08 95       	ret

00003a02 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    3a02:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    3a04:	40 91 30 04 	lds	r20, 0x0430
    3a08:	50 91 31 04 	lds	r21, 0x0431
    3a0c:	46 17       	cp	r20, r22
    3a0e:	57 07       	cpc	r21, r23
    3a10:	18 f4       	brcc	.+6      	; 0x3a18 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    3a12:	f9 01       	movw	r30, r18
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	3f c0       	rjmp	.+126    	; 0x3a96 <Endpoint_Write_Control_PStream_LE+0x94>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    3a18:	61 15       	cp	r22, r1
    3a1a:	71 05       	cpc	r23, r1
    3a1c:	11 f0       	breq	.+4      	; 0x3a22 <Endpoint_Write_Control_PStream_LE+0x20>
    3a1e:	ab 01       	movw	r20, r22
    3a20:	f8 cf       	rjmp	.-16     	; 0x3a12 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3a22:	80 91 e8 00 	lds	r24, 0x00E8
    3a26:	8e 77       	andi	r24, 0x7E	; 126
    3a28:	80 93 e8 00 	sts	0x00E8, r24
    3a2c:	40 e0       	ldi	r20, 0x00	; 0
    3a2e:	50 e0       	ldi	r21, 0x00	; 0
    3a30:	f0 cf       	rjmp	.-32     	; 0x3a12 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3a32:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3a34:	88 23       	and	r24, r24
    3a36:	09 f4       	brne	.+2      	; 0x3a3a <Endpoint_Write_Control_PStream_LE+0x38>
    3a38:	3f c0       	rjmp	.+126    	; 0x3ab8 <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3a3a:	85 30       	cpi	r24, 0x05	; 5
    3a3c:	09 f4       	brne	.+2      	; 0x3a40 <Endpoint_Write_Control_PStream_LE+0x3e>
    3a3e:	3e c0       	rjmp	.+124    	; 0x3abc <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3a40:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    3a44:	83 ff       	sbrs	r24, 3
    3a46:	02 c0       	rjmp	.+4      	; 0x3a4c <Endpoint_Write_Control_PStream_LE+0x4a>
    3a48:	81 e0       	ldi	r24, 0x01	; 1
    3a4a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3a4c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    3a50:	82 fd       	sbrc	r24, 2
    3a52:	2c c0       	rjmp	.+88     	; 0x3aac <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3a54:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    3a58:	80 ff       	sbrs	r24, 0
    3a5a:	1d c0       	rjmp	.+58     	; 0x3a96 <Endpoint_Write_Control_PStream_LE+0x94>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    3a5c:	20 91 f2 00 	lds	r18, 0x00F2
    3a60:	30 91 f3 00 	lds	r19, 0x00F3
    3a64:	08 c0       	rjmp	.+16     	; 0x3a76 <Endpoint_Write_Control_PStream_LE+0x74>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    3a66:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3a68:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    3a6c:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    3a6e:	41 50       	subi	r20, 0x01	; 1
    3a70:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    3a72:	2f 5f       	subi	r18, 0xFF	; 255
    3a74:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    3a76:	41 15       	cp	r20, r1
    3a78:	51 05       	cpc	r21, r1
    3a7a:	19 f0       	breq	.+6      	; 0x3a82 <Endpoint_Write_Control_PStream_LE+0x80>
    3a7c:	28 30       	cpi	r18, 0x08	; 8
    3a7e:	31 05       	cpc	r19, r1
    3a80:	90 f3       	brcs	.-28     	; 0x3a66 <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	28 30       	cpi	r18, 0x08	; 8
    3a86:	31 05       	cpc	r19, r1
    3a88:	09 f4       	brne	.+2      	; 0x3a8c <Endpoint_Write_Control_PStream_LE+0x8a>
    3a8a:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3a8c:	80 91 e8 00 	lds	r24, 0x00E8
    3a90:	8e 77       	andi	r24, 0x7E	; 126
    3a92:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    3a96:	41 15       	cp	r20, r1
    3a98:	51 05       	cpc	r21, r1
    3a9a:	59 f6       	brne	.-106    	; 0x3a32 <Endpoint_Write_Control_PStream_LE+0x30>
    3a9c:	99 23       	and	r25, r25
    3a9e:	49 f6       	brne	.-110    	; 0x3a32 <Endpoint_Write_Control_PStream_LE+0x30>
    3aa0:	05 c0       	rjmp	.+10     	; 0x3aac <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3aa2:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3aa4:	88 23       	and	r24, r24
    3aa6:	41 f0       	breq	.+16     	; 0x3ab8 <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3aa8:	85 30       	cpi	r24, 0x05	; 5
    3aaa:	41 f0       	breq	.+16     	; 0x3abc <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3aac:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    3ab0:	82 ff       	sbrs	r24, 2
    3ab2:	f7 cf       	rjmp	.-18     	; 0x3aa2 <Endpoint_Write_Control_PStream_LE+0xa0>
    3ab4:	80 e0       	ldi	r24, 0x00	; 0
    3ab6:	08 95       	ret
    3ab8:	82 e0       	ldi	r24, 0x02	; 2
    3aba:	08 95       	ret
    3abc:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    3abe:	08 95       	ret

00003ac0 <Endpoint_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    3ac0:	bf 92       	push	r11
    3ac2:	cf 92       	push	r12
    3ac4:	df 92       	push	r13
    3ac6:	ef 92       	push	r14
    3ac8:	ff 92       	push	r15
    3aca:	0f 93       	push	r16
    3acc:	1f 93       	push	r17
    3ace:	cf 93       	push	r28
    3ad0:	df 93       	push	r29
    3ad2:	18 2f       	mov	r17, r24
    3ad4:	09 2f       	mov	r16, r25
    3ad6:	7b 01       	movw	r14, r22
    3ad8:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    3ada:	61 dd       	rcall	.-1342   	; 0x359e <Endpoint_WaitUntilReady>
    3adc:	b8 2e       	mov	r11, r24
    3ade:	88 23       	and	r24, r24
    3ae0:	a9 f5       	brne	.+106    	; 0x3b4c <Endpoint_Read_Stream_LE+0x8c>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    3ae2:	81 2f       	mov	r24, r17
    3ae4:	90 2f       	mov	r25, r16
    3ae6:	9c 01       	movw	r18, r24
    3ae8:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    3aea:	c1 14       	cp	r12, r1
    3aec:	d1 04       	cpc	r13, r1
    3aee:	39 f0       	breq	.+14     	; 0x3afe <Endpoint_Read_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    3af0:	f6 01       	movw	r30, r12
    3af2:	80 81       	ld	r24, Z
    3af4:	91 81       	ldd	r25, Z+1	; 0x01
    3af6:	e8 1a       	sub	r14, r24
    3af8:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    3afa:	c8 0f       	add	r28, r24
    3afc:	d9 1f       	adc	r29, r25
    3afe:	00 e0       	ldi	r16, 0x00	; 0
    3b00:	10 e0       	ldi	r17, 0x00	; 0
    3b02:	21 c0       	rjmp	.+66     	; 0x3b46 <Endpoint_Read_Stream_LE+0x86>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    3b04:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    3b08:	85 fd       	sbrc	r24, 5
    3b0a:	15 c0       	rjmp	.+42     	; 0x3b36 <Endpoint_Read_Stream_LE+0x76>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3b0c:	80 91 e8 00 	lds	r24, 0x00E8
    3b10:	8b 77       	andi	r24, 0x7B	; 123
    3b12:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    3b16:	c1 14       	cp	r12, r1
    3b18:	d1 04       	cpc	r13, r1
    3b1a:	49 f0       	breq	.+18     	; 0x3b2e <Endpoint_Read_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
    3b1c:	f6 01       	movw	r30, r12
    3b1e:	80 81       	ld	r24, Z
    3b20:	91 81       	ldd	r25, Z+1	; 0x01
    3b22:	80 0f       	add	r24, r16
    3b24:	91 1f       	adc	r25, r17
    3b26:	91 83       	std	Z+1, r25	; 0x01
    3b28:	80 83       	st	Z, r24
    3b2a:	85 e0       	ldi	r24, 0x05	; 5
    3b2c:	10 c0       	rjmp	.+32     	; 0x3b4e <Endpoint_Read_Stream_LE+0x8e>

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    3b2e:	37 dd       	rcall	.-1426   	; 0x359e <Endpoint_WaitUntilReady>
    3b30:	88 23       	and	r24, r24
    3b32:	49 f0       	breq	.+18     	; 0x3b46 <Endpoint_Read_Stream_LE+0x86>
    3b34:	0c c0       	rjmp	.+24     	; 0x3b4e <Endpoint_Read_Stream_LE+0x8e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    3b36:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    3b3a:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    3b3c:	08 94       	sec
    3b3e:	e1 08       	sbc	r14, r1
    3b40:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    3b42:	0f 5f       	subi	r16, 0xFF	; 255
    3b44:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    3b46:	e1 14       	cp	r14, r1
    3b48:	f1 04       	cpc	r15, r1
    3b4a:	e1 f6       	brne	.-72     	; 0x3b04 <Endpoint_Read_Stream_LE+0x44>
    3b4c:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    3b4e:	df 91       	pop	r29
    3b50:	cf 91       	pop	r28
    3b52:	1f 91       	pop	r17
    3b54:	0f 91       	pop	r16
    3b56:	ff 90       	pop	r15
    3b58:	ef 90       	pop	r14
    3b5a:	df 90       	pop	r13
    3b5c:	cf 90       	pop	r12
    3b5e:	bf 90       	pop	r11
    3b60:	08 95       	ret

00003b62 <Endpoint_Write_Stream_BE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    3b62:	bf 92       	push	r11
    3b64:	cf 92       	push	r12
    3b66:	df 92       	push	r13
    3b68:	ef 92       	push	r14
    3b6a:	ff 92       	push	r15
    3b6c:	0f 93       	push	r16
    3b6e:	1f 93       	push	r17
    3b70:	cf 93       	push	r28
    3b72:	df 93       	push	r29
    3b74:	8c 01       	movw	r16, r24
    3b76:	eb 01       	movw	r28, r22
    3b78:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    3b7a:	11 dd       	rcall	.-1502   	; 0x359e <Endpoint_WaitUntilReady>
    3b7c:	b8 2e       	mov	r11, r24
    3b7e:	88 23       	and	r24, r24
    3b80:	b1 f5       	brne	.+108    	; 0x3bee <Endpoint_Write_Stream_BE+0x8c>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    3b82:	21 97       	sbiw	r28, 0x01	; 1
    3b84:	0c 0f       	add	r16, r28
    3b86:	1d 1f       	adc	r17, r29
    3b88:	21 96       	adiw	r28, 0x01	; 1
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    3b8a:	c1 14       	cp	r12, r1
    3b8c:	d1 04       	cpc	r13, r1
    3b8e:	39 f0       	breq	.+14     	; 0x3b9e <Endpoint_Write_Stream_BE+0x3c>
	{
		Length -= *BytesProcessed;
    3b90:	f6 01       	movw	r30, r12
    3b92:	80 81       	ld	r24, Z
    3b94:	91 81       	ldd	r25, Z+1	; 0x01
    3b96:	c8 1b       	sub	r28, r24
    3b98:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    3b9a:	08 1b       	sub	r16, r24
    3b9c:	19 0b       	sbc	r17, r25
    3b9e:	ee 24       	eor	r14, r14
    3ba0:	ff 24       	eor	r15, r15
    3ba2:	23 c0       	rjmp	.+70     	; 0x3bea <Endpoint_Write_Stream_BE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    3ba4:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    3ba8:	85 fd       	sbrc	r24, 5
    3baa:	15 c0       	rjmp	.+42     	; 0x3bd6 <Endpoint_Write_Stream_BE+0x74>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3bac:	80 91 e8 00 	lds	r24, 0x00E8
    3bb0:	8e 77       	andi	r24, 0x7E	; 126
    3bb2:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    3bb6:	c1 14       	cp	r12, r1
    3bb8:	d1 04       	cpc	r13, r1
    3bba:	49 f0       	breq	.+18     	; 0x3bce <Endpoint_Write_Stream_BE+0x6c>
			{
				*BytesProcessed += BytesInTransfer;
    3bbc:	f6 01       	movw	r30, r12
    3bbe:	80 81       	ld	r24, Z
    3bc0:	91 81       	ldd	r25, Z+1	; 0x01
    3bc2:	8e 0d       	add	r24, r14
    3bc4:	9f 1d       	adc	r25, r15
    3bc6:	91 83       	std	Z+1, r25	; 0x01
    3bc8:	80 83       	st	Z, r24
    3bca:	85 e0       	ldi	r24, 0x05	; 5
    3bcc:	11 c0       	rjmp	.+34     	; 0x3bf0 <Endpoint_Write_Stream_BE+0x8e>

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    3bce:	e7 dc       	rcall	.-1586   	; 0x359e <Endpoint_WaitUntilReady>
    3bd0:	88 23       	and	r24, r24
    3bd2:	59 f0       	breq	.+22     	; 0x3bea <Endpoint_Write_Stream_BE+0x88>
    3bd4:	0d c0       	rjmp	.+26     	; 0x3bf0 <Endpoint_Write_Stream_BE+0x8e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    3bd6:	f8 01       	movw	r30, r16
    3bd8:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3bda:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
    3bde:	01 50       	subi	r16, 0x01	; 1
    3be0:	10 40       	sbci	r17, 0x00	; 0
			Length--;
    3be2:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    3be4:	08 94       	sec
    3be6:	e1 1c       	adc	r14, r1
    3be8:	f1 1c       	adc	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    3bea:	20 97       	sbiw	r28, 0x00	; 0
    3bec:	d9 f6       	brne	.-74     	; 0x3ba4 <Endpoint_Write_Stream_BE+0x42>
    3bee:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    3bf0:	df 91       	pop	r29
    3bf2:	cf 91       	pop	r28
    3bf4:	1f 91       	pop	r17
    3bf6:	0f 91       	pop	r16
    3bf8:	ff 90       	pop	r15
    3bfa:	ef 90       	pop	r14
    3bfc:	df 90       	pop	r13
    3bfe:	cf 90       	pop	r12
    3c00:	bf 90       	pop	r11
    3c02:	08 95       	ret

00003c04 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    3c04:	bf 92       	push	r11
    3c06:	cf 92       	push	r12
    3c08:	df 92       	push	r13
    3c0a:	ef 92       	push	r14
    3c0c:	ff 92       	push	r15
    3c0e:	0f 93       	push	r16
    3c10:	1f 93       	push	r17
    3c12:	cf 93       	push	r28
    3c14:	df 93       	push	r29
    3c16:	18 2f       	mov	r17, r24
    3c18:	09 2f       	mov	r16, r25
    3c1a:	7b 01       	movw	r14, r22
    3c1c:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    3c1e:	bf dc       	rcall	.-1666   	; 0x359e <Endpoint_WaitUntilReady>
    3c20:	b8 2e       	mov	r11, r24
    3c22:	88 23       	and	r24, r24
    3c24:	a9 f5       	brne	.+106    	; 0x3c90 <Endpoint_Write_Stream_LE+0x8c>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    3c26:	81 2f       	mov	r24, r17
    3c28:	90 2f       	mov	r25, r16
    3c2a:	9c 01       	movw	r18, r24
    3c2c:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    3c2e:	c1 14       	cp	r12, r1
    3c30:	d1 04       	cpc	r13, r1
    3c32:	39 f0       	breq	.+14     	; 0x3c42 <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    3c34:	f6 01       	movw	r30, r12
    3c36:	80 81       	ld	r24, Z
    3c38:	91 81       	ldd	r25, Z+1	; 0x01
    3c3a:	e8 1a       	sub	r14, r24
    3c3c:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    3c3e:	c8 0f       	add	r28, r24
    3c40:	d9 1f       	adc	r29, r25
    3c42:	00 e0       	ldi	r16, 0x00	; 0
    3c44:	10 e0       	ldi	r17, 0x00	; 0
    3c46:	21 c0       	rjmp	.+66     	; 0x3c8a <Endpoint_Write_Stream_LE+0x86>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    3c48:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    3c4c:	85 fd       	sbrc	r24, 5
    3c4e:	15 c0       	rjmp	.+42     	; 0x3c7a <Endpoint_Write_Stream_LE+0x76>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3c50:	80 91 e8 00 	lds	r24, 0x00E8
    3c54:	8e 77       	andi	r24, 0x7E	; 126
    3c56:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    3c5a:	c1 14       	cp	r12, r1
    3c5c:	d1 04       	cpc	r13, r1
    3c5e:	49 f0       	breq	.+18     	; 0x3c72 <Endpoint_Write_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
    3c60:	f6 01       	movw	r30, r12
    3c62:	80 81       	ld	r24, Z
    3c64:	91 81       	ldd	r25, Z+1	; 0x01
    3c66:	80 0f       	add	r24, r16
    3c68:	91 1f       	adc	r25, r17
    3c6a:	91 83       	std	Z+1, r25	; 0x01
    3c6c:	80 83       	st	Z, r24
    3c6e:	85 e0       	ldi	r24, 0x05	; 5
    3c70:	10 c0       	rjmp	.+32     	; 0x3c92 <Endpoint_Write_Stream_LE+0x8e>

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    3c72:	95 dc       	rcall	.-1750   	; 0x359e <Endpoint_WaitUntilReady>
    3c74:	88 23       	and	r24, r24
    3c76:	49 f0       	breq	.+18     	; 0x3c8a <Endpoint_Write_Stream_LE+0x86>
    3c78:	0c c0       	rjmp	.+24     	; 0x3c92 <Endpoint_Write_Stream_LE+0x8e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    3c7a:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3c7c:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    3c80:	08 94       	sec
    3c82:	e1 08       	sbc	r14, r1
    3c84:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    3c86:	0f 5f       	subi	r16, 0xFF	; 255
    3c88:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    3c8a:	e1 14       	cp	r14, r1
    3c8c:	f1 04       	cpc	r15, r1
    3c8e:	e1 f6       	brne	.-72     	; 0x3c48 <Endpoint_Write_Stream_LE+0x44>
    3c90:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    3c92:	df 91       	pop	r29
    3c94:	cf 91       	pop	r28
    3c96:	1f 91       	pop	r17
    3c98:	0f 91       	pop	r16
    3c9a:	ff 90       	pop	r15
    3c9c:	ef 90       	pop	r14
    3c9e:	df 90       	pop	r13
    3ca0:	cf 90       	pop	r12
    3ca2:	bf 90       	pop	r11
    3ca4:	08 95       	ret

00003ca6 <Endpoint_Null_Stream>:
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
    3ca6:	df 92       	push	r13
    3ca8:	ef 92       	push	r14
    3caa:	ff 92       	push	r15
    3cac:	0f 93       	push	r16
    3cae:	1f 93       	push	r17
    3cb0:	cf 93       	push	r28
    3cb2:	df 93       	push	r29
    3cb4:	ec 01       	movw	r28, r24
    3cb6:	8b 01       	movw	r16, r22
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;
	
	if ((ErrorCode = Endpoint_WaitUntilReady()))
    3cb8:	72 dc       	rcall	.-1820   	; 0x359e <Endpoint_WaitUntilReady>
    3cba:	d8 2e       	mov	r13, r24
    3cbc:	88 23       	and	r24, r24
    3cbe:	61 f5       	brne	.+88     	; 0x3d18 <Endpoint_Null_Stream+0x72>
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
    3cc0:	01 15       	cp	r16, r1
    3cc2:	11 05       	cpc	r17, r1
    3cc4:	29 f0       	breq	.+10     	; 0x3cd0 <Endpoint_Null_Stream+0x2a>
	  Length -= *BytesProcessed;
    3cc6:	f8 01       	movw	r30, r16
    3cc8:	80 81       	ld	r24, Z
    3cca:	91 81       	ldd	r25, Z+1	; 0x01
    3ccc:	c8 1b       	sub	r28, r24
    3cce:	d9 0b       	sbc	r29, r25
    3cd0:	ee 24       	eor	r14, r14
    3cd2:	ff 24       	eor	r15, r15
    3cd4:	1f c0       	rjmp	.+62     	; 0x3d14 <Endpoint_Null_Stream+0x6e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    3cd6:	80 91 e8 00 	lds	r24, 0x00E8

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    3cda:	85 fd       	sbrc	r24, 5
    3cdc:	15 c0       	rjmp	.+42     	; 0x3d08 <Endpoint_Null_Stream+0x62>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3cde:	80 91 e8 00 	lds	r24, 0x00E8
    3ce2:	8e 77       	andi	r24, 0x7E	; 126
    3ce4:	80 93 e8 00 	sts	0x00E8, r24
		{
			Endpoint_ClearIN();

			if (BytesProcessed != NULL)
    3ce8:	01 15       	cp	r16, r1
    3cea:	11 05       	cpc	r17, r1
    3cec:	49 f0       	breq	.+18     	; 0x3d00 <Endpoint_Null_Stream+0x5a>
			{
				*BytesProcessed += BytesInTransfer;
    3cee:	f8 01       	movw	r30, r16
    3cf0:	80 81       	ld	r24, Z
    3cf2:	91 81       	ldd	r25, Z+1	; 0x01
    3cf4:	8e 0d       	add	r24, r14
    3cf6:	9f 1d       	adc	r25, r15
    3cf8:	91 83       	std	Z+1, r25	; 0x01
    3cfa:	80 83       	st	Z, r24
    3cfc:	85 e0       	ldi	r24, 0x05	; 5
    3cfe:	0d c0       	rjmp	.+26     	; 0x3d1a <Endpoint_Null_Stream+0x74>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    3d00:	4e dc       	rcall	.-1892   	; 0x359e <Endpoint_WaitUntilReady>
    3d02:	88 23       	and	r24, r24
    3d04:	39 f0       	breq	.+14     	; 0x3d14 <Endpoint_Null_Stream+0x6e>
    3d06:	09 c0       	rjmp	.+18     	; 0x3d1a <Endpoint_Null_Stream+0x74>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3d08:	10 92 f1 00 	sts	0x00F1, r1
		}
		else
		{
			Endpoint_Write_8(0);

			Length--;
    3d0c:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    3d0e:	08 94       	sec
    3d10:	e1 1c       	adc	r14, r1
    3d12:	f1 1c       	adc	r15, r1
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
    3d14:	20 97       	sbiw	r28, 0x00	; 0
    3d16:	f9 f6       	brne	.-66     	; 0x3cd6 <Endpoint_Null_Stream+0x30>
    3d18:	8d 2d       	mov	r24, r13
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
    3d1a:	df 91       	pop	r29
    3d1c:	cf 91       	pop	r28
    3d1e:	1f 91       	pop	r17
    3d20:	0f 91       	pop	r16
    3d22:	ff 90       	pop	r15
    3d24:	ef 90       	pop	r14
    3d26:	df 90       	pop	r13
    3d28:	08 95       	ret

00003d2a <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    3d2a:	0f 93       	push	r16
    3d2c:	1f 93       	push	r17
    3d2e:	df 93       	push	r29
    3d30:	cf 93       	push	r28
    3d32:	cd b7       	in	r28, 0x3d	; 61
    3d34:	de b7       	in	r29, 0x3e	; 62
    3d36:	ac 97       	sbiw	r28, 0x2c	; 44
    3d38:	0f b6       	in	r0, 0x3f	; 63
    3d3a:	f8 94       	cli
    3d3c:	de bf       	out	0x3e, r29	; 62
    3d3e:	0f be       	out	0x3f, r0	; 63
    3d40:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    3d42:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
    3d46:	80 93 2a 04 	sts	0x042A, r24
    3d4a:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
    3d4e:	80 93 2b 04 	sts	0x042B, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    3d52:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    3d56:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
    3d5a:	ec e2       	ldi	r30, 0x2C	; 44
    3d5c:	f4 e0       	ldi	r31, 0x04	; 4
    3d5e:	80 93 2c 04 	sts	0x042C, r24
    3d62:	90 93 2d 04 	sts	0x042D, r25
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    3d66:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    3d6a:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
    3d6e:	80 93 2e 04 	sts	0x042E, r24
    3d72:	93 83       	std	Z+3, r25	; 0x03
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    3d74:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    3d78:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
    3d7c:	80 93 30 04 	sts	0x0430, r24
    3d80:	95 83       	std	Z+5, r25	; 0x05

	EVENT_USB_Device_ControlRequest();
    3d82:	0e 94 76 01 	call	0x2ec	; 0x2ec <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3d86:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    3d8a:	83 ff       	sbrs	r24, 3
    3d8c:	38 c1       	rjmp	.+624    	; 0x3ffe <USB_Device_ProcessControlRequest+0x2d4>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    3d8e:	80 91 2a 04 	lds	r24, 0x042A

		switch (USB_ControlRequest.bRequest)
    3d92:	30 91 2b 04 	lds	r19, 0x042B
    3d96:	35 30       	cpi	r19, 0x05	; 5
    3d98:	09 f4       	brne	.+2      	; 0x3d9c <USB_Device_ProcessControlRequest+0x72>
    3d9a:	87 c0       	rjmp	.+270    	; 0x3eaa <USB_Device_ProcessControlRequest+0x180>
    3d9c:	36 30       	cpi	r19, 0x06	; 6
    3d9e:	40 f4       	brcc	.+16     	; 0x3db0 <USB_Device_ProcessControlRequest+0x86>
    3da0:	31 30       	cpi	r19, 0x01	; 1
    3da2:	c9 f1       	breq	.+114    	; 0x3e16 <USB_Device_ProcessControlRequest+0xec>
    3da4:	31 30       	cpi	r19, 0x01	; 1
    3da6:	70 f0       	brcs	.+28     	; 0x3dc4 <USB_Device_ProcessControlRequest+0x9a>
    3da8:	33 30       	cpi	r19, 0x03	; 3
    3daa:	09 f0       	breq	.+2      	; 0x3dae <USB_Device_ProcessControlRequest+0x84>
    3dac:	28 c1       	rjmp	.+592    	; 0x3ffe <USB_Device_ProcessControlRequest+0x2d4>
    3dae:	33 c0       	rjmp	.+102    	; 0x3e16 <USB_Device_ProcessControlRequest+0xec>
    3db0:	38 30       	cpi	r19, 0x08	; 8
    3db2:	09 f4       	brne	.+2      	; 0x3db6 <USB_Device_ProcessControlRequest+0x8c>
    3db4:	f6 c0       	rjmp	.+492    	; 0x3fa2 <USB_Device_ProcessControlRequest+0x278>
    3db6:	39 30       	cpi	r19, 0x09	; 9
    3db8:	09 f4       	brne	.+2      	; 0x3dbc <USB_Device_ProcessControlRequest+0x92>
    3dba:	05 c1       	rjmp	.+522    	; 0x3fc6 <USB_Device_ProcessControlRequest+0x29c>
    3dbc:	36 30       	cpi	r19, 0x06	; 6
    3dbe:	09 f0       	breq	.+2      	; 0x3dc2 <USB_Device_ProcessControlRequest+0x98>
    3dc0:	1e c1       	rjmp	.+572    	; 0x3ffe <USB_Device_ProcessControlRequest+0x2d4>
    3dc2:	96 c0       	rjmp	.+300    	; 0x3ef0 <USB_Device_ProcessControlRequest+0x1c6>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3dc4:	80 38       	cpi	r24, 0x80	; 128
    3dc6:	21 f0       	breq	.+8      	; 0x3dd0 <USB_Device_ProcessControlRequest+0xa6>
    3dc8:	82 38       	cpi	r24, 0x82	; 130
    3dca:	09 f0       	breq	.+2      	; 0x3dce <USB_Device_ProcessControlRequest+0xa4>
    3dcc:	18 c1       	rjmp	.+560    	; 0x3ffe <USB_Device_ProcessControlRequest+0x2d4>
    3dce:	08 c0       	rjmp	.+16     	; 0x3de0 <USB_Device_ProcessControlRequest+0xb6>
    3dd0:	90 91 27 04 	lds	r25, 0x0427
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    3dd4:	80 91 28 04 	lds	r24, 0x0428
    3dd8:	88 23       	and	r24, r24
    3dda:	99 f0       	breq	.+38     	; 0x3e02 <USB_Device_ProcessControlRequest+0xd8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    3ddc:	92 60       	ori	r25, 0x02	; 2
    3dde:	11 c0       	rjmp	.+34     	; 0x3e02 <USB_Device_ProcessControlRequest+0xd8>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    3de0:	80 91 2e 04 	lds	r24, 0x042E
    3de4:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    3de6:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    3dea:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
    3dee:	90 e0       	ldi	r25, 0x00	; 0
    3df0:	25 e0       	ldi	r18, 0x05	; 5
    3df2:	96 95       	lsr	r25
    3df4:	87 95       	ror	r24
    3df6:	2a 95       	dec	r18
    3df8:	e1 f7       	brne	.-8      	; 0x3df2 <USB_Device_ProcessControlRequest+0xc8>
    3dfa:	98 2f       	mov	r25, r24
    3dfc:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    3dfe:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3e02:	80 91 e8 00 	lds	r24, 0x00E8
    3e06:	87 7f       	andi	r24, 0xF7	; 247
    3e08:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    3e0c:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
    3e10:	10 92 f1 00 	sts	0x00F1, r1
    3e14:	d1 c0       	rjmp	.+418    	; 0x3fb8 <USB_Device_ProcessControlRequest+0x28e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3e16:	88 23       	and	r24, r24
    3e18:	19 f0       	breq	.+6      	; 0x3e20 <USB_Device_ProcessControlRequest+0xf6>
    3e1a:	82 30       	cpi	r24, 0x02	; 2
    3e1c:	09 f0       	breq	.+2      	; 0x3e20 <USB_Device_ProcessControlRequest+0xf6>
    3e1e:	ef c0       	rjmp	.+478    	; 0x3ffe <USB_Device_ProcessControlRequest+0x2d4>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	8f 71       	andi	r24, 0x1F	; 31
    3e24:	90 70       	andi	r25, 0x00	; 0
    3e26:	00 97       	sbiw	r24, 0x00	; 0
    3e28:	21 f0       	breq	.+8      	; 0x3e32 <USB_Device_ProcessControlRequest+0x108>
    3e2a:	02 97       	sbiw	r24, 0x02	; 2
    3e2c:	09 f0       	breq	.+2      	; 0x3e30 <USB_Device_ProcessControlRequest+0x106>
    3e2e:	e7 c0       	rjmp	.+462    	; 0x3ffe <USB_Device_ProcessControlRequest+0x2d4>
    3e30:	0c c0       	rjmp	.+24     	; 0x3e4a <USB_Device_ProcessControlRequest+0x120>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    3e32:	80 91 2c 04 	lds	r24, 0x042C
    3e36:	81 30       	cpi	r24, 0x01	; 1
    3e38:	09 f0       	breq	.+2      	; 0x3e3c <USB_Device_ProcessControlRequest+0x112>
    3e3a:	e1 c0       	rjmp	.+450    	; 0x3ffe <USB_Device_ProcessControlRequest+0x2d4>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    3e3c:	10 92 28 04 	sts	0x0428, r1
    3e40:	33 30       	cpi	r19, 0x03	; 3
    3e42:	69 f5       	brne	.+90     	; 0x3e9e <USB_Device_ProcessControlRequest+0x174>
    3e44:	80 93 28 04 	sts	0x0428, r24
    3e48:	2a c0       	rjmp	.+84     	; 0x3e9e <USB_Device_ProcessControlRequest+0x174>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    3e4a:	80 91 2c 04 	lds	r24, 0x042C
    3e4e:	88 23       	and	r24, r24
    3e50:	31 f5       	brne	.+76     	; 0x3e9e <USB_Device_ProcessControlRequest+0x174>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    3e52:	20 91 2e 04 	lds	r18, 0x042E
    3e56:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    3e58:	09 f4       	brne	.+2      	; 0x3e5c <USB_Device_ProcessControlRequest+0x132>
    3e5a:	d1 c0       	rjmp	.+418    	; 0x3ffe <USB_Device_ProcessControlRequest+0x2d4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    3e5c:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    3e60:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    3e64:	80 ff       	sbrs	r24, 0
    3e66:	1b c0       	rjmp	.+54     	; 0x3e9e <USB_Device_ProcessControlRequest+0x174>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    3e68:	33 30       	cpi	r19, 0x03	; 3
    3e6a:	21 f4       	brne	.+8      	; 0x3e74 <USB_Device_ProcessControlRequest+0x14a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    3e6c:	80 91 eb 00 	lds	r24, 0x00EB
    3e70:	80 62       	ori	r24, 0x20	; 32
    3e72:	13 c0       	rjmp	.+38     	; 0x3e9a <USB_Device_ProcessControlRequest+0x170>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    3e74:	80 91 eb 00 	lds	r24, 0x00EB
    3e78:	80 61       	ori	r24, 0x10	; 16
    3e7a:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    3e7e:	81 e0       	ldi	r24, 0x01	; 1
    3e80:	90 e0       	ldi	r25, 0x00	; 0
    3e82:	02 c0       	rjmp	.+4      	; 0x3e88 <USB_Device_ProcessControlRequest+0x15e>
    3e84:	88 0f       	add	r24, r24
    3e86:	99 1f       	adc	r25, r25
    3e88:	2a 95       	dec	r18
    3e8a:	e2 f7       	brpl	.-8      	; 0x3e84 <USB_Device_ProcessControlRequest+0x15a>
    3e8c:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    3e90:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    3e94:	80 91 eb 00 	lds	r24, 0x00EB
    3e98:	88 60       	ori	r24, 0x08	; 8
    3e9a:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    3e9e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3ea2:	80 91 e8 00 	lds	r24, 0x00E8
    3ea6:	87 7f       	andi	r24, 0xF7	; 247
    3ea8:	8a c0       	rjmp	.+276    	; 0x3fbe <USB_Device_ProcessControlRequest+0x294>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3eaa:	88 23       	and	r24, r24
    3eac:	09 f0       	breq	.+2      	; 0x3eb0 <USB_Device_ProcessControlRequest+0x186>
    3eae:	a7 c0       	rjmp	.+334    	; 0x3ffe <USB_Device_ProcessControlRequest+0x2d4>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    3eb0:	10 91 2c 04 	lds	r17, 0x042C
    3eb4:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    3eb6:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    3eb8:	f8 94       	cli
    3eba:	80 91 e8 00 	lds	r24, 0x00E8
    3ebe:	87 7f       	andi	r24, 0xF7	; 247
    3ec0:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    3ec4:	4d db       	rcall	.-2406   	; 0x3560 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3ec6:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    3eca:	80 ff       	sbrs	r24, 0
    3ecc:	fc cf       	rjmp	.-8      	; 0x3ec6 <USB_Device_ProcessControlRequest+0x19c>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    3ece:	80 91 e3 00 	lds	r24, 0x00E3
    3ed2:	80 78       	andi	r24, 0x80	; 128
    3ed4:	81 2b       	or	r24, r17

				UDADDR = Temp;
    3ed6:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    3eda:	80 68       	ori	r24, 0x80	; 128
    3edc:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    3ee0:	11 23       	and	r17, r17
    3ee2:	11 f4       	brne	.+4      	; 0x3ee8 <USB_Device_ProcessControlRequest+0x1be>
    3ee4:	82 e0       	ldi	r24, 0x02	; 2
    3ee6:	01 c0       	rjmp	.+2      	; 0x3eea <USB_Device_ProcessControlRequest+0x1c0>
    3ee8:	83 e0       	ldi	r24, 0x03	; 3
    3eea:	8e bb       	out	0x1e, r24	; 30
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    3eec:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
    3eee:	87 c0       	rjmp	.+270    	; 0x3ffe <USB_Device_ProcessControlRequest+0x2d4>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3ef0:	80 58       	subi	r24, 0x80	; 128
    3ef2:	82 30       	cpi	r24, 0x02	; 2
    3ef4:	08 f0       	brcs	.+2      	; 0x3ef8 <USB_Device_ProcessControlRequest+0x1ce>
    3ef6:	83 c0       	rjmp	.+262    	; 0x3ffe <USB_Device_ProcessControlRequest+0x2d4>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    3ef8:	80 91 2c 04 	lds	r24, 0x042C
    3efc:	90 91 2d 04 	lds	r25, 0x042D
    3f00:	23 e0       	ldi	r18, 0x03	; 3
    3f02:	8c 3d       	cpi	r24, 0xDC	; 220
    3f04:	92 07       	cpc	r25, r18
    3f06:	09 f0       	breq	.+2      	; 0x3f0a <USB_Device_ProcessControlRequest+0x1e0>
    3f08:	33 c0       	rjmp	.+102    	; 0x3f70 <USB_Device_ProcessControlRequest+0x246>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    3f0a:	83 e0       	ldi	r24, 0x03	; 3
    3f0c:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    3f0e:	8a e2       	ldi	r24, 0x2A	; 42
    3f10:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    3f12:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    3f14:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    3f16:	de 01       	movw	r26, r28
    3f18:	15 96       	adiw	r26, 0x05	; 5
    3f1a:	6e e0       	ldi	r22, 0x0E	; 14
    3f1c:	40 e0       	ldi	r20, 0x00	; 0
    3f1e:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    3f20:	11 e2       	ldi	r17, 0x21	; 33
    3f22:	e6 2f       	mov	r30, r22
    3f24:	f0 e0       	ldi	r31, 0x00	; 0
    3f26:	10 93 57 00 	sts	0x0057, r17
    3f2a:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
    3f2c:	40 ff       	sbrs	r20, 0
    3f2e:	03 c0       	rjmp	.+6      	; 0x3f36 <USB_Device_ProcessControlRequest+0x20c>
					{
						SerialByte >>= 4;
    3f30:	82 95       	swap	r24
    3f32:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    3f34:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    3f36:	8f 70       	andi	r24, 0x0F	; 15
    3f38:	28 2f       	mov	r18, r24
    3f3a:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    3f3c:	8a 30       	cpi	r24, 0x0A	; 10
    3f3e:	18 f0       	brcs	.+6      	; 0x3f46 <USB_Device_ProcessControlRequest+0x21c>
    3f40:	c9 01       	movw	r24, r18
    3f42:	c7 96       	adiw	r24, 0x37	; 55
    3f44:	02 c0       	rjmp	.+4      	; 0x3f4a <USB_Device_ProcessControlRequest+0x220>
    3f46:	c9 01       	movw	r24, r18
    3f48:	c0 96       	adiw	r24, 0x30	; 48
    3f4a:	8d 93       	st	X+, r24
    3f4c:	9d 93       	st	X+, r25
    3f4e:	4f 5f       	subi	r20, 0xFF	; 255
    3f50:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    3f52:	44 31       	cpi	r20, 0x14	; 20
    3f54:	51 05       	cpc	r21, r1
    3f56:	29 f7       	brne	.-54     	; 0x3f22 <USB_Device_ProcessControlRequest+0x1f8>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    3f58:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3f5a:	80 91 e8 00 	lds	r24, 0x00E8
    3f5e:	87 7f       	andi	r24, 0xF7	; 247
    3f60:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    3f64:	ce 01       	movw	r24, r28
    3f66:	03 96       	adiw	r24, 0x03	; 3
    3f68:	6a e2       	ldi	r22, 0x2A	; 42
    3f6a:	70 e0       	ldi	r23, 0x00	; 0
    3f6c:	af dc       	rcall	.-1698   	; 0x38cc <Endpoint_Write_Control_Stream_LE>
    3f6e:	13 c0       	rjmp	.+38     	; 0x3f96 <USB_Device_ProcessControlRequest+0x26c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    3f70:	60 91 2e 04 	lds	r22, 0x042E
    3f74:	ae 01       	movw	r20, r28
    3f76:	4f 5f       	subi	r20, 0xFF	; 255
    3f78:	5f 4f       	sbci	r21, 0xFF	; 255
    3f7a:	0e 94 39 03 	call	0x672	; 0x672 <CALLBACK_USB_GetDescriptor>
    3f7e:	bc 01       	movw	r22, r24
    3f80:	00 97       	sbiw	r24, 0x00	; 0
    3f82:	09 f4       	brne	.+2      	; 0x3f86 <USB_Device_ProcessControlRequest+0x25c>
    3f84:	3c c0       	rjmp	.+120    	; 0x3ffe <USB_Device_ProcessControlRequest+0x2d4>
    3f86:	80 91 e8 00 	lds	r24, 0x00E8
    3f8a:	87 7f       	andi	r24, 0xF7	; 247
    3f8c:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    3f90:	89 81       	ldd	r24, Y+1	; 0x01
    3f92:	9a 81       	ldd	r25, Y+2	; 0x02
    3f94:	36 dd       	rcall	.-1428   	; 0x3a02 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3f96:	80 91 e8 00 	lds	r24, 0x00E8
    3f9a:	8b 77       	andi	r24, 0x7B	; 123
    3f9c:	80 93 e8 00 	sts	0x00E8, r24
    3fa0:	2e c0       	rjmp	.+92     	; 0x3ffe <USB_Device_ProcessControlRequest+0x2d4>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    3fa2:	80 38       	cpi	r24, 0x80	; 128
    3fa4:	61 f5       	brne	.+88     	; 0x3ffe <USB_Device_ProcessControlRequest+0x2d4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3fa6:	80 91 e8 00 	lds	r24, 0x00E8
    3faa:	87 7f       	andi	r24, 0xF7	; 247
    3fac:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    3fb0:	80 91 26 04 	lds	r24, 0x0426
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3fb4:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3fb8:	80 91 e8 00 	lds	r24, 0x00E8
    3fbc:	8e 77       	andi	r24, 0x7E	; 126
    3fbe:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    3fc2:	ce da       	rcall	.-2660   	; 0x3560 <Endpoint_ClearStatusStage>
    3fc4:	1c c0       	rjmp	.+56     	; 0x3ffe <USB_Device_ProcessControlRequest+0x2d4>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3fc6:	88 23       	and	r24, r24
    3fc8:	d1 f4       	brne	.+52     	; 0x3ffe <USB_Device_ProcessControlRequest+0x2d4>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    3fca:	90 91 2c 04 	lds	r25, 0x042C
    3fce:	92 30       	cpi	r25, 0x02	; 2
    3fd0:	b0 f4       	brcc	.+44     	; 0x3ffe <USB_Device_ProcessControlRequest+0x2d4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3fd2:	80 91 e8 00 	lds	r24, 0x00E8
    3fd6:	87 7f       	andi	r24, 0xF7	; 247
    3fd8:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    3fdc:	90 93 26 04 	sts	0x0426, r25

	Endpoint_ClearStatusStage();
    3fe0:	bf da       	rcall	.-2690   	; 0x3560 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    3fe2:	80 91 26 04 	lds	r24, 0x0426
    3fe6:	88 23       	and	r24, r24
    3fe8:	31 f4       	brne	.+12     	; 0x3ff6 <USB_Device_ProcessControlRequest+0x2cc>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    3fea:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    3fee:	87 fd       	sbrc	r24, 7
    3ff0:	02 c0       	rjmp	.+4      	; 0x3ff6 <USB_Device_ProcessControlRequest+0x2cc>
    3ff2:	81 e0       	ldi	r24, 0x01	; 1
    3ff4:	01 c0       	rjmp	.+2      	; 0x3ff8 <USB_Device_ProcessControlRequest+0x2ce>
    3ff6:	84 e0       	ldi	r24, 0x04	; 4
    3ff8:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
    3ffa:	0e 94 7e 01 	call	0x2fc	; 0x2fc <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3ffe:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    4002:	83 ff       	sbrs	r24, 3
    4004:	0a c0       	rjmp	.+20     	; 0x401a <USB_Device_ProcessControlRequest+0x2f0>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    4006:	80 91 eb 00 	lds	r24, 0x00EB
    400a:	80 62       	ori	r24, 0x20	; 32
    400c:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    4010:	80 91 e8 00 	lds	r24, 0x00E8
    4014:	87 7f       	andi	r24, 0xF7	; 247
    4016:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    401a:	ac 96       	adiw	r28, 0x2c	; 44
    401c:	0f b6       	in	r0, 0x3f	; 63
    401e:	f8 94       	cli
    4020:	de bf       	out	0x3e, r29	; 62
    4022:	0f be       	out	0x3f, r0	; 63
    4024:	cd bf       	out	0x3d, r28	; 61
    4026:	cf 91       	pop	r28
    4028:	df 91       	pop	r29
    402a:	1f 91       	pop	r17
    402c:	0f 91       	pop	r16
    402e:	08 95       	ret

00004030 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    4030:	08 95       	ret

00004032 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    4032:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    4034:	8e b3       	in	r24, 0x1e	; 30
    4036:	88 23       	and	r24, r24
    4038:	61 f0       	breq	.+24     	; 0x4052 <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    403a:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    403e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    4042:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    4046:	83 ff       	sbrs	r24, 3
    4048:	01 c0       	rjmp	.+2      	; 0x404c <USB_USBTask+0x1a>
		  USB_Device_ProcessControlRequest();
    404a:	6f de       	rcall	.-802    	; 0x3d2a <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    404c:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    404e:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    4052:	1f 91       	pop	r17
    4054:	08 95       	ret

00004056 <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    4056:	4f 92       	push	r4
    4058:	5f 92       	push	r5
    405a:	6f 92       	push	r6
    405c:	7f 92       	push	r7
    405e:	8f 92       	push	r8
    4060:	9f 92       	push	r9
    4062:	af 92       	push	r10
    4064:	bf 92       	push	r11
    4066:	cf 92       	push	r12
    4068:	df 92       	push	r13
    406a:	ef 92       	push	r14
    406c:	ff 92       	push	r15
    406e:	0f 93       	push	r16
    4070:	1f 93       	push	r17
    4072:	df 93       	push	r29
    4074:	cf 93       	push	r28
    4076:	00 d0       	rcall	.+0      	; 0x4078 <HID_Device_USBTask+0x22>
    4078:	0f 92       	push	r0
    407a:	cd b7       	in	r28, 0x3d	; 61
    407c:	de b7       	in	r29, 0x3e	; 62
    407e:	7c 01       	movw	r14, r24
			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);

			Endpoint_ClearIN();
		}
	}
}
    4080:	6d b6       	in	r6, 0x3d	; 61
    4082:	7e b6       	in	r7, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    4084:	8e b3       	in	r24, 0x1e	; 30
    4086:	84 30       	cpi	r24, 0x04	; 4
    4088:	09 f0       	breq	.+2      	; 0x408c <HID_Device_USBTask+0x36>
    408a:	86 c0       	rjmp	.+268    	; 0x4198 <HID_Device_USBTask+0x142>
	  return;

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
    408c:	f7 01       	movw	r30, r14
    408e:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    4090:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    4094:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsReadWriteAllowed())
    4098:	85 ff       	sbrs	r24, 5
    409a:	7e c0       	rjmp	.+252    	; 0x4198 <HID_Device_USBTask+0x142>
    409c:	5d b6       	in	r5, 0x3d	; 61
    409e:	4e b6       	in	r4, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    40a0:	47 81       	ldd	r20, Z+7	; 0x07
    40a2:	8d b7       	in	r24, 0x3d	; 61
    40a4:	9e b7       	in	r25, 0x3e	; 62
    40a6:	84 1b       	sub	r24, r20
    40a8:	91 09       	sbc	r25, r1
    40aa:	0f b6       	in	r0, 0x3f	; 63
    40ac:	f8 94       	cli
    40ae:	9e bf       	out	0x3e, r25	; 62
    40b0:	0f be       	out	0x3f, r0	; 63
    40b2:	8d bf       	out	0x3d, r24	; 61
    40b4:	0d b7       	in	r16, 0x3d	; 61
    40b6:	1e b7       	in	r17, 0x3e	; 62
    40b8:	0f 5f       	subi	r16, 0xFF	; 255
    40ba:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t  ReportID     = 0;
    40bc:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
    40be:	1b 82       	std	Y+3, r1	; 0x03
    40c0:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
    40c2:	c0 2e       	mov	r12, r16
    40c4:	91 2e       	mov	r9, r17
    40c6:	c8 01       	movw	r24, r16
    40c8:	60 e0       	ldi	r22, 0x00	; 0
    40ca:	70 e0       	ldi	r23, 0x00	; 0
    40cc:	50 e0       	ldi	r21, 0x00	; 0
    40ce:	0e d5       	rcall	.+2588   	; 0x4aec <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
    40d0:	c7 01       	movw	r24, r14
    40d2:	be 01       	movw	r22, r28
    40d4:	6f 5f       	subi	r22, 0xFF	; 255
    40d6:	7f 4f       	sbci	r23, 0xFF	; 255
    40d8:	40 e0       	ldi	r20, 0x00	; 0
    40da:	98 01       	movw	r18, r16
    40dc:	8e 01       	movw	r16, r28
    40de:	0e 5f       	subi	r16, 0xFE	; 254
    40e0:	1f 4f       	sbci	r17, 0xFF	; 255
    40e2:	0e 94 55 01 	call	0x2aa	; 0x2aa <CALLBACK_HID_Device_CreateHIDReport>
    40e6:	88 2e       	mov	r8, r24
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    40e8:	f7 01       	movw	r30, r14
    40ea:	81 85       	ldd	r24, Z+9	; 0x09
    40ec:	92 85       	ldd	r25, Z+10	; 0x0a
    40ee:	89 2b       	or	r24, r25
    40f0:	19 f4       	brne	.+6      	; 0x40f8 <HID_Device_USBTask+0xa2>
    40f2:	aa 24       	eor	r10, r10
    40f4:	bb 24       	eor	r11, r11
    40f6:	0b c0       	rjmp	.+22     	; 0x410e <HID_Device_USBTask+0xb8>
    40f8:	20 e0       	ldi	r18, 0x00	; 0
    40fa:	f7 01       	movw	r30, r14
    40fc:	83 85       	ldd	r24, Z+11	; 0x0b
    40fe:	94 85       	ldd	r25, Z+12	; 0x0c
    4100:	89 2b       	or	r24, r25
    4102:	09 f0       	breq	.+2      	; 0x4106 <HID_Device_USBTask+0xb0>
    4104:	21 e0       	ldi	r18, 0x01	; 1
    4106:	81 e0       	ldi	r24, 0x01	; 1
    4108:	28 27       	eor	r18, r24
    410a:	a2 2e       	mov	r10, r18
    410c:	bb 24       	eor	r11, r11

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    410e:	f7 01       	movw	r30, r14
    4110:	05 81       	ldd	r16, Z+5	; 0x05
    4112:	16 81       	ldd	r17, Z+6	; 0x06
    4114:	01 15       	cp	r16, r1
    4116:	11 05       	cpc	r17, r1
    4118:	11 f4       	brne	.+4      	; 0x411e <HID_Device_USBTask+0xc8>
    411a:	dd 24       	eor	r13, r13
    411c:	12 c0       	rjmp	.+36     	; 0x4142 <HID_Device_USBTask+0xec>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    411e:	4a 81       	ldd	r20, Y+2	; 0x02
    4120:	5b 81       	ldd	r21, Y+3	; 0x03
    4122:	8c 2d       	mov	r24, r12
    4124:	99 2d       	mov	r25, r9
    4126:	b8 01       	movw	r22, r16
    4128:	cb d4       	rcall	.+2454   	; 0x4ac0 <memcmp>
    412a:	dd 24       	eor	r13, r13
    412c:	00 97       	sbiw	r24, 0x00	; 0
    412e:	11 f0       	breq	.+4      	; 0x4134 <HID_Device_USBTask+0xde>
    4130:	dd 24       	eor	r13, r13
    4132:	d3 94       	inc	r13
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    4134:	f7 01       	movw	r30, r14
    4136:	47 81       	ldd	r20, Z+7	; 0x07
    4138:	c8 01       	movw	r24, r16
    413a:	6c 2d       	mov	r22, r12
    413c:	79 2d       	mov	r23, r9
    413e:	50 e0       	ldi	r21, 0x00	; 0
    4140:	cc d4       	rcall	.+2456   	; 0x4ada <memcpy>
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    4142:	8a 81       	ldd	r24, Y+2	; 0x02
    4144:	9b 81       	ldd	r25, Y+3	; 0x03
    4146:	89 2b       	or	r24, r25
    4148:	f9 f0       	breq	.+62     	; 0x4188 <HID_Device_USBTask+0x132>
    414a:	88 20       	and	r8, r8
    414c:	21 f4       	brne	.+8      	; 0x4156 <HID_Device_USBTask+0x100>
    414e:	dd 20       	and	r13, r13
    4150:	11 f4       	brne	.+4      	; 0x4156 <HID_Device_USBTask+0x100>
    4152:	ab 28       	or	r10, r11
    4154:	c9 f0       	breq	.+50     	; 0x4188 <HID_Device_USBTask+0x132>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    4156:	f7 01       	movw	r30, r14
    4158:	81 85       	ldd	r24, Z+9	; 0x09
    415a:	92 85       	ldd	r25, Z+10	; 0x0a
    415c:	94 87       	std	Z+12, r25	; 0x0c
    415e:	83 87       	std	Z+11, r24	; 0x0b

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
    4160:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    4162:	80 93 e9 00 	sts	0x00E9, r24

			if (ReportID)
    4166:	89 81       	ldd	r24, Y+1	; 0x01
    4168:	88 23       	and	r24, r24
    416a:	11 f0       	breq	.+4      	; 0x4170 <HID_Device_USBTask+0x11a>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    416c:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    4170:	6a 81       	ldd	r22, Y+2	; 0x02
    4172:	7b 81       	ldd	r23, Y+3	; 0x03
    4174:	8c 2d       	mov	r24, r12
    4176:	99 2d       	mov	r25, r9
    4178:	40 e0       	ldi	r20, 0x00	; 0
    417a:	50 e0       	ldi	r21, 0x00	; 0
    417c:	43 dd       	rcall	.-1402   	; 0x3c04 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    417e:	80 91 e8 00 	lds	r24, 0x00E8
    4182:	8e 77       	andi	r24, 0x7E	; 126
    4184:	80 93 e8 00 	sts	0x00E8, r24
    4188:	85 2d       	mov	r24, r5
    418a:	94 2d       	mov	r25, r4
    418c:	9c 01       	movw	r18, r24
    418e:	0f b6       	in	r0, 0x3f	; 63
    4190:	f8 94       	cli
    4192:	3e bf       	out	0x3e, r19	; 62
    4194:	0f be       	out	0x3f, r0	; 63
    4196:	2d bf       	out	0x3d, r18	; 61

			Endpoint_ClearIN();
		}
	}
}
    4198:	0f b6       	in	r0, 0x3f	; 63
    419a:	f8 94       	cli
    419c:	7e be       	out	0x3e, r7	; 62
    419e:	0f be       	out	0x3f, r0	; 63
    41a0:	6d be       	out	0x3d, r6	; 61
    41a2:	0f 90       	pop	r0
    41a4:	0f 90       	pop	r0
    41a6:	0f 90       	pop	r0
    41a8:	cf 91       	pop	r28
    41aa:	df 91       	pop	r29
    41ac:	1f 91       	pop	r17
    41ae:	0f 91       	pop	r16
    41b0:	ff 90       	pop	r15
    41b2:	ef 90       	pop	r14
    41b4:	df 90       	pop	r13
    41b6:	cf 90       	pop	r12
    41b8:	bf 90       	pop	r11
    41ba:	af 90       	pop	r10
    41bc:	9f 90       	pop	r9
    41be:	8f 90       	pop	r8
    41c0:	7f 90       	pop	r7
    41c2:	6f 90       	pop	r6
    41c4:	5f 90       	pop	r5
    41c6:	4f 90       	pop	r4
    41c8:	08 95       	ret

000041ca <HID_Device_ConfigureEndpoints>:
			break;
	}
}

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    41ca:	cf 93       	push	r28
    41cc:	df 93       	push	r29
    41ce:	dc 01       	movw	r26, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    41d0:	08 96       	adiw	r24, 0x08	; 8
    41d2:	fc 01       	movw	r30, r24
    41d4:	85 e0       	ldi	r24, 0x05	; 5
    41d6:	ef 01       	movw	r28, r30
    41d8:	19 92       	st	Y+, r1
    41da:	8a 95       	dec	r24
    41dc:	e9 f7       	brne	.-6      	; 0x41d8 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    41de:	81 e0       	ldi	r24, 0x01	; 1
    41e0:	18 96       	adiw	r26, 0x08	; 8
    41e2:	8c 93       	st	X, r24
    41e4:	18 97       	sbiw	r26, 0x08	; 8
	HIDInterfaceInfo->State.IdleCount           = 500;
    41e6:	84 ef       	ldi	r24, 0xF4	; 244
    41e8:	91 e0       	ldi	r25, 0x01	; 1
    41ea:	1a 96       	adiw	r26, 0x0a	; 10
    41ec:	9c 93       	st	X, r25
    41ee:	8e 93       	st	-X, r24
    41f0:	19 97       	sbiw	r26, 0x09	; 9

	if (!(Endpoint_ConfigureEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber, EP_TYPE_INTERRUPT,
    41f2:	11 96       	adiw	r26, 0x01	; 1
    41f4:	3c 91       	ld	r19, X
    41f6:	11 97       	sbiw	r26, 0x01	; 1
    41f8:	12 96       	adiw	r26, 0x02	; 2
    41fa:	6d 91       	ld	r22, X+
    41fc:	7c 91       	ld	r23, X
    41fe:	13 97       	sbiw	r26, 0x03	; 3
    4200:	14 96       	adiw	r26, 0x04	; 4
    4202:	8c 91       	ld	r24, X
    4204:	88 23       	and	r24, r24
    4206:	11 f4       	brne	.+4      	; 0x420c <HID_Device_ConfigureEndpoints+0x42>
    4208:	40 e0       	ldi	r20, 0x00	; 0
    420a:	01 c0       	rjmp	.+2      	; 0x420e <HID_Device_ConfigureEndpoints+0x44>
    420c:	44 e0       	ldi	r20, 0x04	; 4
    420e:	20 e0       	ldi	r18, 0x00	; 0
    4210:	88 e0       	ldi	r24, 0x08	; 8
    4212:	90 e0       	ldi	r25, 0x00	; 0
    4214:	03 c0       	rjmp	.+6      	; 0x421c <HID_Device_ConfigureEndpoints+0x52>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    4216:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    4218:	88 0f       	add	r24, r24
    421a:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    421c:	86 17       	cp	r24, r22
    421e:	97 07       	cpc	r25, r23
    4220:	d0 f3       	brcs	.-12     	; 0x4216 <HID_Device_ConfigureEndpoints+0x4c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    4222:	42 60       	ori	r20, 0x02	; 2
    4224:	22 95       	swap	r18
    4226:	20 7f       	andi	r18, 0xF0	; 240
    4228:	42 2b       	or	r20, r18
    422a:	83 2f       	mov	r24, r19
    422c:	61 ec       	ldi	r22, 0xC1	; 193
    422e:	63 d9       	rcall	.-3386   	; 0x34f6 <Endpoint_ConfigureEndpoint_Prv>
    4230:	81 11       	cpse	r24, r1
    4232:	81 e0       	ldi	r24, 0x01	; 1
	{
		return false;
	}

	return true;
}
    4234:	df 91       	pop	r29
    4236:	cf 91       	pop	r28
    4238:	08 95       	ret

0000423a <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    423a:	6f 92       	push	r6
    423c:	7f 92       	push	r7
    423e:	8f 92       	push	r8
    4240:	9f 92       	push	r9
    4242:	af 92       	push	r10
    4244:	bf 92       	push	r11
    4246:	cf 92       	push	r12
    4248:	df 92       	push	r13
    424a:	ef 92       	push	r14
    424c:	ff 92       	push	r15
    424e:	0f 93       	push	r16
    4250:	1f 93       	push	r17
    4252:	df 93       	push	r29
    4254:	cf 93       	push	r28
    4256:	00 d0       	rcall	.+0      	; 0x4258 <HID_Device_ProcessControlRequest+0x1e>
    4258:	0f 92       	push	r0
    425a:	cd b7       	in	r28, 0x3d	; 61
    425c:	de b7       	in	r29, 0x3e	; 62
    425e:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    4260:	6d b6       	in	r6, 0x3d	; 61
    4262:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    4264:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    4268:	83 ff       	sbrs	r24, 3
    426a:	0c c1       	rjmp	.+536    	; 0x4484 <HID_Device_ProcessControlRequest+0x24a>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    426c:	f6 01       	movw	r30, r12
    426e:	80 81       	ld	r24, Z
    4270:	90 e0       	ldi	r25, 0x00	; 0
    4272:	20 91 2e 04 	lds	r18, 0x042E
    4276:	30 91 2f 04 	lds	r19, 0x042F
    427a:	28 17       	cp	r18, r24
    427c:	39 07       	cpc	r19, r25
    427e:	09 f0       	breq	.+2      	; 0x4282 <HID_Device_ProcessControlRequest+0x48>
    4280:	01 c1       	rjmp	.+514    	; 0x4484 <HID_Device_ProcessControlRequest+0x24a>
	  return;

	switch (USB_ControlRequest.bRequest)
    4282:	80 91 2b 04 	lds	r24, 0x042B
    4286:	83 30       	cpi	r24, 0x03	; 3
    4288:	09 f4       	brne	.+2      	; 0x428c <HID_Device_ProcessControlRequest+0x52>
    428a:	ac c0       	rjmp	.+344    	; 0x43e4 <HID_Device_ProcessControlRequest+0x1aa>
    428c:	84 30       	cpi	r24, 0x04	; 4
    428e:	30 f4       	brcc	.+12     	; 0x429c <HID_Device_ProcessControlRequest+0x62>
    4290:	81 30       	cpi	r24, 0x01	; 1
    4292:	71 f0       	breq	.+28     	; 0x42b0 <HID_Device_ProcessControlRequest+0x76>
    4294:	82 30       	cpi	r24, 0x02	; 2
    4296:	09 f0       	breq	.+2      	; 0x429a <HID_Device_ProcessControlRequest+0x60>
    4298:	f5 c0       	rjmp	.+490    	; 0x4484 <HID_Device_ProcessControlRequest+0x24a>
    429a:	dc c0       	rjmp	.+440    	; 0x4454 <HID_Device_ProcessControlRequest+0x21a>
    429c:	8a 30       	cpi	r24, 0x0A	; 10
    429e:	09 f4       	brne	.+2      	; 0x42a2 <HID_Device_ProcessControlRequest+0x68>
    42a0:	c1 c0       	rjmp	.+386    	; 0x4424 <HID_Device_ProcessControlRequest+0x1ea>
    42a2:	8b 30       	cpi	r24, 0x0B	; 11
    42a4:	09 f4       	brne	.+2      	; 0x42a8 <HID_Device_ProcessControlRequest+0x6e>
    42a6:	ab c0       	rjmp	.+342    	; 0x43fe <HID_Device_ProcessControlRequest+0x1c4>
    42a8:	89 30       	cpi	r24, 0x09	; 9
    42aa:	09 f0       	breq	.+2      	; 0x42ae <HID_Device_ProcessControlRequest+0x74>
    42ac:	eb c0       	rjmp	.+470    	; 0x4484 <HID_Device_ProcessControlRequest+0x24a>
    42ae:	56 c0       	rjmp	.+172    	; 0x435c <HID_Device_ProcessControlRequest+0x122>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    42b0:	80 91 2a 04 	lds	r24, 0x042A
    42b4:	81 3a       	cpi	r24, 0xA1	; 161
    42b6:	09 f0       	breq	.+2      	; 0x42ba <HID_Device_ProcessControlRequest+0x80>
    42b8:	e5 c0       	rjmp	.+458    	; 0x4484 <HID_Device_ProcessControlRequest+0x24a>
    42ba:	9d b6       	in	r9, 0x3d	; 61
    42bc:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    42be:	1b 82       	std	Y+3, r1	; 0x03
    42c0:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    42c2:	80 91 2c 04 	lds	r24, 0x042C
    42c6:	10 91 2d 04 	lds	r17, 0x042D
    42ca:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    42cc:	f6 01       	movw	r30, r12
    42ce:	47 81       	ldd	r20, Z+7	; 0x07
    42d0:	8d b7       	in	r24, 0x3d	; 61
    42d2:	9e b7       	in	r25, 0x3e	; 62
    42d4:	84 1b       	sub	r24, r20
    42d6:	91 09       	sbc	r25, r1
    42d8:	0f b6       	in	r0, 0x3f	; 63
    42da:	f8 94       	cli
    42dc:	9e bf       	out	0x3e, r25	; 62
    42de:	0f be       	out	0x3f, r0	; 63
    42e0:	8d bf       	out	0x3d, r24	; 61
    42e2:	ed b6       	in	r14, 0x3d	; 61
    42e4:	fe b6       	in	r15, 0x3e	; 62
    42e6:	08 94       	sec
    42e8:	e1 1c       	adc	r14, r1
    42ea:	f1 1c       	adc	r15, r1

				memset(ReportData, 0, sizeof(ReportData));
    42ec:	be 2c       	mov	r11, r14
    42ee:	af 2c       	mov	r10, r15
    42f0:	c7 01       	movw	r24, r14
    42f2:	60 e0       	ldi	r22, 0x00	; 0
    42f4:	70 e0       	ldi	r23, 0x00	; 0
    42f6:	50 e0       	ldi	r21, 0x00	; 0
    42f8:	f9 d3       	rcall	.+2034   	; 0x4aec <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    42fa:	11 50       	subi	r17, 0x01	; 1
    42fc:	c6 01       	movw	r24, r12
    42fe:	be 01       	movw	r22, r28
    4300:	6f 5f       	subi	r22, 0xFF	; 255
    4302:	7f 4f       	sbci	r23, 0xFF	; 255
    4304:	41 2f       	mov	r20, r17
    4306:	97 01       	movw	r18, r14
    4308:	8e 01       	movw	r16, r28
    430a:	0e 5f       	subi	r16, 0xFE	; 254
    430c:	1f 4f       	sbci	r17, 0xFF	; 255
    430e:	0e 94 55 01 	call	0x2aa	; 0x2aa <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    4312:	f6 01       	movw	r30, r12
    4314:	25 81       	ldd	r18, Z+5	; 0x05
    4316:	36 81       	ldd	r19, Z+6	; 0x06
    4318:	21 15       	cp	r18, r1
    431a:	31 05       	cpc	r19, r1
    431c:	29 f0       	breq	.+10     	; 0x4328 <HID_Device_ProcessControlRequest+0xee>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    431e:	47 81       	ldd	r20, Z+7	; 0x07
    4320:	c9 01       	movw	r24, r18
    4322:	b7 01       	movw	r22, r14
    4324:	50 e0       	ldi	r21, 0x00	; 0
    4326:	d9 d3       	rcall	.+1970   	; 0x4ada <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    4328:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    432c:	80 91 e8 00 	lds	r24, 0x00E8
    4330:	87 7f       	andi	r24, 0xF7	; 247
    4332:	80 93 e8 00 	sts	0x00E8, r24
				}
				
				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    4336:	6a 81       	ldd	r22, Y+2	; 0x02
    4338:	7b 81       	ldd	r23, Y+3	; 0x03
    433a:	8b 2d       	mov	r24, r11
    433c:	9a 2d       	mov	r25, r10
    433e:	c6 da       	rcall	.-2676   	; 0x38cc <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    4340:	80 91 e8 00 	lds	r24, 0x00E8
    4344:	8b 77       	andi	r24, 0x7B	; 123
    4346:	80 93 e8 00 	sts	0x00E8, r24
    434a:	29 2d       	mov	r18, r9
    434c:	38 2d       	mov	r19, r8
    434e:	c9 01       	movw	r24, r18
    4350:	0f b6       	in	r0, 0x3f	; 63
    4352:	f8 94       	cli
    4354:	9e bf       	out	0x3e, r25	; 62
    4356:	0f be       	out	0x3f, r0	; 63
    4358:	8d bf       	out	0x3d, r24	; 61
    435a:	94 c0       	rjmp	.+296    	; 0x4484 <HID_Device_ProcessControlRequest+0x24a>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    435c:	80 91 2a 04 	lds	r24, 0x042A
    4360:	81 32       	cpi	r24, 0x21	; 33
    4362:	09 f0       	breq	.+2      	; 0x4366 <HID_Device_ProcessControlRequest+0x12c>
    4364:	8f c0       	rjmp	.+286    	; 0x4484 <HID_Device_ProcessControlRequest+0x24a>
    4366:	9d b6       	in	r9, 0x3d	; 61
    4368:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    436a:	00 91 30 04 	lds	r16, 0x0430
    436e:	10 91 31 04 	lds	r17, 0x0431
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    4372:	a0 90 2c 04 	lds	r10, 0x042C
    4376:	b0 90 2d 04 	lds	r11, 0x042D
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    437a:	8d b7       	in	r24, 0x3d	; 61
    437c:	9e b7       	in	r25, 0x3e	; 62
    437e:	80 1b       	sub	r24, r16
    4380:	91 0b       	sbc	r25, r17
    4382:	0f b6       	in	r0, 0x3f	; 63
    4384:	f8 94       	cli
    4386:	9e bf       	out	0x3e, r25	; 62
    4388:	0f be       	out	0x3f, r0	; 63
    438a:	8d bf       	out	0x3d, r24	; 61
    438c:	ed b6       	in	r14, 0x3d	; 61
    438e:	fe b6       	in	r15, 0x3e	; 62
    4390:	08 94       	sec
    4392:	e1 1c       	adc	r14, r1
    4394:	f1 1c       	adc	r15, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    4396:	80 91 e8 00 	lds	r24, 0x00E8
    439a:	87 7f       	andi	r24, 0xF7	; 247
    439c:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    43a0:	c7 01       	movw	r24, r14
    43a2:	b8 01       	movw	r22, r16
    43a4:	ef da       	rcall	.-2594   	; 0x3984 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    43a6:	80 91 e8 00 	lds	r24, 0x00E8
    43aa:	8e 77       	andi	r24, 0x7E	; 126
    43ac:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    43b0:	80 e0       	ldi	r24, 0x00	; 0
    43b2:	90 e0       	ldi	r25, 0x00	; 0
    43b4:	aa 20       	and	r10, r10
    43b6:	11 f0       	breq	.+4      	; 0x43bc <HID_Device_ProcessControlRequest+0x182>
    43b8:	81 e0       	ldi	r24, 0x01	; 1
    43ba:	90 e0       	ldi	r25, 0x00	; 0
    43bc:	ba 94       	dec	r11
    43be:	e8 0e       	add	r14, r24
    43c0:	f9 1e       	adc	r15, r25
    43c2:	08 1b       	sub	r16, r24
    43c4:	19 0b       	sbc	r17, r25
    43c6:	c6 01       	movw	r24, r12
    43c8:	6a 2d       	mov	r22, r10
    43ca:	4b 2d       	mov	r20, r11
    43cc:	97 01       	movw	r18, r14
    43ce:	0e 94 40 01 	call	0x280	; 0x280 <CALLBACK_HID_Device_ProcessHIDReport>
    43d2:	89 2d       	mov	r24, r9
    43d4:	98 2d       	mov	r25, r8
    43d6:	9c 01       	movw	r18, r24
    43d8:	0f b6       	in	r0, 0x3f	; 63
    43da:	f8 94       	cli
    43dc:	3e bf       	out	0x3e, r19	; 62
    43de:	0f be       	out	0x3f, r0	; 63
    43e0:	2d bf       	out	0x3d, r18	; 61
    43e2:	50 c0       	rjmp	.+160    	; 0x4484 <HID_Device_ProcessControlRequest+0x24a>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    43e4:	80 91 2a 04 	lds	r24, 0x042A
    43e8:	81 3a       	cpi	r24, 0xA1	; 161
    43ea:	09 f0       	breq	.+2      	; 0x43ee <HID_Device_ProcessControlRequest+0x1b4>
    43ec:	4b c0       	rjmp	.+150    	; 0x4484 <HID_Device_ProcessControlRequest+0x24a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    43ee:	80 91 e8 00 	lds	r24, 0x00E8
    43f2:	87 7f       	andi	r24, 0xF7	; 247
    43f4:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    43f8:	f6 01       	movw	r30, r12
    43fa:	80 85       	ldd	r24, Z+8	; 0x08
    43fc:	3b c0       	rjmp	.+118    	; 0x4474 <HID_Device_ProcessControlRequest+0x23a>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    43fe:	80 91 2a 04 	lds	r24, 0x042A
    4402:	81 32       	cpi	r24, 0x21	; 33
    4404:	09 f0       	breq	.+2      	; 0x4408 <HID_Device_ProcessControlRequest+0x1ce>
    4406:	3e c0       	rjmp	.+124    	; 0x4484 <HID_Device_ProcessControlRequest+0x24a>
    4408:	80 91 e8 00 	lds	r24, 0x00E8
    440c:	87 7f       	andi	r24, 0xF7	; 247
    440e:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    4412:	a6 d8       	rcall	.-3764   	; 0x3560 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    4414:	90 e0       	ldi	r25, 0x00	; 0
    4416:	80 91 2c 04 	lds	r24, 0x042C
    441a:	81 11       	cpse	r24, r1
    441c:	91 e0       	ldi	r25, 0x01	; 1
    441e:	f6 01       	movw	r30, r12
    4420:	90 87       	std	Z+8, r25	; 0x08
    4422:	30 c0       	rjmp	.+96     	; 0x4484 <HID_Device_ProcessControlRequest+0x24a>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    4424:	80 91 2a 04 	lds	r24, 0x042A
    4428:	81 32       	cpi	r24, 0x21	; 33
    442a:	61 f5       	brne	.+88     	; 0x4484 <HID_Device_ProcessControlRequest+0x24a>
    442c:	80 91 e8 00 	lds	r24, 0x00E8
    4430:	87 7f       	andi	r24, 0xF7	; 247
    4432:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    4436:	94 d8       	rcall	.-3800   	; 0x3560 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    4438:	80 91 2c 04 	lds	r24, 0x042C
    443c:	90 91 2d 04 	lds	r25, 0x042D
    4440:	80 70       	andi	r24, 0x00	; 0
    4442:	76 e0       	ldi	r23, 0x06	; 6
    4444:	96 95       	lsr	r25
    4446:	87 95       	ror	r24
    4448:	7a 95       	dec	r23
    444a:	e1 f7       	brne	.-8      	; 0x4444 <HID_Device_ProcessControlRequest+0x20a>
    444c:	f6 01       	movw	r30, r12
    444e:	92 87       	std	Z+10, r25	; 0x0a
    4450:	81 87       	std	Z+9, r24	; 0x09
    4452:	18 c0       	rjmp	.+48     	; 0x4484 <HID_Device_ProcessControlRequest+0x24a>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    4454:	80 91 2a 04 	lds	r24, 0x042A
    4458:	81 3a       	cpi	r24, 0xA1	; 161
    445a:	a1 f4       	brne	.+40     	; 0x4484 <HID_Device_ProcessControlRequest+0x24a>
    445c:	80 91 e8 00 	lds	r24, 0x00E8
    4460:	87 7f       	andi	r24, 0xF7	; 247
    4462:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    4466:	f6 01       	movw	r30, r12
    4468:	81 85       	ldd	r24, Z+9	; 0x09
    446a:	92 85       	ldd	r25, Z+10	; 0x0a
    446c:	96 95       	lsr	r25
    446e:	87 95       	ror	r24
    4470:	96 95       	lsr	r25
    4472:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    4474:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4478:	80 91 e8 00 	lds	r24, 0x00E8
    447c:	8e 77       	andi	r24, 0x7E	; 126
    447e:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    4482:	6e d8       	rcall	.-3876   	; 0x3560 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    4484:	0f b6       	in	r0, 0x3f	; 63
    4486:	f8 94       	cli
    4488:	7e be       	out	0x3e, r7	; 62
    448a:	0f be       	out	0x3f, r0	; 63
    448c:	6d be       	out	0x3d, r6	; 61
    448e:	0f 90       	pop	r0
    4490:	0f 90       	pop	r0
    4492:	0f 90       	pop	r0
    4494:	cf 91       	pop	r28
    4496:	df 91       	pop	r29
    4498:	1f 91       	pop	r17
    449a:	0f 91       	pop	r16
    449c:	ff 90       	pop	r15
    449e:	ef 90       	pop	r14
    44a0:	df 90       	pop	r13
    44a2:	cf 90       	pop	r12
    44a4:	bf 90       	pop	r11
    44a6:	af 90       	pop	r10
    44a8:	9f 90       	pop	r9
    44aa:	8f 90       	pop	r8
    44ac:	7f 90       	pop	r7
    44ae:	6f 90       	pop	r6
    44b0:	08 95       	ret

000044b2 <MS_Device_USBTask>:

	return true;
}

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    44b2:	cf 92       	push	r12
    44b4:	df 92       	push	r13
    44b6:	ef 92       	push	r14
    44b8:	ff 92       	push	r15
    44ba:	0f 93       	push	r16
    44bc:	1f 93       	push	r17
    44be:	df 93       	push	r29
    44c0:	cf 93       	push	r28
    44c2:	00 d0       	rcall	.+0      	; 0x44c4 <MS_Device_USBTask+0x12>
    44c4:	cd b7       	in	r28, 0x3d	; 61
    44c6:	de b7       	in	r29, 0x3e	; 62
    44c8:	8c 01       	movw	r16, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    44ca:	8e b3       	in	r24, 0x1e	; 30
    44cc:	84 30       	cpi	r24, 0x04	; 4
    44ce:	09 f0       	breq	.+2      	; 0x44d2 <MS_Device_USBTask+0x20>
    44d0:	07 c1       	rjmp	.+526    	; 0x46e0 <MS_Device_USBTask+0x22e>
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    44d2:	f8 01       	movw	r30, r16
    44d4:	95 81       	ldd	r25, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    44d6:	90 93 e9 00 	sts	0x00E9, r25
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    44da:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsReadWriteAllowed())
    44de:	85 ff       	sbrs	r24, 5
    44e0:	c9 c0       	rjmp	.+402    	; 0x4674 <MS_Device_USBTask+0x1c2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    44e2:	90 93 e9 00 	sts	0x00E9, r25
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
	
	BytesProcessed = 0;
    44e6:	1a 82       	std	Y+2, r1	; 0x02
    44e8:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    44ea:	2a e0       	ldi	r18, 0x0A	; 10
    44ec:	e2 2e       	mov	r14, r18
    44ee:	f1 2c       	mov	r15, r1
    44f0:	e0 0e       	add	r14, r16
    44f2:	f1 1e       	adc	r15, r17
    44f4:	6e 01       	movw	r12, r28
    44f6:	08 94       	sec
    44f8:	c1 1c       	adc	r12, r1
    44fa:	d1 1c       	adc	r13, r1
    44fc:	05 c0       	rjmp	.+10     	; 0x4508 <MS_Device_USBTask+0x56>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    44fe:	f8 01       	movw	r30, r16
    4500:	86 a9       	ldd	r24, Z+54	; 0x36
    4502:	88 23       	and	r24, r24
    4504:	09 f0       	breq	.+2      	; 0x4508 <MS_Device_USBTask+0x56>
    4506:	b6 c0       	rjmp	.+364    	; 0x4674 <MS_Device_USBTask+0x1c2>
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
	
	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    4508:	c7 01       	movw	r24, r14
    450a:	6f e0       	ldi	r22, 0x0F	; 15
    450c:	70 e0       	ldi	r23, 0x00	; 0
    450e:	a6 01       	movw	r20, r12
    4510:	d7 da       	rcall	.-2642   	; 0x3ac0 <Endpoint_Read_Stream_LE>
    4512:	85 30       	cpi	r24, 0x05	; 5
    4514:	a1 f3       	breq	.-24     	; 0x44fe <MS_Device_USBTask+0x4c>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    4516:	f8 01       	movw	r30, r16
    4518:	82 85       	ldd	r24, Z+10	; 0x0a
    451a:	93 85       	ldd	r25, Z+11	; 0x0b
    451c:	a4 85       	ldd	r26, Z+12	; 0x0c
    451e:	b5 85       	ldd	r27, Z+13	; 0x0d
    4520:	85 55       	subi	r24, 0x55	; 85
    4522:	93 45       	sbci	r25, 0x53	; 83
    4524:	a2 44       	sbci	r26, 0x42	; 66
    4526:	b3 44       	sbci	r27, 0x43	; 67
    4528:	81 f4       	brne	.+32     	; 0x454a <MS_Device_USBTask+0x98>
    452a:	f8 01       	movw	r30, r16
    452c:	97 89       	ldd	r25, Z+23	; 0x17
    452e:	81 85       	ldd	r24, Z+9	; 0x09
    4530:	98 17       	cp	r25, r24
    4532:	58 f4       	brcc	.+22     	; 0x454a <MS_Device_USBTask+0x98>
    4534:	86 89       	ldd	r24, Z+22	; 0x16
    4536:	90 e0       	ldi	r25, 0x00	; 0
    4538:	8f 71       	andi	r24, 0x1F	; 31
    453a:	90 70       	andi	r25, 0x00	; 0
    453c:	89 2b       	or	r24, r25
    453e:	29 f4       	brne	.+10     	; 0x454a <MS_Device_USBTask+0x98>
    4540:	80 8d       	ldd	r24, Z+24	; 0x18
    4542:	88 23       	and	r24, r24
    4544:	11 f0       	breq	.+4      	; 0x454a <MS_Device_USBTask+0x98>
    4546:	81 31       	cpi	r24, 0x11	; 17
    4548:	78 f0       	brcs	.+30     	; 0x4568 <MS_Device_USBTask+0xb6>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    454a:	80 91 eb 00 	lds	r24, 0x00EB
    454e:	80 62       	ori	r24, 0x20	; 32
    4550:	80 93 eb 00 	sts	0x00EB, r24
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength >  16))
	{
		Endpoint_StallTransaction();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    4554:	f8 01       	movw	r30, r16
    4556:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    4558:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    455c:	80 91 eb 00 	lds	r24, 0x00EB
    4560:	80 62       	ori	r24, 0x20	; 32
    4562:	80 93 eb 00 	sts	0x00EB, r24
    4566:	86 c0       	rjmp	.+268    	; 0x4674 <MS_Device_USBTask+0x1c2>
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
    4568:	1a 82       	std	Y+2, r1	; 0x02
    456a:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    456c:	99 e1       	ldi	r25, 0x19	; 25
    456e:	e9 2e       	mov	r14, r25
    4570:	f1 2c       	mov	r15, r1
    4572:	e0 0e       	add	r14, r16
    4574:	f1 1e       	adc	r15, r17
    4576:	6e 01       	movw	r12, r28
    4578:	08 94       	sec
    457a:	c1 1c       	adc	r12, r1
    457c:	d1 1c       	adc	r13, r1
    457e:	05 c0       	rjmp	.+10     	; 0x458a <MS_Device_USBTask+0xd8>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    4580:	f8 01       	movw	r30, r16
    4582:	86 a9       	ldd	r24, Z+54	; 0x36
    4584:	88 23       	and	r24, r24
    4586:	09 f0       	breq	.+2      	; 0x458a <MS_Device_USBTask+0xd8>
    4588:	75 c0       	rjmp	.+234    	; 0x4674 <MS_Device_USBTask+0x1c2>

		return false;
	}

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    458a:	f8 01       	movw	r30, r16
    458c:	60 8d       	ldd	r22, Z+24	; 0x18
    458e:	c7 01       	movw	r24, r14
    4590:	70 e0       	ldi	r23, 0x00	; 0
    4592:	a6 01       	movw	r20, r12
    4594:	95 da       	rcall	.-2774   	; 0x3ac0 <Endpoint_Read_Stream_LE>
    4596:	85 30       	cpi	r24, 0x05	; 5
    4598:	99 f3       	breq	.-26     	; 0x4580 <MS_Device_USBTask+0xce>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    459a:	80 91 e8 00 	lds	r24, 0x00E8
    459e:	8b 77       	andi	r24, 0x7B	; 123
    45a0:	80 93 e8 00 	sts	0x00E8, r24

	if (Endpoint_IsReadWriteAllowed())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    45a4:	f8 01       	movw	r30, r16
    45a6:	86 89       	ldd	r24, Z+22	; 0x16
    45a8:	87 ff       	sbrs	r24, 7
    45aa:	03 c0       	rjmp	.+6      	; 0x45b2 <MS_Device_USBTask+0x100>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    45ac:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    45ae:	80 93 e9 00 	sts	0x00E9, r24

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    45b2:	c8 01       	movw	r24, r16
    45b4:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <CALLBACK_MS_Device_SCSICommandReceived>

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    45b8:	91 e0       	ldi	r25, 0x01	; 1
    45ba:	98 27       	eor	r25, r24
    45bc:	f8 01       	movw	r30, r16
    45be:	95 ab       	std	Z+53, r25	; 0x35
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    45c0:	25 e5       	ldi	r18, 0x55	; 85
    45c2:	33 e5       	ldi	r19, 0x53	; 83
    45c4:	42 e4       	ldi	r20, 0x42	; 66
    45c6:	53 e5       	ldi	r21, 0x53	; 83
    45c8:	21 a7       	std	Z+41, r18	; 0x29
    45ca:	32 a7       	std	Z+42, r19	; 0x2a
    45cc:	43 a7       	std	Z+43, r20	; 0x2b
    45ce:	54 a7       	std	Z+44, r21	; 0x2c
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    45d0:	26 85       	ldd	r18, Z+14	; 0x0e
    45d2:	37 85       	ldd	r19, Z+15	; 0x0f
    45d4:	40 89       	ldd	r20, Z+16	; 0x10
    45d6:	51 89       	ldd	r21, Z+17	; 0x11
    45d8:	25 a7       	std	Z+45, r18	; 0x2d
    45da:	36 a7       	std	Z+46, r19	; 0x2e
    45dc:	47 a7       	std	Z+47, r20	; 0x2f
    45de:	50 ab       	std	Z+48, r21	; 0x30
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    45e0:	22 89       	ldd	r18, Z+18	; 0x12
    45e2:	33 89       	ldd	r19, Z+19	; 0x13
    45e4:	44 89       	ldd	r20, Z+20	; 0x14
    45e6:	55 89       	ldd	r21, Z+21	; 0x15
    45e8:	21 ab       	std	Z+49, r18	; 0x31
    45ea:	32 ab       	std	Z+50, r19	; 0x32
    45ec:	43 ab       	std	Z+51, r20	; 0x33
    45ee:	54 ab       	std	Z+52, r21	; 0x34

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    45f0:	88 23       	and	r24, r24
    45f2:	51 f4       	brne	.+20     	; 0x4608 <MS_Device_USBTask+0x156>
    45f4:	21 15       	cp	r18, r1
    45f6:	31 05       	cpc	r19, r1
    45f8:	41 05       	cpc	r20, r1
    45fa:	51 05       	cpc	r21, r1
    45fc:	29 f0       	breq	.+10     	; 0x4608 <MS_Device_USBTask+0x156>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    45fe:	80 91 eb 00 	lds	r24, 0x00EB
    4602:	80 62       	ori	r24, 0x20	; 32
    4604:	80 93 eb 00 	sts	0x00EB, r24
	return true;
}

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    4608:	f8 01       	movw	r30, r16
    460a:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    460c:	80 93 e9 00 	sts	0x00E9, r24
    4610:	04 c0       	rjmp	.+8      	; 0x461a <MS_Device_USBTask+0x168>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    4612:	f8 01       	movw	r30, r16
    4614:	86 a9       	ldd	r24, Z+54	; 0x36
    4616:	88 23       	and	r24, r24
    4618:	69 f5       	brne	.+90     	; 0x4674 <MS_Device_USBTask+0x1c2>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    461a:	80 91 eb 00 	lds	r24, 0x00EB

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);

	while (Endpoint_IsStalled())
    461e:	85 fd       	sbrc	r24, 5
    4620:	f8 cf       	rjmp	.-16     	; 0x4612 <MS_Device_USBTask+0x160>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    4622:	f8 01       	movw	r30, r16
    4624:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    4626:	80 93 e9 00 	sts	0x00E9, r24
    462a:	04 c0       	rjmp	.+8      	; 0x4634 <MS_Device_USBTask+0x182>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    462c:	f8 01       	movw	r30, r16
    462e:	86 a9       	ldd	r24, Z+54	; 0x36
    4630:	88 23       	and	r24, r24
    4632:	01 f5       	brne	.+64     	; 0x4674 <MS_Device_USBTask+0x1c2>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    4634:	80 91 eb 00 	lds	r24, 0x00EB
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);

	while (Endpoint_IsStalled())
    4638:	85 fd       	sbrc	r24, 5
    463a:	f8 cf       	rjmp	.-16     	; 0x462c <MS_Device_USBTask+0x17a>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
    463c:	1a 82       	std	Y+2, r1	; 0x02
    463e:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    4640:	89 e2       	ldi	r24, 0x29	; 41
    4642:	e8 2e       	mov	r14, r24
    4644:	f1 2c       	mov	r15, r1
    4646:	e0 0e       	add	r14, r16
    4648:	f1 1e       	adc	r15, r17
    464a:	6e 01       	movw	r12, r28
    464c:	08 94       	sec
    464e:	c1 1c       	adc	r12, r1
    4650:	d1 1c       	adc	r13, r1
    4652:	04 c0       	rjmp	.+8      	; 0x465c <MS_Device_USBTask+0x1aa>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    4654:	f8 01       	movw	r30, r16
    4656:	86 a9       	ldd	r24, Z+54	; 0x36
    4658:	88 23       	and	r24, r24
    465a:	61 f4       	brne	.+24     	; 0x4674 <MS_Device_USBTask+0x1c2>
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    465c:	c7 01       	movw	r24, r14
    465e:	6d e0       	ldi	r22, 0x0D	; 13
    4660:	70 e0       	ldi	r23, 0x00	; 0
    4662:	a6 01       	movw	r20, r12
    4664:	cf da       	rcall	.-2658   	; 0x3c04 <Endpoint_Write_Stream_LE>
    4666:	85 30       	cpi	r24, 0x05	; 5
    4668:	a9 f3       	breq	.-22     	; 0x4654 <MS_Device_USBTask+0x1a2>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    466a:	80 91 e8 00 	lds	r24, 0x00E8
    466e:	8e 77       	andi	r24, 0x7E	; 126
    4670:	80 93 e8 00 	sts	0x00E8, r24

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    4674:	f8 01       	movw	r30, r16
    4676:	86 a9       	ldd	r24, Z+54	; 0x36
    4678:	88 23       	and	r24, r24
    467a:	91 f1       	breq	.+100    	; 0x46e0 <MS_Device_USBTask+0x22e>
	{
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    467c:	45 81       	ldd	r20, Z+5	; 0x05
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    467e:	21 e0       	ldi	r18, 0x01	; 1
    4680:	30 e0       	ldi	r19, 0x00	; 0
    4682:	c9 01       	movw	r24, r18
    4684:	04 2e       	mov	r0, r20
    4686:	02 c0       	rjmp	.+4      	; 0x468c <MS_Device_USBTask+0x1da>
    4688:	88 0f       	add	r24, r24
    468a:	99 1f       	adc	r25, r25
    468c:	0a 94       	dec	r0
    468e:	e2 f7       	brpl	.-8      	; 0x4688 <MS_Device_USBTask+0x1d6>
    4690:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    4694:	10 92 ea 00 	sts	0x00EA, r1
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    4698:	91 81       	ldd	r25, Z+1	; 0x01
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    469a:	09 2e       	mov	r0, r25
    469c:	02 c0       	rjmp	.+4      	; 0x46a2 <MS_Device_USBTask+0x1f0>
    469e:	22 0f       	add	r18, r18
    46a0:	33 1f       	adc	r19, r19
    46a2:	0a 94       	dec	r0
    46a4:	e2 f7       	brpl	.-8      	; 0x469e <MS_Device_USBTask+0x1ec>
    46a6:	20 93 ea 00 	sts	0x00EA, r18
				UERST = 0;
    46aa:	10 92 ea 00 	sts	0x00EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    46ae:	40 93 e9 00 	sts	0x00E9, r20
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    46b2:	80 91 eb 00 	lds	r24, 0x00EB
    46b6:	80 61       	ori	r24, 0x10	; 16
    46b8:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    46bc:	80 91 eb 00 	lds	r24, 0x00EB
    46c0:	88 60       	ori	r24, 0x08	; 8
    46c2:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    46c6:	90 93 e9 00 	sts	0x00E9, r25
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    46ca:	80 91 eb 00 	lds	r24, 0x00EB
    46ce:	80 61       	ori	r24, 0x10	; 16
    46d0:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    46d4:	80 91 eb 00 	lds	r24, 0x00EB
    46d8:	88 60       	ori	r24, 0x08	; 8
    46da:	80 93 eb 00 	sts	0x00EB, r24
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    46de:	16 aa       	std	Z+54, r1	; 0x36
	}
}
    46e0:	0f 90       	pop	r0
    46e2:	0f 90       	pop	r0
    46e4:	cf 91       	pop	r28
    46e6:	df 91       	pop	r29
    46e8:	1f 91       	pop	r17
    46ea:	0f 91       	pop	r16
    46ec:	ff 90       	pop	r15
    46ee:	ef 90       	pop	r14
    46f0:	df 90       	pop	r13
    46f2:	cf 90       	pop	r12
    46f4:	08 95       	ret

000046f6 <MS_Device_ConfigureEndpoints>:
			break;
	}
}

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    46f6:	1f 93       	push	r17
    46f8:	cf 93       	push	r28
    46fa:	df 93       	push	r29
    46fc:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    46fe:	0a 96       	adiw	r24, 0x0a	; 10
    4700:	fc 01       	movw	r30, r24
    4702:	8d e2       	ldi	r24, 0x2D	; 45
    4704:	df 01       	movw	r26, r30
    4706:	1d 92       	st	X+, r1
    4708:	8a 95       	dec	r24
    470a:	e9 f7       	brne	.-6      	; 0x4706 <MS_Device_ConfigureEndpoints+0x10>
    470c:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == MSInterfaceInfo->Config.DataINEndpointNumber)
    470e:	89 81       	ldd	r24, Y+1	; 0x01
    4710:	18 17       	cp	r17, r24
    4712:	29 f4       	brne	.+10     	; 0x471e <MS_Device_ConfigureEndpoints+0x28>
		{
			Size         = MSInterfaceInfo->Config.DataINEndpointSize;
    4714:	6a 81       	ldd	r22, Y+2	; 0x02
    4716:	7b 81       	ldd	r23, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataINEndpointDoubleBank;
    4718:	8c 81       	ldd	r24, Y+4	; 0x04
    471a:	30 e8       	ldi	r19, 0x80	; 128
    471c:	07 c0       	rjmp	.+14     	; 0x472c <MS_Device_ConfigureEndpoints+0x36>
		}
		else if (EndpointNum == MSInterfaceInfo->Config.DataOUTEndpointNumber)
    471e:	8d 81       	ldd	r24, Y+5	; 0x05
    4720:	18 17       	cp	r17, r24
    4722:	01 f5       	brne	.+64     	; 0x4764 <MS_Device_ConfigureEndpoints+0x6e>
		{
			Size         = MSInterfaceInfo->Config.DataOUTEndpointSize;
    4724:	6e 81       	ldd	r22, Y+6	; 0x06
    4726:	7f 81       	ldd	r23, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataOUTEndpointDoubleBank;
    4728:	88 85       	ldd	r24, Y+8	; 0x08
    472a:	30 e0       	ldi	r19, 0x00	; 0
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
    472c:	88 23       	and	r24, r24
    472e:	11 f4       	brne	.+4      	; 0x4734 <MS_Device_ConfigureEndpoints+0x3e>
    4730:	40 e0       	ldi	r20, 0x00	; 0
    4732:	01 c0       	rjmp	.+2      	; 0x4736 <MS_Device_ConfigureEndpoints+0x40>
    4734:	44 e0       	ldi	r20, 0x04	; 4
    4736:	20 e0       	ldi	r18, 0x00	; 0
    4738:	88 e0       	ldi	r24, 0x08	; 8
    473a:	90 e0       	ldi	r25, 0x00	; 0
    473c:	03 c0       	rjmp	.+6      	; 0x4744 <MS_Device_ConfigureEndpoints+0x4e>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    473e:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    4740:	88 0f       	add	r24, r24
    4742:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    4744:	86 17       	cp	r24, r22
    4746:	97 07       	cpc	r25, r23
    4748:	d0 f3       	brcs	.-12     	; 0x473e <MS_Device_ConfigureEndpoints+0x48>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    474a:	60 e0       	ldi	r22, 0x00	; 0
    474c:	31 11       	cpse	r19, r1
    474e:	61 e0       	ldi	r22, 0x01	; 1
    4750:	60 68       	ori	r22, 0x80	; 128
    4752:	42 60       	ori	r20, 0x02	; 2
    4754:	22 95       	swap	r18
    4756:	20 7f       	andi	r18, 0xF0	; 240
    4758:	42 2b       	or	r20, r18
    475a:	81 2f       	mov	r24, r17
    475c:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <Endpoint_ConfigureEndpoint_Prv>
    4760:	88 23       	and	r24, r24
    4762:	21 f0       	breq	.+8      	; 0x476c <MS_Device_ConfigureEndpoints+0x76>

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    4764:	1f 5f       	subi	r17, 0xFF	; 255
    4766:	17 30       	cpi	r17, 0x07	; 7
    4768:	91 f6       	brne	.-92     	; 0x470e <MS_Device_ConfigureEndpoints+0x18>
    476a:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
    476c:	df 91       	pop	r29
    476e:	cf 91       	pop	r28
    4770:	1f 91       	pop	r17
    4772:	08 95       	ret

00004774 <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorage.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    4774:	cf 93       	push	r28
    4776:	df 93       	push	r29
    4778:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    477a:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    477e:	83 ff       	sbrs	r24, 3
    4780:	31 c0       	rjmp	.+98     	; 0x47e4 <MS_Device_ProcessControlRequest+0x70>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    4782:	88 81       	ld	r24, Y
    4784:	90 e0       	ldi	r25, 0x00	; 0
    4786:	20 91 2e 04 	lds	r18, 0x042E
    478a:	30 91 2f 04 	lds	r19, 0x042F
    478e:	28 17       	cp	r18, r24
    4790:	39 07       	cpc	r19, r25
    4792:	41 f5       	brne	.+80     	; 0x47e4 <MS_Device_ProcessControlRequest+0x70>
	  return;

	switch (USB_ControlRequest.bRequest)
    4794:	80 91 2b 04 	lds	r24, 0x042B
    4798:	8e 3f       	cpi	r24, 0xFE	; 254
    479a:	81 f0       	breq	.+32     	; 0x47bc <MS_Device_ProcessControlRequest+0x48>
    479c:	8f 3f       	cpi	r24, 0xFF	; 255
    479e:	11 f5       	brne	.+68     	; 0x47e4 <MS_Device_ProcessControlRequest+0x70>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    47a0:	80 91 2a 04 	lds	r24, 0x042A
    47a4:	81 32       	cpi	r24, 0x21	; 33
    47a6:	f1 f4       	brne	.+60     	; 0x47e4 <MS_Device_ProcessControlRequest+0x70>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    47a8:	80 91 e8 00 	lds	r24, 0x00E8
    47ac:	87 7f       	andi	r24, 0xF7	; 247
    47ae:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    47b2:	0e 94 b0 1a 	call	0x3560	; 0x3560 <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
    47b6:	81 e0       	ldi	r24, 0x01	; 1
    47b8:	8e ab       	std	Y+54, r24	; 0x36
    47ba:	14 c0       	rjmp	.+40     	; 0x47e4 <MS_Device_ProcessControlRequest+0x70>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    47bc:	80 91 2a 04 	lds	r24, 0x042A
    47c0:	81 3a       	cpi	r24, 0xA1	; 161
    47c2:	81 f4       	brne	.+32     	; 0x47e4 <MS_Device_ProcessControlRequest+0x70>
    47c4:	80 91 e8 00 	lds	r24, 0x00E8
    47c8:	87 7f       	andi	r24, 0xF7	; 247
    47ca:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    47ce:	89 85       	ldd	r24, Y+9	; 0x09
    47d0:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    47d2:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    47d6:	80 91 e8 00 	lds	r24, 0x00E8
    47da:	8e 77       	andi	r24, 0x7E	; 126
    47dc:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    47e0:	0e 94 b0 1a 	call	0x3560	; 0x3560 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    47e4:	df 91       	pop	r29
    47e6:	cf 91       	pop	r28
    47e8:	08 95       	ret

000047ea <Temperature_GetTemperature>:
			 *
			 *  \param[in] MUXMask  ADC channel mask, reference mask and adjustment mask.
			 */
			static inline void ADC_StartReading(const uint16_t MUXMask)
			{
				ADMUX = MUXMask;
    47ea:	80 e4       	ldi	r24, 0x40	; 64
    47ec:	80 93 7c 00 	sts	0x007C, r24
				  ADCSRB |=  (1 << MUX5);
				else
				  ADCSRB &= ~(1 << MUX5);
				#endif

				ADCSRA |= (1 << ADSC);
    47f0:	80 91 7a 00 	lds	r24, 0x007A
    47f4:	80 64       	ori	r24, 0x40	; 64
    47f6:	80 93 7a 00 	sts	0x007A, r24
			 *          complete and ready to be read out with \ref ADC_GetResult().
			 */
			static inline bool ADC_IsReadingComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool ADC_IsReadingComplete(void)
			{
				return ((ADCSRA & (1 << ADIF)) ? true : false);
    47fa:	80 91 7a 00 	lds	r24, 0x007A
			static inline uint16_t ADC_GetChannelReading(const uint16_t MUXMask) ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t ADC_GetChannelReading(const uint16_t MUXMask)
			{
				ADC_StartReading(MUXMask);

				while (!(ADC_IsReadingComplete()));
    47fe:	84 ff       	sbrs	r24, 4
    4800:	fc cf       	rjmp	.-8      	; 0x47fa <Temperature_GetTemperature+0x10>
			 *  \return The result of the last ADC conversion as an unsigned value.
			 */
			static inline uint16_t ADC_GetResult(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t ADC_GetResult(void)
			{
				ADCSRA |= (1 << ADIF);
    4802:	80 91 7a 00 	lds	r24, 0x007A
    4806:	80 61       	ori	r24, 0x10	; 16
    4808:	80 93 7a 00 	sts	0x007A, r24
				return ADC;
    480c:	60 91 78 00 	lds	r22, 0x0078
    4810:	70 91 79 00 	lds	r23, 0x0079

int8_t Temperature_GetTemperature(void)
{
	uint16_t Temp_ADC = ADC_GetChannelReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | TEMP_ADC_CHANNEL_MASK);

	if (Temp_ADC > pgm_read_word(&Temperature_Lookup[0]))
    4814:	41 e5       	ldi	r20, 0x51	; 81
    4816:	51 e0       	ldi	r21, 0x01	; 1
    4818:	fa 01       	movw	r30, r20
    481a:	85 91       	lpm	r24, Z+
    481c:	94 91       	lpm	r25, Z+
    481e:	86 17       	cp	r24, r22
    4820:	97 07       	cpc	r25, r23
    4822:	10 f4       	brcc	.+4      	; 0x4828 <Temperature_GetTemperature+0x3e>
    4824:	8b ee       	ldi	r24, 0xEB	; 235
    4826:	08 95       	ret
    4828:	20 e0       	ldi	r18, 0x00	; 0
    482a:	30 e0       	ldi	r19, 0x00	; 0
	  return TEMP_MIN_TEMP;

	for (uint16_t Index = 0; Index < TEMP_TABLE_SIZE; Index++)
	{
		if (Temp_ADC > pgm_read_word(&Temperature_Lookup[Index]))
    482c:	fa 01       	movw	r30, r20
    482e:	85 91       	lpm	r24, Z+
    4830:	94 91       	lpm	r25, Z+
    4832:	86 17       	cp	r24, r22
    4834:	97 07       	cpc	r25, r23
    4836:	18 f4       	brcc	.+6      	; 0x483e <Temperature_GetTemperature+0x54>
		  return (Index + TEMP_TABLE_OFFSET_DEGREES);
    4838:	82 2f       	mov	r24, r18
    483a:	85 51       	subi	r24, 0x15	; 21
    483c:	08 95       	ret
	uint16_t Temp_ADC = ADC_GetChannelReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | TEMP_ADC_CHANNEL_MASK);

	if (Temp_ADC > pgm_read_word(&Temperature_Lookup[0]))
	  return TEMP_MIN_TEMP;

	for (uint16_t Index = 0; Index < TEMP_TABLE_SIZE; Index++)
    483e:	2f 5f       	subi	r18, 0xFF	; 255
    4840:	3f 4f       	sbci	r19, 0xFF	; 255
    4842:	4e 5f       	subi	r20, 0xFE	; 254
    4844:	5f 4f       	sbci	r21, 0xFF	; 255
    4846:	28 37       	cpi	r18, 0x78	; 120
    4848:	31 05       	cpc	r19, r1
    484a:	81 f7       	brne	.-32     	; 0x482c <Temperature_GetTemperature+0x42>
    484c:	82 e6       	ldi	r24, 0x62	; 98
		if (Temp_ADC > pgm_read_word(&Temperature_Lookup[Index]))
		  return (Index + TEMP_TABLE_OFFSET_DEGREES);
	}

	return TEMP_MAX_TEMP;
}
    484e:	08 95       	ret

00004850 <TWI_StartTransmission>:
#define  __INCLUDE_FROM_TWI_C
#include "../TWI.h"

uint8_t TWI_StartTransmission(const uint8_t SlaveAddress,
                              const uint8_t TimeoutMS)
{
    4850:	78 2f       	mov	r23, r24
	for (;;)
	{
		bool     BusCaptured = false;
		uint16_t TimeoutRemaining;

		TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    4852:	84 ea       	ldi	r24, 0xA4	; 164
    4854:	80 93 bc 00 	sts	0x00BC, r24

		TimeoutRemaining = (TimeoutMS * 100);
    4858:	84 e6       	ldi	r24, 0x64	; 100
    485a:	68 9f       	mul	r22, r24
    485c:	a0 01       	movw	r20, r0
    485e:	11 24       	eor	r1, r1
    4860:	9a 01       	movw	r18, r20
    4862:	60 e0       	ldi	r22, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4864:	fa e1       	ldi	r31, 0x1A	; 26
					case TW_START:
					case TW_REP_START:
						BusCaptured = true;
						break;
					case TW_MT_ARB_LOST:
						TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    4866:	e4 ea       	ldi	r30, 0xA4	; 164
    4868:	1e c0       	rjmp	.+60     	; 0x48a6 <TWI_StartTransmission+0x56>
		TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining-- && !(BusCaptured))
		{
			if (TWCR & (1 << TWINT))
    486a:	80 91 bc 00 	lds	r24, 0x00BC
    486e:	87 ff       	sbrs	r24, 7
    4870:	17 c0       	rjmp	.+46     	; 0x48a0 <TWI_StartTransmission+0x50>
			{
				switch (TWSR & TW_STATUS_MASK)
    4872:	80 91 b9 00 	lds	r24, 0x00B9
    4876:	90 e0       	ldi	r25, 0x00	; 0
    4878:	88 7f       	andi	r24, 0xF8	; 248
    487a:	90 70       	andi	r25, 0x00	; 0
    487c:	80 31       	cpi	r24, 0x10	; 16
    487e:	91 05       	cpc	r25, r1
    4880:	71 f0       	breq	.+28     	; 0x489e <TWI_StartTransmission+0x4e>
    4882:	88 33       	cpi	r24, 0x38	; 56
    4884:	91 05       	cpc	r25, r1
    4886:	19 f0       	breq	.+6      	; 0x488e <TWI_StartTransmission+0x3e>
    4888:	08 97       	sbiw	r24, 0x08	; 8
    488a:	21 f4       	brne	.+8      	; 0x4894 <TWI_StartTransmission+0x44>
    488c:	08 c0       	rjmp	.+16     	; 0x489e <TWI_StartTransmission+0x4e>
					case TW_START:
					case TW_REP_START:
						BusCaptured = true;
						break;
					case TW_MT_ARB_LOST:
						TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    488e:	e0 93 bc 00 	sts	0x00BC, r30
    4892:	09 c0       	rjmp	.+18     	; 0x48a6 <TWI_StartTransmission+0x56>
						continue;
					default:
						TWCR = (1 << TWEN);
    4894:	84 e0       	ldi	r24, 0x04	; 4
    4896:	80 93 bc 00 	sts	0x00BC, r24
    489a:	81 e0       	ldi	r24, 0x01	; 1
    489c:	08 95       	ret
						return TWI_ERROR_BusFault;
    489e:	61 e0       	ldi	r22, 0x01	; 1
    48a0:	8f 2f       	mov	r24, r31
    48a2:	8a 95       	dec	r24
    48a4:	f1 f7       	brne	.-4      	; 0x48a2 <TWI_StartTransmission+0x52>
		uint16_t TimeoutRemaining;

		TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining-- && !(BusCaptured))
    48a6:	21 50       	subi	r18, 0x01	; 1
    48a8:	30 40       	sbci	r19, 0x00	; 0
    48aa:	8f ef       	ldi	r24, 0xFF	; 255
    48ac:	2f 3f       	cpi	r18, 0xFF	; 255
    48ae:	38 07       	cpc	r19, r24
    48b0:	11 f0       	breq	.+4      	; 0x48b6 <TWI_StartTransmission+0x66>
    48b2:	66 23       	and	r22, r22
    48b4:	d1 f2       	breq	.-76     	; 0x486a <TWI_StartTransmission+0x1a>
			}

			_delay_us(10);
		}

		if (!(TimeoutRemaining))
    48b6:	23 2b       	or	r18, r19
    48b8:	29 f4       	brne	.+10     	; 0x48c4 <TWI_StartTransmission+0x74>
		{
			TWCR = (1 << TWEN);
    48ba:	84 e0       	ldi	r24, 0x04	; 4
    48bc:	80 93 bc 00 	sts	0x00BC, r24
    48c0:	82 e0       	ldi	r24, 0x02	; 2
    48c2:	08 95       	ret
			return TWI_ERROR_BusCaptureTimeout;
		}

		TWDR = SlaveAddress;
    48c4:	70 93 bb 00 	sts	0x00BB, r23
		TWCR = ((1 << TWINT) | (1 << TWEN));
    48c8:	84 e8       	ldi	r24, 0x84	; 132
    48ca:	80 93 bc 00 	sts	0x00BC, r24
    48ce:	9a e1       	ldi	r25, 0x1A	; 26
    48d0:	07 c0       	rjmp	.+14     	; 0x48e0 <TWI_StartTransmission+0x90>

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining--)
		{
			if (TWCR & (1 << TWINT))
    48d2:	80 91 bc 00 	lds	r24, 0x00BC
    48d6:	87 fd       	sbrc	r24, 7
    48d8:	09 c0       	rjmp	.+18     	; 0x48ec <TWI_StartTransmission+0x9c>
    48da:	89 2f       	mov	r24, r25
    48dc:	8a 95       	dec	r24
    48de:	f1 f7       	brne	.-4      	; 0x48dc <TWI_StartTransmission+0x8c>

		TWDR = SlaveAddress;
		TWCR = ((1 << TWINT) | (1 << TWEN));

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining--)
    48e0:	41 50       	subi	r20, 0x01	; 1
    48e2:	50 40       	sbci	r21, 0x00	; 0
    48e4:	8f ef       	ldi	r24, 0xFF	; 255
    48e6:	4f 3f       	cpi	r20, 0xFF	; 255
    48e8:	58 07       	cpc	r21, r24
    48ea:	99 f7       	brne	.-26     	; 0x48d2 <TWI_StartTransmission+0x82>
			  break;

			_delay_us(10);
		}

		if (!(TimeoutRemaining))
    48ec:	45 2b       	or	r20, r21
    48ee:	11 f4       	brne	.+4      	; 0x48f4 <TWI_StartTransmission+0xa4>
    48f0:	83 e0       	ldi	r24, 0x03	; 3
    48f2:	08 95       	ret
		  return TWI_ERROR_SlaveResponseTimeout;

		switch (TWSR & TW_STATUS_MASK)
    48f4:	80 91 b9 00 	lds	r24, 0x00B9
    48f8:	90 e0       	ldi	r25, 0x00	; 0
    48fa:	88 7f       	andi	r24, 0xF8	; 248
    48fc:	90 70       	andi	r25, 0x00	; 0
    48fe:	88 31       	cpi	r24, 0x18	; 24
    4900:	91 05       	cpc	r25, r1
    4902:	19 f0       	breq	.+6      	; 0x490a <TWI_StartTransmission+0xba>
    4904:	80 34       	cpi	r24, 0x40	; 64
    4906:	91 05       	cpc	r25, r1
    4908:	11 f4       	brne	.+4      	; 0x490e <TWI_StartTransmission+0xbe>
    490a:	80 e0       	ldi	r24, 0x00	; 0
    490c:	08 95       	ret
		{
			case TW_MT_SLA_ACK:
			case TW_MR_SLA_ACK:
				return TWI_ERROR_NoError;
			default:
				TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    490e:	84 e9       	ldi	r24, 0x94	; 148
    4910:	80 93 bc 00 	sts	0x00BC, r24
    4914:	84 e0       	ldi	r24, 0x04	; 4
				return TWI_ERROR_SlaveNotReady;
		}
	}
}
    4916:	08 95       	ret

00004918 <TWI_WritePacket>:
                        const uint8_t TimeoutMS,
                        const uint8_t* InternalAddress,
                        uint8_t InternalAddressLen,
                        const uint8_t* Buffer,
                        uint8_t Length)
{
    4918:	ef 92       	push	r14
    491a:	ff 92       	push	r15
    491c:	0f 93       	push	r16
    491e:	1f 93       	push	r17
    4920:	cf 93       	push	r28
    4922:	df 93       	push	r29
    4924:	ea 01       	movw	r28, r20
    4926:	f2 2e       	mov	r15, r18
	uint8_t ErrorCode;

	if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    4928:	81 60       	ori	r24, 0x01	; 1
    492a:	92 df       	rcall	.-220    	; 0x4850 <TWI_StartTransmission>
    492c:	98 2f       	mov	r25, r24
    492e:	88 23       	and	r24, r24
    4930:	91 f0       	breq	.+36     	; 0x4956 <TWI_WritePacket+0x3e>
    4932:	31 c0       	rjmp	.+98     	; 0x4996 <TWI_WritePacket+0x7e>
	                                       TimeoutMS)) == TWI_ERROR_NoError)
	{
		while (InternalAddressLen--)
		{
			if (!(TWI_SendByte(*(InternalAddress++))))
    4934:	88 81       	ld	r24, Y
			 *
			 *  \return Boolean \c true if the recipient ACKed the byte, \c false otherwise
			 */
			static inline bool TWI_SendByte(const uint8_t Byte)
			{
				TWDR = Byte;
    4936:	80 93 bb 00 	sts	0x00BB, r24
				TWCR = ((1 << TWINT) | (1 << TWEN));
    493a:	20 93 bc 00 	sts	0x00BC, r18
				while (!(TWCR & (1 << TWINT)));
    493e:	80 91 bc 00 	lds	r24, 0x00BC
    4942:	87 ff       	sbrs	r24, 7
    4944:	fc cf       	rjmp	.-8      	; 0x493e <TWI_WritePacket+0x26>

				return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    4946:	80 91 b9 00 	lds	r24, 0x00B9
    494a:	fa 94       	dec	r15
    494c:	88 7f       	andi	r24, 0xF8	; 248
    494e:	88 32       	cpi	r24, 0x28	; 40
    4950:	d9 f4       	brne	.+54     	; 0x4988 <TWI_WritePacket+0x70>
    4952:	21 96       	adiw	r28, 0x01	; 1
    4954:	01 c0       	rjmp	.+2      	; 0x4958 <TWI_WritePacket+0x40>
			 *  \return Boolean \c true if the recipient ACKed the byte, \c false otherwise
			 */
			static inline bool TWI_SendByte(const uint8_t Byte)
			{
				TWDR = Byte;
				TWCR = ((1 << TWINT) | (1 << TWEN));
    4956:	24 e8       	ldi	r18, 0x84	; 132
	uint8_t ErrorCode;

	if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
	                                       TimeoutMS)) == TWI_ERROR_NoError)
	{
		while (InternalAddressLen--)
    4958:	ff 20       	and	r15, r15
    495a:	61 f7       	brne	.-40     	; 0x4934 <TWI_WritePacket+0x1c>
    495c:	16 c0       	rjmp	.+44     	; 0x498a <TWI_WritePacket+0x72>
			}
		}

		while (Length--)
		{
			if (!(TWI_SendByte(*(Buffer++))))
    495e:	f8 01       	movw	r30, r16
    4960:	80 81       	ld	r24, Z
			 *
			 *  \return Boolean \c true if the recipient ACKed the byte, \c false otherwise
			 */
			static inline bool TWI_SendByte(const uint8_t Byte)
			{
				TWDR = Byte;
    4962:	80 93 bb 00 	sts	0x00BB, r24
				TWCR = ((1 << TWINT) | (1 << TWEN));
    4966:	20 93 bc 00 	sts	0x00BC, r18
				while (!(TWCR & (1 << TWINT)));
    496a:	80 91 bc 00 	lds	r24, 0x00BC
    496e:	87 ff       	sbrs	r24, 7
    4970:	fc cf       	rjmp	.-8      	; 0x496a <TWI_WritePacket+0x52>

				return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    4972:	80 91 b9 00 	lds	r24, 0x00B9
    4976:	ea 94       	dec	r14
    4978:	88 7f       	andi	r24, 0xF8	; 248
    497a:	88 32       	cpi	r24, 0x28	; 40
    497c:	11 f0       	breq	.+4      	; 0x4982 <TWI_WritePacket+0x6a>
    497e:	95 e0       	ldi	r25, 0x05	; 5
    4980:	07 c0       	rjmp	.+14     	; 0x4990 <TWI_WritePacket+0x78>
    4982:	0f 5f       	subi	r16, 0xFF	; 255
    4984:	1f 4f       	sbci	r17, 0xFF	; 255
    4986:	02 c0       	rjmp	.+4      	; 0x498c <TWI_WritePacket+0x74>
    4988:	95 e0       	ldi	r25, 0x05	; 5
			 *  \return Boolean \c true if the recipient ACKed the byte, \c false otherwise
			 */
			static inline bool TWI_SendByte(const uint8_t Byte)
			{
				TWDR = Byte;
				TWCR = ((1 << TWINT) | (1 << TWEN));
    498a:	24 e8       	ldi	r18, 0x84	; 132
				ErrorCode = TWI_ERROR_SlaveNAK;
				break;
			}
		}

		while (Length--)
    498c:	ee 20       	and	r14, r14
    498e:	39 f7       	brne	.-50     	; 0x495e <TWI_WritePacket+0x46>

			/** Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
			static inline void TWI_StopTransmission(void) ATTR_ALWAYS_INLINE;
			static inline void TWI_StopTransmission(void)
			{
				TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    4990:	84 e9       	ldi	r24, 0x94	; 148
    4992:	80 93 bc 00 	sts	0x00BC, r24
		
		TWI_StopTransmission();
	}
	
	return ErrorCode;
}
    4996:	89 2f       	mov	r24, r25
    4998:	df 91       	pop	r29
    499a:	cf 91       	pop	r28
    499c:	1f 91       	pop	r17
    499e:	0f 91       	pop	r16
    49a0:	ff 90       	pop	r15
    49a2:	ef 90       	pop	r14
    49a4:	08 95       	ret

000049a6 <TWI_ReadPacket>:
                       const uint8_t TimeoutMS,
                       const uint8_t* InternalAddress,
                       const uint8_t InternalAddressLen,
                       uint8_t* Buffer,
                       uint8_t Length)
{
    49a6:	cf 92       	push	r12
    49a8:	df 92       	push	r13
    49aa:	ef 92       	push	r14
    49ac:	ff 92       	push	r15
    49ae:	0f 93       	push	r16
    49b0:	1f 93       	push	r17
    49b2:	cf 93       	push	r28
    49b4:	df 93       	push	r29
    49b6:	d8 2e       	mov	r13, r24
    49b8:	c6 2e       	mov	r12, r22
    49ba:	e8 01       	movw	r28, r16
    49bc:	fe 2c       	mov	r15, r14
	uint8_t ErrorCode;
	
	if ((ErrorCode = TWI_WritePacket(SlaveAddress, TimeoutMS, InternalAddress, InternalAddressLen,
    49be:	00 e0       	ldi	r16, 0x00	; 0
    49c0:	10 e0       	ldi	r17, 0x00	; 0
    49c2:	ee 24       	eor	r14, r14
    49c4:	a9 df       	rcall	.-174    	; 0x4918 <TWI_WritePacket>
    49c6:	98 2f       	mov	r25, r24
    49c8:	88 23       	and	r24, r24
    49ca:	19 f5       	brne	.+70     	; 0x4a12 <TWI_ReadPacket+0x6c>
	                                 NULL, 0)) != TWI_ERROR_NoError)
	{
		return ErrorCode;
	}

	if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_READ,
    49cc:	8d 2d       	mov	r24, r13
    49ce:	8e 7f       	andi	r24, 0xFE	; 254
    49d0:	6c 2d       	mov	r22, r12
    49d2:	3e df       	rcall	.-388    	; 0x4850 <TWI_StartTransmission>
    49d4:	98 2f       	mov	r25, r24
    49d6:	88 23       	and	r24, r24
    49d8:	b9 f0       	breq	.+46     	; 0x4a08 <TWI_ReadPacket+0x62>
    49da:	1b c0       	rjmp	.+54     	; 0x4a12 <TWI_ReadPacket+0x6c>
										   TimeoutMS)) == TWI_ERROR_NoError)
	{
		while (Length--)
    49dc:	fa 94       	dec	r15
			static inline bool TWI_ReceiveByte(uint8_t* const Byte,
			                                   const bool LastByte)
			{
				uint8_t TWCRMask = ((1 << TWINT) | (1 << TWEN));

				if (!(LastByte))
    49de:	11 f0       	breq	.+4      	; 0x49e4 <TWI_ReadPacket+0x3e>
    49e0:	84 ec       	ldi	r24, 0xC4	; 196
    49e2:	01 c0       	rjmp	.+2      	; 0x49e6 <TWI_ReadPacket+0x40>
    49e4:	84 e8       	ldi	r24, 0x84	; 132
				  TWCRMask |= (1 << TWEA);

				TWCR = TWCRMask;
    49e6:	80 93 bc 00 	sts	0x00BC, r24
				while (!(TWCR & (1 << TWINT)));
    49ea:	80 91 bc 00 	lds	r24, 0x00BC
    49ee:	87 ff       	sbrs	r24, 7
    49f0:	fc cf       	rjmp	.-8      	; 0x49ea <TWI_ReadPacket+0x44>
				*Byte = TWDR;
    49f2:	80 91 bb 00 	lds	r24, 0x00BB
    49f6:	88 83       	st	Y, r24

				return ((TWSR & TW_STATUS_MASK) == TW_MR_DATA_ACK);
    49f8:	80 91 b9 00 	lds	r24, 0x00B9
		{
			if (!(TWI_ReceiveByte(Buffer++, (Length == 0))))
    49fc:	88 7f       	andi	r24, 0xF8	; 248
    49fe:	80 35       	cpi	r24, 0x50	; 80
    4a00:	11 f0       	breq	.+4      	; 0x4a06 <TWI_ReadPacket+0x60>
    4a02:	95 e0       	ldi	r25, 0x05	; 5
    4a04:	03 c0       	rjmp	.+6      	; 0x4a0c <TWI_ReadPacket+0x66>
    4a06:	21 96       	adiw	r28, 0x01	; 1
	}

	if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_READ,
										   TimeoutMS)) == TWI_ERROR_NoError)
	{
		while (Length--)
    4a08:	ff 20       	and	r15, r15
    4a0a:	41 f7       	brne	.-48     	; 0x49dc <TWI_ReadPacket+0x36>

			/** Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
			static inline void TWI_StopTransmission(void) ATTR_ALWAYS_INLINE;
			static inline void TWI_StopTransmission(void)
			{
				TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    4a0c:	84 e9       	ldi	r24, 0x94	; 148
    4a0e:	80 93 bc 00 	sts	0x00BC, r24
		
		TWI_StopTransmission();
	}
	
	return ErrorCode;
}
    4a12:	89 2f       	mov	r24, r25
    4a14:	df 91       	pop	r29
    4a16:	cf 91       	pop	r28
    4a18:	1f 91       	pop	r17
    4a1a:	0f 91       	pop	r16
    4a1c:	ff 90       	pop	r15
    4a1e:	ef 90       	pop	r14
    4a20:	df 90       	pop	r13
    4a22:	cf 90       	pop	r12
    4a24:	08 95       	ret

00004a26 <__mulsi3>:
    4a26:	62 9f       	mul	r22, r18
    4a28:	d0 01       	movw	r26, r0
    4a2a:	73 9f       	mul	r23, r19
    4a2c:	f0 01       	movw	r30, r0
    4a2e:	82 9f       	mul	r24, r18
    4a30:	e0 0d       	add	r30, r0
    4a32:	f1 1d       	adc	r31, r1
    4a34:	64 9f       	mul	r22, r20
    4a36:	e0 0d       	add	r30, r0
    4a38:	f1 1d       	adc	r31, r1
    4a3a:	92 9f       	mul	r25, r18
    4a3c:	f0 0d       	add	r31, r0
    4a3e:	83 9f       	mul	r24, r19
    4a40:	f0 0d       	add	r31, r0
    4a42:	74 9f       	mul	r23, r20
    4a44:	f0 0d       	add	r31, r0
    4a46:	65 9f       	mul	r22, r21
    4a48:	f0 0d       	add	r31, r0
    4a4a:	99 27       	eor	r25, r25
    4a4c:	72 9f       	mul	r23, r18
    4a4e:	b0 0d       	add	r27, r0
    4a50:	e1 1d       	adc	r30, r1
    4a52:	f9 1f       	adc	r31, r25
    4a54:	63 9f       	mul	r22, r19
    4a56:	b0 0d       	add	r27, r0
    4a58:	e1 1d       	adc	r30, r1
    4a5a:	f9 1f       	adc	r31, r25
    4a5c:	bd 01       	movw	r22, r26
    4a5e:	cf 01       	movw	r24, r30
    4a60:	11 24       	eor	r1, r1
    4a62:	08 95       	ret

00004a64 <__udivmodqi4>:
    4a64:	99 1b       	sub	r25, r25
    4a66:	79 e0       	ldi	r23, 0x09	; 9
    4a68:	04 c0       	rjmp	.+8      	; 0x4a72 <__udivmodqi4_ep>

00004a6a <__udivmodqi4_loop>:
    4a6a:	99 1f       	adc	r25, r25
    4a6c:	96 17       	cp	r25, r22
    4a6e:	08 f0       	brcs	.+2      	; 0x4a72 <__udivmodqi4_ep>
    4a70:	96 1b       	sub	r25, r22

00004a72 <__udivmodqi4_ep>:
    4a72:	88 1f       	adc	r24, r24
    4a74:	7a 95       	dec	r23
    4a76:	c9 f7       	brne	.-14     	; 0x4a6a <__udivmodqi4_loop>
    4a78:	80 95       	com	r24
    4a7a:	08 95       	ret

00004a7c <__udivmodsi4>:
    4a7c:	a1 e2       	ldi	r26, 0x21	; 33
    4a7e:	1a 2e       	mov	r1, r26
    4a80:	aa 1b       	sub	r26, r26
    4a82:	bb 1b       	sub	r27, r27
    4a84:	fd 01       	movw	r30, r26
    4a86:	0d c0       	rjmp	.+26     	; 0x4aa2 <__udivmodsi4_ep>

00004a88 <__udivmodsi4_loop>:
    4a88:	aa 1f       	adc	r26, r26
    4a8a:	bb 1f       	adc	r27, r27
    4a8c:	ee 1f       	adc	r30, r30
    4a8e:	ff 1f       	adc	r31, r31
    4a90:	a2 17       	cp	r26, r18
    4a92:	b3 07       	cpc	r27, r19
    4a94:	e4 07       	cpc	r30, r20
    4a96:	f5 07       	cpc	r31, r21
    4a98:	20 f0       	brcs	.+8      	; 0x4aa2 <__udivmodsi4_ep>
    4a9a:	a2 1b       	sub	r26, r18
    4a9c:	b3 0b       	sbc	r27, r19
    4a9e:	e4 0b       	sbc	r30, r20
    4aa0:	f5 0b       	sbc	r31, r21

00004aa2 <__udivmodsi4_ep>:
    4aa2:	66 1f       	adc	r22, r22
    4aa4:	77 1f       	adc	r23, r23
    4aa6:	88 1f       	adc	r24, r24
    4aa8:	99 1f       	adc	r25, r25
    4aaa:	1a 94       	dec	r1
    4aac:	69 f7       	brne	.-38     	; 0x4a88 <__udivmodsi4_loop>
    4aae:	60 95       	com	r22
    4ab0:	70 95       	com	r23
    4ab2:	80 95       	com	r24
    4ab4:	90 95       	com	r25
    4ab6:	9b 01       	movw	r18, r22
    4ab8:	ac 01       	movw	r20, r24
    4aba:	bd 01       	movw	r22, r26
    4abc:	cf 01       	movw	r24, r30
    4abe:	08 95       	ret

00004ac0 <memcmp>:
    4ac0:	fb 01       	movw	r30, r22
    4ac2:	dc 01       	movw	r26, r24
    4ac4:	04 c0       	rjmp	.+8      	; 0x4ace <memcmp+0xe>
    4ac6:	8d 91       	ld	r24, X+
    4ac8:	01 90       	ld	r0, Z+
    4aca:	80 19       	sub	r24, r0
    4acc:	21 f4       	brne	.+8      	; 0x4ad6 <memcmp+0x16>
    4ace:	41 50       	subi	r20, 0x01	; 1
    4ad0:	50 40       	sbci	r21, 0x00	; 0
    4ad2:	c8 f7       	brcc	.-14     	; 0x4ac6 <memcmp+0x6>
    4ad4:	88 1b       	sub	r24, r24
    4ad6:	99 0b       	sbc	r25, r25
    4ad8:	08 95       	ret

00004ada <memcpy>:
    4ada:	fb 01       	movw	r30, r22
    4adc:	dc 01       	movw	r26, r24
    4ade:	02 c0       	rjmp	.+4      	; 0x4ae4 <memcpy+0xa>
    4ae0:	01 90       	ld	r0, Z+
    4ae2:	0d 92       	st	X+, r0
    4ae4:	41 50       	subi	r20, 0x01	; 1
    4ae6:	50 40       	sbci	r21, 0x00	; 0
    4ae8:	d8 f7       	brcc	.-10     	; 0x4ae0 <memcpy+0x6>
    4aea:	08 95       	ret

00004aec <memset>:
    4aec:	dc 01       	movw	r26, r24
    4aee:	01 c0       	rjmp	.+2      	; 0x4af2 <memset+0x6>
    4af0:	6d 93       	st	X+, r22
    4af2:	41 50       	subi	r20, 0x01	; 1
    4af4:	50 40       	sbci	r21, 0x00	; 0
    4af6:	e0 f7       	brcc	.-8      	; 0x4af0 <memset+0x4>
    4af8:	08 95       	ret

00004afa <sprintf>:
    4afa:	0f 93       	push	r16
    4afc:	1f 93       	push	r17
    4afe:	df 93       	push	r29
    4b00:	cf 93       	push	r28
    4b02:	cd b7       	in	r28, 0x3d	; 61
    4b04:	de b7       	in	r29, 0x3e	; 62
    4b06:	2e 97       	sbiw	r28, 0x0e	; 14
    4b08:	0f b6       	in	r0, 0x3f	; 63
    4b0a:	f8 94       	cli
    4b0c:	de bf       	out	0x3e, r29	; 62
    4b0e:	0f be       	out	0x3f, r0	; 63
    4b10:	cd bf       	out	0x3d, r28	; 61
    4b12:	0d 89       	ldd	r16, Y+21	; 0x15
    4b14:	1e 89       	ldd	r17, Y+22	; 0x16
    4b16:	86 e0       	ldi	r24, 0x06	; 6
    4b18:	8c 83       	std	Y+4, r24	; 0x04
    4b1a:	1a 83       	std	Y+2, r17	; 0x02
    4b1c:	09 83       	std	Y+1, r16	; 0x01
    4b1e:	8f ef       	ldi	r24, 0xFF	; 255
    4b20:	9f e7       	ldi	r25, 0x7F	; 127
    4b22:	9e 83       	std	Y+6, r25	; 0x06
    4b24:	8d 83       	std	Y+5, r24	; 0x05
    4b26:	9e 01       	movw	r18, r28
    4b28:	27 5e       	subi	r18, 0xE7	; 231
    4b2a:	3f 4f       	sbci	r19, 0xFF	; 255
    4b2c:	ce 01       	movw	r24, r28
    4b2e:	01 96       	adiw	r24, 0x01	; 1
    4b30:	6f 89       	ldd	r22, Y+23	; 0x17
    4b32:	78 8d       	ldd	r23, Y+24	; 0x18
    4b34:	a9 01       	movw	r20, r18
    4b36:	11 d0       	rcall	.+34     	; 0x4b5a <vfprintf>
    4b38:	2f 81       	ldd	r18, Y+7	; 0x07
    4b3a:	38 85       	ldd	r19, Y+8	; 0x08
    4b3c:	02 0f       	add	r16, r18
    4b3e:	13 1f       	adc	r17, r19
    4b40:	f8 01       	movw	r30, r16
    4b42:	10 82       	st	Z, r1
    4b44:	2e 96       	adiw	r28, 0x0e	; 14
    4b46:	0f b6       	in	r0, 0x3f	; 63
    4b48:	f8 94       	cli
    4b4a:	de bf       	out	0x3e, r29	; 62
    4b4c:	0f be       	out	0x3f, r0	; 63
    4b4e:	cd bf       	out	0x3d, r28	; 61
    4b50:	cf 91       	pop	r28
    4b52:	df 91       	pop	r29
    4b54:	1f 91       	pop	r17
    4b56:	0f 91       	pop	r16
    4b58:	08 95       	ret

00004b5a <vfprintf>:
    4b5a:	2f 92       	push	r2
    4b5c:	3f 92       	push	r3
    4b5e:	4f 92       	push	r4
    4b60:	5f 92       	push	r5
    4b62:	6f 92       	push	r6
    4b64:	7f 92       	push	r7
    4b66:	8f 92       	push	r8
    4b68:	9f 92       	push	r9
    4b6a:	af 92       	push	r10
    4b6c:	bf 92       	push	r11
    4b6e:	cf 92       	push	r12
    4b70:	df 92       	push	r13
    4b72:	ef 92       	push	r14
    4b74:	ff 92       	push	r15
    4b76:	0f 93       	push	r16
    4b78:	1f 93       	push	r17
    4b7a:	df 93       	push	r29
    4b7c:	cf 93       	push	r28
    4b7e:	cd b7       	in	r28, 0x3d	; 61
    4b80:	de b7       	in	r29, 0x3e	; 62
    4b82:	2b 97       	sbiw	r28, 0x0b	; 11
    4b84:	0f b6       	in	r0, 0x3f	; 63
    4b86:	f8 94       	cli
    4b88:	de bf       	out	0x3e, r29	; 62
    4b8a:	0f be       	out	0x3f, r0	; 63
    4b8c:	cd bf       	out	0x3d, r28	; 61
    4b8e:	3c 01       	movw	r6, r24
    4b90:	2b 01       	movw	r4, r22
    4b92:	5a 01       	movw	r10, r20
    4b94:	fc 01       	movw	r30, r24
    4b96:	17 82       	std	Z+7, r1	; 0x07
    4b98:	16 82       	std	Z+6, r1	; 0x06
    4b9a:	83 81       	ldd	r24, Z+3	; 0x03
    4b9c:	81 fd       	sbrc	r24, 1
    4b9e:	03 c0       	rjmp	.+6      	; 0x4ba6 <vfprintf+0x4c>
    4ba0:	6f ef       	ldi	r22, 0xFF	; 255
    4ba2:	7f ef       	ldi	r23, 0xFF	; 255
    4ba4:	b9 c1       	rjmp	.+882    	; 0x4f18 <vfprintf+0x3be>
    4ba6:	9a e0       	ldi	r25, 0x0A	; 10
    4ba8:	89 2e       	mov	r8, r25
    4baa:	1e 01       	movw	r2, r28
    4bac:	08 94       	sec
    4bae:	21 1c       	adc	r2, r1
    4bb0:	31 1c       	adc	r3, r1
    4bb2:	f3 01       	movw	r30, r6
    4bb4:	23 81       	ldd	r18, Z+3	; 0x03
    4bb6:	f2 01       	movw	r30, r4
    4bb8:	23 fd       	sbrc	r18, 3
    4bba:	85 91       	lpm	r24, Z+
    4bbc:	23 ff       	sbrs	r18, 3
    4bbe:	81 91       	ld	r24, Z+
    4bc0:	2f 01       	movw	r4, r30
    4bc2:	88 23       	and	r24, r24
    4bc4:	09 f4       	brne	.+2      	; 0x4bc8 <vfprintf+0x6e>
    4bc6:	a5 c1       	rjmp	.+842    	; 0x4f12 <vfprintf+0x3b8>
    4bc8:	85 32       	cpi	r24, 0x25	; 37
    4bca:	39 f4       	brne	.+14     	; 0x4bda <vfprintf+0x80>
    4bcc:	23 fd       	sbrc	r18, 3
    4bce:	85 91       	lpm	r24, Z+
    4bd0:	23 ff       	sbrs	r18, 3
    4bd2:	81 91       	ld	r24, Z+
    4bd4:	2f 01       	movw	r4, r30
    4bd6:	85 32       	cpi	r24, 0x25	; 37
    4bd8:	21 f4       	brne	.+8      	; 0x4be2 <vfprintf+0x88>
    4bda:	90 e0       	ldi	r25, 0x00	; 0
    4bdc:	b3 01       	movw	r22, r6
    4bde:	e6 d1       	rcall	.+972    	; 0x4fac <fputc>
    4be0:	e8 cf       	rjmp	.-48     	; 0x4bb2 <vfprintf+0x58>
    4be2:	98 2f       	mov	r25, r24
    4be4:	ff 24       	eor	r15, r15
    4be6:	ee 24       	eor	r14, r14
    4be8:	99 24       	eor	r9, r9
    4bea:	ff e1       	ldi	r31, 0x1F	; 31
    4bec:	ff 15       	cp	r31, r15
    4bee:	d0 f0       	brcs	.+52     	; 0x4c24 <vfprintf+0xca>
    4bf0:	9b 32       	cpi	r25, 0x2B	; 43
    4bf2:	69 f0       	breq	.+26     	; 0x4c0e <vfprintf+0xb4>
    4bf4:	9c 32       	cpi	r25, 0x2C	; 44
    4bf6:	28 f4       	brcc	.+10     	; 0x4c02 <vfprintf+0xa8>
    4bf8:	90 32       	cpi	r25, 0x20	; 32
    4bfa:	59 f0       	breq	.+22     	; 0x4c12 <vfprintf+0xb8>
    4bfc:	93 32       	cpi	r25, 0x23	; 35
    4bfe:	91 f4       	brne	.+36     	; 0x4c24 <vfprintf+0xca>
    4c00:	0e c0       	rjmp	.+28     	; 0x4c1e <vfprintf+0xc4>
    4c02:	9d 32       	cpi	r25, 0x2D	; 45
    4c04:	49 f0       	breq	.+18     	; 0x4c18 <vfprintf+0xbe>
    4c06:	90 33       	cpi	r25, 0x30	; 48
    4c08:	69 f4       	brne	.+26     	; 0x4c24 <vfprintf+0xca>
    4c0a:	41 e0       	ldi	r20, 0x01	; 1
    4c0c:	24 c0       	rjmp	.+72     	; 0x4c56 <vfprintf+0xfc>
    4c0e:	52 e0       	ldi	r21, 0x02	; 2
    4c10:	f5 2a       	or	r15, r21
    4c12:	84 e0       	ldi	r24, 0x04	; 4
    4c14:	f8 2a       	or	r15, r24
    4c16:	28 c0       	rjmp	.+80     	; 0x4c68 <vfprintf+0x10e>
    4c18:	98 e0       	ldi	r25, 0x08	; 8
    4c1a:	f9 2a       	or	r15, r25
    4c1c:	25 c0       	rjmp	.+74     	; 0x4c68 <vfprintf+0x10e>
    4c1e:	e0 e1       	ldi	r30, 0x10	; 16
    4c20:	fe 2a       	or	r15, r30
    4c22:	22 c0       	rjmp	.+68     	; 0x4c68 <vfprintf+0x10e>
    4c24:	f7 fc       	sbrc	r15, 7
    4c26:	29 c0       	rjmp	.+82     	; 0x4c7a <vfprintf+0x120>
    4c28:	89 2f       	mov	r24, r25
    4c2a:	80 53       	subi	r24, 0x30	; 48
    4c2c:	8a 30       	cpi	r24, 0x0A	; 10
    4c2e:	70 f4       	brcc	.+28     	; 0x4c4c <vfprintf+0xf2>
    4c30:	f6 fe       	sbrs	r15, 6
    4c32:	05 c0       	rjmp	.+10     	; 0x4c3e <vfprintf+0xe4>
    4c34:	98 9c       	mul	r9, r8
    4c36:	90 2c       	mov	r9, r0
    4c38:	11 24       	eor	r1, r1
    4c3a:	98 0e       	add	r9, r24
    4c3c:	15 c0       	rjmp	.+42     	; 0x4c68 <vfprintf+0x10e>
    4c3e:	e8 9c       	mul	r14, r8
    4c40:	e0 2c       	mov	r14, r0
    4c42:	11 24       	eor	r1, r1
    4c44:	e8 0e       	add	r14, r24
    4c46:	f0 e2       	ldi	r31, 0x20	; 32
    4c48:	ff 2a       	or	r15, r31
    4c4a:	0e c0       	rjmp	.+28     	; 0x4c68 <vfprintf+0x10e>
    4c4c:	9e 32       	cpi	r25, 0x2E	; 46
    4c4e:	29 f4       	brne	.+10     	; 0x4c5a <vfprintf+0x100>
    4c50:	f6 fc       	sbrc	r15, 6
    4c52:	5f c1       	rjmp	.+702    	; 0x4f12 <vfprintf+0x3b8>
    4c54:	40 e4       	ldi	r20, 0x40	; 64
    4c56:	f4 2a       	or	r15, r20
    4c58:	07 c0       	rjmp	.+14     	; 0x4c68 <vfprintf+0x10e>
    4c5a:	9c 36       	cpi	r25, 0x6C	; 108
    4c5c:	19 f4       	brne	.+6      	; 0x4c64 <vfprintf+0x10a>
    4c5e:	50 e8       	ldi	r21, 0x80	; 128
    4c60:	f5 2a       	or	r15, r21
    4c62:	02 c0       	rjmp	.+4      	; 0x4c68 <vfprintf+0x10e>
    4c64:	98 36       	cpi	r25, 0x68	; 104
    4c66:	49 f4       	brne	.+18     	; 0x4c7a <vfprintf+0x120>
    4c68:	f2 01       	movw	r30, r4
    4c6a:	23 fd       	sbrc	r18, 3
    4c6c:	95 91       	lpm	r25, Z+
    4c6e:	23 ff       	sbrs	r18, 3
    4c70:	91 91       	ld	r25, Z+
    4c72:	2f 01       	movw	r4, r30
    4c74:	99 23       	and	r25, r25
    4c76:	09 f0       	breq	.+2      	; 0x4c7a <vfprintf+0x120>
    4c78:	b8 cf       	rjmp	.-144    	; 0x4bea <vfprintf+0x90>
    4c7a:	89 2f       	mov	r24, r25
    4c7c:	85 54       	subi	r24, 0x45	; 69
    4c7e:	83 30       	cpi	r24, 0x03	; 3
    4c80:	18 f0       	brcs	.+6      	; 0x4c88 <vfprintf+0x12e>
    4c82:	80 52       	subi	r24, 0x20	; 32
    4c84:	83 30       	cpi	r24, 0x03	; 3
    4c86:	38 f4       	brcc	.+14     	; 0x4c96 <vfprintf+0x13c>
    4c88:	44 e0       	ldi	r20, 0x04	; 4
    4c8a:	50 e0       	ldi	r21, 0x00	; 0
    4c8c:	a4 0e       	add	r10, r20
    4c8e:	b5 1e       	adc	r11, r21
    4c90:	5f e3       	ldi	r21, 0x3F	; 63
    4c92:	59 83       	std	Y+1, r21	; 0x01
    4c94:	0f c0       	rjmp	.+30     	; 0x4cb4 <vfprintf+0x15a>
    4c96:	93 36       	cpi	r25, 0x63	; 99
    4c98:	31 f0       	breq	.+12     	; 0x4ca6 <vfprintf+0x14c>
    4c9a:	93 37       	cpi	r25, 0x73	; 115
    4c9c:	79 f0       	breq	.+30     	; 0x4cbc <vfprintf+0x162>
    4c9e:	93 35       	cpi	r25, 0x53	; 83
    4ca0:	09 f0       	breq	.+2      	; 0x4ca4 <vfprintf+0x14a>
    4ca2:	52 c0       	rjmp	.+164    	; 0x4d48 <vfprintf+0x1ee>
    4ca4:	1f c0       	rjmp	.+62     	; 0x4ce4 <vfprintf+0x18a>
    4ca6:	f5 01       	movw	r30, r10
    4ca8:	80 81       	ld	r24, Z
    4caa:	89 83       	std	Y+1, r24	; 0x01
    4cac:	42 e0       	ldi	r20, 0x02	; 2
    4cae:	50 e0       	ldi	r21, 0x00	; 0
    4cb0:	a4 0e       	add	r10, r20
    4cb2:	b5 1e       	adc	r11, r21
    4cb4:	61 01       	movw	r12, r2
    4cb6:	01 e0       	ldi	r16, 0x01	; 1
    4cb8:	10 e0       	ldi	r17, 0x00	; 0
    4cba:	11 c0       	rjmp	.+34     	; 0x4cde <vfprintf+0x184>
    4cbc:	f5 01       	movw	r30, r10
    4cbe:	c0 80       	ld	r12, Z
    4cc0:	d1 80       	ldd	r13, Z+1	; 0x01
    4cc2:	f6 fc       	sbrc	r15, 6
    4cc4:	03 c0       	rjmp	.+6      	; 0x4ccc <vfprintf+0x172>
    4cc6:	6f ef       	ldi	r22, 0xFF	; 255
    4cc8:	7f ef       	ldi	r23, 0xFF	; 255
    4cca:	02 c0       	rjmp	.+4      	; 0x4cd0 <vfprintf+0x176>
    4ccc:	69 2d       	mov	r22, r9
    4cce:	70 e0       	ldi	r23, 0x00	; 0
    4cd0:	42 e0       	ldi	r20, 0x02	; 2
    4cd2:	50 e0       	ldi	r21, 0x00	; 0
    4cd4:	a4 0e       	add	r10, r20
    4cd6:	b5 1e       	adc	r11, r21
    4cd8:	c6 01       	movw	r24, r12
    4cda:	5d d1       	rcall	.+698    	; 0x4f96 <strnlen>
    4cdc:	8c 01       	movw	r16, r24
    4cde:	5f e7       	ldi	r21, 0x7F	; 127
    4ce0:	f5 22       	and	r15, r21
    4ce2:	13 c0       	rjmp	.+38     	; 0x4d0a <vfprintf+0x1b0>
    4ce4:	f5 01       	movw	r30, r10
    4ce6:	c0 80       	ld	r12, Z
    4ce8:	d1 80       	ldd	r13, Z+1	; 0x01
    4cea:	f6 fc       	sbrc	r15, 6
    4cec:	03 c0       	rjmp	.+6      	; 0x4cf4 <vfprintf+0x19a>
    4cee:	6f ef       	ldi	r22, 0xFF	; 255
    4cf0:	7f ef       	ldi	r23, 0xFF	; 255
    4cf2:	02 c0       	rjmp	.+4      	; 0x4cf8 <vfprintf+0x19e>
    4cf4:	69 2d       	mov	r22, r9
    4cf6:	70 e0       	ldi	r23, 0x00	; 0
    4cf8:	42 e0       	ldi	r20, 0x02	; 2
    4cfa:	50 e0       	ldi	r21, 0x00	; 0
    4cfc:	a4 0e       	add	r10, r20
    4cfe:	b5 1e       	adc	r11, r21
    4d00:	c6 01       	movw	r24, r12
    4d02:	3e d1       	rcall	.+636    	; 0x4f80 <strnlen_P>
    4d04:	8c 01       	movw	r16, r24
    4d06:	50 e8       	ldi	r21, 0x80	; 128
    4d08:	f5 2a       	or	r15, r21
    4d0a:	f3 fe       	sbrs	r15, 3
    4d0c:	06 c0       	rjmp	.+12     	; 0x4d1a <vfprintf+0x1c0>
    4d0e:	18 c0       	rjmp	.+48     	; 0x4d40 <vfprintf+0x1e6>
    4d10:	80 e2       	ldi	r24, 0x20	; 32
    4d12:	90 e0       	ldi	r25, 0x00	; 0
    4d14:	b3 01       	movw	r22, r6
    4d16:	4a d1       	rcall	.+660    	; 0x4fac <fputc>
    4d18:	ea 94       	dec	r14
    4d1a:	8e 2d       	mov	r24, r14
    4d1c:	90 e0       	ldi	r25, 0x00	; 0
    4d1e:	08 17       	cp	r16, r24
    4d20:	19 07       	cpc	r17, r25
    4d22:	b0 f3       	brcs	.-20     	; 0x4d10 <vfprintf+0x1b6>
    4d24:	0d c0       	rjmp	.+26     	; 0x4d40 <vfprintf+0x1e6>
    4d26:	f6 01       	movw	r30, r12
    4d28:	f7 fc       	sbrc	r15, 7
    4d2a:	85 91       	lpm	r24, Z+
    4d2c:	f7 fe       	sbrs	r15, 7
    4d2e:	81 91       	ld	r24, Z+
    4d30:	6f 01       	movw	r12, r30
    4d32:	90 e0       	ldi	r25, 0x00	; 0
    4d34:	b3 01       	movw	r22, r6
    4d36:	3a d1       	rcall	.+628    	; 0x4fac <fputc>
    4d38:	e1 10       	cpse	r14, r1
    4d3a:	ea 94       	dec	r14
    4d3c:	01 50       	subi	r16, 0x01	; 1
    4d3e:	10 40       	sbci	r17, 0x00	; 0
    4d40:	01 15       	cp	r16, r1
    4d42:	11 05       	cpc	r17, r1
    4d44:	81 f7       	brne	.-32     	; 0x4d26 <vfprintf+0x1cc>
    4d46:	e2 c0       	rjmp	.+452    	; 0x4f0c <vfprintf+0x3b2>
    4d48:	94 36       	cpi	r25, 0x64	; 100
    4d4a:	11 f0       	breq	.+4      	; 0x4d50 <vfprintf+0x1f6>
    4d4c:	99 36       	cpi	r25, 0x69	; 105
    4d4e:	61 f5       	brne	.+88     	; 0x4da8 <vfprintf+0x24e>
    4d50:	f7 fe       	sbrs	r15, 7
    4d52:	08 c0       	rjmp	.+16     	; 0x4d64 <vfprintf+0x20a>
    4d54:	f5 01       	movw	r30, r10
    4d56:	20 81       	ld	r18, Z
    4d58:	31 81       	ldd	r19, Z+1	; 0x01
    4d5a:	42 81       	ldd	r20, Z+2	; 0x02
    4d5c:	53 81       	ldd	r21, Z+3	; 0x03
    4d5e:	84 e0       	ldi	r24, 0x04	; 4
    4d60:	90 e0       	ldi	r25, 0x00	; 0
    4d62:	0a c0       	rjmp	.+20     	; 0x4d78 <vfprintf+0x21e>
    4d64:	f5 01       	movw	r30, r10
    4d66:	80 81       	ld	r24, Z
    4d68:	91 81       	ldd	r25, Z+1	; 0x01
    4d6a:	9c 01       	movw	r18, r24
    4d6c:	44 27       	eor	r20, r20
    4d6e:	37 fd       	sbrc	r19, 7
    4d70:	40 95       	com	r20
    4d72:	54 2f       	mov	r21, r20
    4d74:	82 e0       	ldi	r24, 0x02	; 2
    4d76:	90 e0       	ldi	r25, 0x00	; 0
    4d78:	a8 0e       	add	r10, r24
    4d7a:	b9 1e       	adc	r11, r25
    4d7c:	9f e6       	ldi	r25, 0x6F	; 111
    4d7e:	f9 22       	and	r15, r25
    4d80:	57 ff       	sbrs	r21, 7
    4d82:	09 c0       	rjmp	.+18     	; 0x4d96 <vfprintf+0x23c>
    4d84:	50 95       	com	r21
    4d86:	40 95       	com	r20
    4d88:	30 95       	com	r19
    4d8a:	21 95       	neg	r18
    4d8c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d8e:	4f 4f       	sbci	r20, 0xFF	; 255
    4d90:	5f 4f       	sbci	r21, 0xFF	; 255
    4d92:	e0 e8       	ldi	r30, 0x80	; 128
    4d94:	fe 2a       	or	r15, r30
    4d96:	ca 01       	movw	r24, r20
    4d98:	b9 01       	movw	r22, r18
    4d9a:	a1 01       	movw	r20, r2
    4d9c:	2a e0       	ldi	r18, 0x0A	; 10
    4d9e:	30 e0       	ldi	r19, 0x00	; 0
    4da0:	31 d1       	rcall	.+610    	; 0x5004 <__ultoa_invert>
    4da2:	d8 2e       	mov	r13, r24
    4da4:	d2 18       	sub	r13, r2
    4da6:	3f c0       	rjmp	.+126    	; 0x4e26 <vfprintf+0x2cc>
    4da8:	95 37       	cpi	r25, 0x75	; 117
    4daa:	29 f4       	brne	.+10     	; 0x4db6 <vfprintf+0x25c>
    4dac:	1f 2d       	mov	r17, r15
    4dae:	1f 7e       	andi	r17, 0xEF	; 239
    4db0:	2a e0       	ldi	r18, 0x0A	; 10
    4db2:	30 e0       	ldi	r19, 0x00	; 0
    4db4:	1d c0       	rjmp	.+58     	; 0x4df0 <vfprintf+0x296>
    4db6:	1f 2d       	mov	r17, r15
    4db8:	19 7f       	andi	r17, 0xF9	; 249
    4dba:	9f 36       	cpi	r25, 0x6F	; 111
    4dbc:	61 f0       	breq	.+24     	; 0x4dd6 <vfprintf+0x27c>
    4dbe:	90 37       	cpi	r25, 0x70	; 112
    4dc0:	20 f4       	brcc	.+8      	; 0x4dca <vfprintf+0x270>
    4dc2:	98 35       	cpi	r25, 0x58	; 88
    4dc4:	09 f0       	breq	.+2      	; 0x4dc8 <vfprintf+0x26e>
    4dc6:	a5 c0       	rjmp	.+330    	; 0x4f12 <vfprintf+0x3b8>
    4dc8:	0f c0       	rjmp	.+30     	; 0x4de8 <vfprintf+0x28e>
    4dca:	90 37       	cpi	r25, 0x70	; 112
    4dcc:	39 f0       	breq	.+14     	; 0x4ddc <vfprintf+0x282>
    4dce:	98 37       	cpi	r25, 0x78	; 120
    4dd0:	09 f0       	breq	.+2      	; 0x4dd4 <vfprintf+0x27a>
    4dd2:	9f c0       	rjmp	.+318    	; 0x4f12 <vfprintf+0x3b8>
    4dd4:	04 c0       	rjmp	.+8      	; 0x4dde <vfprintf+0x284>
    4dd6:	28 e0       	ldi	r18, 0x08	; 8
    4dd8:	30 e0       	ldi	r19, 0x00	; 0
    4dda:	0a c0       	rjmp	.+20     	; 0x4df0 <vfprintf+0x296>
    4ddc:	10 61       	ori	r17, 0x10	; 16
    4dde:	14 fd       	sbrc	r17, 4
    4de0:	14 60       	ori	r17, 0x04	; 4
    4de2:	20 e1       	ldi	r18, 0x10	; 16
    4de4:	30 e0       	ldi	r19, 0x00	; 0
    4de6:	04 c0       	rjmp	.+8      	; 0x4df0 <vfprintf+0x296>
    4de8:	14 fd       	sbrc	r17, 4
    4dea:	16 60       	ori	r17, 0x06	; 6
    4dec:	20 e1       	ldi	r18, 0x10	; 16
    4dee:	32 e0       	ldi	r19, 0x02	; 2
    4df0:	17 ff       	sbrs	r17, 7
    4df2:	08 c0       	rjmp	.+16     	; 0x4e04 <vfprintf+0x2aa>
    4df4:	f5 01       	movw	r30, r10
    4df6:	60 81       	ld	r22, Z
    4df8:	71 81       	ldd	r23, Z+1	; 0x01
    4dfa:	82 81       	ldd	r24, Z+2	; 0x02
    4dfc:	93 81       	ldd	r25, Z+3	; 0x03
    4dfe:	44 e0       	ldi	r20, 0x04	; 4
    4e00:	50 e0       	ldi	r21, 0x00	; 0
    4e02:	08 c0       	rjmp	.+16     	; 0x4e14 <vfprintf+0x2ba>
    4e04:	f5 01       	movw	r30, r10
    4e06:	80 81       	ld	r24, Z
    4e08:	91 81       	ldd	r25, Z+1	; 0x01
    4e0a:	bc 01       	movw	r22, r24
    4e0c:	80 e0       	ldi	r24, 0x00	; 0
    4e0e:	90 e0       	ldi	r25, 0x00	; 0
    4e10:	42 e0       	ldi	r20, 0x02	; 2
    4e12:	50 e0       	ldi	r21, 0x00	; 0
    4e14:	a4 0e       	add	r10, r20
    4e16:	b5 1e       	adc	r11, r21
    4e18:	a1 01       	movw	r20, r2
    4e1a:	f4 d0       	rcall	.+488    	; 0x5004 <__ultoa_invert>
    4e1c:	d8 2e       	mov	r13, r24
    4e1e:	d2 18       	sub	r13, r2
    4e20:	8f e7       	ldi	r24, 0x7F	; 127
    4e22:	f8 2e       	mov	r15, r24
    4e24:	f1 22       	and	r15, r17
    4e26:	f6 fe       	sbrs	r15, 6
    4e28:	0b c0       	rjmp	.+22     	; 0x4e40 <vfprintf+0x2e6>
    4e2a:	5e ef       	ldi	r21, 0xFE	; 254
    4e2c:	f5 22       	and	r15, r21
    4e2e:	d9 14       	cp	r13, r9
    4e30:	38 f4       	brcc	.+14     	; 0x4e40 <vfprintf+0x2e6>
    4e32:	f4 fe       	sbrs	r15, 4
    4e34:	07 c0       	rjmp	.+14     	; 0x4e44 <vfprintf+0x2ea>
    4e36:	f2 fc       	sbrc	r15, 2
    4e38:	05 c0       	rjmp	.+10     	; 0x4e44 <vfprintf+0x2ea>
    4e3a:	8f ee       	ldi	r24, 0xEF	; 239
    4e3c:	f8 22       	and	r15, r24
    4e3e:	02 c0       	rjmp	.+4      	; 0x4e44 <vfprintf+0x2ea>
    4e40:	1d 2d       	mov	r17, r13
    4e42:	01 c0       	rjmp	.+2      	; 0x4e46 <vfprintf+0x2ec>
    4e44:	19 2d       	mov	r17, r9
    4e46:	f4 fe       	sbrs	r15, 4
    4e48:	0d c0       	rjmp	.+26     	; 0x4e64 <vfprintf+0x30a>
    4e4a:	fe 01       	movw	r30, r28
    4e4c:	ed 0d       	add	r30, r13
    4e4e:	f1 1d       	adc	r31, r1
    4e50:	80 81       	ld	r24, Z
    4e52:	80 33       	cpi	r24, 0x30	; 48
    4e54:	19 f4       	brne	.+6      	; 0x4e5c <vfprintf+0x302>
    4e56:	99 ee       	ldi	r25, 0xE9	; 233
    4e58:	f9 22       	and	r15, r25
    4e5a:	08 c0       	rjmp	.+16     	; 0x4e6c <vfprintf+0x312>
    4e5c:	1f 5f       	subi	r17, 0xFF	; 255
    4e5e:	f2 fe       	sbrs	r15, 2
    4e60:	05 c0       	rjmp	.+10     	; 0x4e6c <vfprintf+0x312>
    4e62:	03 c0       	rjmp	.+6      	; 0x4e6a <vfprintf+0x310>
    4e64:	8f 2d       	mov	r24, r15
    4e66:	86 78       	andi	r24, 0x86	; 134
    4e68:	09 f0       	breq	.+2      	; 0x4e6c <vfprintf+0x312>
    4e6a:	1f 5f       	subi	r17, 0xFF	; 255
    4e6c:	0f 2d       	mov	r16, r15
    4e6e:	f3 fc       	sbrc	r15, 3
    4e70:	13 c0       	rjmp	.+38     	; 0x4e98 <vfprintf+0x33e>
    4e72:	f0 fe       	sbrs	r15, 0
    4e74:	0e c0       	rjmp	.+28     	; 0x4e92 <vfprintf+0x338>
    4e76:	1e 15       	cp	r17, r14
    4e78:	10 f0       	brcs	.+4      	; 0x4e7e <vfprintf+0x324>
    4e7a:	9d 2c       	mov	r9, r13
    4e7c:	0a c0       	rjmp	.+20     	; 0x4e92 <vfprintf+0x338>
    4e7e:	9d 2c       	mov	r9, r13
    4e80:	9e 0c       	add	r9, r14
    4e82:	91 1a       	sub	r9, r17
    4e84:	1e 2d       	mov	r17, r14
    4e86:	05 c0       	rjmp	.+10     	; 0x4e92 <vfprintf+0x338>
    4e88:	80 e2       	ldi	r24, 0x20	; 32
    4e8a:	90 e0       	ldi	r25, 0x00	; 0
    4e8c:	b3 01       	movw	r22, r6
    4e8e:	8e d0       	rcall	.+284    	; 0x4fac <fputc>
    4e90:	1f 5f       	subi	r17, 0xFF	; 255
    4e92:	1e 15       	cp	r17, r14
    4e94:	c8 f3       	brcs	.-14     	; 0x4e88 <vfprintf+0x32e>
    4e96:	04 c0       	rjmp	.+8      	; 0x4ea0 <vfprintf+0x346>
    4e98:	1e 15       	cp	r17, r14
    4e9a:	10 f4       	brcc	.+4      	; 0x4ea0 <vfprintf+0x346>
    4e9c:	e1 1a       	sub	r14, r17
    4e9e:	01 c0       	rjmp	.+2      	; 0x4ea2 <vfprintf+0x348>
    4ea0:	ee 24       	eor	r14, r14
    4ea2:	04 ff       	sbrs	r16, 4
    4ea4:	0e c0       	rjmp	.+28     	; 0x4ec2 <vfprintf+0x368>
    4ea6:	80 e3       	ldi	r24, 0x30	; 48
    4ea8:	90 e0       	ldi	r25, 0x00	; 0
    4eaa:	b3 01       	movw	r22, r6
    4eac:	7f d0       	rcall	.+254    	; 0x4fac <fputc>
    4eae:	02 ff       	sbrs	r16, 2
    4eb0:	1b c0       	rjmp	.+54     	; 0x4ee8 <vfprintf+0x38e>
    4eb2:	01 fd       	sbrc	r16, 1
    4eb4:	03 c0       	rjmp	.+6      	; 0x4ebc <vfprintf+0x362>
    4eb6:	88 e7       	ldi	r24, 0x78	; 120
    4eb8:	90 e0       	ldi	r25, 0x00	; 0
    4eba:	0e c0       	rjmp	.+28     	; 0x4ed8 <vfprintf+0x37e>
    4ebc:	88 e5       	ldi	r24, 0x58	; 88
    4ebe:	90 e0       	ldi	r25, 0x00	; 0
    4ec0:	0b c0       	rjmp	.+22     	; 0x4ed8 <vfprintf+0x37e>
    4ec2:	80 2f       	mov	r24, r16
    4ec4:	86 78       	andi	r24, 0x86	; 134
    4ec6:	81 f0       	breq	.+32     	; 0x4ee8 <vfprintf+0x38e>
    4ec8:	01 ff       	sbrs	r16, 1
    4eca:	02 c0       	rjmp	.+4      	; 0x4ed0 <vfprintf+0x376>
    4ecc:	8b e2       	ldi	r24, 0x2B	; 43
    4ece:	01 c0       	rjmp	.+2      	; 0x4ed2 <vfprintf+0x378>
    4ed0:	80 e2       	ldi	r24, 0x20	; 32
    4ed2:	f7 fc       	sbrc	r15, 7
    4ed4:	8d e2       	ldi	r24, 0x2D	; 45
    4ed6:	90 e0       	ldi	r25, 0x00	; 0
    4ed8:	b3 01       	movw	r22, r6
    4eda:	68 d0       	rcall	.+208    	; 0x4fac <fputc>
    4edc:	05 c0       	rjmp	.+10     	; 0x4ee8 <vfprintf+0x38e>
    4ede:	80 e3       	ldi	r24, 0x30	; 48
    4ee0:	90 e0       	ldi	r25, 0x00	; 0
    4ee2:	b3 01       	movw	r22, r6
    4ee4:	63 d0       	rcall	.+198    	; 0x4fac <fputc>
    4ee6:	9a 94       	dec	r9
    4ee8:	d9 14       	cp	r13, r9
    4eea:	c8 f3       	brcs	.-14     	; 0x4ede <vfprintf+0x384>
    4eec:	da 94       	dec	r13
    4eee:	f1 01       	movw	r30, r2
    4ef0:	ed 0d       	add	r30, r13
    4ef2:	f1 1d       	adc	r31, r1
    4ef4:	80 81       	ld	r24, Z
    4ef6:	90 e0       	ldi	r25, 0x00	; 0
    4ef8:	b3 01       	movw	r22, r6
    4efa:	58 d0       	rcall	.+176    	; 0x4fac <fputc>
    4efc:	dd 20       	and	r13, r13
    4efe:	b1 f7       	brne	.-20     	; 0x4eec <vfprintf+0x392>
    4f00:	05 c0       	rjmp	.+10     	; 0x4f0c <vfprintf+0x3b2>
    4f02:	80 e2       	ldi	r24, 0x20	; 32
    4f04:	90 e0       	ldi	r25, 0x00	; 0
    4f06:	b3 01       	movw	r22, r6
    4f08:	51 d0       	rcall	.+162    	; 0x4fac <fputc>
    4f0a:	ea 94       	dec	r14
    4f0c:	ee 20       	and	r14, r14
    4f0e:	c9 f7       	brne	.-14     	; 0x4f02 <vfprintf+0x3a8>
    4f10:	50 ce       	rjmp	.-864    	; 0x4bb2 <vfprintf+0x58>
    4f12:	f3 01       	movw	r30, r6
    4f14:	66 81       	ldd	r22, Z+6	; 0x06
    4f16:	77 81       	ldd	r23, Z+7	; 0x07
    4f18:	cb 01       	movw	r24, r22
    4f1a:	2b 96       	adiw	r28, 0x0b	; 11
    4f1c:	0f b6       	in	r0, 0x3f	; 63
    4f1e:	f8 94       	cli
    4f20:	de bf       	out	0x3e, r29	; 62
    4f22:	0f be       	out	0x3f, r0	; 63
    4f24:	cd bf       	out	0x3d, r28	; 61
    4f26:	cf 91       	pop	r28
    4f28:	df 91       	pop	r29
    4f2a:	1f 91       	pop	r17
    4f2c:	0f 91       	pop	r16
    4f2e:	ff 90       	pop	r15
    4f30:	ef 90       	pop	r14
    4f32:	df 90       	pop	r13
    4f34:	cf 90       	pop	r12
    4f36:	bf 90       	pop	r11
    4f38:	af 90       	pop	r10
    4f3a:	9f 90       	pop	r9
    4f3c:	8f 90       	pop	r8
    4f3e:	7f 90       	pop	r7
    4f40:	6f 90       	pop	r6
    4f42:	5f 90       	pop	r5
    4f44:	4f 90       	pop	r4
    4f46:	3f 90       	pop	r3
    4f48:	2f 90       	pop	r2
    4f4a:	08 95       	ret

00004f4c <__eerd_byte_usb1287>:
    4f4c:	f9 99       	sbic	0x1f, 1	; 31
    4f4e:	fe cf       	rjmp	.-4      	; 0x4f4c <__eerd_byte_usb1287>
    4f50:	92 bd       	out	0x22, r25	; 34
    4f52:	81 bd       	out	0x21, r24	; 33
    4f54:	f8 9a       	sbi	0x1f, 0	; 31
    4f56:	99 27       	eor	r25, r25
    4f58:	80 b5       	in	r24, 0x20	; 32
    4f5a:	08 95       	ret

00004f5c <__eeupd_byte_usb1287>:
    4f5c:	26 2f       	mov	r18, r22

00004f5e <__eeupd_r18_usb1287>:
    4f5e:	f9 99       	sbic	0x1f, 1	; 31
    4f60:	fe cf       	rjmp	.-4      	; 0x4f5e <__eeupd_r18_usb1287>
    4f62:	92 bd       	out	0x22, r25	; 34
    4f64:	81 bd       	out	0x21, r24	; 33
    4f66:	f8 9a       	sbi	0x1f, 0	; 31
    4f68:	01 97       	sbiw	r24, 0x01	; 1
    4f6a:	00 b4       	in	r0, 0x20	; 32
    4f6c:	02 16       	cp	r0, r18
    4f6e:	39 f0       	breq	.+14     	; 0x4f7e <__eeupd_r18_usb1287+0x20>
    4f70:	1f ba       	out	0x1f, r1	; 31
    4f72:	20 bd       	out	0x20, r18	; 32
    4f74:	0f b6       	in	r0, 0x3f	; 63
    4f76:	f8 94       	cli
    4f78:	fa 9a       	sbi	0x1f, 2	; 31
    4f7a:	f9 9a       	sbi	0x1f, 1	; 31
    4f7c:	0f be       	out	0x3f, r0	; 63
    4f7e:	08 95       	ret

00004f80 <strnlen_P>:
    4f80:	fc 01       	movw	r30, r24
    4f82:	05 90       	lpm	r0, Z+
    4f84:	61 50       	subi	r22, 0x01	; 1
    4f86:	70 40       	sbci	r23, 0x00	; 0
    4f88:	01 10       	cpse	r0, r1
    4f8a:	d8 f7       	brcc	.-10     	; 0x4f82 <strnlen_P+0x2>
    4f8c:	80 95       	com	r24
    4f8e:	90 95       	com	r25
    4f90:	8e 0f       	add	r24, r30
    4f92:	9f 1f       	adc	r25, r31
    4f94:	08 95       	ret

00004f96 <strnlen>:
    4f96:	fc 01       	movw	r30, r24
    4f98:	61 50       	subi	r22, 0x01	; 1
    4f9a:	70 40       	sbci	r23, 0x00	; 0
    4f9c:	01 90       	ld	r0, Z+
    4f9e:	01 10       	cpse	r0, r1
    4fa0:	d8 f7       	brcc	.-10     	; 0x4f98 <strnlen+0x2>
    4fa2:	80 95       	com	r24
    4fa4:	90 95       	com	r25
    4fa6:	8e 0f       	add	r24, r30
    4fa8:	9f 1f       	adc	r25, r31
    4faa:	08 95       	ret

00004fac <fputc>:
    4fac:	0f 93       	push	r16
    4fae:	1f 93       	push	r17
    4fb0:	cf 93       	push	r28
    4fb2:	df 93       	push	r29
    4fb4:	8c 01       	movw	r16, r24
    4fb6:	eb 01       	movw	r28, r22
    4fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    4fba:	81 ff       	sbrs	r24, 1
    4fbc:	1b c0       	rjmp	.+54     	; 0x4ff4 <fputc+0x48>
    4fbe:	82 ff       	sbrs	r24, 2
    4fc0:	0d c0       	rjmp	.+26     	; 0x4fdc <fputc+0x30>
    4fc2:	2e 81       	ldd	r18, Y+6	; 0x06
    4fc4:	3f 81       	ldd	r19, Y+7	; 0x07
    4fc6:	8c 81       	ldd	r24, Y+4	; 0x04
    4fc8:	9d 81       	ldd	r25, Y+5	; 0x05
    4fca:	28 17       	cp	r18, r24
    4fcc:	39 07       	cpc	r19, r25
    4fce:	64 f4       	brge	.+24     	; 0x4fe8 <fputc+0x3c>
    4fd0:	e8 81       	ld	r30, Y
    4fd2:	f9 81       	ldd	r31, Y+1	; 0x01
    4fd4:	01 93       	st	Z+, r16
    4fd6:	f9 83       	std	Y+1, r31	; 0x01
    4fd8:	e8 83       	st	Y, r30
    4fda:	06 c0       	rjmp	.+12     	; 0x4fe8 <fputc+0x3c>
    4fdc:	e8 85       	ldd	r30, Y+8	; 0x08
    4fde:	f9 85       	ldd	r31, Y+9	; 0x09
    4fe0:	80 2f       	mov	r24, r16
    4fe2:	09 95       	icall
    4fe4:	89 2b       	or	r24, r25
    4fe6:	31 f4       	brne	.+12     	; 0x4ff4 <fputc+0x48>
    4fe8:	8e 81       	ldd	r24, Y+6	; 0x06
    4fea:	9f 81       	ldd	r25, Y+7	; 0x07
    4fec:	01 96       	adiw	r24, 0x01	; 1
    4fee:	9f 83       	std	Y+7, r25	; 0x07
    4ff0:	8e 83       	std	Y+6, r24	; 0x06
    4ff2:	02 c0       	rjmp	.+4      	; 0x4ff8 <fputc+0x4c>
    4ff4:	0f ef       	ldi	r16, 0xFF	; 255
    4ff6:	1f ef       	ldi	r17, 0xFF	; 255
    4ff8:	c8 01       	movw	r24, r16
    4ffa:	df 91       	pop	r29
    4ffc:	cf 91       	pop	r28
    4ffe:	1f 91       	pop	r17
    5000:	0f 91       	pop	r16
    5002:	08 95       	ret

00005004 <__ultoa_invert>:
    5004:	fa 01       	movw	r30, r20
    5006:	aa 27       	eor	r26, r26
    5008:	28 30       	cpi	r18, 0x08	; 8
    500a:	51 f1       	breq	.+84     	; 0x5060 <__ultoa_invert+0x5c>
    500c:	20 31       	cpi	r18, 0x10	; 16
    500e:	81 f1       	breq	.+96     	; 0x5070 <__ultoa_invert+0x6c>
    5010:	e8 94       	clt
    5012:	6f 93       	push	r22
    5014:	6e 7f       	andi	r22, 0xFE	; 254
    5016:	6e 5f       	subi	r22, 0xFE	; 254
    5018:	7f 4f       	sbci	r23, 0xFF	; 255
    501a:	8f 4f       	sbci	r24, 0xFF	; 255
    501c:	9f 4f       	sbci	r25, 0xFF	; 255
    501e:	af 4f       	sbci	r26, 0xFF	; 255
    5020:	b1 e0       	ldi	r27, 0x01	; 1
    5022:	3e d0       	rcall	.+124    	; 0x50a0 <__ultoa_invert+0x9c>
    5024:	b4 e0       	ldi	r27, 0x04	; 4
    5026:	3c d0       	rcall	.+120    	; 0x50a0 <__ultoa_invert+0x9c>
    5028:	67 0f       	add	r22, r23
    502a:	78 1f       	adc	r23, r24
    502c:	89 1f       	adc	r24, r25
    502e:	9a 1f       	adc	r25, r26
    5030:	a1 1d       	adc	r26, r1
    5032:	68 0f       	add	r22, r24
    5034:	79 1f       	adc	r23, r25
    5036:	8a 1f       	adc	r24, r26
    5038:	91 1d       	adc	r25, r1
    503a:	a1 1d       	adc	r26, r1
    503c:	6a 0f       	add	r22, r26
    503e:	71 1d       	adc	r23, r1
    5040:	81 1d       	adc	r24, r1
    5042:	91 1d       	adc	r25, r1
    5044:	a1 1d       	adc	r26, r1
    5046:	20 d0       	rcall	.+64     	; 0x5088 <__ultoa_invert+0x84>
    5048:	09 f4       	brne	.+2      	; 0x504c <__ultoa_invert+0x48>
    504a:	68 94       	set
    504c:	3f 91       	pop	r19
    504e:	2a e0       	ldi	r18, 0x0A	; 10
    5050:	26 9f       	mul	r18, r22
    5052:	11 24       	eor	r1, r1
    5054:	30 19       	sub	r19, r0
    5056:	30 5d       	subi	r19, 0xD0	; 208
    5058:	31 93       	st	Z+, r19
    505a:	de f6       	brtc	.-74     	; 0x5012 <__ultoa_invert+0xe>
    505c:	cf 01       	movw	r24, r30
    505e:	08 95       	ret
    5060:	46 2f       	mov	r20, r22
    5062:	47 70       	andi	r20, 0x07	; 7
    5064:	40 5d       	subi	r20, 0xD0	; 208
    5066:	41 93       	st	Z+, r20
    5068:	b3 e0       	ldi	r27, 0x03	; 3
    506a:	0f d0       	rcall	.+30     	; 0x508a <__ultoa_invert+0x86>
    506c:	c9 f7       	brne	.-14     	; 0x5060 <__ultoa_invert+0x5c>
    506e:	f6 cf       	rjmp	.-20     	; 0x505c <__ultoa_invert+0x58>
    5070:	46 2f       	mov	r20, r22
    5072:	4f 70       	andi	r20, 0x0F	; 15
    5074:	40 5d       	subi	r20, 0xD0	; 208
    5076:	4a 33       	cpi	r20, 0x3A	; 58
    5078:	18 f0       	brcs	.+6      	; 0x5080 <__ultoa_invert+0x7c>
    507a:	49 5d       	subi	r20, 0xD9	; 217
    507c:	31 fd       	sbrc	r19, 1
    507e:	40 52       	subi	r20, 0x20	; 32
    5080:	41 93       	st	Z+, r20
    5082:	02 d0       	rcall	.+4      	; 0x5088 <__ultoa_invert+0x84>
    5084:	a9 f7       	brne	.-22     	; 0x5070 <__ultoa_invert+0x6c>
    5086:	ea cf       	rjmp	.-44     	; 0x505c <__ultoa_invert+0x58>
    5088:	b4 e0       	ldi	r27, 0x04	; 4
    508a:	a6 95       	lsr	r26
    508c:	97 95       	ror	r25
    508e:	87 95       	ror	r24
    5090:	77 95       	ror	r23
    5092:	67 95       	ror	r22
    5094:	ba 95       	dec	r27
    5096:	c9 f7       	brne	.-14     	; 0x508a <__ultoa_invert+0x86>
    5098:	00 97       	sbiw	r24, 0x00	; 0
    509a:	61 05       	cpc	r22, r1
    509c:	71 05       	cpc	r23, r1
    509e:	08 95       	ret
    50a0:	9b 01       	movw	r18, r22
    50a2:	ac 01       	movw	r20, r24
    50a4:	0a 2e       	mov	r0, r26
    50a6:	06 94       	lsr	r0
    50a8:	57 95       	ror	r21
    50aa:	47 95       	ror	r20
    50ac:	37 95       	ror	r19
    50ae:	27 95       	ror	r18
    50b0:	ba 95       	dec	r27
    50b2:	c9 f7       	brne	.-14     	; 0x50a6 <__ultoa_invert+0xa2>
    50b4:	62 0f       	add	r22, r18
    50b6:	73 1f       	adc	r23, r19
    50b8:	84 1f       	adc	r24, r20
    50ba:	95 1f       	adc	r25, r21
    50bc:	a0 1d       	adc	r26, r0
    50be:	08 95       	ret

000050c0 <_exit>:
    50c0:	f8 94       	cli

000050c2 <__stop_program>:
    50c2:	ff cf       	rjmp	.-2      	; 0x50c2 <__stop_program>
