
USBtoSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  0000101e  000010b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000101e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000122  00800116  00800116  000010c8  2**0
                  ALLOC
  3 .stab         00000b1c  00000000  00000000  000010c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00001be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000490  00000000  00000000  00001d53  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000c88  00000000  00000000  000021e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000083f9  00000000  00000000  00002e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000020cc  00000000  00000000  0000b264  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006391  00000000  00000000  0000d330  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006e0  00000000  00000000  000136c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003459  00000000  00000000  00013da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000367a  00000000  00000000  000171fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000580  00000000  00000000  0001a877  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       0:	9a c0       	rjmp	.+308    	; 0x136 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       4:	b5 c0       	rjmp	.+362    	; 0x170 <__bad_interrupt>
	}
	else
	{
		return 0;
	}
}
       6:	00 00       	nop
       8:	b3 c0       	rjmp	.+358    	; 0x170 <__bad_interrupt>
       a:	00 00       	nop
       c:	b1 c0       	rjmp	.+354    	; 0x170 <__bad_interrupt>
       e:	00 00       	nop
      10:	af c0       	rjmp	.+350    	; 0x170 <__bad_interrupt>
      12:	00 00       	nop
      14:	ad c0       	rjmp	.+346    	; 0x170 <__bad_interrupt>
      16:	00 00       	nop
      18:	ab c0       	rjmp	.+342    	; 0x170 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a9 c0       	rjmp	.+338    	; 0x170 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a7 c0       	rjmp	.+334    	; 0x170 <__bad_interrupt>
      22:	00 00       	nop
      24:	a5 c0       	rjmp	.+330    	; 0x170 <__bad_interrupt>
      26:	00 00       	nop
      28:	33 c3       	rjmp	.+1638   	; 0x690 <__vector_10>
      2a:	00 00       	nop
      2c:	f4 c2       	rjmp	.+1512   	; 0x616 <__vector_11>
      2e:	00 00       	nop
      30:	9f c0       	rjmp	.+318    	; 0x170 <__bad_interrupt>
      32:	00 00       	nop
      34:	9d c0       	rjmp	.+314    	; 0x170 <__bad_interrupt>
      36:	00 00       	nop
      38:	9b c0       	rjmp	.+310    	; 0x170 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	99 c0       	rjmp	.+306    	; 0x170 <__bad_interrupt>
      3e:	00 00       	nop
      40:	97 c0       	rjmp	.+302    	; 0x170 <__bad_interrupt>
      42:	00 00       	nop
      44:	95 c0       	rjmp	.+298    	; 0x170 <__bad_interrupt>
      46:	00 00       	nop
      48:	93 c0       	rjmp	.+294    	; 0x170 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	91 c0       	rjmp	.+290    	; 0x170 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8f c0       	rjmp	.+286    	; 0x170 <__bad_interrupt>
      52:	00 00       	nop
      54:	8d c0       	rjmp	.+282    	; 0x170 <__bad_interrupt>
      56:	00 00       	nop
      58:	8b c0       	rjmp	.+278    	; 0x170 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	89 c0       	rjmp	.+274    	; 0x170 <__bad_interrupt>
      5e:	00 00       	nop
      60:	87 c0       	rjmp	.+270    	; 0x170 <__bad_interrupt>
      62:	00 00       	nop
      64:	cc c0       	rjmp	.+408    	; 0x1fe <__vector_25>
      66:	00 00       	nop
      68:	83 c0       	rjmp	.+262    	; 0x170 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	81 c0       	rjmp	.+258    	; 0x170 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7f c0       	rjmp	.+254    	; 0x170 <__bad_interrupt>
      72:	00 00       	nop
      74:	7d c0       	rjmp	.+250    	; 0x170 <__bad_interrupt>
      76:	00 00       	nop
      78:	7b c0       	rjmp	.+246    	; 0x170 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	79 c0       	rjmp	.+242    	; 0x170 <__bad_interrupt>
      7e:	00 00       	nop
      80:	77 c0       	rjmp	.+238    	; 0x170 <__bad_interrupt>
      82:	00 00       	nop
      84:	75 c0       	rjmp	.+234    	; 0x170 <__bad_interrupt>
      86:	00 00       	nop
      88:	73 c0       	rjmp	.+230    	; 0x170 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	71 c0       	rjmp	.+226    	; 0x170 <__bad_interrupt>
      8e:	00 00       	nop
      90:	6f c0       	rjmp	.+222    	; 0x170 <__bad_interrupt>
      92:	00 00       	nop
      94:	6d c0       	rjmp	.+218    	; 0x170 <__bad_interrupt>
      96:	00 00       	nop

00000098 <DeviceDescriptor>:
      98:	12 01 10 01 02 00 00 08 eb 03 4b 20 01 00 01 02     ..........K ....
      a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
      aa:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      ba:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
      ca:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
      da:	07 05 04 02 10 00 01 07 05 83 02 10 00 01           ..............

000000e8 <LanguageString>:
      e8:	04 03 09 04                                         ....

000000ec <ManufacturerString>:
      ec:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      fc:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000106 <ProductString>:
     106:	30 03 4c 00 55 00 46 00 41 00 20 00 55 00 53 00     0.L.U.F.A. .U.S.
     116:	42 00 2d 00 52 00 53 00 32 00 33 00 32 00 20 00     B.-.R.S.2.3.2. .
     126:	41 00 64 00 61 00 70 00 74 00 65 00 72 00 00 00     A.d.a.p.t.e.r...

00000136 <__ctors_end>:
     136:	11 24       	eor	r1, r1
     138:	1f be       	out	0x3f, r1	; 63
     13a:	cf ef       	ldi	r28, 0xFF	; 255
     13c:	d0 e2       	ldi	r29, 0x20	; 32
     13e:	de bf       	out	0x3e, r29	; 62
     140:	cd bf       	out	0x3d, r28	; 61

00000142 <__do_copy_data>:
     142:	11 e0       	ldi	r17, 0x01	; 1
     144:	a0 e0       	ldi	r26, 0x00	; 0
     146:	b1 e0       	ldi	r27, 0x01	; 1
     148:	ee e1       	ldi	r30, 0x1E	; 30
     14a:	f0 e1       	ldi	r31, 0x10	; 16
     14c:	00 e0       	ldi	r16, 0x00	; 0
     14e:	0b bf       	out	0x3b, r16	; 59
     150:	02 c0       	rjmp	.+4      	; 0x156 <__do_copy_data+0x14>
     152:	07 90       	elpm	r0, Z+
     154:	0d 92       	st	X+, r0
     156:	a6 31       	cpi	r26, 0x16	; 22
     158:	b1 07       	cpc	r27, r17
     15a:	d9 f7       	brne	.-10     	; 0x152 <__do_copy_data+0x10>

0000015c <__do_clear_bss>:
     15c:	12 e0       	ldi	r17, 0x02	; 2
     15e:	a6 e1       	ldi	r26, 0x16	; 22
     160:	b1 e0       	ldi	r27, 0x01	; 1
     162:	01 c0       	rjmp	.+2      	; 0x166 <.do_clear_bss_start>

00000164 <.do_clear_bss_loop>:
     164:	1d 92       	st	X+, r1

00000166 <.do_clear_bss_start>:
     166:	a8 33       	cpi	r26, 0x38	; 56
     168:	b1 07       	cpc	r27, r17
     16a:	e1 f7       	brne	.-8      	; 0x164 <.do_clear_bss_loop>
     16c:	e6 d0       	rcall	.+460    	; 0x33a <main>
     16e:	55 c7       	rjmp	.+3754   	; 0x101a <_exit>

00000170 <__bad_interrupt>:
     170:	47 cf       	rjmp	.-370    	; 0x0 <__vectors>

00000172 <RingBuffer_Insert>:
		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to insert into.
		 *  \param[in]     Data    Data element to insert into the buffer.
		 */
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data)
		{
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
			GCC_FORCE_POINTER_ACCESS(Buffer);
     176:	ec 01       	movw	r28, r24

			*Buffer->In = Data;
     178:	e8 81       	ld	r30, Y
     17a:	f9 81       	ldd	r31, Y+1	; 0x01
     17c:	60 83       	st	Z, r22

			if (++Buffer->In == Buffer->End)
     17e:	88 81       	ld	r24, Y
     180:	99 81       	ldd	r25, Y+1	; 0x01
     182:	01 96       	adiw	r24, 0x01	; 1
     184:	99 83       	std	Y+1, r25	; 0x01
     186:	88 83       	st	Y, r24
     188:	2e 81       	ldd	r18, Y+6	; 0x06
     18a:	3f 81       	ldd	r19, Y+7	; 0x07
     18c:	82 17       	cp	r24, r18
     18e:	93 07       	cpc	r25, r19
     190:	21 f4       	brne	.+8      	; 0x19a <RingBuffer_Insert+0x28>
			  Buffer->In = Buffer->Start;
     192:	8c 81       	ldd	r24, Y+4	; 0x04
     194:	9d 81       	ldd	r25, Y+5	; 0x05
     196:	99 83       	std	Y+1, r25	; 0x01
     198:	88 83       	st	Y, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     19a:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     19c:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Buffer->Count++;
     19e:	89 85       	ldd	r24, Y+9	; 0x09
     1a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     1a2:	01 96       	adiw	r24, 0x01	; 1
     1a4:	9a 87       	std	Y+10, r25	; 0x0a
     1a6:	89 87       	std	Y+9, r24	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     1a8:	2f bf       	out	0x3f, r18	; 63

			SetGlobalInterruptMask(CurrentGlobalInt);
		}
     1aa:	df 91       	pop	r29
     1ac:	cf 91       	pop	r28
     1ae:	08 95       	ret

000001b0 <RingBuffer_Remove>:
		 *
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
     1b0:	cf 93       	push	r28
     1b2:	df 93       	push	r29
			GCC_FORCE_POINTER_ACCESS(Buffer);
     1b4:	ec 01       	movw	r28, r24
		
			uint8_t Data = *Buffer->Out;
     1b6:	ea 81       	ldd	r30, Y+2	; 0x02
     1b8:	fb 81       	ldd	r31, Y+3	; 0x03
     1ba:	31 91       	ld	r19, Z+

			if (++Buffer->Out == Buffer->End)
     1bc:	fb 83       	std	Y+3, r31	; 0x03
     1be:	ea 83       	std	Y+2, r30	; 0x02
     1c0:	8e 81       	ldd	r24, Y+6	; 0x06
     1c2:	9f 81       	ldd	r25, Y+7	; 0x07
     1c4:	e8 17       	cp	r30, r24
     1c6:	f9 07       	cpc	r31, r25
     1c8:	21 f4       	brne	.+8      	; 0x1d2 <RingBuffer_Remove+0x22>
			  Buffer->Out = Buffer->Start;
     1ca:	8c 81       	ldd	r24, Y+4	; 0x04
     1cc:	9d 81       	ldd	r25, Y+5	; 0x05
     1ce:	9b 83       	std	Y+3, r25	; 0x03
     1d0:	8a 83       	std	Y+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     1d2:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     1d4:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Buffer->Count--;
     1d6:	89 85       	ldd	r24, Y+9	; 0x09
     1d8:	9a 85       	ldd	r25, Y+10	; 0x0a
     1da:	01 97       	sbiw	r24, 0x01	; 1
     1dc:	9a 87       	std	Y+10, r25	; 0x0a
     1de:	89 87       	std	Y+9, r24	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     1e0:	2f bf       	out	0x3f, r18	; 63

			SetGlobalInterruptMask(CurrentGlobalInt);

			return Data;
		}
     1e2:	83 2f       	mov	r24, r19
     1e4:	df 91       	pop	r29
     1e6:	cf 91       	pop	r28
     1e8:	08 95       	ret

000001ea <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     1ea:	8b b1       	in	r24, 0x0b	; 11
     1ec:	8f 70       	andi	r24, 0x0F	; 15
     1ee:	80 6a       	ori	r24, 0xA0	; 160
     1f0:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     1f2:	08 95       	ret

000001f4 <EVENT_USB_Device_Disconnect>:
     1f4:	8b b1       	in	r24, 0x0b	; 11
     1f6:	8f 70       	andi	r24, 0x0F	; 15
     1f8:	80 61       	ori	r24, 0x10	; 16
     1fa:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     1fc:	08 95       	ret

000001fe <__vector_25>:

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
     1fe:	1f 92       	push	r1
     200:	0f 92       	push	r0
     202:	0f b6       	in	r0, 0x3f	; 63
     204:	0f 92       	push	r0
     206:	0b b6       	in	r0, 0x3b	; 59
     208:	0f 92       	push	r0
     20a:	11 24       	eor	r1, r1
     20c:	2f 93       	push	r18
     20e:	3f 93       	push	r19
     210:	4f 93       	push	r20
     212:	5f 93       	push	r21
     214:	6f 93       	push	r22
     216:	7f 93       	push	r23
     218:	8f 93       	push	r24
     21a:	9f 93       	push	r25
     21c:	af 93       	push	r26
     21e:	bf 93       	push	r27
     220:	ef 93       	push	r30
     222:	ff 93       	push	r31
	uint8_t ReceivedByte = UDR1;
     224:	60 91 ce 00 	lds	r22, 0x00CE

	if (USB_DeviceState == DEVICE_STATE_Configured)
     228:	8e b3       	in	r24, 0x1e	; 30
     22a:	84 30       	cpi	r24, 0x04	; 4
     22c:	19 f4       	brne	.+6      	; 0x234 <__vector_25+0x36>
	  RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
     22e:	81 ea       	ldi	r24, 0xA1	; 161
     230:	91 e0       	ldi	r25, 0x01	; 1
     232:	9f df       	rcall	.-194    	; 0x172 <RingBuffer_Insert>
}
     234:	ff 91       	pop	r31
     236:	ef 91       	pop	r30
     238:	bf 91       	pop	r27
     23a:	af 91       	pop	r26
     23c:	9f 91       	pop	r25
     23e:	8f 91       	pop	r24
     240:	7f 91       	pop	r23
     242:	6f 91       	pop	r22
     244:	5f 91       	pop	r21
     246:	4f 91       	pop	r20
     248:	3f 91       	pop	r19
     24a:	2f 91       	pop	r18
     24c:	0f 90       	pop	r0
     24e:	0b be       	out	0x3b, r0	; 59
     250:	0f 90       	pop	r0
     252:	0f be       	out	0x3f, r0	; 63
     254:	0f 90       	pop	r0
     256:	1f 90       	pop	r1
     258:	18 95       	reti

0000025a <EVENT_CDC_Device_LineEncodingChanged>:
/** Event handler for the CDC Class driver Line Encoding Changed event.
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     25a:	1f 93       	push	r17
     25c:	fc 01       	movw	r30, r24
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
     25e:	84 89       	ldd	r24, Z+20	; 0x14
     260:	81 30       	cpi	r24, 0x01	; 1
     262:	19 f0       	breq	.+6      	; 0x26a <EVENT_CDC_Device_LineEncodingChanged+0x10>
     264:	82 30       	cpi	r24, 0x02	; 2
     266:	19 f4       	brne	.+6      	; 0x26e <EVENT_CDC_Device_LineEncodingChanged+0x14>
     268:	04 c0       	rjmp	.+8      	; 0x272 <EVENT_CDC_Device_LineEncodingChanged+0x18>
     26a:	10 e3       	ldi	r17, 0x30	; 48
     26c:	03 c0       	rjmp	.+6      	; 0x274 <EVENT_CDC_Device_LineEncodingChanged+0x1a>
     26e:	10 e0       	ldi	r17, 0x00	; 0
     270:	01 c0       	rjmp	.+2      	; 0x274 <EVENT_CDC_Device_LineEncodingChanged+0x1a>
     272:	10 e2       	ldi	r17, 0x20	; 32
		case CDC_PARITY_Even:
			ConfigMask = (1 << UPM11);
			break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
     274:	83 89       	ldd	r24, Z+19	; 0x13
     276:	82 30       	cpi	r24, 0x02	; 2
     278:	09 f4       	brne	.+2      	; 0x27c <EVENT_CDC_Device_LineEncodingChanged+0x22>
	  ConfigMask |= (1 << USBS1);
     27a:	18 60       	ori	r17, 0x08	; 8

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
     27c:	85 89       	ldd	r24, Z+21	; 0x15
     27e:	87 30       	cpi	r24, 0x07	; 7
     280:	31 f0       	breq	.+12     	; 0x28e <EVENT_CDC_Device_LineEncodingChanged+0x34>
     282:	88 30       	cpi	r24, 0x08	; 8
     284:	31 f0       	breq	.+12     	; 0x292 <EVENT_CDC_Device_LineEncodingChanged+0x38>
     286:	86 30       	cpi	r24, 0x06	; 6
     288:	29 f4       	brne	.+10     	; 0x294 <EVENT_CDC_Device_LineEncodingChanged+0x3a>
	{
		case 6:
			ConfigMask |= (1 << UCSZ10);
     28a:	12 60       	ori	r17, 0x02	; 2
     28c:	03 c0       	rjmp	.+6      	; 0x294 <EVENT_CDC_Device_LineEncodingChanged+0x3a>
			break;
		case 7:
			ConfigMask |= (1 << UCSZ11);
     28e:	14 60       	ori	r17, 0x04	; 4
     290:	01 c0       	rjmp	.+2      	; 0x294 <EVENT_CDC_Device_LineEncodingChanged+0x3a>
			break;
		case 8:
			ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
     292:	16 60       	ori	r17, 0x06	; 6
			break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
     294:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1A = 0;
     298:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0;
     29c:	10 92 ca 00 	sts	0x00CA, r1

	/* Set the new baud rate before configuring the USART */
	UBRR1  = SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     2a0:	27 85       	ldd	r18, Z+15	; 0x0f
     2a2:	30 89       	ldd	r19, Z+16	; 0x10
     2a4:	41 89       	ldd	r20, Z+17	; 0x11
     2a6:	52 89       	ldd	r21, Z+18	; 0x12
     2a8:	ca 01       	movw	r24, r20
     2aa:	b9 01       	movw	r22, r18
     2ac:	96 95       	lsr	r25
     2ae:	87 95       	ror	r24
     2b0:	77 95       	ror	r23
     2b2:	67 95       	ror	r22
     2b4:	60 5c       	subi	r22, 0xC0	; 192
     2b6:	7d 4b       	sbci	r23, 0xBD	; 189
     2b8:	80 4f       	sbci	r24, 0xF0	; 240
     2ba:	9f 4f       	sbci	r25, 0xFF	; 255
     2bc:	8c d6       	rcall	.+3352   	; 0xfd6 <__udivmodsi4>
     2be:	21 50       	subi	r18, 0x01	; 1
     2c0:	30 40       	sbci	r19, 0x00	; 0
     2c2:	30 93 cd 00 	sts	0x00CD, r19
     2c6:	20 93 cc 00 	sts	0x00CC, r18

	/* Reconfigure the USART in double speed mode for a wider baud rate range at the expense of accuracy */
	UCSR1C = ConfigMask;
     2ca:	10 93 ca 00 	sts	0x00CA, r17
	UCSR1A = (1 << U2X1);
     2ce:	82 e0       	ldi	r24, 0x02	; 2
     2d0:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
     2d4:	88 e9       	ldi	r24, 0x98	; 152
     2d6:	80 93 c9 00 	sts	0x00C9, r24
}
     2da:	1f 91       	pop	r17
     2dc:	08 95       	ret

000002de <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	91 e0       	ldi	r25, 0x01	; 1
}
     2e2:	0c c6       	rjmp	.+3096   	; 0xefc <CDC_Device_ProcessControlRequest>

000002e4 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	91 e0       	ldi	r25, 0x01	; 1
     2e8:	b9 d5       	rcall	.+2930   	; 0xe5c <CDC_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     2ea:	80 fd       	sbrc	r24, 0
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <EVENT_USB_Device_ConfigurationChanged+0xe>
     2ee:	90 e9       	ldi	r25, 0x90	; 144
     2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <EVENT_USB_Device_ConfigurationChanged+0x10>
     2f2:	90 e6       	ldi	r25, 0x60	; 96
     2f4:	8b b1       	in	r24, 0x0b	; 11
     2f6:	8f 70       	andi	r24, 0x0F	; 15
     2f8:	98 2b       	or	r25, r24
     2fa:	9b b9       	out	0x0b, r25	; 11
}
     2fc:	08 95       	ret

000002fe <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     2fe:	84 b7       	in	r24, 0x34	; 52
     300:	87 7f       	andi	r24, 0xF7	; 247
     302:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     304:	88 e1       	ldi	r24, 0x18	; 24
     306:	0f b6       	in	r0, 0x3f	; 63
     308:	f8 94       	cli
     30a:	80 93 60 00 	sts	0x0060, r24
     30e:	10 92 60 00 	sts	0x0060, r1
     312:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	80 e8       	ldi	r24, 0x80	; 128
     318:	0f b6       	in	r0, 0x3f	; 63
     31a:	f8 94       	cli
     31c:	80 93 61 00 	sts	0x0061, r24
     320:	90 93 61 00 	sts	0x0061, r25
     324:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     326:	8a b1       	in	r24, 0x0a	; 10
     328:	80 6f       	ori	r24, 0xF0	; 240
     32a:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     32c:	8b b1       	in	r24, 0x0b	; 11
     32e:	8f 70       	andi	r24, 0x0F	; 15
     330:	8b b9       	out	0x0b, r24	; 11
	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
     332:	5b d1       	rcall	.+694    	; 0x5ea <USB_Init>

	/* Start the flush timer so that overflows occur rapidly to push received bytes to the USB interface */
	TCCR0B = (1 << CS02);
     334:	84 e0       	ldi	r24, 0x04	; 4
     336:	85 bd       	out	0x25, r24	; 37
}
     338:	08 95       	ret

0000033a <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
     33a:	cf 93       	push	r28
     33c:	df 93       	push	r29
	SetupHardware();
     33e:	df df       	rcall	.-66     	; 0x2fe <SetupHardware>
		 */
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		                                         ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     340:	e6 e1       	ldi	r30, 0x16	; 22
     342:	f1 e0       	ldi	r31, 0x01	; 1
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     344:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     346:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
	
			Buffer->In     = DataPtr;
     348:	81 e2       	ldi	r24, 0x21	; 33
     34a:	91 e0       	ldi	r25, 0x01	; 1
     34c:	91 83       	std	Z+1, r25	; 0x01
     34e:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
     350:	93 83       	std	Z+3, r25	; 0x03
     352:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
     354:	95 83       	std	Z+5, r25	; 0x05
     356:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
     358:	81 ea       	ldi	r24, 0xA1	; 161
     35a:	91 e0       	ldi	r25, 0x01	; 1
     35c:	97 83       	std	Z+7, r25	; 0x07
     35e:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
     360:	80 e8       	ldi	r24, 0x80	; 128
     362:	80 87       	std	Z+8, r24	; 0x08
			Buffer->Count  = 0;
     364:	12 86       	std	Z+10, r1	; 0x0a
     366:	11 86       	std	Z+9, r1	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     368:	2f bf       	out	0x3f, r18	; 63
		 */
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		                                         ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     36a:	e1 ea       	ldi	r30, 0xA1	; 161
     36c:	f1 e0       	ldi	r31, 0x01	; 1
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     36e:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     370:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
	
			Buffer->In     = DataPtr;
     372:	8c ea       	ldi	r24, 0xAC	; 172
     374:	91 e0       	ldi	r25, 0x01	; 1
     376:	91 83       	std	Z+1, r25	; 0x01
     378:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
     37a:	93 83       	std	Z+3, r25	; 0x03
     37c:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
     37e:	95 83       	std	Z+5, r25	; 0x05
     380:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
     382:	8c e2       	ldi	r24, 0x2C	; 44
     384:	92 e0       	ldi	r25, 0x02	; 2
     386:	97 83       	std	Z+7, r25	; 0x07
     388:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
     38a:	80 e8       	ldi	r24, 0x80	; 128
     38c:	80 87       	std	Z+8, r24	; 0x08
			Buffer->Count  = 0;
     38e:	12 86       	std	Z+10, r1	; 0x0a
     390:	11 86       	std	Z+9, r1	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     392:	2f bf       	out	0x3f, r18	; 63
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     394:	8b b1       	in	r24, 0x0b	; 11
     396:	8f 70       	andi	r24, 0x0F	; 15
     398:	80 61       	ori	r24, 0x10	; 16
     39a:	8b b9       	out	0x0b, r24	; 11

	RingBuffer_InitBuffer(&USBtoUSART_Buffer, USBtoUSART_Buffer_Data, sizeof(USBtoUSART_Buffer_Data));
	RingBuffer_InitBuffer(&USARTtoUSB_Buffer, USARTtoUSB_Buffer_Data, sizeof(USARTtoUSB_Buffer_Data));

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     39c:	78 94       	sei
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     39e:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     3a0:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Count = Buffer->Count;
     3a2:	20 91 1f 01 	lds	r18, 0x011F
     3a6:	30 91 20 01 	lds	r19, 0x0120
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     3aa:	8f bf       	out	0x3f, r24	; 63

	for (;;)
	{
		/* Only try to read in bytes from the CDC interface if the transmit buffer is not full */
		if (!(RingBuffer_IsFull(&USBtoUSART_Buffer)))
     3ac:	80 91 1e 01 	lds	r24, 0x011E
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	28 17       	cp	r18, r24
     3b4:	39 07       	cpc	r19, r25
     3b6:	49 f0       	breq	.+18     	; 0x3ca <main+0x90>
		{
			int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	91 e0       	ldi	r25, 0x01	; 1
     3bc:	be d4       	rcall	.+2428   	; 0xd3a <CDC_Device_ReceiveByte>
     3be:	bc 01       	movw	r22, r24

			/* Read bytes from the USB OUT endpoint into the USART transmit buffer */
			if (!(ReceivedByte < 0))
     3c0:	97 fd       	sbrc	r25, 7
     3c2:	03 c0       	rjmp	.+6      	; 0x3ca <main+0x90>
			  RingBuffer_Insert(&USBtoUSART_Buffer, ReceivedByte);
     3c4:	86 e1       	ldi	r24, 0x16	; 22
     3c6:	91 e0       	ldi	r25, 0x01	; 1
     3c8:	d4 de       	rcall	.-600    	; 0x172 <RingBuffer_Insert>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     3ca:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     3cc:	f8 94       	cli
     3ce:	c0 91 aa 01 	lds	r28, 0x01AA
     3d2:	d0 91 ab 01 	lds	r29, 0x01AB
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     3d6:	8f bf       	out	0x3f, r24	; 63
		}
		
		/* Check if the UART receive buffer flush timer has expired or the buffer is nearly full */
		uint16_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
		if ((TIFR0 & (1 << TOV0)) || (BufferCount > 200))
     3d8:	a8 99       	sbic	0x15, 0	; 21
     3da:	03 c0       	rjmp	.+6      	; 0x3e2 <main+0xa8>
     3dc:	c9 3c       	cpi	r28, 0xC9	; 201
     3de:	d1 05       	cpc	r29, r1
     3e0:	90 f0       	brcs	.+36     	; 0x406 <main+0xcc>
		{
			/* Clear flush timer expiry flag */
			TIFR0 |= (1 << TOV0);
     3e2:	a8 9a       	sbi	0x15, 0	; 21
     3e4:	0e c0       	rjmp	.+28     	; 0x402 <main+0xc8>

			/* Read bytes from the USART receive buffer into the USB IN endpoint */
			while (BufferCount--)
			{
				/* Try to send the next byte of data to the host, abort if there is an error without dequeuing */
				if (CDC_Device_SendByte(&VirtualSerial_CDC_Interface,
     3e6:	e0 91 a3 01 	lds	r30, 0x01A3
     3ea:	f0 91 a4 01 	lds	r31, 0x01A4
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	91 e0       	ldi	r25, 0x01	; 1
     3f2:	60 81       	ld	r22, Z
     3f4:	0f d5       	rcall	.+2590   	; 0xe14 <CDC_Device_SendByte>
     3f6:	21 97       	sbiw	r28, 0x01	; 1
     3f8:	88 23       	and	r24, r24
     3fa:	29 f4       	brne	.+10     	; 0x406 <main+0xcc>
				{
					break;
				}

				/* Dequeue the already sent byte from the buffer now we have confirmed that no transmission error occurred */
				RingBuffer_Remove(&USARTtoUSB_Buffer);
     3fc:	81 ea       	ldi	r24, 0xA1	; 161
     3fe:	91 e0       	ldi	r25, 0x01	; 1
     400:	d7 de       	rcall	.-594    	; 0x1b0 <RingBuffer_Remove>
		{
			/* Clear flush timer expiry flag */
			TIFR0 |= (1 << TOV0);

			/* Read bytes from the USART receive buffer into the USB IN endpoint */
			while (BufferCount--)
     402:	20 97       	sbiw	r28, 0x00	; 0
     404:	81 f7       	brne	.-32     	; 0x3e6 <main+0xac>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     406:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     408:	f8 94       	cli
     40a:	80 91 1f 01 	lds	r24, 0x011F
     40e:	90 91 20 01 	lds	r25, 0x0120
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     412:	2f bf       	out	0x3f, r18	; 63
				RingBuffer_Remove(&USARTtoUSB_Buffer);
			}
		}

		/* Load the next byte from the USART transmit buffer into the USART */
		if (!(RingBuffer_IsEmpty(&USBtoUSART_Buffer)))
     414:	89 2b       	or	r24, r25
     416:	51 f0       	breq	.+20     	; 0x42c <main+0xf2>
		  Serial_SendByte(RingBuffer_Remove(&USBtoUSART_Buffer));
     418:	86 e1       	ldi	r24, 0x16	; 22
     41a:	91 e0       	ldi	r25, 0x01	; 1
     41c:	c9 de       	rcall	.-622    	; 0x1b0 <RingBuffer_Remove>
     41e:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     420:	80 91 c8 00 	lds	r24, 0x00C8
     424:	85 ff       	sbrs	r24, 5
     426:	fc cf       	rjmp	.-8      	; 0x420 <main+0xe6>
				UDR1 = DataByte;
     428:	90 93 ce 00 	sts	0x00CE, r25

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	e2 d4       	rcall	.+2500   	; 0xdf6 <CDC_Device_USBTask>
		USB_USBTask();
     432:	71 d4       	rcall	.+2274   	; 0xd16 <USB_USBTask>
     434:	b4 cf       	rjmp	.-152    	; 0x39e <main+0x64>

00000436 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     436:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     438:	92 30       	cpi	r25, 0x02	; 2
     43a:	49 f0       	breq	.+18     	; 0x44e <CALLBACK_USB_GetDescriptor+0x18>
     43c:	93 30       	cpi	r25, 0x03	; 3
     43e:	61 f0       	breq	.+24     	; 0x458 <CALLBACK_USB_GetDescriptor+0x22>
     440:	91 30       	cpi	r25, 0x01	; 1
     442:	f9 f4       	brne	.+62     	; 0x482 <CALLBACK_USB_GetDescriptor+0x4c>
     444:	e8 e9       	ldi	r30, 0x98	; 152
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	22 e1       	ldi	r18, 0x12	; 18
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	1e c0       	rjmp	.+60     	; 0x48a <CALLBACK_USB_GetDescriptor+0x54>
     44e:	ea ea       	ldi	r30, 0xAA	; 170
     450:	f0 e0       	ldi	r31, 0x00	; 0
     452:	2e e3       	ldi	r18, 0x3E	; 62
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	19 c0       	rjmp	.+50     	; 0x48a <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     458:	81 30       	cpi	r24, 0x01	; 1
     45a:	49 f0       	breq	.+18     	; 0x46e <CALLBACK_USB_GetDescriptor+0x38>
     45c:	81 30       	cpi	r24, 0x01	; 1
     45e:	18 f0       	brcs	.+6      	; 0x466 <CALLBACK_USB_GetDescriptor+0x30>
     460:	82 30       	cpi	r24, 0x02	; 2
     462:	79 f4       	brne	.+30     	; 0x482 <CALLBACK_USB_GetDescriptor+0x4c>
     464:	08 c0       	rjmp	.+16     	; 0x476 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     466:	e8 ee       	ldi	r30, 0xE8	; 232
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	84 91       	lpm	r24, Z+
     46c:	07 c0       	rjmp	.+14     	; 0x47c <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     46e:	ec ee       	ldi	r30, 0xEC	; 236
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	84 91       	lpm	r24, Z+
     474:	03 c0       	rjmp	.+6      	; 0x47c <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     476:	e6 e0       	ldi	r30, 0x06	; 6
     478:	f1 e0       	ldi	r31, 0x01	; 1
     47a:	84 91       	lpm	r24, Z+
     47c:	28 2f       	mov	r18, r24
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	04 c0       	rjmp	.+8      	; 0x48a <CALLBACK_USB_GetDescriptor+0x54>
     482:	e0 e0       	ldi	r30, 0x00	; 0
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	20 e0       	ldi	r18, 0x00	; 0
     488:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     48a:	ed 93       	st	X+, r30
     48c:	fc 93       	st	X, r31
	return Size;
}
     48e:	c9 01       	movw	r24, r18
     490:	08 95       	ret

00000492 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     492:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     496:	80 91 eb 00 	lds	r24, 0x00EB
     49a:	81 60       	ori	r24, 0x01	; 1
     49c:	80 93 eb 00 	sts	0x00EB, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
     4a0:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
     4a4:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
     4a8:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     4ac:	80 91 ee 00 	lds	r24, 0x00EE
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     4b0:	88 1f       	adc	r24, r24
     4b2:	88 27       	eor	r24, r24
     4b4:	88 1f       	adc	r24, r24
     4b6:	08 95       	ret

000004b8 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     4b8:	80 91 30 02 	lds	r24, 0x0230
     4bc:	88 23       	and	r24, r24
     4be:	8c f4       	brge	.+34     	; 0x4e2 <Endpoint_ClearStatusStage+0x2a>
     4c0:	03 c0       	rjmp	.+6      	; 0x4c8 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     4c2:	8e b3       	in	r24, 0x1e	; 30
     4c4:	88 23       	and	r24, r24
     4c6:	b1 f0       	breq	.+44     	; 0x4f4 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     4c8:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     4cc:	82 ff       	sbrs	r24, 2
     4ce:	f9 cf       	rjmp	.-14     	; 0x4c2 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     4d0:	80 91 e8 00 	lds	r24, 0x00E8
     4d4:	8b 77       	andi	r24, 0x7B	; 123
     4d6:	80 93 e8 00 	sts	0x00E8, r24
     4da:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     4dc:	8e b3       	in	r24, 0x1e	; 30
     4de:	88 23       	and	r24, r24
     4e0:	49 f0       	breq	.+18     	; 0x4f4 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     4e2:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     4e6:	80 ff       	sbrs	r24, 0
     4e8:	f9 cf       	rjmp	.-14     	; 0x4dc <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     4ea:	80 91 e8 00 	lds	r24, 0x00E8
     4ee:	8e 77       	andi	r24, 0x7E	; 126
     4f0:	80 93 e8 00 	sts	0x00E8, r24
     4f4:	08 95       	ret

000004f6 <Endpoint_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     4f6:	40 91 e4 00 	lds	r20, 0x00E4
     4fa:	50 91 e5 00 	lds	r21, 0x00E5
     4fe:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
     500:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
     504:	80 78       	andi	r24, 0x80	; 128
     506:	80 38       	cpi	r24, 0x80	; 128
     508:	29 f4       	brne	.+10     	; 0x514 <Endpoint_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     50a:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
     50e:	80 ff       	sbrs	r24, 0
     510:	05 c0       	rjmp	.+10     	; 0x51c <Endpoint_WaitUntilReady+0x26>
     512:	21 c0       	rjmp	.+66     	; 0x556 <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     514:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     518:	82 fd       	sbrc	r24, 2
     51a:	1d c0       	rjmp	.+58     	; 0x556 <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     51c:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     51e:	88 23       	and	r24, r24
     520:	11 f4       	brne	.+4      	; 0x526 <Endpoint_WaitUntilReady+0x30>
     522:	82 e0       	ldi	r24, 0x02	; 2
     524:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     526:	85 30       	cpi	r24, 0x05	; 5
     528:	11 f4       	brne	.+4      	; 0x52e <Endpoint_WaitUntilReady+0x38>
     52a:	83 e0       	ldi	r24, 0x03	; 3
     52c:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     52e:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     532:	85 ff       	sbrs	r24, 5
     534:	02 c0       	rjmp	.+4      	; 0x53a <Endpoint_WaitUntilReady+0x44>
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	08 95       	ret
     53a:	80 91 e4 00 	lds	r24, 0x00E4
     53e:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     542:	84 17       	cp	r24, r20
     544:	95 07       	cpc	r25, r21
     546:	e1 f2       	breq	.-72     	; 0x500 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     548:	22 23       	and	r18, r18
     54a:	11 f4       	brne	.+4      	; 0x550 <Endpoint_WaitUntilReady+0x5a>
     54c:	84 e0       	ldi	r24, 0x04	; 4
     54e:	08 95       	ret
     550:	21 50       	subi	r18, 0x01	; 1
     552:	ac 01       	movw	r20, r24
     554:	d5 cf       	rjmp	.-86     	; 0x500 <Endpoint_WaitUntilReady+0xa>
     556:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     558:	08 95       	ret

0000055a <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     55a:	ef 92       	push	r14
     55c:	ff 92       	push	r15
     55e:	0f 93       	push	r16
     560:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     562:	4c d0       	rcall	.+152    	; 0x5fc <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     564:	53 d0       	rcall	.+166    	; 0x60c <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     566:	08 ed       	ldi	r16, 0xD8	; 216
     568:	10 e0       	ldi	r17, 0x00	; 0
     56a:	f8 01       	movw	r30, r16
     56c:	80 81       	ld	r24, Z
     56e:	8f 77       	andi	r24, 0x7F	; 127
     570:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
     572:	80 81       	ld	r24, Z
     574:	80 68       	ori	r24, 0x80	; 128
     576:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     578:	80 81       	ld	r24, Z
     57a:	8f 7d       	andi	r24, 0xDF	; 223
     57c:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     57e:	e7 ed       	ldi	r30, 0xD7	; 215
     580:	f0 e0       	ldi	r31, 0x00	; 0
     582:	80 81       	ld	r24, Z
     584:	80 68       	ori	r24, 0x80	; 128
     586:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     588:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     58a:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
     58c:	10 92 2c 02 	sts	0x022C, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     590:	10 92 2e 02 	sts	0x022E, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     594:	10 92 2d 02 	sts	0x022D, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     598:	80 ee       	ldi	r24, 0xE0	; 224
     59a:	e8 2e       	mov	r14, r24
     59c:	f1 2c       	mov	r15, r1
     59e:	f7 01       	movw	r30, r14
     5a0:	80 81       	ld	r24, Z
     5a2:	8b 7f       	andi	r24, 0xFB	; 251
     5a4:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     5a6:	f8 01       	movw	r30, r16
     5a8:	80 81       	ld	r24, Z
     5aa:	81 60       	ori	r24, 0x01	; 1
     5ac:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	60 e0       	ldi	r22, 0x00	; 0
     5b2:	42 e0       	ldi	r20, 0x02	; 2
     5b4:	6e df       	rcall	.-292    	; 0x492 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     5b6:	e1 ee       	ldi	r30, 0xE1	; 225
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	80 81       	ld	r24, Z
     5bc:	8e 7f       	andi	r24, 0xFE	; 254
     5be:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     5c0:	e2 ee       	ldi	r30, 0xE2	; 226
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	80 81       	ld	r24, Z
     5c6:	81 60       	ori	r24, 0x01	; 1
     5c8:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     5ca:	80 81       	ld	r24, Z
     5cc:	88 60       	ori	r24, 0x08	; 8
     5ce:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     5d0:	f7 01       	movw	r30, r14
     5d2:	80 81       	ld	r24, Z
     5d4:	8e 7f       	andi	r24, 0xFE	; 254
     5d6:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     5d8:	f8 01       	movw	r30, r16
     5da:	80 81       	ld	r24, Z
     5dc:	80 61       	ori	r24, 0x10	; 16
     5de:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     5e0:	1f 91       	pop	r17
     5e2:	0f 91       	pop	r16
     5e4:	ff 90       	pop	r15
     5e6:	ef 90       	pop	r14
     5e8:	08 95       	ret

000005ea <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     5ea:	e7 ed       	ldi	r30, 0xD7	; 215
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	80 81       	ld	r24, Z
     5f0:	81 60       	ori	r24, 0x01	; 1
     5f2:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	80 93 2f 02 	sts	0x022F, r24

	USB_ResetInterface();
}
     5fa:	af cf       	rjmp	.-162    	; 0x55a <USB_ResetInterface>

000005fc <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     5fc:	e8 ed       	ldi	r30, 0xD8	; 216
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	80 81       	ld	r24, Z
     602:	8c 7f       	andi	r24, 0xFC	; 252
     604:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     606:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     60a:	08 95       	ret

0000060c <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     60c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     610:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     614:	08 95       	ret

00000616 <__vector_11>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     616:	1f 92       	push	r1
     618:	0f 92       	push	r0
     61a:	0f b6       	in	r0, 0x3f	; 63
     61c:	0f 92       	push	r0
     61e:	0b b6       	in	r0, 0x3b	; 59
     620:	0f 92       	push	r0
     622:	11 24       	eor	r1, r1
     624:	1f 93       	push	r17
     626:	2f 93       	push	r18
     628:	3f 93       	push	r19
     62a:	4f 93       	push	r20
     62c:	5f 93       	push	r21
     62e:	6f 93       	push	r22
     630:	7f 93       	push	r23
     632:	8f 93       	push	r24
     634:	9f 93       	push	r25
     636:	af 93       	push	r26
     638:	bf 93       	push	r27
     63a:	ef 93       	push	r30
     63c:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     63e:	e9 ee       	ldi	r30, 0xE9	; 233
     640:	f0 e0       	ldi	r31, 0x00	; 0
     642:	10 81       	ld	r17, Z
     644:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     646:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     648:	e0 ef       	ldi	r30, 0xF0	; 240
     64a:	f0 e0       	ldi	r31, 0x00	; 0
     64c:	80 81       	ld	r24, Z
     64e:	87 7f       	andi	r24, 0xF7	; 247
     650:	80 83       	st	Z, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     652:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     654:	df d1       	rcall	.+958    	; 0xa14 <USB_Device_ProcessControlRequest>
     656:	a9 ee       	ldi	r26, 0xE9	; 233
     658:	b0 e0       	ldi	r27, 0x00	; 0
     65a:	1c 92       	st	X, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     65c:	e0 ef       	ldi	r30, 0xF0	; 240
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	80 81       	ld	r24, Z
     662:	88 60       	ori	r24, 0x08	; 8
     664:	80 83       	st	Z, r24
     666:	1c 93       	st	X, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     668:	ff 91       	pop	r31
     66a:	ef 91       	pop	r30
     66c:	bf 91       	pop	r27
     66e:	af 91       	pop	r26
     670:	9f 91       	pop	r25
     672:	8f 91       	pop	r24
     674:	7f 91       	pop	r23
     676:	6f 91       	pop	r22
     678:	5f 91       	pop	r21
     67a:	4f 91       	pop	r20
     67c:	3f 91       	pop	r19
     67e:	2f 91       	pop	r18
     680:	1f 91       	pop	r17
     682:	0f 90       	pop	r0
     684:	0b be       	out	0x3b, r0	; 59
     686:	0f 90       	pop	r0
     688:	0f be       	out	0x3f, r0	; 63
     68a:	0f 90       	pop	r0
     68c:	1f 90       	pop	r1
     68e:	18 95       	reti

00000690 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     690:	1f 92       	push	r1
     692:	0f 92       	push	r0
     694:	0f b6       	in	r0, 0x3f	; 63
     696:	0f 92       	push	r0
     698:	0b b6       	in	r0, 0x3b	; 59
     69a:	0f 92       	push	r0
     69c:	11 24       	eor	r1, r1
     69e:	2f 93       	push	r18
     6a0:	3f 93       	push	r19
     6a2:	4f 93       	push	r20
     6a4:	5f 93       	push	r21
     6a6:	6f 93       	push	r22
     6a8:	7f 93       	push	r23
     6aa:	8f 93       	push	r24
     6ac:	9f 93       	push	r25
     6ae:	af 93       	push	r26
     6b0:	bf 93       	push	r27
     6b2:	ef 93       	push	r30
     6b4:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     6b6:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     6ba:	82 ff       	sbrs	r24, 2
     6bc:	0a c0       	rjmp	.+20     	; 0x6d2 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     6be:	80 91 e2 00 	lds	r24, 0x00E2
     6c2:	82 ff       	sbrs	r24, 2
     6c4:	06 c0       	rjmp	.+12     	; 0x6d2 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     6c6:	80 91 e1 00 	lds	r24, 0x00E1
     6ca:	8b 7f       	andi	r24, 0xFB	; 251
     6cc:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     6d0:	21 d3       	rcall	.+1602   	; 0xd14 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     6d2:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     6d6:	80 ff       	sbrs	r24, 0
     6d8:	1b c0       	rjmp	.+54     	; 0x710 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     6da:	80 91 d8 00 	lds	r24, 0x00D8
     6de:	80 ff       	sbrs	r24, 0
     6e0:	17 c0       	rjmp	.+46     	; 0x710 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     6e2:	80 91 da 00 	lds	r24, 0x00DA
     6e6:	8e 7f       	andi	r24, 0xFE	; 254
     6e8:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     6ec:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     6f0:	80 ff       	sbrs	r24, 0
     6f2:	0b c0       	rjmp	.+22     	; 0x70a <__vector_10+0x7a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     6f4:	8c e0       	ldi	r24, 0x0C	; 12
     6f6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     6f8:	8e e0       	ldi	r24, 0x0E	; 14
     6fa:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     6fc:	09 b4       	in	r0, 0x29	; 41
     6fe:	00 fe       	sbrs	r0, 0
     700:	fd cf       	rjmp	.-6      	; 0x6fc <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
     706:	71 dd       	rcall	.-1310   	; 0x1ea <EVENT_USB_Device_Connect>
     708:	03 c0       	rjmp	.+6      	; 0x710 <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     70a:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     70c:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
     70e:	72 dd       	rcall	.-1308   	; 0x1f4 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     710:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     714:	80 ff       	sbrs	r24, 0
     716:	17 c0       	rjmp	.+46     	; 0x746 <__vector_10+0xb6>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     718:	80 91 e2 00 	lds	r24, 0x00E2
     71c:	80 ff       	sbrs	r24, 0
     71e:	13 c0       	rjmp	.+38     	; 0x746 <__vector_10+0xb6>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     720:	80 91 e2 00 	lds	r24, 0x00E2
     724:	8e 7f       	andi	r24, 0xFE	; 254
     726:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     72a:	80 91 e2 00 	lds	r24, 0x00E2
     72e:	80 61       	ori	r24, 0x10	; 16
     730:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     734:	80 91 d8 00 	lds	r24, 0x00D8
     738:	80 62       	ori	r24, 0x20	; 32
     73a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     73e:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     740:	85 e0       	ldi	r24, 0x05	; 5
     742:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
     744:	e7 d2       	rcall	.+1486   	; 0xd14 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     746:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     74a:	84 ff       	sbrs	r24, 4
     74c:	2c c0       	rjmp	.+88     	; 0x7a6 <__vector_10+0x116>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     74e:	80 91 e2 00 	lds	r24, 0x00E2
     752:	84 ff       	sbrs	r24, 4
     754:	28 c0       	rjmp	.+80     	; 0x7a6 <__vector_10+0x116>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     756:	8c e0       	ldi	r24, 0x0C	; 12
     758:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     75a:	8e e0       	ldi	r24, 0x0E	; 14
     75c:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     75e:	09 b4       	in	r0, 0x29	; 41
     760:	00 fe       	sbrs	r0, 0
     762:	fd cf       	rjmp	.-6      	; 0x75e <__vector_10+0xce>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     764:	80 91 d8 00 	lds	r24, 0x00D8
     768:	8f 7d       	andi	r24, 0xDF	; 223
     76a:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     76e:	80 91 e1 00 	lds	r24, 0x00E1
     772:	8f 7e       	andi	r24, 0xEF	; 239
     774:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     778:	80 91 e2 00 	lds	r24, 0x00E2
     77c:	8f 7e       	andi	r24, 0xEF	; 239
     77e:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     782:	80 91 e2 00 	lds	r24, 0x00E2
     786:	81 60       	ori	r24, 0x01	; 1
     788:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     78c:	80 91 2c 02 	lds	r24, 0x022C
     790:	88 23       	and	r24, r24
     792:	31 f4       	brne	.+12     	; 0x7a0 <__vector_10+0x110>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     794:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     798:	87 fd       	sbrc	r24, 7
     79a:	02 c0       	rjmp	.+4      	; 0x7a0 <__vector_10+0x110>
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	01 c0       	rjmp	.+2      	; 0x7a2 <__vector_10+0x112>
     7a0:	84 e0       	ldi	r24, 0x04	; 4
     7a2:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     7a4:	b7 d2       	rcall	.+1390   	; 0xd14 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     7a6:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     7aa:	83 ff       	sbrs	r24, 3
     7ac:	26 c0       	rjmp	.+76     	; 0x7fa <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     7ae:	80 91 e2 00 	lds	r24, 0x00E2
     7b2:	83 ff       	sbrs	r24, 3
     7b4:	22 c0       	rjmp	.+68     	; 0x7fa <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     7b6:	80 91 e1 00 	lds	r24, 0x00E1
     7ba:	87 7f       	andi	r24, 0xF7	; 247
     7bc:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     7c0:	82 e0       	ldi	r24, 0x02	; 2
     7c2:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
     7c4:	10 92 2c 02 	sts	0x022C, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     7c8:	80 91 e1 00 	lds	r24, 0x00E1
     7cc:	8e 7f       	andi	r24, 0xFE	; 254
     7ce:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     7d2:	80 91 e2 00 	lds	r24, 0x00E2
     7d6:	8e 7f       	andi	r24, 0xFE	; 254
     7d8:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     7dc:	80 91 e2 00 	lds	r24, 0x00E2
     7e0:	80 61       	ori	r24, 0x10	; 16
     7e2:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	60 e0       	ldi	r22, 0x00	; 0
     7ea:	42 e0       	ldi	r20, 0x02	; 2
     7ec:	52 de       	rcall	.-860    	; 0x492 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     7ee:	80 91 f0 00 	lds	r24, 0x00F0
     7f2:	88 60       	ori	r24, 0x08	; 8
     7f4:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     7f8:	8d d2       	rcall	.+1306   	; 0xd14 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     7fa:	ff 91       	pop	r31
     7fc:	ef 91       	pop	r30
     7fe:	bf 91       	pop	r27
     800:	af 91       	pop	r26
     802:	9f 91       	pop	r25
     804:	8f 91       	pop	r24
     806:	7f 91       	pop	r23
     808:	6f 91       	pop	r22
     80a:	5f 91       	pop	r21
     80c:	4f 91       	pop	r20
     80e:	3f 91       	pop	r19
     810:	2f 91       	pop	r18
     812:	0f 90       	pop	r0
     814:	0b be       	out	0x3b, r0	; 59
     816:	0f 90       	pop	r0
     818:	0f be       	out	0x3f, r0	; 63
     81a:	0f 90       	pop	r0
     81c:	1f 90       	pop	r1
     81e:	18 95       	reti

00000820 <Endpoint_Write_Control_Stream_LE>:
     820:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     822:	40 91 36 02 	lds	r20, 0x0236
     826:	50 91 37 02 	lds	r21, 0x0237
     82a:	46 17       	cp	r20, r22
     82c:	57 07       	cpc	r21, r23
     82e:	18 f4       	brcc	.+6      	; 0x836 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     830:	f9 01       	movw	r30, r18
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	3c c0       	rjmp	.+120    	; 0x8ae <Endpoint_Write_Control_Stream_LE+0x8e>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     836:	61 15       	cp	r22, r1
     838:	71 05       	cpc	r23, r1
     83a:	11 f0       	breq	.+4      	; 0x840 <Endpoint_Write_Control_Stream_LE+0x20>
     83c:	ab 01       	movw	r20, r22
     83e:	f8 cf       	rjmp	.-16     	; 0x830 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     840:	80 91 e8 00 	lds	r24, 0x00E8
     844:	8e 77       	andi	r24, 0x7E	; 126
     846:	80 93 e8 00 	sts	0x00E8, r24
     84a:	40 e0       	ldi	r20, 0x00	; 0
     84c:	50 e0       	ldi	r21, 0x00	; 0
     84e:	f0 cf       	rjmp	.-32     	; 0x830 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     850:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     852:	88 23       	and	r24, r24
     854:	e9 f1       	breq	.+122    	; 0x8d0 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     856:	85 30       	cpi	r24, 0x05	; 5
     858:	e9 f1       	breq	.+122    	; 0x8d4 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     85a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     85e:	83 ff       	sbrs	r24, 3
     860:	02 c0       	rjmp	.+4      	; 0x866 <Endpoint_Write_Control_Stream_LE+0x46>
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     866:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     86a:	82 fd       	sbrc	r24, 2
     86c:	2b c0       	rjmp	.+86     	; 0x8c4 <Endpoint_Write_Control_Stream_LE+0xa4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     86e:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     872:	80 ff       	sbrs	r24, 0
     874:	1c c0       	rjmp	.+56     	; 0x8ae <Endpoint_Write_Control_Stream_LE+0x8e>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     876:	20 91 f2 00 	lds	r18, 0x00F2
     87a:	30 91 f3 00 	lds	r19, 0x00F3
     87e:	07 c0       	rjmp	.+14     	; 0x88e <Endpoint_Write_Control_Stream_LE+0x6e>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     880:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     882:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     886:	41 50       	subi	r20, 0x01	; 1
     888:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     88a:	2f 5f       	subi	r18, 0xFF	; 255
     88c:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     88e:	41 15       	cp	r20, r1
     890:	51 05       	cpc	r21, r1
     892:	19 f0       	breq	.+6      	; 0x89a <Endpoint_Write_Control_Stream_LE+0x7a>
     894:	28 30       	cpi	r18, 0x08	; 8
     896:	31 05       	cpc	r19, r1
     898:	98 f3       	brcs	.-26     	; 0x880 <Endpoint_Write_Control_Stream_LE+0x60>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	28 30       	cpi	r18, 0x08	; 8
     89e:	31 05       	cpc	r19, r1
     8a0:	09 f4       	brne	.+2      	; 0x8a4 <Endpoint_Write_Control_Stream_LE+0x84>
     8a2:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     8a4:	80 91 e8 00 	lds	r24, 0x00E8
     8a8:	8e 77       	andi	r24, 0x7E	; 126
     8aa:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     8ae:	41 15       	cp	r20, r1
     8b0:	51 05       	cpc	r21, r1
     8b2:	71 f6       	brne	.-100    	; 0x850 <Endpoint_Write_Control_Stream_LE+0x30>
     8b4:	99 23       	and	r25, r25
     8b6:	61 f6       	brne	.-104    	; 0x850 <Endpoint_Write_Control_Stream_LE+0x30>
     8b8:	05 c0       	rjmp	.+10     	; 0x8c4 <Endpoint_Write_Control_Stream_LE+0xa4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     8ba:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     8bc:	88 23       	and	r24, r24
     8be:	41 f0       	breq	.+16     	; 0x8d0 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     8c0:	85 30       	cpi	r24, 0x05	; 5
     8c2:	41 f0       	breq	.+16     	; 0x8d4 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     8c4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     8c8:	82 ff       	sbrs	r24, 2
     8ca:	f7 cf       	rjmp	.-18     	; 0x8ba <Endpoint_Write_Control_Stream_LE+0x9a>
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	08 95       	ret
     8d0:	82 e0       	ldi	r24, 0x02	; 2
     8d2:	08 95       	ret
     8d4:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     8d6:	08 95       	ret

000008d8 <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
     8d8:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     8da:	61 15       	cp	r22, r1
     8dc:	71 05       	cpc	r23, r1
     8de:	29 f4       	brne	.+10     	; 0x8ea <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     8e0:	80 91 e8 00 	lds	r24, 0x00E8
     8e4:	8b 77       	andi	r24, 0x7B	; 123
     8e6:	80 93 e8 00 	sts	0x00E8, r24
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     8ea:	f9 01       	movw	r30, r18
     8ec:	21 c0       	rjmp	.+66     	; 0x930 <Endpoint_Read_Control_Stream_LE+0x58>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     8ee:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     8f0:	88 23       	and	r24, r24
     8f2:	69 f1       	breq	.+90     	; 0x94e <Endpoint_Read_Control_Stream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     8f4:	85 30       	cpi	r24, 0x05	; 5
     8f6:	69 f1       	breq	.+90     	; 0x952 <Endpoint_Read_Control_Stream_LE+0x7a>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     8f8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     8fc:	83 ff       	sbrs	r24, 3
     8fe:	02 c0       	rjmp	.+4      	; 0x904 <Endpoint_Read_Control_Stream_LE+0x2c>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     904:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     908:	82 ff       	sbrs	r24, 2
     90a:	f1 cf       	rjmp	.-30     	; 0x8ee <Endpoint_Read_Control_Stream_LE+0x16>
     90c:	06 c0       	rjmp	.+12     	; 0x91a <Endpoint_Read_Control_Stream_LE+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     90e:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     912:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     914:	61 50       	subi	r22, 0x01	; 1
     916:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     918:	31 f0       	breq	.+12     	; 0x926 <Endpoint_Read_Control_Stream_LE+0x4e>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     91a:	80 91 f2 00 	lds	r24, 0x00F2
     91e:	90 91 f3 00 	lds	r25, 0x00F3
     922:	89 2b       	or	r24, r25
     924:	a1 f7       	brne	.-24     	; 0x90e <Endpoint_Read_Control_Stream_LE+0x36>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     926:	80 91 e8 00 	lds	r24, 0x00E8
     92a:	8b 77       	andi	r24, 0x7B	; 123
     92c:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
     930:	61 15       	cp	r22, r1
     932:	71 05       	cpc	r23, r1
     934:	e1 f6       	brne	.-72     	; 0x8ee <Endpoint_Read_Control_Stream_LE+0x16>
     936:	05 c0       	rjmp	.+10     	; 0x942 <Endpoint_Read_Control_Stream_LE+0x6a>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     938:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     93a:	88 23       	and	r24, r24
     93c:	41 f0       	breq	.+16     	; 0x94e <Endpoint_Read_Control_Stream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     93e:	85 30       	cpi	r24, 0x05	; 5
     940:	41 f0       	breq	.+16     	; 0x952 <Endpoint_Read_Control_Stream_LE+0x7a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     942:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     946:	80 ff       	sbrs	r24, 0
     948:	f7 cf       	rjmp	.-18     	; 0x938 <Endpoint_Read_Control_Stream_LE+0x60>
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	08 95       	ret
     94e:	82 e0       	ldi	r24, 0x02	; 2
     950:	08 95       	ret
     952:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     954:	08 95       	ret

00000956 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     956:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     958:	40 91 36 02 	lds	r20, 0x0236
     95c:	50 91 37 02 	lds	r21, 0x0237
     960:	46 17       	cp	r20, r22
     962:	57 07       	cpc	r21, r23
     964:	18 f4       	brcc	.+6      	; 0x96c <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     966:	f9 01       	movw	r30, r18
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	3f c0       	rjmp	.+126    	; 0x9ea <Endpoint_Write_Control_PStream_LE+0x94>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     96c:	61 15       	cp	r22, r1
     96e:	71 05       	cpc	r23, r1
     970:	11 f0       	breq	.+4      	; 0x976 <Endpoint_Write_Control_PStream_LE+0x20>
     972:	ab 01       	movw	r20, r22
     974:	f8 cf       	rjmp	.-16     	; 0x966 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     976:	80 91 e8 00 	lds	r24, 0x00E8
     97a:	8e 77       	andi	r24, 0x7E	; 126
     97c:	80 93 e8 00 	sts	0x00E8, r24
     980:	40 e0       	ldi	r20, 0x00	; 0
     982:	50 e0       	ldi	r21, 0x00	; 0
     984:	f0 cf       	rjmp	.-32     	; 0x966 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     986:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     988:	88 23       	and	r24, r24
     98a:	09 f4       	brne	.+2      	; 0x98e <Endpoint_Write_Control_PStream_LE+0x38>
     98c:	3f c0       	rjmp	.+126    	; 0xa0c <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     98e:	85 30       	cpi	r24, 0x05	; 5
     990:	09 f4       	brne	.+2      	; 0x994 <Endpoint_Write_Control_PStream_LE+0x3e>
     992:	3e c0       	rjmp	.+124    	; 0xa10 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     994:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     998:	83 ff       	sbrs	r24, 3
     99a:	02 c0       	rjmp	.+4      	; 0x9a0 <Endpoint_Write_Control_PStream_LE+0x4a>
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9a0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     9a4:	82 fd       	sbrc	r24, 2
     9a6:	2c c0       	rjmp	.+88     	; 0xa00 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     9a8:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     9ac:	80 ff       	sbrs	r24, 0
     9ae:	1d c0       	rjmp	.+58     	; 0x9ea <Endpoint_Write_Control_PStream_LE+0x94>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     9b0:	20 91 f2 00 	lds	r18, 0x00F2
     9b4:	30 91 f3 00 	lds	r19, 0x00F3
     9b8:	08 c0       	rjmp	.+16     	; 0x9ca <Endpoint_Write_Control_PStream_LE+0x74>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     9ba:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     9bc:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     9c0:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     9c2:	41 50       	subi	r20, 0x01	; 1
     9c4:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     9c6:	2f 5f       	subi	r18, 0xFF	; 255
     9c8:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     9ca:	41 15       	cp	r20, r1
     9cc:	51 05       	cpc	r21, r1
     9ce:	19 f0       	breq	.+6      	; 0x9d6 <Endpoint_Write_Control_PStream_LE+0x80>
     9d0:	28 30       	cpi	r18, 0x08	; 8
     9d2:	31 05       	cpc	r19, r1
     9d4:	90 f3       	brcs	.-28     	; 0x9ba <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	28 30       	cpi	r18, 0x08	; 8
     9da:	31 05       	cpc	r19, r1
     9dc:	09 f4       	brne	.+2      	; 0x9e0 <Endpoint_Write_Control_PStream_LE+0x8a>
     9de:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9e0:	80 91 e8 00 	lds	r24, 0x00E8
     9e4:	8e 77       	andi	r24, 0x7E	; 126
     9e6:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     9ea:	41 15       	cp	r20, r1
     9ec:	51 05       	cpc	r21, r1
     9ee:	59 f6       	brne	.-106    	; 0x986 <Endpoint_Write_Control_PStream_LE+0x30>
     9f0:	99 23       	and	r25, r25
     9f2:	49 f6       	brne	.-110    	; 0x986 <Endpoint_Write_Control_PStream_LE+0x30>
     9f4:	05 c0       	rjmp	.+10     	; 0xa00 <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     9f6:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     9f8:	88 23       	and	r24, r24
     9fa:	41 f0       	breq	.+16     	; 0xa0c <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     9fc:	85 30       	cpi	r24, 0x05	; 5
     9fe:	41 f0       	breq	.+16     	; 0xa10 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a00:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     a04:	82 ff       	sbrs	r24, 2
     a06:	f7 cf       	rjmp	.-18     	; 0x9f6 <Endpoint_Write_Control_PStream_LE+0xa0>
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	08 95       	ret
     a0c:	82 e0       	ldi	r24, 0x02	; 2
     a0e:	08 95       	ret
     a10:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     a12:	08 95       	ret

00000a14 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     a14:	0f 93       	push	r16
     a16:	1f 93       	push	r17
     a18:	df 93       	push	r29
     a1a:	cf 93       	push	r28
     a1c:	cd b7       	in	r28, 0x3d	; 61
     a1e:	de b7       	in	r29, 0x3e	; 62
     a20:	ac 97       	sbiw	r28, 0x2c	; 44
     a22:	0f b6       	in	r0, 0x3f	; 63
     a24:	f8 94       	cli
     a26:	de bf       	out	0x3e, r29	; 62
     a28:	0f be       	out	0x3f, r0	; 63
     a2a:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     a2c:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
     a30:	80 93 30 02 	sts	0x0230, r24
     a34:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
     a38:	80 93 31 02 	sts	0x0231, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     a3c:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
     a40:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
     a44:	e2 e3       	ldi	r30, 0x32	; 50
     a46:	f2 e0       	ldi	r31, 0x02	; 2
     a48:	80 93 32 02 	sts	0x0232, r24
     a4c:	90 93 33 02 	sts	0x0233, r25
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     a50:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
     a54:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
     a58:	80 93 34 02 	sts	0x0234, r24
     a5c:	93 83       	std	Z+3, r25	; 0x03
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     a5e:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
     a62:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
     a66:	80 93 36 02 	sts	0x0236, r24
     a6a:	95 83       	std	Z+5, r25	; 0x05

	EVENT_USB_Device_ControlRequest();
     a6c:	38 dc       	rcall	.-1936   	; 0x2de <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a6e:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     a72:	83 ff       	sbrs	r24, 3
     a74:	36 c1       	rjmp	.+620    	; 0xce2 <USB_Device_ProcessControlRequest+0x2ce>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     a76:	80 91 30 02 	lds	r24, 0x0230

		switch (USB_ControlRequest.bRequest)
     a7a:	30 91 31 02 	lds	r19, 0x0231
     a7e:	35 30       	cpi	r19, 0x05	; 5
     a80:	09 f4       	brne	.+2      	; 0xa84 <USB_Device_ProcessControlRequest+0x70>
     a82:	87 c0       	rjmp	.+270    	; 0xb92 <USB_Device_ProcessControlRequest+0x17e>
     a84:	36 30       	cpi	r19, 0x06	; 6
     a86:	40 f4       	brcc	.+16     	; 0xa98 <USB_Device_ProcessControlRequest+0x84>
     a88:	31 30       	cpi	r19, 0x01	; 1
     a8a:	c9 f1       	breq	.+114    	; 0xafe <USB_Device_ProcessControlRequest+0xea>
     a8c:	31 30       	cpi	r19, 0x01	; 1
     a8e:	70 f0       	brcs	.+28     	; 0xaac <USB_Device_ProcessControlRequest+0x98>
     a90:	33 30       	cpi	r19, 0x03	; 3
     a92:	09 f0       	breq	.+2      	; 0xa96 <USB_Device_ProcessControlRequest+0x82>
     a94:	26 c1       	rjmp	.+588    	; 0xce2 <USB_Device_ProcessControlRequest+0x2ce>
     a96:	33 c0       	rjmp	.+102    	; 0xafe <USB_Device_ProcessControlRequest+0xea>
     a98:	38 30       	cpi	r19, 0x08	; 8
     a9a:	09 f4       	brne	.+2      	; 0xa9e <USB_Device_ProcessControlRequest+0x8a>
     a9c:	f5 c0       	rjmp	.+490    	; 0xc88 <USB_Device_ProcessControlRequest+0x274>
     a9e:	39 30       	cpi	r19, 0x09	; 9
     aa0:	09 f4       	brne	.+2      	; 0xaa4 <USB_Device_ProcessControlRequest+0x90>
     aa2:	04 c1       	rjmp	.+520    	; 0xcac <USB_Device_ProcessControlRequest+0x298>
     aa4:	36 30       	cpi	r19, 0x06	; 6
     aa6:	09 f0       	breq	.+2      	; 0xaaa <USB_Device_ProcessControlRequest+0x96>
     aa8:	1c c1       	rjmp	.+568    	; 0xce2 <USB_Device_ProcessControlRequest+0x2ce>
     aaa:	96 c0       	rjmp	.+300    	; 0xbd8 <USB_Device_ProcessControlRequest+0x1c4>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     aac:	80 38       	cpi	r24, 0x80	; 128
     aae:	21 f0       	breq	.+8      	; 0xab8 <USB_Device_ProcessControlRequest+0xa4>
     ab0:	82 38       	cpi	r24, 0x82	; 130
     ab2:	09 f0       	breq	.+2      	; 0xab6 <USB_Device_ProcessControlRequest+0xa2>
     ab4:	16 c1       	rjmp	.+556    	; 0xce2 <USB_Device_ProcessControlRequest+0x2ce>
     ab6:	08 c0       	rjmp	.+16     	; 0xac8 <USB_Device_ProcessControlRequest+0xb4>
     ab8:	90 91 2d 02 	lds	r25, 0x022D
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     abc:	80 91 2e 02 	lds	r24, 0x022E
     ac0:	88 23       	and	r24, r24
     ac2:	99 f0       	breq	.+38     	; 0xaea <USB_Device_ProcessControlRequest+0xd6>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     ac4:	92 60       	ori	r25, 0x02	; 2
     ac6:	11 c0       	rjmp	.+34     	; 0xaea <USB_Device_ProcessControlRequest+0xd6>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     ac8:	80 91 34 02 	lds	r24, 0x0234
     acc:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     ace:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     ad2:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	25 e0       	ldi	r18, 0x05	; 5
     ada:	96 95       	lsr	r25
     adc:	87 95       	ror	r24
     ade:	2a 95       	dec	r18
     ae0:	e1 f7       	brne	.-8      	; 0xada <USB_Device_ProcessControlRequest+0xc6>
     ae2:	98 2f       	mov	r25, r24
     ae4:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     ae6:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     aea:	80 91 e8 00 	lds	r24, 0x00E8
     aee:	87 7f       	andi	r24, 0xF7	; 247
     af0:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     af4:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
     af8:	10 92 f1 00 	sts	0x00F1, r1
     afc:	d0 c0       	rjmp	.+416    	; 0xc9e <USB_Device_ProcessControlRequest+0x28a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     afe:	88 23       	and	r24, r24
     b00:	19 f0       	breq	.+6      	; 0xb08 <USB_Device_ProcessControlRequest+0xf4>
     b02:	82 30       	cpi	r24, 0x02	; 2
     b04:	09 f0       	breq	.+2      	; 0xb08 <USB_Device_ProcessControlRequest+0xf4>
     b06:	ed c0       	rjmp	.+474    	; 0xce2 <USB_Device_ProcessControlRequest+0x2ce>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	8f 71       	andi	r24, 0x1F	; 31
     b0c:	90 70       	andi	r25, 0x00	; 0
     b0e:	00 97       	sbiw	r24, 0x00	; 0
     b10:	21 f0       	breq	.+8      	; 0xb1a <USB_Device_ProcessControlRequest+0x106>
     b12:	02 97       	sbiw	r24, 0x02	; 2
     b14:	09 f0       	breq	.+2      	; 0xb18 <USB_Device_ProcessControlRequest+0x104>
     b16:	e5 c0       	rjmp	.+458    	; 0xce2 <USB_Device_ProcessControlRequest+0x2ce>
     b18:	0c c0       	rjmp	.+24     	; 0xb32 <USB_Device_ProcessControlRequest+0x11e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     b1a:	80 91 32 02 	lds	r24, 0x0232
     b1e:	81 30       	cpi	r24, 0x01	; 1
     b20:	09 f0       	breq	.+2      	; 0xb24 <USB_Device_ProcessControlRequest+0x110>
     b22:	df c0       	rjmp	.+446    	; 0xce2 <USB_Device_ProcessControlRequest+0x2ce>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     b24:	10 92 2e 02 	sts	0x022E, r1
     b28:	33 30       	cpi	r19, 0x03	; 3
     b2a:	69 f5       	brne	.+90     	; 0xb86 <USB_Device_ProcessControlRequest+0x172>
     b2c:	80 93 2e 02 	sts	0x022E, r24
     b30:	2a c0       	rjmp	.+84     	; 0xb86 <USB_Device_ProcessControlRequest+0x172>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     b32:	80 91 32 02 	lds	r24, 0x0232
     b36:	88 23       	and	r24, r24
     b38:	31 f5       	brne	.+76     	; 0xb86 <USB_Device_ProcessControlRequest+0x172>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     b3a:	20 91 34 02 	lds	r18, 0x0234
     b3e:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     b40:	09 f4       	brne	.+2      	; 0xb44 <USB_Device_ProcessControlRequest+0x130>
     b42:	cf c0       	rjmp	.+414    	; 0xce2 <USB_Device_ProcessControlRequest+0x2ce>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     b44:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     b48:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     b4c:	80 ff       	sbrs	r24, 0
     b4e:	1b c0       	rjmp	.+54     	; 0xb86 <USB_Device_ProcessControlRequest+0x172>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     b50:	33 30       	cpi	r19, 0x03	; 3
     b52:	21 f4       	brne	.+8      	; 0xb5c <USB_Device_ProcessControlRequest+0x148>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     b54:	80 91 eb 00 	lds	r24, 0x00EB
     b58:	80 62       	ori	r24, 0x20	; 32
     b5a:	13 c0       	rjmp	.+38     	; 0xb82 <USB_Device_ProcessControlRequest+0x16e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     b5c:	80 91 eb 00 	lds	r24, 0x00EB
     b60:	80 61       	ori	r24, 0x10	; 16
     b62:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	02 c0       	rjmp	.+4      	; 0xb70 <USB_Device_ProcessControlRequest+0x15c>
     b6c:	88 0f       	add	r24, r24
     b6e:	99 1f       	adc	r25, r25
     b70:	2a 95       	dec	r18
     b72:	e2 f7       	brpl	.-8      	; 0xb6c <USB_Device_ProcessControlRequest+0x158>
     b74:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     b78:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     b7c:	80 91 eb 00 	lds	r24, 0x00EB
     b80:	88 60       	ori	r24, 0x08	; 8
     b82:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     b86:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b8a:	80 91 e8 00 	lds	r24, 0x00E8
     b8e:	87 7f       	andi	r24, 0xF7	; 247
     b90:	89 c0       	rjmp	.+274    	; 0xca4 <USB_Device_ProcessControlRequest+0x290>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     b92:	88 23       	and	r24, r24
     b94:	09 f0       	breq	.+2      	; 0xb98 <USB_Device_ProcessControlRequest+0x184>
     b96:	a5 c0       	rjmp	.+330    	; 0xce2 <USB_Device_ProcessControlRequest+0x2ce>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
     b98:	10 91 32 02 	lds	r17, 0x0232
     b9c:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     b9e:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     ba0:	f8 94       	cli
     ba2:	80 91 e8 00 	lds	r24, 0x00E8
     ba6:	87 7f       	andi	r24, 0xF7	; 247
     ba8:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     bac:	85 dc       	rcall	.-1782   	; 0x4b8 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     bae:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     bb2:	80 ff       	sbrs	r24, 0
     bb4:	fc cf       	rjmp	.-8      	; 0xbae <USB_Device_ProcessControlRequest+0x19a>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     bb6:	80 91 e3 00 	lds	r24, 0x00E3
     bba:	80 78       	andi	r24, 0x80	; 128
     bbc:	81 2b       	or	r24, r17

				UDADDR = Temp;
     bbe:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
     bc2:	80 68       	ori	r24, 0x80	; 128
     bc4:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     bc8:	11 23       	and	r17, r17
     bca:	11 f4       	brne	.+4      	; 0xbd0 <USB_Device_ProcessControlRequest+0x1bc>
     bcc:	82 e0       	ldi	r24, 0x02	; 2
     bce:	01 c0       	rjmp	.+2      	; 0xbd2 <USB_Device_ProcessControlRequest+0x1be>
     bd0:	83 e0       	ldi	r24, 0x03	; 3
     bd2:	8e bb       	out	0x1e, r24	; 30
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     bd4:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
     bd6:	85 c0       	rjmp	.+266    	; 0xce2 <USB_Device_ProcessControlRequest+0x2ce>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     bd8:	80 58       	subi	r24, 0x80	; 128
     bda:	82 30       	cpi	r24, 0x02	; 2
     bdc:	08 f0       	brcs	.+2      	; 0xbe0 <USB_Device_ProcessControlRequest+0x1cc>
     bde:	81 c0       	rjmp	.+258    	; 0xce2 <USB_Device_ProcessControlRequest+0x2ce>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     be0:	80 91 32 02 	lds	r24, 0x0232
     be4:	90 91 33 02 	lds	r25, 0x0233
     be8:	23 e0       	ldi	r18, 0x03	; 3
     bea:	8c 3d       	cpi	r24, 0xDC	; 220
     bec:	92 07       	cpc	r25, r18
     bee:	09 f0       	breq	.+2      	; 0xbf2 <USB_Device_ProcessControlRequest+0x1de>
     bf0:	33 c0       	rjmp	.+102    	; 0xc58 <USB_Device_ProcessControlRequest+0x244>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     bf6:	8a e2       	ldi	r24, 0x2A	; 42
     bf8:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     bfa:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     bfc:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     bfe:	de 01       	movw	r26, r28
     c00:	15 96       	adiw	r26, 0x05	; 5
     c02:	6e e0       	ldi	r22, 0x0E	; 14
     c04:	40 e0       	ldi	r20, 0x00	; 0
     c06:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     c08:	11 e2       	ldi	r17, 0x21	; 33
     c0a:	e6 2f       	mov	r30, r22
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	10 93 57 00 	sts	0x0057, r17
     c12:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
     c14:	40 ff       	sbrs	r20, 0
     c16:	03 c0       	rjmp	.+6      	; 0xc1e <USB_Device_ProcessControlRequest+0x20a>
					{
						SerialByte >>= 4;
     c18:	82 95       	swap	r24
     c1a:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
     c1c:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     c1e:	8f 70       	andi	r24, 0x0F	; 15
     c20:	28 2f       	mov	r18, r24
     c22:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     c24:	8a 30       	cpi	r24, 0x0A	; 10
     c26:	18 f0       	brcs	.+6      	; 0xc2e <USB_Device_ProcessControlRequest+0x21a>
     c28:	c9 01       	movw	r24, r18
     c2a:	c7 96       	adiw	r24, 0x37	; 55
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <USB_Device_ProcessControlRequest+0x21e>
     c2e:	c9 01       	movw	r24, r18
     c30:	c0 96       	adiw	r24, 0x30	; 48
     c32:	8d 93       	st	X+, r24
     c34:	9d 93       	st	X+, r25
     c36:	4f 5f       	subi	r20, 0xFF	; 255
     c38:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     c3a:	44 31       	cpi	r20, 0x14	; 20
     c3c:	51 05       	cpc	r21, r1
     c3e:	29 f7       	brne	.-54     	; 0xc0a <USB_Device_ProcessControlRequest+0x1f6>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     c40:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c42:	80 91 e8 00 	lds	r24, 0x00E8
     c46:	87 7f       	andi	r24, 0xF7	; 247
     c48:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     c4c:	ce 01       	movw	r24, r28
     c4e:	03 96       	adiw	r24, 0x03	; 3
     c50:	6a e2       	ldi	r22, 0x2A	; 42
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	e5 dd       	rcall	.-1078   	; 0x820 <Endpoint_Write_Control_Stream_LE>
     c56:	12 c0       	rjmp	.+36     	; 0xc7c <USB_Device_ProcessControlRequest+0x268>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     c58:	60 91 34 02 	lds	r22, 0x0234
     c5c:	ae 01       	movw	r20, r28
     c5e:	4f 5f       	subi	r20, 0xFF	; 255
     c60:	5f 4f       	sbci	r21, 0xFF	; 255
     c62:	e9 db       	rcall	.-2094   	; 0x436 <CALLBACK_USB_GetDescriptor>
     c64:	bc 01       	movw	r22, r24
     c66:	00 97       	sbiw	r24, 0x00	; 0
     c68:	09 f4       	brne	.+2      	; 0xc6c <USB_Device_ProcessControlRequest+0x258>
     c6a:	3b c0       	rjmp	.+118    	; 0xce2 <USB_Device_ProcessControlRequest+0x2ce>
     c6c:	80 91 e8 00 	lds	r24, 0x00E8
     c70:	87 7f       	andi	r24, 0xF7	; 247
     c72:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     c76:	89 81       	ldd	r24, Y+1	; 0x01
     c78:	9a 81       	ldd	r25, Y+2	; 0x02
     c7a:	6d de       	rcall	.-806    	; 0x956 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c7c:	80 91 e8 00 	lds	r24, 0x00E8
     c80:	8b 77       	andi	r24, 0x7B	; 123
     c82:	80 93 e8 00 	sts	0x00E8, r24
     c86:	2d c0       	rjmp	.+90     	; 0xce2 <USB_Device_ProcessControlRequest+0x2ce>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     c88:	80 38       	cpi	r24, 0x80	; 128
     c8a:	59 f5       	brne	.+86     	; 0xce2 <USB_Device_ProcessControlRequest+0x2ce>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c8c:	80 91 e8 00 	lds	r24, 0x00E8
     c90:	87 7f       	andi	r24, 0xF7	; 247
     c92:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     c96:	80 91 2c 02 	lds	r24, 0x022C
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c9a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c9e:	80 91 e8 00 	lds	r24, 0x00E8
     ca2:	8e 77       	andi	r24, 0x7E	; 126
     ca4:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     ca8:	07 dc       	rcall	.-2034   	; 0x4b8 <Endpoint_ClearStatusStage>
     caa:	1b c0       	rjmp	.+54     	; 0xce2 <USB_Device_ProcessControlRequest+0x2ce>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     cac:	88 23       	and	r24, r24
     cae:	c9 f4       	brne	.+50     	; 0xce2 <USB_Device_ProcessControlRequest+0x2ce>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     cb0:	90 91 32 02 	lds	r25, 0x0232
     cb4:	92 30       	cpi	r25, 0x02	; 2
     cb6:	a8 f4       	brcc	.+42     	; 0xce2 <USB_Device_ProcessControlRequest+0x2ce>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cb8:	80 91 e8 00 	lds	r24, 0x00E8
     cbc:	87 7f       	andi	r24, 0xF7	; 247
     cbe:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     cc2:	90 93 2c 02 	sts	0x022C, r25

	Endpoint_ClearStatusStage();
     cc6:	f8 db       	rcall	.-2064   	; 0x4b8 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     cc8:	80 91 2c 02 	lds	r24, 0x022C
     ccc:	88 23       	and	r24, r24
     cce:	31 f4       	brne	.+12     	; 0xcdc <USB_Device_ProcessControlRequest+0x2c8>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     cd0:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     cd4:	87 fd       	sbrc	r24, 7
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <USB_Device_ProcessControlRequest+0x2c8>
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	01 c0       	rjmp	.+2      	; 0xcde <USB_Device_ProcessControlRequest+0x2ca>
     cdc:	84 e0       	ldi	r24, 0x04	; 4
     cde:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
     ce0:	01 db       	rcall	.-2558   	; 0x2e4 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     ce2:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     ce6:	83 ff       	sbrs	r24, 3
     ce8:	0a c0       	rjmp	.+20     	; 0xcfe <USB_Device_ProcessControlRequest+0x2ea>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     cea:	80 91 eb 00 	lds	r24, 0x00EB
     cee:	80 62       	ori	r24, 0x20	; 32
     cf0:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cf4:	80 91 e8 00 	lds	r24, 0x00E8
     cf8:	87 7f       	andi	r24, 0xF7	; 247
     cfa:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
     cfe:	ac 96       	adiw	r28, 0x2c	; 44
     d00:	0f b6       	in	r0, 0x3f	; 63
     d02:	f8 94       	cli
     d04:	de bf       	out	0x3e, r29	; 62
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	cd bf       	out	0x3d, r28	; 61
     d0a:	cf 91       	pop	r28
     d0c:	df 91       	pop	r29
     d0e:	1f 91       	pop	r17
     d10:	0f 91       	pop	r16
     d12:	08 95       	ret

00000d14 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     d14:	08 95       	ret

00000d16 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     d16:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
     d18:	8e b3       	in	r24, 0x1e	; 30
     d1a:	88 23       	and	r24, r24
     d1c:	61 f0       	breq	.+24     	; 0xd36 <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     d1e:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     d22:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d26:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
     d2a:	83 ff       	sbrs	r24, 3
     d2c:	01 c0       	rjmp	.+2      	; 0xd30 <USB_USBTask+0x1a>
		  USB_Device_ProcessControlRequest();
     d2e:	72 de       	rcall	.-796    	; 0xa14 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     d30:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     d32:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
     d36:	1f 91       	pop	r17
     d38:	08 95       	ret

00000d3a <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     d3a:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     d3c:	8e b3       	in	r24, 0x1e	; 30
     d3e:	84 30       	cpi	r24, 0x04	; 4
     d40:	41 f5       	brne	.+80     	; 0xd92 <CDC_Device_ReceiveByte+0x58>
     d42:	87 85       	ldd	r24, Z+15	; 0x0f
     d44:	90 89       	ldd	r25, Z+16	; 0x10
     d46:	a1 89       	ldd	r26, Z+17	; 0x11
     d48:	b2 89       	ldd	r27, Z+18	; 0x12
     d4a:	00 97       	sbiw	r24, 0x00	; 0
     d4c:	a1 05       	cpc	r26, r1
     d4e:	b1 05       	cpc	r27, r1
     d50:	01 f1       	breq	.+64     	; 0xd92 <CDC_Device_ReceiveByte+0x58>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
     d52:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     d54:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     d58:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsOUTReceived())
     d5c:	82 ff       	sbrs	r24, 2
     d5e:	19 c0       	rjmp	.+50     	; 0xd92 <CDC_Device_ReceiveByte+0x58>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     d60:	80 91 f2 00 	lds	r24, 0x00F2
     d64:	90 91 f3 00 	lds	r25, 0x00F3
	{
		if (Endpoint_BytesInEndpoint())
     d68:	89 2b       	or	r24, r25
     d6a:	19 f4       	brne	.+6      	; 0xd72 <CDC_Device_ReceiveByte+0x38>
     d6c:	2f ef       	ldi	r18, 0xFF	; 255
     d6e:	3f ef       	ldi	r19, 0xFF	; 255
     d70:	04 c0       	rjmp	.+8      	; 0xd7a <CDC_Device_ReceiveByte+0x40>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     d72:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
     d76:	28 2f       	mov	r18, r24
     d78:	30 e0       	ldi	r19, 0x00	; 0
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     d7a:	80 91 f2 00 	lds	r24, 0x00F2
     d7e:	90 91 f3 00 	lds	r25, 0x00F3

		if (!(Endpoint_BytesInEndpoint()))
     d82:	89 2b       	or	r24, r25
     d84:	41 f4       	brne	.+16     	; 0xd96 <CDC_Device_ReceiveByte+0x5c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d86:	80 91 e8 00 	lds	r24, 0x00E8
     d8a:	8b 77       	andi	r24, 0x7B	; 123
     d8c:	80 93 e8 00 	sts	0x00E8, r24
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <CDC_Device_ReceiveByte+0x5c>
     d92:	2f ef       	ldi	r18, 0xFF	; 255
     d94:	3f ef       	ldi	r19, 0xFF	; 255
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
     d96:	c9 01       	movw	r24, r18
     d98:	08 95       	ret

00000d9a <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
     d9a:	08 95       	ret

00000d9c <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     d9c:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     d9e:	8e b3       	in	r24, 0x1e	; 30
     da0:	84 30       	cpi	r24, 0x04	; 4
     da2:	21 f5       	brne	.+72     	; 0xdec <CDC_Device_Flush+0x50>
     da4:	87 85       	ldd	r24, Z+15	; 0x0f
     da6:	90 89       	ldd	r25, Z+16	; 0x10
     da8:	a1 89       	ldd	r26, Z+17	; 0x11
     daa:	b2 89       	ldd	r27, Z+18	; 0x12
     dac:	00 97       	sbiw	r24, 0x00	; 0
     dae:	a1 05       	cpc	r26, r1
     db0:	b1 05       	cpc	r27, r1
     db2:	e1 f0       	breq	.+56     	; 0xdec <CDC_Device_Flush+0x50>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
     db4:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     db6:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     dba:	80 91 f2 00 	lds	r24, 0x00F2
     dbe:	90 91 f3 00 	lds	r25, 0x00F3

	if (!(Endpoint_BytesInEndpoint()))
     dc2:	89 2b       	or	r24, r25
     dc4:	a9 f0       	breq	.+42     	; 0xdf0 <CDC_Device_Flush+0x54>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     dc6:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     dca:	80 91 e8 00 	lds	r24, 0x00E8
     dce:	8e 77       	andi	r24, 0x7E	; 126
     dd0:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
     dd4:	95 fd       	sbrc	r25, 5
     dd6:	0c c0       	rjmp	.+24     	; 0xdf0 <CDC_Device_Flush+0x54>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     dd8:	8e db       	rcall	.-2276   	; 0x4f6 <Endpoint_WaitUntilReady>
     dda:	98 2f       	mov	r25, r24
     ddc:	88 23       	and	r24, r24
     dde:	49 f4       	brne	.+18     	; 0xdf2 <CDC_Device_Flush+0x56>
     de0:	80 91 e8 00 	lds	r24, 0x00E8
     de4:	8e 77       	andi	r24, 0x7E	; 126
     de6:	80 93 e8 00 	sts	0x00E8, r24
     dea:	03 c0       	rjmp	.+6      	; 0xdf2 <CDC_Device_Flush+0x56>
     dec:	92 e0       	ldi	r25, 0x02	; 2
     dee:	01 c0       	rjmp	.+2      	; 0xdf2 <CDC_Device_Flush+0x56>
     df0:	90 e0       	ldi	r25, 0x00	; 0

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
     df2:	89 2f       	mov	r24, r25
     df4:	08 95       	ret

00000df6 <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     df6:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     df8:	8e b3       	in	r24, 0x1e	; 30
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	51 f4       	brne	.+20     	; 0xe12 <CDC_Device_USBTask+0x1c>
     dfe:	87 85       	ldd	r24, Z+15	; 0x0f
     e00:	90 89       	ldd	r25, Z+16	; 0x10
     e02:	a1 89       	ldd	r26, Z+17	; 0x11
     e04:	b2 89       	ldd	r27, Z+18	; 0x12
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	a1 05       	cpc	r26, r1
     e0a:	b1 05       	cpc	r27, r1
     e0c:	11 f0       	breq	.+4      	; 0xe12 <CDC_Device_USBTask+0x1c>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Device_Flush(CDCInterfaceInfo);
     e0e:	cf 01       	movw	r24, r30
     e10:	c5 cf       	rjmp	.-118    	; 0xd9c <CDC_Device_Flush>
     e12:	08 95       	ret

00000e14 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
     e14:	1f 93       	push	r17
     e16:	fc 01       	movw	r30, r24
     e18:	16 2f       	mov	r17, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     e1a:	8e b3       	in	r24, 0x1e	; 30
     e1c:	84 30       	cpi	r24, 0x04	; 4
     e1e:	d9 f4       	brne	.+54     	; 0xe56 <CDC_Device_SendByte+0x42>
     e20:	87 85       	ldd	r24, Z+15	; 0x0f
     e22:	90 89       	ldd	r25, Z+16	; 0x10
     e24:	a1 89       	ldd	r26, Z+17	; 0x11
     e26:	b2 89       	ldd	r27, Z+18	; 0x12
     e28:	00 97       	sbiw	r24, 0x00	; 0
     e2a:	a1 05       	cpc	r26, r1
     e2c:	b1 05       	cpc	r27, r1
     e2e:	99 f0       	breq	.+38     	; 0xe56 <CDC_Device_SendByte+0x42>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
     e30:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     e32:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     e36:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
     e3a:	85 fd       	sbrc	r24, 5
     e3c:	08 c0       	rjmp	.+16     	; 0xe4e <CDC_Device_SendByte+0x3a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e3e:	80 91 e8 00 	lds	r24, 0x00E8
     e42:	8e 77       	andi	r24, 0x7E	; 126
     e44:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     e48:	56 db       	rcall	.-2388   	; 0x4f6 <Endpoint_WaitUntilReady>
     e4a:	88 23       	and	r24, r24
     e4c:	29 f4       	brne	.+10     	; 0xe58 <CDC_Device_SendByte+0x44>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e4e:	10 93 f1 00 	sts	0x00F1, r17
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	01 c0       	rjmp	.+2      	; 0xe58 <CDC_Device_SendByte+0x44>
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
     e56:	82 e0       	ldi	r24, 0x02	; 2
}
     e58:	1f 91       	pop	r17
     e5a:	08 95       	ret

00000e5c <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     e5c:	1f 93       	push	r17
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
     e62:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     e64:	0d 96       	adiw	r24, 0x0d	; 13
     e66:	fc 01       	movw	r30, r24
     e68:	89 e0       	ldi	r24, 0x09	; 9
     e6a:	df 01       	movw	r26, r30
     e6c:	1d 92       	st	X+, r1
     e6e:	8a 95       	dec	r24
     e70:	e9 f7       	brne	.-6      	; 0xe6c <CDC_Device_ConfigureEndpoints+0x10>
     e72:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == CDCInterfaceInfo->Config.DataINEndpointNumber)
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	18 17       	cp	r17, r24
     e78:	29 f4       	brne	.+10     	; 0xe84 <CDC_Device_ConfigureEndpoints+0x28>
		{
			Size         = CDCInterfaceInfo->Config.DataINEndpointSize;
     e7a:	6a 81       	ldd	r22, Y+2	; 0x02
     e7c:	7b 81       	ldd	r23, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataINEndpointDoubleBank;
     e7e:	8c 81       	ldd	r24, Y+4	; 0x04
     e80:	52 e0       	ldi	r21, 0x02	; 2
     e82:	10 c0       	rjmp	.+32     	; 0xea4 <CDC_Device_ConfigureEndpoints+0x48>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.DataOUTEndpointNumber)
     e84:	8d 81       	ldd	r24, Y+5	; 0x05
     e86:	18 17       	cp	r17, r24
     e88:	31 f4       	brne	.+12     	; 0xe96 <CDC_Device_ConfigureEndpoints+0x3a>
		{
			Size         = CDCInterfaceInfo->Config.DataOUTEndpointSize;
     e8a:	6e 81       	ldd	r22, Y+6	; 0x06
     e8c:	7f 81       	ldd	r23, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
     e8e:	88 85       	ldd	r24, Y+8	; 0x08
     e90:	52 e0       	ldi	r21, 0x02	; 2
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	08 c0       	rjmp	.+16     	; 0xea6 <CDC_Device_ConfigureEndpoints+0x4a>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.NotificationEndpointNumber)
     e96:	89 85       	ldd	r24, Y+9	; 0x09
     e98:	18 17       	cp	r17, r24
     e9a:	39 f5       	brne	.+78     	; 0xeea <CDC_Device_ConfigureEndpoints+0x8e>
		{
			Size         = CDCInterfaceInfo->Config.NotificationEndpointSize;
     e9c:	6a 85       	ldd	r22, Y+10	; 0x0a
     e9e:	7b 85       	ldd	r23, Y+11	; 0x0b
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_INTERRUPT;
			DoubleBanked = CDCInterfaceInfo->Config.NotificationEndpointDoubleBank;
     ea0:	8c 85       	ldd	r24, Y+12	; 0x0c
     ea2:	53 e0       	ldi	r21, 0x03	; 3
     ea4:	30 e8       	ldi	r19, 0x80	; 128
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
     ea6:	88 23       	and	r24, r24
     ea8:	11 f4       	brne	.+4      	; 0xeae <CDC_Device_ConfigureEndpoints+0x52>
     eaa:	40 e0       	ldi	r20, 0x00	; 0
     eac:	01 c0       	rjmp	.+2      	; 0xeb0 <CDC_Device_ConfigureEndpoints+0x54>
     eae:	44 e0       	ldi	r20, 0x04	; 4
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	88 e0       	ldi	r24, 0x08	; 8
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	03 c0       	rjmp	.+6      	; 0xebe <CDC_Device_ConfigureEndpoints+0x62>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     eb8:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     ebe:	86 17       	cp	r24, r22
     ec0:	97 07       	cpc	r25, r23
     ec2:	d0 f3       	brcs	.-12     	; 0xeb8 <CDC_Device_ConfigureEndpoints+0x5c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     ec4:	85 2f       	mov	r24, r21
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	56 e0       	ldi	r21, 0x06	; 6
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	5a 95       	dec	r21
     ed0:	e1 f7       	brne	.-8      	; 0xeca <CDC_Device_ConfigureEndpoints+0x6e>
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	31 11       	cpse	r19, r1
     ed6:	61 e0       	ldi	r22, 0x01	; 1
     ed8:	68 2b       	or	r22, r24
     eda:	42 60       	ori	r20, 0x02	; 2
     edc:	22 95       	swap	r18
     ede:	20 7f       	andi	r18, 0xF0	; 240
     ee0:	42 2b       	or	r20, r18
     ee2:	81 2f       	mov	r24, r17
     ee4:	d6 da       	rcall	.-2644   	; 0x492 <Endpoint_ConfigureEndpoint_Prv>
     ee6:	88 23       	and	r24, r24
     ee8:	29 f0       	breq	.+10     	; 0xef4 <CDC_Device_ConfigureEndpoints+0x98>

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
     eea:	1f 5f       	subi	r17, 0xFF	; 255
     eec:	17 30       	cpi	r17, 0x07	; 7
     eee:	09 f0       	breq	.+2      	; 0xef2 <CDC_Device_ConfigureEndpoints+0x96>
     ef0:	c1 cf       	rjmp	.-126    	; 0xe74 <CDC_Device_ConfigureEndpoints+0x18>
     ef2:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
     ef4:	df 91       	pop	r29
     ef6:	cf 91       	pop	r28
     ef8:	1f 91       	pop	r17
     efa:	08 95       	ret

00000efc <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDC.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f02:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     f06:	83 ff       	sbrs	r24, 3
     f08:	63 c0       	rjmp	.+198    	; 0xfd0 <CDC_Device_ProcessControlRequest+0xd4>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     f0a:	88 81       	ld	r24, Y
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	20 91 34 02 	lds	r18, 0x0234
     f12:	30 91 35 02 	lds	r19, 0x0235
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	09 f0       	breq	.+2      	; 0xf1e <CDC_Device_ProcessControlRequest+0x22>
     f1c:	59 c0       	rjmp	.+178    	; 0xfd0 <CDC_Device_ProcessControlRequest+0xd4>
	  return;

	switch (USB_ControlRequest.bRequest)
     f1e:	80 91 31 02 	lds	r24, 0x0231
     f22:	81 32       	cpi	r24, 0x21	; 33
     f24:	61 f0       	breq	.+24     	; 0xf3e <CDC_Device_ProcessControlRequest+0x42>
     f26:	82 32       	cpi	r24, 0x22	; 34
     f28:	20 f4       	brcc	.+8      	; 0xf32 <CDC_Device_ProcessControlRequest+0x36>
     f2a:	80 32       	cpi	r24, 0x20	; 32
     f2c:	09 f0       	breq	.+2      	; 0xf30 <CDC_Device_ProcessControlRequest+0x34>
     f2e:	50 c0       	rjmp	.+160    	; 0xfd0 <CDC_Device_ProcessControlRequest+0xd4>
     f30:	1b c0       	rjmp	.+54     	; 0xf68 <CDC_Device_ProcessControlRequest+0x6c>
     f32:	82 32       	cpi	r24, 0x22	; 34
     f34:	79 f1       	breq	.+94     	; 0xf94 <CDC_Device_ProcessControlRequest+0x98>
     f36:	83 32       	cpi	r24, 0x23	; 35
     f38:	09 f0       	breq	.+2      	; 0xf3c <CDC_Device_ProcessControlRequest+0x40>
     f3a:	4a c0       	rjmp	.+148    	; 0xfd0 <CDC_Device_ProcessControlRequest+0xd4>
     f3c:	3b c0       	rjmp	.+118    	; 0xfb4 <CDC_Device_ProcessControlRequest+0xb8>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     f3e:	80 91 30 02 	lds	r24, 0x0230
     f42:	81 3a       	cpi	r24, 0xA1	; 161
     f44:	09 f0       	breq	.+2      	; 0xf48 <CDC_Device_ProcessControlRequest+0x4c>
     f46:	44 c0       	rjmp	.+136    	; 0xfd0 <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f48:	80 91 e8 00 	lds	r24, 0x00E8
     f4c:	87 7f       	andi	r24, 0xF7	; 247
     f4e:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
     f52:	ce 01       	movw	r24, r28
     f54:	0f 96       	adiw	r24, 0x0f	; 15
     f56:	67 e0       	ldi	r22, 0x07	; 7
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	62 dc       	rcall	.-1852   	; 0x820 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f5c:	80 91 e8 00 	lds	r24, 0x00E8
     f60:	8b 77       	andi	r24, 0x7B	; 123
     f62:	80 93 e8 00 	sts	0x00E8, r24
     f66:	34 c0       	rjmp	.+104    	; 0xfd0 <CDC_Device_ProcessControlRequest+0xd4>
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f68:	80 91 30 02 	lds	r24, 0x0230
     f6c:	81 32       	cpi	r24, 0x21	; 33
     f6e:	81 f5       	brne	.+96     	; 0xfd0 <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f70:	80 91 e8 00 	lds	r24, 0x00E8
     f74:	87 7f       	andi	r24, 0xF7	; 247
     f76:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
     f7a:	ce 01       	movw	r24, r28
     f7c:	0f 96       	adiw	r24, 0x0f	; 15
     f7e:	67 e0       	ldi	r22, 0x07	; 7
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	aa dc       	rcall	.-1708   	; 0x8d8 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f84:	80 91 e8 00 	lds	r24, 0x00E8
     f88:	8e 77       	andi	r24, 0x7E	; 126
     f8a:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     f8e:	ce 01       	movw	r24, r28
     f90:	64 d9       	rcall	.-3384   	; 0x25a <EVENT_CDC_Device_LineEncodingChanged>
     f92:	1e c0       	rjmp	.+60     	; 0xfd0 <CDC_Device_ProcessControlRequest+0xd4>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f94:	80 91 30 02 	lds	r24, 0x0230
     f98:	81 32       	cpi	r24, 0x21	; 33
     f9a:	d1 f4       	brne	.+52     	; 0xfd0 <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f9c:	80 91 e8 00 	lds	r24, 0x00E8
     fa0:	87 7f       	andi	r24, 0xF7	; 247
     fa2:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     fa6:	88 da       	rcall	.-2800   	; 0x4b8 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     fa8:	80 91 32 02 	lds	r24, 0x0232
     fac:	8d 87       	std	Y+13, r24	; 0x0d

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     fae:	ce 01       	movw	r24, r28
     fb0:	f4 de       	rcall	.-536    	; 0xd9a <CDC_Device_Event_Stub>
     fb2:	0e c0       	rjmp	.+28     	; 0xfd0 <CDC_Device_ProcessControlRequest+0xd4>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     fb4:	80 91 30 02 	lds	r24, 0x0230
     fb8:	81 32       	cpi	r24, 0x21	; 33
     fba:	51 f4       	brne	.+20     	; 0xfd0 <CDC_Device_ProcessControlRequest+0xd4>
     fbc:	80 91 e8 00 	lds	r24, 0x00E8
     fc0:	87 7f       	andi	r24, 0xF7	; 247
     fc2:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     fc6:	78 da       	rcall	.-2832   	; 0x4b8 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     fc8:	ce 01       	movw	r24, r28
     fca:	60 91 32 02 	lds	r22, 0x0232
     fce:	e5 de       	rcall	.-566    	; 0xd9a <CDC_Device_Event_Stub>
			}

			break;
	}
}
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	08 95       	ret

00000fd6 <__udivmodsi4>:
     fd6:	a1 e2       	ldi	r26, 0x21	; 33
     fd8:	1a 2e       	mov	r1, r26
     fda:	aa 1b       	sub	r26, r26
     fdc:	bb 1b       	sub	r27, r27
     fde:	fd 01       	movw	r30, r26
     fe0:	0d c0       	rjmp	.+26     	; 0xffc <__udivmodsi4_ep>

00000fe2 <__udivmodsi4_loop>:
     fe2:	aa 1f       	adc	r26, r26
     fe4:	bb 1f       	adc	r27, r27
     fe6:	ee 1f       	adc	r30, r30
     fe8:	ff 1f       	adc	r31, r31
     fea:	a2 17       	cp	r26, r18
     fec:	b3 07       	cpc	r27, r19
     fee:	e4 07       	cpc	r30, r20
     ff0:	f5 07       	cpc	r31, r21
     ff2:	20 f0       	brcs	.+8      	; 0xffc <__udivmodsi4_ep>
     ff4:	a2 1b       	sub	r26, r18
     ff6:	b3 0b       	sbc	r27, r19
     ff8:	e4 0b       	sbc	r30, r20
     ffa:	f5 0b       	sbc	r31, r21

00000ffc <__udivmodsi4_ep>:
     ffc:	66 1f       	adc	r22, r22
     ffe:	77 1f       	adc	r23, r23
    1000:	88 1f       	adc	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	1a 94       	dec	r1
    1006:	69 f7       	brne	.-38     	; 0xfe2 <__udivmodsi4_loop>
    1008:	60 95       	com	r22
    100a:	70 95       	com	r23
    100c:	80 95       	com	r24
    100e:	90 95       	com	r25
    1010:	9b 01       	movw	r18, r22
    1012:	ac 01       	movw	r20, r24
    1014:	bd 01       	movw	r22, r26
    1016:	cf 01       	movw	r24, r30
    1018:	08 95       	ret

0000101a <_exit>:
    101a:	f8 94       	cli

0000101c <__stop_program>:
    101c:	ff cf       	rjmp	.-2      	; 0x101c <__stop_program>
