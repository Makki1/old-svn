
XPLAINBridge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  000023ce  00002482  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023ce  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012c  00800158  00800158  000024da  2**0
                  ALLOC
  3 .eeprom       00000001  00810000  00810000  000024da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000b1c  00000000  00000000  000024dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000016f  00000000  00000000  00002ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000006c0  00000000  00000000  00003167  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000012bd  00000000  00000000  00003827  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000b013  00000000  00000000  00004ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002c89  00000000  00000000  0000faf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00008475  00000000  00000000  00012780  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000a40  00000000  00000000  0001abf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003f28  00000000  00000000  0001b638  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00004476  00000000  00000000  0001f560  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000860  00000000  00000000  000239d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       4:	bb c2       	rjmp	.+1398   	; 0x57c <__vector_1>
	}
	else
	{
		return 0;
	}
}
       6:	00 00       	nop
       8:	ff c0       	rjmp	.+510    	; 0x208 <__bad_interrupt>
       a:	00 00       	nop
       c:	fd c0       	rjmp	.+506    	; 0x208 <__bad_interrupt>
       e:	00 00       	nop
      10:	fb c0       	rjmp	.+502    	; 0x208 <__bad_interrupt>
      12:	00 00       	nop
      14:	f9 c0       	rjmp	.+498    	; 0x208 <__bad_interrupt>
      16:	00 00       	nop
      18:	f7 c0       	rjmp	.+494    	; 0x208 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f5 c0       	rjmp	.+490    	; 0x208 <__bad_interrupt>
      1e:	00 00       	nop
      20:	f3 c0       	rjmp	.+486    	; 0x208 <__bad_interrupt>
      22:	00 00       	nop
      24:	f1 c0       	rjmp	.+482    	; 0x208 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 2e 0c 	jmp	0x185c	; 0x185c <__vector_10>
      2c:	ed c0       	rjmp	.+474    	; 0x208 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7f c3       	rjmp	.+1790   	; 0x730 <__vector_12>
      32:	00 00       	nop
      34:	e9 c0       	rjmp	.+466    	; 0x208 <__bad_interrupt>
      36:	00 00       	nop
      38:	e7 c0       	rjmp	.+462    	; 0x208 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e5 c0       	rjmp	.+458    	; 0x208 <__bad_interrupt>
      3e:	00 00       	nop
      40:	e3 c0       	rjmp	.+454    	; 0x208 <__bad_interrupt>
      42:	00 00       	nop
      44:	bf c2       	rjmp	.+1406   	; 0x5c4 <__vector_17>
      46:	00 00       	nop
      48:	df c0       	rjmp	.+446    	; 0x208 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	dd c0       	rjmp	.+442    	; 0x208 <__bad_interrupt>
      4e:	00 00       	nop
      50:	db c0       	rjmp	.+438    	; 0x208 <__bad_interrupt>
      52:	00 00       	nop
      54:	d9 c0       	rjmp	.+434    	; 0x208 <__bad_interrupt>
      56:	00 00       	nop
      58:	d7 c0       	rjmp	.+430    	; 0x208 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d5 c0       	rjmp	.+426    	; 0x208 <__bad_interrupt>
      5e:	00 00       	nop
      60:	d3 c0       	rjmp	.+422    	; 0x208 <__bad_interrupt>
      62:	00 00       	nop
      64:	d1 c0       	rjmp	.+418    	; 0x208 <__bad_interrupt>
      66:	00 00       	nop
      68:	cf c0       	rjmp	.+414    	; 0x208 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	cd c0       	rjmp	.+410    	; 0x208 <__bad_interrupt>
      6e:	00 00       	nop
      70:	cb c0       	rjmp	.+406    	; 0x208 <__bad_interrupt>
      72:	00 00       	nop
      74:	c9 c0       	rjmp	.+402    	; 0x208 <__bad_interrupt>
      76:	00 00       	nop
      78:	c7 c0       	rjmp	.+398    	; 0x208 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c5 c0       	rjmp	.+394    	; 0x208 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f7 c2       	rjmp	.+1518   	; 0x670 <__vector_32>
      82:	00 00       	nop
      84:	c1 c0       	rjmp	.+386    	; 0x208 <__bad_interrupt>
      86:	00 00       	nop
      88:	bf c0       	rjmp	.+382    	; 0x208 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	bd c0       	rjmp	.+378    	; 0x208 <__bad_interrupt>
      8e:	00 00       	nop
      90:	bb c0       	rjmp	.+374    	; 0x208 <__bad_interrupt>
      92:	00 00       	nop
      94:	b9 c0       	rjmp	.+370    	; 0x208 <__bad_interrupt>
      96:	00 00       	nop

00000098 <AVRISP_DeviceDescriptor>:
      98:	12 01 10 01 ff 00 00 08 eb 03 04 21 00 02 01 02     ...........!....
      a8:	03 01                                               ..

000000aa <AVRISP_ConfigurationDescriptor>:
      aa:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 ff 00     .. .....2.......
      ba:	00 00 07 05 82 02 40 00 0a 07 05 02 02 40 00 0a     ......@......@..

000000ca <AVRISP_LanguageString>:
      ca:	04 03 09 04                                         ....

000000ce <AVRISP_ManufacturerString>:
      ce:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      de:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e8 <AVRISP_ProductString>:
      e8:	2e 03 4c 00 55 00 46 00 41 00 20 00 41 00 56 00     ..L.U.F.A. .A.V.
      f8:	52 00 49 00 53 00 50 00 20 00 4d 00 6b 00 49 00     R.I.S.P. .M.k.I.
     108:	49 00 20 00 43 00 6c 00 6f 00 6e 00 65 00 00 00     I. .C.l.o.n.e...

00000118 <AVRISP_SerialString>:
     118:	1c 03 30 00 30 00 30 00 30 00 41 00 30 00 30 00     ..0.0.0.0.A.0.0.
     128:	31 00 32 00 38 00 32 00 35 00 35 00 00 00           1.2.8.2.5.5...

00000136 <USART_DeviceDescriptor>:
     136:	12 01 10 01 02 00 00 08 eb 03 4b 20 01 00 01 02     ..........K ....
     146:	dc 01                                               ..

00000148 <USART_ConfigurationDescriptor>:
     148:	09 02 3e 00 02 01 00 80 32 09 04 00 00 01 02 02     ..>.....2.......
     158:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     168:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     178:	07 05 04 02 10 00 01 07 05 83 02 10 00 01           ..............

00000186 <USART_LanguageString>:
     186:	04 03 09 04                                         ....

0000018a <USART_ManufacturerString>:
     18a:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     19a:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000001a4 <USART_ProductString>:
     1a4:	26 03 4c 00 55 00 46 00 41 00 20 00 58 00 50 00     &.L.U.F.A. .X.P.
     1b4:	4c 00 41 00 49 00 4e 00 20 00 42 00 72 00 69 00     L.A.I.N. .B.r.i.
     1c4:	64 00 67 00 65 00 00 00                             d.g.e...

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d0 e2       	ldi	r29, 0x20	; 32
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61

000001d8 <__do_copy_data>:
     1d8:	11 e0       	ldi	r17, 0x01	; 1
     1da:	a0 e0       	ldi	r26, 0x00	; 0
     1dc:	b1 e0       	ldi	r27, 0x01	; 1
     1de:	ee ec       	ldi	r30, 0xCE	; 206
     1e0:	f3 e2       	ldi	r31, 0x23	; 35
     1e2:	00 e0       	ldi	r16, 0x00	; 0
     1e4:	0b bf       	out	0x3b, r16	; 59
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <__do_copy_data+0x14>
     1e8:	07 90       	elpm	r0, Z+
     1ea:	0d 92       	st	X+, r0
     1ec:	a8 35       	cpi	r26, 0x58	; 88
     1ee:	b1 07       	cpc	r27, r17
     1f0:	d9 f7       	brne	.-10     	; 0x1e8 <__do_copy_data+0x10>

000001f2 <__do_clear_bss>:
     1f2:	12 e0       	ldi	r17, 0x02	; 2
     1f4:	a8 e5       	ldi	r26, 0x58	; 88
     1f6:	b1 e0       	ldi	r27, 0x01	; 1
     1f8:	01 c0       	rjmp	.+2      	; 0x1fc <.do_clear_bss_start>

000001fa <.do_clear_bss_loop>:
     1fa:	1d 92       	st	X+, r1

000001fc <.do_clear_bss_start>:
     1fc:	a4 38       	cpi	r26, 0x84	; 132
     1fe:	b1 07       	cpc	r27, r17
     200:	e1 f7       	brne	.-8      	; 0x1fa <.do_clear_bss_loop>
     202:	33 d1       	rcall	.+614    	; 0x46a <main>
     204:	0c 94 e5 11 	jmp	0x23ca	; 0x23ca <_exit>

00000208 <__bad_interrupt>:
     208:	fb ce       	rjmp	.-522    	; 0x0 <__vectors>

0000020a <EVENT_USB_Device_Connect>:
				PORTB |= LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTB = ((PORTB | LEDS_ALL_LEDS) & ~LEDMask);
     20a:	2e 98       	cbi	0x05, 6	; 5

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     20c:	08 95       	ret

0000020e <EVENT_USB_Device_Disconnect>:
     20e:	2e 98       	cbi	0x05, 6	; 5

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     210:	08 95       	ret

00000212 <EVENT_CDC_Device_LineEncodingChanged>:
		#define STXDDR     DDRD

	/* Inline Functions: */
		static inline void SoftUART_SetBaud(const uint32_t Baud)
		{
			uint16_t BitTime = ((F_CPU / Baud) - 1);
     212:	fc 01       	movw	r30, r24
     214:	27 85       	ldd	r18, Z+15	; 0x0f
     216:	30 89       	ldd	r19, Z+16	; 0x10
     218:	41 89       	ldd	r20, Z+17	; 0x11
     21a:	52 89       	ldd	r21, Z+18	; 0x12
     21c:	60 e0       	ldi	r22, 0x00	; 0
     21e:	72 e1       	ldi	r23, 0x12	; 18
     220:	8a e7       	ldi	r24, 0x7A	; 122
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	0e 94 a9 11 	call	0x2352	; 0x2352 <__udivmodsi4>
     228:	21 50       	subi	r18, 0x01	; 1
     22a:	30 40       	sbci	r19, 0x00	; 0

			OCR1A = BitTime;
     22c:	30 93 89 00 	sts	0x0089, r19
     230:	20 93 88 00 	sts	0x0088, r18
			OCR3A = BitTime;
     234:	30 93 99 00 	sts	0x0099, r19
     238:	20 93 98 00 	sts	0x0098, r18
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	/* Change the software UART's baud rate to match the new baud rate */
	SoftUART_SetBaud(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
}
     23c:	08 95       	ret

0000023e <CALLBACK_USB_GetDescriptor>:
 *  \return Length of the retrieved descriptor in bytes, or NO_DESCRIPTOR if the descriptor was not found
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     23e:	9c 01       	movw	r18, r24
	/* Return the correct descriptors based on the selected mode */
	if (CurrentFirmwareMode == MODE_USART_BRIDGE)
     240:	80 91 58 01 	lds	r24, 0x0158
     244:	88 23       	and	r24, r24
     246:	11 f4       	brne	.+4      	; 0x24c <CALLBACK_USB_GetDescriptor+0xe>
	  return USART_GetDescriptor(wValue, wIndex, DescriptorAddress);
     248:	c9 01       	movw	r24, r18
     24a:	50 c1       	rjmp	.+672    	; 0x4ec <USART_GetDescriptor>
	else
	  return AVRISP_GetDescriptor(wValue, wIndex, DescriptorAddress);
     24c:	c9 01       	movw	r24, r18
}
     24e:	1a c1       	rjmp	.+564    	; 0x484 <AVRISP_GetDescriptor>

00000250 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	if (CurrentFirmwareMode == MODE_USART_BRIDGE)
     250:	80 91 58 01 	lds	r24, 0x0158
     254:	88 23       	and	r24, r24
     256:	21 f4       	brne	.+8      	; 0x260 <EVENT_USB_Device_ControlRequest+0x10>
	  CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	91 e0       	ldi	r25, 0x01	; 1
     25c:	0c 94 3b 11 	jmp	0x2276	; 0x2276 <CDC_Device_ProcessControlRequest>
     260:	08 95       	ret

00000262 <EVENT_USB_Device_ConfigurationChanged>:
	MCUCR &= ~(1 << JTD);
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     262:	1f 93       	push	r17
	bool ConfigSuccess = true;

	/* Configure the device endpoints according to the selected mode */
	if (CurrentFirmwareMode == MODE_USART_BRIDGE)
     264:	80 91 58 01 	lds	r24, 0x0158
     268:	88 23       	and	r24, r24
     26a:	09 f0       	breq	.+2      	; 0x26e <EVENT_USB_Device_ConfigurationChanged+0xc>
     26c:	34 c0       	rjmp	.+104    	; 0x2d6 <EVENT_USB_Device_ConfigurationChanged+0x74>
	{
		ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	91 e0       	ldi	r25, 0x01	; 1
     272:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <CDC_Device_ConfigureEndpoints>
     276:	18 2f       	mov	r17, r24
     278:	11 70       	andi	r17, 0x01	; 1

		/* Configure the UART flush timer - run at Fcpu/1024 for maximum interval before overflow */
		TCCR0B = ((1 << CS02) | (1 << CS00));
     27a:	85 e0       	ldi	r24, 0x05	; 5
     27c:	85 bd       	out	0x25, r24	; 37
		 */
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		                                         ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     27e:	ee e5       	ldi	r30, 0x5E	; 94
     280:	f2 e0       	ldi	r31, 0x02	; 2
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     282:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     284:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
	
			Buffer->In     = DataPtr;
     286:	89 e5       	ldi	r24, 0x59	; 89
     288:	91 e0       	ldi	r25, 0x01	; 1
     28a:	91 83       	std	Z+1, r25	; 0x01
     28c:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
     28e:	93 83       	std	Z+3, r25	; 0x03
     290:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
     292:	95 83       	std	Z+5, r25	; 0x05
     294:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
     296:	89 ed       	ldi	r24, 0xD9	; 217
     298:	91 e0       	ldi	r25, 0x01	; 1
     29a:	97 83       	std	Z+7, r25	; 0x07
     29c:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
     29e:	80 e8       	ldi	r24, 0x80	; 128
     2a0:	80 87       	std	Z+8, r24	; 0x08
			Buffer->Count  = 0;
     2a2:	12 86       	std	Z+10, r1	; 0x0a
     2a4:	11 86       	std	Z+9, r1	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     2a6:	2f bf       	out	0x3f, r18	; 63
		 */
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		                                         ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     2a8:	e9 e6       	ldi	r30, 0x69	; 105
     2aa:	f2 e0       	ldi	r31, 0x02	; 2
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     2ac:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     2ae:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
	
			Buffer->In     = DataPtr;
     2b0:	89 ed       	ldi	r24, 0xD9	; 217
     2b2:	91 e0       	ldi	r25, 0x01	; 1
     2b4:	91 83       	std	Z+1, r25	; 0x01
     2b6:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
     2b8:	93 83       	std	Z+3, r25	; 0x03
     2ba:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
     2bc:	95 83       	std	Z+5, r25	; 0x05
     2be:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
     2c0:	89 e5       	ldi	r24, 0x59	; 89
     2c2:	92 e0       	ldi	r25, 0x02	; 2
     2c4:	97 83       	std	Z+7, r25	; 0x07
     2c6:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
     2c8:	80 e8       	ldi	r24, 0x80	; 128
     2ca:	80 87       	std	Z+8, r24	; 0x08
			Buffer->Count  = 0;
     2cc:	12 86       	std	Z+10, r1	; 0x0a
     2ce:	11 86       	std	Z+9, r1	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     2d0:	2f bf       	out	0x3f, r18	; 63
		/* Initialize ring buffers used to hold serial data between USB and software UART interfaces */
		RingBuffer_InitBuffer(&USBtoUART_Buffer, USBtoUART_Buffer_Data, sizeof(USBtoUART_Buffer_Data));
		RingBuffer_InitBuffer(&UARTtoUSB_Buffer, UARTtoUSB_Buffer_Data, sizeof(UARTtoUSB_Buffer_Data));

		/* Start the software USART */
		SoftUART_Init();
     2d2:	3a d1       	rcall	.+628    	; 0x548 <SoftUART_Init>
     2d4:	08 c0       	rjmp	.+16     	; 0x2e6 <EVENT_USB_Device_ConfigurationChanged+0x84>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     2d6:	82 e0       	ldi	r24, 0x02	; 2
     2d8:	60 e8       	ldi	r22, 0x80	; 128
     2da:	42 e3       	ldi	r20, 0x32	; 50
     2dc:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <Endpoint_ConfigureEndpoint_Prv>
	}
	else
	{
		ConfigSuccess &= Endpoint_ConfigureEndpoint(AVRISP_DATA_OUT_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_OUT,
     2e0:	18 2f       	mov	r17, r24
     2e2:	11 70       	andi	r17, 0x01	; 1
		ConfigSuccess &= Endpoint_ConfigureEndpoint(AVRISP_DATA_IN_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_IN,
		                                            AVRISP_DATA_EPSIZE, ENDPOINT_BANK_SINGLE);
		#endif

		/* Configure the V2 protocol packet handler */
		V2Protocol_Init();
     2e4:	27 d3       	rcall	.+1614   	; 0x934 <V2Protocol_Init>
	}

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     2e6:	11 23       	and	r17, r17
     2e8:	11 f4       	brne	.+4      	; 0x2ee <EVENT_USB_Device_ConfigurationChanged+0x8c>
     2ea:	90 e4       	ldi	r25, 0x40	; 64
     2ec:	01 c0       	rjmp	.+2      	; 0x2f0 <EVENT_USB_Device_ConfigurationChanged+0x8e>
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	85 b1       	in	r24, 0x05	; 5
     2f2:	90 95       	com	r25
     2f4:	80 64       	ori	r24, 0x40	; 64
     2f6:	98 23       	and	r25, r24
     2f8:	95 b9       	out	0x05, r25	; 5
}
     2fa:	1f 91       	pop	r17
     2fc:	08 95       	ret

000002fe <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     2fe:	84 b7       	in	r24, 0x34	; 52
     300:	87 7f       	andi	r24, 0xF7	; 247
     302:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     304:	88 e1       	ldi	r24, 0x18	; 24
     306:	0f b6       	in	r0, 0x3f	; 63
     308:	f8 94       	cli
     30a:	80 93 60 00 	sts	0x0060, r24
     30e:	10 92 60 00 	sts	0x0060, r1
     312:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	80 e8       	ldi	r24, 0x80	; 128
     318:	0f b6       	in	r0, 0x3f	; 63
     31a:	f8 94       	cli
     31c:	80 93 61 00 	sts	0x0061, r24
     320:	90 93 61 00 	sts	0x0061, r25
     324:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	SoftUART_Init();
     326:	10 d1       	rcall	.+544    	; 0x548 <SoftUART_Init>

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRB  |= LEDS_ALL_LEDS;
     328:	26 9a       	sbi	0x04, 6	; 4
				PORTB |= LEDS_ALL_LEDS;
     32a:	2e 9a       	sbi	0x05, 6	; 5
	LEDs_Init();
	USB_Init();
     32c:	0e 94 18 0c 	call	0x1830	; 0x1830 <USB_Init>

	/* Disable JTAG debugging */
	MCUCR |= (1 << JTD);
     330:	85 b7       	in	r24, 0x35	; 53
     332:	80 68       	ori	r24, 0x80	; 128
     334:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << JTD);
     336:	85 b7       	in	r24, 0x35	; 53
     338:	80 68       	ori	r24, 0x80	; 128
     33a:	85 bf       	out	0x35, r24	; 53

	/* Enable pull-up on the JTAG TDI pin so we can use it to select the mode */
	PORTF |= (1 << 7);
     33c:	8f 9a       	sbi	0x11, 7	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     33e:	80 e2       	ldi	r24, 0x20	; 32
     340:	9e e4       	ldi	r25, 0x4E	; 78
     342:	01 97       	sbiw	r24, 0x01	; 1
     344:	f1 f7       	brne	.-4      	; 0x342 <SetupHardware+0x44>
	Delay_MS(10);

	/* Select the firmware mode based on the JTD pin's value */
	CurrentFirmwareMode = (PINF & (1 << 7)) ? MODE_USART_BRIDGE : MODE_PDI_PROGRAMMER;
     346:	8f b1       	in	r24, 0x0f	; 15
     348:	10 92 58 01 	sts	0x0158, r1
     34c:	87 fd       	sbrc	r24, 7
     34e:	03 c0       	rjmp	.+6      	; 0x356 <SetupHardware+0x58>
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	80 93 58 01 	sts	0x0158, r24

	/* Re-enable JTAG debugging */
	MCUCR &= ~(1 << JTD);
     356:	85 b7       	in	r24, 0x35	; 53
     358:	8f 77       	andi	r24, 0x7F	; 127
     35a:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << JTD);
     35c:	85 b7       	in	r24, 0x35	; 53
     35e:	8f 77       	andi	r24, 0x7F	; 127
     360:	85 bf       	out	0x35, r24	; 53
}
     362:	08 95       	ret

00000364 <UARTBridge_Task>:
		LEDs_SetAllLEDs(LEDMASK_USB_READY);
	}
}

void UARTBridge_Task(void)
{
     364:	0f 93       	push	r16
     366:	1f 93       	push	r17
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
	/* Must be in the configured state for the USART Bridge code to process data */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     36c:	8e b3       	in	r24, 0x1e	; 30
     36e:	84 30       	cpi	r24, 0x04	; 4
     370:	09 f0       	breq	.+2      	; 0x374 <UARTBridge_Task+0x10>
     372:	67 c0       	rjmp	.+206    	; 0x442 <UARTBridge_Task+0xde>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     374:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     376:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Count = Buffer->Count;
     378:	20 91 67 02 	lds	r18, 0x0267
     37c:	30 91 68 02 	lds	r19, 0x0268
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     380:	8f bf       	out	0x3f, r24	; 63
	  return;

	/* Only try to read in bytes from the CDC interface if the transmit buffer is not full */
	if (!(RingBuffer_IsFull(&USBtoUART_Buffer)))
     382:	80 91 66 02 	lds	r24, 0x0266
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	28 17       	cp	r18, r24
     38a:	39 07       	cpc	r19, r25
     38c:	09 f1       	breq	.+66     	; 0x3d0 <UARTBridge_Task+0x6c>
	{
		int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	91 e0       	ldi	r25, 0x01	; 1
     392:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <CDC_Device_ReceiveByte>

		/* Read bytes from the USB OUT endpoint into the UART transmit buffer */
		if (!(ReceivedByte < 0))
     396:	97 fd       	sbrc	r25, 7
     398:	1b c0       	rjmp	.+54     	; 0x3d0 <UARTBridge_Task+0x6c>
		 *  \param[in]     Data    Data element to insert into the buffer.
		 */
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     39a:	ce e5       	ldi	r28, 0x5E	; 94
     39c:	d2 e0       	ldi	r29, 0x02	; 2

			*Buffer->In = Data;
     39e:	e8 81       	ld	r30, Y
     3a0:	f9 81       	ldd	r31, Y+1	; 0x01
     3a2:	80 83       	st	Z, r24

			if (++Buffer->In == Buffer->End)
     3a4:	88 81       	ld	r24, Y
     3a6:	99 81       	ldd	r25, Y+1	; 0x01
     3a8:	01 96       	adiw	r24, 0x01	; 1
     3aa:	99 83       	std	Y+1, r25	; 0x01
     3ac:	88 83       	st	Y, r24
     3ae:	2e 81       	ldd	r18, Y+6	; 0x06
     3b0:	3f 81       	ldd	r19, Y+7	; 0x07
     3b2:	82 17       	cp	r24, r18
     3b4:	93 07       	cpc	r25, r19
     3b6:	21 f4       	brne	.+8      	; 0x3c0 <UARTBridge_Task+0x5c>
			  Buffer->In = Buffer->Start;
     3b8:	8c 81       	ldd	r24, Y+4	; 0x04
     3ba:	9d 81       	ldd	r25, Y+5	; 0x05
     3bc:	99 83       	std	Y+1, r25	; 0x01
     3be:	88 83       	st	Y, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     3c0:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     3c2:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Buffer->Count++;
     3c4:	89 85       	ldd	r24, Y+9	; 0x09
     3c6:	9a 85       	ldd	r25, Y+10	; 0x0a
     3c8:	01 96       	adiw	r24, 0x01	; 1
     3ca:	9a 87       	std	Y+10, r25	; 0x0a
     3cc:	89 87       	std	Y+9, r24	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     3ce:	2f bf       	out	0x3f, r18	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     3d0:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     3d2:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Count = Buffer->Count;
     3d4:	c0 91 72 02 	lds	r28, 0x0272
     3d8:	d0 91 73 02 	lds	r29, 0x0273
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     3dc:	8f bf       	out	0x3f, r24	; 63
		  RingBuffer_Insert(&USBtoUART_Buffer, ReceivedByte);
	}
	
	/* Check if the UART receive buffer flush timer has expired or buffer is nearly full */
	uint16_t BufferCount = RingBuffer_GetCount(&UARTtoUSB_Buffer);
	if ((TIFR0 & (1 << TOV0)) || (BufferCount > 200))
     3de:	a8 99       	sbic	0x15, 0	; 21
     3e0:	03 c0       	rjmp	.+6      	; 0x3e8 <UARTBridge_Task+0x84>
     3e2:	c9 3c       	cpi	r28, 0xC9	; 201
     3e4:	d1 05       	cpc	r29, r1
     3e6:	48 f1       	brcs	.+82     	; 0x43a <UARTBridge_Task+0xd6>
	{
		/* Clear flush timer expiry flag */
		TIFR0 |= (1 << TOV0);
     3e8:	a8 9a       	sbi	0x15, 0	; 21
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     3ea:	09 e6       	ldi	r16, 0x69	; 105
     3ec:	12 e0       	ldi	r17, 0x02	; 2
     3ee:	23 c0       	rjmp	.+70     	; 0x436 <UARTBridge_Task+0xd2>

		/* Read bytes from the USART receive buffer into the USB IN endpoint */
		while (BufferCount--)
		{
			/* Try to send the next byte of data to the host, abort if there is an error without dequeuing */
			if (CDC_Device_SendByte(&VirtualSerial_CDC_Interface,
     3f0:	e0 91 6b 02 	lds	r30, 0x026B
     3f4:	f0 91 6c 02 	lds	r31, 0x026C
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	91 e0       	ldi	r25, 0x01	; 1
     3fc:	60 81       	ld	r22, Z
     3fe:	0e 94 c7 10 	call	0x218e	; 0x218e <CDC_Device_SendByte>
     402:	88 23       	and	r24, r24
     404:	d1 f4       	brne	.+52     	; 0x43a <UARTBridge_Task+0xd6>
     406:	f8 01       	movw	r30, r16
		
			uint8_t Data = *Buffer->Out;

			if (++Buffer->Out == Buffer->End)
     408:	82 81       	ldd	r24, Z+2	; 0x02
     40a:	93 81       	ldd	r25, Z+3	; 0x03
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	93 83       	std	Z+3, r25	; 0x03
     410:	82 83       	std	Z+2, r24	; 0x02
     412:	26 81       	ldd	r18, Z+6	; 0x06
     414:	37 81       	ldd	r19, Z+7	; 0x07
     416:	82 17       	cp	r24, r18
     418:	93 07       	cpc	r25, r19
     41a:	21 f4       	brne	.+8      	; 0x424 <UARTBridge_Task+0xc0>
			  Buffer->Out = Buffer->Start;
     41c:	84 81       	ldd	r24, Z+4	; 0x04
     41e:	95 81       	ldd	r25, Z+5	; 0x05
     420:	93 83       	std	Z+3, r25	; 0x03
     422:	82 83       	std	Z+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     424:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     426:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Buffer->Count--;
     428:	81 85       	ldd	r24, Z+9	; 0x09
     42a:	92 85       	ldd	r25, Z+10	; 0x0a
     42c:	01 97       	sbiw	r24, 0x01	; 1
     42e:	92 87       	std	Z+10, r25	; 0x0a
     430:	81 87       	std	Z+9, r24	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     432:	2f bf       	out	0x3f, r18	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
     434:	21 97       	sbiw	r28, 0x01	; 1
	{
		/* Clear flush timer expiry flag */
		TIFR0 |= (1 << TOV0);

		/* Read bytes from the USART receive buffer into the USB IN endpoint */
		while (BufferCount--)
     436:	20 97       	sbiw	r28, 0x00	; 0
     438:	d9 f6       	brne	.-74     	; 0x3f0 <UARTBridge_Task+0x8c>
			/* Dequeue the already sent byte from the buffer now we have confirmed that no transmission error occurred */
			RingBuffer_Remove(&UARTtoUSB_Buffer);
		}
	}

	CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	0e 94 b8 10 	call	0x2170	; 0x2170 <CDC_Device_USBTask>
}
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
     446:	1f 91       	pop	r17
     448:	0f 91       	pop	r16
     44a:	08 95       	ret

0000044c <AVRISP_Task>:
}

void AVRISP_Task(void)
{
	/* Must be in the configured state for the AVRISP code to process data */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     44c:	8e b3       	in	r24, 0x1e	; 30
     44e:	84 30       	cpi	r24, 0x04	; 4
     450:	59 f4       	brne	.+22     	; 0x468 <AVRISP_Task+0x1c>
	  return;

	V2Params_UpdateParamValues();
     452:	a1 d2       	rcall	.+1346   	; 0x996 <V2Params_UpdateParamValues>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     454:	82 e0       	ldi	r24, 0x02	; 2
     456:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     45a:	80 91 e8 00 	lds	r24, 0x00E8

	Endpoint_SelectEndpoint(AVRISP_DATA_OUT_EPNUM);

	/* Check to see if a V2 Protocol command has been received */
	if (Endpoint_IsOUTReceived())
     45e:	82 ff       	sbrs	r24, 2
     460:	03 c0       	rjmp	.+6      	; 0x468 <AVRISP_Task+0x1c>
				PORTB |= LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTB = ((PORTB | LEDS_ALL_LEDS) & ~LEDMask);
     462:	2e 98       	cbi	0x05, 6	; 5
	{
		LEDs_SetAllLEDs(LEDMASK_BUSY);

		/* Pass off processing of the V2 Protocol command to the V2 Protocol handler */
		V2Protocol_ProcessCommand();
     464:	7b d1       	rcall	.+758    	; 0x75c <V2Protocol_ProcessCommand>
     466:	2e 9a       	sbi	0x05, 6	; 5
     468:	08 95       	ret

0000046a <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     46a:	49 df       	rcall	.-366    	; 0x2fe <SetupHardware>
     46c:	2e 98       	cbi	0x05, 6	; 5

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     46e:	78 94       	sei

	for (;;)
	{
		if (CurrentFirmwareMode == MODE_USART_BRIDGE)
     470:	80 91 58 01 	lds	r24, 0x0158
     474:	88 23       	and	r24, r24
     476:	11 f4       	brne	.+4      	; 0x47c <main+0x12>
		  UARTBridge_Task();
     478:	75 df       	rcall	.-278    	; 0x364 <UARTBridge_Task>
     47a:	01 c0       	rjmp	.+2      	; 0x47e <main+0x14>
		else
		  AVRISP_Task();
     47c:	e7 df       	rcall	.-50     	; 0x44c <AVRISP_Task>

		USB_USBTask();
     47e:	0e 94 48 10 	call	0x2090	; 0x2090 <USB_USBTask>
     482:	f6 cf       	rjmp	.-20     	; 0x470 <main+0x6>

00000484 <AVRISP_GetDescriptor>:
 *  USB host.
 */
uint16_t AVRISP_GetDescriptor(const uint16_t wValue,
                              const uint8_t wIndex,
                              const void** const DescriptorAddress)
{
     484:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     486:	29 2f       	mov	r18, r25
     488:	33 27       	eor	r19, r19
     48a:	22 30       	cpi	r18, 0x02	; 2
     48c:	49 f0       	breq	.+18     	; 0x4a0 <AVRISP_GetDescriptor+0x1c>
     48e:	23 30       	cpi	r18, 0x03	; 3
     490:	61 f0       	breq	.+24     	; 0x4aa <AVRISP_GetDescriptor+0x26>
     492:	21 30       	cpi	r18, 0x01	; 1
     494:	21 f5       	brne	.+72     	; 0x4de <AVRISP_GetDescriptor+0x5a>
     496:	e8 e9       	ldi	r30, 0x98	; 152
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	82 e1       	ldi	r24, 0x12	; 18
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	23 c0       	rjmp	.+70     	; 0x4e6 <AVRISP_GetDescriptor+0x62>
     4a0:	ea ea       	ldi	r30, 0xAA	; 170
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	80 e2       	ldi	r24, 0x20	; 32
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	1e c0       	rjmp	.+60     	; 0x4e6 <AVRISP_GetDescriptor+0x62>
		case DTYPE_Configuration:
			Address = &AVRISP_ConfigurationDescriptor;
			Size    = sizeof(AVRISP_USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     4aa:	81 30       	cpi	r24, 0x01	; 1
     4ac:	59 f0       	breq	.+22     	; 0x4c4 <AVRISP_GetDescriptor+0x40>
     4ae:	81 30       	cpi	r24, 0x01	; 1
     4b0:	28 f0       	brcs	.+10     	; 0x4bc <AVRISP_GetDescriptor+0x38>
     4b2:	82 30       	cpi	r24, 0x02	; 2
     4b4:	59 f0       	breq	.+22     	; 0x4cc <AVRISP_GetDescriptor+0x48>
     4b6:	83 30       	cpi	r24, 0x03	; 3
     4b8:	91 f4       	brne	.+36     	; 0x4de <AVRISP_GetDescriptor+0x5a>
     4ba:	0c c0       	rjmp	.+24     	; 0x4d4 <AVRISP_GetDescriptor+0x50>
			{
				case 0x00:
					Address = &AVRISP_LanguageString;
					Size    = pgm_read_byte(&AVRISP_LanguageString.Header.Size);
     4bc:	ea ec       	ldi	r30, 0xCA	; 202
     4be:	f0 e0       	ldi	r31, 0x00	; 0
     4c0:	84 91       	lpm	r24, Z+
     4c2:	0b c0       	rjmp	.+22     	; 0x4da <AVRISP_GetDescriptor+0x56>
					break;
				case 0x01:
					Address = &AVRISP_ManufacturerString;
					Size    = pgm_read_byte(&AVRISP_ManufacturerString.Header.Size);
     4c4:	ee ec       	ldi	r30, 0xCE	; 206
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	84 91       	lpm	r24, Z+
     4ca:	07 c0       	rjmp	.+14     	; 0x4da <AVRISP_GetDescriptor+0x56>
					break;
				case 0x02:
					Address = &AVRISP_ProductString;
					Size    = pgm_read_byte(&AVRISP_ProductString.Header.Size);
     4cc:	e8 ee       	ldi	r30, 0xE8	; 232
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	84 91       	lpm	r24, Z+
     4d2:	03 c0       	rjmp	.+6      	; 0x4da <AVRISP_GetDescriptor+0x56>
					break;
				case 0x03:
					Address = &AVRISP_SerialString;
					Size    = pgm_read_byte(&AVRISP_SerialString.Header.Size);
     4d4:	e8 e1       	ldi	r30, 0x18	; 24
     4d6:	f1 e0       	ldi	r31, 0x01	; 1
     4d8:	84 91       	lpm	r24, Z+
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	04 c0       	rjmp	.+8      	; 0x4e6 <AVRISP_GetDescriptor+0x62>
     4de:	e0 e0       	ldi	r30, 0x00	; 0
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	90 e0       	ldi	r25, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     4e6:	ed 93       	st	X+, r30
     4e8:	fc 93       	st	X, r31
	return Size;
}
     4ea:	08 95       	ret

000004ec <USART_GetDescriptor>:
 *  callback function in the main source file, to retrieve the device's descriptors when in USART bridge mode.
 */
uint16_t USART_GetDescriptor(const uint16_t wValue,
                             const uint8_t wIndex,
                             const void** const DescriptorAddress)
{
     4ec:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     4ee:	29 2f       	mov	r18, r25
     4f0:	33 27       	eor	r19, r19
     4f2:	22 30       	cpi	r18, 0x02	; 2
     4f4:	49 f0       	breq	.+18     	; 0x508 <USART_GetDescriptor+0x1c>
     4f6:	23 30       	cpi	r18, 0x03	; 3
     4f8:	61 f0       	breq	.+24     	; 0x512 <USART_GetDescriptor+0x26>
     4fa:	21 30       	cpi	r18, 0x01	; 1
     4fc:	f1 f4       	brne	.+60     	; 0x53a <USART_GetDescriptor+0x4e>
     4fe:	e6 e3       	ldi	r30, 0x36	; 54
     500:	f1 e0       	ldi	r31, 0x01	; 1
     502:	82 e1       	ldi	r24, 0x12	; 18
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	1d c0       	rjmp	.+58     	; 0x542 <USART_GetDescriptor+0x56>
     508:	e8 e4       	ldi	r30, 0x48	; 72
     50a:	f1 e0       	ldi	r31, 0x01	; 1
     50c:	8e e3       	ldi	r24, 0x3E	; 62
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	18 c0       	rjmp	.+48     	; 0x542 <USART_GetDescriptor+0x56>
		case DTYPE_Configuration:
			Address = &USART_ConfigurationDescriptor;
			Size    = sizeof(USART_USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     512:	81 30       	cpi	r24, 0x01	; 1
     514:	49 f0       	breq	.+18     	; 0x528 <USART_GetDescriptor+0x3c>
     516:	81 30       	cpi	r24, 0x01	; 1
     518:	18 f0       	brcs	.+6      	; 0x520 <USART_GetDescriptor+0x34>
     51a:	82 30       	cpi	r24, 0x02	; 2
     51c:	71 f4       	brne	.+28     	; 0x53a <USART_GetDescriptor+0x4e>
     51e:	08 c0       	rjmp	.+16     	; 0x530 <USART_GetDescriptor+0x44>
			{
				case 0x00:
					Address = &USART_LanguageString;
					Size    = pgm_read_byte(&USART_LanguageString.Header.Size);
     520:	e6 e8       	ldi	r30, 0x86	; 134
     522:	f1 e0       	ldi	r31, 0x01	; 1
     524:	84 91       	lpm	r24, Z+
     526:	07 c0       	rjmp	.+14     	; 0x536 <USART_GetDescriptor+0x4a>
					break;
				case 0x01:
					Address = &USART_ManufacturerString;
					Size    = pgm_read_byte(&USART_ManufacturerString.Header.Size);
     528:	ea e8       	ldi	r30, 0x8A	; 138
     52a:	f1 e0       	ldi	r31, 0x01	; 1
     52c:	84 91       	lpm	r24, Z+
     52e:	03 c0       	rjmp	.+6      	; 0x536 <USART_GetDescriptor+0x4a>
					break;
				case 0x02:
					Address = &USART_ProductString;
					Size    = pgm_read_byte(&USART_ProductString.Header.Size);
     530:	e4 ea       	ldi	r30, 0xA4	; 164
     532:	f1 e0       	ldi	r31, 0x01	; 1
     534:	84 91       	lpm	r24, Z+
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	04 c0       	rjmp	.+8      	; 0x542 <USART_GetDescriptor+0x56>
     53a:	e0 e0       	ldi	r30, 0x00	; 0
     53c:	f0 e0       	ldi	r31, 0x00	; 0
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	90 e0       	ldi	r25, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     542:	ed 93       	st	X+, r30
     544:	fc 93       	st	X, r31
	return Size;
}
     546:	08 95       	ret

00000548 <SoftUART_Init>:

/** Initializes the software UART, ready for data transmission and reception into the global ring buffers. */
void SoftUART_Init(void)
{
	/* Set TX pin to output high, enable RX pull-up */
	STXPORT |= (1 << STX);
     548:	59 9a       	sbi	0x0b, 1	; 11
	STXDDR  |= (1 << STX);
     54a:	51 9a       	sbi	0x0a, 1	; 10
	SRXPORT |= (1 << SRX);
     54c:	58 9a       	sbi	0x0b, 0	; 11

	/* Enable INT0 for the detection of incoming start bits that signal the start of a byte */
	EICRA  = (1 << ISC01);
     54e:	22 e0       	ldi	r18, 0x02	; 2
     550:	20 93 69 00 	sts	0x0069, r18
	EIMSK  = (1 << INT0);
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	8d bb       	out	0x1d, r24	; 29
	/* Inline Functions: */
		static inline void SoftUART_SetBaud(const uint32_t Baud)
		{
			uint16_t BitTime = ((F_CPU / Baud) - 1);

			OCR1A = BitTime;
     558:	80 e4       	ldi	r24, 0x40	; 64
     55a:	93 e0       	ldi	r25, 0x03	; 3
     55c:	90 93 89 00 	sts	0x0089, r25
     560:	80 93 88 00 	sts	0x0088, r24
			OCR3A = BitTime;
     564:	90 93 99 00 	sts	0x0099, r25
     568:	80 93 98 00 	sts	0x0098, r24

	/* Set the transmission and reception timer compare values for the default baud rate */
	SoftUART_SetBaud(9600);

	/* Setup reception timer compare ISR */
	TIMSK1 = (1 << OCIE1A);
     56c:	20 93 6f 00 	sts	0x006F, r18

	/* Setup transmission timer compare ISR and start the timer */
	TIMSK3 = (1 << OCIE3A);
     570:	20 93 71 00 	sts	0x0071, r18
	TCCR3B = ((1 << CS30) | (1 << WGM32));
     574:	89 e0       	ldi	r24, 0x09	; 9
     576:	80 93 91 00 	sts	0x0091, r24
}
     57a:	08 95       	ret

0000057c <__vector_1>:

/** ISR to detect the start of a bit being sent to the software UART. */
ISR(INT0_vect, ISR_BLOCK)
{
     57c:	1f 92       	push	r1
     57e:	0f 92       	push	r0
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	0f 92       	push	r0
     584:	11 24       	eor	r1, r1
     586:	8f 93       	push	r24
     588:	9f 93       	push	r25
	/* Reset the number of reception bits remaining counter */
	RX_BitsRemaining = 8;
     58a:	88 e0       	ldi	r24, 0x08	; 8
     58c:	80 93 5b 02 	sts	0x025B, r24

	/* Reset the bit reception timer to -(1/2) of the total bit time, so that the first data bit is
	 * sampled mid way through the total bit time, making reception more robust.
	 */
	TCNT1 = -(OCR1A >> 1);
     590:	80 91 88 00 	lds	r24, 0x0088
     594:	90 91 89 00 	lds	r25, 0x0089
     598:	96 95       	lsr	r25
     59a:	87 95       	ror	r24
     59c:	90 95       	com	r25
     59e:	81 95       	neg	r24
     5a0:	9f 4f       	sbci	r25, 0xFF	; 255
     5a2:	90 93 85 00 	sts	0x0085, r25
     5a6:	80 93 84 00 	sts	0x0084, r24

	/* Check to see that the pin is still low (prevents glitches from starting a frame reception) */
	if (!(SRXPIN & (1 << SRX)))
     5aa:	48 99       	sbic	0x09, 0	; 9
     5ac:	04 c0       	rjmp	.+8      	; 0x5b6 <__vector_1+0x3a>
	{
		/* Disable start bit detection ISR while the next byte is received */
		EIMSK = 0;
     5ae:	1d ba       	out	0x1d, r1	; 29

		/* Start the reception timer */
		TCCR1B = ((1 << CS10) | (1 << WGM12));
     5b0:	89 e0       	ldi	r24, 0x09	; 9
     5b2:	80 93 81 00 	sts	0x0081, r24
	}
}
     5b6:	9f 91       	pop	r25
     5b8:	8f 91       	pop	r24
     5ba:	0f 90       	pop	r0
     5bc:	0f be       	out	0x3f, r0	; 63
     5be:	0f 90       	pop	r0
     5c0:	1f 90       	pop	r1
     5c2:	18 95       	reti

000005c4 <__vector_17>:

/** ISR to manage the reception of bits to the software UART. */
ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
     5c4:	1f 92       	push	r1
     5c6:	0f 92       	push	r0
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	0f 92       	push	r0
     5cc:	0b b6       	in	r0, 0x3b	; 59
     5ce:	0f 92       	push	r0
     5d0:	11 24       	eor	r1, r1
     5d2:	2f 93       	push	r18
     5d4:	3f 93       	push	r19
     5d6:	8f 93       	push	r24
     5d8:	9f 93       	push	r25
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	ef 93       	push	r30
     5e0:	ff 93       	push	r31
	/* Cache the current RX pin value for later checking */
	uint8_t SRX_Cached = (SRXPIN & (1 << SRX));
     5e2:	29 b1       	in	r18, 0x09	; 9
     5e4:	21 70       	andi	r18, 0x01	; 1

	/* Check if reception has finished */
	if (RX_BitsRemaining)
     5e6:	90 91 5b 02 	lds	r25, 0x025B
     5ea:	99 23       	and	r25, r25
     5ec:	71 f0       	breq	.+28     	; 0x60a <__vector_17+0x46>
	{
		/* Shift the current received bit mask to the next bit position */
		RX_Data >>= 1;
     5ee:	80 91 5c 02 	lds	r24, 0x025C
     5f2:	86 95       	lsr	r24
     5f4:	80 93 5c 02 	sts	0x025C, r24
		RX_BitsRemaining--;
     5f8:	91 50       	subi	r25, 0x01	; 1
     5fa:	90 93 5b 02 	sts	0x025B, r25

		/* Store next bit into the received data variable */
		if (SRX_Cached)
     5fe:	22 23       	and	r18, r18
     600:	41 f1       	breq	.+80     	; 0x652 <__vector_17+0x8e>
		  RX_Data |= (1 << 7);
     602:	80 68       	ori	r24, 0x80	; 128
     604:	80 93 5c 02 	sts	0x025C, r24
     608:	24 c0       	rjmp	.+72     	; 0x652 <__vector_17+0x8e>
	}
	else
	{
		/* Disable the reception timer as all data has now been received, re-enable start bit detection ISR */
		TCCR1B = 0;
     60a:	10 92 81 00 	sts	0x0081, r1
		EIFR   = (1 << INTF0);
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	8c bb       	out	0x1c, r24	; 28
		EIMSK  = (1 << INT0);
     612:	8d bb       	out	0x1d, r24	; 29

		/* Reception complete, store the received byte if stop bit valid */
		if (SRX_Cached)
     614:	22 23       	and	r18, r18
     616:	e9 f0       	breq	.+58     	; 0x652 <__vector_17+0x8e>
		 *  \param[in]     Data    Data element to insert into the buffer.
		 */
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     618:	c9 e6       	ldi	r28, 0x69	; 105
     61a:	d2 e0       	ldi	r29, 0x02	; 2

			*Buffer->In = Data;
     61c:	e8 81       	ld	r30, Y
     61e:	f9 81       	ldd	r31, Y+1	; 0x01
     620:	80 91 5c 02 	lds	r24, 0x025C
     624:	80 83       	st	Z, r24

			if (++Buffer->In == Buffer->End)
     626:	88 81       	ld	r24, Y
     628:	99 81       	ldd	r25, Y+1	; 0x01
     62a:	01 96       	adiw	r24, 0x01	; 1
     62c:	99 83       	std	Y+1, r25	; 0x01
     62e:	88 83       	st	Y, r24
     630:	2e 81       	ldd	r18, Y+6	; 0x06
     632:	3f 81       	ldd	r19, Y+7	; 0x07
     634:	82 17       	cp	r24, r18
     636:	93 07       	cpc	r25, r19
     638:	21 f4       	brne	.+8      	; 0x642 <__vector_17+0x7e>
			  Buffer->In = Buffer->Start;
     63a:	8c 81       	ldd	r24, Y+4	; 0x04
     63c:	9d 81       	ldd	r25, Y+5	; 0x05
     63e:	99 83       	std	Y+1, r25	; 0x01
     640:	88 83       	st	Y, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     642:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     644:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Buffer->Count++;
     646:	89 85       	ldd	r24, Y+9	; 0x09
     648:	9a 85       	ldd	r25, Y+10	; 0x0a
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	9a 87       	std	Y+10, r25	; 0x0a
     64e:	89 87       	std	Y+9, r24	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     650:	2f bf       	out	0x3f, r18	; 63
		  RingBuffer_Insert(&UARTtoUSB_Buffer, RX_Data);
	}
}
     652:	ff 91       	pop	r31
     654:	ef 91       	pop	r30
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	9f 91       	pop	r25
     65c:	8f 91       	pop	r24
     65e:	3f 91       	pop	r19
     660:	2f 91       	pop	r18
     662:	0f 90       	pop	r0
     664:	0b be       	out	0x3b, r0	; 59
     666:	0f 90       	pop	r0
     668:	0f be       	out	0x3f, r0	; 63
     66a:	0f 90       	pop	r0
     66c:	1f 90       	pop	r1
     66e:	18 95       	reti

00000670 <__vector_32>:

/** ISR to manage the transmission of bits via the software UART. */
ISR(TIMER3_COMPA_vect, ISR_BLOCK)
{
     670:	1f 92       	push	r1
     672:	0f 92       	push	r0
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	0f 92       	push	r0
     678:	0b b6       	in	r0, 0x3b	; 59
     67a:	0f 92       	push	r0
     67c:	11 24       	eor	r1, r1
     67e:	2f 93       	push	r18
     680:	3f 93       	push	r19
     682:	4f 93       	push	r20
     684:	8f 93       	push	r24
     686:	9f 93       	push	r25
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	ef 93       	push	r30
     68e:	ff 93       	push	r31
	/* Check if transmission has finished */
	if (TX_BitsRemaining)
     690:	90 91 59 02 	lds	r25, 0x0259
     694:	99 23       	and	r25, r25
     696:	71 f0       	breq	.+28     	; 0x6b4 <__vector_32+0x44>
	{
		/* Set the TX line to the value of the next bit in the byte to send */
		if (TX_Data & (1 << 0))
     698:	80 91 5a 02 	lds	r24, 0x025A
     69c:	80 ff       	sbrs	r24, 0
     69e:	02 c0       	rjmp	.+4      	; 0x6a4 <__vector_32+0x34>
		  STXPORT &= ~(1 << STX);
     6a0:	59 98       	cbi	0x0b, 1	; 11
     6a2:	01 c0       	rjmp	.+2      	; 0x6a6 <__vector_32+0x36>
		else
		  STXPORT |=  (1 << STX);
     6a4:	59 9a       	sbi	0x0b, 1	; 11

		/* Shift the transmission byte to move the next bit into position and decrement the bits remaining counter */
		TX_Data >>= 1;
     6a6:	86 95       	lsr	r24
     6a8:	80 93 5a 02 	sts	0x025A, r24
		TX_BitsRemaining--;
     6ac:	91 50       	subi	r25, 0x01	; 1
     6ae:	90 93 59 02 	sts	0x0259, r25
     6b2:	2e c0       	rjmp	.+92     	; 0x710 <__vector_32+0xa0>
	}
	else if (!(RX_BitsRemaining) && !(RingBuffer_IsEmpty(&USBtoUART_Buffer)))
     6b4:	80 91 5b 02 	lds	r24, 0x025B
     6b8:	88 23       	and	r24, r24
     6ba:	09 f0       	breq	.+2      	; 0x6be <__vector_32+0x4e>
     6bc:	29 c0       	rjmp	.+82     	; 0x710 <__vector_32+0xa0>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     6be:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     6c0:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Count = Buffer->Count;
     6c2:	80 91 67 02 	lds	r24, 0x0267
     6c6:	90 91 68 02 	lds	r25, 0x0268
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     6ca:	2f bf       	out	0x3f, r18	; 63
     6cc:	89 2b       	or	r24, r25
     6ce:	01 f1       	breq	.+64     	; 0x710 <__vector_32+0xa0>
	{
		/* Start bit - TX line low */
		STXPORT &= ~(1 << STX);
     6d0:	59 98       	cbi	0x0b, 1	; 11
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     6d2:	ce e5       	ldi	r28, 0x5E	; 94
     6d4:	d2 e0       	ldi	r29, 0x02	; 2
		
			uint8_t Data = *Buffer->Out;
     6d6:	ea 81       	ldd	r30, Y+2	; 0x02
     6d8:	fb 81       	ldd	r31, Y+3	; 0x03
     6da:	41 91       	ld	r20, Z+

			if (++Buffer->Out == Buffer->End)
     6dc:	fb 83       	std	Y+3, r31	; 0x03
     6de:	ea 83       	std	Y+2, r30	; 0x02
     6e0:	8e 81       	ldd	r24, Y+6	; 0x06
     6e2:	9f 81       	ldd	r25, Y+7	; 0x07
     6e4:	e8 17       	cp	r30, r24
     6e6:	f9 07       	cpc	r31, r25
     6e8:	21 f4       	brne	.+8      	; 0x6f2 <__vector_32+0x82>
			  Buffer->Out = Buffer->Start;
     6ea:	8c 81       	ldd	r24, Y+4	; 0x04
     6ec:	9d 81       	ldd	r25, Y+5	; 0x05
     6ee:	9b 83       	std	Y+3, r25	; 0x03
     6f0:	8a 83       	std	Y+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     6f2:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     6f4:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Buffer->Count--;
     6f6:	29 85       	ldd	r18, Y+9	; 0x09
     6f8:	3a 85       	ldd	r19, Y+10	; 0x0a
     6fa:	21 50       	subi	r18, 0x01	; 1
     6fc:	30 40       	sbci	r19, 0x00	; 0
     6fe:	3a 87       	std	Y+10, r19	; 0x0a
     700:	29 87       	std	Y+9, r18	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     702:	8f bf       	out	0x3f, r24	; 63

		/* Transmission complete, get the next byte to send (if available) */
		TX_Data          = ~RingBuffer_Remove(&USBtoUART_Buffer);
     704:	40 95       	com	r20
     706:	40 93 5a 02 	sts	0x025A, r20
		TX_BitsRemaining = 9;
     70a:	89 e0       	ldi	r24, 0x09	; 9
     70c:	80 93 59 02 	sts	0x0259, r24
	}
}
     710:	ff 91       	pop	r31
     712:	ef 91       	pop	r30
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	9f 91       	pop	r25
     71a:	8f 91       	pop	r24
     71c:	4f 91       	pop	r20
     71e:	3f 91       	pop	r19
     720:	2f 91       	pop	r18
     722:	0f 90       	pop	r0
     724:	0b be       	out	0x3b, r0	; 59
     726:	0f 90       	pop	r0
     728:	0f be       	out	0x3f, r0	; 63
     72a:	0f 90       	pop	r0
     72c:	1f 90       	pop	r1
     72e:	18 95       	reti

00000730 <__vector_12>:
bool MustLoadExtendedAddress;


/** ISR to manage timeouts whilst processing a V2Protocol command */
ISR(WDT_vect, ISR_BLOCK)
{
     730:	1f 92       	push	r1
     732:	0f 92       	push	r0
     734:	0f b6       	in	r0, 0x3f	; 63
     736:	0f 92       	push	r0
     738:	11 24       	eor	r1, r1
     73a:	8f 93       	push	r24
	TimeoutExpired = true;
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	8a bd       	out	0x2a, r24	; 42
	wdt_disable();
     740:	88 e1       	ldi	r24, 0x18	; 24
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	f8 94       	cli
     746:	80 93 60 00 	sts	0x0060, r24
     74a:	10 92 60 00 	sts	0x0060, r1
     74e:	0f be       	out	0x3f, r0	; 63
}
     750:	8f 91       	pop	r24
     752:	0f 90       	pop	r0
     754:	0f be       	out	0x3f, r0	; 63
     756:	0f 90       	pop	r0
     758:	1f 90       	pop	r1
     75a:	18 95       	reti

0000075c <V2Protocol_ProcessCommand>:
/** Master V2 Protocol packet handler, for received V2 Protocol packets from a connected host.
 *  This routine decodes the issued command and passes off the handling of the command to the
 *  appropriate function.
 */
void V2Protocol_ProcessCommand(void)
{
     75c:	ff 92       	push	r15
     75e:	0f 93       	push	r16
     760:	1f 93       	push	r17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     762:	10 91 f1 00 	lds	r17, 0x00F1
	uint8_t V2Command = Endpoint_Read_8();

	/* Start the watchdog with timeout interrupt enabled to manage the timeout */
	TimeoutExpired = false;
     766:	1a bc       	out	0x2a, r1	; 42
	wdt_enable(WDTO_1S);
     768:	8e e0       	ldi	r24, 0x0E	; 14
     76a:	28 e1       	ldi	r18, 0x18	; 24
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	f8 94       	cli
     772:	a8 95       	wdr
     774:	20 93 60 00 	sts	0x0060, r18
     778:	0f be       	out	0x3f, r0	; 63
     77a:	80 93 60 00 	sts	0x0060, r24
	WDTCSR |= (1 << WDIE);
     77e:	80 91 60 00 	lds	r24, 0x0060
     782:	80 64       	ori	r24, 0x40	; 64
     784:	80 93 60 00 	sts	0x0060, r24

	switch (V2Command)
     788:	16 30       	cpi	r17, 0x06	; 6
     78a:	09 f4       	brne	.+2      	; 0x78e <V2Protocol_ProcessCommand+0x32>
     78c:	5e c0       	rjmp	.+188    	; 0x84a <V2Protocol_ProcessCommand+0xee>
     78e:	17 30       	cpi	r17, 0x07	; 7
     790:	48 f4       	brcc	.+18     	; 0x7a4 <V2Protocol_ProcessCommand+0x48>
     792:	11 30       	cpi	r17, 0x01	; 1
     794:	89 f0       	breq	.+34     	; 0x7b8 <V2Protocol_ProcessCommand+0x5c>
     796:	11 30       	cpi	r17, 0x01	; 1
     798:	08 f4       	brcc	.+2      	; 0x79c <V2Protocol_ProcessCommand+0x40>
     79a:	99 c0       	rjmp	.+306    	; 0x8ce <V2Protocol_ProcessCommand+0x172>
     79c:	14 30       	cpi	r17, 0x04	; 4
     79e:	08 f0       	brcs	.+2      	; 0x7a2 <V2Protocol_ProcessCommand+0x46>
     7a0:	96 c0       	rjmp	.+300    	; 0x8ce <V2Protocol_ProcessCommand+0x172>
     7a2:	27 c0       	rjmp	.+78     	; 0x7f2 <V2Protocol_ProcessCommand+0x96>
     7a4:	10 35       	cpi	r17, 0x50	; 80
     7a6:	09 f4       	brne	.+2      	; 0x7aa <V2Protocol_ProcessCommand+0x4e>
     7a8:	8a c0       	rjmp	.+276    	; 0x8be <V2Protocol_ProcessCommand+0x162>
     7aa:	11 35       	cpi	r17, 0x51	; 81
     7ac:	09 f4       	brne	.+2      	; 0x7b0 <V2Protocol_ProcessCommand+0x54>
     7ae:	85 c0       	rjmp	.+266    	; 0x8ba <V2Protocol_ProcessCommand+0x15e>
     7b0:	1a 30       	cpi	r17, 0x0A	; 10
     7b2:	09 f0       	breq	.+2      	; 0x7b6 <V2Protocol_ProcessCommand+0x5a>
     7b4:	8c c0       	rjmp	.+280    	; 0x8ce <V2Protocol_ProcessCommand+0x172>
     7b6:	6f c0       	rjmp	.+222    	; 0x896 <V2Protocol_ProcessCommand+0x13a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     7b8:	80 91 e8 00 	lds	r24, 0x00E8
     7bc:	8b 77       	andi	r24, 0x7B	; 123
     7be:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     7c2:	82 e0       	ldi	r24, 0x02	; 2
     7c4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     7c8:	80 91 ec 00 	lds	r24, 0x00EC
     7cc:	80 68       	ori	r24, 0x80	; 128
     7ce:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     7d2:	10 93 f1 00 	sts	0x00F1, r17
     7d6:	10 92 f1 00 	sts	0x00F1, r1
     7da:	8a e0       	ldi	r24, 0x0A	; 10
     7dc:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	Endpoint_Write_8(CMD_SIGN_ON);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_Write_8(sizeof(PROGRAMMER_ID) - 1);
	Endpoint_Write_Stream_LE(PROGRAMMER_ID, (sizeof(PROGRAMMER_ID) - 1), NULL);
     7e0:	86 e1       	ldi	r24, 0x16	; 22
     7e2:	91 e0       	ldi	r25, 0x01	; 1
     7e4:	6a e0       	ldi	r22, 0x0A	; 10
     7e6:	70 e0       	ldi	r23, 0x00	; 0
     7e8:	40 e0       	ldi	r20, 0x00	; 0
     7ea:	50 e0       	ldi	r21, 0x00	; 0
     7ec:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <Endpoint_Write_Stream_LE>
     7f0:	87 c0       	rjmp	.+270    	; 0x900 <V2Protocol_ProcessCommand+0x1a4>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     7f2:	00 91 f1 00 	lds	r16, 0x00F1
static void V2Protocol_GetSetParam(const uint8_t V2Command)
{
	uint8_t ParamID = Endpoint_Read_8();
	uint8_t ParamValue;

	if (V2Command == CMD_SET_PARAMETER)
     7f6:	12 30       	cpi	r17, 0x02	; 2
     7f8:	11 f0       	breq	.+4      	; 0x7fe <V2Protocol_ProcessCommand+0xa2>
     7fa:	ff 24       	eor	r15, r15
     7fc:	02 c0       	rjmp	.+4      	; 0x802 <V2Protocol_ProcessCommand+0xa6>
     7fe:	f0 90 f1 00 	lds	r15, 0x00F1
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     802:	80 91 e8 00 	lds	r24, 0x00E8
     806:	8b 77       	andi	r24, 0x7B	; 123
     808:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     80c:	82 e0       	ldi	r24, 0x02	; 2
     80e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     812:	80 91 ec 00 	lds	r24, 0x00EC
     816:	80 68       	ori	r24, 0x80	; 128
     818:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     81c:	10 93 f1 00 	sts	0x00F1, r17
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	Endpoint_Write_8(V2Command);

	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
     820:	80 2f       	mov	r24, r16
     822:	b1 d0       	rcall	.+354    	; 0x986 <V2Params_GetParameterPrivileges>

	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
     824:	12 30       	cpi	r17, 0x02	; 2
     826:	41 f4       	brne	.+16     	; 0x838 <V2Protocol_ProcessCommand+0xdc>
     828:	81 ff       	sbrs	r24, 1
     82a:	0d c0       	rjmp	.+26     	; 0x846 <V2Protocol_ProcessCommand+0xea>
     82c:	10 92 f1 00 	sts	0x00F1, r1
	{
		Endpoint_Write_8(STATUS_CMD_OK);
		V2Params_SetParameterValue(ParamID, ParamValue);
     830:	80 2f       	mov	r24, r16
     832:	6f 2d       	mov	r22, r15
     834:	cc d0       	rcall	.+408    	; 0x9ce <V2Params_SetParameterValue>
     836:	64 c0       	rjmp	.+200    	; 0x900 <V2Protocol_ProcessCommand+0x1a4>
	}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
     838:	80 ff       	sbrs	r24, 0
     83a:	05 c0       	rjmp	.+10     	; 0x846 <V2Protocol_ProcessCommand+0xea>
     83c:	10 92 f1 00 	sts	0x00F1, r1
	{
		Endpoint_Write_8(STATUS_CMD_OK);
		Endpoint_Write_8(V2Params_GetParameterValue(ParamID));
     840:	80 2f       	mov	r24, r16
     842:	99 d0       	rcall	.+306    	; 0x976 <V2Params_GetParameterValue>
     844:	5b c0       	rjmp	.+182    	; 0x8fc <V2Protocol_ProcessCommand+0x1a0>
     846:	80 ec       	ldi	r24, 0xC0	; 192
     848:	59 c0       	rjmp	.+178    	; 0x8fc <V2Protocol_ProcessCommand+0x1a0>
 *  global storage variable for later use, and issuing LOAD EXTENDED ADDRESS commands
 *  to the attached device as required.
 */
static void V2Protocol_LoadAddress(void)
{
	Endpoint_Read_Stream_BE(&CurrentAddress, sizeof(CurrentAddress), NULL);
     84a:	85 e7       	ldi	r24, 0x75	; 117
     84c:	92 e0       	ldi	r25, 0x02	; 2
     84e:	64 e0       	ldi	r22, 0x04	; 4
     850:	70 e0       	ldi	r23, 0x00	; 0
     852:	40 e0       	ldi	r20, 0x00	; 0
     854:	50 e0       	ldi	r21, 0x00	; 0
     856:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <Endpoint_Read_Stream_BE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     85a:	80 91 e8 00 	lds	r24, 0x00E8
     85e:	8b 77       	andi	r24, 0x7B	; 123
     860:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     864:	82 e0       	ldi	r24, 0x02	; 2
     866:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     86a:	80 91 ec 00 	lds	r24, 0x00EC
     86e:	80 68       	ori	r24, 0x80	; 128
     870:	80 93 ec 00 	sts	0x00EC, r24

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (CurrentAddress & (1UL << 31))
     874:	80 91 75 02 	lds	r24, 0x0275
     878:	90 91 76 02 	lds	r25, 0x0276
     87c:	a0 91 77 02 	lds	r26, 0x0277
     880:	b0 91 78 02 	lds	r27, 0x0278
     884:	b7 ff       	sbrs	r27, 7
     886:	03 c0       	rjmp	.+6      	; 0x88e <V2Protocol_ProcessCommand+0x132>
	  MustLoadExtendedAddress = true;
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	80 93 74 02 	sts	0x0274, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     88e:	86 e0       	ldi	r24, 0x06	; 6
     890:	80 93 f1 00 	sts	0x00F1, r24
     894:	0f c0       	rjmp	.+30     	; 0x8b4 <V2Protocol_ProcessCommand+0x158>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     896:	80 91 e8 00 	lds	r24, 0x00E8
     89a:	8b 77       	andi	r24, 0x7B	; 123
     89c:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     8a0:	82 e0       	ldi	r24, 0x02	; 2
     8a2:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     8a6:	80 91 ec 00 	lds	r24, 0x00EC
     8aa:	80 68       	ori	r24, 0x80	; 128
     8ac:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     8b0:	10 93 f1 00 	sts	0x00F1, r17
     8b4:	10 92 f1 00 	sts	0x00F1, r1
     8b8:	23 c0       	rjmp	.+70     	; 0x900 <V2Protocol_ProcessCommand+0x1a4>
			ISPProtocol_SPIMulti();
			break;
#endif
#if defined(ENABLE_XPROG_PROTOCOL)
		case CMD_XPROG_SETMODE:
			XPROGProtocol_SetMode();
     8ba:	aa d0       	rcall	.+340    	; 0xa10 <XPROGProtocol_SetMode>
     8bc:	26 c0       	rjmp	.+76     	; 0x90a <V2Protocol_ProcessCommand+0x1ae>
			break;
		case CMD_XPROG:
			XPROGProtocol_Command();
     8be:	fa d1       	rcall	.+1012   	; 0xcb4 <XPROGProtocol_Command>
     8c0:	24 c0       	rjmp	.+72     	; 0x90a <V2Protocol_ProcessCommand+0x1ae>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     8c2:	80 91 e8 00 	lds	r24, 0x00E8
     8c6:	8b 77       	andi	r24, 0x7B	; 123
     8c8:	80 93 e8 00 	sts	0x00E8, r24
{
	/* Discard all incoming data */
	while (Endpoint_BytesInEndpoint() == AVRISP_DATA_EPSIZE)
	{
		Endpoint_ClearOUT();
		Endpoint_WaitUntilReady();
     8cc:	3b d7       	rcall	.+3702   	; 0x1744 <Endpoint_WaitUntilReady>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     8ce:	80 91 f2 00 	lds	r24, 0x00F2
     8d2:	90 91 f3 00 	lds	r25, 0x00F3
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
static void V2Protocol_UnknownCommand(const uint8_t V2Command)
{
	/* Discard all incoming data */
	while (Endpoint_BytesInEndpoint() == AVRISP_DATA_EPSIZE)
     8d6:	80 34       	cpi	r24, 0x40	; 64
     8d8:	91 05       	cpc	r25, r1
     8da:	99 f3       	breq	.-26     	; 0x8c2 <V2Protocol_ProcessCommand+0x166>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     8dc:	80 91 e8 00 	lds	r24, 0x00E8
     8e0:	8b 77       	andi	r24, 0x7B	; 123
     8e2:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     8e6:	82 e0       	ldi	r24, 0x02	; 2
     8e8:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     8ec:	80 91 ec 00 	lds	r24, 0x00EC
     8f0:	80 68       	ori	r24, 0x80	; 128
     8f2:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     8f6:	10 93 f1 00 	sts	0x00F1, r17
     8fa:	89 ec       	ldi	r24, 0xC9	; 201
     8fc:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     900:	80 91 e8 00 	lds	r24, 0x00E8
     904:	8e 77       	andi	r24, 0x7E	; 126
     906:	80 93 e8 00 	sts	0x00E8, r24
			V2Protocol_UnknownCommand(V2Command);
			break;
	}

	/* Disable the timeout management watchdog timer */
	wdt_disable();
     90a:	88 e1       	ldi	r24, 0x18	; 24
     90c:	0f b6       	in	r0, 0x3f	; 63
     90e:	f8 94       	cli
     910:	80 93 60 00 	sts	0x0060, r24
     914:	10 92 60 00 	sts	0x0060, r1
     918:	0f be       	out	0x3f, r0	; 63

	Endpoint_WaitUntilReady();
     91a:	14 d7       	rcall	.+3624   	; 0x1744 <Endpoint_WaitUntilReady>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     91c:	82 e0       	ldi	r24, 0x02	; 2
     91e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     922:	80 91 ec 00 	lds	r24, 0x00EC
     926:	8f 77       	andi	r24, 0x7F	; 127
     928:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_OUT_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_OUT);
}
     92c:	1f 91       	pop	r17
     92e:	0f 91       	pop	r16
     930:	ff 90       	pop	r15
     932:	08 95       	ret

00000934 <V2Protocol_Init>:
			 *  \param[in] Mode  Mask of ADC prescale and mode settings.
			 */
			static inline void ADC_Init(uint8_t Mode) ATTR_ALWAYS_INLINE;
			static inline void ADC_Init(uint8_t Mode)
			{
				ADCSRA = ((1 << ADEN) | Mode);
     934:	aa e7       	ldi	r26, 0x7A	; 122
     936:	b0 e0       	ldi	r27, 0x00	; 0
     938:	87 ea       	ldi	r24, 0xA7	; 167
     93a:	8c 93       	st	X, r24
			static inline void ADC_SetupChannel(const uint8_t ChannelIndex)
			{
				#if (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) || \
					 defined(__AVR_AT90USB1287__) || defined(__AVR_AT90USB647__) || \
					 defined(__AVR_ATmega32U6__))
				DDRF  &= ~(1 << ChannelIndex);
     93c:	82 98       	cbi	0x10, 2	; 16
				DIDR0 |=  (1 << ChannelIndex);
     93e:	ee e7       	ldi	r30, 0x7E	; 126
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	80 81       	ld	r24, Z
     944:	84 60       	ori	r24, 0x04	; 4
     946:	80 83       	st	Z, r24
			 *
			 *  \param[in] MUXMask  ADC channel mask, reference mask and adjustment mask.
			 */
			static inline void ADC_StartReading(const uint16_t MUXMask)
			{
				ADMUX = MUXMask;
     948:	82 e4       	ldi	r24, 0x42	; 66
     94a:	80 93 7c 00 	sts	0x007C, r24
				  ADCSRB |=  (1 << MUX5);
				else
				  ADCSRB &= ~(1 << MUX5);
				#endif

				ADCSRA |= (1 << ADSC);
     94e:	8c 91       	ld	r24, X
     950:	80 64       	ori	r24, 0x40	; 64
     952:	8c 93       	st	X, r24
	V2Params_LoadNonVolatileParamValues();
	
	#if defined(ENABLE_ISP_PROTOCOL)
	ISPTarget_ConfigureRescueClock();
	#endif
}
     954:	4f c0       	rjmp	.+158    	; 0x9f4 <V2Params_LoadNonVolatileParamValues>

00000956 <V2Params_GetParamFromTable>:
 *  \param[in] ParamID  Parameter ID to find in the table
 *
 *  \return Pointer to the associated parameter information from the parameter table if found, NULL otherwise
 */
static ParameterItem_t* V2Params_GetParamFromTable(const uint8_t ParamID)
{
     956:	98 2f       	mov	r25, r24
     958:	e1 e2       	ldi	r30, 0x21	; 33
     95a:	f1 e0       	ldi	r31, 0x01	; 1
	ParameterItem_t* CurrTableItem = ParameterTable;

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
	{
		if (ParamID == CurrTableItem->ParamID)
     95c:	80 81       	ld	r24, Z
     95e:	98 17       	cp	r25, r24
     960:	41 f0       	breq	.+16     	; 0x972 <V2Params_GetParamFromTable+0x1c>
static ParameterItem_t* V2Params_GetParamFromTable(const uint8_t ParamID)
{
	ParameterItem_t* CurrTableItem = ParameterTable;

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	ec 33       	cpi	r30, 0x3C	; 60
     966:	f8 07       	cpc	r31, r24
     968:	11 f0       	breq	.+4      	; 0x96e <V2Params_GetParamFromTable+0x18>
	{
		if (ParamID == CurrTableItem->ParamID)
		  return CurrTableItem;

		CurrTableItem++;
     96a:	33 96       	adiw	r30, 0x03	; 3
     96c:	f7 cf       	rjmp	.-18     	; 0x95c <V2Params_GetParamFromTable+0x6>
     96e:	e0 e0       	ldi	r30, 0x00	; 0
     970:	f0 e0       	ldi	r31, 0x00	; 0
	}

	return NULL;
}
     972:	cf 01       	movw	r24, r30
     974:	08 95       	ret

00000976 <V2Params_GetParameterValue>:
 *
 *  \return Current value of the parameter in the table, or 0 if not found
 */
uint8_t V2Params_GetParameterValue(const uint8_t ParamID)
{
	ParameterItem_t* ParamInfo = V2Params_GetParamFromTable(ParamID);
     976:	ef df       	rcall	.-34     	; 0x956 <V2Params_GetParamFromTable>
     978:	fc 01       	movw	r30, r24

	if (ParamInfo == NULL)
     97a:	00 97       	sbiw	r24, 0x00	; 0
     97c:	11 f4       	brne	.+4      	; 0x982 <V2Params_GetParameterValue+0xc>
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	08 95       	ret
	  return 0;

	return ParamInfo->ParamValue;
     982:	82 81       	ldd	r24, Z+2	; 0x02
}
     984:	08 95       	ret

00000986 <V2Params_GetParameterPrivileges>:
 *
 *  \return Privileges for the requested parameter, as a mask of PARAM_PRIV_* masks
 */
uint8_t V2Params_GetParameterPrivileges(const uint8_t ParamID)
{
	ParameterItem_t* ParamInfo = V2Params_GetParamFromTable(ParamID);
     986:	e7 df       	rcall	.-50     	; 0x956 <V2Params_GetParamFromTable>
     988:	fc 01       	movw	r30, r24

	if (ParamInfo == NULL)
     98a:	00 97       	sbiw	r24, 0x00	; 0
     98c:	11 f4       	brne	.+4      	; 0x992 <V2Params_GetParameterPrivileges+0xc>
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	08 95       	ret
	  return 0;

	return ParamInfo->ParamPrivileges;
     992:	81 81       	ldd	r24, Z+1	; 0x01
}
     994:	08 95       	ret

00000996 <V2Params_UpdateParamValues>:
 */
void V2Params_UpdateParamValues(void)
{
	#if (defined(ADC) && !defined(NO_VTARGET_DETECT))
	/* Update VTARGET parameter with the latest ADC conversion of VTARGET on supported AVR models */
	V2Params_GetParamFromTable(PARAM_VTARGET)->ParamValue = (((uint16_t)(VTARGET_REF_VOLTS * 10 * VTARGET_SCALE_FACTOR) * ADC_GetResult()) / 1024);
     996:	84 e9       	ldi	r24, 0x94	; 148
     998:	de df       	rcall	.-68     	; 0x956 <V2Params_GetParamFromTable>
			 *  \return The result of the last ADC conversion as an unsigned value.
			 */
			static inline uint16_t ADC_GetResult(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t ADC_GetResult(void)
			{
				ADCSRA |= (1 << ADIF);
     99a:	ea e7       	ldi	r30, 0x7A	; 122
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	20 81       	ld	r18, Z
     9a0:	20 61       	ori	r18, 0x10	; 16
     9a2:	20 83       	st	Z, r18
				return ADC;
     9a4:	20 91 78 00 	lds	r18, 0x0078
     9a8:	30 91 79 00 	lds	r19, 0x0079
     9ac:	a9 01       	movw	r20, r18
     9ae:	76 e0       	ldi	r23, 0x06	; 6
     9b0:	44 0f       	add	r20, r20
     9b2:	55 1f       	adc	r21, r21
     9b4:	7a 95       	dec	r23
     9b6:	e1 f7       	brne	.-8      	; 0x9b0 <V2Params_UpdateParamValues+0x1a>
     9b8:	22 0f       	add	r18, r18
     9ba:	33 1f       	adc	r19, r19
     9bc:	42 0f       	add	r20, r18
     9be:	53 1f       	adc	r21, r19
     9c0:	45 2f       	mov	r20, r21
     9c2:	55 27       	eor	r21, r21
     9c4:	46 95       	lsr	r20
     9c6:	46 95       	lsr	r20
     9c8:	fc 01       	movw	r30, r24
     9ca:	42 83       	std	Z+2, r20	; 0x02
	#endif
}
     9cc:	08 95       	ret

000009ce <V2Params_SetParameterValue>:
 *
 *  \return Pointer to the associated parameter information from the parameter table if found, NULL otherwise
 */
void V2Params_SetParameterValue(const uint8_t ParamID,
                                const uint8_t Value)
{
     9ce:	0f 93       	push	r16
     9d0:	1f 93       	push	r17
     9d2:	18 2f       	mov	r17, r24
     9d4:	06 2f       	mov	r16, r22
	ParameterItem_t* ParamInfo = V2Params_GetParamFromTable(ParamID);
     9d6:	bf df       	rcall	.-130    	; 0x956 <V2Params_GetParamFromTable>
     9d8:	fc 01       	movw	r30, r24

	if (ParamInfo == NULL)
     9da:	00 97       	sbiw	r24, 0x00	; 0
     9dc:	41 f0       	breq	.+16     	; 0x9ee <V2Params_SetParameterValue+0x20>
	  return;

	ParamInfo->ParamValue = Value;
     9de:	02 83       	std	Z+2, r16	; 0x02

	/* The target RESET line polarity is a non-volatile parameter, save to EEPROM when changed */
	if (ParamID == PARAM_RESET_POLARITY)
     9e0:	1e 39       	cpi	r17, 0x9E	; 158
     9e2:	29 f4       	brne	.+10     	; 0x9ee <V2Params_SetParameterValue+0x20>
	  eeprom_update_byte(&EEPROM_Rest_Polarity, Value);
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	60 2f       	mov	r22, r16
     9ea:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__eeupd_byte_usb1287>
}
     9ee:	1f 91       	pop	r17
     9f0:	0f 91       	pop	r16
     9f2:	08 95       	ret

000009f4 <V2Params_LoadNonVolatileParamValues>:
	};


/** Loads saved non-volatile parameter values from the EEPROM into the parameter table, as needed. */
void V2Params_LoadNonVolatileParamValues(void)
{
     9f4:	0f 93       	push	r16
     9f6:	1f 93       	push	r17
	/* Target RESET line polarity is a non-volatile value, retrieve current parameter value from EEPROM */
	V2Params_GetParamFromTable(PARAM_RESET_POLARITY)->ParamValue = eeprom_read_byte(&EEPROM_Rest_Polarity);
     9f8:	8e e9       	ldi	r24, 0x9E	; 158
     9fa:	ad df       	rcall	.-166    	; 0x956 <V2Params_GetParamFromTable>
     9fc:	8c 01       	movw	r16, r24
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	0e 94 cb 11 	call	0x2396	; 0x2396 <__eerd_byte_usb1287>
     a06:	f8 01       	movw	r30, r16
     a08:	82 83       	std	Z+2, r24	; 0x02
}
     a0a:	1f 91       	pop	r17
     a0c:	0f 91       	pop	r16
     a0e:	08 95       	ret

00000a10 <XPROGProtocol_SetMode>:

/** Handler for the CMD_XPROG_SETMODE command, which sets the programmer-to-target protocol used for PDI/TPI
 *  programming.
 */
void XPROGProtocol_SetMode(void)
{
     a10:	df 93       	push	r29
     a12:	cf 93       	push	r28
     a14:	0f 92       	push	r0
     a16:	cd b7       	in	r28, 0x3d	; 61
     a18:	de b7       	in	r29, 0x3e	; 62
	struct
	{
		uint8_t Protocol;
	} SetMode_XPROG_Params;

	Endpoint_Read_Stream_LE(&SetMode_XPROG_Params, sizeof(SetMode_XPROG_Params), NULL);
     a1a:	ce 01       	movw	r24, r28
     a1c:	01 96       	adiw	r24, 0x01	; 1
     a1e:	61 e0       	ldi	r22, 0x01	; 1
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	40 e0       	ldi	r20, 0x00	; 0
     a24:	50 e0       	ldi	r21, 0x00	; 0
     a26:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     a2a:	80 91 e8 00 	lds	r24, 0x00E8
     a2e:	8b 77       	andi	r24, 0x7B	; 123
     a30:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     a34:	82 e0       	ldi	r24, 0x02	; 2
     a36:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     a3a:	80 91 ec 00 	lds	r24, 0x00EC
     a3e:	80 68       	ori	r24, 0x80	; 128
     a40:	80 93 ec 00 	sts	0x00EC, r24

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	XPROG_SelectedProtocol = SetMode_XPROG_Params.Protocol;
     a44:	99 81       	ldd	r25, Y+1	; 0x01
     a46:	90 93 5d 02 	sts	0x025D, r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     a4a:	81 e5       	ldi	r24, 0x51	; 81
     a4c:	80 93 f1 00 	sts	0x00F1, r24

	Endpoint_Write_8(CMD_XPROG_SETMODE);
	Endpoint_Write_8((SetMode_XPROG_Params.Protocol != XPRG_PROTOCOL_JTAG) ? STATUS_CMD_OK : STATUS_CMD_FAILED);
     a50:	91 30       	cpi	r25, 0x01	; 1
     a52:	11 f4       	brne	.+4      	; 0xa58 <XPROGProtocol_SetMode+0x48>
     a54:	80 ec       	ldi	r24, 0xC0	; 192
     a56:	01 c0       	rjmp	.+2      	; 0xa5a <XPROGProtocol_SetMode+0x4a>
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a5e:	80 91 e8 00 	lds	r24, 0x00E8
     a62:	8e 77       	andi	r24, 0x7E	; 126
     a64:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();
}
     a68:	0f 90       	pop	r0
     a6a:	cf 91       	pop	r28
     a6c:	df 91       	pop	r29
     a6e:	08 95       	ret

00000a70 <XPROGProtocol_WriteMemory>:
	Endpoint_ClearIN();
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(void)
{
     a70:	af 92       	push	r10
     a72:	bf 92       	push	r11
     a74:	cf 92       	push	r12
     a76:	df 92       	push	r13
     a78:	ef 92       	push	r14
     a7a:	ff 92       	push	r15
     a7c:	0f 93       	push	r16
     a7e:	1f 93       	push	r17
     a80:	df 93       	push	r29
     a82:	cf 93       	push	r28
     a84:	cd b7       	in	r28, 0x3d	; 61
     a86:	de b7       	in	r29, 0x3e	; 62
     a88:	c8 50       	subi	r28, 0x08	; 8
     a8a:	d1 40       	sbci	r29, 0x01	; 1
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	f8 94       	cli
     a90:	de bf       	out	0x3e, r29	; 62
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	cd bf       	out	0x3d, r28	; 61
		uint32_t Address;
		uint16_t Length;
		uint8_t  ProgData[256];
	} WriteMemory_XPROG_Params;

	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params, (sizeof(WriteMemory_XPROG_Params) -
     a96:	ce 01       	movw	r24, r28
     a98:	01 96       	adiw	r24, 0x01	; 1
     a9a:	68 e0       	ldi	r22, 0x08	; 8
     a9c:	70 e0       	ldi	r23, 0x00	; 0
     a9e:	40 e0       	ldi	r20, 0x00	; 0
     aa0:	50 e0       	ldi	r21, 0x00	; 0
     aa2:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <Endpoint_Read_Stream_LE>
				{
					uint32_t DWord;
					uint8_t  Bytes[4];
				} Data;

				Data.DWord = DWord;
     aa6:	8b 81       	ldd	r24, Y+3	; 0x03
     aa8:	9c 81       	ldd	r25, Y+4	; 0x04
     aaa:	ad 81       	ldd	r26, Y+5	; 0x05
     aac:	be 81       	ldd	r27, Y+6	; 0x06

				Temp = Data.Bytes[0];
     aae:	28 2f       	mov	r18, r24
				Data.Bytes[0] = Data.Bytes[3];
     ab0:	8b 2f       	mov	r24, r27
				Data.Bytes[3] = Temp;
     ab2:	b2 2f       	mov	r27, r18

				Temp = Data.Bytes[1];
     ab4:	29 2f       	mov	r18, r25
				Data.Bytes[1] = Data.Bytes[2];
     ab6:	9a 2f       	mov	r25, r26
				Data.Bytes[2] = Temp;
     ab8:	a2 2f       	mov	r26, r18
	                                                    sizeof(WriteMemory_XPROG_Params).ProgData), NULL);
	WriteMemory_XPROG_Params.Address = SwapEndian_32(WriteMemory_XPROG_Params.Address);
     aba:	8b 83       	std	Y+3, r24	; 0x03
     abc:	9c 83       	std	Y+4, r25	; 0x04
     abe:	ad 83       	std	Y+5, r26	; 0x05
     ac0:	be 83       	std	Y+6, r27	; 0x06
				{
					uint16_t Word;
					uint8_t  Bytes[2];
				} Data;

				Data.Word = Word;
     ac2:	6f 81       	ldd	r22, Y+7	; 0x07
     ac4:	78 85       	ldd	r23, Y+8	; 0x08

				Temp = Data.Bytes[0];
     ac6:	86 2f       	mov	r24, r22
				Data.Bytes[0] = Data.Bytes[1];
     ac8:	67 2f       	mov	r22, r23
				Data.Bytes[1] = Temp;
     aca:	78 2f       	mov	r23, r24
	WriteMemory_XPROG_Params.Length  = SwapEndian_16(WriteMemory_XPROG_Params.Length);
     acc:	78 87       	std	Y+8, r23	; 0x08
     ace:	6f 83       	std	Y+7, r22	; 0x07
	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length, NULL);
     ad0:	ce 01       	movw	r24, r28
     ad2:	09 96       	adiw	r24, 0x09	; 9
     ad4:	40 e0       	ldi	r20, 0x00	; 0
     ad6:	50 e0       	ldi	r21, 0x00	; 0
     ad8:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <Endpoint_Read_Stream_LE>

	// The driver will terminate transfers that are a round multiple of the endpoint bank in size with a ZLP, need
	// to catch this and discard it before continuing on with packet processing to prevent communication issues
	if (((sizeof(uint8_t) + sizeof(WriteMemory_XPROG_Params) - sizeof(WriteMemory_XPROG_Params.ProgData)) +
     adc:	8f 81       	ldd	r24, Y+7	; 0x07
     ade:	98 85       	ldd	r25, Y+8	; 0x08
     ae0:	09 96       	adiw	r24, 0x09	; 9
     ae2:	8f 73       	andi	r24, 0x3F	; 63
     ae4:	90 70       	andi	r25, 0x00	; 0
     ae6:	89 2b       	or	r24, r25
     ae8:	31 f4       	brne	.+12     	; 0xaf6 <XPROGProtocol_WriteMemory+0x86>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     aea:	80 91 e8 00 	lds	r24, 0x00E8
     aee:	8b 77       	andi	r24, 0x7B	; 123
     af0:	80 93 e8 00 	sts	0x00E8, r24
	    WriteMemory_XPROG_Params.Length) % AVRISP_DATA_EPSIZE == 0)
	{
		Endpoint_ClearOUT();
		Endpoint_WaitUntilReady();
     af4:	27 d6       	rcall	.+3150   	; 0x1744 <Endpoint_WaitUntilReady>
     af6:	80 91 e8 00 	lds	r24, 0x00E8
     afa:	8b 77       	andi	r24, 0x7B	; 123
     afc:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     b00:	82 e0       	ldi	r24, 0x02	; 2
     b02:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     b06:	80 91 ec 00 	lds	r24, 0x00EC
     b0a:	80 68       	ori	r24, 0x80	; 128
     b0c:	80 93 ec 00 	sts	0x00EC, r24
	
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
     b10:	80 91 5d 02 	lds	r24, 0x025D
     b14:	88 23       	and	r24, r24
     b16:	79 f5       	brne	.+94     	; 0xb76 <XPROGProtocol_WriteMemory+0x106>
		uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
		uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
		uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
		bool    PagedMemory      = true;

		switch (WriteMemory_XPROG_Params.MemoryType)
     b18:	89 81       	ldd	r24, Y+1	; 0x01
     b1a:	83 30       	cpi	r24, 0x03	; 3
     b1c:	a9 f0       	breq	.+42     	; 0xb48 <XPROGProtocol_WriteMemory+0xd8>
     b1e:	84 30       	cpi	r24, 0x04	; 4
     b20:	28 f4       	brcc	.+10     	; 0xb2c <XPROGProtocol_WriteMemory+0xbc>
     b22:	81 30       	cpi	r24, 0x01	; 1
     b24:	69 f0       	breq	.+26     	; 0xb40 <XPROGProtocol_WriteMemory+0xd0>
     b26:	82 30       	cpi	r24, 0x02	; 2
     b28:	a9 f4       	brne	.+42     	; 0xb54 <XPROGProtocol_WriteMemory+0xe4>
     b2a:	0c c0       	rjmp	.+24     	; 0xb44 <XPROGProtocol_WriteMemory+0xd4>
     b2c:	85 30       	cpi	r24, 0x05	; 5
     b2e:	31 f0       	breq	.+12     	; 0xb3c <XPROGProtocol_WriteMemory+0xcc>
     b30:	85 30       	cpi	r24, 0x05	; 5
     b32:	08 f4       	brcc	.+2      	; 0xb36 <XPROGProtocol_WriteMemory+0xc6>
     b34:	4c c0       	rjmp	.+152    	; 0xbce <XPROGProtocol_WriteMemory+0x15e>
     b36:	86 30       	cpi	r24, 0x06	; 6
     b38:	69 f4       	brne	.+26     	; 0xb54 <XPROGProtocol_WriteMemory+0xe4>
     b3a:	0a c0       	rjmp	.+20     	; 0xb50 <XPROGProtocol_WriteMemory+0xe0>
     b3c:	88 e0       	ldi	r24, 0x08	; 8
     b3e:	48 c0       	rjmp	.+144    	; 0xbd0 <XPROGProtocol_WriteMemory+0x160>
     b40:	44 e2       	ldi	r20, 0x24	; 36
     b42:	09 c0       	rjmp	.+18     	; 0xb56 <XPROGProtocol_WriteMemory+0xe6>
     b44:	4c e2       	ldi	r20, 0x2C	; 44
     b46:	07 c0       	rjmp	.+14     	; 0xb56 <XPROGProtocol_WriteMemory+0xe6>
			case XPRG_MEM_TYPE_APPL:
				WriteCommand     = XMEGA_NVM_CMD_WRITEAPPSECPAGE;
				break;
			case XPRG_MEM_TYPE_BOOT:
				WriteCommand     = XMEGA_NVM_CMD_WRITEBOOTSECPAGE;
				break;
     b48:	45 e3       	ldi	r20, 0x35	; 53
     b4a:	83 e3       	ldi	r24, 0x33	; 51
     b4c:	66 e3       	ldi	r22, 0x36	; 54
     b4e:	05 c0       	rjmp	.+10     	; 0xb5a <XPROGProtocol_WriteMemory+0xea>
			case XPRG_MEM_TYPE_EEPROM:
				WriteCommand     = XMEGA_NVM_CMD_ERASEWRITEEEPROMPAGE;
				WriteBuffCommand = XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF;
				EraseBuffCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF;
				break;
     b50:	4a e1       	ldi	r20, 0x1A	; 26
     b52:	01 c0       	rjmp	.+2      	; 0xb56 <XPROGProtocol_WriteMemory+0xe6>
			case XPRG_MEM_TYPE_USERSIG:
				WriteCommand     = XMEGA_NVM_CMD_WRITEUSERSIG;
				break;
     b54:	4e e2       	ldi	r20, 0x2E	; 46
     b56:	83 e2       	ldi	r24, 0x23	; 35
     b58:	66 e2       	ldi	r22, 0x26	; 38
				PagedMemory      = false;
				break;
		}

		/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
		if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
     b5a:	eb 80       	ldd	r14, Y+3	; 0x03
     b5c:	fc 80       	ldd	r15, Y+4	; 0x04
     b5e:	0d 81       	ldd	r16, Y+5	; 0x05
     b60:	1e 81       	ldd	r17, Y+6	; 0x06
     b62:	af 80       	ldd	r10, Y+7	; 0x07
     b64:	b8 84       	ldd	r11, Y+8	; 0x08
     b66:	2a 81       	ldd	r18, Y+2	; 0x02
     b68:	99 e0       	ldi	r25, 0x09	; 9
     b6a:	c9 2e       	mov	r12, r25
     b6c:	d1 2c       	mov	r13, r1
     b6e:	cc 0e       	add	r12, r28
     b70:	dd 1e       	adc	r13, r29
     b72:	f7 d2       	rcall	.+1518   	; 0x1162 <XMEGANVM_WritePageMemory>
     b74:	08 c0       	rjmp	.+16     	; 0xb86 <XPROGProtocol_WriteMemory+0x116>
		}
	}
	else
	{
		/* Send write command to the TPI device, indicate timeout if occurred */
		if (!(TINYNVM_WriteMemory(WriteMemory_XPROG_Params.Address, WriteMemory_XPROG_Params.ProgData,
     b76:	4f 81       	ldd	r20, Y+7	; 0x07
     b78:	58 85       	ldd	r21, Y+8	; 0x08
     b7a:	8b 81       	ldd	r24, Y+3	; 0x03
     b7c:	9c 81       	ldd	r25, Y+4	; 0x04
     b7e:	be 01       	movw	r22, r28
     b80:	67 5f       	subi	r22, 0xF7	; 247
     b82:	7f 4f       	sbci	r23, 0xFF	; 255
     b84:	f9 d4       	rcall	.+2546   	; 0x1578 <TINYNVM_WriteMemory>
     b86:	88 23       	and	r24, r24
     b88:	11 f0       	breq	.+4      	; 0xb8e <XPROGProtocol_WriteMemory+0x11e>
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	01 c0       	rjmp	.+2      	; 0xb90 <XPROGProtocol_WriteMemory+0x120>
     b8e:	93 e0       	ldi	r25, 0x03	; 3
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b90:	80 e5       	ldi	r24, 0x50	; 80
     b92:	80 93 f1 00 	sts	0x00F1, r24
     b96:	84 e0       	ldi	r24, 0x04	; 4
     b98:	80 93 f1 00 	sts	0x00F1, r24
     b9c:	90 93 f1 00 	sts	0x00F1, r25
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ba0:	80 91 e8 00 	lds	r24, 0x00E8
     ba4:	8e 77       	andi	r24, 0x7E	; 126
     ba6:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPRG_CMD_WRITE_MEM);
	Endpoint_Write_8(ReturnStatus);
	Endpoint_ClearIN();
}
     baa:	c8 5f       	subi	r28, 0xF8	; 248
     bac:	de 4f       	sbci	r29, 0xFE	; 254
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	f8 94       	cli
     bb2:	de bf       	out	0x3e, r29	; 62
     bb4:	0f be       	out	0x3f, r0	; 63
     bb6:	cd bf       	out	0x3d, r28	; 61
     bb8:	cf 91       	pop	r28
     bba:	df 91       	pop	r29
     bbc:	1f 91       	pop	r17
     bbe:	0f 91       	pop	r16
     bc0:	ff 90       	pop	r15
     bc2:	ef 90       	pop	r14
     bc4:	df 90       	pop	r13
     bc6:	cf 90       	pop	r12
     bc8:	bf 90       	pop	r11
     bca:	af 90       	pop	r10
     bcc:	08 95       	ret
     bce:	8c e4       	ldi	r24, 0x4C	; 76
				PagedMemory      = false;
				break;
		}

		/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
		if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
     bd0:	4b 81       	ldd	r20, Y+3	; 0x03
     bd2:	5c 81       	ldd	r21, Y+4	; 0x04
     bd4:	6d 81       	ldd	r22, Y+5	; 0x05
     bd6:	7e 81       	ldd	r23, Y+6	; 0x06
     bd8:	29 85       	ldd	r18, Y+9	; 0x09
     bda:	2a d3       	rcall	.+1620   	; 0x1230 <XMEGANVM_WriteByteMemory>
     bdc:	d4 cf       	rjmp	.-88     	; 0xb86 <XPROGProtocol_WriteMemory+0x116>

00000bde <XPROGProtocol_ReadMemory>:

/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(void)
{
     bde:	df 93       	push	r29
     be0:	cf 93       	push	r28
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
     be6:	c7 50       	subi	r28, 0x07	; 7
     be8:	d1 40       	sbci	r29, 0x01	; 1
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	f8 94       	cli
     bee:	de bf       	out	0x3e, r29	; 62
     bf0:	0f be       	out	0x3f, r0	; 63
     bf2:	cd bf       	out	0x3d, r28	; 61
		uint8_t  MemoryType;
		uint32_t Address;
		uint16_t Length;
	} ReadMemory_XPROG_Params;

	Endpoint_Read_Stream_LE(&ReadMemory_XPROG_Params, sizeof(ReadMemory_XPROG_Params), NULL);
     bf4:	ce 01       	movw	r24, r28
     bf6:	01 96       	adiw	r24, 0x01	; 1
     bf8:	67 e0       	ldi	r22, 0x07	; 7
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	40 e0       	ldi	r20, 0x00	; 0
     bfe:	50 e0       	ldi	r21, 0x00	; 0
     c00:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <Endpoint_Read_Stream_LE>
				{
					uint32_t DWord;
					uint8_t  Bytes[4];
				} Data;

				Data.DWord = DWord;
     c04:	2a 81       	ldd	r18, Y+2	; 0x02
     c06:	3b 81       	ldd	r19, Y+3	; 0x03
     c08:	4c 81       	ldd	r20, Y+4	; 0x04
     c0a:	5d 81       	ldd	r21, Y+5	; 0x05

				Temp = Data.Bytes[0];
     c0c:	82 2f       	mov	r24, r18
				Data.Bytes[0] = Data.Bytes[3];
     c0e:	25 2f       	mov	r18, r21
				Data.Bytes[3] = Temp;
     c10:	58 2f       	mov	r21, r24

				Temp = Data.Bytes[1];
     c12:	83 2f       	mov	r24, r19
				Data.Bytes[1] = Data.Bytes[2];
     c14:	34 2f       	mov	r19, r20
				Data.Bytes[2] = Temp;
     c16:	48 2f       	mov	r20, r24
	ReadMemory_XPROG_Params.Address = SwapEndian_32(ReadMemory_XPROG_Params.Address);
     c18:	2a 83       	std	Y+2, r18	; 0x02
     c1a:	3b 83       	std	Y+3, r19	; 0x03
     c1c:	4c 83       	std	Y+4, r20	; 0x04
     c1e:	5d 83       	std	Y+5, r21	; 0x05
				{
					uint16_t Word;
					uint8_t  Bytes[2];
				} Data;

				Data.Word = Word;
     c20:	ee 81       	ldd	r30, Y+6	; 0x06
     c22:	ff 81       	ldd	r31, Y+7	; 0x07

				Temp = Data.Bytes[0];
     c24:	8e 2f       	mov	r24, r30
				Data.Bytes[0] = Data.Bytes[1];
     c26:	ef 2f       	mov	r30, r31
				Data.Bytes[1] = Temp;
     c28:	f8 2f       	mov	r31, r24
	ReadMemory_XPROG_Params.Length  = SwapEndian_16(ReadMemory_XPROG_Params.Length);
     c2a:	ff 83       	std	Y+7, r31	; 0x07
     c2c:	ee 83       	std	Y+6, r30	; 0x06
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c2e:	80 91 e8 00 	lds	r24, 0x00E8
     c32:	8b 77       	andi	r24, 0x7B	; 123
     c34:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     c38:	82 e0       	ldi	r24, 0x02	; 2
     c3a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     c3e:	80 91 ec 00 	lds	r24, 0x00EC
     c42:	80 68       	ori	r24, 0x80	; 128
     c44:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ReadBuffer[256];

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
     c48:	80 91 5d 02 	lds	r24, 0x025D
     c4c:	de 01       	movw	r26, r28
     c4e:	18 96       	adiw	r26, 0x08	; 8
     c50:	88 23       	and	r24, r24
     c52:	31 f4       	brne	.+12     	; 0xc60 <XPROGProtocol_ReadMemory+0x82>
	{
		/* Read the PDI target's memory, indicate timeout if occurred */
		if (!(XMEGANVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Length)))
     c54:	ca 01       	movw	r24, r20
     c56:	b9 01       	movw	r22, r18
     c58:	ad 01       	movw	r20, r26
     c5a:	9f 01       	movw	r18, r30
     c5c:	0b d3       	rcall	.+1558   	; 0x1274 <XMEGANVM_ReadMemory>
     c5e:	04 c0       	rjmp	.+8      	; 0xc68 <XPROGProtocol_ReadMemory+0x8a>
		  ReturnStatus = XPRG_ERR_TIMEOUT;
	}
	else
	{
		/* Read the TPI target's memory, indicate timeout if occurred */
		if (!(TINYNVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Length)))
     c60:	c9 01       	movw	r24, r18
     c62:	bd 01       	movw	r22, r26
     c64:	af 01       	movw	r20, r30
     c66:	c0 d4       	rcall	.+2432   	; 0x15e8 <TINYNVM_ReadMemory>
     c68:	88 23       	and	r24, r24
     c6a:	11 f4       	brne	.+4      	; 0xc70 <XPROGProtocol_ReadMemory+0x92>
     c6c:	93 e0       	ldi	r25, 0x03	; 3
     c6e:	01 c0       	rjmp	.+2      	; 0xc72 <XPROGProtocol_ReadMemory+0x94>
     c70:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c72:	80 e5       	ldi	r24, 0x50	; 80
     c74:	80 93 f1 00 	sts	0x00F1, r24
     c78:	85 e0       	ldi	r24, 0x05	; 5
     c7a:	80 93 f1 00 	sts	0x00F1, r24
     c7e:	90 93 f1 00 	sts	0x00F1, r25

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPRG_CMD_READ_MEM);
	Endpoint_Write_8(ReturnStatus);

	if (ReturnStatus == XPRG_ERR_OK)
     c82:	99 23       	and	r25, r25
     c84:	41 f4       	brne	.+16     	; 0xc96 <XPROGProtocol_ReadMemory+0xb8>
	  Endpoint_Write_Stream_LE(ReadBuffer, ReadMemory_XPROG_Params.Length, NULL);
     c86:	6e 81       	ldd	r22, Y+6	; 0x06
     c88:	7f 81       	ldd	r23, Y+7	; 0x07
     c8a:	ce 01       	movw	r24, r28
     c8c:	08 96       	adiw	r24, 0x08	; 8
     c8e:	40 e0       	ldi	r20, 0x00	; 0
     c90:	50 e0       	ldi	r21, 0x00	; 0
     c92:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c96:	80 91 e8 00 	lds	r24, 0x00E8
     c9a:	8e 77       	andi	r24, 0x7E	; 126
     c9c:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_ClearIN();
}
     ca0:	c9 5f       	subi	r28, 0xF9	; 249
     ca2:	de 4f       	sbci	r29, 0xFE	; 254
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <XPROGProtocol_Command>:

/** Handler for the CMD_XPROG command, which wraps up XPROG commands in a V2 wrapper which need to be
 *  removed and processed so that the underlying XPROG command can be handled.
 */
void XPROGProtocol_Command(void)
{
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
     cbc:	29 97       	sbiw	r28, 0x09	; 9
     cbe:	0f b6       	in	r0, 0x3f	; 63
     cc0:	f8 94       	cli
     cc2:	de bf       	out	0x3e, r29	; 62
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     cc8:	90 91 f1 00 	lds	r25, 0x00F1
	uint8_t XPROGCommand = Endpoint_Read_8();

	switch (XPROGCommand)
     ccc:	94 30       	cpi	r25, 0x04	; 4
     cce:	09 f4       	brne	.+2      	; 0xcd2 <XPROGProtocol_Command+0x1e>
     cd0:	b1 c0       	rjmp	.+354    	; 0xe34 <XPROGProtocol_Command+0x180>
     cd2:	95 30       	cpi	r25, 0x05	; 5
     cd4:	48 f4       	brcc	.+18     	; 0xce8 <XPROGProtocol_Command+0x34>
     cd6:	92 30       	cpi	r25, 0x02	; 2
     cd8:	91 f1       	breq	.+100    	; 0xd3e <XPROGProtocol_Command+0x8a>
     cda:	93 30       	cpi	r25, 0x03	; 3
     cdc:	08 f0       	brcs	.+2      	; 0xce0 <XPROGProtocol_Command+0x2c>
     cde:	4b c0       	rjmp	.+150    	; 0xd76 <XPROGProtocol_Command+0xc2>
     ce0:	91 30       	cpi	r25, 0x01	; 1
     ce2:	09 f0       	breq	.+2      	; 0xce6 <XPROGProtocol_Command+0x32>
     ce4:	46 c1       	rjmp	.+652    	; 0xf72 <XPROGProtocol_Command+0x2be>
     ce6:	0a c0       	rjmp	.+20     	; 0xcfc <XPROGProtocol_Command+0x48>
     ce8:	96 30       	cpi	r25, 0x06	; 6
     cea:	09 f4       	brne	.+2      	; 0xcee <XPROGProtocol_Command+0x3a>
     cec:	a7 c0       	rjmp	.+334    	; 0xe3c <XPROGProtocol_Command+0x188>
     cee:	96 30       	cpi	r25, 0x06	; 6
     cf0:	08 f4       	brcc	.+2      	; 0xcf4 <XPROGProtocol_Command+0x40>
     cf2:	a2 c0       	rjmp	.+324    	; 0xe38 <XPROGProtocol_Command+0x184>
     cf4:	97 30       	cpi	r25, 0x07	; 7
     cf6:	09 f0       	breq	.+2      	; 0xcfa <XPROGProtocol_Command+0x46>
     cf8:	3c c1       	rjmp	.+632    	; 0xf72 <XPROGProtocol_Command+0x2be>
     cfa:	e8 c0       	rjmp	.+464    	; 0xecc <XPROGProtocol_Command+0x218>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     cfc:	80 91 e8 00 	lds	r24, 0x00E8
     d00:	8b 77       	andi	r24, 0x7B	; 123
     d02:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     d06:	82 e0       	ldi	r24, 0x02	; 2
     d08:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     d0c:	80 91 ec 00 	lds	r24, 0x00EC
     d10:	80 68       	ori	r24, 0x80	; 128
     d12:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	bool NVMBusEnabled = false;

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
     d16:	80 91 5d 02 	lds	r24, 0x025D
     d1a:	88 23       	and	r24, r24
     d1c:	11 f4       	brne	.+4      	; 0xd22 <XPROGProtocol_Command+0x6e>
	  NVMBusEnabled = XMEGANVM_EnablePDI();
     d1e:	a2 d3       	rcall	.+1860   	; 0x1464 <XMEGANVM_EnablePDI>
     d20:	05 c0       	rjmp	.+10     	; 0xd2c <XPROGProtocol_Command+0x78>
	else if (XPROG_SelectedProtocol == XPRG_PROTOCOL_TPI)
     d22:	82 30       	cpi	r24, 0x02	; 2
     d24:	11 f0       	breq	.+4      	; 0xd2a <XPROGProtocol_Command+0x76>
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <XPROGProtocol_Command+0x7a>
	  NVMBusEnabled = TINYNVM_EnableTPI();
     d2a:	a0 d4       	rcall	.+2368   	; 0x166c <TINYNVM_EnableTPI>
     d2c:	98 2f       	mov	r25, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d2e:	80 e5       	ldi	r24, 0x50	; 80
     d30:	80 93 f1 00 	sts	0x00F1, r24
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	80 93 f1 00 	sts	0x00F1, r24
     d3a:	89 27       	eor	r24, r25
     d3c:	c4 c0       	rjmp	.+392    	; 0xec6 <XPROGProtocol_Command+0x212>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d3e:	80 91 e8 00 	lds	r24, 0x00E8
     d42:	8b 77       	andi	r24, 0x7B	; 123
     d44:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     d48:	90 93 e9 00 	sts	0x00E9, r25
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     d4c:	80 91 ec 00 	lds	r24, 0x00EC
     d50:	80 68       	ori	r24, 0x80	; 128
     d52:	80 93 ec 00 	sts	0x00EC, r24
{
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
     d56:	80 91 5d 02 	lds	r24, 0x025D
     d5a:	88 23       	and	r24, r24
     d5c:	11 f4       	brne	.+4      	; 0xd62 <XPROGProtocol_Command+0xae>
	  XMEGANVM_DisablePDI();
     d5e:	78 d3       	rcall	.+1776   	; 0x1450 <XMEGANVM_DisablePDI>
     d60:	01 c0       	rjmp	.+2      	; 0xd64 <XPROGProtocol_Command+0xb0>
	else
	  TINYNVM_DisableTPI();
     d62:	7e d4       	rcall	.+2300   	; 0x1660 <TINYNVM_DisableTPI>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d64:	80 e5       	ldi	r24, 0x50	; 80
     d66:	80 93 f1 00 	sts	0x00F1, r24
     d6a:	82 e0       	ldi	r24, 0x02	; 2
     d6c:	80 93 f1 00 	sts	0x00F1, r24
     d70:	10 92 f1 00 	sts	0x00F1, r1
     d74:	f9 c0       	rjmp	.+498    	; 0xf68 <XPROGProtocol_Command+0x2b4>
	{
		uint8_t  MemoryType;
		uint32_t Address;
	} Erase_XPROG_Params;

	Endpoint_Read_Stream_LE(&Erase_XPROG_Params, sizeof(Erase_XPROG_Params), NULL);
     d76:	ce 01       	movw	r24, r28
     d78:	05 96       	adiw	r24, 0x05	; 5
     d7a:	65 e0       	ldi	r22, 0x05	; 5
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	40 e0       	ldi	r20, 0x00	; 0
     d80:	50 e0       	ldi	r21, 0x00	; 0
     d82:	7c d7       	rcall	.+3832   	; 0x1c7c <Endpoint_Read_Stream_LE>
				{
					uint32_t DWord;
					uint8_t  Bytes[4];
				} Data;

				Data.DWord = DWord;
     d84:	4e 81       	ldd	r20, Y+6	; 0x06
     d86:	5f 81       	ldd	r21, Y+7	; 0x07
     d88:	68 85       	ldd	r22, Y+8	; 0x08
     d8a:	79 85       	ldd	r23, Y+9	; 0x09

				Temp = Data.Bytes[0];
     d8c:	84 2f       	mov	r24, r20
				Data.Bytes[0] = Data.Bytes[3];
     d8e:	47 2f       	mov	r20, r23
				Data.Bytes[3] = Temp;
     d90:	78 2f       	mov	r23, r24

				Temp = Data.Bytes[1];
     d92:	85 2f       	mov	r24, r21
				Data.Bytes[1] = Data.Bytes[2];
     d94:	56 2f       	mov	r21, r22
				Data.Bytes[2] = Temp;
     d96:	68 2f       	mov	r22, r24
	Erase_XPROG_Params.Address = SwapEndian_32(Erase_XPROG_Params.Address);
     d98:	4e 83       	std	Y+6, r20	; 0x06
     d9a:	5f 83       	std	Y+7, r21	; 0x07
     d9c:	68 87       	std	Y+8, r22	; 0x08
     d9e:	79 87       	std	Y+9, r23	; 0x09
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     da0:	80 91 e8 00 	lds	r24, 0x00E8
     da4:	8b 77       	andi	r24, 0x7B	; 123
     da6:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     daa:	82 e0       	ldi	r24, 0x02	; 2
     dac:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     db0:	80 91 ec 00 	lds	r24, 0x00EC
     db4:	80 68       	ori	r24, 0x80	; 128
     db6:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t EraseCommand;

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
     dba:	80 91 5d 02 	lds	r24, 0x025D
     dbe:	9d 81       	ldd	r25, Y+5	; 0x05
     dc0:	88 23       	and	r24, r24
     dc2:	39 f5       	brne	.+78     	; 0xe12 <XPROGProtocol_Command+0x15e>
	{
		/* Determine which NVM command to send to the device depending on the memory to erase */
		switch (Erase_XPROG_Params.MemoryType)
     dc4:	94 30       	cpi	r25, 0x04	; 4
     dc6:	c1 f0       	breq	.+48     	; 0xdf8 <XPROGProtocol_Command+0x144>
     dc8:	95 30       	cpi	r25, 0x05	; 5
     dca:	38 f4       	brcc	.+14     	; 0xdda <XPROGProtocol_Command+0x126>
     dcc:	92 30       	cpi	r25, 0x02	; 2
     dce:	71 f0       	breq	.+28     	; 0xdec <XPROGProtocol_Command+0x138>
     dd0:	93 30       	cpi	r25, 0x03	; 3
     dd2:	80 f4       	brcc	.+32     	; 0xdf4 <XPROGProtocol_Command+0x140>
     dd4:	91 30       	cpi	r25, 0x01	; 1
     dd6:	d1 f4       	brne	.+52     	; 0xe0c <XPROGProtocol_Command+0x158>
     dd8:	0b c0       	rjmp	.+22     	; 0xdf0 <XPROGProtocol_Command+0x13c>
     dda:	96 30       	cpi	r25, 0x06	; 6
     ddc:	89 f0       	breq	.+34     	; 0xe00 <XPROGProtocol_Command+0x14c>
     dde:	96 30       	cpi	r25, 0x06	; 6
     de0:	68 f0       	brcs	.+26     	; 0xdfc <XPROGProtocol_Command+0x148>
     de2:	97 30       	cpi	r25, 0x07	; 7
     de4:	79 f0       	breq	.+30     	; 0xe04 <XPROGProtocol_Command+0x150>
     de6:	98 30       	cpi	r25, 0x08	; 8
     de8:	89 f4       	brne	.+34     	; 0xe0c <XPROGProtocol_Command+0x158>
     dea:	0e c0       	rjmp	.+28     	; 0xe08 <XPROGProtocol_Command+0x154>
     dec:	80 e2       	ldi	r24, 0x20	; 32
     dee:	0f c0       	rjmp	.+30     	; 0xe0e <XPROGProtocol_Command+0x15a>
     df0:	80 e4       	ldi	r24, 0x40	; 64
     df2:	0d c0       	rjmp	.+26     	; 0xe0e <XPROGProtocol_Command+0x15a>
     df4:	88 e6       	ldi	r24, 0x68	; 104
     df6:	0b c0       	rjmp	.+22     	; 0xe0e <XPROGProtocol_Command+0x15a>
     df8:	80 e3       	ldi	r24, 0x30	; 48
     dfa:	09 c0       	rjmp	.+18     	; 0xe0e <XPROGProtocol_Command+0x15a>
     dfc:	82 e2       	ldi	r24, 0x22	; 34
     dfe:	07 c0       	rjmp	.+14     	; 0xe0e <XPROGProtocol_Command+0x15a>
     e00:	8a e2       	ldi	r24, 0x2A	; 42
     e02:	05 c0       	rjmp	.+10     	; 0xe0e <XPROGProtocol_Command+0x15a>
     e04:	82 e3       	ldi	r24, 0x32	; 50
     e06:	03 c0       	rjmp	.+6      	; 0xe0e <XPROGProtocol_Command+0x15a>
     e08:	88 e1       	ldi	r24, 0x18	; 24
     e0a:	01 c0       	rjmp	.+2      	; 0xe0e <XPROGProtocol_Command+0x15a>
     e0c:	80 e0       	ldi	r24, 0x00	; 0
				EraseCommand = XMEGA_NVM_CMD_NOOP;
				break;
		}

		/* Erase the target memory, indicate timeout if occurred */
		if (!(XMEGANVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
     e0e:	7d d2       	rcall	.+1274   	; 0x130a <XMEGANVM_EraseMemory>
     e10:	07 c0       	rjmp	.+14     	; 0xe20 <XPROGProtocol_Command+0x16c>
		  ReturnStatus = XPRG_ERR_TIMEOUT;
	}
	else
	{
		if (Erase_XPROG_Params.MemoryType == XPRG_ERASE_CHIP)
     e12:	91 30       	cpi	r25, 0x01	; 1
     e14:	11 f0       	breq	.+4      	; 0xe1a <XPROGProtocol_Command+0x166>
     e16:	84 e1       	ldi	r24, 0x14	; 20
     e18:	01 c0       	rjmp	.+2      	; 0xe1c <XPROGProtocol_Command+0x168>
     e1a:	80 e1       	ldi	r24, 0x10	; 16
		  EraseCommand = TINY_NVM_CMD_CHIPERASE;
		else
		  EraseCommand = TINY_NVM_CMD_SECTIONERASE;

		/* Erase the target memory, indicate timeout if occurred */
		if (!(TINYNVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
     e1c:	ba 01       	movw	r22, r20
     e1e:	91 d3       	rcall	.+1826   	; 0x1542 <TINYNVM_EraseMemory>
     e20:	88 23       	and	r24, r24
     e22:	11 f0       	breq	.+4      	; 0xe28 <XPROGProtocol_Command+0x174>
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	01 c0       	rjmp	.+2      	; 0xe2a <XPROGProtocol_Command+0x176>
     e28:	93 e0       	ldi	r25, 0x03	; 3
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e2a:	80 e5       	ldi	r24, 0x50	; 80
     e2c:	80 93 f1 00 	sts	0x00F1, r24
     e30:	83 e0       	ldi	r24, 0x03	; 3
     e32:	96 c0       	rjmp	.+300    	; 0xf60 <XPROGProtocol_Command+0x2ac>
			break;
		case XPRG_CMD_ERASE:
			XPROGProtocol_Erase();
			break;
		case XPRG_CMD_WRITE_MEM:
			XPROGProtocol_WriteMemory();
     e34:	1d de       	rcall	.-966    	; 0xa70 <XPROGProtocol_WriteMemory>
     e36:	9d c0       	rjmp	.+314    	; 0xf72 <XPROGProtocol_Command+0x2be>
			break;
		case XPRG_CMD_READ_MEM:
			XPROGProtocol_ReadMemory();
     e38:	d2 de       	rcall	.-604    	; 0xbde <XPROGProtocol_ReadMemory>
     e3a:	9b c0       	rjmp	.+310    	; 0xf72 <XPROGProtocol_Command+0x2be>
	struct
	{
		uint8_t CRCType;
	} ReadCRC_XPROG_Params;

	Endpoint_Read_Stream_LE(&ReadCRC_XPROG_Params, sizeof(ReadCRC_XPROG_Params), NULL);
     e3c:	ce 01       	movw	r24, r28
     e3e:	05 96       	adiw	r24, 0x05	; 5
     e40:	61 e0       	ldi	r22, 0x01	; 1
     e42:	70 e0       	ldi	r23, 0x00	; 0
     e44:	40 e0       	ldi	r20, 0x00	; 0
     e46:	50 e0       	ldi	r21, 0x00	; 0
     e48:	19 d7       	rcall	.+3634   	; 0x1c7c <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e4a:	80 91 e8 00 	lds	r24, 0x00E8
     e4e:	8b 77       	andi	r24, 0x7B	; 123
     e50:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     e54:	82 e0       	ldi	r24, 0x02	; 2
     e56:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     e5a:	80 91 ec 00 	lds	r24, 0x00EC
     e5e:	80 68       	ori	r24, 0x80	; 128
     e60:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint32_t MemoryCRC;

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
     e64:	80 91 5d 02 	lds	r24, 0x025D
     e68:	88 23       	and	r24, r24
     e6a:	11 f0       	breq	.+4      	; 0xe70 <XPROGProtocol_Command+0x1bc>
     e6c:	91 e0       	ldi	r25, 0x01	; 1
     e6e:	13 c0       	rjmp	.+38     	; 0xe96 <XPROGProtocol_Command+0x1e2>
	{
		uint8_t CRCCommand;

		/* Determine which NVM command to send to the device depending on the memory to CRC */
		switch (ReadCRC_XPROG_Params.CRCType)
     e70:	8d 81       	ldd	r24, Y+5	; 0x05
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	21 f0       	breq	.+8      	; 0xe7e <XPROGProtocol_Command+0x1ca>
     e76:	82 30       	cpi	r24, 0x02	; 2
     e78:	21 f4       	brne	.+8      	; 0xe82 <XPROGProtocol_Command+0x1ce>
     e7a:	89 e3       	ldi	r24, 0x39	; 57
     e7c:	03 c0       	rjmp	.+6      	; 0xe84 <XPROGProtocol_Command+0x1d0>
     e7e:	88 e3       	ldi	r24, 0x38	; 56
     e80:	01 c0       	rjmp	.+2      	; 0xe84 <XPROGProtocol_Command+0x1d0>
     e82:	88 e7       	ldi	r24, 0x78	; 120
				CRCCommand = XMEGA_NVM_CMD_FLASHCRC;
				break;
		}

		/* Perform and retrieve the memory CRC, indicate timeout if occurred */
		if (!(XMEGANVM_GetMemoryCRC(CRCCommand, &MemoryCRC)))
     e84:	be 01       	movw	r22, r28
     e86:	6f 5f       	subi	r22, 0xFF	; 255
     e88:	7f 4f       	sbci	r23, 0xFF	; 255
     e8a:	ac d2       	rcall	.+1368   	; 0x13e4 <XMEGANVM_GetMemoryCRC>
     e8c:	88 23       	and	r24, r24
     e8e:	11 f4       	brne	.+4      	; 0xe94 <XPROGProtocol_Command+0x1e0>
     e90:	93 e0       	ldi	r25, 0x03	; 3
     e92:	01 c0       	rjmp	.+2      	; 0xe96 <XPROGProtocol_Command+0x1e2>
     e94:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e96:	80 e5       	ldi	r24, 0x50	; 80
     e98:	80 93 f1 00 	sts	0x00F1, r24
     e9c:	86 e0       	ldi	r24, 0x06	; 6
     e9e:	80 93 f1 00 	sts	0x00F1, r24
     ea2:	90 93 f1 00 	sts	0x00F1, r25

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPRG_CMD_CRC);
	Endpoint_Write_8(ReturnStatus);

	if (ReturnStatus == XPRG_ERR_OK)
     ea6:	99 23       	and	r25, r25
     ea8:	09 f0       	breq	.+2      	; 0xeac <XPROGProtocol_Command+0x1f8>
     eaa:	5e c0       	rjmp	.+188    	; 0xf68 <XPROGProtocol_Command+0x2b4>
	{
		Endpoint_Write_8(MemoryCRC >> 16);
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	9a 81       	ldd	r25, Y+2	; 0x02
     eb0:	ab 81       	ldd	r26, Y+3	; 0x03
     eb2:	bc 81       	ldd	r27, Y+4	; 0x04
     eb4:	9d 01       	movw	r18, r26
     eb6:	44 27       	eor	r20, r20
     eb8:	55 27       	eor	r21, r21
     eba:	20 93 f1 00 	sts	0x00F1, r18
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     ebe:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     ec2:	89 2f       	mov	r24, r25
     ec4:	99 27       	eor	r25, r25
     ec6:	80 93 f1 00 	sts	0x00F1, r24
     eca:	4e c0       	rjmp	.+156    	; 0xf68 <XPROGProtocol_Command+0x2b4>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     ecc:	80 91 f1 00 	lds	r24, 0x00F1
	uint8_t ReturnStatus = XPRG_ERR_OK;

	uint8_t XPROGParam = Endpoint_Read_8();

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
     ed0:	82 30       	cpi	r24, 0x02	; 2
     ed2:	01 f1       	breq	.+64     	; 0xf14 <XPROGProtocol_Command+0x260>
     ed4:	83 30       	cpi	r24, 0x03	; 3
     ed6:	18 f4       	brcc	.+6      	; 0xede <XPROGProtocol_Command+0x22a>
     ed8:	81 30       	cpi	r24, 0x01	; 1
     eda:	29 f4       	brne	.+10     	; 0xee6 <XPROGProtocol_Command+0x232>
     edc:	06 c0       	rjmp	.+12     	; 0xeea <XPROGProtocol_Command+0x236>
     ede:	83 30       	cpi	r24, 0x03	; 3
     ee0:	21 f1       	breq	.+72     	; 0xf2a <XPROGProtocol_Command+0x276>
     ee2:	84 30       	cpi	r24, 0x04	; 4
     ee4:	39 f1       	breq	.+78     	; 0xf34 <XPROGProtocol_Command+0x280>
     ee6:	91 e0       	ldi	r25, 0x01	; 1
     ee8:	2a c0       	rjmp	.+84     	; 0xf3e <XPROGProtocol_Command+0x28a>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[3] = UEDATX;
     eea:	20 91 f1 00 	lds	r18, 0x00F1
     eee:	b2 2f       	mov	r27, r18
				Data.Bytes[2] = UEDATX;
     ef0:	20 91 f1 00 	lds	r18, 0x00F1
     ef4:	a2 2f       	mov	r26, r18
				Data.Bytes[1] = UEDATX;
     ef6:	20 91 f1 00 	lds	r18, 0x00F1
     efa:	92 2f       	mov	r25, r18
				Data.Bytes[0] = UEDATX;
     efc:	20 91 f1 00 	lds	r18, 0x00F1
     f00:	82 2f       	mov	r24, r18
	{
		case XPRG_PARAM_NVMBASE:
			XPROG_Param_NVMBase = Endpoint_Read_32_BE();
     f02:	80 93 3f 01 	sts	0x013F, r24
     f06:	90 93 40 01 	sts	0x0140, r25
     f0a:	a0 93 41 01 	sts	0x0141, r26
     f0e:	b0 93 42 01 	sts	0x0142, r27
     f12:	14 c0       	rjmp	.+40     	; 0xf3c <XPROGProtocol_Command+0x288>
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[1] = UEDATX;
     f14:	80 91 f1 00 	lds	r24, 0x00F1
     f18:	38 2f       	mov	r19, r24
				Data.Bytes[0] = UEDATX;
     f1a:	80 91 f1 00 	lds	r24, 0x00F1
     f1e:	28 2f       	mov	r18, r24
			break;
		case XPRG_PARAM_EEPPAGESIZE:
			XPROG_Param_EEPageSize = Endpoint_Read_16_BE();
     f20:	30 93 44 01 	sts	0x0144, r19
     f24:	20 93 43 01 	sts	0x0143, r18
     f28:	09 c0       	rjmp	.+18     	; 0xf3c <XPROGProtocol_Command+0x288>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     f2a:	80 91 f1 00 	lds	r24, 0x00F1
			break;
		case XPRG_PARAM_NVMCMD_REG:
			XPROG_Param_NVMCMDRegAddr = Endpoint_Read_8();
     f2e:	80 93 45 01 	sts	0x0145, r24
     f32:	04 c0       	rjmp	.+8      	; 0xf3c <XPROGProtocol_Command+0x288>
     f34:	80 91 f1 00 	lds	r24, 0x00F1
			break;
		case XPRG_PARAM_NVMCSR_REG:
			XPROG_Param_NVMCSRRegAddr = Endpoint_Read_8();
     f38:	80 93 46 01 	sts	0x0146, r24
     f3c:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f3e:	80 91 e8 00 	lds	r24, 0x00E8
     f42:	8b 77       	andi	r24, 0x7B	; 123
     f44:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     f48:	82 e0       	ldi	r24, 0x02	; 2
     f4a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     f4e:	80 91 ec 00 	lds	r24, 0x00EC
     f52:	80 68       	ori	r24, 0x80	; 128
     f54:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f58:	80 e5       	ldi	r24, 0x50	; 80
     f5a:	80 93 f1 00 	sts	0x00F1, r24
     f5e:	87 e0       	ldi	r24, 0x07	; 7
     f60:	80 93 f1 00 	sts	0x00F1, r24
     f64:	90 93 f1 00 	sts	0x00F1, r25
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f68:	80 91 e8 00 	lds	r24, 0x00E8
     f6c:	8e 77       	andi	r24, 0x7E	; 126
     f6e:	80 93 e8 00 	sts	0x00E8, r24
			break;
		case XPRG_CMD_SET_PARAM:
			XPROGProtocol_SetParam();
			break;
	}
}
     f72:	29 96       	adiw	r28, 0x09	; 9
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <XPROGTarget_SetTxMode>:
}

static void XPROGTarget_SetTxMode(void)
{
	/* Wait for a full cycle of the clock */
	while (PIND & (1 << 5));
     f84:	4d 99       	sbic	0x09, 5	; 9
     f86:	fe cf       	rjmp	.-4      	; 0xf84 <XPROGTarget_SetTxMode>
	while (!(PIND & (1 << 5)));
     f88:	4d 9b       	sbis	0x09, 5	; 9
     f8a:	fe cf       	rjmp	.-4      	; 0xf88 <XPROGTarget_SetTxMode+0x4>

	PORTD  |=  (1 << 3);
     f8c:	5b 9a       	sbi	0x0b, 3	; 11
	DDRD   |=  (1 << 3);
     f8e:	53 9a       	sbi	0x0a, 3	; 10

	UCSR1B &= ~(1 << RXEN1);
     f90:	80 91 c9 00 	lds	r24, 0x00C9
     f94:	8f 7e       	andi	r24, 0xEF	; 239
     f96:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1B |=  (1 << TXEN1);
     f9a:	80 91 c9 00 	lds	r24, 0x00C9
     f9e:	88 60       	ori	r24, 0x08	; 8
     fa0:	80 93 c9 00 	sts	0x00C9, r24

	IsSending = true;
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	80 93 79 02 	sts	0x0279, r24
}
     faa:	08 95       	ret

00000fac <XPROGTarget_SendIdle>:

/** Sends an IDLE via the USART to the attached target, consisting of a full frame of idle bits. */
void XPROGTarget_SendIdle(void)
{
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
     fac:	80 91 79 02 	lds	r24, 0x0279
     fb0:	88 23       	and	r24, r24
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <XPROGTarget_SendIdle+0xa>
	  XPROGTarget_SetTxMode();
     fb4:	e7 df       	rcall	.-50     	; 0xf84 <XPROGTarget_SetTxMode>
     fb6:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Need to do nothing for a full frame to send an IDLE */
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
	{
		/* Wait for a full cycle of the clock */
		while (PIND & (1 << 5));
     fb8:	4d 99       	sbic	0x09, 5	; 9
     fba:	fe cf       	rjmp	.-4      	; 0xfb8 <XPROGTarget_SendIdle+0xc>
		while (!(PIND & (1 << 5)));
     fbc:	4d 9b       	sbis	0x09, 5	; 9
     fbe:	fe cf       	rjmp	.-4      	; 0xfbc <XPROGTarget_SendIdle+0x10>
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
	  XPROGTarget_SetTxMode();
	
	/* Need to do nothing for a full frame to send an IDLE */
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
     fc0:	8f 5f       	subi	r24, 0xFF	; 255
     fc2:	8c 30       	cpi	r24, 0x0C	; 12
     fc4:	c9 f7       	brne	.-14     	; 0xfb8 <XPROGTarget_SendIdle+0xc>
	{
		/* Wait for a full cycle of the clock */
		while (PIND & (1 << 5));
		while (!(PIND & (1 << 5)));
	}
}
     fc6:	08 95       	ret

00000fc8 <XPROGTarget_EnableTargetTPI>:
}

/** Enables the target's TPI interface, holding the target in reset until TPI mode is exited. */
void XPROGTarget_EnableTargetTPI(void)
{
	IsSending = false;
     fc8:	10 92 79 02 	sts	0x0279, r1

	/* Set /RESET line low for at least 400ns to enable TPI functionality */
	AUX_LINE_DDR  |=  AUX_LINE_MASK;
     fcc:	24 9a       	sbi	0x04, 4	; 4
	AUX_LINE_PORT &= ~AUX_LINE_MASK;
     fce:	2c 98       	cbi	0x05, 4	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     fd0:	82 e0       	ldi	r24, 0x02	; 2
     fd2:	8a 95       	dec	r24
     fd4:	f1 f7       	brne	.-4      	; 0xfd2 <XPROGTarget_EnableTargetTPI+0xa>
	_delay_us(1);

	/* Set Tx and XCK as outputs, Rx as input */
	DDRD |=  (1 << 5) | (1 << 3);
     fd6:	8a b1       	in	r24, 0x0a	; 10
     fd8:	88 62       	ori	r24, 0x28	; 40
     fda:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << 2);
     fdc:	52 98       	cbi	0x0a, 2	; 10

	/* Set up the synchronous USART for TINY communications - 8 data bits, even parity, 2 stop bits */
	UBRR1  = ((F_CPU / 2 / XPROG_HARDWARE_SPEED) - 1);
     fde:	8f e0       	ldi	r24, 0x0F	; 15
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	90 93 cd 00 	sts	0x00CD, r25
     fe6:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1B = (1 << TXEN1);
     fea:	88 e0       	ldi	r24, 0x08	; 8
     fec:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPOL1);
     ff0:	8f e6       	ldi	r24, 0x6F	; 111
     ff2:	80 93 ca 00 	sts	0x00CA, r24

	/* Send two IDLEs of 12 bits each to enable TPI interface (need at least 16 idle bits) */
	XPROGTarget_SendIdle();
     ff6:	da df       	rcall	.-76     	; 0xfac <XPROGTarget_SendIdle>
	XPROGTarget_SendIdle();
}
     ff8:	d9 cf       	rjmp	.-78     	; 0xfac <XPROGTarget_SendIdle>

00000ffa <XPROGTarget_EnableTargetPDI>:
bool IsSending;

/** Enables the target's PDI interface, holding the target in reset until PDI mode is exited. */
void XPROGTarget_EnableTargetPDI(void)
{
	IsSending = false;
     ffa:	10 92 79 02 	sts	0x0279, r1

	/* Set Tx and XCK as outputs, Rx as input */
	DDRD |=  (1 << 5) | (1 << 3);
     ffe:	8a b1       	in	r24, 0x0a	; 10
    1000:	88 62       	ori	r24, 0x28	; 40
    1002:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << 2);
    1004:	52 98       	cbi	0x0a, 2	; 10

	/* Set DATA line high for at least 90ns to disable /RESET functionality */
	PORTD |= (1 << 3);
    1006:	5b 9a       	sbi	0x0b, 3	; 11
    1008:	82 e0       	ldi	r24, 0x02	; 2
    100a:	8a 95       	dec	r24
    100c:	f1 f7       	brne	.-4      	; 0x100a <XPROGTarget_EnableTargetPDI+0x10>
	_delay_us(1);

	/* Set up the synchronous USART for XMEGA communications - 8 data bits, even parity, 2 stop bits */
	UBRR1  = ((F_CPU / 2 / XPROG_HARDWARE_SPEED) - 1);
    100e:	8f e0       	ldi	r24, 0x0F	; 15
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	90 93 cd 00 	sts	0x00CD, r25
    1016:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1B = (1 << TXEN1);
    101a:	88 e0       	ldi	r24, 0x08	; 8
    101c:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPOL1);
    1020:	8f e6       	ldi	r24, 0x6F	; 111
    1022:	80 93 ca 00 	sts	0x00CA, r24

	/* Send two IDLEs of 12 bits each to enable PDI interface (need at least 16 idle bits) */
	XPROGTarget_SendIdle();
    1026:	c2 df       	rcall	.-124    	; 0xfac <XPROGTarget_SendIdle>
	XPROGTarget_SendIdle();
}
    1028:	c1 cf       	rjmp	.-126    	; 0xfac <XPROGTarget_SendIdle>

0000102a <XPROGTarget_SendByte>:
/** Sends a byte via the USART.
 *
 *  \param[in] Byte  Byte to send through the USART
 */
void XPROGTarget_SendByte(const uint8_t Byte)
{
    102a:	1f 93       	push	r17
    102c:	18 2f       	mov	r17, r24
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
    102e:	80 91 79 02 	lds	r24, 0x0279
    1032:	88 23       	and	r24, r24
    1034:	09 f4       	brne	.+2      	; 0x1038 <XPROGTarget_SendByte+0xe>
	  XPROGTarget_SetTxMode();
    1036:	a6 df       	rcall	.-180    	; 0xf84 <XPROGTarget_SetTxMode>

	/* Wait until there is space in the hardware Tx buffer before writing */
	while (!(UCSR1A & (1 << UDRE1)));
    1038:	80 91 c8 00 	lds	r24, 0x00C8
    103c:	85 ff       	sbrs	r24, 5
    103e:	fc cf       	rjmp	.-8      	; 0x1038 <XPROGTarget_SendByte+0xe>
	UCSR1A |= (1 << TXC1);
    1040:	80 91 c8 00 	lds	r24, 0x00C8
    1044:	80 64       	ori	r24, 0x40	; 64
    1046:	80 93 c8 00 	sts	0x00C8, r24
	UDR1    = Byte;
    104a:	10 93 ce 00 	sts	0x00CE, r17
}
    104e:	1f 91       	pop	r17
    1050:	08 95       	ret

00001052 <XPROGTarget_SetRxMode>:
	IsSending = true;
}

static void XPROGTarget_SetRxMode(void)
{
	while (!(UCSR1A & (1 << TXC1)));
    1052:	80 91 c8 00 	lds	r24, 0x00C8
    1056:	86 ff       	sbrs	r24, 6
    1058:	fc cf       	rjmp	.-8      	; 0x1052 <XPROGTarget_SetRxMode>
	UCSR1A |=  (1 << TXC1);
    105a:	80 91 c8 00 	lds	r24, 0x00C8
    105e:	80 64       	ori	r24, 0x40	; 64
    1060:	80 93 c8 00 	sts	0x00C8, r24

	UCSR1B &= ~(1 << TXEN1);
    1064:	80 91 c9 00 	lds	r24, 0x00C9
    1068:	87 7f       	andi	r24, 0xF7	; 247
    106a:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1B |=  (1 << RXEN1);
    106e:	80 91 c9 00 	lds	r24, 0x00C9
    1072:	80 61       	ori	r24, 0x10	; 16
    1074:	80 93 c9 00 	sts	0x00C9, r24

	DDRD   &= ~(1 << 3);
    1078:	53 98       	cbi	0x0a, 3	; 10
	PORTD  &= ~(1 << 3);
    107a:	5b 98       	cbi	0x0b, 3	; 11

	IsSending = false;
    107c:	10 92 79 02 	sts	0x0279, r1
}
    1080:	08 95       	ret

00001082 <XPROGTarget_ReceiveByte>:
 *  \return Received byte from the USART
 */
uint8_t XPROGTarget_ReceiveByte(void)
{
	/* Switch to Rx mode if currently in Tx mode */
	if (IsSending)
    1082:	80 91 79 02 	lds	r24, 0x0279
    1086:	88 23       	and	r24, r24
    1088:	09 f0       	breq	.+2      	; 0x108c <XPROGTarget_ReceiveByte+0xa>
	  XPROGTarget_SetRxMode();
    108a:	e3 df       	rcall	.-58     	; 0x1052 <XPROGTarget_SetRxMode>

	/* Wait until a byte has been received before reading */
	while (!(UCSR1A & (1 << RXC1)) && !(TimeoutExpired));
    108c:	80 91 c8 00 	lds	r24, 0x00C8
    1090:	87 fd       	sbrc	r24, 7
    1092:	03 c0       	rjmp	.+6      	; 0x109a <XPROGTarget_ReceiveByte+0x18>
    1094:	8a b5       	in	r24, 0x2a	; 42
    1096:	88 23       	and	r24, r24
    1098:	c9 f3       	breq	.-14     	; 0x108c <XPROGTarget_ReceiveByte+0xa>

	return UDR1;
    109a:	80 91 ce 00 	lds	r24, 0x00CE
}
    109e:	08 95       	ret

000010a0 <XPROGTarget_DisableTargetTPI>:

/** Disables the target's TPI interface, exits programming mode and starts the target's application. */
void XPROGTarget_DisableTargetTPI(void)
{
	/* Switch to Rx mode to ensure that all pending transmissions are complete */
	XPROGTarget_SetRxMode();
    10a0:	d8 df       	rcall	.-80     	; 0x1052 <XPROGTarget_SetRxMode>

	/* Turn off receiver and transmitter of the USART, clear settings */
	UCSR1A |= (1 << TXC1) | (1 << RXC1);
    10a2:	e8 ec       	ldi	r30, 0xC8	; 200
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	80 6c       	ori	r24, 0xC0	; 192
    10aa:	80 83       	st	Z, r24
	UCSR1B  = 0;
    10ac:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1C  = 0;
    10b0:	10 92 ca 00 	sts	0x00CA, r1

	/* Set all USART lines as inputs, tristate */
	DDRD  &= ~((1 << 5) | (1 << 3));
    10b4:	8a b1       	in	r24, 0x0a	; 10
    10b6:	87 7d       	andi	r24, 0xD7	; 215
    10b8:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1 << 5) | (1 << 3) | (1 << 2));
    10ba:	8b b1       	in	r24, 0x0b	; 11
    10bc:	83 7d       	andi	r24, 0xD3	; 211
    10be:	8b b9       	out	0x0b, r24	; 11
	
	/* Tristate target /RESET line */
	AUX_LINE_DDR  &= ~AUX_LINE_MASK;
    10c0:	24 98       	cbi	0x04, 4	; 4
	AUX_LINE_PORT &= ~AUX_LINE_MASK;
    10c2:	2c 98       	cbi	0x05, 4	; 5
}
    10c4:	08 95       	ret

000010c6 <XPROGTarget_DisableTargetPDI>:

/** Disables the target's PDI interface, exits programming mode and starts the target's application. */
void XPROGTarget_DisableTargetPDI(void)
{
	/* Switch to Rx mode to ensure that all pending transmissions are complete */
	XPROGTarget_SetRxMode();
    10c6:	c5 df       	rcall	.-118    	; 0x1052 <XPROGTarget_SetRxMode>

	/* Turn off receiver and transmitter of the USART, clear settings */
	UCSR1A  = ((1 << TXC1) | (1 << RXC1));
    10c8:	80 ec       	ldi	r24, 0xC0	; 192
    10ca:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B  = 0;
    10ce:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1C  = 0;
    10d2:	10 92 ca 00 	sts	0x00CA, r1

	/* Tristate all pins */
	DDRD  &= ~((1 << 5) | (1 << 3));
    10d6:	8a b1       	in	r24, 0x0a	; 10
    10d8:	87 7d       	andi	r24, 0xD7	; 215
    10da:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1 << 5) | (1 << 3) | (1 << 2));
    10dc:	8b b1       	in	r24, 0x0b	; 11
    10de:	83 7d       	andi	r24, 0xD3	; 211
    10e0:	8b b9       	out	0x0b, r24	; 11
}
    10e2:	08 95       	ret

000010e4 <XMEGANVM_SendAddress>:
/** Sends the given 32-bit absolute address to the target.
 *
 *  \param[in] AbsoluteAddress  Absolute address to send to the target
 */
static void XMEGANVM_SendAddress(const uint32_t AbsoluteAddress)
{
    10e4:	ef 92       	push	r14
    10e6:	ff 92       	push	r15
    10e8:	0f 93       	push	r16
    10ea:	1f 93       	push	r17
    10ec:	7b 01       	movw	r14, r22
    10ee:	8c 01       	movw	r16, r24
	/* Send the given 32-bit address to the target, LSB first */
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
    10f0:	86 2f       	mov	r24, r22
    10f2:	9b df       	rcall	.-202    	; 0x102a <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
    10f4:	bb 27       	eor	r27, r27
    10f6:	a1 2f       	mov	r26, r17
    10f8:	90 2f       	mov	r25, r16
    10fa:	8f 2d       	mov	r24, r15
    10fc:	96 df       	rcall	.-212    	; 0x102a <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
    10fe:	c8 01       	movw	r24, r16
    1100:	aa 27       	eor	r26, r26
    1102:	bb 27       	eor	r27, r27
    1104:	92 df       	rcall	.-220    	; 0x102a <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
    1106:	e1 2e       	mov	r14, r17
    1108:	ff 24       	eor	r15, r15
    110a:	00 27       	eor	r16, r16
    110c:	11 27       	eor	r17, r17
    110e:	8e 2d       	mov	r24, r14
    1110:	8c df       	rcall	.-232    	; 0x102a <XPROGTarget_SendByte>
}
    1112:	1f 91       	pop	r17
    1114:	0f 91       	pop	r16
    1116:	ff 90       	pop	r15
    1118:	ef 90       	pop	r14
    111a:	08 95       	ret

0000111c <XMEGANVM_SendNVMRegAddress>:
{
	/* Determine the absolute register address from the NVM base memory address and the NVM register address */
	uint32_t Address = XPROG_Param_NVMBase | Register;

	/* Send the calculated 32-bit address to the target, LSB first */
	XMEGANVM_SendAddress(Address);
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	a0 e0       	ldi	r26, 0x00	; 0
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	20 91 3f 01 	lds	r18, 0x013F
    1126:	30 91 40 01 	lds	r19, 0x0140
    112a:	40 91 41 01 	lds	r20, 0x0141
    112e:	50 91 42 01 	lds	r21, 0x0142
    1132:	82 2b       	or	r24, r18
    1134:	93 2b       	or	r25, r19
    1136:	a4 2b       	or	r26, r20
    1138:	b5 2b       	or	r27, r21
    113a:	bc 01       	movw	r22, r24
    113c:	cd 01       	movw	r24, r26
}
    113e:	d2 cf       	rjmp	.-92     	; 0x10e4 <XMEGANVM_SendAddress>

00001140 <XMEGANVM_WaitWhileNVMControllerBusy>:
 *  \return Boolean true if the NVM controller became ready within the timeout period, false otherwise
 */
bool XMEGANVM_WaitWhileNVMControllerBusy(void)
{
	/* Preload the pointer register with the NVM STATUS register address to check the BUSY flag */
	XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    1140:	8b e6       	ldi	r24, 0x6B	; 107
    1142:	73 df       	rcall	.-282    	; 0x102a <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_STATUS);
    1144:	8f e0       	ldi	r24, 0x0F	; 15
    1146:	ea df       	rcall	.-44     	; 0x111c <XMEGANVM_SendNVMRegAddress>

	/* Poll the NVM STATUS register while the NVM controller is busy */
	for (;;)
	{
		/* Fetch the current status value via the pointer register (without auto-increment afterwards) */
		XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT << 2) | PDI_DATSIZE_1BYTE);
    1148:	80 e2       	ldi	r24, 0x20	; 32
    114a:	6f df       	rcall	.-290    	; 0x102a <XPROGTarget_SendByte>

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    114c:	9a df       	rcall	.-204    	; 0x1082 <XPROGTarget_ReceiveByte>
    114e:	98 2f       	mov	r25, r24

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutExpired)
    1150:	8a b5       	in	r24, 0x2a	; 42
    1152:	88 23       	and	r24, r24
    1154:	11 f0       	breq	.+4      	; 0x115a <XMEGANVM_WaitWhileNVMControllerBusy+0x1a>
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	08 95       	ret
		  return false;

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
    115a:	97 fd       	sbrc	r25, 7
    115c:	f5 cf       	rjmp	.-22     	; 0x1148 <XMEGANVM_WaitWhileNVMControllerBusy+0x8>
    115e:	81 e0       	ldi	r24, 0x01	; 1
		  return true;
	}
}
    1160:	08 95       	ret

00001162 <XMEGANVM_WritePageMemory>:
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_WritePageMemory(const uint8_t WriteBuffCommand, const uint8_t EraseBuffCommand,
                              const uint8_t WritePageCommand, const uint8_t PageMode, const uint32_t WriteAddress,
                              const uint8_t* WriteBuffer, uint16_t WriteSize)
{
    1162:	7f 92       	push	r7
    1164:	8f 92       	push	r8
    1166:	9f 92       	push	r9
    1168:	af 92       	push	r10
    116a:	bf 92       	push	r11
    116c:	cf 92       	push	r12
    116e:	df 92       	push	r13
    1170:	ef 92       	push	r14
    1172:	ff 92       	push	r15
    1174:	0f 93       	push	r16
    1176:	1f 93       	push	r17
    1178:	cf 93       	push	r28
    117a:	df 93       	push	r29
    117c:	88 2e       	mov	r8, r24
    117e:	96 2e       	mov	r9, r22
    1180:	74 2e       	mov	r7, r20
    1182:	e6 01       	movw	r28, r12
	if (PageMode & XPRG_PAGEMODE_ERASE)
    1184:	c2 2e       	mov	r12, r18
    1186:	20 ff       	sbrs	r18, 0
    1188:	10 c0       	rjmp	.+32     	; 0x11aa <XMEGANVM_WritePageMemory+0x48>
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    118a:	da df       	rcall	.-76     	; 0x1140 <XMEGANVM_WaitWhileNVMControllerBusy>
    118c:	88 23       	and	r24, r24
    118e:	09 f4       	brne	.+2      	; 0x1192 <XMEGANVM_WritePageMemory+0x30>
    1190:	40 c0       	rjmp	.+128    	; 0x1212 <XMEGANVM_WritePageMemory+0xb0>
		  return false;

		/* Send the memory buffer erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1192:	8c e4       	ldi	r24, 0x4C	; 76
    1194:	4a df       	rcall	.-364    	; 0x102a <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1196:	8a e0       	ldi	r24, 0x0A	; 10
    1198:	c1 df       	rcall	.-126    	; 0x111c <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(EraseBuffCommand);
    119a:	89 2d       	mov	r24, r9
    119c:	46 df       	rcall	.-372    	; 0x102a <XPROGTarget_SendByte>

		/* Set CMDEX bit in NVM CTRLA register to start the buffer erase */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    119e:	8c e4       	ldi	r24, 0x4C	; 76
    11a0:	44 df       	rcall	.-376    	; 0x102a <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    11a2:	8b e0       	ldi	r24, 0x0B	; 11
    11a4:	bb df       	rcall	.-138    	; 0x111c <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(1 << 0);
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	40 df       	rcall	.-384    	; 0x102a <XPROGTarget_SendByte>
	}

	if (WriteSize)
    11aa:	a1 14       	cp	r10, r1
    11ac:	b1 04       	cpc	r11, r1
    11ae:	e9 f0       	breq	.+58     	; 0x11ea <XMEGANVM_WritePageMemory+0x88>
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    11b0:	c7 df       	rcall	.-114    	; 0x1140 <XMEGANVM_WaitWhileNVMControllerBusy>
    11b2:	88 23       	and	r24, r24
    11b4:	71 f1       	breq	.+92     	; 0x1212 <XMEGANVM_WritePageMemory+0xb0>
		  return false;

		/* Send the memory buffer write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    11b6:	8c e4       	ldi	r24, 0x4C	; 76
    11b8:	38 df       	rcall	.-400    	; 0x102a <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    11ba:	8a e0       	ldi	r24, 0x0A	; 10
    11bc:	af df       	rcall	.-162    	; 0x111c <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(WriteBuffCommand);
    11be:	88 2d       	mov	r24, r8
    11c0:	34 df       	rcall	.-408    	; 0x102a <XPROGTarget_SendByte>

		/* Load the PDI pointer register with the start address we want to write to */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    11c2:	8b e6       	ldi	r24, 0x6B	; 107
    11c4:	32 df       	rcall	.-412    	; 0x102a <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(WriteAddress);
    11c6:	c8 01       	movw	r24, r16
    11c8:	b7 01       	movw	r22, r14
    11ca:	8c df       	rcall	.-232    	; 0x10e4 <XMEGANVM_SendAddress>

		/* Send the REPEAT command with the specified number of bytes to write */
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    11cc:	80 ea       	ldi	r24, 0xA0	; 160
    11ce:	2d df       	rcall	.-422    	; 0x102a <XPROGTarget_SendByte>
		XPROGTarget_SendByte(WriteSize - 1);
    11d0:	8a 2d       	mov	r24, r10
    11d2:	81 50       	subi	r24, 0x01	; 1
    11d4:	2a df       	rcall	.-428    	; 0x102a <XPROGTarget_SendByte>

		/* Send a ST command with indirect access and post-increment to write the bytes */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    11d6:	84 e6       	ldi	r24, 0x64	; 100
    11d8:	28 df       	rcall	.-432    	; 0x102a <XPROGTarget_SendByte>
		while (WriteSize--)
		  XPROGTarget_SendByte(*(WriteBuffer++));
    11da:	89 91       	ld	r24, Y+
    11dc:	26 df       	rcall	.-436    	; 0x102a <XPROGTarget_SendByte>
    11de:	08 94       	sec
    11e0:	a1 08       	sbc	r10, r1
    11e2:	b1 08       	sbc	r11, r1
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
		XPROGTarget_SendByte(WriteSize - 1);

		/* Send a ST command with indirect access and post-increment to write the bytes */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
		while (WriteSize--)
    11e4:	a1 14       	cp	r10, r1
    11e6:	b1 04       	cpc	r11, r1
    11e8:	c1 f7       	brne	.-16     	; 0x11da <XMEGANVM_WritePageMemory+0x78>
		  XPROGTarget_SendByte(*(WriteBuffer++));
	}

	if (PageMode & XPRG_PAGEMODE_WRITE)
    11ea:	c1 fe       	sbrs	r12, 1
    11ec:	10 c0       	rjmp	.+32     	; 0x120e <XMEGANVM_WritePageMemory+0xac>
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    11ee:	a8 df       	rcall	.-176    	; 0x1140 <XMEGANVM_WaitWhileNVMControllerBusy>
    11f0:	88 23       	and	r24, r24
    11f2:	79 f0       	breq	.+30     	; 0x1212 <XMEGANVM_WritePageMemory+0xb0>
		  return false;

		/* Send the memory write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    11f4:	8c e4       	ldi	r24, 0x4C	; 76
    11f6:	19 df       	rcall	.-462    	; 0x102a <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    11f8:	8a e0       	ldi	r24, 0x0A	; 10
    11fa:	90 df       	rcall	.-224    	; 0x111c <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(WritePageCommand);
    11fc:	87 2d       	mov	r24, r7
    11fe:	15 df       	rcall	.-470    	; 0x102a <XPROGTarget_SendByte>

		/* Send the address of the first page location to write the memory page */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1200:	8c e4       	ldi	r24, 0x4C	; 76
    1202:	13 df       	rcall	.-474    	; 0x102a <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(WriteAddress);
    1204:	c8 01       	movw	r24, r16
    1206:	b7 01       	movw	r22, r14
    1208:	6d df       	rcall	.-294    	; 0x10e4 <XMEGANVM_SendAddress>
		XPROGTarget_SendByte(0x00);
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	0e df       	rcall	.-484    	; 0x102a <XPROGTarget_SendByte>
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	01 c0       	rjmp	.+2      	; 0x1214 <XMEGANVM_WritePageMemory+0xb2>
    1212:	80 e0       	ldi	r24, 0x00	; 0
	}

	return true;
}
    1214:	df 91       	pop	r29
    1216:	cf 91       	pop	r28
    1218:	1f 91       	pop	r17
    121a:	0f 91       	pop	r16
    121c:	ff 90       	pop	r15
    121e:	ef 90       	pop	r14
    1220:	df 90       	pop	r13
    1222:	cf 90       	pop	r12
    1224:	bf 90       	pop	r11
    1226:	af 90       	pop	r10
    1228:	9f 90       	pop	r9
    122a:	8f 90       	pop	r8
    122c:	7f 90       	pop	r7
    122e:	08 95       	ret

00001230 <XMEGANVM_WriteByteMemory>:
 *  \param[in]  Byte          Byte to write to the target
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_WriteByteMemory(const uint8_t WriteCommand, const uint32_t WriteAddress, const uint8_t Byte)
{
    1230:	cf 92       	push	r12
    1232:	df 92       	push	r13
    1234:	ef 92       	push	r14
    1236:	ff 92       	push	r15
    1238:	0f 93       	push	r16
    123a:	1f 93       	push	r17
    123c:	d8 2e       	mov	r13, r24
    123e:	7a 01       	movw	r14, r20
    1240:	8b 01       	movw	r16, r22
    1242:	c2 2e       	mov	r12, r18
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1244:	7d df       	rcall	.-262    	; 0x1140 <XMEGANVM_WaitWhileNVMControllerBusy>
    1246:	88 23       	and	r24, r24
    1248:	71 f0       	breq	.+28     	; 0x1266 <XMEGANVM_WriteByteMemory+0x36>
	  return false;

	/* Send the memory write command to the target */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    124a:	8c e4       	ldi	r24, 0x4C	; 76
    124c:	ee de       	rcall	.-548    	; 0x102a <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    124e:	8a e0       	ldi	r24, 0x0A	; 10
    1250:	65 df       	rcall	.-310    	; 0x111c <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(WriteCommand);
    1252:	8d 2d       	mov	r24, r13
    1254:	ea de       	rcall	.-556    	; 0x102a <XPROGTarget_SendByte>

	/* Send new memory byte to the memory of the target */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1256:	8c e4       	ldi	r24, 0x4C	; 76
    1258:	e8 de       	rcall	.-560    	; 0x102a <XPROGTarget_SendByte>
	XMEGANVM_SendAddress(WriteAddress);
    125a:	c8 01       	movw	r24, r16
    125c:	b7 01       	movw	r22, r14
    125e:	42 df       	rcall	.-380    	; 0x10e4 <XMEGANVM_SendAddress>
	XPROGTarget_SendByte(Byte);
    1260:	8c 2d       	mov	r24, r12
    1262:	e3 de       	rcall	.-570    	; 0x102a <XPROGTarget_SendByte>
    1264:	81 e0       	ldi	r24, 0x01	; 1

	return true;
}
    1266:	1f 91       	pop	r17
    1268:	0f 91       	pop	r16
    126a:	ff 90       	pop	r15
    126c:	ef 90       	pop	r14
    126e:	df 90       	pop	r13
    1270:	cf 90       	pop	r12
    1272:	08 95       	ret

00001274 <XMEGANVM_ReadMemory>:
 *  \param[in]  ReadSize     Number of bytes to read
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_ReadMemory(const uint32_t ReadAddress, uint8_t* ReadBuffer, uint16_t ReadSize)
{
    1274:	cf 92       	push	r12
    1276:	df 92       	push	r13
    1278:	ef 92       	push	r14
    127a:	ff 92       	push	r15
    127c:	0f 93       	push	r16
    127e:	1f 93       	push	r17
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	7b 01       	movw	r14, r22
    1286:	8c 01       	movw	r16, r24
    1288:	6a 01       	movw	r12, r20
    128a:	e9 01       	movw	r28, r18
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    128c:	59 df       	rcall	.-334    	; 0x1140 <XMEGANVM_WaitWhileNVMControllerBusy>
    128e:	88 23       	and	r24, r24
    1290:	11 f4       	brne	.+4      	; 0x1296 <XMEGANVM_ReadMemory+0x22>
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	23 c0       	rjmp	.+70     	; 0x12dc <XMEGANVM_ReadMemory+0x68>
	  return false;

	/* Send the READNVM command to the NVM controller for reading of an arbitrary location */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1296:	8c e4       	ldi	r24, 0x4C	; 76
    1298:	c8 de       	rcall	.-624    	; 0x102a <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    129a:	8a e0       	ldi	r24, 0x0A	; 10
    129c:	3f df       	rcall	.-386    	; 0x111c <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(XMEGA_NVM_CMD_READNVM);
    129e:	83 e4       	ldi	r24, 0x43	; 67
    12a0:	c4 de       	rcall	.-632    	; 0x102a <XPROGTarget_SendByte>

	/* Load the PDI pointer register with the start address we want to read from */
	XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    12a2:	8b e6       	ldi	r24, 0x6B	; 107
    12a4:	c2 de       	rcall	.-636    	; 0x102a <XPROGTarget_SendByte>
	XMEGANVM_SendAddress(ReadAddress);
    12a6:	c8 01       	movw	r24, r16
    12a8:	b7 01       	movw	r22, r14
    12aa:	1c df       	rcall	.-456    	; 0x10e4 <XMEGANVM_SendAddress>

	/* Send the REPEAT command with the specified number of bytes to read */
	XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    12ac:	80 ea       	ldi	r24, 0xA0	; 160
    12ae:	bd de       	rcall	.-646    	; 0x102a <XPROGTarget_SendByte>
	XPROGTarget_SendByte(ReadSize - 1);
    12b0:	9e 01       	movw	r18, r28
    12b2:	21 50       	subi	r18, 0x01	; 1
    12b4:	82 2f       	mov	r24, r18
    12b6:	b9 de       	rcall	.-654    	; 0x102a <XPROGTarget_SendByte>

	/* Send a LD command with indirect access and post-increment to read out the bytes */
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    12b8:	84 e2       	ldi	r24, 0x24	; 36
    12ba:	b7 de       	rcall	.-658    	; 0x102a <XPROGTarget_SendByte>
    12bc:	04 c0       	rjmp	.+8      	; 0x12c6 <XMEGANVM_ReadMemory+0x52>
	while (ReadSize-- && !(TimeoutExpired))
	  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
    12be:	e1 de       	rcall	.-574    	; 0x1082 <XPROGTarget_ReceiveByte>
    12c0:	f6 01       	movw	r30, r12
    12c2:	81 93       	st	Z+, r24
    12c4:	6f 01       	movw	r12, r30
	XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
	XPROGTarget_SendByte(ReadSize - 1);

	/* Send a LD command with indirect access and post-increment to read out the bytes */
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
	while (ReadSize-- && !(TimeoutExpired))
    12c6:	20 97       	sbiw	r28, 0x00	; 0
    12c8:	21 f0       	breq	.+8      	; 0x12d2 <XMEGANVM_ReadMemory+0x5e>
    12ca:	8a b5       	in	r24, 0x2a	; 42
    12cc:	21 97       	sbiw	r28, 0x01	; 1
    12ce:	88 23       	and	r24, r24
    12d0:	b1 f3       	breq	.-20     	; 0x12be <XMEGANVM_ReadMemory+0x4a>
	  *(ReadBuffer++) = XPROGTarget_ReceiveByte();

	return (TimeoutExpired == false);
    12d2:	8a b5       	in	r24, 0x2a	; 42
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	88 23       	and	r24, r24
    12d8:	09 f4       	brne	.+2      	; 0x12dc <XMEGANVM_ReadMemory+0x68>
    12da:	91 e0       	ldi	r25, 0x01	; 1
}
    12dc:	89 2f       	mov	r24, r25
    12de:	df 91       	pop	r29
    12e0:	cf 91       	pop	r28
    12e2:	1f 91       	pop	r17
    12e4:	0f 91       	pop	r16
    12e6:	ff 90       	pop	r15
    12e8:	ef 90       	pop	r14
    12ea:	df 90       	pop	r13
    12ec:	cf 90       	pop	r12
    12ee:	08 95       	ret

000012f0 <XMEGANVM_WaitWhileNVMBusBusy>:
{
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the LDCS command to read the PDI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(PDI_CMD_LDCS | PDI_STATUS_REG);
    12f0:	80 e8       	ldi	r24, 0x80	; 128
    12f2:	9b de       	rcall	.-714    	; 0x102a <XPROGTarget_SendByte>

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    12f4:	c6 de       	rcall	.-628    	; 0x1082 <XPROGTarget_ReceiveByte>
    12f6:	98 2f       	mov	r25, r24

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutExpired)
    12f8:	8a b5       	in	r24, 0x2a	; 42
    12fa:	88 23       	and	r24, r24
    12fc:	11 f0       	breq	.+4      	; 0x1302 <XMEGANVM_WaitWhileNVMBusBusy+0x12>
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	08 95       	ret
		  return false;

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM)
    1302:	91 ff       	sbrs	r25, 1
    1304:	f5 cf       	rjmp	.-22     	; 0x12f0 <XMEGANVM_WaitWhileNVMBusBusy>
    1306:	81 e0       	ldi	r24, 0x01	; 1
		  return true;
	}
}
    1308:	08 95       	ret

0000130a <XMEGANVM_EraseMemory>:
 *  \param[in] Address       Address inside the memory space to erase
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_EraseMemory(const uint8_t EraseCommand, const uint32_t Address)
{
    130a:	cf 92       	push	r12
    130c:	df 92       	push	r13
    130e:	ef 92       	push	r14
    1310:	ff 92       	push	r15
    1312:	1f 93       	push	r17
    1314:	18 2f       	mov	r17, r24
    1316:	6a 01       	movw	r12, r20
    1318:	7b 01       	movw	r14, r22
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    131a:	12 df       	rcall	.-476    	; 0x1140 <XMEGANVM_WaitWhileNVMControllerBusy>
    131c:	88 23       	and	r24, r24
    131e:	09 f4       	brne	.+2      	; 0x1322 <XMEGANVM_EraseMemory+0x18>
    1320:	5a c0       	rjmp	.+180    	; 0x13d6 <XMEGANVM_EraseMemory+0xcc>
	  return false;

	/* EEPROM and Chip erasures are triggered differently to FLASH section erasures */
	if (EraseCommand == XMEGA_NVM_CMD_CHIPERASE)
    1322:	10 34       	cpi	r17, 0x40	; 64
    1324:	31 f4       	brne	.+12     	; 0x1332 <XMEGANVM_EraseMemory+0x28>
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1326:	8c e4       	ldi	r24, 0x4C	; 76
    1328:	80 de       	rcall	.-768    	; 0x102a <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    132a:	8a e0       	ldi	r24, 0x0A	; 10
    132c:	f7 de       	rcall	.-530    	; 0x111c <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(EraseCommand);
    132e:	80 e4       	ldi	r24, 0x40	; 64
    1330:	39 c0       	rjmp	.+114    	; 0x13a4 <XMEGANVM_EraseMemory+0x9a>
		/* Set CMDEX bit in NVM CTRLA register to start the erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(1 << 0);
	}
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
    1332:	10 33       	cpi	r17, 0x30	; 48
    1334:	09 f0       	breq	.+2      	; 0x1338 <XMEGANVM_EraseMemory+0x2e>
    1336:	3d c0       	rjmp	.+122    	; 0x13b2 <XMEGANVM_EraseMemory+0xa8>
	{
		/* Send the EEPROM page buffer erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1338:	8c e4       	ldi	r24, 0x4C	; 76
    133a:	77 de       	rcall	.-786    	; 0x102a <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    133c:	8a e0       	ldi	r24, 0x0A	; 10
    133e:	ee de       	rcall	.-548    	; 0x111c <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF);
    1340:	86 e3       	ldi	r24, 0x36	; 54
    1342:	73 de       	rcall	.-794    	; 0x102a <XPROGTarget_SendByte>

		/* Set CMDEX bit in NVM CTRLA register to start the buffer erase */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1344:	8c e4       	ldi	r24, 0x4C	; 76
    1346:	71 de       	rcall	.-798    	; 0x102a <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1348:	8b e0       	ldi	r24, 0x0B	; 11
    134a:	e8 de       	rcall	.-560    	; 0x111c <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(1 << 0);
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	6d de       	rcall	.-806    	; 0x102a <XPROGTarget_SendByte>

		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1350:	f7 de       	rcall	.-530    	; 0x1140 <XMEGANVM_WaitWhileNVMControllerBusy>
    1352:	88 23       	and	r24, r24
    1354:	09 f4       	brne	.+2      	; 0x1358 <XMEGANVM_EraseMemory+0x4e>
    1356:	3f c0       	rjmp	.+126    	; 0x13d6 <XMEGANVM_EraseMemory+0xcc>
		  return false;

		/* Send the EEPROM memory buffer write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1358:	8c e4       	ldi	r24, 0x4C	; 76
    135a:	67 de       	rcall	.-818    	; 0x102a <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    135c:	8a e0       	ldi	r24, 0x0A	; 10
    135e:	de de       	rcall	.-580    	; 0x111c <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF);
    1360:	83 e3       	ldi	r24, 0x33	; 51
    1362:	63 de       	rcall	.-826    	; 0x102a <XPROGTarget_SendByte>

		/* Load the PDI pointer register with the EEPROM page start address */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    1364:	8b e6       	ldi	r24, 0x6B	; 107
    1366:	61 de       	rcall	.-830    	; 0x102a <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(Address);
    1368:	c7 01       	movw	r24, r14
    136a:	b6 01       	movw	r22, r12
    136c:	bb de       	rcall	.-650    	; 0x10e4 <XMEGANVM_SendAddress>

		/* Send the REPEAT command with the specified number of bytes to write */
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    136e:	80 ea       	ldi	r24, 0xA0	; 160
    1370:	5c de       	rcall	.-840    	; 0x102a <XPROGTarget_SendByte>
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);
    1372:	80 91 43 01 	lds	r24, 0x0143
    1376:	81 50       	subi	r24, 0x01	; 1
    1378:	58 de       	rcall	.-848    	; 0x102a <XPROGTarget_SendByte>

		/* Send a ST command with indirect access and post-increment to tag each byte in the EEPROM page buffer */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    137a:	84 e6       	ldi	r24, 0x64	; 100
    137c:	56 de       	rcall	.-852    	; 0x102a <XPROGTarget_SendByte>
    137e:	10 e0       	ldi	r17, 0x00	; 0
    1380:	03 c0       	rjmp	.+6      	; 0x1388 <XMEGANVM_EraseMemory+0x7e>
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
		  XPROGTarget_SendByte(0x00);
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	52 de       	rcall	.-860    	; 0x102a <XPROGTarget_SendByte>
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);

		/* Send a ST command with indirect access and post-increment to tag each byte in the EEPROM page buffer */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
    1386:	1f 5f       	subi	r17, 0xFF	; 255
    1388:	21 2f       	mov	r18, r17
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	80 91 43 01 	lds	r24, 0x0143
    1390:	90 91 44 01 	lds	r25, 0x0144
    1394:	28 17       	cp	r18, r24
    1396:	39 07       	cpc	r19, r25
    1398:	a0 f3       	brcs	.-24     	; 0x1382 <XMEGANVM_EraseMemory+0x78>
		  XPROGTarget_SendByte(0x00);

		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    139a:	8c e4       	ldi	r24, 0x4C	; 76
    139c:	46 de       	rcall	.-884    	; 0x102a <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    139e:	8a e0       	ldi	r24, 0x0A	; 10
    13a0:	bd de       	rcall	.-646    	; 0x111c <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(EraseCommand);
    13a2:	80 e3       	ldi	r24, 0x30	; 48
    13a4:	42 de       	rcall	.-892    	; 0x102a <XPROGTarget_SendByte>

		/* Set CMDEX bit in NVM CTRLA register to start the EEPROM erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    13a6:	8c e4       	ldi	r24, 0x4C	; 76
    13a8:	40 de       	rcall	.-896    	; 0x102a <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    13aa:	8b e0       	ldi	r24, 0x0B	; 11
    13ac:	b7 de       	rcall	.-658    	; 0x111c <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(1 << 0);
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	0c c0       	rjmp	.+24     	; 0x13ca <XMEGANVM_EraseMemory+0xc0>
	}
	else
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    13b2:	8c e4       	ldi	r24, 0x4C	; 76
    13b4:	3a de       	rcall	.-908    	; 0x102a <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    13b6:	8a e0       	ldi	r24, 0x0A	; 10
    13b8:	b1 de       	rcall	.-670    	; 0x111c <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(EraseCommand);
    13ba:	81 2f       	mov	r24, r17
    13bc:	36 de       	rcall	.-916    	; 0x102a <XPROGTarget_SendByte>

		/* Other erase modes just need us to address a byte within the target memory space */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    13be:	8c e4       	ldi	r24, 0x4C	; 76
    13c0:	34 de       	rcall	.-920    	; 0x102a <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(Address);
    13c2:	c7 01       	movw	r24, r14
    13c4:	b6 01       	movw	r22, r12
    13c6:	8e de       	rcall	.-740    	; 0x10e4 <XMEGANVM_SendAddress>
		XPROGTarget_SendByte(0x00);
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	2f de       	rcall	.-930    	; 0x102a <XPROGTarget_SendByte>
	}

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy()))
    13cc:	91 df       	rcall	.-222    	; 0x12f0 <XMEGANVM_WaitWhileNVMBusBusy>
    13ce:	88 23       	and	r24, r24
    13d0:	19 f0       	breq	.+6      	; 0x13d8 <XMEGANVM_EraseMemory+0xce>
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	01 c0       	rjmp	.+2      	; 0x13d8 <XMEGANVM_EraseMemory+0xce>
    13d6:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	return true;
}
    13d8:	1f 91       	pop	r17
    13da:	ff 90       	pop	r15
    13dc:	ef 90       	pop	r14
    13de:	df 90       	pop	r13
    13e0:	cf 90       	pop	r12
    13e2:	08 95       	ret

000013e4 <XMEGANVM_GetMemoryCRC>:
 *  \param[out] CRCDest     CRC Destination when read from the target
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_GetMemoryCRC(const uint8_t CRCCommand, uint32_t* const CRCDest)
{
    13e4:	1f 93       	push	r17
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	18 2f       	mov	r17, r24
    13ec:	eb 01       	movw	r28, r22
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    13ee:	a8 de       	rcall	.-688    	; 0x1140 <XMEGANVM_WaitWhileNVMControllerBusy>
    13f0:	88 23       	and	r24, r24
    13f2:	41 f1       	breq	.+80     	; 0x1444 <XMEGANVM_GetMemoryCRC+0x60>
	  return false;

	/* Set the NVM command to the correct CRC read command */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    13f4:	8c e4       	ldi	r24, 0x4C	; 76
    13f6:	19 de       	rcall	.-974    	; 0x102a <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    13f8:	8a e0       	ldi	r24, 0x0A	; 10
    13fa:	90 de       	rcall	.-736    	; 0x111c <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(CRCCommand);
    13fc:	81 2f       	mov	r24, r17
    13fe:	15 de       	rcall	.-982    	; 0x102a <XPROGTarget_SendByte>

	/* Set CMDEX bit in NVM CTRLA register to start the CRC generation */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1400:	8c e4       	ldi	r24, 0x4C	; 76
    1402:	13 de       	rcall	.-986    	; 0x102a <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1404:	8b e0       	ldi	r24, 0x0B	; 11
    1406:	8a de       	rcall	.-748    	; 0x111c <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(1 << 0);
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	0f de       	rcall	.-994    	; 0x102a <XPROGTarget_SendByte>

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy()))
    140c:	71 df       	rcall	.-286    	; 0x12f0 <XMEGANVM_WaitWhileNVMBusBusy>
    140e:	88 23       	and	r24, r24
    1410:	c9 f0       	breq	.+50     	; 0x1444 <XMEGANVM_GetMemoryCRC+0x60>
	  return false;

	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1412:	96 de       	rcall	.-724    	; 0x1140 <XMEGANVM_WaitWhileNVMControllerBusy>
    1414:	88 23       	and	r24, r24
    1416:	b1 f0       	breq	.+44     	; 0x1444 <XMEGANVM_GetMemoryCRC+0x60>
	  return false;

	/* Load the PDI pointer register with the DAT0 register start address */
	XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    1418:	8b e6       	ldi	r24, 0x6B	; 107
    141a:	07 de       	rcall	.-1010   	; 0x102a <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_DAT0);
    141c:	84 e0       	ldi	r24, 0x04	; 4
    141e:	7e de       	rcall	.-772    	; 0x111c <XMEGANVM_SendNVMRegAddress>

	/* Send the REPEAT command to grab the CRC bytes */
	XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    1420:	80 ea       	ldi	r24, 0xA0	; 160
    1422:	03 de       	rcall	.-1018   	; 0x102a <XPROGTarget_SendByte>
	XPROGTarget_SendByte(XMEGA_CRC_LENGTH - 1);
    1424:	82 e0       	ldi	r24, 0x02	; 2
    1426:	01 de       	rcall	.-1022   	; 0x102a <XPROGTarget_SendByte>

	/* Read in the CRC bytes from the target */
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    1428:	84 e2       	ldi	r24, 0x24	; 36
    142a:	ff dd       	rcall	.-1026   	; 0x102a <XPROGTarget_SendByte>
	for (uint8_t i = 0; i < XMEGA_CRC_LENGTH; i++)
	  ((uint8_t*)CRCDest)[i] = XPROGTarget_ReceiveByte();
    142c:	2a de       	rcall	.-940    	; 0x1082 <XPROGTarget_ReceiveByte>
    142e:	88 83       	st	Y, r24
    1430:	28 de       	rcall	.-944    	; 0x1082 <XPROGTarget_ReceiveByte>
    1432:	89 83       	std	Y+1, r24	; 0x01
    1434:	26 de       	rcall	.-948    	; 0x1082 <XPROGTarget_ReceiveByte>
    1436:	8a 83       	std	Y+2, r24	; 0x02

	return (TimeoutExpired == false);
    1438:	8a b5       	in	r24, 0x2a	; 42
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	88 23       	and	r24, r24
    143e:	19 f4       	brne	.+6      	; 0x1446 <XMEGANVM_GetMemoryCRC+0x62>
    1440:	91 e0       	ldi	r25, 0x01	; 1
    1442:	01 c0       	rjmp	.+2      	; 0x1446 <XMEGANVM_GetMemoryCRC+0x62>
    1444:	90 e0       	ldi	r25, 0x00	; 0
}
    1446:	89 2f       	mov	r24, r25
    1448:	df 91       	pop	r29
    144a:	cf 91       	pop	r28
    144c:	1f 91       	pop	r17
    144e:	08 95       	ret

00001450 <XMEGANVM_DisablePDI>:
}

/** Removes access to the target's NVM controller and physically disables the target's physical PDI interface. */
void XMEGANVM_DisablePDI(void)
{
	XMEGANVM_WaitWhileNVMBusBusy();
    1450:	4f df       	rcall	.-354    	; 0x12f0 <XMEGANVM_WaitWhileNVMBusBusy>

	/* Clear the RESET key in the RESET PDI register to allow the XMEGA to run */
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_RESET_REG);
    1452:	81 ec       	ldi	r24, 0xC1	; 193
    1454:	ea dd       	rcall	.-1068   	; 0x102a <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x00);
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	e8 dd       	rcall	.-1072   	; 0x102a <XPROGTarget_SendByte>

	/* Do it twice to make sure it takes effect (silicon bug?) */
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_RESET_REG);
    145a:	81 ec       	ldi	r24, 0xC1	; 193
    145c:	e6 dd       	rcall	.-1076   	; 0x102a <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x00);
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	e4 dd       	rcall	.-1080   	; 0x102a <XPROGTarget_SendByte>

	XPROGTarget_DisableTargetPDI();
}
    1462:	31 ce       	rjmp	.-926    	; 0x10c6 <XPROGTarget_DisableTargetPDI>

00001464 <XMEGANVM_EnablePDI>:
/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean true if the PDI interface was enabled successfully, false otherwise
 */
bool XMEGANVM_EnablePDI(void)
{
    1464:	ef 92       	push	r14
    1466:	ff 92       	push	r15
    1468:	0f 93       	push	r16
    146a:	1f 93       	push	r17
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	28 97       	sbiw	r28, 0x08	; 8
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	f8 94       	cli
    147a:	de bf       	out	0x3e, r29	; 62
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	cd bf       	out	0x3d, r28	; 61
	/* Enable PDI programming mode with the attached target */
	XPROGTarget_EnableTargetPDI();
    1480:	bc dd       	rcall	.-1160   	; 0xffa <XPROGTarget_EnableTargetPDI>

	/* Store the RESET key into the RESET PDI register to keep the XMEGA in reset */
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_RESET_REG);
    1482:	81 ec       	ldi	r24, 0xC1	; 193
    1484:	d2 dd       	rcall	.-1116   	; 0x102a <XPROGTarget_SendByte>
	XPROGTarget_SendByte(PDI_RESET_KEY);
    1486:	89 e5       	ldi	r24, 0x59	; 89
    1488:	d0 dd       	rcall	.-1120   	; 0x102a <XPROGTarget_SendByte>

	/* Lower direction change guard time to 0 USART bits */
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_CTRL_REG);
    148a:	82 ec       	ldi	r24, 0xC2	; 194
    148c:	ce dd       	rcall	.-1124   	; 0x102a <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x07);
    148e:	87 e0       	ldi	r24, 0x07	; 7
    1490:	cc dd       	rcall	.-1128   	; 0x102a <XPROGTarget_SendByte>

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
    1492:	80 ee       	ldi	r24, 0xE0	; 224
    1494:	ca dd       	rcall	.-1132   	; 0x102a <XPROGTarget_SendByte>
    1496:	8e 01       	movw	r16, r28
    1498:	08 5f       	subi	r16, 0xF8	; 248
    149a:	1f 4f       	sbci	r17, 0xFF	; 255
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);
    149c:	7e 01       	movw	r14, r28
    149e:	08 94       	sec
    14a0:	e1 1c       	adc	r14, r1
    14a2:	f1 1c       	adc	r15, r1
    14a4:	d7 01       	movw	r26, r14
    14a6:	e7 e4       	ldi	r30, 0x47	; 71
    14a8:	f1 e0       	ldi	r31, 0x01	; 1
    14aa:	88 e0       	ldi	r24, 0x08	; 8
    14ac:	01 90       	ld	r0, Z+
    14ae:	0d 92       	st	X+, r0
    14b0:	81 50       	subi	r24, 0x01	; 1
    14b2:	e1 f7       	brne	.-8      	; 0x14ac <XMEGANVM_EnablePDI+0x48>
    14b4:	f8 01       	movw	r30, r16
    14b6:	80 81       	ld	r24, Z
    14b8:	b8 dd       	rcall	.-1168   	; 0x102a <XPROGTarget_SendByte>
    14ba:	01 50       	subi	r16, 0x01	; 1
    14bc:	10 40       	sbci	r17, 0x00	; 0
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_CTRL_REG);
	XPROGTarget_SendByte(0x07);

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
    14be:	0c 17       	cp	r16, r28
    14c0:	1d 07       	cpc	r17, r29
    14c2:	81 f7       	brne	.-32     	; 0x14a4 <XMEGANVM_EnablePDI+0x40>
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
    14c4:	15 df       	rcall	.-470    	; 0x12f0 <XMEGANVM_WaitWhileNVMBusBusy>
}
    14c6:	28 96       	adiw	r28, 0x08	; 8
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	cf 91       	pop	r28
    14d4:	df 91       	pop	r29
    14d6:	1f 91       	pop	r17
    14d8:	0f 91       	pop	r16
    14da:	ff 90       	pop	r15
    14dc:	ef 90       	pop	r14
    14de:	08 95       	ret

000014e0 <TINYNVM_SendWriteNVMRegister>:
/** Sends a SOUT command to the target with the specified I/O address, ready for the data byte to be read.
 *
 *  \param[in] Address  6-bit I/O address to read from in the target's I/O memory space
 */
static void TINYNVM_SendWriteNVMRegister(const uint8_t Address)
{
    14e0:	28 2f       	mov	r18, r24
	/* The TPI command for reading from the I/O space uses strange addressing, where the I/O address's upper
	 * two bits of the 6-bit address are shifted left once */
	XPROGTarget_SendByte(TPI_CMD_SOUT | ((Address & 0x30) << 1) | (Address & 0x0F));
    14e2:	8f 70       	andi	r24, 0x0F	; 15
    14e4:	80 69       	ori	r24, 0x90	; 144
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	20 73       	andi	r18, 0x30	; 48
    14ea:	30 70       	andi	r19, 0x00	; 0
    14ec:	22 0f       	add	r18, r18
    14ee:	33 1f       	adc	r19, r19
    14f0:	82 2b       	or	r24, r18
}
    14f2:	9b cd       	rjmp	.-1226   	; 0x102a <XPROGTarget_SendByte>

000014f4 <TINYNVM_SendPointerAddress>:

#if defined(ENABLE_XPROG_PROTOCOL) || defined(__DOXYGEN__)

/** Sends the given pointer address to the target's TPI pointer register */
static void TINYNVM_SendPointerAddress(const uint16_t AbsoluteAddress)
{
    14f4:	0f 93       	push	r16
    14f6:	1f 93       	push	r17
    14f8:	8c 01       	movw	r16, r24
	/* Send the given 16-bit address to the target, LSB first */
	XPROGTarget_SendByte(TPI_CMD_SSTPR | 0);
    14fa:	88 e6       	ldi	r24, 0x68	; 104
    14fc:	96 dd       	rcall	.-1236   	; 0x102a <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress & 0xFF);
    14fe:	80 2f       	mov	r24, r16
    1500:	94 dd       	rcall	.-1240   	; 0x102a <XPROGTarget_SendByte>
	XPROGTarget_SendByte(TPI_CMD_SSTPR | 1);
    1502:	89 e6       	ldi	r24, 0x69	; 105
    1504:	92 dd       	rcall	.-1244   	; 0x102a <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
    1506:	01 2f       	mov	r16, r17
    1508:	11 27       	eor	r17, r17
    150a:	80 2f       	mov	r24, r16
    150c:	8e dd       	rcall	.-1252   	; 0x102a <XPROGTarget_SendByte>
}
    150e:	1f 91       	pop	r17
    1510:	0f 91       	pop	r16
    1512:	08 95       	ret

00001514 <TINYNVM_WaitWhileNVMControllerBusy>:
{
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the SIN command to read the TPI STATUS register to see the NVM bus is busy */
		TINYNVM_SendReadNVMRegister(XPROG_Param_NVMCSRRegAddr);
    1514:	20 91 46 01 	lds	r18, 0x0146
 */
static void TINYNVM_SendReadNVMRegister(const uint8_t Address)
{
	/* The TPI command for reading from the I/O space uses strange addressing, where the I/O address's upper
	 * two bits of the 6-bit address are shifted left once */
	XPROGTarget_SendByte(TPI_CMD_SIN | ((Address & 0x30) << 1) | (Address & 0x0F));
    1518:	82 2f       	mov	r24, r18
    151a:	8f 70       	andi	r24, 0x0F	; 15
    151c:	80 61       	ori	r24, 0x10	; 16
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	20 73       	andi	r18, 0x30	; 48
    1522:	30 70       	andi	r19, 0x00	; 0
    1524:	22 0f       	add	r18, r18
    1526:	33 1f       	adc	r19, r19
    1528:	82 2b       	or	r24, r18
    152a:	7f dd       	rcall	.-1282   	; 0x102a <XPROGTarget_SendByte>
	for (;;)
	{
		/* Send the SIN command to read the TPI STATUS register to see the NVM bus is busy */
		TINYNVM_SendReadNVMRegister(XPROG_Param_NVMCSRRegAddr);

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    152c:	aa dd       	rcall	.-1196   	; 0x1082 <XPROGTarget_ReceiveByte>
    152e:	98 2f       	mov	r25, r24

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutExpired)
    1530:	8a b5       	in	r24, 0x2a	; 42
    1532:	88 23       	and	r24, r24
    1534:	11 f0       	breq	.+4      	; 0x153a <TINYNVM_WaitWhileNVMControllerBusy+0x26>
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	08 95       	ret
		  return false;

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
    153a:	97 fd       	sbrc	r25, 7
    153c:	eb cf       	rjmp	.-42     	; 0x1514 <TINYNVM_WaitWhileNVMControllerBusy>
    153e:	81 e0       	ldi	r24, 0x01	; 1
		  return true;
	}
}
    1540:	08 95       	ret

00001542 <TINYNVM_EraseMemory>:
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_EraseMemory(const uint8_t EraseCommand,
                         const uint16_t Address)
{
    1542:	1f 93       	push	r17
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	18 2f       	mov	r17, r24
    154a:	eb 01       	movw	r28, r22
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    154c:	e3 df       	rcall	.-58     	; 0x1514 <TINYNVM_WaitWhileNVMControllerBusy>
    154e:	88 23       	and	r24, r24
    1550:	79 f0       	breq	.+30     	; 0x1570 <TINYNVM_EraseMemory+0x2e>
	  return false;

	/* Set the NVM control register to the target memory erase command */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    1552:	80 91 45 01 	lds	r24, 0x0145
    1556:	c4 df       	rcall	.-120    	; 0x14e0 <TINYNVM_SendWriteNVMRegister>
	XPROGTarget_SendByte(EraseCommand);
    1558:	81 2f       	mov	r24, r17
    155a:	67 dd       	rcall	.-1330   	; 0x102a <XPROGTarget_SendByte>

	/* Write to a high byte location within the target address space to start the erase process */
	TINYNVM_SendPointerAddress(Address | 0x0001);
    155c:	ce 01       	movw	r24, r28
    155e:	81 60       	ori	r24, 0x01	; 1
    1560:	c9 df       	rcall	.-110    	; 0x14f4 <TINYNVM_SendPointerAddress>
	XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT);
    1562:	80 e6       	ldi	r24, 0x60	; 96
    1564:	62 dd       	rcall	.-1340   	; 0x102a <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x00);
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	60 dd       	rcall	.-1344   	; 0x102a <XPROGTarget_SendByte>

	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    156a:	d4 df       	rcall	.-88     	; 0x1514 <TINYNVM_WaitWhileNVMControllerBusy>
    156c:	81 11       	cpse	r24, r1
    156e:	81 e0       	ldi	r24, 0x01	; 1
	  return false;

	return true;
}
    1570:	df 91       	pop	r29
    1572:	cf 91       	pop	r28
    1574:	1f 91       	pop	r17
    1576:	08 95       	ret

00001578 <TINYNVM_WriteMemory>:
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_WriteMemory(const uint16_t WriteAddress,
                         uint8_t* WriteBuffer,
                         uint16_t WriteLength)
{
    1578:	ef 92       	push	r14
    157a:	ff 92       	push	r15
    157c:	0f 93       	push	r16
    157e:	1f 93       	push	r17
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	7c 01       	movw	r14, r24
    1586:	8b 01       	movw	r16, r22
    1588:	ea 01       	movw	r28, r20
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    158a:	c4 df       	rcall	.-120    	; 0x1514 <TINYNVM_WaitWhileNVMControllerBusy>
    158c:	88 23       	and	r24, r24
    158e:	21 f1       	breq	.+72     	; 0x15d8 <TINYNVM_WriteMemory+0x60>
	  return false;

	/* Must have an integer number of words to write - if extra byte, word-align via a dummy high byte */
	if (WriteLength & 0x01)
    1590:	c0 ff       	sbrs	r28, 0
    1592:	06 c0       	rjmp	.+12     	; 0x15a0 <TINYNVM_WriteMemory+0x28>
	  WriteBuffer[WriteLength++] = 0xFF;
    1594:	f8 01       	movw	r30, r16
    1596:	ec 0f       	add	r30, r28
    1598:	fd 1f       	adc	r31, r29
    159a:	8f ef       	ldi	r24, 0xFF	; 255
    159c:	80 83       	st	Z, r24
    159e:	21 96       	adiw	r28, 0x01	; 1

	/* Set the NVM control register to the WORD WRITE command for memory writing */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    15a0:	80 91 45 01 	lds	r24, 0x0145
    15a4:	9d df       	rcall	.-198    	; 0x14e0 <TINYNVM_SendWriteNVMRegister>
	XPROGTarget_SendByte(TINY_NVM_CMD_WORDWRITE);
    15a6:	8d e1       	ldi	r24, 0x1D	; 29
    15a8:	40 dd       	rcall	.-1408   	; 0x102a <XPROGTarget_SendByte>

	/* Send the address of the location to write to */
	TINYNVM_SendPointerAddress(WriteAddress);
    15aa:	c7 01       	movw	r24, r14
    15ac:	a3 df       	rcall	.-186    	; 0x14f4 <TINYNVM_SendPointerAddress>
    15ae:	10 c0       	rjmp	.+32     	; 0x15d0 <TINYNVM_WriteMemory+0x58>

	while (WriteLength)
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    15b0:	b1 df       	rcall	.-158    	; 0x1514 <TINYNVM_WaitWhileNVMControllerBusy>
    15b2:	88 23       	and	r24, r24
    15b4:	89 f0       	breq	.+34     	; 0x15d8 <TINYNVM_WriteMemory+0x60>
		  return false;

		/* Write the low byte of data to the target */
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
    15b6:	84 e6       	ldi	r24, 0x64	; 100
    15b8:	38 dd       	rcall	.-1424   	; 0x102a <XPROGTarget_SendByte>
		XPROGTarget_SendByte(*(WriteBuffer++));
    15ba:	f8 01       	movw	r30, r16
    15bc:	80 81       	ld	r24, Z
    15be:	35 dd       	rcall	.-1430   	; 0x102a <XPROGTarget_SendByte>

		/* Write the high byte of data to the target */
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
    15c0:	84 e6       	ldi	r24, 0x64	; 100
    15c2:	33 dd       	rcall	.-1434   	; 0x102a <XPROGTarget_SendByte>
		XPROGTarget_SendByte(*(WriteBuffer++));
    15c4:	f8 01       	movw	r30, r16
    15c6:	81 81       	ldd	r24, Z+1	; 0x01
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_WriteMemory(const uint16_t WriteAddress,
                         uint8_t* WriteBuffer,
                         uint16_t WriteLength)
{
    15c8:	0e 5f       	subi	r16, 0xFE	; 254
    15ca:	1f 4f       	sbci	r17, 0xFF	; 255
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
		XPROGTarget_SendByte(*(WriteBuffer++));

		/* Write the high byte of data to the target */
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
		XPROGTarget_SendByte(*(WriteBuffer++));
    15cc:	2e dd       	rcall	.-1444   	; 0x102a <XPROGTarget_SendByte>

		/* Need to decrement the write length twice, since we wrote a whole two-byte word */
		WriteLength -= 2;
    15ce:	22 97       	sbiw	r28, 0x02	; 2
	XPROGTarget_SendByte(TINY_NVM_CMD_WORDWRITE);

	/* Send the address of the location to write to */
	TINYNVM_SendPointerAddress(WriteAddress);

	while (WriteLength)
    15d0:	20 97       	sbiw	r28, 0x00	; 0
    15d2:	71 f7       	brne	.-36     	; 0x15b0 <TINYNVM_WriteMemory+0x38>
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	01 c0       	rjmp	.+2      	; 0x15da <TINYNVM_WriteMemory+0x62>
    15d8:	80 e0       	ldi	r24, 0x00	; 0
		/* Need to decrement the write length twice, since we wrote a whole two-byte word */
		WriteLength -= 2;
	}

	return true;
}
    15da:	df 91       	pop	r29
    15dc:	cf 91       	pop	r28
    15de:	1f 91       	pop	r17
    15e0:	0f 91       	pop	r16
    15e2:	ff 90       	pop	r15
    15e4:	ef 90       	pop	r14
    15e6:	08 95       	ret

000015e8 <TINYNVM_ReadMemory>:
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_ReadMemory(const uint16_t ReadAddress,
                        uint8_t* ReadBuffer,
                        uint16_t ReadSize)
{
    15e8:	ef 92       	push	r14
    15ea:	ff 92       	push	r15
    15ec:	0f 93       	push	r16
    15ee:	1f 93       	push	r17
    15f0:	cf 93       	push	r28
    15f2:	df 93       	push	r29
    15f4:	8c 01       	movw	r16, r24
    15f6:	7b 01       	movw	r14, r22
    15f8:	ea 01       	movw	r28, r20
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    15fa:	8c df       	rcall	.-232    	; 0x1514 <TINYNVM_WaitWhileNVMControllerBusy>
    15fc:	88 23       	and	r24, r24
    15fe:	11 f4       	brne	.+4      	; 0x1604 <TINYNVM_ReadMemory+0x1c>
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	19 c0       	rjmp	.+50     	; 0x1636 <TINYNVM_ReadMemory+0x4e>
	  return false;

	/* Set the NVM control register to the NO OP command for memory reading */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    1604:	80 91 45 01 	lds	r24, 0x0145
    1608:	6b df       	rcall	.-298    	; 0x14e0 <TINYNVM_SendWriteNVMRegister>
	XPROGTarget_SendByte(TINY_NVM_CMD_NOOP);
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	0e dd       	rcall	.-1508   	; 0x102a <XPROGTarget_SendByte>

	/* Send the address of the location to read from */
	TINYNVM_SendPointerAddress(ReadAddress);
    160e:	c8 01       	movw	r24, r16
    1610:	71 df       	rcall	.-286    	; 0x14f4 <TINYNVM_SendPointerAddress>
    1612:	06 c0       	rjmp	.+12     	; 0x1620 <TINYNVM_ReadMemory+0x38>

	while (ReadSize-- && !(TimeoutExpired))
	{
		/* Read the byte of data from the target */
		XPROGTarget_SendByte(TPI_CMD_SLD | TPI_POINTER_INDIRECT_PI);
    1614:	84 e2       	ldi	r24, 0x24	; 36
    1616:	09 dd       	rcall	.-1518   	; 0x102a <XPROGTarget_SendByte>
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
    1618:	34 dd       	rcall	.-1432   	; 0x1082 <XPROGTarget_ReceiveByte>
    161a:	f7 01       	movw	r30, r14
    161c:	81 93       	st	Z+, r24
    161e:	7f 01       	movw	r14, r30
	XPROGTarget_SendByte(TINY_NVM_CMD_NOOP);

	/* Send the address of the location to read from */
	TINYNVM_SendPointerAddress(ReadAddress);

	while (ReadSize-- && !(TimeoutExpired))
    1620:	20 97       	sbiw	r28, 0x00	; 0
    1622:	21 f0       	breq	.+8      	; 0x162c <TINYNVM_ReadMemory+0x44>
    1624:	8a b5       	in	r24, 0x2a	; 42
    1626:	21 97       	sbiw	r28, 0x01	; 1
    1628:	88 23       	and	r24, r24
    162a:	a1 f3       	breq	.-24     	; 0x1614 <TINYNVM_ReadMemory+0x2c>
		/* Read the byte of data from the target */
		XPROGTarget_SendByte(TPI_CMD_SLD | TPI_POINTER_INDIRECT_PI);
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
	}

	return (TimeoutExpired == false);
    162c:	8a b5       	in	r24, 0x2a	; 42
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	88 23       	and	r24, r24
    1632:	09 f4       	brne	.+2      	; 0x1636 <TINYNVM_ReadMemory+0x4e>
    1634:	91 e0       	ldi	r25, 0x01	; 1
}
    1636:	89 2f       	mov	r24, r25
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	1f 91       	pop	r17
    163e:	0f 91       	pop	r16
    1640:	ff 90       	pop	r15
    1642:	ef 90       	pop	r14
    1644:	08 95       	ret

00001646 <TINYNVM_WaitWhileNVMBusBusy>:
{
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the SLDCS command to read the TPI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(TPI_CMD_SLDCS | TPI_STATUS_REG);
    1646:	80 e8       	ldi	r24, 0x80	; 128
    1648:	f0 dc       	rcall	.-1568   	; 0x102a <XPROGTarget_SendByte>

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    164a:	1b dd       	rcall	.-1482   	; 0x1082 <XPROGTarget_ReceiveByte>
    164c:	98 2f       	mov	r25, r24

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutExpired)
    164e:	8a b5       	in	r24, 0x2a	; 42
    1650:	88 23       	and	r24, r24
    1652:	11 f0       	breq	.+4      	; 0x1658 <TINYNVM_WaitWhileNVMBusBusy+0x12>
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	08 95       	ret
		  return false;

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & TPI_STATUS_NVM)
    1658:	91 ff       	sbrs	r25, 1
    165a:	f5 cf       	rjmp	.-22     	; 0x1646 <TINYNVM_WaitWhileNVMBusBusy>
    165c:	81 e0       	ldi	r24, 0x01	; 1
		  return true;
	}
}
    165e:	08 95       	ret

00001660 <TINYNVM_DisableTPI>:
}

/** Removes access to the target's NVM controller and physically disables the target's physical TPI interface. */
void TINYNVM_DisableTPI(void)
{
	TINYNVM_WaitWhileNVMBusBusy();
    1660:	f2 df       	rcall	.-28     	; 0x1646 <TINYNVM_WaitWhileNVMBusBusy>

	/* Clear the NVMEN bit in the TPI STATUS register to disable TPI mode */
	XPROGTarget_SendByte(TPI_CMD_SSTCS | TPI_STATUS_REG);
    1662:	80 ec       	ldi	r24, 0xC0	; 192
    1664:	e2 dc       	rcall	.-1596   	; 0x102a <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x00);
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	e0 dc       	rcall	.-1600   	; 0x102a <XPROGTarget_SendByte>

	XPROGTarget_DisableTargetTPI();
}
    166a:	1a cd       	rjmp	.-1484   	; 0x10a0 <XPROGTarget_DisableTargetTPI>

0000166c <TINYNVM_EnableTPI>:
/** Enables the physical TPI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean true if the TPI interface was enabled successfully, false otherwise
 */
bool TINYNVM_EnableTPI(void)
{
    166c:	ef 92       	push	r14
    166e:	ff 92       	push	r15
    1670:	0f 93       	push	r16
    1672:	1f 93       	push	r17
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	28 97       	sbiw	r28, 0x08	; 8
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	de bf       	out	0x3e, r29	; 62
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	cd bf       	out	0x3d, r28	; 61
	/* Enable TPI programming mode with the attached target */
	XPROGTarget_EnableTargetTPI();
    1688:	9f dc       	rcall	.-1730   	; 0xfc8 <XPROGTarget_EnableTargetTPI>

	/* Lower direction change guard time to 0 USART bits */
	XPROGTarget_SendByte(TPI_CMD_SSTCS | TPI_CTRL_REG);
    168a:	82 ec       	ldi	r24, 0xC2	; 194
    168c:	ce dc       	rcall	.-1636   	; 0x102a <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x07);
    168e:	87 e0       	ldi	r24, 0x07	; 7
    1690:	cc dc       	rcall	.-1640   	; 0x102a <XPROGTarget_SendByte>

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(TPI_CMD_SKEY);
    1692:	80 ee       	ldi	r24, 0xE0	; 224
    1694:	ca dc       	rcall	.-1644   	; 0x102a <XPROGTarget_SendByte>
    1696:	8e 01       	movw	r16, r28
    1698:	08 5f       	subi	r16, 0xF8	; 248
    169a:	1f 4f       	sbci	r17, 0xFF	; 255
	for (uint8_t i = sizeof(TPI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(TPI_NVMENABLE_KEY[i - 1]);
    169c:	7e 01       	movw	r14, r28
    169e:	08 94       	sec
    16a0:	e1 1c       	adc	r14, r1
    16a2:	f1 1c       	adc	r15, r1
    16a4:	d7 01       	movw	r26, r14
    16a6:	ef e4       	ldi	r30, 0x4F	; 79
    16a8:	f1 e0       	ldi	r31, 0x01	; 1
    16aa:	88 e0       	ldi	r24, 0x08	; 8
    16ac:	01 90       	ld	r0, Z+
    16ae:	0d 92       	st	X+, r0
    16b0:	81 50       	subi	r24, 0x01	; 1
    16b2:	e1 f7       	brne	.-8      	; 0x16ac <TINYNVM_EnableTPI+0x40>
    16b4:	f8 01       	movw	r30, r16
    16b6:	80 81       	ld	r24, Z
    16b8:	b8 dc       	rcall	.-1680   	; 0x102a <XPROGTarget_SendByte>
    16ba:	01 50       	subi	r16, 0x01	; 1
    16bc:	10 40       	sbci	r17, 0x00	; 0
	XPROGTarget_SendByte(TPI_CMD_SSTCS | TPI_CTRL_REG);
	XPROGTarget_SendByte(0x07);

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(TPI_CMD_SKEY);
	for (uint8_t i = sizeof(TPI_NVMENABLE_KEY); i > 0; i--)
    16be:	0c 17       	cp	r16, r28
    16c0:	1d 07       	cpc	r17, r29
    16c2:	81 f7       	brne	.-32     	; 0x16a4 <TINYNVM_EnableTPI+0x38>
	  XPROGTarget_SendByte(TPI_NVMENABLE_KEY[i - 1]);

	/* Wait until the NVM bus becomes active */
	return TINYNVM_WaitWhileNVMBusBusy();
    16c4:	c0 df       	rcall	.-128    	; 0x1646 <TINYNVM_WaitWhileNVMBusBusy>
}
    16c6:	28 96       	adiw	r28, 0x08	; 8
    16c8:	0f b6       	in	r0, 0x3f	; 63
    16ca:	f8 94       	cli
    16cc:	de bf       	out	0x3e, r29	; 62
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	cd bf       	out	0x3d, r28	; 61
    16d2:	cf 91       	pop	r28
    16d4:	df 91       	pop	r29
    16d6:	1f 91       	pop	r17
    16d8:	0f 91       	pop	r16
    16da:	ff 90       	pop	r15
    16dc:	ef 90       	pop	r14
    16de:	08 95       	ret

000016e0 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    16e0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    16e4:	80 91 eb 00 	lds	r24, 0x00EB
    16e8:	81 60       	ori	r24, 0x01	; 1
    16ea:	80 93 eb 00 	sts	0x00EB, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
    16ee:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
    16f2:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
    16f6:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    16fa:	80 91 ee 00 	lds	r24, 0x00EE
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    16fe:	88 1f       	adc	r24, r24
    1700:	88 27       	eor	r24, r24
    1702:	88 1f       	adc	r24, r24
    1704:	08 95       	ret

00001706 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1706:	80 91 7c 02 	lds	r24, 0x027C
    170a:	88 23       	and	r24, r24
    170c:	8c f4       	brge	.+34     	; 0x1730 <Endpoint_ClearStatusStage+0x2a>
    170e:	03 c0       	rjmp	.+6      	; 0x1716 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1710:	8e b3       	in	r24, 0x1e	; 30
    1712:	88 23       	and	r24, r24
    1714:	b1 f0       	breq	.+44     	; 0x1742 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1716:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    171a:	82 ff       	sbrs	r24, 2
    171c:	f9 cf       	rjmp	.-14     	; 0x1710 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    171e:	80 91 e8 00 	lds	r24, 0x00E8
    1722:	8b 77       	andi	r24, 0x7B	; 123
    1724:	80 93 e8 00 	sts	0x00E8, r24
    1728:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    172a:	8e b3       	in	r24, 0x1e	; 30
    172c:	88 23       	and	r24, r24
    172e:	49 f0       	breq	.+18     	; 0x1742 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1730:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1734:	80 ff       	sbrs	r24, 0
    1736:	f9 cf       	rjmp	.-14     	; 0x172a <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1738:	80 91 e8 00 	lds	r24, 0x00E8
    173c:	8e 77       	andi	r24, 0x7E	; 126
    173e:	80 93 e8 00 	sts	0x00E8, r24
    1742:	08 95       	ret

00001744 <Endpoint_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1744:	40 91 e4 00 	lds	r20, 0x00E4
    1748:	50 91 e5 00 	lds	r21, 0x00E5
    174c:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
    174e:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
    1752:	80 78       	andi	r24, 0x80	; 128
    1754:	80 38       	cpi	r24, 0x80	; 128
    1756:	29 f4       	brne	.+10     	; 0x1762 <Endpoint_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1758:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
    175c:	80 ff       	sbrs	r24, 0
    175e:	05 c0       	rjmp	.+10     	; 0x176a <Endpoint_WaitUntilReady+0x26>
    1760:	21 c0       	rjmp	.+66     	; 0x17a4 <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1762:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1766:	82 fd       	sbrc	r24, 2
    1768:	1d c0       	rjmp	.+58     	; 0x17a4 <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    176a:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    176c:	88 23       	and	r24, r24
    176e:	11 f4       	brne	.+4      	; 0x1774 <Endpoint_WaitUntilReady+0x30>
    1770:	82 e0       	ldi	r24, 0x02	; 2
    1772:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1774:	85 30       	cpi	r24, 0x05	; 5
    1776:	11 f4       	brne	.+4      	; 0x177c <Endpoint_WaitUntilReady+0x38>
    1778:	83 e0       	ldi	r24, 0x03	; 3
    177a:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    177c:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1780:	85 ff       	sbrs	r24, 5
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <Endpoint_WaitUntilReady+0x44>
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	08 95       	ret
    1788:	80 91 e4 00 	lds	r24, 0x00E4
    178c:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1790:	84 17       	cp	r24, r20
    1792:	95 07       	cpc	r25, r21
    1794:	e1 f2       	breq	.-72     	; 0x174e <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1796:	22 23       	and	r18, r18
    1798:	11 f4       	brne	.+4      	; 0x179e <Endpoint_WaitUntilReady+0x5a>
    179a:	84 e0       	ldi	r24, 0x04	; 4
    179c:	08 95       	ret
    179e:	21 50       	subi	r18, 0x01	; 1
    17a0:	ac 01       	movw	r20, r24
    17a2:	d5 cf       	rjmp	.-86     	; 0x174e <Endpoint_WaitUntilReady+0xa>
    17a4:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    17a6:	08 95       	ret

000017a8 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    17a8:	ef 92       	push	r14
    17aa:	ff 92       	push	r15
    17ac:	0f 93       	push	r16
    17ae:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    17b0:	48 d0       	rcall	.+144    	; 0x1842 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    17b2:	4f d0       	rcall	.+158    	; 0x1852 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    17b4:	08 ed       	ldi	r16, 0xD8	; 216
    17b6:	10 e0       	ldi	r17, 0x00	; 0
    17b8:	f8 01       	movw	r30, r16
    17ba:	80 81       	ld	r24, Z
    17bc:	8f 77       	andi	r24, 0x7F	; 127
    17be:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
    17c0:	80 81       	ld	r24, Z
    17c2:	80 68       	ori	r24, 0x80	; 128
    17c4:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    17c6:	80 81       	ld	r24, Z
    17c8:	8f 7d       	andi	r24, 0xDF	; 223
    17ca:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    17cc:	e7 ed       	ldi	r30, 0xD7	; 215
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	80 68       	ori	r24, 0x80	; 128
    17d4:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    17d6:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    17d8:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
    17da:	10 92 7a 02 	sts	0x027A, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    17de:	80 ee       	ldi	r24, 0xE0	; 224
    17e0:	e8 2e       	mov	r14, r24
    17e2:	f1 2c       	mov	r15, r1
    17e4:	f7 01       	movw	r30, r14
    17e6:	80 81       	ld	r24, Z
    17e8:	8b 7f       	andi	r24, 0xFB	; 251
    17ea:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    17ec:	f8 01       	movw	r30, r16
    17ee:	80 81       	ld	r24, Z
    17f0:	81 60       	ori	r24, 0x01	; 1
    17f2:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	60 e0       	ldi	r22, 0x00	; 0
    17f8:	42 e0       	ldi	r20, 0x02	; 2
    17fa:	72 df       	rcall	.-284    	; 0x16e0 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    17fc:	e1 ee       	ldi	r30, 0xE1	; 225
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	8e 7f       	andi	r24, 0xFE	; 254
    1804:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1806:	e2 ee       	ldi	r30, 0xE2	; 226
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	81 60       	ori	r24, 0x01	; 1
    180e:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1810:	80 81       	ld	r24, Z
    1812:	88 60       	ori	r24, 0x08	; 8
    1814:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1816:	f7 01       	movw	r30, r14
    1818:	80 81       	ld	r24, Z
    181a:	8e 7f       	andi	r24, 0xFE	; 254
    181c:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    181e:	f8 01       	movw	r30, r16
    1820:	80 81       	ld	r24, Z
    1822:	80 61       	ori	r24, 0x10	; 16
    1824:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1826:	1f 91       	pop	r17
    1828:	0f 91       	pop	r16
    182a:	ff 90       	pop	r15
    182c:	ef 90       	pop	r14
    182e:	08 95       	ret

00001830 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    1830:	e7 ed       	ldi	r30, 0xD7	; 215
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	81 60       	ori	r24, 0x01	; 1
    1838:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	80 93 7b 02 	sts	0x027B, r24

	USB_ResetInterface();
}
    1840:	b3 cf       	rjmp	.-154    	; 0x17a8 <USB_ResetInterface>

00001842 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1842:	e8 ed       	ldi	r30, 0xD8	; 216
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	8c 7f       	andi	r24, 0xFC	; 252
    184a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    184c:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    1850:	08 95       	ret

00001852 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1852:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1856:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    185a:	08 95       	ret

0000185c <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    185c:	1f 92       	push	r1
    185e:	0f 92       	push	r0
    1860:	0f b6       	in	r0, 0x3f	; 63
    1862:	0f 92       	push	r0
    1864:	0b b6       	in	r0, 0x3b	; 59
    1866:	0f 92       	push	r0
    1868:	11 24       	eor	r1, r1
    186a:	2f 93       	push	r18
    186c:	3f 93       	push	r19
    186e:	4f 93       	push	r20
    1870:	5f 93       	push	r21
    1872:	6f 93       	push	r22
    1874:	7f 93       	push	r23
    1876:	8f 93       	push	r24
    1878:	9f 93       	push	r25
    187a:	af 93       	push	r26
    187c:	bf 93       	push	r27
    187e:	ef 93       	push	r30
    1880:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1882:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1886:	82 ff       	sbrs	r24, 2
    1888:	0a c0       	rjmp	.+20     	; 0x189e <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    188a:	80 91 e2 00 	lds	r24, 0x00E2
    188e:	82 ff       	sbrs	r24, 2
    1890:	06 c0       	rjmp	.+12     	; 0x189e <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1892:	80 91 e1 00 	lds	r24, 0x00E1
    1896:	8b 7f       	andi	r24, 0xFB	; 251
    1898:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    189c:	f8 d3       	rcall	.+2032   	; 0x208e <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    189e:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    18a2:	80 ff       	sbrs	r24, 0
    18a4:	1d c0       	rjmp	.+58     	; 0x18e0 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    18a6:	80 91 d8 00 	lds	r24, 0x00D8
    18aa:	80 ff       	sbrs	r24, 0
    18ac:	19 c0       	rjmp	.+50     	; 0x18e0 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    18ae:	80 91 da 00 	lds	r24, 0x00DA
    18b2:	8e 7f       	andi	r24, 0xFE	; 254
    18b4:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    18b8:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    18bc:	80 ff       	sbrs	r24, 0
    18be:	0c c0       	rjmp	.+24     	; 0x18d8 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    18c0:	8c e0       	ldi	r24, 0x0C	; 12
    18c2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    18c4:	8e e0       	ldi	r24, 0x0E	; 14
    18c6:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    18c8:	09 b4       	in	r0, 0x29	; 41
    18ca:	00 fe       	sbrs	r0, 0
    18cc:	fd cf       	rjmp	.-6      	; 0x18c8 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    18d2:	0e 94 05 01 	call	0x20a	; 0x20a <EVENT_USB_Device_Connect>
    18d6:	04 c0       	rjmp	.+8      	; 0x18e0 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    18d8:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    18da:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
    18dc:	0e 94 07 01 	call	0x20e	; 0x20e <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    18e0:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    18e4:	80 ff       	sbrs	r24, 0
    18e6:	17 c0       	rjmp	.+46     	; 0x1916 <__vector_10+0xba>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    18e8:	80 91 e2 00 	lds	r24, 0x00E2
    18ec:	80 ff       	sbrs	r24, 0
    18ee:	13 c0       	rjmp	.+38     	; 0x1916 <__vector_10+0xba>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    18f0:	80 91 e2 00 	lds	r24, 0x00E2
    18f4:	8e 7f       	andi	r24, 0xFE	; 254
    18f6:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    18fa:	80 91 e2 00 	lds	r24, 0x00E2
    18fe:	80 61       	ori	r24, 0x10	; 16
    1900:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
    1904:	80 91 d8 00 	lds	r24, 0x00D8
    1908:	80 62       	ori	r24, 0x20	; 32
    190a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    190e:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1910:	85 e0       	ldi	r24, 0x05	; 5
    1912:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
    1914:	bc d3       	rcall	.+1912   	; 0x208e <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1916:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    191a:	84 ff       	sbrs	r24, 4
    191c:	2c c0       	rjmp	.+88     	; 0x1976 <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    191e:	80 91 e2 00 	lds	r24, 0x00E2
    1922:	84 ff       	sbrs	r24, 4
    1924:	28 c0       	rjmp	.+80     	; 0x1976 <__vector_10+0x11a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1926:	8c e0       	ldi	r24, 0x0C	; 12
    1928:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    192a:	8e e0       	ldi	r24, 0x0E	; 14
    192c:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    192e:	09 b4       	in	r0, 0x29	; 41
    1930:	00 fe       	sbrs	r0, 0
    1932:	fd cf       	rjmp	.-6      	; 0x192e <__vector_10+0xd2>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    1934:	80 91 d8 00 	lds	r24, 0x00D8
    1938:	8f 7d       	andi	r24, 0xDF	; 223
    193a:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    193e:	80 91 e1 00 	lds	r24, 0x00E1
    1942:	8f 7e       	andi	r24, 0xEF	; 239
    1944:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1948:	80 91 e2 00 	lds	r24, 0x00E2
    194c:	8f 7e       	andi	r24, 0xEF	; 239
    194e:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1952:	80 91 e2 00 	lds	r24, 0x00E2
    1956:	81 60       	ori	r24, 0x01	; 1
    1958:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    195c:	80 91 7a 02 	lds	r24, 0x027A
    1960:	88 23       	and	r24, r24
    1962:	31 f4       	brne	.+12     	; 0x1970 <__vector_10+0x114>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1964:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1968:	87 fd       	sbrc	r24, 7
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <__vector_10+0x114>
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	01 c0       	rjmp	.+2      	; 0x1972 <__vector_10+0x116>
    1970:	84 e0       	ldi	r24, 0x04	; 4
    1972:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1974:	8c d3       	rcall	.+1816   	; 0x208e <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1976:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    197a:	83 ff       	sbrs	r24, 3
    197c:	21 c0       	rjmp	.+66     	; 0x19c0 <__vector_10+0x164>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    197e:	80 91 e2 00 	lds	r24, 0x00E2
    1982:	83 ff       	sbrs	r24, 3
    1984:	1d c0       	rjmp	.+58     	; 0x19c0 <__vector_10+0x164>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1986:	80 91 e1 00 	lds	r24, 0x00E1
    198a:	87 7f       	andi	r24, 0xF7	; 247
    198c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1990:	82 e0       	ldi	r24, 0x02	; 2
    1992:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
    1994:	10 92 7a 02 	sts	0x027A, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1998:	80 91 e1 00 	lds	r24, 0x00E1
    199c:	8e 7f       	andi	r24, 0xFE	; 254
    199e:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    19a2:	80 91 e2 00 	lds	r24, 0x00E2
    19a6:	8e 7f       	andi	r24, 0xFE	; 254
    19a8:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    19ac:	80 91 e2 00 	lds	r24, 0x00E2
    19b0:	80 61       	ori	r24, 0x10	; 16
    19b2:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	60 e0       	ldi	r22, 0x00	; 0
    19ba:	42 e0       	ldi	r20, 0x02	; 2
    19bc:	91 de       	rcall	.-734    	; 0x16e0 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    19be:	67 d3       	rcall	.+1742   	; 0x208e <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    19c0:	ff 91       	pop	r31
    19c2:	ef 91       	pop	r30
    19c4:	bf 91       	pop	r27
    19c6:	af 91       	pop	r26
    19c8:	9f 91       	pop	r25
    19ca:	8f 91       	pop	r24
    19cc:	7f 91       	pop	r23
    19ce:	6f 91       	pop	r22
    19d0:	5f 91       	pop	r21
    19d2:	4f 91       	pop	r20
    19d4:	3f 91       	pop	r19
    19d6:	2f 91       	pop	r18
    19d8:	0f 90       	pop	r0
    19da:	0b be       	out	0x3b, r0	; 59
    19dc:	0f 90       	pop	r0
    19de:	0f be       	out	0x3f, r0	; 63
    19e0:	0f 90       	pop	r0
    19e2:	1f 90       	pop	r1
    19e4:	18 95       	reti

000019e6 <Endpoint_Write_Control_Stream_LE>:
    19e6:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    19e8:	40 91 82 02 	lds	r20, 0x0282
    19ec:	50 91 83 02 	lds	r21, 0x0283
    19f0:	46 17       	cp	r20, r22
    19f2:	57 07       	cpc	r21, r23
    19f4:	18 f4       	brcc	.+6      	; 0x19fc <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    19f6:	f9 01       	movw	r30, r18
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	3c c0       	rjmp	.+120    	; 0x1a74 <Endpoint_Write_Control_Stream_LE+0x8e>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    19fc:	61 15       	cp	r22, r1
    19fe:	71 05       	cpc	r23, r1
    1a00:	11 f0       	breq	.+4      	; 0x1a06 <Endpoint_Write_Control_Stream_LE+0x20>
    1a02:	ab 01       	movw	r20, r22
    1a04:	f8 cf       	rjmp	.-16     	; 0x19f6 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a06:	80 91 e8 00 	lds	r24, 0x00E8
    1a0a:	8e 77       	andi	r24, 0x7E	; 126
    1a0c:	80 93 e8 00 	sts	0x00E8, r24
    1a10:	40 e0       	ldi	r20, 0x00	; 0
    1a12:	50 e0       	ldi	r21, 0x00	; 0
    1a14:	f0 cf       	rjmp	.-32     	; 0x19f6 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a16:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a18:	88 23       	and	r24, r24
    1a1a:	e9 f1       	breq	.+122    	; 0x1a96 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a1c:	85 30       	cpi	r24, 0x05	; 5
    1a1e:	e9 f1       	breq	.+122    	; 0x1a9a <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a20:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1a24:	83 ff       	sbrs	r24, 3
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <Endpoint_Write_Control_Stream_LE+0x46>
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a2c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1a30:	82 fd       	sbrc	r24, 2
    1a32:	2b c0       	rjmp	.+86     	; 0x1a8a <Endpoint_Write_Control_Stream_LE+0xa4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a34:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1a38:	80 ff       	sbrs	r24, 0
    1a3a:	1c c0       	rjmp	.+56     	; 0x1a74 <Endpoint_Write_Control_Stream_LE+0x8e>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    1a3c:	20 91 f2 00 	lds	r18, 0x00F2
    1a40:	30 91 f3 00 	lds	r19, 0x00F3
    1a44:	07 c0       	rjmp	.+14     	; 0x1a54 <Endpoint_Write_Control_Stream_LE+0x6e>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1a46:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1a48:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1a4c:	41 50       	subi	r20, 0x01	; 1
    1a4e:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    1a50:	2f 5f       	subi	r18, 0xFF	; 255
    1a52:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1a54:	41 15       	cp	r20, r1
    1a56:	51 05       	cpc	r21, r1
    1a58:	19 f0       	breq	.+6      	; 0x1a60 <Endpoint_Write_Control_Stream_LE+0x7a>
    1a5a:	28 30       	cpi	r18, 0x08	; 8
    1a5c:	31 05       	cpc	r19, r1
    1a5e:	98 f3       	brcs	.-26     	; 0x1a46 <Endpoint_Write_Control_Stream_LE+0x60>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	28 30       	cpi	r18, 0x08	; 8
    1a64:	31 05       	cpc	r19, r1
    1a66:	09 f4       	brne	.+2      	; 0x1a6a <Endpoint_Write_Control_Stream_LE+0x84>
    1a68:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a6a:	80 91 e8 00 	lds	r24, 0x00E8
    1a6e:	8e 77       	andi	r24, 0x7E	; 126
    1a70:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1a74:	41 15       	cp	r20, r1
    1a76:	51 05       	cpc	r21, r1
    1a78:	71 f6       	brne	.-100    	; 0x1a16 <Endpoint_Write_Control_Stream_LE+0x30>
    1a7a:	99 23       	and	r25, r25
    1a7c:	61 f6       	brne	.-104    	; 0x1a16 <Endpoint_Write_Control_Stream_LE+0x30>
    1a7e:	05 c0       	rjmp	.+10     	; 0x1a8a <Endpoint_Write_Control_Stream_LE+0xa4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a80:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a82:	88 23       	and	r24, r24
    1a84:	41 f0       	breq	.+16     	; 0x1a96 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a86:	85 30       	cpi	r24, 0x05	; 5
    1a88:	41 f0       	breq	.+16     	; 0x1a9a <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a8a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1a8e:	82 ff       	sbrs	r24, 2
    1a90:	f7 cf       	rjmp	.-18     	; 0x1a80 <Endpoint_Write_Control_Stream_LE+0x9a>
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	08 95       	ret
    1a96:	82 e0       	ldi	r24, 0x02	; 2
    1a98:	08 95       	ret
    1a9a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1a9c:	08 95       	ret

00001a9e <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    1a9e:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    1aa0:	61 15       	cp	r22, r1
    1aa2:	71 05       	cpc	r23, r1
    1aa4:	29 f4       	brne	.+10     	; 0x1ab0 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1aa6:	80 91 e8 00 	lds	r24, 0x00E8
    1aaa:	8b 77       	andi	r24, 0x7B	; 123
    1aac:	80 93 e8 00 	sts	0x00E8, r24
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1ab0:	f9 01       	movw	r30, r18
    1ab2:	21 c0       	rjmp	.+66     	; 0x1af6 <Endpoint_Read_Control_Stream_LE+0x58>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1ab4:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1ab6:	88 23       	and	r24, r24
    1ab8:	69 f1       	breq	.+90     	; 0x1b14 <Endpoint_Read_Control_Stream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1aba:	85 30       	cpi	r24, 0x05	; 5
    1abc:	69 f1       	breq	.+90     	; 0x1b18 <Endpoint_Read_Control_Stream_LE+0x7a>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1abe:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1ac2:	83 ff       	sbrs	r24, 3
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <Endpoint_Read_Control_Stream_LE+0x2c>
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1aca:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    1ace:	82 ff       	sbrs	r24, 2
    1ad0:	f1 cf       	rjmp	.-30     	; 0x1ab4 <Endpoint_Read_Control_Stream_LE+0x16>
    1ad2:	06 c0       	rjmp	.+12     	; 0x1ae0 <Endpoint_Read_Control_Stream_LE+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1ad4:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1ad8:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1ada:	61 50       	subi	r22, 0x01	; 1
    1adc:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    1ade:	31 f0       	breq	.+12     	; 0x1aec <Endpoint_Read_Control_Stream_LE+0x4e>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    1ae0:	80 91 f2 00 	lds	r24, 0x00F2
    1ae4:	90 91 f3 00 	lds	r25, 0x00F3
    1ae8:	89 2b       	or	r24, r25
    1aea:	a1 f7       	brne	.-24     	; 0x1ad4 <Endpoint_Read_Control_Stream_LE+0x36>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1aec:	80 91 e8 00 	lds	r24, 0x00E8
    1af0:	8b 77       	andi	r24, 0x7B	; 123
    1af2:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    1af6:	61 15       	cp	r22, r1
    1af8:	71 05       	cpc	r23, r1
    1afa:	e1 f6       	brne	.-72     	; 0x1ab4 <Endpoint_Read_Control_Stream_LE+0x16>
    1afc:	05 c0       	rjmp	.+10     	; 0x1b08 <Endpoint_Read_Control_Stream_LE+0x6a>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1afe:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b00:	88 23       	and	r24, r24
    1b02:	41 f0       	breq	.+16     	; 0x1b14 <Endpoint_Read_Control_Stream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b04:	85 30       	cpi	r24, 0x05	; 5
    1b06:	41 f0       	breq	.+16     	; 0x1b18 <Endpoint_Read_Control_Stream_LE+0x7a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b08:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    1b0c:	80 ff       	sbrs	r24, 0
    1b0e:	f7 cf       	rjmp	.-18     	; 0x1afe <Endpoint_Read_Control_Stream_LE+0x60>
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	08 95       	ret
    1b14:	82 e0       	ldi	r24, 0x02	; 2
    1b16:	08 95       	ret
    1b18:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1b1a:	08 95       	ret

00001b1c <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    1b1c:	fc 01       	movw	r30, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1b1e:	40 91 82 02 	lds	r20, 0x0282
    1b22:	50 91 83 02 	lds	r21, 0x0283
    1b26:	46 17       	cp	r20, r22
    1b28:	57 07       	cpc	r21, r23
    1b2a:	10 f4       	brcc	.+4      	; 0x1b30 <Endpoint_Write_Control_PStream_LE+0x14>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	3f c0       	rjmp	.+126    	; 0x1bae <Endpoint_Write_Control_PStream_LE+0x92>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1b30:	61 15       	cp	r22, r1
    1b32:	71 05       	cpc	r23, r1
    1b34:	11 f0       	breq	.+4      	; 0x1b3a <Endpoint_Write_Control_PStream_LE+0x1e>
    1b36:	ab 01       	movw	r20, r22
    1b38:	f9 cf       	rjmp	.-14     	; 0x1b2c <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b3a:	80 91 e8 00 	lds	r24, 0x00E8
    1b3e:	8e 77       	andi	r24, 0x7E	; 126
    1b40:	80 93 e8 00 	sts	0x00E8, r24
    1b44:	40 e0       	ldi	r20, 0x00	; 0
    1b46:	50 e0       	ldi	r21, 0x00	; 0
    1b48:	f1 cf       	rjmp	.-30     	; 0x1b2c <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b4a:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b4c:	88 23       	and	r24, r24
    1b4e:	09 f4       	brne	.+2      	; 0x1b52 <Endpoint_Write_Control_PStream_LE+0x36>
    1b50:	3f c0       	rjmp	.+126    	; 0x1bd0 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b52:	85 30       	cpi	r24, 0x05	; 5
    1b54:	09 f4       	brne	.+2      	; 0x1b58 <Endpoint_Write_Control_PStream_LE+0x3c>
    1b56:	3e c0       	rjmp	.+124    	; 0x1bd4 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b58:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1b5c:	83 ff       	sbrs	r24, 3
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <Endpoint_Write_Control_PStream_LE+0x48>
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b64:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1b68:	82 fd       	sbrc	r24, 2
    1b6a:	2c c0       	rjmp	.+88     	; 0x1bc4 <Endpoint_Write_Control_PStream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b6c:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1b70:	80 ff       	sbrs	r24, 0
    1b72:	1d c0       	rjmp	.+58     	; 0x1bae <Endpoint_Write_Control_PStream_LE+0x92>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    1b74:	20 91 f2 00 	lds	r18, 0x00F2
    1b78:	30 91 f3 00 	lds	r19, 0x00F3
    1b7c:	08 c0       	rjmp	.+16     	; 0x1b8e <Endpoint_Write_Control_PStream_LE+0x72>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1b7e:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1b80:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1b84:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1b86:	41 50       	subi	r20, 0x01	; 1
    1b88:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    1b8a:	2f 5f       	subi	r18, 0xFF	; 255
    1b8c:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1b8e:	41 15       	cp	r20, r1
    1b90:	51 05       	cpc	r21, r1
    1b92:	19 f0       	breq	.+6      	; 0x1b9a <Endpoint_Write_Control_PStream_LE+0x7e>
    1b94:	28 30       	cpi	r18, 0x08	; 8
    1b96:	31 05       	cpc	r19, r1
    1b98:	90 f3       	brcs	.-28     	; 0x1b7e <Endpoint_Write_Control_PStream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	28 30       	cpi	r18, 0x08	; 8
    1b9e:	31 05       	cpc	r19, r1
    1ba0:	09 f4       	brne	.+2      	; 0x1ba4 <Endpoint_Write_Control_PStream_LE+0x88>
    1ba2:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ba4:	80 91 e8 00 	lds	r24, 0x00E8
    1ba8:	8e 77       	andi	r24, 0x7E	; 126
    1baa:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1bae:	41 15       	cp	r20, r1
    1bb0:	51 05       	cpc	r21, r1
    1bb2:	59 f6       	brne	.-106    	; 0x1b4a <Endpoint_Write_Control_PStream_LE+0x2e>
    1bb4:	99 23       	and	r25, r25
    1bb6:	49 f6       	brne	.-110    	; 0x1b4a <Endpoint_Write_Control_PStream_LE+0x2e>
    1bb8:	05 c0       	rjmp	.+10     	; 0x1bc4 <Endpoint_Write_Control_PStream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1bba:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1bbc:	88 23       	and	r24, r24
    1bbe:	41 f0       	breq	.+16     	; 0x1bd0 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1bc0:	85 30       	cpi	r24, 0x05	; 5
    1bc2:	41 f0       	breq	.+16     	; 0x1bd4 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1bc4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1bc8:	82 ff       	sbrs	r24, 2
    1bca:	f7 cf       	rjmp	.-18     	; 0x1bba <Endpoint_Write_Control_PStream_LE+0x9e>
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	08 95       	ret
    1bd0:	82 e0       	ldi	r24, 0x02	; 2
    1bd2:	08 95       	ret
    1bd4:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1bd6:	08 95       	ret

00001bd8 <Endpoint_Read_Stream_BE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1bd8:	bf 92       	push	r11
    1bda:	cf 92       	push	r12
    1bdc:	df 92       	push	r13
    1bde:	ef 92       	push	r14
    1be0:	ff 92       	push	r15
    1be2:	0f 93       	push	r16
    1be4:	1f 93       	push	r17
    1be6:	cf 93       	push	r28
    1be8:	df 93       	push	r29
    1bea:	8c 01       	movw	r16, r24
    1bec:	eb 01       	movw	r28, r22
    1bee:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1bf0:	a9 dd       	rcall	.-1198   	; 0x1744 <Endpoint_WaitUntilReady>
    1bf2:	b8 2e       	mov	r11, r24
    1bf4:	88 23       	and	r24, r24
    1bf6:	b9 f5       	brne	.+110    	; 0x1c66 <Endpoint_Read_Stream_BE+0x8e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1bf8:	21 97       	sbiw	r28, 0x01	; 1
    1bfa:	0c 0f       	add	r16, r28
    1bfc:	1d 1f       	adc	r17, r29
    1bfe:	21 96       	adiw	r28, 0x01	; 1
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1c00:	c1 14       	cp	r12, r1
    1c02:	d1 04       	cpc	r13, r1
    1c04:	39 f0       	breq	.+14     	; 0x1c14 <Endpoint_Read_Stream_BE+0x3c>
	{
		Length -= *BytesProcessed;
    1c06:	f6 01       	movw	r30, r12
    1c08:	80 81       	ld	r24, Z
    1c0a:	91 81       	ldd	r25, Z+1	; 0x01
    1c0c:	c8 1b       	sub	r28, r24
    1c0e:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1c10:	08 1b       	sub	r16, r24
    1c12:	19 0b       	sbc	r17, r25
    1c14:	ee 24       	eor	r14, r14
    1c16:	ff 24       	eor	r15, r15
    1c18:	24 c0       	rjmp	.+72     	; 0x1c62 <Endpoint_Read_Stream_BE+0x8a>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1c1a:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1c1e:	85 fd       	sbrc	r24, 5
    1c20:	16 c0       	rjmp	.+44     	; 0x1c4e <Endpoint_Read_Stream_BE+0x76>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1c22:	80 91 e8 00 	lds	r24, 0x00E8
    1c26:	8b 77       	andi	r24, 0x7B	; 123
    1c28:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    1c2c:	c1 14       	cp	r12, r1
    1c2e:	d1 04       	cpc	r13, r1
    1c30:	49 f0       	breq	.+18     	; 0x1c44 <Endpoint_Read_Stream_BE+0x6c>
			{
				*BytesProcessed += BytesInTransfer;
    1c32:	f6 01       	movw	r30, r12
    1c34:	80 81       	ld	r24, Z
    1c36:	91 81       	ldd	r25, Z+1	; 0x01
    1c38:	8e 0d       	add	r24, r14
    1c3a:	9f 1d       	adc	r25, r15
    1c3c:	91 83       	std	Z+1, r25	; 0x01
    1c3e:	80 83       	st	Z, r24
    1c40:	85 e0       	ldi	r24, 0x05	; 5
    1c42:	12 c0       	rjmp	.+36     	; 0x1c68 <Endpoint_Read_Stream_BE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    1c44:	25 d2       	rcall	.+1098   	; 0x2090 <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1c46:	7e dd       	rcall	.-1284   	; 0x1744 <Endpoint_WaitUntilReady>
    1c48:	88 23       	and	r24, r24
    1c4a:	59 f0       	breq	.+22     	; 0x1c62 <Endpoint_Read_Stream_BE+0x8a>
    1c4c:	0d c0       	rjmp	.+26     	; 0x1c68 <Endpoint_Read_Stream_BE+0x90>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1c4e:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1c52:	f8 01       	movw	r30, r16
    1c54:	80 83       	st	Z, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1c56:	01 50       	subi	r16, 0x01	; 1
    1c58:	10 40       	sbci	r17, 0x00	; 0
			Length--;
    1c5a:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    1c5c:	08 94       	sec
    1c5e:	e1 1c       	adc	r14, r1
    1c60:	f1 1c       	adc	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1c62:	20 97       	sbiw	r28, 0x00	; 0
    1c64:	d1 f6       	brne	.-76     	; 0x1c1a <Endpoint_Read_Stream_BE+0x42>
    1c66:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1c68:	df 91       	pop	r29
    1c6a:	cf 91       	pop	r28
    1c6c:	1f 91       	pop	r17
    1c6e:	0f 91       	pop	r16
    1c70:	ff 90       	pop	r15
    1c72:	ef 90       	pop	r14
    1c74:	df 90       	pop	r13
    1c76:	cf 90       	pop	r12
    1c78:	bf 90       	pop	r11
    1c7a:	08 95       	ret

00001c7c <Endpoint_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1c7c:	bf 92       	push	r11
    1c7e:	cf 92       	push	r12
    1c80:	df 92       	push	r13
    1c82:	ef 92       	push	r14
    1c84:	ff 92       	push	r15
    1c86:	0f 93       	push	r16
    1c88:	1f 93       	push	r17
    1c8a:	cf 93       	push	r28
    1c8c:	df 93       	push	r29
    1c8e:	ec 01       	movw	r28, r24
    1c90:	8b 01       	movw	r16, r22
    1c92:	7a 01       	movw	r14, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1c94:	57 dd       	rcall	.-1362   	; 0x1744 <Endpoint_WaitUntilReady>
    1c96:	b8 2e       	mov	r11, r24
    1c98:	88 23       	and	r24, r24
    1c9a:	91 f5       	brne	.+100    	; 0x1d00 <Endpoint_Read_Stream_LE+0x84>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1c9c:	e1 14       	cp	r14, r1
    1c9e:	f1 04       	cpc	r15, r1
    1ca0:	39 f0       	breq	.+14     	; 0x1cb0 <Endpoint_Read_Stream_LE+0x34>
	{
		Length -= *BytesProcessed;
    1ca2:	f7 01       	movw	r30, r14
    1ca4:	80 81       	ld	r24, Z
    1ca6:	91 81       	ldd	r25, Z+1	; 0x01
    1ca8:	08 1b       	sub	r16, r24
    1caa:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1cac:	c8 0f       	add	r28, r24
    1cae:	d9 1f       	adc	r29, r25
    1cb0:	cc 24       	eor	r12, r12
    1cb2:	dd 24       	eor	r13, r13
    1cb4:	22 c0       	rjmp	.+68     	; 0x1cfa <Endpoint_Read_Stream_LE+0x7e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1cb6:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1cba:	85 fd       	sbrc	r24, 5
    1cbc:	16 c0       	rjmp	.+44     	; 0x1cea <Endpoint_Read_Stream_LE+0x6e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1cbe:	80 91 e8 00 	lds	r24, 0x00E8
    1cc2:	8b 77       	andi	r24, 0x7B	; 123
    1cc4:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    1cc8:	e1 14       	cp	r14, r1
    1cca:	f1 04       	cpc	r15, r1
    1ccc:	49 f0       	breq	.+18     	; 0x1ce0 <Endpoint_Read_Stream_LE+0x64>
			{
				*BytesProcessed += BytesInTransfer;
    1cce:	f7 01       	movw	r30, r14
    1cd0:	80 81       	ld	r24, Z
    1cd2:	91 81       	ldd	r25, Z+1	; 0x01
    1cd4:	8c 0d       	add	r24, r12
    1cd6:	9d 1d       	adc	r25, r13
    1cd8:	91 83       	std	Z+1, r25	; 0x01
    1cda:	80 83       	st	Z, r24
    1cdc:	85 e0       	ldi	r24, 0x05	; 5
    1cde:	11 c0       	rjmp	.+34     	; 0x1d02 <Endpoint_Read_Stream_LE+0x86>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    1ce0:	d7 d1       	rcall	.+942    	; 0x2090 <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1ce2:	30 dd       	rcall	.-1440   	; 0x1744 <Endpoint_WaitUntilReady>
    1ce4:	88 23       	and	r24, r24
    1ce6:	49 f0       	breq	.+18     	; 0x1cfa <Endpoint_Read_Stream_LE+0x7e>
    1ce8:	0c c0       	rjmp	.+24     	; 0x1d02 <Endpoint_Read_Stream_LE+0x86>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1cea:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1cee:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1cf0:	01 50       	subi	r16, 0x01	; 1
    1cf2:	10 40       	sbci	r17, 0x00	; 0
			BytesInTransfer++;
    1cf4:	08 94       	sec
    1cf6:	c1 1c       	adc	r12, r1
    1cf8:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1cfa:	01 15       	cp	r16, r1
    1cfc:	11 05       	cpc	r17, r1
    1cfe:	d9 f6       	brne	.-74     	; 0x1cb6 <Endpoint_Read_Stream_LE+0x3a>
    1d00:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1d02:	df 91       	pop	r29
    1d04:	cf 91       	pop	r28
    1d06:	1f 91       	pop	r17
    1d08:	0f 91       	pop	r16
    1d0a:	ff 90       	pop	r15
    1d0c:	ef 90       	pop	r14
    1d0e:	df 90       	pop	r13
    1d10:	cf 90       	pop	r12
    1d12:	bf 90       	pop	r11
    1d14:	08 95       	ret

00001d16 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1d16:	bf 92       	push	r11
    1d18:	cf 92       	push	r12
    1d1a:	df 92       	push	r13
    1d1c:	ef 92       	push	r14
    1d1e:	ff 92       	push	r15
    1d20:	0f 93       	push	r16
    1d22:	1f 93       	push	r17
    1d24:	cf 93       	push	r28
    1d26:	df 93       	push	r29
    1d28:	ec 01       	movw	r28, r24
    1d2a:	8b 01       	movw	r16, r22
    1d2c:	7a 01       	movw	r14, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1d2e:	0a dd       	rcall	.-1516   	; 0x1744 <Endpoint_WaitUntilReady>
    1d30:	b8 2e       	mov	r11, r24
    1d32:	88 23       	and	r24, r24
    1d34:	91 f5       	brne	.+100    	; 0x1d9a <Endpoint_Write_Stream_LE+0x84>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1d36:	e1 14       	cp	r14, r1
    1d38:	f1 04       	cpc	r15, r1
    1d3a:	39 f0       	breq	.+14     	; 0x1d4a <Endpoint_Write_Stream_LE+0x34>
	{
		Length -= *BytesProcessed;
    1d3c:	f7 01       	movw	r30, r14
    1d3e:	80 81       	ld	r24, Z
    1d40:	91 81       	ldd	r25, Z+1	; 0x01
    1d42:	08 1b       	sub	r16, r24
    1d44:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1d46:	c8 0f       	add	r28, r24
    1d48:	d9 1f       	adc	r29, r25
    1d4a:	cc 24       	eor	r12, r12
    1d4c:	dd 24       	eor	r13, r13
    1d4e:	22 c0       	rjmp	.+68     	; 0x1d94 <Endpoint_Write_Stream_LE+0x7e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1d50:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1d54:	85 fd       	sbrc	r24, 5
    1d56:	16 c0       	rjmp	.+44     	; 0x1d84 <Endpoint_Write_Stream_LE+0x6e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1d58:	80 91 e8 00 	lds	r24, 0x00E8
    1d5c:	8e 77       	andi	r24, 0x7E	; 126
    1d5e:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    1d62:	e1 14       	cp	r14, r1
    1d64:	f1 04       	cpc	r15, r1
    1d66:	49 f0       	breq	.+18     	; 0x1d7a <Endpoint_Write_Stream_LE+0x64>
			{
				*BytesProcessed += BytesInTransfer;
    1d68:	f7 01       	movw	r30, r14
    1d6a:	80 81       	ld	r24, Z
    1d6c:	91 81       	ldd	r25, Z+1	; 0x01
    1d6e:	8c 0d       	add	r24, r12
    1d70:	9d 1d       	adc	r25, r13
    1d72:	91 83       	std	Z+1, r25	; 0x01
    1d74:	80 83       	st	Z, r24
    1d76:	85 e0       	ldi	r24, 0x05	; 5
    1d78:	11 c0       	rjmp	.+34     	; 0x1d9c <Endpoint_Write_Stream_LE+0x86>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    1d7a:	8a d1       	rcall	.+788    	; 0x2090 <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1d7c:	e3 dc       	rcall	.-1594   	; 0x1744 <Endpoint_WaitUntilReady>
    1d7e:	88 23       	and	r24, r24
    1d80:	49 f0       	breq	.+18     	; 0x1d94 <Endpoint_Write_Stream_LE+0x7e>
    1d82:	0c c0       	rjmp	.+24     	; 0x1d9c <Endpoint_Write_Stream_LE+0x86>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1d84:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1d86:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1d8a:	01 50       	subi	r16, 0x01	; 1
    1d8c:	10 40       	sbci	r17, 0x00	; 0
			BytesInTransfer++;
    1d8e:	08 94       	sec
    1d90:	c1 1c       	adc	r12, r1
    1d92:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1d94:	01 15       	cp	r16, r1
    1d96:	11 05       	cpc	r17, r1
    1d98:	d9 f6       	brne	.-74     	; 0x1d50 <Endpoint_Write_Stream_LE+0x3a>
    1d9a:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1d9c:	df 91       	pop	r29
    1d9e:	cf 91       	pop	r28
    1da0:	1f 91       	pop	r17
    1da2:	0f 91       	pop	r16
    1da4:	ff 90       	pop	r15
    1da6:	ef 90       	pop	r14
    1da8:	df 90       	pop	r13
    1daa:	cf 90       	pop	r12
    1dac:	bf 90       	pop	r11
    1dae:	08 95       	ret

00001db0 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1db0:	0f 93       	push	r16
    1db2:	1f 93       	push	r17
    1db4:	df 93       	push	r29
    1db6:	cf 93       	push	r28
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
    1dbc:	ac 97       	sbiw	r28, 0x2c	; 44
    1dbe:	0f b6       	in	r0, 0x3f	; 63
    1dc0:	f8 94       	cli
    1dc2:	de bf       	out	0x3e, r29	; 62
    1dc4:	0f be       	out	0x3f, r0	; 63
    1dc6:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1dc8:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
    1dcc:	80 93 7c 02 	sts	0x027C, r24
    1dd0:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
    1dd4:	80 93 7d 02 	sts	0x027D, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    1dd8:	20 91 f1 00 	lds	r18, 0x00F1
    1ddc:	82 2f       	mov	r24, r18
				Data.Bytes[1] = UEDATX;
    1dde:	20 91 f1 00 	lds	r18, 0x00F1
    1de2:	92 2f       	mov	r25, r18
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
    1de4:	90 93 7f 02 	sts	0x027F, r25
    1de8:	80 93 7e 02 	sts	0x027E, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    1dec:	20 91 f1 00 	lds	r18, 0x00F1
    1df0:	82 2f       	mov	r24, r18
				Data.Bytes[1] = UEDATX;
    1df2:	20 91 f1 00 	lds	r18, 0x00F1
    1df6:	92 2f       	mov	r25, r18
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
    1df8:	90 93 81 02 	sts	0x0281, r25
    1dfc:	80 93 80 02 	sts	0x0280, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    1e00:	20 91 f1 00 	lds	r18, 0x00F1
    1e04:	82 2f       	mov	r24, r18
				Data.Bytes[1] = UEDATX;
    1e06:	20 91 f1 00 	lds	r18, 0x00F1
    1e0a:	92 2f       	mov	r25, r18
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
    1e0c:	90 93 83 02 	sts	0x0283, r25
    1e10:	80 93 82 02 	sts	0x0282, r24

	EVENT_USB_Device_ControlRequest();
    1e14:	0e 94 28 01 	call	0x250	; 0x250 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1e18:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1e1c:	83 ff       	sbrs	r24, 3
    1e1e:	1e c1       	rjmp	.+572    	; 0x205c <USB_Device_ProcessControlRequest+0x2ac>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1e20:	80 91 7c 02 	lds	r24, 0x027C

		switch (USB_ControlRequest.bRequest)
    1e24:	90 91 7d 02 	lds	r25, 0x027D
    1e28:	95 30       	cpi	r25, 0x05	; 5
    1e2a:	09 f4       	brne	.+2      	; 0x1e2e <USB_Device_ProcessControlRequest+0x7e>
    1e2c:	6d c0       	rjmp	.+218    	; 0x1f08 <USB_Device_ProcessControlRequest+0x158>
    1e2e:	96 30       	cpi	r25, 0x06	; 6
    1e30:	40 f4       	brcc	.+16     	; 0x1e42 <USB_Device_ProcessControlRequest+0x92>
    1e32:	91 30       	cpi	r25, 0x01	; 1
    1e34:	81 f1       	breq	.+96     	; 0x1e96 <USB_Device_ProcessControlRequest+0xe6>
    1e36:	91 30       	cpi	r25, 0x01	; 1
    1e38:	70 f0       	brcs	.+28     	; 0x1e56 <USB_Device_ProcessControlRequest+0xa6>
    1e3a:	93 30       	cpi	r25, 0x03	; 3
    1e3c:	09 f0       	breq	.+2      	; 0x1e40 <USB_Device_ProcessControlRequest+0x90>
    1e3e:	0e c1       	rjmp	.+540    	; 0x205c <USB_Device_ProcessControlRequest+0x2ac>
    1e40:	2a c0       	rjmp	.+84     	; 0x1e96 <USB_Device_ProcessControlRequest+0xe6>
    1e42:	98 30       	cpi	r25, 0x08	; 8
    1e44:	09 f4       	brne	.+2      	; 0x1e48 <USB_Device_ProcessControlRequest+0x98>
    1e46:	dc c0       	rjmp	.+440    	; 0x2000 <USB_Device_ProcessControlRequest+0x250>
    1e48:	99 30       	cpi	r25, 0x09	; 9
    1e4a:	09 f4       	brne	.+2      	; 0x1e4e <USB_Device_ProcessControlRequest+0x9e>
    1e4c:	eb c0       	rjmp	.+470    	; 0x2024 <USB_Device_ProcessControlRequest+0x274>
    1e4e:	96 30       	cpi	r25, 0x06	; 6
    1e50:	09 f0       	breq	.+2      	; 0x1e54 <USB_Device_ProcessControlRequest+0xa4>
    1e52:	04 c1       	rjmp	.+520    	; 0x205c <USB_Device_ProcessControlRequest+0x2ac>
    1e54:	7c c0       	rjmp	.+248    	; 0x1f4e <USB_Device_ProcessControlRequest+0x19e>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1e56:	80 38       	cpi	r24, 0x80	; 128
    1e58:	09 f4       	brne	.+2      	; 0x1e5c <USB_Device_ProcessControlRequest+0xac>
    1e5a:	00 c1       	rjmp	.+512    	; 0x205c <USB_Device_ProcessControlRequest+0x2ac>
    1e5c:	82 38       	cpi	r24, 0x82	; 130
    1e5e:	09 f0       	breq	.+2      	; 0x1e62 <USB_Device_ProcessControlRequest+0xb2>
    1e60:	fd c0       	rjmp	.+506    	; 0x205c <USB_Device_ProcessControlRequest+0x2ac>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1e62:	80 91 80 02 	lds	r24, 0x0280
    1e66:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1e68:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1e6c:	80 91 eb 00 	lds	r24, 0x00EB
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1e70:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e74:	20 91 e8 00 	lds	r18, 0x00E8
    1e78:	27 7f       	andi	r18, 0xF7	; 247
    1e7a:	20 93 e8 00 	sts	0x00E8, r18
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	25 e0       	ldi	r18, 0x05	; 5
    1e82:	96 95       	lsr	r25
    1e84:	87 95       	ror	r24
    1e86:	2a 95       	dec	r18
    1e88:	e1 f7       	brne	.-8      	; 0x1e82 <USB_Device_ProcessControlRequest+0xd2>
    1e8a:	81 70       	andi	r24, 0x01	; 1
    1e8c:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1e90:	10 92 f1 00 	sts	0x00F1, r1
    1e94:	c0 c0       	rjmp	.+384    	; 0x2016 <USB_Device_ProcessControlRequest+0x266>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1e96:	88 23       	and	r24, r24
    1e98:	19 f0       	breq	.+6      	; 0x1ea0 <USB_Device_ProcessControlRequest+0xf0>
    1e9a:	82 30       	cpi	r24, 0x02	; 2
    1e9c:	09 f0       	breq	.+2      	; 0x1ea0 <USB_Device_ProcessControlRequest+0xf0>
    1e9e:	de c0       	rjmp	.+444    	; 0x205c <USB_Device_ProcessControlRequest+0x2ac>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1ea0:	8f 71       	andi	r24, 0x1F	; 31
    1ea2:	82 30       	cpi	r24, 0x02	; 2
    1ea4:	09 f0       	breq	.+2      	; 0x1ea8 <USB_Device_ProcessControlRequest+0xf8>
    1ea6:	da c0       	rjmp	.+436    	; 0x205c <USB_Device_ProcessControlRequest+0x2ac>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1ea8:	80 91 7e 02 	lds	r24, 0x027E
    1eac:	88 23       	and	r24, r24
    1eae:	31 f5       	brne	.+76     	; 0x1efc <USB_Device_ProcessControlRequest+0x14c>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1eb0:	20 91 80 02 	lds	r18, 0x0280
    1eb4:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1eb6:	09 f4       	brne	.+2      	; 0x1eba <USB_Device_ProcessControlRequest+0x10a>
    1eb8:	d1 c0       	rjmp	.+418    	; 0x205c <USB_Device_ProcessControlRequest+0x2ac>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1eba:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1ebe:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1ec2:	80 ff       	sbrs	r24, 0
    1ec4:	1b c0       	rjmp	.+54     	; 0x1efc <USB_Device_ProcessControlRequest+0x14c>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1ec6:	93 30       	cpi	r25, 0x03	; 3
    1ec8:	21 f4       	brne	.+8      	; 0x1ed2 <USB_Device_ProcessControlRequest+0x122>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1eca:	80 91 eb 00 	lds	r24, 0x00EB
    1ece:	80 62       	ori	r24, 0x20	; 32
    1ed0:	13 c0       	rjmp	.+38     	; 0x1ef8 <USB_Device_ProcessControlRequest+0x148>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1ed2:	80 91 eb 00 	lds	r24, 0x00EB
    1ed6:	80 61       	ori	r24, 0x10	; 16
    1ed8:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	02 c0       	rjmp	.+4      	; 0x1ee6 <USB_Device_ProcessControlRequest+0x136>
    1ee2:	88 0f       	add	r24, r24
    1ee4:	99 1f       	adc	r25, r25
    1ee6:	2a 95       	dec	r18
    1ee8:	e2 f7       	brpl	.-8      	; 0x1ee2 <USB_Device_ProcessControlRequest+0x132>
    1eea:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1eee:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1ef2:	80 91 eb 00 	lds	r24, 0x00EB
    1ef6:	88 60       	ori	r24, 0x08	; 8
    1ef8:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1efc:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f00:	80 91 e8 00 	lds	r24, 0x00E8
    1f04:	87 7f       	andi	r24, 0xF7	; 247
    1f06:	8a c0       	rjmp	.+276    	; 0x201c <USB_Device_ProcessControlRequest+0x26c>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1f08:	88 23       	and	r24, r24
    1f0a:	09 f0       	breq	.+2      	; 0x1f0e <USB_Device_ProcessControlRequest+0x15e>
    1f0c:	a7 c0       	rjmp	.+334    	; 0x205c <USB_Device_ProcessControlRequest+0x2ac>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    1f0e:	10 91 7e 02 	lds	r17, 0x027E
    1f12:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1f14:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1f16:	f8 94       	cli
    1f18:	80 91 e8 00 	lds	r24, 0x00E8
    1f1c:	87 7f       	andi	r24, 0xF7	; 247
    1f1e:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1f22:	f1 db       	rcall	.-2078   	; 0x1706 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1f24:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1f28:	80 ff       	sbrs	r24, 0
    1f2a:	fc cf       	rjmp	.-8      	; 0x1f24 <USB_Device_ProcessControlRequest+0x174>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1f2c:	80 91 e3 00 	lds	r24, 0x00E3
    1f30:	80 78       	andi	r24, 0x80	; 128
    1f32:	81 2b       	or	r24, r17

				UDADDR = Temp;
    1f34:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    1f38:	80 68       	ori	r24, 0x80	; 128
    1f3a:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1f3e:	11 23       	and	r17, r17
    1f40:	11 f4       	brne	.+4      	; 0x1f46 <USB_Device_ProcessControlRequest+0x196>
    1f42:	82 e0       	ldi	r24, 0x02	; 2
    1f44:	01 c0       	rjmp	.+2      	; 0x1f48 <USB_Device_ProcessControlRequest+0x198>
    1f46:	83 e0       	ldi	r24, 0x03	; 3
    1f48:	8e bb       	out	0x1e, r24	; 30
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1f4a:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
    1f4c:	87 c0       	rjmp	.+270    	; 0x205c <USB_Device_ProcessControlRequest+0x2ac>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1f4e:	80 58       	subi	r24, 0x80	; 128
    1f50:	82 30       	cpi	r24, 0x02	; 2
    1f52:	08 f0       	brcs	.+2      	; 0x1f56 <USB_Device_ProcessControlRequest+0x1a6>
    1f54:	83 c0       	rjmp	.+262    	; 0x205c <USB_Device_ProcessControlRequest+0x2ac>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1f56:	80 91 7e 02 	lds	r24, 0x027E
    1f5a:	90 91 7f 02 	lds	r25, 0x027F
    1f5e:	23 e0       	ldi	r18, 0x03	; 3
    1f60:	8c 3d       	cpi	r24, 0xDC	; 220
    1f62:	92 07       	cpc	r25, r18
    1f64:	09 f0       	breq	.+2      	; 0x1f68 <USB_Device_ProcessControlRequest+0x1b8>
    1f66:	33 c0       	rjmp	.+102    	; 0x1fce <USB_Device_ProcessControlRequest+0x21e>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1f68:	83 e0       	ldi	r24, 0x03	; 3
    1f6a:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1f6c:	8a e2       	ldi	r24, 0x2A	; 42
    1f6e:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1f70:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1f72:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1f74:	de 01       	movw	r26, r28
    1f76:	15 96       	adiw	r26, 0x05	; 5
    1f78:	6e e0       	ldi	r22, 0x0E	; 14
    1f7a:	40 e0       	ldi	r20, 0x00	; 0
    1f7c:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1f7e:	11 e2       	ldi	r17, 0x21	; 33
    1f80:	e6 2f       	mov	r30, r22
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	10 93 57 00 	sts	0x0057, r17
    1f88:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
    1f8a:	40 ff       	sbrs	r20, 0
    1f8c:	03 c0       	rjmp	.+6      	; 0x1f94 <USB_Device_ProcessControlRequest+0x1e4>
					{
						SerialByte >>= 4;
    1f8e:	82 95       	swap	r24
    1f90:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    1f92:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1f94:	8f 70       	andi	r24, 0x0F	; 15
    1f96:	28 2f       	mov	r18, r24
    1f98:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1f9a:	8a 30       	cpi	r24, 0x0A	; 10
    1f9c:	18 f0       	brcs	.+6      	; 0x1fa4 <USB_Device_ProcessControlRequest+0x1f4>
    1f9e:	c9 01       	movw	r24, r18
    1fa0:	c7 96       	adiw	r24, 0x37	; 55
    1fa2:	02 c0       	rjmp	.+4      	; 0x1fa8 <USB_Device_ProcessControlRequest+0x1f8>
    1fa4:	c9 01       	movw	r24, r18
    1fa6:	c0 96       	adiw	r24, 0x30	; 48
    1fa8:	8d 93       	st	X+, r24
    1faa:	9d 93       	st	X+, r25
    1fac:	4f 5f       	subi	r20, 0xFF	; 255
    1fae:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1fb0:	44 31       	cpi	r20, 0x14	; 20
    1fb2:	51 05       	cpc	r21, r1
    1fb4:	29 f7       	brne	.-54     	; 0x1f80 <USB_Device_ProcessControlRequest+0x1d0>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1fb6:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1fb8:	80 91 e8 00 	lds	r24, 0x00E8
    1fbc:	87 7f       	andi	r24, 0xF7	; 247
    1fbe:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1fc2:	ce 01       	movw	r24, r28
    1fc4:	03 96       	adiw	r24, 0x03	; 3
    1fc6:	6a e2       	ldi	r22, 0x2A	; 42
    1fc8:	70 e0       	ldi	r23, 0x00	; 0
    1fca:	0d dd       	rcall	.-1510   	; 0x19e6 <Endpoint_Write_Control_Stream_LE>
    1fcc:	13 c0       	rjmp	.+38     	; 0x1ff4 <USB_Device_ProcessControlRequest+0x244>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1fce:	60 91 80 02 	lds	r22, 0x0280
    1fd2:	ae 01       	movw	r20, r28
    1fd4:	4f 5f       	subi	r20, 0xFF	; 255
    1fd6:	5f 4f       	sbci	r21, 0xFF	; 255
    1fd8:	0e 94 1f 01 	call	0x23e	; 0x23e <CALLBACK_USB_GetDescriptor>
    1fdc:	bc 01       	movw	r22, r24
    1fde:	00 97       	sbiw	r24, 0x00	; 0
    1fe0:	09 f4       	brne	.+2      	; 0x1fe4 <USB_Device_ProcessControlRequest+0x234>
    1fe2:	3c c0       	rjmp	.+120    	; 0x205c <USB_Device_ProcessControlRequest+0x2ac>
    1fe4:	80 91 e8 00 	lds	r24, 0x00E8
    1fe8:	87 7f       	andi	r24, 0xF7	; 247
    1fea:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
    1ff0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff2:	94 dd       	rcall	.-1240   	; 0x1b1c <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1ff4:	80 91 e8 00 	lds	r24, 0x00E8
    1ff8:	8b 77       	andi	r24, 0x7B	; 123
    1ffa:	80 93 e8 00 	sts	0x00E8, r24
    1ffe:	2e c0       	rjmp	.+92     	; 0x205c <USB_Device_ProcessControlRequest+0x2ac>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    2000:	80 38       	cpi	r24, 0x80	; 128
    2002:	61 f5       	brne	.+88     	; 0x205c <USB_Device_ProcessControlRequest+0x2ac>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2004:	80 91 e8 00 	lds	r24, 0x00E8
    2008:	87 7f       	andi	r24, 0xF7	; 247
    200a:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    200e:	80 91 7a 02 	lds	r24, 0x027A
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2012:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2016:	80 91 e8 00 	lds	r24, 0x00E8
    201a:	8e 77       	andi	r24, 0x7E	; 126
    201c:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    2020:	72 db       	rcall	.-2332   	; 0x1706 <Endpoint_ClearStatusStage>
    2022:	1c c0       	rjmp	.+56     	; 0x205c <USB_Device_ProcessControlRequest+0x2ac>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2024:	88 23       	and	r24, r24
    2026:	d1 f4       	brne	.+52     	; 0x205c <USB_Device_ProcessControlRequest+0x2ac>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    2028:	90 91 7e 02 	lds	r25, 0x027E
    202c:	92 30       	cpi	r25, 0x02	; 2
    202e:	b0 f4       	brcc	.+44     	; 0x205c <USB_Device_ProcessControlRequest+0x2ac>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2030:	80 91 e8 00 	lds	r24, 0x00E8
    2034:	87 7f       	andi	r24, 0xF7	; 247
    2036:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    203a:	90 93 7a 02 	sts	0x027A, r25

	Endpoint_ClearStatusStage();
    203e:	63 db       	rcall	.-2362   	; 0x1706 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    2040:	80 91 7a 02 	lds	r24, 0x027A
    2044:	88 23       	and	r24, r24
    2046:	31 f4       	brne	.+12     	; 0x2054 <USB_Device_ProcessControlRequest+0x2a4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2048:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    204c:	87 fd       	sbrc	r24, 7
    204e:	02 c0       	rjmp	.+4      	; 0x2054 <USB_Device_ProcessControlRequest+0x2a4>
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	01 c0       	rjmp	.+2      	; 0x2056 <USB_Device_ProcessControlRequest+0x2a6>
    2054:	84 e0       	ldi	r24, 0x04	; 4
    2056:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
    2058:	0e 94 31 01 	call	0x262	; 0x262 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    205c:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    2060:	83 ff       	sbrs	r24, 3
    2062:	0a c0       	rjmp	.+20     	; 0x2078 <USB_Device_ProcessControlRequest+0x2c8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2064:	80 91 eb 00 	lds	r24, 0x00EB
    2068:	80 62       	ori	r24, 0x20	; 32
    206a:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    206e:	80 91 e8 00 	lds	r24, 0x00E8
    2072:	87 7f       	andi	r24, 0xF7	; 247
    2074:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    2078:	ac 96       	adiw	r28, 0x2c	; 44
    207a:	0f b6       	in	r0, 0x3f	; 63
    207c:	f8 94       	cli
    207e:	de bf       	out	0x3e, r29	; 62
    2080:	0f be       	out	0x3f, r0	; 63
    2082:	cd bf       	out	0x3d, r28	; 61
    2084:	cf 91       	pop	r28
    2086:	df 91       	pop	r29
    2088:	1f 91       	pop	r17
    208a:	0f 91       	pop	r16
    208c:	08 95       	ret

0000208e <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    208e:	08 95       	ret

00002090 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    2090:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    2092:	8e b3       	in	r24, 0x1e	; 30
    2094:	88 23       	and	r24, r24
    2096:	61 f0       	breq	.+24     	; 0x20b0 <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    2098:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    209c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    20a0:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    20a4:	83 ff       	sbrs	r24, 3
    20a6:	01 c0       	rjmp	.+2      	; 0x20aa <USB_USBTask+0x1a>
		  USB_Device_ProcessControlRequest();
    20a8:	83 de       	rcall	.-762    	; 0x1db0 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    20aa:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    20ac:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    20b0:	1f 91       	pop	r17
    20b2:	08 95       	ret

000020b4 <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    20b4:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    20b6:	8e b3       	in	r24, 0x1e	; 30
    20b8:	84 30       	cpi	r24, 0x04	; 4
    20ba:	41 f5       	brne	.+80     	; 0x210c <__stack+0xd>
    20bc:	87 85       	ldd	r24, Z+15	; 0x0f
    20be:	90 89       	ldd	r25, Z+16	; 0x10
    20c0:	a1 89       	ldd	r26, Z+17	; 0x11
    20c2:	b2 89       	ldd	r27, Z+18	; 0x12
    20c4:	00 97       	sbiw	r24, 0x00	; 0
    20c6:	a1 05       	cpc	r26, r1
    20c8:	b1 05       	cpc	r27, r1
    20ca:	01 f1       	breq	.+64     	; 0x210c <__stack+0xd>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
    20cc:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    20ce:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    20d2:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsOUTReceived())
    20d6:	82 ff       	sbrs	r24, 2
    20d8:	19 c0       	rjmp	.+50     	; 0x210c <__stack+0xd>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    20da:	80 91 f2 00 	lds	r24, 0x00F2
    20de:	90 91 f3 00 	lds	r25, 0x00F3
	{
		if (Endpoint_BytesInEndpoint())
    20e2:	89 2b       	or	r24, r25
    20e4:	19 f4       	brne	.+6      	; 0x20ec <CDC_Device_ReceiveByte+0x38>
    20e6:	2f ef       	ldi	r18, 0xFF	; 255
    20e8:	3f ef       	ldi	r19, 0xFF	; 255
    20ea:	04 c0       	rjmp	.+8      	; 0x20f4 <CDC_Device_ReceiveByte+0x40>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    20ec:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    20f0:	28 2f       	mov	r18, r24
    20f2:	30 e0       	ldi	r19, 0x00	; 0
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    20f4:	80 91 f2 00 	lds	r24, 0x00F2
    20f8:	90 91 f3 00 	lds	r25, 0x00F3

		if (!(Endpoint_BytesInEndpoint()))
    20fc:	89 2b       	or	r24, r25
    20fe:	41 f4       	brne	.+16     	; 0x2110 <__stack+0x11>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2100:	80 91 e8 00 	lds	r24, 0x00E8
    2104:	8b 77       	andi	r24, 0x7B	; 123
    2106:	80 93 e8 00 	sts	0x00E8, r24
    210a:	02 c0       	rjmp	.+4      	; 0x2110 <__stack+0x11>
    210c:	2f ef       	ldi	r18, 0xFF	; 255
    210e:	3f ef       	ldi	r19, 0xFF	; 255
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    2110:	c9 01       	movw	r24, r18
    2112:	08 95       	ret

00002114 <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
    2114:	08 95       	ret

00002116 <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    2116:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    2118:	8e b3       	in	r24, 0x1e	; 30
    211a:	84 30       	cpi	r24, 0x04	; 4
    211c:	21 f5       	brne	.+72     	; 0x2166 <CDC_Device_Flush+0x50>
    211e:	87 85       	ldd	r24, Z+15	; 0x0f
    2120:	90 89       	ldd	r25, Z+16	; 0x10
    2122:	a1 89       	ldd	r26, Z+17	; 0x11
    2124:	b2 89       	ldd	r27, Z+18	; 0x12
    2126:	00 97       	sbiw	r24, 0x00	; 0
    2128:	a1 05       	cpc	r26, r1
    212a:	b1 05       	cpc	r27, r1
    212c:	e1 f0       	breq	.+56     	; 0x2166 <CDC_Device_Flush+0x50>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
    212e:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    2130:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    2134:	80 91 f2 00 	lds	r24, 0x00F2
    2138:	90 91 f3 00 	lds	r25, 0x00F3

	if (!(Endpoint_BytesInEndpoint()))
    213c:	89 2b       	or	r24, r25
    213e:	a9 f0       	breq	.+42     	; 0x216a <CDC_Device_Flush+0x54>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2140:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2144:	80 91 e8 00 	lds	r24, 0x00E8
    2148:	8e 77       	andi	r24, 0x7E	; 126
    214a:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    214e:	95 fd       	sbrc	r25, 5
    2150:	0c c0       	rjmp	.+24     	; 0x216a <CDC_Device_Flush+0x54>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    2152:	f8 da       	rcall	.-2576   	; 0x1744 <Endpoint_WaitUntilReady>
    2154:	98 2f       	mov	r25, r24
    2156:	88 23       	and	r24, r24
    2158:	49 f4       	brne	.+18     	; 0x216c <CDC_Device_Flush+0x56>
    215a:	80 91 e8 00 	lds	r24, 0x00E8
    215e:	8e 77       	andi	r24, 0x7E	; 126
    2160:	80 93 e8 00 	sts	0x00E8, r24
    2164:	03 c0       	rjmp	.+6      	; 0x216c <CDC_Device_Flush+0x56>
    2166:	92 e0       	ldi	r25, 0x02	; 2
    2168:	01 c0       	rjmp	.+2      	; 0x216c <CDC_Device_Flush+0x56>
    216a:	90 e0       	ldi	r25, 0x00	; 0

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
    216c:	89 2f       	mov	r24, r25
    216e:	08 95       	ret

00002170 <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    2170:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    2172:	8e b3       	in	r24, 0x1e	; 30
    2174:	84 30       	cpi	r24, 0x04	; 4
    2176:	51 f4       	brne	.+20     	; 0x218c <CDC_Device_USBTask+0x1c>
    2178:	87 85       	ldd	r24, Z+15	; 0x0f
    217a:	90 89       	ldd	r25, Z+16	; 0x10
    217c:	a1 89       	ldd	r26, Z+17	; 0x11
    217e:	b2 89       	ldd	r27, Z+18	; 0x12
    2180:	00 97       	sbiw	r24, 0x00	; 0
    2182:	a1 05       	cpc	r26, r1
    2184:	b1 05       	cpc	r27, r1
    2186:	11 f0       	breq	.+4      	; 0x218c <CDC_Device_USBTask+0x1c>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Device_Flush(CDCInterfaceInfo);
    2188:	cf 01       	movw	r24, r30
    218a:	c5 cf       	rjmp	.-118    	; 0x2116 <CDC_Device_Flush>
    218c:	08 95       	ret

0000218e <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    218e:	1f 93       	push	r17
    2190:	fc 01       	movw	r30, r24
    2192:	16 2f       	mov	r17, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    2194:	8e b3       	in	r24, 0x1e	; 30
    2196:	84 30       	cpi	r24, 0x04	; 4
    2198:	d9 f4       	brne	.+54     	; 0x21d0 <CDC_Device_SendByte+0x42>
    219a:	87 85       	ldd	r24, Z+15	; 0x0f
    219c:	90 89       	ldd	r25, Z+16	; 0x10
    219e:	a1 89       	ldd	r26, Z+17	; 0x11
    21a0:	b2 89       	ldd	r27, Z+18	; 0x12
    21a2:	00 97       	sbiw	r24, 0x00	; 0
    21a4:	a1 05       	cpc	r26, r1
    21a6:	b1 05       	cpc	r27, r1
    21a8:	99 f0       	breq	.+38     	; 0x21d0 <CDC_Device_SendByte+0x42>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
    21aa:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    21ac:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    21b0:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
    21b4:	85 fd       	sbrc	r24, 5
    21b6:	08 c0       	rjmp	.+16     	; 0x21c8 <CDC_Device_SendByte+0x3a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    21b8:	80 91 e8 00 	lds	r24, 0x00E8
    21bc:	8e 77       	andi	r24, 0x7E	; 126
    21be:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    21c2:	c0 da       	rcall	.-2688   	; 0x1744 <Endpoint_WaitUntilReady>
    21c4:	88 23       	and	r24, r24
    21c6:	29 f4       	brne	.+10     	; 0x21d2 <CDC_Device_SendByte+0x44>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    21c8:	10 93 f1 00 	sts	0x00F1, r17
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	01 c0       	rjmp	.+2      	; 0x21d2 <CDC_Device_SendByte+0x44>
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    21d0:	82 e0       	ldi	r24, 0x02	; 2
}
    21d2:	1f 91       	pop	r17
    21d4:	08 95       	ret

000021d6 <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    21d6:	1f 93       	push	r17
    21d8:	cf 93       	push	r28
    21da:	df 93       	push	r29
    21dc:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    21de:	2d 96       	adiw	r28, 0x0d	; 13
    21e0:	89 e0       	ldi	r24, 0x09	; 9
    21e2:	fe 01       	movw	r30, r28
    21e4:	11 92       	st	Z+, r1
    21e6:	8a 95       	dec	r24
    21e8:	e9 f7       	brne	.-6      	; 0x21e4 <CDC_Device_ConfigureEndpoints+0xe>
    21ea:	2d 97       	sbiw	r28, 0x0d	; 13
    21ec:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == CDCInterfaceInfo->Config.DataINEndpointNumber)
    21ee:	89 81       	ldd	r24, Y+1	; 0x01
    21f0:	18 17       	cp	r17, r24
    21f2:	29 f4       	brne	.+10     	; 0x21fe <CDC_Device_ConfigureEndpoints+0x28>
		{
			Size         = CDCInterfaceInfo->Config.DataINEndpointSize;
    21f4:	6a 81       	ldd	r22, Y+2	; 0x02
    21f6:	7b 81       	ldd	r23, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataINEndpointDoubleBank;
    21f8:	8c 81       	ldd	r24, Y+4	; 0x04
    21fa:	52 e0       	ldi	r21, 0x02	; 2
    21fc:	10 c0       	rjmp	.+32     	; 0x221e <CDC_Device_ConfigureEndpoints+0x48>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.DataOUTEndpointNumber)
    21fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2200:	18 17       	cp	r17, r24
    2202:	31 f4       	brne	.+12     	; 0x2210 <CDC_Device_ConfigureEndpoints+0x3a>
		{
			Size         = CDCInterfaceInfo->Config.DataOUTEndpointSize;
    2204:	6e 81       	ldd	r22, Y+6	; 0x06
    2206:	7f 81       	ldd	r23, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
    2208:	88 85       	ldd	r24, Y+8	; 0x08
    220a:	52 e0       	ldi	r21, 0x02	; 2
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	08 c0       	rjmp	.+16     	; 0x2220 <CDC_Device_ConfigureEndpoints+0x4a>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.NotificationEndpointNumber)
    2210:	89 85       	ldd	r24, Y+9	; 0x09
    2212:	18 17       	cp	r17, r24
    2214:	39 f5       	brne	.+78     	; 0x2264 <CDC_Device_ConfigureEndpoints+0x8e>
		{
			Size         = CDCInterfaceInfo->Config.NotificationEndpointSize;
    2216:	6a 85       	ldd	r22, Y+10	; 0x0a
    2218:	7b 85       	ldd	r23, Y+11	; 0x0b
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_INTERRUPT;
			DoubleBanked = CDCInterfaceInfo->Config.NotificationEndpointDoubleBank;
    221a:	8c 85       	ldd	r24, Y+12	; 0x0c
    221c:	53 e0       	ldi	r21, 0x03	; 3
    221e:	30 e8       	ldi	r19, 0x80	; 128
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
    2220:	88 23       	and	r24, r24
    2222:	11 f4       	brne	.+4      	; 0x2228 <CDC_Device_ConfigureEndpoints+0x52>
    2224:	40 e0       	ldi	r20, 0x00	; 0
    2226:	01 c0       	rjmp	.+2      	; 0x222a <CDC_Device_ConfigureEndpoints+0x54>
    2228:	44 e0       	ldi	r20, 0x04	; 4
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	88 e0       	ldi	r24, 0x08	; 8
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	03 c0       	rjmp	.+6      	; 0x2238 <CDC_Device_ConfigureEndpoints+0x62>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    2232:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    2234:	88 0f       	add	r24, r24
    2236:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    2238:	86 17       	cp	r24, r22
    223a:	97 07       	cpc	r25, r23
    223c:	d0 f3       	brcs	.-12     	; 0x2232 <CDC_Device_ConfigureEndpoints+0x5c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    223e:	85 2f       	mov	r24, r21
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	56 e0       	ldi	r21, 0x06	; 6
    2244:	88 0f       	add	r24, r24
    2246:	99 1f       	adc	r25, r25
    2248:	5a 95       	dec	r21
    224a:	e1 f7       	brne	.-8      	; 0x2244 <CDC_Device_ConfigureEndpoints+0x6e>
    224c:	60 e0       	ldi	r22, 0x00	; 0
    224e:	31 11       	cpse	r19, r1
    2250:	61 e0       	ldi	r22, 0x01	; 1
    2252:	68 2b       	or	r22, r24
    2254:	42 60       	ori	r20, 0x02	; 2
    2256:	22 95       	swap	r18
    2258:	20 7f       	andi	r18, 0xF0	; 240
    225a:	42 2b       	or	r20, r18
    225c:	81 2f       	mov	r24, r17
    225e:	40 da       	rcall	.-2944   	; 0x16e0 <Endpoint_ConfigureEndpoint_Prv>
    2260:	88 23       	and	r24, r24
    2262:	29 f0       	breq	.+10     	; 0x226e <CDC_Device_ConfigureEndpoints+0x98>

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    2264:	1f 5f       	subi	r17, 0xFF	; 255
    2266:	17 30       	cpi	r17, 0x07	; 7
    2268:	09 f0       	breq	.+2      	; 0x226c <CDC_Device_ConfigureEndpoints+0x96>
    226a:	c1 cf       	rjmp	.-126    	; 0x21ee <CDC_Device_ConfigureEndpoints+0x18>
    226c:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
    226e:	df 91       	pop	r29
    2270:	cf 91       	pop	r28
    2272:	1f 91       	pop	r17
    2274:	08 95       	ret

00002276 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDC.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    2276:	cf 93       	push	r28
    2278:	df 93       	push	r29
    227a:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    227c:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    2280:	83 ff       	sbrs	r24, 3
    2282:	64 c0       	rjmp	.+200    	; 0x234c <CDC_Device_ProcessControlRequest+0xd6>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    2284:	88 81       	ld	r24, Y
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	20 91 80 02 	lds	r18, 0x0280
    228c:	30 91 81 02 	lds	r19, 0x0281
    2290:	28 17       	cp	r18, r24
    2292:	39 07       	cpc	r19, r25
    2294:	09 f0       	breq	.+2      	; 0x2298 <CDC_Device_ProcessControlRequest+0x22>
    2296:	5a c0       	rjmp	.+180    	; 0x234c <CDC_Device_ProcessControlRequest+0xd6>
	  return;

	switch (USB_ControlRequest.bRequest)
    2298:	80 91 7d 02 	lds	r24, 0x027D
    229c:	81 32       	cpi	r24, 0x21	; 33
    229e:	61 f0       	breq	.+24     	; 0x22b8 <CDC_Device_ProcessControlRequest+0x42>
    22a0:	82 32       	cpi	r24, 0x22	; 34
    22a2:	20 f4       	brcc	.+8      	; 0x22ac <CDC_Device_ProcessControlRequest+0x36>
    22a4:	80 32       	cpi	r24, 0x20	; 32
    22a6:	09 f0       	breq	.+2      	; 0x22aa <CDC_Device_ProcessControlRequest+0x34>
    22a8:	51 c0       	rjmp	.+162    	; 0x234c <CDC_Device_ProcessControlRequest+0xd6>
    22aa:	1b c0       	rjmp	.+54     	; 0x22e2 <CDC_Device_ProcessControlRequest+0x6c>
    22ac:	82 32       	cpi	r24, 0x22	; 34
    22ae:	81 f1       	breq	.+96     	; 0x2310 <CDC_Device_ProcessControlRequest+0x9a>
    22b0:	83 32       	cpi	r24, 0x23	; 35
    22b2:	09 f0       	breq	.+2      	; 0x22b6 <CDC_Device_ProcessControlRequest+0x40>
    22b4:	4b c0       	rjmp	.+150    	; 0x234c <CDC_Device_ProcessControlRequest+0xd6>
    22b6:	3c c0       	rjmp	.+120    	; 0x2330 <CDC_Device_ProcessControlRequest+0xba>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    22b8:	80 91 7c 02 	lds	r24, 0x027C
    22bc:	81 3a       	cpi	r24, 0xA1	; 161
    22be:	09 f0       	breq	.+2      	; 0x22c2 <CDC_Device_ProcessControlRequest+0x4c>
    22c0:	45 c0       	rjmp	.+138    	; 0x234c <CDC_Device_ProcessControlRequest+0xd6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    22c2:	80 91 e8 00 	lds	r24, 0x00E8
    22c6:	87 7f       	andi	r24, 0xF7	; 247
    22c8:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
    22cc:	ce 01       	movw	r24, r28
    22ce:	0f 96       	adiw	r24, 0x0f	; 15
    22d0:	67 e0       	ldi	r22, 0x07	; 7
    22d2:	70 e0       	ldi	r23, 0x00	; 0
    22d4:	88 db       	rcall	.-2288   	; 0x19e6 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    22d6:	80 91 e8 00 	lds	r24, 0x00E8
    22da:	8b 77       	andi	r24, 0x7B	; 123
    22dc:	80 93 e8 00 	sts	0x00E8, r24
    22e0:	35 c0       	rjmp	.+106    	; 0x234c <CDC_Device_ProcessControlRequest+0xd6>
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    22e2:	80 91 7c 02 	lds	r24, 0x027C
    22e6:	81 32       	cpi	r24, 0x21	; 33
    22e8:	89 f5       	brne	.+98     	; 0x234c <CDC_Device_ProcessControlRequest+0xd6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    22ea:	80 91 e8 00 	lds	r24, 0x00E8
    22ee:	87 7f       	andi	r24, 0xF7	; 247
    22f0:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
    22f4:	ce 01       	movw	r24, r28
    22f6:	0f 96       	adiw	r24, 0x0f	; 15
    22f8:	67 e0       	ldi	r22, 0x07	; 7
    22fa:	70 e0       	ldi	r23, 0x00	; 0
    22fc:	d0 db       	rcall	.-2144   	; 0x1a9e <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    22fe:	80 91 e8 00 	lds	r24, 0x00E8
    2302:	8e 77       	andi	r24, 0x7E	; 126
    2304:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    2308:	ce 01       	movw	r24, r28
    230a:	0e 94 09 01 	call	0x212	; 0x212 <EVENT_CDC_Device_LineEncodingChanged>
    230e:	1e c0       	rjmp	.+60     	; 0x234c <CDC_Device_ProcessControlRequest+0xd6>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2310:	80 91 7c 02 	lds	r24, 0x027C
    2314:	81 32       	cpi	r24, 0x21	; 33
    2316:	d1 f4       	brne	.+52     	; 0x234c <CDC_Device_ProcessControlRequest+0xd6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2318:	80 91 e8 00 	lds	r24, 0x00E8
    231c:	87 7f       	andi	r24, 0xF7	; 247
    231e:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    2322:	f1 d9       	rcall	.-3102   	; 0x1706 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    2324:	80 91 7e 02 	lds	r24, 0x027E
    2328:	8d 87       	std	Y+13, r24	; 0x0d

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    232a:	ce 01       	movw	r24, r28
    232c:	f3 de       	rcall	.-538    	; 0x2114 <CDC_Device_Event_Stub>
    232e:	0e c0       	rjmp	.+28     	; 0x234c <CDC_Device_ProcessControlRequest+0xd6>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2330:	80 91 7c 02 	lds	r24, 0x027C
    2334:	81 32       	cpi	r24, 0x21	; 33
    2336:	51 f4       	brne	.+20     	; 0x234c <CDC_Device_ProcessControlRequest+0xd6>
    2338:	80 91 e8 00 	lds	r24, 0x00E8
    233c:	87 7f       	andi	r24, 0xF7	; 247
    233e:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    2342:	e1 d9       	rcall	.-3134   	; 0x1706 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    2344:	ce 01       	movw	r24, r28
    2346:	60 91 7e 02 	lds	r22, 0x027E
    234a:	e4 de       	rcall	.-568    	; 0x2114 <CDC_Device_Event_Stub>
			}

			break;
	}
}
    234c:	df 91       	pop	r29
    234e:	cf 91       	pop	r28
    2350:	08 95       	ret

00002352 <__udivmodsi4>:
    2352:	a1 e2       	ldi	r26, 0x21	; 33
    2354:	1a 2e       	mov	r1, r26
    2356:	aa 1b       	sub	r26, r26
    2358:	bb 1b       	sub	r27, r27
    235a:	fd 01       	movw	r30, r26
    235c:	0d c0       	rjmp	.+26     	; 0x2378 <__udivmodsi4_ep>

0000235e <__udivmodsi4_loop>:
    235e:	aa 1f       	adc	r26, r26
    2360:	bb 1f       	adc	r27, r27
    2362:	ee 1f       	adc	r30, r30
    2364:	ff 1f       	adc	r31, r31
    2366:	a2 17       	cp	r26, r18
    2368:	b3 07       	cpc	r27, r19
    236a:	e4 07       	cpc	r30, r20
    236c:	f5 07       	cpc	r31, r21
    236e:	20 f0       	brcs	.+8      	; 0x2378 <__udivmodsi4_ep>
    2370:	a2 1b       	sub	r26, r18
    2372:	b3 0b       	sbc	r27, r19
    2374:	e4 0b       	sbc	r30, r20
    2376:	f5 0b       	sbc	r31, r21

00002378 <__udivmodsi4_ep>:
    2378:	66 1f       	adc	r22, r22
    237a:	77 1f       	adc	r23, r23
    237c:	88 1f       	adc	r24, r24
    237e:	99 1f       	adc	r25, r25
    2380:	1a 94       	dec	r1
    2382:	69 f7       	brne	.-38     	; 0x235e <__udivmodsi4_loop>
    2384:	60 95       	com	r22
    2386:	70 95       	com	r23
    2388:	80 95       	com	r24
    238a:	90 95       	com	r25
    238c:	9b 01       	movw	r18, r22
    238e:	ac 01       	movw	r20, r24
    2390:	bd 01       	movw	r22, r26
    2392:	cf 01       	movw	r24, r30
    2394:	08 95       	ret

00002396 <__eerd_byte_usb1287>:
    2396:	f9 99       	sbic	0x1f, 1	; 31
    2398:	fe cf       	rjmp	.-4      	; 0x2396 <__eerd_byte_usb1287>
    239a:	92 bd       	out	0x22, r25	; 34
    239c:	81 bd       	out	0x21, r24	; 33
    239e:	f8 9a       	sbi	0x1f, 0	; 31
    23a0:	99 27       	eor	r25, r25
    23a2:	80 b5       	in	r24, 0x20	; 32
    23a4:	08 95       	ret

000023a6 <__eeupd_byte_usb1287>:
    23a6:	26 2f       	mov	r18, r22

000023a8 <__eeupd_r18_usb1287>:
    23a8:	f9 99       	sbic	0x1f, 1	; 31
    23aa:	fe cf       	rjmp	.-4      	; 0x23a8 <__eeupd_r18_usb1287>
    23ac:	92 bd       	out	0x22, r25	; 34
    23ae:	81 bd       	out	0x21, r24	; 33
    23b0:	f8 9a       	sbi	0x1f, 0	; 31
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	00 b4       	in	r0, 0x20	; 32
    23b6:	02 16       	cp	r0, r18
    23b8:	39 f0       	breq	.+14     	; 0x23c8 <__eeupd_r18_usb1287+0x20>
    23ba:	1f ba       	out	0x1f, r1	; 31
    23bc:	20 bd       	out	0x20, r18	; 32
    23be:	0f b6       	in	r0, 0x3f	; 63
    23c0:	f8 94       	cli
    23c2:	fa 9a       	sbi	0x1f, 2	; 31
    23c4:	f9 9a       	sbi	0x1f, 1	; 31
    23c6:	0f be       	out	0x3f, r0	; 63
    23c8:	08 95       	ret

000023ca <_exit>:
    23ca:	f8 94       	cli

000023cc <__stop_program>:
    23cc:	ff cf       	rjmp	.-2      	; 0x23cc <__stop_program>
